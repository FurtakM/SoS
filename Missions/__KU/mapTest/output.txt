// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// uc_side := 3 ;
   9: LD_ADDR_OWVAR 20
  13: PUSH
  14: LD_INT 3
  16: ST_TO_ADDR
// uc_nation := nation_russian ;
  17: LD_ADDR_OWVAR 21
  21: PUSH
  22: LD_INT 3
  24: ST_TO_ADDR
// ruForces := [ ] ;
  25: LD_ADDR_EXP 1
  29: PUSH
  30: EMPTY
  31: ST_TO_ADDR
// ruForces2 := [ ] ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// ruMech := [ ] ;
  39: LD_ADDR_EXP 5
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// ruMech2 := [ ] ;
  46: LD_ADDR_EXP 6
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
  53: LD_ADDR_EXP 7
  57: PUSH
  58: LD_INT 37
  60: PUSH
  61: LD_INT 63
  63: PUSH
  64: LD_INT 52
  66: PUSH
  67: LD_INT 54
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: LIST
  75: ST_TO_ADDR
// ruBaseArea := 0 ;
  76: LD_ADDR_EXP 8
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// ruBaseArea2 := 0 ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// ruBase := 0 ;
  92: LD_ADDR_EXP 10
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// ruBase2 := 0 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// ruConstructList := [ ] ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: EMPTY
 114: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
 115: LD_ADDR_EXP 13
 119: PUSH
 120: LD_INT 22
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 1
 128: PUSH
 129: LD_INT 43
 131: PUSH
 132: LD_INT 44
 134: PUSH
 135: LD_INT 45
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 3
 148: PPUSH
 149: CALL_OW 12
 153: ARRAY
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 3
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: LD_INT 43
 172: PUSH
 173: LD_INT 44
 175: PUSH
 176: LD_INT 45
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 1
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 12
 194: ARRAY
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 43
 213: PUSH
 214: LD_INT 44
 216: PUSH
 217: LD_INT 45
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 1
 227: PPUSH
 228: LD_INT 3
 230: PPUSH
 231: CALL_OW 12
 235: ARRAY
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// ruCratesArea := 0 ;
 248: LD_ADDR_EXP 14
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// ruCratesArea2 := 0 ;
 256: LD_ADDR_EXP 15
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// ruHealPoint := [ ] ;
 264: LD_ADDR_EXP 16
 268: PUSH
 269: EMPTY
 270: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
 271: LD_ADDR_EXP 17
 275: PUSH
 276: EMPTY
 277: ST_TO_ADDR
// ruBuildings := [ ] ;
 278: LD_ADDR_EXP 18
 282: PUSH
 283: EMPTY
 284: ST_TO_ADDR
// ruBuildings2 := [ ] ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: EMPTY
 291: ST_TO_ADDR
// ruTanks := [ ] ;
 292: LD_ADDR_EXP 21
 296: PUSH
 297: EMPTY
 298: ST_TO_ADDR
// ruTanks2 := [ ] ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// ruParkingArea := 0 ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruParkingArea2 := 0 ;
 314: LD_ADDR_EXP 25
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_INT 2
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 4
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: PUSH
 356: FOR_TO
 357: IFFALSE 417
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
 359: LD_ADDR_EXP 12
 363: PUSH
 364: LD_EXP 12
 368: PPUSH
 369: LD_INT 22
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: LD_INT 43
 380: PUSH
 381: LD_INT 44
 383: PUSH
 384: LD_INT 45
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 1
 394: PPUSH
 395: LD_INT 3
 397: PPUSH
 398: CALL_OW 12
 402: ARRAY
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL 39156 0 2
 414: ST_TO_ADDR
 415: GO 356
 417: POP
 418: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
 419: LD_ADDR_VAR 0 7
 423: PUSH
 424: LD_INT 43
 426: PUSH
 427: LD_INT 68
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 43
 436: PUSH
 437: LD_INT 79
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 99
 446: PUSH
 447: LD_INT 114
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 103
 456: PUSH
 457: LD_INT 114
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 156
 466: PUSH
 467: LD_INT 92
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 152
 476: PUSH
 477: LD_INT 85
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: ST_TO_ADDR
// for i in sources do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: LD_VAR 0 7
 501: PUSH
 502: FOR_IN
 503: IFFALSE 532
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
 505: LD_VAR 0 2
 509: PUSH
 510: LD_INT 1
 512: ARRAY
 513: PPUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_INT 2
 521: ARRAY
 522: PPUSH
 523: LD_INT 3
 525: PPUSH
 526: CALL_OW 441
 530: GO 502
 532: POP
 533: POP
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 534: LD_ADDR_VAR 0 6
 538: PUSH
 539: LD_INT 5
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: LD_INT 8
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
 563: LD_ADDR_EXP 3
 567: PUSH
 568: LD_STRING Tsaritsyn
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_STRING 
 576: PPUSH
 577: CALL 956 0 3
 581: ST_TO_ADDR
// c := 0 ;
 582: LD_ADDR_VAR 0 5
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// for i := 1 to 4 do
 590: LD_ADDR_VAR 0 2
 594: PUSH
 595: DOUBLE
 596: LD_INT 1
 598: DEC
 599: ST_TO_ADDR
 600: LD_INT 4
 602: PUSH
 603: FOR_TO
 604: IFFALSE 851
// begin debug_strings := i ;
 606: LD_ADDR_OWVAR 48
 610: PUSH
 611: LD_VAR 0 2
 615: ST_TO_ADDR
// exit ;
 616: POP
 617: POP
 618: GO 853
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: DOUBLE
 626: LD_INT 1
 628: DEC
 629: ST_TO_ADDR
 630: LD_INT 5
 632: PUSH
 633: LD_INT 6
 635: PUSH
 636: LD_INT 8
 638: PUSH
 639: LD_INT 9
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 4
 659: PUSH
 660: LD_INT 5
 662: PUSH
 663: LD_INT 6
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PUSH
 672: LD_OWVAR 67
 676: ARRAY
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 4
 683: PUSH
 684: LD_INT 5
 686: PUSH
 687: LD_INT 6
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: PUSH
 696: LD_OWVAR 67
 700: ARRAY
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: LD_INT 3
 710: PUSH
 711: LD_INT 3
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_OWVAR 67
 724: ARRAY
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_VAR 0 2
 736: ARRAY
 737: PUSH
 738: FOR_TO
 739: IFFALSE 847
// begin c := Inc ( c ) ;
 741: LD_ADDR_VAR 0 5
 745: PUSH
 746: LD_VAR 0 5
 750: PPUSH
 751: CALL 40529 0 1
 755: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
 756: LD_INT 0
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_VAR 0 6
 768: PPUSH
 769: CALL_OW 380
// un := CreateHuman ;
 773: LD_ADDR_VAR 0 4
 777: PUSH
 778: CALL_OW 44
 782: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
 783: LD_ADDR_EXP 1
 787: PUSH
 788: LD_EXP 1
 792: PPUSH
 793: LD_VAR 0 4
 797: PPUSH
 798: CALL 39156 0 2
 802: ST_TO_ADDR
// if i = 3 then
 803: LD_VAR 0 2
 807: PUSH
 808: LD_INT 3
 810: EQUAL
 811: IFFALSE 845
// begin ruMech := Join ( ruMech , un ) ;
 813: LD_ADDR_EXP 5
 817: PUSH
 818: LD_EXP 5
 822: PPUSH
 823: LD_VAR 0 4
 827: PPUSH
 828: CALL 39156 0 2
 832: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
 833: LD_VAR 0 4
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL_OW 336
// end ; end ;
 845: GO 738
 847: POP
 848: POP
// end ;
 849: GO 603
 851: POP
 852: POP
// end ;
 853: LD_VAR 0 1
 857: RET
// starting begin ResetFog ;
 858: CALL_OW 335
// Difficulty := 3 ;
 862: LD_ADDR_OWVAR 67
 866: PUSH
 867: LD_INT 3
 869: ST_TO_ADDR
// end ;
 870: END
// every 0 0$1 do var result , x , i ;
 871: GO 873
 873: DISABLE
 874: LD_INT 0
 876: PPUSH
 877: PPUSH
 878: PPUSH
// begin enable ;
 879: ENABLE
// display_strings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_ready ] , [ f_not , [ f_hastask ] ] , [ f_control , control_computer ] ] ) ;
 880: LD_ADDR_OWVAR 47
 884: PUSH
 885: LD_INT 22
 887: PUSH
 888: LD_INT 1
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 50
 897: PUSH
 898: EMPTY
 899: LIST
 900: PUSH
 901: LD_INT 53
 903: PUSH
 904: EMPTY
 905: LIST
 906: PUSH
 907: LD_INT 3
 909: PUSH
 910: LD_INT 60
 912: PUSH
 913: EMPTY
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 33
 922: PUSH
 923: LD_INT 3
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 69
 941: ST_TO_ADDR
// end ;
 942: PPOPN 3
 944: END
// every 0 0$2 do
 945: GO 947
 947: DISABLE
// begin ToLua ( LFC_UNITS_CUSTOM_ICON = {{88, 12}}; ) ;
 948: LD_STRING LFC_UNITS_CUSTOM_ICON = {{88, 12}};
 950: PPUSH
 951: CALL_OW 559
// end ; end_of_file
 955: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 956: LD_INT 0
 958: PPUSH
 959: PPUSH
// if exist_mode then
 960: LD_VAR 0 2
 964: IFFALSE 1010
// begin unit := CreateCharacter ( prefix & ident ) ;
 966: LD_ADDR_VAR 0 5
 970: PUSH
 971: LD_VAR 0 3
 975: PUSH
 976: LD_VAR 0 1
 980: STR
 981: PPUSH
 982: CALL_OW 34
 986: ST_TO_ADDR
// if unit then
 987: LD_VAR 0 5
 991: IFFALSE 1008
// DeleteCharacters ( prefix & ident ) ;
 993: LD_VAR 0 3
 997: PUSH
 998: LD_VAR 0 1
1002: STR
1003: PPUSH
1004: CALL_OW 40
// end else
1008: GO 1025
// unit := NewCharacter ( ident ) ;
1010: LD_ADDR_VAR 0 5
1014: PUSH
1015: LD_VAR 0 1
1019: PPUSH
1020: CALL_OW 25
1024: ST_TO_ADDR
// result := unit ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: ST_TO_ADDR
// end ;
1035: LD_VAR 0 4
1039: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1040: LD_INT 0
1042: PPUSH
1043: PPUSH
// if exist_mode then
1044: LD_VAR 0 2
1048: IFFALSE 1073
// unit := CreateCharacter ( prefix & ident ) else
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_VAR 0 3
1059: PUSH
1060: LD_VAR 0 1
1064: STR
1065: PPUSH
1066: CALL_OW 34
1070: ST_TO_ADDR
1071: GO 1088
// unit := NewCharacter ( ident ) ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_VAR 0 1
1082: PPUSH
1083: CALL_OW 25
1087: ST_TO_ADDR
// result := unit ;
1088: LD_ADDR_VAR 0 4
1092: PUSH
1093: LD_VAR 0 5
1097: ST_TO_ADDR
// end ;
1098: LD_VAR 0 4
1102: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1103: LD_INT 0
1105: PPUSH
1106: PPUSH
// if not side or not nation then
1107: LD_VAR 0 1
1111: NOT
1112: IFTRUE 1121
1114: PUSH
1115: LD_VAR 0 2
1119: NOT
1120: OR
1121: IFFALSE 1125
// exit ;
1123: GO 1919
// case nation of nation_american :
1125: LD_VAR 0 2
1129: PUSH
1130: LD_INT 1
1132: DOUBLE
1133: EQUAL
1134: IFTRUE 1138
1136: GO 1360
1138: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1139: LD_ADDR_VAR 0 4
1143: PUSH
1144: LD_INT 35
1146: PUSH
1147: LD_INT 45
1149: PUSH
1150: LD_INT 46
1152: PUSH
1153: LD_INT 47
1155: PUSH
1156: LD_INT 82
1158: PUSH
1159: LD_INT 83
1161: PUSH
1162: LD_INT 84
1164: PUSH
1165: LD_INT 85
1167: PUSH
1168: LD_INT 86
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 6
1179: PUSH
1180: LD_INT 15
1182: PUSH
1183: LD_INT 16
1185: PUSH
1186: LD_INT 7
1188: PUSH
1189: LD_INT 12
1191: PUSH
1192: LD_INT 13
1194: PUSH
1195: LD_INT 10
1197: PUSH
1198: LD_INT 14
1200: PUSH
1201: LD_INT 20
1203: PUSH
1204: LD_INT 21
1206: PUSH
1207: LD_INT 22
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 32
1215: PUSH
1216: LD_INT 27
1218: PUSH
1219: LD_INT 36
1221: PUSH
1222: LD_INT 69
1224: PUSH
1225: LD_INT 39
1227: PUSH
1228: LD_INT 34
1230: PUSH
1231: LD_INT 40
1233: PUSH
1234: LD_INT 48
1236: PUSH
1237: LD_INT 49
1239: PUSH
1240: LD_INT 50
1242: PUSH
1243: LD_INT 51
1245: PUSH
1246: LD_INT 52
1248: PUSH
1249: LD_INT 53
1251: PUSH
1252: LD_INT 54
1254: PUSH
1255: LD_INT 55
1257: PUSH
1258: LD_INT 56
1260: PUSH
1261: LD_INT 57
1263: PUSH
1264: LD_INT 58
1266: PUSH
1267: LD_INT 59
1269: PUSH
1270: LD_INT 60
1272: PUSH
1273: LD_INT 61
1275: PUSH
1276: LD_INT 62
1278: PUSH
1279: LD_INT 80
1281: PUSH
1282: LD_INT 82
1284: PUSH
1285: LD_INT 83
1287: PUSH
1288: LD_INT 84
1290: PUSH
1291: LD_INT 85
1293: PUSH
1294: LD_INT 86
1296: PUSH
1297: LD_INT 90
1299: PUSH
1300: LD_INT 93
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: ST_TO_ADDR
1358: GO 1841
1360: LD_INT 2
1362: DOUBLE
1363: EQUAL
1364: IFTRUE 1368
1366: GO 1602
1368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_INT 35
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 46
1382: PUSH
1383: LD_INT 47
1385: PUSH
1386: LD_INT 82
1388: PUSH
1389: LD_INT 83
1391: PUSH
1392: LD_INT 84
1394: PUSH
1395: LD_INT 85
1397: PUSH
1398: LD_INT 87
1400: PUSH
1401: LD_INT 70
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 11
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: LD_INT 4
1415: PUSH
1416: LD_INT 5
1418: PUSH
1419: LD_INT 6
1421: PUSH
1422: LD_INT 15
1424: PUSH
1425: LD_INT 18
1427: PUSH
1428: LD_INT 7
1430: PUSH
1431: LD_INT 17
1433: PUSH
1434: LD_INT 8
1436: PUSH
1437: LD_INT 20
1439: PUSH
1440: LD_INT 21
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_INT 72
1448: PUSH
1449: LD_INT 26
1451: PUSH
1452: LD_INT 69
1454: PUSH
1455: LD_INT 39
1457: PUSH
1458: LD_INT 40
1460: PUSH
1461: LD_INT 41
1463: PUSH
1464: LD_INT 42
1466: PUSH
1467: LD_INT 43
1469: PUSH
1470: LD_INT 48
1472: PUSH
1473: LD_INT 49
1475: PUSH
1476: LD_INT 50
1478: PUSH
1479: LD_INT 51
1481: PUSH
1482: LD_INT 52
1484: PUSH
1485: LD_INT 53
1487: PUSH
1488: LD_INT 54
1490: PUSH
1491: LD_INT 55
1493: PUSH
1494: LD_INT 56
1496: PUSH
1497: LD_INT 60
1499: PUSH
1500: LD_INT 61
1502: PUSH
1503: LD_INT 62
1505: PUSH
1506: LD_INT 66
1508: PUSH
1509: LD_INT 67
1511: PUSH
1512: LD_INT 68
1514: PUSH
1515: LD_INT 81
1517: PUSH
1518: LD_INT 82
1520: PUSH
1521: LD_INT 83
1523: PUSH
1524: LD_INT 84
1526: PUSH
1527: LD_INT 85
1529: PUSH
1530: LD_INT 87
1532: PUSH
1533: LD_INT 88
1535: PUSH
1536: LD_INT 92
1538: PUSH
1539: LD_INT 94
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: ST_TO_ADDR
1600: GO 1841
1602: LD_INT 3
1604: DOUBLE
1605: EQUAL
1606: IFTRUE 1610
1608: GO 1840
1610: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1611: LD_ADDR_VAR 0 4
1615: PUSH
1616: LD_INT 46
1618: PUSH
1619: LD_INT 47
1621: PUSH
1622: LD_INT 1
1624: PUSH
1625: LD_INT 2
1627: PUSH
1628: LD_INT 82
1630: PUSH
1631: LD_INT 83
1633: PUSH
1634: LD_INT 84
1636: PUSH
1637: LD_INT 85
1639: PUSH
1640: LD_INT 86
1642: PUSH
1643: LD_INT 11
1645: PUSH
1646: LD_INT 9
1648: PUSH
1649: LD_INT 20
1651: PUSH
1652: LD_INT 19
1654: PUSH
1655: LD_INT 21
1657: PUSH
1658: LD_INT 24
1660: PUSH
1661: LD_INT 22
1663: PUSH
1664: LD_INT 25
1666: PUSH
1667: LD_INT 28
1669: PUSH
1670: LD_INT 29
1672: PUSH
1673: LD_INT 30
1675: PUSH
1676: LD_INT 31
1678: PUSH
1679: LD_INT 37
1681: PUSH
1682: LD_INT 38
1684: PUSH
1685: LD_INT 32
1687: PUSH
1688: LD_INT 27
1690: PUSH
1691: LD_INT 33
1693: PUSH
1694: LD_INT 69
1696: PUSH
1697: LD_INT 39
1699: PUSH
1700: LD_INT 34
1702: PUSH
1703: LD_INT 40
1705: PUSH
1706: LD_INT 71
1708: PUSH
1709: LD_INT 23
1711: PUSH
1712: LD_INT 44
1714: PUSH
1715: LD_INT 48
1717: PUSH
1718: LD_INT 49
1720: PUSH
1721: LD_INT 50
1723: PUSH
1724: LD_INT 51
1726: PUSH
1727: LD_INT 52
1729: PUSH
1730: LD_INT 53
1732: PUSH
1733: LD_INT 54
1735: PUSH
1736: LD_INT 55
1738: PUSH
1739: LD_INT 56
1741: PUSH
1742: LD_INT 57
1744: PUSH
1745: LD_INT 58
1747: PUSH
1748: LD_INT 59
1750: PUSH
1751: LD_INT 63
1753: PUSH
1754: LD_INT 64
1756: PUSH
1757: LD_INT 65
1759: PUSH
1760: LD_INT 82
1762: PUSH
1763: LD_INT 83
1765: PUSH
1766: LD_INT 84
1768: PUSH
1769: LD_INT 85
1771: PUSH
1772: LD_INT 86
1774: PUSH
1775: LD_INT 89
1777: PUSH
1778: LD_INT 91
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: ST_TO_ADDR
1838: GO 1841
1840: POP
// if state > - 1 and state < 3 then
1841: LD_VAR 0 3
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: GREATER
1850: IFFALSE 1862
1852: PUSH
1853: LD_VAR 0 3
1857: PUSH
1858: LD_INT 3
1860: LESS
1861: AND
1862: IFFALSE 1919
// for i in result do
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 4
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1917
// if GetTech ( i , side ) <> state then
1877: LD_VAR 0 5
1881: PPUSH
1882: LD_VAR 0 1
1886: PPUSH
1887: CALL_OW 321
1891: PUSH
1892: LD_VAR 0 3
1896: NONEQUAL
1897: IFFALSE 1915
// result := result diff i ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PUSH
1909: LD_VAR 0 5
1913: DIFF
1914: ST_TO_ADDR
1915: GO 1874
1917: POP
1918: POP
// end ;
1919: LD_VAR 0 4
1923: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
1928: PPUSH
// result := true ;
1929: LD_ADDR_VAR 0 3
1933: PUSH
1934: LD_INT 1
1936: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_VAR 0 2
1946: PPUSH
1947: CALL_OW 480
1951: ST_TO_ADDR
// if not tmp then
1952: LD_VAR 0 5
1956: NOT
1957: IFFALSE 1961
// exit ;
1959: GO 2010
// for i in tmp do
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: LD_VAR 0 5
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2008
// if GetTech ( i , side ) <> state_researched then
1974: LD_VAR 0 4
1978: PPUSH
1979: LD_VAR 0 1
1983: PPUSH
1984: CALL_OW 321
1988: PUSH
1989: LD_INT 2
1991: NONEQUAL
1992: IFFALSE 2006
// begin result := false ;
1994: LD_ADDR_VAR 0 3
1998: PUSH
1999: LD_INT 0
2001: ST_TO_ADDR
// exit ;
2002: POP
2003: POP
2004: GO 2010
// end ;
2006: GO 1971
2008: POP
2009: POP
// end ;
2010: LD_VAR 0 3
2014: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2015: LD_INT 0
2017: PPUSH
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2030: LD_VAR 0 1
2034: NOT
2035: IFTRUE 2052
2037: PUSH
2038: LD_VAR 0 1
2042: PPUSH
2043: CALL_OW 257
2047: PUSH
2048: LD_INT 9
2050: NONEQUAL
2051: OR
2052: IFFALSE 2056
// exit ;
2054: GO 2635
// side := GetSide ( unit ) ;
2056: LD_ADDR_VAR 0 9
2060: PUSH
2061: LD_VAR 0 1
2065: PPUSH
2066: CALL_OW 255
2070: ST_TO_ADDR
// tech_space := tech_spacanom ;
2071: LD_ADDR_VAR 0 12
2075: PUSH
2076: LD_INT 29
2078: ST_TO_ADDR
// tech_time := tech_taurad ;
2079: LD_ADDR_VAR 0 13
2083: PUSH
2084: LD_INT 28
2086: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2087: LD_ADDR_VAR 0 11
2091: PUSH
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL_OW 310
2101: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2102: LD_VAR 0 11
2106: PPUSH
2107: CALL_OW 247
2111: PUSH
2112: LD_INT 2
2114: EQUAL
2115: IFFALSE 2119
// exit ;
2117: GO 2635
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2119: LD_ADDR_VAR 0 8
2123: PUSH
2124: LD_INT 81
2126: PUSH
2127: LD_VAR 0 9
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: LD_INT 21
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL_OW 69
2161: ST_TO_ADDR
// if not tmp then
2162: LD_VAR 0 8
2166: NOT
2167: IFFALSE 2171
// exit ;
2169: GO 2635
// if in_unit then
2171: LD_VAR 0 11
2175: IFFALSE 2199
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2177: LD_ADDR_VAR 0 10
2181: PUSH
2182: LD_VAR 0 8
2186: PPUSH
2187: LD_VAR 0 11
2191: PPUSH
2192: CALL_OW 74
2196: ST_TO_ADDR
2197: GO 2219
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2199: LD_ADDR_VAR 0 10
2203: PUSH
2204: LD_VAR 0 8
2208: PPUSH
2209: LD_VAR 0 1
2213: PPUSH
2214: CALL_OW 74
2218: ST_TO_ADDR
// if not enemy then
2219: LD_VAR 0 10
2223: NOT
2224: IFFALSE 2228
// exit ;
2226: GO 2635
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2228: LD_VAR 0 11
2232: IFFALSE 2254
2234: PUSH
2235: LD_VAR 0 11
2239: PPUSH
2240: LD_VAR 0 10
2244: PPUSH
2245: CALL_OW 296
2249: PUSH
2250: LD_INT 13
2252: GREATER
2253: AND
2254: IFTRUE 2276
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: LD_VAR 0 10
2266: PPUSH
2267: CALL_OW 296
2271: PUSH
2272: LD_INT 12
2274: GREATER
2275: OR
2276: IFFALSE 2280
// exit ;
2278: GO 2635
// missile := [ 1 ] ;
2280: LD_ADDR_VAR 0 14
2284: PUSH
2285: LD_INT 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2291: LD_VAR 0 9
2295: PPUSH
2296: LD_VAR 0 12
2300: PPUSH
2301: CALL_OW 325
2305: IFFALSE 2334
// missile := Replace ( missile , missile + 1 , 2 ) ;
2307: LD_ADDR_VAR 0 14
2311: PUSH
2312: LD_VAR 0 14
2316: PPUSH
2317: LD_VAR 0 14
2321: PUSH
2322: LD_INT 1
2324: PLUS
2325: PPUSH
2326: LD_INT 2
2328: PPUSH
2329: CALL_OW 1
2333: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2334: LD_VAR 0 9
2338: PPUSH
2339: LD_VAR 0 13
2343: PPUSH
2344: CALL_OW 325
2348: IFFALSE 2372
2350: PUSH
2351: LD_VAR 0 10
2355: PPUSH
2356: CALL_OW 255
2360: PPUSH
2361: LD_VAR 0 13
2365: PPUSH
2366: CALL_OW 325
2370: NOT
2371: AND
2372: IFFALSE 2401
// missile := Replace ( missile , missile + 1 , 3 ) ;
2374: LD_ADDR_VAR 0 14
2378: PUSH
2379: LD_VAR 0 14
2383: PPUSH
2384: LD_VAR 0 14
2388: PUSH
2389: LD_INT 1
2391: PLUS
2392: PPUSH
2393: LD_INT 3
2395: PPUSH
2396: CALL_OW 1
2400: ST_TO_ADDR
// if missile < 2 then
2401: LD_VAR 0 14
2405: PUSH
2406: LD_INT 2
2408: LESS
2409: IFFALSE 2413
// exit ;
2411: GO 2635
// x := GetX ( enemy ) ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_VAR 0 10
2422: PPUSH
2423: CALL_OW 250
2427: ST_TO_ADDR
// y := GetY ( enemy ) ;
2428: LD_ADDR_VAR 0 5
2432: PUSH
2433: LD_VAR 0 10
2437: PPUSH
2438: CALL_OW 251
2442: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2443: LD_ADDR_VAR 0 6
2447: PUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: NEG
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 12
2464: PLUS
2465: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2466: LD_ADDR_VAR 0 7
2470: PUSH
2471: LD_VAR 0 5
2475: PUSH
2476: LD_INT 1
2478: NEG
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 12
2487: PLUS
2488: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2489: LD_VAR 0 6
2493: PPUSH
2494: LD_VAR 0 7
2498: PPUSH
2499: CALL_OW 488
2503: NOT
2504: IFFALSE 2526
// begin _x := x ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_VAR 0 4
2515: ST_TO_ADDR
// _y := y ;
2516: LD_ADDR_VAR 0 7
2520: PUSH
2521: LD_VAR 0 5
2525: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_VAR 0 14
2538: PPUSH
2539: CALL_OW 12
2543: ST_TO_ADDR
// case i of 1 :
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 1
2551: DOUBLE
2552: EQUAL
2553: IFTRUE 2557
2555: GO 2574
2557: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2558: LD_VAR 0 1
2562: PPUSH
2563: LD_VAR 0 10
2567: PPUSH
2568: CALL_OW 115
2572: GO 2635
2574: LD_INT 2
2576: DOUBLE
2577: EQUAL
2578: IFTRUE 2582
2580: GO 2604
2582: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2583: LD_VAR 0 1
2587: PPUSH
2588: LD_VAR 0 6
2592: PPUSH
2593: LD_VAR 0 7
2597: PPUSH
2598: CALL_OW 153
2602: GO 2635
2604: LD_INT 3
2606: DOUBLE
2607: EQUAL
2608: IFTRUE 2612
2610: GO 2634
2612: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2613: LD_VAR 0 1
2617: PPUSH
2618: LD_VAR 0 6
2622: PPUSH
2623: LD_VAR 0 7
2627: PPUSH
2628: CALL_OW 154
2632: GO 2635
2634: POP
// end ;
2635: LD_VAR 0 2
2639: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2640: LD_INT 0
2642: PPUSH
2643: PPUSH
2644: PPUSH
2645: PPUSH
2646: PPUSH
2647: PPUSH
// if not unit or not building then
2648: LD_VAR 0 1
2652: NOT
2653: IFTRUE 2662
2655: PUSH
2656: LD_VAR 0 2
2660: NOT
2661: OR
2662: IFFALSE 2666
// exit ;
2664: GO 2824
// x := GetX ( building ) ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: PPUSH
2676: CALL_OW 250
2680: ST_TO_ADDR
// y := GetY ( building ) ;
2681: LD_ADDR_VAR 0 6
2685: PUSH
2686: LD_VAR 0 2
2690: PPUSH
2691: CALL_OW 251
2695: ST_TO_ADDR
// for i := 0 to 5 do
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: DOUBLE
2702: LD_INT 0
2704: DEC
2705: ST_TO_ADDR
2706: LD_INT 5
2708: PUSH
2709: FOR_TO
2710: IFFALSE 2822
// begin _x := ShiftX ( x , i , 3 ) ;
2712: LD_ADDR_VAR 0 7
2716: PUSH
2717: LD_VAR 0 5
2721: PPUSH
2722: LD_VAR 0 4
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: CALL_OW 272
2734: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2735: LD_ADDR_VAR 0 8
2739: PUSH
2740: LD_VAR 0 6
2744: PPUSH
2745: LD_VAR 0 4
2749: PPUSH
2750: LD_INT 3
2752: PPUSH
2753: CALL_OW 273
2757: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2758: LD_VAR 0 7
2762: PPUSH
2763: LD_VAR 0 8
2767: PPUSH
2768: CALL_OW 488
2772: NOT
2773: IFFALSE 2777
// continue ;
2775: GO 2709
// if HexInfo ( _x , _y ) = 0 then
2777: LD_VAR 0 7
2781: PPUSH
2782: LD_VAR 0 8
2786: PPUSH
2787: CALL_OW 428
2791: PUSH
2792: LD_INT 0
2794: EQUAL
2795: IFFALSE 2820
// begin ComMoveXY ( unit , _x , _y ) ;
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_VAR 0 7
2806: PPUSH
2807: LD_VAR 0 8
2811: PPUSH
2812: CALL_OW 111
// exit ;
2816: POP
2817: POP
2818: GO 2824
// end ; end ;
2820: GO 2709
2822: POP
2823: POP
// end ;
2824: LD_VAR 0 3
2828: RET
// export function ScanBase ( side , base_area ) ; begin
2829: LD_INT 0
2831: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2832: LD_ADDR_VAR 0 3
2836: PUSH
2837: LD_VAR 0 2
2841: PPUSH
2842: LD_INT 81
2844: PUSH
2845: LD_VAR 0 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 70
2858: ST_TO_ADDR
// end ;
2859: LD_VAR 0 3
2863: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2864: LD_INT 0
2866: PPUSH
2867: PPUSH
2868: PPUSH
2869: PPUSH
// result := false ;
2870: LD_ADDR_VAR 0 2
2874: PUSH
2875: LD_INT 0
2877: ST_TO_ADDR
// side := GetSide ( unit ) ;
2878: LD_ADDR_VAR 0 3
2882: PUSH
2883: LD_VAR 0 1
2887: PPUSH
2888: CALL_OW 255
2892: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_VAR 0 1
2902: PPUSH
2903: CALL_OW 248
2907: ST_TO_ADDR
// case nat of 1 :
2908: LD_VAR 0 4
2912: PUSH
2913: LD_INT 1
2915: DOUBLE
2916: EQUAL
2917: IFTRUE 2921
2919: GO 2932
2921: POP
// tech := tech_lassight ; 2 :
2922: LD_ADDR_VAR 0 5
2926: PUSH
2927: LD_INT 12
2929: ST_TO_ADDR
2930: GO 2971
2932: LD_INT 2
2934: DOUBLE
2935: EQUAL
2936: IFTRUE 2940
2938: GO 2951
2940: POP
// tech := tech_mortar ; 3 :
2941: LD_ADDR_VAR 0 5
2945: PUSH
2946: LD_INT 41
2948: ST_TO_ADDR
2949: GO 2971
2951: LD_INT 3
2953: DOUBLE
2954: EQUAL
2955: IFTRUE 2959
2957: GO 2970
2959: POP
// tech := tech_bazooka ; end ;
2960: LD_ADDR_VAR 0 5
2964: PUSH
2965: LD_INT 44
2967: ST_TO_ADDR
2968: GO 2971
2970: POP
// if Researched ( side , tech ) then
2971: LD_VAR 0 3
2975: PPUSH
2976: LD_VAR 0 5
2980: PPUSH
2981: CALL_OW 325
2985: IFFALSE 3012
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 5
2994: PUSH
2995: LD_INT 8
2997: PUSH
2998: LD_INT 9
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PUSH
3006: LD_VAR 0 4
3010: ARRAY
3011: ST_TO_ADDR
// end ;
3012: LD_VAR 0 2
3016: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3017: LD_INT 0
3019: PPUSH
3020: PPUSH
3021: PPUSH
// if not mines then
3022: LD_VAR 0 2
3026: NOT
3027: IFFALSE 3031
// exit ;
3029: GO 3175
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3031: LD_ADDR_VAR 0 5
3035: PUSH
3036: LD_INT 81
3038: PUSH
3039: LD_VAR 0 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 21
3053: PUSH
3054: LD_INT 3
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 69
3073: ST_TO_ADDR
// for i in mines do
3074: LD_ADDR_VAR 0 4
3078: PUSH
3079: LD_VAR 0 2
3083: PUSH
3084: FOR_IN
3085: IFFALSE 3173
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3087: LD_VAR 0 4
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: PPUSH
3096: LD_VAR 0 4
3100: PUSH
3101: LD_INT 2
3103: ARRAY
3104: PPUSH
3105: CALL_OW 458
3109: NOT
3110: IFFALSE 3114
// continue ;
3112: GO 3084
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3114: LD_VAR 0 4
3118: PUSH
3119: LD_INT 1
3121: ARRAY
3122: PPUSH
3123: LD_VAR 0 4
3127: PUSH
3128: LD_INT 2
3130: ARRAY
3131: PPUSH
3132: CALL_OW 428
3136: PUSH
3137: LD_VAR 0 5
3141: IN
3142: IFFALSE 3171
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3144: LD_VAR 0 4
3148: PUSH
3149: LD_INT 1
3151: ARRAY
3152: PPUSH
3153: LD_VAR 0 4
3157: PUSH
3158: LD_INT 2
3160: ARRAY
3161: PPUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 456
// end ;
3171: GO 3084
3173: POP
3174: POP
// end ;
3175: LD_VAR 0 3
3179: RET
// export function Count ( array ) ; begin
3180: LD_INT 0
3182: PPUSH
// result := array + 0 ;
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: LD_VAR 0 1
3192: PUSH
3193: LD_INT 0
3195: PLUS
3196: ST_TO_ADDR
// end ;
3197: LD_VAR 0 2
3201: RET
// export function IsEmpty ( building ) ; begin
3202: LD_INT 0
3204: PPUSH
// if not building then
3205: LD_VAR 0 1
3209: NOT
3210: IFFALSE 3214
// exit ;
3212: GO 3257
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: LD_VAR 0 1
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_VAR 0 1
3231: PPUSH
3232: CALL_OW 255
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PUSH
3241: LD_INT 58
3243: PUSH
3244: EMPTY
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: IN
3256: ST_TO_ADDR
// end ;
3257: LD_VAR 0 2
3261: RET
// export function IsNotFull ( building ) ; var places ; begin
3262: LD_INT 0
3264: PPUSH
3265: PPUSH
// if not building then
3266: LD_VAR 0 1
3270: NOT
3271: IFFALSE 3275
// exit ;
3273: GO 3303
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 62
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: ST_TO_ADDR
// end ;
3303: LD_VAR 0 2
3307: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3308: LD_INT 0
3310: PPUSH
3311: PPUSH
3312: PPUSH
3313: PPUSH
// tmp := [ ] ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: EMPTY
3320: ST_TO_ADDR
// list := [ ] ;
3321: LD_ADDR_VAR 0 5
3325: PUSH
3326: EMPTY
3327: ST_TO_ADDR
// for i = 16 to 25 do
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: DOUBLE
3334: LD_INT 16
3336: DEC
3337: ST_TO_ADDR
3338: LD_INT 25
3340: PUSH
3341: FOR_TO
3342: IFFALSE 3415
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_VAR 0 3
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_VAR 0 1
3361: PPUSH
3362: CALL_OW 255
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 91
3373: PUSH
3374: LD_VAR 0 1
3378: PUSH
3379: LD_INT 6
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 30
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: PPUSH
3407: CALL_OW 69
3411: ADD
3412: ST_TO_ADDR
3413: GO 3341
3415: POP
3416: POP
// for i = 1 to tmp do
3417: LD_ADDR_VAR 0 4
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_VAR 0 3
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3521
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3435: LD_ADDR_VAR 0 5
3439: PUSH
3440: LD_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: LD_VAR 0 4
3454: ARRAY
3455: PPUSH
3456: CALL_OW 266
3460: PUSH
3461: LD_VAR 0 3
3465: PUSH
3466: LD_VAR 0 4
3470: ARRAY
3471: PPUSH
3472: CALL_OW 250
3476: PUSH
3477: LD_VAR 0 3
3481: PUSH
3482: LD_VAR 0 4
3486: ARRAY
3487: PPUSH
3488: CALL_OW 251
3492: PUSH
3493: LD_VAR 0 3
3497: PUSH
3498: LD_VAR 0 4
3502: ARRAY
3503: PPUSH
3504: CALL_OW 254
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: EMPTY
3516: LIST
3517: ADD
3518: ST_TO_ADDR
3519: GO 3432
3521: POP
3522: POP
// result := list ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: LD_VAR 0 5
3532: ST_TO_ADDR
// end ;
3533: LD_VAR 0 2
3537: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3538: LD_INT 0
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
3545: PPUSH
3546: PPUSH
// if not factory then
3547: LD_VAR 0 1
3551: NOT
3552: IFFALSE 3556
// exit ;
3554: GO 4159
// if control = control_apeman then
3556: LD_VAR 0 4
3560: PUSH
3561: LD_INT 5
3563: EQUAL
3564: IFFALSE 3673
// begin tmp := UnitsInside ( factory ) ;
3566: LD_ADDR_VAR 0 8
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: CALL_OW 313
3580: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3581: LD_VAR 0 8
3585: PPUSH
3586: LD_INT 25
3588: PUSH
3589: LD_INT 12
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PPUSH
3596: CALL_OW 72
3600: NOT
3601: IFFALSE 3611
// control := control_manual ;
3603: LD_ADDR_VAR 0 4
3607: PUSH
3608: LD_INT 1
3610: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3611: LD_ADDR_VAR 0 8
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: CALL 3308 0 1
3625: ST_TO_ADDR
// if tmp then
3626: LD_VAR 0 8
3630: IFFALSE 3673
// begin for i in tmp do
3632: LD_ADDR_VAR 0 7
3636: PUSH
3637: LD_VAR 0 8
3641: PUSH
3642: FOR_IN
3643: IFFALSE 3671
// if i [ 1 ] = b_ext_radio then
3645: LD_VAR 0 7
3649: PUSH
3650: LD_INT 1
3652: ARRAY
3653: PUSH
3654: LD_INT 22
3656: EQUAL
3657: IFFALSE 3669
// begin control := control_remote ;
3659: LD_ADDR_VAR 0 4
3663: PUSH
3664: LD_INT 2
3666: ST_TO_ADDR
// break ;
3667: GO 3671
// end ;
3669: GO 3642
3671: POP
3672: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3673: LD_VAR 0 1
3677: PPUSH
3678: LD_VAR 0 2
3682: PPUSH
3683: LD_VAR 0 3
3687: PPUSH
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_VAR 0 5
3697: PPUSH
3698: CALL_OW 448
3702: IFFALSE 3737
// begin result := [ chassis , engine , control , weapon ] ;
3704: LD_ADDR_VAR 0 6
3708: PUSH
3709: LD_VAR 0 2
3713: PUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_VAR 0 4
3723: PUSH
3724: LD_VAR 0 5
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: ST_TO_ADDR
// exit ;
3735: GO 4159
// end ; _chassis := AvailableChassisList ( factory ) ;
3737: LD_ADDR_VAR 0 9
3741: PUSH
3742: LD_VAR 0 1
3746: PPUSH
3747: CALL_OW 475
3751: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3752: LD_ADDR_VAR 0 11
3756: PUSH
3757: LD_VAR 0 1
3761: PPUSH
3762: CALL_OW 476
3766: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3767: LD_ADDR_VAR 0 12
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 477
3781: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3782: LD_ADDR_VAR 0 10
3786: PUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 478
3796: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3797: LD_VAR 0 9
3801: NOT
3802: IFTRUE 3811
3804: PUSH
3805: LD_VAR 0 11
3809: NOT
3810: OR
3811: IFTRUE 3820
3813: PUSH
3814: LD_VAR 0 12
3818: NOT
3819: OR
3820: IFTRUE 3829
3822: PUSH
3823: LD_VAR 0 10
3827: NOT
3828: OR
3829: IFFALSE 3864
// begin result := [ chassis , engine , control , weapon ] ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: LD_VAR 0 2
3840: PUSH
3841: LD_VAR 0 3
3845: PUSH
3846: LD_VAR 0 4
3850: PUSH
3851: LD_VAR 0 5
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: ST_TO_ADDR
// exit ;
3862: GO 4159
// end ; if not chassis in _chassis then
3864: LD_VAR 0 2
3868: PUSH
3869: LD_VAR 0 9
3873: IN
3874: NOT
3875: IFFALSE 3901
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: LD_VAR 0 9
3886: PUSH
3887: LD_INT 1
3889: PPUSH
3890: LD_VAR 0 9
3894: PPUSH
3895: CALL_OW 12
3899: ARRAY
3900: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_VAR 0 3
3910: PPUSH
3911: CALL 4164 0 2
3915: NOT
3916: IFFALSE 3977
// repeat engine := _engine [ 1 ] ;
3918: LD_ADDR_VAR 0 3
3922: PUSH
3923: LD_VAR 0 11
3927: PUSH
3928: LD_INT 1
3930: ARRAY
3931: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3932: LD_ADDR_VAR 0 11
3936: PUSH
3937: LD_VAR 0 11
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: CALL_OW 3
3949: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3950: LD_VAR 0 2
3954: PPUSH
3955: LD_VAR 0 3
3959: PPUSH
3960: CALL 4164 0 2
3964: IFTRUE 3975
3966: PUSH
3967: LD_VAR 0 11
3971: PUSH
3972: EMPTY
3973: EQUAL
3974: OR
3975: IFFALSE 3918
// if not control in _control then
3977: LD_VAR 0 4
3981: PUSH
3982: LD_VAR 0 12
3986: IN
3987: NOT
3988: IFFALSE 4014
// control := _control [ rand ( 1 , _control ) ] ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 12
3999: PUSH
4000: LD_INT 1
4002: PPUSH
4003: LD_VAR 0 12
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4014: LD_VAR 0 2
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL 4386 0 2
4028: NOT
4029: IFFALSE 4090
// repeat weapon := _weapon [ 1 ] ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 10
4040: PUSH
4041: LD_INT 1
4043: ARRAY
4044: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4045: LD_ADDR_VAR 0 10
4049: PUSH
4050: LD_VAR 0 10
4054: PPUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL_OW 3
4062: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 5
4072: PPUSH
4073: CALL 4386 0 2
4077: IFTRUE 4088
4079: PUSH
4080: LD_VAR 0 10
4084: PUSH
4085: EMPTY
4086: EQUAL
4087: OR
4088: IFFALSE 4031
// result := [ ] ;
4090: LD_ADDR_VAR 0 6
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4097: LD_VAR 0 1
4101: PPUSH
4102: LD_VAR 0 2
4106: PPUSH
4107: LD_VAR 0 3
4111: PPUSH
4112: LD_VAR 0 4
4116: PPUSH
4117: LD_VAR 0 5
4121: PPUSH
4122: CALL_OW 448
4126: IFFALSE 4159
// result := [ chassis , engine , control , weapon ] ;
4128: LD_ADDR_VAR 0 6
4132: PUSH
4133: LD_VAR 0 2
4137: PUSH
4138: LD_VAR 0 3
4142: PUSH
4143: LD_VAR 0 4
4147: PUSH
4148: LD_VAR 0 5
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// end ;
4159: LD_VAR 0 6
4163: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4164: LD_INT 0
4166: PPUSH
// if not chassis or not engine then
4167: LD_VAR 0 1
4171: NOT
4172: IFTRUE 4181
4174: PUSH
4175: LD_VAR 0 2
4179: NOT
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4381
// case engine of engine_solar :
4185: LD_VAR 0 2
4189: PUSH
4190: LD_INT 2
4192: DOUBLE
4193: EQUAL
4194: IFTRUE 4198
4196: GO 4236
4198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4199: LD_ADDR_VAR 0 3
4203: PUSH
4204: LD_INT 11
4206: PUSH
4207: LD_INT 12
4209: PUSH
4210: LD_INT 13
4212: PUSH
4213: LD_INT 14
4215: PUSH
4216: LD_INT 1
4218: PUSH
4219: LD_INT 2
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: ST_TO_ADDR
4234: GO 4365
4236: LD_INT 1
4238: DOUBLE
4239: EQUAL
4240: IFTRUE 4244
4242: GO 4306
4244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4245: LD_ADDR_VAR 0 3
4249: PUSH
4250: LD_INT 11
4252: PUSH
4253: LD_INT 12
4255: PUSH
4256: LD_INT 13
4258: PUSH
4259: LD_INT 14
4261: PUSH
4262: LD_INT 1
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: LD_INT 21
4279: PUSH
4280: LD_INT 23
4282: PUSH
4283: LD_INT 22
4285: PUSH
4286: LD_INT 24
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: ST_TO_ADDR
4304: GO 4365
4306: LD_INT 3
4308: DOUBLE
4309: EQUAL
4310: IFTRUE 4314
4312: GO 4364
4314: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: LD_INT 13
4322: PUSH
4323: LD_INT 14
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 3
4331: PUSH
4332: LD_INT 4
4334: PUSH
4335: LD_INT 5
4337: PUSH
4338: LD_INT 21
4340: PUSH
4341: LD_INT 22
4343: PUSH
4344: LD_INT 23
4346: PUSH
4347: LD_INT 24
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: ST_TO_ADDR
4362: GO 4365
4364: POP
// result := ( chassis in result ) ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_VAR 0 1
4374: PUSH
4375: LD_VAR 0 3
4379: IN
4380: ST_TO_ADDR
// end ;
4381: LD_VAR 0 3
4385: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4386: LD_INT 0
4388: PPUSH
// if not chassis or not weapon then
4389: LD_VAR 0 1
4393: NOT
4394: IFTRUE 4403
4396: PUSH
4397: LD_VAR 0 2
4401: NOT
4402: OR
4403: IFFALSE 4407
// exit ;
4405: GO 5501
// case weapon of us_machine_gun :
4407: LD_VAR 0 2
4411: PUSH
4412: LD_INT 2
4414: DOUBLE
4415: EQUAL
4416: IFTRUE 4420
4418: GO 4450
4420: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: LD_INT 2
4431: PUSH
4432: LD_INT 3
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: LD_INT 5
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: ST_TO_ADDR
4448: GO 5485
4450: LD_INT 3
4452: DOUBLE
4453: EQUAL
4454: IFTRUE 4458
4456: GO 4488
4458: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: LD_INT 3
4472: PUSH
4473: LD_INT 4
4475: PUSH
4476: LD_INT 5
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: ST_TO_ADDR
4486: GO 5485
4488: LD_INT 11
4490: DOUBLE
4491: EQUAL
4492: IFTRUE 4496
4494: GO 4526
4496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4497: LD_ADDR_VAR 0 3
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: LD_INT 4
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
4524: GO 5485
4526: LD_INT 4
4528: DOUBLE
4529: EQUAL
4530: IFTRUE 4534
4532: GO 4560
4534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 4
4548: PUSH
4549: LD_INT 5
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 5485
4560: LD_INT 5
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4594
4568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 5
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: ST_TO_ADDR
4592: GO 5485
4594: LD_INT 9
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4628
4602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: LD_INT 2
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 5
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
4626: GO 5485
4628: LD_INT 7
4630: DOUBLE
4631: EQUAL
4632: IFTRUE 4636
4634: GO 4662
4636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_INT 2
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: LD_INT 5
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 5485
4662: LD_INT 12
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4696
4670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 5485
4696: LD_INT 13
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4730
4704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 4
4718: PUSH
4719: LD_INT 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
4728: GO 5485
4730: LD_INT 14
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4756
4738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: LD_INT 5
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: ST_TO_ADDR
4754: GO 5485
4756: LD_INT 6
4758: DOUBLE
4759: EQUAL
4760: IFTRUE 4764
4762: GO 4782
4764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: LD_INT 4
4772: PUSH
4773: LD_INT 5
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: ST_TO_ADDR
4780: GO 5485
4782: LD_INT 10
4784: DOUBLE
4785: EQUAL
4786: IFTRUE 4790
4788: GO 4808
4790: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_INT 4
4798: PUSH
4799: LD_INT 5
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: ST_TO_ADDR
4806: GO 5485
4808: LD_INT 22
4810: DOUBLE
4811: EQUAL
4812: IFTRUE 4816
4814: GO 4842
4816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: LD_INT 11
4824: PUSH
4825: LD_INT 12
4827: PUSH
4828: LD_INT 13
4830: PUSH
4831: LD_INT 14
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
4840: GO 5485
4842: LD_INT 23
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4876
4850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4851: LD_ADDR_VAR 0 3
4855: PUSH
4856: LD_INT 11
4858: PUSH
4859: LD_INT 12
4861: PUSH
4862: LD_INT 13
4864: PUSH
4865: LD_INT 14
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: ST_TO_ADDR
4874: GO 5485
4876: LD_INT 24
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4910
4884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4885: LD_ADDR_VAR 0 3
4889: PUSH
4890: LD_INT 11
4892: PUSH
4893: LD_INT 12
4895: PUSH
4896: LD_INT 13
4898: PUSH
4899: LD_INT 14
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
4908: GO 5485
4910: LD_INT 30
4912: DOUBLE
4913: EQUAL
4914: IFTRUE 4918
4916: GO 4944
4918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4919: LD_ADDR_VAR 0 3
4923: PUSH
4924: LD_INT 11
4926: PUSH
4927: LD_INT 12
4929: PUSH
4930: LD_INT 13
4932: PUSH
4933: LD_INT 14
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 5485
4944: LD_INT 25
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 4970
4952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 13
4960: PUSH
4961: LD_INT 14
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: ST_TO_ADDR
4968: GO 5485
4970: LD_INT 27
4972: DOUBLE
4973: EQUAL
4974: IFTRUE 4978
4976: GO 4996
4978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4979: LD_ADDR_VAR 0 3
4983: PUSH
4984: LD_INT 13
4986: PUSH
4987: LD_INT 14
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: ST_TO_ADDR
4994: GO 5485
4996: LD_INT 92
4998: DOUBLE
4999: EQUAL
5000: IFTRUE 5004
5002: GO 5030
5004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5005: LD_ADDR_VAR 0 3
5009: PUSH
5010: LD_INT 11
5012: PUSH
5013: LD_INT 12
5015: PUSH
5016: LD_INT 13
5018: PUSH
5019: LD_INT 14
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
5028: GO 5485
5030: LD_INT 28
5032: DOUBLE
5033: EQUAL
5034: IFTRUE 5038
5036: GO 5056
5038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: LD_INT 13
5046: PUSH
5047: LD_INT 14
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
5054: GO 5485
5056: LD_INT 29
5058: DOUBLE
5059: EQUAL
5060: IFTRUE 5064
5062: GO 5082
5064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5065: LD_ADDR_VAR 0 3
5069: PUSH
5070: LD_INT 13
5072: PUSH
5073: LD_INT 14
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: ST_TO_ADDR
5080: GO 5485
5082: LD_INT 31
5084: DOUBLE
5085: EQUAL
5086: IFTRUE 5090
5088: GO 5108
5090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5091: LD_ADDR_VAR 0 3
5095: PUSH
5096: LD_INT 13
5098: PUSH
5099: LD_INT 14
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: ST_TO_ADDR
5106: GO 5485
5108: LD_INT 26
5110: DOUBLE
5111: EQUAL
5112: IFTRUE 5116
5114: GO 5134
5116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5117: LD_ADDR_VAR 0 3
5121: PUSH
5122: LD_INT 13
5124: PUSH
5125: LD_INT 14
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: ST_TO_ADDR
5132: GO 5485
5134: LD_INT 42
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5142
5140: GO 5168
5142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_INT 23
5156: PUSH
5157: LD_INT 24
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
5166: GO 5485
5168: LD_INT 43
5170: DOUBLE
5171: EQUAL
5172: IFTRUE 5176
5174: GO 5202
5176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_INT 23
5190: PUSH
5191: LD_INT 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: ST_TO_ADDR
5200: GO 5485
5202: LD_INT 44
5204: DOUBLE
5205: EQUAL
5206: IFTRUE 5210
5208: GO 5236
5210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5211: LD_ADDR_VAR 0 3
5215: PUSH
5216: LD_INT 21
5218: PUSH
5219: LD_INT 22
5221: PUSH
5222: LD_INT 23
5224: PUSH
5225: LD_INT 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: ST_TO_ADDR
5234: GO 5485
5236: LD_INT 45
5238: DOUBLE
5239: EQUAL
5240: IFTRUE 5244
5242: GO 5270
5244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_INT 21
5252: PUSH
5253: LD_INT 22
5255: PUSH
5256: LD_INT 23
5258: PUSH
5259: LD_INT 24
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: ST_TO_ADDR
5268: GO 5485
5270: LD_INT 49
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5278
5276: GO 5304
5278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_INT 21
5286: PUSH
5287: LD_INT 22
5289: PUSH
5290: LD_INT 23
5292: PUSH
5293: LD_INT 24
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 5485
5304: LD_INT 51
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5338
5312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_INT 21
5320: PUSH
5321: LD_INT 22
5323: PUSH
5324: LD_INT 23
5326: PUSH
5327: LD_INT 24
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: ST_TO_ADDR
5336: GO 5485
5338: LD_INT 52
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5346
5344: GO 5372
5346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: LD_INT 21
5354: PUSH
5355: LD_INT 22
5357: PUSH
5358: LD_INT 23
5360: PUSH
5361: LD_INT 24
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 5485
5372: LD_INT 53
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5398
5380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5381: LD_ADDR_VAR 0 3
5385: PUSH
5386: LD_INT 23
5388: PUSH
5389: LD_INT 24
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: ST_TO_ADDR
5396: GO 5485
5398: LD_INT 46
5400: DOUBLE
5401: EQUAL
5402: IFTRUE 5406
5404: GO 5424
5406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5407: LD_ADDR_VAR 0 3
5411: PUSH
5412: LD_INT 23
5414: PUSH
5415: LD_INT 24
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: ST_TO_ADDR
5422: GO 5485
5424: LD_INT 47
5426: DOUBLE
5427: EQUAL
5428: IFTRUE 5432
5430: GO 5450
5432: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
5433: LD_ADDR_VAR 0 3
5437: PUSH
5438: LD_INT 23
5440: PUSH
5441: LD_INT 24
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: ST_TO_ADDR
5448: GO 5485
5450: LD_INT 98
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5484
5458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_INT 21
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 23
5472: PUSH
5473: LD_INT 24
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: ST_TO_ADDR
5482: GO 5485
5484: POP
// result := ( chassis in result ) ;
5485: LD_ADDR_VAR 0 3
5489: PUSH
5490: LD_VAR 0 1
5494: PUSH
5495: LD_VAR 0 3
5499: IN
5500: ST_TO_ADDR
// end ;
5501: LD_VAR 0 3
5505: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// result := array ;
5515: LD_ADDR_VAR 0 5
5519: PUSH
5520: LD_VAR 0 1
5524: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5525: LD_VAR 0 1
5529: NOT
5530: IFTRUE 5539
5532: PUSH
5533: LD_VAR 0 2
5537: NOT
5538: OR
5539: IFTRUE 5548
5541: PUSH
5542: LD_VAR 0 3
5546: NOT
5547: OR
5548: IFTRUE 5562
5550: PUSH
5551: LD_VAR 0 2
5555: PUSH
5556: LD_VAR 0 1
5560: GREATER
5561: OR
5562: IFTRUE 5576
5564: PUSH
5565: LD_VAR 0 3
5569: PUSH
5570: LD_VAR 0 1
5574: GREATER
5575: OR
5576: IFFALSE 5580
// exit ;
5578: GO 5876
// if direction then
5580: LD_VAR 0 4
5584: IFFALSE 5648
// begin d := 1 ;
5586: LD_ADDR_VAR 0 9
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// if i_from > i_to then
5594: LD_VAR 0 2
5598: PUSH
5599: LD_VAR 0 3
5603: GREATER
5604: IFFALSE 5630
// length := ( array - i_from ) + i_to else
5606: LD_ADDR_VAR 0 11
5610: PUSH
5611: LD_VAR 0 1
5615: PUSH
5616: LD_VAR 0 2
5620: MINUS
5621: PUSH
5622: LD_VAR 0 3
5626: PLUS
5627: ST_TO_ADDR
5628: GO 5646
// length := i_to - i_from ;
5630: LD_ADDR_VAR 0 11
5634: PUSH
5635: LD_VAR 0 3
5639: PUSH
5640: LD_VAR 0 2
5644: MINUS
5645: ST_TO_ADDR
// end else
5646: GO 5709
// begin d := - 1 ;
5648: LD_ADDR_VAR 0 9
5652: PUSH
5653: LD_INT 1
5655: NEG
5656: ST_TO_ADDR
// if i_from > i_to then
5657: LD_VAR 0 2
5661: PUSH
5662: LD_VAR 0 3
5666: GREATER
5667: IFFALSE 5687
// length := i_from - i_to else
5669: LD_ADDR_VAR 0 11
5673: PUSH
5674: LD_VAR 0 2
5678: PUSH
5679: LD_VAR 0 3
5683: MINUS
5684: ST_TO_ADDR
5685: GO 5709
// length := ( array - i_to ) + i_from ;
5687: LD_ADDR_VAR 0 11
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: LD_VAR 0 3
5701: MINUS
5702: PUSH
5703: LD_VAR 0 2
5707: PLUS
5708: ST_TO_ADDR
// end ; if not length then
5709: LD_VAR 0 11
5713: NOT
5714: IFFALSE 5718
// exit ;
5716: GO 5876
// tmp := array ;
5718: LD_ADDR_VAR 0 10
5722: PUSH
5723: LD_VAR 0 1
5727: ST_TO_ADDR
// for i = 1 to length do
5728: LD_ADDR_VAR 0 6
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 11
5742: PUSH
5743: FOR_TO
5744: IFFALSE 5864
// begin for j = 1 to array do
5746: LD_ADDR_VAR 0 7
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_VAR 0 1
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5850
// begin k := j + d ;
5764: LD_ADDR_VAR 0 8
5768: PUSH
5769: LD_VAR 0 7
5773: PUSH
5774: LD_VAR 0 9
5778: PLUS
5779: ST_TO_ADDR
// if k > array then
5780: LD_VAR 0 8
5784: PUSH
5785: LD_VAR 0 1
5789: GREATER
5790: IFFALSE 5800
// k := 1 ;
5792: LD_ADDR_VAR 0 8
5796: PUSH
5797: LD_INT 1
5799: ST_TO_ADDR
// if not k then
5800: LD_VAR 0 8
5804: NOT
5805: IFFALSE 5817
// k := array ;
5807: LD_ADDR_VAR 0 8
5811: PUSH
5812: LD_VAR 0 1
5816: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5817: LD_ADDR_VAR 0 10
5821: PUSH
5822: LD_VAR 0 10
5826: PPUSH
5827: LD_VAR 0 8
5831: PPUSH
5832: LD_VAR 0 1
5836: PUSH
5837: LD_VAR 0 7
5841: ARRAY
5842: PPUSH
5843: CALL_OW 1
5847: ST_TO_ADDR
// end ;
5848: GO 5761
5850: POP
5851: POP
// array := tmp ;
5852: LD_ADDR_VAR 0 1
5856: PUSH
5857: LD_VAR 0 10
5861: ST_TO_ADDR
// end ;
5862: GO 5743
5864: POP
5865: POP
// result := array ;
5866: LD_ADDR_VAR 0 5
5870: PUSH
5871: LD_VAR 0 1
5875: ST_TO_ADDR
// end ;
5876: LD_VAR 0 5
5880: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
// result := 0 ;
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: LD_INT 0
5892: ST_TO_ADDR
// if not array or not value in array then
5893: LD_VAR 0 1
5897: NOT
5898: IFTRUE 5913
5900: PUSH
5901: LD_VAR 0 2
5905: PUSH
5906: LD_VAR 0 1
5910: IN
5911: NOT
5912: OR
5913: IFFALSE 5917
// exit ;
5915: GO 5971
// for i = 1 to array do
5917: LD_ADDR_VAR 0 4
5921: PUSH
5922: DOUBLE
5923: LD_INT 1
5925: DEC
5926: ST_TO_ADDR
5927: LD_VAR 0 1
5931: PUSH
5932: FOR_TO
5933: IFFALSE 5969
// if value = array [ i ] then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_VAR 0 1
5944: PUSH
5945: LD_VAR 0 4
5949: ARRAY
5950: EQUAL
5951: IFFALSE 5967
// begin result := i ;
5953: LD_ADDR_VAR 0 3
5957: PUSH
5958: LD_VAR 0 4
5962: ST_TO_ADDR
// exit ;
5963: POP
5964: POP
5965: GO 5971
// end ;
5967: GO 5932
5969: POP
5970: POP
// end ;
5971: LD_VAR 0 3
5975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5976: LD_INT 0
5978: PPUSH
// vc_chassis := chassis ;
5979: LD_ADDR_OWVAR 37
5983: PUSH
5984: LD_VAR 0 1
5988: ST_TO_ADDR
// vc_engine := engine ;
5989: LD_ADDR_OWVAR 39
5993: PUSH
5994: LD_VAR 0 2
5998: ST_TO_ADDR
// vc_control := control ;
5999: LD_ADDR_OWVAR 38
6003: PUSH
6004: LD_VAR 0 3
6008: ST_TO_ADDR
// vc_weapon := weapon ;
6009: LD_ADDR_OWVAR 40
6013: PUSH
6014: LD_VAR 0 4
6018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6019: LD_ADDR_OWVAR 41
6023: PUSH
6024: LD_VAR 0 5
6028: ST_TO_ADDR
// end ;
6029: LD_VAR 0 6
6033: RET
// export function WantPlant ( unit ) ; var task ; begin
6034: LD_INT 0
6036: PPUSH
6037: PPUSH
// result := false ;
6038: LD_ADDR_VAR 0 2
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6046: LD_ADDR_VAR 0 3
6050: PUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: CALL_OW 437
6060: ST_TO_ADDR
// if task then
6061: LD_VAR 0 3
6065: IFFALSE 6093
// if task [ 1 ] [ 1 ] = p then
6067: LD_VAR 0 3
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PUSH
6080: LD_STRING p
6082: EQUAL
6083: IFFALSE 6093
// result := true ;
6085: LD_ADDR_VAR 0 2
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// end ;
6093: LD_VAR 0 2
6097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6098: LD_INT 0
6100: PPUSH
6101: PPUSH
6102: PPUSH
6103: PPUSH
// if pos < 1 then
6104: LD_VAR 0 2
6108: PUSH
6109: LD_INT 1
6111: LESS
6112: IFFALSE 6116
// exit ;
6114: GO 6419
// if pos = 1 then
6116: LD_VAR 0 2
6120: PUSH
6121: LD_INT 1
6123: EQUAL
6124: IFFALSE 6157
// result := Replace ( arr , pos [ 1 ] , value ) else
6126: LD_ADDR_VAR 0 4
6130: PUSH
6131: LD_VAR 0 1
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 3
6149: PPUSH
6150: CALL_OW 1
6154: ST_TO_ADDR
6155: GO 6419
// begin tmp := arr ;
6157: LD_ADDR_VAR 0 6
6161: PUSH
6162: LD_VAR 0 1
6166: ST_TO_ADDR
// s_arr := [ tmp ] ;
6167: LD_ADDR_VAR 0 7
6171: PUSH
6172: LD_VAR 0 6
6176: PUSH
6177: EMPTY
6178: LIST
6179: ST_TO_ADDR
// for i = 1 to pos - 1 do
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: DOUBLE
6186: LD_INT 1
6188: DEC
6189: ST_TO_ADDR
6190: LD_VAR 0 2
6194: PUSH
6195: LD_INT 1
6197: MINUS
6198: PUSH
6199: FOR_TO
6200: IFFALSE 6245
// begin tmp := tmp [ pos [ i ] ] ;
6202: LD_ADDR_VAR 0 6
6206: PUSH
6207: LD_VAR 0 6
6211: PUSH
6212: LD_VAR 0 2
6216: PUSH
6217: LD_VAR 0 5
6221: ARRAY
6222: ARRAY
6223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6224: LD_ADDR_VAR 0 7
6228: PUSH
6229: LD_VAR 0 7
6233: PUSH
6234: LD_VAR 0 6
6238: PUSH
6239: EMPTY
6240: LIST
6241: ADD
6242: ST_TO_ADDR
// end ;
6243: GO 6199
6245: POP
6246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6247: LD_ADDR_VAR 0 6
6251: PUSH
6252: LD_VAR 0 6
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: PPUSH
6268: LD_VAR 0 3
6272: PPUSH
6273: CALL_OW 1
6277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6278: LD_ADDR_VAR 0 7
6282: PUSH
6283: LD_VAR 0 7
6287: PPUSH
6288: LD_VAR 0 7
6292: PPUSH
6293: LD_VAR 0 6
6297: PPUSH
6298: CALL_OW 1
6302: ST_TO_ADDR
// for i = s_arr downto 2 do
6303: LD_ADDR_VAR 0 5
6307: PUSH
6308: DOUBLE
6309: LD_VAR 0 7
6313: INC
6314: ST_TO_ADDR
6315: LD_INT 2
6317: PUSH
6318: FOR_DOWNTO
6319: IFFALSE 6403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6321: LD_ADDR_VAR 0 6
6325: PUSH
6326: LD_VAR 0 7
6330: PUSH
6331: LD_VAR 0 5
6335: PUSH
6336: LD_INT 1
6338: MINUS
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 2
6345: PUSH
6346: LD_VAR 0 5
6350: PUSH
6351: LD_INT 1
6353: MINUS
6354: ARRAY
6355: PPUSH
6356: LD_VAR 0 7
6360: PUSH
6361: LD_VAR 0 5
6365: ARRAY
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6372: LD_ADDR_VAR 0 7
6376: PUSH
6377: LD_VAR 0 7
6381: PPUSH
6382: LD_VAR 0 5
6386: PUSH
6387: LD_INT 1
6389: MINUS
6390: PPUSH
6391: LD_VAR 0 6
6395: PPUSH
6396: CALL_OW 1
6400: ST_TO_ADDR
// end ;
6401: GO 6318
6403: POP
6404: POP
// result := s_arr [ 1 ] ;
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: LD_VAR 0 7
6414: PUSH
6415: LD_INT 1
6417: ARRAY
6418: ST_TO_ADDR
// end ; end ;
6419: LD_VAR 0 4
6423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
// if not list then
6428: LD_VAR 0 1
6432: NOT
6433: IFFALSE 6437
// exit ;
6435: GO 6528
// i := list [ pos1 ] ;
6437: LD_ADDR_VAR 0 5
6441: PUSH
6442: LD_VAR 0 1
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: ST_TO_ADDR
// if not i then
6453: LD_VAR 0 5
6457: NOT
6458: IFFALSE 6462
// exit ;
6460: GO 6528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_VAR 0 1
6481: PUSH
6482: LD_VAR 0 3
6486: ARRAY
6487: PPUSH
6488: CALL_OW 1
6492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6493: LD_ADDR_VAR 0 1
6497: PUSH
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_VAR 0 3
6507: PPUSH
6508: LD_VAR 0 5
6512: PPUSH
6513: CALL_OW 1
6517: ST_TO_ADDR
// result := list ;
6518: LD_ADDR_VAR 0 4
6522: PUSH
6523: LD_VAR 0 1
6527: ST_TO_ADDR
// end ;
6528: LD_VAR 0 4
6532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6533: LD_INT 0
6535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 250
6550: PPUSH
6551: LD_VAR 0 1
6555: PPUSH
6556: CALL_OW 251
6560: PPUSH
6561: LD_VAR 0 2
6565: PPUSH
6566: LD_VAR 0 3
6570: PPUSH
6571: LD_VAR 0 4
6575: PPUSH
6576: CALL 6958 0 5
6580: ST_TO_ADDR
// end ;
6581: LD_VAR 0 5
6585: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6586: LD_INT 0
6588: PPUSH
6589: PPUSH
6590: PPUSH
6591: PPUSH
// if not list or not unit then
6592: LD_VAR 0 2
6596: NOT
6597: IFTRUE 6606
6599: PUSH
6600: LD_VAR 0 1
6604: NOT
6605: OR
6606: IFFALSE 6610
// exit ;
6608: GO 6953
// result := [ ] ;
6610: LD_ADDR_VAR 0 5
6614: PUSH
6615: EMPTY
6616: ST_TO_ADDR
// for i in list do
6617: LD_ADDR_VAR 0 6
6621: PUSH
6622: LD_VAR 0 2
6626: PUSH
6627: FOR_IN
6628: IFFALSE 6846
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6630: LD_ADDR_VAR 0 8
6634: PUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_VAR 0 6
6644: PUSH
6645: LD_INT 1
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 6
6653: PUSH
6654: LD_INT 2
6656: ARRAY
6657: PPUSH
6658: CALL_OW 297
6662: ST_TO_ADDR
// if not Count ( result ) then
6663: LD_VAR 0 5
6667: PPUSH
6668: CALL 3180 0 1
6672: NOT
6673: IFFALSE 6706
// begin result := Join ( result , [ i , tmp ] ) ;
6675: LD_ADDR_VAR 0 5
6679: PUSH
6680: LD_VAR 0 5
6684: PPUSH
6685: LD_VAR 0 6
6689: PUSH
6690: LD_VAR 0 8
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL 39156 0 2
6703: ST_TO_ADDR
// continue ;
6704: GO 6627
// end ; if result [ result ] [ 2 ] <= tmp then
6706: LD_VAR 0 5
6710: PUSH
6711: LD_VAR 0 5
6715: ARRAY
6716: PUSH
6717: LD_INT 2
6719: ARRAY
6720: PUSH
6721: LD_VAR 0 8
6725: LESSEQUAL
6726: IFFALSE 6759
// result := Join ( result , [ i , tmp ] ) else
6728: LD_ADDR_VAR 0 5
6732: PUSH
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_VAR 0 6
6742: PUSH
6743: LD_VAR 0 8
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL 39156 0 2
6756: ST_TO_ADDR
6757: GO 6844
// begin for j := 1 to Count ( result ) do
6759: LD_ADDR_VAR 0 7
6763: PUSH
6764: DOUBLE
6765: LD_INT 1
6767: DEC
6768: ST_TO_ADDR
6769: LD_VAR 0 5
6773: PPUSH
6774: CALL 3180 0 1
6778: PUSH
6779: FOR_TO
6780: IFFALSE 6842
// begin if tmp < result [ j ] [ 2 ] then
6782: LD_VAR 0 8
6786: PUSH
6787: LD_VAR 0 5
6791: PUSH
6792: LD_VAR 0 7
6796: ARRAY
6797: PUSH
6798: LD_INT 2
6800: ARRAY
6801: LESS
6802: IFFALSE 6840
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6804: LD_ADDR_VAR 0 5
6808: PUSH
6809: LD_VAR 0 5
6813: PPUSH
6814: LD_VAR 0 7
6818: PPUSH
6819: LD_VAR 0 6
6823: PUSH
6824: LD_VAR 0 8
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 2
6837: ST_TO_ADDR
// break ;
6838: GO 6842
// end ; end ;
6840: GO 6779
6842: POP
6843: POP
// end ; end ;
6844: GO 6627
6846: POP
6847: POP
// if result and not asc then
6848: LD_VAR 0 5
6852: IFFALSE 6861
6854: PUSH
6855: LD_VAR 0 3
6859: NOT
6860: AND
6861: IFFALSE 6878
// result := ReverseArray ( result ) ;
6863: LD_ADDR_VAR 0 5
6867: PUSH
6868: LD_VAR 0 5
6872: PPUSH
6873: CALL 34236 0 1
6877: ST_TO_ADDR
// tmp := [ ] ;
6878: LD_ADDR_VAR 0 8
6882: PUSH
6883: EMPTY
6884: ST_TO_ADDR
// if mode then
6885: LD_VAR 0 4
6889: IFFALSE 6953
// begin for i := 1 to result do
6891: LD_ADDR_VAR 0 6
6895: PUSH
6896: DOUBLE
6897: LD_INT 1
6899: DEC
6900: ST_TO_ADDR
6901: LD_VAR 0 5
6905: PUSH
6906: FOR_TO
6907: IFFALSE 6941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6909: LD_ADDR_VAR 0 8
6913: PUSH
6914: LD_VAR 0 8
6918: PPUSH
6919: LD_VAR 0 5
6923: PUSH
6924: LD_VAR 0 6
6928: ARRAY
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: CALL 39156 0 2
6938: ST_TO_ADDR
6939: GO 6906
6941: POP
6942: POP
// result := tmp ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_VAR 0 8
6952: ST_TO_ADDR
// end ; end ;
6953: LD_VAR 0 5
6957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6958: LD_INT 0
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
// if not list then
6964: LD_VAR 0 3
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7363
// result := [ ] ;
6973: LD_ADDR_VAR 0 6
6977: PUSH
6978: EMPTY
6979: ST_TO_ADDR
// for i in list do
6980: LD_ADDR_VAR 0 7
6984: PUSH
6985: LD_VAR 0 3
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6993: LD_ADDR_VAR 0 9
6997: PUSH
6998: LD_VAR 0 7
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_VAR 0 2
7012: PPUSH
7013: CALL_OW 297
7017: ST_TO_ADDR
// if not result then
7018: LD_VAR 0 6
7022: NOT
7023: IFFALSE 7049
// result := [ [ i , tmp ] ] else
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_VAR 0 7
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: ST_TO_ADDR
7047: GO 7191
// begin if result [ result ] [ 2 ] <= tmp then
7049: LD_VAR 0 6
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PUSH
7060: LD_INT 2
7062: ARRAY
7063: PUSH
7064: LD_VAR 0 9
7068: LESSEQUAL
7069: IFFALSE 7111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: LD_VAR 0 6
7080: PPUSH
7081: LD_VAR 0 6
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 7
7094: PUSH
7095: LD_VAR 0 9
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 2
7108: ST_TO_ADDR
7109: GO 7191
// for j := 1 to result do
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_VAR 0 6
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7189
// begin if tmp < result [ j ] [ 2 ] then
7129: LD_VAR 0 9
7133: PUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 8
7143: ARRAY
7144: PUSH
7145: LD_INT 2
7147: ARRAY
7148: LESS
7149: IFFALSE 7187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7151: LD_ADDR_VAR 0 6
7155: PUSH
7156: LD_VAR 0 6
7160: PPUSH
7161: LD_VAR 0 8
7165: PPUSH
7166: LD_VAR 0 7
7170: PUSH
7171: LD_VAR 0 9
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 2
7184: ST_TO_ADDR
// break ;
7185: GO 7189
// end ; end ;
7187: GO 7126
7189: POP
7190: POP
// end ; end ;
7191: GO 6990
7193: POP
7194: POP
// if result and not asc then
7195: LD_VAR 0 6
7199: IFFALSE 7208
7201: PUSH
7202: LD_VAR 0 4
7206: NOT
7207: AND
7208: IFFALSE 7283
// begin tmp := result ;
7210: LD_ADDR_VAR 0 9
7214: PUSH
7215: LD_VAR 0 6
7219: ST_TO_ADDR
// for i = tmp downto 1 do
7220: LD_ADDR_VAR 0 7
7224: PUSH
7225: DOUBLE
7226: LD_VAR 0 9
7230: INC
7231: ST_TO_ADDR
7232: LD_INT 1
7234: PUSH
7235: FOR_DOWNTO
7236: IFFALSE 7281
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7238: LD_ADDR_VAR 0 6
7242: PUSH
7243: LD_VAR 0 6
7247: PPUSH
7248: LD_VAR 0 9
7252: PUSH
7253: LD_VAR 0 7
7257: MINUS
7258: PUSH
7259: LD_INT 1
7261: PLUS
7262: PPUSH
7263: LD_VAR 0 9
7267: PUSH
7268: LD_VAR 0 7
7272: ARRAY
7273: PPUSH
7274: CALL_OW 1
7278: ST_TO_ADDR
7279: GO 7235
7281: POP
7282: POP
// end ; tmp := [ ] ;
7283: LD_ADDR_VAR 0 9
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// if mode then
7290: LD_VAR 0 5
7294: IFFALSE 7363
// begin for i = 1 to result do
7296: LD_ADDR_VAR 0 7
7300: PUSH
7301: DOUBLE
7302: LD_INT 1
7304: DEC
7305: ST_TO_ADDR
7306: LD_VAR 0 6
7310: PUSH
7311: FOR_TO
7312: IFFALSE 7351
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7314: LD_ADDR_VAR 0 9
7318: PUSH
7319: LD_VAR 0 9
7323: PPUSH
7324: LD_VAR 0 7
7328: PPUSH
7329: LD_VAR 0 6
7333: PUSH
7334: LD_VAR 0 7
7338: ARRAY
7339: PUSH
7340: LD_INT 1
7342: ARRAY
7343: PPUSH
7344: CALL_OW 1
7348: ST_TO_ADDR
7349: GO 7311
7351: POP
7352: POP
// result := tmp ;
7353: LD_ADDR_VAR 0 6
7357: PUSH
7358: LD_VAR 0 9
7362: ST_TO_ADDR
// end ; end ;
7363: LD_VAR 0 6
7367: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7368: LD_INT 0
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7376: LD_ADDR_VAR 0 5
7380: PUSH
7381: LD_INT 0
7383: PUSH
7384: LD_INT 0
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: EMPTY
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
// if not x or not y then
7398: LD_VAR 0 2
7402: NOT
7403: IFTRUE 7412
7405: PUSH
7406: LD_VAR 0 3
7410: NOT
7411: OR
7412: IFFALSE 7416
// exit ;
7414: GO 9072
// if not range then
7416: LD_VAR 0 4
7420: NOT
7421: IFFALSE 7431
// range := 10 ;
7423: LD_ADDR_VAR 0 4
7427: PUSH
7428: LD_INT 10
7430: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7431: LD_ADDR_VAR 0 8
7435: PUSH
7436: LD_INT 81
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 92
7450: PUSH
7451: LD_VAR 0 2
7455: PUSH
7456: LD_VAR 0 3
7460: PUSH
7461: LD_VAR 0 4
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 3
7474: PUSH
7475: LD_INT 21
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: LIST
7493: PPUSH
7494: CALL_OW 69
7498: ST_TO_ADDR
// if not tmp then
7499: LD_VAR 0 8
7503: NOT
7504: IFFALSE 7508
// exit ;
7506: GO 9072
// for i in tmp do
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_VAR 0 8
7517: PUSH
7518: FOR_IN
7519: IFFALSE 9047
// begin points := [ 0 , 0 , 0 ] ;
7521: LD_ADDR_VAR 0 9
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: ST_TO_ADDR
// bpoints := 1 ;
7540: LD_ADDR_VAR 0 10
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7548: LD_VAR 0 6
7552: PPUSH
7553: CALL_OW 247
7557: PUSH
7558: LD_INT 1
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 8148
7566: POP
// begin if GetClass ( i ) = 1 then
7567: LD_VAR 0 6
7571: PPUSH
7572: CALL_OW 257
7576: PUSH
7577: LD_INT 1
7579: EQUAL
7580: IFFALSE 7601
// points := [ 10 , 5 , 3 ] ;
7582: LD_ADDR_VAR 0 9
7586: PUSH
7587: LD_INT 10
7589: PUSH
7590: LD_INT 5
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7601: LD_VAR 0 6
7605: PPUSH
7606: CALL_OW 257
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 4
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: IN
7625: IFFALSE 7646
// points := [ 3 , 2 , 1 ] ;
7627: LD_ADDR_VAR 0 9
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7646: LD_VAR 0 6
7650: PPUSH
7651: CALL_OW 257
7655: PUSH
7656: LD_INT 5
7658: EQUAL
7659: IFFALSE 7680
// points := [ 130 , 5 , 2 ] ;
7661: LD_ADDR_VAR 0 9
7665: PUSH
7666: LD_INT 130
7668: PUSH
7669: LD_INT 5
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7680: LD_VAR 0 6
7684: PPUSH
7685: CALL_OW 257
7689: PUSH
7690: LD_INT 8
7692: EQUAL
7693: IFFALSE 7714
// points := [ 35 , 35 , 30 ] ;
7695: LD_ADDR_VAR 0 9
7699: PUSH
7700: LD_INT 35
7702: PUSH
7703: LD_INT 35
7705: PUSH
7706: LD_INT 30
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7714: LD_VAR 0 6
7718: PPUSH
7719: CALL_OW 257
7723: PUSH
7724: LD_INT 9
7726: EQUAL
7727: IFFALSE 7748
// points := [ 20 , 55 , 40 ] ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 20
7736: PUSH
7737: LD_INT 55
7739: PUSH
7740: LD_INT 40
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7748: LD_VAR 0 6
7752: PPUSH
7753: CALL_OW 257
7757: PUSH
7758: LD_INT 12
7760: PUSH
7761: LD_INT 16
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: IN
7768: IFFALSE 7789
// points := [ 5 , 3 , 2 ] ;
7770: LD_ADDR_VAR 0 9
7774: PUSH
7775: LD_INT 5
7777: PUSH
7778: LD_INT 3
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7789: LD_VAR 0 6
7793: PPUSH
7794: CALL_OW 257
7798: PUSH
7799: LD_INT 17
7801: EQUAL
7802: IFFALSE 7823
// points := [ 100 , 50 , 75 ] ;
7804: LD_ADDR_VAR 0 9
7808: PUSH
7809: LD_INT 100
7811: PUSH
7812: LD_INT 50
7814: PUSH
7815: LD_INT 75
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7823: LD_VAR 0 6
7827: PPUSH
7828: CALL_OW 257
7832: PUSH
7833: LD_INT 15
7835: EQUAL
7836: IFFALSE 7857
// points := [ 10 , 5 , 3 ] ;
7838: LD_ADDR_VAR 0 9
7842: PUSH
7843: LD_INT 10
7845: PUSH
7846: LD_INT 5
7848: PUSH
7849: LD_INT 3
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7857: LD_VAR 0 6
7861: PPUSH
7862: CALL_OW 257
7866: PUSH
7867: LD_INT 14
7869: EQUAL
7870: IFFALSE 7891
// points := [ 10 , 0 , 0 ] ;
7872: LD_ADDR_VAR 0 9
7876: PUSH
7877: LD_INT 10
7879: PUSH
7880: LD_INT 0
7882: PUSH
7883: LD_INT 0
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7891: LD_VAR 0 6
7895: PPUSH
7896: CALL_OW 257
7900: PUSH
7901: LD_INT 11
7903: EQUAL
7904: IFFALSE 7925
// points := [ 30 , 10 , 5 ] ;
7906: LD_ADDR_VAR 0 9
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: LD_INT 10
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_INT 5
7932: PPUSH
7933: CALL_OW 321
7937: PUSH
7938: LD_INT 2
7940: EQUAL
7941: IFFALSE 7958
// bpoints := bpoints * 1.8 ;
7943: LD_ADDR_VAR 0 10
7947: PUSH
7948: LD_VAR 0 10
7952: PUSH
7953: LD_REAL  1.80000000000000E+0000
7956: MUL
7957: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7958: LD_VAR 0 6
7962: PPUSH
7963: CALL_OW 257
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 4
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: IN
7986: IFFALSE 8006
7988: PUSH
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: CALL_OW 321
8001: PUSH
8002: LD_INT 2
8004: EQUAL
8005: AND
8006: IFFALSE 8023
// bpoints := bpoints * 1.2 ;
8008: LD_ADDR_VAR 0 10
8012: PUSH
8013: LD_VAR 0 10
8017: PUSH
8018: LD_REAL  1.20000000000000E+0000
8021: MUL
8022: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8023: LD_VAR 0 6
8027: PPUSH
8028: CALL_OW 257
8032: PUSH
8033: LD_INT 5
8035: PUSH
8036: LD_INT 7
8038: PUSH
8039: LD_INT 9
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: IN
8047: IFFALSE 8067
8049: PUSH
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_INT 52
8057: PPUSH
8058: CALL_OW 321
8062: PUSH
8063: LD_INT 2
8065: EQUAL
8066: AND
8067: IFFALSE 8084
// bpoints := bpoints * 1.5 ;
8069: LD_ADDR_VAR 0 10
8073: PUSH
8074: LD_VAR 0 10
8078: PUSH
8079: LD_REAL  1.50000000000000E+0000
8082: MUL
8083: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8084: LD_VAR 0 1
8088: PPUSH
8089: LD_INT 66
8091: PPUSH
8092: CALL_OW 321
8096: PUSH
8097: LD_INT 2
8099: EQUAL
8100: IFFALSE 8117
// bpoints := bpoints * 1.1 ;
8102: LD_ADDR_VAR 0 10
8106: PUSH
8107: LD_VAR 0 10
8111: PUSH
8112: LD_REAL  1.10000000000000E+0000
8115: MUL
8116: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8117: LD_ADDR_VAR 0 10
8121: PUSH
8122: LD_VAR 0 10
8126: PUSH
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_INT 1
8134: PPUSH
8135: CALL_OW 259
8139: PUSH
8140: LD_REAL  1.15000000000000E+0000
8143: MUL
8144: MUL
8145: ST_TO_ADDR
// end ; unit_vehicle :
8146: GO 8976
8148: LD_INT 2
8150: DOUBLE
8151: EQUAL
8152: IFTRUE 8156
8154: GO 8964
8156: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 264
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: LD_INT 42
8172: PUSH
8173: LD_INT 24
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: IN
8181: IFFALSE 8202
// points := [ 25 , 5 , 3 ] ;
8183: LD_ADDR_VAR 0 9
8187: PUSH
8188: LD_INT 25
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8202: LD_VAR 0 6
8206: PPUSH
8207: CALL_OW 264
8211: PUSH
8212: LD_INT 4
8214: PUSH
8215: LD_INT 43
8217: PUSH
8218: LD_INT 25
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: IN
8226: IFFALSE 8247
// points := [ 40 , 15 , 5 ] ;
8228: LD_ADDR_VAR 0 9
8232: PUSH
8233: LD_INT 40
8235: PUSH
8236: LD_INT 15
8238: PUSH
8239: LD_INT 5
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8247: LD_VAR 0 6
8251: PPUSH
8252: CALL_OW 264
8256: PUSH
8257: LD_INT 3
8259: PUSH
8260: LD_INT 23
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: IN
8267: IFFALSE 8288
// points := [ 7 , 25 , 8 ] ;
8269: LD_ADDR_VAR 0 9
8273: PUSH
8274: LD_INT 7
8276: PUSH
8277: LD_INT 25
8279: PUSH
8280: LD_INT 8
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8288: LD_VAR 0 6
8292: PPUSH
8293: CALL_OW 264
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: LD_INT 27
8303: PUSH
8304: LD_INT 44
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: IN
8312: IFFALSE 8333
// points := [ 14 , 50 , 16 ] ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 14
8321: PUSH
8322: LD_INT 50
8324: PUSH
8325: LD_INT 16
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8333: LD_VAR 0 6
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 6
8345: PUSH
8346: LD_INT 46
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: IN
8353: IFFALSE 8374
// points := [ 32 , 120 , 70 ] ;
8355: LD_ADDR_VAR 0 9
8359: PUSH
8360: LD_INT 32
8362: PUSH
8363: LD_INT 120
8365: PUSH
8366: LD_INT 70
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8374: LD_VAR 0 6
8378: PPUSH
8379: CALL_OW 264
8383: PUSH
8384: LD_INT 7
8386: PUSH
8387: LD_INT 28
8389: PUSH
8390: LD_INT 45
8392: PUSH
8393: LD_INT 92
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: IN
8402: IFFALSE 8423
// points := [ 35 , 20 , 45 ] ;
8404: LD_ADDR_VAR 0 9
8408: PUSH
8409: LD_INT 35
8411: PUSH
8412: LD_INT 20
8414: PUSH
8415: LD_INT 45
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8423: LD_VAR 0 6
8427: PPUSH
8428: CALL_OW 264
8432: PUSH
8433: LD_INT 47
8435: PUSH
8436: EMPTY
8437: LIST
8438: IN
8439: IFFALSE 8460
// points := [ 67 , 45 , 75 ] ;
8441: LD_ADDR_VAR 0 9
8445: PUSH
8446: LD_INT 67
8448: PUSH
8449: LD_INT 45
8451: PUSH
8452: LD_INT 75
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8460: LD_VAR 0 6
8464: PPUSH
8465: CALL_OW 264
8469: PUSH
8470: LD_INT 26
8472: PUSH
8473: EMPTY
8474: LIST
8475: IN
8476: IFFALSE 8497
// points := [ 120 , 30 , 80 ] ;
8478: LD_ADDR_VAR 0 9
8482: PUSH
8483: LD_INT 120
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 80
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8497: LD_VAR 0 6
8501: PPUSH
8502: CALL_OW 264
8506: PUSH
8507: LD_INT 22
8509: PUSH
8510: EMPTY
8511: LIST
8512: IN
8513: IFFALSE 8534
// points := [ 40 , 1 , 1 ] ;
8515: LD_ADDR_VAR 0 9
8519: PUSH
8520: LD_INT 40
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 264
8543: PUSH
8544: LD_INT 29
8546: PUSH
8547: EMPTY
8548: LIST
8549: IN
8550: IFFALSE 8571
// points := [ 70 , 200 , 400 ] ;
8552: LD_ADDR_VAR 0 9
8556: PUSH
8557: LD_INT 70
8559: PUSH
8560: LD_INT 200
8562: PUSH
8563: LD_INT 400
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8571: LD_VAR 0 6
8575: PPUSH
8576: CALL_OW 264
8580: PUSH
8581: LD_INT 14
8583: PUSH
8584: LD_INT 53
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: IN
8591: IFFALSE 8612
// points := [ 40 , 10 , 20 ] ;
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 40
8600: PUSH
8601: LD_INT 10
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8612: LD_VAR 0 6
8616: PPUSH
8617: CALL_OW 264
8621: PUSH
8622: LD_INT 9
8624: PUSH
8625: EMPTY
8626: LIST
8627: IN
8628: IFFALSE 8649
// points := [ 5 , 70 , 20 ] ;
8630: LD_ADDR_VAR 0 9
8634: PUSH
8635: LD_INT 5
8637: PUSH
8638: LD_INT 70
8640: PUSH
8641: LD_INT 20
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8649: LD_VAR 0 6
8653: PPUSH
8654: CALL_OW 264
8658: PUSH
8659: LD_INT 10
8661: PUSH
8662: EMPTY
8663: LIST
8664: IN
8665: IFFALSE 8686
// points := [ 35 , 110 , 70 ] ;
8667: LD_ADDR_VAR 0 9
8671: PUSH
8672: LD_INT 35
8674: PUSH
8675: LD_INT 110
8677: PUSH
8678: LD_INT 70
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8686: LD_VAR 0 6
8690: PPUSH
8691: CALL_OW 265
8695: PUSH
8696: LD_INT 25
8698: EQUAL
8699: IFFALSE 8720
// points := [ 80 , 65 , 100 ] ;
8701: LD_ADDR_VAR 0 9
8705: PUSH
8706: LD_INT 80
8708: PUSH
8709: LD_INT 65
8711: PUSH
8712: LD_INT 100
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8720: LD_VAR 0 6
8724: PPUSH
8725: CALL_OW 263
8729: PUSH
8730: LD_INT 1
8732: EQUAL
8733: IFFALSE 8768
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8735: LD_ADDR_VAR 0 10
8739: PUSH
8740: LD_VAR 0 10
8744: PUSH
8745: LD_VAR 0 6
8749: PPUSH
8750: CALL_OW 311
8754: PPUSH
8755: LD_INT 3
8757: PPUSH
8758: CALL_OW 259
8762: PUSH
8763: LD_INT 4
8765: MUL
8766: MUL
8767: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8768: LD_VAR 0 6
8772: PPUSH
8773: CALL_OW 263
8777: PUSH
8778: LD_INT 2
8780: EQUAL
8781: IFFALSE 8832
// begin j := IsControledBy ( i ) ;
8783: LD_ADDR_VAR 0 7
8787: PUSH
8788: LD_VAR 0 6
8792: PPUSH
8793: CALL_OW 312
8797: ST_TO_ADDR
// if j then
8798: LD_VAR 0 7
8802: IFFALSE 8832
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8804: LD_ADDR_VAR 0 10
8808: PUSH
8809: LD_VAR 0 10
8813: PUSH
8814: LD_VAR 0 7
8818: PPUSH
8819: LD_INT 3
8821: PPUSH
8822: CALL_OW 259
8826: PUSH
8827: LD_INT 3
8829: MUL
8830: MUL
8831: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8832: LD_VAR 0 6
8836: PPUSH
8837: CALL_OW 264
8841: PUSH
8842: LD_INT 5
8844: PUSH
8845: LD_INT 6
8847: PUSH
8848: LD_INT 46
8850: PUSH
8851: LD_INT 44
8853: PUSH
8854: LD_INT 47
8856: PUSH
8857: LD_INT 45
8859: PUSH
8860: LD_INT 28
8862: PUSH
8863: LD_INT 7
8865: PUSH
8866: LD_INT 27
8868: PUSH
8869: LD_INT 29
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: IN
8884: IFFALSE 8904
8886: PUSH
8887: LD_VAR 0 1
8891: PPUSH
8892: LD_INT 52
8894: PPUSH
8895: CALL_OW 321
8899: PUSH
8900: LD_INT 2
8902: EQUAL
8903: AND
8904: IFFALSE 8921
// bpoints := bpoints * 1.2 ;
8906: LD_ADDR_VAR 0 10
8910: PUSH
8911: LD_VAR 0 10
8915: PUSH
8916: LD_REAL  1.20000000000000E+0000
8919: MUL
8920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 264
8930: PUSH
8931: LD_INT 6
8933: PUSH
8934: LD_INT 46
8936: PUSH
8937: LD_INT 47
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: IN
8945: IFFALSE 8962
// bpoints := bpoints * 1.2 ;
8947: LD_ADDR_VAR 0 10
8951: PUSH
8952: LD_VAR 0 10
8956: PUSH
8957: LD_REAL  1.20000000000000E+0000
8960: MUL
8961: ST_TO_ADDR
// end ; unit_building :
8962: GO 8976
8964: LD_INT 3
8966: DOUBLE
8967: EQUAL
8968: IFTRUE 8972
8970: GO 8975
8972: POP
// ; end ;
8973: GO 8976
8975: POP
// for j = 1 to 3 do
8976: LD_ADDR_VAR 0 7
8980: PUSH
8981: DOUBLE
8982: LD_INT 1
8984: DEC
8985: ST_TO_ADDR
8986: LD_INT 3
8988: PUSH
8989: FOR_TO
8990: IFFALSE 9043
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8992: LD_ADDR_VAR 0 5
8996: PUSH
8997: LD_VAR 0 5
9001: PPUSH
9002: LD_VAR 0 7
9006: PPUSH
9007: LD_VAR 0 5
9011: PUSH
9012: LD_VAR 0 7
9016: ARRAY
9017: PUSH
9018: LD_VAR 0 9
9022: PUSH
9023: LD_VAR 0 7
9027: ARRAY
9028: PUSH
9029: LD_VAR 0 10
9033: MUL
9034: PLUS
9035: PPUSH
9036: CALL_OW 1
9040: ST_TO_ADDR
9041: GO 8989
9043: POP
9044: POP
// end ;
9045: GO 7518
9047: POP
9048: POP
// result := Replace ( result , 4 , tmp ) ;
9049: LD_ADDR_VAR 0 5
9053: PUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: LD_INT 4
9061: PPUSH
9062: LD_VAR 0 8
9066: PPUSH
9067: CALL_OW 1
9071: ST_TO_ADDR
// end ;
9072: LD_VAR 0 5
9076: RET
// export function DangerAtRange ( unit , range ) ; begin
9077: LD_INT 0
9079: PPUSH
// if not unit then
9080: LD_VAR 0 1
9084: NOT
9085: IFFALSE 9089
// exit ;
9087: GO 9134
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 255
9103: PPUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 250
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 251
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: CALL 7368 0 4
9133: ST_TO_ADDR
// end ;
9134: LD_VAR 0 3
9138: RET
// export function DangerInArea ( side , area ) ; begin
9139: LD_INT 0
9141: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9142: LD_ADDR_VAR 0 3
9146: PUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: LD_INT 81
9154: PUSH
9155: LD_VAR 0 1
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 70
9168: ST_TO_ADDR
// end ;
9169: LD_VAR 0 3
9173: RET
// export function IsExtension ( b ) ; begin
9174: LD_INT 0
9176: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: LD_VAR 0 1
9186: PUSH
9187: LD_INT 23
9189: PUSH
9190: LD_INT 20
9192: PUSH
9193: LD_INT 22
9195: PUSH
9196: LD_INT 17
9198: PUSH
9199: LD_INT 24
9201: PUSH
9202: LD_INT 21
9204: PUSH
9205: LD_INT 19
9207: PUSH
9208: LD_INT 16
9210: PUSH
9211: LD_INT 25
9213: PUSH
9214: LD_INT 18
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: IN
9229: ST_TO_ADDR
// end ;
9230: LD_VAR 0 2
9234: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
// result := [ ] ;
9240: LD_ADDR_VAR 0 4
9244: PUSH
9245: EMPTY
9246: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9247: LD_ADDR_VAR 0 5
9251: PUSH
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 3
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 70
9271: ST_TO_ADDR
// if not tmp then
9272: LD_VAR 0 5
9276: NOT
9277: IFFALSE 9281
// exit ;
9279: GO 9345
// if checkLink then
9281: LD_VAR 0 3
9285: IFFALSE 9335
// begin for i in tmp do
9287: LD_ADDR_VAR 0 6
9291: PUSH
9292: LD_VAR 0 5
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9333
// if GetBase ( i ) <> base then
9300: LD_VAR 0 6
9304: PPUSH
9305: CALL_OW 274
9309: PUSH
9310: LD_VAR 0 1
9314: NONEQUAL
9315: IFFALSE 9331
// ComLinkToBase ( base , i ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_VAR 0 6
9326: PPUSH
9327: CALL_OW 169
9331: GO 9297
9333: POP
9334: POP
// end ; result := tmp ;
9335: LD_ADDR_VAR 0 4
9339: PUSH
9340: LD_VAR 0 5
9344: ST_TO_ADDR
// end ;
9345: LD_VAR 0 4
9349: RET
// export function ComComplete ( units , b ) ; var i ; begin
9350: LD_INT 0
9352: PPUSH
9353: PPUSH
// if not units then
9354: LD_VAR 0 1
9358: NOT
9359: IFFALSE 9363
// exit ;
9361: GO 9453
// for i in units do
9363: LD_ADDR_VAR 0 4
9367: PUSH
9368: LD_VAR 0 1
9372: PUSH
9373: FOR_IN
9374: IFFALSE 9451
// if BuildingStatus ( b ) = bs_build then
9376: LD_VAR 0 2
9380: PPUSH
9381: CALL_OW 461
9385: PUSH
9386: LD_INT 1
9388: EQUAL
9389: IFFALSE 9449
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9391: LD_VAR 0 4
9395: PPUSH
9396: LD_STRING h
9398: PUSH
9399: LD_VAR 0 2
9403: PPUSH
9404: CALL_OW 250
9408: PUSH
9409: LD_VAR 0 2
9413: PPUSH
9414: CALL_OW 251
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: LD_INT 0
9426: PUSH
9427: LD_INT 0
9429: PUSH
9430: LD_INT 0
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: PPUSH
9445: CALL_OW 446
9449: GO 9373
9451: POP
9452: POP
// end ;
9453: LD_VAR 0 3
9457: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9458: LD_INT 0
9460: PPUSH
9461: PPUSH
9462: PPUSH
9463: PPUSH
9464: PPUSH
9465: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9466: LD_VAR 0 1
9470: NOT
9471: IFTRUE 9488
9473: PUSH
9474: LD_VAR 0 1
9478: PPUSH
9479: CALL_OW 263
9483: PUSH
9484: LD_INT 2
9486: NONEQUAL
9487: OR
9488: IFFALSE 9492
// exit ;
9490: GO 9808
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9492: LD_ADDR_VAR 0 6
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 1
9504: PPUSH
9505: CALL_OW 255
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: LD_INT 30
9519: PUSH
9520: LD_INT 36
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 34
9529: PUSH
9530: LD_INT 31
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 69
9550: ST_TO_ADDR
// if not tmp then
9551: LD_VAR 0 6
9555: NOT
9556: IFFALSE 9560
// exit ;
9558: GO 9808
// result := [ ] ;
9560: LD_ADDR_VAR 0 2
9564: PUSH
9565: EMPTY
9566: ST_TO_ADDR
// for i in tmp do
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 6
9576: PUSH
9577: FOR_IN
9578: IFFALSE 9649
// begin t := UnitsInside ( i ) ;
9580: LD_ADDR_VAR 0 4
9584: PUSH
9585: LD_VAR 0 3
9589: PPUSH
9590: CALL_OW 313
9594: ST_TO_ADDR
// if t then
9595: LD_VAR 0 4
9599: IFFALSE 9647
// for j in t do
9601: LD_ADDR_VAR 0 7
9605: PUSH
9606: LD_VAR 0 4
9610: PUSH
9611: FOR_IN
9612: IFFALSE 9645
// result := Replace ( result , result + 1 , j ) ;
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 2
9623: PPUSH
9624: LD_VAR 0 2
9628: PUSH
9629: LD_INT 1
9631: PLUS
9632: PPUSH
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 1
9642: ST_TO_ADDR
9643: GO 9611
9645: POP
9646: POP
// end ;
9647: GO 9577
9649: POP
9650: POP
// if not result then
9651: LD_VAR 0 2
9655: NOT
9656: IFFALSE 9660
// exit ;
9658: GO 9808
// mech := result [ 1 ] ;
9660: LD_ADDR_VAR 0 5
9664: PUSH
9665: LD_VAR 0 2
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: ST_TO_ADDR
// if result > 1 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 1
9681: GREATER
9682: IFFALSE 9794
// begin for i = 2 to result do
9684: LD_ADDR_VAR 0 3
9688: PUSH
9689: DOUBLE
9690: LD_INT 2
9692: DEC
9693: ST_TO_ADDR
9694: LD_VAR 0 2
9698: PUSH
9699: FOR_TO
9700: IFFALSE 9792
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9702: LD_ADDR_VAR 0 4
9706: PUSH
9707: LD_VAR 0 2
9711: PUSH
9712: LD_VAR 0 3
9716: ARRAY
9717: PPUSH
9718: LD_INT 3
9720: PPUSH
9721: CALL_OW 259
9725: PUSH
9726: LD_VAR 0 2
9730: PUSH
9731: LD_VAR 0 3
9735: ARRAY
9736: PPUSH
9737: CALL_OW 432
9741: MINUS
9742: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9743: LD_VAR 0 4
9747: PUSH
9748: LD_VAR 0 5
9752: PPUSH
9753: LD_INT 3
9755: PPUSH
9756: CALL_OW 259
9760: PUSH
9761: LD_VAR 0 5
9765: PPUSH
9766: CALL_OW 432
9770: MINUS
9771: GREATEREQUAL
9772: IFFALSE 9790
// mech := result [ i ] ;
9774: LD_ADDR_VAR 0 5
9778: PUSH
9779: LD_VAR 0 2
9783: PUSH
9784: LD_VAR 0 3
9788: ARRAY
9789: ST_TO_ADDR
// end ;
9790: GO 9699
9792: POP
9793: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_VAR 0 5
9803: PPUSH
9804: CALL_OW 135
// end ;
9808: LD_VAR 0 2
9812: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
9819: PPUSH
9820: PPUSH
9821: PPUSH
9822: PPUSH
9823: PPUSH
9824: PPUSH
9825: PPUSH
9826: PPUSH
9827: PPUSH
// result := [ ] ;
9828: LD_ADDR_VAR 0 7
9832: PUSH
9833: EMPTY
9834: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 266
9844: PUSH
9845: LD_INT 0
9847: PUSH
9848: LD_INT 1
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: IN
9855: NOT
9856: IFFALSE 9860
// exit ;
9858: GO 11500
// if name then
9860: LD_VAR 0 3
9864: IFFALSE 9880
// SetBName ( base_dep , name ) ;
9866: LD_VAR 0 1
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: CALL_OW 500
// base := GetBase ( base_dep ) ;
9880: LD_ADDR_VAR 0 15
9884: PUSH
9885: LD_VAR 0 1
9889: PPUSH
9890: CALL_OW 274
9894: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9895: LD_ADDR_VAR 0 16
9899: PUSH
9900: LD_VAR 0 1
9904: PPUSH
9905: CALL_OW 255
9909: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9910: LD_ADDR_VAR 0 17
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 248
9924: ST_TO_ADDR
// if sources then
9925: LD_VAR 0 5
9929: IFFALSE 9976
// for i = 1 to 3 do
9931: LD_ADDR_VAR 0 8
9935: PUSH
9936: DOUBLE
9937: LD_INT 1
9939: DEC
9940: ST_TO_ADDR
9941: LD_INT 3
9943: PUSH
9944: FOR_TO
9945: IFFALSE 9974
// AddResourceType ( base , i , sources [ i ] ) ;
9947: LD_VAR 0 15
9951: PPUSH
9952: LD_VAR 0 8
9956: PPUSH
9957: LD_VAR 0 5
9961: PUSH
9962: LD_VAR 0 8
9966: ARRAY
9967: PPUSH
9968: CALL_OW 276
9972: GO 9944
9974: POP
9975: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9976: LD_ADDR_VAR 0 18
9980: PUSH
9981: LD_VAR 0 15
9985: PPUSH
9986: LD_VAR 0 2
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL 9235 0 3
9998: ST_TO_ADDR
// InitHc ;
9999: CALL_OW 19
// InitUc ;
10003: CALL_OW 18
// uc_side := side ;
10007: LD_ADDR_OWVAR 20
10011: PUSH
10012: LD_VAR 0 16
10016: ST_TO_ADDR
// uc_nation := nation ;
10017: LD_ADDR_OWVAR 21
10021: PUSH
10022: LD_VAR 0 17
10026: ST_TO_ADDR
// if buildings then
10027: LD_VAR 0 18
10031: IFFALSE 11359
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10033: LD_ADDR_VAR 0 19
10037: PUSH
10038: LD_VAR 0 18
10042: PPUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 30
10048: PUSH
10049: LD_INT 29
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 30
10058: PUSH
10059: LD_INT 30
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: ST_TO_ADDR
// if tmp then
10076: LD_VAR 0 19
10080: IFFALSE 10128
// for i in tmp do
10082: LD_ADDR_VAR 0 8
10086: PUSH
10087: LD_VAR 0 19
10091: PUSH
10092: FOR_IN
10093: IFFALSE 10126
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10095: LD_VAR 0 8
10099: PPUSH
10100: CALL_OW 250
10104: PPUSH
10105: LD_VAR 0 8
10109: PPUSH
10110: CALL_OW 251
10114: PPUSH
10115: LD_VAR 0 16
10119: PPUSH
10120: CALL_OW 441
10124: GO 10092
10126: POP
10127: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10128: LD_VAR 0 18
10132: PPUSH
10133: LD_INT 2
10135: PUSH
10136: LD_INT 30
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 33
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 72
10165: IFFALSE 10253
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10167: LD_ADDR_VAR 0 8
10171: PUSH
10172: LD_VAR 0 18
10176: PPUSH
10177: LD_INT 2
10179: PUSH
10180: LD_INT 30
10182: PUSH
10183: LD_INT 32
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: LD_INT 33
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 72
10209: PUSH
10210: FOR_IN
10211: IFFALSE 10251
// begin if not GetBWeapon ( i ) then
10213: LD_VAR 0 8
10217: PPUSH
10218: CALL_OW 269
10222: NOT
10223: IFFALSE 10249
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10225: LD_VAR 0 8
10229: PPUSH
10230: LD_VAR 0 8
10234: PPUSH
10235: LD_VAR 0 2
10239: PPUSH
10240: CALL 11505 0 2
10244: PPUSH
10245: CALL_OW 431
// end ;
10249: GO 10210
10251: POP
10252: POP
// end ; for i = 1 to personel do
10253: LD_ADDR_VAR 0 8
10257: PUSH
10258: DOUBLE
10259: LD_INT 1
10261: DEC
10262: ST_TO_ADDR
10263: LD_VAR 0 6
10267: PUSH
10268: FOR_TO
10269: IFFALSE 11339
// begin if i > 4 then
10271: LD_VAR 0 8
10275: PUSH
10276: LD_INT 4
10278: GREATER
10279: IFFALSE 10283
// break ;
10281: GO 11339
// case i of 1 :
10283: LD_VAR 0 8
10287: PUSH
10288: LD_INT 1
10290: DOUBLE
10291: EQUAL
10292: IFTRUE 10296
10294: GO 10376
10296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10297: LD_ADDR_VAR 0 12
10301: PUSH
10302: LD_VAR 0 18
10306: PPUSH
10307: LD_INT 22
10309: PUSH
10310: LD_VAR 0 16
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 58
10321: PUSH
10322: EMPTY
10323: LIST
10324: PUSH
10325: LD_INT 2
10327: PUSH
10328: LD_INT 30
10330: PUSH
10331: LD_INT 32
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 30
10340: PUSH
10341: LD_INT 4
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 30
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 72
10373: ST_TO_ADDR
10374: GO 10598
10376: LD_INT 2
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10446
10384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10385: LD_ADDR_VAR 0 12
10389: PUSH
10390: LD_VAR 0 18
10394: PPUSH
10395: LD_INT 22
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 30
10412: PUSH
10413: LD_INT 0
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PPUSH
10439: CALL_OW 72
10443: ST_TO_ADDR
10444: GO 10598
10446: LD_INT 3
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10516
10454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10455: LD_ADDR_VAR 0 12
10459: PUSH
10460: LD_VAR 0 18
10464: PPUSH
10465: LD_INT 22
10467: PUSH
10468: LD_VAR 0 16
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: LD_INT 30
10482: PUSH
10483: LD_INT 2
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 30
10492: PUSH
10493: LD_INT 3
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
10514: GO 10598
10516: LD_INT 4
10518: DOUBLE
10519: EQUAL
10520: IFTRUE 10524
10522: GO 10597
10524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10525: LD_ADDR_VAR 0 12
10529: PUSH
10530: LD_VAR 0 18
10534: PPUSH
10535: LD_INT 22
10537: PUSH
10538: LD_VAR 0 16
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 2
10549: PUSH
10550: LD_INT 30
10552: PUSH
10553: LD_INT 6
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 30
10562: PUSH
10563: LD_INT 7
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 30
10572: PUSH
10573: LD_INT 8
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 72
10594: ST_TO_ADDR
10595: GO 10598
10597: POP
// if i = 1 then
10598: LD_VAR 0 8
10602: PUSH
10603: LD_INT 1
10605: EQUAL
10606: IFFALSE 10717
// begin tmp := [ ] ;
10608: LD_ADDR_VAR 0 19
10612: PUSH
10613: EMPTY
10614: ST_TO_ADDR
// for j in f do
10615: LD_ADDR_VAR 0 9
10619: PUSH
10620: LD_VAR 0 12
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10699
// if GetBType ( j ) = b_bunker then
10628: LD_VAR 0 9
10632: PPUSH
10633: CALL_OW 266
10637: PUSH
10638: LD_INT 32
10640: EQUAL
10641: IFFALSE 10668
// tmp := Insert ( tmp , 1 , j ) else
10643: LD_ADDR_VAR 0 19
10647: PUSH
10648: LD_VAR 0 19
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: LD_VAR 0 9
10660: PPUSH
10661: CALL_OW 2
10665: ST_TO_ADDR
10666: GO 10697
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10668: LD_ADDR_VAR 0 19
10672: PUSH
10673: LD_VAR 0 19
10677: PPUSH
10678: LD_VAR 0 19
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PPUSH
10687: LD_VAR 0 9
10691: PPUSH
10692: CALL_OW 2
10696: ST_TO_ADDR
10697: GO 10625
10699: POP
10700: POP
// if tmp then
10701: LD_VAR 0 19
10705: IFFALSE 10717
// f := tmp ;
10707: LD_ADDR_VAR 0 12
10711: PUSH
10712: LD_VAR 0 19
10716: ST_TO_ADDR
// end ; x := personel [ i ] ;
10717: LD_ADDR_VAR 0 13
10721: PUSH
10722: LD_VAR 0 6
10726: PUSH
10727: LD_VAR 0 8
10731: ARRAY
10732: ST_TO_ADDR
// if x = - 1 then
10733: LD_VAR 0 13
10737: PUSH
10738: LD_INT 1
10740: NEG
10741: EQUAL
10742: IFFALSE 10953
// begin for j in f do
10744: LD_ADDR_VAR 0 9
10748: PUSH
10749: LD_VAR 0 12
10753: PUSH
10754: FOR_IN
10755: IFFALSE 10949
// repeat InitHc ;
10757: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10761: LD_VAR 0 9
10765: PPUSH
10766: CALL_OW 266
10770: PUSH
10771: LD_INT 5
10773: EQUAL
10774: IFFALSE 10844
// begin if UnitsInside ( j ) < 3 then
10776: LD_VAR 0 9
10780: PPUSH
10781: CALL_OW 313
10785: PUSH
10786: LD_INT 3
10788: LESS
10789: IFFALSE 10825
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10791: LD_INT 0
10793: PPUSH
10794: LD_INT 5
10796: PUSH
10797: LD_INT 8
10799: PUSH
10800: LD_INT 9
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_VAR 0 17
10812: ARRAY
10813: PPUSH
10814: LD_VAR 0 4
10818: PPUSH
10819: CALL_OW 380
10823: GO 10842
// PrepareHuman ( false , i , skill ) ;
10825: LD_INT 0
10827: PPUSH
10828: LD_VAR 0 8
10832: PPUSH
10833: LD_VAR 0 4
10837: PPUSH
10838: CALL_OW 380
// end else
10842: GO 10861
// PrepareHuman ( false , i , skill ) ;
10844: LD_INT 0
10846: PPUSH
10847: LD_VAR 0 8
10851: PPUSH
10852: LD_VAR 0 4
10856: PPUSH
10857: CALL_OW 380
// un := CreateHuman ;
10861: LD_ADDR_VAR 0 14
10865: PUSH
10866: CALL_OW 44
10870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10871: LD_ADDR_VAR 0 7
10875: PUSH
10876: LD_VAR 0 7
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: LD_VAR 0 14
10888: PPUSH
10889: CALL_OW 2
10893: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10894: LD_VAR 0 14
10898: PPUSH
10899: LD_VAR 0 9
10903: PPUSH
10904: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10908: LD_VAR 0 9
10912: PPUSH
10913: CALL_OW 313
10917: PUSH
10918: LD_INT 6
10920: EQUAL
10921: IFTRUE 10945
10923: PUSH
10924: LD_VAR 0 9
10928: PPUSH
10929: CALL_OW 266
10933: PUSH
10934: LD_INT 32
10936: PUSH
10937: LD_INT 31
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: IN
10944: OR
10945: IFFALSE 10757
10947: GO 10754
10949: POP
10950: POP
// end else
10951: GO 11337
// for j = 1 to x do
10953: LD_ADDR_VAR 0 9
10957: PUSH
10958: DOUBLE
10959: LD_INT 1
10961: DEC
10962: ST_TO_ADDR
10963: LD_VAR 0 13
10967: PUSH
10968: FOR_TO
10969: IFFALSE 11335
// begin InitHc ;
10971: CALL_OW 19
// if not f then
10975: LD_VAR 0 12
10979: NOT
10980: IFFALSE 11069
// begin PrepareHuman ( false , i , skill ) ;
10982: LD_INT 0
10984: PPUSH
10985: LD_VAR 0 8
10989: PPUSH
10990: LD_VAR 0 4
10994: PPUSH
10995: CALL_OW 380
// un := CreateHuman ;
10999: LD_ADDR_VAR 0 14
11003: PUSH
11004: CALL_OW 44
11008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11009: LD_ADDR_VAR 0 7
11013: PUSH
11014: LD_VAR 0 7
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_VAR 0 14
11026: PPUSH
11027: CALL_OW 2
11031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11032: LD_VAR 0 14
11036: PPUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 250
11046: PPUSH
11047: LD_VAR 0 1
11051: PPUSH
11052: CALL_OW 251
11056: PPUSH
11057: LD_INT 10
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 50
// continue ;
11067: GO 10968
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11069: LD_VAR 0 12
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: CALL_OW 313
11082: IFFALSE 11110
11084: PUSH
11085: LD_VAR 0 12
11089: PUSH
11090: LD_INT 1
11092: ARRAY
11093: PPUSH
11094: CALL_OW 266
11098: PUSH
11099: LD_INT 32
11101: PUSH
11102: LD_INT 31
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: IN
11109: AND
11110: IFTRUE 11131
11112: PUSH
11113: LD_VAR 0 12
11117: PUSH
11118: LD_INT 1
11120: ARRAY
11121: PPUSH
11122: CALL_OW 313
11126: PUSH
11127: LD_INT 6
11129: EQUAL
11130: OR
11131: IFFALSE 11151
// f := Delete ( f , 1 ) ;
11133: LD_ADDR_VAR 0 12
11137: PUSH
11138: LD_VAR 0 12
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 3
11150: ST_TO_ADDR
// if not f then
11151: LD_VAR 0 12
11155: NOT
11156: IFFALSE 11174
// begin x := x + 2 ;
11158: LD_ADDR_VAR 0 13
11162: PUSH
11163: LD_VAR 0 13
11167: PUSH
11168: LD_INT 2
11170: PLUS
11171: ST_TO_ADDR
// continue ;
11172: GO 10968
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11174: LD_VAR 0 12
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PPUSH
11183: CALL_OW 266
11187: PUSH
11188: LD_INT 5
11190: EQUAL
11191: IFFALSE 11265
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11193: LD_VAR 0 12
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PPUSH
11202: CALL_OW 313
11206: PUSH
11207: LD_INT 3
11209: LESS
11210: IFFALSE 11246
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11212: LD_INT 0
11214: PPUSH
11215: LD_INT 5
11217: PUSH
11218: LD_INT 8
11220: PUSH
11221: LD_INT 9
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: PUSH
11229: LD_VAR 0 17
11233: ARRAY
11234: PPUSH
11235: LD_VAR 0 4
11239: PPUSH
11240: CALL_OW 380
11244: GO 11263
// PrepareHuman ( false , i , skill ) ;
11246: LD_INT 0
11248: PPUSH
11249: LD_VAR 0 8
11253: PPUSH
11254: LD_VAR 0 4
11258: PPUSH
11259: CALL_OW 380
// end else
11263: GO 11282
// PrepareHuman ( false , i , skill ) ;
11265: LD_INT 0
11267: PPUSH
11268: LD_VAR 0 8
11272: PPUSH
11273: LD_VAR 0 4
11277: PPUSH
11278: CALL_OW 380
// un := CreateHuman ;
11282: LD_ADDR_VAR 0 14
11286: PUSH
11287: CALL_OW 44
11291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11292: LD_ADDR_VAR 0 7
11296: PUSH
11297: LD_VAR 0 7
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: LD_VAR 0 14
11309: PPUSH
11310: CALL_OW 2
11314: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11315: LD_VAR 0 14
11319: PPUSH
11320: LD_VAR 0 12
11324: PUSH
11325: LD_INT 1
11327: ARRAY
11328: PPUSH
11329: CALL_OW 52
// end ;
11333: GO 10968
11335: POP
11336: POP
// end ;
11337: GO 10268
11339: POP
11340: POP
// result := result ^ buildings ;
11341: LD_ADDR_VAR 0 7
11345: PUSH
11346: LD_VAR 0 7
11350: PUSH
11351: LD_VAR 0 18
11355: ADD
11356: ST_TO_ADDR
// end else
11357: GO 11500
// begin for i = 1 to personel do
11359: LD_ADDR_VAR 0 8
11363: PUSH
11364: DOUBLE
11365: LD_INT 1
11367: DEC
11368: ST_TO_ADDR
11369: LD_VAR 0 6
11373: PUSH
11374: FOR_TO
11375: IFFALSE 11498
// begin if i > 4 then
11377: LD_VAR 0 8
11381: PUSH
11382: LD_INT 4
11384: GREATER
11385: IFFALSE 11389
// break ;
11387: GO 11498
// x := personel [ i ] ;
11389: LD_ADDR_VAR 0 13
11393: PUSH
11394: LD_VAR 0 6
11398: PUSH
11399: LD_VAR 0 8
11403: ARRAY
11404: ST_TO_ADDR
// if x = - 1 then
11405: LD_VAR 0 13
11409: PUSH
11410: LD_INT 1
11412: NEG
11413: EQUAL
11414: IFFALSE 11418
// continue ;
11416: GO 11374
// PrepareHuman ( false , i , skill ) ;
11418: LD_INT 0
11420: PPUSH
11421: LD_VAR 0 8
11425: PPUSH
11426: LD_VAR 0 4
11430: PPUSH
11431: CALL_OW 380
// un := CreateHuman ;
11435: LD_ADDR_VAR 0 14
11439: PUSH
11440: CALL_OW 44
11444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11445: LD_VAR 0 14
11449: PPUSH
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 250
11459: PPUSH
11460: LD_VAR 0 1
11464: PPUSH
11465: CALL_OW 251
11469: PPUSH
11470: LD_INT 10
11472: PPUSH
11473: LD_INT 0
11475: PPUSH
11476: CALL_OW 50
// result := result ^ un ;
11480: LD_ADDR_VAR 0 7
11484: PUSH
11485: LD_VAR 0 7
11489: PUSH
11490: LD_VAR 0 14
11494: ADD
11495: ST_TO_ADDR
// end ;
11496: GO 11374
11498: POP
11499: POP
// end ; end ;
11500: LD_VAR 0 7
11504: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11505: LD_INT 0
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
11522: PPUSH
// result := false ;
11523: LD_ADDR_VAR 0 3
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11531: LD_VAR 0 1
11535: NOT
11536: IFTRUE 11561
11538: PUSH
11539: LD_VAR 0 1
11543: PPUSH
11544: CALL_OW 266
11548: PUSH
11549: LD_INT 32
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: IN
11559: NOT
11560: OR
11561: IFFALSE 11565
// exit ;
11563: GO 12700
// nat := GetNation ( tower ) ;
11565: LD_ADDR_VAR 0 12
11569: PUSH
11570: LD_VAR 0 1
11574: PPUSH
11575: CALL_OW 248
11579: ST_TO_ADDR
// side := GetSide ( tower ) ;
11580: LD_ADDR_VAR 0 16
11584: PUSH
11585: LD_VAR 0 1
11589: PPUSH
11590: CALL_OW 255
11594: ST_TO_ADDR
// x := GetX ( tower ) ;
11595: LD_ADDR_VAR 0 10
11599: PUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 250
11609: ST_TO_ADDR
// y := GetY ( tower ) ;
11610: LD_ADDR_VAR 0 11
11614: PUSH
11615: LD_VAR 0 1
11619: PPUSH
11620: CALL_OW 251
11624: ST_TO_ADDR
// if not x or not y then
11625: LD_VAR 0 10
11629: NOT
11630: IFTRUE 11639
11632: PUSH
11633: LD_VAR 0 11
11637: NOT
11638: OR
11639: IFFALSE 11643
// exit ;
11641: GO 12700
// weapon := 0 ;
11643: LD_ADDR_VAR 0 18
11647: PUSH
11648: LD_INT 0
11650: ST_TO_ADDR
// fac_list := [ ] ;
11651: LD_ADDR_VAR 0 17
11655: PUSH
11656: EMPTY
11657: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11658: LD_ADDR_VAR 0 6
11662: PUSH
11663: LD_VAR 0 1
11667: PPUSH
11668: CALL_OW 274
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: LD_INT 0
11680: PPUSH
11681: CALL 9235 0 3
11685: PPUSH
11686: LD_INT 30
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 72
11700: ST_TO_ADDR
// if not factories then
11701: LD_VAR 0 6
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 12700
// for i in factories do
11710: LD_ADDR_VAR 0 8
11714: PUSH
11715: LD_VAR 0 6
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11746
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11723: LD_ADDR_VAR 0 17
11727: PUSH
11728: LD_VAR 0 17
11732: PUSH
11733: LD_VAR 0 8
11737: PPUSH
11738: CALL_OW 478
11742: UNION
11743: ST_TO_ADDR
11744: GO 11720
11746: POP
11747: POP
// if not fac_list then
11748: LD_VAR 0 17
11752: NOT
11753: IFFALSE 11757
// exit ;
11755: GO 12700
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11757: LD_ADDR_VAR 0 5
11761: PUSH
11762: LD_INT 4
11764: PUSH
11765: LD_INT 5
11767: PUSH
11768: LD_INT 9
11770: PUSH
11771: LD_INT 10
11773: PUSH
11774: LD_INT 6
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 11
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 27
11794: PUSH
11795: LD_INT 28
11797: PUSH
11798: LD_INT 26
11800: PUSH
11801: LD_INT 30
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: LD_INT 43
11812: PUSH
11813: LD_INT 44
11815: PUSH
11816: LD_INT 46
11818: PUSH
11819: LD_INT 45
11821: PUSH
11822: LD_INT 47
11824: PUSH
11825: LD_INT 49
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: PUSH
11841: LD_VAR 0 12
11845: ARRAY
11846: ST_TO_ADDR
// list := list isect fac_list ;
11847: LD_ADDR_VAR 0 5
11851: PUSH
11852: LD_VAR 0 5
11856: PUSH
11857: LD_VAR 0 17
11861: ISECT
11862: ST_TO_ADDR
// if not list then
11863: LD_VAR 0 5
11867: NOT
11868: IFFALSE 11872
// exit ;
11870: GO 12700
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11872: LD_VAR 0 12
11876: PUSH
11877: LD_INT 3
11879: EQUAL
11880: IFFALSE 11892
11882: PUSH
11883: LD_INT 49
11885: PUSH
11886: LD_VAR 0 5
11890: IN
11891: AND
11892: IFFALSE 11912
11894: PUSH
11895: LD_INT 31
11897: PPUSH
11898: LD_VAR 0 16
11902: PPUSH
11903: CALL_OW 321
11907: PUSH
11908: LD_INT 2
11910: EQUAL
11911: AND
11912: IFFALSE 11972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11914: LD_INT 22
11916: PUSH
11917: LD_VAR 0 16
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 35
11928: PUSH
11929: LD_INT 49
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 91
11938: PUSH
11939: LD_VAR 0 1
11943: PUSH
11944: LD_INT 10
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: NOT
11962: IFFALSE 11972
// weapon := ru_time_lapser ;
11964: LD_ADDR_VAR 0 18
11968: PUSH
11969: LD_INT 49
11971: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11972: LD_VAR 0 12
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: LD_INT 2
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: IN
11987: IFFALSE 12011
11989: PUSH
11990: LD_INT 11
11992: PUSH
11993: LD_VAR 0 5
11997: IN
11998: IFTRUE 12010
12000: PUSH
12001: LD_INT 30
12003: PUSH
12004: LD_VAR 0 5
12008: IN
12009: OR
12010: AND
12011: IFFALSE 12031
12013: PUSH
12014: LD_INT 6
12016: PPUSH
12017: LD_VAR 0 16
12021: PPUSH
12022: CALL_OW 321
12026: PUSH
12027: LD_INT 2
12029: EQUAL
12030: AND
12031: IFFALSE 12198
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12033: LD_INT 22
12035: PUSH
12036: LD_VAR 0 16
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 35
12050: PUSH
12051: LD_INT 11
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 35
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 91
12075: PUSH
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: PPUSH
12094: CALL_OW 69
12098: NOT
12099: IFFALSE 12175
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_VAR 0 16
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: LD_INT 30
12119: PUSH
12120: LD_INT 32
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 30
12129: PUSH
12130: LD_INT 33
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 91
12144: PUSH
12145: LD_VAR 0 1
12149: PUSH
12150: LD_INT 12
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: PUSH
12171: LD_INT 2
12173: GREATER
12174: AND
12175: IFFALSE 12198
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12177: LD_ADDR_VAR 0 18
12181: PUSH
12182: LD_INT 11
12184: PUSH
12185: LD_INT 30
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_VAR 0 12
12196: ARRAY
12197: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12198: LD_VAR 0 18
12202: NOT
12203: IFFALSE 12223
12205: PUSH
12206: LD_INT 40
12208: PPUSH
12209: LD_VAR 0 16
12213: PPUSH
12214: CALL_OW 321
12218: PUSH
12219: LD_INT 2
12221: EQUAL
12222: AND
12223: IFFALSE 12259
12225: PUSH
12226: LD_INT 7
12228: PUSH
12229: LD_VAR 0 5
12233: IN
12234: IFTRUE 12246
12236: PUSH
12237: LD_INT 28
12239: PUSH
12240: LD_VAR 0 5
12244: IN
12245: OR
12246: IFTRUE 12258
12248: PUSH
12249: LD_INT 45
12251: PUSH
12252: LD_VAR 0 5
12256: IN
12257: OR
12258: AND
12259: IFFALSE 12513
// begin hex := GetHexInfo ( x , y ) ;
12261: LD_ADDR_VAR 0 4
12265: PUSH
12266: LD_VAR 0 10
12270: PPUSH
12271: LD_VAR 0 11
12275: PPUSH
12276: CALL_OW 546
12280: ST_TO_ADDR
// if hex [ 1 ] then
12281: LD_VAR 0 4
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: IFFALSE 12293
// exit ;
12291: GO 12700
// height := hex [ 2 ] ;
12293: LD_ADDR_VAR 0 15
12297: PUSH
12298: LD_VAR 0 4
12302: PUSH
12303: LD_INT 2
12305: ARRAY
12306: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12307: LD_ADDR_VAR 0 14
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: LD_INT 3
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
// for i in tmp do
12330: LD_ADDR_VAR 0 8
12334: PUSH
12335: LD_VAR 0 14
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12511
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12343: LD_ADDR_VAR 0 9
12347: PUSH
12348: LD_VAR 0 10
12352: PPUSH
12353: LD_VAR 0 8
12357: PPUSH
12358: LD_INT 5
12360: PPUSH
12361: CALL_OW 272
12365: PUSH
12366: LD_VAR 0 11
12370: PPUSH
12371: LD_VAR 0 8
12375: PPUSH
12376: LD_INT 5
12378: PPUSH
12379: CALL_OW 273
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12388: LD_VAR 0 9
12392: PUSH
12393: LD_INT 1
12395: ARRAY
12396: PPUSH
12397: LD_VAR 0 9
12401: PUSH
12402: LD_INT 2
12404: ARRAY
12405: PPUSH
12406: CALL_OW 488
12410: IFFALSE 12509
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12412: LD_ADDR_VAR 0 4
12416: PUSH
12417: LD_VAR 0 9
12421: PUSH
12422: LD_INT 1
12424: ARRAY
12425: PPUSH
12426: LD_VAR 0 9
12430: PUSH
12431: LD_INT 2
12433: ARRAY
12434: PPUSH
12435: CALL_OW 546
12439: ST_TO_ADDR
// if hex [ 1 ] then
12440: LD_VAR 0 4
12444: PUSH
12445: LD_INT 1
12447: ARRAY
12448: IFFALSE 12452
// continue ;
12450: GO 12340
// h := hex [ 2 ] ;
12452: LD_ADDR_VAR 0 13
12456: PUSH
12457: LD_VAR 0 4
12461: PUSH
12462: LD_INT 2
12464: ARRAY
12465: ST_TO_ADDR
// if h + 7 < height then
12466: LD_VAR 0 13
12470: PUSH
12471: LD_INT 7
12473: PLUS
12474: PUSH
12475: LD_VAR 0 15
12479: LESS
12480: IFFALSE 12509
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12482: LD_ADDR_VAR 0 18
12486: PUSH
12487: LD_INT 7
12489: PUSH
12490: LD_INT 28
12492: PUSH
12493: LD_INT 45
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_VAR 0 12
12505: ARRAY
12506: ST_TO_ADDR
// break ;
12507: GO 12511
// end ; end ; end ;
12509: GO 12340
12511: POP
12512: POP
// end ; if not weapon then
12513: LD_VAR 0 18
12517: NOT
12518: IFFALSE 12578
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12520: LD_ADDR_VAR 0 5
12524: PUSH
12525: LD_VAR 0 5
12529: PUSH
12530: LD_INT 11
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 49
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: DIFF
12544: ST_TO_ADDR
// if not list then
12545: LD_VAR 0 5
12549: NOT
12550: IFFALSE 12554
// exit ;
12552: GO 12700
// weapon := list [ rand ( 1 , list ) ] ;
12554: LD_ADDR_VAR 0 18
12558: PUSH
12559: LD_VAR 0 5
12563: PUSH
12564: LD_INT 1
12566: PPUSH
12567: LD_VAR 0 5
12571: PPUSH
12572: CALL_OW 12
12576: ARRAY
12577: ST_TO_ADDR
// end ; if weapon then
12578: LD_VAR 0 18
12582: IFFALSE 12700
// begin tmp := CostOfWeapon ( weapon ) ;
12584: LD_ADDR_VAR 0 14
12588: PUSH
12589: LD_VAR 0 18
12593: PPUSH
12594: CALL_OW 451
12598: ST_TO_ADDR
// j := GetBase ( tower ) ;
12599: LD_ADDR_VAR 0 9
12603: PUSH
12604: LD_VAR 0 1
12608: PPUSH
12609: CALL_OW 274
12613: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12614: LD_VAR 0 9
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 275
12626: PUSH
12627: LD_VAR 0 14
12631: PUSH
12632: LD_INT 1
12634: ARRAY
12635: GREATEREQUAL
12636: IFFALSE 12662
12638: PUSH
12639: LD_VAR 0 9
12643: PPUSH
12644: LD_INT 2
12646: PPUSH
12647: CALL_OW 275
12651: PUSH
12652: LD_VAR 0 14
12656: PUSH
12657: LD_INT 2
12659: ARRAY
12660: GREATEREQUAL
12661: AND
12662: IFFALSE 12688
12664: PUSH
12665: LD_VAR 0 9
12669: PPUSH
12670: LD_INT 3
12672: PPUSH
12673: CALL_OW 275
12677: PUSH
12678: LD_VAR 0 14
12682: PUSH
12683: LD_INT 3
12685: ARRAY
12686: GREATEREQUAL
12687: AND
12688: IFFALSE 12700
// result := weapon ;
12690: LD_ADDR_VAR 0 3
12694: PUSH
12695: LD_VAR 0 18
12699: ST_TO_ADDR
// end ; end ;
12700: LD_VAR 0 3
12704: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
// result := true ;
12709: LD_ADDR_VAR 0 3
12713: PUSH
12714: LD_INT 1
12716: ST_TO_ADDR
// if array1 = array2 then
12717: LD_VAR 0 1
12721: PUSH
12722: LD_VAR 0 2
12726: EQUAL
12727: IFFALSE 12787
// begin for i = 1 to array1 do
12729: LD_ADDR_VAR 0 4
12733: PUSH
12734: DOUBLE
12735: LD_INT 1
12737: DEC
12738: ST_TO_ADDR
12739: LD_VAR 0 1
12743: PUSH
12744: FOR_TO
12745: IFFALSE 12783
// if array1 [ i ] <> array2 [ i ] then
12747: LD_VAR 0 1
12751: PUSH
12752: LD_VAR 0 4
12756: ARRAY
12757: PUSH
12758: LD_VAR 0 2
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: NONEQUAL
12769: IFFALSE 12781
// begin result := false ;
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 0
12778: ST_TO_ADDR
// break ;
12779: GO 12783
// end ;
12781: GO 12744
12783: POP
12784: POP
// end else
12785: GO 12795
// result := false ;
12787: LD_ADDR_VAR 0 3
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// end ;
12795: LD_VAR 0 3
12799: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12800: LD_INT 0
12802: PPUSH
12803: PPUSH
// if not array1 or not array2 then
12804: LD_VAR 0 1
12808: NOT
12809: IFTRUE 12818
12811: PUSH
12812: LD_VAR 0 2
12816: NOT
12817: OR
12818: IFFALSE 12822
// exit ;
12820: GO 12886
// result := true ;
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// for i = 1 to array1 do
12830: LD_ADDR_VAR 0 4
12834: PUSH
12835: DOUBLE
12836: LD_INT 1
12838: DEC
12839: ST_TO_ADDR
12840: LD_VAR 0 1
12844: PUSH
12845: FOR_TO
12846: IFFALSE 12884
// if array1 [ i ] <> array2 [ i ] then
12848: LD_VAR 0 1
12852: PUSH
12853: LD_VAR 0 4
12857: ARRAY
12858: PUSH
12859: LD_VAR 0 2
12863: PUSH
12864: LD_VAR 0 4
12868: ARRAY
12869: NONEQUAL
12870: IFFALSE 12882
// begin result := false ;
12872: LD_ADDR_VAR 0 3
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// break ;
12880: GO 12884
// end ;
12882: GO 12845
12884: POP
12885: POP
// end ;
12886: LD_VAR 0 3
12890: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12891: LD_INT 0
12893: PPUSH
12894: PPUSH
12895: PPUSH
// pom := GetBase ( fac ) ;
12896: LD_ADDR_VAR 0 5
12900: PUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 274
12910: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12911: LD_ADDR_VAR 0 4
12915: PUSH
12916: LD_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: LD_VAR 0 2
12929: PUSH
12930: LD_INT 2
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 2
12938: PUSH
12939: LD_INT 3
12941: ARRAY
12942: PPUSH
12943: LD_VAR 0 2
12947: PUSH
12948: LD_INT 4
12950: ARRAY
12951: PPUSH
12952: CALL_OW 449
12956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: LD_VAR 0 5
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 275
12974: PUSH
12975: LD_VAR 0 4
12979: PUSH
12980: LD_INT 1
12982: ARRAY
12983: GREATEREQUAL
12984: IFFALSE 13010
12986: PUSH
12987: LD_VAR 0 5
12991: PPUSH
12992: LD_INT 2
12994: PPUSH
12995: CALL_OW 275
12999: PUSH
13000: LD_VAR 0 4
13004: PUSH
13005: LD_INT 2
13007: ARRAY
13008: GREATEREQUAL
13009: AND
13010: IFFALSE 13036
13012: PUSH
13013: LD_VAR 0 5
13017: PPUSH
13018: LD_INT 3
13020: PPUSH
13021: CALL_OW 275
13025: PUSH
13026: LD_VAR 0 4
13030: PUSH
13031: LD_INT 3
13033: ARRAY
13034: GREATEREQUAL
13035: AND
13036: ST_TO_ADDR
// end ;
13037: LD_VAR 0 3
13041: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13042: LD_INT 0
13044: PPUSH
13045: PPUSH
13046: PPUSH
13047: PPUSH
// pom := GetBase ( building ) ;
13048: LD_ADDR_VAR 0 3
13052: PUSH
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 274
13062: ST_TO_ADDR
// if not pom then
13063: LD_VAR 0 3
13067: NOT
13068: IFFALSE 13072
// exit ;
13070: GO 13246
// btype := GetBType ( building ) ;
13072: LD_ADDR_VAR 0 5
13076: PUSH
13077: LD_VAR 0 1
13081: PPUSH
13082: CALL_OW 266
13086: ST_TO_ADDR
// if btype = b_armoury then
13087: LD_VAR 0 5
13091: PUSH
13092: LD_INT 4
13094: EQUAL
13095: IFFALSE 13105
// btype := b_barracks ;
13097: LD_ADDR_VAR 0 5
13101: PUSH
13102: LD_INT 5
13104: ST_TO_ADDR
// if btype = b_depot then
13105: LD_VAR 0 5
13109: PUSH
13110: LD_INT 0
13112: EQUAL
13113: IFFALSE 13123
// btype := b_warehouse ;
13115: LD_ADDR_VAR 0 5
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// if btype = b_workshop then
13123: LD_VAR 0 5
13127: PUSH
13128: LD_INT 2
13130: EQUAL
13131: IFFALSE 13141
// btype := b_factory ;
13133: LD_ADDR_VAR 0 5
13137: PUSH
13138: LD_INT 3
13140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13141: LD_ADDR_VAR 0 4
13145: PUSH
13146: LD_VAR 0 5
13150: PPUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 248
13160: PPUSH
13161: CALL_OW 450
13165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13166: LD_ADDR_VAR 0 2
13170: PUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 275
13183: PUSH
13184: LD_VAR 0 4
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: GREATEREQUAL
13193: IFFALSE 13219
13195: PUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 275
13208: PUSH
13209: LD_VAR 0 4
13213: PUSH
13214: LD_INT 2
13216: ARRAY
13217: GREATEREQUAL
13218: AND
13219: IFFALSE 13245
13221: PUSH
13222: LD_VAR 0 3
13226: PPUSH
13227: LD_INT 3
13229: PPUSH
13230: CALL_OW 275
13234: PUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_INT 3
13242: ARRAY
13243: GREATEREQUAL
13244: AND
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 2
13250: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
13255: PPUSH
// pom := GetBase ( building ) ;
13256: LD_ADDR_VAR 0 4
13260: PUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 274
13270: ST_TO_ADDR
// if not pom then
13271: LD_VAR 0 4
13275: NOT
13276: IFFALSE 13280
// exit ;
13278: GO 13385
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13280: LD_ADDR_VAR 0 5
13284: PUSH
13285: LD_VAR 0 2
13289: PPUSH
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 248
13299: PPUSH
13300: CALL_OW 450
13304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 275
13322: PUSH
13323: LD_VAR 0 5
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: GREATEREQUAL
13332: IFFALSE 13358
13334: PUSH
13335: LD_VAR 0 4
13339: PPUSH
13340: LD_INT 2
13342: PPUSH
13343: CALL_OW 275
13347: PUSH
13348: LD_VAR 0 5
13352: PUSH
13353: LD_INT 2
13355: ARRAY
13356: GREATEREQUAL
13357: AND
13358: IFFALSE 13384
13360: PUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_INT 3
13368: PPUSH
13369: CALL_OW 275
13373: PUSH
13374: LD_VAR 0 5
13378: PUSH
13379: LD_INT 3
13381: ARRAY
13382: GREATEREQUAL
13383: AND
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 3
13389: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13390: LD_INT 0
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
13396: PPUSH
13397: PPUSH
13398: PPUSH
13399: PPUSH
13400: PPUSH
13401: PPUSH
13402: PPUSH
// result := false ;
13403: LD_ADDR_VAR 0 8
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13411: LD_VAR 0 5
13415: NOT
13416: IFTRUE 13425
13418: PUSH
13419: LD_VAR 0 1
13423: NOT
13424: OR
13425: IFTRUE 13434
13427: PUSH
13428: LD_VAR 0 2
13432: NOT
13433: OR
13434: IFTRUE 13443
13436: PUSH
13437: LD_VAR 0 3
13441: NOT
13442: OR
13443: IFFALSE 13447
// exit ;
13445: GO 14273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13447: LD_ADDR_VAR 0 14
13451: PUSH
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_VAR 0 2
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_VAR 0 4
13471: PPUSH
13472: LD_VAR 0 5
13476: PUSH
13477: LD_INT 1
13479: ARRAY
13480: PPUSH
13481: CALL_OW 248
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: CALL 15554 0 6
13493: ST_TO_ADDR
// if not hexes then
13494: LD_VAR 0 14
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 14273
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13503: LD_ADDR_VAR 0 17
13507: PUSH
13508: LD_VAR 0 5
13512: PPUSH
13513: LD_INT 22
13515: PUSH
13516: LD_VAR 0 13
13520: PPUSH
13521: CALL_OW 255
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 2
13532: PUSH
13533: LD_INT 30
13535: PUSH
13536: LD_INT 0
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 30
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 72
13566: ST_TO_ADDR
// for i = 1 to hexes do
13567: LD_ADDR_VAR 0 9
13571: PUSH
13572: DOUBLE
13573: LD_INT 1
13575: DEC
13576: ST_TO_ADDR
13577: LD_VAR 0 14
13581: PUSH
13582: FOR_TO
13583: IFFALSE 14271
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13585: LD_ADDR_VAR 0 13
13589: PUSH
13590: LD_VAR 0 14
13594: PUSH
13595: LD_VAR 0 9
13599: ARRAY
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_VAR 0 14
13609: PUSH
13610: LD_VAR 0 9
13614: ARRAY
13615: PUSH
13616: LD_INT 2
13618: ARRAY
13619: PPUSH
13620: CALL_OW 428
13624: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13625: LD_VAR 0 14
13629: PUSH
13630: LD_VAR 0 9
13634: ARRAY
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: PPUSH
13640: LD_VAR 0 14
13644: PUSH
13645: LD_VAR 0 9
13649: ARRAY
13650: PUSH
13651: LD_INT 2
13653: ARRAY
13654: PPUSH
13655: CALL_OW 351
13659: IFTRUE 13698
13661: PUSH
13662: LD_VAR 0 14
13666: PUSH
13667: LD_VAR 0 9
13671: ARRAY
13672: PUSH
13673: LD_INT 1
13675: ARRAY
13676: PPUSH
13677: LD_VAR 0 14
13681: PUSH
13682: LD_VAR 0 9
13686: ARRAY
13687: PUSH
13688: LD_INT 2
13690: ARRAY
13691: PPUSH
13692: CALL_OW 488
13696: NOT
13697: OR
13698: IFTRUE 13715
13700: PUSH
13701: LD_VAR 0 13
13705: PPUSH
13706: CALL_OW 247
13710: PUSH
13711: LD_INT 3
13713: EQUAL
13714: OR
13715: IFFALSE 13721
// exit ;
13717: POP
13718: POP
13719: GO 14273
// if not tmp then
13721: LD_VAR 0 13
13725: NOT
13726: IFFALSE 13730
// continue ;
13728: GO 13582
// result := true ;
13730: LD_ADDR_VAR 0 8
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13738: LD_VAR 0 6
13742: IFFALSE 13759
13744: PUSH
13745: LD_VAR 0 13
13749: PPUSH
13750: CALL_OW 247
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: AND
13759: IFFALSE 13776
13761: PUSH
13762: LD_VAR 0 13
13766: PPUSH
13767: CALL_OW 263
13771: PUSH
13772: LD_INT 1
13774: EQUAL
13775: AND
13776: IFFALSE 13940
// begin if IsDrivenBy ( tmp ) then
13778: LD_VAR 0 13
13782: PPUSH
13783: CALL_OW 311
13787: IFFALSE 13791
// continue ;
13789: GO 13582
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13791: LD_VAR 0 6
13795: PPUSH
13796: LD_INT 3
13798: PUSH
13799: LD_INT 60
13801: PUSH
13802: EMPTY
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 3
13811: PUSH
13812: LD_INT 55
13814: PUSH
13815: EMPTY
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 72
13830: IFFALSE 13938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13832: LD_ADDR_VAR 0 18
13836: PUSH
13837: LD_VAR 0 6
13841: PPUSH
13842: LD_INT 3
13844: PUSH
13845: LD_INT 60
13847: PUSH
13848: EMPTY
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: LD_INT 55
13860: PUSH
13861: EMPTY
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 72
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: ST_TO_ADDR
// if IsInUnit ( driver ) then
13881: LD_VAR 0 18
13885: PPUSH
13886: CALL_OW 310
13890: IFFALSE 13901
// ComExit ( driver ) ;
13892: LD_VAR 0 18
13896: PPUSH
13897: CALL 39554 0 1
// AddComEnterUnit ( driver , tmp ) ;
13901: LD_VAR 0 18
13905: PPUSH
13906: LD_VAR 0 13
13910: PPUSH
13911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13915: LD_VAR 0 18
13919: PPUSH
13920: LD_VAR 0 7
13924: PPUSH
13925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13929: LD_VAR 0 18
13933: PPUSH
13934: CALL_OW 181
// end ; continue ;
13938: GO 13582
// end ; if not cleaners or not tmp in cleaners then
13940: LD_VAR 0 6
13944: NOT
13945: IFTRUE 13960
13947: PUSH
13948: LD_VAR 0 13
13952: PUSH
13953: LD_VAR 0 6
13957: IN
13958: NOT
13959: OR
13960: IFFALSE 14269
// begin if dep then
13962: LD_VAR 0 17
13966: IFFALSE 14102
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13968: LD_ADDR_VAR 0 16
13972: PUSH
13973: LD_VAR 0 17
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: CALL_OW 250
13986: PPUSH
13987: LD_VAR 0 17
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: CALL_OW 254
14000: PPUSH
14001: LD_INT 5
14003: PPUSH
14004: CALL_OW 272
14008: PUSH
14009: LD_VAR 0 17
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PPUSH
14018: CALL_OW 251
14022: PPUSH
14023: LD_VAR 0 17
14027: PUSH
14028: LD_INT 1
14030: ARRAY
14031: PPUSH
14032: CALL_OW 254
14036: PPUSH
14037: LD_INT 5
14039: PPUSH
14040: CALL_OW 273
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14049: LD_VAR 0 16
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: LD_VAR 0 16
14062: PUSH
14063: LD_INT 2
14065: ARRAY
14066: PPUSH
14067: CALL_OW 488
14071: IFFALSE 14102
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14073: LD_VAR 0 13
14077: PPUSH
14078: LD_VAR 0 16
14082: PUSH
14083: LD_INT 1
14085: ARRAY
14086: PPUSH
14087: LD_VAR 0 16
14091: PUSH
14092: LD_INT 2
14094: ARRAY
14095: PPUSH
14096: CALL_OW 111
// continue ;
14100: GO 13582
// end ; end ; r := GetDir ( tmp ) ;
14102: LD_ADDR_VAR 0 15
14106: PUSH
14107: LD_VAR 0 13
14111: PPUSH
14112: CALL_OW 254
14116: ST_TO_ADDR
// if r = 5 then
14117: LD_VAR 0 15
14121: PUSH
14122: LD_INT 5
14124: EQUAL
14125: IFFALSE 14135
// r := 0 ;
14127: LD_ADDR_VAR 0 15
14131: PUSH
14132: LD_INT 0
14134: ST_TO_ADDR
// for j = r to 5 do
14135: LD_ADDR_VAR 0 10
14139: PUSH
14140: DOUBLE
14141: LD_VAR 0 15
14145: DEC
14146: ST_TO_ADDR
14147: LD_INT 5
14149: PUSH
14150: FOR_TO
14151: IFFALSE 14267
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14153: LD_ADDR_VAR 0 11
14157: PUSH
14158: LD_VAR 0 13
14162: PPUSH
14163: CALL_OW 250
14167: PPUSH
14168: LD_VAR 0 10
14172: PPUSH
14173: LD_INT 2
14175: PPUSH
14176: CALL_OW 272
14180: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14181: LD_ADDR_VAR 0 12
14185: PUSH
14186: LD_VAR 0 13
14190: PPUSH
14191: CALL_OW 251
14195: PPUSH
14196: LD_VAR 0 10
14200: PPUSH
14201: LD_INT 2
14203: PPUSH
14204: CALL_OW 273
14208: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14209: LD_VAR 0 11
14213: PPUSH
14214: LD_VAR 0 12
14218: PPUSH
14219: CALL_OW 488
14223: IFFALSE 14242
14225: PUSH
14226: LD_VAR 0 11
14230: PPUSH
14231: LD_VAR 0 12
14235: PPUSH
14236: CALL_OW 428
14240: NOT
14241: AND
14242: IFFALSE 14265
// begin ComMoveXY ( tmp , _x , _y ) ;
14244: LD_VAR 0 13
14248: PPUSH
14249: LD_VAR 0 11
14253: PPUSH
14254: LD_VAR 0 12
14258: PPUSH
14259: CALL_OW 111
// break ;
14263: GO 14267
// end ; end ;
14265: GO 14150
14267: POP
14268: POP
// end ; end ;
14269: GO 13582
14271: POP
14272: POP
// end ;
14273: LD_VAR 0 8
14277: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14278: LD_INT 0
14280: PPUSH
// result := true ;
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_INT 1
14288: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14289: LD_VAR 0 2
14293: PUSH
14294: LD_INT 24
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14308
14300: LD_INT 33
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14333
14308: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 32
14316: PPUSH
14317: LD_VAR 0 1
14321: PPUSH
14322: CALL_OW 321
14326: PUSH
14327: LD_INT 2
14329: EQUAL
14330: ST_TO_ADDR
14331: GO 14649
14333: LD_INT 20
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14366
14341: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14342: LD_ADDR_VAR 0 3
14346: PUSH
14347: LD_INT 6
14349: PPUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 321
14359: PUSH
14360: LD_INT 2
14362: EQUAL
14363: ST_TO_ADDR
14364: GO 14649
14366: LD_INT 22
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14380
14372: LD_INT 36
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14405
14380: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: LD_INT 15
14388: PPUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 321
14398: PUSH
14399: LD_INT 2
14401: EQUAL
14402: ST_TO_ADDR
14403: GO 14649
14405: LD_INT 30
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14438
14413: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_VAR 0 1
14426: PPUSH
14427: CALL_OW 321
14431: PUSH
14432: LD_INT 2
14434: EQUAL
14435: ST_TO_ADDR
14436: GO 14649
14438: LD_INT 28
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14452
14444: LD_INT 21
14446: DOUBLE
14447: EQUAL
14448: IFTRUE 14452
14450: GO 14477
14452: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14453: LD_ADDR_VAR 0 3
14457: PUSH
14458: LD_INT 21
14460: PPUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 321
14470: PUSH
14471: LD_INT 2
14473: EQUAL
14474: ST_TO_ADDR
14475: GO 14649
14477: LD_INT 16
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14510
14485: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 84
14493: PPUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 321
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: ST_TO_ADDR
14508: GO 14649
14510: LD_INT 19
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14524
14516: LD_INT 23
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14549
14524: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: LD_INT 83
14532: PPUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 321
14542: PUSH
14543: LD_INT 2
14545: EQUAL
14546: ST_TO_ADDR
14547: GO 14649
14549: LD_INT 17
14551: DOUBLE
14552: EQUAL
14553: IFTRUE 14557
14555: GO 14582
14557: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_INT 39
14565: PPUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: CALL_OW 321
14575: PUSH
14576: LD_INT 2
14578: EQUAL
14579: ST_TO_ADDR
14580: GO 14649
14582: LD_INT 18
14584: DOUBLE
14585: EQUAL
14586: IFTRUE 14590
14588: GO 14615
14590: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: LD_INT 40
14598: PPUSH
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 321
14608: PUSH
14609: LD_INT 2
14611: EQUAL
14612: ST_TO_ADDR
14613: GO 14649
14615: LD_INT 27
14617: DOUBLE
14618: EQUAL
14619: IFTRUE 14623
14621: GO 14648
14623: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14624: LD_ADDR_VAR 0 3
14628: PUSH
14629: LD_INT 35
14631: PPUSH
14632: LD_VAR 0 1
14636: PPUSH
14637: CALL_OW 321
14641: PUSH
14642: LD_INT 2
14644: EQUAL
14645: ST_TO_ADDR
14646: GO 14649
14648: POP
// end ;
14649: LD_VAR 0 3
14653: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// result := false ;
14667: LD_ADDR_VAR 0 6
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// if btype = b_depot then
14675: LD_VAR 0 2
14679: PUSH
14680: LD_INT 0
14682: EQUAL
14683: IFFALSE 14695
// begin result := true ;
14685: LD_ADDR_VAR 0 6
14689: PUSH
14690: LD_INT 1
14692: ST_TO_ADDR
// exit ;
14693: GO 15549
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14695: LD_VAR 0 1
14699: NOT
14700: IFTRUE 14725
14702: PUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 266
14712: PUSH
14713: LD_INT 0
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: IN
14723: NOT
14724: OR
14725: IFTRUE 14734
14727: PUSH
14728: LD_VAR 0 2
14732: NOT
14733: OR
14734: IFTRUE 14770
14736: PUSH
14737: LD_VAR 0 5
14741: PUSH
14742: LD_INT 0
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 4
14756: PUSH
14757: LD_INT 5
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: IN
14768: NOT
14769: OR
14770: IFTRUE 14789
14772: PUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_VAR 0 4
14782: PPUSH
14783: CALL_OW 488
14787: NOT
14788: OR
14789: IFFALSE 14793
// exit ;
14791: GO 15549
// side := GetSide ( depot ) ;
14793: LD_ADDR_VAR 0 9
14797: PUSH
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 255
14807: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14808: LD_VAR 0 9
14812: PPUSH
14813: LD_VAR 0 2
14817: PPUSH
14818: CALL 14278 0 2
14822: NOT
14823: IFFALSE 14827
// exit ;
14825: GO 15549
// pom := GetBase ( depot ) ;
14827: LD_ADDR_VAR 0 10
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 274
14841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14842: LD_ADDR_VAR 0 11
14846: PUSH
14847: LD_VAR 0 2
14851: PPUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 248
14861: PPUSH
14862: CALL_OW 450
14866: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14867: LD_VAR 0 10
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 275
14879: PUSH
14880: LD_VAR 0 11
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: GREATEREQUAL
14889: IFFALSE 14915
14891: PUSH
14892: LD_VAR 0 10
14896: PPUSH
14897: LD_INT 2
14899: PPUSH
14900: CALL_OW 275
14904: PUSH
14905: LD_VAR 0 11
14909: PUSH
14910: LD_INT 2
14912: ARRAY
14913: GREATEREQUAL
14914: AND
14915: IFFALSE 14941
14917: PUSH
14918: LD_VAR 0 10
14922: PPUSH
14923: LD_INT 3
14925: PPUSH
14926: CALL_OW 275
14930: PUSH
14931: LD_VAR 0 11
14935: PUSH
14936: LD_INT 3
14938: ARRAY
14939: GREATEREQUAL
14940: AND
14941: NOT
14942: IFFALSE 14946
// exit ;
14944: GO 15549
// if GetBType ( depot ) = b_depot then
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 266
14955: PUSH
14956: LD_INT 0
14958: EQUAL
14959: IFFALSE 14971
// dist := 28 else
14961: LD_ADDR_VAR 0 14
14965: PUSH
14966: LD_INT 28
14968: ST_TO_ADDR
14969: GO 14979
// dist := 36 ;
14971: LD_ADDR_VAR 0 14
14975: PUSH
14976: LD_INT 36
14978: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_VAR 0 3
14988: PPUSH
14989: LD_VAR 0 4
14993: PPUSH
14994: CALL_OW 297
14998: PUSH
14999: LD_VAR 0 14
15003: GREATER
15004: IFFALSE 15008
// exit ;
15006: GO 15549
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15008: LD_ADDR_VAR 0 12
15012: PUSH
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: LD_VAR 0 1
15037: PPUSH
15038: CALL_OW 248
15042: PPUSH
15043: LD_INT 0
15045: PPUSH
15046: CALL 15554 0 6
15050: ST_TO_ADDR
// if not hexes then
15051: LD_VAR 0 12
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15549
// hex := GetHexInfo ( x , y ) ;
15060: LD_ADDR_VAR 0 15
15064: PUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: LD_VAR 0 4
15074: PPUSH
15075: CALL_OW 546
15079: ST_TO_ADDR
// if hex [ 1 ] then
15080: LD_VAR 0 15
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: IFFALSE 15092
// exit ;
15090: GO 15549
// height := hex [ 2 ] ;
15092: LD_ADDR_VAR 0 13
15096: PUSH
15097: LD_VAR 0 15
15101: PUSH
15102: LD_INT 2
15104: ARRAY
15105: ST_TO_ADDR
// for i = 1 to hexes do
15106: LD_ADDR_VAR 0 7
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_VAR 0 12
15120: PUSH
15121: FOR_TO
15122: IFFALSE 15466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15124: LD_VAR 0 12
15128: PUSH
15129: LD_VAR 0 7
15133: ARRAY
15134: PUSH
15135: LD_INT 1
15137: ARRAY
15138: PPUSH
15139: LD_VAR 0 12
15143: PUSH
15144: LD_VAR 0 7
15148: ARRAY
15149: PUSH
15150: LD_INT 2
15152: ARRAY
15153: PPUSH
15154: CALL_OW 488
15158: NOT
15159: IFTRUE 15201
15161: PUSH
15162: LD_VAR 0 12
15166: PUSH
15167: LD_VAR 0 7
15171: ARRAY
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: LD_VAR 0 12
15181: PUSH
15182: LD_VAR 0 7
15186: ARRAY
15187: PUSH
15188: LD_INT 2
15190: ARRAY
15191: PPUSH
15192: CALL_OW 428
15196: PUSH
15197: LD_INT 0
15199: GREATER
15200: OR
15201: IFTRUE 15239
15203: PUSH
15204: LD_VAR 0 12
15208: PUSH
15209: LD_VAR 0 7
15213: ARRAY
15214: PUSH
15215: LD_INT 1
15217: ARRAY
15218: PPUSH
15219: LD_VAR 0 12
15223: PUSH
15224: LD_VAR 0 7
15228: ARRAY
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: PPUSH
15234: CALL_OW 351
15238: OR
15239: IFFALSE 15245
// exit ;
15241: POP
15242: POP
15243: GO 15549
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15245: LD_ADDR_VAR 0 8
15249: PUSH
15250: LD_VAR 0 12
15254: PUSH
15255: LD_VAR 0 7
15259: ARRAY
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_VAR 0 12
15269: PUSH
15270: LD_VAR 0 7
15274: ARRAY
15275: PUSH
15276: LD_INT 2
15278: ARRAY
15279: PPUSH
15280: CALL_OW 546
15284: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15285: LD_VAR 0 8
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: IFTRUE 15315
15295: PUSH
15296: LD_VAR 0 8
15300: PUSH
15301: LD_INT 2
15303: ARRAY
15304: PUSH
15305: LD_VAR 0 13
15309: PUSH
15310: LD_INT 2
15312: PLUS
15313: GREATER
15314: OR
15315: IFTRUE 15337
15317: PUSH
15318: LD_VAR 0 8
15322: PUSH
15323: LD_INT 2
15325: ARRAY
15326: PUSH
15327: LD_VAR 0 13
15331: PUSH
15332: LD_INT 2
15334: MINUS
15335: LESS
15336: OR
15337: IFTRUE 15405
15339: PUSH
15340: LD_VAR 0 8
15344: PUSH
15345: LD_INT 3
15347: ARRAY
15348: PUSH
15349: LD_INT 0
15351: PUSH
15352: LD_INT 8
15354: PUSH
15355: LD_INT 9
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_INT 11
15363: PUSH
15364: LD_INT 12
15366: PUSH
15367: LD_INT 13
15369: PUSH
15370: LD_INT 16
15372: PUSH
15373: LD_INT 17
15375: PUSH
15376: LD_INT 18
15378: PUSH
15379: LD_INT 19
15381: PUSH
15382: LD_INT 20
15384: PUSH
15385: LD_INT 21
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: IN
15403: NOT
15404: OR
15405: IFTRUE 15418
15407: PUSH
15408: LD_VAR 0 8
15412: PUSH
15413: LD_INT 5
15415: ARRAY
15416: NOT
15417: OR
15418: IFTRUE 15458
15420: PUSH
15421: LD_VAR 0 8
15425: PUSH
15426: LD_INT 6
15428: ARRAY
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 7
15438: PUSH
15439: LD_INT 9
15441: PUSH
15442: LD_INT 10
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: IN
15456: NOT
15457: OR
15458: IFFALSE 15464
// exit ;
15460: POP
15461: POP
15462: GO 15549
// end ;
15464: GO 15121
15466: POP
15467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15468: LD_VAR 0 9
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_VAR 0 4
15482: PPUSH
15483: LD_INT 20
15485: PPUSH
15486: CALL 7368 0 4
15490: PUSH
15491: LD_INT 4
15493: ARRAY
15494: IFFALSE 15498
// exit ;
15496: GO 15549
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15498: LD_VAR 0 2
15502: PUSH
15503: LD_INT 29
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: IN
15513: IFFALSE 15537
15515: PUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_VAR 0 4
15525: PPUSH
15526: LD_VAR 0 9
15530: PPUSH
15531: CALL_OW 440
15535: NOT
15536: AND
15537: IFFALSE 15541
// exit ;
15539: GO 15549
// result := true ;
15541: LD_ADDR_VAR 0 6
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// end ;
15549: LD_VAR 0 6
15553: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15554: LD_INT 0
15556: PPUSH
15557: PPUSH
15558: PPUSH
15559: PPUSH
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
15587: PPUSH
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
// result = [ ] ;
15614: LD_ADDR_VAR 0 7
15618: PUSH
15619: EMPTY
15620: ST_TO_ADDR
// temp_list = [ ] ;
15621: LD_ADDR_VAR 0 9
15625: PUSH
15626: EMPTY
15627: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15628: LD_VAR 0 4
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: LD_INT 2
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: LD_INT 4
15647: PUSH
15648: LD_INT 5
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: IN
15659: NOT
15660: IFTRUE 15703
15662: PUSH
15663: LD_VAR 0 1
15667: PUSH
15668: LD_INT 0
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: IN
15678: IFFALSE 15702
15680: PUSH
15681: LD_VAR 0 5
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: IN
15700: NOT
15701: AND
15702: OR
15703: IFFALSE 15707
// exit ;
15705: GO 34106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15707: LD_VAR 0 1
15711: PUSH
15712: LD_INT 6
15714: PUSH
15715: LD_INT 7
15717: PUSH
15718: LD_INT 8
15720: PUSH
15721: LD_INT 13
15723: PUSH
15724: LD_INT 12
15726: PUSH
15727: LD_INT 15
15729: PUSH
15730: LD_INT 11
15732: PUSH
15733: LD_INT 14
15735: PUSH
15736: LD_INT 10
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: IN
15750: IFFALSE 15760
// btype = b_lab ;
15752: LD_ADDR_VAR 0 1
15756: PUSH
15757: LD_INT 6
15759: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15760: LD_VAR 0 6
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: IN
15779: NOT
15780: IFTRUE 15848
15782: PUSH
15783: LD_VAR 0 1
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: LD_INT 2
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: LD_INT 6
15802: PUSH
15803: LD_INT 36
15805: PUSH
15806: LD_INT 4
15808: PUSH
15809: LD_INT 5
15811: PUSH
15812: LD_INT 31
15814: PUSH
15815: LD_INT 32
15817: PUSH
15818: LD_INT 33
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: IN
15834: NOT
15835: IFFALSE 15847
15837: PUSH
15838: LD_VAR 0 6
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: AND
15847: OR
15848: IFTRUE 15880
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: IN
15866: NOT
15867: IFFALSE 15879
15869: PUSH
15870: LD_VAR 0 6
15874: PUSH
15875: LD_INT 2
15877: EQUAL
15878: AND
15879: OR
15880: IFFALSE 15890
// mode = 0 ;
15882: LD_ADDR_VAR 0 6
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// case mode of 0 :
15890: LD_VAR 0 6
15894: PUSH
15895: LD_INT 0
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 27356
15903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15904: LD_ADDR_VAR 0 11
15908: PUSH
15909: LD_INT 0
15911: PUSH
15912: LD_INT 0
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: LD_INT 0
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 1
15962: NEG
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: LD_INT 1
15977: NEG
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 1
15985: NEG
15986: PUSH
15987: LD_INT 2
15989: NEG
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: LD_INT 2
16000: NEG
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 1
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: LD_INT 2
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 0
16029: PUSH
16030: LD_INT 2
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: NEG
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 0
16060: PUSH
16061: LD_INT 3
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 1
16070: NEG
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16097: LD_ADDR_VAR 0 12
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: LD_INT 1
16117: NEG
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: LD_INT 0
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 1
16155: NEG
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: LD_INT 1
16170: NEG
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: LD_INT 1
16181: NEG
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 1
16209: NEG
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 2
16220: NEG
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: NEG
16232: PUSH
16233: LD_INT 1
16235: NEG
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 2
16243: NEG
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 3
16254: NEG
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 3
16265: NEG
16266: PUSH
16267: LD_INT 1
16269: NEG
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16293: LD_ADDR_VAR 0 13
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 1
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 1
16351: NEG
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: NEG
16363: PUSH
16364: LD_INT 1
16366: NEG
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 1
16374: NEG
16375: PUSH
16376: LD_INT 2
16378: NEG
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 2
16416: NEG
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 2
16428: NEG
16429: PUSH
16430: LD_INT 2
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: NEG
16441: PUSH
16442: LD_INT 3
16444: NEG
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 3
16452: NEG
16453: PUSH
16454: LD_INT 2
16456: NEG
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 3
16464: NEG
16465: PUSH
16466: LD_INT 3
16468: NEG
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16492: LD_ADDR_VAR 0 14
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 1
16530: PUSH
16531: LD_INT 1
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: NEG
16574: PUSH
16575: LD_INT 2
16577: NEG
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: LD_INT 2
16588: NEG
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: LD_INT 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: NEG
16628: PUSH
16629: LD_INT 1
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: NEG
16639: PUSH
16640: LD_INT 3
16642: NEG
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: LD_INT 3
16653: NEG
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: LD_INT 2
16664: NEG
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16688: LD_ADDR_VAR 0 15
16692: PUSH
16693: LD_INT 0
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 1
16746: NEG
16747: PUSH
16748: LD_INT 0
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: NEG
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: PUSH
16770: LD_INT 1
16772: NEG
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 0
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: NEG
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 2
16811: NEG
16812: PUSH
16813: LD_INT 0
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 2
16822: NEG
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 3
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 3
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16881: LD_ADDR_VAR 0 16
16885: PUSH
16886: LD_INT 0
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 0
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 0
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: NEG
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 1
16962: NEG
16963: PUSH
16964: LD_INT 2
16966: NEG
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: LD_INT 2
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 2
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 2
17004: NEG
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 2
17016: NEG
17017: PUSH
17018: LD_INT 2
17020: NEG
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 3
17028: PUSH
17029: LD_INT 2
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 3
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: LD_INT 3
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17074: LD_ADDR_VAR 0 17
17078: PUSH
17079: LD_INT 0
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: LD_INT 1
17094: NEG
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: NEG
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: PUSH
17145: LD_INT 1
17147: NEG
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: LD_INT 2
17159: NEG
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 2
17170: NEG
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: LD_INT 1
17181: NEG
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 2
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 2
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17304: LD_ADDR_VAR 0 18
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: LD_INT 1
17324: NEG
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 1
17342: PUSH
17343: LD_INT 1
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 1
17362: NEG
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: NEG
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: LD_INT 2
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: LD_INT 2
17400: NEG
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: LD_INT 1
17411: NEG
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 2
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: LD_INT 2
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 2
17480: NEG
17481: PUSH
17482: LD_INT 0
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 2
17491: NEG
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 2
17503: NEG
17504: PUSH
17505: LD_INT 2
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: NEG
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: LD_INT 2
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 2
17630: NEG
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 2
17710: NEG
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: LD_INT 2
17737: NEG
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17764: LD_ADDR_VAR 0 20
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: NEG
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: LD_INT 2
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: LD_INT 1
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 0
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: LD_INT 2
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17994: LD_ADDR_VAR 0 21
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 0
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: NEG
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: LD_INT 2
18090: NEG
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: LD_INT 1
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 2
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: LD_INT 2
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: NEG
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: NEG
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: LD_INT 2
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18224: LD_ADDR_VAR 0 22
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: LD_INT 2
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: NEG
18424: PUSH
18425: LD_INT 2
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18454: LD_ADDR_VAR 0 23
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: LD_INT 2
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: NEG
18654: PUSH
18655: LD_INT 2
18657: NEG
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 2
18665: NEG
18666: PUSH
18667: LD_INT 3
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: LD_INT 3
18681: NEG
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: LD_INT 2
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18734: LD_ADDR_VAR 0 24
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 2
18910: NEG
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: NEG
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: NEG
18934: PUSH
18935: LD_INT 2
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 2
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19010: LD_ADDR_VAR 0 25
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 3
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: LD_INT 3
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19284: LD_ADDR_VAR 0 26
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 3
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: NEG
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19560: LD_ADDR_VAR 0 27
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: LD_INT 1
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: NEG
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: NEG
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: LD_INT 1
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: NEG
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 2
19759: NEG
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 3
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 3
19805: NEG
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19840: LD_ADDR_VAR 0 28
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: LD_INT 3
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: LD_INT 3
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 3
20075: NEG
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 3
20087: NEG
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20122: LD_ADDR_VAR 0 29
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 2
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: NEG
20313: PUSH
20314: LD_INT 3
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 3
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 3
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 3
20366: NEG
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20401: LD_ADDR_VAR 0 30
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: LD_INT 2
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 2
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: LD_INT 3
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 3
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: LD_INT 3
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: NEG
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 3
20644: NEG
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20679: LD_ADDR_VAR 0 31
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: LD_INT 2
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: LD_INT 3
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 3
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 3
20922: NEG
20923: PUSH
20924: LD_INT 2
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20957: LD_ADDR_VAR 0 32
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: LD_INT 2
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 2
21123: NEG
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: NEG
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: LD_INT 3
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 3
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21235: LD_ADDR_VAR 0 33
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: NEG
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: NEG
21426: PUSH
21427: LD_INT 3
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 2
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 3
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 3
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: NEG
21480: PUSH
21481: LD_INT 2
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21514: LD_ADDR_VAR 0 34
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: LD_INT 2
21610: NEG
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: LD_INT 2
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 3
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 2
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 3
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 3
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 3
21759: NEG
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21794: LD_ADDR_VAR 0 35
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: NEG
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21906: LD_ADDR_VAR 0 36
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: LD_INT 2
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22018: LD_ADDR_VAR 0 37
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22130: LD_ADDR_VAR 0 38
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22242: LD_ADDR_VAR 0 39
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 0
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22354: LD_ADDR_VAR 0 40
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22466: LD_ADDR_VAR 0 41
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 1
22547: NEG
22548: PUSH
22549: LD_INT 2
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: NEG
22657: PUSH
22658: LD_INT 3
22660: NEG
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 3
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 3
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 3
22751: NEG
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 3
22763: NEG
22764: PUSH
22765: LD_INT 2
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: NEG
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22816: LD_ADDR_VAR 0 42
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 1
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: LD_INT 2
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: LD_INT 2
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 2
23006: NEG
23007: PUSH
23008: LD_INT 3
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: LD_INT 3
23022: NEG
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 3
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 3
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 3
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 2
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 3
23113: NEG
23114: PUSH
23115: LD_INT 2
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 3
23125: NEG
23126: PUSH
23127: LD_INT 3
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23166: LD_ADDR_VAR 0 43
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 0
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: LD_INT 2
23262: NEG
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 1
23321: NEG
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 2
23343: NEG
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 3
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 3
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 3
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 3
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 3
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 2
23451: NEG
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 3
23462: NEG
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23514: LD_ADDR_VAR 0 44
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: NEG
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 2
23669: NEG
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: NEG
23693: PUSH
23694: LD_INT 2
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 3
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 3
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 3
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 3
23788: NEG
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 3
23799: NEG
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 3
23811: NEG
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 3
23823: NEG
23824: PUSH
23825: LD_INT 3
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23864: LD_ADDR_VAR 0 45
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 1
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: LD_INT 2
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 2
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: NEG
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: NEG
24043: PUSH
24044: LD_INT 2
24046: NEG
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: LD_INT 3
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 3
24081: NEG
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 2
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 3
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 3
24161: NEG
24162: PUSH
24163: LD_INT 2
24165: NEG
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 3
24173: NEG
24174: PUSH
24175: LD_INT 3
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24214: LD_ADDR_VAR 0 46
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 3
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 2
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 3
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 3
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: NEG
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 3
24510: NEG
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 3
24521: NEG
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24562: LD_ADDR_VAR 0 47
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24713: LD_ADDR_VAR 0 48
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24860: LD_ADDR_VAR 0 49
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25004: LD_ADDR_VAR 0 50
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 0
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25148: LD_ADDR_VAR 0 51
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25295: LD_ADDR_VAR 0 52
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25446: LD_ADDR_VAR 0 53
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: LD_INT 2
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25676: LD_ADDR_VAR 0 54
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: LD_INT 2
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25906: LD_ADDR_VAR 0 55
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 1
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26136: LD_ADDR_VAR 0 56
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 2
26232: NEG
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26366: LD_ADDR_VAR 0 57
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 2
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 2
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26596: LD_ADDR_VAR 0 58
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 2
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26826: LD_ADDR_VAR 0 59
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26914: LD_ADDR_VAR 0 60
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27002: LD_ADDR_VAR 0 61
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27090: LD_ADDR_VAR 0 62
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27178: LD_ADDR_VAR 0 63
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27266: LD_ADDR_VAR 0 64
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: ST_TO_ADDR
// end ; 1 :
27354: GO 33251
27356: LD_INT 1
27358: DOUBLE
27359: EQUAL
27360: IFTRUE 27364
27362: GO 29987
27364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27365: LD_ADDR_VAR 0 11
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: LD_INT 3
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 3
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: LIST
27408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27409: LD_ADDR_VAR 0 12
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 3
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 3
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27450: LD_ADDR_VAR 0 13
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 3
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27490: LD_ADDR_VAR 0 14
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27531: LD_ADDR_VAR 0 15
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 3
27549: NEG
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 3
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27575: LD_ADDR_VAR 0 16
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: LD_INT 3
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 3
27594: NEG
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 3
27606: NEG
27607: PUSH
27608: LD_INT 3
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27621: LD_ADDR_VAR 0 17
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 3
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27665: LD_ADDR_VAR 0 18
27669: PUSH
27670: LD_INT 2
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 3
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 3
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27706: LD_ADDR_VAR 0 19
27710: PUSH
27711: LD_INT 3
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 3
27723: PUSH
27724: LD_INT 3
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: LD_INT 3
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27746: LD_ADDR_VAR 0 20
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27787: LD_ADDR_VAR 0 21
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: NEG
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 3
27816: NEG
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27831: LD_ADDR_VAR 0 22
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: LD_INT 3
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 3
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 3
27862: NEG
27863: PUSH
27864: LD_INT 3
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27877: LD_ADDR_VAR 0 23
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: LD_INT 3
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 4
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 3
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27921: LD_ADDR_VAR 0 24
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 4
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27962: LD_ADDR_VAR 0 25
27966: PUSH
27967: LD_INT 3
27969: PUSH
27970: LD_INT 3
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 4
27979: PUSH
27980: LD_INT 3
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: LD_INT 4
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28002: LD_ADDR_VAR 0 26
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 3
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: LD_INT 4
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28043: LD_ADDR_VAR 0 27
28047: PUSH
28048: LD_INT 3
28050: NEG
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 3
28061: NEG
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 4
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28087: LD_ADDR_VAR 0 28
28091: PUSH
28092: LD_INT 3
28094: NEG
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 3
28106: NEG
28107: PUSH
28108: LD_INT 4
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 4
28118: NEG
28119: PUSH
28120: LD_INT 3
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28133: LD_ADDR_VAR 0 29
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 3
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 3
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 4
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 4
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: LD_INT 5
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 5
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 4
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 6
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 6
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 5
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28288: LD_ADDR_VAR 0 30
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 3
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 3
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 4
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 4
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 4
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 5
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 5
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 5
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 6
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 6
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28431: LD_ADDR_VAR 0 31
28435: PUSH
28436: LD_INT 3
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 3
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 4
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 4
28478: PUSH
28479: LD_INT 4
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: LD_INT 4
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 5
28498: PUSH
28499: LD_INT 4
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 5
28508: PUSH
28509: LD_INT 5
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 4
28518: PUSH
28519: LD_INT 5
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 6
28528: PUSH
28529: LD_INT 5
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 6
28538: PUSH
28539: LD_INT 6
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 5
28548: PUSH
28549: LD_INT 6
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28570: LD_ADDR_VAR 0 32
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: LD_INT 3
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 4
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 4
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 5
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 5
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: LD_INT 4
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 6
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 6
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 5
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28713: LD_ADDR_VAR 0 33
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 3
28731: NEG
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 3
28754: NEG
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 4
28765: NEG
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 4
28776: NEG
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 4
28788: NEG
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 5
28799: NEG
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 5
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 5
28822: NEG
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 6
28833: NEG
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 6
28844: NEG
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28868: LD_ADDR_VAR 0 34
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 3
28887: NEG
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 3
28899: NEG
28900: PUSH
28901: LD_INT 3
28903: NEG
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 3
28911: NEG
28912: PUSH
28913: LD_INT 4
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 4
28923: NEG
28924: PUSH
28925: LD_INT 3
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 4
28935: NEG
28936: PUSH
28937: LD_INT 4
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 4
28947: NEG
28948: PUSH
28949: LD_INT 5
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 5
28959: NEG
28960: PUSH
28961: LD_INT 4
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 5
28971: NEG
28972: PUSH
28973: LD_INT 5
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 5
28983: NEG
28984: PUSH
28985: LD_INT 6
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 6
28995: NEG
28996: PUSH
28997: LD_INT 5
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 6
29007: NEG
29008: PUSH
29009: LD_INT 6
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29031: LD_ADDR_VAR 0 41
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29075: LD_ADDR_VAR 0 42
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29116: LD_ADDR_VAR 0 43
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29156: LD_ADDR_VAR 0 44
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 3
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29197: LD_ADDR_VAR 0 45
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29241: LD_ADDR_VAR 0 46
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 2
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 3
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: NEG
29273: PUSH
29274: LD_INT 2
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29287: LD_ADDR_VAR 0 47
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 3
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29320: LD_ADDR_VAR 0 48
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29351: LD_ADDR_VAR 0 49
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29380: LD_ADDR_VAR 0 50
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29409: LD_ADDR_VAR 0 51
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29440: LD_ADDR_VAR 0 52
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 3
29459: NEG
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29473: LD_ADDR_VAR 0 53
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 3
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29517: LD_ADDR_VAR 0 54
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: LD_INT 0
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29558: LD_ADDR_VAR 0 55
29562: PUSH
29563: LD_INT 3
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 3
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29598: LD_ADDR_VAR 0 56
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: LD_INT 3
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29639: LD_ADDR_VAR 0 57
29643: PUSH
29644: LD_INT 2
29646: NEG
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: NEG
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29683: LD_ADDR_VAR 0 58
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29729: LD_ADDR_VAR 0 59
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: LD_INT 2
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29773: LD_ADDR_VAR 0 60
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 1
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29814: LD_ADDR_VAR 0 61
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29854: LD_ADDR_VAR 0 62
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29895: LD_ADDR_VAR 0 63
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 2
29913: NEG
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29939: LD_ADDR_VAR 0 64
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: ST_TO_ADDR
// end ; 2 :
29985: GO 33251
29987: LD_INT 2
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 33250
29995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29996: LD_ADDR_VAR 0 29
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 4
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 5
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 4
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 5
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 4
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 4
30126: PUSH
30127: LD_INT 4
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: LD_INT 4
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 4
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 4
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 4
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 4
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 5
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 5
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: NEG
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 3
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 2
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 3
30324: NEG
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 4
30335: NEG
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 4
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 4
30358: NEG
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 2
30370: NEG
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 4
30381: NEG
30382: PUSH
30383: LD_INT 4
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 4
30393: NEG
30394: PUSH
30395: LD_INT 5
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: LD_INT 4
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: NEG
30418: PUSH
30419: LD_INT 3
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: NEG
30430: PUSH
30431: LD_INT 3
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 5
30441: NEG
30442: PUSH
30443: LD_INT 4
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 5
30453: NEG
30454: PUSH
30455: LD_INT 5
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 5
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 5
30477: NEG
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30534: LD_ADDR_VAR 0 30
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 4
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 5
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 4
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 5
30611: PUSH
30612: LD_INT 3
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 3
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 4
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 4
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 4
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 3
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 4
30769: NEG
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 5
30780: NEG
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 5
30791: NEG
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 5
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: NEG
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 4
30886: NEG
30887: PUSH
30888: LD_INT 3
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 4
30898: NEG
30899: PUSH
30900: LD_INT 4
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: LD_INT 4
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 4
30922: NEG
30923: PUSH
30924: LD_INT 2
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: LD_INT 5
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 4
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 3
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: LD_INT 4
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: LD_INT 5
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31081: LD_ADDR_VAR 0 31
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 4
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 4
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: LD_INT 3
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: NEG
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 4
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 4
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 4
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 4
31283: NEG
31284: PUSH
31285: LD_INT 4
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 4
31295: NEG
31296: PUSH
31297: LD_INT 5
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 3
31307: NEG
31308: PUSH
31309: LD_INT 4
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 3
31319: NEG
31320: PUSH
31321: LD_INT 3
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 4
31331: NEG
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 5
31343: NEG
31344: PUSH
31345: LD_INT 4
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 5
31355: NEG
31356: PUSH
31357: LD_INT 5
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 3
31367: NEG
31368: PUSH
31369: LD_INT 5
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 5
31379: NEG
31380: PUSH
31381: LD_INT 3
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: LD_INT 3
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 4
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: LD_INT 3
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 3
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 4
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 4
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 4
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 5
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 5
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 5
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31631: LD_ADDR_VAR 0 32
31635: PUSH
31636: LD_INT 4
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 4
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 3
31672: NEG
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 4
31683: NEG
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 5
31694: NEG
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 5
31705: NEG
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: NEG
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 3
31752: NEG
31753: PUSH
31754: LD_INT 4
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: NEG
31801: PUSH
31802: LD_INT 3
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 4
31812: NEG
31813: PUSH
31814: LD_INT 4
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: NEG
31825: PUSH
31826: LD_INT 4
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 4
31836: NEG
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 5
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 3
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 3
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 5
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 5
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 4
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 4
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 4
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 4
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: LD_INT 5
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32178: LD_ADDR_VAR 0 33
32182: PUSH
32183: LD_INT 4
32185: NEG
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 4
32197: NEG
32198: PUSH
32199: LD_INT 5
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 3
32221: NEG
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: NEG
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: NEG
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 5
32257: NEG
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: LD_INT 5
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 5
32281: NEG
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 3
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 4
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 4
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 4
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 4
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 5
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 5
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 3
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 4
32508: PUSH
32509: LD_INT 3
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 4
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 4
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 4
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32716: LD_ADDR_VAR 0 34
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: LD_INT 4
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: LD_INT 5
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 4
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 3
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 3
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: LD_INT 4
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PUSH
32792: LD_INT 5
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 5
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 4
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 4
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 4
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 4
32918: PUSH
32919: LD_INT 4
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 5
32938: PUSH
32939: LD_INT 4
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 5
32948: PUSH
32949: LD_INT 5
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 4
32958: PUSH
32959: LD_INT 5
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: LD_INT 4
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 3
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 4
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 4
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 4
33101: NEG
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 4
33112: NEG
33113: PUSH
33114: LD_INT 1
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 3
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 5
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 5
33180: NEG
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 3
33192: NEG
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: ST_TO_ADDR
// end ; end ;
33248: GO 33251
33250: POP
// case btype of b_depot , b_warehouse :
33251: LD_VAR 0 1
33255: PUSH
33256: LD_INT 0
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33270
33262: LD_INT 1
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33471
33270: POP
// case nation of nation_american :
33271: LD_VAR 0 5
33275: PUSH
33276: LD_INT 1
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33340
33284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_VAR 0 11
33294: PUSH
33295: LD_VAR 0 12
33299: PUSH
33300: LD_VAR 0 13
33304: PUSH
33305: LD_VAR 0 14
33309: PUSH
33310: LD_VAR 0 15
33314: PUSH
33315: LD_VAR 0 16
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: PUSH
33328: LD_VAR 0 4
33332: PUSH
33333: LD_INT 1
33335: PLUS
33336: ARRAY
33337: ST_TO_ADDR
33338: GO 33469
33340: LD_INT 2
33342: DOUBLE
33343: EQUAL
33344: IFTRUE 33348
33346: GO 33404
33348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33349: LD_ADDR_VAR 0 9
33353: PUSH
33354: LD_VAR 0 17
33358: PUSH
33359: LD_VAR 0 18
33363: PUSH
33364: LD_VAR 0 19
33368: PUSH
33369: LD_VAR 0 20
33373: PUSH
33374: LD_VAR 0 21
33378: PUSH
33379: LD_VAR 0 22
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: PUSH
33392: LD_VAR 0 4
33396: PUSH
33397: LD_INT 1
33399: PLUS
33400: ARRAY
33401: ST_TO_ADDR
33402: GO 33469
33404: LD_INT 3
33406: DOUBLE
33407: EQUAL
33408: IFTRUE 33412
33410: GO 33468
33412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33413: LD_ADDR_VAR 0 9
33417: PUSH
33418: LD_VAR 0 23
33422: PUSH
33423: LD_VAR 0 24
33427: PUSH
33428: LD_VAR 0 25
33432: PUSH
33433: LD_VAR 0 26
33437: PUSH
33438: LD_VAR 0 27
33442: PUSH
33443: LD_VAR 0 28
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: PUSH
33456: LD_VAR 0 4
33460: PUSH
33461: LD_INT 1
33463: PLUS
33464: ARRAY
33465: ST_TO_ADDR
33466: GO 33469
33468: POP
33469: GO 34024
33471: LD_INT 2
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33485
33477: LD_INT 3
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33541
33485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33486: LD_ADDR_VAR 0 9
33490: PUSH
33491: LD_VAR 0 29
33495: PUSH
33496: LD_VAR 0 30
33500: PUSH
33501: LD_VAR 0 31
33505: PUSH
33506: LD_VAR 0 32
33510: PUSH
33511: LD_VAR 0 33
33515: PUSH
33516: LD_VAR 0 34
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: PUSH
33529: LD_VAR 0 4
33533: PUSH
33534: LD_INT 1
33536: PLUS
33537: ARRAY
33538: ST_TO_ADDR
33539: GO 34024
33541: LD_INT 16
33543: DOUBLE
33544: EQUAL
33545: IFTRUE 33603
33547: LD_INT 17
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33603
33553: LD_INT 18
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33603
33559: LD_INT 19
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33603
33565: LD_INT 22
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33603
33571: LD_INT 20
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33603
33577: LD_INT 21
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33603
33583: LD_INT 23
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33603
33589: LD_INT 24
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33603
33595: LD_INT 25
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33603
33601: GO 33659
33603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33604: LD_ADDR_VAR 0 9
33608: PUSH
33609: LD_VAR 0 35
33613: PUSH
33614: LD_VAR 0 36
33618: PUSH
33619: LD_VAR 0 37
33623: PUSH
33624: LD_VAR 0 38
33628: PUSH
33629: LD_VAR 0 39
33633: PUSH
33634: LD_VAR 0 40
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: PUSH
33647: LD_VAR 0 4
33651: PUSH
33652: LD_INT 1
33654: PLUS
33655: ARRAY
33656: ST_TO_ADDR
33657: GO 34024
33659: LD_INT 6
33661: DOUBLE
33662: EQUAL
33663: IFTRUE 33715
33665: LD_INT 7
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33715
33671: LD_INT 8
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33715
33677: LD_INT 13
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33715
33683: LD_INT 12
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33715
33689: LD_INT 15
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33715
33695: LD_INT 11
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33715
33701: LD_INT 14
33703: DOUBLE
33704: EQUAL
33705: IFTRUE 33715
33707: LD_INT 10
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33771
33715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33716: LD_ADDR_VAR 0 9
33720: PUSH
33721: LD_VAR 0 41
33725: PUSH
33726: LD_VAR 0 42
33730: PUSH
33731: LD_VAR 0 43
33735: PUSH
33736: LD_VAR 0 44
33740: PUSH
33741: LD_VAR 0 45
33745: PUSH
33746: LD_VAR 0 46
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: PUSH
33759: LD_VAR 0 4
33763: PUSH
33764: LD_INT 1
33766: PLUS
33767: ARRAY
33768: ST_TO_ADDR
33769: GO 34024
33771: LD_INT 36
33773: DOUBLE
33774: EQUAL
33775: IFTRUE 33779
33777: GO 33835
33779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33780: LD_ADDR_VAR 0 9
33784: PUSH
33785: LD_VAR 0 47
33789: PUSH
33790: LD_VAR 0 48
33794: PUSH
33795: LD_VAR 0 49
33799: PUSH
33800: LD_VAR 0 50
33804: PUSH
33805: LD_VAR 0 51
33809: PUSH
33810: LD_VAR 0 52
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: PUSH
33823: LD_VAR 0 4
33827: PUSH
33828: LD_INT 1
33830: PLUS
33831: ARRAY
33832: ST_TO_ADDR
33833: GO 34024
33835: LD_INT 4
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33861
33841: LD_INT 5
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33861
33847: LD_INT 34
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33861
33853: LD_INT 37
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33861
33859: GO 33917
33861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33862: LD_ADDR_VAR 0 9
33866: PUSH
33867: LD_VAR 0 53
33871: PUSH
33872: LD_VAR 0 54
33876: PUSH
33877: LD_VAR 0 55
33881: PUSH
33882: LD_VAR 0 56
33886: PUSH
33887: LD_VAR 0 57
33891: PUSH
33892: LD_VAR 0 58
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: PUSH
33905: LD_VAR 0 4
33909: PUSH
33910: LD_INT 1
33912: PLUS
33913: ARRAY
33914: ST_TO_ADDR
33915: GO 34024
33917: LD_INT 31
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33967
33923: LD_INT 32
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33967
33929: LD_INT 33
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33967
33935: LD_INT 27
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33967
33941: LD_INT 26
33943: DOUBLE
33944: EQUAL
33945: IFTRUE 33967
33947: LD_INT 28
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33967
33953: LD_INT 29
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33967
33959: LD_INT 30
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 34023
33967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33968: LD_ADDR_VAR 0 9
33972: PUSH
33973: LD_VAR 0 59
33977: PUSH
33978: LD_VAR 0 60
33982: PUSH
33983: LD_VAR 0 61
33987: PUSH
33988: LD_VAR 0 62
33992: PUSH
33993: LD_VAR 0 63
33997: PUSH
33998: LD_VAR 0 64
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: PUSH
34011: LD_VAR 0 4
34015: PUSH
34016: LD_INT 1
34018: PLUS
34019: ARRAY
34020: ST_TO_ADDR
34021: GO 34024
34023: POP
// temp_list2 = [ ] ;
34024: LD_ADDR_VAR 0 10
34028: PUSH
34029: EMPTY
34030: ST_TO_ADDR
// for i in temp_list do
34031: LD_ADDR_VAR 0 8
34035: PUSH
34036: LD_VAR 0 9
34040: PUSH
34041: FOR_IN
34042: IFFALSE 34094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34044: LD_ADDR_VAR 0 10
34048: PUSH
34049: LD_VAR 0 10
34053: PUSH
34054: LD_VAR 0 8
34058: PUSH
34059: LD_INT 1
34061: ARRAY
34062: PUSH
34063: LD_VAR 0 2
34067: PLUS
34068: PUSH
34069: LD_VAR 0 8
34073: PUSH
34074: LD_INT 2
34076: ARRAY
34077: PUSH
34078: LD_VAR 0 3
34082: PLUS
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: EMPTY
34089: LIST
34090: ADD
34091: ST_TO_ADDR
34092: GO 34041
34094: POP
34095: POP
// result = temp_list2 ;
34096: LD_ADDR_VAR 0 7
34100: PUSH
34101: LD_VAR 0 10
34105: ST_TO_ADDR
// end ;
34106: LD_VAR 0 7
34110: RET
// export function EnemyInRange ( unit , dist ) ; begin
34111: LD_INT 0
34113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34114: LD_ADDR_VAR 0 3
34118: PUSH
34119: LD_VAR 0 1
34123: PPUSH
34124: CALL_OW 255
34128: PPUSH
34129: LD_VAR 0 1
34133: PPUSH
34134: CALL_OW 250
34138: PPUSH
34139: LD_VAR 0 1
34143: PPUSH
34144: CALL_OW 251
34148: PPUSH
34149: LD_VAR 0 2
34153: PPUSH
34154: CALL 7368 0 4
34158: PUSH
34159: LD_INT 4
34161: ARRAY
34162: ST_TO_ADDR
// end ;
34163: LD_VAR 0 3
34167: RET
// export function PlayerSeeMe ( unit ) ; begin
34168: LD_INT 0
34170: PPUSH
// result := See ( your_side , unit ) ;
34171: LD_ADDR_VAR 0 2
34175: PUSH
34176: LD_OWVAR 2
34180: PPUSH
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 292
34190: ST_TO_ADDR
// end ;
34191: LD_VAR 0 2
34195: RET
// export function ReverseDir ( unit ) ; begin
34196: LD_INT 0
34198: PPUSH
// if not unit then
34199: LD_VAR 0 1
34203: NOT
34204: IFFALSE 34208
// exit ;
34206: GO 34231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34208: LD_ADDR_VAR 0 2
34212: PUSH
34213: LD_VAR 0 1
34217: PPUSH
34218: CALL_OW 254
34222: PUSH
34223: LD_INT 3
34225: PLUS
34226: PUSH
34227: LD_INT 6
34229: MOD
34230: ST_TO_ADDR
// end ;
34231: LD_VAR 0 2
34235: RET
// export function ReverseArray ( array ) ; var i ; begin
34236: LD_INT 0
34238: PPUSH
34239: PPUSH
// if not array then
34240: LD_VAR 0 1
34244: NOT
34245: IFFALSE 34249
// exit ;
34247: GO 34304
// result := [ ] ;
34249: LD_ADDR_VAR 0 2
34253: PUSH
34254: EMPTY
34255: ST_TO_ADDR
// for i := array downto 1 do
34256: LD_ADDR_VAR 0 3
34260: PUSH
34261: DOUBLE
34262: LD_VAR 0 1
34266: INC
34267: ST_TO_ADDR
34268: LD_INT 1
34270: PUSH
34271: FOR_DOWNTO
34272: IFFALSE 34302
// result := Join ( result , array [ i ] ) ;
34274: LD_ADDR_VAR 0 2
34278: PUSH
34279: LD_VAR 0 2
34283: PPUSH
34284: LD_VAR 0 1
34288: PUSH
34289: LD_VAR 0 3
34293: ARRAY
34294: PPUSH
34295: CALL 39156 0 2
34299: ST_TO_ADDR
34300: GO 34271
34302: POP
34303: POP
// end ;
34304: LD_VAR 0 2
34308: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
// if not unit or not hexes then
34317: LD_VAR 0 1
34321: NOT
34322: IFTRUE 34331
34324: PUSH
34325: LD_VAR 0 2
34329: NOT
34330: OR
34331: IFFALSE 34335
// exit ;
34333: GO 34458
// dist := 9999 ;
34335: LD_ADDR_VAR 0 5
34339: PUSH
34340: LD_INT 9999
34342: ST_TO_ADDR
// for i = 1 to hexes do
34343: LD_ADDR_VAR 0 4
34347: PUSH
34348: DOUBLE
34349: LD_INT 1
34351: DEC
34352: ST_TO_ADDR
34353: LD_VAR 0 2
34357: PUSH
34358: FOR_TO
34359: IFFALSE 34446
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34361: LD_ADDR_VAR 0 6
34365: PUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_VAR 0 2
34375: PUSH
34376: LD_VAR 0 4
34380: ARRAY
34381: PUSH
34382: LD_INT 1
34384: ARRAY
34385: PPUSH
34386: LD_VAR 0 2
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: PUSH
34397: LD_INT 2
34399: ARRAY
34400: PPUSH
34401: CALL_OW 297
34405: ST_TO_ADDR
// if tdist < dist then
34406: LD_VAR 0 6
34410: PUSH
34411: LD_VAR 0 5
34415: LESS
34416: IFFALSE 34444
// begin hex := hexes [ i ] ;
34418: LD_ADDR_VAR 0 8
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_VAR 0 4
34432: ARRAY
34433: ST_TO_ADDR
// dist := tdist ;
34434: LD_ADDR_VAR 0 5
34438: PUSH
34439: LD_VAR 0 6
34443: ST_TO_ADDR
// end ; end ;
34444: GO 34358
34446: POP
34447: POP
// result := hex ;
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: LD_VAR 0 8
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 3
34462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34467: LD_VAR 0 1
34471: NOT
34472: IFTRUE 34511
34474: PUSH
34475: LD_VAR 0 1
34479: PUSH
34480: LD_INT 21
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 23
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PPUSH
34504: CALL_OW 69
34508: IN
34509: NOT
34510: OR
34511: IFFALSE 34515
// exit ;
34513: GO 34562
// for i = 1 to 3 do
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: DOUBLE
34521: LD_INT 1
34523: DEC
34524: ST_TO_ADDR
34525: LD_INT 3
34527: PUSH
34528: FOR_TO
34529: IFFALSE 34560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34531: LD_VAR 0 1
34535: PPUSH
34536: CALL_OW 250
34540: PPUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 251
34550: PPUSH
34551: LD_INT 1
34553: PPUSH
34554: CALL_OW 453
34558: GO 34528
34560: POP
34561: POP
// end ;
34562: LD_VAR 0 2
34566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34567: LD_INT 0
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
// if not unit or not enemy_unit then
34575: LD_VAR 0 1
34579: NOT
34580: IFTRUE 34589
34582: PUSH
34583: LD_VAR 0 2
34587: NOT
34588: OR
34589: IFFALSE 34593
// exit ;
34591: GO 35074
// if GetLives ( i ) < 250 then
34593: LD_VAR 0 4
34597: PPUSH
34598: CALL_OW 256
34602: PUSH
34603: LD_INT 250
34605: LESS
34606: IFFALSE 34619
// begin ComAutodestruct ( i ) ;
34608: LD_VAR 0 4
34612: PPUSH
34613: CALL 34463 0 1
// exit ;
34617: GO 35074
// end ; x := GetX ( enemy_unit ) ;
34619: LD_ADDR_VAR 0 7
34623: PUSH
34624: LD_VAR 0 2
34628: PPUSH
34629: CALL_OW 250
34633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34634: LD_ADDR_VAR 0 8
34638: PUSH
34639: LD_VAR 0 2
34643: PPUSH
34644: CALL_OW 251
34648: ST_TO_ADDR
// if not x or not y then
34649: LD_VAR 0 7
34653: NOT
34654: IFTRUE 34663
34656: PUSH
34657: LD_VAR 0 8
34661: NOT
34662: OR
34663: IFFALSE 34667
// exit ;
34665: GO 35074
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: LD_INT 0
34679: PPUSH
34680: LD_INT 4
34682: PPUSH
34683: CALL_OW 272
34687: PUSH
34688: LD_VAR 0 8
34692: PPUSH
34693: LD_INT 0
34695: PPUSH
34696: LD_INT 4
34698: PPUSH
34699: CALL_OW 273
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_VAR 0 7
34712: PPUSH
34713: LD_INT 1
34715: PPUSH
34716: LD_INT 4
34718: PPUSH
34719: CALL_OW 272
34723: PUSH
34724: LD_VAR 0 8
34728: PPUSH
34729: LD_INT 1
34731: PPUSH
34732: LD_INT 4
34734: PPUSH
34735: CALL_OW 273
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_VAR 0 7
34748: PPUSH
34749: LD_INT 2
34751: PPUSH
34752: LD_INT 4
34754: PPUSH
34755: CALL_OW 272
34759: PUSH
34760: LD_VAR 0 8
34764: PPUSH
34765: LD_INT 2
34767: PPUSH
34768: LD_INT 4
34770: PPUSH
34771: CALL_OW 273
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_VAR 0 7
34784: PPUSH
34785: LD_INT 3
34787: PPUSH
34788: LD_INT 4
34790: PPUSH
34791: CALL_OW 272
34795: PUSH
34796: LD_VAR 0 8
34800: PPUSH
34801: LD_INT 3
34803: PPUSH
34804: LD_INT 4
34806: PPUSH
34807: CALL_OW 273
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_VAR 0 7
34820: PPUSH
34821: LD_INT 4
34823: PPUSH
34824: LD_INT 4
34826: PPUSH
34827: CALL_OW 272
34831: PUSH
34832: LD_VAR 0 8
34836: PPUSH
34837: LD_INT 4
34839: PPUSH
34840: LD_INT 4
34842: PPUSH
34843: CALL_OW 273
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_VAR 0 7
34856: PPUSH
34857: LD_INT 5
34859: PPUSH
34860: LD_INT 4
34862: PPUSH
34863: CALL_OW 272
34867: PUSH
34868: LD_VAR 0 8
34872: PPUSH
34873: LD_INT 5
34875: PPUSH
34876: LD_INT 4
34878: PPUSH
34879: CALL_OW 273
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// for i = tmp downto 1 do
34896: LD_ADDR_VAR 0 4
34900: PUSH
34901: DOUBLE
34902: LD_VAR 0 6
34906: INC
34907: ST_TO_ADDR
34908: LD_INT 1
34910: PUSH
34911: FOR_DOWNTO
34912: IFFALSE 35015
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34914: LD_VAR 0 6
34918: PUSH
34919: LD_VAR 0 4
34923: ARRAY
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: LD_VAR 0 6
34933: PUSH
34934: LD_VAR 0 4
34938: ARRAY
34939: PUSH
34940: LD_INT 2
34942: ARRAY
34943: PPUSH
34944: CALL_OW 488
34948: NOT
34949: IFTRUE 34991
34951: PUSH
34952: LD_VAR 0 6
34956: PUSH
34957: LD_VAR 0 4
34961: ARRAY
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: PPUSH
34967: LD_VAR 0 6
34971: PUSH
34972: LD_VAR 0 4
34976: ARRAY
34977: PUSH
34978: LD_INT 2
34980: ARRAY
34981: PPUSH
34982: CALL_OW 428
34986: PUSH
34987: LD_INT 0
34989: NONEQUAL
34990: OR
34991: IFFALSE 35013
// tmp := Delete ( tmp , i ) ;
34993: LD_ADDR_VAR 0 6
34997: PUSH
34998: LD_VAR 0 6
35002: PPUSH
35003: LD_VAR 0 4
35007: PPUSH
35008: CALL_OW 3
35012: ST_TO_ADDR
35013: GO 34911
35015: POP
35016: POP
// j := GetClosestHex ( unit , tmp ) ;
35017: LD_ADDR_VAR 0 5
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 6
35031: PPUSH
35032: CALL 34309 0 2
35036: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_VAR 0 5
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: PPUSH
35051: LD_VAR 0 5
35055: PUSH
35056: LD_INT 2
35058: ARRAY
35059: PPUSH
35060: CALL_OW 111
// result := j ;
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_VAR 0 5
35073: ST_TO_ADDR
// end ;
35074: LD_VAR 0 3
35078: RET
// export function PrepareApemanSoldier ( ) ; begin
35079: LD_INT 0
35081: PPUSH
// uc_nation := 0 ;
35082: LD_ADDR_OWVAR 21
35086: PUSH
35087: LD_INT 0
35089: ST_TO_ADDR
// hc_sex := sex_male ;
35090: LD_ADDR_OWVAR 27
35094: PUSH
35095: LD_INT 1
35097: ST_TO_ADDR
// hc_name :=  ;
35098: LD_ADDR_OWVAR 26
35102: PUSH
35103: LD_STRING 
35105: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35106: LD_ADDR_OWVAR 28
35110: PUSH
35111: LD_INT 15
35113: ST_TO_ADDR
// hc_gallery :=  ;
35114: LD_ADDR_OWVAR 33
35118: PUSH
35119: LD_STRING 
35121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35122: LD_ADDR_OWVAR 31
35126: PUSH
35127: LD_INT 0
35129: PPUSH
35130: LD_INT 3
35132: PPUSH
35133: CALL_OW 12
35137: PUSH
35138: LD_INT 0
35140: PPUSH
35141: LD_INT 3
35143: PPUSH
35144: CALL_OW 12
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35161: LD_ADDR_OWVAR 29
35165: PUSH
35166: LD_INT 10
35168: PUSH
35169: LD_INT 12
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 1
35180: RET
// export function PrepareApemanEngineer ( ) ; begin
35181: LD_INT 0
35183: PPUSH
// uc_nation := 0 ;
35184: LD_ADDR_OWVAR 21
35188: PUSH
35189: LD_INT 0
35191: ST_TO_ADDR
// hc_sex := sex_male ;
35192: LD_ADDR_OWVAR 27
35196: PUSH
35197: LD_INT 1
35199: ST_TO_ADDR
// hc_name :=  ;
35200: LD_ADDR_OWVAR 26
35204: PUSH
35205: LD_STRING 
35207: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35208: LD_ADDR_OWVAR 28
35212: PUSH
35213: LD_INT 16
35215: ST_TO_ADDR
// hc_gallery :=  ;
35216: LD_ADDR_OWVAR 33
35220: PUSH
35221: LD_STRING 
35223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35224: LD_ADDR_OWVAR 31
35228: PUSH
35229: LD_INT 0
35231: PPUSH
35232: LD_INT 3
35234: PPUSH
35235: CALL_OW 12
35239: PUSH
35240: LD_INT 0
35242: PPUSH
35243: LD_INT 3
35245: PPUSH
35246: CALL_OW 12
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35263: LD_ADDR_OWVAR 29
35267: PUSH
35268: LD_INT 10
35270: PUSH
35271: LD_INT 12
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// end ;
35278: LD_VAR 0 1
35282: RET
// export function PrepareApeman ( agressivity ) ; begin
35283: LD_INT 0
35285: PPUSH
// uc_side := 0 ;
35286: LD_ADDR_OWVAR 20
35290: PUSH
35291: LD_INT 0
35293: ST_TO_ADDR
// uc_nation := 0 ;
35294: LD_ADDR_OWVAR 21
35298: PUSH
35299: LD_INT 0
35301: ST_TO_ADDR
// hc_sex := sex_male ;
35302: LD_ADDR_OWVAR 27
35306: PUSH
35307: LD_INT 1
35309: ST_TO_ADDR
// hc_class := class_apeman ;
35310: LD_ADDR_OWVAR 28
35314: PUSH
35315: LD_INT 12
35317: ST_TO_ADDR
// hc_gallery :=  ;
35318: LD_ADDR_OWVAR 33
35322: PUSH
35323: LD_STRING 
35325: ST_TO_ADDR
// hc_name :=  ;
35326: LD_ADDR_OWVAR 26
35330: PUSH
35331: LD_STRING 
35333: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35334: LD_ADDR_OWVAR 29
35338: PUSH
35339: LD_INT 10
35341: PUSH
35342: LD_INT 12
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// if agressivity = 0 then
35349: LD_VAR 0 1
35353: PUSH
35354: LD_INT 0
35356: EQUAL
35357: IFFALSE 35369
// hc_agressivity := 0 else
35359: LD_ADDR_OWVAR 35
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
35367: GO 35390
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35369: LD_ADDR_OWVAR 35
35373: PUSH
35374: LD_VAR 0 1
35378: NEG
35379: PPUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 12
35389: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35390: LD_ADDR_OWVAR 31
35394: PUSH
35395: LD_INT 0
35397: PPUSH
35398: LD_INT 3
35400: PPUSH
35401: CALL_OW 12
35405: PUSH
35406: LD_INT 0
35408: PPUSH
35409: LD_INT 3
35411: PPUSH
35412: CALL_OW 12
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// end ;
35429: LD_VAR 0 2
35433: RET
// export function PrepareTiger ( agressivity ) ; begin
35434: LD_INT 0
35436: PPUSH
// uc_side := 0 ;
35437: LD_ADDR_OWVAR 20
35441: PUSH
35442: LD_INT 0
35444: ST_TO_ADDR
// uc_nation := 0 ;
35445: LD_ADDR_OWVAR 21
35449: PUSH
35450: LD_INT 0
35452: ST_TO_ADDR
// InitHc ;
35453: CALL_OW 19
// hc_class := class_tiger ;
35457: LD_ADDR_OWVAR 28
35461: PUSH
35462: LD_INT 14
35464: ST_TO_ADDR
// hc_gallery :=  ;
35465: LD_ADDR_OWVAR 33
35469: PUSH
35470: LD_STRING 
35472: ST_TO_ADDR
// hc_name :=  ;
35473: LD_ADDR_OWVAR 26
35477: PUSH
35478: LD_STRING 
35480: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35481: LD_ADDR_OWVAR 35
35485: PUSH
35486: LD_VAR 0 1
35490: NEG
35491: PPUSH
35492: LD_VAR 0 1
35496: PPUSH
35497: CALL_OW 12
35501: ST_TO_ADDR
// end ;
35502: LD_VAR 0 2
35506: RET
// export function PrepareEnchidna ( ) ; begin
35507: LD_INT 0
35509: PPUSH
// uc_side := 0 ;
35510: LD_ADDR_OWVAR 20
35514: PUSH
35515: LD_INT 0
35517: ST_TO_ADDR
// uc_nation := 0 ;
35518: LD_ADDR_OWVAR 21
35522: PUSH
35523: LD_INT 0
35525: ST_TO_ADDR
// InitHc ;
35526: CALL_OW 19
// hc_class := class_baggie ;
35530: LD_ADDR_OWVAR 28
35534: PUSH
35535: LD_INT 13
35537: ST_TO_ADDR
// hc_gallery :=  ;
35538: LD_ADDR_OWVAR 33
35542: PUSH
35543: LD_STRING 
35545: ST_TO_ADDR
// hc_name :=  ;
35546: LD_ADDR_OWVAR 26
35550: PUSH
35551: LD_STRING 
35553: ST_TO_ADDR
// end ;
35554: LD_VAR 0 1
35558: RET
// export function PrepareFrog ( ) ; begin
35559: LD_INT 0
35561: PPUSH
// uc_side := 0 ;
35562: LD_ADDR_OWVAR 20
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// uc_nation := 0 ;
35570: LD_ADDR_OWVAR 21
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// InitHc ;
35578: CALL_OW 19
// hc_class := class_frog ;
35582: LD_ADDR_OWVAR 28
35586: PUSH
35587: LD_INT 19
35589: ST_TO_ADDR
// hc_gallery :=  ;
35590: LD_ADDR_OWVAR 33
35594: PUSH
35595: LD_STRING 
35597: ST_TO_ADDR
// hc_name :=  ;
35598: LD_ADDR_OWVAR 26
35602: PUSH
35603: LD_STRING 
35605: ST_TO_ADDR
// end ;
35606: LD_VAR 0 1
35610: RET
// export function PrepareFish ( ) ; begin
35611: LD_INT 0
35613: PPUSH
// uc_side := 0 ;
35614: LD_ADDR_OWVAR 20
35618: PUSH
35619: LD_INT 0
35621: ST_TO_ADDR
// uc_nation := 0 ;
35622: LD_ADDR_OWVAR 21
35626: PUSH
35627: LD_INT 0
35629: ST_TO_ADDR
// InitHc ;
35630: CALL_OW 19
// hc_class := class_fish ;
35634: LD_ADDR_OWVAR 28
35638: PUSH
35639: LD_INT 20
35641: ST_TO_ADDR
// hc_gallery :=  ;
35642: LD_ADDR_OWVAR 33
35646: PUSH
35647: LD_STRING 
35649: ST_TO_ADDR
// hc_name :=  ;
35650: LD_ADDR_OWVAR 26
35654: PUSH
35655: LD_STRING 
35657: ST_TO_ADDR
// end ;
35658: LD_VAR 0 1
35662: RET
// export function PrepareBird ( ) ; begin
35663: LD_INT 0
35665: PPUSH
// uc_side := 0 ;
35666: LD_ADDR_OWVAR 20
35670: PUSH
35671: LD_INT 0
35673: ST_TO_ADDR
// uc_nation := 0 ;
35674: LD_ADDR_OWVAR 21
35678: PUSH
35679: LD_INT 0
35681: ST_TO_ADDR
// InitHc ;
35682: CALL_OW 19
// hc_class := class_phororhacos ;
35686: LD_ADDR_OWVAR 28
35690: PUSH
35691: LD_INT 18
35693: ST_TO_ADDR
// hc_gallery :=  ;
35694: LD_ADDR_OWVAR 33
35698: PUSH
35699: LD_STRING 
35701: ST_TO_ADDR
// hc_name :=  ;
35702: LD_ADDR_OWVAR 26
35706: PUSH
35707: LD_STRING 
35709: ST_TO_ADDR
// end ;
35710: LD_VAR 0 1
35714: RET
// export function PrepareHorse ( ) ; begin
35715: LD_INT 0
35717: PPUSH
// uc_side := 0 ;
35718: LD_ADDR_OWVAR 20
35722: PUSH
35723: LD_INT 0
35725: ST_TO_ADDR
// uc_nation := 0 ;
35726: LD_ADDR_OWVAR 21
35730: PUSH
35731: LD_INT 0
35733: ST_TO_ADDR
// InitHc ;
35734: CALL_OW 19
// hc_class := class_horse ;
35738: LD_ADDR_OWVAR 28
35742: PUSH
35743: LD_INT 21
35745: ST_TO_ADDR
// hc_gallery :=  ;
35746: LD_ADDR_OWVAR 33
35750: PUSH
35751: LD_STRING 
35753: ST_TO_ADDR
// hc_name :=  ;
35754: LD_ADDR_OWVAR 26
35758: PUSH
35759: LD_STRING 
35761: ST_TO_ADDR
// end ;
35762: LD_VAR 0 1
35766: RET
// export function PrepareMastodont ( ) ; begin
35767: LD_INT 0
35769: PPUSH
// uc_side := 0 ;
35770: LD_ADDR_OWVAR 20
35774: PUSH
35775: LD_INT 0
35777: ST_TO_ADDR
// uc_nation := 0 ;
35778: LD_ADDR_OWVAR 21
35782: PUSH
35783: LD_INT 0
35785: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35786: LD_ADDR_OWVAR 37
35790: PUSH
35791: LD_INT 31
35793: ST_TO_ADDR
// vc_control := control_rider ;
35794: LD_ADDR_OWVAR 38
35798: PUSH
35799: LD_INT 4
35801: ST_TO_ADDR
// end ;
35802: LD_VAR 0 1
35806: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35807: LD_INT 0
35809: PPUSH
35810: PPUSH
35811: PPUSH
// uc_side = 0 ;
35812: LD_ADDR_OWVAR 20
35816: PUSH
35817: LD_INT 0
35819: ST_TO_ADDR
// uc_nation = 0 ;
35820: LD_ADDR_OWVAR 21
35824: PUSH
35825: LD_INT 0
35827: ST_TO_ADDR
// InitHc_All ( ) ;
35828: CALL_OW 584
// InitVc ;
35832: CALL_OW 20
// if mastodonts then
35836: LD_VAR 0 6
35840: IFFALSE 35907
// for i = 1 to mastodonts do
35842: LD_ADDR_VAR 0 11
35846: PUSH
35847: DOUBLE
35848: LD_INT 1
35850: DEC
35851: ST_TO_ADDR
35852: LD_VAR 0 6
35856: PUSH
35857: FOR_TO
35858: IFFALSE 35905
// begin vc_chassis := 31 ;
35860: LD_ADDR_OWVAR 37
35864: PUSH
35865: LD_INT 31
35867: ST_TO_ADDR
// vc_control := control_rider ;
35868: LD_ADDR_OWVAR 38
35872: PUSH
35873: LD_INT 4
35875: ST_TO_ADDR
// animal := CreateVehicle ;
35876: LD_ADDR_VAR 0 12
35880: PUSH
35881: CALL_OW 45
35885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35886: LD_VAR 0 12
35890: PPUSH
35891: LD_VAR 0 8
35895: PPUSH
35896: LD_INT 0
35898: PPUSH
35899: CALL 38049 0 3
// end ;
35903: GO 35857
35905: POP
35906: POP
// if horses then
35907: LD_VAR 0 5
35911: IFFALSE 35978
// for i = 1 to horses do
35913: LD_ADDR_VAR 0 11
35917: PUSH
35918: DOUBLE
35919: LD_INT 1
35921: DEC
35922: ST_TO_ADDR
35923: LD_VAR 0 5
35927: PUSH
35928: FOR_TO
35929: IFFALSE 35976
// begin hc_class := 21 ;
35931: LD_ADDR_OWVAR 28
35935: PUSH
35936: LD_INT 21
35938: ST_TO_ADDR
// hc_gallery :=  ;
35939: LD_ADDR_OWVAR 33
35943: PUSH
35944: LD_STRING 
35946: ST_TO_ADDR
// animal := CreateHuman ;
35947: LD_ADDR_VAR 0 12
35951: PUSH
35952: CALL_OW 44
35956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35957: LD_VAR 0 12
35961: PPUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: LD_INT 0
35969: PPUSH
35970: CALL 38049 0 3
// end ;
35974: GO 35928
35976: POP
35977: POP
// if birds then
35978: LD_VAR 0 1
35982: IFFALSE 36049
// for i = 1 to birds do
35984: LD_ADDR_VAR 0 11
35988: PUSH
35989: DOUBLE
35990: LD_INT 1
35992: DEC
35993: ST_TO_ADDR
35994: LD_VAR 0 1
35998: PUSH
35999: FOR_TO
36000: IFFALSE 36047
// begin hc_class := 18 ;
36002: LD_ADDR_OWVAR 28
36006: PUSH
36007: LD_INT 18
36009: ST_TO_ADDR
// hc_gallery =  ;
36010: LD_ADDR_OWVAR 33
36014: PUSH
36015: LD_STRING 
36017: ST_TO_ADDR
// animal := CreateHuman ;
36018: LD_ADDR_VAR 0 12
36022: PUSH
36023: CALL_OW 44
36027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36028: LD_VAR 0 12
36032: PPUSH
36033: LD_VAR 0 8
36037: PPUSH
36038: LD_INT 0
36040: PPUSH
36041: CALL 38049 0 3
// end ;
36045: GO 35999
36047: POP
36048: POP
// if tigers then
36049: LD_VAR 0 2
36053: IFFALSE 36137
// for i = 1 to tigers do
36055: LD_ADDR_VAR 0 11
36059: PUSH
36060: DOUBLE
36061: LD_INT 1
36063: DEC
36064: ST_TO_ADDR
36065: LD_VAR 0 2
36069: PUSH
36070: FOR_TO
36071: IFFALSE 36135
// begin hc_class = class_tiger ;
36073: LD_ADDR_OWVAR 28
36077: PUSH
36078: LD_INT 14
36080: ST_TO_ADDR
// hc_gallery =  ;
36081: LD_ADDR_OWVAR 33
36085: PUSH
36086: LD_STRING 
36088: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36089: LD_ADDR_OWVAR 35
36093: PUSH
36094: LD_INT 7
36096: NEG
36097: PPUSH
36098: LD_INT 7
36100: PPUSH
36101: CALL_OW 12
36105: ST_TO_ADDR
// animal := CreateHuman ;
36106: LD_ADDR_VAR 0 12
36110: PUSH
36111: CALL_OW 44
36115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36116: LD_VAR 0 12
36120: PPUSH
36121: LD_VAR 0 8
36125: PPUSH
36126: LD_INT 0
36128: PPUSH
36129: CALL 38049 0 3
// end ;
36133: GO 36070
36135: POP
36136: POP
// if apemans then
36137: LD_VAR 0 3
36141: IFFALSE 36264
// for i = 1 to apemans do
36143: LD_ADDR_VAR 0 11
36147: PUSH
36148: DOUBLE
36149: LD_INT 1
36151: DEC
36152: ST_TO_ADDR
36153: LD_VAR 0 3
36157: PUSH
36158: FOR_TO
36159: IFFALSE 36262
// begin hc_class = class_apeman ;
36161: LD_ADDR_OWVAR 28
36165: PUSH
36166: LD_INT 12
36168: ST_TO_ADDR
// hc_gallery =  ;
36169: LD_ADDR_OWVAR 33
36173: PUSH
36174: LD_STRING 
36176: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36177: LD_ADDR_OWVAR 35
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PPUSH
36186: LD_INT 2
36188: PPUSH
36189: CALL_OW 12
36193: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36194: LD_ADDR_OWVAR 31
36198: PUSH
36199: LD_INT 1
36201: PPUSH
36202: LD_INT 3
36204: PPUSH
36205: CALL_OW 12
36209: PUSH
36210: LD_INT 1
36212: PPUSH
36213: LD_INT 3
36215: PPUSH
36216: CALL_OW 12
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: ST_TO_ADDR
// animal := CreateHuman ;
36233: LD_ADDR_VAR 0 12
36237: PUSH
36238: CALL_OW 44
36242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36243: LD_VAR 0 12
36247: PPUSH
36248: LD_VAR 0 8
36252: PPUSH
36253: LD_INT 0
36255: PPUSH
36256: CALL 38049 0 3
// end ;
36260: GO 36158
36262: POP
36263: POP
// if enchidnas then
36264: LD_VAR 0 4
36268: IFFALSE 36335
// for i = 1 to enchidnas do
36270: LD_ADDR_VAR 0 11
36274: PUSH
36275: DOUBLE
36276: LD_INT 1
36278: DEC
36279: ST_TO_ADDR
36280: LD_VAR 0 4
36284: PUSH
36285: FOR_TO
36286: IFFALSE 36333
// begin hc_class = 13 ;
36288: LD_ADDR_OWVAR 28
36292: PUSH
36293: LD_INT 13
36295: ST_TO_ADDR
// hc_gallery =  ;
36296: LD_ADDR_OWVAR 33
36300: PUSH
36301: LD_STRING 
36303: ST_TO_ADDR
// animal := CreateHuman ;
36304: LD_ADDR_VAR 0 12
36308: PUSH
36309: CALL_OW 44
36313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36314: LD_VAR 0 12
36318: PPUSH
36319: LD_VAR 0 8
36323: PPUSH
36324: LD_INT 0
36326: PPUSH
36327: CALL 38049 0 3
// end ;
36331: GO 36285
36333: POP
36334: POP
// if fishes then
36335: LD_VAR 0 7
36339: IFFALSE 36406
// for i = 1 to fishes do
36341: LD_ADDR_VAR 0 11
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: LD_VAR 0 7
36355: PUSH
36356: FOR_TO
36357: IFFALSE 36404
// begin hc_class = 20 ;
36359: LD_ADDR_OWVAR 28
36363: PUSH
36364: LD_INT 20
36366: ST_TO_ADDR
// hc_gallery =  ;
36367: LD_ADDR_OWVAR 33
36371: PUSH
36372: LD_STRING 
36374: ST_TO_ADDR
// animal := CreateHuman ;
36375: LD_ADDR_VAR 0 12
36379: PUSH
36380: CALL_OW 44
36384: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36385: LD_VAR 0 12
36389: PPUSH
36390: LD_VAR 0 9
36394: PPUSH
36395: LD_INT 0
36397: PPUSH
36398: CALL 38049 0 3
// end ;
36402: GO 36356
36404: POP
36405: POP
// end ;
36406: LD_VAR 0 10
36410: RET
// export function WantHeal ( sci , unit ) ; begin
36411: LD_INT 0
36413: PPUSH
// if GetTaskList ( sci ) > 0 then
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 437
36423: PUSH
36424: LD_INT 0
36426: GREATER
36427: IFFALSE 36499
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36429: LD_VAR 0 1
36433: PPUSH
36434: CALL_OW 437
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PUSH
36443: LD_INT 1
36445: ARRAY
36446: PUSH
36447: LD_STRING l
36449: EQUAL
36450: IFFALSE 36477
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 437
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PUSH
36467: LD_INT 4
36469: ARRAY
36470: PUSH
36471: LD_VAR 0 2
36475: EQUAL
36476: AND
36477: IFFALSE 36489
// result := true else
36479: LD_ADDR_VAR 0 3
36483: PUSH
36484: LD_INT 1
36486: ST_TO_ADDR
36487: GO 36497
// result := false ;
36489: LD_ADDR_VAR 0 3
36493: PUSH
36494: LD_INT 0
36496: ST_TO_ADDR
// end else
36497: GO 36507
// result := false ;
36499: LD_ADDR_VAR 0 3
36503: PUSH
36504: LD_INT 0
36506: ST_TO_ADDR
// end ;
36507: LD_VAR 0 3
36511: RET
// export function HealTarget ( sci ) ; begin
36512: LD_INT 0
36514: PPUSH
// if not sci then
36515: LD_VAR 0 1
36519: NOT
36520: IFFALSE 36524
// exit ;
36522: GO 36589
// result := 0 ;
36524: LD_ADDR_VAR 0 2
36528: PUSH
36529: LD_INT 0
36531: ST_TO_ADDR
// if GetTaskList ( sci ) then
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 437
36541: IFFALSE 36589
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 437
36552: PUSH
36553: LD_INT 1
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PUSH
36561: LD_STRING l
36563: EQUAL
36564: IFFALSE 36589
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36566: LD_ADDR_VAR 0 2
36570: PUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL_OW 437
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PUSH
36585: LD_INT 4
36587: ARRAY
36588: ST_TO_ADDR
// end ;
36589: LD_VAR 0 2
36593: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36594: LD_INT 0
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
// if not base_units then
36600: LD_VAR 0 1
36604: NOT
36605: IFFALSE 36609
// exit ;
36607: GO 36696
// result := false ;
36609: LD_ADDR_VAR 0 2
36613: PUSH
36614: LD_INT 0
36616: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36617: LD_ADDR_VAR 0 5
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: LD_INT 21
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PPUSH
36637: CALL_OW 72
36641: ST_TO_ADDR
// if not tmp then
36642: LD_VAR 0 5
36646: NOT
36647: IFFALSE 36651
// exit ;
36649: GO 36696
// for i in tmp do
36651: LD_ADDR_VAR 0 3
36655: PUSH
36656: LD_VAR 0 5
36660: PUSH
36661: FOR_IN
36662: IFFALSE 36694
// begin result := EnemyInRange ( i , 22 ) ;
36664: LD_ADDR_VAR 0 2
36668: PUSH
36669: LD_VAR 0 3
36673: PPUSH
36674: LD_INT 22
36676: PPUSH
36677: CALL 34111 0 2
36681: ST_TO_ADDR
// if result then
36682: LD_VAR 0 2
36686: IFFALSE 36692
// exit ;
36688: POP
36689: POP
36690: GO 36696
// end ;
36692: GO 36661
36694: POP
36695: POP
// end ;
36696: LD_VAR 0 2
36700: RET
// export function FilterByTag ( units , tag ) ; begin
36701: LD_INT 0
36703: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36704: LD_ADDR_VAR 0 3
36708: PUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: LD_INT 120
36716: PUSH
36717: LD_VAR 0 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PPUSH
36726: CALL_OW 72
36730: ST_TO_ADDR
// end ;
36731: LD_VAR 0 3
36735: RET
// export function IsDriver ( un ) ; begin
36736: LD_INT 0
36738: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36739: LD_ADDR_VAR 0 2
36743: PUSH
36744: LD_VAR 0 1
36748: PUSH
36749: LD_INT 55
36751: PUSH
36752: EMPTY
36753: LIST
36754: PPUSH
36755: CALL_OW 69
36759: IN
36760: ST_TO_ADDR
// end ;
36761: LD_VAR 0 2
36765: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36766: LD_INT 0
36768: PPUSH
36769: PPUSH
// list := [ ] ;
36770: LD_ADDR_VAR 0 5
36774: PUSH
36775: EMPTY
36776: ST_TO_ADDR
// case d of 0 :
36777: LD_VAR 0 3
36781: PUSH
36782: LD_INT 0
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36923
36790: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: LD_INT 4
36803: MINUS
36804: PUSH
36805: LD_VAR 0 2
36809: PUSH
36810: LD_INT 4
36812: MINUS
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: PUSH
36822: LD_VAR 0 1
36826: PUSH
36827: LD_INT 3
36829: MINUS
36830: PUSH
36831: LD_VAR 0 2
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_INT 4
36851: PLUS
36852: PUSH
36853: LD_VAR 0 2
36857: PUSH
36858: LD_INT 4
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: PUSH
36866: LD_VAR 0 1
36870: PUSH
36871: LD_INT 3
36873: PLUS
36874: PUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 3
36882: PLUS
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PUSH
36892: LD_VAR 0 1
36896: PUSH
36897: LD_VAR 0 2
36901: PUSH
36902: LD_INT 4
36904: PLUS
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// end ; 1 :
36921: GO 37621
36923: LD_INT 1
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 37064
36931: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 1
36941: PUSH
36942: LD_VAR 0 2
36946: PUSH
36947: LD_INT 4
36949: MINUS
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PUSH
36959: LD_VAR 0 1
36963: PUSH
36964: LD_INT 3
36966: MINUS
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 3
36975: MINUS
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 4
36992: MINUS
36993: PUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_VAR 0 2
37016: PUSH
37017: LD_INT 3
37019: PLUS
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: PUSH
37029: LD_VAR 0 1
37033: PUSH
37034: LD_INT 4
37036: PLUS
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 4
37045: PLUS
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// end ; 2 :
37062: GO 37621
37064: LD_INT 2
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37201
37072: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37073: LD_ADDR_VAR 0 5
37077: PUSH
37078: LD_VAR 0 1
37082: PUSH
37083: LD_VAR 0 2
37087: PUSH
37088: LD_INT 3
37090: MINUS
37091: PUSH
37092: LD_INT 3
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 1
37104: PUSH
37105: LD_INT 4
37107: PLUS
37108: PUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_INT 4
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: LD_VAR 0 1
37126: PUSH
37127: LD_VAR 0 2
37131: PUSH
37132: LD_INT 4
37134: PLUS
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PUSH
37144: LD_VAR 0 1
37148: PUSH
37149: LD_INT 3
37151: MINUS
37152: PUSH
37153: LD_VAR 0 2
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: PUSH
37166: LD_VAR 0 1
37170: PUSH
37171: LD_INT 4
37173: MINUS
37174: PUSH
37175: LD_VAR 0 2
37179: PUSH
37180: LD_INT 4
37182: MINUS
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// end ; 3 :
37199: GO 37621
37201: LD_INT 3
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37342
37209: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37210: LD_ADDR_VAR 0 5
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: LD_INT 3
37222: PLUS
37223: PUSH
37224: LD_VAR 0 2
37228: PUSH
37229: LD_INT 4
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 4
37244: PLUS
37245: PUSH
37246: LD_VAR 0 2
37250: PUSH
37251: LD_INT 4
37253: PLUS
37254: PUSH
37255: LD_INT 5
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_INT 4
37270: MINUS
37271: PUSH
37272: LD_VAR 0 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: PUSH
37285: LD_VAR 0 1
37289: PUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_INT 4
37297: MINUS
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: PUSH
37307: LD_VAR 0 1
37311: PUSH
37312: LD_INT 3
37314: MINUS
37315: PUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_INT 3
37323: MINUS
37324: PUSH
37325: LD_INT 2
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// end ; 4 :
37340: GO 37621
37342: LD_INT 4
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37483
37350: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37351: LD_ADDR_VAR 0 5
37355: PUSH
37356: LD_VAR 0 1
37360: PUSH
37361: LD_VAR 0 2
37365: PUSH
37366: LD_INT 4
37368: PLUS
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_INT 3
37385: PLUS
37386: PUSH
37387: LD_VAR 0 2
37391: PUSH
37392: LD_INT 3
37394: PLUS
37395: PUSH
37396: LD_INT 5
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: PUSH
37404: LD_VAR 0 1
37408: PUSH
37409: LD_INT 4
37411: PLUS
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: PUSH
37426: LD_VAR 0 1
37430: PUSH
37431: LD_VAR 0 2
37435: PUSH
37436: LD_INT 3
37438: MINUS
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: LD_INT 4
37455: MINUS
37456: PUSH
37457: LD_VAR 0 2
37461: PUSH
37462: LD_INT 4
37464: MINUS
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// end ; 5 :
37481: GO 37621
37483: LD_INT 5
37485: DOUBLE
37486: EQUAL
37487: IFTRUE 37491
37489: GO 37620
37491: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37492: LD_ADDR_VAR 0 5
37496: PUSH
37497: LD_VAR 0 1
37501: PUSH
37502: LD_INT 4
37504: MINUS
37505: PUSH
37506: LD_VAR 0 2
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: PUSH
37519: LD_VAR 0 1
37523: PUSH
37524: LD_VAR 0 2
37528: PUSH
37529: LD_INT 4
37531: MINUS
37532: PUSH
37533: LD_INT 3
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: PUSH
37541: LD_VAR 0 1
37545: PUSH
37546: LD_INT 4
37548: PLUS
37549: PUSH
37550: LD_VAR 0 2
37554: PUSH
37555: LD_INT 4
37557: PLUS
37558: PUSH
37559: LD_INT 5
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: PUSH
37567: LD_VAR 0 1
37571: PUSH
37572: LD_INT 3
37574: PLUS
37575: PUSH
37576: LD_VAR 0 2
37580: PUSH
37581: LD_INT 4
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: LD_VAR 0 1
37593: PUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_INT 3
37601: PLUS
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// end ; end ;
37618: GO 37621
37620: POP
// result := list ;
37621: LD_ADDR_VAR 0 4
37625: PUSH
37626: LD_VAR 0 5
37630: ST_TO_ADDR
// end ;
37631: LD_VAR 0 4
37635: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37636: LD_INT 0
37638: PPUSH
37639: PPUSH
37640: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37641: LD_VAR 0 1
37645: NOT
37646: IFTRUE 37674
37648: PUSH
37649: LD_VAR 0 2
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: LD_INT 4
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: IN
37672: NOT
37673: OR
37674: IFFALSE 37678
// exit ;
37676: GO 37761
// tmp := [ ] ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: EMPTY
37684: ST_TO_ADDR
// for i in units do
37685: LD_ADDR_VAR 0 4
37689: PUSH
37690: LD_VAR 0 1
37694: PUSH
37695: FOR_IN
37696: IFFALSE 37730
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37698: LD_ADDR_VAR 0 5
37702: PUSH
37703: LD_VAR 0 5
37707: PPUSH
37708: LD_VAR 0 4
37712: PPUSH
37713: LD_VAR 0 2
37717: PPUSH
37718: CALL_OW 259
37722: PPUSH
37723: CALL 39156 0 2
37727: ST_TO_ADDR
37728: GO 37695
37730: POP
37731: POP
// if not tmp then
37732: LD_VAR 0 5
37736: NOT
37737: IFFALSE 37741
// exit ;
37739: GO 37761
// result := SortListByListDesc ( units , tmp ) ;
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: LD_VAR 0 1
37750: PPUSH
37751: LD_VAR 0 5
37755: PPUSH
37756: CALL_OW 77
37760: ST_TO_ADDR
// end ;
37761: LD_VAR 0 3
37765: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
37770: PPUSH
// result := false ;
37771: LD_ADDR_VAR 0 3
37775: PUSH
37776: LD_INT 0
37778: ST_TO_ADDR
// if not building then
37779: LD_VAR 0 2
37783: NOT
37784: IFFALSE 37788
// exit ;
37786: GO 37932
// x := GetX ( building ) ;
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: LD_VAR 0 2
37797: PPUSH
37798: CALL_OW 250
37802: ST_TO_ADDR
// y := GetY ( building ) ;
37803: LD_ADDR_VAR 0 5
37807: PUSH
37808: LD_VAR 0 2
37812: PPUSH
37813: CALL_OW 251
37817: ST_TO_ADDR
// if not x or not y then
37818: LD_VAR 0 4
37822: NOT
37823: IFTRUE 37832
37825: PUSH
37826: LD_VAR 0 5
37830: NOT
37831: OR
37832: IFFALSE 37836
// exit ;
37834: GO 37932
// if GetTaskList ( unit ) then
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 437
37845: IFFALSE 37932
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37847: LD_STRING e
37849: PUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 437
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PUSH
37864: LD_INT 1
37866: ARRAY
37867: EQUAL
37868: IFFALSE 37895
37870: PUSH
37871: LD_VAR 0 4
37875: PUSH
37876: LD_VAR 0 1
37880: PPUSH
37881: CALL_OW 437
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: PUSH
37890: LD_INT 2
37892: ARRAY
37893: EQUAL
37894: AND
37895: IFFALSE 37922
37897: PUSH
37898: LD_VAR 0 5
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 437
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PUSH
37917: LD_INT 3
37919: ARRAY
37920: EQUAL
37921: AND
37922: IFFALSE 37932
// result := true end ;
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 1
37931: ST_TO_ADDR
// end ;
37932: LD_VAR 0 3
37936: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37937: LD_INT 0
37939: PPUSH
// result := false ;
37940: LD_ADDR_VAR 0 4
37944: PUSH
37945: LD_INT 0
37947: ST_TO_ADDR
// if GetTaskList ( unit ) then
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 437
37957: IFFALSE 38044
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37959: LD_STRING M
37961: PUSH
37962: LD_VAR 0 1
37966: PPUSH
37967: CALL_OW 437
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: EQUAL
37980: IFFALSE 38007
37982: PUSH
37983: LD_VAR 0 2
37987: PUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: CALL_OW 437
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: PUSH
38002: LD_INT 2
38004: ARRAY
38005: EQUAL
38006: AND
38007: IFFALSE 38034
38009: PUSH
38010: LD_VAR 0 3
38014: PUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 437
38024: PUSH
38025: LD_INT 1
38027: ARRAY
38028: PUSH
38029: LD_INT 3
38031: ARRAY
38032: EQUAL
38033: AND
38034: IFFALSE 38044
// result := true ;
38036: LD_ADDR_VAR 0 4
38040: PUSH
38041: LD_INT 1
38043: ST_TO_ADDR
// end ; end ;
38044: LD_VAR 0 4
38048: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38049: LD_INT 0
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
// if not unit or not area then
38055: LD_VAR 0 1
38059: NOT
38060: IFTRUE 38069
38062: PUSH
38063: LD_VAR 0 2
38067: NOT
38068: OR
38069: IFFALSE 38073
// exit ;
38071: GO 38249
// tmp := AreaToList ( area , i ) ;
38073: LD_ADDR_VAR 0 6
38077: PUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: LD_VAR 0 5
38087: PPUSH
38088: CALL_OW 517
38092: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38093: LD_ADDR_VAR 0 5
38097: PUSH
38098: DOUBLE
38099: LD_INT 1
38101: DEC
38102: ST_TO_ADDR
38103: LD_VAR 0 6
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PUSH
38112: FOR_TO
38113: IFFALSE 38247
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38115: LD_ADDR_VAR 0 7
38119: PUSH
38120: LD_VAR 0 6
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: PUSH
38129: LD_VAR 0 5
38133: ARRAY
38134: PUSH
38135: LD_VAR 0 6
38139: PUSH
38140: LD_INT 2
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 5
38148: ARRAY
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38154: LD_INT 92
38156: PUSH
38157: LD_VAR 0 7
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PUSH
38166: LD_VAR 0 7
38170: PUSH
38171: LD_INT 2
38173: ARRAY
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: PPUSH
38184: CALL_OW 69
38188: PUSH
38189: LD_INT 0
38191: EQUAL
38192: IFFALSE 38245
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_VAR 0 7
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 7
38212: PUSH
38213: LD_INT 2
38215: ARRAY
38216: PPUSH
38217: LD_VAR 0 3
38221: PPUSH
38222: CALL_OW 48
// result := IsPlaced ( unit ) ;
38226: LD_ADDR_VAR 0 4
38230: PUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 305
38240: ST_TO_ADDR
// exit ;
38241: POP
38242: POP
38243: GO 38249
// end ; end ;
38245: GO 38112
38247: POP
38248: POP
// end ;
38249: LD_VAR 0 4
38253: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38254: LD_INT 0
38256: PPUSH
38257: PPUSH
38258: PPUSH
// if not side or side > 8 then
38259: LD_VAR 0 1
38263: NOT
38264: IFTRUE 38276
38266: PUSH
38267: LD_VAR 0 1
38271: PUSH
38272: LD_INT 8
38274: GREATER
38275: OR
38276: IFFALSE 38280
// exit ;
38278: GO 38467
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38280: LD_ADDR_VAR 0 4
38284: PUSH
38285: LD_INT 22
38287: PUSH
38288: LD_VAR 0 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 21
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PPUSH
38311: CALL_OW 69
38315: ST_TO_ADDR
// if not tmp then
38316: LD_VAR 0 4
38320: NOT
38321: IFFALSE 38325
// exit ;
38323: GO 38467
// enable_addtolog := true ;
38325: LD_ADDR_OWVAR 81
38329: PUSH
38330: LD_INT 1
38332: ST_TO_ADDR
// AddToLog ( [ ) ;
38333: LD_STRING [
38335: PPUSH
38336: CALL_OW 561
// for i in tmp do
38340: LD_ADDR_VAR 0 3
38344: PUSH
38345: LD_VAR 0 4
38349: PUSH
38350: FOR_IN
38351: IFFALSE 38458
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38353: LD_STRING [
38355: PUSH
38356: LD_VAR 0 3
38360: PPUSH
38361: CALL_OW 266
38365: STR
38366: PUSH
38367: LD_STRING , 
38369: STR
38370: PUSH
38371: LD_VAR 0 3
38375: PPUSH
38376: CALL_OW 250
38380: STR
38381: PUSH
38382: LD_STRING , 
38384: STR
38385: PUSH
38386: LD_VAR 0 3
38390: PPUSH
38391: CALL_OW 251
38395: STR
38396: PUSH
38397: LD_STRING , 
38399: STR
38400: PUSH
38401: LD_VAR 0 3
38405: PPUSH
38406: CALL_OW 254
38410: STR
38411: PUSH
38412: LD_STRING , 
38414: STR
38415: PUSH
38416: LD_VAR 0 3
38420: PPUSH
38421: LD_INT 1
38423: PPUSH
38424: CALL_OW 268
38428: STR
38429: PUSH
38430: LD_STRING , 
38432: STR
38433: PUSH
38434: LD_VAR 0 3
38438: PPUSH
38439: LD_INT 2
38441: PPUSH
38442: CALL_OW 268
38446: STR
38447: PUSH
38448: LD_STRING ],
38450: STR
38451: PPUSH
38452: CALL_OW 561
// end ;
38456: GO 38350
38458: POP
38459: POP
// AddToLog ( ]; ) ;
38460: LD_STRING ];
38462: PPUSH
38463: CALL_OW 561
// end ;
38467: LD_VAR 0 2
38471: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38472: LD_INT 0
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
// if not area or not rate or not max then
38479: LD_VAR 0 1
38483: NOT
38484: IFTRUE 38493
38486: PUSH
38487: LD_VAR 0 2
38491: NOT
38492: OR
38493: IFTRUE 38502
38495: PUSH
38496: LD_VAR 0 4
38500: NOT
38501: OR
38502: IFFALSE 38506
// exit ;
38504: GO 38695
// while 1 do
38506: LD_INT 1
38508: IFFALSE 38695
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38510: LD_ADDR_VAR 0 9
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: LD_INT 1
38522: PPUSH
38523: CALL_OW 287
38527: PUSH
38528: LD_INT 10
38530: MUL
38531: ST_TO_ADDR
// r := rate / 10 ;
38532: LD_ADDR_VAR 0 7
38536: PUSH
38537: LD_VAR 0 2
38541: PUSH
38542: LD_INT 10
38544: DIVREAL
38545: ST_TO_ADDR
// time := 1 1$00 ;
38546: LD_ADDR_VAR 0 8
38550: PUSH
38551: LD_INT 2100
38553: ST_TO_ADDR
// if amount < min then
38554: LD_VAR 0 9
38558: PUSH
38559: LD_VAR 0 3
38563: LESS
38564: IFFALSE 38582
// r := r * 2 else
38566: LD_ADDR_VAR 0 7
38570: PUSH
38571: LD_VAR 0 7
38575: PUSH
38576: LD_INT 2
38578: MUL
38579: ST_TO_ADDR
38580: GO 38608
// if amount > max then
38582: LD_VAR 0 9
38586: PUSH
38587: LD_VAR 0 4
38591: GREATER
38592: IFFALSE 38608
// r := r / 2 ;
38594: LD_ADDR_VAR 0 7
38598: PUSH
38599: LD_VAR 0 7
38603: PUSH
38604: LD_INT 2
38606: DIVREAL
38607: ST_TO_ADDR
// time := time / r ;
38608: LD_ADDR_VAR 0 8
38612: PUSH
38613: LD_VAR 0 8
38617: PUSH
38618: LD_VAR 0 7
38622: DIVREAL
38623: ST_TO_ADDR
// if time < 0 then
38624: LD_VAR 0 8
38628: PUSH
38629: LD_INT 0
38631: LESS
38632: IFFALSE 38649
// time := time * - 1 ;
38634: LD_ADDR_VAR 0 8
38638: PUSH
38639: LD_VAR 0 8
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: MUL
38648: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38649: LD_VAR 0 8
38653: PUSH
38654: LD_INT 35
38656: PPUSH
38657: LD_INT 875
38659: PPUSH
38660: CALL_OW 12
38664: PLUS
38665: PPUSH
38666: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38670: LD_INT 1
38672: PPUSH
38673: LD_INT 5
38675: PPUSH
38676: CALL_OW 12
38680: PPUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: LD_INT 1
38688: PPUSH
38689: CALL_OW 55
// end ;
38693: GO 38506
// end ;
38695: LD_VAR 0 5
38699: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38700: LD_INT 0
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
// if not turrets or not factories then
38710: LD_VAR 0 1
38714: NOT
38715: IFTRUE 38724
38717: PUSH
38718: LD_VAR 0 2
38722: NOT
38723: OR
38724: IFFALSE 38728
// exit ;
38726: GO 39035
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38728: LD_ADDR_VAR 0 10
38732: PUSH
38733: LD_INT 5
38735: PUSH
38736: LD_INT 6
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 4
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 24
38770: PUSH
38771: LD_INT 25
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 23
38780: PUSH
38781: LD_INT 27
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 42
38794: PUSH
38795: LD_INT 43
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 44
38804: PUSH
38805: LD_INT 46
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 45
38814: PUSH
38815: LD_INT 47
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// result := [ ] ;
38832: LD_ADDR_VAR 0 3
38836: PUSH
38837: EMPTY
38838: ST_TO_ADDR
// for i in turrets do
38839: LD_ADDR_VAR 0 4
38843: PUSH
38844: LD_VAR 0 1
38848: PUSH
38849: FOR_IN
38850: IFFALSE 39033
// begin nat := GetNation ( i ) ;
38852: LD_ADDR_VAR 0 7
38856: PUSH
38857: LD_VAR 0 4
38861: PPUSH
38862: CALL_OW 248
38866: ST_TO_ADDR
// weapon := 0 ;
38867: LD_ADDR_VAR 0 8
38871: PUSH
38872: LD_INT 0
38874: ST_TO_ADDR
// if not nat then
38875: LD_VAR 0 7
38879: NOT
38880: IFFALSE 38884
// continue ;
38882: GO 38849
// for j in list [ nat ] do
38884: LD_ADDR_VAR 0 5
38888: PUSH
38889: LD_VAR 0 10
38893: PUSH
38894: LD_VAR 0 7
38898: ARRAY
38899: PUSH
38900: FOR_IN
38901: IFFALSE 38942
// if GetBWeapon ( i ) = j [ 1 ] then
38903: LD_VAR 0 4
38907: PPUSH
38908: CALL_OW 269
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: EQUAL
38922: IFFALSE 38940
// begin weapon := j [ 2 ] ;
38924: LD_ADDR_VAR 0 8
38928: PUSH
38929: LD_VAR 0 5
38933: PUSH
38934: LD_INT 2
38936: ARRAY
38937: ST_TO_ADDR
// break ;
38938: GO 38942
// end ;
38940: GO 38900
38942: POP
38943: POP
// if not weapon then
38944: LD_VAR 0 8
38948: NOT
38949: IFFALSE 38953
// continue ;
38951: GO 38849
// for k in factories do
38953: LD_ADDR_VAR 0 6
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: FOR_IN
38964: IFFALSE 39029
// begin weapons := AvailableWeaponList ( k ) ;
38966: LD_ADDR_VAR 0 9
38970: PUSH
38971: LD_VAR 0 6
38975: PPUSH
38976: CALL_OW 478
38980: ST_TO_ADDR
// if not weapons then
38981: LD_VAR 0 9
38985: NOT
38986: IFFALSE 38990
// continue ;
38988: GO 38963
// if weapon in weapons then
38990: LD_VAR 0 8
38994: PUSH
38995: LD_VAR 0 9
38999: IN
39000: IFFALSE 39027
// begin result := [ i , weapon ] ;
39002: LD_ADDR_VAR 0 3
39006: PUSH
39007: LD_VAR 0 4
39011: PUSH
39012: LD_VAR 0 8
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// exit ;
39021: POP
39022: POP
39023: POP
39024: POP
39025: GO 39035
// end ; end ;
39027: GO 38963
39029: POP
39030: POP
// end ;
39031: GO 38849
39033: POP
39034: POP
// end ;
39035: LD_VAR 0 3
39039: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39040: LD_INT 0
39042: PPUSH
// if not side or side > 8 then
39043: LD_VAR 0 3
39047: NOT
39048: IFTRUE 39060
39050: PUSH
39051: LD_VAR 0 3
39055: PUSH
39056: LD_INT 8
39058: GREATER
39059: OR
39060: IFFALSE 39064
// exit ;
39062: GO 39123
// if not range then
39064: LD_VAR 0 4
39068: NOT
39069: IFFALSE 39080
// range := - 12 ;
39071: LD_ADDR_VAR 0 4
39075: PUSH
39076: LD_INT 12
39078: NEG
39079: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39080: LD_VAR 0 1
39084: PPUSH
39085: LD_VAR 0 2
39089: PPUSH
39090: LD_VAR 0 3
39094: PPUSH
39095: LD_VAR 0 4
39099: PPUSH
39100: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39104: LD_VAR 0 1
39108: PPUSH
39109: LD_VAR 0 2
39113: PPUSH
39114: LD_VAR 0 3
39118: PPUSH
39119: CALL_OW 331
// end ;
39123: LD_VAR 0 5
39127: RET
// export function Video ( mode ) ; begin
39128: LD_INT 0
39130: PPUSH
// ingame_video = mode ;
39131: LD_ADDR_OWVAR 52
39135: PUSH
39136: LD_VAR 0 1
39140: ST_TO_ADDR
// interface_hidden = mode ;
39141: LD_ADDR_OWVAR 54
39145: PUSH
39146: LD_VAR 0 1
39150: ST_TO_ADDR
// end ;
39151: LD_VAR 0 2
39155: RET
// export function Join ( array , element ) ; begin
39156: LD_INT 0
39158: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_VAR 0 1
39168: PPUSH
39169: LD_VAR 0 1
39173: PUSH
39174: LD_INT 1
39176: PLUS
39177: PPUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: CALL_OW 1
39187: ST_TO_ADDR
// end ;
39188: LD_VAR 0 3
39192: RET
// export function JoinUnion ( array , element ) ; begin
39193: LD_INT 0
39195: PPUSH
// result := array union element ;
39196: LD_ADDR_VAR 0 3
39200: PUSH
39201: LD_VAR 0 1
39205: PUSH
39206: LD_VAR 0 2
39210: UNION
39211: ST_TO_ADDR
// end ;
39212: LD_VAR 0 3
39216: RET
// export function GetBehemoths ( side ) ; begin
39217: LD_INT 0
39219: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39220: LD_ADDR_VAR 0 2
39224: PUSH
39225: LD_INT 22
39227: PUSH
39228: LD_VAR 0 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 31
39239: PUSH
39240: LD_INT 25
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PPUSH
39251: CALL_OW 69
39255: ST_TO_ADDR
// end ;
39256: LD_VAR 0 2
39260: RET
// export function Shuffle ( array ) ; var i , index ; begin
39261: LD_INT 0
39263: PPUSH
39264: PPUSH
39265: PPUSH
// result := [ ] ;
39266: LD_ADDR_VAR 0 2
39270: PUSH
39271: EMPTY
39272: ST_TO_ADDR
// if not array then
39273: LD_VAR 0 1
39277: NOT
39278: IFFALSE 39282
// exit ;
39280: GO 39381
// Randomize ;
39282: CALL_OW 10
// for i = array downto 1 do
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: DOUBLE
39292: LD_VAR 0 1
39296: INC
39297: ST_TO_ADDR
39298: LD_INT 1
39300: PUSH
39301: FOR_DOWNTO
39302: IFFALSE 39379
// begin index := rand ( 1 , array ) ;
39304: LD_ADDR_VAR 0 4
39308: PUSH
39309: LD_INT 1
39311: PPUSH
39312: LD_VAR 0 1
39316: PPUSH
39317: CALL_OW 12
39321: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39322: LD_ADDR_VAR 0 2
39326: PUSH
39327: LD_VAR 0 2
39331: PPUSH
39332: LD_VAR 0 2
39336: PUSH
39337: LD_INT 1
39339: PLUS
39340: PPUSH
39341: LD_VAR 0 1
39345: PUSH
39346: LD_VAR 0 4
39350: ARRAY
39351: PPUSH
39352: CALL_OW 2
39356: ST_TO_ADDR
// array := Delete ( array , index ) ;
39357: LD_ADDR_VAR 0 1
39361: PUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: CALL_OW 3
39376: ST_TO_ADDR
// end ;
39377: GO 39301
39379: POP
39380: POP
// end ;
39381: LD_VAR 0 2
39385: RET
// export function GetBaseMaterials ( base ) ; begin
39386: LD_INT 0
39388: PPUSH
// result := [ 0 , 0 , 0 ] ;
39389: LD_ADDR_VAR 0 2
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// if not base then
39408: LD_VAR 0 1
39412: NOT
39413: IFFALSE 39417
// exit ;
39415: GO 39466
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39417: LD_ADDR_VAR 0 2
39421: PUSH
39422: LD_VAR 0 1
39426: PPUSH
39427: LD_INT 1
39429: PPUSH
39430: CALL_OW 275
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: LD_INT 2
39442: PPUSH
39443: CALL_OW 275
39447: PUSH
39448: LD_VAR 0 1
39452: PPUSH
39453: LD_INT 3
39455: PPUSH
39456: CALL_OW 275
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// end ;
39466: LD_VAR 0 2
39470: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
// result := array ;
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_VAR 0 1
39484: ST_TO_ADDR
// if size >= result then
39485: LD_VAR 0 2
39489: PUSH
39490: LD_VAR 0 3
39494: GREATEREQUAL
39495: IFFALSE 39499
// exit ;
39497: GO 39549
// if size then
39499: LD_VAR 0 2
39503: IFFALSE 39549
// for i := array downto size do
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: DOUBLE
39511: LD_VAR 0 1
39515: INC
39516: ST_TO_ADDR
39517: LD_VAR 0 2
39521: PUSH
39522: FOR_DOWNTO
39523: IFFALSE 39547
// result := Delete ( result , result ) ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 3
39534: PPUSH
39535: LD_VAR 0 3
39539: PPUSH
39540: CALL_OW 3
39544: ST_TO_ADDR
39545: GO 39522
39547: POP
39548: POP
// end ;
39549: LD_VAR 0 3
39553: RET
// export function ComExit ( unit ) ; var tmp ; begin
39554: LD_INT 0
39556: PPUSH
39557: PPUSH
// if not IsInUnit ( unit ) then
39558: LD_VAR 0 1
39562: PPUSH
39563: CALL_OW 310
39567: NOT
39568: IFFALSE 39572
// exit ;
39570: GO 39632
// tmp := IsInUnit ( unit ) ;
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: LD_VAR 0 1
39581: PPUSH
39582: CALL_OW 310
39586: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39587: LD_VAR 0 3
39591: PPUSH
39592: CALL_OW 247
39596: PUSH
39597: LD_INT 2
39599: EQUAL
39600: IFFALSE 39613
// ComExitVehicle ( unit ) else
39602: LD_VAR 0 1
39606: PPUSH
39607: CALL_OW 121
39611: GO 39622
// ComExitBuilding ( unit ) ;
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 122
// result := tmp ;
39622: LD_ADDR_VAR 0 2
39626: PUSH
39627: LD_VAR 0 3
39631: ST_TO_ADDR
// end ;
39632: LD_VAR 0 2
39636: RET
// export function ComExitAll ( units ) ; var i ; begin
39637: LD_INT 0
39639: PPUSH
39640: PPUSH
// if not units then
39641: LD_VAR 0 1
39645: NOT
39646: IFFALSE 39650
// exit ;
39648: GO 39676
// for i in units do
39650: LD_ADDR_VAR 0 3
39654: PUSH
39655: LD_VAR 0 1
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39674
// ComExit ( i ) ;
39663: LD_VAR 0 3
39667: PPUSH
39668: CALL 39554 0 1
39672: GO 39660
39674: POP
39675: POP
// end ;
39676: LD_VAR 0 2
39680: RET
// export function ResetHc ; begin
39681: LD_INT 0
39683: PPUSH
// InitHc ;
39684: CALL_OW 19
// hc_importance := 0 ;
39688: LD_ADDR_OWVAR 32
39692: PUSH
39693: LD_INT 0
39695: ST_TO_ADDR
// end ;
39696: LD_VAR 0 1
39700: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39701: LD_INT 0
39703: PPUSH
39704: PPUSH
39705: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39706: LD_ADDR_VAR 0 6
39710: PUSH
39711: LD_VAR 0 1
39715: PUSH
39716: LD_VAR 0 3
39720: PLUS
39721: PUSH
39722: LD_INT 2
39724: DIV
39725: ST_TO_ADDR
// if _x < 0 then
39726: LD_VAR 0 6
39730: PUSH
39731: LD_INT 0
39733: LESS
39734: IFFALSE 39751
// _x := _x * - 1 ;
39736: LD_ADDR_VAR 0 6
39740: PUSH
39741: LD_VAR 0 6
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: MUL
39750: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39751: LD_ADDR_VAR 0 7
39755: PUSH
39756: LD_VAR 0 2
39760: PUSH
39761: LD_VAR 0 4
39765: PLUS
39766: PUSH
39767: LD_INT 2
39769: DIV
39770: ST_TO_ADDR
// if _y < 0 then
39771: LD_VAR 0 7
39775: PUSH
39776: LD_INT 0
39778: LESS
39779: IFFALSE 39796
// _y := _y * - 1 ;
39781: LD_ADDR_VAR 0 7
39785: PUSH
39786: LD_VAR 0 7
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: MUL
39795: ST_TO_ADDR
// result := [ _x , _y ] ;
39796: LD_ADDR_VAR 0 5
39800: PUSH
39801: LD_VAR 0 6
39805: PUSH
39806: LD_VAR 0 7
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// end ;
39815: LD_VAR 0 5
39819: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39820: LD_INT 0
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
// task := GetTaskList ( unit ) ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 437
39840: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39841: LD_VAR 0 7
39845: NOT
39846: IFFALSE 39865
39848: PUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_VAR 0 2
39858: PPUSH
39859: CALL_OW 308
39863: NOT
39864: AND
39865: IFFALSE 39869
// exit ;
39867: GO 39987
// if IsInArea ( unit , area ) then
39869: LD_VAR 0 1
39873: PPUSH
39874: LD_VAR 0 2
39878: PPUSH
39879: CALL_OW 308
39883: IFFALSE 39901
// begin ComMoveToArea ( unit , goAway ) ;
39885: LD_VAR 0 1
39889: PPUSH
39890: LD_VAR 0 3
39894: PPUSH
39895: CALL_OW 113
// exit ;
39899: GO 39987
// end ; if task [ 1 ] [ 1 ] <> M then
39901: LD_VAR 0 7
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: PUSH
39914: LD_STRING M
39916: NONEQUAL
39917: IFFALSE 39921
// exit ;
39919: GO 39987
// x := task [ 1 ] [ 2 ] ;
39921: LD_ADDR_VAR 0 5
39925: PUSH
39926: LD_VAR 0 7
39930: PUSH
39931: LD_INT 1
39933: ARRAY
39934: PUSH
39935: LD_INT 2
39937: ARRAY
39938: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39939: LD_ADDR_VAR 0 6
39943: PUSH
39944: LD_VAR 0 7
39948: PUSH
39949: LD_INT 1
39951: ARRAY
39952: PUSH
39953: LD_INT 3
39955: ARRAY
39956: ST_TO_ADDR
// if InArea ( x , y , area ) then
39957: LD_VAR 0 5
39961: PPUSH
39962: LD_VAR 0 6
39966: PPUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: CALL_OW 309
39976: IFFALSE 39987
// ComStop ( unit ) ;
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL_OW 141
// end ;
39987: LD_VAR 0 4
39991: RET
// export function Abs ( value ) ; begin
39992: LD_INT 0
39994: PPUSH
// result := value ;
39995: LD_ADDR_VAR 0 2
39999: PUSH
40000: LD_VAR 0 1
40004: ST_TO_ADDR
// if value < 0 then
40005: LD_VAR 0 1
40009: PUSH
40010: LD_INT 0
40012: LESS
40013: IFFALSE 40030
// result := value * - 1 ;
40015: LD_ADDR_VAR 0 2
40019: PUSH
40020: LD_VAR 0 1
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: MUL
40029: ST_TO_ADDR
// end ;
40030: LD_VAR 0 2
40034: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40035: LD_INT 0
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
// if not unit or not building then
40045: LD_VAR 0 1
40049: NOT
40050: IFTRUE 40059
40052: PUSH
40053: LD_VAR 0 2
40057: NOT
40058: OR
40059: IFFALSE 40063
// exit ;
40061: GO 40291
// x := GetX ( building ) ;
40063: LD_ADDR_VAR 0 4
40067: PUSH
40068: LD_VAR 0 2
40072: PPUSH
40073: CALL_OW 250
40077: ST_TO_ADDR
// y := GetY ( building ) ;
40078: LD_ADDR_VAR 0 6
40082: PUSH
40083: LD_VAR 0 2
40087: PPUSH
40088: CALL_OW 251
40092: ST_TO_ADDR
// d := GetDir ( building ) ;
40093: LD_ADDR_VAR 0 8
40097: PUSH
40098: LD_VAR 0 2
40102: PPUSH
40103: CALL_OW 254
40107: ST_TO_ADDR
// r := 4 ;
40108: LD_ADDR_VAR 0 9
40112: PUSH
40113: LD_INT 4
40115: ST_TO_ADDR
// for i := 1 to 5 do
40116: LD_ADDR_VAR 0 10
40120: PUSH
40121: DOUBLE
40122: LD_INT 1
40124: DEC
40125: ST_TO_ADDR
40126: LD_INT 5
40128: PUSH
40129: FOR_TO
40130: IFFALSE 40289
// begin _x := ShiftX ( x , d , r + i ) ;
40132: LD_ADDR_VAR 0 5
40136: PUSH
40137: LD_VAR 0 4
40141: PPUSH
40142: LD_VAR 0 8
40146: PPUSH
40147: LD_VAR 0 9
40151: PUSH
40152: LD_VAR 0 10
40156: PLUS
40157: PPUSH
40158: CALL_OW 272
40162: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40163: LD_ADDR_VAR 0 7
40167: PUSH
40168: LD_VAR 0 6
40172: PPUSH
40173: LD_VAR 0 8
40177: PPUSH
40178: LD_VAR 0 9
40182: PUSH
40183: LD_VAR 0 10
40187: PLUS
40188: PPUSH
40189: CALL_OW 273
40193: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40194: LD_VAR 0 5
40198: PPUSH
40199: LD_VAR 0 7
40203: PPUSH
40204: CALL_OW 488
40208: IFFALSE 40243
40210: PUSH
40211: LD_VAR 0 5
40215: PPUSH
40216: LD_VAR 0 7
40220: PPUSH
40221: CALL_OW 428
40225: PPUSH
40226: CALL_OW 247
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: IN
40241: NOT
40242: AND
40243: IFFALSE 40287
// begin ComMoveXY ( unit , _x , _y ) ;
40245: LD_VAR 0 1
40249: PPUSH
40250: LD_VAR 0 5
40254: PPUSH
40255: LD_VAR 0 7
40259: PPUSH
40260: CALL_OW 111
// result := [ _x , _y ] ;
40264: LD_ADDR_VAR 0 3
40268: PUSH
40269: LD_VAR 0 5
40273: PUSH
40274: LD_VAR 0 7
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// exit ;
40283: POP
40284: POP
40285: GO 40291
// end ; end ;
40287: GO 40129
40289: POP
40290: POP
// end ;
40291: LD_VAR 0 3
40295: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40296: LD_INT 0
40298: PPUSH
40299: PPUSH
40300: PPUSH
// result := 0 ;
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_INT 0
40308: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40309: LD_VAR 0 1
40313: PUSH
40314: LD_INT 0
40316: LESS
40317: IFTRUE 40329
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: LD_INT 8
40327: GREATER
40328: OR
40329: IFTRUE 40341
40331: PUSH
40332: LD_VAR 0 2
40336: PUSH
40337: LD_INT 0
40339: LESS
40340: OR
40341: IFTRUE 40353
40343: PUSH
40344: LD_VAR 0 2
40348: PUSH
40349: LD_INT 8
40351: GREATER
40352: OR
40353: IFFALSE 40357
// exit ;
40355: GO 40432
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40357: LD_ADDR_VAR 0 4
40361: PUSH
40362: LD_INT 22
40364: PUSH
40365: LD_VAR 0 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PPUSH
40374: CALL_OW 69
40378: PUSH
40379: FOR_IN
40380: IFFALSE 40430
// begin un := UnitShoot ( i ) ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_VAR 0 4
40391: PPUSH
40392: CALL_OW 504
40396: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40397: LD_VAR 0 5
40401: PPUSH
40402: CALL_OW 255
40406: PUSH
40407: LD_VAR 0 1
40411: EQUAL
40412: IFFALSE 40428
// begin result := un ;
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_VAR 0 5
40423: ST_TO_ADDR
// exit ;
40424: POP
40425: POP
40426: GO 40432
// end ; end ;
40428: GO 40379
40430: POP
40431: POP
// end ;
40432: LD_VAR 0 3
40436: RET
// export function GetCargoBay ( units ) ; begin
40437: LD_INT 0
40439: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40440: LD_ADDR_VAR 0 2
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 34
40455: PUSH
40456: LD_INT 12
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 34
40465: PUSH
40466: LD_INT 51
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 34
40475: PUSH
40476: LD_INT 32
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 34
40485: PUSH
40486: LD_INT 89
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: PPUSH
40500: CALL_OW 72
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 2
40509: RET
// export function Negate ( value ) ; begin
40510: LD_INT 0
40512: PPUSH
// result := not value ;
40513: LD_ADDR_VAR 0 2
40517: PUSH
40518: LD_VAR 0 1
40522: NOT
40523: ST_TO_ADDR
// end ;
40524: LD_VAR 0 2
40528: RET
// export function Inc ( value ) ; begin
40529: LD_INT 0
40531: PPUSH
// result := value + 1 ;
40532: LD_ADDR_VAR 0 2
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: LD_INT 1
40544: PLUS
40545: ST_TO_ADDR
// end ;
40546: LD_VAR 0 2
40550: RET
// export function Dec ( value ) ; begin
40551: LD_INT 0
40553: PPUSH
// result := value - 1 ;
40554: LD_ADDR_VAR 0 2
40558: PUSH
40559: LD_VAR 0 1
40563: PUSH
40564: LD_INT 1
40566: MINUS
40567: ST_TO_ADDR
// end ;
40568: LD_VAR 0 2
40572: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40573: LD_INT 0
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40583: LD_VAR 0 1
40587: PPUSH
40588: LD_VAR 0 2
40592: PPUSH
40593: CALL_OW 488
40597: NOT
40598: IFTRUE 40617
40600: PUSH
40601: LD_VAR 0 3
40605: PPUSH
40606: LD_VAR 0 4
40610: PPUSH
40611: CALL_OW 488
40615: NOT
40616: OR
40617: IFFALSE 40630
// begin result := - 1 ;
40619: LD_ADDR_VAR 0 5
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: ST_TO_ADDR
// exit ;
40628: GO 40865
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40630: LD_ADDR_VAR 0 12
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: LD_VAR 0 2
40644: PPUSH
40645: LD_VAR 0 3
40649: PPUSH
40650: LD_VAR 0 4
40654: PPUSH
40655: CALL 39701 0 4
40659: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40660: LD_ADDR_VAR 0 11
40664: PUSH
40665: LD_VAR 0 1
40669: PPUSH
40670: LD_VAR 0 2
40674: PPUSH
40675: LD_VAR 0 12
40679: PUSH
40680: LD_INT 1
40682: ARRAY
40683: PPUSH
40684: LD_VAR 0 12
40688: PUSH
40689: LD_INT 2
40691: ARRAY
40692: PPUSH
40693: CALL_OW 298
40697: ST_TO_ADDR
// distance := 9999 ;
40698: LD_ADDR_VAR 0 10
40702: PUSH
40703: LD_INT 9999
40705: ST_TO_ADDR
// for i := 0 to 5 do
40706: LD_ADDR_VAR 0 6
40710: PUSH
40711: DOUBLE
40712: LD_INT 0
40714: DEC
40715: ST_TO_ADDR
40716: LD_INT 5
40718: PUSH
40719: FOR_TO
40720: IFFALSE 40863
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40722: LD_ADDR_VAR 0 7
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_VAR 0 6
40736: PPUSH
40737: LD_VAR 0 11
40741: PPUSH
40742: CALL_OW 272
40746: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40747: LD_ADDR_VAR 0 8
40751: PUSH
40752: LD_VAR 0 2
40756: PPUSH
40757: LD_VAR 0 6
40761: PPUSH
40762: LD_VAR 0 11
40766: PPUSH
40767: CALL_OW 273
40771: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40772: LD_VAR 0 7
40776: PPUSH
40777: LD_VAR 0 8
40781: PPUSH
40782: CALL_OW 488
40786: NOT
40787: IFFALSE 40791
// continue ;
40789: GO 40719
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40791: LD_ADDR_VAR 0 9
40795: PUSH
40796: LD_VAR 0 12
40800: PUSH
40801: LD_INT 1
40803: ARRAY
40804: PPUSH
40805: LD_VAR 0 12
40809: PUSH
40810: LD_INT 2
40812: ARRAY
40813: PPUSH
40814: LD_VAR 0 7
40818: PPUSH
40819: LD_VAR 0 8
40823: PPUSH
40824: CALL_OW 298
40828: ST_TO_ADDR
// if tmp < distance then
40829: LD_VAR 0 9
40833: PUSH
40834: LD_VAR 0 10
40838: LESS
40839: IFFALSE 40861
// begin result := i ;
40841: LD_ADDR_VAR 0 5
40845: PUSH
40846: LD_VAR 0 6
40850: ST_TO_ADDR
// distance := tmp ;
40851: LD_ADDR_VAR 0 10
40855: PUSH
40856: LD_VAR 0 9
40860: ST_TO_ADDR
// end ; end ;
40861: GO 40719
40863: POP
40864: POP
// end ;
40865: LD_VAR 0 5
40869: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
// if not driver or not IsInUnit ( driver ) then
40874: LD_VAR 0 1
40878: NOT
40879: IFTRUE 40893
40881: PUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 310
40891: NOT
40892: OR
40893: IFFALSE 40897
// exit ;
40895: GO 40987
// vehicle := IsInUnit ( driver ) ;
40897: LD_ADDR_VAR 0 3
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 310
40911: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40912: LD_VAR 0 1
40916: PPUSH
40917: LD_STRING \
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: PUSH
40947: LD_STRING E
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_VAR 0 3
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PPUSH
40983: CALL_OW 446
// end ;
40987: LD_VAR 0 2
40991: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
// if not driver or not IsInUnit ( driver ) then
40996: LD_VAR 0 1
41000: NOT
41001: IFTRUE 41015
41003: PUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 310
41013: NOT
41014: OR
41015: IFFALSE 41019
// exit ;
41017: GO 41109
// vehicle := IsInUnit ( driver ) ;
41019: LD_ADDR_VAR 0 3
41023: PUSH
41024: LD_VAR 0 1
41028: PPUSH
41029: CALL_OW 310
41033: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41034: LD_VAR 0 1
41038: PPUSH
41039: LD_STRING \
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: PUSH
41069: LD_STRING E
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_VAR 0 3
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PPUSH
41105: CALL_OW 447
// end ;
41109: LD_VAR 0 2
41113: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
41118: PPUSH
// tmp := [ ] ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: EMPTY
41125: ST_TO_ADDR
// for i in units do
41126: LD_ADDR_VAR 0 4
41130: PUSH
41131: LD_VAR 0 1
41135: PUSH
41136: FOR_IN
41137: IFFALSE 41175
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41139: LD_ADDR_VAR 0 5
41143: PUSH
41144: LD_VAR 0 5
41148: PPUSH
41149: LD_VAR 0 5
41153: PUSH
41154: LD_INT 1
41156: PLUS
41157: PPUSH
41158: LD_VAR 0 4
41162: PPUSH
41163: CALL_OW 256
41167: PPUSH
41168: CALL_OW 2
41172: ST_TO_ADDR
41173: GO 41136
41175: POP
41176: POP
// if not tmp then
41177: LD_VAR 0 5
41181: NOT
41182: IFFALSE 41186
// exit ;
41184: GO 41234
// if asc then
41186: LD_VAR 0 2
41190: IFFALSE 41214
// result := SortListByListAsc ( units , tmp ) else
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: LD_VAR 0 5
41206: PPUSH
41207: CALL_OW 76
41211: ST_TO_ADDR
41212: GO 41234
// result := SortListByListDesc ( units , tmp ) ;
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_VAR 0 5
41228: PPUSH
41229: CALL_OW 77
41233: ST_TO_ADDR
// end ;
41234: LD_VAR 0 3
41238: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41239: LD_INT 0
41241: PPUSH
41242: PPUSH
// task := GetTaskList ( mech ) ;
41243: LD_ADDR_VAR 0 4
41247: PUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 437
41257: ST_TO_ADDR
// if not task then
41258: LD_VAR 0 4
41262: NOT
41263: IFFALSE 41267
// exit ;
41265: GO 41311
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41267: LD_ADDR_VAR 0 3
41271: PUSH
41272: LD_VAR 0 4
41276: PUSH
41277: LD_INT 1
41279: ARRAY
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PUSH
41285: LD_STRING r
41287: EQUAL
41288: IFFALSE 41310
41290: PUSH
41291: LD_VAR 0 4
41295: PUSH
41296: LD_INT 1
41298: ARRAY
41299: PUSH
41300: LD_INT 4
41302: ARRAY
41303: PUSH
41304: LD_VAR 0 2
41308: EQUAL
41309: AND
41310: ST_TO_ADDR
// end ;
41311: LD_VAR 0 3
41315: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41316: LD_INT 0
41318: PPUSH
// SetDir ( unit , d ) ;
41319: LD_VAR 0 1
41323: PPUSH
41324: LD_VAR 0 4
41328: PPUSH
41329: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41333: LD_ADDR_VAR 0 6
41337: PUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: LD_VAR 0 2
41347: PPUSH
41348: LD_VAR 0 3
41352: PPUSH
41353: LD_VAR 0 5
41357: PPUSH
41358: CALL_OW 48
41362: ST_TO_ADDR
// end ;
41363: LD_VAR 0 6
41367: RET
// export function ToNaturalNumber ( number ) ; begin
41368: LD_INT 0
41370: PPUSH
// result := number div 1 ;
41371: LD_ADDR_VAR 0 2
41375: PUSH
41376: LD_VAR 0 1
41380: PUSH
41381: LD_INT 1
41383: DIV
41384: ST_TO_ADDR
// if number < 0 then
41385: LD_VAR 0 1
41389: PUSH
41390: LD_INT 0
41392: LESS
41393: IFFALSE 41403
// result := 0 ;
41395: LD_ADDR_VAR 0 2
41399: PUSH
41400: LD_INT 0
41402: ST_TO_ADDR
// end ;
41403: LD_VAR 0 2
41407: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41408: LD_INT 0
41410: PPUSH
41411: PPUSH
41412: PPUSH
// if not buildings then
41413: LD_VAR 0 1
41417: NOT
41418: IFFALSE 41422
// exit ;
41420: GO 41537
// tmp := [ ] ;
41422: LD_ADDR_VAR 0 5
41426: PUSH
41427: EMPTY
41428: ST_TO_ADDR
// for b in buildings do
41429: LD_ADDR_VAR 0 4
41433: PUSH
41434: LD_VAR 0 1
41438: PUSH
41439: FOR_IN
41440: IFFALSE 41478
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: LD_VAR 0 5
41451: PPUSH
41452: LD_VAR 0 5
41456: PUSH
41457: LD_INT 1
41459: PLUS
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: CALL_OW 266
41470: PPUSH
41471: CALL_OW 1
41475: ST_TO_ADDR
41476: GO 41439
41478: POP
41479: POP
// if not tmp then
41480: LD_VAR 0 5
41484: NOT
41485: IFFALSE 41489
// exit ;
41487: GO 41537
// if asc then
41489: LD_VAR 0 2
41493: IFFALSE 41517
// result := SortListByListAsc ( buildings , tmp ) else
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: LD_VAR 0 5
41509: PPUSH
41510: CALL_OW 76
41514: ST_TO_ADDR
41515: GO 41537
// result := SortListByListDesc ( buildings , tmp ) ;
41517: LD_ADDR_VAR 0 3
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: LD_VAR 0 5
41531: PPUSH
41532: CALL_OW 77
41536: ST_TO_ADDR
// end ;
41537: LD_VAR 0 3
41541: RET
// export function SortByClass ( units , class ) ; var un ; begin
41542: LD_INT 0
41544: PPUSH
41545: PPUSH
// if not units or not class then
41546: LD_VAR 0 1
41550: NOT
41551: IFTRUE 41560
41553: PUSH
41554: LD_VAR 0 2
41558: NOT
41559: OR
41560: IFFALSE 41564
// exit ;
41562: GO 41659
// result := [ ] ;
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: EMPTY
41570: ST_TO_ADDR
// for un in units do
41571: LD_ADDR_VAR 0 4
41575: PUSH
41576: LD_VAR 0 1
41580: PUSH
41581: FOR_IN
41582: IFFALSE 41657
// if GetClass ( un ) = class then
41584: LD_VAR 0 4
41588: PPUSH
41589: CALL_OW 257
41593: PUSH
41594: LD_VAR 0 2
41598: EQUAL
41599: IFFALSE 41626
// result := Insert ( result , 1 , un ) else
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_VAR 0 3
41610: PPUSH
41611: LD_INT 1
41613: PPUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: CALL_OW 2
41623: ST_TO_ADDR
41624: GO 41655
// result := Replace ( result , result + 1 , un ) ;
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_VAR 0 3
41635: PPUSH
41636: LD_VAR 0 3
41640: PUSH
41641: LD_INT 1
41643: PLUS
41644: PPUSH
41645: LD_VAR 0 4
41649: PPUSH
41650: CALL_OW 1
41654: ST_TO_ADDR
41655: GO 41581
41657: POP
41658: POP
// end ;
41659: LD_VAR 0 3
41663: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41664: LD_INT 0
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
// result := [ ] ;
41673: LD_ADDR_VAR 0 4
41677: PUSH
41678: EMPTY
41679: ST_TO_ADDR
// if x - r < 0 then
41680: LD_VAR 0 1
41684: PUSH
41685: LD_VAR 0 3
41689: MINUS
41690: PUSH
41691: LD_INT 0
41693: LESS
41694: IFFALSE 41706
// min_x := 0 else
41696: LD_ADDR_VAR 0 8
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
41704: GO 41722
// min_x := x - r ;
41706: LD_ADDR_VAR 0 8
41710: PUSH
41711: LD_VAR 0 1
41715: PUSH
41716: LD_VAR 0 3
41720: MINUS
41721: ST_TO_ADDR
// if y - r < 0 then
41722: LD_VAR 0 2
41726: PUSH
41727: LD_VAR 0 3
41731: MINUS
41732: PUSH
41733: LD_INT 0
41735: LESS
41736: IFFALSE 41748
// min_y := 0 else
41738: LD_ADDR_VAR 0 7
41742: PUSH
41743: LD_INT 0
41745: ST_TO_ADDR
41746: GO 41764
// min_y := y - r ;
41748: LD_ADDR_VAR 0 7
41752: PUSH
41753: LD_VAR 0 2
41757: PUSH
41758: LD_VAR 0 3
41762: MINUS
41763: ST_TO_ADDR
// max_x := x + r ;
41764: LD_ADDR_VAR 0 9
41768: PUSH
41769: LD_VAR 0 1
41773: PUSH
41774: LD_VAR 0 3
41778: PLUS
41779: ST_TO_ADDR
// max_y := y + r ;
41780: LD_ADDR_VAR 0 10
41784: PUSH
41785: LD_VAR 0 2
41789: PUSH
41790: LD_VAR 0 3
41794: PLUS
41795: ST_TO_ADDR
// for _x = min_x to max_x do
41796: LD_ADDR_VAR 0 5
41800: PUSH
41801: DOUBLE
41802: LD_VAR 0 8
41806: DEC
41807: ST_TO_ADDR
41808: LD_VAR 0 9
41812: PUSH
41813: FOR_TO
41814: IFFALSE 41915
// for _y = min_y to max_y do
41816: LD_ADDR_VAR 0 6
41820: PUSH
41821: DOUBLE
41822: LD_VAR 0 7
41826: DEC
41827: ST_TO_ADDR
41828: LD_VAR 0 10
41832: PUSH
41833: FOR_TO
41834: IFFALSE 41911
// begin if not ValidHex ( _x , _y ) then
41836: LD_VAR 0 5
41840: PPUSH
41841: LD_VAR 0 6
41845: PPUSH
41846: CALL_OW 488
41850: NOT
41851: IFFALSE 41855
// continue ;
41853: GO 41833
// if GetResourceTypeXY ( _x , _y ) then
41855: LD_VAR 0 5
41859: PPUSH
41860: LD_VAR 0 6
41864: PPUSH
41865: CALL_OW 283
41869: IFFALSE 41909
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41871: LD_ADDR_VAR 0 4
41875: PUSH
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 4
41885: PUSH
41886: LD_INT 1
41888: PLUS
41889: PPUSH
41890: LD_VAR 0 5
41894: PUSH
41895: LD_VAR 0 6
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PPUSH
41904: CALL_OW 1
41908: ST_TO_ADDR
// end ;
41909: GO 41833
41911: POP
41912: POP
41913: GO 41813
41915: POP
41916: POP
// end ;
41917: LD_VAR 0 4
41921: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41922: LD_INT 0
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
// if not units then
41932: LD_VAR 0 1
41936: NOT
41937: IFFALSE 41941
// exit ;
41939: GO 42473
// result := UnitFilter ( units , [ f_ok ] ) ;
41941: LD_ADDR_VAR 0 3
41945: PUSH
41946: LD_VAR 0 1
41950: PPUSH
41951: LD_INT 50
41953: PUSH
41954: EMPTY
41955: LIST
41956: PPUSH
41957: CALL_OW 72
41961: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41962: LD_ADDR_VAR 0 8
41966: PUSH
41967: LD_VAR 0 1
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: CALL_OW 255
41980: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41981: LD_ADDR_VAR 0 10
41985: PUSH
41986: LD_INT 29
41988: PUSH
41989: LD_INT 91
41991: PUSH
41992: LD_INT 49
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// if not result then
42000: LD_VAR 0 3
42004: NOT
42005: IFFALSE 42009
// exit ;
42007: GO 42473
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42009: LD_ADDR_VAR 0 5
42013: PUSH
42014: LD_INT 81
42016: PUSH
42017: LD_VAR 0 8
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PPUSH
42026: CALL_OW 69
42030: ST_TO_ADDR
// for i in result do
42031: LD_ADDR_VAR 0 4
42035: PUSH
42036: LD_VAR 0 3
42040: PUSH
42041: FOR_IN
42042: IFFALSE 42471
// begin tag := GetTag ( i ) + 1 ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_VAR 0 4
42053: PPUSH
42054: CALL_OW 110
42058: PUSH
42059: LD_INT 1
42061: PLUS
42062: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42063: LD_ADDR_VAR 0 7
42067: PUSH
42068: LD_VAR 0 4
42072: PPUSH
42073: CALL_OW 250
42077: PPUSH
42078: LD_VAR 0 4
42082: PPUSH
42083: CALL_OW 251
42087: PPUSH
42088: LD_INT 4
42090: PPUSH
42091: CALL 41664 0 3
42095: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42096: LD_VAR 0 4
42100: PPUSH
42101: CALL_OW 247
42105: PUSH
42106: LD_INT 2
42108: EQUAL
42109: IFFALSE 42121
42111: PUSH
42112: LD_VAR 0 7
42116: PUSH
42117: LD_INT 2
42119: GREATER
42120: AND
42121: IFFALSE 42141
42123: PUSH
42124: LD_VAR 0 4
42128: PPUSH
42129: CALL_OW 264
42133: PUSH
42134: LD_VAR 0 10
42138: IN
42139: NOT
42140: AND
42141: IFFALSE 42180
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42143: LD_VAR 0 4
42147: PPUSH
42148: LD_VAR 0 7
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PUSH
42157: LD_INT 1
42159: ARRAY
42160: PPUSH
42161: LD_VAR 0 7
42165: PUSH
42166: LD_INT 1
42168: ARRAY
42169: PUSH
42170: LD_INT 2
42172: ARRAY
42173: PPUSH
42174: CALL_OW 116
42178: GO 42469
// if path > tag then
42180: LD_VAR 0 2
42184: PUSH
42185: LD_VAR 0 9
42189: GREATER
42190: IFFALSE 42398
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42192: LD_ADDR_VAR 0 6
42196: PUSH
42197: LD_VAR 0 5
42201: PPUSH
42202: LD_INT 91
42204: PUSH
42205: LD_VAR 0 4
42209: PUSH
42210: LD_INT 8
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: PPUSH
42218: CALL_OW 72
42222: ST_TO_ADDR
// if nearEnemy then
42223: LD_VAR 0 6
42227: IFFALSE 42296
// begin if GetWeapon ( i ) = ru_time_lapser then
42229: LD_VAR 0 4
42233: PPUSH
42234: CALL_OW 264
42238: PUSH
42239: LD_INT 49
42241: EQUAL
42242: IFFALSE 42270
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42244: LD_VAR 0 4
42248: PPUSH
42249: LD_VAR 0 6
42253: PPUSH
42254: LD_VAR 0 4
42258: PPUSH
42259: CALL_OW 74
42263: PPUSH
42264: CALL_OW 112
42268: GO 42294
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42270: LD_VAR 0 4
42274: PPUSH
42275: LD_VAR 0 6
42279: PPUSH
42280: LD_VAR 0 4
42284: PPUSH
42285: CALL_OW 74
42289: PPUSH
42290: CALL 43554 0 2
// end else
42294: GO 42396
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42296: LD_VAR 0 4
42300: PPUSH
42301: LD_VAR 0 2
42305: PUSH
42306: LD_VAR 0 9
42310: ARRAY
42311: PUSH
42312: LD_INT 1
42314: ARRAY
42315: PPUSH
42316: LD_VAR 0 2
42320: PUSH
42321: LD_VAR 0 9
42325: ARRAY
42326: PUSH
42327: LD_INT 2
42329: ARRAY
42330: PPUSH
42331: CALL_OW 297
42335: PUSH
42336: LD_INT 6
42338: GREATER
42339: IFFALSE 42382
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42341: LD_VAR 0 4
42345: PPUSH
42346: LD_VAR 0 2
42350: PUSH
42351: LD_VAR 0 9
42355: ARRAY
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_VAR 0 2
42365: PUSH
42366: LD_VAR 0 9
42370: ARRAY
42371: PUSH
42372: LD_INT 2
42374: ARRAY
42375: PPUSH
42376: CALL_OW 114
42380: GO 42396
// SetTag ( i , tag ) ;
42382: LD_VAR 0 4
42386: PPUSH
42387: LD_VAR 0 9
42391: PPUSH
42392: CALL_OW 109
// end else
42396: GO 42469
// if enemy then
42398: LD_VAR 0 5
42402: IFFALSE 42469
// begin if GetWeapon ( i ) = ru_time_lapser then
42404: LD_VAR 0 4
42408: PPUSH
42409: CALL_OW 264
42413: PUSH
42414: LD_INT 49
42416: EQUAL
42417: IFFALSE 42445
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42419: LD_VAR 0 4
42423: PPUSH
42424: LD_VAR 0 5
42428: PPUSH
42429: LD_VAR 0 4
42433: PPUSH
42434: CALL_OW 74
42438: PPUSH
42439: CALL_OW 112
42443: GO 42469
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42445: LD_VAR 0 4
42449: PPUSH
42450: LD_VAR 0 5
42454: PPUSH
42455: LD_VAR 0 4
42459: PPUSH
42460: CALL_OW 74
42464: PPUSH
42465: CALL 43554 0 2
// end ; end ;
42469: GO 42041
42471: POP
42472: POP
// end ;
42473: LD_VAR 0 3
42477: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42478: LD_INT 0
42480: PPUSH
42481: PPUSH
42482: PPUSH
// if not unit or IsInUnit ( unit ) then
42483: LD_VAR 0 1
42487: NOT
42488: IFTRUE 42501
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: CALL_OW 310
42500: OR
42501: IFFALSE 42505
// exit ;
42503: GO 42596
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42505: LD_ADDR_VAR 0 4
42509: PUSH
42510: LD_VAR 0 1
42514: PPUSH
42515: CALL_OW 250
42519: PPUSH
42520: LD_VAR 0 2
42524: PPUSH
42525: LD_INT 1
42527: PPUSH
42528: CALL_OW 272
42532: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42533: LD_ADDR_VAR 0 5
42537: PUSH
42538: LD_VAR 0 1
42542: PPUSH
42543: CALL_OW 251
42547: PPUSH
42548: LD_VAR 0 2
42552: PPUSH
42553: LD_INT 1
42555: PPUSH
42556: CALL_OW 273
42560: ST_TO_ADDR
// if ValidHex ( x , y ) then
42561: LD_VAR 0 4
42565: PPUSH
42566: LD_VAR 0 5
42570: PPUSH
42571: CALL_OW 488
42575: IFFALSE 42596
// ComTurnXY ( unit , x , y ) ;
42577: LD_VAR 0 1
42581: PPUSH
42582: LD_VAR 0 4
42586: PPUSH
42587: LD_VAR 0 5
42591: PPUSH
42592: CALL_OW 118
// end ;
42596: LD_VAR 0 3
42600: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42601: LD_INT 0
42603: PPUSH
42604: PPUSH
// result := false ;
42605: LD_ADDR_VAR 0 3
42609: PUSH
42610: LD_INT 0
42612: ST_TO_ADDR
// if not units then
42613: LD_VAR 0 2
42617: NOT
42618: IFFALSE 42622
// exit ;
42620: GO 42667
// for i in units do
42622: LD_ADDR_VAR 0 4
42626: PUSH
42627: LD_VAR 0 2
42631: PUSH
42632: FOR_IN
42633: IFFALSE 42665
// if See ( side , i ) then
42635: LD_VAR 0 1
42639: PPUSH
42640: LD_VAR 0 4
42644: PPUSH
42645: CALL_OW 292
42649: IFFALSE 42663
// begin result := true ;
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 1
42658: ST_TO_ADDR
// exit ;
42659: POP
42660: POP
42661: GO 42667
// end ;
42663: GO 42632
42665: POP
42666: POP
// end ;
42667: LD_VAR 0 3
42671: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42672: LD_INT 0
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
// if not unit or not points then
42678: LD_VAR 0 1
42682: NOT
42683: IFTRUE 42692
42685: PUSH
42686: LD_VAR 0 2
42690: NOT
42691: OR
42692: IFFALSE 42696
// exit ;
42694: GO 42786
// dist := 99999 ;
42696: LD_ADDR_VAR 0 5
42700: PUSH
42701: LD_INT 99999
42703: ST_TO_ADDR
// for i in points do
42704: LD_ADDR_VAR 0 4
42708: PUSH
42709: LD_VAR 0 2
42713: PUSH
42714: FOR_IN
42715: IFFALSE 42784
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42717: LD_ADDR_VAR 0 6
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: LD_VAR 0 4
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PPUSH
42736: LD_VAR 0 4
42740: PUSH
42741: LD_INT 2
42743: ARRAY
42744: PPUSH
42745: CALL_OW 297
42749: ST_TO_ADDR
// if tmpDist < dist then
42750: LD_VAR 0 6
42754: PUSH
42755: LD_VAR 0 5
42759: LESS
42760: IFFALSE 42782
// begin result := i ;
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_VAR 0 4
42771: ST_TO_ADDR
// dist := tmpDist ;
42772: LD_ADDR_VAR 0 5
42776: PUSH
42777: LD_VAR 0 6
42781: ST_TO_ADDR
// end ; end ;
42782: GO 42714
42784: POP
42785: POP
// end ;
42786: LD_VAR 0 3
42790: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42791: LD_INT 0
42793: PPUSH
// uc_side := side ;
42794: LD_ADDR_OWVAR 20
42798: PUSH
42799: LD_VAR 0 1
42803: ST_TO_ADDR
// uc_nation := 3 ;
42804: LD_ADDR_OWVAR 21
42808: PUSH
42809: LD_INT 3
42811: ST_TO_ADDR
// vc_chassis := 25 ;
42812: LD_ADDR_OWVAR 37
42816: PUSH
42817: LD_INT 25
42819: ST_TO_ADDR
// vc_engine := engine_siberite ;
42820: LD_ADDR_OWVAR 39
42824: PUSH
42825: LD_INT 3
42827: ST_TO_ADDR
// vc_control := control_computer ;
42828: LD_ADDR_OWVAR 38
42832: PUSH
42833: LD_INT 3
42835: ST_TO_ADDR
// vc_weapon := 59 ;
42836: LD_ADDR_OWVAR 40
42840: PUSH
42841: LD_INT 59
42843: ST_TO_ADDR
// result := CreateVehicle ;
42844: LD_ADDR_VAR 0 5
42848: PUSH
42849: CALL_OW 45
42853: ST_TO_ADDR
// SetDir ( result , d ) ;
42854: LD_VAR 0 5
42858: PPUSH
42859: LD_VAR 0 4
42863: PPUSH
42864: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42868: LD_VAR 0 5
42872: PPUSH
42873: LD_VAR 0 2
42877: PPUSH
42878: LD_VAR 0 3
42882: PPUSH
42883: LD_INT 0
42885: PPUSH
42886: CALL_OW 48
// end ;
42890: LD_VAR 0 5
42894: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42895: LD_INT 0
42897: PPUSH
42898: PPUSH
42899: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42900: LD_ADDR_VAR 0 2
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42923: LD_VAR 0 1
42927: NOT
42928: IFTRUE 42961
42930: PUSH
42931: LD_VAR 0 1
42935: PPUSH
42936: CALL_OW 264
42940: PUSH
42941: LD_INT 12
42943: PUSH
42944: LD_INT 51
42946: PUSH
42947: LD_INT 32
42949: PUSH
42950: LD_INT 89
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: IN
42959: NOT
42960: OR
42961: IFFALSE 42965
// exit ;
42963: GO 43063
// for i := 1 to 3 do
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: DOUBLE
42971: LD_INT 1
42973: DEC
42974: ST_TO_ADDR
42975: LD_INT 3
42977: PUSH
42978: FOR_TO
42979: IFFALSE 43061
// begin tmp := GetCargo ( cargo , i ) ;
42981: LD_ADDR_VAR 0 4
42985: PUSH
42986: LD_VAR 0 1
42990: PPUSH
42991: LD_VAR 0 3
42995: PPUSH
42996: CALL_OW 289
43000: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43001: LD_ADDR_VAR 0 2
43005: PUSH
43006: LD_VAR 0 2
43010: PPUSH
43011: LD_VAR 0 3
43015: PPUSH
43016: LD_VAR 0 4
43020: PPUSH
43021: CALL_OW 1
43025: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43026: LD_ADDR_VAR 0 2
43030: PUSH
43031: LD_VAR 0 2
43035: PPUSH
43036: LD_INT 4
43038: PPUSH
43039: LD_VAR 0 2
43043: PUSH
43044: LD_INT 4
43046: ARRAY
43047: PUSH
43048: LD_VAR 0 4
43052: PLUS
43053: PPUSH
43054: CALL_OW 1
43058: ST_TO_ADDR
// end ;
43059: GO 42978
43061: POP
43062: POP
// end ;
43063: LD_VAR 0 2
43067: RET
// export function Length ( array ) ; begin
43068: LD_INT 0
43070: PPUSH
// result := array + 0 ;
43071: LD_ADDR_VAR 0 2
43075: PUSH
43076: LD_VAR 0 1
43080: PUSH
43081: LD_INT 0
43083: PLUS
43084: ST_TO_ADDR
// end ;
43085: LD_VAR 0 2
43089: RET
// export function PrepareArray ( array ) ; begin
43090: LD_INT 0
43092: PPUSH
// result := array diff 0 ;
43093: LD_ADDR_VAR 0 2
43097: PUSH
43098: LD_VAR 0 1
43102: PUSH
43103: LD_INT 0
43105: DIFF
43106: ST_TO_ADDR
// if not result [ 1 ] then
43107: LD_VAR 0 2
43111: PUSH
43112: LD_INT 1
43114: ARRAY
43115: NOT
43116: IFFALSE 43136
// result := Delete ( result , 1 ) ;
43118: LD_ADDR_VAR 0 2
43122: PUSH
43123: LD_VAR 0 2
43127: PPUSH
43128: LD_INT 1
43130: PPUSH
43131: CALL_OW 3
43135: ST_TO_ADDR
// end ;
43136: LD_VAR 0 2
43140: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43141: LD_INT 0
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
// sibRocketRange := 25 ;
43147: LD_ADDR_VAR 0 6
43151: PUSH
43152: LD_INT 25
43154: ST_TO_ADDR
// result := false ;
43155: LD_ADDR_VAR 0 4
43159: PUSH
43160: LD_INT 0
43162: ST_TO_ADDR
// for i := 0 to 5 do
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: DOUBLE
43169: LD_INT 0
43171: DEC
43172: ST_TO_ADDR
43173: LD_INT 5
43175: PUSH
43176: FOR_TO
43177: IFFALSE 43244
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43179: LD_VAR 0 1
43183: PPUSH
43184: LD_VAR 0 5
43188: PPUSH
43189: LD_VAR 0 6
43193: PPUSH
43194: CALL_OW 272
43198: PPUSH
43199: LD_VAR 0 2
43203: PPUSH
43204: LD_VAR 0 5
43208: PPUSH
43209: LD_VAR 0 6
43213: PPUSH
43214: CALL_OW 273
43218: PPUSH
43219: LD_VAR 0 3
43223: PPUSH
43224: CALL_OW 309
43228: IFFALSE 43242
// begin result := true ;
43230: LD_ADDR_VAR 0 4
43234: PUSH
43235: LD_INT 1
43237: ST_TO_ADDR
// exit ;
43238: POP
43239: POP
43240: GO 43246
// end ;
43242: GO 43176
43244: POP
43245: POP
// end ;
43246: LD_VAR 0 4
43250: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43251: LD_INT 0
43253: PPUSH
43254: PPUSH
43255: PPUSH
// if btype = b_depot then
43256: LD_VAR 0 2
43260: PUSH
43261: LD_INT 0
43263: EQUAL
43264: IFFALSE 43276
// begin result := true ;
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: LD_INT 1
43273: ST_TO_ADDR
// exit ;
43274: GO 43396
// end ; pom := GetBase ( depot ) ;
43276: LD_ADDR_VAR 0 4
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL_OW 274
43290: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43291: LD_ADDR_VAR 0 5
43295: PUSH
43296: LD_VAR 0 2
43300: PPUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: CALL_OW 248
43310: PPUSH
43311: CALL_OW 450
43315: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_VAR 0 4
43325: PPUSH
43326: LD_INT 1
43328: PPUSH
43329: CALL_OW 275
43333: PUSH
43334: LD_VAR 0 5
43338: PUSH
43339: LD_INT 1
43341: ARRAY
43342: GREATEREQUAL
43343: IFFALSE 43369
43345: PUSH
43346: LD_VAR 0 4
43350: PPUSH
43351: LD_INT 2
43353: PPUSH
43354: CALL_OW 275
43358: PUSH
43359: LD_VAR 0 5
43363: PUSH
43364: LD_INT 2
43366: ARRAY
43367: GREATEREQUAL
43368: AND
43369: IFFALSE 43395
43371: PUSH
43372: LD_VAR 0 4
43376: PPUSH
43377: LD_INT 3
43379: PPUSH
43380: CALL_OW 275
43384: PUSH
43385: LD_VAR 0 5
43389: PUSH
43390: LD_INT 3
43392: ARRAY
43393: GREATEREQUAL
43394: AND
43395: ST_TO_ADDR
// end ;
43396: LD_VAR 0 3
43400: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43401: LD_INT 0
43403: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43404: LD_VAR 0 1
43408: PPUSH
43409: LD_VAR 0 2
43413: PPUSH
43414: LD_INT 0
43416: PPUSH
43417: LD_INT 0
43419: PPUSH
43420: LD_INT 1
43422: PPUSH
43423: LD_INT 0
43425: PPUSH
43426: CALL_OW 587
// end ;
43430: LD_VAR 0 3
43434: RET
// export function CenterOnNow ( unit ) ; begin
43435: LD_INT 0
43437: PPUSH
// result := IsInUnit ( unit ) ;
43438: LD_ADDR_VAR 0 2
43442: PUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 310
43452: ST_TO_ADDR
// if not result then
43453: LD_VAR 0 2
43457: NOT
43458: IFFALSE 43470
// result := unit ;
43460: LD_ADDR_VAR 0 2
43464: PUSH
43465: LD_VAR 0 1
43469: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43470: LD_VAR 0 1
43474: PPUSH
43475: CALL_OW 87
// end ;
43479: LD_VAR 0 2
43483: RET
// export function ComMoveHex ( unit , hex ) ; begin
43484: LD_INT 0
43486: PPUSH
// if not hex then
43487: LD_VAR 0 2
43491: NOT
43492: IFFALSE 43496
// exit ;
43494: GO 43549
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43496: LD_VAR 0 2
43500: PUSH
43501: LD_INT 1
43503: ARRAY
43504: PPUSH
43505: LD_VAR 0 2
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: CALL_OW 428
43518: IFFALSE 43522
// exit ;
43520: GO 43549
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43522: LD_VAR 0 1
43526: PPUSH
43527: LD_VAR 0 2
43531: PUSH
43532: LD_INT 1
43534: ARRAY
43535: PPUSH
43536: LD_VAR 0 2
43540: PUSH
43541: LD_INT 2
43543: ARRAY
43544: PPUSH
43545: CALL_OW 111
// end ;
43549: LD_VAR 0 3
43553: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43554: LD_INT 0
43556: PPUSH
43557: PPUSH
43558: PPUSH
// if not unit or not enemy then
43559: LD_VAR 0 1
43563: NOT
43564: IFTRUE 43573
43566: PUSH
43567: LD_VAR 0 2
43571: NOT
43572: OR
43573: IFFALSE 43577
// exit ;
43575: GO 43703
// x := GetX ( enemy ) ;
43577: LD_ADDR_VAR 0 4
43581: PUSH
43582: LD_VAR 0 2
43586: PPUSH
43587: CALL_OW 250
43591: ST_TO_ADDR
// y := GetY ( enemy ) ;
43592: LD_ADDR_VAR 0 5
43596: PUSH
43597: LD_VAR 0 2
43601: PPUSH
43602: CALL_OW 251
43606: ST_TO_ADDR
// if ValidHex ( x , y ) then
43607: LD_VAR 0 4
43611: PPUSH
43612: LD_VAR 0 5
43616: PPUSH
43617: CALL_OW 488
43621: IFFALSE 43703
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43623: LD_VAR 0 2
43627: PPUSH
43628: CALL_OW 247
43632: PUSH
43633: LD_INT 3
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: IN
43643: IFTRUE 43666
43645: PUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 255
43655: PPUSH
43656: LD_VAR 0 2
43660: PPUSH
43661: CALL_OW 292
43665: OR
43666: IFFALSE 43684
// ComAttackUnit ( unit , enemy ) else
43668: LD_VAR 0 1
43672: PPUSH
43673: LD_VAR 0 2
43677: PPUSH
43678: CALL_OW 115
43682: GO 43703
// ComAgressiveMove ( unit , x , y ) ;
43684: LD_VAR 0 1
43688: PPUSH
43689: LD_VAR 0 4
43693: PPUSH
43694: LD_VAR 0 5
43698: PPUSH
43699: CALL_OW 114
// end ;
43703: LD_VAR 0 3
43707: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43708: LD_INT 0
43710: PPUSH
43711: PPUSH
43712: PPUSH
// list := AreaToList ( area , 0 ) ;
43713: LD_ADDR_VAR 0 5
43717: PUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: LD_INT 0
43725: PPUSH
43726: CALL_OW 517
43730: ST_TO_ADDR
// if not list then
43731: LD_VAR 0 5
43735: NOT
43736: IFFALSE 43740
// exit ;
43738: GO 43870
// if all then
43740: LD_VAR 0 2
43744: IFFALSE 43832
// begin for i := 1 to list [ 1 ] do
43746: LD_ADDR_VAR 0 4
43750: PUSH
43751: DOUBLE
43752: LD_INT 1
43754: DEC
43755: ST_TO_ADDR
43756: LD_VAR 0 5
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PUSH
43765: FOR_TO
43766: IFFALSE 43828
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43768: LD_ADDR_VAR 0 3
43772: PUSH
43773: LD_VAR 0 3
43777: PPUSH
43778: LD_VAR 0 3
43782: PUSH
43783: LD_INT 1
43785: PLUS
43786: PPUSH
43787: LD_VAR 0 5
43791: PUSH
43792: LD_INT 1
43794: ARRAY
43795: PUSH
43796: LD_VAR 0 4
43800: ARRAY
43801: PUSH
43802: LD_VAR 0 5
43806: PUSH
43807: LD_INT 2
43809: ARRAY
43810: PUSH
43811: LD_VAR 0 4
43815: ARRAY
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PPUSH
43821: CALL_OW 1
43825: ST_TO_ADDR
43826: GO 43765
43828: POP
43829: POP
// exit ;
43830: GO 43870
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_VAR 0 5
43841: PUSH
43842: LD_INT 1
43844: ARRAY
43845: PUSH
43846: LD_INT 1
43848: ARRAY
43849: PUSH
43850: LD_VAR 0 5
43854: PUSH
43855: LD_INT 2
43857: ARRAY
43858: PUSH
43859: LD_INT 1
43861: ARRAY
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: ST_TO_ADDR
// end ;
43870: LD_VAR 0 3
43874: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43875: LD_INT 0
43877: PPUSH
43878: PPUSH
// list := AreaToList ( area , 0 ) ;
43879: LD_ADDR_VAR 0 4
43883: PUSH
43884: LD_VAR 0 1
43888: PPUSH
43889: LD_INT 0
43891: PPUSH
43892: CALL_OW 517
43896: ST_TO_ADDR
// if not list then
43897: LD_VAR 0 4
43901: NOT
43902: IFFALSE 43906
// exit ;
43904: GO 43947
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43906: LD_ADDR_VAR 0 3
43910: PUSH
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 1
43918: ARRAY
43919: PUSH
43920: LD_INT 1
43922: ARRAY
43923: PUSH
43924: LD_VAR 0 4
43928: PUSH
43929: LD_INT 2
43931: ARRAY
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
// end ;
43947: LD_VAR 0 3
43951: RET
// export function First ( array ) ; begin
43952: LD_INT 0
43954: PPUSH
// if not array then
43955: LD_VAR 0 1
43959: NOT
43960: IFFALSE 43964
// exit ;
43962: GO 43978
// result := array [ 1 ] ;
43964: LD_ADDR_VAR 0 2
43968: PUSH
43969: LD_VAR 0 1
43973: PUSH
43974: LD_INT 1
43976: ARRAY
43977: ST_TO_ADDR
// end ;
43978: LD_VAR 0 2
43982: RET
// export function Last ( array ) ; begin
43983: LD_INT 0
43985: PPUSH
// if not array then
43986: LD_VAR 0 1
43990: NOT
43991: IFFALSE 43995
// exit ;
43993: GO 44011
// result := array [ array ] ;
43995: LD_ADDR_VAR 0 2
43999: PUSH
44000: LD_VAR 0 1
44004: PUSH
44005: LD_VAR 0 1
44009: ARRAY
44010: ST_TO_ADDR
// end ;
44011: LD_VAR 0 2
44015: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44016: LD_INT 0
44018: PPUSH
44019: PPUSH
// result := [ ] ;
44020: LD_ADDR_VAR 0 5
44024: PUSH
44025: EMPTY
44026: ST_TO_ADDR
// if not array then
44027: LD_VAR 0 1
44031: NOT
44032: IFFALSE 44036
// exit ;
44034: GO 44148
// for i := 1 to array do
44036: LD_ADDR_VAR 0 6
44040: PUSH
44041: DOUBLE
44042: LD_INT 1
44044: DEC
44045: ST_TO_ADDR
44046: LD_VAR 0 1
44050: PUSH
44051: FOR_TO
44052: IFFALSE 44146
// if array [ i ] [ index ] = value then
44054: LD_VAR 0 1
44058: PUSH
44059: LD_VAR 0 6
44063: ARRAY
44064: PUSH
44065: LD_VAR 0 2
44069: ARRAY
44070: PUSH
44071: LD_VAR 0 3
44075: EQUAL
44076: IFFALSE 44144
// begin if indexColumn then
44078: LD_VAR 0 4
44082: IFFALSE 44118
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44084: LD_ADDR_VAR 0 5
44088: PUSH
44089: LD_VAR 0 5
44093: PPUSH
44094: LD_VAR 0 1
44098: PUSH
44099: LD_VAR 0 6
44103: ARRAY
44104: PUSH
44105: LD_VAR 0 4
44109: ARRAY
44110: PPUSH
44111: CALL 39156 0 2
44115: ST_TO_ADDR
44116: GO 44144
// result := Join ( result , array [ i ] ) ;
44118: LD_ADDR_VAR 0 5
44122: PUSH
44123: LD_VAR 0 5
44127: PPUSH
44128: LD_VAR 0 1
44132: PUSH
44133: LD_VAR 0 6
44137: ARRAY
44138: PPUSH
44139: CALL 39156 0 2
44143: ST_TO_ADDR
// end ;
44144: GO 44051
44146: POP
44147: POP
// end ;
44148: LD_VAR 0 5
44152: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44153: LD_INT 0
44155: PPUSH
// if not vehicles or not parkingPoint then
44156: LD_VAR 0 1
44160: NOT
44161: IFTRUE 44170
44163: PUSH
44164: LD_VAR 0 2
44168: NOT
44169: OR
44170: IFFALSE 44174
// exit ;
44172: GO 44272
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44174: LD_ADDR_VAR 0 1
44178: PUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: LD_INT 50
44186: PUSH
44187: EMPTY
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: LD_INT 92
44195: PUSH
44196: LD_VAR 0 2
44200: PUSH
44201: LD_INT 1
44203: ARRAY
44204: PUSH
44205: LD_VAR 0 2
44209: PUSH
44210: LD_INT 2
44212: ARRAY
44213: PUSH
44214: LD_INT 8
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PPUSH
44231: CALL_OW 72
44235: ST_TO_ADDR
// if not vehicles then
44236: LD_VAR 0 1
44240: NOT
44241: IFFALSE 44245
// exit ;
44243: GO 44272
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44245: LD_VAR 0 1
44249: PPUSH
44250: LD_VAR 0 2
44254: PUSH
44255: LD_INT 1
44257: ARRAY
44258: PPUSH
44259: LD_VAR 0 2
44263: PUSH
44264: LD_INT 2
44266: ARRAY
44267: PPUSH
44268: CALL_OW 111
// end ;
44272: LD_VAR 0 3
44276: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44277: LD_INT 0
44279: PPUSH
44280: PPUSH
44281: PPUSH
// if not side or not area then
44282: LD_VAR 0 1
44286: NOT
44287: IFTRUE 44296
44289: PUSH
44290: LD_VAR 0 2
44294: NOT
44295: OR
44296: IFFALSE 44300
// exit ;
44298: GO 44419
// tmp := AreaToList ( area , 0 ) ;
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: LD_INT 0
44312: PPUSH
44313: CALL_OW 517
44317: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44318: LD_ADDR_VAR 0 4
44322: PUSH
44323: DOUBLE
44324: LD_INT 1
44326: DEC
44327: ST_TO_ADDR
44328: LD_VAR 0 5
44332: PUSH
44333: LD_INT 1
44335: ARRAY
44336: PUSH
44337: FOR_TO
44338: IFFALSE 44417
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44340: LD_VAR 0 5
44344: PUSH
44345: LD_INT 1
44347: ARRAY
44348: PUSH
44349: LD_VAR 0 4
44353: ARRAY
44354: PPUSH
44355: LD_VAR 0 5
44359: PUSH
44360: LD_INT 2
44362: ARRAY
44363: PUSH
44364: LD_VAR 0 4
44368: ARRAY
44369: PPUSH
44370: CALL_OW 351
44374: IFFALSE 44415
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44376: LD_VAR 0 5
44380: PUSH
44381: LD_INT 1
44383: ARRAY
44384: PUSH
44385: LD_VAR 0 4
44389: ARRAY
44390: PPUSH
44391: LD_VAR 0 5
44395: PUSH
44396: LD_INT 2
44398: ARRAY
44399: PUSH
44400: LD_VAR 0 4
44404: ARRAY
44405: PPUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 244
// end ;
44415: GO 44337
44417: POP
44418: POP
// end ;
44419: LD_VAR 0 3
44423: RET
// export function UniqueArray ( array ) ; var i ; begin
44424: LD_INT 0
44426: PPUSH
44427: PPUSH
// result := [ ] ;
44428: LD_ADDR_VAR 0 2
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// if not array then
44435: LD_VAR 0 1
44439: NOT
44440: IFFALSE 44444
// exit ;
44442: GO 44505
// for i := 1 to array do
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: DOUBLE
44450: LD_INT 1
44452: DEC
44453: ST_TO_ADDR
44454: LD_VAR 0 1
44458: PUSH
44459: FOR_TO
44460: IFFALSE 44503
// if not array [ i ] in result then
44462: LD_VAR 0 1
44466: PUSH
44467: LD_VAR 0 3
44471: ARRAY
44472: PUSH
44473: LD_VAR 0 2
44477: IN
44478: NOT
44479: IFFALSE 44501
// result := Join ( result , i ) ;
44481: LD_ADDR_VAR 0 2
44485: PUSH
44486: LD_VAR 0 2
44490: PPUSH
44491: LD_VAR 0 3
44495: PPUSH
44496: CALL 39156 0 2
44500: ST_TO_ADDR
44501: GO 44459
44503: POP
44504: POP
// end ;
44505: LD_VAR 0 2
44509: RET
