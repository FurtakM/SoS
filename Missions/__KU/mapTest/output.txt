// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// uc_side := 3 ;
   9: LD_ADDR_OWVAR 20
  13: PUSH
  14: LD_INT 3
  16: ST_TO_ADDR
// uc_nation := nation_russian ;
  17: LD_ADDR_OWVAR 21
  21: PUSH
  22: LD_INT 3
  24: ST_TO_ADDR
// ruForces := [ ] ;
  25: LD_ADDR_EXP 1
  29: PUSH
  30: EMPTY
  31: ST_TO_ADDR
// ruForces2 := [ ] ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// ruMech := [ ] ;
  39: LD_ADDR_EXP 5
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// ruMech2 := [ ] ;
  46: LD_ADDR_EXP 6
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
  53: LD_ADDR_EXP 7
  57: PUSH
  58: LD_INT 37
  60: PUSH
  61: LD_INT 63
  63: PUSH
  64: LD_INT 52
  66: PUSH
  67: LD_INT 54
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: LIST
  75: ST_TO_ADDR
// ruBaseArea := 0 ;
  76: LD_ADDR_EXP 8
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// ruBaseArea2 := 0 ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// ruBase := 0 ;
  92: LD_ADDR_EXP 10
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// ruBase2 := 0 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// ruConstructList := [ ] ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: EMPTY
 114: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
 115: LD_ADDR_EXP 13
 119: PUSH
 120: LD_INT 22
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 1
 128: PUSH
 129: LD_INT 43
 131: PUSH
 132: LD_INT 44
 134: PUSH
 135: LD_INT 45
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 3
 148: PPUSH
 149: CALL_OW 12
 153: ARRAY
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 3
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: LD_INT 43
 172: PUSH
 173: LD_INT 44
 175: PUSH
 176: LD_INT 45
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 1
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 12
 194: ARRAY
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 43
 213: PUSH
 214: LD_INT 44
 216: PUSH
 217: LD_INT 45
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 1
 227: PPUSH
 228: LD_INT 3
 230: PPUSH
 231: CALL_OW 12
 235: ARRAY
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// ruCratesArea := 0 ;
 248: LD_ADDR_EXP 14
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// ruCratesArea2 := 0 ;
 256: LD_ADDR_EXP 15
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// ruHealPoint := [ ] ;
 264: LD_ADDR_EXP 16
 268: PUSH
 269: EMPTY
 270: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
 271: LD_ADDR_EXP 17
 275: PUSH
 276: EMPTY
 277: ST_TO_ADDR
// ruBuildings := [ ] ;
 278: LD_ADDR_EXP 18
 282: PUSH
 283: EMPTY
 284: ST_TO_ADDR
// ruBuildings2 := [ ] ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: EMPTY
 291: ST_TO_ADDR
// ruTanks := [ ] ;
 292: LD_ADDR_EXP 21
 296: PUSH
 297: EMPTY
 298: ST_TO_ADDR
// ruTanks2 := [ ] ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// ruParkingArea := 0 ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruParkingArea2 := 0 ;
 314: LD_ADDR_EXP 25
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_INT 2
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 4
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: PUSH
 356: FOR_TO
 357: IFFALSE 417
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
 359: LD_ADDR_EXP 12
 363: PUSH
 364: LD_EXP 12
 368: PPUSH
 369: LD_INT 22
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: LD_INT 43
 380: PUSH
 381: LD_INT 44
 383: PUSH
 384: LD_INT 45
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 1
 394: PPUSH
 395: LD_INT 3
 397: PPUSH
 398: CALL_OW 12
 402: ARRAY
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL 39007 0 2
 414: ST_TO_ADDR
 415: GO 356
 417: POP
 418: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
 419: LD_ADDR_VAR 0 7
 423: PUSH
 424: LD_INT 43
 426: PUSH
 427: LD_INT 68
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 43
 436: PUSH
 437: LD_INT 79
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 99
 446: PUSH
 447: LD_INT 114
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 103
 456: PUSH
 457: LD_INT 114
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 156
 466: PUSH
 467: LD_INT 92
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 152
 476: PUSH
 477: LD_INT 85
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: ST_TO_ADDR
// for i in sources do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: LD_VAR 0 7
 501: PUSH
 502: FOR_IN
 503: IFFALSE 532
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
 505: LD_VAR 0 2
 509: PUSH
 510: LD_INT 1
 512: ARRAY
 513: PPUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_INT 2
 521: ARRAY
 522: PPUSH
 523: LD_INT 3
 525: PPUSH
 526: CALL_OW 441
 530: GO 502
 532: POP
 533: POP
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 534: LD_ADDR_VAR 0 6
 538: PUSH
 539: LD_INT 5
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: LD_INT 8
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
 563: LD_ADDR_EXP 3
 567: PUSH
 568: LD_STRING Tsaritsyn
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_STRING 
 576: PPUSH
 577: CALL 875 0 3
 581: ST_TO_ADDR
// c := 0 ;
 582: LD_ADDR_VAR 0 5
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// for i := 1 to 4 do
 590: LD_ADDR_VAR 0 2
 594: PUSH
 595: DOUBLE
 596: LD_INT 1
 598: DEC
 599: ST_TO_ADDR
 600: LD_INT 4
 602: PUSH
 603: FOR_TO
 604: IFFALSE 851
// begin debug_strings := i ;
 606: LD_ADDR_OWVAR 48
 610: PUSH
 611: LD_VAR 0 2
 615: ST_TO_ADDR
// exit ;
 616: POP
 617: POP
 618: GO 853
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: DOUBLE
 626: LD_INT 1
 628: DEC
 629: ST_TO_ADDR
 630: LD_INT 5
 632: PUSH
 633: LD_INT 6
 635: PUSH
 636: LD_INT 8
 638: PUSH
 639: LD_INT 9
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 4
 659: PUSH
 660: LD_INT 5
 662: PUSH
 663: LD_INT 6
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PUSH
 672: LD_OWVAR 67
 676: ARRAY
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 4
 683: PUSH
 684: LD_INT 5
 686: PUSH
 687: LD_INT 6
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: PUSH
 696: LD_OWVAR 67
 700: ARRAY
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: LD_INT 3
 710: PUSH
 711: LD_INT 3
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_OWVAR 67
 724: ARRAY
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_VAR 0 2
 736: ARRAY
 737: PUSH
 738: FOR_TO
 739: IFFALSE 847
// begin c := Inc ( c ) ;
 741: LD_ADDR_VAR 0 5
 745: PUSH
 746: LD_VAR 0 5
 750: PPUSH
 751: CALL 40380 0 1
 755: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
 756: LD_INT 0
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_VAR 0 6
 768: PPUSH
 769: CALL_OW 380
// un := CreateHuman ;
 773: LD_ADDR_VAR 0 4
 777: PUSH
 778: CALL_OW 44
 782: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
 783: LD_ADDR_EXP 1
 787: PUSH
 788: LD_EXP 1
 792: PPUSH
 793: LD_VAR 0 4
 797: PPUSH
 798: CALL 39007 0 2
 802: ST_TO_ADDR
// if i = 3 then
 803: LD_VAR 0 2
 807: PUSH
 808: LD_INT 3
 810: EQUAL
 811: IFFALSE 845
// begin ruMech := Join ( ruMech , un ) ;
 813: LD_ADDR_EXP 5
 817: PUSH
 818: LD_EXP 5
 822: PPUSH
 823: LD_VAR 0 4
 827: PPUSH
 828: CALL 39007 0 2
 832: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
 833: LD_VAR 0 4
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL_OW 336
// end ; end ;
 845: GO 738
 847: POP
 848: POP
// end ;
 849: GO 603
 851: POP
 852: POP
// end ;
 853: LD_VAR 0 1
 857: RET
// starting begin ResetFog ;
 858: CALL_OW 335
// Difficulty := 3 ;
 862: LD_ADDR_OWVAR 67
 866: PUSH
 867: LD_INT 3
 869: ST_TO_ADDR
// PrepareRussian ;
 870: CALL 0 0 0
// end ; end_of_file
 874: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 875: LD_INT 0
 877: PPUSH
 878: PPUSH
// if exist_mode then
 879: LD_VAR 0 2
 883: IFFALSE 929
// begin unit := CreateCharacter ( prefix & ident ) ;
 885: LD_ADDR_VAR 0 5
 889: PUSH
 890: LD_VAR 0 3
 894: PUSH
 895: LD_VAR 0 1
 899: STR
 900: PPUSH
 901: CALL_OW 34
 905: ST_TO_ADDR
// if unit then
 906: LD_VAR 0 5
 910: IFFALSE 927
// DeleteCharacters ( prefix & ident ) ;
 912: LD_VAR 0 3
 916: PUSH
 917: LD_VAR 0 1
 921: STR
 922: PPUSH
 923: CALL_OW 40
// end else
 927: GO 944
// unit := NewCharacter ( ident ) ;
 929: LD_ADDR_VAR 0 5
 933: PUSH
 934: LD_VAR 0 1
 938: PPUSH
 939: CALL_OW 25
 943: ST_TO_ADDR
// result := unit ;
 944: LD_ADDR_VAR 0 4
 948: PUSH
 949: LD_VAR 0 5
 953: ST_TO_ADDR
// end ;
 954: LD_VAR 0 4
 958: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 959: LD_INT 0
 961: PPUSH
 962: PPUSH
// if exist_mode then
 963: LD_VAR 0 2
 967: IFFALSE 992
// unit := CreateCharacter ( prefix & ident ) else
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_VAR 0 3
 978: PUSH
 979: LD_VAR 0 1
 983: STR
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
 990: GO 1007
// unit := NewCharacter ( ident ) ;
 992: LD_ADDR_VAR 0 5
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 25
1006: ST_TO_ADDR
// result := unit ;
1007: LD_ADDR_VAR 0 4
1011: PUSH
1012: LD_VAR 0 5
1016: ST_TO_ADDR
// end ;
1017: LD_VAR 0 4
1021: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1022: LD_INT 0
1024: PPUSH
1025: PPUSH
// if not side or not nation then
1026: LD_VAR 0 1
1030: NOT
1031: IFTRUE 1040
1033: PUSH
1034: LD_VAR 0 2
1038: NOT
1039: OR
1040: IFFALSE 1044
// exit ;
1042: GO 1814
// case nation of nation_american :
1044: LD_VAR 0 2
1048: PUSH
1049: LD_INT 1
1051: DOUBLE
1052: EQUAL
1053: IFTRUE 1057
1055: GO 1271
1057: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_INT 35
1065: PUSH
1066: LD_INT 45
1068: PUSH
1069: LD_INT 46
1071: PUSH
1072: LD_INT 47
1074: PUSH
1075: LD_INT 82
1077: PUSH
1078: LD_INT 83
1080: PUSH
1081: LD_INT 84
1083: PUSH
1084: LD_INT 85
1086: PUSH
1087: LD_INT 86
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 2
1095: PUSH
1096: LD_INT 6
1098: PUSH
1099: LD_INT 15
1101: PUSH
1102: LD_INT 16
1104: PUSH
1105: LD_INT 7
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 13
1113: PUSH
1114: LD_INT 10
1116: PUSH
1117: LD_INT 14
1119: PUSH
1120: LD_INT 20
1122: PUSH
1123: LD_INT 21
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 25
1131: PUSH
1132: LD_INT 32
1134: PUSH
1135: LD_INT 27
1137: PUSH
1138: LD_INT 36
1140: PUSH
1141: LD_INT 69
1143: PUSH
1144: LD_INT 39
1146: PUSH
1147: LD_INT 34
1149: PUSH
1150: LD_INT 40
1152: PUSH
1153: LD_INT 48
1155: PUSH
1156: LD_INT 49
1158: PUSH
1159: LD_INT 50
1161: PUSH
1162: LD_INT 51
1164: PUSH
1165: LD_INT 52
1167: PUSH
1168: LD_INT 53
1170: PUSH
1171: LD_INT 54
1173: PUSH
1174: LD_INT 55
1176: PUSH
1177: LD_INT 56
1179: PUSH
1180: LD_INT 57
1182: PUSH
1183: LD_INT 58
1185: PUSH
1186: LD_INT 59
1188: PUSH
1189: LD_INT 60
1191: PUSH
1192: LD_INT 61
1194: PUSH
1195: LD_INT 62
1197: PUSH
1198: LD_INT 80
1200: PUSH
1201: LD_INT 82
1203: PUSH
1204: LD_INT 83
1206: PUSH
1207: LD_INT 84
1209: PUSH
1210: LD_INT 85
1212: PUSH
1213: LD_INT 86
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: ST_TO_ADDR
1269: GO 1736
1271: LD_INT 2
1273: DOUBLE
1274: EQUAL
1275: IFTRUE 1279
1277: GO 1505
1279: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1280: LD_ADDR_VAR 0 4
1284: PUSH
1285: LD_INT 35
1287: PUSH
1288: LD_INT 45
1290: PUSH
1291: LD_INT 46
1293: PUSH
1294: LD_INT 47
1296: PUSH
1297: LD_INT 82
1299: PUSH
1300: LD_INT 83
1302: PUSH
1303: LD_INT 84
1305: PUSH
1306: LD_INT 85
1308: PUSH
1309: LD_INT 87
1311: PUSH
1312: LD_INT 70
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 11
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 4
1326: PUSH
1327: LD_INT 5
1329: PUSH
1330: LD_INT 6
1332: PUSH
1333: LD_INT 15
1335: PUSH
1336: LD_INT 18
1338: PUSH
1339: LD_INT 7
1341: PUSH
1342: LD_INT 17
1344: PUSH
1345: LD_INT 8
1347: PUSH
1348: LD_INT 20
1350: PUSH
1351: LD_INT 21
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_INT 72
1359: PUSH
1360: LD_INT 26
1362: PUSH
1363: LD_INT 69
1365: PUSH
1366: LD_INT 39
1368: PUSH
1369: LD_INT 40
1371: PUSH
1372: LD_INT 41
1374: PUSH
1375: LD_INT 42
1377: PUSH
1378: LD_INT 43
1380: PUSH
1381: LD_INT 48
1383: PUSH
1384: LD_INT 49
1386: PUSH
1387: LD_INT 50
1389: PUSH
1390: LD_INT 51
1392: PUSH
1393: LD_INT 52
1395: PUSH
1396: LD_INT 53
1398: PUSH
1399: LD_INT 54
1401: PUSH
1402: LD_INT 55
1404: PUSH
1405: LD_INT 56
1407: PUSH
1408: LD_INT 60
1410: PUSH
1411: LD_INT 61
1413: PUSH
1414: LD_INT 62
1416: PUSH
1417: LD_INT 66
1419: PUSH
1420: LD_INT 67
1422: PUSH
1423: LD_INT 68
1425: PUSH
1426: LD_INT 81
1428: PUSH
1429: LD_INT 82
1431: PUSH
1432: LD_INT 83
1434: PUSH
1435: LD_INT 84
1437: PUSH
1438: LD_INT 85
1440: PUSH
1441: LD_INT 87
1443: PUSH
1444: LD_INT 88
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: ST_TO_ADDR
1503: GO 1736
1505: LD_INT 3
1507: DOUBLE
1508: EQUAL
1509: IFTRUE 1513
1511: GO 1735
1513: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_INT 46
1521: PUSH
1522: LD_INT 47
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: LD_INT 82
1533: PUSH
1534: LD_INT 83
1536: PUSH
1537: LD_INT 84
1539: PUSH
1540: LD_INT 85
1542: PUSH
1543: LD_INT 86
1545: PUSH
1546: LD_INT 11
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: LD_INT 20
1554: PUSH
1555: LD_INT 19
1557: PUSH
1558: LD_INT 21
1560: PUSH
1561: LD_INT 24
1563: PUSH
1564: LD_INT 22
1566: PUSH
1567: LD_INT 25
1569: PUSH
1570: LD_INT 28
1572: PUSH
1573: LD_INT 29
1575: PUSH
1576: LD_INT 30
1578: PUSH
1579: LD_INT 31
1581: PUSH
1582: LD_INT 37
1584: PUSH
1585: LD_INT 38
1587: PUSH
1588: LD_INT 32
1590: PUSH
1591: LD_INT 27
1593: PUSH
1594: LD_INT 33
1596: PUSH
1597: LD_INT 69
1599: PUSH
1600: LD_INT 39
1602: PUSH
1603: LD_INT 34
1605: PUSH
1606: LD_INT 40
1608: PUSH
1609: LD_INT 71
1611: PUSH
1612: LD_INT 23
1614: PUSH
1615: LD_INT 44
1617: PUSH
1618: LD_INT 48
1620: PUSH
1621: LD_INT 49
1623: PUSH
1624: LD_INT 50
1626: PUSH
1627: LD_INT 51
1629: PUSH
1630: LD_INT 52
1632: PUSH
1633: LD_INT 53
1635: PUSH
1636: LD_INT 54
1638: PUSH
1639: LD_INT 55
1641: PUSH
1642: LD_INT 56
1644: PUSH
1645: LD_INT 57
1647: PUSH
1648: LD_INT 58
1650: PUSH
1651: LD_INT 59
1653: PUSH
1654: LD_INT 63
1656: PUSH
1657: LD_INT 64
1659: PUSH
1660: LD_INT 65
1662: PUSH
1663: LD_INT 82
1665: PUSH
1666: LD_INT 83
1668: PUSH
1669: LD_INT 84
1671: PUSH
1672: LD_INT 85
1674: PUSH
1675: LD_INT 86
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: ST_TO_ADDR
1733: GO 1736
1735: POP
// if state > - 1 and state < 3 then
1736: LD_VAR 0 3
1740: PUSH
1741: LD_INT 1
1743: NEG
1744: GREATER
1745: IFFALSE 1757
1747: PUSH
1748: LD_VAR 0 3
1752: PUSH
1753: LD_INT 3
1755: LESS
1756: AND
1757: IFFALSE 1814
// for i in result do
1759: LD_ADDR_VAR 0 5
1763: PUSH
1764: LD_VAR 0 4
1768: PUSH
1769: FOR_IN
1770: IFFALSE 1812
// if GetTech ( i , side ) <> state then
1772: LD_VAR 0 5
1776: PPUSH
1777: LD_VAR 0 1
1781: PPUSH
1782: CALL_OW 321
1786: PUSH
1787: LD_VAR 0 3
1791: NONEQUAL
1792: IFFALSE 1810
// result := result diff i ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: LD_VAR 0 4
1803: PUSH
1804: LD_VAR 0 5
1808: DIFF
1809: ST_TO_ADDR
1810: GO 1769
1812: POP
1813: POP
// end ;
1814: LD_VAR 0 4
1818: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1819: LD_INT 0
1821: PPUSH
1822: PPUSH
1823: PPUSH
// result := true ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: LD_INT 1
1831: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: LD_VAR 0 2
1841: PPUSH
1842: CALL_OW 480
1846: ST_TO_ADDR
// if not tmp then
1847: LD_VAR 0 5
1851: NOT
1852: IFFALSE 1856
// exit ;
1854: GO 1905
// for i in tmp do
1856: LD_ADDR_VAR 0 4
1860: PUSH
1861: LD_VAR 0 5
1865: PUSH
1866: FOR_IN
1867: IFFALSE 1903
// if GetTech ( i , side ) <> state_researched then
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_VAR 0 1
1878: PPUSH
1879: CALL_OW 321
1883: PUSH
1884: LD_INT 2
1886: NONEQUAL
1887: IFFALSE 1901
// begin result := false ;
1889: LD_ADDR_VAR 0 3
1893: PUSH
1894: LD_INT 0
1896: ST_TO_ADDR
// exit ;
1897: POP
1898: POP
1899: GO 1905
// end ;
1901: GO 1866
1903: POP
1904: POP
// end ;
1905: LD_VAR 0 3
1909: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1925: LD_VAR 0 1
1929: NOT
1930: IFTRUE 1947
1932: PUSH
1933: LD_VAR 0 1
1937: PPUSH
1938: CALL_OW 257
1942: PUSH
1943: LD_INT 9
1945: NONEQUAL
1946: OR
1947: IFFALSE 1951
// exit ;
1949: GO 2530
// side := GetSide ( unit ) ;
1951: LD_ADDR_VAR 0 9
1955: PUSH
1956: LD_VAR 0 1
1960: PPUSH
1961: CALL_OW 255
1965: ST_TO_ADDR
// tech_space := tech_spacanom ;
1966: LD_ADDR_VAR 0 12
1970: PUSH
1971: LD_INT 29
1973: ST_TO_ADDR
// tech_time := tech_taurad ;
1974: LD_ADDR_VAR 0 13
1978: PUSH
1979: LD_INT 28
1981: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1982: LD_ADDR_VAR 0 11
1986: PUSH
1987: LD_VAR 0 1
1991: PPUSH
1992: CALL_OW 310
1996: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1997: LD_VAR 0 11
2001: PPUSH
2002: CALL_OW 247
2006: PUSH
2007: LD_INT 2
2009: EQUAL
2010: IFFALSE 2014
// exit ;
2012: GO 2530
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2014: LD_ADDR_VAR 0 8
2018: PUSH
2019: LD_INT 81
2021: PUSH
2022: LD_VAR 0 9
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 3
2033: PUSH
2034: LD_INT 21
2036: PUSH
2037: LD_INT 3
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PPUSH
2052: CALL_OW 69
2056: ST_TO_ADDR
// if not tmp then
2057: LD_VAR 0 8
2061: NOT
2062: IFFALSE 2066
// exit ;
2064: GO 2530
// if in_unit then
2066: LD_VAR 0 11
2070: IFFALSE 2094
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2072: LD_ADDR_VAR 0 10
2076: PUSH
2077: LD_VAR 0 8
2081: PPUSH
2082: LD_VAR 0 11
2086: PPUSH
2087: CALL_OW 74
2091: ST_TO_ADDR
2092: GO 2114
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2094: LD_ADDR_VAR 0 10
2098: PUSH
2099: LD_VAR 0 8
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: CALL_OW 74
2113: ST_TO_ADDR
// if not enemy then
2114: LD_VAR 0 10
2118: NOT
2119: IFFALSE 2123
// exit ;
2121: GO 2530
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2123: LD_VAR 0 11
2127: IFFALSE 2149
2129: PUSH
2130: LD_VAR 0 11
2134: PPUSH
2135: LD_VAR 0 10
2139: PPUSH
2140: CALL_OW 296
2144: PUSH
2145: LD_INT 13
2147: GREATER
2148: AND
2149: IFTRUE 2171
2151: PUSH
2152: LD_VAR 0 1
2156: PPUSH
2157: LD_VAR 0 10
2161: PPUSH
2162: CALL_OW 296
2166: PUSH
2167: LD_INT 12
2169: GREATER
2170: OR
2171: IFFALSE 2175
// exit ;
2173: GO 2530
// missile := [ 1 ] ;
2175: LD_ADDR_VAR 0 14
2179: PUSH
2180: LD_INT 1
2182: PUSH
2183: EMPTY
2184: LIST
2185: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2186: LD_VAR 0 9
2190: PPUSH
2191: LD_VAR 0 12
2195: PPUSH
2196: CALL_OW 325
2200: IFFALSE 2229
// missile := Replace ( missile , missile + 1 , 2 ) ;
2202: LD_ADDR_VAR 0 14
2206: PUSH
2207: LD_VAR 0 14
2211: PPUSH
2212: LD_VAR 0 14
2216: PUSH
2217: LD_INT 1
2219: PLUS
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: CALL_OW 1
2228: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2229: LD_VAR 0 9
2233: PPUSH
2234: LD_VAR 0 13
2238: PPUSH
2239: CALL_OW 325
2243: IFFALSE 2267
2245: PUSH
2246: LD_VAR 0 10
2250: PPUSH
2251: CALL_OW 255
2255: PPUSH
2256: LD_VAR 0 13
2260: PPUSH
2261: CALL_OW 325
2265: NOT
2266: AND
2267: IFFALSE 2296
// missile := Replace ( missile , missile + 1 , 3 ) ;
2269: LD_ADDR_VAR 0 14
2273: PUSH
2274: LD_VAR 0 14
2278: PPUSH
2279: LD_VAR 0 14
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL_OW 1
2295: ST_TO_ADDR
// if missile < 2 then
2296: LD_VAR 0 14
2300: PUSH
2301: LD_INT 2
2303: LESS
2304: IFFALSE 2308
// exit ;
2306: GO 2530
// x := GetX ( enemy ) ;
2308: LD_ADDR_VAR 0 4
2312: PUSH
2313: LD_VAR 0 10
2317: PPUSH
2318: CALL_OW 250
2322: ST_TO_ADDR
// y := GetY ( enemy ) ;
2323: LD_ADDR_VAR 0 5
2327: PUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 251
2337: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2338: LD_ADDR_VAR 0 6
2342: PUSH
2343: LD_VAR 0 4
2347: PUSH
2348: LD_INT 1
2350: NEG
2351: PPUSH
2352: LD_INT 1
2354: PPUSH
2355: CALL_OW 12
2359: PLUS
2360: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2361: LD_ADDR_VAR 0 7
2365: PUSH
2366: LD_VAR 0 5
2370: PUSH
2371: LD_INT 1
2373: NEG
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL_OW 12
2382: PLUS
2383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2384: LD_VAR 0 6
2388: PPUSH
2389: LD_VAR 0 7
2393: PPUSH
2394: CALL_OW 488
2398: NOT
2399: IFFALSE 2421
// begin _x := x ;
2401: LD_ADDR_VAR 0 6
2405: PUSH
2406: LD_VAR 0 4
2410: ST_TO_ADDR
// _y := y ;
2411: LD_ADDR_VAR 0 7
2415: PUSH
2416: LD_VAR 0 5
2420: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2421: LD_ADDR_VAR 0 3
2425: PUSH
2426: LD_INT 1
2428: PPUSH
2429: LD_VAR 0 14
2433: PPUSH
2434: CALL_OW 12
2438: ST_TO_ADDR
// case i of 1 :
2439: LD_VAR 0 3
2443: PUSH
2444: LD_INT 1
2446: DOUBLE
2447: EQUAL
2448: IFTRUE 2452
2450: GO 2469
2452: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2453: LD_VAR 0 1
2457: PPUSH
2458: LD_VAR 0 10
2462: PPUSH
2463: CALL_OW 115
2467: GO 2530
2469: LD_INT 2
2471: DOUBLE
2472: EQUAL
2473: IFTRUE 2477
2475: GO 2499
2477: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2478: LD_VAR 0 1
2482: PPUSH
2483: LD_VAR 0 6
2487: PPUSH
2488: LD_VAR 0 7
2492: PPUSH
2493: CALL_OW 153
2497: GO 2530
2499: LD_INT 3
2501: DOUBLE
2502: EQUAL
2503: IFTRUE 2507
2505: GO 2529
2507: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2508: LD_VAR 0 1
2512: PPUSH
2513: LD_VAR 0 6
2517: PPUSH
2518: LD_VAR 0 7
2522: PPUSH
2523: CALL_OW 154
2527: GO 2530
2529: POP
// end ;
2530: LD_VAR 0 2
2534: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// if not unit or not building then
2543: LD_VAR 0 1
2547: NOT
2548: IFTRUE 2557
2550: PUSH
2551: LD_VAR 0 2
2555: NOT
2556: OR
2557: IFFALSE 2561
// exit ;
2559: GO 2719
// x := GetX ( building ) ;
2561: LD_ADDR_VAR 0 5
2565: PUSH
2566: LD_VAR 0 2
2570: PPUSH
2571: CALL_OW 250
2575: ST_TO_ADDR
// y := GetY ( building ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_VAR 0 2
2585: PPUSH
2586: CALL_OW 251
2590: ST_TO_ADDR
// for i := 0 to 5 do
2591: LD_ADDR_VAR 0 4
2595: PUSH
2596: DOUBLE
2597: LD_INT 0
2599: DEC
2600: ST_TO_ADDR
2601: LD_INT 5
2603: PUSH
2604: FOR_TO
2605: IFFALSE 2717
// begin _x := ShiftX ( x , i , 3 ) ;
2607: LD_ADDR_VAR 0 7
2611: PUSH
2612: LD_VAR 0 5
2616: PPUSH
2617: LD_VAR 0 4
2621: PPUSH
2622: LD_INT 3
2624: PPUSH
2625: CALL_OW 272
2629: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2630: LD_ADDR_VAR 0 8
2634: PUSH
2635: LD_VAR 0 6
2639: PPUSH
2640: LD_VAR 0 4
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: CALL_OW 273
2652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2653: LD_VAR 0 7
2657: PPUSH
2658: LD_VAR 0 8
2662: PPUSH
2663: CALL_OW 488
2667: NOT
2668: IFFALSE 2672
// continue ;
2670: GO 2604
// if HexInfo ( _x , _y ) = 0 then
2672: LD_VAR 0 7
2676: PPUSH
2677: LD_VAR 0 8
2681: PPUSH
2682: CALL_OW 428
2686: PUSH
2687: LD_INT 0
2689: EQUAL
2690: IFFALSE 2715
// begin ComMoveXY ( unit , _x , _y ) ;
2692: LD_VAR 0 1
2696: PPUSH
2697: LD_VAR 0 7
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 111
// exit ;
2711: POP
2712: POP
2713: GO 2719
// end ; end ;
2715: GO 2604
2717: POP
2718: POP
// end ;
2719: LD_VAR 0 3
2723: RET
// export function ScanBase ( side , base_area ) ; begin
2724: LD_INT 0
2726: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: LD_VAR 0 2
2736: PPUSH
2737: LD_INT 81
2739: PUSH
2740: LD_VAR 0 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 70
2753: ST_TO_ADDR
// end ;
2754: LD_VAR 0 3
2758: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2759: LD_INT 0
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
// result := false ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 0
2772: ST_TO_ADDR
// side := GetSide ( unit ) ;
2773: LD_ADDR_VAR 0 3
2777: PUSH
2778: LD_VAR 0 1
2782: PPUSH
2783: CALL_OW 255
2787: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2788: LD_ADDR_VAR 0 4
2792: PUSH
2793: LD_VAR 0 1
2797: PPUSH
2798: CALL_OW 248
2802: ST_TO_ADDR
// case nat of 1 :
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 1
2810: DOUBLE
2811: EQUAL
2812: IFTRUE 2816
2814: GO 2827
2816: POP
// tech := tech_lassight ; 2 :
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 12
2824: ST_TO_ADDR
2825: GO 2866
2827: LD_INT 2
2829: DOUBLE
2830: EQUAL
2831: IFTRUE 2835
2833: GO 2846
2835: POP
// tech := tech_mortar ; 3 :
2836: LD_ADDR_VAR 0 5
2840: PUSH
2841: LD_INT 41
2843: ST_TO_ADDR
2844: GO 2866
2846: LD_INT 3
2848: DOUBLE
2849: EQUAL
2850: IFTRUE 2854
2852: GO 2865
2854: POP
// tech := tech_bazooka ; end ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_INT 44
2862: ST_TO_ADDR
2863: GO 2866
2865: POP
// if Researched ( side , tech ) then
2866: LD_VAR 0 3
2870: PPUSH
2871: LD_VAR 0 5
2875: PPUSH
2876: CALL_OW 325
2880: IFFALSE 2907
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2882: LD_ADDR_VAR 0 2
2886: PUSH
2887: LD_INT 5
2889: PUSH
2890: LD_INT 8
2892: PUSH
2893: LD_INT 9
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_VAR 0 4
2905: ARRAY
2906: ST_TO_ADDR
// end ;
2907: LD_VAR 0 2
2911: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2912: LD_INT 0
2914: PPUSH
2915: PPUSH
2916: PPUSH
// if not mines then
2917: LD_VAR 0 2
2921: NOT
2922: IFFALSE 2926
// exit ;
2924: GO 3070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2926: LD_ADDR_VAR 0 5
2930: PUSH
2931: LD_INT 81
2933: PUSH
2934: LD_VAR 0 1
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 3
2945: PUSH
2946: LD_INT 21
2948: PUSH
2949: LD_INT 3
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PPUSH
2964: CALL_OW 69
2968: ST_TO_ADDR
// for i in mines do
2969: LD_ADDR_VAR 0 4
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3068
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2982: LD_VAR 0 4
2986: PUSH
2987: LD_INT 1
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 4
2995: PUSH
2996: LD_INT 2
2998: ARRAY
2999: PPUSH
3000: CALL_OW 458
3004: NOT
3005: IFFALSE 3009
// continue ;
3007: GO 2979
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3009: LD_VAR 0 4
3013: PUSH
3014: LD_INT 1
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 4
3022: PUSH
3023: LD_INT 2
3025: ARRAY
3026: PPUSH
3027: CALL_OW 428
3031: PUSH
3032: LD_VAR 0 5
3036: IN
3037: IFFALSE 3066
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3039: LD_VAR 0 4
3043: PUSH
3044: LD_INT 1
3046: ARRAY
3047: PPUSH
3048: LD_VAR 0 4
3052: PUSH
3053: LD_INT 2
3055: ARRAY
3056: PPUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: CALL_OW 456
// end ;
3066: GO 2979
3068: POP
3069: POP
// end ;
3070: LD_VAR 0 3
3074: RET
// export function Count ( array ) ; begin
3075: LD_INT 0
3077: PPUSH
// result := array + 0 ;
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_VAR 0 1
3087: PUSH
3088: LD_INT 0
3090: PLUS
3091: ST_TO_ADDR
// end ;
3092: LD_VAR 0 2
3096: RET
// export function IsEmpty ( building ) ; begin
3097: LD_INT 0
3099: PPUSH
// if not building then
3100: LD_VAR 0 1
3104: NOT
3105: IFFALSE 3109
// exit ;
3107: GO 3152
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_VAR 0 1
3118: PUSH
3119: LD_INT 22
3121: PUSH
3122: LD_VAR 0 1
3126: PPUSH
3127: CALL_OW 255
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 58
3138: PUSH
3139: EMPTY
3140: LIST
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: IN
3151: ST_TO_ADDR
// end ;
3152: LD_VAR 0 2
3156: RET
// export function IsNotFull ( building ) ; var places ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
// if not building then
3161: LD_VAR 0 1
3165: NOT
3166: IFFALSE 3170
// exit ;
3168: GO 3198
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_VAR 0 1
3179: PPUSH
3180: LD_INT 3
3182: PUSH
3183: LD_INT 62
3185: PUSH
3186: EMPTY
3187: LIST
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PPUSH
3193: CALL_OW 72
3197: ST_TO_ADDR
// end ;
3198: LD_VAR 0 2
3202: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3203: LD_INT 0
3205: PPUSH
3206: PPUSH
3207: PPUSH
3208: PPUSH
// tmp := [ ] ;
3209: LD_ADDR_VAR 0 3
3213: PUSH
3214: EMPTY
3215: ST_TO_ADDR
// list := [ ] ;
3216: LD_ADDR_VAR 0 5
3220: PUSH
3221: EMPTY
3222: ST_TO_ADDR
// for i = 16 to 25 do
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: DOUBLE
3229: LD_INT 16
3231: DEC
3232: ST_TO_ADDR
3233: LD_INT 25
3235: PUSH
3236: FOR_TO
3237: IFFALSE 3310
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_VAR 0 3
3248: PUSH
3249: LD_INT 22
3251: PUSH
3252: LD_VAR 0 1
3256: PPUSH
3257: CALL_OW 255
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 91
3268: PUSH
3269: LD_VAR 0 1
3273: PUSH
3274: LD_INT 6
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 30
3284: PUSH
3285: LD_VAR 0 4
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: PPUSH
3302: CALL_OW 69
3306: ADD
3307: ST_TO_ADDR
3308: GO 3236
3310: POP
3311: POP
// for i = 1 to tmp do
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_VAR 0 3
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3416
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3330: LD_ADDR_VAR 0 5
3334: PUSH
3335: LD_VAR 0 5
3339: PUSH
3340: LD_VAR 0 3
3344: PUSH
3345: LD_VAR 0 4
3349: ARRAY
3350: PPUSH
3351: CALL_OW 266
3355: PUSH
3356: LD_VAR 0 3
3360: PUSH
3361: LD_VAR 0 4
3365: ARRAY
3366: PPUSH
3367: CALL_OW 250
3371: PUSH
3372: LD_VAR 0 3
3376: PUSH
3377: LD_VAR 0 4
3381: ARRAY
3382: PPUSH
3383: CALL_OW 251
3387: PUSH
3388: LD_VAR 0 3
3392: PUSH
3393: LD_VAR 0 4
3397: ARRAY
3398: PPUSH
3399: CALL_OW 254
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PUSH
3410: EMPTY
3411: LIST
3412: ADD
3413: ST_TO_ADDR
3414: GO 3327
3416: POP
3417: POP
// result := list ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: LD_VAR 0 5
3427: ST_TO_ADDR
// end ;
3428: LD_VAR 0 2
3432: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3433: LD_INT 0
3435: PPUSH
3436: PPUSH
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
// if not factory then
3442: LD_VAR 0 1
3446: NOT
3447: IFFALSE 3451
// exit ;
3449: GO 4054
// if control = control_apeman then
3451: LD_VAR 0 4
3455: PUSH
3456: LD_INT 5
3458: EQUAL
3459: IFFALSE 3568
// begin tmp := UnitsInside ( factory ) ;
3461: LD_ADDR_VAR 0 8
3465: PUSH
3466: LD_VAR 0 1
3470: PPUSH
3471: CALL_OW 313
3475: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3476: LD_VAR 0 8
3480: PPUSH
3481: LD_INT 25
3483: PUSH
3484: LD_INT 12
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PPUSH
3491: CALL_OW 72
3495: NOT
3496: IFFALSE 3506
// control := control_manual ;
3498: LD_ADDR_VAR 0 4
3502: PUSH
3503: LD_INT 1
3505: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3506: LD_ADDR_VAR 0 8
3510: PUSH
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL 3203 0 1
3520: ST_TO_ADDR
// if tmp then
3521: LD_VAR 0 8
3525: IFFALSE 3568
// begin for i in tmp do
3527: LD_ADDR_VAR 0 7
3531: PUSH
3532: LD_VAR 0 8
3536: PUSH
3537: FOR_IN
3538: IFFALSE 3566
// if i [ 1 ] = b_ext_radio then
3540: LD_VAR 0 7
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PUSH
3549: LD_INT 22
3551: EQUAL
3552: IFFALSE 3564
// begin control := control_remote ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_INT 2
3561: ST_TO_ADDR
// break ;
3562: GO 3566
// end ;
3564: GO 3537
3566: POP
3567: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3568: LD_VAR 0 1
3572: PPUSH
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_VAR 0 3
3582: PPUSH
3583: LD_VAR 0 4
3587: PPUSH
3588: LD_VAR 0 5
3592: PPUSH
3593: CALL_OW 448
3597: IFFALSE 3632
// begin result := [ chassis , engine , control , weapon ] ;
3599: LD_ADDR_VAR 0 6
3603: PUSH
3604: LD_VAR 0 2
3608: PUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_VAR 0 4
3618: PUSH
3619: LD_VAR 0 5
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: ST_TO_ADDR
// exit ;
3630: GO 4054
// end ; _chassis := AvailableChassisList ( factory ) ;
3632: LD_ADDR_VAR 0 9
3636: PUSH
3637: LD_VAR 0 1
3641: PPUSH
3642: CALL_OW 475
3646: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3647: LD_ADDR_VAR 0 11
3651: PUSH
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL_OW 476
3661: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3662: LD_ADDR_VAR 0 12
3666: PUSH
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL_OW 477
3676: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3677: LD_ADDR_VAR 0 10
3681: PUSH
3682: LD_VAR 0 1
3686: PPUSH
3687: CALL_OW 478
3691: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3692: LD_VAR 0 9
3696: NOT
3697: IFTRUE 3706
3699: PUSH
3700: LD_VAR 0 11
3704: NOT
3705: OR
3706: IFTRUE 3715
3708: PUSH
3709: LD_VAR 0 12
3713: NOT
3714: OR
3715: IFTRUE 3724
3717: PUSH
3718: LD_VAR 0 10
3722: NOT
3723: OR
3724: IFFALSE 3759
// begin result := [ chassis , engine , control , weapon ] ;
3726: LD_ADDR_VAR 0 6
3730: PUSH
3731: LD_VAR 0 2
3735: PUSH
3736: LD_VAR 0 3
3740: PUSH
3741: LD_VAR 0 4
3745: PUSH
3746: LD_VAR 0 5
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: ST_TO_ADDR
// exit ;
3757: GO 4054
// end ; if not chassis in _chassis then
3759: LD_VAR 0 2
3763: PUSH
3764: LD_VAR 0 9
3768: IN
3769: NOT
3770: IFFALSE 3796
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3772: LD_ADDR_VAR 0 2
3776: PUSH
3777: LD_VAR 0 9
3781: PUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_VAR 0 9
3789: PPUSH
3790: CALL_OW 12
3794: ARRAY
3795: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3796: LD_VAR 0 2
3800: PPUSH
3801: LD_VAR 0 3
3805: PPUSH
3806: CALL 4059 0 2
3810: NOT
3811: IFFALSE 3872
// repeat engine := _engine [ 1 ] ;
3813: LD_ADDR_VAR 0 3
3817: PUSH
3818: LD_VAR 0 11
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3827: LD_ADDR_VAR 0 11
3831: PUSH
3832: LD_VAR 0 11
3836: PPUSH
3837: LD_INT 1
3839: PPUSH
3840: CALL_OW 3
3844: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_VAR 0 3
3854: PPUSH
3855: CALL 4059 0 2
3859: IFTRUE 3870
3861: PUSH
3862: LD_VAR 0 11
3866: PUSH
3867: EMPTY
3868: EQUAL
3869: OR
3870: IFFALSE 3813
// if not control in _control then
3872: LD_VAR 0 4
3876: PUSH
3877: LD_VAR 0 12
3881: IN
3882: NOT
3883: IFFALSE 3909
// control := _control [ rand ( 1 , _control ) ] ;
3885: LD_ADDR_VAR 0 4
3889: PUSH
3890: LD_VAR 0 12
3894: PUSH
3895: LD_INT 1
3897: PPUSH
3898: LD_VAR 0 12
3902: PPUSH
3903: CALL_OW 12
3907: ARRAY
3908: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3909: LD_VAR 0 2
3913: PPUSH
3914: LD_VAR 0 5
3918: PPUSH
3919: CALL 4281 0 2
3923: NOT
3924: IFFALSE 3985
// repeat weapon := _weapon [ 1 ] ;
3926: LD_ADDR_VAR 0 5
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3940: LD_ADDR_VAR 0 10
3944: PUSH
3945: LD_VAR 0 10
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: CALL_OW 3
3957: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3958: LD_VAR 0 2
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: CALL 4281 0 2
3972: IFTRUE 3983
3974: PUSH
3975: LD_VAR 0 10
3979: PUSH
3980: EMPTY
3981: EQUAL
3982: OR
3983: IFFALSE 3926
// result := [ ] ;
3985: LD_ADDR_VAR 0 6
3989: PUSH
3990: EMPTY
3991: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_VAR 0 2
4001: PPUSH
4002: LD_VAR 0 3
4006: PPUSH
4007: LD_VAR 0 4
4011: PPUSH
4012: LD_VAR 0 5
4016: PPUSH
4017: CALL_OW 448
4021: IFFALSE 4054
// result := [ chassis , engine , control , weapon ] ;
4023: LD_ADDR_VAR 0 6
4027: PUSH
4028: LD_VAR 0 2
4032: PUSH
4033: LD_VAR 0 3
4037: PUSH
4038: LD_VAR 0 4
4042: PUSH
4043: LD_VAR 0 5
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: ST_TO_ADDR
// end ;
4054: LD_VAR 0 6
4058: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4059: LD_INT 0
4061: PPUSH
// if not chassis or not engine then
4062: LD_VAR 0 1
4066: NOT
4067: IFTRUE 4076
4069: PUSH
4070: LD_VAR 0 2
4074: NOT
4075: OR
4076: IFFALSE 4080
// exit ;
4078: GO 4276
// case engine of engine_solar :
4080: LD_VAR 0 2
4084: PUSH
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4131
4093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 11
4101: PUSH
4102: LD_INT 12
4104: PUSH
4105: LD_INT 13
4107: PUSH
4108: LD_INT 14
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
4129: GO 4260
4131: LD_INT 1
4133: DOUBLE
4134: EQUAL
4135: IFTRUE 4139
4137: GO 4201
4139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4140: LD_ADDR_VAR 0 3
4144: PUSH
4145: LD_INT 11
4147: PUSH
4148: LD_INT 12
4150: PUSH
4151: LD_INT 13
4153: PUSH
4154: LD_INT 14
4156: PUSH
4157: LD_INT 1
4159: PUSH
4160: LD_INT 2
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: LD_INT 4
4168: PUSH
4169: LD_INT 5
4171: PUSH
4172: LD_INT 21
4174: PUSH
4175: LD_INT 23
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 24
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: ST_TO_ADDR
4199: GO 4260
4201: LD_INT 3
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4259
4209: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_INT 13
4217: PUSH
4218: LD_INT 14
4220: PUSH
4221: LD_INT 2
4223: PUSH
4224: LD_INT 3
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 5
4232: PUSH
4233: LD_INT 21
4235: PUSH
4236: LD_INT 22
4238: PUSH
4239: LD_INT 23
4241: PUSH
4242: LD_INT 24
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
4257: GO 4260
4259: POP
// result := ( chassis in result ) ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_VAR 0 1
4269: PUSH
4270: LD_VAR 0 3
4274: IN
4275: ST_TO_ADDR
// end ;
4276: LD_VAR 0 3
4280: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4281: LD_INT 0
4283: PPUSH
// if not chassis or not weapon then
4284: LD_VAR 0 1
4288: NOT
4289: IFTRUE 4298
4291: PUSH
4292: LD_VAR 0 2
4296: NOT
4297: OR
4298: IFFALSE 4302
// exit ;
4300: GO 5362
// case weapon of us_machine_gun :
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 2
4309: DOUBLE
4310: EQUAL
4311: IFTRUE 4315
4313: GO 4345
4315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4316: LD_ADDR_VAR 0 3
4320: PUSH
4321: LD_INT 1
4323: PUSH
4324: LD_INT 2
4326: PUSH
4327: LD_INT 3
4329: PUSH
4330: LD_INT 4
4332: PUSH
4333: LD_INT 5
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: ST_TO_ADDR
4343: GO 5346
4345: LD_INT 3
4347: DOUBLE
4348: EQUAL
4349: IFTRUE 4353
4351: GO 4383
4353: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: LD_INT 1
4361: PUSH
4362: LD_INT 2
4364: PUSH
4365: LD_INT 3
4367: PUSH
4368: LD_INT 4
4370: PUSH
4371: LD_INT 5
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: ST_TO_ADDR
4381: GO 5346
4383: LD_INT 11
4385: DOUBLE
4386: EQUAL
4387: IFTRUE 4391
4389: GO 4421
4391: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: LD_INT 1
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: LD_INT 5
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
4419: GO 5346
4421: LD_INT 4
4423: DOUBLE
4424: EQUAL
4425: IFTRUE 4429
4427: GO 4455
4429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: LD_INT 4
4443: PUSH
4444: LD_INT 5
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
4453: GO 5346
4455: LD_INT 5
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4489
4463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 4
4477: PUSH
4478: LD_INT 5
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: ST_TO_ADDR
4487: GO 5346
4489: LD_INT 9
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4523
4497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_INT 2
4505: PUSH
4506: LD_INT 3
4508: PUSH
4509: LD_INT 4
4511: PUSH
4512: LD_INT 5
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: ST_TO_ADDR
4521: GO 5346
4523: LD_INT 7
4525: DOUBLE
4526: EQUAL
4527: IFTRUE 4531
4529: GO 4557
4531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4532: LD_ADDR_VAR 0 3
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: LD_INT 4
4545: PUSH
4546: LD_INT 5
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: ST_TO_ADDR
4555: GO 5346
4557: LD_INT 12
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4591
4565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: LD_INT 2
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: LD_INT 4
4579: PUSH
4580: LD_INT 5
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: ST_TO_ADDR
4589: GO 5346
4591: LD_INT 13
4593: DOUBLE
4594: EQUAL
4595: IFTRUE 4599
4597: GO 4625
4599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4600: LD_ADDR_VAR 0 3
4604: PUSH
4605: LD_INT 2
4607: PUSH
4608: LD_INT 3
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 5
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: ST_TO_ADDR
4623: GO 5346
4625: LD_INT 14
4627: DOUBLE
4628: EQUAL
4629: IFTRUE 4633
4631: GO 4651
4633: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: LD_INT 5
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: ST_TO_ADDR
4649: GO 5346
4651: LD_INT 6
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4659
4657: GO 4677
4659: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: LD_INT 4
4667: PUSH
4668: LD_INT 5
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: ST_TO_ADDR
4675: GO 5346
4677: LD_INT 10
4679: DOUBLE
4680: EQUAL
4681: IFTRUE 4685
4683: GO 4703
4685: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: LD_INT 4
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: ST_TO_ADDR
4701: GO 5346
4703: LD_INT 22
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4737
4711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: LD_INT 11
4719: PUSH
4720: LD_INT 12
4722: PUSH
4723: LD_INT 13
4725: PUSH
4726: LD_INT 14
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: ST_TO_ADDR
4735: GO 5346
4737: LD_INT 23
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4771
4745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4746: LD_ADDR_VAR 0 3
4750: PUSH
4751: LD_INT 11
4753: PUSH
4754: LD_INT 12
4756: PUSH
4757: LD_INT 13
4759: PUSH
4760: LD_INT 14
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
4769: GO 5346
4771: LD_INT 24
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4805
4779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_INT 11
4787: PUSH
4788: LD_INT 12
4790: PUSH
4791: LD_INT 13
4793: PUSH
4794: LD_INT 14
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: ST_TO_ADDR
4803: GO 5346
4805: LD_INT 30
4807: DOUBLE
4808: EQUAL
4809: IFTRUE 4813
4811: GO 4839
4813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 11
4821: PUSH
4822: LD_INT 12
4824: PUSH
4825: LD_INT 13
4827: PUSH
4828: LD_INT 14
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 5346
4839: LD_INT 25
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4865
4847: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4848: LD_ADDR_VAR 0 3
4852: PUSH
4853: LD_INT 13
4855: PUSH
4856: LD_INT 14
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 5346
4865: LD_INT 27
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4891
4873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: LD_INT 13
4881: PUSH
4882: LD_INT 14
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: ST_TO_ADDR
4889: GO 5346
4891: LD_INT 92
4893: DOUBLE
4894: EQUAL
4895: IFTRUE 4899
4897: GO 4925
4899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4900: LD_ADDR_VAR 0 3
4904: PUSH
4905: LD_INT 11
4907: PUSH
4908: LD_INT 12
4910: PUSH
4911: LD_INT 13
4913: PUSH
4914: LD_INT 14
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: ST_TO_ADDR
4923: GO 5346
4925: LD_INT 28
4927: DOUBLE
4928: EQUAL
4929: IFTRUE 4933
4931: GO 4951
4933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: LD_INT 13
4941: PUSH
4942: LD_INT 14
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
4949: GO 5346
4951: LD_INT 29
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 4959
4957: GO 4977
4959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4960: LD_ADDR_VAR 0 3
4964: PUSH
4965: LD_INT 13
4967: PUSH
4968: LD_INT 14
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: ST_TO_ADDR
4975: GO 5346
4977: LD_INT 31
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5003
4985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_INT 13
4993: PUSH
4994: LD_INT 14
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: ST_TO_ADDR
5001: GO 5346
5003: LD_INT 26
5005: DOUBLE
5006: EQUAL
5007: IFTRUE 5011
5009: GO 5029
5011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: LD_INT 13
5019: PUSH
5020: LD_INT 14
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: ST_TO_ADDR
5027: GO 5346
5029: LD_INT 42
5031: DOUBLE
5032: EQUAL
5033: IFTRUE 5037
5035: GO 5063
5037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5038: LD_ADDR_VAR 0 3
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_INT 23
5051: PUSH
5052: LD_INT 24
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: ST_TO_ADDR
5061: GO 5346
5063: LD_INT 43
5065: DOUBLE
5066: EQUAL
5067: IFTRUE 5071
5069: GO 5097
5071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5072: LD_ADDR_VAR 0 3
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 22
5082: PUSH
5083: LD_INT 23
5085: PUSH
5086: LD_INT 24
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
5095: GO 5346
5097: LD_INT 44
5099: DOUBLE
5100: EQUAL
5101: IFTRUE 5105
5103: GO 5131
5105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: LD_INT 21
5113: PUSH
5114: LD_INT 22
5116: PUSH
5117: LD_INT 23
5119: PUSH
5120: LD_INT 24
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: ST_TO_ADDR
5129: GO 5346
5131: LD_INT 45
5133: DOUBLE
5134: EQUAL
5135: IFTRUE 5139
5137: GO 5165
5139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: LD_INT 21
5147: PUSH
5148: LD_INT 22
5150: PUSH
5151: LD_INT 23
5153: PUSH
5154: LD_INT 24
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: ST_TO_ADDR
5163: GO 5346
5165: LD_INT 49
5167: DOUBLE
5168: EQUAL
5169: IFTRUE 5173
5171: GO 5199
5173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5174: LD_ADDR_VAR 0 3
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_INT 23
5187: PUSH
5188: LD_INT 24
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 5346
5199: LD_INT 51
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5233
5207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 21
5215: PUSH
5216: LD_INT 22
5218: PUSH
5219: LD_INT 23
5221: PUSH
5222: LD_INT 24
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: ST_TO_ADDR
5231: GO 5346
5233: LD_INT 52
5235: DOUBLE
5236: EQUAL
5237: IFTRUE 5241
5239: GO 5267
5241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5242: LD_ADDR_VAR 0 3
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_INT 23
5255: PUSH
5256: LD_INT 24
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 5346
5267: LD_INT 53
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5293
5275: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_INT 23
5283: PUSH
5284: LD_INT 24
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: ST_TO_ADDR
5291: GO 5346
5293: LD_INT 46
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5301
5299: GO 5319
5301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: LD_INT 23
5309: PUSH
5310: LD_INT 24
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: ST_TO_ADDR
5317: GO 5346
5319: LD_INT 47
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5327
5325: GO 5345
5327: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_INT 23
5335: PUSH
5336: LD_INT 24
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: ST_TO_ADDR
5343: GO 5346
5345: POP
// result := ( chassis in result ) ;
5346: LD_ADDR_VAR 0 3
5350: PUSH
5351: LD_VAR 0 1
5355: PUSH
5356: LD_VAR 0 3
5360: IN
5361: ST_TO_ADDR
// end ;
5362: LD_VAR 0 3
5366: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5367: LD_INT 0
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
5374: PPUSH
5375: PPUSH
// result := array ;
5376: LD_ADDR_VAR 0 5
5380: PUSH
5381: LD_VAR 0 1
5385: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5386: LD_VAR 0 1
5390: NOT
5391: IFTRUE 5400
5393: PUSH
5394: LD_VAR 0 2
5398: NOT
5399: OR
5400: IFTRUE 5409
5402: PUSH
5403: LD_VAR 0 3
5407: NOT
5408: OR
5409: IFTRUE 5423
5411: PUSH
5412: LD_VAR 0 2
5416: PUSH
5417: LD_VAR 0 1
5421: GREATER
5422: OR
5423: IFTRUE 5437
5425: PUSH
5426: LD_VAR 0 3
5430: PUSH
5431: LD_VAR 0 1
5435: GREATER
5436: OR
5437: IFFALSE 5441
// exit ;
5439: GO 5737
// if direction then
5441: LD_VAR 0 4
5445: IFFALSE 5509
// begin d := 1 ;
5447: LD_ADDR_VAR 0 9
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if i_from > i_to then
5455: LD_VAR 0 2
5459: PUSH
5460: LD_VAR 0 3
5464: GREATER
5465: IFFALSE 5491
// length := ( array - i_from ) + i_to else
5467: LD_ADDR_VAR 0 11
5471: PUSH
5472: LD_VAR 0 1
5476: PUSH
5477: LD_VAR 0 2
5481: MINUS
5482: PUSH
5483: LD_VAR 0 3
5487: PLUS
5488: ST_TO_ADDR
5489: GO 5507
// length := i_to - i_from ;
5491: LD_ADDR_VAR 0 11
5495: PUSH
5496: LD_VAR 0 3
5500: PUSH
5501: LD_VAR 0 2
5505: MINUS
5506: ST_TO_ADDR
// end else
5507: GO 5570
// begin d := - 1 ;
5509: LD_ADDR_VAR 0 9
5513: PUSH
5514: LD_INT 1
5516: NEG
5517: ST_TO_ADDR
// if i_from > i_to then
5518: LD_VAR 0 2
5522: PUSH
5523: LD_VAR 0 3
5527: GREATER
5528: IFFALSE 5548
// length := i_from - i_to else
5530: LD_ADDR_VAR 0 11
5534: PUSH
5535: LD_VAR 0 2
5539: PUSH
5540: LD_VAR 0 3
5544: MINUS
5545: ST_TO_ADDR
5546: GO 5570
// length := ( array - i_to ) + i_from ;
5548: LD_ADDR_VAR 0 11
5552: PUSH
5553: LD_VAR 0 1
5557: PUSH
5558: LD_VAR 0 3
5562: MINUS
5563: PUSH
5564: LD_VAR 0 2
5568: PLUS
5569: ST_TO_ADDR
// end ; if not length then
5570: LD_VAR 0 11
5574: NOT
5575: IFFALSE 5579
// exit ;
5577: GO 5737
// tmp := array ;
5579: LD_ADDR_VAR 0 10
5583: PUSH
5584: LD_VAR 0 1
5588: ST_TO_ADDR
// for i = 1 to length do
5589: LD_ADDR_VAR 0 6
5593: PUSH
5594: DOUBLE
5595: LD_INT 1
5597: DEC
5598: ST_TO_ADDR
5599: LD_VAR 0 11
5603: PUSH
5604: FOR_TO
5605: IFFALSE 5725
// begin for j = 1 to array do
5607: LD_ADDR_VAR 0 7
5611: PUSH
5612: DOUBLE
5613: LD_INT 1
5615: DEC
5616: ST_TO_ADDR
5617: LD_VAR 0 1
5621: PUSH
5622: FOR_TO
5623: IFFALSE 5711
// begin k := j + d ;
5625: LD_ADDR_VAR 0 8
5629: PUSH
5630: LD_VAR 0 7
5634: PUSH
5635: LD_VAR 0 9
5639: PLUS
5640: ST_TO_ADDR
// if k > array then
5641: LD_VAR 0 8
5645: PUSH
5646: LD_VAR 0 1
5650: GREATER
5651: IFFALSE 5661
// k := 1 ;
5653: LD_ADDR_VAR 0 8
5657: PUSH
5658: LD_INT 1
5660: ST_TO_ADDR
// if not k then
5661: LD_VAR 0 8
5665: NOT
5666: IFFALSE 5678
// k := array ;
5668: LD_ADDR_VAR 0 8
5672: PUSH
5673: LD_VAR 0 1
5677: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5678: LD_ADDR_VAR 0 10
5682: PUSH
5683: LD_VAR 0 10
5687: PPUSH
5688: LD_VAR 0 8
5692: PPUSH
5693: LD_VAR 0 1
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: CALL_OW 1
5708: ST_TO_ADDR
// end ;
5709: GO 5622
5711: POP
5712: POP
// array := tmp ;
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: LD_VAR 0 10
5722: ST_TO_ADDR
// end ;
5723: GO 5604
5725: POP
5726: POP
// result := array ;
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: LD_VAR 0 1
5736: ST_TO_ADDR
// end ;
5737: LD_VAR 0 5
5741: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
// result := 0 ;
5746: LD_ADDR_VAR 0 3
5750: PUSH
5751: LD_INT 0
5753: ST_TO_ADDR
// if not array or not value in array then
5754: LD_VAR 0 1
5758: NOT
5759: IFTRUE 5774
5761: PUSH
5762: LD_VAR 0 2
5766: PUSH
5767: LD_VAR 0 1
5771: IN
5772: NOT
5773: OR
5774: IFFALSE 5778
// exit ;
5776: GO 5832
// for i = 1 to array do
5778: LD_ADDR_VAR 0 4
5782: PUSH
5783: DOUBLE
5784: LD_INT 1
5786: DEC
5787: ST_TO_ADDR
5788: LD_VAR 0 1
5792: PUSH
5793: FOR_TO
5794: IFFALSE 5830
// if value = array [ i ] then
5796: LD_VAR 0 2
5800: PUSH
5801: LD_VAR 0 1
5805: PUSH
5806: LD_VAR 0 4
5810: ARRAY
5811: EQUAL
5812: IFFALSE 5828
// begin result := i ;
5814: LD_ADDR_VAR 0 3
5818: PUSH
5819: LD_VAR 0 4
5823: ST_TO_ADDR
// exit ;
5824: POP
5825: POP
5826: GO 5832
// end ;
5828: GO 5793
5830: POP
5831: POP
// end ;
5832: LD_VAR 0 3
5836: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5837: LD_INT 0
5839: PPUSH
// vc_chassis := chassis ;
5840: LD_ADDR_OWVAR 37
5844: PUSH
5845: LD_VAR 0 1
5849: ST_TO_ADDR
// vc_engine := engine ;
5850: LD_ADDR_OWVAR 39
5854: PUSH
5855: LD_VAR 0 2
5859: ST_TO_ADDR
// vc_control := control ;
5860: LD_ADDR_OWVAR 38
5864: PUSH
5865: LD_VAR 0 3
5869: ST_TO_ADDR
// vc_weapon := weapon ;
5870: LD_ADDR_OWVAR 40
5874: PUSH
5875: LD_VAR 0 4
5879: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5880: LD_ADDR_OWVAR 41
5884: PUSH
5885: LD_VAR 0 5
5889: ST_TO_ADDR
// end ;
5890: LD_VAR 0 6
5894: RET
// export function WantPlant ( unit ) ; var task ; begin
5895: LD_INT 0
5897: PPUSH
5898: PPUSH
// result := false ;
5899: LD_ADDR_VAR 0 2
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5907: LD_ADDR_VAR 0 3
5911: PUSH
5912: LD_VAR 0 1
5916: PPUSH
5917: CALL_OW 437
5921: ST_TO_ADDR
// if task then
5922: LD_VAR 0 3
5926: IFFALSE 5954
// if task [ 1 ] [ 1 ] = p then
5928: LD_VAR 0 3
5932: PUSH
5933: LD_INT 1
5935: ARRAY
5936: PUSH
5937: LD_INT 1
5939: ARRAY
5940: PUSH
5941: LD_STRING p
5943: EQUAL
5944: IFFALSE 5954
// result := true ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// end ;
5954: LD_VAR 0 2
5958: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
5963: PPUSH
5964: PPUSH
// if pos < 1 then
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: LESS
5973: IFFALSE 5977
// exit ;
5975: GO 6280
// if pos = 1 then
5977: LD_VAR 0 2
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: IFFALSE 6018
// result := Replace ( arr , pos [ 1 ] , value ) else
5987: LD_ADDR_VAR 0 4
5991: PUSH
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 3
6010: PPUSH
6011: CALL_OW 1
6015: ST_TO_ADDR
6016: GO 6280
// begin tmp := arr ;
6018: LD_ADDR_VAR 0 6
6022: PUSH
6023: LD_VAR 0 1
6027: ST_TO_ADDR
// s_arr := [ tmp ] ;
6028: LD_ADDR_VAR 0 7
6032: PUSH
6033: LD_VAR 0 6
6037: PUSH
6038: EMPTY
6039: LIST
6040: ST_TO_ADDR
// for i = 1 to pos - 1 do
6041: LD_ADDR_VAR 0 5
6045: PUSH
6046: DOUBLE
6047: LD_INT 1
6049: DEC
6050: ST_TO_ADDR
6051: LD_VAR 0 2
6055: PUSH
6056: LD_INT 1
6058: MINUS
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6106
// begin tmp := tmp [ pos [ i ] ] ;
6063: LD_ADDR_VAR 0 6
6067: PUSH
6068: LD_VAR 0 6
6072: PUSH
6073: LD_VAR 0 2
6077: PUSH
6078: LD_VAR 0 5
6082: ARRAY
6083: ARRAY
6084: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6085: LD_ADDR_VAR 0 7
6089: PUSH
6090: LD_VAR 0 7
6094: PUSH
6095: LD_VAR 0 6
6099: PUSH
6100: EMPTY
6101: LIST
6102: ADD
6103: ST_TO_ADDR
// end ;
6104: GO 6060
6106: POP
6107: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6108: LD_ADDR_VAR 0 6
6112: PUSH
6113: LD_VAR 0 6
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_VAR 0 3
6133: PPUSH
6134: CALL_OW 1
6138: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6139: LD_ADDR_VAR 0 7
6143: PUSH
6144: LD_VAR 0 7
6148: PPUSH
6149: LD_VAR 0 7
6153: PPUSH
6154: LD_VAR 0 6
6158: PPUSH
6159: CALL_OW 1
6163: ST_TO_ADDR
// for i = s_arr downto 2 do
6164: LD_ADDR_VAR 0 5
6168: PUSH
6169: DOUBLE
6170: LD_VAR 0 7
6174: INC
6175: ST_TO_ADDR
6176: LD_INT 2
6178: PUSH
6179: FOR_DOWNTO
6180: IFFALSE 6264
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6182: LD_ADDR_VAR 0 6
6186: PUSH
6187: LD_VAR 0 7
6191: PUSH
6192: LD_VAR 0 5
6196: PUSH
6197: LD_INT 1
6199: MINUS
6200: ARRAY
6201: PPUSH
6202: LD_VAR 0 2
6206: PUSH
6207: LD_VAR 0 5
6211: PUSH
6212: LD_INT 1
6214: MINUS
6215: ARRAY
6216: PPUSH
6217: LD_VAR 0 7
6221: PUSH
6222: LD_VAR 0 5
6226: ARRAY
6227: PPUSH
6228: CALL_OW 1
6232: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6233: LD_ADDR_VAR 0 7
6237: PUSH
6238: LD_VAR 0 7
6242: PPUSH
6243: LD_VAR 0 5
6247: PUSH
6248: LD_INT 1
6250: MINUS
6251: PPUSH
6252: LD_VAR 0 6
6256: PPUSH
6257: CALL_OW 1
6261: ST_TO_ADDR
// end ;
6262: GO 6179
6264: POP
6265: POP
// result := s_arr [ 1 ] ;
6266: LD_ADDR_VAR 0 4
6270: PUSH
6271: LD_VAR 0 7
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: ST_TO_ADDR
// end ; end ;
6280: LD_VAR 0 4
6284: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6285: LD_INT 0
6287: PPUSH
6288: PPUSH
// if not list then
6289: LD_VAR 0 1
6293: NOT
6294: IFFALSE 6298
// exit ;
6296: GO 6389
// i := list [ pos1 ] ;
6298: LD_ADDR_VAR 0 5
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: LD_VAR 0 2
6312: ARRAY
6313: ST_TO_ADDR
// if not i then
6314: LD_VAR 0 5
6318: NOT
6319: IFFALSE 6323
// exit ;
6321: GO 6389
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 1
6332: PPUSH
6333: LD_VAR 0 2
6337: PPUSH
6338: LD_VAR 0 1
6342: PUSH
6343: LD_VAR 0 3
6347: ARRAY
6348: PPUSH
6349: CALL_OW 1
6353: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6354: LD_ADDR_VAR 0 1
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_VAR 0 3
6368: PPUSH
6369: LD_VAR 0 5
6373: PPUSH
6374: CALL_OW 1
6378: ST_TO_ADDR
// result := list ;
6379: LD_ADDR_VAR 0 4
6383: PUSH
6384: LD_VAR 0 1
6388: ST_TO_ADDR
// end ;
6389: LD_VAR 0 4
6393: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6394: LD_INT 0
6396: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6397: LD_ADDR_VAR 0 5
6401: PUSH
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL_OW 250
6411: PPUSH
6412: LD_VAR 0 1
6416: PPUSH
6417: CALL_OW 251
6421: PPUSH
6422: LD_VAR 0 2
6426: PPUSH
6427: LD_VAR 0 3
6431: PPUSH
6432: LD_VAR 0 4
6436: PPUSH
6437: CALL 6819 0 5
6441: ST_TO_ADDR
// end ;
6442: LD_VAR 0 5
6446: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6447: LD_INT 0
6449: PPUSH
6450: PPUSH
6451: PPUSH
6452: PPUSH
// if not list or not unit then
6453: LD_VAR 0 2
6457: NOT
6458: IFTRUE 6467
6460: PUSH
6461: LD_VAR 0 1
6465: NOT
6466: OR
6467: IFFALSE 6471
// exit ;
6469: GO 6814
// result := [ ] ;
6471: LD_ADDR_VAR 0 5
6475: PUSH
6476: EMPTY
6477: ST_TO_ADDR
// for i in list do
6478: LD_ADDR_VAR 0 6
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6707
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6491: LD_ADDR_VAR 0 8
6495: PUSH
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_VAR 0 6
6505: PUSH
6506: LD_INT 1
6508: ARRAY
6509: PPUSH
6510: LD_VAR 0 6
6514: PUSH
6515: LD_INT 2
6517: ARRAY
6518: PPUSH
6519: CALL_OW 297
6523: ST_TO_ADDR
// if not Count ( result ) then
6524: LD_VAR 0 5
6528: PPUSH
6529: CALL 3075 0 1
6533: NOT
6534: IFFALSE 6567
// begin result := Join ( result , [ i , tmp ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: LD_VAR 0 6
6550: PUSH
6551: LD_VAR 0 8
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PPUSH
6560: CALL 39007 0 2
6564: ST_TO_ADDR
// continue ;
6565: GO 6488
// end ; if result [ result ] [ 2 ] <= tmp then
6567: LD_VAR 0 5
6571: PUSH
6572: LD_VAR 0 5
6576: ARRAY
6577: PUSH
6578: LD_INT 2
6580: ARRAY
6581: PUSH
6582: LD_VAR 0 8
6586: LESSEQUAL
6587: IFFALSE 6620
// result := Join ( result , [ i , tmp ] ) else
6589: LD_ADDR_VAR 0 5
6593: PUSH
6594: LD_VAR 0 5
6598: PPUSH
6599: LD_VAR 0 6
6603: PUSH
6604: LD_VAR 0 8
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL 39007 0 2
6617: ST_TO_ADDR
6618: GO 6705
// begin for j := 1 to Count ( result ) do
6620: LD_ADDR_VAR 0 7
6624: PUSH
6625: DOUBLE
6626: LD_INT 1
6628: DEC
6629: ST_TO_ADDR
6630: LD_VAR 0 5
6634: PPUSH
6635: CALL 3075 0 1
6639: PUSH
6640: FOR_TO
6641: IFFALSE 6703
// begin if tmp < result [ j ] [ 2 ] then
6643: LD_VAR 0 8
6647: PUSH
6648: LD_VAR 0 5
6652: PUSH
6653: LD_VAR 0 7
6657: ARRAY
6658: PUSH
6659: LD_INT 2
6661: ARRAY
6662: LESS
6663: IFFALSE 6701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6665: LD_ADDR_VAR 0 5
6669: PUSH
6670: LD_VAR 0 5
6674: PPUSH
6675: LD_VAR 0 7
6679: PPUSH
6680: LD_VAR 0 6
6684: PUSH
6685: LD_VAR 0 8
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 2
6698: ST_TO_ADDR
// break ;
6699: GO 6703
// end ; end ;
6701: GO 6640
6703: POP
6704: POP
// end ; end ;
6705: GO 6488
6707: POP
6708: POP
// if result and not asc then
6709: LD_VAR 0 5
6713: IFFALSE 6722
6715: PUSH
6716: LD_VAR 0 3
6720: NOT
6721: AND
6722: IFFALSE 6739
// result := ReverseArray ( result ) ;
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_VAR 0 5
6733: PPUSH
6734: CALL 34097 0 1
6738: ST_TO_ADDR
// tmp := [ ] ;
6739: LD_ADDR_VAR 0 8
6743: PUSH
6744: EMPTY
6745: ST_TO_ADDR
// if mode then
6746: LD_VAR 0 4
6750: IFFALSE 6814
// begin for i := 1 to result do
6752: LD_ADDR_VAR 0 6
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_VAR 0 5
6766: PUSH
6767: FOR_TO
6768: IFFALSE 6802
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6770: LD_ADDR_VAR 0 8
6774: PUSH
6775: LD_VAR 0 8
6779: PPUSH
6780: LD_VAR 0 5
6784: PUSH
6785: LD_VAR 0 6
6789: ARRAY
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PPUSH
6795: CALL 39007 0 2
6799: ST_TO_ADDR
6800: GO 6767
6802: POP
6803: POP
// result := tmp ;
6804: LD_ADDR_VAR 0 5
6808: PUSH
6809: LD_VAR 0 8
6813: ST_TO_ADDR
// end ; end ;
6814: LD_VAR 0 5
6818: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
// if not list then
6825: LD_VAR 0 3
6829: NOT
6830: IFFALSE 6834
// exit ;
6832: GO 7224
// result := [ ] ;
6834: LD_ADDR_VAR 0 6
6838: PUSH
6839: EMPTY
6840: ST_TO_ADDR
// for i in list do
6841: LD_ADDR_VAR 0 7
6845: PUSH
6846: LD_VAR 0 3
6850: PUSH
6851: FOR_IN
6852: IFFALSE 7054
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6854: LD_ADDR_VAR 0 9
6858: PUSH
6859: LD_VAR 0 7
6863: PPUSH
6864: LD_VAR 0 1
6868: PPUSH
6869: LD_VAR 0 2
6873: PPUSH
6874: CALL_OW 297
6878: ST_TO_ADDR
// if not result then
6879: LD_VAR 0 6
6883: NOT
6884: IFFALSE 6910
// result := [ [ i , tmp ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: ST_TO_ADDR
6908: GO 7052
// begin if result [ result ] [ 2 ] <= tmp then
6910: LD_VAR 0 6
6914: PUSH
6915: LD_VAR 0 6
6919: ARRAY
6920: PUSH
6921: LD_INT 2
6923: ARRAY
6924: PUSH
6925: LD_VAR 0 9
6929: LESSEQUAL
6930: IFFALSE 6972
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6932: LD_ADDR_VAR 0 6
6936: PUSH
6937: LD_VAR 0 6
6941: PPUSH
6942: LD_VAR 0 6
6946: PUSH
6947: LD_INT 1
6949: PLUS
6950: PPUSH
6951: LD_VAR 0 7
6955: PUSH
6956: LD_VAR 0 9
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 2
6969: ST_TO_ADDR
6970: GO 7052
// for j := 1 to result do
6972: LD_ADDR_VAR 0 8
6976: PUSH
6977: DOUBLE
6978: LD_INT 1
6980: DEC
6981: ST_TO_ADDR
6982: LD_VAR 0 6
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7050
// begin if tmp < result [ j ] [ 2 ] then
6990: LD_VAR 0 9
6994: PUSH
6995: LD_VAR 0 6
6999: PUSH
7000: LD_VAR 0 8
7004: ARRAY
7005: PUSH
7006: LD_INT 2
7008: ARRAY
7009: LESS
7010: IFFALSE 7048
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: LD_VAR 0 8
7026: PPUSH
7027: LD_VAR 0 7
7031: PUSH
7032: LD_VAR 0 9
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 2
7045: ST_TO_ADDR
// break ;
7046: GO 7050
// end ; end ;
7048: GO 6987
7050: POP
7051: POP
// end ; end ;
7052: GO 6851
7054: POP
7055: POP
// if result and not asc then
7056: LD_VAR 0 6
7060: IFFALSE 7069
7062: PUSH
7063: LD_VAR 0 4
7067: NOT
7068: AND
7069: IFFALSE 7144
// begin tmp := result ;
7071: LD_ADDR_VAR 0 9
7075: PUSH
7076: LD_VAR 0 6
7080: ST_TO_ADDR
// for i = tmp downto 1 do
7081: LD_ADDR_VAR 0 7
7085: PUSH
7086: DOUBLE
7087: LD_VAR 0 9
7091: INC
7092: ST_TO_ADDR
7093: LD_INT 1
7095: PUSH
7096: FOR_DOWNTO
7097: IFFALSE 7142
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7099: LD_ADDR_VAR 0 6
7103: PUSH
7104: LD_VAR 0 6
7108: PPUSH
7109: LD_VAR 0 9
7113: PUSH
7114: LD_VAR 0 7
7118: MINUS
7119: PUSH
7120: LD_INT 1
7122: PLUS
7123: PPUSH
7124: LD_VAR 0 9
7128: PUSH
7129: LD_VAR 0 7
7133: ARRAY
7134: PPUSH
7135: CALL_OW 1
7139: ST_TO_ADDR
7140: GO 7096
7142: POP
7143: POP
// end ; tmp := [ ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: EMPTY
7150: ST_TO_ADDR
// if mode then
7151: LD_VAR 0 5
7155: IFFALSE 7224
// begin for i = 1 to result do
7157: LD_ADDR_VAR 0 7
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 6
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7212
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7175: LD_ADDR_VAR 0 9
7179: PUSH
7180: LD_VAR 0 9
7184: PPUSH
7185: LD_VAR 0 7
7189: PPUSH
7190: LD_VAR 0 6
7194: PUSH
7195: LD_VAR 0 7
7199: ARRAY
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: PPUSH
7205: CALL_OW 1
7209: ST_TO_ADDR
7210: GO 7172
7212: POP
7213: POP
// result := tmp ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_VAR 0 9
7223: ST_TO_ADDR
// end ; end ;
7224: LD_VAR 0 6
7228: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7229: LD_INT 0
7231: PPUSH
7232: PPUSH
7233: PPUSH
7234: PPUSH
7235: PPUSH
7236: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7237: LD_ADDR_VAR 0 5
7241: PUSH
7242: LD_INT 0
7244: PUSH
7245: LD_INT 0
7247: PUSH
7248: LD_INT 0
7250: PUSH
7251: EMPTY
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: ST_TO_ADDR
// if not x or not y then
7259: LD_VAR 0 2
7263: NOT
7264: IFTRUE 7273
7266: PUSH
7267: LD_VAR 0 3
7271: NOT
7272: OR
7273: IFFALSE 7277
// exit ;
7275: GO 8933
// if not range then
7277: LD_VAR 0 4
7281: NOT
7282: IFFALSE 7292
// range := 10 ;
7284: LD_ADDR_VAR 0 4
7288: PUSH
7289: LD_INT 10
7291: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7292: LD_ADDR_VAR 0 8
7296: PUSH
7297: LD_INT 81
7299: PUSH
7300: LD_VAR 0 1
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 92
7311: PUSH
7312: LD_VAR 0 2
7316: PUSH
7317: LD_VAR 0 3
7321: PUSH
7322: LD_VAR 0 4
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 21
7338: PUSH
7339: LD_INT 3
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: ST_TO_ADDR
// if not tmp then
7360: LD_VAR 0 8
7364: NOT
7365: IFFALSE 7369
// exit ;
7367: GO 8933
// for i in tmp do
7369: LD_ADDR_VAR 0 6
7373: PUSH
7374: LD_VAR 0 8
7378: PUSH
7379: FOR_IN
7380: IFFALSE 8908
// begin points := [ 0 , 0 , 0 ] ;
7382: LD_ADDR_VAR 0 9
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: LD_INT 0
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: ST_TO_ADDR
// bpoints := 1 ;
7401: LD_ADDR_VAR 0 10
7405: PUSH
7406: LD_INT 1
7408: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7409: LD_VAR 0 6
7413: PPUSH
7414: CALL_OW 247
7418: PUSH
7419: LD_INT 1
7421: DOUBLE
7422: EQUAL
7423: IFTRUE 7427
7425: GO 8009
7427: POP
// begin if GetClass ( i ) = 1 then
7428: LD_VAR 0 6
7432: PPUSH
7433: CALL_OW 257
7437: PUSH
7438: LD_INT 1
7440: EQUAL
7441: IFFALSE 7462
// points := [ 10 , 5 , 3 ] ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_INT 10
7450: PUSH
7451: LD_INT 5
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7462: LD_VAR 0 6
7466: PPUSH
7467: CALL_OW 257
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: LD_INT 3
7477: PUSH
7478: LD_INT 4
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: IN
7486: IFFALSE 7507
// points := [ 3 , 2 , 1 ] ;
7488: LD_ADDR_VAR 0 9
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7507: LD_VAR 0 6
7511: PPUSH
7512: CALL_OW 257
7516: PUSH
7517: LD_INT 5
7519: EQUAL
7520: IFFALSE 7541
// points := [ 130 , 5 , 2 ] ;
7522: LD_ADDR_VAR 0 9
7526: PUSH
7527: LD_INT 130
7529: PUSH
7530: LD_INT 5
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL_OW 257
7550: PUSH
7551: LD_INT 8
7553: EQUAL
7554: IFFALSE 7575
// points := [ 35 , 35 , 30 ] ;
7556: LD_ADDR_VAR 0 9
7560: PUSH
7561: LD_INT 35
7563: PUSH
7564: LD_INT 35
7566: PUSH
7567: LD_INT 30
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 257
7584: PUSH
7585: LD_INT 9
7587: EQUAL
7588: IFFALSE 7609
// points := [ 20 , 55 , 40 ] ;
7590: LD_ADDR_VAR 0 9
7594: PUSH
7595: LD_INT 20
7597: PUSH
7598: LD_INT 55
7600: PUSH
7601: LD_INT 40
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7609: LD_VAR 0 6
7613: PPUSH
7614: CALL_OW 257
7618: PUSH
7619: LD_INT 12
7621: PUSH
7622: LD_INT 16
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: IN
7629: IFFALSE 7650
// points := [ 5 , 3 , 2 ] ;
7631: LD_ADDR_VAR 0 9
7635: PUSH
7636: LD_INT 5
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7650: LD_VAR 0 6
7654: PPUSH
7655: CALL_OW 257
7659: PUSH
7660: LD_INT 17
7662: EQUAL
7663: IFFALSE 7684
// points := [ 100 , 50 , 75 ] ;
7665: LD_ADDR_VAR 0 9
7669: PUSH
7670: LD_INT 100
7672: PUSH
7673: LD_INT 50
7675: PUSH
7676: LD_INT 75
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7684: LD_VAR 0 6
7688: PPUSH
7689: CALL_OW 257
7693: PUSH
7694: LD_INT 15
7696: EQUAL
7697: IFFALSE 7718
// points := [ 10 , 5 , 3 ] ;
7699: LD_ADDR_VAR 0 9
7703: PUSH
7704: LD_INT 10
7706: PUSH
7707: LD_INT 5
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7718: LD_VAR 0 6
7722: PPUSH
7723: CALL_OW 257
7727: PUSH
7728: LD_INT 14
7730: EQUAL
7731: IFFALSE 7752
// points := [ 10 , 0 , 0 ] ;
7733: LD_ADDR_VAR 0 9
7737: PUSH
7738: LD_INT 10
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7752: LD_VAR 0 6
7756: PPUSH
7757: CALL_OW 257
7761: PUSH
7762: LD_INT 11
7764: EQUAL
7765: IFFALSE 7786
// points := [ 30 , 10 , 5 ] ;
7767: LD_ADDR_VAR 0 9
7771: PUSH
7772: LD_INT 30
7774: PUSH
7775: LD_INT 10
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7786: LD_VAR 0 1
7790: PPUSH
7791: LD_INT 5
7793: PPUSH
7794: CALL_OW 321
7798: PUSH
7799: LD_INT 2
7801: EQUAL
7802: IFFALSE 7819
// bpoints := bpoints * 1.8 ;
7804: LD_ADDR_VAR 0 10
7808: PUSH
7809: LD_VAR 0 10
7813: PUSH
7814: LD_REAL  1.80000000000000E+0000
7817: MUL
7818: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 257
7828: PUSH
7829: LD_INT 1
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: LD_INT 4
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: IN
7847: IFFALSE 7867
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 51
7857: PPUSH
7858: CALL_OW 321
7862: PUSH
7863: LD_INT 2
7865: EQUAL
7866: AND
7867: IFFALSE 7884
// bpoints := bpoints * 1.2 ;
7869: LD_ADDR_VAR 0 10
7873: PUSH
7874: LD_VAR 0 10
7878: PUSH
7879: LD_REAL  1.20000000000000E+0000
7882: MUL
7883: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7884: LD_VAR 0 6
7888: PPUSH
7889: CALL_OW 257
7893: PUSH
7894: LD_INT 5
7896: PUSH
7897: LD_INT 7
7899: PUSH
7900: LD_INT 9
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: IN
7908: IFFALSE 7928
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_INT 52
7918: PPUSH
7919: CALL_OW 321
7923: PUSH
7924: LD_INT 2
7926: EQUAL
7927: AND
7928: IFFALSE 7945
// bpoints := bpoints * 1.5 ;
7930: LD_ADDR_VAR 0 10
7934: PUSH
7935: LD_VAR 0 10
7939: PUSH
7940: LD_REAL  1.50000000000000E+0000
7943: MUL
7944: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7945: LD_VAR 0 1
7949: PPUSH
7950: LD_INT 66
7952: PPUSH
7953: CALL_OW 321
7957: PUSH
7958: LD_INT 2
7960: EQUAL
7961: IFFALSE 7978
// bpoints := bpoints * 1.1 ;
7963: LD_ADDR_VAR 0 10
7967: PUSH
7968: LD_VAR 0 10
7972: PUSH
7973: LD_REAL  1.10000000000000E+0000
7976: MUL
7977: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7978: LD_ADDR_VAR 0 10
7982: PUSH
7983: LD_VAR 0 10
7987: PUSH
7988: LD_VAR 0 6
7992: PPUSH
7993: LD_INT 1
7995: PPUSH
7996: CALL_OW 259
8000: PUSH
8001: LD_REAL  1.15000000000000E+0000
8004: MUL
8005: MUL
8006: ST_TO_ADDR
// end ; unit_vehicle :
8007: GO 8837
8009: LD_INT 2
8011: DOUBLE
8012: EQUAL
8013: IFTRUE 8017
8015: GO 8825
8017: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8018: LD_VAR 0 6
8022: PPUSH
8023: CALL_OW 264
8027: PUSH
8028: LD_INT 2
8030: PUSH
8031: LD_INT 42
8033: PUSH
8034: LD_INT 24
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: IN
8042: IFFALSE 8063
// points := [ 25 , 5 , 3 ] ;
8044: LD_ADDR_VAR 0 9
8048: PUSH
8049: LD_INT 25
8051: PUSH
8052: LD_INT 5
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8063: LD_VAR 0 6
8067: PPUSH
8068: CALL_OW 264
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: LD_INT 43
8078: PUSH
8079: LD_INT 25
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: IN
8087: IFFALSE 8108
// points := [ 40 , 15 , 5 ] ;
8089: LD_ADDR_VAR 0 9
8093: PUSH
8094: LD_INT 40
8096: PUSH
8097: LD_INT 15
8099: PUSH
8100: LD_INT 5
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8108: LD_VAR 0 6
8112: PPUSH
8113: CALL_OW 264
8117: PUSH
8118: LD_INT 3
8120: PUSH
8121: LD_INT 23
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: IN
8128: IFFALSE 8149
// points := [ 7 , 25 , 8 ] ;
8130: LD_ADDR_VAR 0 9
8134: PUSH
8135: LD_INT 7
8137: PUSH
8138: LD_INT 25
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8149: LD_VAR 0 6
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: LD_INT 27
8164: PUSH
8165: LD_INT 44
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: IN
8173: IFFALSE 8194
// points := [ 14 , 50 , 16 ] ;
8175: LD_ADDR_VAR 0 9
8179: PUSH
8180: LD_INT 14
8182: PUSH
8183: LD_INT 50
8185: PUSH
8186: LD_INT 16
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8194: LD_VAR 0 6
8198: PPUSH
8199: CALL_OW 264
8203: PUSH
8204: LD_INT 6
8206: PUSH
8207: LD_INT 46
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: IN
8214: IFFALSE 8235
// points := [ 32 , 120 , 70 ] ;
8216: LD_ADDR_VAR 0 9
8220: PUSH
8221: LD_INT 32
8223: PUSH
8224: LD_INT 120
8226: PUSH
8227: LD_INT 70
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8235: LD_VAR 0 6
8239: PPUSH
8240: CALL_OW 264
8244: PUSH
8245: LD_INT 7
8247: PUSH
8248: LD_INT 28
8250: PUSH
8251: LD_INT 45
8253: PUSH
8254: LD_INT 92
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: IN
8263: IFFALSE 8284
// points := [ 35 , 20 , 45 ] ;
8265: LD_ADDR_VAR 0 9
8269: PUSH
8270: LD_INT 35
8272: PUSH
8273: LD_INT 20
8275: PUSH
8276: LD_INT 45
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8284: LD_VAR 0 6
8288: PPUSH
8289: CALL_OW 264
8293: PUSH
8294: LD_INT 47
8296: PUSH
8297: EMPTY
8298: LIST
8299: IN
8300: IFFALSE 8321
// points := [ 67 , 45 , 75 ] ;
8302: LD_ADDR_VAR 0 9
8306: PUSH
8307: LD_INT 67
8309: PUSH
8310: LD_INT 45
8312: PUSH
8313: LD_INT 75
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8321: LD_VAR 0 6
8325: PPUSH
8326: CALL_OW 264
8330: PUSH
8331: LD_INT 26
8333: PUSH
8334: EMPTY
8335: LIST
8336: IN
8337: IFFALSE 8358
// points := [ 120 , 30 , 80 ] ;
8339: LD_ADDR_VAR 0 9
8343: PUSH
8344: LD_INT 120
8346: PUSH
8347: LD_INT 30
8349: PUSH
8350: LD_INT 80
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8358: LD_VAR 0 6
8362: PPUSH
8363: CALL_OW 264
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: EMPTY
8372: LIST
8373: IN
8374: IFFALSE 8395
// points := [ 40 , 1 , 1 ] ;
8376: LD_ADDR_VAR 0 9
8380: PUSH
8381: LD_INT 40
8383: PUSH
8384: LD_INT 1
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8395: LD_VAR 0 6
8399: PPUSH
8400: CALL_OW 264
8404: PUSH
8405: LD_INT 29
8407: PUSH
8408: EMPTY
8409: LIST
8410: IN
8411: IFFALSE 8432
// points := [ 70 , 200 , 400 ] ;
8413: LD_ADDR_VAR 0 9
8417: PUSH
8418: LD_INT 70
8420: PUSH
8421: LD_INT 200
8423: PUSH
8424: LD_INT 400
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8432: LD_VAR 0 6
8436: PPUSH
8437: CALL_OW 264
8441: PUSH
8442: LD_INT 14
8444: PUSH
8445: LD_INT 53
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: IN
8452: IFFALSE 8473
// points := [ 40 , 10 , 20 ] ;
8454: LD_ADDR_VAR 0 9
8458: PUSH
8459: LD_INT 40
8461: PUSH
8462: LD_INT 10
8464: PUSH
8465: LD_INT 20
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8473: LD_VAR 0 6
8477: PPUSH
8478: CALL_OW 264
8482: PUSH
8483: LD_INT 9
8485: PUSH
8486: EMPTY
8487: LIST
8488: IN
8489: IFFALSE 8510
// points := [ 5 , 70 , 20 ] ;
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: LD_INT 70
8501: PUSH
8502: LD_INT 20
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8510: LD_VAR 0 6
8514: PPUSH
8515: CALL_OW 264
8519: PUSH
8520: LD_INT 10
8522: PUSH
8523: EMPTY
8524: LIST
8525: IN
8526: IFFALSE 8547
// points := [ 35 , 110 , 70 ] ;
8528: LD_ADDR_VAR 0 9
8532: PUSH
8533: LD_INT 35
8535: PUSH
8536: LD_INT 110
8538: PUSH
8539: LD_INT 70
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8547: LD_VAR 0 6
8551: PPUSH
8552: CALL_OW 265
8556: PUSH
8557: LD_INT 25
8559: EQUAL
8560: IFFALSE 8581
// points := [ 80 , 65 , 100 ] ;
8562: LD_ADDR_VAR 0 9
8566: PUSH
8567: LD_INT 80
8569: PUSH
8570: LD_INT 65
8572: PUSH
8573: LD_INT 100
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8581: LD_VAR 0 6
8585: PPUSH
8586: CALL_OW 263
8590: PUSH
8591: LD_INT 1
8593: EQUAL
8594: IFFALSE 8629
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8596: LD_ADDR_VAR 0 10
8600: PUSH
8601: LD_VAR 0 10
8605: PUSH
8606: LD_VAR 0 6
8610: PPUSH
8611: CALL_OW 311
8615: PPUSH
8616: LD_INT 3
8618: PPUSH
8619: CALL_OW 259
8623: PUSH
8624: LD_INT 4
8626: MUL
8627: MUL
8628: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8629: LD_VAR 0 6
8633: PPUSH
8634: CALL_OW 263
8638: PUSH
8639: LD_INT 2
8641: EQUAL
8642: IFFALSE 8693
// begin j := IsControledBy ( i ) ;
8644: LD_ADDR_VAR 0 7
8648: PUSH
8649: LD_VAR 0 6
8653: PPUSH
8654: CALL_OW 312
8658: ST_TO_ADDR
// if j then
8659: LD_VAR 0 7
8663: IFFALSE 8693
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8665: LD_ADDR_VAR 0 10
8669: PUSH
8670: LD_VAR 0 10
8674: PUSH
8675: LD_VAR 0 7
8679: PPUSH
8680: LD_INT 3
8682: PPUSH
8683: CALL_OW 259
8687: PUSH
8688: LD_INT 3
8690: MUL
8691: MUL
8692: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8693: LD_VAR 0 6
8697: PPUSH
8698: CALL_OW 264
8702: PUSH
8703: LD_INT 5
8705: PUSH
8706: LD_INT 6
8708: PUSH
8709: LD_INT 46
8711: PUSH
8712: LD_INT 44
8714: PUSH
8715: LD_INT 47
8717: PUSH
8718: LD_INT 45
8720: PUSH
8721: LD_INT 28
8723: PUSH
8724: LD_INT 7
8726: PUSH
8727: LD_INT 27
8729: PUSH
8730: LD_INT 29
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: IN
8745: IFFALSE 8765
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 52
8755: PPUSH
8756: CALL_OW 321
8760: PUSH
8761: LD_INT 2
8763: EQUAL
8764: AND
8765: IFFALSE 8782
// bpoints := bpoints * 1.2 ;
8767: LD_ADDR_VAR 0 10
8771: PUSH
8772: LD_VAR 0 10
8776: PUSH
8777: LD_REAL  1.20000000000000E+0000
8780: MUL
8781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8782: LD_VAR 0 6
8786: PPUSH
8787: CALL_OW 264
8791: PUSH
8792: LD_INT 6
8794: PUSH
8795: LD_INT 46
8797: PUSH
8798: LD_INT 47
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: IN
8806: IFFALSE 8823
// bpoints := bpoints * 1.2 ;
8808: LD_ADDR_VAR 0 10
8812: PUSH
8813: LD_VAR 0 10
8817: PUSH
8818: LD_REAL  1.20000000000000E+0000
8821: MUL
8822: ST_TO_ADDR
// end ; unit_building :
8823: GO 8837
8825: LD_INT 3
8827: DOUBLE
8828: EQUAL
8829: IFTRUE 8833
8831: GO 8836
8833: POP
// ; end ;
8834: GO 8837
8836: POP
// for j = 1 to 3 do
8837: LD_ADDR_VAR 0 7
8841: PUSH
8842: DOUBLE
8843: LD_INT 1
8845: DEC
8846: ST_TO_ADDR
8847: LD_INT 3
8849: PUSH
8850: FOR_TO
8851: IFFALSE 8904
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8853: LD_ADDR_VAR 0 5
8857: PUSH
8858: LD_VAR 0 5
8862: PPUSH
8863: LD_VAR 0 7
8867: PPUSH
8868: LD_VAR 0 5
8872: PUSH
8873: LD_VAR 0 7
8877: ARRAY
8878: PUSH
8879: LD_VAR 0 9
8883: PUSH
8884: LD_VAR 0 7
8888: ARRAY
8889: PUSH
8890: LD_VAR 0 10
8894: MUL
8895: PLUS
8896: PPUSH
8897: CALL_OW 1
8901: ST_TO_ADDR
8902: GO 8850
8904: POP
8905: POP
// end ;
8906: GO 7379
8908: POP
8909: POP
// result := Replace ( result , 4 , tmp ) ;
8910: LD_ADDR_VAR 0 5
8914: PUSH
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_INT 4
8922: PPUSH
8923: LD_VAR 0 8
8927: PPUSH
8928: CALL_OW 1
8932: ST_TO_ADDR
// end ;
8933: LD_VAR 0 5
8937: RET
// export function DangerAtRange ( unit , range ) ; begin
8938: LD_INT 0
8940: PPUSH
// if not unit then
8941: LD_VAR 0 1
8945: NOT
8946: IFFALSE 8950
// exit ;
8948: GO 8995
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 255
8964: PPUSH
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 250
8974: PPUSH
8975: LD_VAR 0 1
8979: PPUSH
8980: CALL_OW 251
8984: PPUSH
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL 7229 0 4
8994: ST_TO_ADDR
// end ;
8995: LD_VAR 0 3
8999: RET
// export function DangerInArea ( side , area ) ; begin
9000: LD_INT 0
9002: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9003: LD_ADDR_VAR 0 3
9007: PUSH
9008: LD_VAR 0 2
9012: PPUSH
9013: LD_INT 81
9015: PUSH
9016: LD_VAR 0 1
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 70
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 3
9034: RET
// export function IsExtension ( b ) ; begin
9035: LD_INT 0
9037: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_VAR 0 1
9047: PUSH
9048: LD_INT 23
9050: PUSH
9051: LD_INT 20
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_INT 17
9059: PUSH
9060: LD_INT 24
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 19
9068: PUSH
9069: LD_INT 16
9071: PUSH
9072: LD_INT 25
9074: PUSH
9075: LD_INT 18
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: IN
9090: ST_TO_ADDR
// end ;
9091: LD_VAR 0 2
9095: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
// result := [ ] ;
9101: LD_ADDR_VAR 0 4
9105: PUSH
9106: EMPTY
9107: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9108: LD_ADDR_VAR 0 5
9112: PUSH
9113: LD_VAR 0 2
9117: PPUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 3
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 70
9132: ST_TO_ADDR
// if not tmp then
9133: LD_VAR 0 5
9137: NOT
9138: IFFALSE 9142
// exit ;
9140: GO 9206
// if checkLink then
9142: LD_VAR 0 3
9146: IFFALSE 9196
// begin for i in tmp do
9148: LD_ADDR_VAR 0 6
9152: PUSH
9153: LD_VAR 0 5
9157: PUSH
9158: FOR_IN
9159: IFFALSE 9194
// if GetBase ( i ) <> base then
9161: LD_VAR 0 6
9165: PPUSH
9166: CALL_OW 274
9170: PUSH
9171: LD_VAR 0 1
9175: NONEQUAL
9176: IFFALSE 9192
// ComLinkToBase ( base , i ) ;
9178: LD_VAR 0 1
9182: PPUSH
9183: LD_VAR 0 6
9187: PPUSH
9188: CALL_OW 169
9192: GO 9158
9194: POP
9195: POP
// end ; result := tmp ;
9196: LD_ADDR_VAR 0 4
9200: PUSH
9201: LD_VAR 0 5
9205: ST_TO_ADDR
// end ;
9206: LD_VAR 0 4
9210: RET
// export function ComComplete ( units , b ) ; var i ; begin
9211: LD_INT 0
9213: PPUSH
9214: PPUSH
// if not units then
9215: LD_VAR 0 1
9219: NOT
9220: IFFALSE 9224
// exit ;
9222: GO 9314
// for i in units do
9224: LD_ADDR_VAR 0 4
9228: PUSH
9229: LD_VAR 0 1
9233: PUSH
9234: FOR_IN
9235: IFFALSE 9312
// if BuildingStatus ( b ) = bs_build then
9237: LD_VAR 0 2
9241: PPUSH
9242: CALL_OW 461
9246: PUSH
9247: LD_INT 1
9249: EQUAL
9250: IFFALSE 9310
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9252: LD_VAR 0 4
9256: PPUSH
9257: LD_STRING h
9259: PUSH
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 250
9269: PUSH
9270: LD_VAR 0 2
9274: PPUSH
9275: CALL_OW 251
9279: PUSH
9280: LD_VAR 0 2
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: PPUSH
9306: CALL_OW 446
9310: GO 9234
9312: POP
9313: POP
// end ;
9314: LD_VAR 0 3
9318: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9319: LD_INT 0
9321: PPUSH
9322: PPUSH
9323: PPUSH
9324: PPUSH
9325: PPUSH
9326: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9327: LD_VAR 0 1
9331: NOT
9332: IFTRUE 9349
9334: PUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: CALL_OW 263
9344: PUSH
9345: LD_INT 2
9347: NONEQUAL
9348: OR
9349: IFFALSE 9353
// exit ;
9351: GO 9669
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9353: LD_ADDR_VAR 0 6
9357: PUSH
9358: LD_INT 22
9360: PUSH
9361: LD_VAR 0 1
9365: PPUSH
9366: CALL_OW 255
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 30
9380: PUSH
9381: LD_INT 36
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 34
9390: PUSH
9391: LD_INT 31
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: ST_TO_ADDR
// if not tmp then
9412: LD_VAR 0 6
9416: NOT
9417: IFFALSE 9421
// exit ;
9419: GO 9669
// result := [ ] ;
9421: LD_ADDR_VAR 0 2
9425: PUSH
9426: EMPTY
9427: ST_TO_ADDR
// for i in tmp do
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_VAR 0 6
9437: PUSH
9438: FOR_IN
9439: IFFALSE 9510
// begin t := UnitsInside ( i ) ;
9441: LD_ADDR_VAR 0 4
9445: PUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: CALL_OW 313
9455: ST_TO_ADDR
// if t then
9456: LD_VAR 0 4
9460: IFFALSE 9508
// for j in t do
9462: LD_ADDR_VAR 0 7
9466: PUSH
9467: LD_VAR 0 4
9471: PUSH
9472: FOR_IN
9473: IFFALSE 9506
// result := Replace ( result , result + 1 , j ) ;
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: PLUS
9493: PPUSH
9494: LD_VAR 0 7
9498: PPUSH
9499: CALL_OW 1
9503: ST_TO_ADDR
9504: GO 9472
9506: POP
9507: POP
// end ;
9508: GO 9438
9510: POP
9511: POP
// if not result then
9512: LD_VAR 0 2
9516: NOT
9517: IFFALSE 9521
// exit ;
9519: GO 9669
// mech := result [ 1 ] ;
9521: LD_ADDR_VAR 0 5
9525: PUSH
9526: LD_VAR 0 2
9530: PUSH
9531: LD_INT 1
9533: ARRAY
9534: ST_TO_ADDR
// if result > 1 then
9535: LD_VAR 0 2
9539: PUSH
9540: LD_INT 1
9542: GREATER
9543: IFFALSE 9655
// begin for i = 2 to result do
9545: LD_ADDR_VAR 0 3
9549: PUSH
9550: DOUBLE
9551: LD_INT 2
9553: DEC
9554: ST_TO_ADDR
9555: LD_VAR 0 2
9559: PUSH
9560: FOR_TO
9561: IFFALSE 9653
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9563: LD_ADDR_VAR 0 4
9567: PUSH
9568: LD_VAR 0 2
9572: PUSH
9573: LD_VAR 0 3
9577: ARRAY
9578: PPUSH
9579: LD_INT 3
9581: PPUSH
9582: CALL_OW 259
9586: PUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 3
9596: ARRAY
9597: PPUSH
9598: CALL_OW 432
9602: MINUS
9603: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9604: LD_VAR 0 4
9608: PUSH
9609: LD_VAR 0 5
9613: PPUSH
9614: LD_INT 3
9616: PPUSH
9617: CALL_OW 259
9621: PUSH
9622: LD_VAR 0 5
9626: PPUSH
9627: CALL_OW 432
9631: MINUS
9632: GREATEREQUAL
9633: IFFALSE 9651
// mech := result [ i ] ;
9635: LD_ADDR_VAR 0 5
9639: PUSH
9640: LD_VAR 0 2
9644: PUSH
9645: LD_VAR 0 3
9649: ARRAY
9650: ST_TO_ADDR
// end ;
9651: GO 9560
9653: POP
9654: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: LD_VAR 0 5
9664: PPUSH
9665: CALL_OW 135
// end ;
9669: LD_VAR 0 2
9673: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9674: LD_INT 0
9676: PPUSH
9677: PPUSH
9678: PPUSH
9679: PPUSH
9680: PPUSH
9681: PPUSH
9682: PPUSH
9683: PPUSH
9684: PPUSH
9685: PPUSH
9686: PPUSH
9687: PPUSH
9688: PPUSH
// result := [ ] ;
9689: LD_ADDR_VAR 0 7
9693: PUSH
9694: EMPTY
9695: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL_OW 266
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: IN
9716: NOT
9717: IFFALSE 9721
// exit ;
9719: GO 11361
// if name then
9721: LD_VAR 0 3
9725: IFFALSE 9741
// SetBName ( base_dep , name ) ;
9727: LD_VAR 0 1
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: CALL_OW 500
// base := GetBase ( base_dep ) ;
9741: LD_ADDR_VAR 0 15
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 274
9755: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9756: LD_ADDR_VAR 0 16
9760: PUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: CALL_OW 255
9770: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9771: LD_ADDR_VAR 0 17
9775: PUSH
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 248
9785: ST_TO_ADDR
// if sources then
9786: LD_VAR 0 5
9790: IFFALSE 9837
// for i = 1 to 3 do
9792: LD_ADDR_VAR 0 8
9796: PUSH
9797: DOUBLE
9798: LD_INT 1
9800: DEC
9801: ST_TO_ADDR
9802: LD_INT 3
9804: PUSH
9805: FOR_TO
9806: IFFALSE 9835
// AddResourceType ( base , i , sources [ i ] ) ;
9808: LD_VAR 0 15
9812: PPUSH
9813: LD_VAR 0 8
9817: PPUSH
9818: LD_VAR 0 5
9822: PUSH
9823: LD_VAR 0 8
9827: ARRAY
9828: PPUSH
9829: CALL_OW 276
9833: GO 9805
9835: POP
9836: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9837: LD_ADDR_VAR 0 18
9841: PUSH
9842: LD_VAR 0 15
9846: PPUSH
9847: LD_VAR 0 2
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: CALL 9096 0 3
9859: ST_TO_ADDR
// InitHc ;
9860: CALL_OW 19
// InitUc ;
9864: CALL_OW 18
// uc_side := side ;
9868: LD_ADDR_OWVAR 20
9872: PUSH
9873: LD_VAR 0 16
9877: ST_TO_ADDR
// uc_nation := nation ;
9878: LD_ADDR_OWVAR 21
9882: PUSH
9883: LD_VAR 0 17
9887: ST_TO_ADDR
// if buildings then
9888: LD_VAR 0 18
9892: IFFALSE 11220
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9894: LD_ADDR_VAR 0 19
9898: PUSH
9899: LD_VAR 0 18
9903: PPUSH
9904: LD_INT 2
9906: PUSH
9907: LD_INT 30
9909: PUSH
9910: LD_INT 29
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 30
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 72
9936: ST_TO_ADDR
// if tmp then
9937: LD_VAR 0 19
9941: IFFALSE 9989
// for i in tmp do
9943: LD_ADDR_VAR 0 8
9947: PUSH
9948: LD_VAR 0 19
9952: PUSH
9953: FOR_IN
9954: IFFALSE 9987
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9956: LD_VAR 0 8
9960: PPUSH
9961: CALL_OW 250
9965: PPUSH
9966: LD_VAR 0 8
9970: PPUSH
9971: CALL_OW 251
9975: PPUSH
9976: LD_VAR 0 16
9980: PPUSH
9981: CALL_OW 441
9985: GO 9953
9987: POP
9988: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9989: LD_VAR 0 18
9993: PPUSH
9994: LD_INT 2
9996: PUSH
9997: LD_INT 30
9999: PUSH
10000: LD_INT 32
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 30
10009: PUSH
10010: LD_INT 33
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: IFFALSE 10114
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10028: LD_ADDR_VAR 0 8
10032: PUSH
10033: LD_VAR 0 18
10037: PPUSH
10038: LD_INT 2
10040: PUSH
10041: LD_INT 30
10043: PUSH
10044: LD_INT 32
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: LD_INT 33
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: PPUSH
10066: CALL_OW 72
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10112
// begin if not GetBWeapon ( i ) then
10074: LD_VAR 0 8
10078: PPUSH
10079: CALL_OW 269
10083: NOT
10084: IFFALSE 10110
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10086: LD_VAR 0 8
10090: PPUSH
10091: LD_VAR 0 8
10095: PPUSH
10096: LD_VAR 0 2
10100: PPUSH
10101: CALL 11366 0 2
10105: PPUSH
10106: CALL_OW 431
// end ;
10110: GO 10071
10112: POP
10113: POP
// end ; for i = 1 to personel do
10114: LD_ADDR_VAR 0 8
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_VAR 0 6
10128: PUSH
10129: FOR_TO
10130: IFFALSE 11200
// begin if i > 4 then
10132: LD_VAR 0 8
10136: PUSH
10137: LD_INT 4
10139: GREATER
10140: IFFALSE 10144
// break ;
10142: GO 11200
// case i of 1 :
10144: LD_VAR 0 8
10148: PUSH
10149: LD_INT 1
10151: DOUBLE
10152: EQUAL
10153: IFTRUE 10157
10155: GO 10237
10157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10158: LD_ADDR_VAR 0 12
10162: PUSH
10163: LD_VAR 0 18
10167: PPUSH
10168: LD_INT 22
10170: PUSH
10171: LD_VAR 0 16
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 58
10182: PUSH
10183: EMPTY
10184: LIST
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 30
10191: PUSH
10192: LD_INT 32
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 30
10211: PUSH
10212: LD_INT 5
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: PPUSH
10230: CALL_OW 72
10234: ST_TO_ADDR
10235: GO 10459
10237: LD_INT 2
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10307
10245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10246: LD_ADDR_VAR 0 12
10250: PUSH
10251: LD_VAR 0 18
10255: PPUSH
10256: LD_INT 22
10258: PUSH
10259: LD_VAR 0 16
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 2
10270: PUSH
10271: LD_INT 30
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 30
10283: PUSH
10284: LD_INT 1
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PPUSH
10300: CALL_OW 72
10304: ST_TO_ADDR
10305: GO 10459
10307: LD_INT 3
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10377
10315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10316: LD_ADDR_VAR 0 12
10320: PUSH
10321: LD_VAR 0 18
10325: PPUSH
10326: LD_INT 22
10328: PUSH
10329: LD_VAR 0 16
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: LD_INT 30
10343: PUSH
10344: LD_INT 2
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 30
10353: PUSH
10354: LD_INT 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 72
10374: ST_TO_ADDR
10375: GO 10459
10377: LD_INT 4
10379: DOUBLE
10380: EQUAL
10381: IFTRUE 10385
10383: GO 10458
10385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10386: LD_ADDR_VAR 0 12
10390: PUSH
10391: LD_VAR 0 18
10395: PPUSH
10396: LD_INT 22
10398: PUSH
10399: LD_VAR 0 16
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 2
10410: PUSH
10411: LD_INT 30
10413: PUSH
10414: LD_INT 6
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 30
10423: PUSH
10424: LD_INT 7
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 30
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 72
10455: ST_TO_ADDR
10456: GO 10459
10458: POP
// if i = 1 then
10459: LD_VAR 0 8
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10578
// begin tmp := [ ] ;
10469: LD_ADDR_VAR 0 19
10473: PUSH
10474: EMPTY
10475: ST_TO_ADDR
// for j in f do
10476: LD_ADDR_VAR 0 9
10480: PUSH
10481: LD_VAR 0 12
10485: PUSH
10486: FOR_IN
10487: IFFALSE 10560
// if GetBType ( j ) = b_bunker then
10489: LD_VAR 0 9
10493: PPUSH
10494: CALL_OW 266
10498: PUSH
10499: LD_INT 32
10501: EQUAL
10502: IFFALSE 10529
// tmp := Insert ( tmp , 1 , j ) else
10504: LD_ADDR_VAR 0 19
10508: PUSH
10509: LD_VAR 0 19
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: LD_VAR 0 9
10521: PPUSH
10522: CALL_OW 2
10526: ST_TO_ADDR
10527: GO 10558
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10529: LD_ADDR_VAR 0 19
10533: PUSH
10534: LD_VAR 0 19
10538: PPUSH
10539: LD_VAR 0 19
10543: PUSH
10544: LD_INT 1
10546: PLUS
10547: PPUSH
10548: LD_VAR 0 9
10552: PPUSH
10553: CALL_OW 2
10557: ST_TO_ADDR
10558: GO 10486
10560: POP
10561: POP
// if tmp then
10562: LD_VAR 0 19
10566: IFFALSE 10578
// f := tmp ;
10568: LD_ADDR_VAR 0 12
10572: PUSH
10573: LD_VAR 0 19
10577: ST_TO_ADDR
// end ; x := personel [ i ] ;
10578: LD_ADDR_VAR 0 13
10582: PUSH
10583: LD_VAR 0 6
10587: PUSH
10588: LD_VAR 0 8
10592: ARRAY
10593: ST_TO_ADDR
// if x = - 1 then
10594: LD_VAR 0 13
10598: PUSH
10599: LD_INT 1
10601: NEG
10602: EQUAL
10603: IFFALSE 10814
// begin for j in f do
10605: LD_ADDR_VAR 0 9
10609: PUSH
10610: LD_VAR 0 12
10614: PUSH
10615: FOR_IN
10616: IFFALSE 10810
// repeat InitHc ;
10618: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10622: LD_VAR 0 9
10626: PPUSH
10627: CALL_OW 266
10631: PUSH
10632: LD_INT 5
10634: EQUAL
10635: IFFALSE 10705
// begin if UnitsInside ( j ) < 3 then
10637: LD_VAR 0 9
10641: PPUSH
10642: CALL_OW 313
10646: PUSH
10647: LD_INT 3
10649: LESS
10650: IFFALSE 10686
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10652: LD_INT 0
10654: PPUSH
10655: LD_INT 5
10657: PUSH
10658: LD_INT 8
10660: PUSH
10661: LD_INT 9
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: LD_VAR 0 17
10673: ARRAY
10674: PPUSH
10675: LD_VAR 0 4
10679: PPUSH
10680: CALL_OW 380
10684: GO 10703
// PrepareHuman ( false , i , skill ) ;
10686: LD_INT 0
10688: PPUSH
10689: LD_VAR 0 8
10693: PPUSH
10694: LD_VAR 0 4
10698: PPUSH
10699: CALL_OW 380
// end else
10703: GO 10722
// PrepareHuman ( false , i , skill ) ;
10705: LD_INT 0
10707: PPUSH
10708: LD_VAR 0 8
10712: PPUSH
10713: LD_VAR 0 4
10717: PPUSH
10718: CALL_OW 380
// un := CreateHuman ;
10722: LD_ADDR_VAR 0 14
10726: PUSH
10727: CALL_OW 44
10731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10732: LD_ADDR_VAR 0 7
10736: PUSH
10737: LD_VAR 0 7
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: LD_VAR 0 14
10749: PPUSH
10750: CALL_OW 2
10754: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10755: LD_VAR 0 14
10759: PPUSH
10760: LD_VAR 0 9
10764: PPUSH
10765: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10769: LD_VAR 0 9
10773: PPUSH
10774: CALL_OW 313
10778: PUSH
10779: LD_INT 6
10781: EQUAL
10782: IFTRUE 10806
10784: PUSH
10785: LD_VAR 0 9
10789: PPUSH
10790: CALL_OW 266
10794: PUSH
10795: LD_INT 32
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: IN
10805: OR
10806: IFFALSE 10618
10808: GO 10615
10810: POP
10811: POP
// end else
10812: GO 11198
// for j = 1 to x do
10814: LD_ADDR_VAR 0 9
10818: PUSH
10819: DOUBLE
10820: LD_INT 1
10822: DEC
10823: ST_TO_ADDR
10824: LD_VAR 0 13
10828: PUSH
10829: FOR_TO
10830: IFFALSE 11196
// begin InitHc ;
10832: CALL_OW 19
// if not f then
10836: LD_VAR 0 12
10840: NOT
10841: IFFALSE 10930
// begin PrepareHuman ( false , i , skill ) ;
10843: LD_INT 0
10845: PPUSH
10846: LD_VAR 0 8
10850: PPUSH
10851: LD_VAR 0 4
10855: PPUSH
10856: CALL_OW 380
// un := CreateHuman ;
10860: LD_ADDR_VAR 0 14
10864: PUSH
10865: CALL_OW 44
10869: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10870: LD_ADDR_VAR 0 7
10874: PUSH
10875: LD_VAR 0 7
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: LD_VAR 0 14
10887: PPUSH
10888: CALL_OW 2
10892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10893: LD_VAR 0 14
10897: PPUSH
10898: LD_VAR 0 1
10902: PPUSH
10903: CALL_OW 250
10907: PPUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 251
10917: PPUSH
10918: LD_INT 10
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 50
// continue ;
10928: GO 10829
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10930: LD_VAR 0 12
10934: PUSH
10935: LD_INT 1
10937: ARRAY
10938: PPUSH
10939: CALL_OW 313
10943: IFFALSE 10971
10945: PUSH
10946: LD_VAR 0 12
10950: PUSH
10951: LD_INT 1
10953: ARRAY
10954: PPUSH
10955: CALL_OW 266
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: LD_INT 31
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: IN
10970: AND
10971: IFTRUE 10992
10973: PUSH
10974: LD_VAR 0 12
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: CALL_OW 313
10987: PUSH
10988: LD_INT 6
10990: EQUAL
10991: OR
10992: IFFALSE 11012
// f := Delete ( f , 1 ) ;
10994: LD_ADDR_VAR 0 12
10998: PUSH
10999: LD_VAR 0 12
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 3
11011: ST_TO_ADDR
// if not f then
11012: LD_VAR 0 12
11016: NOT
11017: IFFALSE 11035
// begin x := x + 2 ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 13
11028: PUSH
11029: LD_INT 2
11031: PLUS
11032: ST_TO_ADDR
// continue ;
11033: GO 10829
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11035: LD_VAR 0 12
11039: PUSH
11040: LD_INT 1
11042: ARRAY
11043: PPUSH
11044: CALL_OW 266
11048: PUSH
11049: LD_INT 5
11051: EQUAL
11052: IFFALSE 11126
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11054: LD_VAR 0 12
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PPUSH
11063: CALL_OW 313
11067: PUSH
11068: LD_INT 3
11070: LESS
11071: IFFALSE 11107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11073: LD_INT 0
11075: PPUSH
11076: LD_INT 5
11078: PUSH
11079: LD_INT 8
11081: PUSH
11082: LD_INT 9
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: LD_VAR 0 17
11094: ARRAY
11095: PPUSH
11096: LD_VAR 0 4
11100: PPUSH
11101: CALL_OW 380
11105: GO 11124
// PrepareHuman ( false , i , skill ) ;
11107: LD_INT 0
11109: PPUSH
11110: LD_VAR 0 8
11114: PPUSH
11115: LD_VAR 0 4
11119: PPUSH
11120: CALL_OW 380
// end else
11124: GO 11143
// PrepareHuman ( false , i , skill ) ;
11126: LD_INT 0
11128: PPUSH
11129: LD_VAR 0 8
11133: PPUSH
11134: LD_VAR 0 4
11138: PPUSH
11139: CALL_OW 380
// un := CreateHuman ;
11143: LD_ADDR_VAR 0 14
11147: PUSH
11148: CALL_OW 44
11152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11153: LD_ADDR_VAR 0 7
11157: PUSH
11158: LD_VAR 0 7
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: LD_VAR 0 14
11170: PPUSH
11171: CALL_OW 2
11175: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11176: LD_VAR 0 14
11180: PPUSH
11181: LD_VAR 0 12
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PPUSH
11190: CALL_OW 52
// end ;
11194: GO 10829
11196: POP
11197: POP
// end ;
11198: GO 10129
11200: POP
11201: POP
// result := result ^ buildings ;
11202: LD_ADDR_VAR 0 7
11206: PUSH
11207: LD_VAR 0 7
11211: PUSH
11212: LD_VAR 0 18
11216: ADD
11217: ST_TO_ADDR
// end else
11218: GO 11361
// begin for i = 1 to personel do
11220: LD_ADDR_VAR 0 8
11224: PUSH
11225: DOUBLE
11226: LD_INT 1
11228: DEC
11229: ST_TO_ADDR
11230: LD_VAR 0 6
11234: PUSH
11235: FOR_TO
11236: IFFALSE 11359
// begin if i > 4 then
11238: LD_VAR 0 8
11242: PUSH
11243: LD_INT 4
11245: GREATER
11246: IFFALSE 11250
// break ;
11248: GO 11359
// x := personel [ i ] ;
11250: LD_ADDR_VAR 0 13
11254: PUSH
11255: LD_VAR 0 6
11259: PUSH
11260: LD_VAR 0 8
11264: ARRAY
11265: ST_TO_ADDR
// if x = - 1 then
11266: LD_VAR 0 13
11270: PUSH
11271: LD_INT 1
11273: NEG
11274: EQUAL
11275: IFFALSE 11279
// continue ;
11277: GO 11235
// PrepareHuman ( false , i , skill ) ;
11279: LD_INT 0
11281: PPUSH
11282: LD_VAR 0 8
11286: PPUSH
11287: LD_VAR 0 4
11291: PPUSH
11292: CALL_OW 380
// un := CreateHuman ;
11296: LD_ADDR_VAR 0 14
11300: PUSH
11301: CALL_OW 44
11305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11306: LD_VAR 0 14
11310: PPUSH
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL_OW 250
11320: PPUSH
11321: LD_VAR 0 1
11325: PPUSH
11326: CALL_OW 251
11330: PPUSH
11331: LD_INT 10
11333: PPUSH
11334: LD_INT 0
11336: PPUSH
11337: CALL_OW 50
// result := result ^ un ;
11341: LD_ADDR_VAR 0 7
11345: PUSH
11346: LD_VAR 0 7
11350: PUSH
11351: LD_VAR 0 14
11355: ADD
11356: ST_TO_ADDR
// end ;
11357: GO 11235
11359: POP
11360: POP
// end ; end ;
11361: LD_VAR 0 7
11365: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11366: LD_INT 0
11368: PPUSH
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// result := false ;
11384: LD_ADDR_VAR 0 3
11388: PUSH
11389: LD_INT 0
11391: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11392: LD_VAR 0 1
11396: NOT
11397: IFTRUE 11422
11399: PUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 266
11409: PUSH
11410: LD_INT 32
11412: PUSH
11413: LD_INT 33
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: IN
11420: NOT
11421: OR
11422: IFFALSE 11426
// exit ;
11424: GO 12561
// nat := GetNation ( tower ) ;
11426: LD_ADDR_VAR 0 12
11430: PUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 248
11440: ST_TO_ADDR
// side := GetSide ( tower ) ;
11441: LD_ADDR_VAR 0 16
11445: PUSH
11446: LD_VAR 0 1
11450: PPUSH
11451: CALL_OW 255
11455: ST_TO_ADDR
// x := GetX ( tower ) ;
11456: LD_ADDR_VAR 0 10
11460: PUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 250
11470: ST_TO_ADDR
// y := GetY ( tower ) ;
11471: LD_ADDR_VAR 0 11
11475: PUSH
11476: LD_VAR 0 1
11480: PPUSH
11481: CALL_OW 251
11485: ST_TO_ADDR
// if not x or not y then
11486: LD_VAR 0 10
11490: NOT
11491: IFTRUE 11500
11493: PUSH
11494: LD_VAR 0 11
11498: NOT
11499: OR
11500: IFFALSE 11504
// exit ;
11502: GO 12561
// weapon := 0 ;
11504: LD_ADDR_VAR 0 18
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// fac_list := [ ] ;
11512: LD_ADDR_VAR 0 17
11516: PUSH
11517: EMPTY
11518: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11519: LD_ADDR_VAR 0 6
11523: PUSH
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 274
11533: PPUSH
11534: LD_VAR 0 2
11538: PPUSH
11539: LD_INT 0
11541: PPUSH
11542: CALL 9096 0 3
11546: PPUSH
11547: LD_INT 30
11549: PUSH
11550: LD_INT 3
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PPUSH
11557: CALL_OW 72
11561: ST_TO_ADDR
// if not factories then
11562: LD_VAR 0 6
11566: NOT
11567: IFFALSE 11571
// exit ;
11569: GO 12561
// for i in factories do
11571: LD_ADDR_VAR 0 8
11575: PUSH
11576: LD_VAR 0 6
11580: PUSH
11581: FOR_IN
11582: IFFALSE 11607
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11584: LD_ADDR_VAR 0 17
11588: PUSH
11589: LD_VAR 0 17
11593: PUSH
11594: LD_VAR 0 8
11598: PPUSH
11599: CALL_OW 478
11603: UNION
11604: ST_TO_ADDR
11605: GO 11581
11607: POP
11608: POP
// if not fac_list then
11609: LD_VAR 0 17
11613: NOT
11614: IFFALSE 11618
// exit ;
11616: GO 12561
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11618: LD_ADDR_VAR 0 5
11622: PUSH
11623: LD_INT 4
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: LD_INT 9
11631: PUSH
11632: LD_INT 10
11634: PUSH
11635: LD_INT 6
11637: PUSH
11638: LD_INT 7
11640: PUSH
11641: LD_INT 11
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 27
11655: PUSH
11656: LD_INT 28
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: LD_INT 30
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 43
11673: PUSH
11674: LD_INT 44
11676: PUSH
11677: LD_INT 46
11679: PUSH
11680: LD_INT 45
11682: PUSH
11683: LD_INT 47
11685: PUSH
11686: LD_INT 49
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: LD_VAR 0 12
11706: ARRAY
11707: ST_TO_ADDR
// list := list isect fac_list ;
11708: LD_ADDR_VAR 0 5
11712: PUSH
11713: LD_VAR 0 5
11717: PUSH
11718: LD_VAR 0 17
11722: ISECT
11723: ST_TO_ADDR
// if not list then
11724: LD_VAR 0 5
11728: NOT
11729: IFFALSE 11733
// exit ;
11731: GO 12561
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11733: LD_VAR 0 12
11737: PUSH
11738: LD_INT 3
11740: EQUAL
11741: IFFALSE 11753
11743: PUSH
11744: LD_INT 49
11746: PUSH
11747: LD_VAR 0 5
11751: IN
11752: AND
11753: IFFALSE 11773
11755: PUSH
11756: LD_INT 31
11758: PPUSH
11759: LD_VAR 0 16
11763: PPUSH
11764: CALL_OW 321
11768: PUSH
11769: LD_INT 2
11771: EQUAL
11772: AND
11773: IFFALSE 11833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11775: LD_INT 22
11777: PUSH
11778: LD_VAR 0 16
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 35
11789: PUSH
11790: LD_INT 49
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 91
11799: PUSH
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 10
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL_OW 69
11822: NOT
11823: IFFALSE 11833
// weapon := ru_time_lapser ;
11825: LD_ADDR_VAR 0 18
11829: PUSH
11830: LD_INT 49
11832: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11833: LD_VAR 0 12
11837: PUSH
11838: LD_INT 1
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: IN
11848: IFFALSE 11872
11850: PUSH
11851: LD_INT 11
11853: PUSH
11854: LD_VAR 0 5
11858: IN
11859: IFTRUE 11871
11861: PUSH
11862: LD_INT 30
11864: PUSH
11865: LD_VAR 0 5
11869: IN
11870: OR
11871: AND
11872: IFFALSE 11892
11874: PUSH
11875: LD_INT 6
11877: PPUSH
11878: LD_VAR 0 16
11882: PPUSH
11883: CALL_OW 321
11887: PUSH
11888: LD_INT 2
11890: EQUAL
11891: AND
11892: IFFALSE 12059
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11894: LD_INT 22
11896: PUSH
11897: LD_VAR 0 16
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 2
11908: PUSH
11909: LD_INT 35
11911: PUSH
11912: LD_INT 11
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 35
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 91
11936: PUSH
11937: LD_VAR 0 1
11941: PUSH
11942: LD_INT 18
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: NOT
11960: IFFALSE 12036
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_VAR 0 16
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 2
11977: PUSH
11978: LD_INT 30
11980: PUSH
11981: LD_INT 32
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 33
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 91
12005: PUSH
12006: LD_VAR 0 1
12010: PUSH
12011: LD_INT 12
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: PUSH
12032: LD_INT 2
12034: GREATER
12035: AND
12036: IFFALSE 12059
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12038: LD_ADDR_VAR 0 18
12042: PUSH
12043: LD_INT 11
12045: PUSH
12046: LD_INT 30
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_VAR 0 12
12057: ARRAY
12058: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12059: LD_VAR 0 18
12063: NOT
12064: IFFALSE 12084
12066: PUSH
12067: LD_INT 40
12069: PPUSH
12070: LD_VAR 0 16
12074: PPUSH
12075: CALL_OW 321
12079: PUSH
12080: LD_INT 2
12082: EQUAL
12083: AND
12084: IFFALSE 12120
12086: PUSH
12087: LD_INT 7
12089: PUSH
12090: LD_VAR 0 5
12094: IN
12095: IFTRUE 12107
12097: PUSH
12098: LD_INT 28
12100: PUSH
12101: LD_VAR 0 5
12105: IN
12106: OR
12107: IFTRUE 12119
12109: PUSH
12110: LD_INT 45
12112: PUSH
12113: LD_VAR 0 5
12117: IN
12118: OR
12119: AND
12120: IFFALSE 12374
// begin hex := GetHexInfo ( x , y ) ;
12122: LD_ADDR_VAR 0 4
12126: PUSH
12127: LD_VAR 0 10
12131: PPUSH
12132: LD_VAR 0 11
12136: PPUSH
12137: CALL_OW 546
12141: ST_TO_ADDR
// if hex [ 1 ] then
12142: LD_VAR 0 4
12146: PUSH
12147: LD_INT 1
12149: ARRAY
12150: IFFALSE 12154
// exit ;
12152: GO 12561
// height := hex [ 2 ] ;
12154: LD_ADDR_VAR 0 15
12158: PUSH
12159: LD_VAR 0 4
12163: PUSH
12164: LD_INT 2
12166: ARRAY
12167: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12168: LD_ADDR_VAR 0 14
12172: PUSH
12173: LD_INT 0
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: LD_INT 5
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: ST_TO_ADDR
// for i in tmp do
12191: LD_ADDR_VAR 0 8
12195: PUSH
12196: LD_VAR 0 14
12200: PUSH
12201: FOR_IN
12202: IFFALSE 12372
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12204: LD_ADDR_VAR 0 9
12208: PUSH
12209: LD_VAR 0 10
12213: PPUSH
12214: LD_VAR 0 8
12218: PPUSH
12219: LD_INT 5
12221: PPUSH
12222: CALL_OW 272
12226: PUSH
12227: LD_VAR 0 11
12231: PPUSH
12232: LD_VAR 0 8
12236: PPUSH
12237: LD_INT 5
12239: PPUSH
12240: CALL_OW 273
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12249: LD_VAR 0 9
12253: PUSH
12254: LD_INT 1
12256: ARRAY
12257: PPUSH
12258: LD_VAR 0 9
12262: PUSH
12263: LD_INT 2
12265: ARRAY
12266: PPUSH
12267: CALL_OW 488
12271: IFFALSE 12370
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12273: LD_ADDR_VAR 0 4
12277: PUSH
12278: LD_VAR 0 9
12282: PUSH
12283: LD_INT 1
12285: ARRAY
12286: PPUSH
12287: LD_VAR 0 9
12291: PUSH
12292: LD_INT 2
12294: ARRAY
12295: PPUSH
12296: CALL_OW 546
12300: ST_TO_ADDR
// if hex [ 1 ] then
12301: LD_VAR 0 4
12305: PUSH
12306: LD_INT 1
12308: ARRAY
12309: IFFALSE 12313
// continue ;
12311: GO 12201
// h := hex [ 2 ] ;
12313: LD_ADDR_VAR 0 13
12317: PUSH
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 2
12325: ARRAY
12326: ST_TO_ADDR
// if h + 7 < height then
12327: LD_VAR 0 13
12331: PUSH
12332: LD_INT 7
12334: PLUS
12335: PUSH
12336: LD_VAR 0 15
12340: LESS
12341: IFFALSE 12370
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12343: LD_ADDR_VAR 0 18
12347: PUSH
12348: LD_INT 7
12350: PUSH
12351: LD_INT 28
12353: PUSH
12354: LD_INT 45
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: LD_VAR 0 12
12366: ARRAY
12367: ST_TO_ADDR
// break ;
12368: GO 12372
// end ; end ; end ;
12370: GO 12201
12372: POP
12373: POP
// end ; if not weapon then
12374: LD_VAR 0 18
12378: NOT
12379: IFFALSE 12439
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12381: LD_ADDR_VAR 0 5
12385: PUSH
12386: LD_VAR 0 5
12390: PUSH
12391: LD_INT 11
12393: PUSH
12394: LD_INT 30
12396: PUSH
12397: LD_INT 49
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: DIFF
12405: ST_TO_ADDR
// if not list then
12406: LD_VAR 0 5
12410: NOT
12411: IFFALSE 12415
// exit ;
12413: GO 12561
// weapon := list [ rand ( 1 , list ) ] ;
12415: LD_ADDR_VAR 0 18
12419: PUSH
12420: LD_VAR 0 5
12424: PUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_VAR 0 5
12432: PPUSH
12433: CALL_OW 12
12437: ARRAY
12438: ST_TO_ADDR
// end ; if weapon then
12439: LD_VAR 0 18
12443: IFFALSE 12561
// begin tmp := CostOfWeapon ( weapon ) ;
12445: LD_ADDR_VAR 0 14
12449: PUSH
12450: LD_VAR 0 18
12454: PPUSH
12455: CALL_OW 451
12459: ST_TO_ADDR
// j := GetBase ( tower ) ;
12460: LD_ADDR_VAR 0 9
12464: PUSH
12465: LD_VAR 0 1
12469: PPUSH
12470: CALL_OW 274
12474: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12475: LD_VAR 0 9
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 275
12487: PUSH
12488: LD_VAR 0 14
12492: PUSH
12493: LD_INT 1
12495: ARRAY
12496: GREATEREQUAL
12497: IFFALSE 12523
12499: PUSH
12500: LD_VAR 0 9
12504: PPUSH
12505: LD_INT 2
12507: PPUSH
12508: CALL_OW 275
12512: PUSH
12513: LD_VAR 0 14
12517: PUSH
12518: LD_INT 2
12520: ARRAY
12521: GREATEREQUAL
12522: AND
12523: IFFALSE 12549
12525: PUSH
12526: LD_VAR 0 9
12530: PPUSH
12531: LD_INT 3
12533: PPUSH
12534: CALL_OW 275
12538: PUSH
12539: LD_VAR 0 14
12543: PUSH
12544: LD_INT 3
12546: ARRAY
12547: GREATEREQUAL
12548: AND
12549: IFFALSE 12561
// result := weapon ;
12551: LD_ADDR_VAR 0 3
12555: PUSH
12556: LD_VAR 0 18
12560: ST_TO_ADDR
// end ; end ;
12561: LD_VAR 0 3
12565: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12566: LD_INT 0
12568: PPUSH
12569: PPUSH
// result := true ;
12570: LD_ADDR_VAR 0 3
12574: PUSH
12575: LD_INT 1
12577: ST_TO_ADDR
// if array1 = array2 then
12578: LD_VAR 0 1
12582: PUSH
12583: LD_VAR 0 2
12587: EQUAL
12588: IFFALSE 12648
// begin for i = 1 to array1 do
12590: LD_ADDR_VAR 0 4
12594: PUSH
12595: DOUBLE
12596: LD_INT 1
12598: DEC
12599: ST_TO_ADDR
12600: LD_VAR 0 1
12604: PUSH
12605: FOR_TO
12606: IFFALSE 12644
// if array1 [ i ] <> array2 [ i ] then
12608: LD_VAR 0 1
12612: PUSH
12613: LD_VAR 0 4
12617: ARRAY
12618: PUSH
12619: LD_VAR 0 2
12623: PUSH
12624: LD_VAR 0 4
12628: ARRAY
12629: NONEQUAL
12630: IFFALSE 12642
// begin result := false ;
12632: LD_ADDR_VAR 0 3
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// break ;
12640: GO 12644
// end ;
12642: GO 12605
12644: POP
12645: POP
// end else
12646: GO 12656
// result := false ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// end ;
12656: LD_VAR 0 3
12660: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12661: LD_INT 0
12663: PPUSH
12664: PPUSH
// if not array1 or not array2 then
12665: LD_VAR 0 1
12669: NOT
12670: IFTRUE 12679
12672: PUSH
12673: LD_VAR 0 2
12677: NOT
12678: OR
12679: IFFALSE 12683
// exit ;
12681: GO 12747
// result := true ;
12683: LD_ADDR_VAR 0 3
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// for i = 1 to array1 do
12691: LD_ADDR_VAR 0 4
12695: PUSH
12696: DOUBLE
12697: LD_INT 1
12699: DEC
12700: ST_TO_ADDR
12701: LD_VAR 0 1
12705: PUSH
12706: FOR_TO
12707: IFFALSE 12745
// if array1 [ i ] <> array2 [ i ] then
12709: LD_VAR 0 1
12713: PUSH
12714: LD_VAR 0 4
12718: ARRAY
12719: PUSH
12720: LD_VAR 0 2
12724: PUSH
12725: LD_VAR 0 4
12729: ARRAY
12730: NONEQUAL
12731: IFFALSE 12743
// begin result := false ;
12733: LD_ADDR_VAR 0 3
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// break ;
12741: GO 12745
// end ;
12743: GO 12706
12745: POP
12746: POP
// end ;
12747: LD_VAR 0 3
12751: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
12756: PPUSH
// pom := GetBase ( fac ) ;
12757: LD_ADDR_VAR 0 5
12761: PUSH
12762: LD_VAR 0 1
12766: PPUSH
12767: CALL_OW 274
12771: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12772: LD_ADDR_VAR 0 4
12776: PUSH
12777: LD_VAR 0 2
12781: PUSH
12782: LD_INT 1
12784: ARRAY
12785: PPUSH
12786: LD_VAR 0 2
12790: PUSH
12791: LD_INT 2
12793: ARRAY
12794: PPUSH
12795: LD_VAR 0 2
12799: PUSH
12800: LD_INT 3
12802: ARRAY
12803: PPUSH
12804: LD_VAR 0 2
12808: PUSH
12809: LD_INT 4
12811: ARRAY
12812: PPUSH
12813: CALL_OW 449
12817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: LD_VAR 0 5
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 275
12835: PUSH
12836: LD_VAR 0 4
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: GREATEREQUAL
12845: IFFALSE 12871
12847: PUSH
12848: LD_VAR 0 5
12852: PPUSH
12853: LD_INT 2
12855: PPUSH
12856: CALL_OW 275
12860: PUSH
12861: LD_VAR 0 4
12865: PUSH
12866: LD_INT 2
12868: ARRAY
12869: GREATEREQUAL
12870: AND
12871: IFFALSE 12897
12873: PUSH
12874: LD_VAR 0 5
12878: PPUSH
12879: LD_INT 3
12881: PPUSH
12882: CALL_OW 275
12886: PUSH
12887: LD_VAR 0 4
12891: PUSH
12892: LD_INT 3
12894: ARRAY
12895: GREATEREQUAL
12896: AND
12897: ST_TO_ADDR
// end ;
12898: LD_VAR 0 3
12902: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12903: LD_INT 0
12905: PPUSH
12906: PPUSH
12907: PPUSH
12908: PPUSH
// pom := GetBase ( building ) ;
12909: LD_ADDR_VAR 0 3
12913: PUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 274
12923: ST_TO_ADDR
// if not pom then
12924: LD_VAR 0 3
12928: NOT
12929: IFFALSE 12933
// exit ;
12931: GO 13107
// btype := GetBType ( building ) ;
12933: LD_ADDR_VAR 0 5
12937: PUSH
12938: LD_VAR 0 1
12942: PPUSH
12943: CALL_OW 266
12947: ST_TO_ADDR
// if btype = b_armoury then
12948: LD_VAR 0 5
12952: PUSH
12953: LD_INT 4
12955: EQUAL
12956: IFFALSE 12966
// btype := b_barracks ;
12958: LD_ADDR_VAR 0 5
12962: PUSH
12963: LD_INT 5
12965: ST_TO_ADDR
// if btype = b_depot then
12966: LD_VAR 0 5
12970: PUSH
12971: LD_INT 0
12973: EQUAL
12974: IFFALSE 12984
// btype := b_warehouse ;
12976: LD_ADDR_VAR 0 5
12980: PUSH
12981: LD_INT 1
12983: ST_TO_ADDR
// if btype = b_workshop then
12984: LD_VAR 0 5
12988: PUSH
12989: LD_INT 2
12991: EQUAL
12992: IFFALSE 13002
// btype := b_factory ;
12994: LD_ADDR_VAR 0 5
12998: PUSH
12999: LD_INT 3
13001: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13002: LD_ADDR_VAR 0 4
13006: PUSH
13007: LD_VAR 0 5
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 248
13021: PPUSH
13022: CALL_OW 450
13026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 275
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: GREATEREQUAL
13054: IFFALSE 13080
13056: PUSH
13057: LD_VAR 0 3
13061: PPUSH
13062: LD_INT 2
13064: PPUSH
13065: CALL_OW 275
13069: PUSH
13070: LD_VAR 0 4
13074: PUSH
13075: LD_INT 2
13077: ARRAY
13078: GREATEREQUAL
13079: AND
13080: IFFALSE 13106
13082: PUSH
13083: LD_VAR 0 3
13087: PPUSH
13088: LD_INT 3
13090: PPUSH
13091: CALL_OW 275
13095: PUSH
13096: LD_VAR 0 4
13100: PUSH
13101: LD_INT 3
13103: ARRAY
13104: GREATEREQUAL
13105: AND
13106: ST_TO_ADDR
// end ;
13107: LD_VAR 0 2
13111: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
13116: PPUSH
// pom := GetBase ( building ) ;
13117: LD_ADDR_VAR 0 4
13121: PUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 274
13131: ST_TO_ADDR
// if not pom then
13132: LD_VAR 0 4
13136: NOT
13137: IFFALSE 13141
// exit ;
13139: GO 13246
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13141: LD_ADDR_VAR 0 5
13145: PUSH
13146: LD_VAR 0 2
13150: PPUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 248
13160: PPUSH
13161: CALL_OW 450
13165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13166: LD_ADDR_VAR 0 3
13170: PUSH
13171: LD_VAR 0 4
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 275
13183: PUSH
13184: LD_VAR 0 5
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: GREATEREQUAL
13193: IFFALSE 13219
13195: PUSH
13196: LD_VAR 0 4
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 275
13208: PUSH
13209: LD_VAR 0 5
13213: PUSH
13214: LD_INT 2
13216: ARRAY
13217: GREATEREQUAL
13218: AND
13219: IFFALSE 13245
13221: PUSH
13222: LD_VAR 0 4
13226: PPUSH
13227: LD_INT 3
13229: PPUSH
13230: CALL_OW 275
13234: PUSH
13235: LD_VAR 0 5
13239: PUSH
13240: LD_INT 3
13242: ARRAY
13243: GREATEREQUAL
13244: AND
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 3
13250: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
// result := false ;
13264: LD_ADDR_VAR 0 8
13268: PUSH
13269: LD_INT 0
13271: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13272: LD_VAR 0 5
13276: NOT
13277: IFTRUE 13286
13279: PUSH
13280: LD_VAR 0 1
13284: NOT
13285: OR
13286: IFTRUE 13295
13288: PUSH
13289: LD_VAR 0 2
13293: NOT
13294: OR
13295: IFTRUE 13304
13297: PUSH
13298: LD_VAR 0 3
13302: NOT
13303: OR
13304: IFFALSE 13308
// exit ;
13306: GO 14134
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13308: LD_ADDR_VAR 0 14
13312: PUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: LD_VAR 0 2
13322: PPUSH
13323: LD_VAR 0 3
13327: PPUSH
13328: LD_VAR 0 4
13332: PPUSH
13333: LD_VAR 0 5
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 248
13346: PPUSH
13347: LD_INT 0
13349: PPUSH
13350: CALL 15415 0 6
13354: ST_TO_ADDR
// if not hexes then
13355: LD_VAR 0 14
13359: NOT
13360: IFFALSE 13364
// exit ;
13362: GO 14134
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13364: LD_ADDR_VAR 0 17
13368: PUSH
13369: LD_VAR 0 5
13373: PPUSH
13374: LD_INT 22
13376: PUSH
13377: LD_VAR 0 13
13381: PPUSH
13382: CALL_OW 255
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 0
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 30
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 72
13427: ST_TO_ADDR
// for i = 1 to hexes do
13428: LD_ADDR_VAR 0 9
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_VAR 0 14
13442: PUSH
13443: FOR_TO
13444: IFFALSE 14132
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13446: LD_ADDR_VAR 0 13
13450: PUSH
13451: LD_VAR 0 14
13455: PUSH
13456: LD_VAR 0 9
13460: ARRAY
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: LD_VAR 0 14
13470: PUSH
13471: LD_VAR 0 9
13475: ARRAY
13476: PUSH
13477: LD_INT 2
13479: ARRAY
13480: PPUSH
13481: CALL_OW 428
13485: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13486: LD_VAR 0 14
13490: PUSH
13491: LD_VAR 0 9
13495: ARRAY
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_VAR 0 14
13505: PUSH
13506: LD_VAR 0 9
13510: ARRAY
13511: PUSH
13512: LD_INT 2
13514: ARRAY
13515: PPUSH
13516: CALL_OW 351
13520: IFTRUE 13559
13522: PUSH
13523: LD_VAR 0 14
13527: PUSH
13528: LD_VAR 0 9
13532: ARRAY
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: PPUSH
13538: LD_VAR 0 14
13542: PUSH
13543: LD_VAR 0 9
13547: ARRAY
13548: PUSH
13549: LD_INT 2
13551: ARRAY
13552: PPUSH
13553: CALL_OW 488
13557: NOT
13558: OR
13559: IFTRUE 13576
13561: PUSH
13562: LD_VAR 0 13
13566: PPUSH
13567: CALL_OW 247
13571: PUSH
13572: LD_INT 3
13574: EQUAL
13575: OR
13576: IFFALSE 13582
// exit ;
13578: POP
13579: POP
13580: GO 14134
// if not tmp then
13582: LD_VAR 0 13
13586: NOT
13587: IFFALSE 13591
// continue ;
13589: GO 13443
// result := true ;
13591: LD_ADDR_VAR 0 8
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13599: LD_VAR 0 6
13603: IFFALSE 13620
13605: PUSH
13606: LD_VAR 0 13
13610: PPUSH
13611: CALL_OW 247
13615: PUSH
13616: LD_INT 2
13618: EQUAL
13619: AND
13620: IFFALSE 13637
13622: PUSH
13623: LD_VAR 0 13
13627: PPUSH
13628: CALL_OW 263
13632: PUSH
13633: LD_INT 1
13635: EQUAL
13636: AND
13637: IFFALSE 13801
// begin if IsDrivenBy ( tmp ) then
13639: LD_VAR 0 13
13643: PPUSH
13644: CALL_OW 311
13648: IFFALSE 13652
// continue ;
13650: GO 13443
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13652: LD_VAR 0 6
13656: PPUSH
13657: LD_INT 3
13659: PUSH
13660: LD_INT 60
13662: PUSH
13663: EMPTY
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 3
13672: PUSH
13673: LD_INT 55
13675: PUSH
13676: EMPTY
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 72
13691: IFFALSE 13799
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13693: LD_ADDR_VAR 0 18
13697: PUSH
13698: LD_VAR 0 6
13702: PPUSH
13703: LD_INT 3
13705: PUSH
13706: LD_INT 60
13708: PUSH
13709: EMPTY
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 3
13718: PUSH
13719: LD_INT 55
13721: PUSH
13722: EMPTY
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 72
13737: PUSH
13738: LD_INT 1
13740: ARRAY
13741: ST_TO_ADDR
// if IsInUnit ( driver ) then
13742: LD_VAR 0 18
13746: PPUSH
13747: CALL_OW 310
13751: IFFALSE 13762
// ComExit ( driver ) ;
13753: LD_VAR 0 18
13757: PPUSH
13758: CALL 39405 0 1
// AddComEnterUnit ( driver , tmp ) ;
13762: LD_VAR 0 18
13766: PPUSH
13767: LD_VAR 0 13
13771: PPUSH
13772: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13776: LD_VAR 0 18
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13790: LD_VAR 0 18
13794: PPUSH
13795: CALL_OW 181
// end ; continue ;
13799: GO 13443
// end ; if not cleaners or not tmp in cleaners then
13801: LD_VAR 0 6
13805: NOT
13806: IFTRUE 13821
13808: PUSH
13809: LD_VAR 0 13
13813: PUSH
13814: LD_VAR 0 6
13818: IN
13819: NOT
13820: OR
13821: IFFALSE 14130
// begin if dep then
13823: LD_VAR 0 17
13827: IFFALSE 13963
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13829: LD_ADDR_VAR 0 16
13833: PUSH
13834: LD_VAR 0 17
13838: PUSH
13839: LD_INT 1
13841: ARRAY
13842: PPUSH
13843: CALL_OW 250
13847: PPUSH
13848: LD_VAR 0 17
13852: PUSH
13853: LD_INT 1
13855: ARRAY
13856: PPUSH
13857: CALL_OW 254
13861: PPUSH
13862: LD_INT 5
13864: PPUSH
13865: CALL_OW 272
13869: PUSH
13870: LD_VAR 0 17
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PPUSH
13879: CALL_OW 251
13883: PPUSH
13884: LD_VAR 0 17
13888: PUSH
13889: LD_INT 1
13891: ARRAY
13892: PPUSH
13893: CALL_OW 254
13897: PPUSH
13898: LD_INT 5
13900: PPUSH
13901: CALL_OW 273
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13910: LD_VAR 0 16
13914: PUSH
13915: LD_INT 1
13917: ARRAY
13918: PPUSH
13919: LD_VAR 0 16
13923: PUSH
13924: LD_INT 2
13926: ARRAY
13927: PPUSH
13928: CALL_OW 488
13932: IFFALSE 13963
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13934: LD_VAR 0 13
13938: PPUSH
13939: LD_VAR 0 16
13943: PUSH
13944: LD_INT 1
13946: ARRAY
13947: PPUSH
13948: LD_VAR 0 16
13952: PUSH
13953: LD_INT 2
13955: ARRAY
13956: PPUSH
13957: CALL_OW 111
// continue ;
13961: GO 13443
// end ; end ; r := GetDir ( tmp ) ;
13963: LD_ADDR_VAR 0 15
13967: PUSH
13968: LD_VAR 0 13
13972: PPUSH
13973: CALL_OW 254
13977: ST_TO_ADDR
// if r = 5 then
13978: LD_VAR 0 15
13982: PUSH
13983: LD_INT 5
13985: EQUAL
13986: IFFALSE 13996
// r := 0 ;
13988: LD_ADDR_VAR 0 15
13992: PUSH
13993: LD_INT 0
13995: ST_TO_ADDR
// for j = r to 5 do
13996: LD_ADDR_VAR 0 10
14000: PUSH
14001: DOUBLE
14002: LD_VAR 0 15
14006: DEC
14007: ST_TO_ADDR
14008: LD_INT 5
14010: PUSH
14011: FOR_TO
14012: IFFALSE 14128
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14014: LD_ADDR_VAR 0 11
14018: PUSH
14019: LD_VAR 0 13
14023: PPUSH
14024: CALL_OW 250
14028: PPUSH
14029: LD_VAR 0 10
14033: PPUSH
14034: LD_INT 2
14036: PPUSH
14037: CALL_OW 272
14041: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14042: LD_ADDR_VAR 0 12
14046: PUSH
14047: LD_VAR 0 13
14051: PPUSH
14052: CALL_OW 251
14056: PPUSH
14057: LD_VAR 0 10
14061: PPUSH
14062: LD_INT 2
14064: PPUSH
14065: CALL_OW 273
14069: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14070: LD_VAR 0 11
14074: PPUSH
14075: LD_VAR 0 12
14079: PPUSH
14080: CALL_OW 488
14084: IFFALSE 14103
14086: PUSH
14087: LD_VAR 0 11
14091: PPUSH
14092: LD_VAR 0 12
14096: PPUSH
14097: CALL_OW 428
14101: NOT
14102: AND
14103: IFFALSE 14126
// begin ComMoveXY ( tmp , _x , _y ) ;
14105: LD_VAR 0 13
14109: PPUSH
14110: LD_VAR 0 11
14114: PPUSH
14115: LD_VAR 0 12
14119: PPUSH
14120: CALL_OW 111
// break ;
14124: GO 14128
// end ; end ;
14126: GO 14011
14128: POP
14129: POP
// end ; end ;
14130: GO 13443
14132: POP
14133: POP
// end ;
14134: LD_VAR 0 8
14138: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14139: LD_INT 0
14141: PPUSH
// result := true ;
14142: LD_ADDR_VAR 0 3
14146: PUSH
14147: LD_INT 1
14149: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14150: LD_VAR 0 2
14154: PUSH
14155: LD_INT 24
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14169
14161: LD_INT 33
14163: DOUBLE
14164: EQUAL
14165: IFTRUE 14169
14167: GO 14194
14169: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14170: LD_ADDR_VAR 0 3
14174: PUSH
14175: LD_INT 32
14177: PPUSH
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 321
14187: PUSH
14188: LD_INT 2
14190: EQUAL
14191: ST_TO_ADDR
14192: GO 14510
14194: LD_INT 20
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14227
14202: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_INT 6
14210: PPUSH
14211: LD_VAR 0 1
14215: PPUSH
14216: CALL_OW 321
14220: PUSH
14221: LD_INT 2
14223: EQUAL
14224: ST_TO_ADDR
14225: GO 14510
14227: LD_INT 22
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14241
14233: LD_INT 36
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14266
14241: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_INT 15
14249: PPUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 321
14259: PUSH
14260: LD_INT 2
14262: EQUAL
14263: ST_TO_ADDR
14264: GO 14510
14266: LD_INT 30
14268: DOUBLE
14269: EQUAL
14270: IFTRUE 14274
14272: GO 14299
14274: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 20
14282: PPUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 321
14292: PUSH
14293: LD_INT 2
14295: EQUAL
14296: ST_TO_ADDR
14297: GO 14510
14299: LD_INT 28
14301: DOUBLE
14302: EQUAL
14303: IFTRUE 14313
14305: LD_INT 21
14307: DOUBLE
14308: EQUAL
14309: IFTRUE 14313
14311: GO 14338
14313: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14314: LD_ADDR_VAR 0 3
14318: PUSH
14319: LD_INT 21
14321: PPUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 321
14331: PUSH
14332: LD_INT 2
14334: EQUAL
14335: ST_TO_ADDR
14336: GO 14510
14338: LD_INT 16
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14371
14346: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 84
14354: PPUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 321
14364: PUSH
14365: LD_INT 2
14367: EQUAL
14368: ST_TO_ADDR
14369: GO 14510
14371: LD_INT 19
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14385
14377: LD_INT 23
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14410
14385: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14386: LD_ADDR_VAR 0 3
14390: PUSH
14391: LD_INT 83
14393: PPUSH
14394: LD_VAR 0 1
14398: PPUSH
14399: CALL_OW 321
14403: PUSH
14404: LD_INT 2
14406: EQUAL
14407: ST_TO_ADDR
14408: GO 14510
14410: LD_INT 17
14412: DOUBLE
14413: EQUAL
14414: IFTRUE 14418
14416: GO 14443
14418: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14419: LD_ADDR_VAR 0 3
14423: PUSH
14424: LD_INT 39
14426: PPUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 321
14436: PUSH
14437: LD_INT 2
14439: EQUAL
14440: ST_TO_ADDR
14441: GO 14510
14443: LD_INT 18
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14476
14451: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: LD_INT 40
14459: PPUSH
14460: LD_VAR 0 1
14464: PPUSH
14465: CALL_OW 321
14469: PUSH
14470: LD_INT 2
14472: EQUAL
14473: ST_TO_ADDR
14474: GO 14510
14476: LD_INT 27
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14509
14484: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 35
14492: PPUSH
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 321
14502: PUSH
14503: LD_INT 2
14505: EQUAL
14506: ST_TO_ADDR
14507: GO 14510
14509: POP
// end ;
14510: LD_VAR 0 3
14514: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
14526: PPUSH
14527: PPUSH
// result := false ;
14528: LD_ADDR_VAR 0 6
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// if btype = b_depot then
14536: LD_VAR 0 2
14540: PUSH
14541: LD_INT 0
14543: EQUAL
14544: IFFALSE 14556
// begin result := true ;
14546: LD_ADDR_VAR 0 6
14550: PUSH
14551: LD_INT 1
14553: ST_TO_ADDR
// exit ;
14554: GO 15410
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14556: LD_VAR 0 1
14560: NOT
14561: IFTRUE 14586
14563: PUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 266
14573: PUSH
14574: LD_INT 0
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: IN
14584: NOT
14585: OR
14586: IFTRUE 14595
14588: PUSH
14589: LD_VAR 0 2
14593: NOT
14594: OR
14595: IFTRUE 14631
14597: PUSH
14598: LD_VAR 0 5
14602: PUSH
14603: LD_INT 0
14605: PUSH
14606: LD_INT 1
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 3
14614: PUSH
14615: LD_INT 4
14617: PUSH
14618: LD_INT 5
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: IN
14629: NOT
14630: OR
14631: IFTRUE 14650
14633: PUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_VAR 0 4
14643: PPUSH
14644: CALL_OW 488
14648: NOT
14649: OR
14650: IFFALSE 14654
// exit ;
14652: GO 15410
// side := GetSide ( depot ) ;
14654: LD_ADDR_VAR 0 9
14658: PUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 255
14668: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14669: LD_VAR 0 9
14673: PPUSH
14674: LD_VAR 0 2
14678: PPUSH
14679: CALL 14139 0 2
14683: NOT
14684: IFFALSE 14688
// exit ;
14686: GO 15410
// pom := GetBase ( depot ) ;
14688: LD_ADDR_VAR 0 10
14692: PUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 274
14702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14703: LD_ADDR_VAR 0 11
14707: PUSH
14708: LD_VAR 0 2
14712: PPUSH
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 248
14722: PPUSH
14723: CALL_OW 450
14727: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14728: LD_VAR 0 10
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 275
14740: PUSH
14741: LD_VAR 0 11
14745: PUSH
14746: LD_INT 1
14748: ARRAY
14749: GREATEREQUAL
14750: IFFALSE 14776
14752: PUSH
14753: LD_VAR 0 10
14757: PPUSH
14758: LD_INT 2
14760: PPUSH
14761: CALL_OW 275
14765: PUSH
14766: LD_VAR 0 11
14770: PUSH
14771: LD_INT 2
14773: ARRAY
14774: GREATEREQUAL
14775: AND
14776: IFFALSE 14802
14778: PUSH
14779: LD_VAR 0 10
14783: PPUSH
14784: LD_INT 3
14786: PPUSH
14787: CALL_OW 275
14791: PUSH
14792: LD_VAR 0 11
14796: PUSH
14797: LD_INT 3
14799: ARRAY
14800: GREATEREQUAL
14801: AND
14802: NOT
14803: IFFALSE 14807
// exit ;
14805: GO 15410
// if GetBType ( depot ) = b_depot then
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 266
14816: PUSH
14817: LD_INT 0
14819: EQUAL
14820: IFFALSE 14832
// dist := 28 else
14822: LD_ADDR_VAR 0 14
14826: PUSH
14827: LD_INT 28
14829: ST_TO_ADDR
14830: GO 14840
// dist := 36 ;
14832: LD_ADDR_VAR 0 14
14836: PUSH
14837: LD_INT 36
14839: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14840: LD_VAR 0 1
14844: PPUSH
14845: LD_VAR 0 3
14849: PPUSH
14850: LD_VAR 0 4
14854: PPUSH
14855: CALL_OW 297
14859: PUSH
14860: LD_VAR 0 14
14864: GREATER
14865: IFFALSE 14869
// exit ;
14867: GO 15410
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14869: LD_ADDR_VAR 0 12
14873: PUSH
14874: LD_VAR 0 2
14878: PPUSH
14879: LD_VAR 0 3
14883: PPUSH
14884: LD_VAR 0 4
14888: PPUSH
14889: LD_VAR 0 5
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 248
14903: PPUSH
14904: LD_INT 0
14906: PPUSH
14907: CALL 15415 0 6
14911: ST_TO_ADDR
// if not hexes then
14912: LD_VAR 0 12
14916: NOT
14917: IFFALSE 14921
// exit ;
14919: GO 15410
// hex := GetHexInfo ( x , y ) ;
14921: LD_ADDR_VAR 0 15
14925: PUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_VAR 0 4
14935: PPUSH
14936: CALL_OW 546
14940: ST_TO_ADDR
// if hex [ 1 ] then
14941: LD_VAR 0 15
14945: PUSH
14946: LD_INT 1
14948: ARRAY
14949: IFFALSE 14953
// exit ;
14951: GO 15410
// height := hex [ 2 ] ;
14953: LD_ADDR_VAR 0 13
14957: PUSH
14958: LD_VAR 0 15
14962: PUSH
14963: LD_INT 2
14965: ARRAY
14966: ST_TO_ADDR
// for i = 1 to hexes do
14967: LD_ADDR_VAR 0 7
14971: PUSH
14972: DOUBLE
14973: LD_INT 1
14975: DEC
14976: ST_TO_ADDR
14977: LD_VAR 0 12
14981: PUSH
14982: FOR_TO
14983: IFFALSE 15327
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14985: LD_VAR 0 12
14989: PUSH
14990: LD_VAR 0 7
14994: ARRAY
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 12
15004: PUSH
15005: LD_VAR 0 7
15009: ARRAY
15010: PUSH
15011: LD_INT 2
15013: ARRAY
15014: PPUSH
15015: CALL_OW 488
15019: NOT
15020: IFTRUE 15062
15022: PUSH
15023: LD_VAR 0 12
15027: PUSH
15028: LD_VAR 0 7
15032: ARRAY
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: LD_VAR 0 12
15042: PUSH
15043: LD_VAR 0 7
15047: ARRAY
15048: PUSH
15049: LD_INT 2
15051: ARRAY
15052: PPUSH
15053: CALL_OW 428
15057: PUSH
15058: LD_INT 0
15060: GREATER
15061: OR
15062: IFTRUE 15100
15064: PUSH
15065: LD_VAR 0 12
15069: PUSH
15070: LD_VAR 0 7
15074: ARRAY
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: PPUSH
15080: LD_VAR 0 12
15084: PUSH
15085: LD_VAR 0 7
15089: ARRAY
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PPUSH
15095: CALL_OW 351
15099: OR
15100: IFFALSE 15106
// exit ;
15102: POP
15103: POP
15104: GO 15410
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15106: LD_ADDR_VAR 0 8
15110: PUSH
15111: LD_VAR 0 12
15115: PUSH
15116: LD_VAR 0 7
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PPUSH
15126: LD_VAR 0 12
15130: PUSH
15131: LD_VAR 0 7
15135: ARRAY
15136: PUSH
15137: LD_INT 2
15139: ARRAY
15140: PPUSH
15141: CALL_OW 546
15145: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15146: LD_VAR 0 8
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: IFTRUE 15176
15156: PUSH
15157: LD_VAR 0 8
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PUSH
15166: LD_VAR 0 13
15170: PUSH
15171: LD_INT 2
15173: PLUS
15174: GREATER
15175: OR
15176: IFTRUE 15198
15178: PUSH
15179: LD_VAR 0 8
15183: PUSH
15184: LD_INT 2
15186: ARRAY
15187: PUSH
15188: LD_VAR 0 13
15192: PUSH
15193: LD_INT 2
15195: MINUS
15196: LESS
15197: OR
15198: IFTRUE 15266
15200: PUSH
15201: LD_VAR 0 8
15205: PUSH
15206: LD_INT 3
15208: ARRAY
15209: PUSH
15210: LD_INT 0
15212: PUSH
15213: LD_INT 8
15215: PUSH
15216: LD_INT 9
15218: PUSH
15219: LD_INT 10
15221: PUSH
15222: LD_INT 11
15224: PUSH
15225: LD_INT 12
15227: PUSH
15228: LD_INT 13
15230: PUSH
15231: LD_INT 16
15233: PUSH
15234: LD_INT 17
15236: PUSH
15237: LD_INT 18
15239: PUSH
15240: LD_INT 19
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: IN
15264: NOT
15265: OR
15266: IFTRUE 15279
15268: PUSH
15269: LD_VAR 0 8
15273: PUSH
15274: LD_INT 5
15276: ARRAY
15277: NOT
15278: OR
15279: IFTRUE 15319
15281: PUSH
15282: LD_VAR 0 8
15286: PUSH
15287: LD_INT 6
15289: ARRAY
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: LD_INT 2
15296: PUSH
15297: LD_INT 7
15299: PUSH
15300: LD_INT 9
15302: PUSH
15303: LD_INT 10
15305: PUSH
15306: LD_INT 11
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: IN
15317: NOT
15318: OR
15319: IFFALSE 15325
// exit ;
15321: POP
15322: POP
15323: GO 15410
// end ;
15325: GO 14982
15327: POP
15328: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15329: LD_VAR 0 9
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_INT 20
15346: PPUSH
15347: CALL 7229 0 4
15351: PUSH
15352: LD_INT 4
15354: ARRAY
15355: IFFALSE 15359
// exit ;
15357: GO 15410
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15359: LD_VAR 0 2
15363: PUSH
15364: LD_INT 29
15366: PUSH
15367: LD_INT 30
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: IN
15374: IFFALSE 15398
15376: PUSH
15377: LD_VAR 0 3
15381: PPUSH
15382: LD_VAR 0 4
15386: PPUSH
15387: LD_VAR 0 9
15391: PPUSH
15392: CALL_OW 440
15396: NOT
15397: AND
15398: IFFALSE 15402
// exit ;
15400: GO 15410
// result := true ;
15402: LD_ADDR_VAR 0 6
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// end ;
15410: LD_VAR 0 6
15414: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15415: LD_INT 0
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
// result = [ ] ;
15475: LD_ADDR_VAR 0 7
15479: PUSH
15480: EMPTY
15481: ST_TO_ADDR
// temp_list = [ ] ;
15482: LD_ADDR_VAR 0 9
15486: PUSH
15487: EMPTY
15488: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15489: LD_VAR 0 4
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: LD_INT 3
15505: PUSH
15506: LD_INT 4
15508: PUSH
15509: LD_INT 5
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: IN
15520: NOT
15521: IFTRUE 15564
15523: PUSH
15524: LD_VAR 0 1
15528: PUSH
15529: LD_INT 0
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: IN
15539: IFFALSE 15563
15541: PUSH
15542: LD_VAR 0 5
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: LD_INT 2
15552: PUSH
15553: LD_INT 3
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: IN
15561: NOT
15562: AND
15563: OR
15564: IFFALSE 15568
// exit ;
15566: GO 33967
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15568: LD_VAR 0 1
15572: PUSH
15573: LD_INT 6
15575: PUSH
15576: LD_INT 7
15578: PUSH
15579: LD_INT 8
15581: PUSH
15582: LD_INT 13
15584: PUSH
15585: LD_INT 12
15587: PUSH
15588: LD_INT 15
15590: PUSH
15591: LD_INT 11
15593: PUSH
15594: LD_INT 14
15596: PUSH
15597: LD_INT 10
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: IN
15611: IFFALSE 15621
// btype = b_lab ;
15613: LD_ADDR_VAR 0 1
15617: PUSH
15618: LD_INT 6
15620: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15621: LD_VAR 0 6
15625: PUSH
15626: LD_INT 0
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: LIST
15639: IN
15640: NOT
15641: IFTRUE 15709
15643: PUSH
15644: LD_VAR 0 1
15648: PUSH
15649: LD_INT 0
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: LD_INT 3
15660: PUSH
15661: LD_INT 6
15663: PUSH
15664: LD_INT 36
15666: PUSH
15667: LD_INT 4
15669: PUSH
15670: LD_INT 5
15672: PUSH
15673: LD_INT 31
15675: PUSH
15676: LD_INT 32
15678: PUSH
15679: LD_INT 33
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: IN
15695: NOT
15696: IFFALSE 15708
15698: PUSH
15699: LD_VAR 0 6
15703: PUSH
15704: LD_INT 1
15706: EQUAL
15707: AND
15708: OR
15709: IFTRUE 15741
15711: PUSH
15712: LD_VAR 0 1
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: LD_INT 3
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: IN
15727: NOT
15728: IFFALSE 15740
15730: PUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_INT 2
15738: EQUAL
15739: AND
15740: OR
15741: IFFALSE 15751
// mode = 0 ;
15743: LD_ADDR_VAR 0 6
15747: PUSH
15748: LD_INT 0
15750: ST_TO_ADDR
// case mode of 0 :
15751: LD_VAR 0 6
15755: PUSH
15756: LD_INT 0
15758: DOUBLE
15759: EQUAL
15760: IFTRUE 15764
15762: GO 27217
15764: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15765: LD_ADDR_VAR 0 11
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 1
15785: NEG
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 1
15823: NEG
15824: PUSH
15825: LD_INT 0
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: PUSH
15836: LD_INT 1
15838: NEG
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 1
15846: NEG
15847: PUSH
15848: LD_INT 2
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 0
15858: PUSH
15859: LD_INT 2
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 0
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 1
15900: NEG
15901: PUSH
15902: LD_INT 1
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 3
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 3
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 1
15931: NEG
15932: PUSH
15933: LD_INT 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15958: LD_ADDR_VAR 0 12
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: LD_INT 0
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: LD_INT 1
15978: NEG
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: PUSH
16018: LD_INT 0
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 1
16027: NEG
16028: PUSH
16029: LD_INT 1
16031: NEG
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: LD_INT 1
16042: NEG
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 0
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 2
16060: PUSH
16061: LD_INT 1
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 1
16070: NEG
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: NEG
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: LD_INT 1
16096: NEG
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: NEG
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 3
16115: NEG
16116: PUSH
16117: LD_INT 0
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 3
16126: NEG
16127: PUSH
16128: LD_INT 1
16130: NEG
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16154: LD_ADDR_VAR 0 13
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 1
16174: NEG
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 1
16223: NEG
16224: PUSH
16225: LD_INT 1
16227: NEG
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 1
16235: NEG
16236: PUSH
16237: LD_INT 2
16239: NEG
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 2
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 2
16277: NEG
16278: PUSH
16279: LD_INT 1
16281: NEG
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 2
16289: NEG
16290: PUSH
16291: LD_INT 2
16293: NEG
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 2
16301: NEG
16302: PUSH
16303: LD_INT 3
16305: NEG
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 3
16313: NEG
16314: PUSH
16315: LD_INT 2
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 3
16325: NEG
16326: PUSH
16327: LD_INT 3
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16353: LD_ADDR_VAR 0 14
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 0
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: NEG
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 1
16422: NEG
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: NEG
16435: PUSH
16436: LD_INT 2
16438: NEG
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: LD_INT 2
16449: NEG
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 1
16488: NEG
16489: PUSH
16490: LD_INT 1
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 1
16499: NEG
16500: PUSH
16501: LD_INT 3
16503: NEG
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 3
16514: NEG
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 2
16525: NEG
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16549: LD_ADDR_VAR 0 15
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: LD_INT 1
16569: NEG
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: NEG
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 2
16672: NEG
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: LD_INT 1
16687: NEG
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 2
16695: PUSH
16696: LD_INT 1
16698: NEG
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16742: LD_ADDR_VAR 0 16
16746: PUSH
16747: LD_INT 0
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 0
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: NEG
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 1
16811: NEG
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 2
16827: NEG
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 2
16845: PUSH
16846: LD_INT 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 2
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 2
16865: NEG
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 2
16877: NEG
16878: PUSH
16879: LD_INT 2
16881: NEG
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 3
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16935: LD_ADDR_VAR 0 17
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 0
16952: PUSH
16953: LD_INT 1
16955: NEG
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: NEG
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 1
17004: NEG
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: NEG
17017: PUSH
17018: LD_INT 2
17020: NEG
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: LD_INT 2
17031: NEG
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 2
17122: NEG
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 2
17134: NEG
17135: PUSH
17136: LD_INT 2
17138: NEG
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17165: LD_ADDR_VAR 0 18
17169: PUSH
17170: LD_INT 0
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: LD_INT 1
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 0
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 1
17330: NEG
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 2
17341: NEG
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 2
17352: NEG
17353: PUSH
17354: LD_INT 1
17356: NEG
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: LD_INT 2
17368: NEG
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17395: LD_ADDR_VAR 0 19
17399: PUSH
17400: LD_INT 0
17402: PUSH
17403: LD_INT 0
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: LD_INT 1
17415: NEG
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: NEG
17454: PUSH
17455: LD_INT 0
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: LD_INT 1
17468: NEG
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: LD_INT 2
17480: NEG
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: LD_INT 2
17491: NEG
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 1
17560: NEG
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 2
17582: NEG
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 2
17594: NEG
17595: PUSH
17596: LD_INT 2
17598: NEG
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17625: LD_ADDR_VAR 0 20
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: LD_INT 1
17698: NEG
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 2
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 2
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: NEG
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 2
17812: NEG
17813: PUSH
17814: LD_INT 1
17816: NEG
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 2
17824: NEG
17825: PUSH
17826: LD_INT 2
17828: NEG
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17855: LD_ADDR_VAR 0 21
17859: PUSH
17860: LD_INT 0
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 0
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 0
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 0
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: NEG
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: NEG
18055: PUSH
18056: LD_INT 2
18058: NEG
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18085: LD_ADDR_VAR 0 22
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: LD_INT 1
18105: NEG
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 1
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 1
18143: NEG
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: NEG
18155: PUSH
18156: LD_INT 1
18158: NEG
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 2
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 2
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: LD_INT 1
18192: NEG
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: NEG
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 2
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18315: LD_ADDR_VAR 0 23
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: LD_INT 3
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 3
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18595: LD_ADDR_VAR 0 24
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 0
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: LD_INT 2
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: LD_INT 2
18691: NEG
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 1
18702: NEG
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: NEG
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: LD_INT 2
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 2
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18871: LD_ADDR_VAR 0 25
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: NEG
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 2
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: LD_INT 2
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 2
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: NEG
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: NEG
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 2
19070: NEG
19071: PUSH
19072: LD_INT 2
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 3
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: LD_INT 3
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 3
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19145: LD_ADDR_VAR 0 26
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: LD_INT 2
19241: NEG
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 2
19321: NEG
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: LD_INT 2
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 3
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: NEG
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19421: LD_ADDR_VAR 0 27
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: NEG
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 3
19654: NEG
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 3
19666: NEG
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19701: LD_ADDR_VAR 0 28
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: LD_INT 1
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 2
19877: NEG
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: LD_INT 1
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 3
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 3
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 3
19936: NEG
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 3
19948: NEG
19949: PUSH
19950: LD_INT 2
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19983: LD_ADDR_VAR 0 29
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 0
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 1
20041: NEG
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: NEG
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 1
20064: NEG
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 0
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: NEG
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: NEG
20150: PUSH
20151: LD_INT 1
20153: NEG
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 2
20161: NEG
20162: PUSH
20163: LD_INT 2
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: LD_INT 3
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 3
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 3
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20262: LD_ADDR_VAR 0 30
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: LD_INT 2
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 2
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 3
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 3
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: NEG
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 3
20505: NEG
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20540: LD_ADDR_VAR 0 31
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 1
20560: NEG
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: LD_INT 2
20625: NEG
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 3
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 3
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: LD_INT 3
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 3
20783: NEG
20784: PUSH
20785: LD_INT 2
20787: NEG
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20818: LD_ADDR_VAR 0 32
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 3
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 3
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21096: LD_ADDR_VAR 0 33
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 1
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 3
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 3
21340: NEG
21341: PUSH
21342: LD_INT 2
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21375: LD_ADDR_VAR 0 34
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 2
21531: NEG
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 2
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 2
21554: NEG
21555: PUSH
21556: LD_INT 2
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 3
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 3
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 3
21620: NEG
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21655: LD_ADDR_VAR 0 35
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: LD_INT 1
21675: NEG
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 0
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 2
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 2
21746: NEG
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21767: LD_ADDR_VAR 0 36
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21879: LD_ADDR_VAR 0 37
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21991: LD_ADDR_VAR 0 38
21995: PUSH
21996: LD_INT 0
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 2
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: NEG
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22103: LD_ADDR_VAR 0 39
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 2
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22215: LD_ADDR_VAR 0 40
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22327: LD_ADDR_VAR 0 41
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 2
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 1
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: NEG
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: LD_INT 3
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 3
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 3
22601: NEG
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 3
22612: NEG
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 3
22624: NEG
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 3
22636: NEG
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22677: LD_ADDR_VAR 0 42
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: LD_INT 1
22750: NEG
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: NEG
22759: PUSH
22760: LD_INT 2
22762: NEG
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 2
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 0
22822: PUSH
22823: LD_INT 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: NEG
22856: PUSH
22857: LD_INT 2
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: LD_INT 3
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 3
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 3
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 3
22923: PUSH
22924: LD_INT 3
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 3
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: LD_INT 3
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: LD_INT 3
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 3
22974: NEG
22975: PUSH
22976: LD_INT 2
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 3
22986: NEG
22987: PUSH
22988: LD_INT 3
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23027: LD_ADDR_VAR 0 43
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 2
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 3
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 3
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: LD_INT 3
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 3
23323: NEG
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 3
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23375: LD_ADDR_VAR 0 44
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: LD_INT 2
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: LD_INT 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 3
23618: PUSH
23619: LD_INT 3
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: NEG
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 3
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 3
23672: NEG
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 3
23684: NEG
23685: PUSH
23686: LD_INT 3
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23725: LD_ADDR_VAR 0 45
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: NEG
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: LD_INT 2
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: LD_INT 3
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 3
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 3
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 3
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: LD_INT 3
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: LD_INT 3
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 3
24022: NEG
24023: PUSH
24024: LD_INT 2
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 3
24034: NEG
24035: PUSH
24036: LD_INT 3
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24075: LD_ADDR_VAR 0 46
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 2
24252: NEG
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: LD_INT 3
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: LD_INT 3
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 3
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 3
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 3
24371: NEG
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 3
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24423: LD_ADDR_VAR 0 47
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: LD_INT 2
24519: NEG
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24574: LD_ADDR_VAR 0 48
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: LD_INT 2
24670: NEG
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24721: LD_ADDR_VAR 0 49
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24865: LD_ADDR_VAR 0 50
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25009: LD_ADDR_VAR 0 51
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 2
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25156: LD_ADDR_VAR 0 52
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25307: LD_ADDR_VAR 0 53
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25537: LD_ADDR_VAR 0 54
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 2
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: NEG
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25767: LD_ADDR_VAR 0 55
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25997: LD_ADDR_VAR 0 56
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26227: LD_ADDR_VAR 0 57
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: LD_INT 1
26300: NEG
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26457: LD_ADDR_VAR 0 58
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26687: LD_ADDR_VAR 0 59
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26775: LD_ADDR_VAR 0 60
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26863: LD_ADDR_VAR 0 61
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26951: LD_ADDR_VAR 0 62
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27039: LD_ADDR_VAR 0 63
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27127: LD_ADDR_VAR 0 64
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// end ; 1 :
27215: GO 33112
27217: LD_INT 1
27219: DOUBLE
27220: EQUAL
27221: IFTRUE 27225
27223: GO 29848
27225: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27226: LD_ADDR_VAR 0 11
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 3
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 3
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 2
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27270: LD_ADDR_VAR 0 12
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 3
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 3
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27311: LD_ADDR_VAR 0 13
27315: PUSH
27316: LD_INT 3
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: LD_INT 3
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27351: LD_ADDR_VAR 0 14
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 3
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27392: LD_ADDR_VAR 0 15
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 3
27410: NEG
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 3
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27436: LD_ADDR_VAR 0 16
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: LD_INT 3
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 3
27455: NEG
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 3
27467: NEG
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27482: LD_ADDR_VAR 0 17
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: LD_INT 3
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 3
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27526: LD_ADDR_VAR 0 18
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27567: LD_ADDR_VAR 0 19
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 3
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27607: LD_ADDR_VAR 0 20
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27648: LD_ADDR_VAR 0 21
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 3
27677: NEG
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27692: LD_ADDR_VAR 0 22
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 3
27711: NEG
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 3
27723: NEG
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27738: LD_ADDR_VAR 0 23
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 3
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 4
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 3
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27782: LD_ADDR_VAR 0 24
27786: PUSH
27787: LD_INT 3
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 4
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27823: LD_ADDR_VAR 0 25
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 4
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 3
27850: PUSH
27851: LD_INT 4
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27863: LD_ADDR_VAR 0 26
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 4
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27904: LD_ADDR_VAR 0 27
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 3
27922: NEG
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 4
27933: NEG
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27948: LD_ADDR_VAR 0 28
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: NEG
27968: PUSH
27969: LD_INT 4
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 4
27979: NEG
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27994: LD_ADDR_VAR 0 29
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 3
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 3
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 4
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 4
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 3
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 5
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 5
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 4
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 6
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 6
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 5
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28149: LD_ADDR_VAR 0 30
28153: PUSH
28154: LD_INT 2
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 4
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 4
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 4
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 5
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 6
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 6
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28292: LD_ADDR_VAR 0 31
28296: PUSH
28297: LD_INT 3
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 3
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: LD_INT 3
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 4
28329: PUSH
28330: LD_INT 3
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 4
28339: PUSH
28340: LD_INT 4
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 3
28349: PUSH
28350: LD_INT 4
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 5
28359: PUSH
28360: LD_INT 4
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 5
28369: PUSH
28370: LD_INT 5
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 4
28379: PUSH
28380: LD_INT 5
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 6
28389: PUSH
28390: LD_INT 5
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 6
28399: PUSH
28400: LD_INT 6
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 5
28409: PUSH
28410: LD_INT 6
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28431: LD_ADDR_VAR 0 32
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 3
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: LD_INT 4
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 4
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 5
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: LD_INT 4
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 6
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 6
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 5
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28574: LD_ADDR_VAR 0 33
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 3
28592: NEG
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 3
28603: NEG
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 3
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 4
28626: NEG
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 4
28637: NEG
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 4
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 5
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 5
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 5
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 6
28694: NEG
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 6
28705: NEG
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28729: LD_ADDR_VAR 0 34
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 3
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 3
28748: NEG
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: LD_INT 3
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 3
28772: NEG
28773: PUSH
28774: LD_INT 4
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 4
28784: NEG
28785: PUSH
28786: LD_INT 3
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 4
28796: NEG
28797: PUSH
28798: LD_INT 4
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 4
28808: NEG
28809: PUSH
28810: LD_INT 5
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 5
28820: NEG
28821: PUSH
28822: LD_INT 4
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 5
28832: NEG
28833: PUSH
28834: LD_INT 5
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 5
28844: NEG
28845: PUSH
28846: LD_INT 6
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 6
28856: NEG
28857: PUSH
28858: LD_INT 5
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 6
28868: NEG
28869: PUSH
28870: LD_INT 6
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28892: LD_ADDR_VAR 0 41
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: LD_INT 3
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28936: LD_ADDR_VAR 0 42
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 3
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28977: LD_ADDR_VAR 0 43
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29017: LD_ADDR_VAR 0 44
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 3
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29058: LD_ADDR_VAR 0 45
29062: PUSH
29063: LD_INT 2
29065: NEG
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29102: LD_ADDR_VAR 0 46
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 3
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 3
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29148: LD_ADDR_VAR 0 47
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: LD_INT 3
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: LD_INT 3
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29181: LD_ADDR_VAR 0 48
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29212: LD_ADDR_VAR 0 49
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29241: LD_ADDR_VAR 0 50
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29270: LD_ADDR_VAR 0 51
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29301: LD_ADDR_VAR 0 52
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 3
29320: NEG
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29334: LD_ADDR_VAR 0 53
29338: PUSH
29339: LD_INT 1
29341: NEG
29342: PUSH
29343: LD_INT 3
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29378: LD_ADDR_VAR 0 54
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29419: LD_ADDR_VAR 0 55
29423: PUSH
29424: LD_INT 3
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29459: LD_ADDR_VAR 0 56
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 3
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29500: LD_ADDR_VAR 0 57
29504: PUSH
29505: LD_INT 2
29507: NEG
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 3
29529: NEG
29530: PUSH
29531: LD_INT 1
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29544: LD_ADDR_VAR 0 58
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: NEG
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: NEG
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29590: LD_ADDR_VAR 0 59
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: LD_INT 2
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29634: LD_ADDR_VAR 0 60
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29675: LD_ADDR_VAR 0 61
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29715: LD_ADDR_VAR 0 62
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29756: LD_ADDR_VAR 0 63
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29800: LD_ADDR_VAR 0 64
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: NEG
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// end ; 2 :
29846: GO 33112
29848: LD_INT 2
29850: DOUBLE
29851: EQUAL
29852: IFTRUE 29856
29854: GO 33111
29856: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29857: LD_ADDR_VAR 0 29
29861: PUSH
29862: LD_INT 4
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 4
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 5
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 5
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 4
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: LD_INT 2
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 5
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 4
29977: PUSH
29978: LD_INT 3
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 4
29987: PUSH
29988: LD_INT 4
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: LD_INT 4
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 4
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 4
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 4
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 4
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 5
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 5
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: LD_INT 4
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 5
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 4
30196: NEG
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 4
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 4
30219: NEG
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: LD_INT 4
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 4
30254: NEG
30255: PUSH
30256: LD_INT 5
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 4
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 3
30278: NEG
30279: PUSH
30280: LD_INT 3
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 4
30290: NEG
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 5
30302: NEG
30303: PUSH
30304: LD_INT 4
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 5
30314: NEG
30315: PUSH
30316: LD_INT 5
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: NEG
30327: PUSH
30328: LD_INT 5
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: LD_INT 3
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30395: LD_ADDR_VAR 0 30
30399: PUSH
30400: LD_INT 4
30402: PUSH
30403: LD_INT 4
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 5
30422: PUSH
30423: LD_INT 4
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 5
30432: PUSH
30433: LD_INT 5
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 4
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 5
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 4
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 4
30585: NEG
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 4
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 4
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 5
30641: NEG
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 5
30652: NEG
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 5
30664: NEG
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 3
30687: NEG
30688: PUSH
30689: LD_INT 3
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: LD_INT 4
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 3
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 4
30747: NEG
30748: PUSH
30749: LD_INT 3
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 4
30759: NEG
30760: PUSH
30761: LD_INT 4
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: NEG
30772: PUSH
30773: LD_INT 4
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 4
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 5
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 4
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: LD_INT 4
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 5
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 5
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30942: LD_ADDR_VAR 0 31
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 4
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 4
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 5
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 5
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 4
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 5
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 2
31031: NEG
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 3
31042: NEG
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: LD_INT 1
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: NEG
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 4
31098: NEG
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 4
31109: NEG
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 4
31121: NEG
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 4
31144: NEG
31145: PUSH
31146: LD_INT 4
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 4
31156: NEG
31157: PUSH
31158: LD_INT 5
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: LD_INT 4
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 4
31192: NEG
31193: PUSH
31194: LD_INT 3
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 5
31204: NEG
31205: PUSH
31206: LD_INT 4
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 5
31216: NEG
31217: PUSH
31218: LD_INT 5
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 5
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 5
31240: NEG
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 4
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 3
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 2
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 3
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 4
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: LD_INT 4
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 4
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 4
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 5
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 5
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 4
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 3
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 5
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31492: LD_ADDR_VAR 0 32
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 4
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 3
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 4
31544: NEG
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 5
31555: NEG
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 5
31566: NEG
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 5
31578: NEG
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 4
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 4
31661: NEG
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: LD_INT 4
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 4
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 5
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: LD_INT 4
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 4
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 5
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: LD_INT 5
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 4
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 4
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 4
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 5
31924: PUSH
31925: LD_INT 4
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 5
31934: PUSH
31935: LD_INT 5
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 4
31944: PUSH
31945: LD_INT 5
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 3
31954: PUSH
31955: LD_INT 4
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 5
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: LD_INT 5
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32039: LD_ADDR_VAR 0 33
32043: PUSH
32044: LD_INT 4
32046: NEG
32047: PUSH
32048: LD_INT 4
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 4
32058: NEG
32059: PUSH
32060: LD_INT 5
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: LD_INT 4
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: LD_INT 3
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: NEG
32095: PUSH
32096: LD_INT 3
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 5
32106: NEG
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 5
32118: NEG
32119: PUSH
32120: LD_INT 5
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: NEG
32131: PUSH
32132: LD_INT 5
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 3
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 4
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 2
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 3
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: LD_INT 4
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 4
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 5
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 4
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 3
32317: PUSH
32318: LD_INT 1
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 5
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 4
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 4
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: LD_INT 4
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 3
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 4
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 5
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32577: LD_ADDR_VAR 0 34
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 4
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: LD_INT 5
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 4
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 3
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 4
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: LD_INT 5
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 3
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 5
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 4
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 4
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: LD_INT 4
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: LD_INT 5
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 4
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 4
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 5
32849: PUSH
32850: LD_INT 3
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 3
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 4
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 4
32962: NEG
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 4
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: NEG
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 5
33018: NEG
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 5
33029: NEG
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 5
33041: NEG
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 3
33053: NEG
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
// end ; end ;
33109: GO 33112
33111: POP
// case btype of b_depot , b_warehouse :
33112: LD_VAR 0 1
33116: PUSH
33117: LD_INT 0
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33131
33123: LD_INT 1
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33332
33131: POP
// case nation of nation_american :
33132: LD_VAR 0 5
33136: PUSH
33137: LD_INT 1
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33201
33145: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_VAR 0 11
33155: PUSH
33156: LD_VAR 0 12
33160: PUSH
33161: LD_VAR 0 13
33165: PUSH
33166: LD_VAR 0 14
33170: PUSH
33171: LD_VAR 0 15
33175: PUSH
33176: LD_VAR 0 16
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: PUSH
33189: LD_VAR 0 4
33193: PUSH
33194: LD_INT 1
33196: PLUS
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33330
33201: LD_INT 2
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33265
33209: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33210: LD_ADDR_VAR 0 9
33214: PUSH
33215: LD_VAR 0 17
33219: PUSH
33220: LD_VAR 0 18
33224: PUSH
33225: LD_VAR 0 19
33229: PUSH
33230: LD_VAR 0 20
33234: PUSH
33235: LD_VAR 0 21
33239: PUSH
33240: LD_VAR 0 22
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: PUSH
33253: LD_VAR 0 4
33257: PUSH
33258: LD_INT 1
33260: PLUS
33261: ARRAY
33262: ST_TO_ADDR
33263: GO 33330
33265: LD_INT 3
33267: DOUBLE
33268: EQUAL
33269: IFTRUE 33273
33271: GO 33329
33273: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33274: LD_ADDR_VAR 0 9
33278: PUSH
33279: LD_VAR 0 23
33283: PUSH
33284: LD_VAR 0 24
33288: PUSH
33289: LD_VAR 0 25
33293: PUSH
33294: LD_VAR 0 26
33298: PUSH
33299: LD_VAR 0 27
33303: PUSH
33304: LD_VAR 0 28
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: PUSH
33317: LD_VAR 0 4
33321: PUSH
33322: LD_INT 1
33324: PLUS
33325: ARRAY
33326: ST_TO_ADDR
33327: GO 33330
33329: POP
33330: GO 33885
33332: LD_INT 2
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33346
33338: LD_INT 3
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33402
33346: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33347: LD_ADDR_VAR 0 9
33351: PUSH
33352: LD_VAR 0 29
33356: PUSH
33357: LD_VAR 0 30
33361: PUSH
33362: LD_VAR 0 31
33366: PUSH
33367: LD_VAR 0 32
33371: PUSH
33372: LD_VAR 0 33
33376: PUSH
33377: LD_VAR 0 34
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: PUSH
33390: LD_VAR 0 4
33394: PUSH
33395: LD_INT 1
33397: PLUS
33398: ARRAY
33399: ST_TO_ADDR
33400: GO 33885
33402: LD_INT 16
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33464
33408: LD_INT 17
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33464
33414: LD_INT 18
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33464
33420: LD_INT 19
33422: DOUBLE
33423: EQUAL
33424: IFTRUE 33464
33426: LD_INT 22
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33464
33432: LD_INT 20
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33464
33438: LD_INT 21
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33464
33444: LD_INT 23
33446: DOUBLE
33447: EQUAL
33448: IFTRUE 33464
33450: LD_INT 24
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33464
33456: LD_INT 25
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33520
33464: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33465: LD_ADDR_VAR 0 9
33469: PUSH
33470: LD_VAR 0 35
33474: PUSH
33475: LD_VAR 0 36
33479: PUSH
33480: LD_VAR 0 37
33484: PUSH
33485: LD_VAR 0 38
33489: PUSH
33490: LD_VAR 0 39
33494: PUSH
33495: LD_VAR 0 40
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: PUSH
33508: LD_VAR 0 4
33512: PUSH
33513: LD_INT 1
33515: PLUS
33516: ARRAY
33517: ST_TO_ADDR
33518: GO 33885
33520: LD_INT 6
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33576
33526: LD_INT 7
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33576
33532: LD_INT 8
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33576
33538: LD_INT 13
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33576
33544: LD_INT 12
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33576
33550: LD_INT 15
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33576
33556: LD_INT 11
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33576
33562: LD_INT 14
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33576
33568: LD_INT 10
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33632
33576: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_VAR 0 41
33586: PUSH
33587: LD_VAR 0 42
33591: PUSH
33592: LD_VAR 0 43
33596: PUSH
33597: LD_VAR 0 44
33601: PUSH
33602: LD_VAR 0 45
33606: PUSH
33607: LD_VAR 0 46
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: PUSH
33620: LD_VAR 0 4
33624: PUSH
33625: LD_INT 1
33627: PLUS
33628: ARRAY
33629: ST_TO_ADDR
33630: GO 33885
33632: LD_INT 36
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33696
33640: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_VAR 0 47
33650: PUSH
33651: LD_VAR 0 48
33655: PUSH
33656: LD_VAR 0 49
33660: PUSH
33661: LD_VAR 0 50
33665: PUSH
33666: LD_VAR 0 51
33670: PUSH
33671: LD_VAR 0 52
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: PUSH
33684: LD_VAR 0 4
33688: PUSH
33689: LD_INT 1
33691: PLUS
33692: ARRAY
33693: ST_TO_ADDR
33694: GO 33885
33696: LD_INT 4
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33722
33702: LD_INT 5
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33722
33708: LD_INT 34
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33722
33714: LD_INT 37
33716: DOUBLE
33717: EQUAL
33718: IFTRUE 33722
33720: GO 33778
33722: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_VAR 0 53
33732: PUSH
33733: LD_VAR 0 54
33737: PUSH
33738: LD_VAR 0 55
33742: PUSH
33743: LD_VAR 0 56
33747: PUSH
33748: LD_VAR 0 57
33752: PUSH
33753: LD_VAR 0 58
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: PUSH
33766: LD_VAR 0 4
33770: PUSH
33771: LD_INT 1
33773: PLUS
33774: ARRAY
33775: ST_TO_ADDR
33776: GO 33885
33778: LD_INT 31
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33828
33784: LD_INT 32
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33828
33790: LD_INT 33
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33828
33796: LD_INT 27
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33828
33802: LD_INT 26
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33828
33808: LD_INT 28
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33828
33814: LD_INT 29
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33828
33820: LD_INT 30
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33828
33826: GO 33884
33828: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_VAR 0 59
33838: PUSH
33839: LD_VAR 0 60
33843: PUSH
33844: LD_VAR 0 61
33848: PUSH
33849: LD_VAR 0 62
33853: PUSH
33854: LD_VAR 0 63
33858: PUSH
33859: LD_VAR 0 64
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: PUSH
33872: LD_VAR 0 4
33876: PUSH
33877: LD_INT 1
33879: PLUS
33880: ARRAY
33881: ST_TO_ADDR
33882: GO 33885
33884: POP
// temp_list2 = [ ] ;
33885: LD_ADDR_VAR 0 10
33889: PUSH
33890: EMPTY
33891: ST_TO_ADDR
// for i in temp_list do
33892: LD_ADDR_VAR 0 8
33896: PUSH
33897: LD_VAR 0 9
33901: PUSH
33902: FOR_IN
33903: IFFALSE 33955
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33905: LD_ADDR_VAR 0 10
33909: PUSH
33910: LD_VAR 0 10
33914: PUSH
33915: LD_VAR 0 8
33919: PUSH
33920: LD_INT 1
33922: ARRAY
33923: PUSH
33924: LD_VAR 0 2
33928: PLUS
33929: PUSH
33930: LD_VAR 0 8
33934: PUSH
33935: LD_INT 2
33937: ARRAY
33938: PUSH
33939: LD_VAR 0 3
33943: PLUS
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: EMPTY
33950: LIST
33951: ADD
33952: ST_TO_ADDR
33953: GO 33902
33955: POP
33956: POP
// result = temp_list2 ;
33957: LD_ADDR_VAR 0 7
33961: PUSH
33962: LD_VAR 0 10
33966: ST_TO_ADDR
// end ;
33967: LD_VAR 0 7
33971: RET
// export function EnemyInRange ( unit , dist ) ; begin
33972: LD_INT 0
33974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 255
33989: PPUSH
33990: LD_VAR 0 1
33994: PPUSH
33995: CALL_OW 250
33999: PPUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL_OW 251
34009: PPUSH
34010: LD_VAR 0 2
34014: PPUSH
34015: CALL 7229 0 4
34019: PUSH
34020: LD_INT 4
34022: ARRAY
34023: ST_TO_ADDR
// end ;
34024: LD_VAR 0 3
34028: RET
// export function PlayerSeeMe ( unit ) ; begin
34029: LD_INT 0
34031: PPUSH
// result := See ( your_side , unit ) ;
34032: LD_ADDR_VAR 0 2
34036: PUSH
34037: LD_OWVAR 2
34041: PPUSH
34042: LD_VAR 0 1
34046: PPUSH
34047: CALL_OW 292
34051: ST_TO_ADDR
// end ;
34052: LD_VAR 0 2
34056: RET
// export function ReverseDir ( unit ) ; begin
34057: LD_INT 0
34059: PPUSH
// if not unit then
34060: LD_VAR 0 1
34064: NOT
34065: IFFALSE 34069
// exit ;
34067: GO 34092
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34069: LD_ADDR_VAR 0 2
34073: PUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 254
34083: PUSH
34084: LD_INT 3
34086: PLUS
34087: PUSH
34088: LD_INT 6
34090: MOD
34091: ST_TO_ADDR
// end ;
34092: LD_VAR 0 2
34096: RET
// export function ReverseArray ( array ) ; var i ; begin
34097: LD_INT 0
34099: PPUSH
34100: PPUSH
// if not array then
34101: LD_VAR 0 1
34105: NOT
34106: IFFALSE 34110
// exit ;
34108: GO 34165
// result := [ ] ;
34110: LD_ADDR_VAR 0 2
34114: PUSH
34115: EMPTY
34116: ST_TO_ADDR
// for i := array downto 1 do
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: DOUBLE
34123: LD_VAR 0 1
34127: INC
34128: ST_TO_ADDR
34129: LD_INT 1
34131: PUSH
34132: FOR_DOWNTO
34133: IFFALSE 34163
// result := Join ( result , array [ i ] ) ;
34135: LD_ADDR_VAR 0 2
34139: PUSH
34140: LD_VAR 0 2
34144: PPUSH
34145: LD_VAR 0 1
34149: PUSH
34150: LD_VAR 0 3
34154: ARRAY
34155: PPUSH
34156: CALL 39007 0 2
34160: ST_TO_ADDR
34161: GO 34132
34163: POP
34164: POP
// end ;
34165: LD_VAR 0 2
34169: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
// if not unit or not hexes then
34178: LD_VAR 0 1
34182: NOT
34183: IFTRUE 34192
34185: PUSH
34186: LD_VAR 0 2
34190: NOT
34191: OR
34192: IFFALSE 34196
// exit ;
34194: GO 34319
// dist := 9999 ;
34196: LD_ADDR_VAR 0 5
34200: PUSH
34201: LD_INT 9999
34203: ST_TO_ADDR
// for i = 1 to hexes do
34204: LD_ADDR_VAR 0 4
34208: PUSH
34209: DOUBLE
34210: LD_INT 1
34212: DEC
34213: ST_TO_ADDR
34214: LD_VAR 0 2
34218: PUSH
34219: FOR_TO
34220: IFFALSE 34307
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34222: LD_ADDR_VAR 0 6
34226: PUSH
34227: LD_VAR 0 1
34231: PPUSH
34232: LD_VAR 0 2
34236: PUSH
34237: LD_VAR 0 4
34241: ARRAY
34242: PUSH
34243: LD_INT 1
34245: ARRAY
34246: PPUSH
34247: LD_VAR 0 2
34251: PUSH
34252: LD_VAR 0 4
34256: ARRAY
34257: PUSH
34258: LD_INT 2
34260: ARRAY
34261: PPUSH
34262: CALL_OW 297
34266: ST_TO_ADDR
// if tdist < dist then
34267: LD_VAR 0 6
34271: PUSH
34272: LD_VAR 0 5
34276: LESS
34277: IFFALSE 34305
// begin hex := hexes [ i ] ;
34279: LD_ADDR_VAR 0 8
34283: PUSH
34284: LD_VAR 0 2
34288: PUSH
34289: LD_VAR 0 4
34293: ARRAY
34294: ST_TO_ADDR
// dist := tdist ;
34295: LD_ADDR_VAR 0 5
34299: PUSH
34300: LD_VAR 0 6
34304: ST_TO_ADDR
// end ; end ;
34305: GO 34219
34307: POP
34308: POP
// result := hex ;
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_VAR 0 8
34318: ST_TO_ADDR
// end ;
34319: LD_VAR 0 3
34323: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34328: LD_VAR 0 1
34332: NOT
34333: IFTRUE 34372
34335: PUSH
34336: LD_VAR 0 1
34340: PUSH
34341: LD_INT 21
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 23
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PPUSH
34365: CALL_OW 69
34369: IN
34370: NOT
34371: OR
34372: IFFALSE 34376
// exit ;
34374: GO 34423
// for i = 1 to 3 do
34376: LD_ADDR_VAR 0 3
34380: PUSH
34381: DOUBLE
34382: LD_INT 1
34384: DEC
34385: ST_TO_ADDR
34386: LD_INT 3
34388: PUSH
34389: FOR_TO
34390: IFFALSE 34421
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34392: LD_VAR 0 1
34396: PPUSH
34397: CALL_OW 250
34401: PPUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 251
34411: PPUSH
34412: LD_INT 1
34414: PPUSH
34415: CALL_OW 453
34419: GO 34389
34421: POP
34422: POP
// end ;
34423: LD_VAR 0 2
34427: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34428: LD_INT 0
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
// if not unit or not enemy_unit then
34436: LD_VAR 0 1
34440: NOT
34441: IFTRUE 34450
34443: PUSH
34444: LD_VAR 0 2
34448: NOT
34449: OR
34450: IFFALSE 34454
// exit ;
34452: GO 34925
// if GetLives ( i ) < 250 then
34454: LD_VAR 0 4
34458: PPUSH
34459: CALL_OW 256
34463: PUSH
34464: LD_INT 250
34466: LESS
34467: IFFALSE 34480
// begin ComAutodestruct ( i ) ;
34469: LD_VAR 0 4
34473: PPUSH
34474: CALL 34324 0 1
// exit ;
34478: GO 34925
// end ; x := GetX ( enemy_unit ) ;
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: CALL_OW 250
34494: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34495: LD_ADDR_VAR 0 8
34499: PUSH
34500: LD_VAR 0 2
34504: PPUSH
34505: CALL_OW 251
34509: ST_TO_ADDR
// if not x or not y then
34510: LD_VAR 0 7
34514: NOT
34515: IFTRUE 34524
34517: PUSH
34518: LD_VAR 0 8
34522: NOT
34523: OR
34524: IFFALSE 34528
// exit ;
34526: GO 34925
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34528: LD_ADDR_VAR 0 6
34532: PUSH
34533: LD_VAR 0 7
34537: PPUSH
34538: LD_INT 0
34540: PPUSH
34541: LD_INT 4
34543: PPUSH
34544: CALL_OW 272
34548: PUSH
34549: LD_VAR 0 8
34553: PPUSH
34554: LD_INT 0
34556: PPUSH
34557: LD_INT 4
34559: PPUSH
34560: CALL_OW 273
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_VAR 0 7
34573: PPUSH
34574: LD_INT 1
34576: PPUSH
34577: LD_INT 4
34579: PPUSH
34580: CALL_OW 272
34584: PUSH
34585: LD_VAR 0 8
34589: PPUSH
34590: LD_INT 1
34592: PPUSH
34593: LD_INT 4
34595: PPUSH
34596: CALL_OW 273
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_VAR 0 7
34609: PPUSH
34610: LD_INT 2
34612: PPUSH
34613: LD_INT 4
34615: PPUSH
34616: CALL_OW 272
34620: PUSH
34621: LD_VAR 0 8
34625: PPUSH
34626: LD_INT 2
34628: PPUSH
34629: LD_INT 4
34631: PPUSH
34632: CALL_OW 273
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_VAR 0 7
34645: PPUSH
34646: LD_INT 3
34648: PPUSH
34649: LD_INT 4
34651: PPUSH
34652: CALL_OW 272
34656: PUSH
34657: LD_VAR 0 8
34661: PPUSH
34662: LD_INT 3
34664: PPUSH
34665: LD_INT 4
34667: PPUSH
34668: CALL_OW 273
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_VAR 0 7
34681: PPUSH
34682: LD_INT 4
34684: PPUSH
34685: LD_INT 4
34687: PPUSH
34688: CALL_OW 272
34692: PUSH
34693: LD_VAR 0 8
34697: PPUSH
34698: LD_INT 4
34700: PPUSH
34701: LD_INT 4
34703: PPUSH
34704: CALL_OW 273
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_VAR 0 7
34717: PPUSH
34718: LD_INT 5
34720: PPUSH
34721: LD_INT 4
34723: PPUSH
34724: CALL_OW 272
34728: PUSH
34729: LD_VAR 0 8
34733: PPUSH
34734: LD_INT 5
34736: PPUSH
34737: LD_INT 4
34739: PPUSH
34740: CALL_OW 273
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// for i = tmp downto 1 do
34757: LD_ADDR_VAR 0 4
34761: PUSH
34762: DOUBLE
34763: LD_VAR 0 6
34767: INC
34768: ST_TO_ADDR
34769: LD_INT 1
34771: PUSH
34772: FOR_DOWNTO
34773: IFFALSE 34876
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34775: LD_VAR 0 6
34779: PUSH
34780: LD_VAR 0 4
34784: ARRAY
34785: PUSH
34786: LD_INT 1
34788: ARRAY
34789: PPUSH
34790: LD_VAR 0 6
34794: PUSH
34795: LD_VAR 0 4
34799: ARRAY
34800: PUSH
34801: LD_INT 2
34803: ARRAY
34804: PPUSH
34805: CALL_OW 488
34809: NOT
34810: IFTRUE 34852
34812: PUSH
34813: LD_VAR 0 6
34817: PUSH
34818: LD_VAR 0 4
34822: ARRAY
34823: PUSH
34824: LD_INT 1
34826: ARRAY
34827: PPUSH
34828: LD_VAR 0 6
34832: PUSH
34833: LD_VAR 0 4
34837: ARRAY
34838: PUSH
34839: LD_INT 2
34841: ARRAY
34842: PPUSH
34843: CALL_OW 428
34847: PUSH
34848: LD_INT 0
34850: NONEQUAL
34851: OR
34852: IFFALSE 34874
// tmp := Delete ( tmp , i ) ;
34854: LD_ADDR_VAR 0 6
34858: PUSH
34859: LD_VAR 0 6
34863: PPUSH
34864: LD_VAR 0 4
34868: PPUSH
34869: CALL_OW 3
34873: ST_TO_ADDR
34874: GO 34772
34876: POP
34877: POP
// j := GetClosestHex ( unit , tmp ) ;
34878: LD_ADDR_VAR 0 5
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: LD_VAR 0 6
34892: PPUSH
34893: CALL 34170 0 2
34897: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34898: LD_VAR 0 1
34902: PPUSH
34903: LD_VAR 0 5
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 5
34916: PUSH
34917: LD_INT 2
34919: ARRAY
34920: PPUSH
34921: CALL_OW 111
// end ;
34925: LD_VAR 0 3
34929: RET
// export function PrepareApemanSoldier ( ) ; begin
34930: LD_INT 0
34932: PPUSH
// uc_nation := 0 ;
34933: LD_ADDR_OWVAR 21
34937: PUSH
34938: LD_INT 0
34940: ST_TO_ADDR
// hc_sex := sex_male ;
34941: LD_ADDR_OWVAR 27
34945: PUSH
34946: LD_INT 1
34948: ST_TO_ADDR
// hc_name :=  ;
34949: LD_ADDR_OWVAR 26
34953: PUSH
34954: LD_STRING 
34956: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34957: LD_ADDR_OWVAR 28
34961: PUSH
34962: LD_INT 15
34964: ST_TO_ADDR
// hc_gallery :=  ;
34965: LD_ADDR_OWVAR 33
34969: PUSH
34970: LD_STRING 
34972: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34973: LD_ADDR_OWVAR 31
34977: PUSH
34978: LD_INT 0
34980: PPUSH
34981: LD_INT 3
34983: PPUSH
34984: CALL_OW 12
34988: PUSH
34989: LD_INT 0
34991: PPUSH
34992: LD_INT 3
34994: PPUSH
34995: CALL_OW 12
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35012: LD_ADDR_OWVAR 29
35016: PUSH
35017: LD_INT 12
35019: PUSH
35020: LD_INT 12
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: ST_TO_ADDR
// end ;
35027: LD_VAR 0 1
35031: RET
// export function PrepareApemanEngineer ( ) ; begin
35032: LD_INT 0
35034: PPUSH
// uc_nation := 0 ;
35035: LD_ADDR_OWVAR 21
35039: PUSH
35040: LD_INT 0
35042: ST_TO_ADDR
// hc_sex := sex_male ;
35043: LD_ADDR_OWVAR 27
35047: PUSH
35048: LD_INT 1
35050: ST_TO_ADDR
// hc_name :=  ;
35051: LD_ADDR_OWVAR 26
35055: PUSH
35056: LD_STRING 
35058: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35059: LD_ADDR_OWVAR 28
35063: PUSH
35064: LD_INT 16
35066: ST_TO_ADDR
// hc_gallery :=  ;
35067: LD_ADDR_OWVAR 33
35071: PUSH
35072: LD_STRING 
35074: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35075: LD_ADDR_OWVAR 31
35079: PUSH
35080: LD_INT 0
35082: PPUSH
35083: LD_INT 3
35085: PPUSH
35086: CALL_OW 12
35090: PUSH
35091: LD_INT 0
35093: PPUSH
35094: LD_INT 3
35096: PPUSH
35097: CALL_OW 12
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35114: LD_ADDR_OWVAR 29
35118: PUSH
35119: LD_INT 12
35121: PUSH
35122: LD_INT 12
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: ST_TO_ADDR
// end ;
35129: LD_VAR 0 1
35133: RET
// export function PrepareApeman ( agressivity ) ; begin
35134: LD_INT 0
35136: PPUSH
// uc_side := 0 ;
35137: LD_ADDR_OWVAR 20
35141: PUSH
35142: LD_INT 0
35144: ST_TO_ADDR
// uc_nation := 0 ;
35145: LD_ADDR_OWVAR 21
35149: PUSH
35150: LD_INT 0
35152: ST_TO_ADDR
// hc_sex := sex_male ;
35153: LD_ADDR_OWVAR 27
35157: PUSH
35158: LD_INT 1
35160: ST_TO_ADDR
// hc_class := class_apeman ;
35161: LD_ADDR_OWVAR 28
35165: PUSH
35166: LD_INT 12
35168: ST_TO_ADDR
// hc_gallery :=  ;
35169: LD_ADDR_OWVAR 33
35173: PUSH
35174: LD_STRING 
35176: ST_TO_ADDR
// hc_name :=  ;
35177: LD_ADDR_OWVAR 26
35181: PUSH
35182: LD_STRING 
35184: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35185: LD_ADDR_OWVAR 29
35189: PUSH
35190: LD_INT 12
35192: PUSH
35193: LD_INT 12
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: ST_TO_ADDR
// if agressivity = 0 then
35200: LD_VAR 0 1
35204: PUSH
35205: LD_INT 0
35207: EQUAL
35208: IFFALSE 35220
// hc_agressivity := 0 else
35210: LD_ADDR_OWVAR 35
35214: PUSH
35215: LD_INT 0
35217: ST_TO_ADDR
35218: GO 35241
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35220: LD_ADDR_OWVAR 35
35224: PUSH
35225: LD_VAR 0 1
35229: NEG
35230: PPUSH
35231: LD_VAR 0 1
35235: PPUSH
35236: CALL_OW 12
35240: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35241: LD_ADDR_OWVAR 31
35245: PUSH
35246: LD_INT 0
35248: PPUSH
35249: LD_INT 3
35251: PPUSH
35252: CALL_OW 12
35256: PUSH
35257: LD_INT 0
35259: PPUSH
35260: LD_INT 3
35262: PPUSH
35263: CALL_OW 12
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
// end ;
35280: LD_VAR 0 2
35284: RET
// export function PrepareTiger ( agressivity ) ; begin
35285: LD_INT 0
35287: PPUSH
// uc_side := 0 ;
35288: LD_ADDR_OWVAR 20
35292: PUSH
35293: LD_INT 0
35295: ST_TO_ADDR
// uc_nation := 0 ;
35296: LD_ADDR_OWVAR 21
35300: PUSH
35301: LD_INT 0
35303: ST_TO_ADDR
// InitHc ;
35304: CALL_OW 19
// hc_class := class_tiger ;
35308: LD_ADDR_OWVAR 28
35312: PUSH
35313: LD_INT 14
35315: ST_TO_ADDR
// hc_gallery :=  ;
35316: LD_ADDR_OWVAR 33
35320: PUSH
35321: LD_STRING 
35323: ST_TO_ADDR
// hc_name :=  ;
35324: LD_ADDR_OWVAR 26
35328: PUSH
35329: LD_STRING 
35331: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35332: LD_ADDR_OWVAR 35
35336: PUSH
35337: LD_VAR 0 1
35341: NEG
35342: PPUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: CALL_OW 12
35352: ST_TO_ADDR
// end ;
35353: LD_VAR 0 2
35357: RET
// export function PrepareEnchidna ( ) ; begin
35358: LD_INT 0
35360: PPUSH
// uc_side := 0 ;
35361: LD_ADDR_OWVAR 20
35365: PUSH
35366: LD_INT 0
35368: ST_TO_ADDR
// uc_nation := 0 ;
35369: LD_ADDR_OWVAR 21
35373: PUSH
35374: LD_INT 0
35376: ST_TO_ADDR
// InitHc ;
35377: CALL_OW 19
// hc_class := class_baggie ;
35381: LD_ADDR_OWVAR 28
35385: PUSH
35386: LD_INT 13
35388: ST_TO_ADDR
// hc_gallery :=  ;
35389: LD_ADDR_OWVAR 33
35393: PUSH
35394: LD_STRING 
35396: ST_TO_ADDR
// hc_name :=  ;
35397: LD_ADDR_OWVAR 26
35401: PUSH
35402: LD_STRING 
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 1
35409: RET
// export function PrepareFrog ( ) ; begin
35410: LD_INT 0
35412: PPUSH
// uc_side := 0 ;
35413: LD_ADDR_OWVAR 20
35417: PUSH
35418: LD_INT 0
35420: ST_TO_ADDR
// uc_nation := 0 ;
35421: LD_ADDR_OWVAR 21
35425: PUSH
35426: LD_INT 0
35428: ST_TO_ADDR
// InitHc ;
35429: CALL_OW 19
// hc_class := class_frog ;
35433: LD_ADDR_OWVAR 28
35437: PUSH
35438: LD_INT 19
35440: ST_TO_ADDR
// hc_gallery :=  ;
35441: LD_ADDR_OWVAR 33
35445: PUSH
35446: LD_STRING 
35448: ST_TO_ADDR
// hc_name :=  ;
35449: LD_ADDR_OWVAR 26
35453: PUSH
35454: LD_STRING 
35456: ST_TO_ADDR
// end ;
35457: LD_VAR 0 1
35461: RET
// export function PrepareFish ( ) ; begin
35462: LD_INT 0
35464: PPUSH
// uc_side := 0 ;
35465: LD_ADDR_OWVAR 20
35469: PUSH
35470: LD_INT 0
35472: ST_TO_ADDR
// uc_nation := 0 ;
35473: LD_ADDR_OWVAR 21
35477: PUSH
35478: LD_INT 0
35480: ST_TO_ADDR
// InitHc ;
35481: CALL_OW 19
// hc_class := class_fish ;
35485: LD_ADDR_OWVAR 28
35489: PUSH
35490: LD_INT 20
35492: ST_TO_ADDR
// hc_gallery :=  ;
35493: LD_ADDR_OWVAR 33
35497: PUSH
35498: LD_STRING 
35500: ST_TO_ADDR
// hc_name :=  ;
35501: LD_ADDR_OWVAR 26
35505: PUSH
35506: LD_STRING 
35508: ST_TO_ADDR
// end ;
35509: LD_VAR 0 1
35513: RET
// export function PrepareBird ( ) ; begin
35514: LD_INT 0
35516: PPUSH
// uc_side := 0 ;
35517: LD_ADDR_OWVAR 20
35521: PUSH
35522: LD_INT 0
35524: ST_TO_ADDR
// uc_nation := 0 ;
35525: LD_ADDR_OWVAR 21
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
// InitHc ;
35533: CALL_OW 19
// hc_class := class_phororhacos ;
35537: LD_ADDR_OWVAR 28
35541: PUSH
35542: LD_INT 18
35544: ST_TO_ADDR
// hc_gallery :=  ;
35545: LD_ADDR_OWVAR 33
35549: PUSH
35550: LD_STRING 
35552: ST_TO_ADDR
// hc_name :=  ;
35553: LD_ADDR_OWVAR 26
35557: PUSH
35558: LD_STRING 
35560: ST_TO_ADDR
// end ;
35561: LD_VAR 0 1
35565: RET
// export function PrepareHorse ( ) ; begin
35566: LD_INT 0
35568: PPUSH
// uc_side := 0 ;
35569: LD_ADDR_OWVAR 20
35573: PUSH
35574: LD_INT 0
35576: ST_TO_ADDR
// uc_nation := 0 ;
35577: LD_ADDR_OWVAR 21
35581: PUSH
35582: LD_INT 0
35584: ST_TO_ADDR
// InitHc ;
35585: CALL_OW 19
// hc_class := class_horse ;
35589: LD_ADDR_OWVAR 28
35593: PUSH
35594: LD_INT 21
35596: ST_TO_ADDR
// hc_gallery :=  ;
35597: LD_ADDR_OWVAR 33
35601: PUSH
35602: LD_STRING 
35604: ST_TO_ADDR
// hc_name :=  ;
35605: LD_ADDR_OWVAR 26
35609: PUSH
35610: LD_STRING 
35612: ST_TO_ADDR
// end ;
35613: LD_VAR 0 1
35617: RET
// export function PrepareMastodont ( ) ; begin
35618: LD_INT 0
35620: PPUSH
// uc_side := 0 ;
35621: LD_ADDR_OWVAR 20
35625: PUSH
35626: LD_INT 0
35628: ST_TO_ADDR
// uc_nation := 0 ;
35629: LD_ADDR_OWVAR 21
35633: PUSH
35634: LD_INT 0
35636: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35637: LD_ADDR_OWVAR 37
35641: PUSH
35642: LD_INT 31
35644: ST_TO_ADDR
// vc_control := control_rider ;
35645: LD_ADDR_OWVAR 38
35649: PUSH
35650: LD_INT 4
35652: ST_TO_ADDR
// end ;
35653: LD_VAR 0 1
35657: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35658: LD_INT 0
35660: PPUSH
35661: PPUSH
35662: PPUSH
// uc_side = 0 ;
35663: LD_ADDR_OWVAR 20
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// uc_nation = 0 ;
35671: LD_ADDR_OWVAR 21
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// InitHc_All ( ) ;
35679: CALL_OW 584
// InitVc ;
35683: CALL_OW 20
// if mastodonts then
35687: LD_VAR 0 6
35691: IFFALSE 35758
// for i = 1 to mastodonts do
35693: LD_ADDR_VAR 0 11
35697: PUSH
35698: DOUBLE
35699: LD_INT 1
35701: DEC
35702: ST_TO_ADDR
35703: LD_VAR 0 6
35707: PUSH
35708: FOR_TO
35709: IFFALSE 35756
// begin vc_chassis := 31 ;
35711: LD_ADDR_OWVAR 37
35715: PUSH
35716: LD_INT 31
35718: ST_TO_ADDR
// vc_control := control_rider ;
35719: LD_ADDR_OWVAR 38
35723: PUSH
35724: LD_INT 4
35726: ST_TO_ADDR
// animal := CreateVehicle ;
35727: LD_ADDR_VAR 0 12
35731: PUSH
35732: CALL_OW 45
35736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35737: LD_VAR 0 12
35741: PPUSH
35742: LD_VAR 0 8
35746: PPUSH
35747: LD_INT 0
35749: PPUSH
35750: CALL 37900 0 3
// end ;
35754: GO 35708
35756: POP
35757: POP
// if horses then
35758: LD_VAR 0 5
35762: IFFALSE 35829
// for i = 1 to horses do
35764: LD_ADDR_VAR 0 11
35768: PUSH
35769: DOUBLE
35770: LD_INT 1
35772: DEC
35773: ST_TO_ADDR
35774: LD_VAR 0 5
35778: PUSH
35779: FOR_TO
35780: IFFALSE 35827
// begin hc_class := 21 ;
35782: LD_ADDR_OWVAR 28
35786: PUSH
35787: LD_INT 21
35789: ST_TO_ADDR
// hc_gallery :=  ;
35790: LD_ADDR_OWVAR 33
35794: PUSH
35795: LD_STRING 
35797: ST_TO_ADDR
// animal := CreateHuman ;
35798: LD_ADDR_VAR 0 12
35802: PUSH
35803: CALL_OW 44
35807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35808: LD_VAR 0 12
35812: PPUSH
35813: LD_VAR 0 8
35817: PPUSH
35818: LD_INT 0
35820: PPUSH
35821: CALL 37900 0 3
// end ;
35825: GO 35779
35827: POP
35828: POP
// if birds then
35829: LD_VAR 0 1
35833: IFFALSE 35900
// for i = 1 to birds do
35835: LD_ADDR_VAR 0 11
35839: PUSH
35840: DOUBLE
35841: LD_INT 1
35843: DEC
35844: ST_TO_ADDR
35845: LD_VAR 0 1
35849: PUSH
35850: FOR_TO
35851: IFFALSE 35898
// begin hc_class := 18 ;
35853: LD_ADDR_OWVAR 28
35857: PUSH
35858: LD_INT 18
35860: ST_TO_ADDR
// hc_gallery =  ;
35861: LD_ADDR_OWVAR 33
35865: PUSH
35866: LD_STRING 
35868: ST_TO_ADDR
// animal := CreateHuman ;
35869: LD_ADDR_VAR 0 12
35873: PUSH
35874: CALL_OW 44
35878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35879: LD_VAR 0 12
35883: PPUSH
35884: LD_VAR 0 8
35888: PPUSH
35889: LD_INT 0
35891: PPUSH
35892: CALL 37900 0 3
// end ;
35896: GO 35850
35898: POP
35899: POP
// if tigers then
35900: LD_VAR 0 2
35904: IFFALSE 35988
// for i = 1 to tigers do
35906: LD_ADDR_VAR 0 11
35910: PUSH
35911: DOUBLE
35912: LD_INT 1
35914: DEC
35915: ST_TO_ADDR
35916: LD_VAR 0 2
35920: PUSH
35921: FOR_TO
35922: IFFALSE 35986
// begin hc_class = class_tiger ;
35924: LD_ADDR_OWVAR 28
35928: PUSH
35929: LD_INT 14
35931: ST_TO_ADDR
// hc_gallery =  ;
35932: LD_ADDR_OWVAR 33
35936: PUSH
35937: LD_STRING 
35939: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35940: LD_ADDR_OWVAR 35
35944: PUSH
35945: LD_INT 7
35947: NEG
35948: PPUSH
35949: LD_INT 7
35951: PPUSH
35952: CALL_OW 12
35956: ST_TO_ADDR
// animal := CreateHuman ;
35957: LD_ADDR_VAR 0 12
35961: PUSH
35962: CALL_OW 44
35966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35967: LD_VAR 0 12
35971: PPUSH
35972: LD_VAR 0 8
35976: PPUSH
35977: LD_INT 0
35979: PPUSH
35980: CALL 37900 0 3
// end ;
35984: GO 35921
35986: POP
35987: POP
// if apemans then
35988: LD_VAR 0 3
35992: IFFALSE 36115
// for i = 1 to apemans do
35994: LD_ADDR_VAR 0 11
35998: PUSH
35999: DOUBLE
36000: LD_INT 1
36002: DEC
36003: ST_TO_ADDR
36004: LD_VAR 0 3
36008: PUSH
36009: FOR_TO
36010: IFFALSE 36113
// begin hc_class = class_apeman ;
36012: LD_ADDR_OWVAR 28
36016: PUSH
36017: LD_INT 12
36019: ST_TO_ADDR
// hc_gallery =  ;
36020: LD_ADDR_OWVAR 33
36024: PUSH
36025: LD_STRING 
36027: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36028: LD_ADDR_OWVAR 35
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PPUSH
36037: LD_INT 2
36039: PPUSH
36040: CALL_OW 12
36044: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36045: LD_ADDR_OWVAR 31
36049: PUSH
36050: LD_INT 1
36052: PPUSH
36053: LD_INT 3
36055: PPUSH
36056: CALL_OW 12
36060: PUSH
36061: LD_INT 1
36063: PPUSH
36064: LD_INT 3
36066: PPUSH
36067: CALL_OW 12
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: ST_TO_ADDR
// animal := CreateHuman ;
36084: LD_ADDR_VAR 0 12
36088: PUSH
36089: CALL_OW 44
36093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36094: LD_VAR 0 12
36098: PPUSH
36099: LD_VAR 0 8
36103: PPUSH
36104: LD_INT 0
36106: PPUSH
36107: CALL 37900 0 3
// end ;
36111: GO 36009
36113: POP
36114: POP
// if enchidnas then
36115: LD_VAR 0 4
36119: IFFALSE 36186
// for i = 1 to enchidnas do
36121: LD_ADDR_VAR 0 11
36125: PUSH
36126: DOUBLE
36127: LD_INT 1
36129: DEC
36130: ST_TO_ADDR
36131: LD_VAR 0 4
36135: PUSH
36136: FOR_TO
36137: IFFALSE 36184
// begin hc_class = 13 ;
36139: LD_ADDR_OWVAR 28
36143: PUSH
36144: LD_INT 13
36146: ST_TO_ADDR
// hc_gallery =  ;
36147: LD_ADDR_OWVAR 33
36151: PUSH
36152: LD_STRING 
36154: ST_TO_ADDR
// animal := CreateHuman ;
36155: LD_ADDR_VAR 0 12
36159: PUSH
36160: CALL_OW 44
36164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36165: LD_VAR 0 12
36169: PPUSH
36170: LD_VAR 0 8
36174: PPUSH
36175: LD_INT 0
36177: PPUSH
36178: CALL 37900 0 3
// end ;
36182: GO 36136
36184: POP
36185: POP
// if fishes then
36186: LD_VAR 0 7
36190: IFFALSE 36257
// for i = 1 to fishes do
36192: LD_ADDR_VAR 0 11
36196: PUSH
36197: DOUBLE
36198: LD_INT 1
36200: DEC
36201: ST_TO_ADDR
36202: LD_VAR 0 7
36206: PUSH
36207: FOR_TO
36208: IFFALSE 36255
// begin hc_class = 20 ;
36210: LD_ADDR_OWVAR 28
36214: PUSH
36215: LD_INT 20
36217: ST_TO_ADDR
// hc_gallery =  ;
36218: LD_ADDR_OWVAR 33
36222: PUSH
36223: LD_STRING 
36225: ST_TO_ADDR
// animal := CreateHuman ;
36226: LD_ADDR_VAR 0 12
36230: PUSH
36231: CALL_OW 44
36235: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36236: LD_VAR 0 12
36240: PPUSH
36241: LD_VAR 0 9
36245: PPUSH
36246: LD_INT 0
36248: PPUSH
36249: CALL 37900 0 3
// end ;
36253: GO 36207
36255: POP
36256: POP
// end ;
36257: LD_VAR 0 10
36261: RET
// export function WantHeal ( sci , unit ) ; begin
36262: LD_INT 0
36264: PPUSH
// if GetTaskList ( sci ) > 0 then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 437
36274: PUSH
36275: LD_INT 0
36277: GREATER
36278: IFFALSE 36350
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36280: LD_VAR 0 1
36284: PPUSH
36285: CALL_OW 437
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: PUSH
36298: LD_STRING l
36300: EQUAL
36301: IFFALSE 36328
36303: PUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 437
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: PUSH
36318: LD_INT 4
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 2
36326: EQUAL
36327: AND
36328: IFFALSE 36340
// result := true else
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 1
36337: ST_TO_ADDR
36338: GO 36348
// result := false ;
36340: LD_ADDR_VAR 0 3
36344: PUSH
36345: LD_INT 0
36347: ST_TO_ADDR
// end else
36348: GO 36358
// result := false ;
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_INT 0
36357: ST_TO_ADDR
// end ;
36358: LD_VAR 0 3
36362: RET
// export function HealTarget ( sci ) ; begin
36363: LD_INT 0
36365: PPUSH
// if not sci then
36366: LD_VAR 0 1
36370: NOT
36371: IFFALSE 36375
// exit ;
36373: GO 36440
// result := 0 ;
36375: LD_ADDR_VAR 0 2
36379: PUSH
36380: LD_INT 0
36382: ST_TO_ADDR
// if GetTaskList ( sci ) then
36383: LD_VAR 0 1
36387: PPUSH
36388: CALL_OW 437
36392: IFFALSE 36440
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36394: LD_VAR 0 1
36398: PPUSH
36399: CALL_OW 437
36403: PUSH
36404: LD_INT 1
36406: ARRAY
36407: PUSH
36408: LD_INT 1
36410: ARRAY
36411: PUSH
36412: LD_STRING l
36414: EQUAL
36415: IFFALSE 36440
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36417: LD_ADDR_VAR 0 2
36421: PUSH
36422: LD_VAR 0 1
36426: PPUSH
36427: CALL_OW 437
36431: PUSH
36432: LD_INT 1
36434: ARRAY
36435: PUSH
36436: LD_INT 4
36438: ARRAY
36439: ST_TO_ADDR
// end ;
36440: LD_VAR 0 2
36444: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36445: LD_INT 0
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
// if not base_units then
36451: LD_VAR 0 1
36455: NOT
36456: IFFALSE 36460
// exit ;
36458: GO 36547
// result := false ;
36460: LD_ADDR_VAR 0 2
36464: PUSH
36465: LD_INT 0
36467: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36468: LD_ADDR_VAR 0 5
36472: PUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: LD_INT 21
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PPUSH
36488: CALL_OW 72
36492: ST_TO_ADDR
// if not tmp then
36493: LD_VAR 0 5
36497: NOT
36498: IFFALSE 36502
// exit ;
36500: GO 36547
// for i in tmp do
36502: LD_ADDR_VAR 0 3
36506: PUSH
36507: LD_VAR 0 5
36511: PUSH
36512: FOR_IN
36513: IFFALSE 36545
// begin result := EnemyInRange ( i , 22 ) ;
36515: LD_ADDR_VAR 0 2
36519: PUSH
36520: LD_VAR 0 3
36524: PPUSH
36525: LD_INT 22
36527: PPUSH
36528: CALL 33972 0 2
36532: ST_TO_ADDR
// if result then
36533: LD_VAR 0 2
36537: IFFALSE 36543
// exit ;
36539: POP
36540: POP
36541: GO 36547
// end ;
36543: GO 36512
36545: POP
36546: POP
// end ;
36547: LD_VAR 0 2
36551: RET
// export function FilterByTag ( units , tag ) ; begin
36552: LD_INT 0
36554: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36555: LD_ADDR_VAR 0 3
36559: PUSH
36560: LD_VAR 0 1
36564: PPUSH
36565: LD_INT 120
36567: PUSH
36568: LD_VAR 0 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PPUSH
36577: CALL_OW 72
36581: ST_TO_ADDR
// end ;
36582: LD_VAR 0 3
36586: RET
// export function IsDriver ( un ) ; begin
36587: LD_INT 0
36589: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36590: LD_ADDR_VAR 0 2
36594: PUSH
36595: LD_VAR 0 1
36599: PUSH
36600: LD_INT 55
36602: PUSH
36603: EMPTY
36604: LIST
36605: PPUSH
36606: CALL_OW 69
36610: IN
36611: ST_TO_ADDR
// end ;
36612: LD_VAR 0 2
36616: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36617: LD_INT 0
36619: PPUSH
36620: PPUSH
// list := [ ] ;
36621: LD_ADDR_VAR 0 5
36625: PUSH
36626: EMPTY
36627: ST_TO_ADDR
// case d of 0 :
36628: LD_VAR 0 3
36632: PUSH
36633: LD_INT 0
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36641
36639: GO 36774
36641: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36642: LD_ADDR_VAR 0 5
36646: PUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_INT 4
36654: MINUS
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_INT 4
36663: MINUS
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: LD_VAR 0 1
36677: PUSH
36678: LD_INT 3
36680: MINUS
36681: PUSH
36682: LD_VAR 0 2
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PUSH
36695: LD_VAR 0 1
36699: PUSH
36700: LD_INT 4
36702: PLUS
36703: PUSH
36704: LD_VAR 0 2
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_INT 3
36724: PLUS
36725: PUSH
36726: LD_VAR 0 2
36730: PUSH
36731: LD_INT 3
36733: PLUS
36734: PUSH
36735: LD_INT 5
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: LD_VAR 0 2
36752: PUSH
36753: LD_INT 4
36755: PLUS
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// end ; 1 :
36772: GO 37472
36774: LD_INT 1
36776: DOUBLE
36777: EQUAL
36778: IFTRUE 36782
36780: GO 36915
36782: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_VAR 0 1
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 4
36800: MINUS
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 3
36817: MINUS
36818: PUSH
36819: LD_VAR 0 2
36823: PUSH
36824: LD_INT 3
36826: MINUS
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: LD_VAR 0 1
36840: PUSH
36841: LD_INT 4
36843: MINUS
36844: PUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_VAR 0 2
36867: PUSH
36868: LD_INT 3
36870: PLUS
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: PUSH
36880: LD_VAR 0 1
36884: PUSH
36885: LD_INT 4
36887: PLUS
36888: PUSH
36889: LD_VAR 0 2
36893: PUSH
36894: LD_INT 4
36896: PLUS
36897: PUSH
36898: LD_INT 5
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// end ; 2 :
36913: GO 37472
36915: LD_INT 2
36917: DOUBLE
36918: EQUAL
36919: IFTRUE 36923
36921: GO 37052
36923: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36924: LD_ADDR_VAR 0 5
36928: PUSH
36929: LD_VAR 0 1
36933: PUSH
36934: LD_VAR 0 2
36938: PUSH
36939: LD_INT 3
36941: MINUS
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: PUSH
36951: LD_VAR 0 1
36955: PUSH
36956: LD_INT 4
36958: PLUS
36959: PUSH
36960: LD_VAR 0 2
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: LD_VAR 0 1
36977: PUSH
36978: LD_VAR 0 2
36982: PUSH
36983: LD_INT 4
36985: PLUS
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: LD_VAR 0 1
36999: PUSH
37000: LD_INT 3
37002: MINUS
37003: PUSH
37004: LD_VAR 0 2
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: PUSH
37017: LD_VAR 0 1
37021: PUSH
37022: LD_INT 4
37024: MINUS
37025: PUSH
37026: LD_VAR 0 2
37030: PUSH
37031: LD_INT 4
37033: MINUS
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// end ; 3 :
37050: GO 37472
37052: LD_INT 3
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37060
37058: GO 37193
37060: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_VAR 0 1
37070: PUSH
37071: LD_INT 3
37073: PLUS
37074: PUSH
37075: LD_VAR 0 2
37079: PUSH
37080: LD_INT 4
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: PUSH
37088: LD_VAR 0 1
37092: PUSH
37093: LD_INT 4
37095: PLUS
37096: PUSH
37097: LD_VAR 0 2
37101: PUSH
37102: LD_INT 4
37104: PLUS
37105: PUSH
37106: LD_INT 5
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: PUSH
37114: LD_VAR 0 1
37118: PUSH
37119: LD_INT 4
37121: MINUS
37122: PUSH
37123: LD_VAR 0 2
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: PUSH
37136: LD_VAR 0 1
37140: PUSH
37141: LD_VAR 0 2
37145: PUSH
37146: LD_INT 4
37148: MINUS
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: PUSH
37158: LD_VAR 0 1
37162: PUSH
37163: LD_INT 3
37165: MINUS
37166: PUSH
37167: LD_VAR 0 2
37171: PUSH
37172: LD_INT 3
37174: MINUS
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// end ; 4 :
37191: GO 37472
37193: LD_INT 4
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37201
37199: GO 37334
37201: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37202: LD_ADDR_VAR 0 5
37206: PUSH
37207: LD_VAR 0 1
37211: PUSH
37212: LD_VAR 0 2
37216: PUSH
37217: LD_INT 4
37219: PLUS
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: PUSH
37229: LD_VAR 0 1
37233: PUSH
37234: LD_INT 3
37236: PLUS
37237: PUSH
37238: LD_VAR 0 2
37242: PUSH
37243: LD_INT 3
37245: PLUS
37246: PUSH
37247: LD_INT 5
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: LD_INT 4
37262: PLUS
37263: PUSH
37264: LD_VAR 0 2
37268: PUSH
37269: LD_INT 4
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: PUSH
37277: LD_VAR 0 1
37281: PUSH
37282: LD_VAR 0 2
37286: PUSH
37287: LD_INT 3
37289: MINUS
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: PUSH
37299: LD_VAR 0 1
37303: PUSH
37304: LD_INT 4
37306: MINUS
37307: PUSH
37308: LD_VAR 0 2
37312: PUSH
37313: LD_INT 4
37315: MINUS
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: ST_TO_ADDR
// end ; 5 :
37332: GO 37472
37334: LD_INT 5
37336: DOUBLE
37337: EQUAL
37338: IFTRUE 37342
37340: GO 37471
37342: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37343: LD_ADDR_VAR 0 5
37347: PUSH
37348: LD_VAR 0 1
37352: PUSH
37353: LD_INT 4
37355: MINUS
37356: PUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: PUSH
37370: LD_VAR 0 1
37374: PUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_INT 4
37382: MINUS
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: PUSH
37392: LD_VAR 0 1
37396: PUSH
37397: LD_INT 4
37399: PLUS
37400: PUSH
37401: LD_VAR 0 2
37405: PUSH
37406: LD_INT 4
37408: PLUS
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: PUSH
37418: LD_VAR 0 1
37422: PUSH
37423: LD_INT 3
37425: PLUS
37426: PUSH
37427: LD_VAR 0 2
37431: PUSH
37432: LD_INT 4
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PUSH
37440: LD_VAR 0 1
37444: PUSH
37445: LD_VAR 0 2
37449: PUSH
37450: LD_INT 3
37452: PLUS
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// end ; end ;
37469: GO 37472
37471: POP
// result := list ;
37472: LD_ADDR_VAR 0 4
37476: PUSH
37477: LD_VAR 0 5
37481: ST_TO_ADDR
// end ;
37482: LD_VAR 0 4
37486: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37487: LD_INT 0
37489: PPUSH
37490: PPUSH
37491: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37492: LD_VAR 0 1
37496: NOT
37497: IFTRUE 37525
37499: PUSH
37500: LD_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: IN
37523: NOT
37524: OR
37525: IFFALSE 37529
// exit ;
37527: GO 37612
// tmp := [ ] ;
37529: LD_ADDR_VAR 0 5
37533: PUSH
37534: EMPTY
37535: ST_TO_ADDR
// for i in units do
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: LD_VAR 0 1
37545: PUSH
37546: FOR_IN
37547: IFFALSE 37581
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: LD_VAR 0 5
37558: PPUSH
37559: LD_VAR 0 4
37563: PPUSH
37564: LD_VAR 0 2
37568: PPUSH
37569: CALL_OW 259
37573: PPUSH
37574: CALL 39007 0 2
37578: ST_TO_ADDR
37579: GO 37546
37581: POP
37582: POP
// if not tmp then
37583: LD_VAR 0 5
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37612
// result := SortListByListDesc ( units , tmp ) ;
37592: LD_ADDR_VAR 0 3
37596: PUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: LD_VAR 0 5
37606: PPUSH
37607: CALL_OW 77
37611: ST_TO_ADDR
// end ;
37612: LD_VAR 0 3
37616: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37617: LD_INT 0
37619: PPUSH
37620: PPUSH
37621: PPUSH
// result := false ;
37622: LD_ADDR_VAR 0 3
37626: PUSH
37627: LD_INT 0
37629: ST_TO_ADDR
// if not building then
37630: LD_VAR 0 2
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37783
// x := GetX ( building ) ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_VAR 0 2
37648: PPUSH
37649: CALL_OW 250
37653: ST_TO_ADDR
// y := GetY ( building ) ;
37654: LD_ADDR_VAR 0 5
37658: PUSH
37659: LD_VAR 0 2
37663: PPUSH
37664: CALL_OW 251
37668: ST_TO_ADDR
// if not x or not y then
37669: LD_VAR 0 4
37673: NOT
37674: IFTRUE 37683
37676: PUSH
37677: LD_VAR 0 5
37681: NOT
37682: OR
37683: IFFALSE 37687
// exit ;
37685: GO 37783
// if GetTaskList ( unit ) then
37687: LD_VAR 0 1
37691: PPUSH
37692: CALL_OW 437
37696: IFFALSE 37783
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37698: LD_STRING e
37700: PUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 437
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: PUSH
37715: LD_INT 1
37717: ARRAY
37718: EQUAL
37719: IFFALSE 37746
37721: PUSH
37722: LD_VAR 0 4
37726: PUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 437
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: PUSH
37741: LD_INT 2
37743: ARRAY
37744: EQUAL
37745: AND
37746: IFFALSE 37773
37748: PUSH
37749: LD_VAR 0 5
37753: PUSH
37754: LD_VAR 0 1
37758: PPUSH
37759: CALL_OW 437
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PUSH
37768: LD_INT 3
37770: ARRAY
37771: EQUAL
37772: AND
37773: IFFALSE 37783
// result := true end ;
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 1
37782: ST_TO_ADDR
// end ;
37783: LD_VAR 0 3
37787: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37788: LD_INT 0
37790: PPUSH
// result := false ;
37791: LD_ADDR_VAR 0 4
37795: PUSH
37796: LD_INT 0
37798: ST_TO_ADDR
// if GetTaskList ( unit ) then
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 437
37808: IFFALSE 37895
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37810: LD_STRING M
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 437
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_INT 1
37829: ARRAY
37830: EQUAL
37831: IFFALSE 37858
37833: PUSH
37834: LD_VAR 0 2
37838: PUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 437
37848: PUSH
37849: LD_INT 1
37851: ARRAY
37852: PUSH
37853: LD_INT 2
37855: ARRAY
37856: EQUAL
37857: AND
37858: IFFALSE 37885
37860: PUSH
37861: LD_VAR 0 3
37865: PUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 437
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PUSH
37880: LD_INT 3
37882: ARRAY
37883: EQUAL
37884: AND
37885: IFFALSE 37895
// result := true ;
37887: LD_ADDR_VAR 0 4
37891: PUSH
37892: LD_INT 1
37894: ST_TO_ADDR
// end ; end ;
37895: LD_VAR 0 4
37899: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37900: LD_INT 0
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
// if not unit or not area then
37906: LD_VAR 0 1
37910: NOT
37911: IFTRUE 37920
37913: PUSH
37914: LD_VAR 0 2
37918: NOT
37919: OR
37920: IFFALSE 37924
// exit ;
37922: GO 38100
// tmp := AreaToList ( area , i ) ;
37924: LD_ADDR_VAR 0 6
37928: PUSH
37929: LD_VAR 0 2
37933: PPUSH
37934: LD_VAR 0 5
37938: PPUSH
37939: CALL_OW 517
37943: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37944: LD_ADDR_VAR 0 5
37948: PUSH
37949: DOUBLE
37950: LD_INT 1
37952: DEC
37953: ST_TO_ADDR
37954: LD_VAR 0 6
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38098
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37966: LD_ADDR_VAR 0 7
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 5
37984: ARRAY
37985: PUSH
37986: LD_VAR 0 6
37990: PUSH
37991: LD_INT 2
37993: ARRAY
37994: PUSH
37995: LD_VAR 0 5
37999: ARRAY
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38005: LD_INT 92
38007: PUSH
38008: LD_VAR 0 7
38012: PUSH
38013: LD_INT 1
38015: ARRAY
38016: PUSH
38017: LD_VAR 0 7
38021: PUSH
38022: LD_INT 2
38024: ARRAY
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: PPUSH
38035: CALL_OW 69
38039: PUSH
38040: LD_INT 0
38042: EQUAL
38043: IFFALSE 38096
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_VAR 0 7
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 7
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: LD_VAR 0 3
38072: PPUSH
38073: CALL_OW 48
// result := IsPlaced ( unit ) ;
38077: LD_ADDR_VAR 0 4
38081: PUSH
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 305
38091: ST_TO_ADDR
// exit ;
38092: POP
38093: POP
38094: GO 38100
// end ; end ;
38096: GO 37963
38098: POP
38099: POP
// end ;
38100: LD_VAR 0 4
38104: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38105: LD_INT 0
38107: PPUSH
38108: PPUSH
38109: PPUSH
// if not side or side > 8 then
38110: LD_VAR 0 1
38114: NOT
38115: IFTRUE 38127
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: LD_INT 8
38125: GREATER
38126: OR
38127: IFFALSE 38131
// exit ;
38129: GO 38318
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38131: LD_ADDR_VAR 0 4
38135: PUSH
38136: LD_INT 22
38138: PUSH
38139: LD_VAR 0 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 21
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PPUSH
38162: CALL_OW 69
38166: ST_TO_ADDR
// if not tmp then
38167: LD_VAR 0 4
38171: NOT
38172: IFFALSE 38176
// exit ;
38174: GO 38318
// enable_addtolog := true ;
38176: LD_ADDR_OWVAR 81
38180: PUSH
38181: LD_INT 1
38183: ST_TO_ADDR
// AddToLog ( [ ) ;
38184: LD_STRING [
38186: PPUSH
38187: CALL_OW 561
// for i in tmp do
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_VAR 0 4
38200: PUSH
38201: FOR_IN
38202: IFFALSE 38309
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38204: LD_STRING [
38206: PUSH
38207: LD_VAR 0 3
38211: PPUSH
38212: CALL_OW 266
38216: STR
38217: PUSH
38218: LD_STRING , 
38220: STR
38221: PUSH
38222: LD_VAR 0 3
38226: PPUSH
38227: CALL_OW 250
38231: STR
38232: PUSH
38233: LD_STRING , 
38235: STR
38236: PUSH
38237: LD_VAR 0 3
38241: PPUSH
38242: CALL_OW 251
38246: STR
38247: PUSH
38248: LD_STRING , 
38250: STR
38251: PUSH
38252: LD_VAR 0 3
38256: PPUSH
38257: CALL_OW 254
38261: STR
38262: PUSH
38263: LD_STRING , 
38265: STR
38266: PUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: LD_INT 1
38274: PPUSH
38275: CALL_OW 268
38279: STR
38280: PUSH
38281: LD_STRING , 
38283: STR
38284: PUSH
38285: LD_VAR 0 3
38289: PPUSH
38290: LD_INT 2
38292: PPUSH
38293: CALL_OW 268
38297: STR
38298: PUSH
38299: LD_STRING ],
38301: STR
38302: PPUSH
38303: CALL_OW 561
// end ;
38307: GO 38201
38309: POP
38310: POP
// AddToLog ( ]; ) ;
38311: LD_STRING ];
38313: PPUSH
38314: CALL_OW 561
// end ;
38318: LD_VAR 0 2
38322: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
// if not area or not rate or not max then
38330: LD_VAR 0 1
38334: NOT
38335: IFTRUE 38344
38337: PUSH
38338: LD_VAR 0 2
38342: NOT
38343: OR
38344: IFTRUE 38353
38346: PUSH
38347: LD_VAR 0 4
38351: NOT
38352: OR
38353: IFFALSE 38357
// exit ;
38355: GO 38546
// while 1 do
38357: LD_INT 1
38359: IFFALSE 38546
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38361: LD_ADDR_VAR 0 9
38365: PUSH
38366: LD_VAR 0 1
38370: PPUSH
38371: LD_INT 1
38373: PPUSH
38374: CALL_OW 287
38378: PUSH
38379: LD_INT 10
38381: MUL
38382: ST_TO_ADDR
// r := rate / 10 ;
38383: LD_ADDR_VAR 0 7
38387: PUSH
38388: LD_VAR 0 2
38392: PUSH
38393: LD_INT 10
38395: DIVREAL
38396: ST_TO_ADDR
// time := 1 1$00 ;
38397: LD_ADDR_VAR 0 8
38401: PUSH
38402: LD_INT 2100
38404: ST_TO_ADDR
// if amount < min then
38405: LD_VAR 0 9
38409: PUSH
38410: LD_VAR 0 3
38414: LESS
38415: IFFALSE 38433
// r := r * 2 else
38417: LD_ADDR_VAR 0 7
38421: PUSH
38422: LD_VAR 0 7
38426: PUSH
38427: LD_INT 2
38429: MUL
38430: ST_TO_ADDR
38431: GO 38459
// if amount > max then
38433: LD_VAR 0 9
38437: PUSH
38438: LD_VAR 0 4
38442: GREATER
38443: IFFALSE 38459
// r := r / 2 ;
38445: LD_ADDR_VAR 0 7
38449: PUSH
38450: LD_VAR 0 7
38454: PUSH
38455: LD_INT 2
38457: DIVREAL
38458: ST_TO_ADDR
// time := time / r ;
38459: LD_ADDR_VAR 0 8
38463: PUSH
38464: LD_VAR 0 8
38468: PUSH
38469: LD_VAR 0 7
38473: DIVREAL
38474: ST_TO_ADDR
// if time < 0 then
38475: LD_VAR 0 8
38479: PUSH
38480: LD_INT 0
38482: LESS
38483: IFFALSE 38500
// time := time * - 1 ;
38485: LD_ADDR_VAR 0 8
38489: PUSH
38490: LD_VAR 0 8
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: MUL
38499: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38500: LD_VAR 0 8
38504: PUSH
38505: LD_INT 35
38507: PPUSH
38508: LD_INT 875
38510: PPUSH
38511: CALL_OW 12
38515: PLUS
38516: PPUSH
38517: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38521: LD_INT 1
38523: PPUSH
38524: LD_INT 5
38526: PPUSH
38527: CALL_OW 12
38531: PPUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: CALL_OW 55
// end ;
38544: GO 38357
// end ;
38546: LD_VAR 0 5
38550: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38551: LD_INT 0
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
// if not turrets or not factories then
38561: LD_VAR 0 1
38565: NOT
38566: IFTRUE 38575
38568: PUSH
38569: LD_VAR 0 2
38573: NOT
38574: OR
38575: IFFALSE 38579
// exit ;
38577: GO 38886
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38579: LD_ADDR_VAR 0 10
38583: PUSH
38584: LD_INT 5
38586: PUSH
38587: LD_INT 6
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: LD_INT 5
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 24
38621: PUSH
38622: LD_INT 25
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 23
38631: PUSH
38632: LD_INT 27
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 42
38645: PUSH
38646: LD_INT 43
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 44
38655: PUSH
38656: LD_INT 46
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 45
38665: PUSH
38666: LD_INT 47
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// result := [ ] ;
38683: LD_ADDR_VAR 0 3
38687: PUSH
38688: EMPTY
38689: ST_TO_ADDR
// for i in turrets do
38690: LD_ADDR_VAR 0 4
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: FOR_IN
38701: IFFALSE 38884
// begin nat := GetNation ( i ) ;
38703: LD_ADDR_VAR 0 7
38707: PUSH
38708: LD_VAR 0 4
38712: PPUSH
38713: CALL_OW 248
38717: ST_TO_ADDR
// weapon := 0 ;
38718: LD_ADDR_VAR 0 8
38722: PUSH
38723: LD_INT 0
38725: ST_TO_ADDR
// if not nat then
38726: LD_VAR 0 7
38730: NOT
38731: IFFALSE 38735
// continue ;
38733: GO 38700
// for j in list [ nat ] do
38735: LD_ADDR_VAR 0 5
38739: PUSH
38740: LD_VAR 0 10
38744: PUSH
38745: LD_VAR 0 7
38749: ARRAY
38750: PUSH
38751: FOR_IN
38752: IFFALSE 38793
// if GetBWeapon ( i ) = j [ 1 ] then
38754: LD_VAR 0 4
38758: PPUSH
38759: CALL_OW 269
38763: PUSH
38764: LD_VAR 0 5
38768: PUSH
38769: LD_INT 1
38771: ARRAY
38772: EQUAL
38773: IFFALSE 38791
// begin weapon := j [ 2 ] ;
38775: LD_ADDR_VAR 0 8
38779: PUSH
38780: LD_VAR 0 5
38784: PUSH
38785: LD_INT 2
38787: ARRAY
38788: ST_TO_ADDR
// break ;
38789: GO 38793
// end ;
38791: GO 38751
38793: POP
38794: POP
// if not weapon then
38795: LD_VAR 0 8
38799: NOT
38800: IFFALSE 38804
// continue ;
38802: GO 38700
// for k in factories do
38804: LD_ADDR_VAR 0 6
38808: PUSH
38809: LD_VAR 0 2
38813: PUSH
38814: FOR_IN
38815: IFFALSE 38880
// begin weapons := AvailableWeaponList ( k ) ;
38817: LD_ADDR_VAR 0 9
38821: PUSH
38822: LD_VAR 0 6
38826: PPUSH
38827: CALL_OW 478
38831: ST_TO_ADDR
// if not weapons then
38832: LD_VAR 0 9
38836: NOT
38837: IFFALSE 38841
// continue ;
38839: GO 38814
// if weapon in weapons then
38841: LD_VAR 0 8
38845: PUSH
38846: LD_VAR 0 9
38850: IN
38851: IFFALSE 38878
// begin result := [ i , weapon ] ;
38853: LD_ADDR_VAR 0 3
38857: PUSH
38858: LD_VAR 0 4
38862: PUSH
38863: LD_VAR 0 8
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// exit ;
38872: POP
38873: POP
38874: POP
38875: POP
38876: GO 38886
// end ; end ;
38878: GO 38814
38880: POP
38881: POP
// end ;
38882: GO 38700
38884: POP
38885: POP
// end ;
38886: LD_VAR 0 3
38890: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38891: LD_INT 0
38893: PPUSH
// if not side or side > 8 then
38894: LD_VAR 0 3
38898: NOT
38899: IFTRUE 38911
38901: PUSH
38902: LD_VAR 0 3
38906: PUSH
38907: LD_INT 8
38909: GREATER
38910: OR
38911: IFFALSE 38915
// exit ;
38913: GO 38974
// if not range then
38915: LD_VAR 0 4
38919: NOT
38920: IFFALSE 38931
// range := - 12 ;
38922: LD_ADDR_VAR 0 4
38926: PUSH
38927: LD_INT 12
38929: NEG
38930: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_VAR 0 2
38940: PPUSH
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_VAR 0 4
38950: PPUSH
38951: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_VAR 0 2
38964: PPUSH
38965: LD_VAR 0 3
38969: PPUSH
38970: CALL_OW 331
// end ;
38974: LD_VAR 0 5
38978: RET
// export function Video ( mode ) ; begin
38979: LD_INT 0
38981: PPUSH
// ingame_video = mode ;
38982: LD_ADDR_OWVAR 52
38986: PUSH
38987: LD_VAR 0 1
38991: ST_TO_ADDR
// interface_hidden = mode ;
38992: LD_ADDR_OWVAR 54
38996: PUSH
38997: LD_VAR 0 1
39001: ST_TO_ADDR
// end ;
39002: LD_VAR 0 2
39006: RET
// export function Join ( array , element ) ; begin
39007: LD_INT 0
39009: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39010: LD_ADDR_VAR 0 3
39014: PUSH
39015: LD_VAR 0 1
39019: PPUSH
39020: LD_VAR 0 1
39024: PUSH
39025: LD_INT 1
39027: PLUS
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: CALL_OW 1
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 3
39043: RET
// export function JoinUnion ( array , element ) ; begin
39044: LD_INT 0
39046: PPUSH
// result := array union element ;
39047: LD_ADDR_VAR 0 3
39051: PUSH
39052: LD_VAR 0 1
39056: PUSH
39057: LD_VAR 0 2
39061: UNION
39062: ST_TO_ADDR
// end ;
39063: LD_VAR 0 3
39067: RET
// export function GetBehemoths ( side ) ; begin
39068: LD_INT 0
39070: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39071: LD_ADDR_VAR 0 2
39075: PUSH
39076: LD_INT 22
39078: PUSH
39079: LD_VAR 0 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 31
39090: PUSH
39091: LD_INT 25
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PPUSH
39102: CALL_OW 69
39106: ST_TO_ADDR
// end ;
39107: LD_VAR 0 2
39111: RET
// export function Shuffle ( array ) ; var i , index ; begin
39112: LD_INT 0
39114: PPUSH
39115: PPUSH
39116: PPUSH
// result := [ ] ;
39117: LD_ADDR_VAR 0 2
39121: PUSH
39122: EMPTY
39123: ST_TO_ADDR
// if not array then
39124: LD_VAR 0 1
39128: NOT
39129: IFFALSE 39133
// exit ;
39131: GO 39232
// Randomize ;
39133: CALL_OW 10
// for i = array downto 1 do
39137: LD_ADDR_VAR 0 3
39141: PUSH
39142: DOUBLE
39143: LD_VAR 0 1
39147: INC
39148: ST_TO_ADDR
39149: LD_INT 1
39151: PUSH
39152: FOR_DOWNTO
39153: IFFALSE 39230
// begin index := rand ( 1 , array ) ;
39155: LD_ADDR_VAR 0 4
39159: PUSH
39160: LD_INT 1
39162: PPUSH
39163: LD_VAR 0 1
39167: PPUSH
39168: CALL_OW 12
39172: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39173: LD_ADDR_VAR 0 2
39177: PUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 1
39190: PLUS
39191: PPUSH
39192: LD_VAR 0 1
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: PPUSH
39203: CALL_OW 2
39207: ST_TO_ADDR
// array := Delete ( array , index ) ;
39208: LD_ADDR_VAR 0 1
39212: PUSH
39213: LD_VAR 0 1
39217: PPUSH
39218: LD_VAR 0 4
39222: PPUSH
39223: CALL_OW 3
39227: ST_TO_ADDR
// end ;
39228: GO 39152
39230: POP
39231: POP
// end ;
39232: LD_VAR 0 2
39236: RET
// export function GetBaseMaterials ( base ) ; begin
39237: LD_INT 0
39239: PPUSH
// result := [ 0 , 0 , 0 ] ;
39240: LD_ADDR_VAR 0 2
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// if not base then
39259: LD_VAR 0 1
39263: NOT
39264: IFFALSE 39268
// exit ;
39266: GO 39317
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39268: LD_ADDR_VAR 0 2
39272: PUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_INT 1
39280: PPUSH
39281: CALL_OW 275
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_INT 2
39293: PPUSH
39294: CALL_OW 275
39298: PUSH
39299: LD_VAR 0 1
39303: PPUSH
39304: LD_INT 3
39306: PPUSH
39307: CALL_OW 275
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// end ;
39317: LD_VAR 0 2
39321: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39322: LD_INT 0
39324: PPUSH
39325: PPUSH
// result := array ;
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_VAR 0 1
39335: ST_TO_ADDR
// if size >= result then
39336: LD_VAR 0 2
39340: PUSH
39341: LD_VAR 0 3
39345: GREATEREQUAL
39346: IFFALSE 39350
// exit ;
39348: GO 39400
// if size then
39350: LD_VAR 0 2
39354: IFFALSE 39400
// for i := array downto size do
39356: LD_ADDR_VAR 0 4
39360: PUSH
39361: DOUBLE
39362: LD_VAR 0 1
39366: INC
39367: ST_TO_ADDR
39368: LD_VAR 0 2
39372: PUSH
39373: FOR_DOWNTO
39374: IFFALSE 39398
// result := Delete ( result , result ) ;
39376: LD_ADDR_VAR 0 3
39380: PUSH
39381: LD_VAR 0 3
39385: PPUSH
39386: LD_VAR 0 3
39390: PPUSH
39391: CALL_OW 3
39395: ST_TO_ADDR
39396: GO 39373
39398: POP
39399: POP
// end ;
39400: LD_VAR 0 3
39404: RET
// export function ComExit ( unit ) ; var tmp ; begin
39405: LD_INT 0
39407: PPUSH
39408: PPUSH
// if not IsInUnit ( unit ) then
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 310
39418: NOT
39419: IFFALSE 39423
// exit ;
39421: GO 39483
// tmp := IsInUnit ( unit ) ;
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 310
39437: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39438: LD_VAR 0 3
39442: PPUSH
39443: CALL_OW 247
39447: PUSH
39448: LD_INT 2
39450: EQUAL
39451: IFFALSE 39464
// ComExitVehicle ( unit ) else
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 121
39462: GO 39473
// ComExitBuilding ( unit ) ;
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 122
// result := tmp ;
39473: LD_ADDR_VAR 0 2
39477: PUSH
39478: LD_VAR 0 3
39482: ST_TO_ADDR
// end ;
39483: LD_VAR 0 2
39487: RET
// export function ComExitAll ( units ) ; var i ; begin
39488: LD_INT 0
39490: PPUSH
39491: PPUSH
// if not units then
39492: LD_VAR 0 1
39496: NOT
39497: IFFALSE 39501
// exit ;
39499: GO 39527
// for i in units do
39501: LD_ADDR_VAR 0 3
39505: PUSH
39506: LD_VAR 0 1
39510: PUSH
39511: FOR_IN
39512: IFFALSE 39525
// ComExit ( i ) ;
39514: LD_VAR 0 3
39518: PPUSH
39519: CALL 39405 0 1
39523: GO 39511
39525: POP
39526: POP
// end ;
39527: LD_VAR 0 2
39531: RET
// export function ResetHc ; begin
39532: LD_INT 0
39534: PPUSH
// InitHc ;
39535: CALL_OW 19
// hc_importance := 0 ;
39539: LD_ADDR_OWVAR 32
39543: PUSH
39544: LD_INT 0
39546: ST_TO_ADDR
// end ;
39547: LD_VAR 0 1
39551: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39552: LD_INT 0
39554: PPUSH
39555: PPUSH
39556: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39557: LD_ADDR_VAR 0 6
39561: PUSH
39562: LD_VAR 0 1
39566: PUSH
39567: LD_VAR 0 3
39571: PLUS
39572: PUSH
39573: LD_INT 2
39575: DIV
39576: ST_TO_ADDR
// if _x < 0 then
39577: LD_VAR 0 6
39581: PUSH
39582: LD_INT 0
39584: LESS
39585: IFFALSE 39602
// _x := _x * - 1 ;
39587: LD_ADDR_VAR 0 6
39591: PUSH
39592: LD_VAR 0 6
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: MUL
39601: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39602: LD_ADDR_VAR 0 7
39606: PUSH
39607: LD_VAR 0 2
39611: PUSH
39612: LD_VAR 0 4
39616: PLUS
39617: PUSH
39618: LD_INT 2
39620: DIV
39621: ST_TO_ADDR
// if _y < 0 then
39622: LD_VAR 0 7
39626: PUSH
39627: LD_INT 0
39629: LESS
39630: IFFALSE 39647
// _y := _y * - 1 ;
39632: LD_ADDR_VAR 0 7
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: MUL
39646: ST_TO_ADDR
// result := [ _x , _y ] ;
39647: LD_ADDR_VAR 0 5
39651: PUSH
39652: LD_VAR 0 6
39656: PUSH
39657: LD_VAR 0 7
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: ST_TO_ADDR
// end ;
39666: LD_VAR 0 5
39670: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39671: LD_INT 0
39673: PPUSH
39674: PPUSH
39675: PPUSH
39676: PPUSH
// task := GetTaskList ( unit ) ;
39677: LD_ADDR_VAR 0 7
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 437
39691: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39692: LD_VAR 0 7
39696: NOT
39697: IFFALSE 39716
39699: PUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: LD_VAR 0 2
39709: PPUSH
39710: CALL_OW 308
39714: NOT
39715: AND
39716: IFFALSE 39720
// exit ;
39718: GO 39838
// if IsInArea ( unit , area ) then
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_VAR 0 2
39729: PPUSH
39730: CALL_OW 308
39734: IFFALSE 39752
// begin ComMoveToArea ( unit , goAway ) ;
39736: LD_VAR 0 1
39740: PPUSH
39741: LD_VAR 0 3
39745: PPUSH
39746: CALL_OW 113
// exit ;
39750: GO 39838
// end ; if task [ 1 ] [ 1 ] <> M then
39752: LD_VAR 0 7
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PUSH
39761: LD_INT 1
39763: ARRAY
39764: PUSH
39765: LD_STRING M
39767: NONEQUAL
39768: IFFALSE 39772
// exit ;
39770: GO 39838
// x := task [ 1 ] [ 2 ] ;
39772: LD_ADDR_VAR 0 5
39776: PUSH
39777: LD_VAR 0 7
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: PUSH
39786: LD_INT 2
39788: ARRAY
39789: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39790: LD_ADDR_VAR 0 6
39794: PUSH
39795: LD_VAR 0 7
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PUSH
39804: LD_INT 3
39806: ARRAY
39807: ST_TO_ADDR
// if InArea ( x , y , area ) then
39808: LD_VAR 0 5
39812: PPUSH
39813: LD_VAR 0 6
39817: PPUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: CALL_OW 309
39827: IFFALSE 39838
// ComStop ( unit ) ;
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 141
// end ;
39838: LD_VAR 0 4
39842: RET
// export function Abs ( value ) ; begin
39843: LD_INT 0
39845: PPUSH
// result := value ;
39846: LD_ADDR_VAR 0 2
39850: PUSH
39851: LD_VAR 0 1
39855: ST_TO_ADDR
// if value < 0 then
39856: LD_VAR 0 1
39860: PUSH
39861: LD_INT 0
39863: LESS
39864: IFFALSE 39881
// result := value * - 1 ;
39866: LD_ADDR_VAR 0 2
39870: PUSH
39871: LD_VAR 0 1
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: MUL
39880: ST_TO_ADDR
// end ;
39881: LD_VAR 0 2
39885: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
// if not unit or not building then
39896: LD_VAR 0 1
39900: NOT
39901: IFTRUE 39910
39903: PUSH
39904: LD_VAR 0 2
39908: NOT
39909: OR
39910: IFFALSE 39914
// exit ;
39912: GO 40142
// x := GetX ( building ) ;
39914: LD_ADDR_VAR 0 4
39918: PUSH
39919: LD_VAR 0 2
39923: PPUSH
39924: CALL_OW 250
39928: ST_TO_ADDR
// y := GetY ( building ) ;
39929: LD_ADDR_VAR 0 6
39933: PUSH
39934: LD_VAR 0 2
39938: PPUSH
39939: CALL_OW 251
39943: ST_TO_ADDR
// d := GetDir ( building ) ;
39944: LD_ADDR_VAR 0 8
39948: PUSH
39949: LD_VAR 0 2
39953: PPUSH
39954: CALL_OW 254
39958: ST_TO_ADDR
// r := 4 ;
39959: LD_ADDR_VAR 0 9
39963: PUSH
39964: LD_INT 4
39966: ST_TO_ADDR
// for i := 1 to 5 do
39967: LD_ADDR_VAR 0 10
39971: PUSH
39972: DOUBLE
39973: LD_INT 1
39975: DEC
39976: ST_TO_ADDR
39977: LD_INT 5
39979: PUSH
39980: FOR_TO
39981: IFFALSE 40140
// begin _x := ShiftX ( x , d , r + i ) ;
39983: LD_ADDR_VAR 0 5
39987: PUSH
39988: LD_VAR 0 4
39992: PPUSH
39993: LD_VAR 0 8
39997: PPUSH
39998: LD_VAR 0 9
40002: PUSH
40003: LD_VAR 0 10
40007: PLUS
40008: PPUSH
40009: CALL_OW 272
40013: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40014: LD_ADDR_VAR 0 7
40018: PUSH
40019: LD_VAR 0 6
40023: PPUSH
40024: LD_VAR 0 8
40028: PPUSH
40029: LD_VAR 0 9
40033: PUSH
40034: LD_VAR 0 10
40038: PLUS
40039: PPUSH
40040: CALL_OW 273
40044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40045: LD_VAR 0 5
40049: PPUSH
40050: LD_VAR 0 7
40054: PPUSH
40055: CALL_OW 488
40059: IFFALSE 40094
40061: PUSH
40062: LD_VAR 0 5
40066: PPUSH
40067: LD_VAR 0 7
40071: PPUSH
40072: CALL_OW 428
40076: PPUSH
40077: CALL_OW 247
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: NOT
40093: AND
40094: IFFALSE 40138
// begin ComMoveXY ( unit , _x , _y ) ;
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_VAR 0 5
40105: PPUSH
40106: LD_VAR 0 7
40110: PPUSH
40111: CALL_OW 111
// result := [ _x , _y ] ;
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_VAR 0 5
40124: PUSH
40125: LD_VAR 0 7
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: ST_TO_ADDR
// exit ;
40134: POP
40135: POP
40136: GO 40142
// end ; end ;
40138: GO 39980
40140: POP
40141: POP
// end ;
40142: LD_VAR 0 3
40146: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
40151: PPUSH
// result := 0 ;
40152: LD_ADDR_VAR 0 3
40156: PUSH
40157: LD_INT 0
40159: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40160: LD_VAR 0 1
40164: PUSH
40165: LD_INT 0
40167: LESS
40168: IFTRUE 40180
40170: PUSH
40171: LD_VAR 0 1
40175: PUSH
40176: LD_INT 8
40178: GREATER
40179: OR
40180: IFTRUE 40192
40182: PUSH
40183: LD_VAR 0 2
40187: PUSH
40188: LD_INT 0
40190: LESS
40191: OR
40192: IFTRUE 40204
40194: PUSH
40195: LD_VAR 0 2
40199: PUSH
40200: LD_INT 8
40202: GREATER
40203: OR
40204: IFFALSE 40208
// exit ;
40206: GO 40283
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40208: LD_ADDR_VAR 0 4
40212: PUSH
40213: LD_INT 22
40215: PUSH
40216: LD_VAR 0 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PPUSH
40225: CALL_OW 69
40229: PUSH
40230: FOR_IN
40231: IFFALSE 40281
// begin un := UnitShoot ( i ) ;
40233: LD_ADDR_VAR 0 5
40237: PUSH
40238: LD_VAR 0 4
40242: PPUSH
40243: CALL_OW 504
40247: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40248: LD_VAR 0 5
40252: PPUSH
40253: CALL_OW 255
40257: PUSH
40258: LD_VAR 0 1
40262: EQUAL
40263: IFFALSE 40279
// begin result := un ;
40265: LD_ADDR_VAR 0 3
40269: PUSH
40270: LD_VAR 0 5
40274: ST_TO_ADDR
// exit ;
40275: POP
40276: POP
40277: GO 40283
// end ; end ;
40279: GO 40230
40281: POP
40282: POP
// end ;
40283: LD_VAR 0 3
40287: RET
// export function GetCargoBay ( units ) ; begin
40288: LD_INT 0
40290: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40291: LD_ADDR_VAR 0 2
40295: PUSH
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 34
40306: PUSH
40307: LD_INT 12
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 34
40316: PUSH
40317: LD_INT 51
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 34
40326: PUSH
40327: LD_INT 32
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 34
40336: PUSH
40337: LD_INT 89
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: PPUSH
40351: CALL_OW 72
40355: ST_TO_ADDR
// end ;
40356: LD_VAR 0 2
40360: RET
// export function Negate ( value ) ; begin
40361: LD_INT 0
40363: PPUSH
// result := not value ;
40364: LD_ADDR_VAR 0 2
40368: PUSH
40369: LD_VAR 0 1
40373: NOT
40374: ST_TO_ADDR
// end ;
40375: LD_VAR 0 2
40379: RET
// export function Inc ( value ) ; begin
40380: LD_INT 0
40382: PPUSH
// result := value + 1 ;
40383: LD_ADDR_VAR 0 2
40387: PUSH
40388: LD_VAR 0 1
40392: PUSH
40393: LD_INT 1
40395: PLUS
40396: ST_TO_ADDR
// end ;
40397: LD_VAR 0 2
40401: RET
// export function Dec ( value ) ; begin
40402: LD_INT 0
40404: PPUSH
// result := value - 1 ;
40405: LD_ADDR_VAR 0 2
40409: PUSH
40410: LD_VAR 0 1
40414: PUSH
40415: LD_INT 1
40417: MINUS
40418: ST_TO_ADDR
// end ;
40419: LD_VAR 0 2
40423: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40424: LD_INT 0
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40434: LD_VAR 0 1
40438: PPUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: CALL_OW 488
40448: NOT
40449: IFTRUE 40468
40451: PUSH
40452: LD_VAR 0 3
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: CALL_OW 488
40466: NOT
40467: OR
40468: IFFALSE 40481
// begin result := - 1 ;
40470: LD_ADDR_VAR 0 5
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: ST_TO_ADDR
// exit ;
40479: GO 40716
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40481: LD_ADDR_VAR 0 12
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: LD_VAR 0 2
40495: PPUSH
40496: LD_VAR 0 3
40500: PPUSH
40501: LD_VAR 0 4
40505: PPUSH
40506: CALL 39552 0 4
40510: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40511: LD_ADDR_VAR 0 11
40515: PUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: LD_VAR 0 2
40525: PPUSH
40526: LD_VAR 0 12
40530: PUSH
40531: LD_INT 1
40533: ARRAY
40534: PPUSH
40535: LD_VAR 0 12
40539: PUSH
40540: LD_INT 2
40542: ARRAY
40543: PPUSH
40544: CALL_OW 298
40548: ST_TO_ADDR
// distance := 9999 ;
40549: LD_ADDR_VAR 0 10
40553: PUSH
40554: LD_INT 9999
40556: ST_TO_ADDR
// for i := 0 to 5 do
40557: LD_ADDR_VAR 0 6
40561: PUSH
40562: DOUBLE
40563: LD_INT 0
40565: DEC
40566: ST_TO_ADDR
40567: LD_INT 5
40569: PUSH
40570: FOR_TO
40571: IFFALSE 40714
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40573: LD_ADDR_VAR 0 7
40577: PUSH
40578: LD_VAR 0 1
40582: PPUSH
40583: LD_VAR 0 6
40587: PPUSH
40588: LD_VAR 0 11
40592: PPUSH
40593: CALL_OW 272
40597: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40598: LD_ADDR_VAR 0 8
40602: PUSH
40603: LD_VAR 0 2
40607: PPUSH
40608: LD_VAR 0 6
40612: PPUSH
40613: LD_VAR 0 11
40617: PPUSH
40618: CALL_OW 273
40622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40623: LD_VAR 0 7
40627: PPUSH
40628: LD_VAR 0 8
40632: PPUSH
40633: CALL_OW 488
40637: NOT
40638: IFFALSE 40642
// continue ;
40640: GO 40570
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40642: LD_ADDR_VAR 0 9
40646: PUSH
40647: LD_VAR 0 12
40651: PUSH
40652: LD_INT 1
40654: ARRAY
40655: PPUSH
40656: LD_VAR 0 12
40660: PUSH
40661: LD_INT 2
40663: ARRAY
40664: PPUSH
40665: LD_VAR 0 7
40669: PPUSH
40670: LD_VAR 0 8
40674: PPUSH
40675: CALL_OW 298
40679: ST_TO_ADDR
// if tmp < distance then
40680: LD_VAR 0 9
40684: PUSH
40685: LD_VAR 0 10
40689: LESS
40690: IFFALSE 40712
// begin result := i ;
40692: LD_ADDR_VAR 0 5
40696: PUSH
40697: LD_VAR 0 6
40701: ST_TO_ADDR
// distance := tmp ;
40702: LD_ADDR_VAR 0 10
40706: PUSH
40707: LD_VAR 0 9
40711: ST_TO_ADDR
// end ; end ;
40712: GO 40570
40714: POP
40715: POP
// end ;
40716: LD_VAR 0 5
40720: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40721: LD_INT 0
40723: PPUSH
40724: PPUSH
// if not driver or not IsInUnit ( driver ) then
40725: LD_VAR 0 1
40729: NOT
40730: IFTRUE 40744
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 310
40742: NOT
40743: OR
40744: IFFALSE 40748
// exit ;
40746: GO 40838
// vehicle := IsInUnit ( driver ) ;
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 310
40762: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40763: LD_VAR 0 1
40767: PPUSH
40768: LD_STRING \
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: PUSH
40798: LD_STRING E
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_VAR 0 3
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PPUSH
40834: CALL_OW 446
// end ;
40838: LD_VAR 0 2
40842: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40843: LD_INT 0
40845: PPUSH
40846: PPUSH
// if not driver or not IsInUnit ( driver ) then
40847: LD_VAR 0 1
40851: NOT
40852: IFTRUE 40866
40854: PUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: CALL_OW 310
40864: NOT
40865: OR
40866: IFFALSE 40870
// exit ;
40868: GO 40960
// vehicle := IsInUnit ( driver ) ;
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 310
40884: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40885: LD_VAR 0 1
40889: PPUSH
40890: LD_STRING \
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: PUSH
40920: LD_STRING E
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_VAR 0 3
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PPUSH
40956: CALL_OW 447
// end ;
40960: LD_VAR 0 2
40964: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40965: LD_INT 0
40967: PPUSH
40968: PPUSH
40969: PPUSH
// tmp := [ ] ;
40970: LD_ADDR_VAR 0 5
40974: PUSH
40975: EMPTY
40976: ST_TO_ADDR
// for i in units do
40977: LD_ADDR_VAR 0 4
40981: PUSH
40982: LD_VAR 0 1
40986: PUSH
40987: FOR_IN
40988: IFFALSE 41026
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40990: LD_ADDR_VAR 0 5
40994: PUSH
40995: LD_VAR 0 5
40999: PPUSH
41000: LD_VAR 0 5
41004: PUSH
41005: LD_INT 1
41007: PLUS
41008: PPUSH
41009: LD_VAR 0 4
41013: PPUSH
41014: CALL_OW 256
41018: PPUSH
41019: CALL_OW 2
41023: ST_TO_ADDR
41024: GO 40987
41026: POP
41027: POP
// if not tmp then
41028: LD_VAR 0 5
41032: NOT
41033: IFFALSE 41037
// exit ;
41035: GO 41085
// if asc then
41037: LD_VAR 0 2
41041: IFFALSE 41065
// result := SortListByListAsc ( units , tmp ) else
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: LD_VAR 0 5
41057: PPUSH
41058: CALL_OW 76
41062: ST_TO_ADDR
41063: GO 41085
// result := SortListByListDesc ( units , tmp ) ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: LD_VAR 0 5
41079: PPUSH
41080: CALL_OW 77
41084: ST_TO_ADDR
// end ;
41085: LD_VAR 0 3
41089: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
// task := GetTaskList ( mech ) ;
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 437
41108: ST_TO_ADDR
// if not task then
41109: LD_VAR 0 4
41113: NOT
41114: IFFALSE 41118
// exit ;
41116: GO 41162
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41118: LD_ADDR_VAR 0 3
41122: PUSH
41123: LD_VAR 0 4
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PUSH
41132: LD_INT 1
41134: ARRAY
41135: PUSH
41136: LD_STRING r
41138: EQUAL
41139: IFFALSE 41161
41141: PUSH
41142: LD_VAR 0 4
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: PUSH
41151: LD_INT 4
41153: ARRAY
41154: PUSH
41155: LD_VAR 0 2
41159: EQUAL
41160: AND
41161: ST_TO_ADDR
// end ;
41162: LD_VAR 0 3
41166: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41167: LD_INT 0
41169: PPUSH
// SetDir ( unit , d ) ;
41170: LD_VAR 0 1
41174: PPUSH
41175: LD_VAR 0 4
41179: PPUSH
41180: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41184: LD_ADDR_VAR 0 6
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: LD_VAR 0 2
41198: PPUSH
41199: LD_VAR 0 3
41203: PPUSH
41204: LD_VAR 0 5
41208: PPUSH
41209: CALL_OW 48
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 6
41218: RET
// export function ToNaturalNumber ( number ) ; begin
41219: LD_INT 0
41221: PPUSH
// result := number div 1 ;
41222: LD_ADDR_VAR 0 2
41226: PUSH
41227: LD_VAR 0 1
41231: PUSH
41232: LD_INT 1
41234: DIV
41235: ST_TO_ADDR
// if number < 0 then
41236: LD_VAR 0 1
41240: PUSH
41241: LD_INT 0
41243: LESS
41244: IFFALSE 41254
// result := 0 ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_INT 0
41253: ST_TO_ADDR
// end ;
41254: LD_VAR 0 2
41258: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41259: LD_INT 0
41261: PPUSH
41262: PPUSH
41263: PPUSH
// if not buildings then
41264: LD_VAR 0 1
41268: NOT
41269: IFFALSE 41273
// exit ;
41271: GO 41388
// tmp := [ ] ;
41273: LD_ADDR_VAR 0 5
41277: PUSH
41278: EMPTY
41279: ST_TO_ADDR
// for b in buildings do
41280: LD_ADDR_VAR 0 4
41284: PUSH
41285: LD_VAR 0 1
41289: PUSH
41290: FOR_IN
41291: IFFALSE 41329
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41293: LD_ADDR_VAR 0 5
41297: PUSH
41298: LD_VAR 0 5
41302: PPUSH
41303: LD_VAR 0 5
41307: PUSH
41308: LD_INT 1
41310: PLUS
41311: PPUSH
41312: LD_VAR 0 4
41316: PPUSH
41317: CALL_OW 266
41321: PPUSH
41322: CALL_OW 1
41326: ST_TO_ADDR
41327: GO 41290
41329: POP
41330: POP
// if not tmp then
41331: LD_VAR 0 5
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41388
// if asc then
41340: LD_VAR 0 2
41344: IFFALSE 41368
// result := SortListByListAsc ( buildings , tmp ) else
41346: LD_ADDR_VAR 0 3
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: LD_VAR 0 5
41360: PPUSH
41361: CALL_OW 76
41365: ST_TO_ADDR
41366: GO 41388
// result := SortListByListDesc ( buildings , tmp ) ;
41368: LD_ADDR_VAR 0 3
41372: PUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: LD_VAR 0 5
41382: PPUSH
41383: CALL_OW 77
41387: ST_TO_ADDR
// end ;
41388: LD_VAR 0 3
41392: RET
// export function SortByClass ( units , class ) ; var un ; begin
41393: LD_INT 0
41395: PPUSH
41396: PPUSH
// if not units or not class then
41397: LD_VAR 0 1
41401: NOT
41402: IFTRUE 41411
41404: PUSH
41405: LD_VAR 0 2
41409: NOT
41410: OR
41411: IFFALSE 41415
// exit ;
41413: GO 41510
// result := [ ] ;
41415: LD_ADDR_VAR 0 3
41419: PUSH
41420: EMPTY
41421: ST_TO_ADDR
// for un in units do
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 1
41431: PUSH
41432: FOR_IN
41433: IFFALSE 41508
// if GetClass ( un ) = class then
41435: LD_VAR 0 4
41439: PPUSH
41440: CALL_OW 257
41444: PUSH
41445: LD_VAR 0 2
41449: EQUAL
41450: IFFALSE 41477
// result := Insert ( result , 1 , un ) else
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_VAR 0 3
41461: PPUSH
41462: LD_INT 1
41464: PPUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: CALL_OW 2
41474: ST_TO_ADDR
41475: GO 41506
// result := Replace ( result , result + 1 , un ) ;
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_VAR 0 3
41486: PPUSH
41487: LD_VAR 0 3
41491: PUSH
41492: LD_INT 1
41494: PLUS
41495: PPUSH
41496: LD_VAR 0 4
41500: PPUSH
41501: CALL_OW 1
41505: ST_TO_ADDR
41506: GO 41432
41508: POP
41509: POP
// end ;
41510: LD_VAR 0 3
41514: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41515: LD_INT 0
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
// result := [ ] ;
41524: LD_ADDR_VAR 0 4
41528: PUSH
41529: EMPTY
41530: ST_TO_ADDR
// if x - r < 0 then
41531: LD_VAR 0 1
41535: PUSH
41536: LD_VAR 0 3
41540: MINUS
41541: PUSH
41542: LD_INT 0
41544: LESS
41545: IFFALSE 41557
// min_x := 0 else
41547: LD_ADDR_VAR 0 8
41551: PUSH
41552: LD_INT 0
41554: ST_TO_ADDR
41555: GO 41573
// min_x := x - r ;
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: LD_VAR 0 1
41566: PUSH
41567: LD_VAR 0 3
41571: MINUS
41572: ST_TO_ADDR
// if y - r < 0 then
41573: LD_VAR 0 2
41577: PUSH
41578: LD_VAR 0 3
41582: MINUS
41583: PUSH
41584: LD_INT 0
41586: LESS
41587: IFFALSE 41599
// min_y := 0 else
41589: LD_ADDR_VAR 0 7
41593: PUSH
41594: LD_INT 0
41596: ST_TO_ADDR
41597: GO 41615
// min_y := y - r ;
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: LD_VAR 0 2
41608: PUSH
41609: LD_VAR 0 3
41613: MINUS
41614: ST_TO_ADDR
// max_x := x + r ;
41615: LD_ADDR_VAR 0 9
41619: PUSH
41620: LD_VAR 0 1
41624: PUSH
41625: LD_VAR 0 3
41629: PLUS
41630: ST_TO_ADDR
// max_y := y + r ;
41631: LD_ADDR_VAR 0 10
41635: PUSH
41636: LD_VAR 0 2
41640: PUSH
41641: LD_VAR 0 3
41645: PLUS
41646: ST_TO_ADDR
// for _x = min_x to max_x do
41647: LD_ADDR_VAR 0 5
41651: PUSH
41652: DOUBLE
41653: LD_VAR 0 8
41657: DEC
41658: ST_TO_ADDR
41659: LD_VAR 0 9
41663: PUSH
41664: FOR_TO
41665: IFFALSE 41766
// for _y = min_y to max_y do
41667: LD_ADDR_VAR 0 6
41671: PUSH
41672: DOUBLE
41673: LD_VAR 0 7
41677: DEC
41678: ST_TO_ADDR
41679: LD_VAR 0 10
41683: PUSH
41684: FOR_TO
41685: IFFALSE 41762
// begin if not ValidHex ( _x , _y ) then
41687: LD_VAR 0 5
41691: PPUSH
41692: LD_VAR 0 6
41696: PPUSH
41697: CALL_OW 488
41701: NOT
41702: IFFALSE 41706
// continue ;
41704: GO 41684
// if GetResourceTypeXY ( _x , _y ) then
41706: LD_VAR 0 5
41710: PPUSH
41711: LD_VAR 0 6
41715: PPUSH
41716: CALL_OW 283
41720: IFFALSE 41760
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41722: LD_ADDR_VAR 0 4
41726: PUSH
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 4
41736: PUSH
41737: LD_INT 1
41739: PLUS
41740: PPUSH
41741: LD_VAR 0 5
41745: PUSH
41746: LD_VAR 0 6
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PPUSH
41755: CALL_OW 1
41759: ST_TO_ADDR
// end ;
41760: GO 41684
41762: POP
41763: POP
41764: GO 41664
41766: POP
41767: POP
// end ;
41768: LD_VAR 0 4
41772: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41773: LD_INT 0
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
// if not units then
41783: LD_VAR 0 1
41787: NOT
41788: IFFALSE 41792
// exit ;
41790: GO 42324
// result := UnitFilter ( units , [ f_ok ] ) ;
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_INT 50
41804: PUSH
41805: EMPTY
41806: LIST
41807: PPUSH
41808: CALL_OW 72
41812: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41813: LD_ADDR_VAR 0 8
41817: PUSH
41818: LD_VAR 0 1
41822: PUSH
41823: LD_INT 1
41825: ARRAY
41826: PPUSH
41827: CALL_OW 255
41831: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41832: LD_ADDR_VAR 0 10
41836: PUSH
41837: LD_INT 29
41839: PUSH
41840: LD_INT 91
41842: PUSH
41843: LD_INT 49
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// if not result then
41851: LD_VAR 0 3
41855: NOT
41856: IFFALSE 41860
// exit ;
41858: GO 42324
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: LD_INT 81
41867: PUSH
41868: LD_VAR 0 8
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PPUSH
41877: CALL_OW 69
41881: ST_TO_ADDR
// for i in result do
41882: LD_ADDR_VAR 0 4
41886: PUSH
41887: LD_VAR 0 3
41891: PUSH
41892: FOR_IN
41893: IFFALSE 42322
// begin tag := GetTag ( i ) + 1 ;
41895: LD_ADDR_VAR 0 9
41899: PUSH
41900: LD_VAR 0 4
41904: PPUSH
41905: CALL_OW 110
41909: PUSH
41910: LD_INT 1
41912: PLUS
41913: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41914: LD_ADDR_VAR 0 7
41918: PUSH
41919: LD_VAR 0 4
41923: PPUSH
41924: CALL_OW 250
41928: PPUSH
41929: LD_VAR 0 4
41933: PPUSH
41934: CALL_OW 251
41938: PPUSH
41939: LD_INT 4
41941: PPUSH
41942: CALL 41515 0 3
41946: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41947: LD_VAR 0 4
41951: PPUSH
41952: CALL_OW 247
41956: PUSH
41957: LD_INT 2
41959: EQUAL
41960: IFFALSE 41972
41962: PUSH
41963: LD_VAR 0 7
41967: PUSH
41968: LD_INT 2
41970: GREATER
41971: AND
41972: IFFALSE 41992
41974: PUSH
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 264
41984: PUSH
41985: LD_VAR 0 10
41989: IN
41990: NOT
41991: AND
41992: IFFALSE 42031
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41994: LD_VAR 0 4
41998: PPUSH
41999: LD_VAR 0 7
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PUSH
42008: LD_INT 1
42010: ARRAY
42011: PPUSH
42012: LD_VAR 0 7
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PUSH
42021: LD_INT 2
42023: ARRAY
42024: PPUSH
42025: CALL_OW 116
42029: GO 42320
// if path > tag then
42031: LD_VAR 0 2
42035: PUSH
42036: LD_VAR 0 9
42040: GREATER
42041: IFFALSE 42249
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42043: LD_ADDR_VAR 0 6
42047: PUSH
42048: LD_VAR 0 5
42052: PPUSH
42053: LD_INT 91
42055: PUSH
42056: LD_VAR 0 4
42060: PUSH
42061: LD_INT 8
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 72
42073: ST_TO_ADDR
// if nearEnemy then
42074: LD_VAR 0 6
42078: IFFALSE 42147
// begin if GetWeapon ( i ) = ru_time_lapser then
42080: LD_VAR 0 4
42084: PPUSH
42085: CALL_OW 264
42089: PUSH
42090: LD_INT 49
42092: EQUAL
42093: IFFALSE 42121
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42095: LD_VAR 0 4
42099: PPUSH
42100: LD_VAR 0 6
42104: PPUSH
42105: LD_VAR 0 4
42109: PPUSH
42110: CALL_OW 74
42114: PPUSH
42115: CALL_OW 112
42119: GO 42145
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42121: LD_VAR 0 4
42125: PPUSH
42126: LD_VAR 0 6
42130: PPUSH
42131: LD_VAR 0 4
42135: PPUSH
42136: CALL_OW 74
42140: PPUSH
42141: CALL 43405 0 2
// end else
42145: GO 42247
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42147: LD_VAR 0 4
42151: PPUSH
42152: LD_VAR 0 2
42156: PUSH
42157: LD_VAR 0 9
42161: ARRAY
42162: PUSH
42163: LD_INT 1
42165: ARRAY
42166: PPUSH
42167: LD_VAR 0 2
42171: PUSH
42172: LD_VAR 0 9
42176: ARRAY
42177: PUSH
42178: LD_INT 2
42180: ARRAY
42181: PPUSH
42182: CALL_OW 297
42186: PUSH
42187: LD_INT 6
42189: GREATER
42190: IFFALSE 42233
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42192: LD_VAR 0 4
42196: PPUSH
42197: LD_VAR 0 2
42201: PUSH
42202: LD_VAR 0 9
42206: ARRAY
42207: PUSH
42208: LD_INT 1
42210: ARRAY
42211: PPUSH
42212: LD_VAR 0 2
42216: PUSH
42217: LD_VAR 0 9
42221: ARRAY
42222: PUSH
42223: LD_INT 2
42225: ARRAY
42226: PPUSH
42227: CALL_OW 114
42231: GO 42247
// SetTag ( i , tag ) ;
42233: LD_VAR 0 4
42237: PPUSH
42238: LD_VAR 0 9
42242: PPUSH
42243: CALL_OW 109
// end else
42247: GO 42320
// if enemy then
42249: LD_VAR 0 5
42253: IFFALSE 42320
// begin if GetWeapon ( i ) = ru_time_lapser then
42255: LD_VAR 0 4
42259: PPUSH
42260: CALL_OW 264
42264: PUSH
42265: LD_INT 49
42267: EQUAL
42268: IFFALSE 42296
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42270: LD_VAR 0 4
42274: PPUSH
42275: LD_VAR 0 5
42279: PPUSH
42280: LD_VAR 0 4
42284: PPUSH
42285: CALL_OW 74
42289: PPUSH
42290: CALL_OW 112
42294: GO 42320
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42296: LD_VAR 0 4
42300: PPUSH
42301: LD_VAR 0 5
42305: PPUSH
42306: LD_VAR 0 4
42310: PPUSH
42311: CALL_OW 74
42315: PPUSH
42316: CALL 43405 0 2
// end ; end ;
42320: GO 41892
42322: POP
42323: POP
// end ;
42324: LD_VAR 0 3
42328: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42329: LD_INT 0
42331: PPUSH
42332: PPUSH
42333: PPUSH
// if not unit or IsInUnit ( unit ) then
42334: LD_VAR 0 1
42338: NOT
42339: IFTRUE 42352
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: CALL_OW 310
42351: OR
42352: IFFALSE 42356
// exit ;
42354: GO 42447
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42356: LD_ADDR_VAR 0 4
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: CALL_OW 250
42370: PPUSH
42371: LD_VAR 0 2
42375: PPUSH
42376: LD_INT 1
42378: PPUSH
42379: CALL_OW 272
42383: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 251
42398: PPUSH
42399: LD_VAR 0 2
42403: PPUSH
42404: LD_INT 1
42406: PPUSH
42407: CALL_OW 273
42411: ST_TO_ADDR
// if ValidHex ( x , y ) then
42412: LD_VAR 0 4
42416: PPUSH
42417: LD_VAR 0 5
42421: PPUSH
42422: CALL_OW 488
42426: IFFALSE 42447
// ComTurnXY ( unit , x , y ) ;
42428: LD_VAR 0 1
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: LD_VAR 0 5
42442: PPUSH
42443: CALL_OW 118
// end ;
42447: LD_VAR 0 3
42451: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42452: LD_INT 0
42454: PPUSH
42455: PPUSH
// result := false ;
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_INT 0
42463: ST_TO_ADDR
// if not units then
42464: LD_VAR 0 2
42468: NOT
42469: IFFALSE 42473
// exit ;
42471: GO 42518
// for i in units do
42473: LD_ADDR_VAR 0 4
42477: PUSH
42478: LD_VAR 0 2
42482: PUSH
42483: FOR_IN
42484: IFFALSE 42516
// if See ( side , i ) then
42486: LD_VAR 0 1
42490: PPUSH
42491: LD_VAR 0 4
42495: PPUSH
42496: CALL_OW 292
42500: IFFALSE 42514
// begin result := true ;
42502: LD_ADDR_VAR 0 3
42506: PUSH
42507: LD_INT 1
42509: ST_TO_ADDR
// exit ;
42510: POP
42511: POP
42512: GO 42518
// end ;
42514: GO 42483
42516: POP
42517: POP
// end ;
42518: LD_VAR 0 3
42522: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42523: LD_INT 0
42525: PPUSH
42526: PPUSH
42527: PPUSH
42528: PPUSH
// if not unit or not points then
42529: LD_VAR 0 1
42533: NOT
42534: IFTRUE 42543
42536: PUSH
42537: LD_VAR 0 2
42541: NOT
42542: OR
42543: IFFALSE 42547
// exit ;
42545: GO 42637
// dist := 99999 ;
42547: LD_ADDR_VAR 0 5
42551: PUSH
42552: LD_INT 99999
42554: ST_TO_ADDR
// for i in points do
42555: LD_ADDR_VAR 0 4
42559: PUSH
42560: LD_VAR 0 2
42564: PUSH
42565: FOR_IN
42566: IFFALSE 42635
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42568: LD_ADDR_VAR 0 6
42572: PUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: LD_VAR 0 4
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 4
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 297
42600: ST_TO_ADDR
// if tmpDist < dist then
42601: LD_VAR 0 6
42605: PUSH
42606: LD_VAR 0 5
42610: LESS
42611: IFFALSE 42633
// begin result := i ;
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_VAR 0 4
42622: ST_TO_ADDR
// dist := tmpDist ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 6
42632: ST_TO_ADDR
// end ; end ;
42633: GO 42565
42635: POP
42636: POP
// end ;
42637: LD_VAR 0 3
42641: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42642: LD_INT 0
42644: PPUSH
// uc_side := side ;
42645: LD_ADDR_OWVAR 20
42649: PUSH
42650: LD_VAR 0 1
42654: ST_TO_ADDR
// uc_nation := 3 ;
42655: LD_ADDR_OWVAR 21
42659: PUSH
42660: LD_INT 3
42662: ST_TO_ADDR
// vc_chassis := 25 ;
42663: LD_ADDR_OWVAR 37
42667: PUSH
42668: LD_INT 25
42670: ST_TO_ADDR
// vc_engine := engine_siberite ;
42671: LD_ADDR_OWVAR 39
42675: PUSH
42676: LD_INT 3
42678: ST_TO_ADDR
// vc_control := control_computer ;
42679: LD_ADDR_OWVAR 38
42683: PUSH
42684: LD_INT 3
42686: ST_TO_ADDR
// vc_weapon := 59 ;
42687: LD_ADDR_OWVAR 40
42691: PUSH
42692: LD_INT 59
42694: ST_TO_ADDR
// result := CreateVehicle ;
42695: LD_ADDR_VAR 0 5
42699: PUSH
42700: CALL_OW 45
42704: ST_TO_ADDR
// SetDir ( result , d ) ;
42705: LD_VAR 0 5
42709: PPUSH
42710: LD_VAR 0 4
42714: PPUSH
42715: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42719: LD_VAR 0 5
42723: PPUSH
42724: LD_VAR 0 2
42728: PPUSH
42729: LD_VAR 0 3
42733: PPUSH
42734: LD_INT 0
42736: PPUSH
42737: CALL_OW 48
// end ;
42741: LD_VAR 0 5
42745: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42746: LD_INT 0
42748: PPUSH
42749: PPUSH
42750: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42751: LD_ADDR_VAR 0 2
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42774: LD_VAR 0 1
42778: NOT
42779: IFTRUE 42812
42781: PUSH
42782: LD_VAR 0 1
42786: PPUSH
42787: CALL_OW 264
42791: PUSH
42792: LD_INT 12
42794: PUSH
42795: LD_INT 51
42797: PUSH
42798: LD_INT 32
42800: PUSH
42801: LD_INT 89
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: IN
42810: NOT
42811: OR
42812: IFFALSE 42816
// exit ;
42814: GO 42914
// for i := 1 to 3 do
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: DOUBLE
42822: LD_INT 1
42824: DEC
42825: ST_TO_ADDR
42826: LD_INT 3
42828: PUSH
42829: FOR_TO
42830: IFFALSE 42912
// begin tmp := GetCargo ( cargo , i ) ;
42832: LD_ADDR_VAR 0 4
42836: PUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: LD_VAR 0 3
42846: PPUSH
42847: CALL_OW 289
42851: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42852: LD_ADDR_VAR 0 2
42856: PUSH
42857: LD_VAR 0 2
42861: PPUSH
42862: LD_VAR 0 3
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: CALL_OW 1
42876: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42877: LD_ADDR_VAR 0 2
42881: PUSH
42882: LD_VAR 0 2
42886: PPUSH
42887: LD_INT 4
42889: PPUSH
42890: LD_VAR 0 2
42894: PUSH
42895: LD_INT 4
42897: ARRAY
42898: PUSH
42899: LD_VAR 0 4
42903: PLUS
42904: PPUSH
42905: CALL_OW 1
42909: ST_TO_ADDR
// end ;
42910: GO 42829
42912: POP
42913: POP
// end ;
42914: LD_VAR 0 2
42918: RET
// export function Length ( array ) ; begin
42919: LD_INT 0
42921: PPUSH
// result := array + 0 ;
42922: LD_ADDR_VAR 0 2
42926: PUSH
42927: LD_VAR 0 1
42931: PUSH
42932: LD_INT 0
42934: PLUS
42935: ST_TO_ADDR
// end ;
42936: LD_VAR 0 2
42940: RET
// export function PrepareArray ( array ) ; begin
42941: LD_INT 0
42943: PPUSH
// result := array diff 0 ;
42944: LD_ADDR_VAR 0 2
42948: PUSH
42949: LD_VAR 0 1
42953: PUSH
42954: LD_INT 0
42956: DIFF
42957: ST_TO_ADDR
// if not result [ 1 ] then
42958: LD_VAR 0 2
42962: PUSH
42963: LD_INT 1
42965: ARRAY
42966: NOT
42967: IFFALSE 42987
// result := Delete ( result , 1 ) ;
42969: LD_ADDR_VAR 0 2
42973: PUSH
42974: LD_VAR 0 2
42978: PPUSH
42979: LD_INT 1
42981: PPUSH
42982: CALL_OW 3
42986: ST_TO_ADDR
// end ;
42987: LD_VAR 0 2
42991: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42992: LD_INT 0
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
// sibRocketRange := 25 ;
42998: LD_ADDR_VAR 0 6
43002: PUSH
43003: LD_INT 25
43005: ST_TO_ADDR
// result := false ;
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_INT 0
43013: ST_TO_ADDR
// for i := 0 to 5 do
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: DOUBLE
43020: LD_INT 0
43022: DEC
43023: ST_TO_ADDR
43024: LD_INT 5
43026: PUSH
43027: FOR_TO
43028: IFFALSE 43095
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43030: LD_VAR 0 1
43034: PPUSH
43035: LD_VAR 0 5
43039: PPUSH
43040: LD_VAR 0 6
43044: PPUSH
43045: CALL_OW 272
43049: PPUSH
43050: LD_VAR 0 2
43054: PPUSH
43055: LD_VAR 0 5
43059: PPUSH
43060: LD_VAR 0 6
43064: PPUSH
43065: CALL_OW 273
43069: PPUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: CALL_OW 309
43079: IFFALSE 43093
// begin result := true ;
43081: LD_ADDR_VAR 0 4
43085: PUSH
43086: LD_INT 1
43088: ST_TO_ADDR
// exit ;
43089: POP
43090: POP
43091: GO 43097
// end ;
43093: GO 43027
43095: POP
43096: POP
// end ;
43097: LD_VAR 0 4
43101: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43102: LD_INT 0
43104: PPUSH
43105: PPUSH
43106: PPUSH
// if btype = b_depot then
43107: LD_VAR 0 2
43111: PUSH
43112: LD_INT 0
43114: EQUAL
43115: IFFALSE 43127
// begin result := true ;
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_INT 1
43124: ST_TO_ADDR
// exit ;
43125: GO 43247
// end ; pom := GetBase ( depot ) ;
43127: LD_ADDR_VAR 0 4
43131: PUSH
43132: LD_VAR 0 1
43136: PPUSH
43137: CALL_OW 274
43141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43142: LD_ADDR_VAR 0 5
43146: PUSH
43147: LD_VAR 0 2
43151: PPUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 248
43161: PPUSH
43162: CALL_OW 450
43166: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_VAR 0 4
43176: PPUSH
43177: LD_INT 1
43179: PPUSH
43180: CALL_OW 275
43184: PUSH
43185: LD_VAR 0 5
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: GREATEREQUAL
43194: IFFALSE 43220
43196: PUSH
43197: LD_VAR 0 4
43201: PPUSH
43202: LD_INT 2
43204: PPUSH
43205: CALL_OW 275
43209: PUSH
43210: LD_VAR 0 5
43214: PUSH
43215: LD_INT 2
43217: ARRAY
43218: GREATEREQUAL
43219: AND
43220: IFFALSE 43246
43222: PUSH
43223: LD_VAR 0 4
43227: PPUSH
43228: LD_INT 3
43230: PPUSH
43231: CALL_OW 275
43235: PUSH
43236: LD_VAR 0 5
43240: PUSH
43241: LD_INT 3
43243: ARRAY
43244: GREATEREQUAL
43245: AND
43246: ST_TO_ADDR
// end ;
43247: LD_VAR 0 3
43251: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43252: LD_INT 0
43254: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43255: LD_VAR 0 1
43259: PPUSH
43260: LD_VAR 0 2
43264: PPUSH
43265: LD_INT 0
43267: PPUSH
43268: LD_INT 0
43270: PPUSH
43271: LD_INT 1
43273: PPUSH
43274: LD_INT 0
43276: PPUSH
43277: CALL_OW 587
// end ;
43281: LD_VAR 0 3
43285: RET
// export function CenterOnNow ( unit ) ; begin
43286: LD_INT 0
43288: PPUSH
// result := IsInUnit ( unit ) ;
43289: LD_ADDR_VAR 0 2
43293: PUSH
43294: LD_VAR 0 1
43298: PPUSH
43299: CALL_OW 310
43303: ST_TO_ADDR
// if not result then
43304: LD_VAR 0 2
43308: NOT
43309: IFFALSE 43321
// result := unit ;
43311: LD_ADDR_VAR 0 2
43315: PUSH
43316: LD_VAR 0 1
43320: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL_OW 87
// end ;
43330: LD_VAR 0 2
43334: RET
// export function ComMoveHex ( unit , hex ) ; begin
43335: LD_INT 0
43337: PPUSH
// if not hex then
43338: LD_VAR 0 2
43342: NOT
43343: IFFALSE 43347
// exit ;
43345: GO 43400
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43347: LD_VAR 0 2
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PPUSH
43356: LD_VAR 0 2
43360: PUSH
43361: LD_INT 2
43363: ARRAY
43364: PPUSH
43365: CALL_OW 428
43369: IFFALSE 43373
// exit ;
43371: GO 43400
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43373: LD_VAR 0 1
43377: PPUSH
43378: LD_VAR 0 2
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PPUSH
43387: LD_VAR 0 2
43391: PUSH
43392: LD_INT 2
43394: ARRAY
43395: PPUSH
43396: CALL_OW 111
// end ;
43400: LD_VAR 0 3
43404: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43405: LD_INT 0
43407: PPUSH
43408: PPUSH
43409: PPUSH
// if not unit or not enemy then
43410: LD_VAR 0 1
43414: NOT
43415: IFTRUE 43424
43417: PUSH
43418: LD_VAR 0 2
43422: NOT
43423: OR
43424: IFFALSE 43428
// exit ;
43426: GO 43554
// x := GetX ( enemy ) ;
43428: LD_ADDR_VAR 0 4
43432: PUSH
43433: LD_VAR 0 2
43437: PPUSH
43438: CALL_OW 250
43442: ST_TO_ADDR
// y := GetY ( enemy ) ;
43443: LD_ADDR_VAR 0 5
43447: PUSH
43448: LD_VAR 0 2
43452: PPUSH
43453: CALL_OW 251
43457: ST_TO_ADDR
// if ValidHex ( x , y ) then
43458: LD_VAR 0 4
43462: PPUSH
43463: LD_VAR 0 5
43467: PPUSH
43468: CALL_OW 488
43472: IFFALSE 43554
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43474: LD_VAR 0 2
43478: PPUSH
43479: CALL_OW 247
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: IN
43494: IFTRUE 43517
43496: PUSH
43497: LD_VAR 0 1
43501: PPUSH
43502: CALL_OW 255
43506: PPUSH
43507: LD_VAR 0 2
43511: PPUSH
43512: CALL_OW 292
43516: OR
43517: IFFALSE 43535
// ComAttackUnit ( unit , enemy ) else
43519: LD_VAR 0 1
43523: PPUSH
43524: LD_VAR 0 2
43528: PPUSH
43529: CALL_OW 115
43533: GO 43554
// ComAgressiveMove ( unit , x , y ) ;
43535: LD_VAR 0 1
43539: PPUSH
43540: LD_VAR 0 4
43544: PPUSH
43545: LD_VAR 0 5
43549: PPUSH
43550: CALL_OW 114
// end ;
43554: LD_VAR 0 3
43558: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43559: LD_INT 0
43561: PPUSH
43562: PPUSH
43563: PPUSH
// list := AreaToList ( area , 0 ) ;
43564: LD_ADDR_VAR 0 5
43568: PUSH
43569: LD_VAR 0 1
43573: PPUSH
43574: LD_INT 0
43576: PPUSH
43577: CALL_OW 517
43581: ST_TO_ADDR
// if not list then
43582: LD_VAR 0 5
43586: NOT
43587: IFFALSE 43591
// exit ;
43589: GO 43721
// if all then
43591: LD_VAR 0 2
43595: IFFALSE 43683
// begin for i := 1 to list [ 1 ] do
43597: LD_ADDR_VAR 0 4
43601: PUSH
43602: DOUBLE
43603: LD_INT 1
43605: DEC
43606: ST_TO_ADDR
43607: LD_VAR 0 5
43611: PUSH
43612: LD_INT 1
43614: ARRAY
43615: PUSH
43616: FOR_TO
43617: IFFALSE 43679
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_VAR 0 3
43628: PPUSH
43629: LD_VAR 0 3
43633: PUSH
43634: LD_INT 1
43636: PLUS
43637: PPUSH
43638: LD_VAR 0 5
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PUSH
43647: LD_VAR 0 4
43651: ARRAY
43652: PUSH
43653: LD_VAR 0 5
43657: PUSH
43658: LD_INT 2
43660: ARRAY
43661: PUSH
43662: LD_VAR 0 4
43666: ARRAY
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PPUSH
43672: CALL_OW 1
43676: ST_TO_ADDR
43677: GO 43616
43679: POP
43680: POP
// exit ;
43681: GO 43721
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_VAR 0 5
43692: PUSH
43693: LD_INT 1
43695: ARRAY
43696: PUSH
43697: LD_INT 1
43699: ARRAY
43700: PUSH
43701: LD_VAR 0 5
43705: PUSH
43706: LD_INT 2
43708: ARRAY
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: EMPTY
43719: LIST
43720: ST_TO_ADDR
// end ;
43721: LD_VAR 0 3
43725: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43726: LD_INT 0
43728: PPUSH
43729: PPUSH
// list := AreaToList ( area , 0 ) ;
43730: LD_ADDR_VAR 0 4
43734: PUSH
43735: LD_VAR 0 1
43739: PPUSH
43740: LD_INT 0
43742: PPUSH
43743: CALL_OW 517
43747: ST_TO_ADDR
// if not list then
43748: LD_VAR 0 4
43752: NOT
43753: IFFALSE 43757
// exit ;
43755: GO 43798
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43757: LD_ADDR_VAR 0 3
43761: PUSH
43762: LD_VAR 0 4
43766: PUSH
43767: LD_INT 1
43769: ARRAY
43770: PUSH
43771: LD_INT 1
43773: ARRAY
43774: PUSH
43775: LD_VAR 0 4
43779: PUSH
43780: LD_INT 2
43782: ARRAY
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PUSH
43788: LD_VAR 0 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// end ;
43798: LD_VAR 0 3
43802: RET
// export function First ( array ) ; begin
43803: LD_INT 0
43805: PPUSH
// if not array then
43806: LD_VAR 0 1
43810: NOT
43811: IFFALSE 43815
// exit ;
43813: GO 43829
// result := array [ 1 ] ;
43815: LD_ADDR_VAR 0 2
43819: PUSH
43820: LD_VAR 0 1
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: ST_TO_ADDR
// end ;
43829: LD_VAR 0 2
43833: RET
// export function Last ( array ) ; begin
43834: LD_INT 0
43836: PPUSH
// if not array then
43837: LD_VAR 0 1
43841: NOT
43842: IFFALSE 43846
// exit ;
43844: GO 43862
// result := array [ array ] ;
43846: LD_ADDR_VAR 0 2
43850: PUSH
43851: LD_VAR 0 1
43855: PUSH
43856: LD_VAR 0 1
43860: ARRAY
43861: ST_TO_ADDR
// end ;
43862: LD_VAR 0 2
43866: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43867: LD_INT 0
43869: PPUSH
43870: PPUSH
// result := [ ] ;
43871: LD_ADDR_VAR 0 5
43875: PUSH
43876: EMPTY
43877: ST_TO_ADDR
// if not array then
43878: LD_VAR 0 1
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 43999
// for i := 1 to array do
43887: LD_ADDR_VAR 0 6
43891: PUSH
43892: DOUBLE
43893: LD_INT 1
43895: DEC
43896: ST_TO_ADDR
43897: LD_VAR 0 1
43901: PUSH
43902: FOR_TO
43903: IFFALSE 43997
// if array [ i ] [ index ] = value then
43905: LD_VAR 0 1
43909: PUSH
43910: LD_VAR 0 6
43914: ARRAY
43915: PUSH
43916: LD_VAR 0 2
43920: ARRAY
43921: PUSH
43922: LD_VAR 0 3
43926: EQUAL
43927: IFFALSE 43995
// begin if indexColumn then
43929: LD_VAR 0 4
43933: IFFALSE 43969
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43935: LD_ADDR_VAR 0 5
43939: PUSH
43940: LD_VAR 0 5
43944: PPUSH
43945: LD_VAR 0 1
43949: PUSH
43950: LD_VAR 0 6
43954: ARRAY
43955: PUSH
43956: LD_VAR 0 4
43960: ARRAY
43961: PPUSH
43962: CALL 39007 0 2
43966: ST_TO_ADDR
43967: GO 43995
// result := Join ( result , array [ i ] ) ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: LD_VAR 0 5
43978: PPUSH
43979: LD_VAR 0 1
43983: PUSH
43984: LD_VAR 0 6
43988: ARRAY
43989: PPUSH
43990: CALL 39007 0 2
43994: ST_TO_ADDR
// end ;
43995: GO 43902
43997: POP
43998: POP
// end ;
43999: LD_VAR 0 5
44003: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44004: LD_INT 0
44006: PPUSH
// if not vehicles or not parkingPoint then
44007: LD_VAR 0 1
44011: NOT
44012: IFTRUE 44021
44014: PUSH
44015: LD_VAR 0 2
44019: NOT
44020: OR
44021: IFFALSE 44025
// exit ;
44023: GO 44123
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44025: LD_ADDR_VAR 0 1
44029: PUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_INT 50
44037: PUSH
44038: EMPTY
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 92
44046: PUSH
44047: LD_VAR 0 2
44051: PUSH
44052: LD_INT 1
44054: ARRAY
44055: PUSH
44056: LD_VAR 0 2
44060: PUSH
44061: LD_INT 2
44063: ARRAY
44064: PUSH
44065: LD_INT 8
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PPUSH
44082: CALL_OW 72
44086: ST_TO_ADDR
// if not vehicles then
44087: LD_VAR 0 1
44091: NOT
44092: IFFALSE 44096
// exit ;
44094: GO 44123
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44096: LD_VAR 0 1
44100: PPUSH
44101: LD_VAR 0 2
44105: PUSH
44106: LD_INT 1
44108: ARRAY
44109: PPUSH
44110: LD_VAR 0 2
44114: PUSH
44115: LD_INT 2
44117: ARRAY
44118: PPUSH
44119: CALL_OW 111
// end ;
44123: LD_VAR 0 3
44127: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44128: LD_INT 0
44130: PPUSH
44131: PPUSH
44132: PPUSH
// if not side or not area then
44133: LD_VAR 0 1
44137: NOT
44138: IFTRUE 44147
44140: PUSH
44141: LD_VAR 0 2
44145: NOT
44146: OR
44147: IFFALSE 44151
// exit ;
44149: GO 44270
// tmp := AreaToList ( area , 0 ) ;
44151: LD_ADDR_VAR 0 5
44155: PUSH
44156: LD_VAR 0 2
44160: PPUSH
44161: LD_INT 0
44163: PPUSH
44164: CALL_OW 517
44168: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44169: LD_ADDR_VAR 0 4
44173: PUSH
44174: DOUBLE
44175: LD_INT 1
44177: DEC
44178: ST_TO_ADDR
44179: LD_VAR 0 5
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PUSH
44188: FOR_TO
44189: IFFALSE 44268
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44191: LD_VAR 0 5
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: PUSH
44200: LD_VAR 0 4
44204: ARRAY
44205: PPUSH
44206: LD_VAR 0 5
44210: PUSH
44211: LD_INT 2
44213: ARRAY
44214: PUSH
44215: LD_VAR 0 4
44219: ARRAY
44220: PPUSH
44221: CALL_OW 351
44225: IFFALSE 44266
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44227: LD_VAR 0 5
44231: PUSH
44232: LD_INT 1
44234: ARRAY
44235: PUSH
44236: LD_VAR 0 4
44240: ARRAY
44241: PPUSH
44242: LD_VAR 0 5
44246: PUSH
44247: LD_INT 2
44249: ARRAY
44250: PUSH
44251: LD_VAR 0 4
44255: ARRAY
44256: PPUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 244
// end ;
44266: GO 44188
44268: POP
44269: POP
// end ;
44270: LD_VAR 0 3
44274: RET
