// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ; end_of_file
  14: END
// export globalGameSaveCounter ; every 0 0$1 do
  15: GO 17
  17: DISABLE
// begin enable ;
  18: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  19: LD_STRING updateTimer(
  21: PUSH
  22: LD_OWVAR 1
  26: STR
  27: PUSH
  28: LD_STRING );
  30: STR
  31: PPUSH
  32: CALL_OW 559
// end ;
  36: END
// every 0 0$1 do
  37: GO 39
  39: DISABLE
// begin globalGameSaveCounter := 0 ;
  40: LD_ADDR_EXP 1
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
  48: LD_STRING setGameSaveCounter(0)
  50: PPUSH
  51: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
  55: LD_STRING initStreamRollete();
  57: PPUSH
  58: CALL_OW 559
// InitStreamMode ;
  62: CALL 1405 0 0
// DefineStreamItems ( false ) ;
  66: LD_INT 0
  68: PPUSH
  69: CALL 1869 0 1
// end ;
  73: END
// export function SOS_MapStart ( ) ; begin
  74: LD_INT 0
  76: PPUSH
// if streamModeActive then
  77: LD_EXP 2
  81: IFFALSE 90
// DefineStreamItems ( true ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL 1869 0 1
// UpdateLuaVariables ( ) ;
  90: CALL 107 0 0
// UpdateFactoryWaypoints ( ) ;
  94: CALL 14738 0 0
// UpdateWarehouseGatheringPoints ( ) ;
  98: CALL 14995 0 0
// end ;
 102: LD_VAR 0 1
 106: RET
// function UpdateLuaVariables ( ) ; begin
 107: LD_INT 0
 109: PPUSH
// if globalGameSaveCounter then
 110: LD_EXP 1
 114: IFFALSE 148
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 116: LD_ADDR_EXP 1
 120: PUSH
 121: LD_EXP 1
 125: PPUSH
 126: CALL 59943 0 1
 130: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 131: LD_STRING setGameSaveCounter(
 133: PUSH
 134: LD_EXP 1
 138: STR
 139: PUSH
 140: LD_STRING )
 142: STR
 143: PPUSH
 144: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 148: LD_STRING setGameDifficulty(
 150: PUSH
 151: LD_OWVAR 67
 155: STR
 156: PUSH
 157: LD_STRING )
 159: STR
 160: PPUSH
 161: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 165: LD_STRING displayDifficulty(
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING )
 176: STR
 177: PPUSH
 178: CALL_OW 559
// end ;
 182: LD_VAR 0 1
 186: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 187: LD_INT 0
 189: PPUSH
// if p2 = stream_mode then
 190: LD_VAR 0 2
 194: PUSH
 195: LD_INT 100
 197: EQUAL
 198: IFFALSE 1201
// begin if not StreamModeActive then
 200: LD_EXP 2
 204: NOT
 205: IFFALSE 215
// StreamModeActive := true ;
 207: LD_ADDR_EXP 2
 211: PUSH
 212: LD_INT 1
 214: ST_TO_ADDR
// if p3 = 0 then
 215: LD_VAR 0 3
 219: PUSH
 220: LD_INT 0
 222: EQUAL
 223: IFFALSE 229
// InitStreamMode ;
 225: CALL 1405 0 0
// if p3 = 1 then
 229: LD_VAR 0 3
 233: PUSH
 234: LD_INT 1
 236: EQUAL
 237: IFFALSE 247
// sRocket := true ;
 239: LD_ADDR_EXP 7
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// if p3 = 2 then
 247: LD_VAR 0 3
 251: PUSH
 252: LD_INT 2
 254: EQUAL
 255: IFFALSE 265
// sSpeed := true ;
 257: LD_ADDR_EXP 6
 261: PUSH
 262: LD_INT 1
 264: ST_TO_ADDR
// if p3 = 3 then
 265: LD_VAR 0 3
 269: PUSH
 270: LD_INT 3
 272: EQUAL
 273: IFFALSE 283
// sEngine := true ;
 275: LD_ADDR_EXP 8
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// if p3 = 4 then
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 4
 290: EQUAL
 291: IFFALSE 301
// sSpec := true ;
 293: LD_ADDR_EXP 5
 297: PUSH
 298: LD_INT 1
 300: ST_TO_ADDR
// if p3 = 5 then
 301: LD_VAR 0 3
 305: PUSH
 306: LD_INT 5
 308: EQUAL
 309: IFFALSE 319
// sLevel := true ;
 311: LD_ADDR_EXP 9
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// if p3 = 6 then
 319: LD_VAR 0 3
 323: PUSH
 324: LD_INT 6
 326: EQUAL
 327: IFFALSE 337
// sArmoury := true ;
 329: LD_ADDR_EXP 10
 333: PUSH
 334: LD_INT 1
 336: ST_TO_ADDR
// if p3 = 7 then
 337: LD_VAR 0 3
 341: PUSH
 342: LD_INT 7
 344: EQUAL
 345: IFFALSE 355
// sRadar := true ;
 347: LD_ADDR_EXP 11
 351: PUSH
 352: LD_INT 1
 354: ST_TO_ADDR
// if p3 = 8 then
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 8
 362: EQUAL
 363: IFFALSE 373
// sBunker := true ;
 365: LD_ADDR_EXP 12
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// if p3 = 9 then
 373: LD_VAR 0 3
 377: PUSH
 378: LD_INT 9
 380: EQUAL
 381: IFFALSE 391
// sHack := true ;
 383: LD_ADDR_EXP 13
 387: PUSH
 388: LD_INT 1
 390: ST_TO_ADDR
// if p3 = 10 then
 391: LD_VAR 0 3
 395: PUSH
 396: LD_INT 10
 398: EQUAL
 399: IFFALSE 409
// sFire := true ;
 401: LD_ADDR_EXP 14
 405: PUSH
 406: LD_INT 1
 408: ST_TO_ADDR
// if p3 = 11 then
 409: LD_VAR 0 3
 413: PUSH
 414: LD_INT 11
 416: EQUAL
 417: IFFALSE 427
// sRefresh := true ;
 419: LD_ADDR_EXP 15
 423: PUSH
 424: LD_INT 1
 426: ST_TO_ADDR
// if p3 = 12 then
 427: LD_VAR 0 3
 431: PUSH
 432: LD_INT 12
 434: EQUAL
 435: IFFALSE 445
// sExp := true ;
 437: LD_ADDR_EXP 16
 441: PUSH
 442: LD_INT 1
 444: ST_TO_ADDR
// if p3 = 13 then
 445: LD_VAR 0 3
 449: PUSH
 450: LD_INT 13
 452: EQUAL
 453: IFFALSE 463
// sDepot := true ;
 455: LD_ADDR_EXP 17
 459: PUSH
 460: LD_INT 1
 462: ST_TO_ADDR
// if p3 = 14 then
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 14
 470: EQUAL
 471: IFFALSE 481
// sFlag := true ;
 473: LD_ADDR_EXP 18
 477: PUSH
 478: LD_INT 1
 480: ST_TO_ADDR
// if p3 = 15 then
 481: LD_VAR 0 3
 485: PUSH
 486: LD_INT 15
 488: EQUAL
 489: IFFALSE 499
// sKamikadze := true ;
 491: LD_ADDR_EXP 26
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// if p3 = 16 then
 499: LD_VAR 0 3
 503: PUSH
 504: LD_INT 16
 506: EQUAL
 507: IFFALSE 517
// sTroll := true ;
 509: LD_ADDR_EXP 27
 513: PUSH
 514: LD_INT 1
 516: ST_TO_ADDR
// if p3 = 17 then
 517: LD_VAR 0 3
 521: PUSH
 522: LD_INT 17
 524: EQUAL
 525: IFFALSE 535
// sSlow := true ;
 527: LD_ADDR_EXP 28
 531: PUSH
 532: LD_INT 1
 534: ST_TO_ADDR
// if p3 = 18 then
 535: LD_VAR 0 3
 539: PUSH
 540: LD_INT 18
 542: EQUAL
 543: IFFALSE 553
// sLack := true ;
 545: LD_ADDR_EXP 29
 549: PUSH
 550: LD_INT 1
 552: ST_TO_ADDR
// if p3 = 19 then
 553: LD_VAR 0 3
 557: PUSH
 558: LD_INT 19
 560: EQUAL
 561: IFFALSE 571
// sTank := true ;
 563: LD_ADDR_EXP 31
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// if p3 = 20 then
 571: LD_VAR 0 3
 575: PUSH
 576: LD_INT 20
 578: EQUAL
 579: IFFALSE 589
// sRemote := true ;
 581: LD_ADDR_EXP 32
 585: PUSH
 586: LD_INT 1
 588: ST_TO_ADDR
// if p3 = 21 then
 589: LD_VAR 0 3
 593: PUSH
 594: LD_INT 21
 596: EQUAL
 597: IFFALSE 607
// sPowell := true ;
 599: LD_ADDR_EXP 33
 603: PUSH
 604: LD_INT 1
 606: ST_TO_ADDR
// if p3 = 22 then
 607: LD_VAR 0 3
 611: PUSH
 612: LD_INT 22
 614: EQUAL
 615: IFFALSE 625
// sTeleport := true ;
 617: LD_ADDR_EXP 36
 621: PUSH
 622: LD_INT 1
 624: ST_TO_ADDR
// if p3 = 23 then
 625: LD_VAR 0 3
 629: PUSH
 630: LD_INT 23
 632: EQUAL
 633: IFFALSE 643
// sOilTower := true ;
 635: LD_ADDR_EXP 38
 639: PUSH
 640: LD_INT 1
 642: ST_TO_ADDR
// if p3 = 24 then
 643: LD_VAR 0 3
 647: PUSH
 648: LD_INT 24
 650: EQUAL
 651: IFFALSE 661
// sShovel := true ;
 653: LD_ADDR_EXP 39
 657: PUSH
 658: LD_INT 1
 660: ST_TO_ADDR
// if p3 = 25 then
 661: LD_VAR 0 3
 665: PUSH
 666: LD_INT 25
 668: EQUAL
 669: IFFALSE 679
// sSheik := true ;
 671: LD_ADDR_EXP 40
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// if p3 = 26 then
 679: LD_VAR 0 3
 683: PUSH
 684: LD_INT 26
 686: EQUAL
 687: IFFALSE 697
// sEarthquake := true ;
 689: LD_ADDR_EXP 42
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// if p3 = 27 then
 697: LD_VAR 0 3
 701: PUSH
 702: LD_INT 27
 704: EQUAL
 705: IFFALSE 715
// sAI := true ;
 707: LD_ADDR_EXP 43
 711: PUSH
 712: LD_INT 1
 714: ST_TO_ADDR
// if p3 = 28 then
 715: LD_VAR 0 3
 719: PUSH
 720: LD_INT 28
 722: EQUAL
 723: IFFALSE 733
// sCargo := true ;
 725: LD_ADDR_EXP 46
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// if p3 = 29 then
 733: LD_VAR 0 3
 737: PUSH
 738: LD_INT 29
 740: EQUAL
 741: IFFALSE 751
// sDLaser := true ;
 743: LD_ADDR_EXP 47
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
// if p3 = 30 then
 751: LD_VAR 0 3
 755: PUSH
 756: LD_INT 30
 758: EQUAL
 759: IFFALSE 769
// sExchange := true ;
 761: LD_ADDR_EXP 48
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// if p3 = 31 then
 769: LD_VAR 0 3
 773: PUSH
 774: LD_INT 31
 776: EQUAL
 777: IFFALSE 787
// sFac := true ;
 779: LD_ADDR_EXP 49
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// if p3 = 32 then
 787: LD_VAR 0 3
 791: PUSH
 792: LD_INT 32
 794: EQUAL
 795: IFFALSE 805
// sPower := true ;
 797: LD_ADDR_EXP 50
 801: PUSH
 802: LD_INT 1
 804: ST_TO_ADDR
// if p3 = 33 then
 805: LD_VAR 0 3
 809: PUSH
 810: LD_INT 33
 812: EQUAL
 813: IFFALSE 823
// sRandom := true ;
 815: LD_ADDR_EXP 51
 819: PUSH
 820: LD_INT 1
 822: ST_TO_ADDR
// if p3 = 34 then
 823: LD_VAR 0 3
 827: PUSH
 828: LD_INT 34
 830: EQUAL
 831: IFFALSE 841
// sShield := true ;
 833: LD_ADDR_EXP 52
 837: PUSH
 838: LD_INT 1
 840: ST_TO_ADDR
// if p3 = 35 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 35
 848: EQUAL
 849: IFFALSE 859
// sTime := true ;
 851: LD_ADDR_EXP 53
 855: PUSH
 856: LD_INT 1
 858: ST_TO_ADDR
// if p3 = 36 then
 859: LD_VAR 0 3
 863: PUSH
 864: LD_INT 36
 866: EQUAL
 867: IFFALSE 877
// sTools := true ;
 869: LD_ADDR_EXP 54
 873: PUSH
 874: LD_INT 1
 876: ST_TO_ADDR
// if p3 = 101 then
 877: LD_VAR 0 3
 881: PUSH
 882: LD_INT 101
 884: EQUAL
 885: IFFALSE 895
// sSold := true ;
 887: LD_ADDR_EXP 19
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// if p3 = 102 then
 895: LD_VAR 0 3
 899: PUSH
 900: LD_INT 102
 902: EQUAL
 903: IFFALSE 913
// sDiff := true ;
 905: LD_ADDR_EXP 20
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
// if p3 = 103 then
 913: LD_VAR 0 3
 917: PUSH
 918: LD_INT 103
 920: EQUAL
 921: IFFALSE 931
// sFog := true ;
 923: LD_ADDR_EXP 23
 927: PUSH
 928: LD_INT 1
 930: ST_TO_ADDR
// if p3 = 104 then
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 104
 938: EQUAL
 939: IFFALSE 949
// sReset := true ;
 941: LD_ADDR_EXP 24
 945: PUSH
 946: LD_INT 1
 948: ST_TO_ADDR
// if p3 = 105 then
 949: LD_VAR 0 3
 953: PUSH
 954: LD_INT 105
 956: EQUAL
 957: IFFALSE 967
// sSun := true ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_INT 1
 966: ST_TO_ADDR
// if p3 = 106 then
 967: LD_VAR 0 3
 971: PUSH
 972: LD_INT 106
 974: EQUAL
 975: IFFALSE 985
// sTiger := true ;
 977: LD_ADDR_EXP 21
 981: PUSH
 982: LD_INT 1
 984: ST_TO_ADDR
// if p3 = 107 then
 985: LD_VAR 0 3
 989: PUSH
 990: LD_INT 107
 992: EQUAL
 993: IFFALSE 1003
// sBomb := true ;
 995: LD_ADDR_EXP 22
 999: PUSH
1000: LD_INT 1
1002: ST_TO_ADDR
// if p3 = 108 then
1003: LD_VAR 0 3
1007: PUSH
1008: LD_INT 108
1010: EQUAL
1011: IFFALSE 1021
// sWound := true ;
1013: LD_ADDR_EXP 30
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// if p3 = 109 then
1021: LD_VAR 0 3
1025: PUSH
1026: LD_INT 109
1028: EQUAL
1029: IFFALSE 1039
// sBetray := true ;
1031: LD_ADDR_EXP 34
1035: PUSH
1036: LD_INT 1
1038: ST_TO_ADDR
// if p3 = 110 then
1039: LD_VAR 0 3
1043: PUSH
1044: LD_INT 110
1046: EQUAL
1047: IFFALSE 1057
// sContamin := true ;
1049: LD_ADDR_EXP 35
1053: PUSH
1054: LD_INT 1
1056: ST_TO_ADDR
// if p3 = 111 then
1057: LD_VAR 0 3
1061: PUSH
1062: LD_INT 111
1064: EQUAL
1065: IFFALSE 1075
// sOil := true ;
1067: LD_ADDR_EXP 37
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// if p3 = 112 then
1075: LD_VAR 0 3
1079: PUSH
1080: LD_INT 112
1082: EQUAL
1083: IFFALSE 1093
// sStu := true ;
1085: LD_ADDR_EXP 41
1089: PUSH
1090: LD_INT 1
1092: ST_TO_ADDR
// if p3 = 113 then
1093: LD_VAR 0 3
1097: PUSH
1098: LD_INT 113
1100: EQUAL
1101: IFFALSE 1111
// sBazooka := true ;
1103: LD_ADDR_EXP 44
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// if p3 = 114 then
1111: LD_VAR 0 3
1115: PUSH
1116: LD_INT 114
1118: EQUAL
1119: IFFALSE 1129
// sMortar := true ;
1121: LD_ADDR_EXP 45
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// if p3 = 115 then
1129: LD_VAR 0 3
1133: PUSH
1134: LD_INT 115
1136: EQUAL
1137: IFFALSE 1147
// sRanger := true ;
1139: LD_ADDR_EXP 55
1143: PUSH
1144: LD_INT 1
1146: ST_TO_ADDR
// if p3 = 116 then
1147: LD_VAR 0 3
1151: PUSH
1152: LD_INT 116
1154: EQUAL
1155: IFFALSE 1165
// sComputer := true ;
1157: LD_ADDR_EXP 56
1161: PUSH
1162: LD_INT 1
1164: ST_TO_ADDR
// if p3 = 117 then
1165: LD_VAR 0 3
1169: PUSH
1170: LD_INT 117
1172: EQUAL
1173: IFFALSE 1183
// s30 := true ;
1175: LD_ADDR_EXP 57
1179: PUSH
1180: LD_INT 1
1182: ST_TO_ADDR
// if p3 = 118 then
1183: LD_VAR 0 3
1187: PUSH
1188: LD_INT 118
1190: EQUAL
1191: IFFALSE 1201
// s60 := true ;
1193: LD_ADDR_EXP 58
1197: PUSH
1198: LD_INT 1
1200: ST_TO_ADDR
// end ; if p2 = hack_mode then
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 101
1208: EQUAL
1209: IFFALSE 1337
// begin case p3 of 1 :
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: DOUBLE
1219: EQUAL
1220: IFTRUE 1224
1222: GO 1231
1224: POP
// hHackUnlimitedResources ; 2 :
1225: CALL 13484 0 0
1229: GO 1337
1231: LD_INT 2
1233: DOUBLE
1234: EQUAL
1235: IFTRUE 1239
1237: GO 1246
1239: POP
// hHackSetLevel10 ; 3 :
1240: CALL 13617 0 0
1244: GO 1337
1246: LD_INT 3
1248: DOUBLE
1249: EQUAL
1250: IFTRUE 1254
1252: GO 1261
1254: POP
// hHackSetLevel10YourUnits ; 4 :
1255: CALL 13702 0 0
1259: GO 1337
1261: LD_INT 4
1263: DOUBLE
1264: EQUAL
1265: IFTRUE 1269
1267: GO 1276
1269: POP
// hHackInvincible ; 5 :
1270: CALL 14150 0 0
1274: GO 1337
1276: LD_INT 5
1278: DOUBLE
1279: EQUAL
1280: IFTRUE 1284
1282: GO 1291
1284: POP
// hHackInvisible ; 6 :
1285: CALL 14261 0 0
1289: GO 1337
1291: LD_INT 6
1293: DOUBLE
1294: EQUAL
1295: IFTRUE 1299
1297: GO 1306
1299: POP
// hHackChangeYourSide ; 7 :
1300: CALL 14318 0 0
1304: GO 1337
1306: LD_INT 7
1308: DOUBLE
1309: EQUAL
1310: IFTRUE 1314
1312: GO 1321
1314: POP
// hHackChangeUnitSide ; 8 :
1315: CALL 14360 0 0
1319: GO 1337
1321: LD_INT 8
1323: DOUBLE
1324: EQUAL
1325: IFTRUE 1329
1327: GO 1336
1329: POP
// hHackFog ; end ;
1330: CALL 14461 0 0
1334: GO 1337
1336: POP
// end ; if p2 = game_save_mode then
1337: LD_VAR 0 2
1341: PUSH
1342: LD_INT 102
1344: EQUAL
1345: IFFALSE 1400
// begin if p3 = 1 then
1347: LD_VAR 0 3
1351: PUSH
1352: LD_INT 1
1354: EQUAL
1355: IFFALSE 1367
// globalGameSaveCounter := p4 ;
1357: LD_ADDR_EXP 1
1361: PUSH
1362: LD_VAR 0 4
1366: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1367: LD_VAR 0 3
1371: PUSH
1372: LD_INT 2
1374: EQUAL
1375: PUSH
1376: LD_EXP 1
1380: AND
1381: IFFALSE 1400
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1383: LD_STRING setGameSaveCounter(
1385: PUSH
1386: LD_EXP 1
1390: STR
1391: PUSH
1392: LD_STRING )
1394: STR
1395: PPUSH
1396: CALL_OW 559
// end ; end ;
1400: LD_VAR 0 7
1404: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1405: LD_INT 0
1407: PPUSH
// streamModeActive := false ;
1408: LD_ADDR_EXP 2
1412: PUSH
1413: LD_INT 0
1415: ST_TO_ADDR
// normalCounter := 36 ;
1416: LD_ADDR_EXP 3
1420: PUSH
1421: LD_INT 36
1423: ST_TO_ADDR
// hardcoreCounter := 18 ;
1424: LD_ADDR_EXP 4
1428: PUSH
1429: LD_INT 18
1431: ST_TO_ADDR
// sRocket := false ;
1432: LD_ADDR_EXP 7
1436: PUSH
1437: LD_INT 0
1439: ST_TO_ADDR
// sSpeed := false ;
1440: LD_ADDR_EXP 6
1444: PUSH
1445: LD_INT 0
1447: ST_TO_ADDR
// sEngine := false ;
1448: LD_ADDR_EXP 8
1452: PUSH
1453: LD_INT 0
1455: ST_TO_ADDR
// sSpec := false ;
1456: LD_ADDR_EXP 5
1460: PUSH
1461: LD_INT 0
1463: ST_TO_ADDR
// sLevel := false ;
1464: LD_ADDR_EXP 9
1468: PUSH
1469: LD_INT 0
1471: ST_TO_ADDR
// sArmoury := false ;
1472: LD_ADDR_EXP 10
1476: PUSH
1477: LD_INT 0
1479: ST_TO_ADDR
// sRadar := false ;
1480: LD_ADDR_EXP 11
1484: PUSH
1485: LD_INT 0
1487: ST_TO_ADDR
// sBunker := false ;
1488: LD_ADDR_EXP 12
1492: PUSH
1493: LD_INT 0
1495: ST_TO_ADDR
// sHack := false ;
1496: LD_ADDR_EXP 13
1500: PUSH
1501: LD_INT 0
1503: ST_TO_ADDR
// sFire := false ;
1504: LD_ADDR_EXP 14
1508: PUSH
1509: LD_INT 0
1511: ST_TO_ADDR
// sRefresh := false ;
1512: LD_ADDR_EXP 15
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// sExp := false ;
1520: LD_ADDR_EXP 16
1524: PUSH
1525: LD_INT 0
1527: ST_TO_ADDR
// sDepot := false ;
1528: LD_ADDR_EXP 17
1532: PUSH
1533: LD_INT 0
1535: ST_TO_ADDR
// sFlag := false ;
1536: LD_ADDR_EXP 18
1540: PUSH
1541: LD_INT 0
1543: ST_TO_ADDR
// sKamikadze := false ;
1544: LD_ADDR_EXP 26
1548: PUSH
1549: LD_INT 0
1551: ST_TO_ADDR
// sTroll := false ;
1552: LD_ADDR_EXP 27
1556: PUSH
1557: LD_INT 0
1559: ST_TO_ADDR
// sSlow := false ;
1560: LD_ADDR_EXP 28
1564: PUSH
1565: LD_INT 0
1567: ST_TO_ADDR
// sLack := false ;
1568: LD_ADDR_EXP 29
1572: PUSH
1573: LD_INT 0
1575: ST_TO_ADDR
// sTank := false ;
1576: LD_ADDR_EXP 31
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// sRemote := false ;
1584: LD_ADDR_EXP 32
1588: PUSH
1589: LD_INT 0
1591: ST_TO_ADDR
// sPowell := false ;
1592: LD_ADDR_EXP 33
1596: PUSH
1597: LD_INT 0
1599: ST_TO_ADDR
// sTeleport := false ;
1600: LD_ADDR_EXP 36
1604: PUSH
1605: LD_INT 0
1607: ST_TO_ADDR
// sOilTower := false ;
1608: LD_ADDR_EXP 38
1612: PUSH
1613: LD_INT 0
1615: ST_TO_ADDR
// sShovel := false ;
1616: LD_ADDR_EXP 39
1620: PUSH
1621: LD_INT 0
1623: ST_TO_ADDR
// sSheik := false ;
1624: LD_ADDR_EXP 40
1628: PUSH
1629: LD_INT 0
1631: ST_TO_ADDR
// sEarthquake := false ;
1632: LD_ADDR_EXP 42
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// sAI := false ;
1640: LD_ADDR_EXP 43
1644: PUSH
1645: LD_INT 0
1647: ST_TO_ADDR
// sCargo := false ;
1648: LD_ADDR_EXP 46
1652: PUSH
1653: LD_INT 0
1655: ST_TO_ADDR
// sDLaser := false ;
1656: LD_ADDR_EXP 47
1660: PUSH
1661: LD_INT 0
1663: ST_TO_ADDR
// sExchange := false ;
1664: LD_ADDR_EXP 48
1668: PUSH
1669: LD_INT 0
1671: ST_TO_ADDR
// sFac := false ;
1672: LD_ADDR_EXP 49
1676: PUSH
1677: LD_INT 0
1679: ST_TO_ADDR
// sPower := false ;
1680: LD_ADDR_EXP 50
1684: PUSH
1685: LD_INT 0
1687: ST_TO_ADDR
// sRandom := false ;
1688: LD_ADDR_EXP 51
1692: PUSH
1693: LD_INT 0
1695: ST_TO_ADDR
// sShield := false ;
1696: LD_ADDR_EXP 52
1700: PUSH
1701: LD_INT 0
1703: ST_TO_ADDR
// sTime := false ;
1704: LD_ADDR_EXP 53
1708: PUSH
1709: LD_INT 0
1711: ST_TO_ADDR
// sTools := false ;
1712: LD_ADDR_EXP 54
1716: PUSH
1717: LD_INT 0
1719: ST_TO_ADDR
// sSold := false ;
1720: LD_ADDR_EXP 19
1724: PUSH
1725: LD_INT 0
1727: ST_TO_ADDR
// sDiff := false ;
1728: LD_ADDR_EXP 20
1732: PUSH
1733: LD_INT 0
1735: ST_TO_ADDR
// sFog := false ;
1736: LD_ADDR_EXP 23
1740: PUSH
1741: LD_INT 0
1743: ST_TO_ADDR
// sReset := false ;
1744: LD_ADDR_EXP 24
1748: PUSH
1749: LD_INT 0
1751: ST_TO_ADDR
// sSun := false ;
1752: LD_ADDR_EXP 25
1756: PUSH
1757: LD_INT 0
1759: ST_TO_ADDR
// sTiger := false ;
1760: LD_ADDR_EXP 21
1764: PUSH
1765: LD_INT 0
1767: ST_TO_ADDR
// sBomb := false ;
1768: LD_ADDR_EXP 22
1772: PUSH
1773: LD_INT 0
1775: ST_TO_ADDR
// sWound := false ;
1776: LD_ADDR_EXP 30
1780: PUSH
1781: LD_INT 0
1783: ST_TO_ADDR
// sBetray := false ;
1784: LD_ADDR_EXP 34
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// sContamin := false ;
1792: LD_ADDR_EXP 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// sOil := false ;
1800: LD_ADDR_EXP 37
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// sStu := false ;
1808: LD_ADDR_EXP 41
1812: PUSH
1813: LD_INT 0
1815: ST_TO_ADDR
// sBazooka := false ;
1816: LD_ADDR_EXP 44
1820: PUSH
1821: LD_INT 0
1823: ST_TO_ADDR
// sMortar := false ;
1824: LD_ADDR_EXP 45
1828: PUSH
1829: LD_INT 0
1831: ST_TO_ADDR
// sRanger := false ;
1832: LD_ADDR_EXP 55
1836: PUSH
1837: LD_INT 0
1839: ST_TO_ADDR
// sComputer := false ;
1840: LD_ADDR_EXP 56
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// s30 := false ;
1848: LD_ADDR_EXP 57
1852: PUSH
1853: LD_INT 0
1855: ST_TO_ADDR
// s60 := false ;
1856: LD_ADDR_EXP 58
1860: PUSH
1861: LD_INT 0
1863: ST_TO_ADDR
// end ;
1864: LD_VAR 0 1
1868: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
1873: PPUSH
1874: PPUSH
1875: PPUSH
1876: PPUSH
1877: PPUSH
// result := [ ] ;
1878: LD_ADDR_VAR 0 2
1882: PUSH
1883: EMPTY
1884: ST_TO_ADDR
// if campaign_id = 1 then
1885: LD_OWVAR 69
1889: PUSH
1890: LD_INT 1
1892: EQUAL
1893: IFFALSE 5059
// begin case mission_number of 1 :
1895: LD_OWVAR 70
1899: PUSH
1900: LD_INT 1
1902: DOUBLE
1903: EQUAL
1904: IFTRUE 1908
1906: GO 1984
1908: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 4
1919: PUSH
1920: LD_INT 11
1922: PUSH
1923: LD_INT 12
1925: PUSH
1926: LD_INT 15
1928: PUSH
1929: LD_INT 16
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 23
1937: PUSH
1938: LD_INT 26
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 101
1954: PUSH
1955: LD_INT 102
1957: PUSH
1958: LD_INT 106
1960: PUSH
1961: LD_INT 116
1963: PUSH
1964: LD_INT 117
1966: PUSH
1967: LD_INT 118
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: ST_TO_ADDR
1982: GO 5057
1984: LD_INT 2
1986: DOUBLE
1987: EQUAL
1988: IFTRUE 1992
1990: GO 2076
1992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 11
2006: PUSH
2007: LD_INT 12
2009: PUSH
2010: LD_INT 15
2012: PUSH
2013: LD_INT 16
2015: PUSH
2016: LD_INT 22
2018: PUSH
2019: LD_INT 23
2021: PUSH
2022: LD_INT 26
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 101
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 105
2044: PUSH
2045: LD_INT 106
2047: PUSH
2048: LD_INT 108
2050: PUSH
2051: LD_INT 116
2053: PUSH
2054: LD_INT 117
2056: PUSH
2057: LD_INT 118
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: ST_TO_ADDR
2074: GO 5057
2076: LD_INT 3
2078: DOUBLE
2079: EQUAL
2080: IFTRUE 2084
2082: GO 2172
2084: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_INT 2
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 5
2098: PUSH
2099: LD_INT 11
2101: PUSH
2102: LD_INT 12
2104: PUSH
2105: LD_INT 15
2107: PUSH
2108: LD_INT 16
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 26
2116: PUSH
2117: LD_INT 36
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 101
2134: PUSH
2135: LD_INT 102
2137: PUSH
2138: LD_INT 105
2140: PUSH
2141: LD_INT 106
2143: PUSH
2144: LD_INT 108
2146: PUSH
2147: LD_INT 116
2149: PUSH
2150: LD_INT 117
2152: PUSH
2153: LD_INT 118
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: ST_TO_ADDR
2170: GO 5057
2172: LD_INT 4
2174: DOUBLE
2175: EQUAL
2176: IFTRUE 2180
2178: GO 2276
2180: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 4
2191: PUSH
2192: LD_INT 5
2194: PUSH
2195: LD_INT 8
2197: PUSH
2198: LD_INT 11
2200: PUSH
2201: LD_INT 12
2203: PUSH
2204: LD_INT 15
2206: PUSH
2207: LD_INT 16
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: LD_INT 23
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 36
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 101
2238: PUSH
2239: LD_INT 102
2241: PUSH
2242: LD_INT 105
2244: PUSH
2245: LD_INT 106
2247: PUSH
2248: LD_INT 108
2250: PUSH
2251: LD_INT 116
2253: PUSH
2254: LD_INT 117
2256: PUSH
2257: LD_INT 118
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: ST_TO_ADDR
2274: GO 5057
2276: LD_INT 5
2278: DOUBLE
2279: EQUAL
2280: IFTRUE 2284
2282: GO 2396
2284: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 5
2298: PUSH
2299: LD_INT 6
2301: PUSH
2302: LD_INT 8
2304: PUSH
2305: LD_INT 11
2307: PUSH
2308: LD_INT 12
2310: PUSH
2311: LD_INT 15
2313: PUSH
2314: LD_INT 16
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 23
2322: PUSH
2323: LD_INT 25
2325: PUSH
2326: LD_INT 26
2328: PUSH
2329: LD_INT 36
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_INT 101
2350: PUSH
2351: LD_INT 102
2353: PUSH
2354: LD_INT 105
2356: PUSH
2357: LD_INT 106
2359: PUSH
2360: LD_INT 108
2362: PUSH
2363: LD_INT 109
2365: PUSH
2366: LD_INT 112
2368: PUSH
2369: LD_INT 116
2371: PUSH
2372: LD_INT 117
2374: PUSH
2375: LD_INT 118
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: ST_TO_ADDR
2394: GO 5057
2396: LD_INT 6
2398: DOUBLE
2399: EQUAL
2400: IFTRUE 2404
2402: GO 2536
2404: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2405: LD_ADDR_VAR 0 2
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: LD_INT 4
2415: PUSH
2416: LD_INT 5
2418: PUSH
2419: LD_INT 6
2421: PUSH
2422: LD_INT 8
2424: PUSH
2425: LD_INT 11
2427: PUSH
2428: LD_INT 12
2430: PUSH
2431: LD_INT 15
2433: PUSH
2434: LD_INT 16
2436: PUSH
2437: LD_INT 20
2439: PUSH
2440: LD_INT 21
2442: PUSH
2443: LD_INT 22
2445: PUSH
2446: LD_INT 23
2448: PUSH
2449: LD_INT 25
2451: PUSH
2452: LD_INT 26
2454: PUSH
2455: LD_INT 30
2457: PUSH
2458: LD_INT 31
2460: PUSH
2461: LD_INT 32
2463: PUSH
2464: LD_INT 36
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 101
2490: PUSH
2491: LD_INT 102
2493: PUSH
2494: LD_INT 105
2496: PUSH
2497: LD_INT 106
2499: PUSH
2500: LD_INT 108
2502: PUSH
2503: LD_INT 109
2505: PUSH
2506: LD_INT 112
2508: PUSH
2509: LD_INT 116
2511: PUSH
2512: LD_INT 117
2514: PUSH
2515: LD_INT 118
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: ST_TO_ADDR
2534: GO 5057
2536: LD_INT 7
2538: DOUBLE
2539: EQUAL
2540: IFTRUE 2544
2542: GO 2656
2544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2545: LD_ADDR_VAR 0 2
2549: PUSH
2550: LD_INT 2
2552: PUSH
2553: LD_INT 4
2555: PUSH
2556: LD_INT 5
2558: PUSH
2559: LD_INT 7
2561: PUSH
2562: LD_INT 11
2564: PUSH
2565: LD_INT 12
2567: PUSH
2568: LD_INT 15
2570: PUSH
2571: LD_INT 16
2573: PUSH
2574: LD_INT 20
2576: PUSH
2577: LD_INT 21
2579: PUSH
2580: LD_INT 22
2582: PUSH
2583: LD_INT 23
2585: PUSH
2586: LD_INT 25
2588: PUSH
2589: LD_INT 26
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_INT 101
2610: PUSH
2611: LD_INT 102
2613: PUSH
2614: LD_INT 103
2616: PUSH
2617: LD_INT 105
2619: PUSH
2620: LD_INT 106
2622: PUSH
2623: LD_INT 108
2625: PUSH
2626: LD_INT 112
2628: PUSH
2629: LD_INT 116
2631: PUSH
2632: LD_INT 117
2634: PUSH
2635: LD_INT 118
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: ST_TO_ADDR
2654: GO 5057
2656: LD_INT 8
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2804
2664: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2665: LD_ADDR_VAR 0 2
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: LD_INT 4
2675: PUSH
2676: LD_INT 5
2678: PUSH
2679: LD_INT 6
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 8
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: LD_INT 12
2693: PUSH
2694: LD_INT 15
2696: PUSH
2697: LD_INT 16
2699: PUSH
2700: LD_INT 20
2702: PUSH
2703: LD_INT 21
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 23
2711: PUSH
2712: LD_INT 25
2714: PUSH
2715: LD_INT 26
2717: PUSH
2718: LD_INT 30
2720: PUSH
2721: LD_INT 31
2723: PUSH
2724: LD_INT 32
2726: PUSH
2727: LD_INT 36
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 101
2754: PUSH
2755: LD_INT 102
2757: PUSH
2758: LD_INT 103
2760: PUSH
2761: LD_INT 105
2763: PUSH
2764: LD_INT 106
2766: PUSH
2767: LD_INT 108
2769: PUSH
2770: LD_INT 109
2772: PUSH
2773: LD_INT 112
2775: PUSH
2776: LD_INT 116
2778: PUSH
2779: LD_INT 117
2781: PUSH
2782: LD_INT 118
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: ST_TO_ADDR
2802: GO 5057
2804: LD_INT 9
2806: DOUBLE
2807: EQUAL
2808: IFTRUE 2812
2810: GO 2960
2812: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2813: LD_ADDR_VAR 0 2
2817: PUSH
2818: LD_INT 2
2820: PUSH
2821: LD_INT 4
2823: PUSH
2824: LD_INT 5
2826: PUSH
2827: LD_INT 6
2829: PUSH
2830: LD_INT 7
2832: PUSH
2833: LD_INT 8
2835: PUSH
2836: LD_INT 11
2838: PUSH
2839: LD_INT 12
2841: PUSH
2842: LD_INT 15
2844: PUSH
2845: LD_INT 16
2847: PUSH
2848: LD_INT 20
2850: PUSH
2851: LD_INT 21
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 23
2859: PUSH
2860: LD_INT 25
2862: PUSH
2863: LD_INT 26
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_INT 30
2871: PUSH
2872: LD_INT 31
2874: PUSH
2875: LD_INT 32
2877: PUSH
2878: LD_INT 36
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 101
2906: PUSH
2907: LD_INT 102
2909: PUSH
2910: LD_INT 103
2912: PUSH
2913: LD_INT 105
2915: PUSH
2916: LD_INT 106
2918: PUSH
2919: LD_INT 108
2921: PUSH
2922: LD_INT 109
2924: PUSH
2925: LD_INT 112
2927: PUSH
2928: LD_INT 114
2930: PUSH
2931: LD_INT 116
2933: PUSH
2934: LD_INT 117
2936: PUSH
2937: LD_INT 118
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: ST_TO_ADDR
2958: GO 5057
2960: LD_INT 10
2962: DOUBLE
2963: EQUAL
2964: IFTRUE 2968
2966: GO 3164
2968: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2969: LD_ADDR_VAR 0 2
2973: PUSH
2974: LD_INT 2
2976: PUSH
2977: LD_INT 4
2979: PUSH
2980: LD_INT 5
2982: PUSH
2983: LD_INT 6
2985: PUSH
2986: LD_INT 7
2988: PUSH
2989: LD_INT 8
2991: PUSH
2992: LD_INT 9
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: LD_INT 11
3000: PUSH
3001: LD_INT 12
3003: PUSH
3004: LD_INT 13
3006: PUSH
3007: LD_INT 14
3009: PUSH
3010: LD_INT 15
3012: PUSH
3013: LD_INT 16
3015: PUSH
3016: LD_INT 17
3018: PUSH
3019: LD_INT 18
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 20
3027: PUSH
3028: LD_INT 21
3030: PUSH
3031: LD_INT 22
3033: PUSH
3034: LD_INT 23
3036: PUSH
3037: LD_INT 24
3039: PUSH
3040: LD_INT 25
3042: PUSH
3043: LD_INT 26
3045: PUSH
3046: LD_INT 28
3048: PUSH
3049: LD_INT 30
3051: PUSH
3052: LD_INT 31
3054: PUSH
3055: LD_INT 32
3057: PUSH
3058: LD_INT 36
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 101
3094: PUSH
3095: LD_INT 102
3097: PUSH
3098: LD_INT 103
3100: PUSH
3101: LD_INT 104
3103: PUSH
3104: LD_INT 105
3106: PUSH
3107: LD_INT 106
3109: PUSH
3110: LD_INT 107
3112: PUSH
3113: LD_INT 108
3115: PUSH
3116: LD_INT 109
3118: PUSH
3119: LD_INT 110
3121: PUSH
3122: LD_INT 111
3124: PUSH
3125: LD_INT 112
3127: PUSH
3128: LD_INT 114
3130: PUSH
3131: LD_INT 116
3133: PUSH
3134: LD_INT 117
3136: PUSH
3137: LD_INT 118
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: ST_TO_ADDR
3162: GO 5057
3164: LD_INT 11
3166: DOUBLE
3167: EQUAL
3168: IFTRUE 3172
3170: GO 3376
3172: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3173: LD_ADDR_VAR 0 2
3177: PUSH
3178: LD_INT 2
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: LD_INT 4
3186: PUSH
3187: LD_INT 5
3189: PUSH
3190: LD_INT 6
3192: PUSH
3193: LD_INT 7
3195: PUSH
3196: LD_INT 8
3198: PUSH
3199: LD_INT 9
3201: PUSH
3202: LD_INT 10
3204: PUSH
3205: LD_INT 11
3207: PUSH
3208: LD_INT 12
3210: PUSH
3211: LD_INT 13
3213: PUSH
3214: LD_INT 14
3216: PUSH
3217: LD_INT 15
3219: PUSH
3220: LD_INT 16
3222: PUSH
3223: LD_INT 17
3225: PUSH
3226: LD_INT 18
3228: PUSH
3229: LD_INT 19
3231: PUSH
3232: LD_INT 20
3234: PUSH
3235: LD_INT 21
3237: PUSH
3238: LD_INT 22
3240: PUSH
3241: LD_INT 23
3243: PUSH
3244: LD_INT 24
3246: PUSH
3247: LD_INT 25
3249: PUSH
3250: LD_INT 26
3252: PUSH
3253: LD_INT 28
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 31
3261: PUSH
3262: LD_INT 32
3264: PUSH
3265: LD_INT 34
3267: PUSH
3268: LD_INT 36
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 101
3306: PUSH
3307: LD_INT 102
3309: PUSH
3310: LD_INT 103
3312: PUSH
3313: LD_INT 104
3315: PUSH
3316: LD_INT 105
3318: PUSH
3319: LD_INT 106
3321: PUSH
3322: LD_INT 107
3324: PUSH
3325: LD_INT 108
3327: PUSH
3328: LD_INT 109
3330: PUSH
3331: LD_INT 110
3333: PUSH
3334: LD_INT 111
3336: PUSH
3337: LD_INT 112
3339: PUSH
3340: LD_INT 114
3342: PUSH
3343: LD_INT 116
3345: PUSH
3346: LD_INT 117
3348: PUSH
3349: LD_INT 118
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: ST_TO_ADDR
3374: GO 5057
3376: LD_INT 12
3378: DOUBLE
3379: EQUAL
3380: IFTRUE 3384
3382: GO 3604
3384: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_INT 1
3392: PUSH
3393: LD_INT 2
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: LD_INT 4
3401: PUSH
3402: LD_INT 5
3404: PUSH
3405: LD_INT 6
3407: PUSH
3408: LD_INT 7
3410: PUSH
3411: LD_INT 8
3413: PUSH
3414: LD_INT 9
3416: PUSH
3417: LD_INT 10
3419: PUSH
3420: LD_INT 11
3422: PUSH
3423: LD_INT 12
3425: PUSH
3426: LD_INT 13
3428: PUSH
3429: LD_INT 14
3431: PUSH
3432: LD_INT 15
3434: PUSH
3435: LD_INT 16
3437: PUSH
3438: LD_INT 17
3440: PUSH
3441: LD_INT 18
3443: PUSH
3444: LD_INT 19
3446: PUSH
3447: LD_INT 20
3449: PUSH
3450: LD_INT 21
3452: PUSH
3453: LD_INT 22
3455: PUSH
3456: LD_INT 23
3458: PUSH
3459: LD_INT 24
3461: PUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 26
3467: PUSH
3468: LD_INT 27
3470: PUSH
3471: LD_INT 28
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 31
3479: PUSH
3480: LD_INT 32
3482: PUSH
3483: LD_INT 33
3485: PUSH
3486: LD_INT 34
3488: PUSH
3489: LD_INT 36
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: LD_INT 101
3530: PUSH
3531: LD_INT 102
3533: PUSH
3534: LD_INT 103
3536: PUSH
3537: LD_INT 104
3539: PUSH
3540: LD_INT 105
3542: PUSH
3543: LD_INT 106
3545: PUSH
3546: LD_INT 107
3548: PUSH
3549: LD_INT 108
3551: PUSH
3552: LD_INT 109
3554: PUSH
3555: LD_INT 110
3557: PUSH
3558: LD_INT 111
3560: PUSH
3561: LD_INT 112
3563: PUSH
3564: LD_INT 113
3566: PUSH
3567: LD_INT 114
3569: PUSH
3570: LD_INT 116
3572: PUSH
3573: LD_INT 117
3575: PUSH
3576: LD_INT 118
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: ST_TO_ADDR
3602: GO 5057
3604: LD_INT 13
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3612
3610: GO 3820
3612: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: LD_INT 1
3620: PUSH
3621: LD_INT 2
3623: PUSH
3624: LD_INT 3
3626: PUSH
3627: LD_INT 4
3629: PUSH
3630: LD_INT 5
3632: PUSH
3633: LD_INT 8
3635: PUSH
3636: LD_INT 9
3638: PUSH
3639: LD_INT 10
3641: PUSH
3642: LD_INT 11
3644: PUSH
3645: LD_INT 12
3647: PUSH
3648: LD_INT 14
3650: PUSH
3651: LD_INT 15
3653: PUSH
3654: LD_INT 16
3656: PUSH
3657: LD_INT 17
3659: PUSH
3660: LD_INT 18
3662: PUSH
3663: LD_INT 19
3665: PUSH
3666: LD_INT 20
3668: PUSH
3669: LD_INT 21
3671: PUSH
3672: LD_INT 22
3674: PUSH
3675: LD_INT 23
3677: PUSH
3678: LD_INT 24
3680: PUSH
3681: LD_INT 25
3683: PUSH
3684: LD_INT 26
3686: PUSH
3687: LD_INT 27
3689: PUSH
3690: LD_INT 28
3692: PUSH
3693: LD_INT 30
3695: PUSH
3696: LD_INT 31
3698: PUSH
3699: LD_INT 32
3701: PUSH
3702: LD_INT 33
3704: PUSH
3705: LD_INT 34
3707: PUSH
3708: LD_INT 36
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 101
3746: PUSH
3747: LD_INT 102
3749: PUSH
3750: LD_INT 103
3752: PUSH
3753: LD_INT 104
3755: PUSH
3756: LD_INT 105
3758: PUSH
3759: LD_INT 106
3761: PUSH
3762: LD_INT 107
3764: PUSH
3765: LD_INT 108
3767: PUSH
3768: LD_INT 109
3770: PUSH
3771: LD_INT 110
3773: PUSH
3774: LD_INT 111
3776: PUSH
3777: LD_INT 112
3779: PUSH
3780: LD_INT 113
3782: PUSH
3783: LD_INT 114
3785: PUSH
3786: LD_INT 116
3788: PUSH
3789: LD_INT 117
3791: PUSH
3792: LD_INT 118
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: ST_TO_ADDR
3818: GO 5057
3820: LD_INT 14
3822: DOUBLE
3823: EQUAL
3824: IFTRUE 3828
3826: GO 4052
3828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: LD_INT 1
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 3
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: LD_INT 6
3851: PUSH
3852: LD_INT 7
3854: PUSH
3855: LD_INT 8
3857: PUSH
3858: LD_INT 9
3860: PUSH
3861: LD_INT 10
3863: PUSH
3864: LD_INT 11
3866: PUSH
3867: LD_INT 12
3869: PUSH
3870: LD_INT 13
3872: PUSH
3873: LD_INT 14
3875: PUSH
3876: LD_INT 15
3878: PUSH
3879: LD_INT 16
3881: PUSH
3882: LD_INT 17
3884: PUSH
3885: LD_INT 18
3887: PUSH
3888: LD_INT 19
3890: PUSH
3891: LD_INT 20
3893: PUSH
3894: LD_INT 21
3896: PUSH
3897: LD_INT 22
3899: PUSH
3900: LD_INT 23
3902: PUSH
3903: LD_INT 24
3905: PUSH
3906: LD_INT 25
3908: PUSH
3909: LD_INT 26
3911: PUSH
3912: LD_INT 27
3914: PUSH
3915: LD_INT 28
3917: PUSH
3918: LD_INT 29
3920: PUSH
3921: LD_INT 30
3923: PUSH
3924: LD_INT 31
3926: PUSH
3927: LD_INT 32
3929: PUSH
3930: LD_INT 33
3932: PUSH
3933: LD_INT 34
3935: PUSH
3936: LD_INT 36
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 101
3978: PUSH
3979: LD_INT 102
3981: PUSH
3982: LD_INT 103
3984: PUSH
3985: LD_INT 104
3987: PUSH
3988: LD_INT 105
3990: PUSH
3991: LD_INT 106
3993: PUSH
3994: LD_INT 107
3996: PUSH
3997: LD_INT 108
3999: PUSH
4000: LD_INT 109
4002: PUSH
4003: LD_INT 110
4005: PUSH
4006: LD_INT 111
4008: PUSH
4009: LD_INT 112
4011: PUSH
4012: LD_INT 113
4014: PUSH
4015: LD_INT 114
4017: PUSH
4018: LD_INT 116
4020: PUSH
4021: LD_INT 117
4023: PUSH
4024: LD_INT 118
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: ST_TO_ADDR
4050: GO 5057
4052: LD_INT 15
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4284
4060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4061: LD_ADDR_VAR 0 2
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: LD_INT 2
4071: PUSH
4072: LD_INT 3
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: LD_INT 5
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: LD_INT 7
4086: PUSH
4087: LD_INT 8
4089: PUSH
4090: LD_INT 9
4092: PUSH
4093: LD_INT 10
4095: PUSH
4096: LD_INT 11
4098: PUSH
4099: LD_INT 12
4101: PUSH
4102: LD_INT 13
4104: PUSH
4105: LD_INT 14
4107: PUSH
4108: LD_INT 15
4110: PUSH
4111: LD_INT 16
4113: PUSH
4114: LD_INT 17
4116: PUSH
4117: LD_INT 18
4119: PUSH
4120: LD_INT 19
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 22
4131: PUSH
4132: LD_INT 23
4134: PUSH
4135: LD_INT 24
4137: PUSH
4138: LD_INT 25
4140: PUSH
4141: LD_INT 26
4143: PUSH
4144: LD_INT 27
4146: PUSH
4147: LD_INT 28
4149: PUSH
4150: LD_INT 29
4152: PUSH
4153: LD_INT 30
4155: PUSH
4156: LD_INT 31
4158: PUSH
4159: LD_INT 32
4161: PUSH
4162: LD_INT 33
4164: PUSH
4165: LD_INT 34
4167: PUSH
4168: LD_INT 36
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: PUSH
4208: LD_INT 101
4210: PUSH
4211: LD_INT 102
4213: PUSH
4214: LD_INT 103
4216: PUSH
4217: LD_INT 104
4219: PUSH
4220: LD_INT 105
4222: PUSH
4223: LD_INT 106
4225: PUSH
4226: LD_INT 107
4228: PUSH
4229: LD_INT 108
4231: PUSH
4232: LD_INT 109
4234: PUSH
4235: LD_INT 110
4237: PUSH
4238: LD_INT 111
4240: PUSH
4241: LD_INT 112
4243: PUSH
4244: LD_INT 113
4246: PUSH
4247: LD_INT 114
4249: PUSH
4250: LD_INT 116
4252: PUSH
4253: LD_INT 117
4255: PUSH
4256: LD_INT 118
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: ST_TO_ADDR
4282: GO 5057
4284: LD_INT 16
4286: DOUBLE
4287: EQUAL
4288: IFTRUE 4292
4290: GO 4428
4292: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 4
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 7
4309: PUSH
4310: LD_INT 11
4312: PUSH
4313: LD_INT 12
4315: PUSH
4316: LD_INT 15
4318: PUSH
4319: LD_INT 16
4321: PUSH
4322: LD_INT 20
4324: PUSH
4325: LD_INT 21
4327: PUSH
4328: LD_INT 22
4330: PUSH
4331: LD_INT 23
4333: PUSH
4334: LD_INT 25
4336: PUSH
4337: LD_INT 26
4339: PUSH
4340: LD_INT 30
4342: PUSH
4343: LD_INT 31
4345: PUSH
4346: LD_INT 32
4348: PUSH
4349: LD_INT 33
4351: PUSH
4352: LD_INT 34
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 101
4378: PUSH
4379: LD_INT 102
4381: PUSH
4382: LD_INT 103
4384: PUSH
4385: LD_INT 106
4387: PUSH
4388: LD_INT 108
4390: PUSH
4391: LD_INT 112
4393: PUSH
4394: LD_INT 113
4396: PUSH
4397: LD_INT 114
4399: PUSH
4400: LD_INT 116
4402: PUSH
4403: LD_INT 117
4405: PUSH
4406: LD_INT 118
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: ST_TO_ADDR
4426: GO 5057
4428: LD_INT 17
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4660
4436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 5
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: LD_INT 7
4462: PUSH
4463: LD_INT 8
4465: PUSH
4466: LD_INT 9
4468: PUSH
4469: LD_INT 10
4471: PUSH
4472: LD_INT 11
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: LD_INT 16
4489: PUSH
4490: LD_INT 17
4492: PUSH
4493: LD_INT 18
4495: PUSH
4496: LD_INT 19
4498: PUSH
4499: LD_INT 20
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 23
4510: PUSH
4511: LD_INT 24
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 26
4519: PUSH
4520: LD_INT 27
4522: PUSH
4523: LD_INT 28
4525: PUSH
4526: LD_INT 29
4528: PUSH
4529: LD_INT 30
4531: PUSH
4532: LD_INT 31
4534: PUSH
4535: LD_INT 32
4537: PUSH
4538: LD_INT 33
4540: PUSH
4541: LD_INT 34
4543: PUSH
4544: LD_INT 36
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 101
4586: PUSH
4587: LD_INT 102
4589: PUSH
4590: LD_INT 103
4592: PUSH
4593: LD_INT 104
4595: PUSH
4596: LD_INT 105
4598: PUSH
4599: LD_INT 106
4601: PUSH
4602: LD_INT 107
4604: PUSH
4605: LD_INT 108
4607: PUSH
4608: LD_INT 109
4610: PUSH
4611: LD_INT 110
4613: PUSH
4614: LD_INT 111
4616: PUSH
4617: LD_INT 112
4619: PUSH
4620: LD_INT 113
4622: PUSH
4623: LD_INT 114
4625: PUSH
4626: LD_INT 116
4628: PUSH
4629: LD_INT 117
4631: PUSH
4632: LD_INT 118
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: ST_TO_ADDR
4658: GO 5057
4660: LD_INT 18
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4668
4666: GO 4816
4668: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4669: LD_ADDR_VAR 0 2
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 4
4679: PUSH
4680: LD_INT 5
4682: PUSH
4683: LD_INT 7
4685: PUSH
4686: LD_INT 11
4688: PUSH
4689: LD_INT 12
4691: PUSH
4692: LD_INT 15
4694: PUSH
4695: LD_INT 16
4697: PUSH
4698: LD_INT 20
4700: PUSH
4701: LD_INT 21
4703: PUSH
4704: LD_INT 22
4706: PUSH
4707: LD_INT 23
4709: PUSH
4710: LD_INT 25
4712: PUSH
4713: LD_INT 26
4715: PUSH
4716: LD_INT 30
4718: PUSH
4719: LD_INT 31
4721: PUSH
4722: LD_INT 32
4724: PUSH
4725: LD_INT 33
4727: PUSH
4728: LD_INT 34
4730: PUSH
4731: LD_INT 35
4733: PUSH
4734: LD_INT 36
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 101
4762: PUSH
4763: LD_INT 102
4765: PUSH
4766: LD_INT 103
4768: PUSH
4769: LD_INT 106
4771: PUSH
4772: LD_INT 108
4774: PUSH
4775: LD_INT 112
4777: PUSH
4778: LD_INT 113
4780: PUSH
4781: LD_INT 114
4783: PUSH
4784: LD_INT 115
4786: PUSH
4787: LD_INT 116
4789: PUSH
4790: LD_INT 117
4792: PUSH
4793: LD_INT 118
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: ST_TO_ADDR
4814: GO 5057
4816: LD_INT 19
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4824
4822: GO 5056
4824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4825: LD_ADDR_VAR 0 2
4829: PUSH
4830: LD_INT 1
4832: PUSH
4833: LD_INT 2
4835: PUSH
4836: LD_INT 3
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: LD_INT 5
4844: PUSH
4845: LD_INT 6
4847: PUSH
4848: LD_INT 7
4850: PUSH
4851: LD_INT 8
4853: PUSH
4854: LD_INT 9
4856: PUSH
4857: LD_INT 10
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 12
4865: PUSH
4866: LD_INT 13
4868: PUSH
4869: LD_INT 14
4871: PUSH
4872: LD_INT 15
4874: PUSH
4875: LD_INT 16
4877: PUSH
4878: LD_INT 17
4880: PUSH
4881: LD_INT 18
4883: PUSH
4884: LD_INT 19
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: LD_INT 22
4895: PUSH
4896: LD_INT 23
4898: PUSH
4899: LD_INT 24
4901: PUSH
4902: LD_INT 25
4904: PUSH
4905: LD_INT 26
4907: PUSH
4908: LD_INT 27
4910: PUSH
4911: LD_INT 28
4913: PUSH
4914: LD_INT 29
4916: PUSH
4917: LD_INT 30
4919: PUSH
4920: LD_INT 31
4922: PUSH
4923: LD_INT 32
4925: PUSH
4926: LD_INT 33
4928: PUSH
4929: LD_INT 34
4931: PUSH
4932: LD_INT 35
4934: PUSH
4935: LD_INT 36
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 101
4978: PUSH
4979: LD_INT 102
4981: PUSH
4982: LD_INT 103
4984: PUSH
4985: LD_INT 104
4987: PUSH
4988: LD_INT 105
4990: PUSH
4991: LD_INT 106
4993: PUSH
4994: LD_INT 107
4996: PUSH
4997: LD_INT 108
4999: PUSH
5000: LD_INT 109
5002: PUSH
5003: LD_INT 110
5005: PUSH
5006: LD_INT 111
5008: PUSH
5009: LD_INT 112
5011: PUSH
5012: LD_INT 113
5014: PUSH
5015: LD_INT 114
5017: PUSH
5018: LD_INT 115
5020: PUSH
5021: LD_INT 116
5023: PUSH
5024: LD_INT 117
5026: PUSH
5027: LD_INT 118
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
5054: GO 5057
5056: POP
// end else
5057: GO 5288
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5059: LD_ADDR_VAR 0 2
5063: PUSH
5064: LD_INT 1
5066: PUSH
5067: LD_INT 2
5069: PUSH
5070: LD_INT 3
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 5
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 7
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 9
5090: PUSH
5091: LD_INT 10
5093: PUSH
5094: LD_INT 11
5096: PUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 13
5102: PUSH
5103: LD_INT 14
5105: PUSH
5106: LD_INT 15
5108: PUSH
5109: LD_INT 16
5111: PUSH
5112: LD_INT 17
5114: PUSH
5115: LD_INT 18
5117: PUSH
5118: LD_INT 19
5120: PUSH
5121: LD_INT 20
5123: PUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 22
5129: PUSH
5130: LD_INT 23
5132: PUSH
5133: LD_INT 24
5135: PUSH
5136: LD_INT 25
5138: PUSH
5139: LD_INT 26
5141: PUSH
5142: LD_INT 27
5144: PUSH
5145: LD_INT 28
5147: PUSH
5148: LD_INT 29
5150: PUSH
5151: LD_INT 30
5153: PUSH
5154: LD_INT 31
5156: PUSH
5157: LD_INT 32
5159: PUSH
5160: LD_INT 33
5162: PUSH
5163: LD_INT 34
5165: PUSH
5166: LD_INT 35
5168: PUSH
5169: LD_INT 36
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 101
5212: PUSH
5213: LD_INT 102
5215: PUSH
5216: LD_INT 103
5218: PUSH
5219: LD_INT 104
5221: PUSH
5222: LD_INT 105
5224: PUSH
5225: LD_INT 106
5227: PUSH
5228: LD_INT 107
5230: PUSH
5231: LD_INT 108
5233: PUSH
5234: LD_INT 109
5236: PUSH
5237: LD_INT 110
5239: PUSH
5240: LD_INT 111
5242: PUSH
5243: LD_INT 112
5245: PUSH
5246: LD_INT 113
5248: PUSH
5249: LD_INT 114
5251: PUSH
5252: LD_INT 115
5254: PUSH
5255: LD_INT 116
5257: PUSH
5258: LD_INT 117
5260: PUSH
5261: LD_INT 118
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// if result then
5288: LD_VAR 0 2
5292: IFFALSE 6078
// begin normal :=  ;
5294: LD_ADDR_VAR 0 5
5298: PUSH
5299: LD_STRING 
5301: ST_TO_ADDR
// hardcore :=  ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_STRING 
5309: ST_TO_ADDR
// active :=  ;
5310: LD_ADDR_VAR 0 7
5314: PUSH
5315: LD_STRING 
5317: ST_TO_ADDR
// for i = 1 to normalCounter do
5318: LD_ADDR_VAR 0 8
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_EXP 3
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5435
// begin tmp := 0 ;
5336: LD_ADDR_VAR 0 3
5340: PUSH
5341: LD_STRING 0
5343: ST_TO_ADDR
// if result [ 1 ] then
5344: LD_VAR 0 2
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: IFFALSE 5417
// if result [ 1 ] [ 1 ] = i then
5354: LD_VAR 0 2
5358: PUSH
5359: LD_INT 1
5361: ARRAY
5362: PUSH
5363: LD_INT 1
5365: ARRAY
5366: PUSH
5367: LD_VAR 0 8
5371: EQUAL
5372: IFFALSE 5417
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5374: LD_ADDR_VAR 0 2
5378: PUSH
5379: LD_VAR 0 2
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_VAR 0 2
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 3
5403: PPUSH
5404: CALL_OW 1
5408: ST_TO_ADDR
// tmp := 1 ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: LD_STRING 1
5416: ST_TO_ADDR
// end ; normal := normal & tmp ;
5417: LD_ADDR_VAR 0 5
5421: PUSH
5422: LD_VAR 0 5
5426: PUSH
5427: LD_VAR 0 3
5431: STR
5432: ST_TO_ADDR
// end ;
5433: GO 5333
5435: POP
5436: POP
// for i = 1 to hardcoreCounter do
5437: LD_ADDR_VAR 0 8
5441: PUSH
5442: DOUBLE
5443: LD_INT 1
5445: DEC
5446: ST_TO_ADDR
5447: LD_EXP 4
5451: PUSH
5452: FOR_TO
5453: IFFALSE 5558
// begin tmp := 0 ;
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_STRING 0
5462: ST_TO_ADDR
// if result [ 2 ] then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_INT 2
5470: ARRAY
5471: IFFALSE 5540
// if result [ 2 ] [ 1 ] = 100 + i then
5473: LD_VAR 0 2
5477: PUSH
5478: LD_INT 2
5480: ARRAY
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PUSH
5486: LD_INT 100
5488: PUSH
5489: LD_VAR 0 8
5493: PLUS
5494: EQUAL
5495: IFFALSE 5540
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 2
5509: PPUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 3
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// tmp := 1 ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_STRING 1
5539: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PUSH
5550: LD_VAR 0 3
5554: STR
5555: ST_TO_ADDR
// end ;
5556: GO 5452
5558: POP
5559: POP
// if isGameLoad then
5560: LD_VAR 0 1
5564: IFFALSE 6039
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5566: LD_ADDR_VAR 0 4
5570: PUSH
5571: LD_EXP 7
5575: PUSH
5576: LD_EXP 6
5580: PUSH
5581: LD_EXP 8
5585: PUSH
5586: LD_EXP 5
5590: PUSH
5591: LD_EXP 9
5595: PUSH
5596: LD_EXP 10
5600: PUSH
5601: LD_EXP 11
5605: PUSH
5606: LD_EXP 12
5610: PUSH
5611: LD_EXP 13
5615: PUSH
5616: LD_EXP 14
5620: PUSH
5621: LD_EXP 15
5625: PUSH
5626: LD_EXP 16
5630: PUSH
5631: LD_EXP 17
5635: PUSH
5636: LD_EXP 18
5640: PUSH
5641: LD_EXP 26
5645: PUSH
5646: LD_EXP 27
5650: PUSH
5651: LD_EXP 28
5655: PUSH
5656: LD_EXP 29
5660: PUSH
5661: LD_EXP 31
5665: PUSH
5666: LD_EXP 32
5670: PUSH
5671: LD_EXP 33
5675: PUSH
5676: LD_EXP 36
5680: PUSH
5681: LD_EXP 38
5685: PUSH
5686: LD_EXP 39
5690: PUSH
5691: LD_EXP 40
5695: PUSH
5696: LD_EXP 42
5700: PUSH
5701: LD_EXP 43
5705: PUSH
5706: LD_EXP 46
5710: PUSH
5711: LD_EXP 47
5715: PUSH
5716: LD_EXP 48
5720: PUSH
5721: LD_EXP 49
5725: PUSH
5726: LD_EXP 50
5730: PUSH
5731: LD_EXP 51
5735: PUSH
5736: LD_EXP 52
5740: PUSH
5741: LD_EXP 53
5745: PUSH
5746: LD_EXP 54
5750: PUSH
5751: LD_EXP 19
5755: PUSH
5756: LD_EXP 20
5760: PUSH
5761: LD_EXP 23
5765: PUSH
5766: LD_EXP 24
5770: PUSH
5771: LD_EXP 25
5775: PUSH
5776: LD_EXP 21
5780: PUSH
5781: LD_EXP 22
5785: PUSH
5786: LD_EXP 30
5790: PUSH
5791: LD_EXP 34
5795: PUSH
5796: LD_EXP 35
5800: PUSH
5801: LD_EXP 37
5805: PUSH
5806: LD_EXP 41
5810: PUSH
5811: LD_EXP 44
5815: PUSH
5816: LD_EXP 45
5820: PUSH
5821: LD_EXP 55
5825: PUSH
5826: LD_EXP 56
5830: PUSH
5831: LD_EXP 57
5835: PUSH
5836: LD_EXP 58
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: ST_TO_ADDR
// tmp :=  ;
5897: LD_ADDR_VAR 0 3
5901: PUSH
5902: LD_STRING 
5904: ST_TO_ADDR
// for i = 1 to normalCounter do
5905: LD_ADDR_VAR 0 8
5909: PUSH
5910: DOUBLE
5911: LD_INT 1
5913: DEC
5914: ST_TO_ADDR
5915: LD_EXP 3
5919: PUSH
5920: FOR_TO
5921: IFFALSE 5957
// begin if flags [ i ] then
5923: LD_VAR 0 4
5927: PUSH
5928: LD_VAR 0 8
5932: ARRAY
5933: IFFALSE 5955
// tmp := tmp & i & ; ;
5935: LD_ADDR_VAR 0 3
5939: PUSH
5940: LD_VAR 0 3
5944: PUSH
5945: LD_VAR 0 8
5949: STR
5950: PUSH
5951: LD_STRING ;
5953: STR
5954: ST_TO_ADDR
// end ;
5955: GO 5920
5957: POP
5958: POP
// for i = 1 to hardcoreCounter do
5959: LD_ADDR_VAR 0 8
5963: PUSH
5964: DOUBLE
5965: LD_INT 1
5967: DEC
5968: ST_TO_ADDR
5969: LD_EXP 4
5973: PUSH
5974: FOR_TO
5975: IFFALSE 6021
// begin if flags [ normalCounter + i ] then
5977: LD_VAR 0 4
5981: PUSH
5982: LD_EXP 3
5986: PUSH
5987: LD_VAR 0 8
5991: PLUS
5992: ARRAY
5993: IFFALSE 6019
// tmp := tmp & ( 100 + i ) & ; ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_VAR 0 3
6004: PUSH
6005: LD_INT 100
6007: PUSH
6008: LD_VAR 0 8
6012: PLUS
6013: STR
6014: PUSH
6015: LD_STRING ;
6017: STR
6018: ST_TO_ADDR
// end ;
6019: GO 5974
6021: POP
6022: POP
// if tmp then
6023: LD_VAR 0 3
6027: IFFALSE 6039
// active := tmp ;
6029: LD_ADDR_VAR 0 7
6033: PUSH
6034: LD_VAR 0 3
6038: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6039: LD_STRING getStreamItemsFromMission("
6041: PUSH
6042: LD_VAR 0 5
6046: STR
6047: PUSH
6048: LD_STRING ","
6050: STR
6051: PUSH
6052: LD_VAR 0 6
6056: STR
6057: PUSH
6058: LD_STRING ","
6060: STR
6061: PUSH
6062: LD_VAR 0 7
6066: STR
6067: PUSH
6068: LD_STRING ")
6070: STR
6071: PPUSH
6072: CALL_OW 559
// end else
6076: GO 6085
// ToLua ( getStreamItemsFromMission("","","") ) ;
6078: LD_STRING getStreamItemsFromMission("","","")
6080: PPUSH
6081: CALL_OW 559
// end ;
6085: LD_VAR 0 2
6089: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6090: LD_EXP 2
6094: PUSH
6095: LD_EXP 7
6099: AND
6100: IFFALSE 6224
6102: GO 6104
6104: DISABLE
6105: LD_INT 0
6107: PPUSH
6108: PPUSH
// begin enable ;
6109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: LD_INT 22
6117: PUSH
6118: LD_OWVAR 2
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 2
6129: PUSH
6130: LD_INT 34
6132: PUSH
6133: LD_INT 7
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 34
6142: PUSH
6143: LD_INT 45
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 34
6152: PUSH
6153: LD_INT 28
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 34
6162: PUSH
6163: LD_INT 47
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: ST_TO_ADDR
// if not tmp then
6186: LD_VAR 0 2
6190: NOT
6191: IFFALSE 6195
// exit ;
6193: GO 6224
// for i in tmp do
6195: LD_ADDR_VAR 0 1
6199: PUSH
6200: LD_VAR 0 2
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6222
// begin SetLives ( i , 0 ) ;
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL_OW 234
// end ;
6220: GO 6205
6222: POP
6223: POP
// end ;
6224: PPOPN 2
6226: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6227: LD_EXP 2
6231: PUSH
6232: LD_EXP 8
6236: AND
6237: IFFALSE 6321
6239: GO 6241
6241: DISABLE
6242: LD_INT 0
6244: PPUSH
6245: PPUSH
// begin enable ;
6246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: LD_INT 22
6254: PUSH
6255: LD_OWVAR 2
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 32
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: ST_TO_ADDR
// if not tmp then
6283: LD_VAR 0 2
6287: NOT
6288: IFFALSE 6292
// exit ;
6290: GO 6321
// for i in tmp do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 2
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6319
// begin SetLives ( i , 0 ) ;
6305: LD_VAR 0 1
6309: PPUSH
6310: LD_INT 0
6312: PPUSH
6313: CALL_OW 234
// end ;
6317: GO 6302
6319: POP
6320: POP
// end ;
6321: PPOPN 2
6323: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6324: LD_EXP 2
6328: PUSH
6329: LD_EXP 5
6333: AND
6334: IFFALSE 6427
6336: GO 6338
6338: DISABLE
6339: LD_INT 0
6341: PPUSH
// begin enable ;
6342: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6343: LD_ADDR_VAR 0 1
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_OWVAR 2
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 25
6365: PUSH
6366: LD_INT 5
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 25
6375: PUSH
6376: LD_INT 9
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 25
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PPUSH
6403: CALL_OW 69
6407: PUSH
6408: FOR_IN
6409: IFFALSE 6425
// begin SetClass ( i , 1 ) ;
6411: LD_VAR 0 1
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: CALL_OW 336
// end ;
6423: GO 6408
6425: POP
6426: POP
// end ;
6427: PPOPN 1
6429: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6430: LD_EXP 2
6434: PUSH
6435: LD_EXP 6
6439: AND
6440: PUSH
6441: LD_OWVAR 65
6445: PUSH
6446: LD_INT 7
6448: LESS
6449: AND
6450: IFFALSE 6464
6452: GO 6454
6454: DISABLE
// begin enable ;
6455: ENABLE
// game_speed := 7 ;
6456: LD_ADDR_OWVAR 65
6460: PUSH
6461: LD_INT 7
6463: ST_TO_ADDR
// end ;
6464: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6465: LD_EXP 2
6469: PUSH
6470: LD_EXP 9
6474: AND
6475: IFFALSE 6677
6477: GO 6479
6479: DISABLE
6480: LD_INT 0
6482: PPUSH
6483: PPUSH
6484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6485: LD_ADDR_VAR 0 3
6489: PUSH
6490: LD_INT 81
6492: PUSH
6493: LD_OWVAR 2
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 21
6504: PUSH
6505: LD_INT 1
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: ST_TO_ADDR
// if not tmp then
6521: LD_VAR 0 3
6525: NOT
6526: IFFALSE 6530
// exit ;
6528: GO 6677
// if tmp > 5 then
6530: LD_VAR 0 3
6534: PUSH
6535: LD_INT 5
6537: GREATER
6538: IFFALSE 6550
// k := 5 else
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: LD_INT 5
6547: ST_TO_ADDR
6548: GO 6560
// k := tmp ;
6550: LD_ADDR_VAR 0 2
6554: PUSH
6555: LD_VAR 0 3
6559: ST_TO_ADDR
// for i := 1 to k do
6560: LD_ADDR_VAR 0 1
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_VAR 0 2
6574: PUSH
6575: FOR_TO
6576: IFFALSE 6675
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6578: LD_VAR 0 3
6582: PUSH
6583: LD_VAR 0 1
6587: ARRAY
6588: PPUSH
6589: LD_VAR 0 1
6593: PUSH
6594: LD_INT 4
6596: MOD
6597: PUSH
6598: LD_INT 1
6600: PLUS
6601: PPUSH
6602: CALL_OW 259
6606: PUSH
6607: LD_INT 10
6609: LESS
6610: IFFALSE 6673
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6612: LD_VAR 0 3
6616: PUSH
6617: LD_VAR 0 1
6621: ARRAY
6622: PPUSH
6623: LD_VAR 0 1
6627: PUSH
6628: LD_INT 4
6630: MOD
6631: PUSH
6632: LD_INT 1
6634: PLUS
6635: PPUSH
6636: LD_VAR 0 3
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: LD_VAR 0 1
6651: PUSH
6652: LD_INT 4
6654: MOD
6655: PUSH
6656: LD_INT 1
6658: PLUS
6659: PPUSH
6660: CALL_OW 259
6664: PUSH
6665: LD_INT 1
6667: PLUS
6668: PPUSH
6669: CALL_OW 237
6673: GO 6575
6675: POP
6676: POP
// end ;
6677: PPOPN 3
6679: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6680: LD_EXP 2
6684: PUSH
6685: LD_EXP 10
6689: AND
6690: IFFALSE 6710
6692: GO 6694
6694: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6695: LD_INT 4
6697: PPUSH
6698: LD_OWVAR 2
6702: PPUSH
6703: LD_INT 0
6705: PPUSH
6706: CALL_OW 324
6710: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6711: LD_EXP 2
6715: PUSH
6716: LD_EXP 39
6720: AND
6721: IFFALSE 6741
6723: GO 6725
6725: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6726: LD_INT 19
6728: PPUSH
6729: LD_OWVAR 2
6733: PPUSH
6734: LD_INT 0
6736: PPUSH
6737: CALL_OW 324
6741: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6742: LD_EXP 2
6746: PUSH
6747: LD_EXP 11
6751: AND
6752: IFFALSE 6854
6754: GO 6756
6756: DISABLE
6757: LD_INT 0
6759: PPUSH
6760: PPUSH
// begin enable ;
6761: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_OWVAR 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 34
6784: PUSH
6785: LD_INT 11
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 34
6794: PUSH
6795: LD_INT 30
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: ST_TO_ADDR
// if not tmp then
6816: LD_VAR 0 2
6820: NOT
6821: IFFALSE 6825
// exit ;
6823: GO 6854
// for i in tmp do
6825: LD_ADDR_VAR 0 1
6829: PUSH
6830: LD_VAR 0 2
6834: PUSH
6835: FOR_IN
6836: IFFALSE 6852
// begin SetLives ( i , 0 ) ;
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: GO 6835
6852: POP
6853: POP
// end ;
6854: PPOPN 2
6856: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6857: LD_EXP 2
6861: PUSH
6862: LD_EXP 12
6866: AND
6867: IFFALSE 6887
6869: GO 6871
6871: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6872: LD_INT 32
6874: PPUSH
6875: LD_OWVAR 2
6879: PPUSH
6880: LD_INT 0
6882: PPUSH
6883: CALL_OW 324
6887: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6888: LD_EXP 2
6892: PUSH
6893: LD_EXP 13
6897: AND
6898: IFFALSE 7079
6900: GO 6902
6902: DISABLE
6903: LD_INT 0
6905: PPUSH
6906: PPUSH
6907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6908: LD_ADDR_VAR 0 2
6912: PUSH
6913: LD_INT 22
6915: PUSH
6916: LD_OWVAR 2
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 33
6927: PUSH
6928: LD_INT 3
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: ST_TO_ADDR
// if not tmp then
6944: LD_VAR 0 2
6948: NOT
6949: IFFALSE 6953
// exit ;
6951: GO 7079
// side := 0 ;
6953: LD_ADDR_VAR 0 3
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// for i := 1 to 8 do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_INT 8
6973: PUSH
6974: FOR_TO
6975: IFFALSE 7023
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6977: LD_OWVAR 2
6981: PUSH
6982: LD_VAR 0 1
6986: NONEQUAL
6987: PUSH
6988: LD_OWVAR 2
6992: PPUSH
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 81
7002: PUSH
7003: LD_INT 2
7005: EQUAL
7006: AND
7007: IFFALSE 7021
// begin side := i ;
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_VAR 0 1
7018: ST_TO_ADDR
// break ;
7019: GO 7023
// end ;
7021: GO 6974
7023: POP
7024: POP
// if not side then
7025: LD_VAR 0 3
7029: NOT
7030: IFFALSE 7034
// exit ;
7032: GO 7079
// for i := 1 to tmp do
7034: LD_ADDR_VAR 0 1
7038: PUSH
7039: DOUBLE
7040: LD_INT 1
7042: DEC
7043: ST_TO_ADDR
7044: LD_VAR 0 2
7048: PUSH
7049: FOR_TO
7050: IFFALSE 7077
// if Prob ( 60 ) then
7052: LD_INT 60
7054: PPUSH
7055: CALL_OW 13
7059: IFFALSE 7075
// SetSide ( i , side ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_VAR 0 3
7070: PPUSH
7071: CALL_OW 235
7075: GO 7049
7077: POP
7078: POP
// end ;
7079: PPOPN 3
7081: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7082: LD_EXP 2
7086: PUSH
7087: LD_EXP 15
7091: AND
7092: IFFALSE 7211
7094: GO 7096
7096: DISABLE
7097: LD_INT 0
7099: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7100: LD_ADDR_VAR 0 1
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_OWVAR 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 21
7119: PUSH
7120: LD_INT 1
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 3
7129: PUSH
7130: LD_INT 23
7132: PUSH
7133: LD_INT 0
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 69
7153: PUSH
7154: FOR_IN
7155: IFFALSE 7209
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 257
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: LD_INT 4
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: IN
7185: IFFALSE 7207
// SetClass ( un , rand ( 1 , 4 ) ) ;
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_INT 4
7197: PPUSH
7198: CALL_OW 12
7202: PPUSH
7203: CALL_OW 336
7207: GO 7154
7209: POP
7210: POP
// end ;
7211: PPOPN 1
7213: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7214: LD_EXP 2
7218: PUSH
7219: LD_EXP 14
7223: AND
7224: IFFALSE 7303
7226: GO 7228
7228: DISABLE
7229: LD_INT 0
7231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7232: LD_ADDR_VAR 0 1
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_OWVAR 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 21
7251: PUSH
7252: LD_INT 3
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: ST_TO_ADDR
// if not tmp then
7268: LD_VAR 0 1
7272: NOT
7273: IFFALSE 7277
// exit ;
7275: GO 7303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7277: LD_VAR 0 1
7281: PUSH
7282: LD_INT 1
7284: PPUSH
7285: LD_VAR 0 1
7289: PPUSH
7290: CALL_OW 12
7294: ARRAY
7295: PPUSH
7296: LD_INT 100
7298: PPUSH
7299: CALL_OW 234
// end ;
7303: PPOPN 1
7305: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7306: LD_EXP 2
7310: PUSH
7311: LD_EXP 16
7315: AND
7316: IFFALSE 7414
7318: GO 7320
7320: DISABLE
7321: LD_INT 0
7323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7324: LD_ADDR_VAR 0 1
7328: PUSH
7329: LD_INT 22
7331: PUSH
7332: LD_OWVAR 2
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: ST_TO_ADDR
// if not tmp then
7360: LD_VAR 0 1
7364: NOT
7365: IFFALSE 7369
// exit ;
7367: GO 7414
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7369: LD_VAR 0 1
7373: PUSH
7374: LD_INT 1
7376: PPUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 12
7386: ARRAY
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 4
7393: PPUSH
7394: CALL_OW 12
7398: PPUSH
7399: LD_INT 3000
7401: PPUSH
7402: LD_INT 9000
7404: PPUSH
7405: CALL_OW 12
7409: PPUSH
7410: CALL_OW 492
// end ;
7414: PPOPN 1
7416: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7417: LD_EXP 2
7421: PUSH
7422: LD_EXP 17
7426: AND
7427: IFFALSE 7447
7429: GO 7431
7431: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7432: LD_INT 1
7434: PPUSH
7435: LD_OWVAR 2
7439: PPUSH
7440: LD_INT 0
7442: PPUSH
7443: CALL_OW 324
7447: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7448: LD_EXP 2
7452: PUSH
7453: LD_EXP 18
7457: AND
7458: IFFALSE 7541
7460: GO 7462
7462: DISABLE
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7467: LD_ADDR_VAR 0 2
7471: PUSH
7472: LD_INT 22
7474: PUSH
7475: LD_OWVAR 2
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 21
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 69
7502: ST_TO_ADDR
// if not tmp then
7503: LD_VAR 0 2
7507: NOT
7508: IFFALSE 7512
// exit ;
7510: GO 7541
// for i in tmp do
7512: LD_ADDR_VAR 0 1
7516: PUSH
7517: LD_VAR 0 2
7521: PUSH
7522: FOR_IN
7523: IFFALSE 7539
// SetBLevel ( i , 10 ) ;
7525: LD_VAR 0 1
7529: PPUSH
7530: LD_INT 10
7532: PPUSH
7533: CALL_OW 241
7537: GO 7522
7539: POP
7540: POP
// end ;
7541: PPOPN 2
7543: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7544: LD_EXP 2
7548: PUSH
7549: LD_EXP 19
7553: AND
7554: IFFALSE 7665
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7564: LD_ADDR_VAR 0 3
7568: PUSH
7569: LD_INT 22
7571: PUSH
7572: LD_OWVAR 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 25
7583: PUSH
7584: LD_INT 1
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 69
7599: ST_TO_ADDR
// if not tmp then
7600: LD_VAR 0 3
7604: NOT
7605: IFFALSE 7609
// exit ;
7607: GO 7665
// un := tmp [ rand ( 1 , tmp ) ] ;
7609: LD_ADDR_VAR 0 2
7613: PUSH
7614: LD_VAR 0 3
7618: PUSH
7619: LD_INT 1
7621: PPUSH
7622: LD_VAR 0 3
7626: PPUSH
7627: CALL_OW 12
7631: ARRAY
7632: ST_TO_ADDR
// if Crawls ( un ) then
7633: LD_VAR 0 2
7637: PPUSH
7638: CALL_OW 318
7642: IFFALSE 7653
// ComWalk ( un ) ;
7644: LD_VAR 0 2
7648: PPUSH
7649: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7653: LD_VAR 0 2
7657: PPUSH
7658: LD_INT 5
7660: PPUSH
7661: CALL_OW 336
// end ;
7665: PPOPN 3
7667: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7668: LD_EXP 2
7672: PUSH
7673: LD_EXP 20
7677: AND
7678: PUSH
7679: LD_OWVAR 67
7683: PUSH
7684: LD_INT 4
7686: LESS
7687: AND
7688: IFFALSE 7707
7690: GO 7692
7692: DISABLE
// begin Difficulty := Difficulty + 1 ;
7693: LD_ADDR_OWVAR 67
7697: PUSH
7698: LD_OWVAR 67
7702: PUSH
7703: LD_INT 1
7705: PLUS
7706: ST_TO_ADDR
// end ;
7707: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7708: LD_EXP 2
7712: PUSH
7713: LD_EXP 21
7717: AND
7718: IFFALSE 7821
7720: GO 7722
7722: DISABLE
7723: LD_INT 0
7725: PPUSH
// begin for i := 1 to 5 do
7726: LD_ADDR_VAR 0 1
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_INT 5
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7819
// begin uc_nation := nation_nature ;
7742: LD_ADDR_OWVAR 21
7746: PUSH
7747: LD_INT 0
7749: ST_TO_ADDR
// uc_side := 0 ;
7750: LD_ADDR_OWVAR 20
7754: PUSH
7755: LD_INT 0
7757: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7758: LD_ADDR_OWVAR 29
7762: PUSH
7763: LD_INT 12
7765: PUSH
7766: LD_INT 12
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: ST_TO_ADDR
// hc_agressivity := 20 ;
7773: LD_ADDR_OWVAR 35
7777: PUSH
7778: LD_INT 20
7780: ST_TO_ADDR
// hc_class := class_tiger ;
7781: LD_ADDR_OWVAR 28
7785: PUSH
7786: LD_INT 14
7788: ST_TO_ADDR
// hc_gallery :=  ;
7789: LD_ADDR_OWVAR 33
7793: PUSH
7794: LD_STRING 
7796: ST_TO_ADDR
// hc_name :=  ;
7797: LD_ADDR_OWVAR 26
7801: PUSH
7802: LD_STRING 
7804: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7805: CALL_OW 44
7809: PPUSH
7810: LD_INT 0
7812: PPUSH
7813: CALL_OW 51
// end ;
7817: GO 7739
7819: POP
7820: POP
// end ;
7821: PPOPN 1
7823: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7824: LD_EXP 2
7828: PUSH
7829: LD_EXP 22
7833: AND
7834: IFFALSE 7843
7836: GO 7838
7838: DISABLE
// StreamSibBomb ;
7839: CALL 7844 0 0
7843: END
// export function StreamSibBomb ; var i , x , y ; begin
7844: LD_INT 0
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
// result := false ;
7850: LD_ADDR_VAR 0 1
7854: PUSH
7855: LD_INT 0
7857: ST_TO_ADDR
// for i := 1 to 16 do
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: DOUBLE
7864: LD_INT 1
7866: DEC
7867: ST_TO_ADDR
7868: LD_INT 16
7870: PUSH
7871: FOR_TO
7872: IFFALSE 8071
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 10
7881: PUSH
7882: LD_INT 20
7884: PUSH
7885: LD_INT 30
7887: PUSH
7888: LD_INT 40
7890: PUSH
7891: LD_INT 50
7893: PUSH
7894: LD_INT 60
7896: PUSH
7897: LD_INT 70
7899: PUSH
7900: LD_INT 80
7902: PUSH
7903: LD_INT 90
7905: PUSH
7906: LD_INT 100
7908: PUSH
7909: LD_INT 110
7911: PUSH
7912: LD_INT 120
7914: PUSH
7915: LD_INT 130
7917: PUSH
7918: LD_INT 140
7920: PUSH
7921: LD_INT 150
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 1
7943: PPUSH
7944: LD_INT 15
7946: PPUSH
7947: CALL_OW 12
7951: ARRAY
7952: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7953: LD_ADDR_VAR 0 4
7957: PUSH
7958: LD_INT 10
7960: PUSH
7961: LD_INT 20
7963: PUSH
7964: LD_INT 30
7966: PUSH
7967: LD_INT 40
7969: PUSH
7970: LD_INT 50
7972: PUSH
7973: LD_INT 60
7975: PUSH
7976: LD_INT 70
7978: PUSH
7979: LD_INT 80
7981: PUSH
7982: LD_INT 90
7984: PUSH
7985: LD_INT 100
7987: PUSH
7988: LD_INT 110
7990: PUSH
7991: LD_INT 120
7993: PUSH
7994: LD_INT 130
7996: PUSH
7997: LD_INT 140
7999: PUSH
8000: LD_INT 150
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: LD_INT 1
8022: PPUSH
8023: LD_INT 15
8025: PPUSH
8026: CALL_OW 12
8030: ARRAY
8031: ST_TO_ADDR
// if ValidHex ( x , y ) then
8032: LD_VAR 0 3
8036: PPUSH
8037: LD_VAR 0 4
8041: PPUSH
8042: CALL_OW 488
8046: IFFALSE 8069
// begin result := [ x , y ] ;
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_VAR 0 3
8057: PUSH
8058: LD_VAR 0 4
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: ST_TO_ADDR
// break ;
8067: GO 8071
// end ; end ;
8069: GO 7871
8071: POP
8072: POP
// if result then
8073: LD_VAR 0 1
8077: IFFALSE 8137
// begin ToLua ( playSibBomb() ) ;
8079: LD_STRING playSibBomb()
8081: PPUSH
8082: CALL_OW 559
// wait ( 0 0$14 ) ;
8086: LD_INT 490
8088: PPUSH
8089: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8093: LD_VAR 0 1
8097: PUSH
8098: LD_INT 1
8100: ARRAY
8101: PPUSH
8102: LD_VAR 0 1
8106: PUSH
8107: LD_INT 2
8109: ARRAY
8110: PPUSH
8111: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8115: LD_VAR 0 1
8119: PUSH
8120: LD_INT 1
8122: ARRAY
8123: PPUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 429
// end ; end ;
8137: LD_VAR 0 1
8141: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8142: LD_EXP 2
8146: PUSH
8147: LD_EXP 24
8151: AND
8152: IFFALSE 8164
8154: GO 8156
8156: DISABLE
// YouLost (  ) ;
8157: LD_STRING 
8159: PPUSH
8160: CALL_OW 104
8164: END
// every 0 0$1 trigger StreamModeActive and sFog do
8165: LD_EXP 2
8169: PUSH
8170: LD_EXP 23
8174: AND
8175: IFFALSE 8189
8177: GO 8179
8179: DISABLE
// FogOff ( your_side ) ;
8180: LD_OWVAR 2
8184: PPUSH
8185: CALL_OW 344
8189: END
// every 0 0$1 trigger StreamModeActive and sSun do
8190: LD_EXP 2
8194: PUSH
8195: LD_EXP 25
8199: AND
8200: IFFALSE 8228
8202: GO 8204
8204: DISABLE
// begin solar_recharge_percent := 0 ;
8205: LD_ADDR_OWVAR 79
8209: PUSH
8210: LD_INT 0
8212: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8213: LD_INT 10500
8215: PPUSH
8216: CALL_OW 67
// solar_recharge_percent := 100 ;
8220: LD_ADDR_OWVAR 79
8224: PUSH
8225: LD_INT 100
8227: ST_TO_ADDR
// end ;
8228: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8229: LD_EXP 2
8233: PUSH
8234: LD_EXP 26
8238: AND
8239: IFFALSE 8478
8241: GO 8243
8243: DISABLE
8244: LD_INT 0
8246: PPUSH
8247: PPUSH
8248: PPUSH
// begin tmp := [ ] ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: EMPTY
8255: ST_TO_ADDR
// for i := 1 to 6 do
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: DOUBLE
8262: LD_INT 1
8264: DEC
8265: ST_TO_ADDR
8266: LD_INT 6
8268: PUSH
8269: FOR_TO
8270: IFFALSE 8375
// begin uc_nation := nation_nature ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_INT 0
8279: ST_TO_ADDR
// uc_side := 0 ;
8280: LD_ADDR_OWVAR 20
8284: PUSH
8285: LD_INT 0
8287: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8288: LD_ADDR_OWVAR 29
8292: PUSH
8293: LD_INT 12
8295: PUSH
8296: LD_INT 12
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: ST_TO_ADDR
// hc_agressivity := 20 ;
8303: LD_ADDR_OWVAR 35
8307: PUSH
8308: LD_INT 20
8310: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8311: LD_ADDR_OWVAR 28
8315: PUSH
8316: LD_INT 17
8318: ST_TO_ADDR
// hc_gallery :=  ;
8319: LD_ADDR_OWVAR 33
8323: PUSH
8324: LD_STRING 
8326: ST_TO_ADDR
// hc_name :=  ;
8327: LD_ADDR_OWVAR 26
8331: PUSH
8332: LD_STRING 
8334: ST_TO_ADDR
// un := CreateHuman ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: CALL_OW 44
8344: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8345: LD_VAR 0 2
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 51
// tmp := tmp ^ un ;
8357: LD_ADDR_VAR 0 3
8361: PUSH
8362: LD_VAR 0 3
8366: PUSH
8367: LD_VAR 0 2
8371: ADD
8372: ST_TO_ADDR
// end ;
8373: GO 8269
8375: POP
8376: POP
// repeat wait ( 0 0$1 ) ;
8377: LD_INT 35
8379: PPUSH
8380: CALL_OW 67
// for un in tmp do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: LD_VAR 0 3
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8469
// begin if IsDead ( un ) then
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 301
8406: IFFALSE 8426
// begin tmp := tmp diff un ;
8408: LD_ADDR_VAR 0 3
8412: PUSH
8413: LD_VAR 0 3
8417: PUSH
8418: LD_VAR 0 2
8422: DIFF
8423: ST_TO_ADDR
// continue ;
8424: GO 8394
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_INT 0
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: PPUSH
8453: LD_VAR 0 2
8457: PPUSH
8458: CALL_OW 74
8462: PPUSH
8463: CALL_OW 115
// end ;
8467: GO 8394
8469: POP
8470: POP
// until not tmp ;
8471: LD_VAR 0 3
8475: NOT
8476: IFFALSE 8377
// end ;
8478: PPOPN 3
8480: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8481: LD_EXP 2
8485: PUSH
8486: LD_EXP 27
8490: AND
8491: IFFALSE 8545
8493: GO 8495
8495: DISABLE
// begin ToLua ( displayTroll(); ) ;
8496: LD_STRING displayTroll();
8498: PPUSH
8499: CALL_OW 559
// wait ( 3 3$00 ) ;
8503: LD_INT 6300
8505: PPUSH
8506: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8510: LD_STRING hideTroll();
8512: PPUSH
8513: CALL_OW 559
// wait ( 1 1$00 ) ;
8517: LD_INT 2100
8519: PPUSH
8520: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8524: LD_STRING displayTroll();
8526: PPUSH
8527: CALL_OW 559
// wait ( 1 1$00 ) ;
8531: LD_INT 2100
8533: PPUSH
8534: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8538: LD_STRING hideTroll();
8540: PPUSH
8541: CALL_OW 559
// end ;
8545: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8546: LD_EXP 2
8550: PUSH
8551: LD_EXP 28
8555: AND
8556: IFFALSE 8619
8558: GO 8560
8560: DISABLE
8561: LD_INT 0
8563: PPUSH
// begin p := 0 ;
8564: LD_ADDR_VAR 0 1
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// repeat game_speed := 1 ;
8572: LD_ADDR_OWVAR 65
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8580: LD_INT 35
8582: PPUSH
8583: CALL_OW 67
// p := p + 1 ;
8587: LD_ADDR_VAR 0 1
8591: PUSH
8592: LD_VAR 0 1
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: ST_TO_ADDR
// until p >= 60 ;
8601: LD_VAR 0 1
8605: PUSH
8606: LD_INT 60
8608: GREATEREQUAL
8609: IFFALSE 8572
// game_speed := 4 ;
8611: LD_ADDR_OWVAR 65
8615: PUSH
8616: LD_INT 4
8618: ST_TO_ADDR
// end ;
8619: PPOPN 1
8621: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8622: LD_EXP 2
8626: PUSH
8627: LD_EXP 29
8631: AND
8632: IFFALSE 8778
8634: GO 8636
8636: DISABLE
8637: LD_INT 0
8639: PPUSH
8640: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8641: LD_ADDR_VAR 0 1
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_OWVAR 2
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 30
8663: PUSH
8664: LD_INT 0
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 30
8673: PUSH
8674: LD_INT 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not depot then
8695: LD_VAR 0 1
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8778
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: LD_VAR 0 1
8713: PUSH
8714: LD_INT 1
8716: PPUSH
8717: LD_VAR 0 1
8721: PPUSH
8722: CALL_OW 12
8726: ARRAY
8727: PPUSH
8728: CALL_OW 274
8732: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8733: LD_VAR 0 2
8737: PPUSH
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 0
8743: PPUSH
8744: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8748: LD_VAR 0 2
8752: PPUSH
8753: LD_INT 2
8755: PPUSH
8756: LD_INT 0
8758: PPUSH
8759: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8763: LD_VAR 0 2
8767: PPUSH
8768: LD_INT 3
8770: PPUSH
8771: LD_INT 0
8773: PPUSH
8774: CALL_OW 277
// end ;
8778: PPOPN 2
8780: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8781: LD_EXP 2
8785: PUSH
8786: LD_EXP 30
8790: AND
8791: IFFALSE 8888
8793: GO 8795
8795: DISABLE
8796: LD_INT 0
8798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8799: LD_ADDR_VAR 0 1
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_OWVAR 2
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: LD_INT 23
8831: PUSH
8832: LD_INT 0
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PPUSH
8848: CALL_OW 69
8852: ST_TO_ADDR
// if not tmp then
8853: LD_VAR 0 1
8857: NOT
8858: IFFALSE 8862
// exit ;
8860: GO 8888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8862: LD_VAR 0 1
8866: PUSH
8867: LD_INT 1
8869: PPUSH
8870: LD_VAR 0 1
8874: PPUSH
8875: CALL_OW 12
8879: ARRAY
8880: PPUSH
8881: LD_INT 200
8883: PPUSH
8884: CALL_OW 234
// end ;
8888: PPOPN 1
8890: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8891: LD_EXP 2
8895: PUSH
8896: LD_EXP 31
8900: AND
8901: IFFALSE 8980
8903: GO 8905
8905: DISABLE
8906: LD_INT 0
8908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8909: LD_ADDR_VAR 0 1
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_OWVAR 2
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: ST_TO_ADDR
// if not tmp then
8945: LD_VAR 0 1
8949: NOT
8950: IFFALSE 8954
// exit ;
8952: GO 8980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 1
8966: PPUSH
8967: CALL_OW 12
8971: ARRAY
8972: PPUSH
8973: LD_INT 60
8975: PPUSH
8976: CALL_OW 234
// end ;
8980: PPOPN 1
8982: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8983: LD_EXP 2
8987: PUSH
8988: LD_EXP 32
8992: AND
8993: IFFALSE 9092
8995: GO 8997
8997: DISABLE
8998: LD_INT 0
9000: PPUSH
9001: PPUSH
// begin enable ;
9002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_OWVAR 2
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 61
9022: PUSH
9023: EMPTY
9024: LIST
9025: PUSH
9026: LD_INT 33
9028: PUSH
9029: LD_INT 2
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: ST_TO_ADDR
// if not tmp then
9046: LD_VAR 0 1
9050: NOT
9051: IFFALSE 9055
// exit ;
9053: GO 9092
// for i in tmp do
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_VAR 0 1
9064: PUSH
9065: FOR_IN
9066: IFFALSE 9090
// if IsControledBy ( i ) then
9068: LD_VAR 0 2
9072: PPUSH
9073: CALL_OW 312
9077: IFFALSE 9088
// ComUnlink ( i ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 136
9088: GO 9065
9090: POP
9091: POP
// end ;
9092: PPOPN 2
9094: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9095: LD_EXP 2
9099: PUSH
9100: LD_EXP 33
9104: AND
9105: IFFALSE 9245
9107: GO 9109
9109: DISABLE
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
// begin ToLua ( displayPowell(); ) ;
9114: LD_STRING displayPowell();
9116: PPUSH
9117: CALL_OW 559
// uc_side := 0 ;
9121: LD_ADDR_OWVAR 20
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// uc_nation := 2 ;
9129: LD_ADDR_OWVAR 21
9133: PUSH
9134: LD_INT 2
9136: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9137: LD_ADDR_OWVAR 37
9141: PUSH
9142: LD_INT 14
9144: ST_TO_ADDR
// vc_engine := engine_siberite ;
9145: LD_ADDR_OWVAR 39
9149: PUSH
9150: LD_INT 3
9152: ST_TO_ADDR
// vc_control := control_apeman ;
9153: LD_ADDR_OWVAR 38
9157: PUSH
9158: LD_INT 5
9160: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9161: LD_ADDR_OWVAR 40
9165: PUSH
9166: LD_INT 29
9168: ST_TO_ADDR
// un := CreateVehicle ;
9169: LD_ADDR_VAR 0 2
9173: PUSH
9174: CALL_OW 45
9178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9179: LD_VAR 0 2
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9191: LD_INT 35
9193: PPUSH
9194: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9198: LD_VAR 0 2
9202: PPUSH
9203: LD_INT 22
9205: PUSH
9206: LD_OWVAR 2
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: PPUSH
9220: LD_VAR 0 2
9224: PPUSH
9225: CALL_OW 74
9229: PPUSH
9230: CALL_OW 115
// until IsDead ( un ) ;
9234: LD_VAR 0 2
9238: PPUSH
9239: CALL_OW 301
9243: IFFALSE 9191
// end ;
9245: PPOPN 2
9247: END
// every 0 0$1 trigger StreamModeActive and sStu do
9248: LD_EXP 2
9252: PUSH
9253: LD_EXP 41
9257: AND
9258: IFFALSE 9274
9260: GO 9262
9262: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9263: LD_STRING displayStucuk();
9265: PPUSH
9266: CALL_OW 559
// ResetFog ;
9270: CALL_OW 335
// end ;
9274: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9275: LD_EXP 2
9279: PUSH
9280: LD_EXP 34
9284: AND
9285: IFFALSE 9426
9287: GO 9289
9289: DISABLE
9290: LD_INT 0
9292: PPUSH
9293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9294: LD_ADDR_VAR 0 2
9298: PUSH
9299: LD_INT 22
9301: PUSH
9302: LD_OWVAR 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 21
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 69
9329: ST_TO_ADDR
// if not tmp then
9330: LD_VAR 0 2
9334: NOT
9335: IFFALSE 9339
// exit ;
9337: GO 9426
// un := tmp [ rand ( 1 , tmp ) ] ;
9339: LD_ADDR_VAR 0 1
9343: PUSH
9344: LD_VAR 0 2
9348: PUSH
9349: LD_INT 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PPUSH
9357: CALL_OW 12
9361: ARRAY
9362: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: LD_INT 0
9370: PPUSH
9371: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9375: LD_VAR 0 1
9379: PPUSH
9380: LD_OWVAR 3
9384: PUSH
9385: LD_VAR 0 1
9389: DIFF
9390: PPUSH
9391: LD_VAR 0 1
9395: PPUSH
9396: CALL_OW 74
9400: PPUSH
9401: CALL_OW 115
// wait ( 0 0$20 ) ;
9405: LD_INT 700
9407: PPUSH
9408: CALL_OW 67
// SetSide ( un , your_side ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_OWVAR 2
9421: PPUSH
9422: CALL_OW 235
// end ;
9426: PPOPN 2
9428: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9429: LD_EXP 2
9433: PUSH
9434: LD_EXP 35
9438: AND
9439: IFFALSE 9545
9441: GO 9443
9443: DISABLE
9444: LD_INT 0
9446: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9447: LD_ADDR_VAR 0 1
9451: PUSH
9452: LD_INT 22
9454: PUSH
9455: LD_OWVAR 2
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 30
9469: PUSH
9470: LD_INT 0
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 30
9479: PUSH
9480: LD_INT 1
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PPUSH
9496: CALL_OW 69
9500: ST_TO_ADDR
// if not depot then
9501: LD_VAR 0 1
9505: NOT
9506: IFFALSE 9510
// exit ;
9508: GO 9545
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9510: LD_VAR 0 1
9514: PUSH
9515: LD_INT 1
9517: ARRAY
9518: PPUSH
9519: CALL_OW 250
9523: PPUSH
9524: LD_VAR 0 1
9528: PUSH
9529: LD_INT 1
9531: ARRAY
9532: PPUSH
9533: CALL_OW 251
9537: PPUSH
9538: LD_INT 70
9540: PPUSH
9541: CALL_OW 495
// end ;
9545: PPOPN 1
9547: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9548: LD_EXP 2
9552: PUSH
9553: LD_EXP 36
9557: AND
9558: IFFALSE 9769
9560: GO 9562
9562: DISABLE
9563: LD_INT 0
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9570: LD_ADDR_VAR 0 5
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PPUSH
9601: CALL_OW 69
9605: ST_TO_ADDR
// if not tmp then
9606: LD_VAR 0 5
9610: NOT
9611: IFFALSE 9615
// exit ;
9613: GO 9769
// for i in tmp do
9615: LD_ADDR_VAR 0 1
9619: PUSH
9620: LD_VAR 0 5
9624: PUSH
9625: FOR_IN
9626: IFFALSE 9767
// begin d := rand ( 0 , 5 ) ;
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: LD_INT 0
9635: PPUSH
9636: LD_INT 5
9638: PPUSH
9639: CALL_OW 12
9643: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9644: LD_ADDR_VAR 0 2
9648: PUSH
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 250
9658: PPUSH
9659: LD_VAR 0 4
9663: PPUSH
9664: LD_INT 3
9666: PPUSH
9667: LD_INT 12
9669: PPUSH
9670: CALL_OW 12
9674: PPUSH
9675: CALL_OW 272
9679: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9680: LD_ADDR_VAR 0 3
9684: PUSH
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 251
9694: PPUSH
9695: LD_VAR 0 4
9699: PPUSH
9700: LD_INT 3
9702: PPUSH
9703: LD_INT 12
9705: PPUSH
9706: CALL_OW 12
9710: PPUSH
9711: CALL_OW 273
9715: ST_TO_ADDR
// if ValidHex ( x , y ) then
9716: LD_VAR 0 2
9720: PPUSH
9721: LD_VAR 0 3
9725: PPUSH
9726: CALL_OW 488
9730: IFFALSE 9765
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9732: LD_VAR 0 1
9736: PPUSH
9737: LD_VAR 0 2
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 3
9749: PPUSH
9750: LD_INT 6
9752: PPUSH
9753: CALL_OW 12
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: CALL_OW 483
// end ;
9765: GO 9625
9767: POP
9768: POP
// end ;
9769: PPOPN 5
9771: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9772: LD_EXP 2
9776: PUSH
9777: LD_EXP 37
9781: AND
9782: IFFALSE 9876
9784: GO 9786
9786: DISABLE
9787: LD_INT 0
9789: PPUSH
9790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9791: LD_ADDR_VAR 0 2
9795: PUSH
9796: LD_INT 22
9798: PUSH
9799: LD_OWVAR 2
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 32
9810: PUSH
9811: LD_INT 1
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 2
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 69
9837: ST_TO_ADDR
// if not tmp then
9838: LD_VAR 0 2
9842: NOT
9843: IFFALSE 9847
// exit ;
9845: GO 9876
// for i in tmp do
9847: LD_ADDR_VAR 0 1
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: FOR_IN
9858: IFFALSE 9874
// SetFuel ( i , 0 ) ;
9860: LD_VAR 0 1
9864: PPUSH
9865: LD_INT 0
9867: PPUSH
9868: CALL_OW 240
9872: GO 9857
9874: POP
9875: POP
// end ;
9876: PPOPN 2
9878: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9879: LD_EXP 2
9883: PUSH
9884: LD_EXP 38
9888: AND
9889: IFFALSE 9955
9891: GO 9893
9893: DISABLE
9894: LD_INT 0
9896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9897: LD_ADDR_VAR 0 1
9901: PUSH
9902: LD_INT 22
9904: PUSH
9905: LD_OWVAR 2
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 29
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PPUSH
9928: CALL_OW 69
9932: ST_TO_ADDR
// if not tmp then
9933: LD_VAR 0 1
9937: NOT
9938: IFFALSE 9942
// exit ;
9940: GO 9955
// DestroyUnit ( tmp [ 1 ] ) ;
9942: LD_VAR 0 1
9946: PUSH
9947: LD_INT 1
9949: ARRAY
9950: PPUSH
9951: CALL_OW 65
// end ;
9955: PPOPN 1
9957: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9958: LD_EXP 2
9962: PUSH
9963: LD_EXP 40
9967: AND
9968: IFFALSE 10097
9970: GO 9972
9972: DISABLE
9973: LD_INT 0
9975: PPUSH
// begin uc_side := 0 ;
9976: LD_ADDR_OWVAR 20
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// uc_nation := nation_arabian ;
9984: LD_ADDR_OWVAR 21
9988: PUSH
9989: LD_INT 2
9991: ST_TO_ADDR
// hc_gallery :=  ;
9992: LD_ADDR_OWVAR 33
9996: PUSH
9997: LD_STRING 
9999: ST_TO_ADDR
// hc_name :=  ;
10000: LD_ADDR_OWVAR 26
10004: PUSH
10005: LD_STRING 
10007: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10008: LD_INT 1
10010: PPUSH
10011: LD_INT 11
10013: PPUSH
10014: LD_INT 10
10016: PPUSH
10017: CALL_OW 380
// un := CreateHuman ;
10021: LD_ADDR_VAR 0 1
10025: PUSH
10026: CALL_OW 44
10030: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: LD_INT 1
10038: PPUSH
10039: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10043: LD_INT 35
10045: PPUSH
10046: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10050: LD_VAR 0 1
10054: PPUSH
10055: LD_INT 22
10057: PUSH
10058: LD_OWVAR 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: PPUSH
10072: LD_VAR 0 1
10076: PPUSH
10077: CALL_OW 74
10081: PPUSH
10082: CALL_OW 115
// until IsDead ( un ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 301
10095: IFFALSE 10043
// end ;
10097: PPOPN 1
10099: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10100: LD_EXP 2
10104: PUSH
10105: LD_EXP 42
10109: AND
10110: IFFALSE 10122
10112: GO 10114
10114: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10115: LD_STRING earthquake(getX(game), 0, 32)
10117: PPUSH
10118: CALL_OW 559
10122: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10123: LD_EXP 2
10127: PUSH
10128: LD_EXP 43
10132: AND
10133: IFFALSE 10224
10135: GO 10137
10137: DISABLE
10138: LD_INT 0
10140: PPUSH
// begin enable ;
10141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10142: LD_ADDR_VAR 0 1
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_OWVAR 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 21
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 33
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: PPUSH
10184: CALL_OW 69
10188: ST_TO_ADDR
// if not tmp then
10189: LD_VAR 0 1
10193: NOT
10194: IFFALSE 10198
// exit ;
10196: GO 10224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10198: LD_VAR 0 1
10202: PUSH
10203: LD_INT 1
10205: PPUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 12
10215: ARRAY
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 234
// end ;
10224: PPOPN 1
10226: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10227: LD_EXP 2
10231: PUSH
10232: LD_EXP 44
10236: AND
10237: IFFALSE 10378
10239: GO 10241
10241: DISABLE
10242: LD_INT 0
10244: PPUSH
10245: PPUSH
10246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10247: LD_ADDR_VAR 0 3
10251: PUSH
10252: LD_INT 22
10254: PUSH
10255: LD_OWVAR 2
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 25
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: ST_TO_ADDR
// if not tmp then
10283: LD_VAR 0 3
10287: NOT
10288: IFFALSE 10292
// exit ;
10290: GO 10378
// un := tmp [ rand ( 1 , tmp ) ] ;
10292: LD_ADDR_VAR 0 2
10296: PUSH
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 1
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: CALL_OW 12
10314: ARRAY
10315: ST_TO_ADDR
// if Crawls ( un ) then
10316: LD_VAR 0 2
10320: PPUSH
10321: CALL_OW 318
10325: IFFALSE 10336
// ComWalk ( un ) ;
10327: LD_VAR 0 2
10331: PPUSH
10332: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10336: LD_VAR 0 2
10340: PPUSH
10341: LD_INT 9
10343: PPUSH
10344: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10348: LD_INT 28
10350: PPUSH
10351: LD_OWVAR 2
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10363: LD_INT 29
10365: PPUSH
10366: LD_OWVAR 2
10370: PPUSH
10371: LD_INT 2
10373: PPUSH
10374: CALL_OW 322
// end ;
10378: PPOPN 3
10380: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10381: LD_EXP 2
10385: PUSH
10386: LD_EXP 45
10390: AND
10391: IFFALSE 10502
10393: GO 10395
10395: DISABLE
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10401: LD_ADDR_VAR 0 3
10405: PUSH
10406: LD_INT 22
10408: PUSH
10409: LD_OWVAR 2
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 25
10420: PUSH
10421: LD_INT 1
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PPUSH
10432: CALL_OW 69
10436: ST_TO_ADDR
// if not tmp then
10437: LD_VAR 0 3
10441: NOT
10442: IFFALSE 10446
// exit ;
10444: GO 10502
// un := tmp [ rand ( 1 , tmp ) ] ;
10446: LD_ADDR_VAR 0 2
10450: PUSH
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_VAR 0 3
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: ST_TO_ADDR
// if Crawls ( un ) then
10470: LD_VAR 0 2
10474: PPUSH
10475: CALL_OW 318
10479: IFFALSE 10490
// ComWalk ( un ) ;
10481: LD_VAR 0 2
10485: PPUSH
10486: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10490: LD_VAR 0 2
10494: PPUSH
10495: LD_INT 8
10497: PPUSH
10498: CALL_OW 336
// end ;
10502: PPOPN 3
10504: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10505: LD_EXP 2
10509: PUSH
10510: LD_EXP 46
10514: AND
10515: IFFALSE 10659
10517: GO 10519
10519: DISABLE
10520: LD_INT 0
10522: PPUSH
10523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10524: LD_ADDR_VAR 0 2
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 21
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: LD_INT 34
10556: PUSH
10557: LD_INT 12
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 34
10566: PUSH
10567: LD_INT 51
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 34
10576: PUSH
10577: LD_INT 32
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: ST_TO_ADDR
// if not tmp then
10600: LD_VAR 0 2
10604: NOT
10605: IFFALSE 10609
// exit ;
10607: GO 10659
// for i in tmp do
10609: LD_ADDR_VAR 0 1
10613: PUSH
10614: LD_VAR 0 2
10618: PUSH
10619: FOR_IN
10620: IFFALSE 10657
// if GetCargo ( i , mat_artifact ) = 0 then
10622: LD_VAR 0 1
10626: PPUSH
10627: LD_INT 4
10629: PPUSH
10630: CALL_OW 289
10634: PUSH
10635: LD_INT 0
10637: EQUAL
10638: IFFALSE 10655
// SetCargo ( i , mat_siberit , 100 ) ;
10640: LD_VAR 0 1
10644: PPUSH
10645: LD_INT 3
10647: PPUSH
10648: LD_INT 100
10650: PPUSH
10651: CALL_OW 290
10655: GO 10619
10657: POP
10658: POP
// end ;
10659: PPOPN 2
10661: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10662: LD_EXP 2
10666: PUSH
10667: LD_EXP 47
10671: AND
10672: IFFALSE 10855
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_OWVAR 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL_OW 69
10702: ST_TO_ADDR
// if not tmp then
10703: LD_VAR 0 2
10707: NOT
10708: IFFALSE 10712
// exit ;
10710: GO 10855
// for i := 1 to 2 do
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: DOUBLE
10718: LD_INT 1
10720: DEC
10721: ST_TO_ADDR
10722: LD_INT 2
10724: PUSH
10725: FOR_TO
10726: IFFALSE 10853
// begin uc_side := your_side ;
10728: LD_ADDR_OWVAR 20
10732: PUSH
10733: LD_OWVAR 2
10737: ST_TO_ADDR
// uc_nation := nation_american ;
10738: LD_ADDR_OWVAR 21
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// vc_chassis := us_morphling ;
10746: LD_ADDR_OWVAR 37
10750: PUSH
10751: LD_INT 5
10753: ST_TO_ADDR
// vc_engine := engine_siberite ;
10754: LD_ADDR_OWVAR 39
10758: PUSH
10759: LD_INT 3
10761: ST_TO_ADDR
// vc_control := control_computer ;
10762: LD_ADDR_OWVAR 38
10766: PUSH
10767: LD_INT 3
10769: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10770: LD_ADDR_OWVAR 40
10774: PUSH
10775: LD_INT 10
10777: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10778: LD_VAR 0 2
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PPUSH
10787: CALL_OW 310
10791: NOT
10792: IFFALSE 10839
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10794: CALL_OW 45
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: CALL_OW 250
10812: PPUSH
10813: LD_VAR 0 2
10817: PUSH
10818: LD_INT 1
10820: ARRAY
10821: PPUSH
10822: CALL_OW 251
10826: PPUSH
10827: LD_INT 12
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 50
10837: GO 10851
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10839: CALL_OW 45
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 51
// end ;
10851: GO 10725
10853: POP
10854: POP
// end ;
10855: PPOPN 2
10857: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10858: LD_EXP 2
10862: PUSH
10863: LD_EXP 48
10867: AND
10868: IFFALSE 11090
10870: GO 10872
10872: DISABLE
10873: LD_INT 0
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
10879: PPUSH
10880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10881: LD_ADDR_VAR 0 6
10885: PUSH
10886: LD_INT 22
10888: PUSH
10889: LD_OWVAR 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 21
10900: PUSH
10901: LD_INT 1
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 3
10910: PUSH
10911: LD_INT 23
10913: PUSH
10914: LD_INT 0
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 69
10934: ST_TO_ADDR
// if not tmp then
10935: LD_VAR 0 6
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 11090
// s1 := rand ( 1 , 4 ) ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 1
10951: PPUSH
10952: LD_INT 4
10954: PPUSH
10955: CALL_OW 12
10959: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10960: LD_ADDR_VAR 0 4
10964: PUSH
10965: LD_VAR 0 6
10969: PUSH
10970: LD_INT 1
10972: ARRAY
10973: PPUSH
10974: LD_VAR 0 2
10978: PPUSH
10979: CALL_OW 259
10983: ST_TO_ADDR
// if s1 = 1 then
10984: LD_VAR 0 2
10988: PUSH
10989: LD_INT 1
10991: EQUAL
10992: IFFALSE 11012
// s2 := rand ( 2 , 4 ) else
10994: LD_ADDR_VAR 0 3
10998: PUSH
10999: LD_INT 2
11001: PPUSH
11002: LD_INT 4
11004: PPUSH
11005: CALL_OW 12
11009: ST_TO_ADDR
11010: GO 11020
// s2 := 1 ;
11012: LD_ADDR_VAR 0 3
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11020: LD_ADDR_VAR 0 5
11024: PUSH
11025: LD_VAR 0 6
11029: PUSH
11030: LD_INT 1
11032: ARRAY
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: CALL_OW 259
11043: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11044: LD_VAR 0 6
11048: PUSH
11049: LD_INT 1
11051: ARRAY
11052: PPUSH
11053: LD_VAR 0 2
11057: PPUSH
11058: LD_VAR 0 5
11062: PPUSH
11063: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11067: LD_VAR 0 6
11071: PUSH
11072: LD_INT 1
11074: ARRAY
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_VAR 0 4
11085: PPUSH
11086: CALL_OW 237
// end ;
11090: PPOPN 6
11092: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11093: LD_EXP 2
11097: PUSH
11098: LD_EXP 49
11102: AND
11103: IFFALSE 11182
11105: GO 11107
11107: DISABLE
11108: LD_INT 0
11110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11111: LD_ADDR_VAR 0 1
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_OWVAR 2
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 30
11130: PUSH
11131: LD_INT 3
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 69
11146: ST_TO_ADDR
// if not tmp then
11147: LD_VAR 0 1
11151: NOT
11152: IFFALSE 11156
// exit ;
11154: GO 11182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11156: LD_VAR 0 1
11160: PUSH
11161: LD_INT 1
11163: PPUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 12
11173: ARRAY
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: CALL_OW 234
// end ;
11182: PPOPN 1
11184: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11185: LD_EXP 2
11189: PUSH
11190: LD_EXP 50
11194: AND
11195: IFFALSE 11307
11197: GO 11199
11199: DISABLE
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_OWVAR 2
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: LD_INT 30
11226: PUSH
11227: LD_INT 27
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 30
11236: PUSH
11237: LD_INT 26
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 30
11246: PUSH
11247: LD_INT 28
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PPUSH
11264: CALL_OW 69
11268: ST_TO_ADDR
// if not tmp then
11269: LD_VAR 0 2
11273: NOT
11274: IFFALSE 11278
// exit ;
11276: GO 11307
// for i in tmp do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_VAR 0 2
11287: PUSH
11288: FOR_IN
11289: IFFALSE 11305
// SetLives ( i , 1 ) ;
11291: LD_VAR 0 1
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 234
11303: GO 11288
11305: POP
11306: POP
// end ;
11307: PPOPN 2
11309: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11310: LD_EXP 2
11314: PUSH
11315: LD_EXP 51
11319: AND
11320: IFFALSE 11607
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
11328: PPUSH
11329: PPUSH
// begin i := rand ( 1 , 7 ) ;
11330: LD_ADDR_VAR 0 1
11334: PUSH
11335: LD_INT 1
11337: PPUSH
11338: LD_INT 7
11340: PPUSH
11341: CALL_OW 12
11345: ST_TO_ADDR
// case i of 1 :
11346: LD_VAR 0 1
11350: PUSH
11351: LD_INT 1
11353: DOUBLE
11354: EQUAL
11355: IFTRUE 11359
11357: GO 11369
11359: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11360: LD_STRING earthquake(getX(game), 0, 32)
11362: PPUSH
11363: CALL_OW 559
11367: GO 11607
11369: LD_INT 2
11371: DOUBLE
11372: EQUAL
11373: IFTRUE 11377
11375: GO 11391
11377: POP
// begin ToLua ( displayStucuk(); ) ;
11378: LD_STRING displayStucuk();
11380: PPUSH
11381: CALL_OW 559
// ResetFog ;
11385: CALL_OW 335
// end ; 3 :
11389: GO 11607
11391: LD_INT 3
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11503
11399: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_OWVAR 2
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 25
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 69
11435: ST_TO_ADDR
// if not tmp then
11436: LD_VAR 0 2
11440: NOT
11441: IFFALSE 11445
// exit ;
11443: GO 11607
// un := tmp [ rand ( 1 , tmp ) ] ;
11445: LD_ADDR_VAR 0 3
11449: PUSH
11450: LD_VAR 0 2
11454: PUSH
11455: LD_INT 1
11457: PPUSH
11458: LD_VAR 0 2
11462: PPUSH
11463: CALL_OW 12
11467: ARRAY
11468: ST_TO_ADDR
// if Crawls ( un ) then
11469: LD_VAR 0 3
11473: PPUSH
11474: CALL_OW 318
11478: IFFALSE 11489
// ComWalk ( un ) ;
11480: LD_VAR 0 3
11484: PPUSH
11485: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 8
11496: PPUSH
11497: CALL_OW 336
// end ; 4 :
11501: GO 11607
11503: LD_INT 4
11505: DOUBLE
11506: EQUAL
11507: IFTRUE 11511
11509: GO 11585
11511: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11512: LD_ADDR_VAR 0 2
11516: PUSH
11517: LD_INT 22
11519: PUSH
11520: LD_OWVAR 2
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 29
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 69
11547: ST_TO_ADDR
// if not tmp then
11548: LD_VAR 0 2
11552: NOT
11553: IFFALSE 11557
// exit ;
11555: GO 11607
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11557: LD_VAR 0 2
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11570: LD_VAR 0 2
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PPUSH
11579: CALL_OW 65
// end ; 5 .. 7 :
11583: GO 11607
11585: LD_INT 5
11587: DOUBLE
11588: GREATEREQUAL
11589: IFFALSE 11597
11591: LD_INT 7
11593: DOUBLE
11594: LESSEQUAL
11595: IFTRUE 11599
11597: GO 11606
11599: POP
// StreamSibBomb ; end ;
11600: CALL 7844 0 0
11604: GO 11607
11606: POP
// end ;
11607: PPOPN 3
11609: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11610: LD_EXP 2
11614: PUSH
11615: LD_EXP 52
11619: AND
11620: IFFALSE 11776
11622: GO 11624
11624: DISABLE
11625: LD_INT 0
11627: PPUSH
11628: PPUSH
11629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_INT 81
11637: PUSH
11638: LD_OWVAR 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 2
11649: PUSH
11650: LD_INT 21
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 21
11662: PUSH
11663: LD_INT 2
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 2
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11776
// p := 0 ;
11693: LD_ADDR_VAR 0 3
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11701: LD_INT 35
11703: PPUSH
11704: CALL_OW 67
// p := p + 1 ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_VAR 0 3
11717: PUSH
11718: LD_INT 1
11720: PLUS
11721: ST_TO_ADDR
// for i in tmp do
11722: LD_ADDR_VAR 0 1
11726: PUSH
11727: LD_VAR 0 2
11731: PUSH
11732: FOR_IN
11733: IFFALSE 11764
// if GetLives ( i ) < 1000 then
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 256
11744: PUSH
11745: LD_INT 1000
11747: LESS
11748: IFFALSE 11762
// SetLives ( i , 1000 ) ;
11750: LD_VAR 0 1
11754: PPUSH
11755: LD_INT 1000
11757: PPUSH
11758: CALL_OW 234
11762: GO 11732
11764: POP
11765: POP
// until p > 20 ;
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 20
11773: GREATER
11774: IFFALSE 11701
// end ;
11776: PPOPN 3
11778: END
// every 0 0$1 trigger StreamModeActive and sTime do
11779: LD_EXP 2
11783: PUSH
11784: LD_EXP 53
11788: AND
11789: IFFALSE 11824
11791: GO 11793
11793: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11794: LD_INT 28
11796: PPUSH
11797: LD_OWVAR 2
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11809: LD_INT 30
11811: PPUSH
11812: LD_OWVAR 2
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 322
// end ;
11824: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11825: LD_EXP 2
11829: PUSH
11830: LD_EXP 54
11834: AND
11835: IFFALSE 11956
11837: GO 11839
11839: DISABLE
11840: LD_INT 0
11842: PPUSH
11843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_INT 22
11851: PUSH
11852: LD_OWVAR 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 1
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 3
11873: PUSH
11874: LD_INT 23
11876: PUSH
11877: LD_INT 0
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: ST_TO_ADDR
// if not tmp then
11898: LD_VAR 0 2
11902: NOT
11903: IFFALSE 11907
// exit ;
11905: GO 11956
// for i in tmp do
11907: LD_ADDR_VAR 0 1
11911: PUSH
11912: LD_VAR 0 2
11916: PUSH
11917: FOR_IN
11918: IFFALSE 11954
// begin if Crawls ( i ) then
11920: LD_VAR 0 1
11924: PPUSH
11925: CALL_OW 318
11929: IFFALSE 11940
// ComWalk ( i ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 138
// SetClass ( i , 2 ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_INT 2
11947: PPUSH
11948: CALL_OW 336
// end ;
11952: GO 11917
11954: POP
11955: POP
// end ;
11956: PPOPN 2
11958: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11959: LD_EXP 2
11963: PUSH
11964: LD_EXP 55
11968: AND
11969: IFFALSE 12257
11971: GO 11973
11973: DISABLE
11974: LD_INT 0
11976: PPUSH
11977: PPUSH
11978: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11979: LD_OWVAR 2
11983: PPUSH
11984: LD_INT 9
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11997: LD_INT 9
11999: PPUSH
12000: LD_OWVAR 2
12004: PPUSH
12005: CALL_OW 343
// uc_side := 9 ;
12009: LD_ADDR_OWVAR 20
12013: PUSH
12014: LD_INT 9
12016: ST_TO_ADDR
// uc_nation := 2 ;
12017: LD_ADDR_OWVAR 21
12021: PUSH
12022: LD_INT 2
12024: ST_TO_ADDR
// hc_name := Dark Warrior ;
12025: LD_ADDR_OWVAR 26
12029: PUSH
12030: LD_STRING Dark Warrior
12032: ST_TO_ADDR
// hc_gallery :=  ;
12033: LD_ADDR_OWVAR 33
12037: PUSH
12038: LD_STRING 
12040: ST_TO_ADDR
// hc_noskilllimit := true ;
12041: LD_ADDR_OWVAR 76
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12049: LD_ADDR_OWVAR 31
12053: PUSH
12054: LD_INT 30
12056: PUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 30
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: ST_TO_ADDR
// un := CreateHuman ;
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: CALL_OW 44
12081: ST_TO_ADDR
// hc_noskilllimit := false ;
12082: LD_ADDR_OWVAR 76
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 51
// ToLua ( playRanger() ) ;
12102: LD_STRING playRanger()
12104: PPUSH
12105: CALL_OW 559
// p := 0 ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: LD_INT 0
12116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12117: LD_INT 35
12119: PPUSH
12120: CALL_OW 67
// p := p + 1 ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 2
12133: PUSH
12134: LD_INT 1
12136: PLUS
12137: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12138: LD_VAR 0 3
12142: PPUSH
12143: CALL_OW 256
12147: PUSH
12148: LD_INT 1000
12150: LESS
12151: IFFALSE 12165
// SetLives ( un , 1000 ) ;
12153: LD_VAR 0 3
12157: PPUSH
12158: LD_INT 1000
12160: PPUSH
12161: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_INT 81
12172: PUSH
12173: LD_OWVAR 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 91
12184: PUSH
12185: LD_VAR 0 3
12189: PUSH
12190: LD_INT 30
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 69
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: CALL_OW 74
12216: PPUSH
12217: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12221: LD_VAR 0 2
12225: PUSH
12226: LD_INT 80
12228: GREATER
12229: PUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: CALL_OW 301
12239: OR
12240: IFFALSE 12117
// if un then
12242: LD_VAR 0 3
12246: IFFALSE 12257
// RemoveUnit ( un ) ;
12248: LD_VAR 0 3
12252: PPUSH
12253: CALL_OW 64
// end ;
12257: PPOPN 3
12259: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12260: LD_EXP 56
12264: IFFALSE 12380
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
12272: PPUSH
12273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: LD_INT 81
12281: PUSH
12282: LD_OWVAR 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 21
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12310: LD_STRING playComputer()
12312: PPUSH
12313: CALL_OW 559
// if not tmp then
12317: LD_VAR 0 2
12321: NOT
12322: IFFALSE 12326
// exit ;
12324: GO 12380
// for i in tmp do
12326: LD_ADDR_VAR 0 1
12330: PUSH
12331: LD_VAR 0 2
12335: PUSH
12336: FOR_IN
12337: IFFALSE 12378
// for j := 1 to 4 do
12339: LD_ADDR_VAR 0 3
12343: PUSH
12344: DOUBLE
12345: LD_INT 1
12347: DEC
12348: ST_TO_ADDR
12349: LD_INT 4
12351: PUSH
12352: FOR_TO
12353: IFFALSE 12374
// SetSkill ( i , j , 10 ) ;
12355: LD_VAR 0 1
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 10
12367: PPUSH
12368: CALL_OW 237
12372: GO 12352
12374: POP
12375: POP
12376: GO 12336
12378: POP
12379: POP
// end ;
12380: PPOPN 3
12382: END
// every 0 0$1 trigger s30 do var i , tmp ;
12383: LD_EXP 57
12387: IFFALSE 12456
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_OWVAR 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PPUSH
12413: CALL_OW 69
12417: ST_TO_ADDR
// if not tmp then
12418: LD_VAR 0 2
12422: NOT
12423: IFFALSE 12427
// exit ;
12425: GO 12456
// for i in tmp do
12427: LD_ADDR_VAR 0 1
12431: PUSH
12432: LD_VAR 0 2
12436: PUSH
12437: FOR_IN
12438: IFFALSE 12454
// SetLives ( i , 300 ) ;
12440: LD_VAR 0 1
12444: PPUSH
12445: LD_INT 300
12447: PPUSH
12448: CALL_OW 234
12452: GO 12437
12454: POP
12455: POP
// end ;
12456: PPOPN 2
12458: END
// every 0 0$1 trigger s60 do var i , tmp ;
12459: LD_EXP 58
12463: IFFALSE 12532
12465: GO 12467
12467: DISABLE
12468: LD_INT 0
12470: PPUSH
12471: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12472: LD_ADDR_VAR 0 2
12476: PUSH
12477: LD_INT 22
12479: PUSH
12480: LD_OWVAR 2
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: ST_TO_ADDR
// if not tmp then
12494: LD_VAR 0 2
12498: NOT
12499: IFFALSE 12503
// exit ;
12501: GO 12532
// for i in tmp do
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: LD_VAR 0 2
12512: PUSH
12513: FOR_IN
12514: IFFALSE 12530
// SetLives ( i , 600 ) ;
12516: LD_VAR 0 1
12520: PPUSH
12521: LD_INT 600
12523: PPUSH
12524: CALL_OW 234
12528: GO 12513
12530: POP
12531: POP
// end ;
12532: PPOPN 2
12534: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12535: LD_INT 0
12537: PPUSH
// case cmd of 301 :
12538: LD_VAR 0 1
12542: PUSH
12543: LD_INT 301
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12583
12551: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12552: LD_VAR 0 6
12556: PPUSH
12557: LD_VAR 0 7
12561: PPUSH
12562: LD_VAR 0 8
12566: PPUSH
12567: LD_VAR 0 4
12571: PPUSH
12572: LD_VAR 0 5
12576: PPUSH
12577: CALL 13792 0 5
12581: GO 12704
12583: LD_INT 302
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 12628
12591: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12592: LD_VAR 0 6
12596: PPUSH
12597: LD_VAR 0 7
12601: PPUSH
12602: LD_VAR 0 8
12606: PPUSH
12607: LD_VAR 0 9
12611: PPUSH
12612: LD_VAR 0 4
12616: PPUSH
12617: LD_VAR 0 5
12621: PPUSH
12622: CALL 13883 0 6
12626: GO 12704
12628: LD_INT 303
12630: DOUBLE
12631: EQUAL
12632: IFTRUE 12636
12634: GO 12673
12636: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12637: LD_VAR 0 6
12641: PPUSH
12642: LD_VAR 0 7
12646: PPUSH
12647: LD_VAR 0 8
12651: PPUSH
12652: LD_VAR 0 9
12656: PPUSH
12657: LD_VAR 0 4
12661: PPUSH
12662: LD_VAR 0 5
12666: PPUSH
12667: CALL 12709 0 6
12671: GO 12704
12673: LD_INT 304
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 12703
12681: POP
// hHackTeleport ( unit , x , y ) ; end ;
12682: LD_VAR 0 2
12686: PPUSH
12687: LD_VAR 0 4
12691: PPUSH
12692: LD_VAR 0 5
12696: PPUSH
12697: CALL 14476 0 3
12701: GO 12704
12703: POP
// end ;
12704: LD_VAR 0 12
12708: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12709: LD_INT 0
12711: PPUSH
12712: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12713: LD_VAR 0 1
12717: PUSH
12718: LD_INT 1
12720: LESS
12721: PUSH
12722: LD_VAR 0 1
12726: PUSH
12727: LD_INT 3
12729: GREATER
12730: OR
12731: PUSH
12732: LD_VAR 0 5
12736: PPUSH
12737: LD_VAR 0 6
12741: PPUSH
12742: CALL_OW 428
12746: OR
12747: IFFALSE 12751
// exit ;
12749: GO 13479
// uc_side := your_side ;
12751: LD_ADDR_OWVAR 20
12755: PUSH
12756: LD_OWVAR 2
12760: ST_TO_ADDR
// uc_nation := nation ;
12761: LD_ADDR_OWVAR 21
12765: PUSH
12766: LD_VAR 0 1
12770: ST_TO_ADDR
// bc_level = 1 ;
12771: LD_ADDR_OWVAR 43
12775: PUSH
12776: LD_INT 1
12778: ST_TO_ADDR
// case btype of 1 :
12779: LD_VAR 0 2
12783: PUSH
12784: LD_INT 1
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12803
12792: POP
// bc_type := b_depot ; 2 :
12793: LD_ADDR_OWVAR 42
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
12801: GO 13423
12803: LD_INT 2
12805: DOUBLE
12806: EQUAL
12807: IFTRUE 12811
12809: GO 12822
12811: POP
// bc_type := b_warehouse ; 3 :
12812: LD_ADDR_OWVAR 42
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
12820: GO 13423
12822: LD_INT 3
12824: DOUBLE
12825: EQUAL
12826: IFTRUE 12830
12828: GO 12841
12830: POP
// bc_type := b_lab ; 4 .. 9 :
12831: LD_ADDR_OWVAR 42
12835: PUSH
12836: LD_INT 6
12838: ST_TO_ADDR
12839: GO 13423
12841: LD_INT 4
12843: DOUBLE
12844: GREATEREQUAL
12845: IFFALSE 12853
12847: LD_INT 9
12849: DOUBLE
12850: LESSEQUAL
12851: IFTRUE 12855
12853: GO 12915
12855: POP
// begin bc_type := b_lab_half ;
12856: LD_ADDR_OWVAR 42
12860: PUSH
12861: LD_INT 7
12863: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12864: LD_ADDR_OWVAR 44
12868: PUSH
12869: LD_INT 10
12871: PUSH
12872: LD_INT 11
12874: PUSH
12875: LD_INT 12
12877: PUSH
12878: LD_INT 15
12880: PUSH
12881: LD_INT 14
12883: PUSH
12884: LD_INT 13
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_VAR 0 2
12899: PUSH
12900: LD_INT 3
12902: MINUS
12903: ARRAY
12904: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
12905: LD_ADDR_OWVAR 45
12909: PUSH
12910: LD_INT 9
12912: ST_TO_ADDR
// end ; 10 .. 13 :
12913: GO 13423
12915: LD_INT 10
12917: DOUBLE
12918: GREATEREQUAL
12919: IFFALSE 12927
12921: LD_INT 13
12923: DOUBLE
12924: LESSEQUAL
12925: IFTRUE 12929
12927: GO 13006
12929: POP
// begin bc_type := b_lab_full ;
12930: LD_ADDR_OWVAR 42
12934: PUSH
12935: LD_INT 8
12937: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12938: LD_ADDR_OWVAR 44
12942: PUSH
12943: LD_INT 10
12945: PUSH
12946: LD_INT 12
12948: PUSH
12949: LD_INT 14
12951: PUSH
12952: LD_INT 13
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: LD_INT 9
12968: MINUS
12969: ARRAY
12970: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12971: LD_ADDR_OWVAR 45
12975: PUSH
12976: LD_INT 11
12978: PUSH
12979: LD_INT 15
12981: PUSH
12982: LD_INT 12
12984: PUSH
12985: LD_INT 15
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: LD_VAR 0 2
12998: PUSH
12999: LD_INT 9
13001: MINUS
13002: ARRAY
13003: ST_TO_ADDR
// end ; 14 :
13004: GO 13423
13006: LD_INT 14
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13025
13014: POP
// bc_type := b_workshop ; 15 :
13015: LD_ADDR_OWVAR 42
13019: PUSH
13020: LD_INT 2
13022: ST_TO_ADDR
13023: GO 13423
13025: LD_INT 15
13027: DOUBLE
13028: EQUAL
13029: IFTRUE 13033
13031: GO 13044
13033: POP
// bc_type := b_factory ; 16 :
13034: LD_ADDR_OWVAR 42
13038: PUSH
13039: LD_INT 3
13041: ST_TO_ADDR
13042: GO 13423
13044: LD_INT 16
13046: DOUBLE
13047: EQUAL
13048: IFTRUE 13052
13050: GO 13063
13052: POP
// bc_type := b_ext_gun ; 17 :
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 17
13060: ST_TO_ADDR
13061: GO 13423
13063: LD_INT 17
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13099
13071: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13072: LD_ADDR_OWVAR 42
13076: PUSH
13077: LD_INT 19
13079: PUSH
13080: LD_INT 23
13082: PUSH
13083: LD_INT 19
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: LD_VAR 0 1
13095: ARRAY
13096: ST_TO_ADDR
13097: GO 13423
13099: LD_INT 18
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13118
13107: POP
// bc_type := b_ext_radar ; 19 :
13108: LD_ADDR_OWVAR 42
13112: PUSH
13113: LD_INT 20
13115: ST_TO_ADDR
13116: GO 13423
13118: LD_INT 19
13120: DOUBLE
13121: EQUAL
13122: IFTRUE 13126
13124: GO 13137
13126: POP
// bc_type := b_ext_radio ; 20 :
13127: LD_ADDR_OWVAR 42
13131: PUSH
13132: LD_INT 22
13134: ST_TO_ADDR
13135: GO 13423
13137: LD_INT 20
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13156
13145: POP
// bc_type := b_ext_siberium ; 21 :
13146: LD_ADDR_OWVAR 42
13150: PUSH
13151: LD_INT 21
13153: ST_TO_ADDR
13154: GO 13423
13156: LD_INT 21
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13164
13162: GO 13175
13164: POP
// bc_type := b_ext_computer ; 22 :
13165: LD_ADDR_OWVAR 42
13169: PUSH
13170: LD_INT 24
13172: ST_TO_ADDR
13173: GO 13423
13175: LD_INT 22
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13194
13183: POP
// bc_type := b_ext_track ; 23 :
13184: LD_ADDR_OWVAR 42
13188: PUSH
13189: LD_INT 16
13191: ST_TO_ADDR
13192: GO 13423
13194: LD_INT 23
13196: DOUBLE
13197: EQUAL
13198: IFTRUE 13202
13200: GO 13213
13202: POP
// bc_type := b_ext_laser ; 24 :
13203: LD_ADDR_OWVAR 42
13207: PUSH
13208: LD_INT 25
13210: ST_TO_ADDR
13211: GO 13423
13213: LD_INT 24
13215: DOUBLE
13216: EQUAL
13217: IFTRUE 13221
13219: GO 13232
13221: POP
// bc_type := b_control_tower ; 25 :
13222: LD_ADDR_OWVAR 42
13226: PUSH
13227: LD_INT 36
13229: ST_TO_ADDR
13230: GO 13423
13232: LD_INT 25
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13251
13240: POP
// bc_type := b_breastwork ; 26 :
13241: LD_ADDR_OWVAR 42
13245: PUSH
13246: LD_INT 31
13248: ST_TO_ADDR
13249: GO 13423
13251: LD_INT 26
13253: DOUBLE
13254: EQUAL
13255: IFTRUE 13259
13257: GO 13270
13259: POP
// bc_type := b_bunker ; 27 :
13260: LD_ADDR_OWVAR 42
13264: PUSH
13265: LD_INT 32
13267: ST_TO_ADDR
13268: GO 13423
13270: LD_INT 27
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13289
13278: POP
// bc_type := b_turret ; 28 :
13279: LD_ADDR_OWVAR 42
13283: PUSH
13284: LD_INT 33
13286: ST_TO_ADDR
13287: GO 13423
13289: LD_INT 28
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13308
13297: POP
// bc_type := b_armoury ; 29 :
13298: LD_ADDR_OWVAR 42
13302: PUSH
13303: LD_INT 4
13305: ST_TO_ADDR
13306: GO 13423
13308: LD_INT 29
13310: DOUBLE
13311: EQUAL
13312: IFTRUE 13316
13314: GO 13327
13316: POP
// bc_type := b_barracks ; 30 :
13317: LD_ADDR_OWVAR 42
13321: PUSH
13322: LD_INT 5
13324: ST_TO_ADDR
13325: GO 13423
13327: LD_INT 30
13329: DOUBLE
13330: EQUAL
13331: IFTRUE 13335
13333: GO 13346
13335: POP
// bc_type := b_solar_power ; 31 :
13336: LD_ADDR_OWVAR 42
13340: PUSH
13341: LD_INT 27
13343: ST_TO_ADDR
13344: GO 13423
13346: LD_INT 31
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13365
13354: POP
// bc_type := b_oil_power ; 32 :
13355: LD_ADDR_OWVAR 42
13359: PUSH
13360: LD_INT 26
13362: ST_TO_ADDR
13363: GO 13423
13365: LD_INT 32
13367: DOUBLE
13368: EQUAL
13369: IFTRUE 13373
13371: GO 13384
13373: POP
// bc_type := b_siberite_power ; 33 :
13374: LD_ADDR_OWVAR 42
13378: PUSH
13379: LD_INT 28
13381: ST_TO_ADDR
13382: GO 13423
13384: LD_INT 33
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13392
13390: GO 13403
13392: POP
// bc_type := b_oil_mine ; 34 :
13393: LD_ADDR_OWVAR 42
13397: PUSH
13398: LD_INT 29
13400: ST_TO_ADDR
13401: GO 13423
13403: LD_INT 34
13405: DOUBLE
13406: EQUAL
13407: IFTRUE 13411
13409: GO 13422
13411: POP
// bc_type := b_siberite_mine ; end ;
13412: LD_ADDR_OWVAR 42
13416: PUSH
13417: LD_INT 30
13419: ST_TO_ADDR
13420: GO 13423
13422: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13423: LD_ADDR_VAR 0 8
13427: PUSH
13428: LD_VAR 0 5
13432: PPUSH
13433: LD_VAR 0 6
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: CALL_OW 47
13447: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13448: LD_OWVAR 42
13452: PUSH
13453: LD_INT 32
13455: PUSH
13456: LD_INT 33
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: IN
13463: IFFALSE 13479
// PlaceWeaponTurret ( b , weapon ) ;
13465: LD_VAR 0 8
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL_OW 431
// end ;
13479: LD_VAR 0 7
13483: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13484: LD_INT 0
13486: PPUSH
13487: PPUSH
13488: PPUSH
13489: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13490: LD_ADDR_VAR 0 4
13494: PUSH
13495: LD_INT 22
13497: PUSH
13498: LD_OWVAR 2
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 2
13509: PUSH
13510: LD_INT 30
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 30
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: ST_TO_ADDR
// if not tmp then
13544: LD_VAR 0 4
13548: NOT
13549: IFFALSE 13553
// exit ;
13551: GO 13612
// for i in tmp do
13553: LD_ADDR_VAR 0 2
13557: PUSH
13558: LD_VAR 0 4
13562: PUSH
13563: FOR_IN
13564: IFFALSE 13610
// for j = 1 to 3 do
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: DOUBLE
13572: LD_INT 1
13574: DEC
13575: ST_TO_ADDR
13576: LD_INT 3
13578: PUSH
13579: FOR_TO
13580: IFFALSE 13606
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13582: LD_VAR 0 2
13586: PPUSH
13587: CALL_OW 274
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 99999
13599: PPUSH
13600: CALL_OW 277
13604: GO 13579
13606: POP
13607: POP
13608: GO 13563
13610: POP
13611: POP
// end ;
13612: LD_VAR 0 1
13616: RET
// export function hHackSetLevel10 ; var i , j ; begin
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
13621: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13622: LD_ADDR_VAR 0 2
13626: PUSH
13627: LD_INT 21
13629: PUSH
13630: LD_INT 1
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PPUSH
13637: CALL_OW 69
13641: PUSH
13642: FOR_IN
13643: IFFALSE 13695
// if IsSelected ( i ) then
13645: LD_VAR 0 2
13649: PPUSH
13650: CALL_OW 306
13654: IFFALSE 13693
// begin for j := 1 to 4 do
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: DOUBLE
13662: LD_INT 1
13664: DEC
13665: ST_TO_ADDR
13666: LD_INT 4
13668: PUSH
13669: FOR_TO
13670: IFFALSE 13691
// SetSkill ( i , j , 10 ) ;
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: LD_INT 10
13684: PPUSH
13685: CALL_OW 237
13689: GO 13669
13691: POP
13692: POP
// end ;
13693: GO 13642
13695: POP
13696: POP
// end ;
13697: LD_VAR 0 1
13701: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_OWVAR 2
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 21
13726: PUSH
13727: LD_INT 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 69
13742: PUSH
13743: FOR_IN
13744: IFFALSE 13785
// begin for j := 1 to 4 do
13746: LD_ADDR_VAR 0 3
13750: PUSH
13751: DOUBLE
13752: LD_INT 1
13754: DEC
13755: ST_TO_ADDR
13756: LD_INT 4
13758: PUSH
13759: FOR_TO
13760: IFFALSE 13781
// SetSkill ( i , j , 10 ) ;
13762: LD_VAR 0 2
13766: PPUSH
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 10
13774: PPUSH
13775: CALL_OW 237
13779: GO 13759
13781: POP
13782: POP
// end ;
13783: GO 13743
13785: POP
13786: POP
// end ;
13787: LD_VAR 0 1
13791: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13792: LD_INT 0
13794: PPUSH
// uc_side := your_side ;
13795: LD_ADDR_OWVAR 20
13799: PUSH
13800: LD_OWVAR 2
13804: ST_TO_ADDR
// uc_nation := nation ;
13805: LD_ADDR_OWVAR 21
13809: PUSH
13810: LD_VAR 0 1
13814: ST_TO_ADDR
// InitHc ;
13815: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13819: LD_INT 0
13821: PPUSH
13822: LD_VAR 0 2
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13836: LD_VAR 0 4
13840: PPUSH
13841: LD_VAR 0 5
13845: PPUSH
13846: CALL_OW 428
13850: PUSH
13851: LD_INT 0
13853: EQUAL
13854: IFFALSE 13878
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13856: CALL_OW 44
13860: PPUSH
13861: LD_VAR 0 4
13865: PPUSH
13866: LD_VAR 0 5
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 48
// end ;
13878: LD_VAR 0 6
13882: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13883: LD_INT 0
13885: PPUSH
13886: PPUSH
// uc_side := your_side ;
13887: LD_ADDR_OWVAR 20
13891: PUSH
13892: LD_OWVAR 2
13896: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13897: LD_VAR 0 1
13901: PUSH
13902: LD_INT 1
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: LD_INT 3
13910: PUSH
13911: LD_INT 4
13913: PUSH
13914: LD_INT 5
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: IN
13924: IFFALSE 13936
// uc_nation := nation_american else
13926: LD_ADDR_OWVAR 21
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
13934: GO 13979
// if chassis in [ 11 , 12 , 13 , 14 ] then
13936: LD_VAR 0 1
13940: PUSH
13941: LD_INT 11
13943: PUSH
13944: LD_INT 12
13946: PUSH
13947: LD_INT 13
13949: PUSH
13950: LD_INT 14
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: IN
13959: IFFALSE 13971
// uc_nation := nation_arabian else
13961: LD_ADDR_OWVAR 21
13965: PUSH
13966: LD_INT 2
13968: ST_TO_ADDR
13969: GO 13979
// uc_nation := nation_russian ;
13971: LD_ADDR_OWVAR 21
13975: PUSH
13976: LD_INT 3
13978: ST_TO_ADDR
// vc_chassis := chassis ;
13979: LD_ADDR_OWVAR 37
13983: PUSH
13984: LD_VAR 0 1
13988: ST_TO_ADDR
// vc_engine := engine ;
13989: LD_ADDR_OWVAR 39
13993: PUSH
13994: LD_VAR 0 2
13998: ST_TO_ADDR
// vc_control := control ;
13999: LD_ADDR_OWVAR 38
14003: PUSH
14004: LD_VAR 0 3
14008: ST_TO_ADDR
// vc_weapon := weapon ;
14009: LD_ADDR_OWVAR 40
14013: PUSH
14014: LD_VAR 0 4
14018: ST_TO_ADDR
// un := CreateVehicle ;
14019: LD_ADDR_VAR 0 8
14023: PUSH
14024: CALL_OW 45
14028: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14029: LD_VAR 0 8
14033: PPUSH
14034: LD_INT 0
14036: PPUSH
14037: LD_INT 5
14039: PPUSH
14040: CALL_OW 12
14044: PPUSH
14045: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14049: LD_VAR 0 8
14053: PPUSH
14054: LD_VAR 0 5
14058: PPUSH
14059: LD_VAR 0 6
14063: PPUSH
14064: LD_INT 1
14066: PPUSH
14067: CALL_OW 48
// end ;
14071: LD_VAR 0 7
14075: RET
// export hInvincible ; every 1 do
14076: GO 14078
14078: DISABLE
// hInvincible := [ ] ;
14079: LD_ADDR_EXP 59
14083: PUSH
14084: EMPTY
14085: ST_TO_ADDR
14086: END
// every 10 do var i ;
14087: GO 14089
14089: DISABLE
14090: LD_INT 0
14092: PPUSH
// begin enable ;
14093: ENABLE
// if not hInvincible then
14094: LD_EXP 59
14098: NOT
14099: IFFALSE 14103
// exit ;
14101: GO 14147
// for i in hInvincible do
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_EXP 59
14112: PUSH
14113: FOR_IN
14114: IFFALSE 14145
// if GetLives ( i ) < 1000 then
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 256
14125: PUSH
14126: LD_INT 1000
14128: LESS
14129: IFFALSE 14143
// SetLives ( i , 1000 ) ;
14131: LD_VAR 0 1
14135: PPUSH
14136: LD_INT 1000
14138: PPUSH
14139: CALL_OW 234
14143: GO 14113
14145: POP
14146: POP
// end ;
14147: PPOPN 1
14149: END
// export function hHackInvincible ; var i ; begin
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 21
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 21
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: PUSH
14192: FOR_IN
14193: IFFALSE 14254
// if IsSelected ( i ) then
14195: LD_VAR 0 2
14199: PPUSH
14200: CALL_OW 306
14204: IFFALSE 14252
// begin if i in hInvincible then
14206: LD_VAR 0 2
14210: PUSH
14211: LD_EXP 59
14215: IN
14216: IFFALSE 14236
// hInvincible := hInvincible diff i else
14218: LD_ADDR_EXP 59
14222: PUSH
14223: LD_EXP 59
14227: PUSH
14228: LD_VAR 0 2
14232: DIFF
14233: ST_TO_ADDR
14234: GO 14252
// hInvincible := hInvincible union i ;
14236: LD_ADDR_EXP 59
14240: PUSH
14241: LD_EXP 59
14245: PUSH
14246: LD_VAR 0 2
14250: UNION
14251: ST_TO_ADDR
// end ;
14252: GO 14192
14254: POP
14255: POP
// end ;
14256: LD_VAR 0 1
14260: RET
// export function hHackInvisible ; var i , j ; begin
14261: LD_INT 0
14263: PPUSH
14264: PPUSH
14265: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: LD_INT 21
14273: PUSH
14274: LD_INT 1
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: PUSH
14286: FOR_IN
14287: IFFALSE 14311
// if IsSelected ( i ) then
14289: LD_VAR 0 2
14293: PPUSH
14294: CALL_OW 306
14298: IFFALSE 14309
// ComForceInvisible ( i ) ;
14300: LD_VAR 0 2
14304: PPUSH
14305: CALL_OW 496
14309: GO 14286
14311: POP
14312: POP
// end ;
14313: LD_VAR 0 1
14317: RET
// export function hHackChangeYourSide ; begin
14318: LD_INT 0
14320: PPUSH
// if your_side = 8 then
14321: LD_OWVAR 2
14325: PUSH
14326: LD_INT 8
14328: EQUAL
14329: IFFALSE 14341
// your_side := 0 else
14331: LD_ADDR_OWVAR 2
14335: PUSH
14336: LD_INT 0
14338: ST_TO_ADDR
14339: GO 14355
// your_side := your_side + 1 ;
14341: LD_ADDR_OWVAR 2
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: LD_INT 1
14353: PLUS
14354: ST_TO_ADDR
// end ;
14355: LD_VAR 0 1
14359: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14360: LD_INT 0
14362: PPUSH
14363: PPUSH
14364: PPUSH
// for i in all_units do
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: LD_OWVAR 3
14374: PUSH
14375: FOR_IN
14376: IFFALSE 14454
// if IsSelected ( i ) then
14378: LD_VAR 0 2
14382: PPUSH
14383: CALL_OW 306
14387: IFFALSE 14452
// begin j := GetSide ( i ) ;
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_VAR 0 2
14398: PPUSH
14399: CALL_OW 255
14403: ST_TO_ADDR
// if j = 8 then
14404: LD_VAR 0 3
14408: PUSH
14409: LD_INT 8
14411: EQUAL
14412: IFFALSE 14424
// j := 0 else
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 0
14421: ST_TO_ADDR
14422: GO 14438
// j := j + 1 ;
14424: LD_ADDR_VAR 0 3
14428: PUSH
14429: LD_VAR 0 3
14433: PUSH
14434: LD_INT 1
14436: PLUS
14437: ST_TO_ADDR
// SetSide ( i , j ) ;
14438: LD_VAR 0 2
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: CALL_OW 235
// end ;
14452: GO 14375
14454: POP
14455: POP
// end ;
14456: LD_VAR 0 1
14460: RET
// export function hHackFog ; begin
14461: LD_INT 0
14463: PPUSH
// FogOff ( true ) ;
14464: LD_INT 1
14466: PPUSH
14467: CALL_OW 344
// end ;
14471: LD_VAR 0 1
14475: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14476: LD_INT 0
14478: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14479: LD_VAR 0 1
14483: PPUSH
14484: LD_VAR 0 2
14488: PPUSH
14489: LD_VAR 0 3
14493: PPUSH
14494: LD_INT 1
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 483
// CenterOnXY ( x , y ) ;
14504: LD_VAR 0 2
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: CALL_OW 84
// end ;
14518: LD_VAR 0 4
14522: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14527: LD_VAR 0 1
14531: NOT
14532: PUSH
14533: LD_VAR 0 2
14537: PPUSH
14538: LD_VAR 0 3
14542: PPUSH
14543: CALL_OW 488
14547: NOT
14548: OR
14549: PUSH
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL_OW 266
14559: PUSH
14560: LD_INT 3
14562: NONEQUAL
14563: PUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 247
14573: PUSH
14574: LD_INT 1
14576: EQUAL
14577: NOT
14578: AND
14579: OR
14580: IFFALSE 14584
// exit ;
14582: GO 14733
// if GetType ( factory ) = unit_human then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 247
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: IFFALSE 14614
// factory := IsInUnit ( factory ) ;
14599: LD_ADDR_VAR 0 1
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 310
14613: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 3
14626: NONEQUAL
14627: IFFALSE 14631
// exit ;
14629: GO 14733
// if HexInfo ( x , y ) = factory then
14631: LD_VAR 0 2
14635: PPUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: CALL_OW 428
14645: PUSH
14646: LD_VAR 0 1
14650: EQUAL
14651: IFFALSE 14678
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14653: LD_ADDR_EXP 60
14657: PUSH
14658: LD_EXP 60
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 1
14675: ST_TO_ADDR
14676: GO 14729
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14678: LD_ADDR_EXP 60
14682: PUSH
14683: LD_EXP 60
14687: PPUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 255
14702: PUSH
14703: LD_VAR 0 1
14707: PUSH
14708: LD_VAR 0 2
14712: PUSH
14713: LD_VAR 0 3
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 1
14728: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14729: CALL 14738 0 0
// end ;
14733: LD_VAR 0 4
14737: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14738: LD_INT 0
14740: PPUSH
14741: PPUSH
14742: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14743: LD_STRING resetFactoryWaypoint();
14745: PPUSH
14746: CALL_OW 559
// if factoryWaypoints then
14750: LD_EXP 60
14754: IFFALSE 14880
// begin list := PrepareArray ( factoryWaypoints ) ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_EXP 60
14765: PPUSH
14766: CALL 62340 0 1
14770: ST_TO_ADDR
// for i := 1 to list do
14771: LD_ADDR_VAR 0 2
14775: PUSH
14776: DOUBLE
14777: LD_INT 1
14779: DEC
14780: ST_TO_ADDR
14781: LD_VAR 0 3
14785: PUSH
14786: FOR_TO
14787: IFFALSE 14878
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14789: LD_STRING setFactoryWaypointXY(
14791: PUSH
14792: LD_VAR 0 3
14796: PUSH
14797: LD_VAR 0 2
14801: ARRAY
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: STR
14807: PUSH
14808: LD_STRING ,
14810: STR
14811: PUSH
14812: LD_VAR 0 3
14816: PUSH
14817: LD_VAR 0 2
14821: ARRAY
14822: PUSH
14823: LD_INT 2
14825: ARRAY
14826: STR
14827: PUSH
14828: LD_STRING ,
14830: STR
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_VAR 0 2
14841: ARRAY
14842: PUSH
14843: LD_INT 3
14845: ARRAY
14846: STR
14847: PUSH
14848: LD_STRING ,
14850: STR
14851: PUSH
14852: LD_VAR 0 3
14856: PUSH
14857: LD_VAR 0 2
14861: ARRAY
14862: PUSH
14863: LD_INT 4
14865: ARRAY
14866: STR
14867: PUSH
14868: LD_STRING )
14870: STR
14871: PPUSH
14872: CALL_OW 559
14876: GO 14786
14878: POP
14879: POP
// end ; end ;
14880: LD_VAR 0 1
14884: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
14885: LD_INT 0
14887: PPUSH
// if HexInfo ( x , y ) = warehouse then
14888: LD_VAR 0 2
14892: PPUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: CALL_OW 428
14902: PUSH
14903: LD_VAR 0 1
14907: EQUAL
14908: IFFALSE 14935
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
14910: LD_ADDR_EXP 61
14914: PUSH
14915: LD_EXP 61
14919: PPUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: LD_INT 0
14927: PPUSH
14928: CALL_OW 1
14932: ST_TO_ADDR
14933: GO 14986
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
14935: LD_ADDR_EXP 61
14939: PUSH
14940: LD_EXP 61
14944: PPUSH
14945: LD_VAR 0 1
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 255
14959: PUSH
14960: LD_VAR 0 1
14964: PUSH
14965: LD_VAR 0 2
14969: PUSH
14970: LD_VAR 0 3
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 1
14985: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
14986: CALL 14995 0 0
// end ;
14990: LD_VAR 0 4
14994: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
14995: LD_INT 0
14997: PPUSH
14998: PPUSH
14999: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15000: LD_STRING resetWarehouseGatheringPoints();
15002: PPUSH
15003: CALL_OW 559
// if warehouseGatheringPoints then
15007: LD_EXP 61
15011: IFFALSE 15137
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_EXP 61
15022: PPUSH
15023: CALL 62340 0 1
15027: ST_TO_ADDR
// for i := 1 to list do
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: DOUBLE
15034: LD_INT 1
15036: DEC
15037: ST_TO_ADDR
15038: LD_VAR 0 3
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15135
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15046: LD_STRING setWarehouseGatheringPointXY(
15048: PUSH
15049: LD_VAR 0 3
15053: PUSH
15054: LD_VAR 0 2
15058: ARRAY
15059: PUSH
15060: LD_INT 1
15062: ARRAY
15063: STR
15064: PUSH
15065: LD_STRING ,
15067: STR
15068: PUSH
15069: LD_VAR 0 3
15073: PUSH
15074: LD_VAR 0 2
15078: ARRAY
15079: PUSH
15080: LD_INT 2
15082: ARRAY
15083: STR
15084: PUSH
15085: LD_STRING ,
15087: STR
15088: PUSH
15089: LD_VAR 0 3
15093: PUSH
15094: LD_VAR 0 2
15098: ARRAY
15099: PUSH
15100: LD_INT 3
15102: ARRAY
15103: STR
15104: PUSH
15105: LD_STRING ,
15107: STR
15108: PUSH
15109: LD_VAR 0 3
15113: PUSH
15114: LD_VAR 0 2
15118: ARRAY
15119: PUSH
15120: LD_INT 4
15122: ARRAY
15123: STR
15124: PUSH
15125: LD_STRING )
15127: STR
15128: PPUSH
15129: CALL_OW 559
15133: GO 15043
15135: POP
15136: POP
// end ; end ;
15137: LD_VAR 0 1
15141: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15142: LD_EXP 61
15146: IFFALSE 15831
15148: GO 15150
15150: DISABLE
15151: LD_INT 0
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
// begin enable ;
15162: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15163: LD_ADDR_VAR 0 3
15167: PUSH
15168: LD_EXP 61
15172: PPUSH
15173: CALL 62340 0 1
15177: ST_TO_ADDR
// if not list then
15178: LD_VAR 0 3
15182: NOT
15183: IFFALSE 15187
// exit ;
15185: GO 15831
// for i := 1 to list do
15187: LD_ADDR_VAR 0 1
15191: PUSH
15192: DOUBLE
15193: LD_INT 1
15195: DEC
15196: ST_TO_ADDR
15197: LD_VAR 0 3
15201: PUSH
15202: FOR_TO
15203: IFFALSE 15829
// begin depot := list [ i ] [ 2 ] ;
15205: LD_ADDR_VAR 0 8
15209: PUSH
15210: LD_VAR 0 3
15214: PUSH
15215: LD_VAR 0 1
15219: ARRAY
15220: PUSH
15221: LD_INT 2
15223: ARRAY
15224: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15225: LD_ADDR_VAR 0 5
15229: PUSH
15230: LD_VAR 0 3
15234: PUSH
15235: LD_VAR 0 1
15239: ARRAY
15240: PUSH
15241: LD_INT 1
15243: ARRAY
15244: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15245: LD_VAR 0 8
15249: PPUSH
15250: CALL_OW 301
15254: PUSH
15255: LD_VAR 0 5
15259: PUSH
15260: LD_VAR 0 8
15264: PPUSH
15265: CALL_OW 255
15269: NONEQUAL
15270: OR
15271: IFFALSE 15300
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15273: LD_ADDR_EXP 61
15277: PUSH
15278: LD_EXP 61
15282: PPUSH
15283: LD_VAR 0 8
15287: PPUSH
15288: LD_INT 0
15290: PPUSH
15291: CALL_OW 1
15295: ST_TO_ADDR
// exit ;
15296: POP
15297: POP
15298: GO 15831
// end ; x := list [ i ] [ 3 ] ;
15300: LD_ADDR_VAR 0 6
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_VAR 0 1
15314: ARRAY
15315: PUSH
15316: LD_INT 3
15318: ARRAY
15319: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15320: LD_ADDR_VAR 0 7
15324: PUSH
15325: LD_VAR 0 3
15329: PUSH
15330: LD_VAR 0 1
15334: ARRAY
15335: PUSH
15336: LD_INT 4
15338: ARRAY
15339: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15340: LD_ADDR_VAR 0 9
15344: PUSH
15345: LD_VAR 0 6
15349: PPUSH
15350: LD_VAR 0 7
15354: PPUSH
15355: LD_INT 16
15357: PPUSH
15358: CALL 60928 0 3
15362: ST_TO_ADDR
// if not cratesNearbyPoint then
15363: LD_VAR 0 9
15367: NOT
15368: IFFALSE 15374
// exit ;
15370: POP
15371: POP
15372: GO 15831
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15374: LD_ADDR_VAR 0 4
15378: PUSH
15379: LD_INT 22
15381: PUSH
15382: LD_VAR 0 5
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: LD_INT 60
15396: PUSH
15397: EMPTY
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 91
15406: PUSH
15407: LD_VAR 0 8
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: LD_INT 25
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 25
15435: PUSH
15436: LD_INT 16
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: PUSH
15459: LD_VAR 0 8
15463: PPUSH
15464: CALL_OW 313
15468: PPUSH
15469: LD_INT 3
15471: PUSH
15472: LD_INT 60
15474: PUSH
15475: EMPTY
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 25
15497: PUSH
15498: LD_INT 16
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PPUSH
15514: CALL_OW 72
15518: UNION
15519: ST_TO_ADDR
// if tmp then
15520: LD_VAR 0 4
15524: IFFALSE 15604
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15526: LD_ADDR_VAR 0 4
15530: PUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: LD_INT 3
15538: PPUSH
15539: CALL 58897 0 2
15543: ST_TO_ADDR
// for j in tmp do
15544: LD_ADDR_VAR 0 2
15548: PUSH
15549: LD_VAR 0 4
15553: PUSH
15554: FOR_IN
15555: IFFALSE 15598
// begin if IsInUnit ( j ) then
15557: LD_VAR 0 2
15561: PPUSH
15562: CALL_OW 310
15566: IFFALSE 15577
// ComExit ( j ) ;
15568: LD_VAR 0 2
15572: PPUSH
15573: CALL 58980 0 1
// AddComCollect ( j , x , y ) ;
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_VAR 0 6
15586: PPUSH
15587: LD_VAR 0 7
15591: PPUSH
15592: CALL_OW 177
// end ;
15596: GO 15554
15598: POP
15599: POP
// exit ;
15600: POP
15601: POP
15602: GO 15831
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15604: LD_ADDR_VAR 0 4
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_VAR 0 5
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 91
15623: PUSH
15624: LD_VAR 0 8
15628: PUSH
15629: LD_INT 8
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: LD_INT 34
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 34
15652: PUSH
15653: LD_INT 51
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 34
15662: PUSH
15663: LD_INT 32
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 34
15672: PUSH
15673: LD_INT 89
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 69
15696: ST_TO_ADDR
// if tmp then
15697: LD_VAR 0 4
15701: IFFALSE 15827
// begin for j in tmp do
15703: LD_ADDR_VAR 0 2
15707: PUSH
15708: LD_VAR 0 4
15712: PUSH
15713: FOR_IN
15714: IFFALSE 15825
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15716: LD_VAR 0 2
15720: PPUSH
15721: CALL_OW 262
15725: PUSH
15726: LD_INT 3
15728: EQUAL
15729: PUSH
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 261
15739: PUSH
15740: LD_INT 20
15742: GREATER
15743: OR
15744: PUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 314
15754: NOT
15755: AND
15756: PUSH
15757: LD_VAR 0 2
15761: PPUSH
15762: CALL_OW 263
15766: PUSH
15767: LD_INT 1
15769: NONEQUAL
15770: PUSH
15771: LD_VAR 0 2
15775: PPUSH
15776: CALL_OW 311
15780: OR
15781: AND
15782: IFFALSE 15823
// begin ComCollect ( j , x , y ) ;
15784: LD_VAR 0 2
15788: PPUSH
15789: LD_VAR 0 6
15793: PPUSH
15794: LD_VAR 0 7
15798: PPUSH
15799: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_VAR 0 8
15812: PPUSH
15813: CALL_OW 172
// exit ;
15817: POP
15818: POP
15819: POP
15820: POP
15821: GO 15831
// end ;
15823: GO 15713
15825: POP
15826: POP
// end ; end ;
15827: GO 15202
15829: POP
15830: POP
// end ; end_of_file
15831: PPOPN 9
15833: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
15838: PPUSH
15839: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 264
15849: PUSH
15850: LD_INT 91
15852: EQUAL
15853: IFFALSE 15925
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15855: LD_INT 68
15857: PPUSH
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 255
15867: PPUSH
15868: CALL_OW 321
15872: PUSH
15873: LD_INT 2
15875: EQUAL
15876: IFFALSE 15888
// eff := 70 else
15878: LD_ADDR_VAR 0 4
15882: PUSH
15883: LD_INT 70
15885: ST_TO_ADDR
15886: GO 15896
// eff := 30 ;
15888: LD_ADDR_VAR 0 4
15892: PUSH
15893: LD_INT 30
15895: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 250
15905: PPUSH
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 251
15915: PPUSH
15916: LD_VAR 0 4
15920: PPUSH
15921: CALL_OW 495
// end ; end ;
15925: LD_VAR 0 2
15929: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15930: LD_INT 0
15932: PPUSH
// end ;
15933: LD_VAR 0 4
15937: RET
// export function SOS_Command ( cmd ) ; begin
15938: LD_INT 0
15940: PPUSH
// end ;
15941: LD_VAR 0 2
15945: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15946: LD_INT 0
15948: PPUSH
// end ;
15949: LD_VAR 0 6
15953: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// if not vehicle or not factory then
15958: LD_VAR 0 1
15962: NOT
15963: PUSH
15964: LD_VAR 0 2
15968: NOT
15969: OR
15970: IFFALSE 15974
// exit ;
15972: GO 16205
// if factoryWaypoints >= factory then
15974: LD_EXP 60
15978: PUSH
15979: LD_VAR 0 2
15983: GREATEREQUAL
15984: IFFALSE 16205
// if factoryWaypoints [ factory ] then
15986: LD_EXP 60
15990: PUSH
15991: LD_VAR 0 2
15995: ARRAY
15996: IFFALSE 16205
// begin if GetControl ( vehicle ) = control_manual then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 263
16007: PUSH
16008: LD_INT 1
16010: EQUAL
16011: IFFALSE 16092
// begin driver := IsDrivenBy ( vehicle ) ;
16013: LD_ADDR_VAR 0 4
16017: PUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 311
16027: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16028: LD_VAR 0 4
16032: PPUSH
16033: LD_EXP 60
16037: PUSH
16038: LD_VAR 0 2
16042: ARRAY
16043: PUSH
16044: LD_INT 3
16046: ARRAY
16047: PPUSH
16048: LD_EXP 60
16052: PUSH
16053: LD_VAR 0 2
16057: ARRAY
16058: PUSH
16059: LD_INT 4
16061: ARRAY
16062: PPUSH
16063: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16067: LD_VAR 0 4
16071: PPUSH
16072: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16076: LD_VAR 0 4
16080: PPUSH
16081: LD_VAR 0 2
16085: PPUSH
16086: CALL_OW 180
// end else
16090: GO 16205
// if GetControl ( vehicle ) = control_remote then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 263
16101: PUSH
16102: LD_INT 2
16104: EQUAL
16105: IFFALSE 16166
// begin wait ( 0 0$2 ) ;
16107: LD_INT 70
16109: PPUSH
16110: CALL_OW 67
// if Connect ( vehicle ) then
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL 29199 0 1
16123: IFFALSE 16164
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16125: LD_VAR 0 1
16129: PPUSH
16130: LD_EXP 60
16134: PUSH
16135: LD_VAR 0 2
16139: ARRAY
16140: PUSH
16141: LD_INT 3
16143: ARRAY
16144: PPUSH
16145: LD_EXP 60
16149: PUSH
16150: LD_VAR 0 2
16154: ARRAY
16155: PUSH
16156: LD_INT 4
16158: ARRAY
16159: PPUSH
16160: CALL_OW 171
// end else
16164: GO 16205
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16166: LD_VAR 0 1
16170: PPUSH
16171: LD_EXP 60
16175: PUSH
16176: LD_VAR 0 2
16180: ARRAY
16181: PUSH
16182: LD_INT 3
16184: ARRAY
16185: PPUSH
16186: LD_EXP 60
16190: PUSH
16191: LD_VAR 0 2
16195: ARRAY
16196: PUSH
16197: LD_INT 4
16199: ARRAY
16200: PPUSH
16201: CALL_OW 171
// end ; end ;
16205: LD_VAR 0 3
16209: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16210: LD_INT 0
16212: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16213: LD_VAR 0 1
16217: PUSH
16218: LD_INT 250
16220: EQUAL
16221: PUSH
16222: LD_VAR 0 2
16226: PPUSH
16227: CALL_OW 264
16231: PUSH
16232: LD_INT 81
16234: EQUAL
16235: AND
16236: IFFALSE 16257
// MinerPlaceMine ( unit , x , y ) ;
16238: LD_VAR 0 2
16242: PPUSH
16243: LD_VAR 0 4
16247: PPUSH
16248: LD_VAR 0 5
16252: PPUSH
16253: CALL 19247 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16257: LD_VAR 0 1
16261: PUSH
16262: LD_INT 251
16264: EQUAL
16265: PUSH
16266: LD_VAR 0 2
16270: PPUSH
16271: CALL_OW 264
16275: PUSH
16276: LD_INT 81
16278: EQUAL
16279: AND
16280: IFFALSE 16301
// MinerDetonateMine ( unit , x , y ) ;
16282: LD_VAR 0 2
16286: PPUSH
16287: LD_VAR 0 4
16291: PPUSH
16292: LD_VAR 0 5
16296: PPUSH
16297: CALL 19522 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16301: LD_VAR 0 1
16305: PUSH
16306: LD_INT 252
16308: EQUAL
16309: PUSH
16310: LD_VAR 0 2
16314: PPUSH
16315: CALL_OW 264
16319: PUSH
16320: LD_INT 81
16322: EQUAL
16323: AND
16324: IFFALSE 16345
// MinerCreateMinefield ( unit , x , y ) ;
16326: LD_VAR 0 2
16330: PPUSH
16331: LD_VAR 0 4
16335: PPUSH
16336: LD_VAR 0 5
16340: PPUSH
16341: CALL 19939 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16345: LD_VAR 0 1
16349: PUSH
16350: LD_INT 253
16352: EQUAL
16353: PUSH
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 257
16363: PUSH
16364: LD_INT 5
16366: EQUAL
16367: AND
16368: IFFALSE 16389
// ComBinocular ( unit , x , y ) ;
16370: LD_VAR 0 2
16374: PPUSH
16375: LD_VAR 0 4
16379: PPUSH
16380: LD_VAR 0 5
16384: PPUSH
16385: CALL 20308 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16389: LD_VAR 0 1
16393: PUSH
16394: LD_INT 254
16396: EQUAL
16397: PUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: CALL_OW 264
16407: PUSH
16408: LD_INT 99
16410: EQUAL
16411: AND
16412: PUSH
16413: LD_VAR 0 3
16417: PPUSH
16418: CALL_OW 263
16422: PUSH
16423: LD_INT 3
16425: EQUAL
16426: AND
16427: IFFALSE 16443
// HackDestroyVehicle ( unit , selectedUnit ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: CALL 18611 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16443: LD_VAR 0 1
16447: PUSH
16448: LD_INT 255
16450: EQUAL
16451: PUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: CALL_OW 264
16461: PUSH
16462: LD_INT 14
16464: PUSH
16465: LD_INT 53
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: IN
16472: AND
16473: PUSH
16474: LD_VAR 0 4
16478: PPUSH
16479: LD_VAR 0 5
16483: PPUSH
16484: CALL_OW 488
16488: AND
16489: IFFALSE 16513
// CutTreeXYR ( unit , x , y , 12 ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_VAR 0 4
16500: PPUSH
16501: LD_VAR 0 5
16505: PPUSH
16506: LD_INT 12
16508: PPUSH
16509: CALL 16608 0 4
// if cmd = 256 then
16513: LD_VAR 0 1
16517: PUSH
16518: LD_INT 256
16520: EQUAL
16521: IFFALSE 16542
// SetFactoryWaypoint ( unit , x , y ) ;
16523: LD_VAR 0 2
16527: PPUSH
16528: LD_VAR 0 4
16532: PPUSH
16533: LD_VAR 0 5
16537: PPUSH
16538: CALL 14523 0 3
// if cmd = 257 then
16542: LD_VAR 0 1
16546: PUSH
16547: LD_INT 257
16549: EQUAL
16550: IFFALSE 16571
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16552: LD_VAR 0 2
16556: PPUSH
16557: LD_VAR 0 4
16561: PPUSH
16562: LD_VAR 0 5
16566: PPUSH
16567: CALL 14885 0 3
// if cmd = 258 then
16571: LD_VAR 0 1
16575: PUSH
16576: LD_INT 258
16578: EQUAL
16579: IFFALSE 16603
// BurnTreeXYR ( unit , x , y , 8 ) ;
16581: LD_VAR 0 2
16585: PPUSH
16586: LD_VAR 0 4
16590: PPUSH
16591: LD_VAR 0 5
16595: PPUSH
16596: LD_INT 8
16598: PPUSH
16599: CALL 17002 0 4
// end ;
16603: LD_VAR 0 6
16607: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16608: LD_INT 0
16610: PPUSH
16611: PPUSH
16612: PPUSH
16613: PPUSH
16614: PPUSH
16615: PPUSH
16616: PPUSH
16617: PPUSH
16618: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 302
16628: NOT
16629: PUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: CALL_OW 488
16644: NOT
16645: OR
16646: PUSH
16647: LD_VAR 0 4
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16997
// list := [ ] ;
16657: LD_ADDR_VAR 0 13
16661: PUSH
16662: EMPTY
16663: ST_TO_ADDR
// if x - r < 0 then
16664: LD_VAR 0 2
16668: PUSH
16669: LD_VAR 0 4
16673: MINUS
16674: PUSH
16675: LD_INT 0
16677: LESS
16678: IFFALSE 16690
// min_x := 0 else
16680: LD_ADDR_VAR 0 7
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
16688: GO 16706
// min_x := x - r ;
16690: LD_ADDR_VAR 0 7
16694: PUSH
16695: LD_VAR 0 2
16699: PUSH
16700: LD_VAR 0 4
16704: MINUS
16705: ST_TO_ADDR
// if y - r < 0 then
16706: LD_VAR 0 3
16710: PUSH
16711: LD_VAR 0 4
16715: MINUS
16716: PUSH
16717: LD_INT 0
16719: LESS
16720: IFFALSE 16732
// min_y := 0 else
16722: LD_ADDR_VAR 0 8
16726: PUSH
16727: LD_INT 0
16729: ST_TO_ADDR
16730: GO 16748
// min_y := y - r ;
16732: LD_ADDR_VAR 0 8
16736: PUSH
16737: LD_VAR 0 3
16741: PUSH
16742: LD_VAR 0 4
16746: MINUS
16747: ST_TO_ADDR
// max_x := x + r ;
16748: LD_ADDR_VAR 0 9
16752: PUSH
16753: LD_VAR 0 2
16757: PUSH
16758: LD_VAR 0 4
16762: PLUS
16763: ST_TO_ADDR
// max_y := y + r ;
16764: LD_ADDR_VAR 0 10
16768: PUSH
16769: LD_VAR 0 3
16773: PUSH
16774: LD_VAR 0 4
16778: PLUS
16779: ST_TO_ADDR
// for _x = min_x to max_x do
16780: LD_ADDR_VAR 0 11
16784: PUSH
16785: DOUBLE
16786: LD_VAR 0 7
16790: DEC
16791: ST_TO_ADDR
16792: LD_VAR 0 9
16796: PUSH
16797: FOR_TO
16798: IFFALSE 16915
// for _y = min_y to max_y do
16800: LD_ADDR_VAR 0 12
16804: PUSH
16805: DOUBLE
16806: LD_VAR 0 8
16810: DEC
16811: ST_TO_ADDR
16812: LD_VAR 0 10
16816: PUSH
16817: FOR_TO
16818: IFFALSE 16911
// begin if not ValidHex ( _x , _y ) then
16820: LD_VAR 0 11
16824: PPUSH
16825: LD_VAR 0 12
16829: PPUSH
16830: CALL_OW 488
16834: NOT
16835: IFFALSE 16839
// continue ;
16837: GO 16817
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16839: LD_VAR 0 11
16843: PPUSH
16844: LD_VAR 0 12
16848: PPUSH
16849: CALL_OW 351
16853: PUSH
16854: LD_VAR 0 11
16858: PPUSH
16859: LD_VAR 0 12
16863: PPUSH
16864: CALL_OW 554
16868: AND
16869: IFFALSE 16909
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16871: LD_ADDR_VAR 0 13
16875: PUSH
16876: LD_VAR 0 13
16880: PPUSH
16881: LD_VAR 0 13
16885: PUSH
16886: LD_INT 1
16888: PLUS
16889: PPUSH
16890: LD_VAR 0 11
16894: PUSH
16895: LD_VAR 0 12
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 2
16908: ST_TO_ADDR
// end ;
16909: GO 16817
16911: POP
16912: POP
16913: GO 16797
16915: POP
16916: POP
// if not list then
16917: LD_VAR 0 13
16921: NOT
16922: IFFALSE 16926
// exit ;
16924: GO 16997
// for i in list do
16926: LD_ADDR_VAR 0 6
16930: PUSH
16931: LD_VAR 0 13
16935: PUSH
16936: FOR_IN
16937: IFFALSE 16995
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_STRING M
16946: PUSH
16947: LD_VAR 0 6
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PUSH
16956: LD_VAR 0 6
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: PPUSH
16989: CALL_OW 447
16993: GO 16936
16995: POP
16996: POP
// end ;
16997: LD_VAR 0 5
17001: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17002: LD_INT 0
17004: PPUSH
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
17013: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 302
17023: NOT
17024: PUSH
17025: LD_VAR 0 2
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: CALL_OW 488
17039: NOT
17040: OR
17041: PUSH
17042: LD_VAR 0 4
17046: NOT
17047: OR
17048: IFFALSE 17052
// exit ;
17050: GO 17565
// list := [ ] ;
17052: LD_ADDR_VAR 0 13
17056: PUSH
17057: EMPTY
17058: ST_TO_ADDR
// if x - r < 0 then
17059: LD_VAR 0 2
17063: PUSH
17064: LD_VAR 0 4
17068: MINUS
17069: PUSH
17070: LD_INT 0
17072: LESS
17073: IFFALSE 17085
// min_x := 0 else
17075: LD_ADDR_VAR 0 7
17079: PUSH
17080: LD_INT 0
17082: ST_TO_ADDR
17083: GO 17101
// min_x := x - r ;
17085: LD_ADDR_VAR 0 7
17089: PUSH
17090: LD_VAR 0 2
17094: PUSH
17095: LD_VAR 0 4
17099: MINUS
17100: ST_TO_ADDR
// if y - r < 0 then
17101: LD_VAR 0 3
17105: PUSH
17106: LD_VAR 0 4
17110: MINUS
17111: PUSH
17112: LD_INT 0
17114: LESS
17115: IFFALSE 17127
// min_y := 0 else
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
17125: GO 17143
// min_y := y - r ;
17127: LD_ADDR_VAR 0 8
17131: PUSH
17132: LD_VAR 0 3
17136: PUSH
17137: LD_VAR 0 4
17141: MINUS
17142: ST_TO_ADDR
// max_x := x + r ;
17143: LD_ADDR_VAR 0 9
17147: PUSH
17148: LD_VAR 0 2
17152: PUSH
17153: LD_VAR 0 4
17157: PLUS
17158: ST_TO_ADDR
// max_y := y + r ;
17159: LD_ADDR_VAR 0 10
17163: PUSH
17164: LD_VAR 0 3
17168: PUSH
17169: LD_VAR 0 4
17173: PLUS
17174: ST_TO_ADDR
// for _x = min_x to max_x do
17175: LD_ADDR_VAR 0 11
17179: PUSH
17180: DOUBLE
17181: LD_VAR 0 7
17185: DEC
17186: ST_TO_ADDR
17187: LD_VAR 0 9
17191: PUSH
17192: FOR_TO
17193: IFFALSE 17310
// for _y = min_y to max_y do
17195: LD_ADDR_VAR 0 12
17199: PUSH
17200: DOUBLE
17201: LD_VAR 0 8
17205: DEC
17206: ST_TO_ADDR
17207: LD_VAR 0 10
17211: PUSH
17212: FOR_TO
17213: IFFALSE 17306
// begin if not ValidHex ( _x , _y ) then
17215: LD_VAR 0 11
17219: PPUSH
17220: LD_VAR 0 12
17224: PPUSH
17225: CALL_OW 488
17229: NOT
17230: IFFALSE 17234
// continue ;
17232: GO 17212
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17234: LD_VAR 0 11
17238: PPUSH
17239: LD_VAR 0 12
17243: PPUSH
17244: CALL_OW 351
17248: PUSH
17249: LD_VAR 0 11
17253: PPUSH
17254: LD_VAR 0 12
17258: PPUSH
17259: CALL_OW 554
17263: AND
17264: IFFALSE 17304
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17266: LD_ADDR_VAR 0 13
17270: PUSH
17271: LD_VAR 0 13
17275: PPUSH
17276: LD_VAR 0 13
17280: PUSH
17281: LD_INT 1
17283: PLUS
17284: PPUSH
17285: LD_VAR 0 11
17289: PUSH
17290: LD_VAR 0 12
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 2
17303: ST_TO_ADDR
// end ;
17304: GO 17212
17306: POP
17307: POP
17308: GO 17192
17310: POP
17311: POP
// if not list then
17312: LD_VAR 0 13
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 17565
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17321: LD_ADDR_VAR 0 13
17325: PUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: LD_VAR 0 13
17335: PPUSH
17336: LD_INT 1
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: CALL 26341 0 4
17346: ST_TO_ADDR
// ComStop ( flame ) ;
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 141
// for i in list do
17356: LD_ADDR_VAR 0 6
17360: PUSH
17361: LD_VAR 0 13
17365: PUSH
17366: FOR_IN
17367: IFFALSE 17398
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_VAR 0 6
17378: PUSH
17379: LD_INT 1
17381: ARRAY
17382: PPUSH
17383: LD_VAR 0 6
17387: PUSH
17388: LD_INT 2
17390: ARRAY
17391: PPUSH
17392: CALL_OW 176
17396: GO 17366
17398: POP
17399: POP
// repeat wait ( 0 0$1 ) ;
17400: LD_INT 35
17402: PPUSH
17403: CALL_OW 67
// task := GetTaskList ( flame ) ;
17407: LD_ADDR_VAR 0 14
17411: PUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 437
17421: ST_TO_ADDR
// if not task then
17422: LD_VAR 0 14
17426: NOT
17427: IFFALSE 17431
// exit ;
17429: GO 17565
// if task [ 1 ] [ 1 ] <> | then
17431: LD_VAR 0 14
17435: PUSH
17436: LD_INT 1
17438: ARRAY
17439: PUSH
17440: LD_INT 1
17442: ARRAY
17443: PUSH
17444: LD_STRING |
17446: NONEQUAL
17447: IFFALSE 17451
// exit ;
17449: GO 17565
// _x := task [ 1 ] [ 2 ] ;
17451: LD_ADDR_VAR 0 11
17455: PUSH
17456: LD_VAR 0 14
17460: PUSH
17461: LD_INT 1
17463: ARRAY
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17469: LD_ADDR_VAR 0 12
17473: PUSH
17474: LD_VAR 0 14
17478: PUSH
17479: LD_INT 1
17481: ARRAY
17482: PUSH
17483: LD_INT 3
17485: ARRAY
17486: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17487: LD_VAR 0 11
17491: PPUSH
17492: LD_VAR 0 12
17496: PPUSH
17497: CALL_OW 351
17501: NOT
17502: PUSH
17503: LD_VAR 0 11
17507: PPUSH
17508: LD_VAR 0 12
17512: PPUSH
17513: CALL_OW 554
17517: NOT
17518: OR
17519: IFFALSE 17553
// begin task := Delete ( task , 1 ) ;
17521: LD_ADDR_VAR 0 14
17525: PUSH
17526: LD_VAR 0 14
17530: PPUSH
17531: LD_INT 1
17533: PPUSH
17534: CALL_OW 3
17538: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_VAR 0 14
17548: PPUSH
17549: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 314
17562: NOT
17563: IFFALSE 17400
// end ;
17565: LD_VAR 0 5
17569: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17570: LD_EXP 63
17574: NOT
17575: IFFALSE 17625
17577: GO 17579
17579: DISABLE
// begin initHack := true ;
17580: LD_ADDR_EXP 63
17584: PUSH
17585: LD_INT 1
17587: ST_TO_ADDR
// hackTanks := [ ] ;
17588: LD_ADDR_EXP 64
17592: PUSH
17593: EMPTY
17594: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17595: LD_ADDR_EXP 65
17599: PUSH
17600: EMPTY
17601: ST_TO_ADDR
// hackLimit := 3 ;
17602: LD_ADDR_EXP 66
17606: PUSH
17607: LD_INT 3
17609: ST_TO_ADDR
// hackDist := 12 ;
17610: LD_ADDR_EXP 67
17614: PUSH
17615: LD_INT 12
17617: ST_TO_ADDR
// hackCounter := [ ] ;
17618: LD_ADDR_EXP 68
17622: PUSH
17623: EMPTY
17624: ST_TO_ADDR
// end ;
17625: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17626: LD_EXP 63
17630: PUSH
17631: LD_INT 34
17633: PUSH
17634: LD_INT 99
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: AND
17646: IFFALSE 17899
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
17654: PPUSH
// begin enable ;
17655: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17656: LD_ADDR_VAR 0 1
17660: PUSH
17661: LD_INT 34
17663: PUSH
17664: LD_INT 99
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: PUSH
17676: FOR_IN
17677: IFFALSE 17897
// begin if not i in hackTanks then
17679: LD_VAR 0 1
17683: PUSH
17684: LD_EXP 64
17688: IN
17689: NOT
17690: IFFALSE 17773
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17692: LD_ADDR_EXP 64
17696: PUSH
17697: LD_EXP 64
17701: PPUSH
17702: LD_EXP 64
17706: PUSH
17707: LD_INT 1
17709: PLUS
17710: PPUSH
17711: LD_VAR 0 1
17715: PPUSH
17716: CALL_OW 1
17720: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17721: LD_ADDR_EXP 65
17725: PUSH
17726: LD_EXP 65
17730: PPUSH
17731: LD_EXP 65
17735: PUSH
17736: LD_INT 1
17738: PLUS
17739: PPUSH
17740: EMPTY
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17747: LD_ADDR_EXP 68
17751: PUSH
17752: LD_EXP 68
17756: PPUSH
17757: LD_EXP 68
17761: PUSH
17762: LD_INT 1
17764: PLUS
17765: PPUSH
17766: EMPTY
17767: PPUSH
17768: CALL_OW 1
17772: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL_OW 302
17782: NOT
17783: IFFALSE 17796
// begin HackUnlinkAll ( i ) ;
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL 17902 0 1
// continue ;
17794: GO 17676
// end ; HackCheckCapturedStatus ( i ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL 18345 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_INT 81
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 255
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 33
17829: PUSH
17830: LD_INT 3
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 91
17839: PUSH
17840: LD_VAR 0 1
17844: PUSH
17845: LD_EXP 67
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 50
17857: PUSH
17858: EMPTY
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PPUSH
17867: CALL_OW 69
17871: ST_TO_ADDR
// if not tmp then
17872: LD_VAR 0 2
17876: NOT
17877: IFFALSE 17881
// continue ;
17879: GO 17676
// HackLink ( i , tmp ) ;
17881: LD_VAR 0 1
17885: PPUSH
17886: LD_VAR 0 2
17890: PPUSH
17891: CALL 18038 0 2
// end ;
17895: GO 17676
17897: POP
17898: POP
// end ;
17899: PPOPN 2
17901: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
17906: PPUSH
// if not hack in hackTanks then
17907: LD_VAR 0 1
17911: PUSH
17912: LD_EXP 64
17916: IN
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 18033
// index := GetElementIndex ( hackTanks , hack ) ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_EXP 64
17931: PPUSH
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL 25638 0 2
17941: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17942: LD_EXP 65
17946: PUSH
17947: LD_VAR 0 4
17951: ARRAY
17952: IFFALSE 18033
// begin for i in hackTanksCaptured [ index ] do
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_EXP 65
17963: PUSH
17964: LD_VAR 0 4
17968: ARRAY
17969: PUSH
17970: FOR_IN
17971: IFFALSE 17997
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 1
17980: ARRAY
17981: PPUSH
17982: LD_VAR 0 3
17986: PUSH
17987: LD_INT 2
17989: ARRAY
17990: PPUSH
17991: CALL_OW 235
17995: GO 17970
17997: POP
17998: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17999: LD_ADDR_EXP 65
18003: PUSH
18004: LD_EXP 65
18008: PPUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: EMPTY
18015: PPUSH
18016: CALL_OW 1
18020: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18021: LD_VAR 0 1
18025: PPUSH
18026: LD_INT 0
18028: PPUSH
18029: CALL_OW 505
// end ; end ;
18033: LD_VAR 0 2
18037: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18038: LD_INT 0
18040: PPUSH
18041: PPUSH
18042: PPUSH
// if not hack in hackTanks or not vehicles then
18043: LD_VAR 0 1
18047: PUSH
18048: LD_EXP 64
18052: IN
18053: NOT
18054: PUSH
18055: LD_VAR 0 2
18059: NOT
18060: OR
18061: IFFALSE 18065
// exit ;
18063: GO 18340
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18065: LD_ADDR_VAR 0 2
18069: PUSH
18070: LD_VAR 0 1
18074: PPUSH
18075: LD_VAR 0 2
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL 26288 0 4
18090: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18091: LD_ADDR_VAR 0 5
18095: PUSH
18096: LD_EXP 64
18100: PPUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL 25638 0 2
18110: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18111: LD_EXP 65
18115: PUSH
18116: LD_VAR 0 5
18120: ARRAY
18121: PUSH
18122: LD_EXP 66
18126: LESS
18127: IFFALSE 18316
// begin for i := 1 to vehicles do
18129: LD_ADDR_VAR 0 4
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_VAR 0 2
18143: PUSH
18144: FOR_TO
18145: IFFALSE 18314
// begin if hackTanksCaptured [ index ] = hackLimit then
18147: LD_EXP 65
18151: PUSH
18152: LD_VAR 0 5
18156: ARRAY
18157: PUSH
18158: LD_EXP 66
18162: EQUAL
18163: IFFALSE 18167
// break ;
18165: GO 18314
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18167: LD_ADDR_EXP 68
18171: PUSH
18172: LD_EXP 68
18176: PPUSH
18177: LD_VAR 0 5
18181: PPUSH
18182: LD_EXP 68
18186: PUSH
18187: LD_VAR 0 5
18191: ARRAY
18192: PUSH
18193: LD_INT 1
18195: PLUS
18196: PPUSH
18197: CALL_OW 1
18201: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18202: LD_ADDR_EXP 65
18206: PUSH
18207: LD_EXP 65
18211: PPUSH
18212: LD_VAR 0 5
18216: PUSH
18217: LD_EXP 65
18221: PUSH
18222: LD_VAR 0 5
18226: ARRAY
18227: PUSH
18228: LD_INT 1
18230: PLUS
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: LD_VAR 0 2
18240: PUSH
18241: LD_VAR 0 4
18245: ARRAY
18246: PUSH
18247: LD_VAR 0 2
18251: PUSH
18252: LD_VAR 0 4
18256: ARRAY
18257: PPUSH
18258: CALL_OW 255
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PPUSH
18267: CALL 25853 0 3
18271: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18272: LD_VAR 0 2
18276: PUSH
18277: LD_VAR 0 4
18281: ARRAY
18282: PPUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PPUSH
18293: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18297: LD_VAR 0 2
18301: PUSH
18302: LD_VAR 0 4
18306: ARRAY
18307: PPUSH
18308: CALL_OW 141
// end ;
18312: GO 18144
18314: POP
18315: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_EXP 65
18325: PUSH
18326: LD_VAR 0 5
18330: ARRAY
18331: PUSH
18332: LD_INT 0
18334: PLUS
18335: PPUSH
18336: CALL_OW 505
// end ;
18340: LD_VAR 0 3
18344: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18345: LD_INT 0
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
// if not hack in hackTanks then
18351: LD_VAR 0 1
18355: PUSH
18356: LD_EXP 64
18360: IN
18361: NOT
18362: IFFALSE 18366
// exit ;
18364: GO 18606
// index := GetElementIndex ( hackTanks , hack ) ;
18366: LD_ADDR_VAR 0 4
18370: PUSH
18371: LD_EXP 64
18375: PPUSH
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL 25638 0 2
18385: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18386: LD_ADDR_VAR 0 3
18390: PUSH
18391: DOUBLE
18392: LD_EXP 65
18396: PUSH
18397: LD_VAR 0 4
18401: ARRAY
18402: INC
18403: ST_TO_ADDR
18404: LD_INT 1
18406: PUSH
18407: FOR_DOWNTO
18408: IFFALSE 18580
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18410: LD_ADDR_VAR 0 5
18414: PUSH
18415: LD_EXP 65
18419: PUSH
18420: LD_VAR 0 4
18424: ARRAY
18425: PUSH
18426: LD_VAR 0 3
18430: ARRAY
18431: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18432: LD_VAR 0 5
18436: PUSH
18437: LD_INT 1
18439: ARRAY
18440: PPUSH
18441: CALL_OW 302
18445: NOT
18446: PUSH
18447: LD_VAR 0 5
18451: PUSH
18452: LD_INT 1
18454: ARRAY
18455: PPUSH
18456: CALL_OW 255
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 255
18470: NONEQUAL
18471: OR
18472: IFFALSE 18578
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18474: LD_VAR 0 5
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 305
18487: PUSH
18488: LD_VAR 0 5
18492: PUSH
18493: LD_INT 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 255
18501: PUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 255
18511: EQUAL
18512: AND
18513: IFFALSE 18537
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18515: LD_VAR 0 5
18519: PUSH
18520: LD_INT 1
18522: ARRAY
18523: PPUSH
18524: LD_VAR 0 5
18528: PUSH
18529: LD_INT 2
18531: ARRAY
18532: PPUSH
18533: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18537: LD_ADDR_EXP 65
18541: PUSH
18542: LD_EXP 65
18546: PPUSH
18547: LD_VAR 0 4
18551: PPUSH
18552: LD_EXP 65
18556: PUSH
18557: LD_VAR 0 4
18561: ARRAY
18562: PPUSH
18563: LD_VAR 0 3
18567: PPUSH
18568: CALL_OW 3
18572: PPUSH
18573: CALL_OW 1
18577: ST_TO_ADDR
// end ; end ;
18578: GO 18407
18580: POP
18581: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18582: LD_VAR 0 1
18586: PPUSH
18587: LD_EXP 65
18591: PUSH
18592: LD_VAR 0 4
18596: ARRAY
18597: PUSH
18598: LD_INT 0
18600: PLUS
18601: PPUSH
18602: CALL_OW 505
// end ;
18606: LD_VAR 0 2
18610: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18611: LD_INT 0
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
// if not hack in hackTanks then
18617: LD_VAR 0 1
18621: PUSH
18622: LD_EXP 64
18626: IN
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18717
// index := GetElementIndex ( hackTanks , hack ) ;
18632: LD_ADDR_VAR 0 5
18636: PUSH
18637: LD_EXP 64
18641: PPUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL 25638 0 2
18651: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18652: LD_ADDR_VAR 0 4
18656: PUSH
18657: DOUBLE
18658: LD_INT 1
18660: DEC
18661: ST_TO_ADDR
18662: LD_EXP 65
18666: PUSH
18667: LD_VAR 0 5
18671: ARRAY
18672: PUSH
18673: FOR_TO
18674: IFFALSE 18715
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18676: LD_EXP 65
18680: PUSH
18681: LD_VAR 0 5
18685: ARRAY
18686: PUSH
18687: LD_VAR 0 4
18691: ARRAY
18692: PUSH
18693: LD_INT 1
18695: ARRAY
18696: PUSH
18697: LD_VAR 0 2
18701: EQUAL
18702: IFFALSE 18713
// KillUnit ( vehicle ) ;
18704: LD_VAR 0 2
18708: PPUSH
18709: CALL_OW 66
18713: GO 18673
18715: POP
18716: POP
// end ;
18717: LD_VAR 0 3
18721: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18722: LD_EXP 69
18726: NOT
18727: IFFALSE 18762
18729: GO 18731
18731: DISABLE
// begin initMiner := true ;
18732: LD_ADDR_EXP 69
18736: PUSH
18737: LD_INT 1
18739: ST_TO_ADDR
// minersList := [ ] ;
18740: LD_ADDR_EXP 70
18744: PUSH
18745: EMPTY
18746: ST_TO_ADDR
// minerMinesList := [ ] ;
18747: LD_ADDR_EXP 71
18751: PUSH
18752: EMPTY
18753: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18754: LD_ADDR_EXP 72
18758: PUSH
18759: LD_INT 5
18761: ST_TO_ADDR
// end ;
18762: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18763: LD_EXP 69
18767: PUSH
18768: LD_INT 34
18770: PUSH
18771: LD_INT 81
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL_OW 69
18782: AND
18783: IFFALSE 19244
18785: GO 18787
18787: DISABLE
18788: LD_INT 0
18790: PPUSH
18791: PPUSH
18792: PPUSH
18793: PPUSH
// begin enable ;
18794: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18795: LD_ADDR_VAR 0 1
18799: PUSH
18800: LD_INT 34
18802: PUSH
18803: LD_INT 81
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: PUSH
18815: FOR_IN
18816: IFFALSE 18888
// begin if not i in minersList then
18818: LD_VAR 0 1
18822: PUSH
18823: LD_EXP 70
18827: IN
18828: NOT
18829: IFFALSE 18886
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18831: LD_ADDR_EXP 70
18835: PUSH
18836: LD_EXP 70
18840: PPUSH
18841: LD_EXP 70
18845: PUSH
18846: LD_INT 1
18848: PLUS
18849: PPUSH
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL_OW 1
18859: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18860: LD_ADDR_EXP 71
18864: PUSH
18865: LD_EXP 71
18869: PPUSH
18870: LD_EXP 71
18874: PUSH
18875: LD_INT 1
18877: PLUS
18878: PPUSH
18879: EMPTY
18880: PPUSH
18881: CALL_OW 1
18885: ST_TO_ADDR
// end end ;
18886: GO 18815
18888: POP
18889: POP
// for i := minerMinesList downto 1 do
18890: LD_ADDR_VAR 0 1
18894: PUSH
18895: DOUBLE
18896: LD_EXP 71
18900: INC
18901: ST_TO_ADDR
18902: LD_INT 1
18904: PUSH
18905: FOR_DOWNTO
18906: IFFALSE 19242
// begin if IsLive ( minersList [ i ] ) then
18908: LD_EXP 70
18912: PUSH
18913: LD_VAR 0 1
18917: ARRAY
18918: PPUSH
18919: CALL_OW 300
18923: IFFALSE 18951
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18925: LD_EXP 70
18929: PUSH
18930: LD_VAR 0 1
18934: ARRAY
18935: PPUSH
18936: LD_EXP 71
18940: PUSH
18941: LD_VAR 0 1
18945: ARRAY
18946: PPUSH
18947: CALL_OW 505
// if not minerMinesList [ i ] then
18951: LD_EXP 71
18955: PUSH
18956: LD_VAR 0 1
18960: ARRAY
18961: NOT
18962: IFFALSE 18966
// continue ;
18964: GO 18905
// for j := minerMinesList [ i ] downto 1 do
18966: LD_ADDR_VAR 0 2
18970: PUSH
18971: DOUBLE
18972: LD_EXP 71
18976: PUSH
18977: LD_VAR 0 1
18981: ARRAY
18982: INC
18983: ST_TO_ADDR
18984: LD_INT 1
18986: PUSH
18987: FOR_DOWNTO
18988: IFFALSE 19238
// begin side := GetSide ( minersList [ i ] ) ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_EXP 70
18999: PUSH
19000: LD_VAR 0 1
19004: ARRAY
19005: PPUSH
19006: CALL_OW 255
19010: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19011: LD_ADDR_VAR 0 4
19015: PUSH
19016: LD_EXP 71
19020: PUSH
19021: LD_VAR 0 1
19025: ARRAY
19026: PUSH
19027: LD_VAR 0 2
19031: ARRAY
19032: PUSH
19033: LD_INT 1
19035: ARRAY
19036: PPUSH
19037: LD_EXP 71
19041: PUSH
19042: LD_VAR 0 1
19046: ARRAY
19047: PUSH
19048: LD_VAR 0 2
19052: ARRAY
19053: PUSH
19054: LD_INT 2
19056: ARRAY
19057: PPUSH
19058: CALL_OW 428
19062: ST_TO_ADDR
// if not tmp then
19063: LD_VAR 0 4
19067: NOT
19068: IFFALSE 19072
// continue ;
19070: GO 18987
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19072: LD_VAR 0 4
19076: PUSH
19077: LD_INT 81
19079: PUSH
19080: LD_VAR 0 3
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: IN
19094: PUSH
19095: LD_EXP 71
19099: PUSH
19100: LD_VAR 0 1
19104: ARRAY
19105: PUSH
19106: LD_VAR 0 2
19110: ARRAY
19111: PUSH
19112: LD_INT 1
19114: ARRAY
19115: PPUSH
19116: LD_EXP 71
19120: PUSH
19121: LD_VAR 0 1
19125: ARRAY
19126: PUSH
19127: LD_VAR 0 2
19131: ARRAY
19132: PUSH
19133: LD_INT 2
19135: ARRAY
19136: PPUSH
19137: CALL_OW 458
19141: AND
19142: IFFALSE 19236
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19144: LD_EXP 71
19148: PUSH
19149: LD_VAR 0 1
19153: ARRAY
19154: PUSH
19155: LD_VAR 0 2
19159: ARRAY
19160: PUSH
19161: LD_INT 1
19163: ARRAY
19164: PPUSH
19165: LD_EXP 71
19169: PUSH
19170: LD_VAR 0 1
19174: ARRAY
19175: PUSH
19176: LD_VAR 0 2
19180: ARRAY
19181: PUSH
19182: LD_INT 2
19184: ARRAY
19185: PPUSH
19186: LD_VAR 0 3
19190: PPUSH
19191: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19195: LD_ADDR_EXP 71
19199: PUSH
19200: LD_EXP 71
19204: PPUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_EXP 71
19214: PUSH
19215: LD_VAR 0 1
19219: ARRAY
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: CALL_OW 3
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// end ; end ;
19236: GO 18987
19238: POP
19239: POP
// end ;
19240: GO 18905
19242: POP
19243: POP
// end ;
19244: PPOPN 4
19246: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// result := false ;
19251: LD_ADDR_VAR 0 4
19255: PUSH
19256: LD_INT 0
19258: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 264
19268: PUSH
19269: LD_INT 81
19271: EQUAL
19272: NOT
19273: IFFALSE 19277
// exit ;
19275: GO 19517
// index := GetElementIndex ( minersList , unit ) ;
19277: LD_ADDR_VAR 0 5
19281: PUSH
19282: LD_EXP 70
19286: PPUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL 25638 0 2
19296: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19297: LD_EXP 71
19301: PUSH
19302: LD_VAR 0 5
19306: ARRAY
19307: PUSH
19308: LD_EXP 72
19312: GREATEREQUAL
19313: IFFALSE 19317
// exit ;
19315: GO 19517
// ComMoveXY ( unit , x , y ) ;
19317: LD_VAR 0 1
19321: PPUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19336: LD_INT 35
19338: PPUSH
19339: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19343: LD_VAR 0 1
19347: PPUSH
19348: LD_VAR 0 2
19352: PPUSH
19353: LD_VAR 0 3
19357: PPUSH
19358: CALL 57379 0 3
19362: NOT
19363: PUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 314
19373: AND
19374: IFFALSE 19378
// exit ;
19376: GO 19517
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 428
19392: PUSH
19393: LD_VAR 0 1
19397: EQUAL
19398: PUSH
19399: LD_VAR 0 1
19403: PPUSH
19404: CALL_OW 314
19408: NOT
19409: AND
19410: IFFALSE 19336
// PlaySoundXY ( x , y , PlantMine ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_STRING PlantMine
19424: PPUSH
19425: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19429: LD_VAR 0 2
19433: PPUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 255
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19456: LD_ADDR_EXP 71
19460: PUSH
19461: LD_EXP 71
19465: PPUSH
19466: LD_VAR 0 5
19470: PUSH
19471: LD_EXP 71
19475: PUSH
19476: LD_VAR 0 5
19480: ARRAY
19481: PUSH
19482: LD_INT 1
19484: PLUS
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: LD_VAR 0 2
19494: PUSH
19495: LD_VAR 0 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL 25853 0 3
19508: ST_TO_ADDR
// result := true ;
19509: LD_ADDR_VAR 0 4
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// end ;
19517: LD_VAR 0 4
19521: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
// if not unit in minersList then
19527: LD_VAR 0 1
19531: PUSH
19532: LD_EXP 70
19536: IN
19537: NOT
19538: IFFALSE 19542
// exit ;
19540: GO 19934
// index := GetElementIndex ( minersList , unit ) ;
19542: LD_ADDR_VAR 0 6
19546: PUSH
19547: LD_EXP 70
19551: PPUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL 25638 0 2
19561: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19562: LD_ADDR_VAR 0 5
19566: PUSH
19567: DOUBLE
19568: LD_EXP 71
19572: PUSH
19573: LD_VAR 0 6
19577: ARRAY
19578: INC
19579: ST_TO_ADDR
19580: LD_INT 1
19582: PUSH
19583: FOR_DOWNTO
19584: IFFALSE 19745
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19586: LD_EXP 71
19590: PUSH
19591: LD_VAR 0 6
19595: ARRAY
19596: PUSH
19597: LD_VAR 0 5
19601: ARRAY
19602: PUSH
19603: LD_INT 1
19605: ARRAY
19606: PUSH
19607: LD_VAR 0 2
19611: EQUAL
19612: PUSH
19613: LD_EXP 71
19617: PUSH
19618: LD_VAR 0 6
19622: ARRAY
19623: PUSH
19624: LD_VAR 0 5
19628: ARRAY
19629: PUSH
19630: LD_INT 2
19632: ARRAY
19633: PUSH
19634: LD_VAR 0 3
19638: EQUAL
19639: AND
19640: IFFALSE 19743
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19642: LD_EXP 71
19646: PUSH
19647: LD_VAR 0 6
19651: ARRAY
19652: PUSH
19653: LD_VAR 0 5
19657: ARRAY
19658: PUSH
19659: LD_INT 1
19661: ARRAY
19662: PPUSH
19663: LD_EXP 71
19667: PUSH
19668: LD_VAR 0 6
19672: ARRAY
19673: PUSH
19674: LD_VAR 0 5
19678: ARRAY
19679: PUSH
19680: LD_INT 2
19682: ARRAY
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 255
19693: PPUSH
19694: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19698: LD_ADDR_EXP 71
19702: PUSH
19703: LD_EXP 71
19707: PPUSH
19708: LD_VAR 0 6
19712: PPUSH
19713: LD_EXP 71
19717: PUSH
19718: LD_VAR 0 6
19722: ARRAY
19723: PPUSH
19724: LD_VAR 0 5
19728: PPUSH
19729: CALL_OW 3
19733: PPUSH
19734: CALL_OW 1
19738: ST_TO_ADDR
// exit ;
19739: POP
19740: POP
19741: GO 19934
// end ; end ;
19743: GO 19583
19745: POP
19746: POP
// for i := minerMinesList [ index ] downto 1 do
19747: LD_ADDR_VAR 0 5
19751: PUSH
19752: DOUBLE
19753: LD_EXP 71
19757: PUSH
19758: LD_VAR 0 6
19762: ARRAY
19763: INC
19764: ST_TO_ADDR
19765: LD_INT 1
19767: PUSH
19768: FOR_DOWNTO
19769: IFFALSE 19932
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19771: LD_EXP 71
19775: PUSH
19776: LD_VAR 0 6
19780: ARRAY
19781: PUSH
19782: LD_VAR 0 5
19786: ARRAY
19787: PUSH
19788: LD_INT 1
19790: ARRAY
19791: PPUSH
19792: LD_EXP 71
19796: PUSH
19797: LD_VAR 0 6
19801: ARRAY
19802: PUSH
19803: LD_VAR 0 5
19807: ARRAY
19808: PUSH
19809: LD_INT 2
19811: ARRAY
19812: PPUSH
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_VAR 0 3
19822: PPUSH
19823: CALL_OW 298
19827: PUSH
19828: LD_INT 6
19830: LESS
19831: IFFALSE 19930
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19833: LD_EXP 71
19837: PUSH
19838: LD_VAR 0 6
19842: ARRAY
19843: PUSH
19844: LD_VAR 0 5
19848: ARRAY
19849: PUSH
19850: LD_INT 1
19852: ARRAY
19853: PPUSH
19854: LD_EXP 71
19858: PUSH
19859: LD_VAR 0 6
19863: ARRAY
19864: PUSH
19865: LD_VAR 0 5
19869: ARRAY
19870: PUSH
19871: LD_INT 2
19873: ARRAY
19874: PPUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 255
19884: PPUSH
19885: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19889: LD_ADDR_EXP 71
19893: PUSH
19894: LD_EXP 71
19898: PPUSH
19899: LD_VAR 0 6
19903: PPUSH
19904: LD_EXP 71
19908: PUSH
19909: LD_VAR 0 6
19913: ARRAY
19914: PPUSH
19915: LD_VAR 0 5
19919: PPUSH
19920: CALL_OW 3
19924: PPUSH
19925: CALL_OW 1
19929: ST_TO_ADDR
// end ; end ;
19930: GO 19768
19932: POP
19933: POP
// end ;
19934: LD_VAR 0 4
19938: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
19946: PPUSH
19947: PPUSH
19948: PPUSH
19949: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19950: LD_VAR 0 1
19954: PPUSH
19955: CALL_OW 264
19959: PUSH
19960: LD_INT 81
19962: EQUAL
19963: NOT
19964: PUSH
19965: LD_VAR 0 1
19969: PUSH
19970: LD_EXP 70
19974: IN
19975: NOT
19976: OR
19977: IFFALSE 19981
// exit ;
19979: GO 20303
// index := GetElementIndex ( minersList , unit ) ;
19981: LD_ADDR_VAR 0 6
19985: PUSH
19986: LD_EXP 70
19990: PPUSH
19991: LD_VAR 0 1
19995: PPUSH
19996: CALL 25638 0 2
20000: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20001: LD_ADDR_VAR 0 8
20005: PUSH
20006: LD_EXP 72
20010: PUSH
20011: LD_EXP 71
20015: PUSH
20016: LD_VAR 0 6
20020: ARRAY
20021: MINUS
20022: ST_TO_ADDR
// if not minesFreeAmount then
20023: LD_VAR 0 8
20027: NOT
20028: IFFALSE 20032
// exit ;
20030: GO 20303
// tmp := [ ] ;
20032: LD_ADDR_VAR 0 7
20036: PUSH
20037: EMPTY
20038: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20039: LD_ADDR_VAR 0 5
20043: PUSH
20044: DOUBLE
20045: LD_INT 1
20047: DEC
20048: ST_TO_ADDR
20049: LD_VAR 0 8
20053: PUSH
20054: FOR_TO
20055: IFFALSE 20250
// begin _d := rand ( 0 , 5 ) ;
20057: LD_ADDR_VAR 0 11
20061: PUSH
20062: LD_INT 0
20064: PPUSH
20065: LD_INT 5
20067: PPUSH
20068: CALL_OW 12
20072: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20073: LD_ADDR_VAR 0 12
20077: PUSH
20078: LD_INT 2
20080: PPUSH
20081: LD_INT 6
20083: PPUSH
20084: CALL_OW 12
20088: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20089: LD_ADDR_VAR 0 9
20093: PUSH
20094: LD_VAR 0 2
20098: PPUSH
20099: LD_VAR 0 11
20103: PPUSH
20104: LD_VAR 0 12
20108: PPUSH
20109: CALL_OW 272
20113: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20114: LD_ADDR_VAR 0 10
20118: PUSH
20119: LD_VAR 0 3
20123: PPUSH
20124: LD_VAR 0 11
20128: PPUSH
20129: LD_VAR 0 12
20133: PPUSH
20134: CALL_OW 273
20138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20139: LD_VAR 0 9
20143: PPUSH
20144: LD_VAR 0 10
20148: PPUSH
20149: CALL_OW 488
20153: PUSH
20154: LD_VAR 0 9
20158: PUSH
20159: LD_VAR 0 10
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_VAR 0 7
20172: IN
20173: NOT
20174: AND
20175: PUSH
20176: LD_VAR 0 9
20180: PPUSH
20181: LD_VAR 0 10
20185: PPUSH
20186: CALL_OW 458
20190: NOT
20191: AND
20192: IFFALSE 20234
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20194: LD_ADDR_VAR 0 7
20198: PUSH
20199: LD_VAR 0 7
20203: PPUSH
20204: LD_VAR 0 7
20208: PUSH
20209: LD_INT 1
20211: PLUS
20212: PPUSH
20213: LD_VAR 0 9
20217: PUSH
20218: LD_VAR 0 10
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PPUSH
20227: CALL_OW 1
20231: ST_TO_ADDR
20232: GO 20248
// i := i - 1 ;
20234: LD_ADDR_VAR 0 5
20238: PUSH
20239: LD_VAR 0 5
20243: PUSH
20244: LD_INT 1
20246: MINUS
20247: ST_TO_ADDR
// end ;
20248: GO 20054
20250: POP
20251: POP
// for i in tmp do
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: LD_VAR 0 7
20261: PUSH
20262: FOR_IN
20263: IFFALSE 20301
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_VAR 0 5
20274: PUSH
20275: LD_INT 1
20277: ARRAY
20278: PPUSH
20279: LD_VAR 0 5
20283: PUSH
20284: LD_INT 2
20286: ARRAY
20287: PPUSH
20288: CALL 19247 0 3
20292: NOT
20293: IFFALSE 20299
// exit ;
20295: POP
20296: POP
20297: GO 20303
20299: GO 20262
20301: POP
20302: POP
// end ;
20303: LD_VAR 0 4
20307: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20308: LD_INT 0
20310: PPUSH
20311: PPUSH
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
// if not GetClass ( unit ) = class_sniper then
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 257
20326: PUSH
20327: LD_INT 5
20329: EQUAL
20330: NOT
20331: IFFALSE 20335
// exit ;
20333: GO 20723
// dist := 8 ;
20335: LD_ADDR_VAR 0 5
20339: PUSH
20340: LD_INT 8
20342: ST_TO_ADDR
// viewRange := 12 ;
20343: LD_ADDR_VAR 0 7
20347: PUSH
20348: LD_INT 12
20350: ST_TO_ADDR
// side := GetSide ( unit ) ;
20351: LD_ADDR_VAR 0 6
20355: PUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 255
20365: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20366: LD_INT 61
20368: PPUSH
20369: LD_VAR 0 6
20373: PPUSH
20374: CALL_OW 321
20378: PUSH
20379: LD_INT 2
20381: EQUAL
20382: IFFALSE 20392
// viewRange := 16 ;
20384: LD_ADDR_VAR 0 7
20388: PUSH
20389: LD_INT 16
20391: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20392: LD_VAR 0 1
20396: PPUSH
20397: LD_VAR 0 2
20401: PPUSH
20402: LD_VAR 0 3
20406: PPUSH
20407: CALL_OW 297
20411: PUSH
20412: LD_VAR 0 5
20416: GREATER
20417: IFFALSE 20496
// begin ComMoveXY ( unit , x , y ) ;
20419: LD_VAR 0 1
20423: PPUSH
20424: LD_VAR 0 2
20428: PPUSH
20429: LD_VAR 0 3
20433: PPUSH
20434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20438: LD_INT 35
20440: PPUSH
20441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20445: LD_VAR 0 1
20449: PPUSH
20450: LD_VAR 0 2
20454: PPUSH
20455: LD_VAR 0 3
20459: PPUSH
20460: CALL 57379 0 3
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20723
// until GetDistUnitXY ( unit , x , y ) < dist ;
20469: LD_VAR 0 1
20473: PPUSH
20474: LD_VAR 0 2
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 297
20488: PUSH
20489: LD_VAR 0 5
20493: LESS
20494: IFFALSE 20438
// end ; ComTurnXY ( unit , x , y ) ;
20496: LD_VAR 0 1
20500: PPUSH
20501: LD_VAR 0 2
20505: PPUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: CALL_OW 118
// wait ( 5 ) ;
20515: LD_INT 5
20517: PPUSH
20518: CALL_OW 67
// _d := GetDir ( unit ) ;
20522: LD_ADDR_VAR 0 10
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL_OW 254
20536: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20537: LD_ADDR_VAR 0 8
20541: PUSH
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 250
20551: PPUSH
20552: LD_VAR 0 10
20556: PPUSH
20557: LD_VAR 0 5
20561: PPUSH
20562: CALL_OW 272
20566: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20567: LD_ADDR_VAR 0 9
20571: PUSH
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL_OW 251
20581: PPUSH
20582: LD_VAR 0 10
20586: PPUSH
20587: LD_VAR 0 5
20591: PPUSH
20592: CALL_OW 273
20596: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20597: LD_VAR 0 8
20601: PPUSH
20602: LD_VAR 0 9
20606: PPUSH
20607: CALL_OW 488
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20723
// ComAnimCustom ( unit , 1 ) ;
20616: LD_VAR 0 1
20620: PPUSH
20621: LD_INT 1
20623: PPUSH
20624: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20628: LD_VAR 0 8
20632: PPUSH
20633: LD_VAR 0 9
20637: PPUSH
20638: LD_VAR 0 6
20642: PPUSH
20643: LD_VAR 0 7
20647: PPUSH
20648: CALL_OW 330
// repeat wait ( 1 ) ;
20652: LD_INT 1
20654: PPUSH
20655: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20659: LD_VAR 0 1
20663: PPUSH
20664: CALL_OW 316
20668: PUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL_OW 314
20678: OR
20679: PUSH
20680: LD_VAR 0 1
20684: PPUSH
20685: CALL_OW 302
20689: NOT
20690: OR
20691: PUSH
20692: LD_VAR 0 1
20696: PPUSH
20697: CALL_OW 301
20701: OR
20702: IFFALSE 20652
// RemoveSeeing ( _x , _y , side ) ;
20704: LD_VAR 0 8
20708: PPUSH
20709: LD_VAR 0 9
20713: PPUSH
20714: LD_VAR 0 6
20718: PPUSH
20719: CALL_OW 331
// end ; end_of_file
20723: LD_VAR 0 4
20727: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20728: LD_VAR 0 1
20732: PUSH
20733: LD_INT 200
20735: DOUBLE
20736: GREATEREQUAL
20737: IFFALSE 20745
20739: LD_INT 299
20741: DOUBLE
20742: LESSEQUAL
20743: IFTRUE 20747
20745: GO 20779
20747: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_VAR 0 2
20757: PPUSH
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_VAR 0 4
20767: PPUSH
20768: LD_VAR 0 5
20772: PPUSH
20773: CALL 16210 0 5
20777: GO 20856
20779: LD_INT 300
20781: DOUBLE
20782: GREATEREQUAL
20783: IFFALSE 20791
20785: LD_INT 399
20787: DOUBLE
20788: LESSEQUAL
20789: IFTRUE 20793
20791: GO 20855
20793: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_VAR 0 2
20803: PPUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: LD_VAR 0 4
20813: PPUSH
20814: LD_VAR 0 5
20818: PPUSH
20819: LD_VAR 0 6
20823: PPUSH
20824: LD_VAR 0 7
20828: PPUSH
20829: LD_VAR 0 8
20833: PPUSH
20834: LD_VAR 0 9
20838: PPUSH
20839: LD_VAR 0 10
20843: PPUSH
20844: LD_VAR 0 11
20848: PPUSH
20849: CALL 12535 0 11
20853: GO 20856
20855: POP
// end ;
20856: PPOPN 11
20858: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20859: LD_VAR 0 1
20863: PPUSH
20864: LD_VAR 0 2
20868: PPUSH
20869: LD_VAR 0 3
20873: PPUSH
20874: LD_VAR 0 4
20878: PPUSH
20879: LD_VAR 0 5
20883: PPUSH
20884: CALL 15946 0 5
// end ; end_of_file
20888: PPOPN 5
20890: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
// if exist_mode then
20895: LD_VAR 0 2
20899: IFFALSE 20924
// unit := CreateCharacter ( prefix & ident ) else
20901: LD_ADDR_VAR 0 5
20905: PUSH
20906: LD_VAR 0 3
20910: PUSH
20911: LD_VAR 0 1
20915: STR
20916: PPUSH
20917: CALL_OW 34
20921: ST_TO_ADDR
20922: GO 20939
// unit := NewCharacter ( ident ) ;
20924: LD_ADDR_VAR 0 5
20928: PUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 25
20938: ST_TO_ADDR
// result := unit ;
20939: LD_ADDR_VAR 0 4
20943: PUSH
20944: LD_VAR 0 5
20948: ST_TO_ADDR
// end ;
20949: LD_VAR 0 4
20953: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20954: LD_INT 0
20956: PPUSH
20957: PPUSH
// if not side or not nation then
20958: LD_VAR 0 1
20962: NOT
20963: PUSH
20964: LD_VAR 0 2
20968: NOT
20969: OR
20970: IFFALSE 20974
// exit ;
20972: GO 21742
// case nation of nation_american :
20974: LD_VAR 0 2
20978: PUSH
20979: LD_INT 1
20981: DOUBLE
20982: EQUAL
20983: IFTRUE 20987
20985: GO 21201
20987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20988: LD_ADDR_VAR 0 4
20992: PUSH
20993: LD_INT 35
20995: PUSH
20996: LD_INT 45
20998: PUSH
20999: LD_INT 46
21001: PUSH
21002: LD_INT 47
21004: PUSH
21005: LD_INT 82
21007: PUSH
21008: LD_INT 83
21010: PUSH
21011: LD_INT 84
21013: PUSH
21014: LD_INT 85
21016: PUSH
21017: LD_INT 86
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: LD_INT 6
21028: PUSH
21029: LD_INT 15
21031: PUSH
21032: LD_INT 16
21034: PUSH
21035: LD_INT 7
21037: PUSH
21038: LD_INT 12
21040: PUSH
21041: LD_INT 13
21043: PUSH
21044: LD_INT 10
21046: PUSH
21047: LD_INT 14
21049: PUSH
21050: LD_INT 20
21052: PUSH
21053: LD_INT 21
21055: PUSH
21056: LD_INT 22
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 32
21064: PUSH
21065: LD_INT 27
21067: PUSH
21068: LD_INT 36
21070: PUSH
21071: LD_INT 69
21073: PUSH
21074: LD_INT 39
21076: PUSH
21077: LD_INT 34
21079: PUSH
21080: LD_INT 40
21082: PUSH
21083: LD_INT 48
21085: PUSH
21086: LD_INT 49
21088: PUSH
21089: LD_INT 50
21091: PUSH
21092: LD_INT 51
21094: PUSH
21095: LD_INT 52
21097: PUSH
21098: LD_INT 53
21100: PUSH
21101: LD_INT 54
21103: PUSH
21104: LD_INT 55
21106: PUSH
21107: LD_INT 56
21109: PUSH
21110: LD_INT 57
21112: PUSH
21113: LD_INT 58
21115: PUSH
21116: LD_INT 59
21118: PUSH
21119: LD_INT 60
21121: PUSH
21122: LD_INT 61
21124: PUSH
21125: LD_INT 62
21127: PUSH
21128: LD_INT 80
21130: PUSH
21131: LD_INT 82
21133: PUSH
21134: LD_INT 83
21136: PUSH
21137: LD_INT 84
21139: PUSH
21140: LD_INT 85
21142: PUSH
21143: LD_INT 86
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21666
21201: LD_INT 2
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21435
21209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21210: LD_ADDR_VAR 0 4
21214: PUSH
21215: LD_INT 35
21217: PUSH
21218: LD_INT 45
21220: PUSH
21221: LD_INT 46
21223: PUSH
21224: LD_INT 47
21226: PUSH
21227: LD_INT 82
21229: PUSH
21230: LD_INT 83
21232: PUSH
21233: LD_INT 84
21235: PUSH
21236: LD_INT 85
21238: PUSH
21239: LD_INT 87
21241: PUSH
21242: LD_INT 70
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: LD_INT 11
21250: PUSH
21251: LD_INT 3
21253: PUSH
21254: LD_INT 4
21256: PUSH
21257: LD_INT 5
21259: PUSH
21260: LD_INT 6
21262: PUSH
21263: LD_INT 15
21265: PUSH
21266: LD_INT 18
21268: PUSH
21269: LD_INT 7
21271: PUSH
21272: LD_INT 17
21274: PUSH
21275: LD_INT 8
21277: PUSH
21278: LD_INT 20
21280: PUSH
21281: LD_INT 21
21283: PUSH
21284: LD_INT 22
21286: PUSH
21287: LD_INT 72
21289: PUSH
21290: LD_INT 26
21292: PUSH
21293: LD_INT 69
21295: PUSH
21296: LD_INT 39
21298: PUSH
21299: LD_INT 40
21301: PUSH
21302: LD_INT 41
21304: PUSH
21305: LD_INT 42
21307: PUSH
21308: LD_INT 43
21310: PUSH
21311: LD_INT 48
21313: PUSH
21314: LD_INT 49
21316: PUSH
21317: LD_INT 50
21319: PUSH
21320: LD_INT 51
21322: PUSH
21323: LD_INT 52
21325: PUSH
21326: LD_INT 53
21328: PUSH
21329: LD_INT 54
21331: PUSH
21332: LD_INT 55
21334: PUSH
21335: LD_INT 56
21337: PUSH
21338: LD_INT 60
21340: PUSH
21341: LD_INT 61
21343: PUSH
21344: LD_INT 62
21346: PUSH
21347: LD_INT 66
21349: PUSH
21350: LD_INT 67
21352: PUSH
21353: LD_INT 68
21355: PUSH
21356: LD_INT 81
21358: PUSH
21359: LD_INT 82
21361: PUSH
21362: LD_INT 83
21364: PUSH
21365: LD_INT 84
21367: PUSH
21368: LD_INT 85
21370: PUSH
21371: LD_INT 87
21373: PUSH
21374: LD_INT 88
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: ST_TO_ADDR
21433: GO 21666
21435: LD_INT 3
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21665
21443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21444: LD_ADDR_VAR 0 4
21448: PUSH
21449: LD_INT 46
21451: PUSH
21452: LD_INT 47
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: LD_INT 82
21463: PUSH
21464: LD_INT 83
21466: PUSH
21467: LD_INT 84
21469: PUSH
21470: LD_INT 85
21472: PUSH
21473: LD_INT 86
21475: PUSH
21476: LD_INT 11
21478: PUSH
21479: LD_INT 9
21481: PUSH
21482: LD_INT 20
21484: PUSH
21485: LD_INT 19
21487: PUSH
21488: LD_INT 21
21490: PUSH
21491: LD_INT 24
21493: PUSH
21494: LD_INT 22
21496: PUSH
21497: LD_INT 25
21499: PUSH
21500: LD_INT 28
21502: PUSH
21503: LD_INT 29
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 31
21511: PUSH
21512: LD_INT 37
21514: PUSH
21515: LD_INT 38
21517: PUSH
21518: LD_INT 32
21520: PUSH
21521: LD_INT 27
21523: PUSH
21524: LD_INT 33
21526: PUSH
21527: LD_INT 69
21529: PUSH
21530: LD_INT 39
21532: PUSH
21533: LD_INT 34
21535: PUSH
21536: LD_INT 40
21538: PUSH
21539: LD_INT 71
21541: PUSH
21542: LD_INT 23
21544: PUSH
21545: LD_INT 44
21547: PUSH
21548: LD_INT 48
21550: PUSH
21551: LD_INT 49
21553: PUSH
21554: LD_INT 50
21556: PUSH
21557: LD_INT 51
21559: PUSH
21560: LD_INT 52
21562: PUSH
21563: LD_INT 53
21565: PUSH
21566: LD_INT 54
21568: PUSH
21569: LD_INT 55
21571: PUSH
21572: LD_INT 56
21574: PUSH
21575: LD_INT 57
21577: PUSH
21578: LD_INT 58
21580: PUSH
21581: LD_INT 59
21583: PUSH
21584: LD_INT 63
21586: PUSH
21587: LD_INT 64
21589: PUSH
21590: LD_INT 65
21592: PUSH
21593: LD_INT 82
21595: PUSH
21596: LD_INT 83
21598: PUSH
21599: LD_INT 84
21601: PUSH
21602: LD_INT 85
21604: PUSH
21605: LD_INT 86
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: ST_TO_ADDR
21663: GO 21666
21665: POP
// if state > - 1 and state < 3 then
21666: LD_VAR 0 3
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: GREATER
21675: PUSH
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 3
21683: LESS
21684: AND
21685: IFFALSE 21742
// for i in result do
21687: LD_ADDR_VAR 0 5
21691: PUSH
21692: LD_VAR 0 4
21696: PUSH
21697: FOR_IN
21698: IFFALSE 21740
// if GetTech ( i , side ) <> state then
21700: LD_VAR 0 5
21704: PPUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: CALL_OW 321
21714: PUSH
21715: LD_VAR 0 3
21719: NONEQUAL
21720: IFFALSE 21738
// result := result diff i ;
21722: LD_ADDR_VAR 0 4
21726: PUSH
21727: LD_VAR 0 4
21731: PUSH
21732: LD_VAR 0 5
21736: DIFF
21737: ST_TO_ADDR
21738: GO 21697
21740: POP
21741: POP
// end ;
21742: LD_VAR 0 4
21746: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21747: LD_INT 0
21749: PPUSH
21750: PPUSH
21751: PPUSH
// result := true ;
21752: LD_ADDR_VAR 0 3
21756: PUSH
21757: LD_INT 1
21759: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21760: LD_ADDR_VAR 0 5
21764: PUSH
21765: LD_VAR 0 2
21769: PPUSH
21770: CALL_OW 480
21774: ST_TO_ADDR
// if not tmp then
21775: LD_VAR 0 5
21779: NOT
21780: IFFALSE 21784
// exit ;
21782: GO 21833
// for i in tmp do
21784: LD_ADDR_VAR 0 4
21788: PUSH
21789: LD_VAR 0 5
21793: PUSH
21794: FOR_IN
21795: IFFALSE 21831
// if GetTech ( i , side ) <> state_researched then
21797: LD_VAR 0 4
21801: PPUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: CALL_OW 321
21811: PUSH
21812: LD_INT 2
21814: NONEQUAL
21815: IFFALSE 21829
// begin result := false ;
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// exit ;
21825: POP
21826: POP
21827: GO 21833
// end ;
21829: GO 21794
21831: POP
21832: POP
// end ;
21833: LD_VAR 0 3
21837: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21838: LD_INT 0
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
21850: PPUSH
21851: PPUSH
21852: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21853: LD_VAR 0 1
21857: NOT
21858: PUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 257
21868: PUSH
21869: LD_INT 9
21871: NONEQUAL
21872: OR
21873: IFFALSE 21877
// exit ;
21875: GO 22450
// side := GetSide ( unit ) ;
21877: LD_ADDR_VAR 0 9
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 255
21891: ST_TO_ADDR
// tech_space := tech_spacanom ;
21892: LD_ADDR_VAR 0 12
21896: PUSH
21897: LD_INT 29
21899: ST_TO_ADDR
// tech_time := tech_taurad ;
21900: LD_ADDR_VAR 0 13
21904: PUSH
21905: LD_INT 28
21907: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21908: LD_ADDR_VAR 0 11
21912: PUSH
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL_OW 310
21922: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21923: LD_VAR 0 11
21927: PPUSH
21928: CALL_OW 247
21932: PUSH
21933: LD_INT 2
21935: EQUAL
21936: IFFALSE 21940
// exit ;
21938: GO 22450
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21940: LD_ADDR_VAR 0 8
21944: PUSH
21945: LD_INT 81
21947: PUSH
21948: LD_VAR 0 9
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 3
21959: PUSH
21960: LD_INT 21
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PPUSH
21978: CALL_OW 69
21982: ST_TO_ADDR
// if not tmp then
21983: LD_VAR 0 8
21987: NOT
21988: IFFALSE 21992
// exit ;
21990: GO 22450
// if in_unit then
21992: LD_VAR 0 11
21996: IFFALSE 22020
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21998: LD_ADDR_VAR 0 10
22002: PUSH
22003: LD_VAR 0 8
22007: PPUSH
22008: LD_VAR 0 11
22012: PPUSH
22013: CALL_OW 74
22017: ST_TO_ADDR
22018: GO 22040
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22020: LD_ADDR_VAR 0 10
22024: PUSH
22025: LD_VAR 0 8
22029: PPUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 74
22039: ST_TO_ADDR
// if not enemy then
22040: LD_VAR 0 10
22044: NOT
22045: IFFALSE 22049
// exit ;
22047: GO 22450
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22049: LD_VAR 0 11
22053: PUSH
22054: LD_VAR 0 11
22058: PPUSH
22059: LD_VAR 0 10
22063: PPUSH
22064: CALL_OW 296
22068: PUSH
22069: LD_INT 13
22071: GREATER
22072: AND
22073: PUSH
22074: LD_VAR 0 1
22078: PPUSH
22079: LD_VAR 0 10
22083: PPUSH
22084: CALL_OW 296
22088: PUSH
22089: LD_INT 12
22091: GREATER
22092: OR
22093: IFFALSE 22097
// exit ;
22095: GO 22450
// missile := [ 1 ] ;
22097: LD_ADDR_VAR 0 14
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22108: LD_VAR 0 9
22112: PPUSH
22113: LD_VAR 0 12
22117: PPUSH
22118: CALL_OW 325
22122: IFFALSE 22151
// missile := Replace ( missile , missile + 1 , 2 ) ;
22124: LD_ADDR_VAR 0 14
22128: PUSH
22129: LD_VAR 0 14
22133: PPUSH
22134: LD_VAR 0 14
22138: PUSH
22139: LD_INT 1
22141: PLUS
22142: PPUSH
22143: LD_INT 2
22145: PPUSH
22146: CALL_OW 1
22150: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22151: LD_VAR 0 9
22155: PPUSH
22156: LD_VAR 0 13
22160: PPUSH
22161: CALL_OW 325
22165: PUSH
22166: LD_VAR 0 10
22170: PPUSH
22171: CALL_OW 255
22175: PPUSH
22176: LD_VAR 0 13
22180: PPUSH
22181: CALL_OW 325
22185: NOT
22186: AND
22187: IFFALSE 22216
// missile := Replace ( missile , missile + 1 , 3 ) ;
22189: LD_ADDR_VAR 0 14
22193: PUSH
22194: LD_VAR 0 14
22198: PPUSH
22199: LD_VAR 0 14
22203: PUSH
22204: LD_INT 1
22206: PLUS
22207: PPUSH
22208: LD_INT 3
22210: PPUSH
22211: CALL_OW 1
22215: ST_TO_ADDR
// if missile < 2 then
22216: LD_VAR 0 14
22220: PUSH
22221: LD_INT 2
22223: LESS
22224: IFFALSE 22228
// exit ;
22226: GO 22450
// x := GetX ( enemy ) ;
22228: LD_ADDR_VAR 0 4
22232: PUSH
22233: LD_VAR 0 10
22237: PPUSH
22238: CALL_OW 250
22242: ST_TO_ADDR
// y := GetY ( enemy ) ;
22243: LD_ADDR_VAR 0 5
22247: PUSH
22248: LD_VAR 0 10
22252: PPUSH
22253: CALL_OW 251
22257: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22258: LD_ADDR_VAR 0 6
22262: PUSH
22263: LD_VAR 0 4
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: CALL_OW 12
22279: PLUS
22280: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22281: LD_ADDR_VAR 0 7
22285: PUSH
22286: LD_VAR 0 5
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: CALL_OW 12
22302: PLUS
22303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22304: LD_VAR 0 6
22308: PPUSH
22309: LD_VAR 0 7
22313: PPUSH
22314: CALL_OW 488
22318: NOT
22319: IFFALSE 22341
// begin _x := x ;
22321: LD_ADDR_VAR 0 6
22325: PUSH
22326: LD_VAR 0 4
22330: ST_TO_ADDR
// _y := y ;
22331: LD_ADDR_VAR 0 7
22335: PUSH
22336: LD_VAR 0 5
22340: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22341: LD_ADDR_VAR 0 3
22345: PUSH
22346: LD_INT 1
22348: PPUSH
22349: LD_VAR 0 14
22353: PPUSH
22354: CALL_OW 12
22358: ST_TO_ADDR
// case i of 1 :
22359: LD_VAR 0 3
22363: PUSH
22364: LD_INT 1
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22389
22372: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22373: LD_VAR 0 1
22377: PPUSH
22378: LD_VAR 0 10
22382: PPUSH
22383: CALL_OW 115
22387: GO 22450
22389: LD_INT 2
22391: DOUBLE
22392: EQUAL
22393: IFTRUE 22397
22395: GO 22419
22397: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22398: LD_VAR 0 1
22402: PPUSH
22403: LD_VAR 0 6
22407: PPUSH
22408: LD_VAR 0 7
22412: PPUSH
22413: CALL_OW 153
22417: GO 22450
22419: LD_INT 3
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22449
22427: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22428: LD_VAR 0 1
22432: PPUSH
22433: LD_VAR 0 6
22437: PPUSH
22438: LD_VAR 0 7
22442: PPUSH
22443: CALL_OW 154
22447: GO 22450
22449: POP
// end ;
22450: LD_VAR 0 2
22454: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22455: LD_INT 0
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
22461: PPUSH
22462: PPUSH
// if not unit or not building then
22463: LD_VAR 0 1
22467: NOT
22468: PUSH
22469: LD_VAR 0 2
22473: NOT
22474: OR
22475: IFFALSE 22479
// exit ;
22477: GO 22637
// x := GetX ( building ) ;
22479: LD_ADDR_VAR 0 5
22483: PUSH
22484: LD_VAR 0 2
22488: PPUSH
22489: CALL_OW 250
22493: ST_TO_ADDR
// y := GetY ( building ) ;
22494: LD_ADDR_VAR 0 6
22498: PUSH
22499: LD_VAR 0 2
22503: PPUSH
22504: CALL_OW 251
22508: ST_TO_ADDR
// for i = 0 to 5 do
22509: LD_ADDR_VAR 0 4
22513: PUSH
22514: DOUBLE
22515: LD_INT 0
22517: DEC
22518: ST_TO_ADDR
22519: LD_INT 5
22521: PUSH
22522: FOR_TO
22523: IFFALSE 22635
// begin _x := ShiftX ( x , i , 3 ) ;
22525: LD_ADDR_VAR 0 7
22529: PUSH
22530: LD_VAR 0 5
22534: PPUSH
22535: LD_VAR 0 4
22539: PPUSH
22540: LD_INT 3
22542: PPUSH
22543: CALL_OW 272
22547: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22548: LD_ADDR_VAR 0 8
22552: PUSH
22553: LD_VAR 0 6
22557: PPUSH
22558: LD_VAR 0 4
22562: PPUSH
22563: LD_INT 3
22565: PPUSH
22566: CALL_OW 273
22570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22571: LD_VAR 0 7
22575: PPUSH
22576: LD_VAR 0 8
22580: PPUSH
22581: CALL_OW 488
22585: NOT
22586: IFFALSE 22590
// continue ;
22588: GO 22522
// if HexInfo ( _x , _y ) = 0 then
22590: LD_VAR 0 7
22594: PPUSH
22595: LD_VAR 0 8
22599: PPUSH
22600: CALL_OW 428
22604: PUSH
22605: LD_INT 0
22607: EQUAL
22608: IFFALSE 22633
// begin ComMoveXY ( unit , _x , _y ) ;
22610: LD_VAR 0 1
22614: PPUSH
22615: LD_VAR 0 7
22619: PPUSH
22620: LD_VAR 0 8
22624: PPUSH
22625: CALL_OW 111
// exit ;
22629: POP
22630: POP
22631: GO 22637
// end ; end ;
22633: GO 22522
22635: POP
22636: POP
// end ;
22637: LD_VAR 0 3
22641: RET
// export function ScanBase ( side , base_area ) ; begin
22642: LD_INT 0
22644: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22645: LD_ADDR_VAR 0 3
22649: PUSH
22650: LD_VAR 0 2
22654: PPUSH
22655: LD_INT 81
22657: PUSH
22658: LD_VAR 0 1
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 70
22671: ST_TO_ADDR
// end ;
22672: LD_VAR 0 3
22676: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
22682: PPUSH
// result := false ;
22683: LD_ADDR_VAR 0 2
22687: PUSH
22688: LD_INT 0
22690: ST_TO_ADDR
// side := GetSide ( unit ) ;
22691: LD_ADDR_VAR 0 3
22695: PUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 255
22705: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22706: LD_ADDR_VAR 0 4
22710: PUSH
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 248
22720: ST_TO_ADDR
// case nat of 1 :
22721: LD_VAR 0 4
22725: PUSH
22726: LD_INT 1
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22745
22734: POP
// tech := tech_lassight ; 2 :
22735: LD_ADDR_VAR 0 5
22739: PUSH
22740: LD_INT 12
22742: ST_TO_ADDR
22743: GO 22784
22745: LD_INT 2
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22764
22753: POP
// tech := tech_mortar ; 3 :
22754: LD_ADDR_VAR 0 5
22758: PUSH
22759: LD_INT 41
22761: ST_TO_ADDR
22762: GO 22784
22764: LD_INT 3
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// tech := tech_bazooka ; end ;
22773: LD_ADDR_VAR 0 5
22777: PUSH
22778: LD_INT 44
22780: ST_TO_ADDR
22781: GO 22784
22783: POP
// if Researched ( side , tech ) then
22784: LD_VAR 0 3
22788: PPUSH
22789: LD_VAR 0 5
22793: PPUSH
22794: CALL_OW 325
22798: IFFALSE 22825
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22800: LD_ADDR_VAR 0 2
22804: PUSH
22805: LD_INT 5
22807: PUSH
22808: LD_INT 8
22810: PUSH
22811: LD_INT 9
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: LD_VAR 0 4
22823: ARRAY
22824: ST_TO_ADDR
// end ;
22825: LD_VAR 0 2
22829: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
22834: PPUSH
// if not mines then
22835: LD_VAR 0 2
22839: NOT
22840: IFFALSE 22844
// exit ;
22842: GO 22988
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22844: LD_ADDR_VAR 0 5
22848: PUSH
22849: LD_INT 81
22851: PUSH
22852: LD_VAR 0 1
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 21
22866: PUSH
22867: LD_INT 3
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 69
22886: ST_TO_ADDR
// for i in mines do
22887: LD_ADDR_VAR 0 4
22891: PUSH
22892: LD_VAR 0 2
22896: PUSH
22897: FOR_IN
22898: IFFALSE 22986
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22900: LD_VAR 0 4
22904: PUSH
22905: LD_INT 1
22907: ARRAY
22908: PPUSH
22909: LD_VAR 0 4
22913: PUSH
22914: LD_INT 2
22916: ARRAY
22917: PPUSH
22918: CALL_OW 458
22922: NOT
22923: IFFALSE 22927
// continue ;
22925: GO 22897
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22927: LD_VAR 0 4
22931: PUSH
22932: LD_INT 1
22934: ARRAY
22935: PPUSH
22936: LD_VAR 0 4
22940: PUSH
22941: LD_INT 2
22943: ARRAY
22944: PPUSH
22945: CALL_OW 428
22949: PUSH
22950: LD_VAR 0 5
22954: IN
22955: IFFALSE 22984
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22957: LD_VAR 0 4
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: LD_VAR 0 4
22970: PUSH
22971: LD_INT 2
22973: ARRAY
22974: PPUSH
22975: LD_VAR 0 1
22979: PPUSH
22980: CALL_OW 456
// end ;
22984: GO 22897
22986: POP
22987: POP
// end ;
22988: LD_VAR 0 3
22992: RET
// export function Count ( array ) ; begin
22993: LD_INT 0
22995: PPUSH
// result := array + 0 ;
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_VAR 0 1
23005: PUSH
23006: LD_INT 0
23008: PLUS
23009: ST_TO_ADDR
// end ;
23010: LD_VAR 0 2
23014: RET
// export function IsEmpty ( building ) ; begin
23015: LD_INT 0
23017: PPUSH
// if not building then
23018: LD_VAR 0 1
23022: NOT
23023: IFFALSE 23027
// exit ;
23025: GO 23070
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23027: LD_ADDR_VAR 0 2
23031: PUSH
23032: LD_VAR 0 1
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_VAR 0 1
23044: PPUSH
23045: CALL_OW 255
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 58
23056: PUSH
23057: EMPTY
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PPUSH
23064: CALL_OW 69
23068: IN
23069: ST_TO_ADDR
// end ;
23070: LD_VAR 0 2
23074: RET
// export function IsNotFull ( building ) ; var places ; begin
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
// if not building then
23079: LD_VAR 0 1
23083: NOT
23084: IFFALSE 23088
// exit ;
23086: GO 23116
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23088: LD_ADDR_VAR 0 2
23092: PUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: LD_INT 3
23100: PUSH
23101: LD_INT 62
23103: PUSH
23104: EMPTY
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PPUSH
23111: CALL_OW 72
23115: ST_TO_ADDR
// end ;
23116: LD_VAR 0 2
23120: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23121: LD_INT 0
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
// tmp := [ ] ;
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: EMPTY
23133: ST_TO_ADDR
// list := [ ] ;
23134: LD_ADDR_VAR 0 5
23138: PUSH
23139: EMPTY
23140: ST_TO_ADDR
// for i = 16 to 25 do
23141: LD_ADDR_VAR 0 4
23145: PUSH
23146: DOUBLE
23147: LD_INT 16
23149: DEC
23150: ST_TO_ADDR
23151: LD_INT 25
23153: PUSH
23154: FOR_TO
23155: IFFALSE 23228
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: LD_VAR 0 3
23166: PUSH
23167: LD_INT 22
23169: PUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL_OW 255
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 91
23186: PUSH
23187: LD_VAR 0 1
23191: PUSH
23192: LD_INT 6
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_VAR 0 4
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ADD
23225: ST_TO_ADDR
23226: GO 23154
23228: POP
23229: POP
// for i = 1 to tmp do
23230: LD_ADDR_VAR 0 4
23234: PUSH
23235: DOUBLE
23236: LD_INT 1
23238: DEC
23239: ST_TO_ADDR
23240: LD_VAR 0 3
23244: PUSH
23245: FOR_TO
23246: IFFALSE 23334
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23248: LD_ADDR_VAR 0 5
23252: PUSH
23253: LD_VAR 0 5
23257: PUSH
23258: LD_VAR 0 3
23262: PUSH
23263: LD_VAR 0 4
23267: ARRAY
23268: PPUSH
23269: CALL_OW 266
23273: PUSH
23274: LD_VAR 0 3
23278: PUSH
23279: LD_VAR 0 4
23283: ARRAY
23284: PPUSH
23285: CALL_OW 250
23289: PUSH
23290: LD_VAR 0 3
23294: PUSH
23295: LD_VAR 0 4
23299: ARRAY
23300: PPUSH
23301: CALL_OW 251
23305: PUSH
23306: LD_VAR 0 3
23310: PUSH
23311: LD_VAR 0 4
23315: ARRAY
23316: PPUSH
23317: CALL_OW 254
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: ADD
23331: ST_TO_ADDR
23332: GO 23245
23334: POP
23335: POP
// result := list ;
23336: LD_ADDR_VAR 0 2
23340: PUSH
23341: LD_VAR 0 5
23345: ST_TO_ADDR
// end ;
23346: LD_VAR 0 2
23350: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23351: LD_INT 0
23353: PPUSH
23354: PPUSH
23355: PPUSH
23356: PPUSH
23357: PPUSH
23358: PPUSH
23359: PPUSH
// if not factory then
23360: LD_VAR 0 1
23364: NOT
23365: IFFALSE 23369
// exit ;
23367: GO 23962
// if control = control_apeman then
23369: LD_VAR 0 4
23373: PUSH
23374: LD_INT 5
23376: EQUAL
23377: IFFALSE 23486
// begin tmp := UnitsInside ( factory ) ;
23379: LD_ADDR_VAR 0 8
23383: PUSH
23384: LD_VAR 0 1
23388: PPUSH
23389: CALL_OW 313
23393: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23394: LD_VAR 0 8
23398: PPUSH
23399: LD_INT 25
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PPUSH
23409: CALL_OW 72
23413: NOT
23414: IFFALSE 23424
// control := control_manual ;
23416: LD_ADDR_VAR 0 4
23420: PUSH
23421: LD_INT 1
23423: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23424: LD_ADDR_VAR 0 8
23428: PUSH
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL 23121 0 1
23438: ST_TO_ADDR
// if tmp then
23439: LD_VAR 0 8
23443: IFFALSE 23486
// begin for i in tmp do
23445: LD_ADDR_VAR 0 7
23449: PUSH
23450: LD_VAR 0 8
23454: PUSH
23455: FOR_IN
23456: IFFALSE 23484
// if i [ 1 ] = b_ext_radio then
23458: LD_VAR 0 7
23462: PUSH
23463: LD_INT 1
23465: ARRAY
23466: PUSH
23467: LD_INT 22
23469: EQUAL
23470: IFFALSE 23482
// begin control := control_remote ;
23472: LD_ADDR_VAR 0 4
23476: PUSH
23477: LD_INT 2
23479: ST_TO_ADDR
// break ;
23480: GO 23484
// end ;
23482: GO 23455
23484: POP
23485: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23486: LD_VAR 0 1
23490: PPUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_VAR 0 5
23510: PPUSH
23511: CALL_OW 448
23515: IFFALSE 23550
// begin result := [ chassis , engine , control , weapon ] ;
23517: LD_ADDR_VAR 0 6
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: LD_VAR 0 3
23531: PUSH
23532: LD_VAR 0 4
23536: PUSH
23537: LD_VAR 0 5
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: ST_TO_ADDR
// exit ;
23548: GO 23962
// end ; _chassis := AvailableChassisList ( factory ) ;
23550: LD_ADDR_VAR 0 9
23554: PUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 475
23564: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23565: LD_ADDR_VAR 0 11
23569: PUSH
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 476
23579: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23580: LD_ADDR_VAR 0 12
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 477
23594: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23595: LD_ADDR_VAR 0 10
23599: PUSH
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 478
23609: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23610: LD_VAR 0 9
23614: NOT
23615: PUSH
23616: LD_VAR 0 11
23620: NOT
23621: OR
23622: PUSH
23623: LD_VAR 0 12
23627: NOT
23628: OR
23629: PUSH
23630: LD_VAR 0 10
23634: NOT
23635: OR
23636: IFFALSE 23671
// begin result := [ chassis , engine , control , weapon ] ;
23638: LD_ADDR_VAR 0 6
23642: PUSH
23643: LD_VAR 0 2
23647: PUSH
23648: LD_VAR 0 3
23652: PUSH
23653: LD_VAR 0 4
23657: PUSH
23658: LD_VAR 0 5
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: ST_TO_ADDR
// exit ;
23669: GO 23962
// end ; if not chassis in _chassis then
23671: LD_VAR 0 2
23675: PUSH
23676: LD_VAR 0 9
23680: IN
23681: NOT
23682: IFFALSE 23708
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23684: LD_ADDR_VAR 0 2
23688: PUSH
23689: LD_VAR 0 9
23693: PUSH
23694: LD_INT 1
23696: PPUSH
23697: LD_VAR 0 9
23701: PPUSH
23702: CALL_OW 12
23706: ARRAY
23707: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23708: LD_VAR 0 2
23712: PPUSH
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL 23967 0 2
23722: NOT
23723: IFFALSE 23782
// repeat engine := _engine [ 1 ] ;
23725: LD_ADDR_VAR 0 3
23729: PUSH
23730: LD_VAR 0 11
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23739: LD_ADDR_VAR 0 11
23743: PUSH
23744: LD_VAR 0 11
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 3
23756: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL 23967 0 2
23771: PUSH
23772: LD_VAR 0 11
23776: PUSH
23777: EMPTY
23778: EQUAL
23779: OR
23780: IFFALSE 23725
// if not control in _control then
23782: LD_VAR 0 4
23786: PUSH
23787: LD_VAR 0 12
23791: IN
23792: NOT
23793: IFFALSE 23819
// control := _control [ rand ( 1 , _control ) ] ;
23795: LD_ADDR_VAR 0 4
23799: PUSH
23800: LD_VAR 0 12
23804: PUSH
23805: LD_INT 1
23807: PPUSH
23808: LD_VAR 0 12
23812: PPUSH
23813: CALL_OW 12
23817: ARRAY
23818: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23819: LD_VAR 0 2
23823: PPUSH
23824: LD_VAR 0 5
23828: PPUSH
23829: CALL 24187 0 2
23833: NOT
23834: IFFALSE 23893
// repeat weapon := _weapon [ 1 ] ;
23836: LD_ADDR_VAR 0 5
23840: PUSH
23841: LD_VAR 0 10
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23850: LD_ADDR_VAR 0 10
23854: PUSH
23855: LD_VAR 0 10
23859: PPUSH
23860: LD_INT 1
23862: PPUSH
23863: CALL_OW 3
23867: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 5
23877: PPUSH
23878: CALL 24187 0 2
23882: PUSH
23883: LD_VAR 0 10
23887: PUSH
23888: EMPTY
23889: EQUAL
23890: OR
23891: IFFALSE 23836
// result := [ ] ;
23893: LD_ADDR_VAR 0 6
23897: PUSH
23898: EMPTY
23899: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23900: LD_VAR 0 1
23904: PPUSH
23905: LD_VAR 0 2
23909: PPUSH
23910: LD_VAR 0 3
23914: PPUSH
23915: LD_VAR 0 4
23919: PPUSH
23920: LD_VAR 0 5
23924: PPUSH
23925: CALL_OW 448
23929: IFFALSE 23962
// result := [ chassis , engine , control , weapon ] ;
23931: LD_ADDR_VAR 0 6
23935: PUSH
23936: LD_VAR 0 2
23940: PUSH
23941: LD_VAR 0 3
23945: PUSH
23946: LD_VAR 0 4
23950: PUSH
23951: LD_VAR 0 5
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
// end ;
23962: LD_VAR 0 6
23966: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23967: LD_INT 0
23969: PPUSH
// if not chassis or not engine then
23970: LD_VAR 0 1
23974: NOT
23975: PUSH
23976: LD_VAR 0 2
23980: NOT
23981: OR
23982: IFFALSE 23986
// exit ;
23984: GO 24182
// case engine of engine_solar :
23986: LD_VAR 0 2
23990: PUSH
23991: LD_INT 2
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24037
23999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24000: LD_ADDR_VAR 0 3
24004: PUSH
24005: LD_INT 11
24007: PUSH
24008: LD_INT 12
24010: PUSH
24011: LD_INT 13
24013: PUSH
24014: LD_INT 14
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: ST_TO_ADDR
24035: GO 24166
24037: LD_INT 1
24039: DOUBLE
24040: EQUAL
24041: IFTRUE 24045
24043: GO 24107
24045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24046: LD_ADDR_VAR 0 3
24050: PUSH
24051: LD_INT 11
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: LD_INT 13
24059: PUSH
24060: LD_INT 14
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 3
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: LD_INT 5
24077: PUSH
24078: LD_INT 21
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_INT 24
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24166
24107: LD_INT 3
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24165
24115: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24116: LD_ADDR_VAR 0 3
24120: PUSH
24121: LD_INT 13
24123: PUSH
24124: LD_INT 14
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 3
24132: PUSH
24133: LD_INT 4
24135: PUSH
24136: LD_INT 5
24138: PUSH
24139: LD_INT 21
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_INT 23
24147: PUSH
24148: LD_INT 24
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: ST_TO_ADDR
24163: GO 24166
24165: POP
// result := ( chassis in result ) ;
24166: LD_ADDR_VAR 0 3
24170: PUSH
24171: LD_VAR 0 1
24175: PUSH
24176: LD_VAR 0 3
24180: IN
24181: ST_TO_ADDR
// end ;
24182: LD_VAR 0 3
24186: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24187: LD_INT 0
24189: PPUSH
// if not chassis or not weapon then
24190: LD_VAR 0 1
24194: NOT
24195: PUSH
24196: LD_VAR 0 2
24200: NOT
24201: OR
24202: IFFALSE 24206
// exit ;
24204: GO 25266
// case weapon of us_machine_gun :
24206: LD_VAR 0 2
24210: PUSH
24211: LD_INT 2
24213: DOUBLE
24214: EQUAL
24215: IFTRUE 24219
24217: GO 24249
24219: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: LD_INT 4
24236: PUSH
24237: LD_INT 5
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 25250
24249: LD_INT 3
24251: DOUBLE
24252: EQUAL
24253: IFTRUE 24257
24255: GO 24287
24257: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 4
24274: PUSH
24275: LD_INT 5
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 25250
24287: LD_INT 11
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24325
24295: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: LD_INT 3
24309: PUSH
24310: LD_INT 4
24312: PUSH
24313: LD_INT 5
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: ST_TO_ADDR
24323: GO 25250
24325: LD_INT 4
24327: DOUBLE
24328: EQUAL
24329: IFTRUE 24333
24331: GO 24359
24333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24334: LD_ADDR_VAR 0 3
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: LD_INT 4
24347: PUSH
24348: LD_INT 5
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: ST_TO_ADDR
24357: GO 25250
24359: LD_INT 5
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24393
24367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24368: LD_ADDR_VAR 0 3
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: LD_INT 4
24381: PUSH
24382: LD_INT 5
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: ST_TO_ADDR
24391: GO 25250
24393: LD_INT 9
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24427
24401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 3
24412: PUSH
24413: LD_INT 4
24415: PUSH
24416: LD_INT 5
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: ST_TO_ADDR
24425: GO 25250
24427: LD_INT 7
24429: DOUBLE
24430: EQUAL
24431: IFTRUE 24435
24433: GO 24461
24435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24436: LD_ADDR_VAR 0 3
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: LD_INT 4
24449: PUSH
24450: LD_INT 5
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
24459: GO 25250
24461: LD_INT 12
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24495
24469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24470: LD_ADDR_VAR 0 3
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 3
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: ST_TO_ADDR
24493: GO 25250
24495: LD_INT 13
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24503
24501: GO 24529
24503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24504: LD_ADDR_VAR 0 3
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: LD_INT 3
24514: PUSH
24515: LD_INT 4
24517: PUSH
24518: LD_INT 5
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: ST_TO_ADDR
24527: GO 25250
24529: LD_INT 14
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24555
24537: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_INT 4
24545: PUSH
24546: LD_INT 5
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: ST_TO_ADDR
24553: GO 25250
24555: LD_INT 6
24557: DOUBLE
24558: EQUAL
24559: IFTRUE 24563
24561: GO 24581
24563: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24564: LD_ADDR_VAR 0 3
24568: PUSH
24569: LD_INT 4
24571: PUSH
24572: LD_INT 5
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: ST_TO_ADDR
24579: GO 25250
24581: LD_INT 10
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 24607
24589: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24590: LD_ADDR_VAR 0 3
24594: PUSH
24595: LD_INT 4
24597: PUSH
24598: LD_INT 5
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: ST_TO_ADDR
24605: GO 25250
24607: LD_INT 22
24609: DOUBLE
24610: EQUAL
24611: IFTRUE 24615
24613: GO 24641
24615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24616: LD_ADDR_VAR 0 3
24620: PUSH
24621: LD_INT 11
24623: PUSH
24624: LD_INT 12
24626: PUSH
24627: LD_INT 13
24629: PUSH
24630: LD_INT 14
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: ST_TO_ADDR
24639: GO 25250
24641: LD_INT 23
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24675
24649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 11
24657: PUSH
24658: LD_INT 12
24660: PUSH
24661: LD_INT 13
24663: PUSH
24664: LD_INT 14
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: ST_TO_ADDR
24673: GO 25250
24675: LD_INT 24
24677: DOUBLE
24678: EQUAL
24679: IFTRUE 24683
24681: GO 24709
24683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_INT 11
24691: PUSH
24692: LD_INT 12
24694: PUSH
24695: LD_INT 13
24697: PUSH
24698: LD_INT 14
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: ST_TO_ADDR
24707: GO 25250
24709: LD_INT 30
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24743
24717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_INT 11
24725: PUSH
24726: LD_INT 12
24728: PUSH
24729: LD_INT 13
24731: PUSH
24732: LD_INT 14
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
24741: GO 25250
24743: LD_INT 25
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24769
24751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: LD_INT 13
24759: PUSH
24760: LD_INT 14
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: ST_TO_ADDR
24767: GO 25250
24769: LD_INT 27
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24795
24777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24778: LD_ADDR_VAR 0 3
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 14
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 25250
24795: LD_INT 92
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24829
24803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 13
24817: PUSH
24818: LD_INT 14
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: ST_TO_ADDR
24827: GO 25250
24829: LD_INT 28
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24855
24837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_INT 13
24845: PUSH
24846: LD_INT 14
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: ST_TO_ADDR
24853: GO 25250
24855: LD_INT 29
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24881
24863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: LD_INT 14
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: ST_TO_ADDR
24879: GO 25250
24881: LD_INT 31
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 24907
24889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24890: LD_ADDR_VAR 0 3
24894: PUSH
24895: LD_INT 13
24897: PUSH
24898: LD_INT 14
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: ST_TO_ADDR
24905: GO 25250
24907: LD_INT 26
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24933
24915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_INT 13
24923: PUSH
24924: LD_INT 14
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: ST_TO_ADDR
24931: GO 25250
24933: LD_INT 42
24935: DOUBLE
24936: EQUAL
24937: IFTRUE 24941
24939: GO 24967
24941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 21
24949: PUSH
24950: LD_INT 22
24952: PUSH
24953: LD_INT 23
24955: PUSH
24956: LD_INT 24
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: ST_TO_ADDR
24965: GO 25250
24967: LD_INT 43
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25001
24975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24976: LD_ADDR_VAR 0 3
24980: PUSH
24981: LD_INT 21
24983: PUSH
24984: LD_INT 22
24986: PUSH
24987: LD_INT 23
24989: PUSH
24990: LD_INT 24
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: ST_TO_ADDR
24999: GO 25250
25001: LD_INT 44
25003: DOUBLE
25004: EQUAL
25005: IFTRUE 25009
25007: GO 25035
25009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_INT 23
25023: PUSH
25024: LD_INT 24
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
25033: GO 25250
25035: LD_INT 45
25037: DOUBLE
25038: EQUAL
25039: IFTRUE 25043
25041: GO 25069
25043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25044: LD_ADDR_VAR 0 3
25048: PUSH
25049: LD_INT 21
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_INT 23
25057: PUSH
25058: LD_INT 24
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: ST_TO_ADDR
25067: GO 25250
25069: LD_INT 49
25071: DOUBLE
25072: EQUAL
25073: IFTRUE 25077
25075: GO 25103
25077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: LD_INT 21
25085: PUSH
25086: LD_INT 22
25088: PUSH
25089: LD_INT 23
25091: PUSH
25092: LD_INT 24
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: ST_TO_ADDR
25101: GO 25250
25103: LD_INT 51
25105: DOUBLE
25106: EQUAL
25107: IFTRUE 25111
25109: GO 25137
25111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25112: LD_ADDR_VAR 0 3
25116: PUSH
25117: LD_INT 21
25119: PUSH
25120: LD_INT 22
25122: PUSH
25123: LD_INT 23
25125: PUSH
25126: LD_INT 24
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: ST_TO_ADDR
25135: GO 25250
25137: LD_INT 52
25139: DOUBLE
25140: EQUAL
25141: IFTRUE 25145
25143: GO 25171
25145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25146: LD_ADDR_VAR 0 3
25150: PUSH
25151: LD_INT 21
25153: PUSH
25154: LD_INT 22
25156: PUSH
25157: LD_INT 23
25159: PUSH
25160: LD_INT 24
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: ST_TO_ADDR
25169: GO 25250
25171: LD_INT 53
25173: DOUBLE
25174: EQUAL
25175: IFTRUE 25179
25177: GO 25197
25179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 23
25187: PUSH
25188: LD_INT 24
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: ST_TO_ADDR
25195: GO 25250
25197: LD_INT 46
25199: DOUBLE
25200: EQUAL
25201: IFTRUE 25205
25203: GO 25223
25205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25206: LD_ADDR_VAR 0 3
25210: PUSH
25211: LD_INT 23
25213: PUSH
25214: LD_INT 24
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: ST_TO_ADDR
25221: GO 25250
25223: LD_INT 47
25225: DOUBLE
25226: EQUAL
25227: IFTRUE 25231
25229: GO 25249
25231: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25232: LD_ADDR_VAR 0 3
25236: PUSH
25237: LD_INT 23
25239: PUSH
25240: LD_INT 24
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: ST_TO_ADDR
25247: GO 25250
25249: POP
// result := ( chassis in result ) ;
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_VAR 0 1
25259: PUSH
25260: LD_VAR 0 3
25264: IN
25265: ST_TO_ADDR
// end ;
25266: LD_VAR 0 3
25270: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
25279: PPUSH
// result := array ;
25280: LD_ADDR_VAR 0 5
25284: PUSH
25285: LD_VAR 0 1
25289: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25290: LD_VAR 0 1
25294: NOT
25295: PUSH
25296: LD_VAR 0 2
25300: NOT
25301: OR
25302: PUSH
25303: LD_VAR 0 3
25307: NOT
25308: OR
25309: PUSH
25310: LD_VAR 0 2
25314: PUSH
25315: LD_VAR 0 1
25319: GREATER
25320: OR
25321: PUSH
25322: LD_VAR 0 3
25326: PUSH
25327: LD_VAR 0 1
25331: GREATER
25332: OR
25333: IFFALSE 25337
// exit ;
25335: GO 25633
// if direction then
25337: LD_VAR 0 4
25341: IFFALSE 25405
// begin d := 1 ;
25343: LD_ADDR_VAR 0 9
25347: PUSH
25348: LD_INT 1
25350: ST_TO_ADDR
// if i_from > i_to then
25351: LD_VAR 0 2
25355: PUSH
25356: LD_VAR 0 3
25360: GREATER
25361: IFFALSE 25387
// length := ( array - i_from ) + i_to else
25363: LD_ADDR_VAR 0 11
25367: PUSH
25368: LD_VAR 0 1
25372: PUSH
25373: LD_VAR 0 2
25377: MINUS
25378: PUSH
25379: LD_VAR 0 3
25383: PLUS
25384: ST_TO_ADDR
25385: GO 25403
// length := i_to - i_from ;
25387: LD_ADDR_VAR 0 11
25391: PUSH
25392: LD_VAR 0 3
25396: PUSH
25397: LD_VAR 0 2
25401: MINUS
25402: ST_TO_ADDR
// end else
25403: GO 25466
// begin d := - 1 ;
25405: LD_ADDR_VAR 0 9
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: ST_TO_ADDR
// if i_from > i_to then
25414: LD_VAR 0 2
25418: PUSH
25419: LD_VAR 0 3
25423: GREATER
25424: IFFALSE 25444
// length := i_from - i_to else
25426: LD_ADDR_VAR 0 11
25430: PUSH
25431: LD_VAR 0 2
25435: PUSH
25436: LD_VAR 0 3
25440: MINUS
25441: ST_TO_ADDR
25442: GO 25466
// length := ( array - i_to ) + i_from ;
25444: LD_ADDR_VAR 0 11
25448: PUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_VAR 0 3
25458: MINUS
25459: PUSH
25460: LD_VAR 0 2
25464: PLUS
25465: ST_TO_ADDR
// end ; if not length then
25466: LD_VAR 0 11
25470: NOT
25471: IFFALSE 25475
// exit ;
25473: GO 25633
// tmp := array ;
25475: LD_ADDR_VAR 0 10
25479: PUSH
25480: LD_VAR 0 1
25484: ST_TO_ADDR
// for i = 1 to length do
25485: LD_ADDR_VAR 0 6
25489: PUSH
25490: DOUBLE
25491: LD_INT 1
25493: DEC
25494: ST_TO_ADDR
25495: LD_VAR 0 11
25499: PUSH
25500: FOR_TO
25501: IFFALSE 25621
// begin for j = 1 to array do
25503: LD_ADDR_VAR 0 7
25507: PUSH
25508: DOUBLE
25509: LD_INT 1
25511: DEC
25512: ST_TO_ADDR
25513: LD_VAR 0 1
25517: PUSH
25518: FOR_TO
25519: IFFALSE 25607
// begin k := j + d ;
25521: LD_ADDR_VAR 0 8
25525: PUSH
25526: LD_VAR 0 7
25530: PUSH
25531: LD_VAR 0 9
25535: PLUS
25536: ST_TO_ADDR
// if k > array then
25537: LD_VAR 0 8
25541: PUSH
25542: LD_VAR 0 1
25546: GREATER
25547: IFFALSE 25557
// k := 1 ;
25549: LD_ADDR_VAR 0 8
25553: PUSH
25554: LD_INT 1
25556: ST_TO_ADDR
// if not k then
25557: LD_VAR 0 8
25561: NOT
25562: IFFALSE 25574
// k := array ;
25564: LD_ADDR_VAR 0 8
25568: PUSH
25569: LD_VAR 0 1
25573: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25574: LD_ADDR_VAR 0 10
25578: PUSH
25579: LD_VAR 0 10
25583: PPUSH
25584: LD_VAR 0 8
25588: PPUSH
25589: LD_VAR 0 1
25593: PUSH
25594: LD_VAR 0 7
25598: ARRAY
25599: PPUSH
25600: CALL_OW 1
25604: ST_TO_ADDR
// end ;
25605: GO 25518
25607: POP
25608: POP
// array := tmp ;
25609: LD_ADDR_VAR 0 1
25613: PUSH
25614: LD_VAR 0 10
25618: ST_TO_ADDR
// end ;
25619: GO 25500
25621: POP
25622: POP
// result := array ;
25623: LD_ADDR_VAR 0 5
25627: PUSH
25628: LD_VAR 0 1
25632: ST_TO_ADDR
// end ;
25633: LD_VAR 0 5
25637: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25638: LD_INT 0
25640: PPUSH
25641: PPUSH
// result := 0 ;
25642: LD_ADDR_VAR 0 3
25646: PUSH
25647: LD_INT 0
25649: ST_TO_ADDR
// if not array or not value in array then
25650: LD_VAR 0 1
25654: NOT
25655: PUSH
25656: LD_VAR 0 2
25660: PUSH
25661: LD_VAR 0 1
25665: IN
25666: NOT
25667: OR
25668: IFFALSE 25672
// exit ;
25670: GO 25726
// for i = 1 to array do
25672: LD_ADDR_VAR 0 4
25676: PUSH
25677: DOUBLE
25678: LD_INT 1
25680: DEC
25681: ST_TO_ADDR
25682: LD_VAR 0 1
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25724
// if value = array [ i ] then
25690: LD_VAR 0 2
25694: PUSH
25695: LD_VAR 0 1
25699: PUSH
25700: LD_VAR 0 4
25704: ARRAY
25705: EQUAL
25706: IFFALSE 25722
// begin result := i ;
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_VAR 0 4
25717: ST_TO_ADDR
// exit ;
25718: POP
25719: POP
25720: GO 25726
// end ;
25722: GO 25687
25724: POP
25725: POP
// end ;
25726: LD_VAR 0 3
25730: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25731: LD_INT 0
25733: PPUSH
// vc_chassis := chassis ;
25734: LD_ADDR_OWVAR 37
25738: PUSH
25739: LD_VAR 0 1
25743: ST_TO_ADDR
// vc_engine := engine ;
25744: LD_ADDR_OWVAR 39
25748: PUSH
25749: LD_VAR 0 2
25753: ST_TO_ADDR
// vc_control := control ;
25754: LD_ADDR_OWVAR 38
25758: PUSH
25759: LD_VAR 0 3
25763: ST_TO_ADDR
// vc_weapon := weapon ;
25764: LD_ADDR_OWVAR 40
25768: PUSH
25769: LD_VAR 0 4
25773: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25774: LD_ADDR_OWVAR 41
25778: PUSH
25779: LD_VAR 0 5
25783: ST_TO_ADDR
// end ;
25784: LD_VAR 0 6
25788: RET
// export function WantPlant ( unit ) ; var task ; begin
25789: LD_INT 0
25791: PPUSH
25792: PPUSH
// result := false ;
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 437
25815: ST_TO_ADDR
// if task then
25816: LD_VAR 0 3
25820: IFFALSE 25848
// if task [ 1 ] [ 1 ] = p then
25822: LD_VAR 0 3
25826: PUSH
25827: LD_INT 1
25829: ARRAY
25830: PUSH
25831: LD_INT 1
25833: ARRAY
25834: PUSH
25835: LD_STRING p
25837: EQUAL
25838: IFFALSE 25848
// result := true ;
25840: LD_ADDR_VAR 0 2
25844: PUSH
25845: LD_INT 1
25847: ST_TO_ADDR
// end ;
25848: LD_VAR 0 2
25852: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
// if pos < 1 then
25859: LD_VAR 0 2
25863: PUSH
25864: LD_INT 1
25866: LESS
25867: IFFALSE 25871
// exit ;
25869: GO 26174
// if pos = 1 then
25871: LD_VAR 0 2
25875: PUSH
25876: LD_INT 1
25878: EQUAL
25879: IFFALSE 25912
// result := Replace ( arr , pos [ 1 ] , value ) else
25881: LD_ADDR_VAR 0 4
25885: PUSH
25886: LD_VAR 0 1
25890: PPUSH
25891: LD_VAR 0 2
25895: PUSH
25896: LD_INT 1
25898: ARRAY
25899: PPUSH
25900: LD_VAR 0 3
25904: PPUSH
25905: CALL_OW 1
25909: ST_TO_ADDR
25910: GO 26174
// begin tmp := arr ;
25912: LD_ADDR_VAR 0 6
25916: PUSH
25917: LD_VAR 0 1
25921: ST_TO_ADDR
// s_arr := [ tmp ] ;
25922: LD_ADDR_VAR 0 7
25926: PUSH
25927: LD_VAR 0 6
25931: PUSH
25932: EMPTY
25933: LIST
25934: ST_TO_ADDR
// for i = 1 to pos - 1 do
25935: LD_ADDR_VAR 0 5
25939: PUSH
25940: DOUBLE
25941: LD_INT 1
25943: DEC
25944: ST_TO_ADDR
25945: LD_VAR 0 2
25949: PUSH
25950: LD_INT 1
25952: MINUS
25953: PUSH
25954: FOR_TO
25955: IFFALSE 26000
// begin tmp := tmp [ pos [ i ] ] ;
25957: LD_ADDR_VAR 0 6
25961: PUSH
25962: LD_VAR 0 6
25966: PUSH
25967: LD_VAR 0 2
25971: PUSH
25972: LD_VAR 0 5
25976: ARRAY
25977: ARRAY
25978: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25979: LD_ADDR_VAR 0 7
25983: PUSH
25984: LD_VAR 0 7
25988: PUSH
25989: LD_VAR 0 6
25993: PUSH
25994: EMPTY
25995: LIST
25996: ADD
25997: ST_TO_ADDR
// end ;
25998: GO 25954
26000: POP
26001: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26002: LD_ADDR_VAR 0 6
26006: PUSH
26007: LD_VAR 0 6
26011: PPUSH
26012: LD_VAR 0 2
26016: PUSH
26017: LD_VAR 0 2
26021: ARRAY
26022: PPUSH
26023: LD_VAR 0 3
26027: PPUSH
26028: CALL_OW 1
26032: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26033: LD_ADDR_VAR 0 7
26037: PUSH
26038: LD_VAR 0 7
26042: PPUSH
26043: LD_VAR 0 7
26047: PPUSH
26048: LD_VAR 0 6
26052: PPUSH
26053: CALL_OW 1
26057: ST_TO_ADDR
// for i = s_arr downto 2 do
26058: LD_ADDR_VAR 0 5
26062: PUSH
26063: DOUBLE
26064: LD_VAR 0 7
26068: INC
26069: ST_TO_ADDR
26070: LD_INT 2
26072: PUSH
26073: FOR_DOWNTO
26074: IFFALSE 26158
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26076: LD_ADDR_VAR 0 6
26080: PUSH
26081: LD_VAR 0 7
26085: PUSH
26086: LD_VAR 0 5
26090: PUSH
26091: LD_INT 1
26093: MINUS
26094: ARRAY
26095: PPUSH
26096: LD_VAR 0 2
26100: PUSH
26101: LD_VAR 0 5
26105: PUSH
26106: LD_INT 1
26108: MINUS
26109: ARRAY
26110: PPUSH
26111: LD_VAR 0 7
26115: PUSH
26116: LD_VAR 0 5
26120: ARRAY
26121: PPUSH
26122: CALL_OW 1
26126: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26127: LD_ADDR_VAR 0 7
26131: PUSH
26132: LD_VAR 0 7
26136: PPUSH
26137: LD_VAR 0 5
26141: PUSH
26142: LD_INT 1
26144: MINUS
26145: PPUSH
26146: LD_VAR 0 6
26150: PPUSH
26151: CALL_OW 1
26155: ST_TO_ADDR
// end ;
26156: GO 26073
26158: POP
26159: POP
// result := s_arr [ 1 ] ;
26160: LD_ADDR_VAR 0 4
26164: PUSH
26165: LD_VAR 0 7
26169: PUSH
26170: LD_INT 1
26172: ARRAY
26173: ST_TO_ADDR
// end ; end ;
26174: LD_VAR 0 4
26178: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26179: LD_INT 0
26181: PPUSH
26182: PPUSH
// if not list then
26183: LD_VAR 0 1
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26283
// i := list [ pos1 ] ;
26192: LD_ADDR_VAR 0 5
26196: PUSH
26197: LD_VAR 0 1
26201: PUSH
26202: LD_VAR 0 2
26206: ARRAY
26207: ST_TO_ADDR
// if not i then
26208: LD_VAR 0 5
26212: NOT
26213: IFFALSE 26217
// exit ;
26215: GO 26283
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26217: LD_ADDR_VAR 0 1
26221: PUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: LD_VAR 0 2
26231: PPUSH
26232: LD_VAR 0 1
26236: PUSH
26237: LD_VAR 0 3
26241: ARRAY
26242: PPUSH
26243: CALL_OW 1
26247: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26248: LD_ADDR_VAR 0 1
26252: PUSH
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_VAR 0 3
26262: PPUSH
26263: LD_VAR 0 5
26267: PPUSH
26268: CALL_OW 1
26272: ST_TO_ADDR
// result := list ;
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_VAR 0 1
26282: ST_TO_ADDR
// end ;
26283: LD_VAR 0 4
26287: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26288: LD_INT 0
26290: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26291: LD_ADDR_VAR 0 5
26295: PUSH
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 250
26305: PPUSH
26306: LD_VAR 0 1
26310: PPUSH
26311: CALL_OW 251
26315: PPUSH
26316: LD_VAR 0 2
26320: PPUSH
26321: LD_VAR 0 3
26325: PPUSH
26326: LD_VAR 0 4
26330: PPUSH
26331: CALL 26709 0 5
26335: ST_TO_ADDR
// end ;
26336: LD_VAR 0 5
26340: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
// if not list or not unit then
26347: LD_VAR 0 2
26351: NOT
26352: PUSH
26353: LD_VAR 0 1
26357: NOT
26358: OR
26359: IFFALSE 26363
// exit ;
26361: GO 26704
// result := [ ] ;
26363: LD_ADDR_VAR 0 5
26367: PUSH
26368: EMPTY
26369: ST_TO_ADDR
// for i in list do
26370: LD_ADDR_VAR 0 6
26374: PUSH
26375: LD_VAR 0 2
26379: PUSH
26380: FOR_IN
26381: IFFALSE 26599
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26383: LD_ADDR_VAR 0 8
26387: PUSH
26388: LD_VAR 0 1
26392: PPUSH
26393: LD_VAR 0 6
26397: PUSH
26398: LD_INT 1
26400: ARRAY
26401: PPUSH
26402: LD_VAR 0 6
26406: PUSH
26407: LD_INT 2
26409: ARRAY
26410: PPUSH
26411: CALL_OW 297
26415: ST_TO_ADDR
// if not Count ( result ) then
26416: LD_VAR 0 5
26420: PPUSH
26421: CALL 22993 0 1
26425: NOT
26426: IFFALSE 26459
// begin result := Join ( result , [ i , tmp ] ) ;
26428: LD_ADDR_VAR 0 5
26432: PUSH
26433: LD_VAR 0 5
26437: PPUSH
26438: LD_VAR 0 6
26442: PUSH
26443: LD_VAR 0 8
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL 58582 0 2
26456: ST_TO_ADDR
// continue ;
26457: GO 26380
// end ; if result [ result ] [ 2 ] <= tmp then
26459: LD_VAR 0 5
26463: PUSH
26464: LD_VAR 0 5
26468: ARRAY
26469: PUSH
26470: LD_INT 2
26472: ARRAY
26473: PUSH
26474: LD_VAR 0 8
26478: LESSEQUAL
26479: IFFALSE 26512
// result := Join ( result , [ i , tmp ] ) else
26481: LD_ADDR_VAR 0 5
26485: PUSH
26486: LD_VAR 0 5
26490: PPUSH
26491: LD_VAR 0 6
26495: PUSH
26496: LD_VAR 0 8
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL 58582 0 2
26509: ST_TO_ADDR
26510: GO 26597
// begin for j := 1 to Count ( result ) do
26512: LD_ADDR_VAR 0 7
26516: PUSH
26517: DOUBLE
26518: LD_INT 1
26520: DEC
26521: ST_TO_ADDR
26522: LD_VAR 0 5
26526: PPUSH
26527: CALL 22993 0 1
26531: PUSH
26532: FOR_TO
26533: IFFALSE 26595
// begin if tmp < result [ j ] [ 2 ] then
26535: LD_VAR 0 8
26539: PUSH
26540: LD_VAR 0 5
26544: PUSH
26545: LD_VAR 0 7
26549: ARRAY
26550: PUSH
26551: LD_INT 2
26553: ARRAY
26554: LESS
26555: IFFALSE 26593
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26557: LD_ADDR_VAR 0 5
26561: PUSH
26562: LD_VAR 0 5
26566: PPUSH
26567: LD_VAR 0 7
26571: PPUSH
26572: LD_VAR 0 6
26576: PUSH
26577: LD_VAR 0 8
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PPUSH
26586: CALL_OW 2
26590: ST_TO_ADDR
// break ;
26591: GO 26595
// end ; end ;
26593: GO 26532
26595: POP
26596: POP
// end ; end ;
26597: GO 26380
26599: POP
26600: POP
// if result and not asc then
26601: LD_VAR 0 5
26605: PUSH
26606: LD_VAR 0 3
26610: NOT
26611: AND
26612: IFFALSE 26629
// result := ReverseArray ( result ) ;
26614: LD_ADDR_VAR 0 5
26618: PUSH
26619: LD_VAR 0 5
26623: PPUSH
26624: CALL 53869 0 1
26628: ST_TO_ADDR
// tmp := [ ] ;
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: EMPTY
26635: ST_TO_ADDR
// if mode then
26636: LD_VAR 0 4
26640: IFFALSE 26704
// begin for i := 1 to result do
26642: LD_ADDR_VAR 0 6
26646: PUSH
26647: DOUBLE
26648: LD_INT 1
26650: DEC
26651: ST_TO_ADDR
26652: LD_VAR 0 5
26656: PUSH
26657: FOR_TO
26658: IFFALSE 26692
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26660: LD_ADDR_VAR 0 8
26664: PUSH
26665: LD_VAR 0 8
26669: PPUSH
26670: LD_VAR 0 5
26674: PUSH
26675: LD_VAR 0 6
26679: ARRAY
26680: PUSH
26681: LD_INT 1
26683: ARRAY
26684: PPUSH
26685: CALL 58582 0 2
26689: ST_TO_ADDR
26690: GO 26657
26692: POP
26693: POP
// result := tmp ;
26694: LD_ADDR_VAR 0 5
26698: PUSH
26699: LD_VAR 0 8
26703: ST_TO_ADDR
// end ; end ;
26704: LD_VAR 0 5
26708: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26709: LD_INT 0
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
// if not list then
26715: LD_VAR 0 3
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 27112
// result := [ ] ;
26724: LD_ADDR_VAR 0 6
26728: PUSH
26729: EMPTY
26730: ST_TO_ADDR
// for i in list do
26731: LD_ADDR_VAR 0 7
26735: PUSH
26736: LD_VAR 0 3
26740: PUSH
26741: FOR_IN
26742: IFFALSE 26944
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26744: LD_ADDR_VAR 0 9
26748: PUSH
26749: LD_VAR 0 7
26753: PPUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: CALL_OW 297
26768: ST_TO_ADDR
// if not result then
26769: LD_VAR 0 6
26773: NOT
26774: IFFALSE 26800
// result := [ [ i , tmp ] ] else
26776: LD_ADDR_VAR 0 6
26780: PUSH
26781: LD_VAR 0 7
26785: PUSH
26786: LD_VAR 0 9
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: ST_TO_ADDR
26798: GO 26942
// begin if result [ result ] [ 2 ] < tmp then
26800: LD_VAR 0 6
26804: PUSH
26805: LD_VAR 0 6
26809: ARRAY
26810: PUSH
26811: LD_INT 2
26813: ARRAY
26814: PUSH
26815: LD_VAR 0 9
26819: LESS
26820: IFFALSE 26862
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26822: LD_ADDR_VAR 0 6
26826: PUSH
26827: LD_VAR 0 6
26831: PPUSH
26832: LD_VAR 0 6
26836: PUSH
26837: LD_INT 1
26839: PLUS
26840: PPUSH
26841: LD_VAR 0 7
26845: PUSH
26846: LD_VAR 0 9
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 2
26859: ST_TO_ADDR
26860: GO 26942
// for j = 1 to result do
26862: LD_ADDR_VAR 0 8
26866: PUSH
26867: DOUBLE
26868: LD_INT 1
26870: DEC
26871: ST_TO_ADDR
26872: LD_VAR 0 6
26876: PUSH
26877: FOR_TO
26878: IFFALSE 26940
// begin if tmp < result [ j ] [ 2 ] then
26880: LD_VAR 0 9
26884: PUSH
26885: LD_VAR 0 6
26889: PUSH
26890: LD_VAR 0 8
26894: ARRAY
26895: PUSH
26896: LD_INT 2
26898: ARRAY
26899: LESS
26900: IFFALSE 26938
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26902: LD_ADDR_VAR 0 6
26906: PUSH
26907: LD_VAR 0 6
26911: PPUSH
26912: LD_VAR 0 8
26916: PPUSH
26917: LD_VAR 0 7
26921: PUSH
26922: LD_VAR 0 9
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PPUSH
26931: CALL_OW 2
26935: ST_TO_ADDR
// break ;
26936: GO 26940
// end ; end ;
26938: GO 26877
26940: POP
26941: POP
// end ; end ;
26942: GO 26741
26944: POP
26945: POP
// if result and not asc then
26946: LD_VAR 0 6
26950: PUSH
26951: LD_VAR 0 4
26955: NOT
26956: AND
26957: IFFALSE 27032
// begin tmp := result ;
26959: LD_ADDR_VAR 0 9
26963: PUSH
26964: LD_VAR 0 6
26968: ST_TO_ADDR
// for i = tmp downto 1 do
26969: LD_ADDR_VAR 0 7
26973: PUSH
26974: DOUBLE
26975: LD_VAR 0 9
26979: INC
26980: ST_TO_ADDR
26981: LD_INT 1
26983: PUSH
26984: FOR_DOWNTO
26985: IFFALSE 27030
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26987: LD_ADDR_VAR 0 6
26991: PUSH
26992: LD_VAR 0 6
26996: PPUSH
26997: LD_VAR 0 9
27001: PUSH
27002: LD_VAR 0 7
27006: MINUS
27007: PUSH
27008: LD_INT 1
27010: PLUS
27011: PPUSH
27012: LD_VAR 0 9
27016: PUSH
27017: LD_VAR 0 7
27021: ARRAY
27022: PPUSH
27023: CALL_OW 1
27027: ST_TO_ADDR
27028: GO 26984
27030: POP
27031: POP
// end ; tmp := [ ] ;
27032: LD_ADDR_VAR 0 9
27036: PUSH
27037: EMPTY
27038: ST_TO_ADDR
// if mode then
27039: LD_VAR 0 5
27043: IFFALSE 27112
// begin for i = 1 to result do
27045: LD_ADDR_VAR 0 7
27049: PUSH
27050: DOUBLE
27051: LD_INT 1
27053: DEC
27054: ST_TO_ADDR
27055: LD_VAR 0 6
27059: PUSH
27060: FOR_TO
27061: IFFALSE 27100
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27063: LD_ADDR_VAR 0 9
27067: PUSH
27068: LD_VAR 0 9
27072: PPUSH
27073: LD_VAR 0 7
27077: PPUSH
27078: LD_VAR 0 6
27082: PUSH
27083: LD_VAR 0 7
27087: ARRAY
27088: PUSH
27089: LD_INT 1
27091: ARRAY
27092: PPUSH
27093: CALL_OW 1
27097: ST_TO_ADDR
27098: GO 27060
27100: POP
27101: POP
// result := tmp ;
27102: LD_ADDR_VAR 0 6
27106: PUSH
27107: LD_VAR 0 9
27111: ST_TO_ADDR
// end ; end ;
27112: LD_VAR 0 6
27116: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27125: LD_ADDR_VAR 0 5
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: ST_TO_ADDR
// if not x or not y then
27147: LD_VAR 0 2
27151: NOT
27152: PUSH
27153: LD_VAR 0 3
27157: NOT
27158: OR
27159: IFFALSE 27163
// exit ;
27161: GO 28813
// if not range then
27163: LD_VAR 0 4
27167: NOT
27168: IFFALSE 27178
// range := 10 ;
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: LD_INT 10
27177: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27178: LD_ADDR_VAR 0 8
27182: PUSH
27183: LD_INT 81
27185: PUSH
27186: LD_VAR 0 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 92
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: LD_VAR 0 3
27207: PUSH
27208: LD_VAR 0 4
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: LD_INT 21
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 69
27245: ST_TO_ADDR
// if not tmp then
27246: LD_VAR 0 8
27250: NOT
27251: IFFALSE 27255
// exit ;
27253: GO 28813
// for i in tmp do
27255: LD_ADDR_VAR 0 6
27259: PUSH
27260: LD_VAR 0 8
27264: PUSH
27265: FOR_IN
27266: IFFALSE 28788
// begin points := [ 0 , 0 , 0 ] ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// bpoints := 1 ;
27287: LD_ADDR_VAR 0 10
27291: PUSH
27292: LD_INT 1
27294: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27295: LD_VAR 0 6
27299: PPUSH
27300: CALL_OW 247
27304: PUSH
27305: LD_INT 1
27307: DOUBLE
27308: EQUAL
27309: IFTRUE 27313
27311: GO 27891
27313: POP
// begin if GetClass ( i ) = 1 then
27314: LD_VAR 0 6
27318: PPUSH
27319: CALL_OW 257
27323: PUSH
27324: LD_INT 1
27326: EQUAL
27327: IFFALSE 27348
// points := [ 10 , 5 , 3 ] ;
27329: LD_ADDR_VAR 0 9
27333: PUSH
27334: LD_INT 10
27336: PUSH
27337: LD_INT 5
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27348: LD_VAR 0 6
27352: PPUSH
27353: CALL_OW 257
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: LD_INT 4
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: IN
27372: IFFALSE 27393
// points := [ 3 , 2 , 1 ] ;
27374: LD_ADDR_VAR 0 9
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27393: LD_VAR 0 6
27397: PPUSH
27398: CALL_OW 257
27402: PUSH
27403: LD_INT 5
27405: EQUAL
27406: IFFALSE 27427
// points := [ 130 , 5 , 2 ] ;
27408: LD_ADDR_VAR 0 9
27412: PUSH
27413: LD_INT 130
27415: PUSH
27416: LD_INT 5
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27427: LD_VAR 0 6
27431: PPUSH
27432: CALL_OW 257
27436: PUSH
27437: LD_INT 8
27439: EQUAL
27440: IFFALSE 27461
// points := [ 35 , 35 , 30 ] ;
27442: LD_ADDR_VAR 0 9
27446: PUSH
27447: LD_INT 35
27449: PUSH
27450: LD_INT 35
27452: PUSH
27453: LD_INT 30
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27461: LD_VAR 0 6
27465: PPUSH
27466: CALL_OW 257
27470: PUSH
27471: LD_INT 9
27473: EQUAL
27474: IFFALSE 27495
// points := [ 20 , 55 , 40 ] ;
27476: LD_ADDR_VAR 0 9
27480: PUSH
27481: LD_INT 20
27483: PUSH
27484: LD_INT 55
27486: PUSH
27487: LD_INT 40
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27495: LD_VAR 0 6
27499: PPUSH
27500: CALL_OW 257
27504: PUSH
27505: LD_INT 12
27507: PUSH
27508: LD_INT 16
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: IN
27515: IFFALSE 27536
// points := [ 5 , 3 , 2 ] ;
27517: LD_ADDR_VAR 0 9
27521: PUSH
27522: LD_INT 5
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: LIST
27535: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27536: LD_VAR 0 6
27540: PPUSH
27541: CALL_OW 257
27545: PUSH
27546: LD_INT 17
27548: EQUAL
27549: IFFALSE 27570
// points := [ 100 , 50 , 75 ] ;
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_INT 100
27558: PUSH
27559: LD_INT 50
27561: PUSH
27562: LD_INT 75
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27570: LD_VAR 0 6
27574: PPUSH
27575: CALL_OW 257
27579: PUSH
27580: LD_INT 15
27582: EQUAL
27583: IFFALSE 27604
// points := [ 10 , 5 , 3 ] ;
27585: LD_ADDR_VAR 0 9
27589: PUSH
27590: LD_INT 10
27592: PUSH
27593: LD_INT 5
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27604: LD_VAR 0 6
27608: PPUSH
27609: CALL_OW 257
27613: PUSH
27614: LD_INT 14
27616: EQUAL
27617: IFFALSE 27638
// points := [ 10 , 0 , 0 ] ;
27619: LD_ADDR_VAR 0 9
27623: PUSH
27624: LD_INT 10
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27638: LD_VAR 0 6
27642: PPUSH
27643: CALL_OW 257
27647: PUSH
27648: LD_INT 11
27650: EQUAL
27651: IFFALSE 27672
// points := [ 30 , 10 , 5 ] ;
27653: LD_ADDR_VAR 0 9
27657: PUSH
27658: LD_INT 30
27660: PUSH
27661: LD_INT 10
27663: PUSH
27664: LD_INT 5
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27672: LD_VAR 0 1
27676: PPUSH
27677: LD_INT 5
27679: PPUSH
27680: CALL_OW 321
27684: PUSH
27685: LD_INT 2
27687: EQUAL
27688: IFFALSE 27705
// bpoints := bpoints * 1.8 ;
27690: LD_ADDR_VAR 0 10
27694: PUSH
27695: LD_VAR 0 10
27699: PUSH
27700: LD_REAL  1.80000000000000E+0000
27703: MUL
27704: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27705: LD_VAR 0 6
27709: PPUSH
27710: CALL_OW 257
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: LD_INT 3
27723: PUSH
27724: LD_INT 4
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: IN
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_INT 51
27741: PPUSH
27742: CALL_OW 321
27746: PUSH
27747: LD_INT 2
27749: EQUAL
27750: AND
27751: IFFALSE 27768
// bpoints := bpoints * 1.2 ;
27753: LD_ADDR_VAR 0 10
27757: PUSH
27758: LD_VAR 0 10
27762: PUSH
27763: LD_REAL  1.20000000000000E+0000
27766: MUL
27767: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27768: LD_VAR 0 6
27772: PPUSH
27773: CALL_OW 257
27777: PUSH
27778: LD_INT 5
27780: PUSH
27781: LD_INT 7
27783: PUSH
27784: LD_INT 9
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: IN
27792: PUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: LD_INT 52
27800: PPUSH
27801: CALL_OW 321
27805: PUSH
27806: LD_INT 2
27808: EQUAL
27809: AND
27810: IFFALSE 27827
// bpoints := bpoints * 1.5 ;
27812: LD_ADDR_VAR 0 10
27816: PUSH
27817: LD_VAR 0 10
27821: PUSH
27822: LD_REAL  1.50000000000000E+0000
27825: MUL
27826: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27827: LD_VAR 0 1
27831: PPUSH
27832: LD_INT 66
27834: PPUSH
27835: CALL_OW 321
27839: PUSH
27840: LD_INT 2
27842: EQUAL
27843: IFFALSE 27860
// bpoints := bpoints * 1.1 ;
27845: LD_ADDR_VAR 0 10
27849: PUSH
27850: LD_VAR 0 10
27854: PUSH
27855: LD_REAL  1.10000000000000E+0000
27858: MUL
27859: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27860: LD_ADDR_VAR 0 10
27864: PUSH
27865: LD_VAR 0 10
27869: PUSH
27870: LD_VAR 0 6
27874: PPUSH
27875: LD_INT 1
27877: PPUSH
27878: CALL_OW 259
27882: PUSH
27883: LD_REAL  1.15000000000000E+0000
27886: MUL
27887: MUL
27888: ST_TO_ADDR
// end ; unit_vehicle :
27889: GO 28717
27891: LD_INT 2
27893: DOUBLE
27894: EQUAL
27895: IFTRUE 27899
27897: GO 28705
27899: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27900: LD_VAR 0 6
27904: PPUSH
27905: CALL_OW 264
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 42
27915: PUSH
27916: LD_INT 24
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: IN
27924: IFFALSE 27945
// points := [ 25 , 5 , 3 ] ;
27926: LD_ADDR_VAR 0 9
27930: PUSH
27931: LD_INT 25
27933: PUSH
27934: LD_INT 5
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27945: LD_VAR 0 6
27949: PPUSH
27950: CALL_OW 264
27954: PUSH
27955: LD_INT 4
27957: PUSH
27958: LD_INT 43
27960: PUSH
27961: LD_INT 25
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: IN
27969: IFFALSE 27990
// points := [ 40 , 15 , 5 ] ;
27971: LD_ADDR_VAR 0 9
27975: PUSH
27976: LD_INT 40
27978: PUSH
27979: LD_INT 15
27981: PUSH
27982: LD_INT 5
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27990: LD_VAR 0 6
27994: PPUSH
27995: CALL_OW 264
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: LD_INT 23
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: IN
28010: IFFALSE 28031
// points := [ 7 , 25 , 8 ] ;
28012: LD_ADDR_VAR 0 9
28016: PUSH
28017: LD_INT 7
28019: PUSH
28020: LD_INT 25
28022: PUSH
28023: LD_INT 8
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28031: LD_VAR 0 6
28035: PPUSH
28036: CALL_OW 264
28040: PUSH
28041: LD_INT 5
28043: PUSH
28044: LD_INT 27
28046: PUSH
28047: LD_INT 44
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: IN
28055: IFFALSE 28076
// points := [ 14 , 50 , 16 ] ;
28057: LD_ADDR_VAR 0 9
28061: PUSH
28062: LD_INT 14
28064: PUSH
28065: LD_INT 50
28067: PUSH
28068: LD_INT 16
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28076: LD_VAR 0 6
28080: PPUSH
28081: CALL_OW 264
28085: PUSH
28086: LD_INT 6
28088: PUSH
28089: LD_INT 46
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: IN
28096: IFFALSE 28117
// points := [ 32 , 120 , 70 ] ;
28098: LD_ADDR_VAR 0 9
28102: PUSH
28103: LD_INT 32
28105: PUSH
28106: LD_INT 120
28108: PUSH
28109: LD_INT 70
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28117: LD_VAR 0 6
28121: PPUSH
28122: CALL_OW 264
28126: PUSH
28127: LD_INT 7
28129: PUSH
28130: LD_INT 28
28132: PUSH
28133: LD_INT 45
28135: PUSH
28136: LD_INT 92
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: IN
28145: IFFALSE 28166
// points := [ 35 , 20 , 45 ] ;
28147: LD_ADDR_VAR 0 9
28151: PUSH
28152: LD_INT 35
28154: PUSH
28155: LD_INT 20
28157: PUSH
28158: LD_INT 45
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28166: LD_VAR 0 6
28170: PPUSH
28171: CALL_OW 264
28175: PUSH
28176: LD_INT 47
28178: PUSH
28179: EMPTY
28180: LIST
28181: IN
28182: IFFALSE 28203
// points := [ 67 , 45 , 75 ] ;
28184: LD_ADDR_VAR 0 9
28188: PUSH
28189: LD_INT 67
28191: PUSH
28192: LD_INT 45
28194: PUSH
28195: LD_INT 75
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28203: LD_VAR 0 6
28207: PPUSH
28208: CALL_OW 264
28212: PUSH
28213: LD_INT 26
28215: PUSH
28216: EMPTY
28217: LIST
28218: IN
28219: IFFALSE 28240
// points := [ 120 , 30 , 80 ] ;
28221: LD_ADDR_VAR 0 9
28225: PUSH
28226: LD_INT 120
28228: PUSH
28229: LD_INT 30
28231: PUSH
28232: LD_INT 80
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28240: LD_VAR 0 6
28244: PPUSH
28245: CALL_OW 264
28249: PUSH
28250: LD_INT 22
28252: PUSH
28253: EMPTY
28254: LIST
28255: IN
28256: IFFALSE 28277
// points := [ 40 , 1 , 1 ] ;
28258: LD_ADDR_VAR 0 9
28262: PUSH
28263: LD_INT 40
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28277: LD_VAR 0 6
28281: PPUSH
28282: CALL_OW 264
28286: PUSH
28287: LD_INT 29
28289: PUSH
28290: EMPTY
28291: LIST
28292: IN
28293: IFFALSE 28314
// points := [ 70 , 200 , 400 ] ;
28295: LD_ADDR_VAR 0 9
28299: PUSH
28300: LD_INT 70
28302: PUSH
28303: LD_INT 200
28305: PUSH
28306: LD_INT 400
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28314: LD_VAR 0 6
28318: PPUSH
28319: CALL_OW 264
28323: PUSH
28324: LD_INT 14
28326: PUSH
28327: LD_INT 53
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: IN
28334: IFFALSE 28355
// points := [ 40 , 10 , 20 ] ;
28336: LD_ADDR_VAR 0 9
28340: PUSH
28341: LD_INT 40
28343: PUSH
28344: LD_INT 10
28346: PUSH
28347: LD_INT 20
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28355: LD_VAR 0 6
28359: PPUSH
28360: CALL_OW 264
28364: PUSH
28365: LD_INT 9
28367: PUSH
28368: EMPTY
28369: LIST
28370: IN
28371: IFFALSE 28392
// points := [ 5 , 70 , 20 ] ;
28373: LD_ADDR_VAR 0 9
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: LD_INT 70
28383: PUSH
28384: LD_INT 20
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28392: LD_VAR 0 6
28396: PPUSH
28397: CALL_OW 264
28401: PUSH
28402: LD_INT 10
28404: PUSH
28405: EMPTY
28406: LIST
28407: IN
28408: IFFALSE 28429
// points := [ 35 , 110 , 70 ] ;
28410: LD_ADDR_VAR 0 9
28414: PUSH
28415: LD_INT 35
28417: PUSH
28418: LD_INT 110
28420: PUSH
28421: LD_INT 70
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28429: LD_VAR 0 6
28433: PPUSH
28434: CALL_OW 265
28438: PUSH
28439: LD_INT 25
28441: EQUAL
28442: IFFALSE 28463
// points := [ 80 , 65 , 100 ] ;
28444: LD_ADDR_VAR 0 9
28448: PUSH
28449: LD_INT 80
28451: PUSH
28452: LD_INT 65
28454: PUSH
28455: LD_INT 100
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28463: LD_VAR 0 6
28467: PPUSH
28468: CALL_OW 263
28472: PUSH
28473: LD_INT 1
28475: EQUAL
28476: IFFALSE 28511
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28478: LD_ADDR_VAR 0 10
28482: PUSH
28483: LD_VAR 0 10
28487: PUSH
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 311
28497: PPUSH
28498: LD_INT 3
28500: PPUSH
28501: CALL_OW 259
28505: PUSH
28506: LD_INT 4
28508: MUL
28509: MUL
28510: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28511: LD_VAR 0 6
28515: PPUSH
28516: CALL_OW 263
28520: PUSH
28521: LD_INT 2
28523: EQUAL
28524: IFFALSE 28575
// begin j := IsControledBy ( i ) ;
28526: LD_ADDR_VAR 0 7
28530: PUSH
28531: LD_VAR 0 6
28535: PPUSH
28536: CALL_OW 312
28540: ST_TO_ADDR
// if j then
28541: LD_VAR 0 7
28545: IFFALSE 28575
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28547: LD_ADDR_VAR 0 10
28551: PUSH
28552: LD_VAR 0 10
28556: PUSH
28557: LD_VAR 0 7
28561: PPUSH
28562: LD_INT 3
28564: PPUSH
28565: CALL_OW 259
28569: PUSH
28570: LD_INT 3
28572: MUL
28573: MUL
28574: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28575: LD_VAR 0 6
28579: PPUSH
28580: CALL_OW 264
28584: PUSH
28585: LD_INT 5
28587: PUSH
28588: LD_INT 6
28590: PUSH
28591: LD_INT 46
28593: PUSH
28594: LD_INT 44
28596: PUSH
28597: LD_INT 47
28599: PUSH
28600: LD_INT 45
28602: PUSH
28603: LD_INT 28
28605: PUSH
28606: LD_INT 7
28608: PUSH
28609: LD_INT 27
28611: PUSH
28612: LD_INT 29
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: IN
28627: PUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: LD_INT 52
28635: PPUSH
28636: CALL_OW 321
28640: PUSH
28641: LD_INT 2
28643: EQUAL
28644: AND
28645: IFFALSE 28662
// bpoints := bpoints * 1.2 ;
28647: LD_ADDR_VAR 0 10
28651: PUSH
28652: LD_VAR 0 10
28656: PUSH
28657: LD_REAL  1.20000000000000E+0000
28660: MUL
28661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28662: LD_VAR 0 6
28666: PPUSH
28667: CALL_OW 264
28671: PUSH
28672: LD_INT 6
28674: PUSH
28675: LD_INT 46
28677: PUSH
28678: LD_INT 47
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: IN
28686: IFFALSE 28703
// bpoints := bpoints * 1.2 ;
28688: LD_ADDR_VAR 0 10
28692: PUSH
28693: LD_VAR 0 10
28697: PUSH
28698: LD_REAL  1.20000000000000E+0000
28701: MUL
28702: ST_TO_ADDR
// end ; unit_building :
28703: GO 28717
28705: LD_INT 3
28707: DOUBLE
28708: EQUAL
28709: IFTRUE 28713
28711: GO 28716
28713: POP
// ; end ;
28714: GO 28717
28716: POP
// for j = 1 to 3 do
28717: LD_ADDR_VAR 0 7
28721: PUSH
28722: DOUBLE
28723: LD_INT 1
28725: DEC
28726: ST_TO_ADDR
28727: LD_INT 3
28729: PUSH
28730: FOR_TO
28731: IFFALSE 28784
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28733: LD_ADDR_VAR 0 5
28737: PUSH
28738: LD_VAR 0 5
28742: PPUSH
28743: LD_VAR 0 7
28747: PPUSH
28748: LD_VAR 0 5
28752: PUSH
28753: LD_VAR 0 7
28757: ARRAY
28758: PUSH
28759: LD_VAR 0 9
28763: PUSH
28764: LD_VAR 0 7
28768: ARRAY
28769: PUSH
28770: LD_VAR 0 10
28774: MUL
28775: PLUS
28776: PPUSH
28777: CALL_OW 1
28781: ST_TO_ADDR
28782: GO 28730
28784: POP
28785: POP
// end ;
28786: GO 27265
28788: POP
28789: POP
// result := Replace ( result , 4 , tmp ) ;
28790: LD_ADDR_VAR 0 5
28794: PUSH
28795: LD_VAR 0 5
28799: PPUSH
28800: LD_INT 4
28802: PPUSH
28803: LD_VAR 0 8
28807: PPUSH
28808: CALL_OW 1
28812: ST_TO_ADDR
// end ;
28813: LD_VAR 0 5
28817: RET
// export function DangerAtRange ( unit , range ) ; begin
28818: LD_INT 0
28820: PPUSH
// if not unit then
28821: LD_VAR 0 1
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28875
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL_OW 255
28844: PPUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL_OW 250
28854: PPUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 251
28864: PPUSH
28865: LD_VAR 0 2
28869: PPUSH
28870: CALL 27117 0 4
28874: ST_TO_ADDR
// end ;
28875: LD_VAR 0 3
28879: RET
// export function DangerInArea ( side , area ) ; begin
28880: LD_INT 0
28882: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28883: LD_ADDR_VAR 0 3
28887: PUSH
28888: LD_VAR 0 2
28892: PPUSH
28893: LD_INT 81
28895: PUSH
28896: LD_VAR 0 1
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PPUSH
28905: CALL_OW 70
28909: ST_TO_ADDR
// end ;
28910: LD_VAR 0 3
28914: RET
// export function IsExtension ( b ) ; begin
28915: LD_INT 0
28917: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28918: LD_ADDR_VAR 0 2
28922: PUSH
28923: LD_VAR 0 1
28927: PUSH
28928: LD_INT 23
28930: PUSH
28931: LD_INT 20
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_INT 17
28939: PUSH
28940: LD_INT 24
28942: PUSH
28943: LD_INT 21
28945: PUSH
28946: LD_INT 19
28948: PUSH
28949: LD_INT 16
28951: PUSH
28952: LD_INT 25
28954: PUSH
28955: LD_INT 18
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: IN
28970: ST_TO_ADDR
// end ;
28971: LD_VAR 0 2
28975: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28976: LD_INT 0
28978: PPUSH
28979: PPUSH
28980: PPUSH
// result := [ ] ;
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: EMPTY
28987: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28988: LD_ADDR_VAR 0 5
28992: PUSH
28993: LD_VAR 0 2
28997: PPUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 70
29012: ST_TO_ADDR
// if not tmp then
29013: LD_VAR 0 5
29017: NOT
29018: IFFALSE 29022
// exit ;
29020: GO 29086
// if checkLink then
29022: LD_VAR 0 3
29026: IFFALSE 29076
// begin for i in tmp do
29028: LD_ADDR_VAR 0 6
29032: PUSH
29033: LD_VAR 0 5
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29074
// if GetBase ( i ) <> base then
29041: LD_VAR 0 6
29045: PPUSH
29046: CALL_OW 274
29050: PUSH
29051: LD_VAR 0 1
29055: NONEQUAL
29056: IFFALSE 29072
// ComLinkToBase ( base , i ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_VAR 0 6
29067: PPUSH
29068: CALL_OW 169
29072: GO 29038
29074: POP
29075: POP
// end ; result := tmp ;
29076: LD_ADDR_VAR 0 4
29080: PUSH
29081: LD_VAR 0 5
29085: ST_TO_ADDR
// end ;
29086: LD_VAR 0 4
29090: RET
// export function ComComplete ( units , b ) ; var i ; begin
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
// if not units then
29095: LD_VAR 0 1
29099: NOT
29100: IFFALSE 29104
// exit ;
29102: GO 29194
// for i in units do
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: LD_VAR 0 1
29113: PUSH
29114: FOR_IN
29115: IFFALSE 29192
// if BuildingStatus ( b ) = bs_build then
29117: LD_VAR 0 2
29121: PPUSH
29122: CALL_OW 461
29126: PUSH
29127: LD_INT 1
29129: EQUAL
29130: IFFALSE 29190
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29132: LD_VAR 0 4
29136: PPUSH
29137: LD_STRING h
29139: PUSH
29140: LD_VAR 0 2
29144: PPUSH
29145: CALL_OW 250
29149: PUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: CALL_OW 251
29159: PUSH
29160: LD_VAR 0 2
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: PUSH
29183: EMPTY
29184: LIST
29185: PPUSH
29186: CALL_OW 446
29190: GO 29114
29192: POP
29193: POP
// end ;
29194: LD_VAR 0 3
29198: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29207: LD_VAR 0 1
29211: NOT
29212: PUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 263
29222: PUSH
29223: LD_INT 2
29225: NONEQUAL
29226: OR
29227: IFFALSE 29231
// exit ;
29229: GO 29547
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29231: LD_ADDR_VAR 0 6
29235: PUSH
29236: LD_INT 22
29238: PUSH
29239: LD_VAR 0 1
29243: PPUSH
29244: CALL_OW 255
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: LD_INT 30
29258: PUSH
29259: LD_INT 36
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 34
29268: PUSH
29269: LD_INT 31
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: ST_TO_ADDR
// if not tmp then
29290: LD_VAR 0 6
29294: NOT
29295: IFFALSE 29299
// exit ;
29297: GO 29547
// result := [ ] ;
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: EMPTY
29305: ST_TO_ADDR
// for i in tmp do
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: LD_VAR 0 6
29315: PUSH
29316: FOR_IN
29317: IFFALSE 29388
// begin t := UnitsInside ( i ) ;
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: LD_VAR 0 3
29328: PPUSH
29329: CALL_OW 313
29333: ST_TO_ADDR
// if t then
29334: LD_VAR 0 4
29338: IFFALSE 29386
// for j in t do
29340: LD_ADDR_VAR 0 7
29344: PUSH
29345: LD_VAR 0 4
29349: PUSH
29350: FOR_IN
29351: IFFALSE 29384
// result := Replace ( result , result + 1 , j ) ;
29353: LD_ADDR_VAR 0 2
29357: PUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: LD_VAR 0 2
29367: PUSH
29368: LD_INT 1
29370: PLUS
29371: PPUSH
29372: LD_VAR 0 7
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
29382: GO 29350
29384: POP
29385: POP
// end ;
29386: GO 29316
29388: POP
29389: POP
// if not result then
29390: LD_VAR 0 2
29394: NOT
29395: IFFALSE 29399
// exit ;
29397: GO 29547
// mech := result [ 1 ] ;
29399: LD_ADDR_VAR 0 5
29403: PUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: ST_TO_ADDR
// if result > 1 then
29413: LD_VAR 0 2
29417: PUSH
29418: LD_INT 1
29420: GREATER
29421: IFFALSE 29533
// begin for i = 2 to result do
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: DOUBLE
29429: LD_INT 2
29431: DEC
29432: ST_TO_ADDR
29433: LD_VAR 0 2
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29531
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29441: LD_ADDR_VAR 0 4
29445: PUSH
29446: LD_VAR 0 2
29450: PUSH
29451: LD_VAR 0 3
29455: ARRAY
29456: PPUSH
29457: LD_INT 3
29459: PPUSH
29460: CALL_OW 259
29464: PUSH
29465: LD_VAR 0 2
29469: PUSH
29470: LD_VAR 0 3
29474: ARRAY
29475: PPUSH
29476: CALL_OW 432
29480: MINUS
29481: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29482: LD_VAR 0 4
29486: PUSH
29487: LD_VAR 0 5
29491: PPUSH
29492: LD_INT 3
29494: PPUSH
29495: CALL_OW 259
29499: PUSH
29500: LD_VAR 0 5
29504: PPUSH
29505: CALL_OW 432
29509: MINUS
29510: GREATEREQUAL
29511: IFFALSE 29529
// mech := result [ i ] ;
29513: LD_ADDR_VAR 0 5
29517: PUSH
29518: LD_VAR 0 2
29522: PUSH
29523: LD_VAR 0 3
29527: ARRAY
29528: ST_TO_ADDR
// end ;
29529: GO 29438
29531: POP
29532: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_VAR 0 5
29542: PPUSH
29543: CALL_OW 135
// end ;
29547: LD_VAR 0 2
29551: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29552: LD_INT 0
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
// result := [ ] ;
29567: LD_ADDR_VAR 0 7
29571: PUSH
29572: EMPTY
29573: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 266
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: IN
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 31233
// if name then
29599: LD_VAR 0 3
29603: IFFALSE 29619
// SetBName ( base_dep , name ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_VAR 0 3
29614: PPUSH
29615: CALL_OW 500
// base := GetBase ( base_dep ) ;
29619: LD_ADDR_VAR 0 15
29623: PUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 274
29633: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29634: LD_ADDR_VAR 0 16
29638: PUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 255
29648: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29649: LD_ADDR_VAR 0 17
29653: PUSH
29654: LD_VAR 0 1
29658: PPUSH
29659: CALL_OW 248
29663: ST_TO_ADDR
// if sources then
29664: LD_VAR 0 5
29668: IFFALSE 29715
// for i = 1 to 3 do
29670: LD_ADDR_VAR 0 8
29674: PUSH
29675: DOUBLE
29676: LD_INT 1
29678: DEC
29679: ST_TO_ADDR
29680: LD_INT 3
29682: PUSH
29683: FOR_TO
29684: IFFALSE 29713
// AddResourceType ( base , i , sources [ i ] ) ;
29686: LD_VAR 0 15
29690: PPUSH
29691: LD_VAR 0 8
29695: PPUSH
29696: LD_VAR 0 5
29700: PUSH
29701: LD_VAR 0 8
29705: ARRAY
29706: PPUSH
29707: CALL_OW 276
29711: GO 29683
29713: POP
29714: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29715: LD_ADDR_VAR 0 18
29719: PUSH
29720: LD_VAR 0 15
29724: PPUSH
29725: LD_VAR 0 2
29729: PPUSH
29730: LD_INT 1
29732: PPUSH
29733: CALL 28976 0 3
29737: ST_TO_ADDR
// InitHc ;
29738: CALL_OW 19
// InitUc ;
29742: CALL_OW 18
// uc_side := side ;
29746: LD_ADDR_OWVAR 20
29750: PUSH
29751: LD_VAR 0 16
29755: ST_TO_ADDR
// uc_nation := nation ;
29756: LD_ADDR_OWVAR 21
29760: PUSH
29761: LD_VAR 0 17
29765: ST_TO_ADDR
// if buildings then
29766: LD_VAR 0 18
29770: IFFALSE 31092
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29772: LD_ADDR_VAR 0 19
29776: PUSH
29777: LD_VAR 0 18
29781: PPUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 30
29787: PUSH
29788: LD_INT 29
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 30
29797: PUSH
29798: LD_INT 30
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: PPUSH
29810: CALL_OW 72
29814: ST_TO_ADDR
// if tmp then
29815: LD_VAR 0 19
29819: IFFALSE 29867
// for i in tmp do
29821: LD_ADDR_VAR 0 8
29825: PUSH
29826: LD_VAR 0 19
29830: PUSH
29831: FOR_IN
29832: IFFALSE 29865
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29834: LD_VAR 0 8
29838: PPUSH
29839: CALL_OW 250
29843: PPUSH
29844: LD_VAR 0 8
29848: PPUSH
29849: CALL_OW 251
29853: PPUSH
29854: LD_VAR 0 16
29858: PPUSH
29859: CALL_OW 441
29863: GO 29831
29865: POP
29866: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29867: LD_VAR 0 18
29871: PPUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 30
29877: PUSH
29878: LD_INT 32
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 30
29887: PUSH
29888: LD_INT 33
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: PPUSH
29900: CALL_OW 72
29904: IFFALSE 29992
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29906: LD_ADDR_VAR 0 8
29910: PUSH
29911: LD_VAR 0 18
29915: PPUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 30
29921: PUSH
29922: LD_INT 32
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 30
29931: PUSH
29932: LD_INT 33
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: PPUSH
29944: CALL_OW 72
29948: PUSH
29949: FOR_IN
29950: IFFALSE 29990
// begin if not GetBWeapon ( i ) then
29952: LD_VAR 0 8
29956: PPUSH
29957: CALL_OW 269
29961: NOT
29962: IFFALSE 29988
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29964: LD_VAR 0 8
29968: PPUSH
29969: LD_VAR 0 8
29973: PPUSH
29974: LD_VAR 0 2
29978: PPUSH
29979: CALL 31238 0 2
29983: PPUSH
29984: CALL_OW 431
// end ;
29988: GO 29949
29990: POP
29991: POP
// end ; for i = 1 to personel do
29992: LD_ADDR_VAR 0 8
29996: PUSH
29997: DOUBLE
29998: LD_INT 1
30000: DEC
30001: ST_TO_ADDR
30002: LD_VAR 0 6
30006: PUSH
30007: FOR_TO
30008: IFFALSE 31072
// begin if i > 4 then
30010: LD_VAR 0 8
30014: PUSH
30015: LD_INT 4
30017: GREATER
30018: IFFALSE 30022
// break ;
30020: GO 31072
// case i of 1 :
30022: LD_VAR 0 8
30026: PUSH
30027: LD_INT 1
30029: DOUBLE
30030: EQUAL
30031: IFTRUE 30035
30033: GO 30115
30035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30036: LD_ADDR_VAR 0 12
30040: PUSH
30041: LD_VAR 0 18
30045: PPUSH
30046: LD_INT 22
30048: PUSH
30049: LD_VAR 0 16
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 58
30060: PUSH
30061: EMPTY
30062: LIST
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: LD_INT 30
30069: PUSH
30070: LD_INT 32
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 30
30079: PUSH
30080: LD_INT 4
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 30
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 72
30112: ST_TO_ADDR
30113: GO 30337
30115: LD_INT 2
30117: DOUBLE
30118: EQUAL
30119: IFTRUE 30123
30121: GO 30185
30123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30124: LD_ADDR_VAR 0 12
30128: PUSH
30129: LD_VAR 0 18
30133: PPUSH
30134: LD_INT 22
30136: PUSH
30137: LD_VAR 0 16
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 30
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 30
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 72
30182: ST_TO_ADDR
30183: GO 30337
30185: LD_INT 3
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30255
30193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30194: LD_ADDR_VAR 0 12
30198: PUSH
30199: LD_VAR 0 18
30203: PPUSH
30204: LD_INT 22
30206: PUSH
30207: LD_VAR 0 16
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 30
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PPUSH
30248: CALL_OW 72
30252: ST_TO_ADDR
30253: GO 30337
30255: LD_INT 4
30257: DOUBLE
30258: EQUAL
30259: IFTRUE 30263
30261: GO 30336
30263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30264: LD_ADDR_VAR 0 12
30268: PUSH
30269: LD_VAR 0 18
30273: PPUSH
30274: LD_INT 22
30276: PUSH
30277: LD_VAR 0 16
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 30
30291: PUSH
30292: LD_INT 6
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 30
30301: PUSH
30302: LD_INT 7
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 30
30311: PUSH
30312: LD_INT 8
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 72
30333: ST_TO_ADDR
30334: GO 30337
30336: POP
// if i = 1 then
30337: LD_VAR 0 8
30341: PUSH
30342: LD_INT 1
30344: EQUAL
30345: IFFALSE 30456
// begin tmp := [ ] ;
30347: LD_ADDR_VAR 0 19
30351: PUSH
30352: EMPTY
30353: ST_TO_ADDR
// for j in f do
30354: LD_ADDR_VAR 0 9
30358: PUSH
30359: LD_VAR 0 12
30363: PUSH
30364: FOR_IN
30365: IFFALSE 30438
// if GetBType ( j ) = b_bunker then
30367: LD_VAR 0 9
30371: PPUSH
30372: CALL_OW 266
30376: PUSH
30377: LD_INT 32
30379: EQUAL
30380: IFFALSE 30407
// tmp := Insert ( tmp , 1 , j ) else
30382: LD_ADDR_VAR 0 19
30386: PUSH
30387: LD_VAR 0 19
30391: PPUSH
30392: LD_INT 1
30394: PPUSH
30395: LD_VAR 0 9
30399: PPUSH
30400: CALL_OW 2
30404: ST_TO_ADDR
30405: GO 30436
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30407: LD_ADDR_VAR 0 19
30411: PUSH
30412: LD_VAR 0 19
30416: PPUSH
30417: LD_VAR 0 19
30421: PUSH
30422: LD_INT 1
30424: PLUS
30425: PPUSH
30426: LD_VAR 0 9
30430: PPUSH
30431: CALL_OW 2
30435: ST_TO_ADDR
30436: GO 30364
30438: POP
30439: POP
// if tmp then
30440: LD_VAR 0 19
30444: IFFALSE 30456
// f := tmp ;
30446: LD_ADDR_VAR 0 12
30450: PUSH
30451: LD_VAR 0 19
30455: ST_TO_ADDR
// end ; x := personel [ i ] ;
30456: LD_ADDR_VAR 0 13
30460: PUSH
30461: LD_VAR 0 6
30465: PUSH
30466: LD_VAR 0 8
30470: ARRAY
30471: ST_TO_ADDR
// if x = - 1 then
30472: LD_VAR 0 13
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: EQUAL
30481: IFFALSE 30690
// begin for j in f do
30483: LD_ADDR_VAR 0 9
30487: PUSH
30488: LD_VAR 0 12
30492: PUSH
30493: FOR_IN
30494: IFFALSE 30686
// repeat InitHc ;
30496: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30500: LD_VAR 0 9
30504: PPUSH
30505: CALL_OW 266
30509: PUSH
30510: LD_INT 5
30512: EQUAL
30513: IFFALSE 30583
// begin if UnitsInside ( j ) < 3 then
30515: LD_VAR 0 9
30519: PPUSH
30520: CALL_OW 313
30524: PUSH
30525: LD_INT 3
30527: LESS
30528: IFFALSE 30564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30530: LD_INT 0
30532: PPUSH
30533: LD_INT 5
30535: PUSH
30536: LD_INT 8
30538: PUSH
30539: LD_INT 9
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: PUSH
30547: LD_VAR 0 17
30551: ARRAY
30552: PPUSH
30553: LD_VAR 0 4
30557: PPUSH
30558: CALL_OW 380
30562: GO 30581
// PrepareHuman ( false , i , skill ) ;
30564: LD_INT 0
30566: PPUSH
30567: LD_VAR 0 8
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: CALL_OW 380
// end else
30581: GO 30600
// PrepareHuman ( false , i , skill ) ;
30583: LD_INT 0
30585: PPUSH
30586: LD_VAR 0 8
30590: PPUSH
30591: LD_VAR 0 4
30595: PPUSH
30596: CALL_OW 380
// un := CreateHuman ;
30600: LD_ADDR_VAR 0 14
30604: PUSH
30605: CALL_OW 44
30609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30610: LD_ADDR_VAR 0 7
30614: PUSH
30615: LD_VAR 0 7
30619: PPUSH
30620: LD_INT 1
30622: PPUSH
30623: LD_VAR 0 14
30627: PPUSH
30628: CALL_OW 2
30632: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30633: LD_VAR 0 14
30637: PPUSH
30638: LD_VAR 0 9
30642: PPUSH
30643: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30647: LD_VAR 0 9
30651: PPUSH
30652: CALL_OW 313
30656: PUSH
30657: LD_INT 6
30659: EQUAL
30660: PUSH
30661: LD_VAR 0 9
30665: PPUSH
30666: CALL_OW 266
30670: PUSH
30671: LD_INT 32
30673: PUSH
30674: LD_INT 31
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: IN
30681: OR
30682: IFFALSE 30496
30684: GO 30493
30686: POP
30687: POP
// end else
30688: GO 31070
// for j = 1 to x do
30690: LD_ADDR_VAR 0 9
30694: PUSH
30695: DOUBLE
30696: LD_INT 1
30698: DEC
30699: ST_TO_ADDR
30700: LD_VAR 0 13
30704: PUSH
30705: FOR_TO
30706: IFFALSE 31068
// begin InitHc ;
30708: CALL_OW 19
// if not f then
30712: LD_VAR 0 12
30716: NOT
30717: IFFALSE 30806
// begin PrepareHuman ( false , i , skill ) ;
30719: LD_INT 0
30721: PPUSH
30722: LD_VAR 0 8
30726: PPUSH
30727: LD_VAR 0 4
30731: PPUSH
30732: CALL_OW 380
// un := CreateHuman ;
30736: LD_ADDR_VAR 0 14
30740: PUSH
30741: CALL_OW 44
30745: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30746: LD_ADDR_VAR 0 7
30750: PUSH
30751: LD_VAR 0 7
30755: PPUSH
30756: LD_INT 1
30758: PPUSH
30759: LD_VAR 0 14
30763: PPUSH
30764: CALL_OW 2
30768: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30769: LD_VAR 0 14
30773: PPUSH
30774: LD_VAR 0 1
30778: PPUSH
30779: CALL_OW 250
30783: PPUSH
30784: LD_VAR 0 1
30788: PPUSH
30789: CALL_OW 251
30793: PPUSH
30794: LD_INT 10
30796: PPUSH
30797: LD_INT 0
30799: PPUSH
30800: CALL_OW 50
// continue ;
30804: GO 30705
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30806: LD_VAR 0 12
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PPUSH
30815: CALL_OW 313
30819: PUSH
30820: LD_VAR 0 12
30824: PUSH
30825: LD_INT 1
30827: ARRAY
30828: PPUSH
30829: CALL_OW 266
30833: PUSH
30834: LD_INT 32
30836: PUSH
30837: LD_INT 31
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: IN
30844: AND
30845: PUSH
30846: LD_VAR 0 12
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PPUSH
30855: CALL_OW 313
30859: PUSH
30860: LD_INT 6
30862: EQUAL
30863: OR
30864: IFFALSE 30884
// f := Delete ( f , 1 ) ;
30866: LD_ADDR_VAR 0 12
30870: PUSH
30871: LD_VAR 0 12
30875: PPUSH
30876: LD_INT 1
30878: PPUSH
30879: CALL_OW 3
30883: ST_TO_ADDR
// if not f then
30884: LD_VAR 0 12
30888: NOT
30889: IFFALSE 30907
// begin x := x + 2 ;
30891: LD_ADDR_VAR 0 13
30895: PUSH
30896: LD_VAR 0 13
30900: PUSH
30901: LD_INT 2
30903: PLUS
30904: ST_TO_ADDR
// continue ;
30905: GO 30705
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30907: LD_VAR 0 12
30911: PUSH
30912: LD_INT 1
30914: ARRAY
30915: PPUSH
30916: CALL_OW 266
30920: PUSH
30921: LD_INT 5
30923: EQUAL
30924: IFFALSE 30998
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30926: LD_VAR 0 12
30930: PUSH
30931: LD_INT 1
30933: ARRAY
30934: PPUSH
30935: CALL_OW 313
30939: PUSH
30940: LD_INT 3
30942: LESS
30943: IFFALSE 30979
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30945: LD_INT 0
30947: PPUSH
30948: LD_INT 5
30950: PUSH
30951: LD_INT 8
30953: PUSH
30954: LD_INT 9
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: PUSH
30962: LD_VAR 0 17
30966: ARRAY
30967: PPUSH
30968: LD_VAR 0 4
30972: PPUSH
30973: CALL_OW 380
30977: GO 30996
// PrepareHuman ( false , i , skill ) ;
30979: LD_INT 0
30981: PPUSH
30982: LD_VAR 0 8
30986: PPUSH
30987: LD_VAR 0 4
30991: PPUSH
30992: CALL_OW 380
// end else
30996: GO 31015
// PrepareHuman ( false , i , skill ) ;
30998: LD_INT 0
31000: PPUSH
31001: LD_VAR 0 8
31005: PPUSH
31006: LD_VAR 0 4
31010: PPUSH
31011: CALL_OW 380
// un := CreateHuman ;
31015: LD_ADDR_VAR 0 14
31019: PUSH
31020: CALL_OW 44
31024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31025: LD_ADDR_VAR 0 7
31029: PUSH
31030: LD_VAR 0 7
31034: PPUSH
31035: LD_INT 1
31037: PPUSH
31038: LD_VAR 0 14
31042: PPUSH
31043: CALL_OW 2
31047: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31048: LD_VAR 0 14
31052: PPUSH
31053: LD_VAR 0 12
31057: PUSH
31058: LD_INT 1
31060: ARRAY
31061: PPUSH
31062: CALL_OW 52
// end ;
31066: GO 30705
31068: POP
31069: POP
// end ;
31070: GO 30007
31072: POP
31073: POP
// result := result ^ buildings ;
31074: LD_ADDR_VAR 0 7
31078: PUSH
31079: LD_VAR 0 7
31083: PUSH
31084: LD_VAR 0 18
31088: ADD
31089: ST_TO_ADDR
// end else
31090: GO 31233
// begin for i = 1 to personel do
31092: LD_ADDR_VAR 0 8
31096: PUSH
31097: DOUBLE
31098: LD_INT 1
31100: DEC
31101: ST_TO_ADDR
31102: LD_VAR 0 6
31106: PUSH
31107: FOR_TO
31108: IFFALSE 31231
// begin if i > 4 then
31110: LD_VAR 0 8
31114: PUSH
31115: LD_INT 4
31117: GREATER
31118: IFFALSE 31122
// break ;
31120: GO 31231
// x := personel [ i ] ;
31122: LD_ADDR_VAR 0 13
31126: PUSH
31127: LD_VAR 0 6
31131: PUSH
31132: LD_VAR 0 8
31136: ARRAY
31137: ST_TO_ADDR
// if x = - 1 then
31138: LD_VAR 0 13
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: EQUAL
31147: IFFALSE 31151
// continue ;
31149: GO 31107
// PrepareHuman ( false , i , skill ) ;
31151: LD_INT 0
31153: PPUSH
31154: LD_VAR 0 8
31158: PPUSH
31159: LD_VAR 0 4
31163: PPUSH
31164: CALL_OW 380
// un := CreateHuman ;
31168: LD_ADDR_VAR 0 14
31172: PUSH
31173: CALL_OW 44
31177: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31178: LD_VAR 0 14
31182: PPUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 250
31192: PPUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: CALL_OW 251
31202: PPUSH
31203: LD_INT 10
31205: PPUSH
31206: LD_INT 0
31208: PPUSH
31209: CALL_OW 50
// result := result ^ un ;
31213: LD_ADDR_VAR 0 7
31217: PUSH
31218: LD_VAR 0 7
31222: PUSH
31223: LD_VAR 0 14
31227: ADD
31228: ST_TO_ADDR
// end ;
31229: GO 31107
31231: POP
31232: POP
// end ; end ;
31233: LD_VAR 0 7
31237: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31238: LD_INT 0
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
// result := false ;
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 0
31263: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31264: LD_VAR 0 1
31268: NOT
31269: PUSH
31270: LD_VAR 0 1
31274: PPUSH
31275: CALL_OW 266
31279: PUSH
31280: LD_INT 32
31282: PUSH
31283: LD_INT 33
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: IN
31290: NOT
31291: OR
31292: IFFALSE 31296
// exit ;
31294: GO 32405
// nat := GetNation ( tower ) ;
31296: LD_ADDR_VAR 0 12
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 248
31310: ST_TO_ADDR
// side := GetSide ( tower ) ;
31311: LD_ADDR_VAR 0 16
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 255
31325: ST_TO_ADDR
// x := GetX ( tower ) ;
31326: LD_ADDR_VAR 0 10
31330: PUSH
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 250
31340: ST_TO_ADDR
// y := GetY ( tower ) ;
31341: LD_ADDR_VAR 0 11
31345: PUSH
31346: LD_VAR 0 1
31350: PPUSH
31351: CALL_OW 251
31355: ST_TO_ADDR
// if not x or not y then
31356: LD_VAR 0 10
31360: NOT
31361: PUSH
31362: LD_VAR 0 11
31366: NOT
31367: OR
31368: IFFALSE 31372
// exit ;
31370: GO 32405
// weapon := 0 ;
31372: LD_ADDR_VAR 0 18
31376: PUSH
31377: LD_INT 0
31379: ST_TO_ADDR
// fac_list := [ ] ;
31380: LD_ADDR_VAR 0 17
31384: PUSH
31385: EMPTY
31386: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31387: LD_ADDR_VAR 0 6
31391: PUSH
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 274
31401: PPUSH
31402: LD_VAR 0 2
31406: PPUSH
31407: LD_INT 0
31409: PPUSH
31410: CALL 28976 0 3
31414: PPUSH
31415: LD_INT 30
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PPUSH
31425: CALL_OW 72
31429: ST_TO_ADDR
// if not factories then
31430: LD_VAR 0 6
31434: NOT
31435: IFFALSE 31439
// exit ;
31437: GO 32405
// for i in factories do
31439: LD_ADDR_VAR 0 8
31443: PUSH
31444: LD_VAR 0 6
31448: PUSH
31449: FOR_IN
31450: IFFALSE 31475
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31452: LD_ADDR_VAR 0 17
31456: PUSH
31457: LD_VAR 0 17
31461: PUSH
31462: LD_VAR 0 8
31466: PPUSH
31467: CALL_OW 478
31471: UNION
31472: ST_TO_ADDR
31473: GO 31449
31475: POP
31476: POP
// if not fac_list then
31477: LD_VAR 0 17
31481: NOT
31482: IFFALSE 31486
// exit ;
31484: GO 32405
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31486: LD_ADDR_VAR 0 5
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: LD_INT 5
31496: PUSH
31497: LD_INT 9
31499: PUSH
31500: LD_INT 10
31502: PUSH
31503: LD_INT 6
31505: PUSH
31506: LD_INT 7
31508: PUSH
31509: LD_INT 11
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 27
31523: PUSH
31524: LD_INT 28
31526: PUSH
31527: LD_INT 26
31529: PUSH
31530: LD_INT 30
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 43
31541: PUSH
31542: LD_INT 44
31544: PUSH
31545: LD_INT 46
31547: PUSH
31548: LD_INT 45
31550: PUSH
31551: LD_INT 47
31553: PUSH
31554: LD_INT 49
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: PUSH
31570: LD_VAR 0 12
31574: ARRAY
31575: ST_TO_ADDR
// list := list isect fac_list ;
31576: LD_ADDR_VAR 0 5
31580: PUSH
31581: LD_VAR 0 5
31585: PUSH
31586: LD_VAR 0 17
31590: ISECT
31591: ST_TO_ADDR
// if not list then
31592: LD_VAR 0 5
31596: NOT
31597: IFFALSE 31601
// exit ;
31599: GO 32405
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31601: LD_VAR 0 12
31605: PUSH
31606: LD_INT 3
31608: EQUAL
31609: PUSH
31610: LD_INT 49
31612: PUSH
31613: LD_VAR 0 5
31617: IN
31618: AND
31619: PUSH
31620: LD_INT 31
31622: PPUSH
31623: LD_VAR 0 16
31627: PPUSH
31628: CALL_OW 321
31632: PUSH
31633: LD_INT 2
31635: EQUAL
31636: AND
31637: IFFALSE 31697
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31639: LD_INT 22
31641: PUSH
31642: LD_VAR 0 16
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 35
31653: PUSH
31654: LD_INT 49
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 91
31663: PUSH
31664: LD_VAR 0 1
31668: PUSH
31669: LD_INT 10
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: PPUSH
31682: CALL_OW 69
31686: NOT
31687: IFFALSE 31697
// weapon := ru_time_lapser ;
31689: LD_ADDR_VAR 0 18
31693: PUSH
31694: LD_INT 49
31696: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31697: LD_VAR 0 12
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: IN
31712: PUSH
31713: LD_INT 11
31715: PUSH
31716: LD_VAR 0 5
31720: IN
31721: PUSH
31722: LD_INT 30
31724: PUSH
31725: LD_VAR 0 5
31729: IN
31730: OR
31731: AND
31732: PUSH
31733: LD_INT 6
31735: PPUSH
31736: LD_VAR 0 16
31740: PPUSH
31741: CALL_OW 321
31745: PUSH
31746: LD_INT 2
31748: EQUAL
31749: AND
31750: IFFALSE 31915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31752: LD_INT 22
31754: PUSH
31755: LD_VAR 0 16
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 35
31769: PUSH
31770: LD_INT 11
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 35
31779: PUSH
31780: LD_INT 30
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 91
31794: PUSH
31795: LD_VAR 0 1
31799: PUSH
31800: LD_INT 18
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: PPUSH
31813: CALL_OW 69
31817: NOT
31818: PUSH
31819: LD_INT 22
31821: PUSH
31822: LD_VAR 0 16
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 30
31836: PUSH
31837: LD_INT 32
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 30
31846: PUSH
31847: LD_INT 33
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 91
31861: PUSH
31862: LD_VAR 0 1
31866: PUSH
31867: LD_INT 12
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: PUSH
31880: EMPTY
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: PUSH
31888: LD_INT 2
31890: GREATER
31891: AND
31892: IFFALSE 31915
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31894: LD_ADDR_VAR 0 18
31898: PUSH
31899: LD_INT 11
31901: PUSH
31902: LD_INT 30
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_VAR 0 12
31913: ARRAY
31914: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31915: LD_VAR 0 18
31919: NOT
31920: PUSH
31921: LD_INT 40
31923: PPUSH
31924: LD_VAR 0 16
31928: PPUSH
31929: CALL_OW 321
31933: PUSH
31934: LD_INT 2
31936: EQUAL
31937: AND
31938: PUSH
31939: LD_INT 7
31941: PUSH
31942: LD_VAR 0 5
31946: IN
31947: PUSH
31948: LD_INT 28
31950: PUSH
31951: LD_VAR 0 5
31955: IN
31956: OR
31957: PUSH
31958: LD_INT 45
31960: PUSH
31961: LD_VAR 0 5
31965: IN
31966: OR
31967: AND
31968: IFFALSE 32222
// begin hex := GetHexInfo ( x , y ) ;
31970: LD_ADDR_VAR 0 4
31974: PUSH
31975: LD_VAR 0 10
31979: PPUSH
31980: LD_VAR 0 11
31984: PPUSH
31985: CALL_OW 546
31989: ST_TO_ADDR
// if hex [ 1 ] then
31990: LD_VAR 0 4
31994: PUSH
31995: LD_INT 1
31997: ARRAY
31998: IFFALSE 32002
// exit ;
32000: GO 32405
// height := hex [ 2 ] ;
32002: LD_ADDR_VAR 0 15
32006: PUSH
32007: LD_VAR 0 4
32011: PUSH
32012: LD_INT 2
32014: ARRAY
32015: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32016: LD_ADDR_VAR 0 14
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: LD_INT 5
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
// for i in tmp do
32039: LD_ADDR_VAR 0 8
32043: PUSH
32044: LD_VAR 0 14
32048: PUSH
32049: FOR_IN
32050: IFFALSE 32220
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32052: LD_ADDR_VAR 0 9
32056: PUSH
32057: LD_VAR 0 10
32061: PPUSH
32062: LD_VAR 0 8
32066: PPUSH
32067: LD_INT 5
32069: PPUSH
32070: CALL_OW 272
32074: PUSH
32075: LD_VAR 0 11
32079: PPUSH
32080: LD_VAR 0 8
32084: PPUSH
32085: LD_INT 5
32087: PPUSH
32088: CALL_OW 273
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32097: LD_VAR 0 9
32101: PUSH
32102: LD_INT 1
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 9
32110: PUSH
32111: LD_INT 2
32113: ARRAY
32114: PPUSH
32115: CALL_OW 488
32119: IFFALSE 32218
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32121: LD_ADDR_VAR 0 4
32125: PUSH
32126: LD_VAR 0 9
32130: PUSH
32131: LD_INT 1
32133: ARRAY
32134: PPUSH
32135: LD_VAR 0 9
32139: PUSH
32140: LD_INT 2
32142: ARRAY
32143: PPUSH
32144: CALL_OW 546
32148: ST_TO_ADDR
// if hex [ 1 ] then
32149: LD_VAR 0 4
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: IFFALSE 32161
// continue ;
32159: GO 32049
// h := hex [ 2 ] ;
32161: LD_ADDR_VAR 0 13
32165: PUSH
32166: LD_VAR 0 4
32170: PUSH
32171: LD_INT 2
32173: ARRAY
32174: ST_TO_ADDR
// if h + 7 < height then
32175: LD_VAR 0 13
32179: PUSH
32180: LD_INT 7
32182: PLUS
32183: PUSH
32184: LD_VAR 0 15
32188: LESS
32189: IFFALSE 32218
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32191: LD_ADDR_VAR 0 18
32195: PUSH
32196: LD_INT 7
32198: PUSH
32199: LD_INT 28
32201: PUSH
32202: LD_INT 45
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: PUSH
32210: LD_VAR 0 12
32214: ARRAY
32215: ST_TO_ADDR
// break ;
32216: GO 32220
// end ; end ; end ;
32218: GO 32049
32220: POP
32221: POP
// end ; if not weapon then
32222: LD_VAR 0 18
32226: NOT
32227: IFFALSE 32287
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32229: LD_ADDR_VAR 0 5
32233: PUSH
32234: LD_VAR 0 5
32238: PUSH
32239: LD_INT 11
32241: PUSH
32242: LD_INT 30
32244: PUSH
32245: LD_INT 49
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: DIFF
32253: ST_TO_ADDR
// if not list then
32254: LD_VAR 0 5
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 32405
// weapon := list [ rand ( 1 , list ) ] ;
32263: LD_ADDR_VAR 0 18
32267: PUSH
32268: LD_VAR 0 5
32272: PUSH
32273: LD_INT 1
32275: PPUSH
32276: LD_VAR 0 5
32280: PPUSH
32281: CALL_OW 12
32285: ARRAY
32286: ST_TO_ADDR
// end ; if weapon then
32287: LD_VAR 0 18
32291: IFFALSE 32405
// begin tmp := CostOfWeapon ( weapon ) ;
32293: LD_ADDR_VAR 0 14
32297: PUSH
32298: LD_VAR 0 18
32302: PPUSH
32303: CALL_OW 451
32307: ST_TO_ADDR
// j := GetBase ( tower ) ;
32308: LD_ADDR_VAR 0 9
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 274
32322: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32323: LD_VAR 0 9
32327: PPUSH
32328: LD_INT 1
32330: PPUSH
32331: CALL_OW 275
32335: PUSH
32336: LD_VAR 0 14
32340: PUSH
32341: LD_INT 1
32343: ARRAY
32344: GREATEREQUAL
32345: PUSH
32346: LD_VAR 0 9
32350: PPUSH
32351: LD_INT 2
32353: PPUSH
32354: CALL_OW 275
32358: PUSH
32359: LD_VAR 0 14
32363: PUSH
32364: LD_INT 2
32366: ARRAY
32367: GREATEREQUAL
32368: AND
32369: PUSH
32370: LD_VAR 0 9
32374: PPUSH
32375: LD_INT 3
32377: PPUSH
32378: CALL_OW 275
32382: PUSH
32383: LD_VAR 0 14
32387: PUSH
32388: LD_INT 3
32390: ARRAY
32391: GREATEREQUAL
32392: AND
32393: IFFALSE 32405
// result := weapon ;
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_VAR 0 18
32404: ST_TO_ADDR
// end ; end ;
32405: LD_VAR 0 3
32409: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
// result := true ;
32414: LD_ADDR_VAR 0 3
32418: PUSH
32419: LD_INT 1
32421: ST_TO_ADDR
// if array1 = array2 then
32422: LD_VAR 0 1
32426: PUSH
32427: LD_VAR 0 2
32431: EQUAL
32432: IFFALSE 32492
// begin for i = 1 to array1 do
32434: LD_ADDR_VAR 0 4
32438: PUSH
32439: DOUBLE
32440: LD_INT 1
32442: DEC
32443: ST_TO_ADDR
32444: LD_VAR 0 1
32448: PUSH
32449: FOR_TO
32450: IFFALSE 32488
// if array1 [ i ] <> array2 [ i ] then
32452: LD_VAR 0 1
32456: PUSH
32457: LD_VAR 0 4
32461: ARRAY
32462: PUSH
32463: LD_VAR 0 2
32467: PUSH
32468: LD_VAR 0 4
32472: ARRAY
32473: NONEQUAL
32474: IFFALSE 32486
// begin result := false ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_INT 0
32483: ST_TO_ADDR
// break ;
32484: GO 32488
// end ;
32486: GO 32449
32488: POP
32489: POP
// end else
32490: GO 32500
// result := false ;
32492: LD_ADDR_VAR 0 3
32496: PUSH
32497: LD_INT 0
32499: ST_TO_ADDR
// end ;
32500: LD_VAR 0 3
32504: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32505: LD_INT 0
32507: PPUSH
32508: PPUSH
// if not array1 or not array2 then
32509: LD_VAR 0 1
32513: NOT
32514: PUSH
32515: LD_VAR 0 2
32519: NOT
32520: OR
32521: IFFALSE 32525
// exit ;
32523: GO 32589
// result := true ;
32525: LD_ADDR_VAR 0 3
32529: PUSH
32530: LD_INT 1
32532: ST_TO_ADDR
// for i = 1 to array1 do
32533: LD_ADDR_VAR 0 4
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_VAR 0 1
32547: PUSH
32548: FOR_TO
32549: IFFALSE 32587
// if array1 [ i ] <> array2 [ i ] then
32551: LD_VAR 0 1
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: PUSH
32562: LD_VAR 0 2
32566: PUSH
32567: LD_VAR 0 4
32571: ARRAY
32572: NONEQUAL
32573: IFFALSE 32585
// begin result := false ;
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: LD_INT 0
32582: ST_TO_ADDR
// break ;
32583: GO 32587
// end ;
32585: GO 32548
32587: POP
32588: POP
// end ;
32589: LD_VAR 0 3
32593: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32594: LD_INT 0
32596: PPUSH
32597: PPUSH
32598: PPUSH
// pom := GetBase ( fac ) ;
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: CALL_OW 274
32613: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32614: LD_ADDR_VAR 0 4
32618: PUSH
32619: LD_VAR 0 2
32623: PUSH
32624: LD_INT 1
32626: ARRAY
32627: PPUSH
32628: LD_VAR 0 2
32632: PUSH
32633: LD_INT 2
32635: ARRAY
32636: PPUSH
32637: LD_VAR 0 2
32641: PUSH
32642: LD_INT 3
32644: ARRAY
32645: PPUSH
32646: LD_VAR 0 2
32650: PUSH
32651: LD_INT 4
32653: ARRAY
32654: PPUSH
32655: CALL_OW 449
32659: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_VAR 0 5
32669: PPUSH
32670: LD_INT 1
32672: PPUSH
32673: CALL_OW 275
32677: PUSH
32678: LD_VAR 0 4
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: GREATEREQUAL
32687: PUSH
32688: LD_VAR 0 5
32692: PPUSH
32693: LD_INT 2
32695: PPUSH
32696: CALL_OW 275
32700: PUSH
32701: LD_VAR 0 4
32705: PUSH
32706: LD_INT 2
32708: ARRAY
32709: GREATEREQUAL
32710: AND
32711: PUSH
32712: LD_VAR 0 5
32716: PPUSH
32717: LD_INT 3
32719: PPUSH
32720: CALL_OW 275
32724: PUSH
32725: LD_VAR 0 4
32729: PUSH
32730: LD_INT 3
32732: ARRAY
32733: GREATEREQUAL
32734: AND
32735: ST_TO_ADDR
// end ;
32736: LD_VAR 0 3
32740: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
// pom := GetBase ( building ) ;
32747: LD_ADDR_VAR 0 3
32751: PUSH
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 274
32761: ST_TO_ADDR
// if not pom then
32762: LD_VAR 0 3
32766: NOT
32767: IFFALSE 32771
// exit ;
32769: GO 32941
// btype := GetBType ( building ) ;
32771: LD_ADDR_VAR 0 5
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 266
32785: ST_TO_ADDR
// if btype = b_armoury then
32786: LD_VAR 0 5
32790: PUSH
32791: LD_INT 4
32793: EQUAL
32794: IFFALSE 32804
// btype := b_barracks ;
32796: LD_ADDR_VAR 0 5
32800: PUSH
32801: LD_INT 5
32803: ST_TO_ADDR
// if btype = b_depot then
32804: LD_VAR 0 5
32808: PUSH
32809: LD_INT 0
32811: EQUAL
32812: IFFALSE 32822
// btype := b_warehouse ;
32814: LD_ADDR_VAR 0 5
32818: PUSH
32819: LD_INT 1
32821: ST_TO_ADDR
// if btype = b_workshop then
32822: LD_VAR 0 5
32826: PUSH
32827: LD_INT 2
32829: EQUAL
32830: IFFALSE 32840
// btype := b_factory ;
32832: LD_ADDR_VAR 0 5
32836: PUSH
32837: LD_INT 3
32839: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32840: LD_ADDR_VAR 0 4
32844: PUSH
32845: LD_VAR 0 5
32849: PPUSH
32850: LD_VAR 0 1
32854: PPUSH
32855: CALL_OW 248
32859: PPUSH
32860: CALL_OW 450
32864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32865: LD_ADDR_VAR 0 2
32869: PUSH
32870: LD_VAR 0 3
32874: PPUSH
32875: LD_INT 1
32877: PPUSH
32878: CALL_OW 275
32882: PUSH
32883: LD_VAR 0 4
32887: PUSH
32888: LD_INT 1
32890: ARRAY
32891: GREATEREQUAL
32892: PUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: LD_INT 2
32900: PPUSH
32901: CALL_OW 275
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: LD_INT 2
32913: ARRAY
32914: GREATEREQUAL
32915: AND
32916: PUSH
32917: LD_VAR 0 3
32921: PPUSH
32922: LD_INT 3
32924: PPUSH
32925: CALL_OW 275
32929: PUSH
32930: LD_VAR 0 4
32934: PUSH
32935: LD_INT 3
32937: ARRAY
32938: GREATEREQUAL
32939: AND
32940: ST_TO_ADDR
// end ;
32941: LD_VAR 0 2
32945: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32946: LD_INT 0
32948: PPUSH
32949: PPUSH
32950: PPUSH
// pom := GetBase ( building ) ;
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 274
32965: ST_TO_ADDR
// if not pom then
32966: LD_VAR 0 4
32970: NOT
32971: IFFALSE 32975
// exit ;
32973: GO 33076
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32975: LD_ADDR_VAR 0 5
32979: PUSH
32980: LD_VAR 0 2
32984: PPUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 248
32994: PPUSH
32995: CALL_OW 450
32999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_VAR 0 4
33009: PPUSH
33010: LD_INT 1
33012: PPUSH
33013: CALL_OW 275
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: LD_INT 1
33025: ARRAY
33026: GREATEREQUAL
33027: PUSH
33028: LD_VAR 0 4
33032: PPUSH
33033: LD_INT 2
33035: PPUSH
33036: CALL_OW 275
33040: PUSH
33041: LD_VAR 0 5
33045: PUSH
33046: LD_INT 2
33048: ARRAY
33049: GREATEREQUAL
33050: AND
33051: PUSH
33052: LD_VAR 0 4
33056: PPUSH
33057: LD_INT 3
33059: PPUSH
33060: CALL_OW 275
33064: PUSH
33065: LD_VAR 0 5
33069: PUSH
33070: LD_INT 3
33072: ARRAY
33073: GREATEREQUAL
33074: AND
33075: ST_TO_ADDR
// end ;
33076: LD_VAR 0 3
33080: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
// result := false ;
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_INT 0
33101: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33102: LD_VAR 0 5
33106: NOT
33107: PUSH
33108: LD_VAR 0 1
33112: NOT
33113: OR
33114: PUSH
33115: LD_VAR 0 2
33119: NOT
33120: OR
33121: PUSH
33122: LD_VAR 0 3
33126: NOT
33127: OR
33128: IFFALSE 33132
// exit ;
33130: GO 33946
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33132: LD_ADDR_VAR 0 14
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_VAR 0 2
33146: PPUSH
33147: LD_VAR 0 3
33151: PPUSH
33152: LD_VAR 0 4
33156: PPUSH
33157: LD_VAR 0 5
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: PPUSH
33166: CALL_OW 248
33170: PPUSH
33171: LD_INT 0
33173: PPUSH
33174: CALL 35199 0 6
33178: ST_TO_ADDR
// if not hexes then
33179: LD_VAR 0 14
33183: NOT
33184: IFFALSE 33188
// exit ;
33186: GO 33946
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33188: LD_ADDR_VAR 0 17
33192: PUSH
33193: LD_VAR 0 5
33197: PPUSH
33198: LD_INT 22
33200: PUSH
33201: LD_VAR 0 13
33205: PPUSH
33206: CALL_OW 255
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 30
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 30
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PPUSH
33247: CALL_OW 72
33251: ST_TO_ADDR
// for i = 1 to hexes do
33252: LD_ADDR_VAR 0 9
33256: PUSH
33257: DOUBLE
33258: LD_INT 1
33260: DEC
33261: ST_TO_ADDR
33262: LD_VAR 0 14
33266: PUSH
33267: FOR_TO
33268: IFFALSE 33944
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33270: LD_ADDR_VAR 0 13
33274: PUSH
33275: LD_VAR 0 14
33279: PUSH
33280: LD_VAR 0 9
33284: ARRAY
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: PPUSH
33290: LD_VAR 0 14
33294: PUSH
33295: LD_VAR 0 9
33299: ARRAY
33300: PUSH
33301: LD_INT 2
33303: ARRAY
33304: PPUSH
33305: CALL_OW 428
33309: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33310: LD_VAR 0 14
33314: PUSH
33315: LD_VAR 0 9
33319: ARRAY
33320: PUSH
33321: LD_INT 1
33323: ARRAY
33324: PPUSH
33325: LD_VAR 0 14
33329: PUSH
33330: LD_VAR 0 9
33334: ARRAY
33335: PUSH
33336: LD_INT 2
33338: ARRAY
33339: PPUSH
33340: CALL_OW 351
33344: PUSH
33345: LD_VAR 0 14
33349: PUSH
33350: LD_VAR 0 9
33354: ARRAY
33355: PUSH
33356: LD_INT 1
33358: ARRAY
33359: PPUSH
33360: LD_VAR 0 14
33364: PUSH
33365: LD_VAR 0 9
33369: ARRAY
33370: PUSH
33371: LD_INT 2
33373: ARRAY
33374: PPUSH
33375: CALL_OW 488
33379: NOT
33380: OR
33381: PUSH
33382: LD_VAR 0 13
33386: PPUSH
33387: CALL_OW 247
33391: PUSH
33392: LD_INT 3
33394: EQUAL
33395: OR
33396: IFFALSE 33402
// exit ;
33398: POP
33399: POP
33400: GO 33946
// if not tmp then
33402: LD_VAR 0 13
33406: NOT
33407: IFFALSE 33411
// continue ;
33409: GO 33267
// result := true ;
33411: LD_ADDR_VAR 0 8
33415: PUSH
33416: LD_INT 1
33418: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33419: LD_VAR 0 6
33423: PUSH
33424: LD_VAR 0 13
33428: PPUSH
33429: CALL_OW 247
33433: PUSH
33434: LD_INT 2
33436: EQUAL
33437: AND
33438: PUSH
33439: LD_VAR 0 13
33443: PPUSH
33444: CALL_OW 263
33448: PUSH
33449: LD_INT 1
33451: EQUAL
33452: AND
33453: IFFALSE 33617
// begin if IsDrivenBy ( tmp ) then
33455: LD_VAR 0 13
33459: PPUSH
33460: CALL_OW 311
33464: IFFALSE 33468
// continue ;
33466: GO 33267
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33468: LD_VAR 0 6
33472: PPUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 60
33478: PUSH
33479: EMPTY
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: LD_INT 55
33491: PUSH
33492: EMPTY
33493: LIST
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PPUSH
33503: CALL_OW 72
33507: IFFALSE 33615
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33509: LD_ADDR_VAR 0 18
33513: PUSH
33514: LD_VAR 0 6
33518: PPUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 60
33524: PUSH
33525: EMPTY
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: LD_INT 55
33537: PUSH
33538: EMPTY
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PPUSH
33549: CALL_OW 72
33553: PUSH
33554: LD_INT 1
33556: ARRAY
33557: ST_TO_ADDR
// if IsInUnit ( driver ) then
33558: LD_VAR 0 18
33562: PPUSH
33563: CALL_OW 310
33567: IFFALSE 33578
// ComExit ( driver ) ;
33569: LD_VAR 0 18
33573: PPUSH
33574: CALL 58980 0 1
// AddComEnterUnit ( driver , tmp ) ;
33578: LD_VAR 0 18
33582: PPUSH
33583: LD_VAR 0 13
33587: PPUSH
33588: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33592: LD_VAR 0 18
33596: PPUSH
33597: LD_VAR 0 7
33601: PPUSH
33602: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33606: LD_VAR 0 18
33610: PPUSH
33611: CALL_OW 181
// end ; continue ;
33615: GO 33267
// end ; if not cleaners or not tmp in cleaners then
33617: LD_VAR 0 6
33621: NOT
33622: PUSH
33623: LD_VAR 0 13
33627: PUSH
33628: LD_VAR 0 6
33632: IN
33633: NOT
33634: OR
33635: IFFALSE 33942
// begin if dep then
33637: LD_VAR 0 17
33641: IFFALSE 33777
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33643: LD_ADDR_VAR 0 16
33647: PUSH
33648: LD_VAR 0 17
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: CALL_OW 250
33661: PPUSH
33662: LD_VAR 0 17
33666: PUSH
33667: LD_INT 1
33669: ARRAY
33670: PPUSH
33671: CALL_OW 254
33675: PPUSH
33676: LD_INT 5
33678: PPUSH
33679: CALL_OW 272
33683: PUSH
33684: LD_VAR 0 17
33688: PUSH
33689: LD_INT 1
33691: ARRAY
33692: PPUSH
33693: CALL_OW 251
33697: PPUSH
33698: LD_VAR 0 17
33702: PUSH
33703: LD_INT 1
33705: ARRAY
33706: PPUSH
33707: CALL_OW 254
33711: PPUSH
33712: LD_INT 5
33714: PPUSH
33715: CALL_OW 273
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33724: LD_VAR 0 16
33728: PUSH
33729: LD_INT 1
33731: ARRAY
33732: PPUSH
33733: LD_VAR 0 16
33737: PUSH
33738: LD_INT 2
33740: ARRAY
33741: PPUSH
33742: CALL_OW 488
33746: IFFALSE 33777
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33748: LD_VAR 0 13
33752: PPUSH
33753: LD_VAR 0 16
33757: PUSH
33758: LD_INT 1
33760: ARRAY
33761: PPUSH
33762: LD_VAR 0 16
33766: PUSH
33767: LD_INT 2
33769: ARRAY
33770: PPUSH
33771: CALL_OW 111
// continue ;
33775: GO 33267
// end ; end ; r := GetDir ( tmp ) ;
33777: LD_ADDR_VAR 0 15
33781: PUSH
33782: LD_VAR 0 13
33786: PPUSH
33787: CALL_OW 254
33791: ST_TO_ADDR
// if r = 5 then
33792: LD_VAR 0 15
33796: PUSH
33797: LD_INT 5
33799: EQUAL
33800: IFFALSE 33810
// r := 0 ;
33802: LD_ADDR_VAR 0 15
33806: PUSH
33807: LD_INT 0
33809: ST_TO_ADDR
// for j = r to 5 do
33810: LD_ADDR_VAR 0 10
33814: PUSH
33815: DOUBLE
33816: LD_VAR 0 15
33820: DEC
33821: ST_TO_ADDR
33822: LD_INT 5
33824: PUSH
33825: FOR_TO
33826: IFFALSE 33940
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33828: LD_ADDR_VAR 0 11
33832: PUSH
33833: LD_VAR 0 13
33837: PPUSH
33838: CALL_OW 250
33842: PPUSH
33843: LD_VAR 0 10
33847: PPUSH
33848: LD_INT 2
33850: PPUSH
33851: CALL_OW 272
33855: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33856: LD_ADDR_VAR 0 12
33860: PUSH
33861: LD_VAR 0 13
33865: PPUSH
33866: CALL_OW 251
33870: PPUSH
33871: LD_VAR 0 10
33875: PPUSH
33876: LD_INT 2
33878: PPUSH
33879: CALL_OW 273
33883: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33884: LD_VAR 0 11
33888: PPUSH
33889: LD_VAR 0 12
33893: PPUSH
33894: CALL_OW 488
33898: PUSH
33899: LD_VAR 0 11
33903: PPUSH
33904: LD_VAR 0 12
33908: PPUSH
33909: CALL_OW 428
33913: NOT
33914: AND
33915: IFFALSE 33938
// begin ComMoveXY ( tmp , _x , _y ) ;
33917: LD_VAR 0 13
33921: PPUSH
33922: LD_VAR 0 11
33926: PPUSH
33927: LD_VAR 0 12
33931: PPUSH
33932: CALL_OW 111
// break ;
33936: GO 33940
// end ; end ;
33938: GO 33825
33940: POP
33941: POP
// end ; end ;
33942: GO 33267
33944: POP
33945: POP
// end ;
33946: LD_VAR 0 8
33950: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33951: LD_INT 0
33953: PPUSH
// result := true ;
33954: LD_ADDR_VAR 0 3
33958: PUSH
33959: LD_INT 1
33961: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33962: LD_VAR 0 2
33966: PUSH
33967: LD_INT 24
33969: DOUBLE
33970: EQUAL
33971: IFTRUE 33981
33973: LD_INT 33
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33981
33979: GO 34006
33981: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: LD_INT 32
33989: PPUSH
33990: LD_VAR 0 1
33994: PPUSH
33995: CALL_OW 321
33999: PUSH
34000: LD_INT 2
34002: EQUAL
34003: ST_TO_ADDR
34004: GO 34322
34006: LD_INT 20
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34014
34012: GO 34039
34014: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34015: LD_ADDR_VAR 0 3
34019: PUSH
34020: LD_INT 6
34022: PPUSH
34023: LD_VAR 0 1
34027: PPUSH
34028: CALL_OW 321
34032: PUSH
34033: LD_INT 2
34035: EQUAL
34036: ST_TO_ADDR
34037: GO 34322
34039: LD_INT 22
34041: DOUBLE
34042: EQUAL
34043: IFTRUE 34053
34045: LD_INT 36
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34078
34053: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34054: LD_ADDR_VAR 0 3
34058: PUSH
34059: LD_INT 15
34061: PPUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 321
34071: PUSH
34072: LD_INT 2
34074: EQUAL
34075: ST_TO_ADDR
34076: GO 34322
34078: LD_INT 30
34080: DOUBLE
34081: EQUAL
34082: IFTRUE 34086
34084: GO 34111
34086: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_INT 20
34094: PPUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 321
34104: PUSH
34105: LD_INT 2
34107: EQUAL
34108: ST_TO_ADDR
34109: GO 34322
34111: LD_INT 28
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34125
34117: LD_INT 21
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34150
34125: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 21
34133: PPUSH
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL_OW 321
34143: PUSH
34144: LD_INT 2
34146: EQUAL
34147: ST_TO_ADDR
34148: GO 34322
34150: LD_INT 16
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34183
34158: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 84
34166: PPUSH
34167: LD_VAR 0 1
34171: PPUSH
34172: CALL_OW 321
34176: PUSH
34177: LD_INT 2
34179: EQUAL
34180: ST_TO_ADDR
34181: GO 34322
34183: LD_INT 19
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34197
34189: LD_INT 23
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34222
34197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 83
34205: PPUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 321
34215: PUSH
34216: LD_INT 2
34218: EQUAL
34219: ST_TO_ADDR
34220: GO 34322
34222: LD_INT 17
34224: DOUBLE
34225: EQUAL
34226: IFTRUE 34230
34228: GO 34255
34230: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34231: LD_ADDR_VAR 0 3
34235: PUSH
34236: LD_INT 39
34238: PPUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 321
34248: PUSH
34249: LD_INT 2
34251: EQUAL
34252: ST_TO_ADDR
34253: GO 34322
34255: LD_INT 18
34257: DOUBLE
34258: EQUAL
34259: IFTRUE 34263
34261: GO 34288
34263: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_INT 40
34271: PPUSH
34272: LD_VAR 0 1
34276: PPUSH
34277: CALL_OW 321
34281: PUSH
34282: LD_INT 2
34284: EQUAL
34285: ST_TO_ADDR
34286: GO 34322
34288: LD_INT 27
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34321
34296: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34297: LD_ADDR_VAR 0 3
34301: PUSH
34302: LD_INT 35
34304: PPUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 321
34314: PUSH
34315: LD_INT 2
34317: EQUAL
34318: ST_TO_ADDR
34319: GO 34322
34321: POP
// end ;
34322: LD_VAR 0 3
34326: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34327: LD_INT 0
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
// result := false ;
34340: LD_ADDR_VAR 0 6
34344: PUSH
34345: LD_INT 0
34347: ST_TO_ADDR
// if btype = b_depot then
34348: LD_VAR 0 2
34352: PUSH
34353: LD_INT 0
34355: EQUAL
34356: IFFALSE 34368
// begin result := true ;
34358: LD_ADDR_VAR 0 6
34362: PUSH
34363: LD_INT 1
34365: ST_TO_ADDR
// exit ;
34366: GO 35194
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34368: LD_VAR 0 1
34372: NOT
34373: PUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 266
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: IN
34394: NOT
34395: OR
34396: PUSH
34397: LD_VAR 0 2
34401: NOT
34402: OR
34403: PUSH
34404: LD_VAR 0 5
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: LD_INT 4
34423: PUSH
34424: LD_INT 5
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: IN
34435: NOT
34436: OR
34437: PUSH
34438: LD_VAR 0 3
34442: PPUSH
34443: LD_VAR 0 4
34447: PPUSH
34448: CALL_OW 488
34452: NOT
34453: OR
34454: IFFALSE 34458
// exit ;
34456: GO 35194
// side := GetSide ( depot ) ;
34458: LD_ADDR_VAR 0 9
34462: PUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL_OW 255
34472: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34473: LD_VAR 0 9
34477: PPUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: CALL 33951 0 2
34487: NOT
34488: IFFALSE 34492
// exit ;
34490: GO 35194
// pom := GetBase ( depot ) ;
34492: LD_ADDR_VAR 0 10
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 274
34506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34507: LD_ADDR_VAR 0 11
34511: PUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 248
34526: PPUSH
34527: CALL_OW 450
34531: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34532: LD_VAR 0 10
34536: PPUSH
34537: LD_INT 1
34539: PPUSH
34540: CALL_OW 275
34544: PUSH
34545: LD_VAR 0 11
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: GREATEREQUAL
34554: PUSH
34555: LD_VAR 0 10
34559: PPUSH
34560: LD_INT 2
34562: PPUSH
34563: CALL_OW 275
34567: PUSH
34568: LD_VAR 0 11
34572: PUSH
34573: LD_INT 2
34575: ARRAY
34576: GREATEREQUAL
34577: AND
34578: PUSH
34579: LD_VAR 0 10
34583: PPUSH
34584: LD_INT 3
34586: PPUSH
34587: CALL_OW 275
34591: PUSH
34592: LD_VAR 0 11
34596: PUSH
34597: LD_INT 3
34599: ARRAY
34600: GREATEREQUAL
34601: AND
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 35194
// if GetBType ( depot ) = b_depot then
34607: LD_VAR 0 1
34611: PPUSH
34612: CALL_OW 266
34616: PUSH
34617: LD_INT 0
34619: EQUAL
34620: IFFALSE 34632
// dist := 28 else
34622: LD_ADDR_VAR 0 14
34626: PUSH
34627: LD_INT 28
34629: ST_TO_ADDR
34630: GO 34640
// dist := 36 ;
34632: LD_ADDR_VAR 0 14
34636: PUSH
34637: LD_INT 36
34639: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34640: LD_VAR 0 1
34644: PPUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: LD_VAR 0 4
34654: PPUSH
34655: CALL_OW 297
34659: PUSH
34660: LD_VAR 0 14
34664: GREATER
34665: IFFALSE 34669
// exit ;
34667: GO 35194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34669: LD_ADDR_VAR 0 12
34673: PUSH
34674: LD_VAR 0 2
34678: PPUSH
34679: LD_VAR 0 3
34683: PPUSH
34684: LD_VAR 0 4
34688: PPUSH
34689: LD_VAR 0 5
34693: PPUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 248
34703: PPUSH
34704: LD_INT 0
34706: PPUSH
34707: CALL 35199 0 6
34711: ST_TO_ADDR
// if not hexes then
34712: LD_VAR 0 12
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 35194
// hex := GetHexInfo ( x , y ) ;
34721: LD_ADDR_VAR 0 15
34725: PUSH
34726: LD_VAR 0 3
34730: PPUSH
34731: LD_VAR 0 4
34735: PPUSH
34736: CALL_OW 546
34740: ST_TO_ADDR
// if hex [ 1 ] then
34741: LD_VAR 0 15
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: IFFALSE 34753
// exit ;
34751: GO 35194
// height := hex [ 2 ] ;
34753: LD_ADDR_VAR 0 13
34757: PUSH
34758: LD_VAR 0 15
34762: PUSH
34763: LD_INT 2
34765: ARRAY
34766: ST_TO_ADDR
// for i = 1 to hexes do
34767: LD_ADDR_VAR 0 7
34771: PUSH
34772: DOUBLE
34773: LD_INT 1
34775: DEC
34776: ST_TO_ADDR
34777: LD_VAR 0 12
34781: PUSH
34782: FOR_TO
34783: IFFALSE 35113
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34785: LD_VAR 0 12
34789: PUSH
34790: LD_VAR 0 7
34794: ARRAY
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: PPUSH
34800: LD_VAR 0 12
34804: PUSH
34805: LD_VAR 0 7
34809: ARRAY
34810: PUSH
34811: LD_INT 2
34813: ARRAY
34814: PPUSH
34815: CALL_OW 488
34819: NOT
34820: PUSH
34821: LD_VAR 0 12
34825: PUSH
34826: LD_VAR 0 7
34830: ARRAY
34831: PUSH
34832: LD_INT 1
34834: ARRAY
34835: PPUSH
34836: LD_VAR 0 12
34840: PUSH
34841: LD_VAR 0 7
34845: ARRAY
34846: PUSH
34847: LD_INT 2
34849: ARRAY
34850: PPUSH
34851: CALL_OW 428
34855: PUSH
34856: LD_INT 0
34858: GREATER
34859: OR
34860: PUSH
34861: LD_VAR 0 12
34865: PUSH
34866: LD_VAR 0 7
34870: ARRAY
34871: PUSH
34872: LD_INT 1
34874: ARRAY
34875: PPUSH
34876: LD_VAR 0 12
34880: PUSH
34881: LD_VAR 0 7
34885: ARRAY
34886: PUSH
34887: LD_INT 2
34889: ARRAY
34890: PPUSH
34891: CALL_OW 351
34895: OR
34896: IFFALSE 34902
// exit ;
34898: POP
34899: POP
34900: GO 35194
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34902: LD_ADDR_VAR 0 8
34906: PUSH
34907: LD_VAR 0 12
34911: PUSH
34912: LD_VAR 0 7
34916: ARRAY
34917: PUSH
34918: LD_INT 1
34920: ARRAY
34921: PPUSH
34922: LD_VAR 0 12
34926: PUSH
34927: LD_VAR 0 7
34931: ARRAY
34932: PUSH
34933: LD_INT 2
34935: ARRAY
34936: PPUSH
34937: CALL_OW 546
34941: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34942: LD_VAR 0 8
34946: PUSH
34947: LD_INT 1
34949: ARRAY
34950: PUSH
34951: LD_VAR 0 8
34955: PUSH
34956: LD_INT 2
34958: ARRAY
34959: PUSH
34960: LD_VAR 0 13
34964: PUSH
34965: LD_INT 2
34967: PLUS
34968: GREATER
34969: OR
34970: PUSH
34971: LD_VAR 0 8
34975: PUSH
34976: LD_INT 2
34978: ARRAY
34979: PUSH
34980: LD_VAR 0 13
34984: PUSH
34985: LD_INT 2
34987: MINUS
34988: LESS
34989: OR
34990: PUSH
34991: LD_VAR 0 8
34995: PUSH
34996: LD_INT 3
34998: ARRAY
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 8
35005: PUSH
35006: LD_INT 9
35008: PUSH
35009: LD_INT 10
35011: PUSH
35012: LD_INT 11
35014: PUSH
35015: LD_INT 12
35017: PUSH
35018: LD_INT 13
35020: PUSH
35021: LD_INT 16
35023: PUSH
35024: LD_INT 17
35026: PUSH
35027: LD_INT 18
35029: PUSH
35030: LD_INT 19
35032: PUSH
35033: LD_INT 20
35035: PUSH
35036: LD_INT 21
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: IN
35054: NOT
35055: OR
35056: PUSH
35057: LD_VAR 0 8
35061: PUSH
35062: LD_INT 5
35064: ARRAY
35065: NOT
35066: OR
35067: PUSH
35068: LD_VAR 0 8
35072: PUSH
35073: LD_INT 6
35075: ARRAY
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 7
35085: PUSH
35086: LD_INT 9
35088: PUSH
35089: LD_INT 10
35091: PUSH
35092: LD_INT 11
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: IN
35103: NOT
35104: OR
35105: IFFALSE 35111
// exit ;
35107: POP
35108: POP
35109: GO 35194
// end ;
35111: GO 34782
35113: POP
35114: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35115: LD_VAR 0 9
35119: PPUSH
35120: LD_VAR 0 3
35124: PPUSH
35125: LD_VAR 0 4
35129: PPUSH
35130: LD_INT 20
35132: PPUSH
35133: CALL 27117 0 4
35137: PUSH
35138: LD_INT 4
35140: ARRAY
35141: IFFALSE 35145
// exit ;
35143: GO 35194
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35145: LD_VAR 0 2
35149: PUSH
35150: LD_INT 29
35152: PUSH
35153: LD_INT 30
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: IN
35160: PUSH
35161: LD_VAR 0 3
35165: PPUSH
35166: LD_VAR 0 4
35170: PPUSH
35171: LD_VAR 0 9
35175: PPUSH
35176: CALL_OW 440
35180: NOT
35181: AND
35182: IFFALSE 35186
// exit ;
35184: GO 35194
// result := true ;
35186: LD_ADDR_VAR 0 6
35190: PUSH
35191: LD_INT 1
35193: ST_TO_ADDR
// end ;
35194: LD_VAR 0 6
35198: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
// result = [ ] ;
35259: LD_ADDR_VAR 0 7
35263: PUSH
35264: EMPTY
35265: ST_TO_ADDR
// temp_list = [ ] ;
35266: LD_ADDR_VAR 0 9
35270: PUSH
35271: EMPTY
35272: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35273: LD_VAR 0 4
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: LD_INT 5
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: IN
35304: NOT
35305: PUSH
35306: LD_VAR 0 1
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: IN
35321: PUSH
35322: LD_VAR 0 5
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 3
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: IN
35341: NOT
35342: AND
35343: OR
35344: IFFALSE 35348
// exit ;
35346: GO 53739
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35348: LD_VAR 0 1
35352: PUSH
35353: LD_INT 6
35355: PUSH
35356: LD_INT 7
35358: PUSH
35359: LD_INT 8
35361: PUSH
35362: LD_INT 13
35364: PUSH
35365: LD_INT 12
35367: PUSH
35368: LD_INT 15
35370: PUSH
35371: LD_INT 11
35373: PUSH
35374: LD_INT 14
35376: PUSH
35377: LD_INT 10
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: IN
35391: IFFALSE 35401
// btype = b_lab ;
35393: LD_ADDR_VAR 0 1
35397: PUSH
35398: LD_INT 6
35400: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35401: LD_VAR 0 6
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: IN
35420: NOT
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 6
35441: PUSH
35442: LD_INT 36
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: LD_INT 5
35450: PUSH
35451: LD_INT 31
35453: PUSH
35454: LD_INT 32
35456: PUSH
35457: LD_INT 33
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: IN
35473: NOT
35474: PUSH
35475: LD_VAR 0 6
35479: PUSH
35480: LD_INT 1
35482: EQUAL
35483: AND
35484: OR
35485: PUSH
35486: LD_VAR 0 1
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: IN
35501: NOT
35502: PUSH
35503: LD_VAR 0 6
35507: PUSH
35508: LD_INT 2
35510: EQUAL
35511: AND
35512: OR
35513: IFFALSE 35523
// mode = 0 ;
35515: LD_ADDR_VAR 0 6
35519: PUSH
35520: LD_INT 0
35522: ST_TO_ADDR
// case mode of 0 :
35523: LD_VAR 0 6
35527: PUSH
35528: LD_INT 0
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 46989
35536: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35537: LD_ADDR_VAR 0 11
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 3
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35730: LD_ADDR_VAR 0 12
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: NEG
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 3
35898: NEG
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35926: LD_ADDR_VAR 0 13
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 2
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 3
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 3
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: NEG
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36125: LD_ADDR_VAR 0 14
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36321: LD_ADDR_VAR 0 15
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36514: LD_ADDR_VAR 0 16
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 3
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36707: LD_ADDR_VAR 0 17
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36937: LD_ADDR_VAR 0 18
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37167: LD_ADDR_VAR 0 19
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37397: LD_ADDR_VAR 0 20
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37627: LD_ADDR_VAR 0 21
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37857: LD_ADDR_VAR 0 22
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38087: LD_ADDR_VAR 0 23
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38367: LD_ADDR_VAR 0 24
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38643: LD_ADDR_VAR 0 25
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: NEG
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 3
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38917: LD_ADDR_VAR 0 26
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39193: LD_ADDR_VAR 0 27
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39473: LD_ADDR_VAR 0 28
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: LD_INT 3
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 3
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39755: LD_ADDR_VAR 0 29
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40034: LD_ADDR_VAR 0 30
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 3
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 3
40277: NEG
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40312: LD_ADDR_VAR 0 31
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: LD_INT 3
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 3
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 3
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40590: LD_ADDR_VAR 0 32
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40868: LD_ADDR_VAR 0 33
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 3
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 3
41112: NEG
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41147: LD_ADDR_VAR 0 34
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 3
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41427: LD_ADDR_VAR 0 35
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41539: LD_ADDR_VAR 0 36
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41651: LD_ADDR_VAR 0 37
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41763: LD_ADDR_VAR 0 38
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41875: LD_ADDR_VAR 0 39
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41987: LD_ADDR_VAR 0 40
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42099: LD_ADDR_VAR 0 41
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 3
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 3
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42449: LD_ADDR_VAR 0 42
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 3
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 3
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 3
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 3
42746: NEG
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42799: LD_ADDR_VAR 0 43
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 3
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43147: LD_ADDR_VAR 0 44
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 3
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 3
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43497: LD_ADDR_VAR 0 45
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 3
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 3
43806: NEG
43807: PUSH
43808: LD_INT 3
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43847: LD_ADDR_VAR 0 46
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44195: LD_ADDR_VAR 0 47
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44346: LD_ADDR_VAR 0 48
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44493: LD_ADDR_VAR 0 49
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44637: LD_ADDR_VAR 0 50
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44781: LD_ADDR_VAR 0 51
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44928: LD_ADDR_VAR 0 52
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45079: LD_ADDR_VAR 0 53
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45309: LD_ADDR_VAR 0 54
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45539: LD_ADDR_VAR 0 55
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45769: LD_ADDR_VAR 0 56
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45999: LD_ADDR_VAR 0 57
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46229: LD_ADDR_VAR 0 58
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46459: LD_ADDR_VAR 0 59
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46547: LD_ADDR_VAR 0 60
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46635: LD_ADDR_VAR 0 61
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46723: LD_ADDR_VAR 0 62
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46811: LD_ADDR_VAR 0 63
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46899: LD_ADDR_VAR 0 64
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// end ; 1 :
46987: GO 52884
46989: LD_INT 1
46991: DOUBLE
46992: EQUAL
46993: IFTRUE 46997
46995: GO 49620
46997: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46998: LD_ADDR_VAR 0 11
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47042: LD_ADDR_VAR 0 12
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47083: LD_ADDR_VAR 0 13
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47123: LD_ADDR_VAR 0 14
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47164: LD_ADDR_VAR 0 15
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47208: LD_ADDR_VAR 0 16
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47254: LD_ADDR_VAR 0 17
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47298: LD_ADDR_VAR 0 18
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47339: LD_ADDR_VAR 0 19
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47379: LD_ADDR_VAR 0 20
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47420: LD_ADDR_VAR 0 21
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47464: LD_ADDR_VAR 0 22
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47510: LD_ADDR_VAR 0 23
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 4
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47554: LD_ADDR_VAR 0 24
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 4
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47595: LD_ADDR_VAR 0 25
47599: PUSH
47600: LD_INT 3
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 4
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 4
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47635: LD_ADDR_VAR 0 26
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 4
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47676: LD_ADDR_VAR 0 27
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 4
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47720: LD_ADDR_VAR 0 28
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: LD_INT 4
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 4
47751: NEG
47752: PUSH
47753: LD_INT 3
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47766: LD_ADDR_VAR 0 29
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 4
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 4
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 5
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 5
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 4
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 6
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 6
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 5
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47921: LD_ADDR_VAR 0 30
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 4
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 4
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 5
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 5
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 5
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 6
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 6
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48064: LD_ADDR_VAR 0 31
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 5
48131: PUSH
48132: LD_INT 4
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 5
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 4
48151: PUSH
48152: LD_INT 5
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 6
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 6
48171: PUSH
48172: LD_INT 6
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 5
48181: PUSH
48182: LD_INT 6
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48203: LD_ADDR_VAR 0 32
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 4
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 4
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 5
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 5
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 6
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 6
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 5
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48346: LD_ADDR_VAR 0 33
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 4
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 4
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 4
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 5
48432: NEG
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 5
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 5
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 6
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 6
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48501: LD_ADDR_VAR 0 34
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 3
48532: NEG
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: LD_INT 4
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 4
48568: NEG
48569: PUSH
48570: LD_INT 4
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 4
48580: NEG
48581: PUSH
48582: LD_INT 5
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 5
48592: NEG
48593: PUSH
48594: LD_INT 4
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 5
48604: NEG
48605: PUSH
48606: LD_INT 5
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 5
48616: NEG
48617: PUSH
48618: LD_INT 6
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 6
48628: NEG
48629: PUSH
48630: LD_INT 5
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 6
48640: NEG
48641: PUSH
48642: LD_INT 6
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48664: LD_ADDR_VAR 0 41
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 3
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48708: LD_ADDR_VAR 0 42
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 3
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48749: LD_ADDR_VAR 0 43
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48789: LD_ADDR_VAR 0 44
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48830: LD_ADDR_VAR 0 45
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48874: LD_ADDR_VAR 0 46
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 3
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48920: LD_ADDR_VAR 0 47
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48953: LD_ADDR_VAR 0 48
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48984: LD_ADDR_VAR 0 49
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49013: LD_ADDR_VAR 0 50
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49042: LD_ADDR_VAR 0 51
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49073: LD_ADDR_VAR 0 52
49077: PUSH
49078: LD_INT 3
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49106: LD_ADDR_VAR 0 53
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49150: LD_ADDR_VAR 0 54
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49191: LD_ADDR_VAR 0 55
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49231: LD_ADDR_VAR 0 56
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 3
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49272: LD_ADDR_VAR 0 57
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49316: LD_ADDR_VAR 0 58
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49362: LD_ADDR_VAR 0 59
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49406: LD_ADDR_VAR 0 60
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: LIST
49446: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49447: LD_ADDR_VAR 0 61
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49487: LD_ADDR_VAR 0 62
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49528: LD_ADDR_VAR 0 63
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49572: LD_ADDR_VAR 0 64
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: ST_TO_ADDR
// end ; 2 :
49618: GO 52884
49620: LD_INT 2
49622: DOUBLE
49623: EQUAL
49624: IFTRUE 49628
49626: GO 52883
49628: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49629: LD_ADDR_VAR 0 29
49633: PUSH
49634: LD_INT 4
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 4
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 5
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 5
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 4
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 5
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 4
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 4
49759: PUSH
49760: LD_INT 4
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 4
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 4
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 4
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 4
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 5
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 5
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 4
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 5
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 4
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 4
50014: NEG
50015: PUSH
50016: LD_INT 4
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: LD_INT 5
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 4
50062: NEG
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 5
50074: NEG
50075: PUSH
50076: LD_INT 4
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 5
50086: NEG
50087: PUSH
50088: LD_INT 5
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: LD_INT 5
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 5
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50167: LD_ADDR_VAR 0 30
50171: PUSH
50172: LD_INT 4
50174: PUSH
50175: LD_INT 4
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 4
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 5
50194: PUSH
50195: LD_INT 4
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 5
50204: PUSH
50205: LD_INT 5
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 4
50214: PUSH
50215: LD_INT 5
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 5
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: LD_INT 5
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 4
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 3
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 4
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 4
50357: NEG
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 4
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 5
50413: NEG
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 5
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 5
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 4
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 4
50519: NEG
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 4
50531: NEG
50532: PUSH
50533: LD_INT 4
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 4
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 4
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 5
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 4
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 4
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 5
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 5
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50714: LD_ADDR_VAR 0 31
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 4
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 4
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 5
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 5
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 5
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: NEG
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 4
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 4
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: LD_INT 4
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: LD_INT 5
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 4
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 5
50976: NEG
50977: PUSH
50978: LD_INT 4
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: LD_INT 5
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 5
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 5
51012: NEG
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 4
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 4
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 5
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 4
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 5
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51264: LD_ADDR_VAR 0 32
51268: PUSH
51269: LD_INT 4
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 5
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 5
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 4
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 4
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 4
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 4
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 5
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 4
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 4
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 5
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 5
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 4
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 4
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: LD_INT 4
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 5
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 5
51706: PUSH
51707: LD_INT 5
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 4
51716: PUSH
51717: LD_INT 5
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 5
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: LD_INT 5
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51811: LD_ADDR_VAR 0 33
51815: PUSH
51816: LD_INT 4
51818: NEG
51819: PUSH
51820: LD_INT 4
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 4
51830: NEG
51831: PUSH
51832: LD_INT 5
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: LD_INT 4
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 5
51878: NEG
51879: PUSH
51880: LD_INT 4
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 5
51890: NEG
51891: PUSH
51892: LD_INT 5
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: LD_INT 5
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 5
51914: NEG
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 3
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 4
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 4
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 4
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 5
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 5
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 5
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 4
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 4
52151: PUSH
52152: LD_INT 4
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: LD_INT 4
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 5
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 5
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 5
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52349: LD_ADDR_VAR 0 34
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 5
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 4
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 4
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 5
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 3
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 5
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 4
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 4
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 5
52571: PUSH
52572: LD_INT 4
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 5
52581: PUSH
52582: LD_INT 5
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 4
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 5
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 4
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 4
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 5
52790: NEG
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 5
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 5
52813: NEG
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// end ; end ;
52881: GO 52884
52883: POP
// case btype of b_depot , b_warehouse :
52884: LD_VAR 0 1
52888: PUSH
52889: LD_INT 0
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52903
52895: LD_INT 1
52897: DOUBLE
52898: EQUAL
52899: IFTRUE 52903
52901: GO 53104
52903: POP
// case nation of nation_american :
52904: LD_VAR 0 5
52908: PUSH
52909: LD_INT 1
52911: DOUBLE
52912: EQUAL
52913: IFTRUE 52917
52915: GO 52973
52917: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52918: LD_ADDR_VAR 0 9
52922: PUSH
52923: LD_VAR 0 11
52927: PUSH
52928: LD_VAR 0 12
52932: PUSH
52933: LD_VAR 0 13
52937: PUSH
52938: LD_VAR 0 14
52942: PUSH
52943: LD_VAR 0 15
52947: PUSH
52948: LD_VAR 0 16
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: LD_VAR 0 4
52965: PUSH
52966: LD_INT 1
52968: PLUS
52969: ARRAY
52970: ST_TO_ADDR
52971: GO 53102
52973: LD_INT 2
52975: DOUBLE
52976: EQUAL
52977: IFTRUE 52981
52979: GO 53037
52981: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52982: LD_ADDR_VAR 0 9
52986: PUSH
52987: LD_VAR 0 17
52991: PUSH
52992: LD_VAR 0 18
52996: PUSH
52997: LD_VAR 0 19
53001: PUSH
53002: LD_VAR 0 20
53006: PUSH
53007: LD_VAR 0 21
53011: PUSH
53012: LD_VAR 0 22
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: PUSH
53025: LD_VAR 0 4
53029: PUSH
53030: LD_INT 1
53032: PLUS
53033: ARRAY
53034: ST_TO_ADDR
53035: GO 53102
53037: LD_INT 3
53039: DOUBLE
53040: EQUAL
53041: IFTRUE 53045
53043: GO 53101
53045: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53046: LD_ADDR_VAR 0 9
53050: PUSH
53051: LD_VAR 0 23
53055: PUSH
53056: LD_VAR 0 24
53060: PUSH
53061: LD_VAR 0 25
53065: PUSH
53066: LD_VAR 0 26
53070: PUSH
53071: LD_VAR 0 27
53075: PUSH
53076: LD_VAR 0 28
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: PUSH
53089: LD_VAR 0 4
53093: PUSH
53094: LD_INT 1
53096: PLUS
53097: ARRAY
53098: ST_TO_ADDR
53099: GO 53102
53101: POP
53102: GO 53657
53104: LD_INT 2
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53118
53110: LD_INT 3
53112: DOUBLE
53113: EQUAL
53114: IFTRUE 53118
53116: GO 53174
53118: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53119: LD_ADDR_VAR 0 9
53123: PUSH
53124: LD_VAR 0 29
53128: PUSH
53129: LD_VAR 0 30
53133: PUSH
53134: LD_VAR 0 31
53138: PUSH
53139: LD_VAR 0 32
53143: PUSH
53144: LD_VAR 0 33
53148: PUSH
53149: LD_VAR 0 34
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: PUSH
53162: LD_VAR 0 4
53166: PUSH
53167: LD_INT 1
53169: PLUS
53170: ARRAY
53171: ST_TO_ADDR
53172: GO 53657
53174: LD_INT 16
53176: DOUBLE
53177: EQUAL
53178: IFTRUE 53236
53180: LD_INT 17
53182: DOUBLE
53183: EQUAL
53184: IFTRUE 53236
53186: LD_INT 18
53188: DOUBLE
53189: EQUAL
53190: IFTRUE 53236
53192: LD_INT 19
53194: DOUBLE
53195: EQUAL
53196: IFTRUE 53236
53198: LD_INT 22
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53236
53204: LD_INT 20
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53236
53210: LD_INT 21
53212: DOUBLE
53213: EQUAL
53214: IFTRUE 53236
53216: LD_INT 23
53218: DOUBLE
53219: EQUAL
53220: IFTRUE 53236
53222: LD_INT 24
53224: DOUBLE
53225: EQUAL
53226: IFTRUE 53236
53228: LD_INT 25
53230: DOUBLE
53231: EQUAL
53232: IFTRUE 53236
53234: GO 53292
53236: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53237: LD_ADDR_VAR 0 9
53241: PUSH
53242: LD_VAR 0 35
53246: PUSH
53247: LD_VAR 0 36
53251: PUSH
53252: LD_VAR 0 37
53256: PUSH
53257: LD_VAR 0 38
53261: PUSH
53262: LD_VAR 0 39
53266: PUSH
53267: LD_VAR 0 40
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: PUSH
53280: LD_VAR 0 4
53284: PUSH
53285: LD_INT 1
53287: PLUS
53288: ARRAY
53289: ST_TO_ADDR
53290: GO 53657
53292: LD_INT 6
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53348
53298: LD_INT 7
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53348
53304: LD_INT 8
53306: DOUBLE
53307: EQUAL
53308: IFTRUE 53348
53310: LD_INT 13
53312: DOUBLE
53313: EQUAL
53314: IFTRUE 53348
53316: LD_INT 12
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53348
53322: LD_INT 15
53324: DOUBLE
53325: EQUAL
53326: IFTRUE 53348
53328: LD_INT 11
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53348
53334: LD_INT 14
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53348
53340: LD_INT 10
53342: DOUBLE
53343: EQUAL
53344: IFTRUE 53348
53346: GO 53404
53348: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53349: LD_ADDR_VAR 0 9
53353: PUSH
53354: LD_VAR 0 41
53358: PUSH
53359: LD_VAR 0 42
53363: PUSH
53364: LD_VAR 0 43
53368: PUSH
53369: LD_VAR 0 44
53373: PUSH
53374: LD_VAR 0 45
53378: PUSH
53379: LD_VAR 0 46
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: PUSH
53392: LD_VAR 0 4
53396: PUSH
53397: LD_INT 1
53399: PLUS
53400: ARRAY
53401: ST_TO_ADDR
53402: GO 53657
53404: LD_INT 36
53406: DOUBLE
53407: EQUAL
53408: IFTRUE 53412
53410: GO 53468
53412: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53413: LD_ADDR_VAR 0 9
53417: PUSH
53418: LD_VAR 0 47
53422: PUSH
53423: LD_VAR 0 48
53427: PUSH
53428: LD_VAR 0 49
53432: PUSH
53433: LD_VAR 0 50
53437: PUSH
53438: LD_VAR 0 51
53442: PUSH
53443: LD_VAR 0 52
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: PUSH
53456: LD_VAR 0 4
53460: PUSH
53461: LD_INT 1
53463: PLUS
53464: ARRAY
53465: ST_TO_ADDR
53466: GO 53657
53468: LD_INT 4
53470: DOUBLE
53471: EQUAL
53472: IFTRUE 53494
53474: LD_INT 5
53476: DOUBLE
53477: EQUAL
53478: IFTRUE 53494
53480: LD_INT 34
53482: DOUBLE
53483: EQUAL
53484: IFTRUE 53494
53486: LD_INT 37
53488: DOUBLE
53489: EQUAL
53490: IFTRUE 53494
53492: GO 53550
53494: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53495: LD_ADDR_VAR 0 9
53499: PUSH
53500: LD_VAR 0 53
53504: PUSH
53505: LD_VAR 0 54
53509: PUSH
53510: LD_VAR 0 55
53514: PUSH
53515: LD_VAR 0 56
53519: PUSH
53520: LD_VAR 0 57
53524: PUSH
53525: LD_VAR 0 58
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: PUSH
53538: LD_VAR 0 4
53542: PUSH
53543: LD_INT 1
53545: PLUS
53546: ARRAY
53547: ST_TO_ADDR
53548: GO 53657
53550: LD_INT 31
53552: DOUBLE
53553: EQUAL
53554: IFTRUE 53600
53556: LD_INT 32
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53600
53562: LD_INT 33
53564: DOUBLE
53565: EQUAL
53566: IFTRUE 53600
53568: LD_INT 27
53570: DOUBLE
53571: EQUAL
53572: IFTRUE 53600
53574: LD_INT 26
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53600
53580: LD_INT 28
53582: DOUBLE
53583: EQUAL
53584: IFTRUE 53600
53586: LD_INT 29
53588: DOUBLE
53589: EQUAL
53590: IFTRUE 53600
53592: LD_INT 30
53594: DOUBLE
53595: EQUAL
53596: IFTRUE 53600
53598: GO 53656
53600: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53601: LD_ADDR_VAR 0 9
53605: PUSH
53606: LD_VAR 0 59
53610: PUSH
53611: LD_VAR 0 60
53615: PUSH
53616: LD_VAR 0 61
53620: PUSH
53621: LD_VAR 0 62
53625: PUSH
53626: LD_VAR 0 63
53630: PUSH
53631: LD_VAR 0 64
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: PUSH
53644: LD_VAR 0 4
53648: PUSH
53649: LD_INT 1
53651: PLUS
53652: ARRAY
53653: ST_TO_ADDR
53654: GO 53657
53656: POP
// temp_list2 = [ ] ;
53657: LD_ADDR_VAR 0 10
53661: PUSH
53662: EMPTY
53663: ST_TO_ADDR
// for i in temp_list do
53664: LD_ADDR_VAR 0 8
53668: PUSH
53669: LD_VAR 0 9
53673: PUSH
53674: FOR_IN
53675: IFFALSE 53727
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53677: LD_ADDR_VAR 0 10
53681: PUSH
53682: LD_VAR 0 10
53686: PUSH
53687: LD_VAR 0 8
53691: PUSH
53692: LD_INT 1
53694: ARRAY
53695: PUSH
53696: LD_VAR 0 2
53700: PLUS
53701: PUSH
53702: LD_VAR 0 8
53706: PUSH
53707: LD_INT 2
53709: ARRAY
53710: PUSH
53711: LD_VAR 0 3
53715: PLUS
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: ADD
53724: ST_TO_ADDR
53725: GO 53674
53727: POP
53728: POP
// result = temp_list2 ;
53729: LD_ADDR_VAR 0 7
53733: PUSH
53734: LD_VAR 0 10
53738: ST_TO_ADDR
// end ;
53739: LD_VAR 0 7
53743: RET
// export function EnemyInRange ( unit , dist ) ; begin
53744: LD_INT 0
53746: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53747: LD_ADDR_VAR 0 3
53751: PUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 255
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: CALL_OW 250
53771: PPUSH
53772: LD_VAR 0 1
53776: PPUSH
53777: CALL_OW 251
53781: PPUSH
53782: LD_VAR 0 2
53786: PPUSH
53787: CALL 27117 0 4
53791: PUSH
53792: LD_INT 4
53794: ARRAY
53795: ST_TO_ADDR
// end ;
53796: LD_VAR 0 3
53800: RET
// export function PlayerSeeMe ( unit ) ; begin
53801: LD_INT 0
53803: PPUSH
// result := See ( your_side , unit ) ;
53804: LD_ADDR_VAR 0 2
53808: PUSH
53809: LD_OWVAR 2
53813: PPUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: CALL_OW 292
53823: ST_TO_ADDR
// end ;
53824: LD_VAR 0 2
53828: RET
// export function ReverseDir ( unit ) ; begin
53829: LD_INT 0
53831: PPUSH
// if not unit then
53832: LD_VAR 0 1
53836: NOT
53837: IFFALSE 53841
// exit ;
53839: GO 53864
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53841: LD_ADDR_VAR 0 2
53845: PUSH
53846: LD_VAR 0 1
53850: PPUSH
53851: CALL_OW 254
53855: PUSH
53856: LD_INT 3
53858: PLUS
53859: PUSH
53860: LD_INT 6
53862: MOD
53863: ST_TO_ADDR
// end ;
53864: LD_VAR 0 2
53868: RET
// export function ReverseArray ( array ) ; var i ; begin
53869: LD_INT 0
53871: PPUSH
53872: PPUSH
// if not array then
53873: LD_VAR 0 1
53877: NOT
53878: IFFALSE 53882
// exit ;
53880: GO 53937
// result := [ ] ;
53882: LD_ADDR_VAR 0 2
53886: PUSH
53887: EMPTY
53888: ST_TO_ADDR
// for i := array downto 1 do
53889: LD_ADDR_VAR 0 3
53893: PUSH
53894: DOUBLE
53895: LD_VAR 0 1
53899: INC
53900: ST_TO_ADDR
53901: LD_INT 1
53903: PUSH
53904: FOR_DOWNTO
53905: IFFALSE 53935
// result := Join ( result , array [ i ] ) ;
53907: LD_ADDR_VAR 0 2
53911: PUSH
53912: LD_VAR 0 2
53916: PPUSH
53917: LD_VAR 0 1
53921: PUSH
53922: LD_VAR 0 3
53926: ARRAY
53927: PPUSH
53928: CALL 58582 0 2
53932: ST_TO_ADDR
53933: GO 53904
53935: POP
53936: POP
// end ;
53937: LD_VAR 0 2
53941: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53942: LD_INT 0
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
// if not unit or not hexes then
53950: LD_VAR 0 1
53954: NOT
53955: PUSH
53956: LD_VAR 0 2
53960: NOT
53961: OR
53962: IFFALSE 53966
// exit ;
53964: GO 54089
// dist := 9999 ;
53966: LD_ADDR_VAR 0 5
53970: PUSH
53971: LD_INT 9999
53973: ST_TO_ADDR
// for i = 1 to hexes do
53974: LD_ADDR_VAR 0 4
53978: PUSH
53979: DOUBLE
53980: LD_INT 1
53982: DEC
53983: ST_TO_ADDR
53984: LD_VAR 0 2
53988: PUSH
53989: FOR_TO
53990: IFFALSE 54077
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53992: LD_ADDR_VAR 0 6
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: LD_VAR 0 2
54006: PUSH
54007: LD_VAR 0 4
54011: ARRAY
54012: PUSH
54013: LD_INT 1
54015: ARRAY
54016: PPUSH
54017: LD_VAR 0 2
54021: PUSH
54022: LD_VAR 0 4
54026: ARRAY
54027: PUSH
54028: LD_INT 2
54030: ARRAY
54031: PPUSH
54032: CALL_OW 297
54036: ST_TO_ADDR
// if tdist < dist then
54037: LD_VAR 0 6
54041: PUSH
54042: LD_VAR 0 5
54046: LESS
54047: IFFALSE 54075
// begin hex := hexes [ i ] ;
54049: LD_ADDR_VAR 0 8
54053: PUSH
54054: LD_VAR 0 2
54058: PUSH
54059: LD_VAR 0 4
54063: ARRAY
54064: ST_TO_ADDR
// dist := tdist ;
54065: LD_ADDR_VAR 0 5
54069: PUSH
54070: LD_VAR 0 6
54074: ST_TO_ADDR
// end ; end ;
54075: GO 53989
54077: POP
54078: POP
// result := hex ;
54079: LD_ADDR_VAR 0 3
54083: PUSH
54084: LD_VAR 0 8
54088: ST_TO_ADDR
// end ;
54089: LD_VAR 0 3
54093: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54094: LD_INT 0
54096: PPUSH
54097: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54098: LD_VAR 0 1
54102: NOT
54103: PUSH
54104: LD_VAR 0 1
54108: PUSH
54109: LD_INT 21
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 23
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PPUSH
54133: CALL_OW 69
54137: IN
54138: NOT
54139: OR
54140: IFFALSE 54144
// exit ;
54142: GO 54191
// for i = 1 to 3 do
54144: LD_ADDR_VAR 0 3
54148: PUSH
54149: DOUBLE
54150: LD_INT 1
54152: DEC
54153: ST_TO_ADDR
54154: LD_INT 3
54156: PUSH
54157: FOR_TO
54158: IFFALSE 54189
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 250
54169: PPUSH
54170: LD_VAR 0 1
54174: PPUSH
54175: CALL_OW 251
54179: PPUSH
54180: LD_INT 1
54182: PPUSH
54183: CALL_OW 453
54187: GO 54157
54189: POP
54190: POP
// end ;
54191: LD_VAR 0 2
54195: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54196: LD_INT 0
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
// if not unit or not enemy_unit then
54204: LD_VAR 0 1
54208: NOT
54209: PUSH
54210: LD_VAR 0 2
54214: NOT
54215: OR
54216: IFFALSE 54220
// exit ;
54218: GO 54687
// if GetLives ( i ) < 250 then
54220: LD_VAR 0 4
54224: PPUSH
54225: CALL_OW 256
54229: PUSH
54230: LD_INT 250
54232: LESS
54233: IFFALSE 54246
// begin ComAutodestruct ( i ) ;
54235: LD_VAR 0 4
54239: PPUSH
54240: CALL 54094 0 1
// exit ;
54244: GO 54687
// end ; x := GetX ( enemy_unit ) ;
54246: LD_ADDR_VAR 0 7
54250: PUSH
54251: LD_VAR 0 2
54255: PPUSH
54256: CALL_OW 250
54260: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54261: LD_ADDR_VAR 0 8
54265: PUSH
54266: LD_VAR 0 2
54270: PPUSH
54271: CALL_OW 251
54275: ST_TO_ADDR
// if not x or not y then
54276: LD_VAR 0 7
54280: NOT
54281: PUSH
54282: LD_VAR 0 8
54286: NOT
54287: OR
54288: IFFALSE 54292
// exit ;
54290: GO 54687
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54292: LD_ADDR_VAR 0 6
54296: PUSH
54297: LD_VAR 0 7
54301: PPUSH
54302: LD_INT 0
54304: PPUSH
54305: LD_INT 4
54307: PPUSH
54308: CALL_OW 272
54312: PUSH
54313: LD_VAR 0 8
54317: PPUSH
54318: LD_INT 0
54320: PPUSH
54321: LD_INT 4
54323: PPUSH
54324: CALL_OW 273
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_VAR 0 7
54337: PPUSH
54338: LD_INT 1
54340: PPUSH
54341: LD_INT 4
54343: PPUSH
54344: CALL_OW 272
54348: PUSH
54349: LD_VAR 0 8
54353: PPUSH
54354: LD_INT 1
54356: PPUSH
54357: LD_INT 4
54359: PPUSH
54360: CALL_OW 273
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_VAR 0 7
54373: PPUSH
54374: LD_INT 2
54376: PPUSH
54377: LD_INT 4
54379: PPUSH
54380: CALL_OW 272
54384: PUSH
54385: LD_VAR 0 8
54389: PPUSH
54390: LD_INT 2
54392: PPUSH
54393: LD_INT 4
54395: PPUSH
54396: CALL_OW 273
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_VAR 0 7
54409: PPUSH
54410: LD_INT 3
54412: PPUSH
54413: LD_INT 4
54415: PPUSH
54416: CALL_OW 272
54420: PUSH
54421: LD_VAR 0 8
54425: PPUSH
54426: LD_INT 3
54428: PPUSH
54429: LD_INT 4
54431: PPUSH
54432: CALL_OW 273
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_VAR 0 7
54445: PPUSH
54446: LD_INT 4
54448: PPUSH
54449: LD_INT 4
54451: PPUSH
54452: CALL_OW 272
54456: PUSH
54457: LD_VAR 0 8
54461: PPUSH
54462: LD_INT 4
54464: PPUSH
54465: LD_INT 4
54467: PPUSH
54468: CALL_OW 273
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_VAR 0 7
54481: PPUSH
54482: LD_INT 5
54484: PPUSH
54485: LD_INT 4
54487: PPUSH
54488: CALL_OW 272
54492: PUSH
54493: LD_VAR 0 8
54497: PPUSH
54498: LD_INT 5
54500: PPUSH
54501: LD_INT 4
54503: PPUSH
54504: CALL_OW 273
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// for i = tmp downto 1 do
54521: LD_ADDR_VAR 0 4
54525: PUSH
54526: DOUBLE
54527: LD_VAR 0 6
54531: INC
54532: ST_TO_ADDR
54533: LD_INT 1
54535: PUSH
54536: FOR_DOWNTO
54537: IFFALSE 54638
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54539: LD_VAR 0 6
54543: PUSH
54544: LD_VAR 0 4
54548: ARRAY
54549: PUSH
54550: LD_INT 1
54552: ARRAY
54553: PPUSH
54554: LD_VAR 0 6
54558: PUSH
54559: LD_VAR 0 4
54563: ARRAY
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: CALL_OW 488
54573: NOT
54574: PUSH
54575: LD_VAR 0 6
54579: PUSH
54580: LD_VAR 0 4
54584: ARRAY
54585: PUSH
54586: LD_INT 1
54588: ARRAY
54589: PPUSH
54590: LD_VAR 0 6
54594: PUSH
54595: LD_VAR 0 4
54599: ARRAY
54600: PUSH
54601: LD_INT 2
54603: ARRAY
54604: PPUSH
54605: CALL_OW 428
54609: PUSH
54610: LD_INT 0
54612: NONEQUAL
54613: OR
54614: IFFALSE 54636
// tmp := Delete ( tmp , i ) ;
54616: LD_ADDR_VAR 0 6
54620: PUSH
54621: LD_VAR 0 6
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: CALL_OW 3
54635: ST_TO_ADDR
54636: GO 54536
54638: POP
54639: POP
// j := GetClosestHex ( unit , tmp ) ;
54640: LD_ADDR_VAR 0 5
54644: PUSH
54645: LD_VAR 0 1
54649: PPUSH
54650: LD_VAR 0 6
54654: PPUSH
54655: CALL 53942 0 2
54659: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54660: LD_VAR 0 1
54664: PPUSH
54665: LD_VAR 0 5
54669: PUSH
54670: LD_INT 1
54672: ARRAY
54673: PPUSH
54674: LD_VAR 0 5
54678: PUSH
54679: LD_INT 2
54681: ARRAY
54682: PPUSH
54683: CALL_OW 111
// end ;
54687: LD_VAR 0 3
54691: RET
// export function PrepareApemanSoldier ( ) ; begin
54692: LD_INT 0
54694: PPUSH
// uc_nation := 0 ;
54695: LD_ADDR_OWVAR 21
54699: PUSH
54700: LD_INT 0
54702: ST_TO_ADDR
// hc_sex := sex_male ;
54703: LD_ADDR_OWVAR 27
54707: PUSH
54708: LD_INT 1
54710: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54711: LD_ADDR_OWVAR 28
54715: PUSH
54716: LD_INT 15
54718: ST_TO_ADDR
// hc_gallery :=  ;
54719: LD_ADDR_OWVAR 33
54723: PUSH
54724: LD_STRING 
54726: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54727: LD_ADDR_OWVAR 31
54731: PUSH
54732: LD_INT 0
54734: PPUSH
54735: LD_INT 3
54737: PPUSH
54738: CALL_OW 12
54742: PUSH
54743: LD_INT 0
54745: PPUSH
54746: LD_INT 3
54748: PPUSH
54749: CALL_OW 12
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// end ;
54766: LD_VAR 0 1
54770: RET
// export function PrepareApemanEngineer ( ) ; begin
54771: LD_INT 0
54773: PPUSH
// uc_nation := 0 ;
54774: LD_ADDR_OWVAR 21
54778: PUSH
54779: LD_INT 0
54781: ST_TO_ADDR
// hc_sex := sex_male ;
54782: LD_ADDR_OWVAR 27
54786: PUSH
54787: LD_INT 1
54789: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54790: LD_ADDR_OWVAR 28
54794: PUSH
54795: LD_INT 16
54797: ST_TO_ADDR
// hc_gallery :=  ;
54798: LD_ADDR_OWVAR 33
54802: PUSH
54803: LD_STRING 
54805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54806: LD_ADDR_OWVAR 31
54810: PUSH
54811: LD_INT 0
54813: PPUSH
54814: LD_INT 3
54816: PPUSH
54817: CALL_OW 12
54821: PUSH
54822: LD_INT 0
54824: PPUSH
54825: LD_INT 3
54827: PPUSH
54828: CALL_OW 12
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// end ;
54845: LD_VAR 0 1
54849: RET
// export function PrepareApeman ( agressivity ) ; begin
54850: LD_INT 0
54852: PPUSH
// uc_side := 0 ;
54853: LD_ADDR_OWVAR 20
54857: PUSH
54858: LD_INT 0
54860: ST_TO_ADDR
// uc_nation := 0 ;
54861: LD_ADDR_OWVAR 21
54865: PUSH
54866: LD_INT 0
54868: ST_TO_ADDR
// hc_sex := sex_male ;
54869: LD_ADDR_OWVAR 27
54873: PUSH
54874: LD_INT 1
54876: ST_TO_ADDR
// hc_class := class_apeman ;
54877: LD_ADDR_OWVAR 28
54881: PUSH
54882: LD_INT 12
54884: ST_TO_ADDR
// hc_gallery :=  ;
54885: LD_ADDR_OWVAR 33
54889: PUSH
54890: LD_STRING 
54892: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54893: LD_ADDR_OWVAR 35
54897: PUSH
54898: LD_VAR 0 1
54902: NEG
54903: PPUSH
54904: LD_VAR 0 1
54908: PPUSH
54909: CALL_OW 12
54913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54914: LD_ADDR_OWVAR 31
54918: PUSH
54919: LD_INT 0
54921: PPUSH
54922: LD_INT 3
54924: PPUSH
54925: CALL_OW 12
54929: PUSH
54930: LD_INT 0
54932: PPUSH
54933: LD_INT 3
54935: PPUSH
54936: CALL_OW 12
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// end ;
54953: LD_VAR 0 2
54957: RET
// export function PrepareTiger ( agressivity ) ; begin
54958: LD_INT 0
54960: PPUSH
// uc_side := 0 ;
54961: LD_ADDR_OWVAR 20
54965: PUSH
54966: LD_INT 0
54968: ST_TO_ADDR
// uc_nation := 0 ;
54969: LD_ADDR_OWVAR 21
54973: PUSH
54974: LD_INT 0
54976: ST_TO_ADDR
// hc_class := class_tiger ;
54977: LD_ADDR_OWVAR 28
54981: PUSH
54982: LD_INT 14
54984: ST_TO_ADDR
// hc_gallery :=  ;
54985: LD_ADDR_OWVAR 33
54989: PUSH
54990: LD_STRING 
54992: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54993: LD_ADDR_OWVAR 35
54997: PUSH
54998: LD_VAR 0 1
55002: NEG
55003: PPUSH
55004: LD_VAR 0 1
55008: PPUSH
55009: CALL_OW 12
55013: ST_TO_ADDR
// end ;
55014: LD_VAR 0 2
55018: RET
// export function PrepareEnchidna ( ) ; begin
55019: LD_INT 0
55021: PPUSH
// uc_side := 0 ;
55022: LD_ADDR_OWVAR 20
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// uc_nation := 0 ;
55030: LD_ADDR_OWVAR 21
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// hc_class := class_baggie ;
55038: LD_ADDR_OWVAR 28
55042: PUSH
55043: LD_INT 13
55045: ST_TO_ADDR
// hc_gallery :=  ;
55046: LD_ADDR_OWVAR 33
55050: PUSH
55051: LD_STRING 
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 1
55058: RET
// export function PrepareFrog ( ) ; begin
55059: LD_INT 0
55061: PPUSH
// uc_side := 0 ;
55062: LD_ADDR_OWVAR 20
55066: PUSH
55067: LD_INT 0
55069: ST_TO_ADDR
// uc_nation := 0 ;
55070: LD_ADDR_OWVAR 21
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// hc_class := class_frog ;
55078: LD_ADDR_OWVAR 28
55082: PUSH
55083: LD_INT 19
55085: ST_TO_ADDR
// hc_gallery :=  ;
55086: LD_ADDR_OWVAR 33
55090: PUSH
55091: LD_STRING 
55093: ST_TO_ADDR
// end ;
55094: LD_VAR 0 1
55098: RET
// export function PrepareFish ( ) ; begin
55099: LD_INT 0
55101: PPUSH
// uc_side := 0 ;
55102: LD_ADDR_OWVAR 20
55106: PUSH
55107: LD_INT 0
55109: ST_TO_ADDR
// uc_nation := 0 ;
55110: LD_ADDR_OWVAR 21
55114: PUSH
55115: LD_INT 0
55117: ST_TO_ADDR
// hc_class := class_fish ;
55118: LD_ADDR_OWVAR 28
55122: PUSH
55123: LD_INT 20
55125: ST_TO_ADDR
// hc_gallery :=  ;
55126: LD_ADDR_OWVAR 33
55130: PUSH
55131: LD_STRING 
55133: ST_TO_ADDR
// end ;
55134: LD_VAR 0 1
55138: RET
// export function PrepareBird ( ) ; begin
55139: LD_INT 0
55141: PPUSH
// uc_side := 0 ;
55142: LD_ADDR_OWVAR 20
55146: PUSH
55147: LD_INT 0
55149: ST_TO_ADDR
// uc_nation := 0 ;
55150: LD_ADDR_OWVAR 21
55154: PUSH
55155: LD_INT 0
55157: ST_TO_ADDR
// hc_class := class_phororhacos ;
55158: LD_ADDR_OWVAR 28
55162: PUSH
55163: LD_INT 18
55165: ST_TO_ADDR
// hc_gallery :=  ;
55166: LD_ADDR_OWVAR 33
55170: PUSH
55171: LD_STRING 
55173: ST_TO_ADDR
// end ;
55174: LD_VAR 0 1
55178: RET
// export function PrepareHorse ( ) ; begin
55179: LD_INT 0
55181: PPUSH
// uc_side := 0 ;
55182: LD_ADDR_OWVAR 20
55186: PUSH
55187: LD_INT 0
55189: ST_TO_ADDR
// uc_nation := 0 ;
55190: LD_ADDR_OWVAR 21
55194: PUSH
55195: LD_INT 0
55197: ST_TO_ADDR
// hc_class := class_horse ;
55198: LD_ADDR_OWVAR 28
55202: PUSH
55203: LD_INT 21
55205: ST_TO_ADDR
// hc_gallery :=  ;
55206: LD_ADDR_OWVAR 33
55210: PUSH
55211: LD_STRING 
55213: ST_TO_ADDR
// end ;
55214: LD_VAR 0 1
55218: RET
// export function PrepareMastodont ( ) ; begin
55219: LD_INT 0
55221: PPUSH
// uc_side := 0 ;
55222: LD_ADDR_OWVAR 20
55226: PUSH
55227: LD_INT 0
55229: ST_TO_ADDR
// uc_nation := 0 ;
55230: LD_ADDR_OWVAR 21
55234: PUSH
55235: LD_INT 0
55237: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55238: LD_ADDR_OWVAR 37
55242: PUSH
55243: LD_INT 31
55245: ST_TO_ADDR
// vc_control := control_rider ;
55246: LD_ADDR_OWVAR 38
55250: PUSH
55251: LD_INT 4
55253: ST_TO_ADDR
// end ;
55254: LD_VAR 0 1
55258: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55259: LD_INT 0
55261: PPUSH
55262: PPUSH
55263: PPUSH
// uc_side = 0 ;
55264: LD_ADDR_OWVAR 20
55268: PUSH
55269: LD_INT 0
55271: ST_TO_ADDR
// uc_nation = 0 ;
55272: LD_ADDR_OWVAR 21
55276: PUSH
55277: LD_INT 0
55279: ST_TO_ADDR
// InitHc_All ( ) ;
55280: CALL_OW 584
// InitVc ;
55284: CALL_OW 20
// if mastodonts then
55288: LD_VAR 0 6
55292: IFFALSE 55359
// for i = 1 to mastodonts do
55294: LD_ADDR_VAR 0 11
55298: PUSH
55299: DOUBLE
55300: LD_INT 1
55302: DEC
55303: ST_TO_ADDR
55304: LD_VAR 0 6
55308: PUSH
55309: FOR_TO
55310: IFFALSE 55357
// begin vc_chassis := 31 ;
55312: LD_ADDR_OWVAR 37
55316: PUSH
55317: LD_INT 31
55319: ST_TO_ADDR
// vc_control := control_rider ;
55320: LD_ADDR_OWVAR 38
55324: PUSH
55325: LD_INT 4
55327: ST_TO_ADDR
// animal := CreateVehicle ;
55328: LD_ADDR_VAR 0 12
55332: PUSH
55333: CALL_OW 45
55337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55338: LD_VAR 0 12
55342: PPUSH
55343: LD_VAR 0 8
55347: PPUSH
55348: LD_INT 0
55350: PPUSH
55351: CALL 57487 0 3
// end ;
55355: GO 55309
55357: POP
55358: POP
// if horses then
55359: LD_VAR 0 5
55363: IFFALSE 55430
// for i = 1 to horses do
55365: LD_ADDR_VAR 0 11
55369: PUSH
55370: DOUBLE
55371: LD_INT 1
55373: DEC
55374: ST_TO_ADDR
55375: LD_VAR 0 5
55379: PUSH
55380: FOR_TO
55381: IFFALSE 55428
// begin hc_class := 21 ;
55383: LD_ADDR_OWVAR 28
55387: PUSH
55388: LD_INT 21
55390: ST_TO_ADDR
// hc_gallery :=  ;
55391: LD_ADDR_OWVAR 33
55395: PUSH
55396: LD_STRING 
55398: ST_TO_ADDR
// animal := CreateHuman ;
55399: LD_ADDR_VAR 0 12
55403: PUSH
55404: CALL_OW 44
55408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55409: LD_VAR 0 12
55413: PPUSH
55414: LD_VAR 0 8
55418: PPUSH
55419: LD_INT 0
55421: PPUSH
55422: CALL 57487 0 3
// end ;
55426: GO 55380
55428: POP
55429: POP
// if birds then
55430: LD_VAR 0 1
55434: IFFALSE 55501
// for i = 1 to birds do
55436: LD_ADDR_VAR 0 11
55440: PUSH
55441: DOUBLE
55442: LD_INT 1
55444: DEC
55445: ST_TO_ADDR
55446: LD_VAR 0 1
55450: PUSH
55451: FOR_TO
55452: IFFALSE 55499
// begin hc_class := 18 ;
55454: LD_ADDR_OWVAR 28
55458: PUSH
55459: LD_INT 18
55461: ST_TO_ADDR
// hc_gallery =  ;
55462: LD_ADDR_OWVAR 33
55466: PUSH
55467: LD_STRING 
55469: ST_TO_ADDR
// animal := CreateHuman ;
55470: LD_ADDR_VAR 0 12
55474: PUSH
55475: CALL_OW 44
55479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55480: LD_VAR 0 12
55484: PPUSH
55485: LD_VAR 0 8
55489: PPUSH
55490: LD_INT 0
55492: PPUSH
55493: CALL 57487 0 3
// end ;
55497: GO 55451
55499: POP
55500: POP
// if tigers then
55501: LD_VAR 0 2
55505: IFFALSE 55589
// for i = 1 to tigers do
55507: LD_ADDR_VAR 0 11
55511: PUSH
55512: DOUBLE
55513: LD_INT 1
55515: DEC
55516: ST_TO_ADDR
55517: LD_VAR 0 2
55521: PUSH
55522: FOR_TO
55523: IFFALSE 55587
// begin hc_class = class_tiger ;
55525: LD_ADDR_OWVAR 28
55529: PUSH
55530: LD_INT 14
55532: ST_TO_ADDR
// hc_gallery =  ;
55533: LD_ADDR_OWVAR 33
55537: PUSH
55538: LD_STRING 
55540: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55541: LD_ADDR_OWVAR 35
55545: PUSH
55546: LD_INT 7
55548: NEG
55549: PPUSH
55550: LD_INT 7
55552: PPUSH
55553: CALL_OW 12
55557: ST_TO_ADDR
// animal := CreateHuman ;
55558: LD_ADDR_VAR 0 12
55562: PUSH
55563: CALL_OW 44
55567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55568: LD_VAR 0 12
55572: PPUSH
55573: LD_VAR 0 8
55577: PPUSH
55578: LD_INT 0
55580: PPUSH
55581: CALL 57487 0 3
// end ;
55585: GO 55522
55587: POP
55588: POP
// if apemans then
55589: LD_VAR 0 3
55593: IFFALSE 55716
// for i = 1 to apemans do
55595: LD_ADDR_VAR 0 11
55599: PUSH
55600: DOUBLE
55601: LD_INT 1
55603: DEC
55604: ST_TO_ADDR
55605: LD_VAR 0 3
55609: PUSH
55610: FOR_TO
55611: IFFALSE 55714
// begin hc_class = class_apeman ;
55613: LD_ADDR_OWVAR 28
55617: PUSH
55618: LD_INT 12
55620: ST_TO_ADDR
// hc_gallery =  ;
55621: LD_ADDR_OWVAR 33
55625: PUSH
55626: LD_STRING 
55628: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55629: LD_ADDR_OWVAR 35
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PPUSH
55638: LD_INT 2
55640: PPUSH
55641: CALL_OW 12
55645: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55646: LD_ADDR_OWVAR 31
55650: PUSH
55651: LD_INT 1
55653: PPUSH
55654: LD_INT 3
55656: PPUSH
55657: CALL_OW 12
55661: PUSH
55662: LD_INT 1
55664: PPUSH
55665: LD_INT 3
55667: PPUSH
55668: CALL_OW 12
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// animal := CreateHuman ;
55685: LD_ADDR_VAR 0 12
55689: PUSH
55690: CALL_OW 44
55694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55695: LD_VAR 0 12
55699: PPUSH
55700: LD_VAR 0 8
55704: PPUSH
55705: LD_INT 0
55707: PPUSH
55708: CALL 57487 0 3
// end ;
55712: GO 55610
55714: POP
55715: POP
// if enchidnas then
55716: LD_VAR 0 4
55720: IFFALSE 55787
// for i = 1 to enchidnas do
55722: LD_ADDR_VAR 0 11
55726: PUSH
55727: DOUBLE
55728: LD_INT 1
55730: DEC
55731: ST_TO_ADDR
55732: LD_VAR 0 4
55736: PUSH
55737: FOR_TO
55738: IFFALSE 55785
// begin hc_class = 13 ;
55740: LD_ADDR_OWVAR 28
55744: PUSH
55745: LD_INT 13
55747: ST_TO_ADDR
// hc_gallery =  ;
55748: LD_ADDR_OWVAR 33
55752: PUSH
55753: LD_STRING 
55755: ST_TO_ADDR
// animal := CreateHuman ;
55756: LD_ADDR_VAR 0 12
55760: PUSH
55761: CALL_OW 44
55765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55766: LD_VAR 0 12
55770: PPUSH
55771: LD_VAR 0 8
55775: PPUSH
55776: LD_INT 0
55778: PPUSH
55779: CALL 57487 0 3
// end ;
55783: GO 55737
55785: POP
55786: POP
// if fishes then
55787: LD_VAR 0 7
55791: IFFALSE 55858
// for i = 1 to fishes do
55793: LD_ADDR_VAR 0 11
55797: PUSH
55798: DOUBLE
55799: LD_INT 1
55801: DEC
55802: ST_TO_ADDR
55803: LD_VAR 0 7
55807: PUSH
55808: FOR_TO
55809: IFFALSE 55856
// begin hc_class = 20 ;
55811: LD_ADDR_OWVAR 28
55815: PUSH
55816: LD_INT 20
55818: ST_TO_ADDR
// hc_gallery =  ;
55819: LD_ADDR_OWVAR 33
55823: PUSH
55824: LD_STRING 
55826: ST_TO_ADDR
// animal := CreateHuman ;
55827: LD_ADDR_VAR 0 12
55831: PUSH
55832: CALL_OW 44
55836: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55837: LD_VAR 0 12
55841: PPUSH
55842: LD_VAR 0 9
55846: PPUSH
55847: LD_INT 0
55849: PPUSH
55850: CALL 57487 0 3
// end ;
55854: GO 55808
55856: POP
55857: POP
// end ;
55858: LD_VAR 0 10
55862: RET
// export function WantHeal ( sci , unit ) ; begin
55863: LD_INT 0
55865: PPUSH
// if GetTaskList ( sci ) > 0 then
55866: LD_VAR 0 1
55870: PPUSH
55871: CALL_OW 437
55875: PUSH
55876: LD_INT 0
55878: GREATER
55879: IFFALSE 55949
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 437
55890: PUSH
55891: LD_INT 1
55893: ARRAY
55894: PUSH
55895: LD_INT 1
55897: ARRAY
55898: PUSH
55899: LD_STRING l
55901: EQUAL
55902: PUSH
55903: LD_VAR 0 1
55907: PPUSH
55908: CALL_OW 437
55912: PUSH
55913: LD_INT 1
55915: ARRAY
55916: PUSH
55917: LD_INT 4
55919: ARRAY
55920: PUSH
55921: LD_VAR 0 2
55925: EQUAL
55926: AND
55927: IFFALSE 55939
// result := true else
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_INT 1
55936: ST_TO_ADDR
55937: GO 55947
// result := false ;
55939: LD_ADDR_VAR 0 3
55943: PUSH
55944: LD_INT 0
55946: ST_TO_ADDR
// end else
55947: GO 55957
// result := false ;
55949: LD_ADDR_VAR 0 3
55953: PUSH
55954: LD_INT 0
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 3
55961: RET
// export function HealTarget ( sci ) ; begin
55962: LD_INT 0
55964: PPUSH
// if not sci then
55965: LD_VAR 0 1
55969: NOT
55970: IFFALSE 55974
// exit ;
55972: GO 56039
// result := 0 ;
55974: LD_ADDR_VAR 0 2
55978: PUSH
55979: LD_INT 0
55981: ST_TO_ADDR
// if GetTaskList ( sci ) then
55982: LD_VAR 0 1
55986: PPUSH
55987: CALL_OW 437
55991: IFFALSE 56039
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 437
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PUSH
56007: LD_INT 1
56009: ARRAY
56010: PUSH
56011: LD_STRING l
56013: EQUAL
56014: IFFALSE 56039
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 437
56030: PUSH
56031: LD_INT 1
56033: ARRAY
56034: PUSH
56035: LD_INT 4
56037: ARRAY
56038: ST_TO_ADDR
// end ;
56039: LD_VAR 0 2
56043: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56044: LD_INT 0
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
// if not base_units then
56050: LD_VAR 0 1
56054: NOT
56055: IFFALSE 56059
// exit ;
56057: GO 56146
// result := false ;
56059: LD_ADDR_VAR 0 2
56063: PUSH
56064: LD_INT 0
56066: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: LD_INT 21
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PPUSH
56087: CALL_OW 72
56091: ST_TO_ADDR
// if not tmp then
56092: LD_VAR 0 5
56096: NOT
56097: IFFALSE 56101
// exit ;
56099: GO 56146
// for i in tmp do
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_VAR 0 5
56110: PUSH
56111: FOR_IN
56112: IFFALSE 56144
// begin result := EnemyInRange ( i , 22 ) ;
56114: LD_ADDR_VAR 0 2
56118: PUSH
56119: LD_VAR 0 3
56123: PPUSH
56124: LD_INT 22
56126: PPUSH
56127: CALL 53744 0 2
56131: ST_TO_ADDR
// if result then
56132: LD_VAR 0 2
56136: IFFALSE 56142
// exit ;
56138: POP
56139: POP
56140: GO 56146
// end ;
56142: GO 56111
56144: POP
56145: POP
// end ;
56146: LD_VAR 0 2
56150: RET
// export function FilterByTag ( units , tag ) ; begin
56151: LD_INT 0
56153: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56154: LD_ADDR_VAR 0 3
56158: PUSH
56159: LD_VAR 0 1
56163: PPUSH
56164: LD_INT 120
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PPUSH
56176: CALL_OW 72
56180: ST_TO_ADDR
// end ;
56181: LD_VAR 0 3
56185: RET
// export function IsDriver ( un ) ; begin
56186: LD_INT 0
56188: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56189: LD_ADDR_VAR 0 2
56193: PUSH
56194: LD_VAR 0 1
56198: PUSH
56199: LD_INT 55
56201: PUSH
56202: EMPTY
56203: LIST
56204: PPUSH
56205: CALL_OW 69
56209: IN
56210: ST_TO_ADDR
// end ;
56211: LD_VAR 0 2
56215: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56216: LD_INT 0
56218: PPUSH
56219: PPUSH
// list := [ ] ;
56220: LD_ADDR_VAR 0 5
56224: PUSH
56225: EMPTY
56226: ST_TO_ADDR
// case d of 0 :
56227: LD_VAR 0 3
56231: PUSH
56232: LD_INT 0
56234: DOUBLE
56235: EQUAL
56236: IFTRUE 56240
56238: GO 56373
56240: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56241: LD_ADDR_VAR 0 5
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: LD_INT 4
56253: MINUS
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 4
56262: MINUS
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 1
56276: PUSH
56277: LD_INT 3
56279: MINUS
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: PUSH
56294: LD_VAR 0 1
56298: PUSH
56299: LD_INT 4
56301: PLUS
56302: PUSH
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: PUSH
56316: LD_VAR 0 1
56320: PUSH
56321: LD_INT 3
56323: PLUS
56324: PUSH
56325: LD_VAR 0 2
56329: PUSH
56330: LD_INT 3
56332: PLUS
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: PUSH
56342: LD_VAR 0 1
56346: PUSH
56347: LD_VAR 0 2
56351: PUSH
56352: LD_INT 4
56354: PLUS
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// end ; 1 :
56371: GO 57071
56373: LD_INT 1
56375: DOUBLE
56376: EQUAL
56377: IFTRUE 56381
56379: GO 56514
56381: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56382: LD_ADDR_VAR 0 5
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 4
56399: MINUS
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 3
56416: MINUS
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 3
56425: MINUS
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: LD_VAR 0 1
56439: PUSH
56440: LD_INT 4
56442: MINUS
56443: PUSH
56444: LD_VAR 0 2
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: PUSH
56457: LD_VAR 0 1
56461: PUSH
56462: LD_VAR 0 2
56466: PUSH
56467: LD_INT 3
56469: PLUS
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: PUSH
56479: LD_VAR 0 1
56483: PUSH
56484: LD_INT 4
56486: PLUS
56487: PUSH
56488: LD_VAR 0 2
56492: PUSH
56493: LD_INT 4
56495: PLUS
56496: PUSH
56497: LD_INT 5
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// end ; 2 :
56512: GO 57071
56514: LD_INT 2
56516: DOUBLE
56517: EQUAL
56518: IFTRUE 56522
56520: GO 56651
56522: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56523: LD_ADDR_VAR 0 5
56527: PUSH
56528: LD_VAR 0 1
56532: PUSH
56533: LD_VAR 0 2
56537: PUSH
56538: LD_INT 3
56540: MINUS
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: PUSH
56550: LD_VAR 0 1
56554: PUSH
56555: LD_INT 4
56557: PLUS
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: PUSH
56572: LD_VAR 0 1
56576: PUSH
56577: LD_VAR 0 2
56581: PUSH
56582: LD_INT 4
56584: PLUS
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: PUSH
56594: LD_VAR 0 1
56598: PUSH
56599: LD_INT 3
56601: MINUS
56602: PUSH
56603: LD_VAR 0 2
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: PUSH
56616: LD_VAR 0 1
56620: PUSH
56621: LD_INT 4
56623: MINUS
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: LD_INT 4
56632: MINUS
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// end ; 3 :
56649: GO 57071
56651: LD_INT 3
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56659
56657: GO 56792
56659: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56660: LD_ADDR_VAR 0 5
56664: PUSH
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 3
56672: PLUS
56673: PUSH
56674: LD_VAR 0 2
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: PUSH
56687: LD_VAR 0 1
56691: PUSH
56692: LD_INT 4
56694: PLUS
56695: PUSH
56696: LD_VAR 0 2
56700: PUSH
56701: LD_INT 4
56703: PLUS
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: PUSH
56713: LD_VAR 0 1
56717: PUSH
56718: LD_INT 4
56720: MINUS
56721: PUSH
56722: LD_VAR 0 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: PUSH
56735: LD_VAR 0 1
56739: PUSH
56740: LD_VAR 0 2
56744: PUSH
56745: LD_INT 4
56747: MINUS
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: LD_VAR 0 1
56761: PUSH
56762: LD_INT 3
56764: MINUS
56765: PUSH
56766: LD_VAR 0 2
56770: PUSH
56771: LD_INT 3
56773: MINUS
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// end ; 4 :
56790: GO 57071
56792: LD_INT 4
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56800
56798: GO 56933
56800: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56801: LD_ADDR_VAR 0 5
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_VAR 0 2
56815: PUSH
56816: LD_INT 4
56818: PLUS
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 3
56835: PLUS
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_INT 3
56844: PLUS
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: PUSH
56854: LD_VAR 0 1
56858: PUSH
56859: LD_INT 4
56861: PLUS
56862: PUSH
56863: LD_VAR 0 2
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_VAR 0 2
56885: PUSH
56886: LD_INT 3
56888: MINUS
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: LD_INT 4
56905: MINUS
56906: PUSH
56907: LD_VAR 0 2
56911: PUSH
56912: LD_INT 4
56914: MINUS
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// end ; 5 :
56931: GO 57071
56933: LD_INT 5
56935: DOUBLE
56936: EQUAL
56937: IFTRUE 56941
56939: GO 57070
56941: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56942: LD_ADDR_VAR 0 5
56946: PUSH
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 4
56954: MINUS
56955: PUSH
56956: LD_VAR 0 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: PUSH
56969: LD_VAR 0 1
56973: PUSH
56974: LD_VAR 0 2
56978: PUSH
56979: LD_INT 4
56981: MINUS
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: LD_VAR 0 1
56995: PUSH
56996: LD_INT 4
56998: PLUS
56999: PUSH
57000: LD_VAR 0 2
57004: PUSH
57005: LD_INT 4
57007: PLUS
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: PUSH
57017: LD_VAR 0 1
57021: PUSH
57022: LD_INT 3
57024: PLUS
57025: PUSH
57026: LD_VAR 0 2
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: PUSH
57039: LD_VAR 0 1
57043: PUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_INT 3
57051: PLUS
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// end ; end ;
57068: GO 57071
57070: POP
// result := list ;
57071: LD_ADDR_VAR 0 4
57075: PUSH
57076: LD_VAR 0 5
57080: ST_TO_ADDR
// end ;
57081: LD_VAR 0 4
57085: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57086: LD_INT 0
57088: PPUSH
57089: PPUSH
57090: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57091: LD_VAR 0 1
57095: NOT
57096: PUSH
57097: LD_VAR 0 2
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: IN
57120: NOT
57121: OR
57122: IFFALSE 57126
// exit ;
57124: GO 57209
// tmp := [ ] ;
57126: LD_ADDR_VAR 0 5
57130: PUSH
57131: EMPTY
57132: ST_TO_ADDR
// for i in units do
57133: LD_ADDR_VAR 0 4
57137: PUSH
57138: LD_VAR 0 1
57142: PUSH
57143: FOR_IN
57144: IFFALSE 57178
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57146: LD_ADDR_VAR 0 5
57150: PUSH
57151: LD_VAR 0 5
57155: PPUSH
57156: LD_VAR 0 4
57160: PPUSH
57161: LD_VAR 0 2
57165: PPUSH
57166: CALL_OW 259
57170: PPUSH
57171: CALL 58582 0 2
57175: ST_TO_ADDR
57176: GO 57143
57178: POP
57179: POP
// if not tmp then
57180: LD_VAR 0 5
57184: NOT
57185: IFFALSE 57189
// exit ;
57187: GO 57209
// result := SortListByListDesc ( units , tmp ) ;
57189: LD_ADDR_VAR 0 3
57193: PUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: LD_VAR 0 5
57203: PPUSH
57204: CALL_OW 77
57208: ST_TO_ADDR
// end ;
57209: LD_VAR 0 3
57213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57214: LD_INT 0
57216: PPUSH
57217: PPUSH
57218: PPUSH
// result := false ;
57219: LD_ADDR_VAR 0 3
57223: PUSH
57224: LD_INT 0
57226: ST_TO_ADDR
// if not building then
57227: LD_VAR 0 2
57231: NOT
57232: IFFALSE 57236
// exit ;
57234: GO 57374
// x := GetX ( building ) ;
57236: LD_ADDR_VAR 0 4
57240: PUSH
57241: LD_VAR 0 2
57245: PPUSH
57246: CALL_OW 250
57250: ST_TO_ADDR
// y := GetY ( building ) ;
57251: LD_ADDR_VAR 0 5
57255: PUSH
57256: LD_VAR 0 2
57260: PPUSH
57261: CALL_OW 251
57265: ST_TO_ADDR
// if not x or not y then
57266: LD_VAR 0 4
57270: NOT
57271: PUSH
57272: LD_VAR 0 5
57276: NOT
57277: OR
57278: IFFALSE 57282
// exit ;
57280: GO 57374
// if GetTaskList ( unit ) then
57282: LD_VAR 0 1
57286: PPUSH
57287: CALL_OW 437
57291: IFFALSE 57374
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57293: LD_STRING e
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: CALL_OW 437
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: EQUAL
57314: PUSH
57315: LD_VAR 0 4
57319: PUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: CALL_OW 437
57329: PUSH
57330: LD_INT 1
57332: ARRAY
57333: PUSH
57334: LD_INT 2
57336: ARRAY
57337: EQUAL
57338: AND
57339: PUSH
57340: LD_VAR 0 5
57344: PUSH
57345: LD_VAR 0 1
57349: PPUSH
57350: CALL_OW 437
57354: PUSH
57355: LD_INT 1
57357: ARRAY
57358: PUSH
57359: LD_INT 3
57361: ARRAY
57362: EQUAL
57363: AND
57364: IFFALSE 57374
// result := true end ;
57366: LD_ADDR_VAR 0 3
57370: PUSH
57371: LD_INT 1
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 3
57378: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57379: LD_INT 0
57381: PPUSH
// result := false ;
57382: LD_ADDR_VAR 0 4
57386: PUSH
57387: LD_INT 0
57389: ST_TO_ADDR
// if GetTaskList ( unit ) then
57390: LD_VAR 0 1
57394: PPUSH
57395: CALL_OW 437
57399: IFFALSE 57482
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57401: LD_STRING M
57403: PUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: CALL_OW 437
57413: PUSH
57414: LD_INT 1
57416: ARRAY
57417: PUSH
57418: LD_INT 1
57420: ARRAY
57421: EQUAL
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 437
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_INT 2
57444: ARRAY
57445: EQUAL
57446: AND
57447: PUSH
57448: LD_VAR 0 3
57452: PUSH
57453: LD_VAR 0 1
57457: PPUSH
57458: CALL_OW 437
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PUSH
57467: LD_INT 3
57469: ARRAY
57470: EQUAL
57471: AND
57472: IFFALSE 57482
// result := true ;
57474: LD_ADDR_VAR 0 4
57478: PUSH
57479: LD_INT 1
57481: ST_TO_ADDR
// end ; end ;
57482: LD_VAR 0 4
57486: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57487: LD_INT 0
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
// if not unit or not area then
57493: LD_VAR 0 1
57497: NOT
57498: PUSH
57499: LD_VAR 0 2
57503: NOT
57504: OR
57505: IFFALSE 57509
// exit ;
57507: GO 57685
// tmp := AreaToList ( area , i ) ;
57509: LD_ADDR_VAR 0 6
57513: PUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: LD_VAR 0 5
57523: PPUSH
57524: CALL_OW 517
57528: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57529: LD_ADDR_VAR 0 5
57533: PUSH
57534: DOUBLE
57535: LD_INT 1
57537: DEC
57538: ST_TO_ADDR
57539: LD_VAR 0 6
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: PUSH
57548: FOR_TO
57549: IFFALSE 57683
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57551: LD_ADDR_VAR 0 7
57555: PUSH
57556: LD_VAR 0 6
57560: PUSH
57561: LD_INT 1
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 5
57569: ARRAY
57570: PUSH
57571: LD_VAR 0 6
57575: PUSH
57576: LD_INT 2
57578: ARRAY
57579: PUSH
57580: LD_VAR 0 5
57584: ARRAY
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57590: LD_INT 92
57592: PUSH
57593: LD_VAR 0 7
57597: PUSH
57598: LD_INT 1
57600: ARRAY
57601: PUSH
57602: LD_VAR 0 7
57606: PUSH
57607: LD_INT 2
57609: ARRAY
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: PPUSH
57620: CALL_OW 69
57624: PUSH
57625: LD_INT 0
57627: EQUAL
57628: IFFALSE 57681
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_VAR 0 7
57639: PUSH
57640: LD_INT 1
57642: ARRAY
57643: PPUSH
57644: LD_VAR 0 7
57648: PUSH
57649: LD_INT 2
57651: ARRAY
57652: PPUSH
57653: LD_VAR 0 3
57657: PPUSH
57658: CALL_OW 48
// result := IsPlaced ( unit ) ;
57662: LD_ADDR_VAR 0 4
57666: PUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: CALL_OW 305
57676: ST_TO_ADDR
// exit ;
57677: POP
57678: POP
57679: GO 57685
// end ; end ;
57681: GO 57548
57683: POP
57684: POP
// end ;
57685: LD_VAR 0 4
57689: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57690: LD_INT 0
57692: PPUSH
57693: PPUSH
57694: PPUSH
// if not side or side > 8 then
57695: LD_VAR 0 1
57699: NOT
57700: PUSH
57701: LD_VAR 0 1
57705: PUSH
57706: LD_INT 8
57708: GREATER
57709: OR
57710: IFFALSE 57714
// exit ;
57712: GO 57901
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57714: LD_ADDR_VAR 0 4
57718: PUSH
57719: LD_INT 22
57721: PUSH
57722: LD_VAR 0 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 21
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 69
57749: ST_TO_ADDR
// if not tmp then
57750: LD_VAR 0 4
57754: NOT
57755: IFFALSE 57759
// exit ;
57757: GO 57901
// enable_addtolog := true ;
57759: LD_ADDR_OWVAR 81
57763: PUSH
57764: LD_INT 1
57766: ST_TO_ADDR
// AddToLog ( [ ) ;
57767: LD_STRING [
57769: PPUSH
57770: CALL_OW 561
// for i in tmp do
57774: LD_ADDR_VAR 0 3
57778: PUSH
57779: LD_VAR 0 4
57783: PUSH
57784: FOR_IN
57785: IFFALSE 57892
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57787: LD_STRING [
57789: PUSH
57790: LD_VAR 0 3
57794: PPUSH
57795: CALL_OW 266
57799: STR
57800: PUSH
57801: LD_STRING , 
57803: STR
57804: PUSH
57805: LD_VAR 0 3
57809: PPUSH
57810: CALL_OW 250
57814: STR
57815: PUSH
57816: LD_STRING , 
57818: STR
57819: PUSH
57820: LD_VAR 0 3
57824: PPUSH
57825: CALL_OW 251
57829: STR
57830: PUSH
57831: LD_STRING , 
57833: STR
57834: PUSH
57835: LD_VAR 0 3
57839: PPUSH
57840: CALL_OW 254
57844: STR
57845: PUSH
57846: LD_STRING , 
57848: STR
57849: PUSH
57850: LD_VAR 0 3
57854: PPUSH
57855: LD_INT 1
57857: PPUSH
57858: CALL_OW 268
57862: STR
57863: PUSH
57864: LD_STRING , 
57866: STR
57867: PUSH
57868: LD_VAR 0 3
57872: PPUSH
57873: LD_INT 2
57875: PPUSH
57876: CALL_OW 268
57880: STR
57881: PUSH
57882: LD_STRING ],
57884: STR
57885: PPUSH
57886: CALL_OW 561
// end ;
57890: GO 57784
57892: POP
57893: POP
// AddToLog ( ]; ) ;
57894: LD_STRING ];
57896: PPUSH
57897: CALL_OW 561
// end ;
57901: LD_VAR 0 2
57905: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57906: LD_INT 0
57908: PPUSH
57909: PPUSH
57910: PPUSH
57911: PPUSH
57912: PPUSH
// if not area or not rate or not max then
57913: LD_VAR 0 1
57917: NOT
57918: PUSH
57919: LD_VAR 0 2
57923: NOT
57924: OR
57925: PUSH
57926: LD_VAR 0 4
57930: NOT
57931: OR
57932: IFFALSE 57936
// exit ;
57934: GO 58125
// while 1 do
57936: LD_INT 1
57938: IFFALSE 58125
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57940: LD_ADDR_VAR 0 9
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: LD_INT 1
57952: PPUSH
57953: CALL_OW 287
57957: PUSH
57958: LD_INT 10
57960: MUL
57961: ST_TO_ADDR
// r := rate / 10 ;
57962: LD_ADDR_VAR 0 7
57966: PUSH
57967: LD_VAR 0 2
57971: PUSH
57972: LD_INT 10
57974: DIVREAL
57975: ST_TO_ADDR
// time := 1 1$00 ;
57976: LD_ADDR_VAR 0 8
57980: PUSH
57981: LD_INT 2100
57983: ST_TO_ADDR
// if amount < min then
57984: LD_VAR 0 9
57988: PUSH
57989: LD_VAR 0 3
57993: LESS
57994: IFFALSE 58012
// r := r * 2 else
57996: LD_ADDR_VAR 0 7
58000: PUSH
58001: LD_VAR 0 7
58005: PUSH
58006: LD_INT 2
58008: MUL
58009: ST_TO_ADDR
58010: GO 58038
// if amount > max then
58012: LD_VAR 0 9
58016: PUSH
58017: LD_VAR 0 4
58021: GREATER
58022: IFFALSE 58038
// r := r / 2 ;
58024: LD_ADDR_VAR 0 7
58028: PUSH
58029: LD_VAR 0 7
58033: PUSH
58034: LD_INT 2
58036: DIVREAL
58037: ST_TO_ADDR
// time := time / r ;
58038: LD_ADDR_VAR 0 8
58042: PUSH
58043: LD_VAR 0 8
58047: PUSH
58048: LD_VAR 0 7
58052: DIVREAL
58053: ST_TO_ADDR
// if time < 0 then
58054: LD_VAR 0 8
58058: PUSH
58059: LD_INT 0
58061: LESS
58062: IFFALSE 58079
// time := time * - 1 ;
58064: LD_ADDR_VAR 0 8
58068: PUSH
58069: LD_VAR 0 8
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: MUL
58078: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58079: LD_VAR 0 8
58083: PUSH
58084: LD_INT 35
58086: PPUSH
58087: LD_INT 875
58089: PPUSH
58090: CALL_OW 12
58094: PLUS
58095: PPUSH
58096: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58100: LD_INT 1
58102: PPUSH
58103: LD_INT 5
58105: PPUSH
58106: CALL_OW 12
58110: PPUSH
58111: LD_VAR 0 1
58115: PPUSH
58116: LD_INT 1
58118: PPUSH
58119: CALL_OW 55
// end ;
58123: GO 57936
// end ;
58125: LD_VAR 0 5
58129: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58130: LD_INT 0
58132: PPUSH
58133: PPUSH
58134: PPUSH
58135: PPUSH
58136: PPUSH
58137: PPUSH
58138: PPUSH
58139: PPUSH
// if not turrets or not factories then
58140: LD_VAR 0 1
58144: NOT
58145: PUSH
58146: LD_VAR 0 2
58150: NOT
58151: OR
58152: IFFALSE 58156
// exit ;
58154: GO 58463
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58156: LD_ADDR_VAR 0 10
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: LD_INT 6
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 24
58198: PUSH
58199: LD_INT 25
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 23
58208: PUSH
58209: LD_INT 27
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 42
58222: PUSH
58223: LD_INT 43
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 44
58232: PUSH
58233: LD_INT 46
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 45
58242: PUSH
58243: LD_INT 47
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// result := [ ] ;
58260: LD_ADDR_VAR 0 3
58264: PUSH
58265: EMPTY
58266: ST_TO_ADDR
// for i in turrets do
58267: LD_ADDR_VAR 0 4
58271: PUSH
58272: LD_VAR 0 1
58276: PUSH
58277: FOR_IN
58278: IFFALSE 58461
// begin nat := GetNation ( i ) ;
58280: LD_ADDR_VAR 0 7
58284: PUSH
58285: LD_VAR 0 4
58289: PPUSH
58290: CALL_OW 248
58294: ST_TO_ADDR
// weapon := 0 ;
58295: LD_ADDR_VAR 0 8
58299: PUSH
58300: LD_INT 0
58302: ST_TO_ADDR
// if not nat then
58303: LD_VAR 0 7
58307: NOT
58308: IFFALSE 58312
// continue ;
58310: GO 58277
// for j in list [ nat ] do
58312: LD_ADDR_VAR 0 5
58316: PUSH
58317: LD_VAR 0 10
58321: PUSH
58322: LD_VAR 0 7
58326: ARRAY
58327: PUSH
58328: FOR_IN
58329: IFFALSE 58370
// if GetBWeapon ( i ) = j [ 1 ] then
58331: LD_VAR 0 4
58335: PPUSH
58336: CALL_OW 269
58340: PUSH
58341: LD_VAR 0 5
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: EQUAL
58350: IFFALSE 58368
// begin weapon := j [ 2 ] ;
58352: LD_ADDR_VAR 0 8
58356: PUSH
58357: LD_VAR 0 5
58361: PUSH
58362: LD_INT 2
58364: ARRAY
58365: ST_TO_ADDR
// break ;
58366: GO 58370
// end ;
58368: GO 58328
58370: POP
58371: POP
// if not weapon then
58372: LD_VAR 0 8
58376: NOT
58377: IFFALSE 58381
// continue ;
58379: GO 58277
// for k in factories do
58381: LD_ADDR_VAR 0 6
58385: PUSH
58386: LD_VAR 0 2
58390: PUSH
58391: FOR_IN
58392: IFFALSE 58457
// begin weapons := AvailableWeaponList ( k ) ;
58394: LD_ADDR_VAR 0 9
58398: PUSH
58399: LD_VAR 0 6
58403: PPUSH
58404: CALL_OW 478
58408: ST_TO_ADDR
// if not weapons then
58409: LD_VAR 0 9
58413: NOT
58414: IFFALSE 58418
// continue ;
58416: GO 58391
// if weapon in weapons then
58418: LD_VAR 0 8
58422: PUSH
58423: LD_VAR 0 9
58427: IN
58428: IFFALSE 58455
// begin result := [ i , weapon ] ;
58430: LD_ADDR_VAR 0 3
58434: PUSH
58435: LD_VAR 0 4
58439: PUSH
58440: LD_VAR 0 8
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// exit ;
58449: POP
58450: POP
58451: POP
58452: POP
58453: GO 58463
// end ; end ;
58455: GO 58391
58457: POP
58458: POP
// end ;
58459: GO 58277
58461: POP
58462: POP
// end ;
58463: LD_VAR 0 3
58467: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58468: LD_INT 0
58470: PPUSH
// if not side or side > 8 then
58471: LD_VAR 0 3
58475: NOT
58476: PUSH
58477: LD_VAR 0 3
58481: PUSH
58482: LD_INT 8
58484: GREATER
58485: OR
58486: IFFALSE 58490
// exit ;
58488: GO 58549
// if not range then
58490: LD_VAR 0 4
58494: NOT
58495: IFFALSE 58506
// range := - 12 ;
58497: LD_ADDR_VAR 0 4
58501: PUSH
58502: LD_INT 12
58504: NEG
58505: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58506: LD_VAR 0 1
58510: PPUSH
58511: LD_VAR 0 2
58515: PPUSH
58516: LD_VAR 0 3
58520: PPUSH
58521: LD_VAR 0 4
58525: PPUSH
58526: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58530: LD_VAR 0 1
58534: PPUSH
58535: LD_VAR 0 2
58539: PPUSH
58540: LD_VAR 0 3
58544: PPUSH
58545: CALL_OW 331
// end ;
58549: LD_VAR 0 5
58553: RET
// export function Video ( mode ) ; begin
58554: LD_INT 0
58556: PPUSH
// ingame_video = mode ;
58557: LD_ADDR_OWVAR 52
58561: PUSH
58562: LD_VAR 0 1
58566: ST_TO_ADDR
// interface_hidden = mode ;
58567: LD_ADDR_OWVAR 54
58571: PUSH
58572: LD_VAR 0 1
58576: ST_TO_ADDR
// end ;
58577: LD_VAR 0 2
58581: RET
// export function Join ( array , element ) ; begin
58582: LD_INT 0
58584: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58585: LD_ADDR_VAR 0 3
58589: PUSH
58590: LD_VAR 0 1
58594: PPUSH
58595: LD_VAR 0 1
58599: PUSH
58600: LD_INT 1
58602: PLUS
58603: PPUSH
58604: LD_VAR 0 2
58608: PPUSH
58609: CALL_OW 1
58613: ST_TO_ADDR
// end ;
58614: LD_VAR 0 3
58618: RET
// export function JoinUnion ( array , element ) ; begin
58619: LD_INT 0
58621: PPUSH
// result := array union element ;
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_VAR 0 2
58636: UNION
58637: ST_TO_ADDR
// end ;
58638: LD_VAR 0 3
58642: RET
// export function GetBehemoths ( side ) ; begin
58643: LD_INT 0
58645: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58646: LD_ADDR_VAR 0 2
58650: PUSH
58651: LD_INT 22
58653: PUSH
58654: LD_VAR 0 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 31
58665: PUSH
58666: LD_INT 25
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PPUSH
58677: CALL_OW 69
58681: ST_TO_ADDR
// end ;
58682: LD_VAR 0 2
58686: RET
// export function Shuffle ( array ) ; var i , index ; begin
58687: LD_INT 0
58689: PPUSH
58690: PPUSH
58691: PPUSH
// result := [ ] ;
58692: LD_ADDR_VAR 0 2
58696: PUSH
58697: EMPTY
58698: ST_TO_ADDR
// if not array then
58699: LD_VAR 0 1
58703: NOT
58704: IFFALSE 58708
// exit ;
58706: GO 58807
// Randomize ;
58708: CALL_OW 10
// for i = array downto 1 do
58712: LD_ADDR_VAR 0 3
58716: PUSH
58717: DOUBLE
58718: LD_VAR 0 1
58722: INC
58723: ST_TO_ADDR
58724: LD_INT 1
58726: PUSH
58727: FOR_DOWNTO
58728: IFFALSE 58805
// begin index := rand ( 1 , array ) ;
58730: LD_ADDR_VAR 0 4
58734: PUSH
58735: LD_INT 1
58737: PPUSH
58738: LD_VAR 0 1
58742: PPUSH
58743: CALL_OW 12
58747: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58748: LD_ADDR_VAR 0 2
58752: PUSH
58753: LD_VAR 0 2
58757: PPUSH
58758: LD_VAR 0 2
58762: PUSH
58763: LD_INT 1
58765: PLUS
58766: PPUSH
58767: LD_VAR 0 1
58771: PUSH
58772: LD_VAR 0 4
58776: ARRAY
58777: PPUSH
58778: CALL_OW 2
58782: ST_TO_ADDR
// array := Delete ( array , index ) ;
58783: LD_ADDR_VAR 0 1
58787: PUSH
58788: LD_VAR 0 1
58792: PPUSH
58793: LD_VAR 0 4
58797: PPUSH
58798: CALL_OW 3
58802: ST_TO_ADDR
// end ;
58803: GO 58727
58805: POP
58806: POP
// end ;
58807: LD_VAR 0 2
58811: RET
// export function GetBaseMaterials ( base ) ; begin
58812: LD_INT 0
58814: PPUSH
// result := [ 0 , 0 , 0 ] ;
58815: LD_ADDR_VAR 0 2
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// if not base then
58834: LD_VAR 0 1
58838: NOT
58839: IFFALSE 58843
// exit ;
58841: GO 58892
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58843: LD_ADDR_VAR 0 2
58847: PUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: LD_INT 1
58855: PPUSH
58856: CALL_OW 275
58860: PUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_INT 2
58868: PPUSH
58869: CALL_OW 275
58873: PUSH
58874: LD_VAR 0 1
58878: PPUSH
58879: LD_INT 3
58881: PPUSH
58882: CALL_OW 275
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: ST_TO_ADDR
// end ;
58892: LD_VAR 0 2
58896: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58897: LD_INT 0
58899: PPUSH
58900: PPUSH
// result := array ;
58901: LD_ADDR_VAR 0 3
58905: PUSH
58906: LD_VAR 0 1
58910: ST_TO_ADDR
// if size >= result then
58911: LD_VAR 0 2
58915: PUSH
58916: LD_VAR 0 3
58920: GREATEREQUAL
58921: IFFALSE 58925
// exit ;
58923: GO 58975
// if size then
58925: LD_VAR 0 2
58929: IFFALSE 58975
// for i := array downto size do
58931: LD_ADDR_VAR 0 4
58935: PUSH
58936: DOUBLE
58937: LD_VAR 0 1
58941: INC
58942: ST_TO_ADDR
58943: LD_VAR 0 2
58947: PUSH
58948: FOR_DOWNTO
58949: IFFALSE 58973
// result := Delete ( result , result ) ;
58951: LD_ADDR_VAR 0 3
58955: PUSH
58956: LD_VAR 0 3
58960: PPUSH
58961: LD_VAR 0 3
58965: PPUSH
58966: CALL_OW 3
58970: ST_TO_ADDR
58971: GO 58948
58973: POP
58974: POP
// end ;
58975: LD_VAR 0 3
58979: RET
// export function ComExit ( unit ) ; var tmp ; begin
58980: LD_INT 0
58982: PPUSH
58983: PPUSH
// if not IsInUnit ( unit ) then
58984: LD_VAR 0 1
58988: PPUSH
58989: CALL_OW 310
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59058
// tmp := IsInUnit ( unit ) ;
58998: LD_ADDR_VAR 0 3
59002: PUSH
59003: LD_VAR 0 1
59007: PPUSH
59008: CALL_OW 310
59012: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59013: LD_VAR 0 3
59017: PPUSH
59018: CALL_OW 247
59022: PUSH
59023: LD_INT 2
59025: EQUAL
59026: IFFALSE 59039
// ComExitVehicle ( unit ) else
59028: LD_VAR 0 1
59032: PPUSH
59033: CALL_OW 121
59037: GO 59048
// ComExitBuilding ( unit ) ;
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 122
// result := tmp ;
59048: LD_ADDR_VAR 0 2
59052: PUSH
59053: LD_VAR 0 3
59057: ST_TO_ADDR
// end ;
59058: LD_VAR 0 2
59062: RET
// export function ComExitAll ( units ) ; var i ; begin
59063: LD_INT 0
59065: PPUSH
59066: PPUSH
// if not units then
59067: LD_VAR 0 1
59071: NOT
59072: IFFALSE 59076
// exit ;
59074: GO 59102
// for i in units do
59076: LD_ADDR_VAR 0 3
59080: PUSH
59081: LD_VAR 0 1
59085: PUSH
59086: FOR_IN
59087: IFFALSE 59100
// ComExit ( i ) ;
59089: LD_VAR 0 3
59093: PPUSH
59094: CALL 58980 0 1
59098: GO 59086
59100: POP
59101: POP
// end ;
59102: LD_VAR 0 2
59106: RET
// export function ResetHc ; begin
59107: LD_INT 0
59109: PPUSH
// InitHc ;
59110: CALL_OW 19
// hc_importance := 0 ;
59114: LD_ADDR_OWVAR 32
59118: PUSH
59119: LD_INT 0
59121: ST_TO_ADDR
// end ;
59122: LD_VAR 0 1
59126: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59127: LD_INT 0
59129: PPUSH
59130: PPUSH
59131: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59132: LD_ADDR_VAR 0 6
59136: PUSH
59137: LD_VAR 0 1
59141: PUSH
59142: LD_VAR 0 3
59146: PLUS
59147: PUSH
59148: LD_INT 2
59150: DIV
59151: ST_TO_ADDR
// if _x < 0 then
59152: LD_VAR 0 6
59156: PUSH
59157: LD_INT 0
59159: LESS
59160: IFFALSE 59177
// _x := _x * - 1 ;
59162: LD_ADDR_VAR 0 6
59166: PUSH
59167: LD_VAR 0 6
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: MUL
59176: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59177: LD_ADDR_VAR 0 7
59181: PUSH
59182: LD_VAR 0 2
59186: PUSH
59187: LD_VAR 0 4
59191: PLUS
59192: PUSH
59193: LD_INT 2
59195: DIV
59196: ST_TO_ADDR
// if _y < 0 then
59197: LD_VAR 0 7
59201: PUSH
59202: LD_INT 0
59204: LESS
59205: IFFALSE 59222
// _y := _y * - 1 ;
59207: LD_ADDR_VAR 0 7
59211: PUSH
59212: LD_VAR 0 7
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: MUL
59221: ST_TO_ADDR
// result := [ _x , _y ] ;
59222: LD_ADDR_VAR 0 5
59226: PUSH
59227: LD_VAR 0 6
59231: PUSH
59232: LD_VAR 0 7
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// end ;
59241: LD_VAR 0 5
59245: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
59250: PPUSH
59251: PPUSH
// task := GetTaskList ( unit ) ;
59252: LD_ADDR_VAR 0 7
59256: PUSH
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL_OW 437
59266: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59267: LD_VAR 0 7
59271: NOT
59272: PUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: LD_VAR 0 2
59282: PPUSH
59283: CALL_OW 308
59287: NOT
59288: AND
59289: IFFALSE 59293
// exit ;
59291: GO 59411
// if IsInArea ( unit , area ) then
59293: LD_VAR 0 1
59297: PPUSH
59298: LD_VAR 0 2
59302: PPUSH
59303: CALL_OW 308
59307: IFFALSE 59325
// begin ComMoveToArea ( unit , goAway ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_VAR 0 3
59318: PPUSH
59319: CALL_OW 113
// exit ;
59323: GO 59411
// end ; if task [ 1 ] [ 1 ] <> M then
59325: LD_VAR 0 7
59329: PUSH
59330: LD_INT 1
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PUSH
59338: LD_STRING M
59340: NONEQUAL
59341: IFFALSE 59345
// exit ;
59343: GO 59411
// x := task [ 1 ] [ 2 ] ;
59345: LD_ADDR_VAR 0 5
59349: PUSH
59350: LD_VAR 0 7
59354: PUSH
59355: LD_INT 1
59357: ARRAY
59358: PUSH
59359: LD_INT 2
59361: ARRAY
59362: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59363: LD_ADDR_VAR 0 6
59367: PUSH
59368: LD_VAR 0 7
59372: PUSH
59373: LD_INT 1
59375: ARRAY
59376: PUSH
59377: LD_INT 3
59379: ARRAY
59380: ST_TO_ADDR
// if InArea ( x , y , area ) then
59381: LD_VAR 0 5
59385: PPUSH
59386: LD_VAR 0 6
59390: PPUSH
59391: LD_VAR 0 2
59395: PPUSH
59396: CALL_OW 309
59400: IFFALSE 59411
// ComStop ( unit ) ;
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 141
// end ;
59411: LD_VAR 0 4
59415: RET
// export function Abs ( value ) ; begin
59416: LD_INT 0
59418: PPUSH
// result := value ;
59419: LD_ADDR_VAR 0 2
59423: PUSH
59424: LD_VAR 0 1
59428: ST_TO_ADDR
// if value < 0 then
59429: LD_VAR 0 1
59433: PUSH
59434: LD_INT 0
59436: LESS
59437: IFFALSE 59454
// result := value * - 1 ;
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: LD_VAR 0 1
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: MUL
59453: ST_TO_ADDR
// end ;
59454: LD_VAR 0 2
59458: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59459: LD_INT 0
59461: PPUSH
59462: PPUSH
59463: PPUSH
59464: PPUSH
59465: PPUSH
59466: PPUSH
59467: PPUSH
59468: PPUSH
// if not unit or not building then
59469: LD_VAR 0 1
59473: NOT
59474: PUSH
59475: LD_VAR 0 2
59479: NOT
59480: OR
59481: IFFALSE 59485
// exit ;
59483: GO 59711
// x := GetX ( building ) ;
59485: LD_ADDR_VAR 0 4
59489: PUSH
59490: LD_VAR 0 2
59494: PPUSH
59495: CALL_OW 250
59499: ST_TO_ADDR
// y := GetY ( building ) ;
59500: LD_ADDR_VAR 0 6
59504: PUSH
59505: LD_VAR 0 2
59509: PPUSH
59510: CALL_OW 251
59514: ST_TO_ADDR
// d := GetDir ( building ) ;
59515: LD_ADDR_VAR 0 8
59519: PUSH
59520: LD_VAR 0 2
59524: PPUSH
59525: CALL_OW 254
59529: ST_TO_ADDR
// r := 4 ;
59530: LD_ADDR_VAR 0 9
59534: PUSH
59535: LD_INT 4
59537: ST_TO_ADDR
// for i := 1 to 5 do
59538: LD_ADDR_VAR 0 10
59542: PUSH
59543: DOUBLE
59544: LD_INT 1
59546: DEC
59547: ST_TO_ADDR
59548: LD_INT 5
59550: PUSH
59551: FOR_TO
59552: IFFALSE 59709
// begin _x := ShiftX ( x , d , r + i ) ;
59554: LD_ADDR_VAR 0 5
59558: PUSH
59559: LD_VAR 0 4
59563: PPUSH
59564: LD_VAR 0 8
59568: PPUSH
59569: LD_VAR 0 9
59573: PUSH
59574: LD_VAR 0 10
59578: PLUS
59579: PPUSH
59580: CALL_OW 272
59584: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59585: LD_ADDR_VAR 0 7
59589: PUSH
59590: LD_VAR 0 6
59594: PPUSH
59595: LD_VAR 0 8
59599: PPUSH
59600: LD_VAR 0 9
59604: PUSH
59605: LD_VAR 0 10
59609: PLUS
59610: PPUSH
59611: CALL_OW 273
59615: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59616: LD_VAR 0 5
59620: PPUSH
59621: LD_VAR 0 7
59625: PPUSH
59626: CALL_OW 488
59630: PUSH
59631: LD_VAR 0 5
59635: PPUSH
59636: LD_VAR 0 7
59640: PPUSH
59641: CALL_OW 428
59645: PPUSH
59646: CALL_OW 247
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: IN
59661: NOT
59662: AND
59663: IFFALSE 59707
// begin ComMoveXY ( unit , _x , _y ) ;
59665: LD_VAR 0 1
59669: PPUSH
59670: LD_VAR 0 5
59674: PPUSH
59675: LD_VAR 0 7
59679: PPUSH
59680: CALL_OW 111
// result := [ _x , _y ] ;
59684: LD_ADDR_VAR 0 3
59688: PUSH
59689: LD_VAR 0 5
59693: PUSH
59694: LD_VAR 0 7
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// exit ;
59703: POP
59704: POP
59705: GO 59711
// end ; end ;
59707: GO 59551
59709: POP
59710: POP
// end ;
59711: LD_VAR 0 3
59715: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59716: LD_INT 0
59718: PPUSH
59719: PPUSH
59720: PPUSH
// result := 0 ;
59721: LD_ADDR_VAR 0 3
59725: PUSH
59726: LD_INT 0
59728: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59729: LD_VAR 0 1
59733: PUSH
59734: LD_INT 0
59736: LESS
59737: PUSH
59738: LD_VAR 0 1
59742: PUSH
59743: LD_INT 8
59745: GREATER
59746: OR
59747: PUSH
59748: LD_VAR 0 2
59752: PUSH
59753: LD_INT 0
59755: LESS
59756: OR
59757: PUSH
59758: LD_VAR 0 2
59762: PUSH
59763: LD_INT 8
59765: GREATER
59766: OR
59767: IFFALSE 59771
// exit ;
59769: GO 59846
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59771: LD_ADDR_VAR 0 4
59775: PUSH
59776: LD_INT 22
59778: PUSH
59779: LD_VAR 0 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PPUSH
59788: CALL_OW 69
59792: PUSH
59793: FOR_IN
59794: IFFALSE 59844
// begin un := UnitShoot ( i ) ;
59796: LD_ADDR_VAR 0 5
59800: PUSH
59801: LD_VAR 0 4
59805: PPUSH
59806: CALL_OW 504
59810: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59811: LD_VAR 0 5
59815: PPUSH
59816: CALL_OW 255
59820: PUSH
59821: LD_VAR 0 1
59825: EQUAL
59826: IFFALSE 59842
// begin result := un ;
59828: LD_ADDR_VAR 0 3
59832: PUSH
59833: LD_VAR 0 5
59837: ST_TO_ADDR
// exit ;
59838: POP
59839: POP
59840: GO 59846
// end ; end ;
59842: GO 59793
59844: POP
59845: POP
// end ;
59846: LD_VAR 0 3
59850: RET
// export function GetCargoBay ( units ) ; begin
59851: LD_INT 0
59853: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59854: LD_ADDR_VAR 0 2
59858: PUSH
59859: LD_VAR 0 1
59863: PPUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 34
59869: PUSH
59870: LD_INT 12
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 34
59879: PUSH
59880: LD_INT 51
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 34
59889: PUSH
59890: LD_INT 32
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 34
59899: PUSH
59900: LD_INT 89
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: PPUSH
59914: CALL_OW 72
59918: ST_TO_ADDR
// end ;
59919: LD_VAR 0 2
59923: RET
// export function Negate ( value ) ; begin
59924: LD_INT 0
59926: PPUSH
// result := not value ;
59927: LD_ADDR_VAR 0 2
59931: PUSH
59932: LD_VAR 0 1
59936: NOT
59937: ST_TO_ADDR
// end ;
59938: LD_VAR 0 2
59942: RET
// export function Inc ( value ) ; begin
59943: LD_INT 0
59945: PPUSH
// result := value + 1 ;
59946: LD_ADDR_VAR 0 2
59950: PUSH
59951: LD_VAR 0 1
59955: PUSH
59956: LD_INT 1
59958: PLUS
59959: ST_TO_ADDR
// end ;
59960: LD_VAR 0 2
59964: RET
// export function Dec ( value ) ; begin
59965: LD_INT 0
59967: PPUSH
// result := value - 1 ;
59968: LD_ADDR_VAR 0 2
59972: PUSH
59973: LD_VAR 0 1
59977: PUSH
59978: LD_INT 1
59980: MINUS
59981: ST_TO_ADDR
// end ;
59982: LD_VAR 0 2
59986: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59987: LD_INT 0
59989: PPUSH
59990: PPUSH
59991: PPUSH
59992: PPUSH
59993: PPUSH
59994: PPUSH
59995: PPUSH
59996: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59997: LD_VAR 0 1
60001: PPUSH
60002: LD_VAR 0 2
60006: PPUSH
60007: CALL_OW 488
60011: NOT
60012: PUSH
60013: LD_VAR 0 3
60017: PPUSH
60018: LD_VAR 0 4
60022: PPUSH
60023: CALL_OW 488
60027: NOT
60028: OR
60029: IFFALSE 60042
// begin result := - 1 ;
60031: LD_ADDR_VAR 0 5
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: ST_TO_ADDR
// exit ;
60040: GO 60277
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60042: LD_ADDR_VAR 0 12
60046: PUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: LD_VAR 0 2
60056: PPUSH
60057: LD_VAR 0 3
60061: PPUSH
60062: LD_VAR 0 4
60066: PPUSH
60067: CALL 59127 0 4
60071: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60072: LD_ADDR_VAR 0 11
60076: PUSH
60077: LD_VAR 0 1
60081: PPUSH
60082: LD_VAR 0 2
60086: PPUSH
60087: LD_VAR 0 12
60091: PUSH
60092: LD_INT 1
60094: ARRAY
60095: PPUSH
60096: LD_VAR 0 12
60100: PUSH
60101: LD_INT 2
60103: ARRAY
60104: PPUSH
60105: CALL_OW 298
60109: ST_TO_ADDR
// distance := 9999 ;
60110: LD_ADDR_VAR 0 10
60114: PUSH
60115: LD_INT 9999
60117: ST_TO_ADDR
// for i := 0 to 5 do
60118: LD_ADDR_VAR 0 6
60122: PUSH
60123: DOUBLE
60124: LD_INT 0
60126: DEC
60127: ST_TO_ADDR
60128: LD_INT 5
60130: PUSH
60131: FOR_TO
60132: IFFALSE 60275
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60134: LD_ADDR_VAR 0 7
60138: PUSH
60139: LD_VAR 0 1
60143: PPUSH
60144: LD_VAR 0 6
60148: PPUSH
60149: LD_VAR 0 11
60153: PPUSH
60154: CALL_OW 272
60158: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60159: LD_ADDR_VAR 0 8
60163: PUSH
60164: LD_VAR 0 2
60168: PPUSH
60169: LD_VAR 0 6
60173: PPUSH
60174: LD_VAR 0 11
60178: PPUSH
60179: CALL_OW 273
60183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60184: LD_VAR 0 7
60188: PPUSH
60189: LD_VAR 0 8
60193: PPUSH
60194: CALL_OW 488
60198: NOT
60199: IFFALSE 60203
// continue ;
60201: GO 60131
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60203: LD_ADDR_VAR 0 9
60207: PUSH
60208: LD_VAR 0 12
60212: PUSH
60213: LD_INT 1
60215: ARRAY
60216: PPUSH
60217: LD_VAR 0 12
60221: PUSH
60222: LD_INT 2
60224: ARRAY
60225: PPUSH
60226: LD_VAR 0 7
60230: PPUSH
60231: LD_VAR 0 8
60235: PPUSH
60236: CALL_OW 298
60240: ST_TO_ADDR
// if tmp < distance then
60241: LD_VAR 0 9
60245: PUSH
60246: LD_VAR 0 10
60250: LESS
60251: IFFALSE 60273
// begin result := i ;
60253: LD_ADDR_VAR 0 5
60257: PUSH
60258: LD_VAR 0 6
60262: ST_TO_ADDR
// distance := tmp ;
60263: LD_ADDR_VAR 0 10
60267: PUSH
60268: LD_VAR 0 9
60272: ST_TO_ADDR
// end ; end ;
60273: GO 60131
60275: POP
60276: POP
// end ;
60277: LD_VAR 0 5
60281: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
// if not driver or not IsInUnit ( driver ) then
60286: LD_VAR 0 1
60290: NOT
60291: PUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: CALL_OW 310
60301: NOT
60302: OR
60303: IFFALSE 60307
// exit ;
60305: GO 60397
// vehicle := IsInUnit ( driver ) ;
60307: LD_ADDR_VAR 0 3
60311: PUSH
60312: LD_VAR 0 1
60316: PPUSH
60317: CALL_OW 310
60321: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60322: LD_VAR 0 1
60326: PPUSH
60327: LD_STRING \
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: PUSH
60357: LD_STRING E
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_VAR 0 3
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 446
// end ;
60397: LD_VAR 0 2
60401: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60402: LD_INT 0
60404: PPUSH
60405: PPUSH
// if not driver or not IsInUnit ( driver ) then
60406: LD_VAR 0 1
60410: NOT
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 310
60421: NOT
60422: OR
60423: IFFALSE 60427
// exit ;
60425: GO 60517
// vehicle := IsInUnit ( driver ) ;
60427: LD_ADDR_VAR 0 3
60431: PUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: CALL_OW 310
60441: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60442: LD_VAR 0 1
60446: PPUSH
60447: LD_STRING \
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: PUSH
60477: LD_STRING E
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_VAR 0 3
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PPUSH
60513: CALL_OW 447
// end ;
60517: LD_VAR 0 2
60521: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
60526: PPUSH
// tmp := [ ] ;
60527: LD_ADDR_VAR 0 5
60531: PUSH
60532: EMPTY
60533: ST_TO_ADDR
// for i in units do
60534: LD_ADDR_VAR 0 4
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: FOR_IN
60545: IFFALSE 60583
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60547: LD_ADDR_VAR 0 5
60551: PUSH
60552: LD_VAR 0 5
60556: PPUSH
60557: LD_VAR 0 5
60561: PUSH
60562: LD_INT 1
60564: PLUS
60565: PPUSH
60566: LD_VAR 0 4
60570: PPUSH
60571: CALL_OW 256
60575: PPUSH
60576: CALL_OW 2
60580: ST_TO_ADDR
60581: GO 60544
60583: POP
60584: POP
// if not tmp then
60585: LD_VAR 0 5
60589: NOT
60590: IFFALSE 60594
// exit ;
60592: GO 60642
// if asc then
60594: LD_VAR 0 2
60598: IFFALSE 60622
// result := SortListByListAsc ( units , tmp ) else
60600: LD_ADDR_VAR 0 3
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: LD_VAR 0 5
60614: PPUSH
60615: CALL_OW 76
60619: ST_TO_ADDR
60620: GO 60642
// result := SortListByListDesc ( units , tmp ) ;
60622: LD_ADDR_VAR 0 3
60626: PUSH
60627: LD_VAR 0 1
60631: PPUSH
60632: LD_VAR 0 5
60636: PPUSH
60637: CALL_OW 77
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 3
60646: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
// task := GetTaskList ( mech ) ;
60651: LD_ADDR_VAR 0 4
60655: PUSH
60656: LD_VAR 0 1
60660: PPUSH
60661: CALL_OW 437
60665: ST_TO_ADDR
// if not task then
60666: LD_VAR 0 4
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 60717
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60675: LD_ADDR_VAR 0 3
60679: PUSH
60680: LD_VAR 0 4
60684: PUSH
60685: LD_INT 1
60687: ARRAY
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_STRING r
60695: EQUAL
60696: PUSH
60697: LD_VAR 0 4
60701: PUSH
60702: LD_INT 1
60704: ARRAY
60705: PUSH
60706: LD_INT 4
60708: ARRAY
60709: PUSH
60710: LD_VAR 0 2
60714: EQUAL
60715: AND
60716: ST_TO_ADDR
// end ;
60717: LD_VAR 0 3
60721: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60722: LD_INT 0
60724: PPUSH
// SetDir ( unit , d ) ;
60725: LD_VAR 0 1
60729: PPUSH
60730: LD_VAR 0 4
60734: PPUSH
60735: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60739: LD_VAR 0 1
60743: PPUSH
60744: LD_VAR 0 2
60748: PPUSH
60749: LD_VAR 0 3
60753: PPUSH
60754: LD_VAR 0 5
60758: PPUSH
60759: CALL_OW 48
// end ;
60763: LD_VAR 0 6
60767: RET
// export function ToNaturalNumber ( number ) ; begin
60768: LD_INT 0
60770: PPUSH
// result := number div 1 ;
60771: LD_ADDR_VAR 0 2
60775: PUSH
60776: LD_VAR 0 1
60780: PUSH
60781: LD_INT 1
60783: DIV
60784: ST_TO_ADDR
// if number < 0 then
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 0
60792: LESS
60793: IFFALSE 60803
// result := 0 ;
60795: LD_ADDR_VAR 0 2
60799: PUSH
60800: LD_INT 0
60802: ST_TO_ADDR
// end ;
60803: LD_VAR 0 2
60807: RET
// export function SortByClass ( units , class ) ; var un ; begin
60808: LD_INT 0
60810: PPUSH
60811: PPUSH
// if not units or not class then
60812: LD_VAR 0 1
60816: NOT
60817: PUSH
60818: LD_VAR 0 2
60822: NOT
60823: OR
60824: IFFALSE 60828
// exit ;
60826: GO 60923
// result := [ ] ;
60828: LD_ADDR_VAR 0 3
60832: PUSH
60833: EMPTY
60834: ST_TO_ADDR
// for un in units do
60835: LD_ADDR_VAR 0 4
60839: PUSH
60840: LD_VAR 0 1
60844: PUSH
60845: FOR_IN
60846: IFFALSE 60921
// if GetClass ( un ) = class then
60848: LD_VAR 0 4
60852: PPUSH
60853: CALL_OW 257
60857: PUSH
60858: LD_VAR 0 2
60862: EQUAL
60863: IFFALSE 60890
// result := Insert ( result , 1 , un ) else
60865: LD_ADDR_VAR 0 3
60869: PUSH
60870: LD_VAR 0 3
60874: PPUSH
60875: LD_INT 1
60877: PPUSH
60878: LD_VAR 0 4
60882: PPUSH
60883: CALL_OW 2
60887: ST_TO_ADDR
60888: GO 60919
// result := Replace ( result , result + 1 , un ) ;
60890: LD_ADDR_VAR 0 3
60894: PUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: LD_VAR 0 3
60904: PUSH
60905: LD_INT 1
60907: PLUS
60908: PPUSH
60909: LD_VAR 0 4
60913: PPUSH
60914: CALL_OW 1
60918: ST_TO_ADDR
60919: GO 60845
60921: POP
60922: POP
// end ;
60923: LD_VAR 0 3
60927: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60928: LD_INT 0
60930: PPUSH
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
// result := [ ] ;
60937: LD_ADDR_VAR 0 4
60941: PUSH
60942: EMPTY
60943: ST_TO_ADDR
// if x - r < 0 then
60944: LD_VAR 0 1
60948: PUSH
60949: LD_VAR 0 3
60953: MINUS
60954: PUSH
60955: LD_INT 0
60957: LESS
60958: IFFALSE 60970
// min_x := 0 else
60960: LD_ADDR_VAR 0 8
60964: PUSH
60965: LD_INT 0
60967: ST_TO_ADDR
60968: GO 60986
// min_x := x - r ;
60970: LD_ADDR_VAR 0 8
60974: PUSH
60975: LD_VAR 0 1
60979: PUSH
60980: LD_VAR 0 3
60984: MINUS
60985: ST_TO_ADDR
// if y - r < 0 then
60986: LD_VAR 0 2
60990: PUSH
60991: LD_VAR 0 3
60995: MINUS
60996: PUSH
60997: LD_INT 0
60999: LESS
61000: IFFALSE 61012
// min_y := 0 else
61002: LD_ADDR_VAR 0 7
61006: PUSH
61007: LD_INT 0
61009: ST_TO_ADDR
61010: GO 61028
// min_y := y - r ;
61012: LD_ADDR_VAR 0 7
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_VAR 0 3
61026: MINUS
61027: ST_TO_ADDR
// max_x := x + r ;
61028: LD_ADDR_VAR 0 9
61032: PUSH
61033: LD_VAR 0 1
61037: PUSH
61038: LD_VAR 0 3
61042: PLUS
61043: ST_TO_ADDR
// max_y := y + r ;
61044: LD_ADDR_VAR 0 10
61048: PUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_VAR 0 3
61058: PLUS
61059: ST_TO_ADDR
// for _x = min_x to max_x do
61060: LD_ADDR_VAR 0 5
61064: PUSH
61065: DOUBLE
61066: LD_VAR 0 8
61070: DEC
61071: ST_TO_ADDR
61072: LD_VAR 0 9
61076: PUSH
61077: FOR_TO
61078: IFFALSE 61179
// for _y = min_y to max_y do
61080: LD_ADDR_VAR 0 6
61084: PUSH
61085: DOUBLE
61086: LD_VAR 0 7
61090: DEC
61091: ST_TO_ADDR
61092: LD_VAR 0 10
61096: PUSH
61097: FOR_TO
61098: IFFALSE 61175
// begin if not ValidHex ( _x , _y ) then
61100: LD_VAR 0 5
61104: PPUSH
61105: LD_VAR 0 6
61109: PPUSH
61110: CALL_OW 488
61114: NOT
61115: IFFALSE 61119
// continue ;
61117: GO 61097
// if GetResourceTypeXY ( _x , _y ) then
61119: LD_VAR 0 5
61123: PPUSH
61124: LD_VAR 0 6
61128: PPUSH
61129: CALL_OW 283
61133: IFFALSE 61173
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61135: LD_ADDR_VAR 0 4
61139: PUSH
61140: LD_VAR 0 4
61144: PPUSH
61145: LD_VAR 0 4
61149: PUSH
61150: LD_INT 1
61152: PLUS
61153: PPUSH
61154: LD_VAR 0 5
61158: PUSH
61159: LD_VAR 0 6
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PPUSH
61168: CALL_OW 1
61172: ST_TO_ADDR
// end ;
61173: GO 61097
61175: POP
61176: POP
61177: GO 61077
61179: POP
61180: POP
// end ;
61181: LD_VAR 0 4
61185: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
61194: PPUSH
61195: PPUSH
// if not units then
61196: LD_VAR 0 1
61200: NOT
61201: IFFALSE 61205
// exit ;
61203: GO 61729
// result := UnitFilter ( units , [ f_ok ] ) ;
61205: LD_ADDR_VAR 0 3
61209: PUSH
61210: LD_VAR 0 1
61214: PPUSH
61215: LD_INT 50
61217: PUSH
61218: EMPTY
61219: LIST
61220: PPUSH
61221: CALL_OW 72
61225: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61226: LD_ADDR_VAR 0 8
61230: PUSH
61231: LD_VAR 0 1
61235: PUSH
61236: LD_INT 1
61238: ARRAY
61239: PPUSH
61240: CALL_OW 255
61244: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61245: LD_ADDR_VAR 0 10
61249: PUSH
61250: LD_INT 29
61252: PUSH
61253: LD_INT 91
61255: PUSH
61256: LD_INT 49
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// if not result then
61264: LD_VAR 0 3
61268: NOT
61269: IFFALSE 61273
// exit ;
61271: GO 61729
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: LD_INT 81
61280: PUSH
61281: LD_VAR 0 8
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PPUSH
61290: CALL_OW 69
61294: ST_TO_ADDR
// for i in result do
61295: LD_ADDR_VAR 0 4
61299: PUSH
61300: LD_VAR 0 3
61304: PUSH
61305: FOR_IN
61306: IFFALSE 61727
// begin tag := GetTag ( i ) + 1 ;
61308: LD_ADDR_VAR 0 9
61312: PUSH
61313: LD_VAR 0 4
61317: PPUSH
61318: CALL_OW 110
61322: PUSH
61323: LD_INT 1
61325: PLUS
61326: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61327: LD_ADDR_VAR 0 7
61331: PUSH
61332: LD_VAR 0 4
61336: PPUSH
61337: CALL_OW 250
61341: PPUSH
61342: LD_VAR 0 4
61346: PPUSH
61347: CALL_OW 251
61351: PPUSH
61352: LD_INT 6
61354: PPUSH
61355: CALL 60928 0 3
61359: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61360: LD_VAR 0 4
61364: PPUSH
61365: CALL_OW 247
61369: PUSH
61370: LD_INT 2
61372: EQUAL
61373: PUSH
61374: LD_VAR 0 7
61378: AND
61379: PUSH
61380: LD_VAR 0 4
61384: PPUSH
61385: CALL_OW 264
61389: PUSH
61390: LD_VAR 0 10
61394: IN
61395: NOT
61396: AND
61397: IFFALSE 61436
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61399: LD_VAR 0 4
61403: PPUSH
61404: LD_VAR 0 7
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_INT 1
61415: ARRAY
61416: PPUSH
61417: LD_VAR 0 7
61421: PUSH
61422: LD_INT 1
61424: ARRAY
61425: PUSH
61426: LD_INT 2
61428: ARRAY
61429: PPUSH
61430: CALL_OW 116
61434: GO 61725
// if path > tag then
61436: LD_VAR 0 2
61440: PUSH
61441: LD_VAR 0 9
61445: GREATER
61446: IFFALSE 61654
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61448: LD_ADDR_VAR 0 6
61452: PUSH
61453: LD_VAR 0 5
61457: PPUSH
61458: LD_INT 91
61460: PUSH
61461: LD_VAR 0 4
61465: PUSH
61466: LD_INT 8
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: PPUSH
61474: CALL_OW 72
61478: ST_TO_ADDR
// if nearEnemy then
61479: LD_VAR 0 6
61483: IFFALSE 61552
// begin if GetWeapon ( i ) = ru_time_lapser then
61485: LD_VAR 0 4
61489: PPUSH
61490: CALL_OW 264
61494: PUSH
61495: LD_INT 49
61497: EQUAL
61498: IFFALSE 61526
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61500: LD_VAR 0 4
61504: PPUSH
61505: LD_VAR 0 6
61509: PPUSH
61510: LD_VAR 0 4
61514: PPUSH
61515: CALL_OW 74
61519: PPUSH
61520: CALL_OW 112
61524: GO 61550
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61526: LD_VAR 0 4
61530: PPUSH
61531: LD_VAR 0 6
61535: PPUSH
61536: LD_VAR 0 4
61540: PPUSH
61541: CALL_OW 74
61545: PPUSH
61546: CALL 62654 0 2
// end else
61550: GO 61652
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61552: LD_VAR 0 4
61556: PPUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_VAR 0 9
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: ARRAY
61571: PPUSH
61572: LD_VAR 0 2
61576: PUSH
61577: LD_VAR 0 9
61581: ARRAY
61582: PUSH
61583: LD_INT 2
61585: ARRAY
61586: PPUSH
61587: CALL_OW 297
61591: PUSH
61592: LD_INT 6
61594: GREATER
61595: IFFALSE 61638
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61597: LD_VAR 0 4
61601: PPUSH
61602: LD_VAR 0 2
61606: PUSH
61607: LD_VAR 0 9
61611: ARRAY
61612: PUSH
61613: LD_INT 1
61615: ARRAY
61616: PPUSH
61617: LD_VAR 0 2
61621: PUSH
61622: LD_VAR 0 9
61626: ARRAY
61627: PUSH
61628: LD_INT 2
61630: ARRAY
61631: PPUSH
61632: CALL_OW 114
61636: GO 61652
// SetTag ( i , tag ) ;
61638: LD_VAR 0 4
61642: PPUSH
61643: LD_VAR 0 9
61647: PPUSH
61648: CALL_OW 109
// end else
61652: GO 61725
// if enemy then
61654: LD_VAR 0 5
61658: IFFALSE 61725
// begin if GetWeapon ( i ) = ru_time_lapser then
61660: LD_VAR 0 4
61664: PPUSH
61665: CALL_OW 264
61669: PUSH
61670: LD_INT 49
61672: EQUAL
61673: IFFALSE 61701
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61675: LD_VAR 0 4
61679: PPUSH
61680: LD_VAR 0 5
61684: PPUSH
61685: LD_VAR 0 4
61689: PPUSH
61690: CALL_OW 74
61694: PPUSH
61695: CALL_OW 112
61699: GO 61725
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61701: LD_VAR 0 4
61705: PPUSH
61706: LD_VAR 0 5
61710: PPUSH
61711: LD_VAR 0 4
61715: PPUSH
61716: CALL_OW 74
61720: PPUSH
61721: CALL 62654 0 2
// end ; end ;
61725: GO 61305
61727: POP
61728: POP
// end ;
61729: LD_VAR 0 3
61733: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61734: LD_INT 0
61736: PPUSH
61737: PPUSH
61738: PPUSH
// if not unit or IsInUnit ( unit ) then
61739: LD_VAR 0 1
61743: NOT
61744: PUSH
61745: LD_VAR 0 1
61749: PPUSH
61750: CALL_OW 310
61754: OR
61755: IFFALSE 61759
// exit ;
61757: GO 61850
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61759: LD_ADDR_VAR 0 4
61763: PUSH
61764: LD_VAR 0 1
61768: PPUSH
61769: CALL_OW 250
61773: PPUSH
61774: LD_VAR 0 2
61778: PPUSH
61779: LD_INT 1
61781: PPUSH
61782: CALL_OW 272
61786: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61787: LD_ADDR_VAR 0 5
61791: PUSH
61792: LD_VAR 0 1
61796: PPUSH
61797: CALL_OW 251
61801: PPUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: LD_INT 1
61809: PPUSH
61810: CALL_OW 273
61814: ST_TO_ADDR
// if ValidHex ( x , y ) then
61815: LD_VAR 0 4
61819: PPUSH
61820: LD_VAR 0 5
61824: PPUSH
61825: CALL_OW 488
61829: IFFALSE 61850
// ComTurnXY ( unit , x , y ) ;
61831: LD_VAR 0 1
61835: PPUSH
61836: LD_VAR 0 4
61840: PPUSH
61841: LD_VAR 0 5
61845: PPUSH
61846: CALL_OW 118
// end ;
61850: LD_VAR 0 3
61854: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61855: LD_INT 0
61857: PPUSH
61858: PPUSH
// result := false ;
61859: LD_ADDR_VAR 0 3
61863: PUSH
61864: LD_INT 0
61866: ST_TO_ADDR
// if not units then
61867: LD_VAR 0 2
61871: NOT
61872: IFFALSE 61876
// exit ;
61874: GO 61921
// for i in units do
61876: LD_ADDR_VAR 0 4
61880: PUSH
61881: LD_VAR 0 2
61885: PUSH
61886: FOR_IN
61887: IFFALSE 61919
// if See ( side , i ) then
61889: LD_VAR 0 1
61893: PPUSH
61894: LD_VAR 0 4
61898: PPUSH
61899: CALL_OW 292
61903: IFFALSE 61917
// begin result := true ;
61905: LD_ADDR_VAR 0 3
61909: PUSH
61910: LD_INT 1
61912: ST_TO_ADDR
// exit ;
61913: POP
61914: POP
61915: GO 61921
// end ;
61917: GO 61886
61919: POP
61920: POP
// end ;
61921: LD_VAR 0 3
61925: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61926: LD_INT 0
61928: PPUSH
61929: PPUSH
61930: PPUSH
61931: PPUSH
// if not unit or not points then
61932: LD_VAR 0 1
61936: NOT
61937: PUSH
61938: LD_VAR 0 2
61942: NOT
61943: OR
61944: IFFALSE 61948
// exit ;
61946: GO 62038
// dist := 99999 ;
61948: LD_ADDR_VAR 0 5
61952: PUSH
61953: LD_INT 99999
61955: ST_TO_ADDR
// for i in points do
61956: LD_ADDR_VAR 0 4
61960: PUSH
61961: LD_VAR 0 2
61965: PUSH
61966: FOR_IN
61967: IFFALSE 62036
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61969: LD_ADDR_VAR 0 6
61973: PUSH
61974: LD_VAR 0 1
61978: PPUSH
61979: LD_VAR 0 4
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: PPUSH
61988: LD_VAR 0 4
61992: PUSH
61993: LD_INT 2
61995: ARRAY
61996: PPUSH
61997: CALL_OW 297
62001: ST_TO_ADDR
// if tmpDist < dist then
62002: LD_VAR 0 6
62006: PUSH
62007: LD_VAR 0 5
62011: LESS
62012: IFFALSE 62034
// begin result := i ;
62014: LD_ADDR_VAR 0 3
62018: PUSH
62019: LD_VAR 0 4
62023: ST_TO_ADDR
// dist := tmpDist ;
62024: LD_ADDR_VAR 0 5
62028: PUSH
62029: LD_VAR 0 6
62033: ST_TO_ADDR
// end ; end ;
62034: GO 61966
62036: POP
62037: POP
// end ;
62038: LD_VAR 0 3
62042: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62043: LD_INT 0
62045: PPUSH
// uc_side := side ;
62046: LD_ADDR_OWVAR 20
62050: PUSH
62051: LD_VAR 0 1
62055: ST_TO_ADDR
// uc_nation := 3 ;
62056: LD_ADDR_OWVAR 21
62060: PUSH
62061: LD_INT 3
62063: ST_TO_ADDR
// vc_chassis := 25 ;
62064: LD_ADDR_OWVAR 37
62068: PUSH
62069: LD_INT 25
62071: ST_TO_ADDR
// vc_engine := engine_siberite ;
62072: LD_ADDR_OWVAR 39
62076: PUSH
62077: LD_INT 3
62079: ST_TO_ADDR
// vc_control := control_computer ;
62080: LD_ADDR_OWVAR 38
62084: PUSH
62085: LD_INT 3
62087: ST_TO_ADDR
// vc_weapon := 59 ;
62088: LD_ADDR_OWVAR 40
62092: PUSH
62093: LD_INT 59
62095: ST_TO_ADDR
// result := CreateVehicle ;
62096: LD_ADDR_VAR 0 5
62100: PUSH
62101: CALL_OW 45
62105: ST_TO_ADDR
// SetDir ( result , d ) ;
62106: LD_VAR 0 5
62110: PPUSH
62111: LD_VAR 0 4
62115: PPUSH
62116: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62120: LD_VAR 0 5
62124: PPUSH
62125: LD_VAR 0 2
62129: PPUSH
62130: LD_VAR 0 3
62134: PPUSH
62135: LD_INT 0
62137: PPUSH
62138: CALL_OW 48
// end ;
62142: LD_VAR 0 5
62146: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62147: LD_INT 0
62149: PPUSH
62150: PPUSH
62151: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62152: LD_ADDR_VAR 0 2
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62175: LD_VAR 0 1
62179: NOT
62180: PUSH
62181: LD_VAR 0 1
62185: PPUSH
62186: CALL_OW 264
62190: PUSH
62191: LD_INT 12
62193: PUSH
62194: LD_INT 51
62196: PUSH
62197: LD_INT 32
62199: PUSH
62200: LD_INT 89
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: IN
62209: NOT
62210: OR
62211: IFFALSE 62215
// exit ;
62213: GO 62313
// for i := 1 to 3 do
62215: LD_ADDR_VAR 0 3
62219: PUSH
62220: DOUBLE
62221: LD_INT 1
62223: DEC
62224: ST_TO_ADDR
62225: LD_INT 3
62227: PUSH
62228: FOR_TO
62229: IFFALSE 62311
// begin tmp := GetCargo ( cargo , i ) ;
62231: LD_ADDR_VAR 0 4
62235: PUSH
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_VAR 0 3
62245: PPUSH
62246: CALL_OW 289
62250: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62251: LD_ADDR_VAR 0 2
62255: PUSH
62256: LD_VAR 0 2
62260: PPUSH
62261: LD_VAR 0 3
62265: PPUSH
62266: LD_VAR 0 4
62270: PPUSH
62271: CALL_OW 1
62275: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62276: LD_ADDR_VAR 0 2
62280: PUSH
62281: LD_VAR 0 2
62285: PPUSH
62286: LD_INT 4
62288: PPUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_INT 4
62296: ARRAY
62297: PUSH
62298: LD_VAR 0 4
62302: PLUS
62303: PPUSH
62304: CALL_OW 1
62308: ST_TO_ADDR
// end ;
62309: GO 62228
62311: POP
62312: POP
// end ;
62313: LD_VAR 0 2
62317: RET
// export function Length ( array ) ; begin
62318: LD_INT 0
62320: PPUSH
// result := array + 0 ;
62321: LD_ADDR_VAR 0 2
62325: PUSH
62326: LD_VAR 0 1
62330: PUSH
62331: LD_INT 0
62333: PLUS
62334: ST_TO_ADDR
// end ;
62335: LD_VAR 0 2
62339: RET
// export function PrepareArray ( array ) ; begin
62340: LD_INT 0
62342: PPUSH
// result := array diff 0 ;
62343: LD_ADDR_VAR 0 2
62347: PUSH
62348: LD_VAR 0 1
62352: PUSH
62353: LD_INT 0
62355: DIFF
62356: ST_TO_ADDR
// if not result [ 1 ] then
62357: LD_VAR 0 2
62361: PUSH
62362: LD_INT 1
62364: ARRAY
62365: NOT
62366: IFFALSE 62386
// result := Delete ( result , 1 ) ;
62368: LD_ADDR_VAR 0 2
62372: PUSH
62373: LD_VAR 0 2
62377: PPUSH
62378: LD_INT 1
62380: PPUSH
62381: CALL_OW 3
62385: ST_TO_ADDR
// end ;
62386: LD_VAR 0 2
62390: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
// sibRocketRange := 25 ;
62397: LD_ADDR_VAR 0 6
62401: PUSH
62402: LD_INT 25
62404: ST_TO_ADDR
// result := false ;
62405: LD_ADDR_VAR 0 4
62409: PUSH
62410: LD_INT 0
62412: ST_TO_ADDR
// for i := 0 to 5 do
62413: LD_ADDR_VAR 0 5
62417: PUSH
62418: DOUBLE
62419: LD_INT 0
62421: DEC
62422: ST_TO_ADDR
62423: LD_INT 5
62425: PUSH
62426: FOR_TO
62427: IFFALSE 62494
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62429: LD_VAR 0 1
62433: PPUSH
62434: LD_VAR 0 5
62438: PPUSH
62439: LD_VAR 0 6
62443: PPUSH
62444: CALL_OW 272
62448: PPUSH
62449: LD_VAR 0 2
62453: PPUSH
62454: LD_VAR 0 5
62458: PPUSH
62459: LD_VAR 0 6
62463: PPUSH
62464: CALL_OW 273
62468: PPUSH
62469: LD_VAR 0 3
62473: PPUSH
62474: CALL_OW 309
62478: IFFALSE 62492
// begin result := true ;
62480: LD_ADDR_VAR 0 4
62484: PUSH
62485: LD_INT 1
62487: ST_TO_ADDR
// exit ;
62488: POP
62489: POP
62490: GO 62496
// end ;
62492: GO 62426
62494: POP
62495: POP
// end ;
62496: LD_VAR 0 4
62500: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62501: LD_INT 0
62503: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62504: LD_VAR 0 1
62508: PPUSH
62509: LD_VAR 0 2
62513: PPUSH
62514: LD_INT 0
62516: PPUSH
62517: LD_INT 0
62519: PPUSH
62520: LD_INT 1
62522: PPUSH
62523: LD_INT 0
62525: PPUSH
62526: CALL_OW 587
// end ;
62530: LD_VAR 0 3
62534: RET
// export function CenterOnNow ( unit ) ; begin
62535: LD_INT 0
62537: PPUSH
// result := IsInUnit ( unit ) ;
62538: LD_ADDR_VAR 0 2
62542: PUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: CALL_OW 310
62552: ST_TO_ADDR
// if not result then
62553: LD_VAR 0 2
62557: NOT
62558: IFFALSE 62570
// result := unit ;
62560: LD_ADDR_VAR 0 2
62564: PUSH
62565: LD_VAR 0 1
62569: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL_OW 87
// end ;
62579: LD_VAR 0 2
62583: RET
// export function ComMoveHex ( unit , hex ) ; begin
62584: LD_INT 0
62586: PPUSH
// if not hex then
62587: LD_VAR 0 2
62591: NOT
62592: IFFALSE 62596
// exit ;
62594: GO 62649
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 1
62603: ARRAY
62604: PPUSH
62605: LD_VAR 0 2
62609: PUSH
62610: LD_INT 2
62612: ARRAY
62613: PPUSH
62614: CALL_OW 428
62618: IFFALSE 62622
// exit ;
62620: GO 62649
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62622: LD_VAR 0 1
62626: PPUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_INT 1
62634: ARRAY
62635: PPUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_INT 2
62643: ARRAY
62644: PPUSH
62645: CALL_OW 111
// end ;
62649: LD_VAR 0 3
62653: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62654: LD_INT 0
62656: PPUSH
62657: PPUSH
62658: PPUSH
// if not unit or not enemy then
62659: LD_VAR 0 1
62663: NOT
62664: PUSH
62665: LD_VAR 0 2
62669: NOT
62670: OR
62671: IFFALSE 62675
// exit ;
62673: GO 62799
// x := GetX ( enemy ) ;
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: LD_VAR 0 2
62684: PPUSH
62685: CALL_OW 250
62689: ST_TO_ADDR
// y := GetY ( enemy ) ;
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: CALL_OW 251
62704: ST_TO_ADDR
// if ValidHex ( x , y ) then
62705: LD_VAR 0 4
62709: PPUSH
62710: LD_VAR 0 5
62714: PPUSH
62715: CALL_OW 488
62719: IFFALSE 62799
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62721: LD_VAR 0 2
62725: PPUSH
62726: CALL_OW 247
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: IN
62741: PUSH
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 255
62751: PPUSH
62752: LD_VAR 0 2
62756: PPUSH
62757: CALL_OW 292
62761: OR
62762: IFFALSE 62780
// ComAttackUnit ( unit , enemy ) else
62764: LD_VAR 0 1
62768: PPUSH
62769: LD_VAR 0 2
62773: PPUSH
62774: CALL_OW 115
62778: GO 62799
// ComAgressiveMove ( unit , x , y ) ;
62780: LD_VAR 0 1
62784: PPUSH
62785: LD_VAR 0 4
62789: PPUSH
62790: LD_VAR 0 5
62794: PPUSH
62795: CALL_OW 114
// end ;
62799: LD_VAR 0 3
62803: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62804: LD_INT 0
62806: PPUSH
62807: PPUSH
62808: PPUSH
// list := AreaToList ( area , 0 ) ;
62809: LD_ADDR_VAR 0 5
62813: PUSH
62814: LD_VAR 0 1
62818: PPUSH
62819: LD_INT 0
62821: PPUSH
62822: CALL_OW 517
62826: ST_TO_ADDR
// if not list then
62827: LD_VAR 0 5
62831: NOT
62832: IFFALSE 62836
// exit ;
62834: GO 62966
// if all then
62836: LD_VAR 0 2
62840: IFFALSE 62928
// begin for i := 1 to list [ 1 ] do
62842: LD_ADDR_VAR 0 4
62846: PUSH
62847: DOUBLE
62848: LD_INT 1
62850: DEC
62851: ST_TO_ADDR
62852: LD_VAR 0 5
62856: PUSH
62857: LD_INT 1
62859: ARRAY
62860: PUSH
62861: FOR_TO
62862: IFFALSE 62924
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62864: LD_ADDR_VAR 0 3
62868: PUSH
62869: LD_VAR 0 3
62873: PPUSH
62874: LD_VAR 0 3
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: PPUSH
62883: LD_VAR 0 5
62887: PUSH
62888: LD_INT 1
62890: ARRAY
62891: PUSH
62892: LD_VAR 0 4
62896: ARRAY
62897: PUSH
62898: LD_VAR 0 5
62902: PUSH
62903: LD_INT 2
62905: ARRAY
62906: PUSH
62907: LD_VAR 0 4
62911: ARRAY
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PPUSH
62917: CALL_OW 1
62921: ST_TO_ADDR
62922: GO 62861
62924: POP
62925: POP
// exit ;
62926: GO 62966
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62928: LD_ADDR_VAR 0 3
62932: PUSH
62933: LD_VAR 0 5
62937: PUSH
62938: LD_INT 1
62940: ARRAY
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: PUSH
62946: LD_VAR 0 5
62950: PUSH
62951: LD_INT 2
62953: ARRAY
62954: PUSH
62955: LD_INT 1
62957: ARRAY
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: ST_TO_ADDR
// end ;
62966: LD_VAR 0 3
62970: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
// list := AreaToList ( area , 0 ) ;
62975: LD_ADDR_VAR 0 4
62979: PUSH
62980: LD_VAR 0 1
62984: PPUSH
62985: LD_INT 0
62987: PPUSH
62988: CALL_OW 517
62992: ST_TO_ADDR
// if not list then
62993: LD_VAR 0 4
62997: NOT
62998: IFFALSE 63002
// exit ;
63000: GO 63043
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_VAR 0 4
63011: PUSH
63012: LD_INT 1
63014: ARRAY
63015: PUSH
63016: LD_INT 1
63018: ARRAY
63019: PUSH
63020: LD_VAR 0 4
63024: PUSH
63025: LD_INT 2
63027: ARRAY
63028: PUSH
63029: LD_INT 1
63031: ARRAY
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: ST_TO_ADDR
// end ;
63043: LD_VAR 0 3
63047: RET
// export function First ( array ) ; begin
63048: LD_INT 0
63050: PPUSH
// if not array then
63051: LD_VAR 0 1
63055: NOT
63056: IFFALSE 63060
// exit ;
63058: GO 63074
// result := array [ 1 ] ;
63060: LD_ADDR_VAR 0 2
63064: PUSH
63065: LD_VAR 0 1
63069: PUSH
63070: LD_INT 1
63072: ARRAY
63073: ST_TO_ADDR
// end ;
63074: LD_VAR 0 2
63078: RET
// export function Last ( array ) ; begin
63079: LD_INT 0
63081: PPUSH
// if not array then
63082: LD_VAR 0 1
63086: NOT
63087: IFFALSE 63091
// exit ;
63089: GO 63107
// result := array [ array ] ;
63091: LD_ADDR_VAR 0 2
63095: PUSH
63096: LD_VAR 0 1
63100: PUSH
63101: LD_VAR 0 1
63105: ARRAY
63106: ST_TO_ADDR
// end ;
63107: LD_VAR 0 2
63111: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63112: LD_INT 0
63114: PPUSH
63115: PPUSH
// result := [ ] ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: EMPTY
63122: ST_TO_ADDR
// if not array then
63123: LD_VAR 0 1
63127: NOT
63128: IFFALSE 63132
// exit ;
63130: GO 63244
// for i := 1 to array do
63132: LD_ADDR_VAR 0 6
63136: PUSH
63137: DOUBLE
63138: LD_INT 1
63140: DEC
63141: ST_TO_ADDR
63142: LD_VAR 0 1
63146: PUSH
63147: FOR_TO
63148: IFFALSE 63242
// if array [ i ] [ index ] = value then
63150: LD_VAR 0 1
63154: PUSH
63155: LD_VAR 0 6
63159: ARRAY
63160: PUSH
63161: LD_VAR 0 2
63165: ARRAY
63166: PUSH
63167: LD_VAR 0 3
63171: EQUAL
63172: IFFALSE 63240
// begin if indexColumn then
63174: LD_VAR 0 4
63178: IFFALSE 63214
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63180: LD_ADDR_VAR 0 5
63184: PUSH
63185: LD_VAR 0 5
63189: PPUSH
63190: LD_VAR 0 1
63194: PUSH
63195: LD_VAR 0 6
63199: ARRAY
63200: PUSH
63201: LD_VAR 0 4
63205: ARRAY
63206: PPUSH
63207: CALL 58582 0 2
63211: ST_TO_ADDR
63212: GO 63240
// result := Join ( result , array [ i ] ) ;
63214: LD_ADDR_VAR 0 5
63218: PUSH
63219: LD_VAR 0 5
63223: PPUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_VAR 0 6
63233: ARRAY
63234: PPUSH
63235: CALL 58582 0 2
63239: ST_TO_ADDR
// end ;
63240: GO 63147
63242: POP
63243: POP
// end ;
63244: LD_VAR 0 5
63248: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63249: LD_INT 0
63251: PPUSH
63252: PPUSH
63253: PPUSH
// if btype = b_depot then
63254: LD_VAR 0 2
63258: PUSH
63259: LD_INT 0
63261: EQUAL
63262: IFFALSE 63274
// begin result := true ;
63264: LD_ADDR_VAR 0 3
63268: PUSH
63269: LD_INT 1
63271: ST_TO_ADDR
// exit ;
63272: GO 63390
// end ; pom := GetBase ( depot ) ;
63274: LD_ADDR_VAR 0 4
63278: PUSH
63279: LD_VAR 0 1
63283: PPUSH
63284: CALL_OW 274
63288: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63289: LD_ADDR_VAR 0 5
63293: PUSH
63294: LD_VAR 0 2
63298: PPUSH
63299: LD_VAR 0 1
63303: PPUSH
63304: CALL_OW 248
63308: PPUSH
63309: CALL_OW 450
63313: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63314: LD_ADDR_VAR 0 3
63318: PUSH
63319: LD_VAR 0 4
63323: PPUSH
63324: LD_INT 1
63326: PPUSH
63327: CALL_OW 275
63331: PUSH
63332: LD_VAR 0 5
63336: PUSH
63337: LD_INT 1
63339: ARRAY
63340: GREATEREQUAL
63341: PUSH
63342: LD_VAR 0 4
63346: PPUSH
63347: LD_INT 2
63349: PPUSH
63350: CALL_OW 275
63354: PUSH
63355: LD_VAR 0 5
63359: PUSH
63360: LD_INT 2
63362: ARRAY
63363: GREATEREQUAL
63364: AND
63365: PUSH
63366: LD_VAR 0 4
63370: PPUSH
63371: LD_INT 3
63373: PPUSH
63374: CALL_OW 275
63378: PUSH
63379: LD_VAR 0 5
63383: PUSH
63384: LD_INT 3
63386: ARRAY
63387: GREATEREQUAL
63388: AND
63389: ST_TO_ADDR
// end ;
63390: LD_VAR 0 3
63394: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63395: LD_INT 0
63397: PPUSH
// if not vehicles or not parkingPoint then
63398: LD_VAR 0 1
63402: NOT
63403: PUSH
63404: LD_VAR 0 2
63408: NOT
63409: OR
63410: IFFALSE 63414
// exit ;
63412: GO 63512
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63414: LD_ADDR_VAR 0 1
63418: PUSH
63419: LD_VAR 0 1
63423: PPUSH
63424: LD_INT 50
63426: PUSH
63427: EMPTY
63428: LIST
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: LD_INT 92
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: LD_INT 1
63443: ARRAY
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 2
63452: ARRAY
63453: PUSH
63454: LD_INT 8
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PPUSH
63471: CALL_OW 72
63475: ST_TO_ADDR
// if not vehicles then
63476: LD_VAR 0 1
63480: NOT
63481: IFFALSE 63485
// exit ;
63483: GO 63512
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63485: LD_VAR 0 1
63489: PPUSH
63490: LD_VAR 0 2
63494: PUSH
63495: LD_INT 1
63497: ARRAY
63498: PPUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 2
63506: ARRAY
63507: PPUSH
63508: CALL_OW 111
// end ;
63512: LD_VAR 0 3
63516: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63517: LD_INT 0
63519: PPUSH
63520: PPUSH
63521: PPUSH
// if not side or not area then
63522: LD_VAR 0 1
63526: NOT
63527: PUSH
63528: LD_VAR 0 2
63532: NOT
63533: OR
63534: IFFALSE 63538
// exit ;
63536: GO 63657
// tmp := AreaToList ( area , 0 ) ;
63538: LD_ADDR_VAR 0 5
63542: PUSH
63543: LD_VAR 0 2
63547: PPUSH
63548: LD_INT 0
63550: PPUSH
63551: CALL_OW 517
63555: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63556: LD_ADDR_VAR 0 4
63560: PUSH
63561: DOUBLE
63562: LD_INT 1
63564: DEC
63565: ST_TO_ADDR
63566: LD_VAR 0 5
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: PUSH
63575: FOR_TO
63576: IFFALSE 63655
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63578: LD_VAR 0 5
63582: PUSH
63583: LD_INT 1
63585: ARRAY
63586: PUSH
63587: LD_VAR 0 4
63591: ARRAY
63592: PPUSH
63593: LD_VAR 0 5
63597: PUSH
63598: LD_INT 2
63600: ARRAY
63601: PUSH
63602: LD_VAR 0 4
63606: ARRAY
63607: PPUSH
63608: CALL_OW 351
63612: IFFALSE 63653
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63614: LD_VAR 0 5
63618: PUSH
63619: LD_INT 1
63621: ARRAY
63622: PUSH
63623: LD_VAR 0 4
63627: ARRAY
63628: PPUSH
63629: LD_VAR 0 5
63633: PUSH
63634: LD_INT 2
63636: ARRAY
63637: PUSH
63638: LD_VAR 0 4
63642: ARRAY
63643: PPUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: CALL_OW 244
// end ;
63653: GO 63575
63655: POP
63656: POP
// end ;
63657: LD_VAR 0 3
63661: RET
