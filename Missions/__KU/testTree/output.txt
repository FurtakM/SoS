// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// every 0 0$1 trigger GetLives ( JMM ) < 500 and Test1 ( JMM ) do
   5: LD_INT 84
   7: PPUSH
   8: CALL_OW 256
  12: PUSH
  13: LD_INT 500
  15: LESS
  16: IFFALSE 27
  18: PUSH
  19: LD_INT 84
  21: PPUSH
  22: CALL 34 0 1
  26: AND
  27: IFFALSE 33
  29: GO 31
  31: DISABLE
// begin enable ;
  32: ENABLE
// end ;
  33: END
// export function Test1 ( unit ) ; begin
  34: LD_INT 0
  36: PPUSH
// display_strings := Test ;
  37: LD_ADDR_OWVAR 47
  41: PUSH
  42: LD_STRING Test
  44: ST_TO_ADDR
// result := See ( 1 , unit ) ;
  45: LD_ADDR_VAR 0 2
  49: PUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_VAR 0 1
  57: PPUSH
  58: CALL_OW 292
  62: ST_TO_ADDR
// end ; end_of_file
  63: LD_VAR 0 2
  67: RET
// export globalGameSaveCounter ; every 0 0$1 do
  68: GO 70
  70: DISABLE
// begin enable ;
  71: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  72: LD_STRING updateTimer(
  74: PUSH
  75: LD_OWVAR 1
  79: STR
  80: PUSH
  81: LD_STRING );
  83: STR
  84: PPUSH
  85: CALL_OW 559
// end ;
  89: END
// every 0 0$1 do
  90: GO 92
  92: DISABLE
// begin globalGameSaveCounter := 0 ;
  93: LD_ADDR_EXP 1
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 101: LD_STRING setGameSaveCounter(0)
 103: PPUSH
 104: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 108: LD_STRING initStreamRollete();
 110: PPUSH
 111: CALL_OW 559
// InitStreamMode ;
 115: CALL 1467 0 0
// DefineStreamItems ( false ) ;
 119: LD_INT 0
 121: PPUSH
 122: CALL 1931 0 1
// end ;
 126: END
// export function SOS_MapStart ( ) ; begin
 127: LD_INT 0
 129: PPUSH
// if streamModeActive then
 130: LD_EXP 2
 134: IFFALSE 143
// DefineStreamItems ( true ) ;
 136: LD_INT 1
 138: PPUSH
 139: CALL 1931 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
 143: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
 145: PPUSH
 146: CALL_OW 559
// UpdateLuaVariables ( ) ;
 150: CALL 167 0 0
// UpdateFactoryWaypoints ( ) ;
 154: CALL 15053 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 158: CALL 15305 0 0
// end ;
 162: LD_VAR 0 1
 166: RET
// function UpdateLuaVariables ( ) ; begin
 167: LD_INT 0
 169: PPUSH
// if globalGameSaveCounter then
 170: LD_EXP 1
 174: IFFALSE 208
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 176: LD_ADDR_EXP 1
 180: PUSH
 181: LD_EXP 1
 185: PPUSH
 186: CALL 62364 0 1
 190: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 191: LD_STRING setGameSaveCounter(
 193: PUSH
 194: LD_EXP 1
 198: STR
 199: PUSH
 200: LD_STRING )
 202: STR
 203: PPUSH
 204: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 208: LD_STRING setGameDifficulty(
 210: PUSH
 211: LD_OWVAR 67
 215: STR
 216: PUSH
 217: LD_STRING )
 219: STR
 220: PPUSH
 221: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 225: LD_STRING displayDifficulty(
 227: PUSH
 228: LD_OWVAR 67
 232: STR
 233: PUSH
 234: LD_STRING )
 236: STR
 237: PPUSH
 238: CALL_OW 559
// end ;
 242: LD_VAR 0 1
 246: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 247: LD_INT 0
 249: PPUSH
// if p2 = stream_mode then
 250: LD_VAR 0 2
 254: PUSH
 255: LD_INT 100
 257: EQUAL
 258: IFFALSE 1261
// begin if not StreamModeActive then
 260: LD_EXP 2
 264: NOT
 265: IFFALSE 275
// StreamModeActive := true ;
 267: LD_ADDR_EXP 2
 271: PUSH
 272: LD_INT 1
 274: ST_TO_ADDR
// if p3 = 0 then
 275: LD_VAR 0 3
 279: PUSH
 280: LD_INT 0
 282: EQUAL
 283: IFFALSE 289
// InitStreamMode ;
 285: CALL 1467 0 0
// if p3 = 1 then
 289: LD_VAR 0 3
 293: PUSH
 294: LD_INT 1
 296: EQUAL
 297: IFFALSE 307
// sRocket := true ;
 299: LD_ADDR_EXP 7
 303: PUSH
 304: LD_INT 1
 306: ST_TO_ADDR
// if p3 = 2 then
 307: LD_VAR 0 3
 311: PUSH
 312: LD_INT 2
 314: EQUAL
 315: IFFALSE 325
// sSpeed := true ;
 317: LD_ADDR_EXP 6
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// if p3 = 3 then
 325: LD_VAR 0 3
 329: PUSH
 330: LD_INT 3
 332: EQUAL
 333: IFFALSE 343
// sEngine := true ;
 335: LD_ADDR_EXP 8
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// if p3 = 4 then
 343: LD_VAR 0 3
 347: PUSH
 348: LD_INT 4
 350: EQUAL
 351: IFFALSE 361
// sSpec := true ;
 353: LD_ADDR_EXP 5
 357: PUSH
 358: LD_INT 1
 360: ST_TO_ADDR
// if p3 = 5 then
 361: LD_VAR 0 3
 365: PUSH
 366: LD_INT 5
 368: EQUAL
 369: IFFALSE 379
// sLevel := true ;
 371: LD_ADDR_EXP 9
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// if p3 = 6 then
 379: LD_VAR 0 3
 383: PUSH
 384: LD_INT 6
 386: EQUAL
 387: IFFALSE 397
// sArmoury := true ;
 389: LD_ADDR_EXP 10
 393: PUSH
 394: LD_INT 1
 396: ST_TO_ADDR
// if p3 = 7 then
 397: LD_VAR 0 3
 401: PUSH
 402: LD_INT 7
 404: EQUAL
 405: IFFALSE 415
// sRadar := true ;
 407: LD_ADDR_EXP 11
 411: PUSH
 412: LD_INT 1
 414: ST_TO_ADDR
// if p3 = 8 then
 415: LD_VAR 0 3
 419: PUSH
 420: LD_INT 8
 422: EQUAL
 423: IFFALSE 433
// sBunker := true ;
 425: LD_ADDR_EXP 12
 429: PUSH
 430: LD_INT 1
 432: ST_TO_ADDR
// if p3 = 9 then
 433: LD_VAR 0 3
 437: PUSH
 438: LD_INT 9
 440: EQUAL
 441: IFFALSE 451
// sHack := true ;
 443: LD_ADDR_EXP 13
 447: PUSH
 448: LD_INT 1
 450: ST_TO_ADDR
// if p3 = 10 then
 451: LD_VAR 0 3
 455: PUSH
 456: LD_INT 10
 458: EQUAL
 459: IFFALSE 469
// sFire := true ;
 461: LD_ADDR_EXP 14
 465: PUSH
 466: LD_INT 1
 468: ST_TO_ADDR
// if p3 = 11 then
 469: LD_VAR 0 3
 473: PUSH
 474: LD_INT 11
 476: EQUAL
 477: IFFALSE 487
// sRefresh := true ;
 479: LD_ADDR_EXP 15
 483: PUSH
 484: LD_INT 1
 486: ST_TO_ADDR
// if p3 = 12 then
 487: LD_VAR 0 3
 491: PUSH
 492: LD_INT 12
 494: EQUAL
 495: IFFALSE 505
// sExp := true ;
 497: LD_ADDR_EXP 16
 501: PUSH
 502: LD_INT 1
 504: ST_TO_ADDR
// if p3 = 13 then
 505: LD_VAR 0 3
 509: PUSH
 510: LD_INT 13
 512: EQUAL
 513: IFFALSE 523
// sDepot := true ;
 515: LD_ADDR_EXP 17
 519: PUSH
 520: LD_INT 1
 522: ST_TO_ADDR
// if p3 = 14 then
 523: LD_VAR 0 3
 527: PUSH
 528: LD_INT 14
 530: EQUAL
 531: IFFALSE 541
// sFlag := true ;
 533: LD_ADDR_EXP 18
 537: PUSH
 538: LD_INT 1
 540: ST_TO_ADDR
// if p3 = 15 then
 541: LD_VAR 0 3
 545: PUSH
 546: LD_INT 15
 548: EQUAL
 549: IFFALSE 559
// sKamikadze := true ;
 551: LD_ADDR_EXP 26
 555: PUSH
 556: LD_INT 1
 558: ST_TO_ADDR
// if p3 = 16 then
 559: LD_VAR 0 3
 563: PUSH
 564: LD_INT 16
 566: EQUAL
 567: IFFALSE 577
// sTroll := true ;
 569: LD_ADDR_EXP 27
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// if p3 = 17 then
 577: LD_VAR 0 3
 581: PUSH
 582: LD_INT 17
 584: EQUAL
 585: IFFALSE 595
// sSlow := true ;
 587: LD_ADDR_EXP 28
 591: PUSH
 592: LD_INT 1
 594: ST_TO_ADDR
// if p3 = 18 then
 595: LD_VAR 0 3
 599: PUSH
 600: LD_INT 18
 602: EQUAL
 603: IFFALSE 613
// sLack := true ;
 605: LD_ADDR_EXP 29
 609: PUSH
 610: LD_INT 1
 612: ST_TO_ADDR
// if p3 = 19 then
 613: LD_VAR 0 3
 617: PUSH
 618: LD_INT 19
 620: EQUAL
 621: IFFALSE 631
// sTank := true ;
 623: LD_ADDR_EXP 31
 627: PUSH
 628: LD_INT 1
 630: ST_TO_ADDR
// if p3 = 20 then
 631: LD_VAR 0 3
 635: PUSH
 636: LD_INT 20
 638: EQUAL
 639: IFFALSE 649
// sRemote := true ;
 641: LD_ADDR_EXP 32
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// if p3 = 21 then
 649: LD_VAR 0 3
 653: PUSH
 654: LD_INT 21
 656: EQUAL
 657: IFFALSE 667
// sPowell := true ;
 659: LD_ADDR_EXP 33
 663: PUSH
 664: LD_INT 1
 666: ST_TO_ADDR
// if p3 = 22 then
 667: LD_VAR 0 3
 671: PUSH
 672: LD_INT 22
 674: EQUAL
 675: IFFALSE 685
// sTeleport := true ;
 677: LD_ADDR_EXP 36
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// if p3 = 23 then
 685: LD_VAR 0 3
 689: PUSH
 690: LD_INT 23
 692: EQUAL
 693: IFFALSE 703
// sOilTower := true ;
 695: LD_ADDR_EXP 38
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// if p3 = 24 then
 703: LD_VAR 0 3
 707: PUSH
 708: LD_INT 24
 710: EQUAL
 711: IFFALSE 721
// sShovel := true ;
 713: LD_ADDR_EXP 39
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// if p3 = 25 then
 721: LD_VAR 0 3
 725: PUSH
 726: LD_INT 25
 728: EQUAL
 729: IFFALSE 739
// sSheik := true ;
 731: LD_ADDR_EXP 40
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// if p3 = 26 then
 739: LD_VAR 0 3
 743: PUSH
 744: LD_INT 26
 746: EQUAL
 747: IFFALSE 757
// sEarthquake := true ;
 749: LD_ADDR_EXP 42
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// if p3 = 27 then
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 27
 764: EQUAL
 765: IFFALSE 775
// sAI := true ;
 767: LD_ADDR_EXP 43
 771: PUSH
 772: LD_INT 1
 774: ST_TO_ADDR
// if p3 = 28 then
 775: LD_VAR 0 3
 779: PUSH
 780: LD_INT 28
 782: EQUAL
 783: IFFALSE 793
// sCargo := true ;
 785: LD_ADDR_EXP 46
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// if p3 = 29 then
 793: LD_VAR 0 3
 797: PUSH
 798: LD_INT 29
 800: EQUAL
 801: IFFALSE 811
// sDLaser := true ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// if p3 = 30 then
 811: LD_VAR 0 3
 815: PUSH
 816: LD_INT 30
 818: EQUAL
 819: IFFALSE 829
// sExchange := true ;
 821: LD_ADDR_EXP 48
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// if p3 = 31 then
 829: LD_VAR 0 3
 833: PUSH
 834: LD_INT 31
 836: EQUAL
 837: IFFALSE 847
// sFac := true ;
 839: LD_ADDR_EXP 49
 843: PUSH
 844: LD_INT 1
 846: ST_TO_ADDR
// if p3 = 32 then
 847: LD_VAR 0 3
 851: PUSH
 852: LD_INT 32
 854: EQUAL
 855: IFFALSE 865
// sPower := true ;
 857: LD_ADDR_EXP 50
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// if p3 = 33 then
 865: LD_VAR 0 3
 869: PUSH
 870: LD_INT 33
 872: EQUAL
 873: IFFALSE 883
// sRandom := true ;
 875: LD_ADDR_EXP 51
 879: PUSH
 880: LD_INT 1
 882: ST_TO_ADDR
// if p3 = 34 then
 883: LD_VAR 0 3
 887: PUSH
 888: LD_INT 34
 890: EQUAL
 891: IFFALSE 901
// sShield := true ;
 893: LD_ADDR_EXP 52
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
// if p3 = 35 then
 901: LD_VAR 0 3
 905: PUSH
 906: LD_INT 35
 908: EQUAL
 909: IFFALSE 919
// sTime := true ;
 911: LD_ADDR_EXP 53
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// if p3 = 36 then
 919: LD_VAR 0 3
 923: PUSH
 924: LD_INT 36
 926: EQUAL
 927: IFFALSE 937
// sTools := true ;
 929: LD_ADDR_EXP 54
 933: PUSH
 934: LD_INT 1
 936: ST_TO_ADDR
// if p3 = 101 then
 937: LD_VAR 0 3
 941: PUSH
 942: LD_INT 101
 944: EQUAL
 945: IFFALSE 955
// sSold := true ;
 947: LD_ADDR_EXP 19
 951: PUSH
 952: LD_INT 1
 954: ST_TO_ADDR
// if p3 = 102 then
 955: LD_VAR 0 3
 959: PUSH
 960: LD_INT 102
 962: EQUAL
 963: IFFALSE 973
// sDiff := true ;
 965: LD_ADDR_EXP 20
 969: PUSH
 970: LD_INT 1
 972: ST_TO_ADDR
// if p3 = 103 then
 973: LD_VAR 0 3
 977: PUSH
 978: LD_INT 103
 980: EQUAL
 981: IFFALSE 991
// sFog := true ;
 983: LD_ADDR_EXP 23
 987: PUSH
 988: LD_INT 1
 990: ST_TO_ADDR
// if p3 = 104 then
 991: LD_VAR 0 3
 995: PUSH
 996: LD_INT 104
 998: EQUAL
 999: IFFALSE 1009
// sReset := true ;
1001: LD_ADDR_EXP 24
1005: PUSH
1006: LD_INT 1
1008: ST_TO_ADDR
// if p3 = 105 then
1009: LD_VAR 0 3
1013: PUSH
1014: LD_INT 105
1016: EQUAL
1017: IFFALSE 1027
// sSun := true ;
1019: LD_ADDR_EXP 25
1023: PUSH
1024: LD_INT 1
1026: ST_TO_ADDR
// if p3 = 106 then
1027: LD_VAR 0 3
1031: PUSH
1032: LD_INT 106
1034: EQUAL
1035: IFFALSE 1045
// sTiger := true ;
1037: LD_ADDR_EXP 21
1041: PUSH
1042: LD_INT 1
1044: ST_TO_ADDR
// if p3 = 107 then
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 107
1052: EQUAL
1053: IFFALSE 1063
// sBomb := true ;
1055: LD_ADDR_EXP 22
1059: PUSH
1060: LD_INT 1
1062: ST_TO_ADDR
// if p3 = 108 then
1063: LD_VAR 0 3
1067: PUSH
1068: LD_INT 108
1070: EQUAL
1071: IFFALSE 1081
// sWound := true ;
1073: LD_ADDR_EXP 30
1077: PUSH
1078: LD_INT 1
1080: ST_TO_ADDR
// if p3 = 109 then
1081: LD_VAR 0 3
1085: PUSH
1086: LD_INT 109
1088: EQUAL
1089: IFFALSE 1099
// sBetray := true ;
1091: LD_ADDR_EXP 34
1095: PUSH
1096: LD_INT 1
1098: ST_TO_ADDR
// if p3 = 110 then
1099: LD_VAR 0 3
1103: PUSH
1104: LD_INT 110
1106: EQUAL
1107: IFFALSE 1117
// sContamin := true ;
1109: LD_ADDR_EXP 35
1113: PUSH
1114: LD_INT 1
1116: ST_TO_ADDR
// if p3 = 111 then
1117: LD_VAR 0 3
1121: PUSH
1122: LD_INT 111
1124: EQUAL
1125: IFFALSE 1135
// sOil := true ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// if p3 = 112 then
1135: LD_VAR 0 3
1139: PUSH
1140: LD_INT 112
1142: EQUAL
1143: IFFALSE 1153
// sStu := true ;
1145: LD_ADDR_EXP 41
1149: PUSH
1150: LD_INT 1
1152: ST_TO_ADDR
// if p3 = 113 then
1153: LD_VAR 0 3
1157: PUSH
1158: LD_INT 113
1160: EQUAL
1161: IFFALSE 1171
// sBazooka := true ;
1163: LD_ADDR_EXP 44
1167: PUSH
1168: LD_INT 1
1170: ST_TO_ADDR
// if p3 = 114 then
1171: LD_VAR 0 3
1175: PUSH
1176: LD_INT 114
1178: EQUAL
1179: IFFALSE 1189
// sMortar := true ;
1181: LD_ADDR_EXP 45
1185: PUSH
1186: LD_INT 1
1188: ST_TO_ADDR
// if p3 = 115 then
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 115
1196: EQUAL
1197: IFFALSE 1207
// sRanger := true ;
1199: LD_ADDR_EXP 55
1203: PUSH
1204: LD_INT 1
1206: ST_TO_ADDR
// if p3 = 116 then
1207: LD_VAR 0 3
1211: PUSH
1212: LD_INT 116
1214: EQUAL
1215: IFFALSE 1225
// sComputer := true ;
1217: LD_ADDR_EXP 56
1221: PUSH
1222: LD_INT 1
1224: ST_TO_ADDR
// if p3 = 117 then
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 117
1232: EQUAL
1233: IFFALSE 1243
// s30 := true ;
1235: LD_ADDR_EXP 57
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// if p3 = 118 then
1243: LD_VAR 0 3
1247: PUSH
1248: LD_INT 118
1250: EQUAL
1251: IFFALSE 1261
// s60 := true ;
1253: LD_ADDR_EXP 58
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// end ; if p2 = hack_mode then
1261: LD_VAR 0 2
1265: PUSH
1266: LD_INT 101
1268: EQUAL
1269: IFFALSE 1397
// begin case p3 of 1 :
1271: LD_VAR 0 3
1275: PUSH
1276: LD_INT 1
1278: DOUBLE
1279: EQUAL
1280: IFTRUE 1284
1282: GO 1291
1284: POP
// hHackUnlimitedResources ; 2 :
1285: CALL 13660 0 0
1289: GO 1397
1291: LD_INT 2
1293: DOUBLE
1294: EQUAL
1295: IFTRUE 1299
1297: GO 1306
1299: POP
// hHackSetLevel10 ; 3 :
1300: CALL 13793 0 0
1304: GO 1397
1306: LD_INT 3
1308: DOUBLE
1309: EQUAL
1310: IFTRUE 1314
1312: GO 1321
1314: POP
// hHackSetLevel10YourUnits ; 4 :
1315: CALL 13878 0 0
1319: GO 1397
1321: LD_INT 4
1323: DOUBLE
1324: EQUAL
1325: IFTRUE 1329
1327: GO 1336
1329: POP
// hHackInvincible ; 5 :
1330: CALL 14326 0 0
1334: GO 1397
1336: LD_INT 5
1338: DOUBLE
1339: EQUAL
1340: IFTRUE 1344
1342: GO 1351
1344: POP
// hHackInvisible ; 6 :
1345: CALL 14437 0 0
1349: GO 1397
1351: LD_INT 6
1353: DOUBLE
1354: EQUAL
1355: IFTRUE 1359
1357: GO 1366
1359: POP
// hHackChangeYourSide ; 7 :
1360: CALL 14494 0 0
1364: GO 1397
1366: LD_INT 7
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1381
1374: POP
// hHackChangeUnitSide ; 8 :
1375: CALL 14536 0 0
1379: GO 1397
1381: LD_INT 8
1383: DOUBLE
1384: EQUAL
1385: IFTRUE 1389
1387: GO 1396
1389: POP
// hHackFog ; end ;
1390: CALL 14637 0 0
1394: GO 1397
1396: POP
// end ; if p2 = game_save_mode then
1397: LD_VAR 0 2
1401: PUSH
1402: LD_INT 102
1404: EQUAL
1405: IFFALSE 1462
// begin if p3 = 1 then
1407: LD_VAR 0 3
1411: PUSH
1412: LD_INT 1
1414: EQUAL
1415: IFFALSE 1427
// globalGameSaveCounter := p4 ;
1417: LD_ADDR_EXP 1
1421: PUSH
1422: LD_VAR 0 4
1426: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1427: LD_VAR 0 3
1431: PUSH
1432: LD_INT 2
1434: EQUAL
1435: IFFALSE 1443
1437: PUSH
1438: LD_EXP 1
1442: AND
1443: IFFALSE 1462
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1445: LD_STRING setGameSaveCounter(
1447: PUSH
1448: LD_EXP 1
1452: STR
1453: PUSH
1454: LD_STRING )
1456: STR
1457: PPUSH
1458: CALL_OW 559
// end ; end ;
1462: LD_VAR 0 7
1466: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1467: LD_INT 0
1469: PPUSH
// streamModeActive := false ;
1470: LD_ADDR_EXP 2
1474: PUSH
1475: LD_INT 0
1477: ST_TO_ADDR
// normalCounter := 36 ;
1478: LD_ADDR_EXP 3
1482: PUSH
1483: LD_INT 36
1485: ST_TO_ADDR
// hardcoreCounter := 18 ;
1486: LD_ADDR_EXP 4
1490: PUSH
1491: LD_INT 18
1493: ST_TO_ADDR
// sRocket := false ;
1494: LD_ADDR_EXP 7
1498: PUSH
1499: LD_INT 0
1501: ST_TO_ADDR
// sSpeed := false ;
1502: LD_ADDR_EXP 6
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// sEngine := false ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// sSpec := false ;
1518: LD_ADDR_EXP 5
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// sLevel := false ;
1526: LD_ADDR_EXP 9
1530: PUSH
1531: LD_INT 0
1533: ST_TO_ADDR
// sArmoury := false ;
1534: LD_ADDR_EXP 10
1538: PUSH
1539: LD_INT 0
1541: ST_TO_ADDR
// sRadar := false ;
1542: LD_ADDR_EXP 11
1546: PUSH
1547: LD_INT 0
1549: ST_TO_ADDR
// sBunker := false ;
1550: LD_ADDR_EXP 12
1554: PUSH
1555: LD_INT 0
1557: ST_TO_ADDR
// sHack := false ;
1558: LD_ADDR_EXP 13
1562: PUSH
1563: LD_INT 0
1565: ST_TO_ADDR
// sFire := false ;
1566: LD_ADDR_EXP 14
1570: PUSH
1571: LD_INT 0
1573: ST_TO_ADDR
// sRefresh := false ;
1574: LD_ADDR_EXP 15
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// sExp := false ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// sDepot := false ;
1590: LD_ADDR_EXP 17
1594: PUSH
1595: LD_INT 0
1597: ST_TO_ADDR
// sFlag := false ;
1598: LD_ADDR_EXP 18
1602: PUSH
1603: LD_INT 0
1605: ST_TO_ADDR
// sKamikadze := false ;
1606: LD_ADDR_EXP 26
1610: PUSH
1611: LD_INT 0
1613: ST_TO_ADDR
// sTroll := false ;
1614: LD_ADDR_EXP 27
1618: PUSH
1619: LD_INT 0
1621: ST_TO_ADDR
// sSlow := false ;
1622: LD_ADDR_EXP 28
1626: PUSH
1627: LD_INT 0
1629: ST_TO_ADDR
// sLack := false ;
1630: LD_ADDR_EXP 29
1634: PUSH
1635: LD_INT 0
1637: ST_TO_ADDR
// sTank := false ;
1638: LD_ADDR_EXP 31
1642: PUSH
1643: LD_INT 0
1645: ST_TO_ADDR
// sRemote := false ;
1646: LD_ADDR_EXP 32
1650: PUSH
1651: LD_INT 0
1653: ST_TO_ADDR
// sPowell := false ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 0
1661: ST_TO_ADDR
// sTeleport := false ;
1662: LD_ADDR_EXP 36
1666: PUSH
1667: LD_INT 0
1669: ST_TO_ADDR
// sOilTower := false ;
1670: LD_ADDR_EXP 38
1674: PUSH
1675: LD_INT 0
1677: ST_TO_ADDR
// sShovel := false ;
1678: LD_ADDR_EXP 39
1682: PUSH
1683: LD_INT 0
1685: ST_TO_ADDR
// sSheik := false ;
1686: LD_ADDR_EXP 40
1690: PUSH
1691: LD_INT 0
1693: ST_TO_ADDR
// sEarthquake := false ;
1694: LD_ADDR_EXP 42
1698: PUSH
1699: LD_INT 0
1701: ST_TO_ADDR
// sAI := false ;
1702: LD_ADDR_EXP 43
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// sCargo := false ;
1710: LD_ADDR_EXP 46
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
// sDLaser := false ;
1718: LD_ADDR_EXP 47
1722: PUSH
1723: LD_INT 0
1725: ST_TO_ADDR
// sExchange := false ;
1726: LD_ADDR_EXP 48
1730: PUSH
1731: LD_INT 0
1733: ST_TO_ADDR
// sFac := false ;
1734: LD_ADDR_EXP 49
1738: PUSH
1739: LD_INT 0
1741: ST_TO_ADDR
// sPower := false ;
1742: LD_ADDR_EXP 50
1746: PUSH
1747: LD_INT 0
1749: ST_TO_ADDR
// sRandom := false ;
1750: LD_ADDR_EXP 51
1754: PUSH
1755: LD_INT 0
1757: ST_TO_ADDR
// sShield := false ;
1758: LD_ADDR_EXP 52
1762: PUSH
1763: LD_INT 0
1765: ST_TO_ADDR
// sTime := false ;
1766: LD_ADDR_EXP 53
1770: PUSH
1771: LD_INT 0
1773: ST_TO_ADDR
// sTools := false ;
1774: LD_ADDR_EXP 54
1778: PUSH
1779: LD_INT 0
1781: ST_TO_ADDR
// sSold := false ;
1782: LD_ADDR_EXP 19
1786: PUSH
1787: LD_INT 0
1789: ST_TO_ADDR
// sDiff := false ;
1790: LD_ADDR_EXP 20
1794: PUSH
1795: LD_INT 0
1797: ST_TO_ADDR
// sFog := false ;
1798: LD_ADDR_EXP 23
1802: PUSH
1803: LD_INT 0
1805: ST_TO_ADDR
// sReset := false ;
1806: LD_ADDR_EXP 24
1810: PUSH
1811: LD_INT 0
1813: ST_TO_ADDR
// sSun := false ;
1814: LD_ADDR_EXP 25
1818: PUSH
1819: LD_INT 0
1821: ST_TO_ADDR
// sTiger := false ;
1822: LD_ADDR_EXP 21
1826: PUSH
1827: LD_INT 0
1829: ST_TO_ADDR
// sBomb := false ;
1830: LD_ADDR_EXP 22
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// sWound := false ;
1838: LD_ADDR_EXP 30
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// sBetray := false ;
1846: LD_ADDR_EXP 34
1850: PUSH
1851: LD_INT 0
1853: ST_TO_ADDR
// sContamin := false ;
1854: LD_ADDR_EXP 35
1858: PUSH
1859: LD_INT 0
1861: ST_TO_ADDR
// sOil := false ;
1862: LD_ADDR_EXP 37
1866: PUSH
1867: LD_INT 0
1869: ST_TO_ADDR
// sStu := false ;
1870: LD_ADDR_EXP 41
1874: PUSH
1875: LD_INT 0
1877: ST_TO_ADDR
// sBazooka := false ;
1878: LD_ADDR_EXP 44
1882: PUSH
1883: LD_INT 0
1885: ST_TO_ADDR
// sMortar := false ;
1886: LD_ADDR_EXP 45
1890: PUSH
1891: LD_INT 0
1893: ST_TO_ADDR
// sRanger := false ;
1894: LD_ADDR_EXP 55
1898: PUSH
1899: LD_INT 0
1901: ST_TO_ADDR
// sComputer := false ;
1902: LD_ADDR_EXP 56
1906: PUSH
1907: LD_INT 0
1909: ST_TO_ADDR
// s30 := false ;
1910: LD_ADDR_EXP 57
1914: PUSH
1915: LD_INT 0
1917: ST_TO_ADDR
// s60 := false ;
1918: LD_ADDR_EXP 58
1922: PUSH
1923: LD_INT 0
1925: ST_TO_ADDR
// end ;
1926: LD_VAR 0 1
1930: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// result := [ ] ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: EMPTY
1946: ST_TO_ADDR
// if campaign_id = 1 then
1947: LD_OWVAR 69
1951: PUSH
1952: LD_INT 1
1954: EQUAL
1955: IFFALSE 5121
// begin case mission_number of 1 :
1957: LD_OWVAR 70
1961: PUSH
1962: LD_INT 1
1964: DOUBLE
1965: EQUAL
1966: IFTRUE 1970
1968: GO 2046
1970: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: LD_INT 4
1981: PUSH
1982: LD_INT 11
1984: PUSH
1985: LD_INT 12
1987: PUSH
1988: LD_INT 15
1990: PUSH
1991: LD_INT 16
1993: PUSH
1994: LD_INT 22
1996: PUSH
1997: LD_INT 23
1999: PUSH
2000: LD_INT 26
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 101
2016: PUSH
2017: LD_INT 102
2019: PUSH
2020: LD_INT 106
2022: PUSH
2023: LD_INT 116
2025: PUSH
2026: LD_INT 117
2028: PUSH
2029: LD_INT 118
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: ST_TO_ADDR
2044: GO 5119
2046: LD_INT 2
2048: DOUBLE
2049: EQUAL
2050: IFTRUE 2054
2052: GO 2138
2054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2055: LD_ADDR_VAR 0 2
2059: PUSH
2060: LD_INT 2
2062: PUSH
2063: LD_INT 4
2065: PUSH
2066: LD_INT 11
2068: PUSH
2069: LD_INT 12
2071: PUSH
2072: LD_INT 15
2074: PUSH
2075: LD_INT 16
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 23
2083: PUSH
2084: LD_INT 26
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 101
2100: PUSH
2101: LD_INT 102
2103: PUSH
2104: LD_INT 105
2106: PUSH
2107: LD_INT 106
2109: PUSH
2110: LD_INT 108
2112: PUSH
2113: LD_INT 116
2115: PUSH
2116: LD_INT 117
2118: PUSH
2119: LD_INT 118
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: ST_TO_ADDR
2136: GO 5119
2138: LD_INT 3
2140: DOUBLE
2141: EQUAL
2142: IFTRUE 2146
2144: GO 2234
2146: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: LD_INT 2
2154: PUSH
2155: LD_INT 4
2157: PUSH
2158: LD_INT 5
2160: PUSH
2161: LD_INT 11
2163: PUSH
2164: LD_INT 12
2166: PUSH
2167: LD_INT 15
2169: PUSH
2170: LD_INT 16
2172: PUSH
2173: LD_INT 22
2175: PUSH
2176: LD_INT 26
2178: PUSH
2179: LD_INT 36
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 101
2196: PUSH
2197: LD_INT 102
2199: PUSH
2200: LD_INT 105
2202: PUSH
2203: LD_INT 106
2205: PUSH
2206: LD_INT 108
2208: PUSH
2209: LD_INT 116
2211: PUSH
2212: LD_INT 117
2214: PUSH
2215: LD_INT 118
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: ST_TO_ADDR
2232: GO 5119
2234: LD_INT 4
2236: DOUBLE
2237: EQUAL
2238: IFTRUE 2242
2240: GO 2338
2242: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: LD_INT 4
2253: PUSH
2254: LD_INT 5
2256: PUSH
2257: LD_INT 8
2259: PUSH
2260: LD_INT 11
2262: PUSH
2263: LD_INT 12
2265: PUSH
2266: LD_INT 15
2268: PUSH
2269: LD_INT 16
2271: PUSH
2272: LD_INT 22
2274: PUSH
2275: LD_INT 23
2277: PUSH
2278: LD_INT 26
2280: PUSH
2281: LD_INT 36
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 101
2300: PUSH
2301: LD_INT 102
2303: PUSH
2304: LD_INT 105
2306: PUSH
2307: LD_INT 106
2309: PUSH
2310: LD_INT 108
2312: PUSH
2313: LD_INT 116
2315: PUSH
2316: LD_INT 117
2318: PUSH
2319: LD_INT 118
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: ST_TO_ADDR
2336: GO 5119
2338: LD_INT 5
2340: DOUBLE
2341: EQUAL
2342: IFTRUE 2346
2344: GO 2458
2346: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 4
2357: PUSH
2358: LD_INT 5
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: LD_INT 8
2366: PUSH
2367: LD_INT 11
2369: PUSH
2370: LD_INT 12
2372: PUSH
2373: LD_INT 15
2375: PUSH
2376: LD_INT 16
2378: PUSH
2379: LD_INT 22
2381: PUSH
2382: LD_INT 23
2384: PUSH
2385: LD_INT 25
2387: PUSH
2388: LD_INT 26
2390: PUSH
2391: LD_INT 36
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 101
2412: PUSH
2413: LD_INT 102
2415: PUSH
2416: LD_INT 105
2418: PUSH
2419: LD_INT 106
2421: PUSH
2422: LD_INT 108
2424: PUSH
2425: LD_INT 109
2427: PUSH
2428: LD_INT 112
2430: PUSH
2431: LD_INT 116
2433: PUSH
2434: LD_INT 117
2436: PUSH
2437: LD_INT 118
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: ST_TO_ADDR
2456: GO 5119
2458: LD_INT 6
2460: DOUBLE
2461: EQUAL
2462: IFTRUE 2466
2464: GO 2598
2466: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: LD_INT 2
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 5
2480: PUSH
2481: LD_INT 6
2483: PUSH
2484: LD_INT 8
2486: PUSH
2487: LD_INT 11
2489: PUSH
2490: LD_INT 12
2492: PUSH
2493: LD_INT 15
2495: PUSH
2496: LD_INT 16
2498: PUSH
2499: LD_INT 20
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 23
2510: PUSH
2511: LD_INT 25
2513: PUSH
2514: LD_INT 26
2516: PUSH
2517: LD_INT 30
2519: PUSH
2520: LD_INT 31
2522: PUSH
2523: LD_INT 32
2525: PUSH
2526: LD_INT 36
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 101
2552: PUSH
2553: LD_INT 102
2555: PUSH
2556: LD_INT 105
2558: PUSH
2559: LD_INT 106
2561: PUSH
2562: LD_INT 108
2564: PUSH
2565: LD_INT 109
2567: PUSH
2568: LD_INT 112
2570: PUSH
2571: LD_INT 116
2573: PUSH
2574: LD_INT 117
2576: PUSH
2577: LD_INT 118
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: ST_TO_ADDR
2596: GO 5119
2598: LD_INT 7
2600: DOUBLE
2601: EQUAL
2602: IFTRUE 2606
2604: GO 2718
2606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2607: LD_ADDR_VAR 0 2
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 4
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 7
2623: PUSH
2624: LD_INT 11
2626: PUSH
2627: LD_INT 12
2629: PUSH
2630: LD_INT 15
2632: PUSH
2633: LD_INT 16
2635: PUSH
2636: LD_INT 20
2638: PUSH
2639: LD_INT 21
2641: PUSH
2642: LD_INT 22
2644: PUSH
2645: LD_INT 23
2647: PUSH
2648: LD_INT 25
2650: PUSH
2651: LD_INT 26
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 101
2672: PUSH
2673: LD_INT 102
2675: PUSH
2676: LD_INT 103
2678: PUSH
2679: LD_INT 105
2681: PUSH
2682: LD_INT 106
2684: PUSH
2685: LD_INT 108
2687: PUSH
2688: LD_INT 112
2690: PUSH
2691: LD_INT 116
2693: PUSH
2694: LD_INT 117
2696: PUSH
2697: LD_INT 118
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: ST_TO_ADDR
2716: GO 5119
2718: LD_INT 8
2720: DOUBLE
2721: EQUAL
2722: IFTRUE 2726
2724: GO 2866
2726: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_INT 2
2734: PUSH
2735: LD_INT 4
2737: PUSH
2738: LD_INT 5
2740: PUSH
2741: LD_INT 6
2743: PUSH
2744: LD_INT 7
2746: PUSH
2747: LD_INT 8
2749: PUSH
2750: LD_INT 11
2752: PUSH
2753: LD_INT 12
2755: PUSH
2756: LD_INT 15
2758: PUSH
2759: LD_INT 16
2761: PUSH
2762: LD_INT 20
2764: PUSH
2765: LD_INT 21
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 23
2773: PUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 26
2779: PUSH
2780: LD_INT 30
2782: PUSH
2783: LD_INT 31
2785: PUSH
2786: LD_INT 32
2788: PUSH
2789: LD_INT 36
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 101
2816: PUSH
2817: LD_INT 102
2819: PUSH
2820: LD_INT 103
2822: PUSH
2823: LD_INT 105
2825: PUSH
2826: LD_INT 106
2828: PUSH
2829: LD_INT 108
2831: PUSH
2832: LD_INT 109
2834: PUSH
2835: LD_INT 112
2837: PUSH
2838: LD_INT 116
2840: PUSH
2841: LD_INT 117
2843: PUSH
2844: LD_INT 118
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: ST_TO_ADDR
2864: GO 5119
2866: LD_INT 9
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 3022
2874: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 6
2891: PUSH
2892: LD_INT 7
2894: PUSH
2895: LD_INT 8
2897: PUSH
2898: LD_INT 11
2900: PUSH
2901: LD_INT 12
2903: PUSH
2904: LD_INT 15
2906: PUSH
2907: LD_INT 16
2909: PUSH
2910: LD_INT 20
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 22
2918: PUSH
2919: LD_INT 23
2921: PUSH
2922: LD_INT 25
2924: PUSH
2925: LD_INT 26
2927: PUSH
2928: LD_INT 28
2930: PUSH
2931: LD_INT 30
2933: PUSH
2934: LD_INT 31
2936: PUSH
2937: LD_INT 32
2939: PUSH
2940: LD_INT 36
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 101
2968: PUSH
2969: LD_INT 102
2971: PUSH
2972: LD_INT 103
2974: PUSH
2975: LD_INT 105
2977: PUSH
2978: LD_INT 106
2980: PUSH
2981: LD_INT 108
2983: PUSH
2984: LD_INT 109
2986: PUSH
2987: LD_INT 112
2989: PUSH
2990: LD_INT 114
2992: PUSH
2993: LD_INT 116
2995: PUSH
2996: LD_INT 117
2998: PUSH
2999: LD_INT 118
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: ST_TO_ADDR
3020: GO 5119
3022: LD_INT 10
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3226
3030: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 5
3044: PUSH
3045: LD_INT 6
3047: PUSH
3048: LD_INT 7
3050: PUSH
3051: LD_INT 8
3053: PUSH
3054: LD_INT 9
3056: PUSH
3057: LD_INT 10
3059: PUSH
3060: LD_INT 11
3062: PUSH
3063: LD_INT 12
3065: PUSH
3066: LD_INT 13
3068: PUSH
3069: LD_INT 14
3071: PUSH
3072: LD_INT 15
3074: PUSH
3075: LD_INT 16
3077: PUSH
3078: LD_INT 17
3080: PUSH
3081: LD_INT 18
3083: PUSH
3084: LD_INT 19
3086: PUSH
3087: LD_INT 20
3089: PUSH
3090: LD_INT 21
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 23
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 25
3104: PUSH
3105: LD_INT 26
3107: PUSH
3108: LD_INT 28
3110: PUSH
3111: LD_INT 30
3113: PUSH
3114: LD_INT 31
3116: PUSH
3117: LD_INT 32
3119: PUSH
3120: LD_INT 36
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 101
3156: PUSH
3157: LD_INT 102
3159: PUSH
3160: LD_INT 103
3162: PUSH
3163: LD_INT 104
3165: PUSH
3166: LD_INT 105
3168: PUSH
3169: LD_INT 106
3171: PUSH
3172: LD_INT 107
3174: PUSH
3175: LD_INT 108
3177: PUSH
3178: LD_INT 109
3180: PUSH
3181: LD_INT 110
3183: PUSH
3184: LD_INT 111
3186: PUSH
3187: LD_INT 112
3189: PUSH
3190: LD_INT 114
3192: PUSH
3193: LD_INT 116
3195: PUSH
3196: LD_INT 117
3198: PUSH
3199: LD_INT 118
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: ST_TO_ADDR
3224: GO 5119
3226: LD_INT 11
3228: DOUBLE
3229: EQUAL
3230: IFTRUE 3234
3232: GO 3438
3234: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3235: LD_ADDR_VAR 0 2
3239: PUSH
3240: LD_INT 2
3242: PUSH
3243: LD_INT 3
3245: PUSH
3246: LD_INT 4
3248: PUSH
3249: LD_INT 5
3251: PUSH
3252: LD_INT 6
3254: PUSH
3255: LD_INT 7
3257: PUSH
3258: LD_INT 8
3260: PUSH
3261: LD_INT 9
3263: PUSH
3264: LD_INT 10
3266: PUSH
3267: LD_INT 11
3269: PUSH
3270: LD_INT 12
3272: PUSH
3273: LD_INT 13
3275: PUSH
3276: LD_INT 14
3278: PUSH
3279: LD_INT 15
3281: PUSH
3282: LD_INT 16
3284: PUSH
3285: LD_INT 17
3287: PUSH
3288: LD_INT 18
3290: PUSH
3291: LD_INT 19
3293: PUSH
3294: LD_INT 20
3296: PUSH
3297: LD_INT 21
3299: PUSH
3300: LD_INT 22
3302: PUSH
3303: LD_INT 23
3305: PUSH
3306: LD_INT 24
3308: PUSH
3309: LD_INT 25
3311: PUSH
3312: LD_INT 26
3314: PUSH
3315: LD_INT 28
3317: PUSH
3318: LD_INT 30
3320: PUSH
3321: LD_INT 31
3323: PUSH
3324: LD_INT 32
3326: PUSH
3327: LD_INT 34
3329: PUSH
3330: LD_INT 36
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: PUSH
3366: LD_INT 101
3368: PUSH
3369: LD_INT 102
3371: PUSH
3372: LD_INT 103
3374: PUSH
3375: LD_INT 104
3377: PUSH
3378: LD_INT 105
3380: PUSH
3381: LD_INT 106
3383: PUSH
3384: LD_INT 107
3386: PUSH
3387: LD_INT 108
3389: PUSH
3390: LD_INT 109
3392: PUSH
3393: LD_INT 110
3395: PUSH
3396: LD_INT 111
3398: PUSH
3399: LD_INT 112
3401: PUSH
3402: LD_INT 114
3404: PUSH
3405: LD_INT 116
3407: PUSH
3408: LD_INT 117
3410: PUSH
3411: LD_INT 118
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: ST_TO_ADDR
3436: GO 5119
3438: LD_INT 12
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3666
3446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 2
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: LD_INT 4
3463: PUSH
3464: LD_INT 5
3466: PUSH
3467: LD_INT 6
3469: PUSH
3470: LD_INT 7
3472: PUSH
3473: LD_INT 8
3475: PUSH
3476: LD_INT 9
3478: PUSH
3479: LD_INT 10
3481: PUSH
3482: LD_INT 11
3484: PUSH
3485: LD_INT 12
3487: PUSH
3488: LD_INT 13
3490: PUSH
3491: LD_INT 14
3493: PUSH
3494: LD_INT 15
3496: PUSH
3497: LD_INT 16
3499: PUSH
3500: LD_INT 17
3502: PUSH
3503: LD_INT 18
3505: PUSH
3506: LD_INT 19
3508: PUSH
3509: LD_INT 20
3511: PUSH
3512: LD_INT 21
3514: PUSH
3515: LD_INT 22
3517: PUSH
3518: LD_INT 23
3520: PUSH
3521: LD_INT 24
3523: PUSH
3524: LD_INT 25
3526: PUSH
3527: LD_INT 26
3529: PUSH
3530: LD_INT 27
3532: PUSH
3533: LD_INT 28
3535: PUSH
3536: LD_INT 30
3538: PUSH
3539: LD_INT 31
3541: PUSH
3542: LD_INT 32
3544: PUSH
3545: LD_INT 33
3547: PUSH
3548: LD_INT 34
3550: PUSH
3551: LD_INT 36
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 101
3592: PUSH
3593: LD_INT 102
3595: PUSH
3596: LD_INT 103
3598: PUSH
3599: LD_INT 104
3601: PUSH
3602: LD_INT 105
3604: PUSH
3605: LD_INT 106
3607: PUSH
3608: LD_INT 107
3610: PUSH
3611: LD_INT 108
3613: PUSH
3614: LD_INT 109
3616: PUSH
3617: LD_INT 110
3619: PUSH
3620: LD_INT 111
3622: PUSH
3623: LD_INT 112
3625: PUSH
3626: LD_INT 113
3628: PUSH
3629: LD_INT 114
3631: PUSH
3632: LD_INT 116
3634: PUSH
3635: LD_INT 117
3637: PUSH
3638: LD_INT 118
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
3664: GO 5119
3666: LD_INT 13
3668: DOUBLE
3669: EQUAL
3670: IFTRUE 3674
3672: GO 3882
3674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: LD_INT 1
3682: PUSH
3683: LD_INT 2
3685: PUSH
3686: LD_INT 3
3688: PUSH
3689: LD_INT 4
3691: PUSH
3692: LD_INT 5
3694: PUSH
3695: LD_INT 8
3697: PUSH
3698: LD_INT 9
3700: PUSH
3701: LD_INT 10
3703: PUSH
3704: LD_INT 11
3706: PUSH
3707: LD_INT 12
3709: PUSH
3710: LD_INT 14
3712: PUSH
3713: LD_INT 15
3715: PUSH
3716: LD_INT 16
3718: PUSH
3719: LD_INT 17
3721: PUSH
3722: LD_INT 18
3724: PUSH
3725: LD_INT 19
3727: PUSH
3728: LD_INT 20
3730: PUSH
3731: LD_INT 21
3733: PUSH
3734: LD_INT 22
3736: PUSH
3737: LD_INT 23
3739: PUSH
3740: LD_INT 24
3742: PUSH
3743: LD_INT 25
3745: PUSH
3746: LD_INT 26
3748: PUSH
3749: LD_INT 27
3751: PUSH
3752: LD_INT 28
3754: PUSH
3755: LD_INT 30
3757: PUSH
3758: LD_INT 31
3760: PUSH
3761: LD_INT 32
3763: PUSH
3764: LD_INT 33
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 36
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 101
3808: PUSH
3809: LD_INT 102
3811: PUSH
3812: LD_INT 103
3814: PUSH
3815: LD_INT 104
3817: PUSH
3818: LD_INT 105
3820: PUSH
3821: LD_INT 106
3823: PUSH
3824: LD_INT 107
3826: PUSH
3827: LD_INT 108
3829: PUSH
3830: LD_INT 109
3832: PUSH
3833: LD_INT 110
3835: PUSH
3836: LD_INT 111
3838: PUSH
3839: LD_INT 112
3841: PUSH
3842: LD_INT 113
3844: PUSH
3845: LD_INT 114
3847: PUSH
3848: LD_INT 116
3850: PUSH
3851: LD_INT 117
3853: PUSH
3854: LD_INT 118
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: ST_TO_ADDR
3880: GO 5119
3882: LD_INT 14
3884: DOUBLE
3885: EQUAL
3886: IFTRUE 3890
3888: GO 4114
3890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3891: LD_ADDR_VAR 0 2
3895: PUSH
3896: LD_INT 1
3898: PUSH
3899: LD_INT 2
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 6
3913: PUSH
3914: LD_INT 7
3916: PUSH
3917: LD_INT 8
3919: PUSH
3920: LD_INT 9
3922: PUSH
3923: LD_INT 10
3925: PUSH
3926: LD_INT 11
3928: PUSH
3929: LD_INT 12
3931: PUSH
3932: LD_INT 13
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 15
3940: PUSH
3941: LD_INT 16
3943: PUSH
3944: LD_INT 17
3946: PUSH
3947: LD_INT 18
3949: PUSH
3950: LD_INT 19
3952: PUSH
3953: LD_INT 20
3955: PUSH
3956: LD_INT 21
3958: PUSH
3959: LD_INT 22
3961: PUSH
3962: LD_INT 23
3964: PUSH
3965: LD_INT 24
3967: PUSH
3968: LD_INT 25
3970: PUSH
3971: LD_INT 26
3973: PUSH
3974: LD_INT 27
3976: PUSH
3977: LD_INT 28
3979: PUSH
3980: LD_INT 29
3982: PUSH
3983: LD_INT 30
3985: PUSH
3986: LD_INT 31
3988: PUSH
3989: LD_INT 32
3991: PUSH
3992: LD_INT 33
3994: PUSH
3995: LD_INT 34
3997: PUSH
3998: LD_INT 36
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 101
4040: PUSH
4041: LD_INT 102
4043: PUSH
4044: LD_INT 103
4046: PUSH
4047: LD_INT 104
4049: PUSH
4050: LD_INT 105
4052: PUSH
4053: LD_INT 106
4055: PUSH
4056: LD_INT 107
4058: PUSH
4059: LD_INT 108
4061: PUSH
4062: LD_INT 109
4064: PUSH
4065: LD_INT 110
4067: PUSH
4068: LD_INT 111
4070: PUSH
4071: LD_INT 112
4073: PUSH
4074: LD_INT 113
4076: PUSH
4077: LD_INT 114
4079: PUSH
4080: LD_INT 116
4082: PUSH
4083: LD_INT 117
4085: PUSH
4086: LD_INT 118
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: ST_TO_ADDR
4112: GO 5119
4114: LD_INT 15
4116: DOUBLE
4117: EQUAL
4118: IFTRUE 4122
4120: GO 4346
4122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4123: LD_ADDR_VAR 0 2
4127: PUSH
4128: LD_INT 1
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: LD_INT 3
4136: PUSH
4137: LD_INT 4
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 7
4148: PUSH
4149: LD_INT 8
4151: PUSH
4152: LD_INT 9
4154: PUSH
4155: LD_INT 10
4157: PUSH
4158: LD_INT 11
4160: PUSH
4161: LD_INT 12
4163: PUSH
4164: LD_INT 13
4166: PUSH
4167: LD_INT 14
4169: PUSH
4170: LD_INT 15
4172: PUSH
4173: LD_INT 16
4175: PUSH
4176: LD_INT 17
4178: PUSH
4179: LD_INT 18
4181: PUSH
4182: LD_INT 19
4184: PUSH
4185: LD_INT 20
4187: PUSH
4188: LD_INT 21
4190: PUSH
4191: LD_INT 22
4193: PUSH
4194: LD_INT 23
4196: PUSH
4197: LD_INT 24
4199: PUSH
4200: LD_INT 25
4202: PUSH
4203: LD_INT 26
4205: PUSH
4206: LD_INT 27
4208: PUSH
4209: LD_INT 28
4211: PUSH
4212: LD_INT 29
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 31
4220: PUSH
4221: LD_INT 32
4223: PUSH
4224: LD_INT 33
4226: PUSH
4227: LD_INT 34
4229: PUSH
4230: LD_INT 36
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 101
4272: PUSH
4273: LD_INT 102
4275: PUSH
4276: LD_INT 103
4278: PUSH
4279: LD_INT 104
4281: PUSH
4282: LD_INT 105
4284: PUSH
4285: LD_INT 106
4287: PUSH
4288: LD_INT 107
4290: PUSH
4291: LD_INT 108
4293: PUSH
4294: LD_INT 109
4296: PUSH
4297: LD_INT 110
4299: PUSH
4300: LD_INT 111
4302: PUSH
4303: LD_INT 112
4305: PUSH
4306: LD_INT 113
4308: PUSH
4309: LD_INT 114
4311: PUSH
4312: LD_INT 116
4314: PUSH
4315: LD_INT 117
4317: PUSH
4318: LD_INT 118
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: ST_TO_ADDR
4344: GO 5119
4346: LD_INT 16
4348: DOUBLE
4349: EQUAL
4350: IFTRUE 4354
4352: GO 4490
4354: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4355: LD_ADDR_VAR 0 2
4359: PUSH
4360: LD_INT 2
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 5
4368: PUSH
4369: LD_INT 7
4371: PUSH
4372: LD_INT 11
4374: PUSH
4375: LD_INT 12
4377: PUSH
4378: LD_INT 15
4380: PUSH
4381: LD_INT 16
4383: PUSH
4384: LD_INT 20
4386: PUSH
4387: LD_INT 21
4389: PUSH
4390: LD_INT 22
4392: PUSH
4393: LD_INT 23
4395: PUSH
4396: LD_INT 25
4398: PUSH
4399: LD_INT 26
4401: PUSH
4402: LD_INT 30
4404: PUSH
4405: LD_INT 31
4407: PUSH
4408: LD_INT 32
4410: PUSH
4411: LD_INT 33
4413: PUSH
4414: LD_INT 34
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 101
4440: PUSH
4441: LD_INT 102
4443: PUSH
4444: LD_INT 103
4446: PUSH
4447: LD_INT 106
4449: PUSH
4450: LD_INT 108
4452: PUSH
4453: LD_INT 112
4455: PUSH
4456: LD_INT 113
4458: PUSH
4459: LD_INT 114
4461: PUSH
4462: LD_INT 116
4464: PUSH
4465: LD_INT 117
4467: PUSH
4468: LD_INT 118
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: ST_TO_ADDR
4488: GO 5119
4490: LD_INT 17
4492: DOUBLE
4493: EQUAL
4494: IFTRUE 4498
4496: GO 4722
4498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_INT 1
4506: PUSH
4507: LD_INT 2
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 6
4521: PUSH
4522: LD_INT 7
4524: PUSH
4525: LD_INT 8
4527: PUSH
4528: LD_INT 9
4530: PUSH
4531: LD_INT 10
4533: PUSH
4534: LD_INT 11
4536: PUSH
4537: LD_INT 12
4539: PUSH
4540: LD_INT 13
4542: PUSH
4543: LD_INT 14
4545: PUSH
4546: LD_INT 15
4548: PUSH
4549: LD_INT 16
4551: PUSH
4552: LD_INT 17
4554: PUSH
4555: LD_INT 18
4557: PUSH
4558: LD_INT 19
4560: PUSH
4561: LD_INT 20
4563: PUSH
4564: LD_INT 21
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 26
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 28
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 30
4593: PUSH
4594: LD_INT 31
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 33
4602: PUSH
4603: LD_INT 34
4605: PUSH
4606: LD_INT 36
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 101
4648: PUSH
4649: LD_INT 102
4651: PUSH
4652: LD_INT 103
4654: PUSH
4655: LD_INT 104
4657: PUSH
4658: LD_INT 105
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 107
4666: PUSH
4667: LD_INT 108
4669: PUSH
4670: LD_INT 109
4672: PUSH
4673: LD_INT 110
4675: PUSH
4676: LD_INT 111
4678: PUSH
4679: LD_INT 112
4681: PUSH
4682: LD_INT 113
4684: PUSH
4685: LD_INT 114
4687: PUSH
4688: LD_INT 116
4690: PUSH
4691: LD_INT 117
4693: PUSH
4694: LD_INT 118
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: ST_TO_ADDR
4720: GO 5119
4722: LD_INT 18
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4878
4730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4731: LD_ADDR_VAR 0 2
4735: PUSH
4736: LD_INT 2
4738: PUSH
4739: LD_INT 4
4741: PUSH
4742: LD_INT 5
4744: PUSH
4745: LD_INT 7
4747: PUSH
4748: LD_INT 11
4750: PUSH
4751: LD_INT 12
4753: PUSH
4754: LD_INT 15
4756: PUSH
4757: LD_INT 16
4759: PUSH
4760: LD_INT 20
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 25
4774: PUSH
4775: LD_INT 26
4777: PUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 31
4783: PUSH
4784: LD_INT 32
4786: PUSH
4787: LD_INT 33
4789: PUSH
4790: LD_INT 34
4792: PUSH
4793: LD_INT 35
4795: PUSH
4796: LD_INT 36
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 101
4824: PUSH
4825: LD_INT 102
4827: PUSH
4828: LD_INT 103
4830: PUSH
4831: LD_INT 106
4833: PUSH
4834: LD_INT 108
4836: PUSH
4837: LD_INT 112
4839: PUSH
4840: LD_INT 113
4842: PUSH
4843: LD_INT 114
4845: PUSH
4846: LD_INT 115
4848: PUSH
4849: LD_INT 116
4851: PUSH
4852: LD_INT 117
4854: PUSH
4855: LD_INT 118
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: ST_TO_ADDR
4876: GO 5119
4878: LD_INT 19
4880: DOUBLE
4881: EQUAL
4882: IFTRUE 4886
4884: GO 5118
4886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4887: LD_ADDR_VAR 0 2
4891: PUSH
4892: LD_INT 1
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 6
4909: PUSH
4910: LD_INT 7
4912: PUSH
4913: LD_INT 8
4915: PUSH
4916: LD_INT 9
4918: PUSH
4919: LD_INT 10
4921: PUSH
4922: LD_INT 11
4924: PUSH
4925: LD_INT 12
4927: PUSH
4928: LD_INT 13
4930: PUSH
4931: LD_INT 14
4933: PUSH
4934: LD_INT 15
4936: PUSH
4937: LD_INT 16
4939: PUSH
4940: LD_INT 17
4942: PUSH
4943: LD_INT 18
4945: PUSH
4946: LD_INT 19
4948: PUSH
4949: LD_INT 20
4951: PUSH
4952: LD_INT 21
4954: PUSH
4955: LD_INT 22
4957: PUSH
4958: LD_INT 23
4960: PUSH
4961: LD_INT 24
4963: PUSH
4964: LD_INT 25
4966: PUSH
4967: LD_INT 26
4969: PUSH
4970: LD_INT 27
4972: PUSH
4973: LD_INT 28
4975: PUSH
4976: LD_INT 29
4978: PUSH
4979: LD_INT 30
4981: PUSH
4982: LD_INT 31
4984: PUSH
4985: LD_INT 32
4987: PUSH
4988: LD_INT 33
4990: PUSH
4991: LD_INT 34
4993: PUSH
4994: LD_INT 35
4996: PUSH
4997: LD_INT 36
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 101
5040: PUSH
5041: LD_INT 102
5043: PUSH
5044: LD_INT 103
5046: PUSH
5047: LD_INT 104
5049: PUSH
5050: LD_INT 105
5052: PUSH
5053: LD_INT 106
5055: PUSH
5056: LD_INT 107
5058: PUSH
5059: LD_INT 108
5061: PUSH
5062: LD_INT 109
5064: PUSH
5065: LD_INT 110
5067: PUSH
5068: LD_INT 111
5070: PUSH
5071: LD_INT 112
5073: PUSH
5074: LD_INT 113
5076: PUSH
5077: LD_INT 114
5079: PUSH
5080: LD_INT 115
5082: PUSH
5083: LD_INT 116
5085: PUSH
5086: LD_INT 117
5088: PUSH
5089: LD_INT 118
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: ST_TO_ADDR
5116: GO 5119
5118: POP
// end else
5119: GO 5350
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_INT 1
5128: PUSH
5129: LD_INT 2
5131: PUSH
5132: LD_INT 3
5134: PUSH
5135: LD_INT 4
5137: PUSH
5138: LD_INT 5
5140: PUSH
5141: LD_INT 6
5143: PUSH
5144: LD_INT 7
5146: PUSH
5147: LD_INT 8
5149: PUSH
5150: LD_INT 9
5152: PUSH
5153: LD_INT 10
5155: PUSH
5156: LD_INT 11
5158: PUSH
5159: LD_INT 12
5161: PUSH
5162: LD_INT 13
5164: PUSH
5165: LD_INT 14
5167: PUSH
5168: LD_INT 15
5170: PUSH
5171: LD_INT 16
5173: PUSH
5174: LD_INT 17
5176: PUSH
5177: LD_INT 18
5179: PUSH
5180: LD_INT 19
5182: PUSH
5183: LD_INT 20
5185: PUSH
5186: LD_INT 21
5188: PUSH
5189: LD_INT 22
5191: PUSH
5192: LD_INT 23
5194: PUSH
5195: LD_INT 24
5197: PUSH
5198: LD_INT 25
5200: PUSH
5201: LD_INT 26
5203: PUSH
5204: LD_INT 27
5206: PUSH
5207: LD_INT 28
5209: PUSH
5210: LD_INT 29
5212: PUSH
5213: LD_INT 30
5215: PUSH
5216: LD_INT 31
5218: PUSH
5219: LD_INT 32
5221: PUSH
5222: LD_INT 33
5224: PUSH
5225: LD_INT 34
5227: PUSH
5228: LD_INT 35
5230: PUSH
5231: LD_INT 36
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 101
5274: PUSH
5275: LD_INT 102
5277: PUSH
5278: LD_INT 103
5280: PUSH
5281: LD_INT 104
5283: PUSH
5284: LD_INT 105
5286: PUSH
5287: LD_INT 106
5289: PUSH
5290: LD_INT 107
5292: PUSH
5293: LD_INT 108
5295: PUSH
5296: LD_INT 109
5298: PUSH
5299: LD_INT 110
5301: PUSH
5302: LD_INT 111
5304: PUSH
5305: LD_INT 112
5307: PUSH
5308: LD_INT 113
5310: PUSH
5311: LD_INT 114
5313: PUSH
5314: LD_INT 115
5316: PUSH
5317: LD_INT 116
5319: PUSH
5320: LD_INT 117
5322: PUSH
5323: LD_INT 118
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: ST_TO_ADDR
// if result then
5350: LD_VAR 0 2
5354: IFFALSE 6140
// begin normal :=  ;
5356: LD_ADDR_VAR 0 5
5360: PUSH
5361: LD_STRING 
5363: ST_TO_ADDR
// hardcore :=  ;
5364: LD_ADDR_VAR 0 6
5368: PUSH
5369: LD_STRING 
5371: ST_TO_ADDR
// active :=  ;
5372: LD_ADDR_VAR 0 7
5376: PUSH
5377: LD_STRING 
5379: ST_TO_ADDR
// for i = 1 to normalCounter do
5380: LD_ADDR_VAR 0 8
5384: PUSH
5385: DOUBLE
5386: LD_INT 1
5388: DEC
5389: ST_TO_ADDR
5390: LD_EXP 3
5394: PUSH
5395: FOR_TO
5396: IFFALSE 5497
// begin tmp := 0 ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_STRING 0
5405: ST_TO_ADDR
// if result [ 1 ] then
5406: LD_VAR 0 2
5410: PUSH
5411: LD_INT 1
5413: ARRAY
5414: IFFALSE 5479
// if result [ 1 ] [ 1 ] = i then
5416: LD_VAR 0 2
5420: PUSH
5421: LD_INT 1
5423: ARRAY
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PUSH
5429: LD_VAR 0 8
5433: EQUAL
5434: IFFALSE 5479
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 2
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: LD_VAR 0 2
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_INT 1
5460: PPUSH
5461: CALL_OW 3
5465: PPUSH
5466: CALL_OW 1
5470: ST_TO_ADDR
// tmp := 1 ;
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: LD_STRING 1
5478: ST_TO_ADDR
// end ; normal := normal & tmp ;
5479: LD_ADDR_VAR 0 5
5483: PUSH
5484: LD_VAR 0 5
5488: PUSH
5489: LD_VAR 0 3
5493: STR
5494: ST_TO_ADDR
// end ;
5495: GO 5395
5497: POP
5498: POP
// for i = 1 to hardcoreCounter do
5499: LD_ADDR_VAR 0 8
5503: PUSH
5504: DOUBLE
5505: LD_INT 1
5507: DEC
5508: ST_TO_ADDR
5509: LD_EXP 4
5513: PUSH
5514: FOR_TO
5515: IFFALSE 5620
// begin tmp := 0 ;
5517: LD_ADDR_VAR 0 3
5521: PUSH
5522: LD_STRING 0
5524: ST_TO_ADDR
// if result [ 2 ] then
5525: LD_VAR 0 2
5529: PUSH
5530: LD_INT 2
5532: ARRAY
5533: IFFALSE 5602
// if result [ 2 ] [ 1 ] = 100 + i then
5535: LD_VAR 0 2
5539: PUSH
5540: LD_INT 2
5542: ARRAY
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PUSH
5548: LD_INT 100
5550: PUSH
5551: LD_VAR 0 8
5555: PLUS
5556: EQUAL
5557: IFFALSE 5602
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_VAR 0 2
5568: PPUSH
5569: LD_INT 2
5571: PPUSH
5572: LD_VAR 0 2
5576: PUSH
5577: LD_INT 2
5579: ARRAY
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 3
5588: PPUSH
5589: CALL_OW 1
5593: ST_TO_ADDR
// tmp := 1 ;
5594: LD_ADDR_VAR 0 3
5598: PUSH
5599: LD_STRING 1
5601: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5602: LD_ADDR_VAR 0 6
5606: PUSH
5607: LD_VAR 0 6
5611: PUSH
5612: LD_VAR 0 3
5616: STR
5617: ST_TO_ADDR
// end ;
5618: GO 5514
5620: POP
5621: POP
// if isGameLoad then
5622: LD_VAR 0 1
5626: IFFALSE 6101
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5628: LD_ADDR_VAR 0 4
5632: PUSH
5633: LD_EXP 7
5637: PUSH
5638: LD_EXP 6
5642: PUSH
5643: LD_EXP 8
5647: PUSH
5648: LD_EXP 5
5652: PUSH
5653: LD_EXP 9
5657: PUSH
5658: LD_EXP 10
5662: PUSH
5663: LD_EXP 11
5667: PUSH
5668: LD_EXP 12
5672: PUSH
5673: LD_EXP 13
5677: PUSH
5678: LD_EXP 14
5682: PUSH
5683: LD_EXP 15
5687: PUSH
5688: LD_EXP 16
5692: PUSH
5693: LD_EXP 17
5697: PUSH
5698: LD_EXP 18
5702: PUSH
5703: LD_EXP 26
5707: PUSH
5708: LD_EXP 27
5712: PUSH
5713: LD_EXP 28
5717: PUSH
5718: LD_EXP 29
5722: PUSH
5723: LD_EXP 31
5727: PUSH
5728: LD_EXP 32
5732: PUSH
5733: LD_EXP 33
5737: PUSH
5738: LD_EXP 36
5742: PUSH
5743: LD_EXP 38
5747: PUSH
5748: LD_EXP 39
5752: PUSH
5753: LD_EXP 40
5757: PUSH
5758: LD_EXP 42
5762: PUSH
5763: LD_EXP 43
5767: PUSH
5768: LD_EXP 46
5772: PUSH
5773: LD_EXP 47
5777: PUSH
5778: LD_EXP 48
5782: PUSH
5783: LD_EXP 49
5787: PUSH
5788: LD_EXP 50
5792: PUSH
5793: LD_EXP 51
5797: PUSH
5798: LD_EXP 52
5802: PUSH
5803: LD_EXP 53
5807: PUSH
5808: LD_EXP 54
5812: PUSH
5813: LD_EXP 19
5817: PUSH
5818: LD_EXP 20
5822: PUSH
5823: LD_EXP 23
5827: PUSH
5828: LD_EXP 24
5832: PUSH
5833: LD_EXP 25
5837: PUSH
5838: LD_EXP 21
5842: PUSH
5843: LD_EXP 22
5847: PUSH
5848: LD_EXP 30
5852: PUSH
5853: LD_EXP 34
5857: PUSH
5858: LD_EXP 35
5862: PUSH
5863: LD_EXP 37
5867: PUSH
5868: LD_EXP 41
5872: PUSH
5873: LD_EXP 44
5877: PUSH
5878: LD_EXP 45
5882: PUSH
5883: LD_EXP 55
5887: PUSH
5888: LD_EXP 56
5892: PUSH
5893: LD_EXP 57
5897: PUSH
5898: LD_EXP 58
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// tmp :=  ;
5959: LD_ADDR_VAR 0 3
5963: PUSH
5964: LD_STRING 
5966: ST_TO_ADDR
// for i = 1 to normalCounter do
5967: LD_ADDR_VAR 0 8
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 3
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6019
// begin if flags [ i ] then
5985: LD_VAR 0 4
5989: PUSH
5990: LD_VAR 0 8
5994: ARRAY
5995: IFFALSE 6017
// tmp := tmp & i & ; ;
5997: LD_ADDR_VAR 0 3
6001: PUSH
6002: LD_VAR 0 3
6006: PUSH
6007: LD_VAR 0 8
6011: STR
6012: PUSH
6013: LD_STRING ;
6015: STR
6016: ST_TO_ADDR
// end ;
6017: GO 5982
6019: POP
6020: POP
// for i = 1 to hardcoreCounter do
6021: LD_ADDR_VAR 0 8
6025: PUSH
6026: DOUBLE
6027: LD_INT 1
6029: DEC
6030: ST_TO_ADDR
6031: LD_EXP 4
6035: PUSH
6036: FOR_TO
6037: IFFALSE 6083
// begin if flags [ normalCounter + i ] then
6039: LD_VAR 0 4
6043: PUSH
6044: LD_EXP 3
6048: PUSH
6049: LD_VAR 0 8
6053: PLUS
6054: ARRAY
6055: IFFALSE 6081
// tmp := tmp & ( 100 + i ) & ; ;
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 100
6069: PUSH
6070: LD_VAR 0 8
6074: PLUS
6075: STR
6076: PUSH
6077: LD_STRING ;
6079: STR
6080: ST_TO_ADDR
// end ;
6081: GO 6036
6083: POP
6084: POP
// if tmp then
6085: LD_VAR 0 3
6089: IFFALSE 6101
// active := tmp ;
6091: LD_ADDR_VAR 0 7
6095: PUSH
6096: LD_VAR 0 3
6100: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6101: LD_STRING getStreamItemsFromMission("
6103: PUSH
6104: LD_VAR 0 5
6108: STR
6109: PUSH
6110: LD_STRING ","
6112: STR
6113: PUSH
6114: LD_VAR 0 6
6118: STR
6119: PUSH
6120: LD_STRING ","
6122: STR
6123: PUSH
6124: LD_VAR 0 7
6128: STR
6129: PUSH
6130: LD_STRING ")
6132: STR
6133: PPUSH
6134: CALL_OW 559
// end else
6138: GO 6147
// ToLua ( getStreamItemsFromMission("","","") ) ;
6140: LD_STRING getStreamItemsFromMission("","","")
6142: PPUSH
6143: CALL_OW 559
// end ;
6147: LD_VAR 0 2
6151: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6152: LD_EXP 2
6156: IFFALSE 6164
6158: PUSH
6159: LD_EXP 7
6163: AND
6164: IFFALSE 6288
6166: GO 6168
6168: DISABLE
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
// begin enable ;
6173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6174: LD_ADDR_VAR 0 2
6178: PUSH
6179: LD_INT 22
6181: PUSH
6182: LD_OWVAR 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 34
6196: PUSH
6197: LD_INT 7
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 34
6206: PUSH
6207: LD_INT 45
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 34
6216: PUSH
6217: LD_INT 28
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 34
6226: PUSH
6227: LD_INT 47
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PPUSH
6245: CALL_OW 69
6249: ST_TO_ADDR
// if not tmp then
6250: LD_VAR 0 2
6254: NOT
6255: IFFALSE 6259
// exit ;
6257: GO 6288
// for i in tmp do
6259: LD_ADDR_VAR 0 1
6263: PUSH
6264: LD_VAR 0 2
6268: PUSH
6269: FOR_IN
6270: IFFALSE 6286
// begin SetLives ( i , 0 ) ;
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: CALL_OW 234
// end ;
6284: GO 6269
6286: POP
6287: POP
// end ;
6288: PPOPN 2
6290: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6291: LD_EXP 2
6295: IFFALSE 6303
6297: PUSH
6298: LD_EXP 8
6302: AND
6303: IFFALSE 6387
6305: GO 6307
6307: DISABLE
6308: LD_INT 0
6310: PPUSH
6311: PPUSH
// begin enable ;
6312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6313: LD_ADDR_VAR 0 2
6317: PUSH
6318: LD_INT 22
6320: PUSH
6321: LD_OWVAR 2
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 32
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 69
6348: ST_TO_ADDR
// if not tmp then
6349: LD_VAR 0 2
6353: NOT
6354: IFFALSE 6358
// exit ;
6356: GO 6387
// for i in tmp do
6358: LD_ADDR_VAR 0 1
6362: PUSH
6363: LD_VAR 0 2
6367: PUSH
6368: FOR_IN
6369: IFFALSE 6385
// begin SetLives ( i , 0 ) ;
6371: LD_VAR 0 1
6375: PPUSH
6376: LD_INT 0
6378: PPUSH
6379: CALL_OW 234
// end ;
6383: GO 6368
6385: POP
6386: POP
// end ;
6387: PPOPN 2
6389: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6390: LD_EXP 2
6394: IFFALSE 6402
6396: PUSH
6397: LD_EXP 5
6401: AND
6402: IFFALSE 6495
6404: GO 6406
6406: DISABLE
6407: LD_INT 0
6409: PPUSH
// begin enable ;
6410: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6411: LD_ADDR_VAR 0 1
6415: PUSH
6416: LD_INT 22
6418: PUSH
6419: LD_OWVAR 2
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: LD_INT 25
6433: PUSH
6434: LD_INT 5
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 9
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 8
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6493
// begin SetClass ( i , 1 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: CALL_OW 336
// end ;
6491: GO 6476
6493: POP
6494: POP
// end ;
6495: PPOPN 1
6497: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6498: LD_EXP 2
6502: IFFALSE 6510
6504: PUSH
6505: LD_EXP 6
6509: AND
6510: IFFALSE 6522
6512: PUSH
6513: LD_OWVAR 65
6517: PUSH
6518: LD_INT 7
6520: LESS
6521: AND
6522: IFFALSE 6536
6524: GO 6526
6526: DISABLE
// begin enable ;
6527: ENABLE
// game_speed := 7 ;
6528: LD_ADDR_OWVAR 65
6532: PUSH
6533: LD_INT 7
6535: ST_TO_ADDR
// end ;
6536: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6537: LD_EXP 2
6541: IFFALSE 6549
6543: PUSH
6544: LD_EXP 9
6548: AND
6549: IFFALSE 6751
6551: GO 6553
6553: DISABLE
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
6558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: LD_INT 81
6566: PUSH
6567: LD_OWVAR 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 21
6578: PUSH
6579: LD_INT 1
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PPUSH
6590: CALL_OW 69
6594: ST_TO_ADDR
// if not tmp then
6595: LD_VAR 0 3
6599: NOT
6600: IFFALSE 6604
// exit ;
6602: GO 6751
// if tmp > 5 then
6604: LD_VAR 0 3
6608: PUSH
6609: LD_INT 5
6611: GREATER
6612: IFFALSE 6624
// k := 5 else
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_INT 5
6621: ST_TO_ADDR
6622: GO 6634
// k := tmp ;
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_VAR 0 3
6633: ST_TO_ADDR
// for i := 1 to k do
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: DOUBLE
6640: LD_INT 1
6642: DEC
6643: ST_TO_ADDR
6644: LD_VAR 0 2
6648: PUSH
6649: FOR_TO
6650: IFFALSE 6749
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6652: LD_VAR 0 3
6656: PUSH
6657: LD_VAR 0 1
6661: ARRAY
6662: PPUSH
6663: LD_VAR 0 1
6667: PUSH
6668: LD_INT 4
6670: MOD
6671: PUSH
6672: LD_INT 1
6674: PLUS
6675: PPUSH
6676: CALL_OW 259
6680: PUSH
6681: LD_INT 10
6683: LESS
6684: IFFALSE 6747
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6686: LD_VAR 0 3
6690: PUSH
6691: LD_VAR 0 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 1
6701: PUSH
6702: LD_INT 4
6704: MOD
6705: PUSH
6706: LD_INT 1
6708: PLUS
6709: PPUSH
6710: LD_VAR 0 3
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 4
6728: MOD
6729: PUSH
6730: LD_INT 1
6732: PLUS
6733: PPUSH
6734: CALL_OW 259
6738: PUSH
6739: LD_INT 1
6741: PLUS
6742: PPUSH
6743: CALL_OW 237
6747: GO 6649
6749: POP
6750: POP
// end ;
6751: PPOPN 3
6753: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6754: LD_EXP 2
6758: IFFALSE 6766
6760: PUSH
6761: LD_EXP 10
6765: AND
6766: IFFALSE 6786
6768: GO 6770
6770: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6771: LD_INT 4
6773: PPUSH
6774: LD_OWVAR 2
6778: PPUSH
6779: LD_INT 0
6781: PPUSH
6782: CALL_OW 324
6786: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6787: LD_EXP 2
6791: IFFALSE 6799
6793: PUSH
6794: LD_EXP 39
6798: AND
6799: IFFALSE 6819
6801: GO 6803
6803: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6804: LD_INT 19
6806: PPUSH
6807: LD_OWVAR 2
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL_OW 324
6819: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6820: LD_EXP 2
6824: IFFALSE 6832
6826: PUSH
6827: LD_EXP 11
6831: AND
6832: IFFALSE 6934
6834: GO 6836
6836: DISABLE
6837: LD_INT 0
6839: PPUSH
6840: PPUSH
// begin enable ;
6841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_OWVAR 2
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: LD_INT 34
6864: PUSH
6865: LD_INT 11
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 34
6874: PUSH
6875: LD_INT 30
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 69
6895: ST_TO_ADDR
// if not tmp then
6896: LD_VAR 0 2
6900: NOT
6901: IFFALSE 6905
// exit ;
6903: GO 6934
// for i in tmp do
6905: LD_ADDR_VAR 0 1
6909: PUSH
6910: LD_VAR 0 2
6914: PUSH
6915: FOR_IN
6916: IFFALSE 6932
// begin SetLives ( i , 0 ) ;
6918: LD_VAR 0 1
6922: PPUSH
6923: LD_INT 0
6925: PPUSH
6926: CALL_OW 234
// end ;
6930: GO 6915
6932: POP
6933: POP
// end ;
6934: PPOPN 2
6936: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6937: LD_EXP 2
6941: IFFALSE 6949
6943: PUSH
6944: LD_EXP 12
6948: AND
6949: IFFALSE 6969
6951: GO 6953
6953: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6954: LD_INT 32
6956: PPUSH
6957: LD_OWVAR 2
6961: PPUSH
6962: LD_INT 0
6964: PPUSH
6965: CALL_OW 324
6969: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6970: LD_EXP 2
6974: IFFALSE 6982
6976: PUSH
6977: LD_EXP 13
6981: AND
6982: IFFALSE 7165
6984: GO 6986
6986: DISABLE
6987: LD_INT 0
6989: PPUSH
6990: PPUSH
6991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6992: LD_ADDR_VAR 0 2
6996: PUSH
6997: LD_INT 22
6999: PUSH
7000: LD_OWVAR 2
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 33
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PPUSH
7023: CALL_OW 69
7027: ST_TO_ADDR
// if not tmp then
7028: LD_VAR 0 2
7032: NOT
7033: IFFALSE 7037
// exit ;
7035: GO 7165
// side := 0 ;
7037: LD_ADDR_VAR 0 3
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// for i := 1 to 8 do
7045: LD_ADDR_VAR 0 1
7049: PUSH
7050: DOUBLE
7051: LD_INT 1
7053: DEC
7054: ST_TO_ADDR
7055: LD_INT 8
7057: PUSH
7058: FOR_TO
7059: IFFALSE 7109
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7061: LD_OWVAR 2
7065: PUSH
7066: LD_VAR 0 1
7070: NONEQUAL
7071: IFFALSE 7093
7073: PUSH
7074: LD_OWVAR 2
7078: PPUSH
7079: LD_VAR 0 1
7083: PPUSH
7084: CALL_OW 81
7088: PUSH
7089: LD_INT 2
7091: EQUAL
7092: AND
7093: IFFALSE 7107
// begin side := i ;
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_VAR 0 1
7104: ST_TO_ADDR
// break ;
7105: GO 7109
// end ;
7107: GO 7058
7109: POP
7110: POP
// if not side then
7111: LD_VAR 0 3
7115: NOT
7116: IFFALSE 7120
// exit ;
7118: GO 7165
// for i := 1 to tmp do
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: DOUBLE
7126: LD_INT 1
7128: DEC
7129: ST_TO_ADDR
7130: LD_VAR 0 2
7134: PUSH
7135: FOR_TO
7136: IFFALSE 7163
// if Prob ( 60 ) then
7138: LD_INT 60
7140: PPUSH
7141: CALL_OW 13
7145: IFFALSE 7161
// SetSide ( i , side ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 235
7161: GO 7135
7163: POP
7164: POP
// end ;
7165: PPOPN 3
7167: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7168: LD_EXP 2
7172: IFFALSE 7180
7174: PUSH
7175: LD_EXP 15
7179: AND
7180: IFFALSE 7299
7182: GO 7184
7184: DISABLE
7185: LD_INT 0
7187: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7188: LD_ADDR_VAR 0 1
7192: PUSH
7193: LD_INT 22
7195: PUSH
7196: LD_OWVAR 2
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: LD_INT 23
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: PPUSH
7237: CALL_OW 69
7241: PUSH
7242: FOR_IN
7243: IFFALSE 7297
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 257
7254: PUSH
7255: LD_INT 1
7257: PUSH
7258: LD_INT 2
7260: PUSH
7261: LD_INT 3
7263: PUSH
7264: LD_INT 4
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: IN
7273: IFFALSE 7295
// SetClass ( un , rand ( 1 , 4 ) ) ;
7275: LD_VAR 0 1
7279: PPUSH
7280: LD_INT 1
7282: PPUSH
7283: LD_INT 4
7285: PPUSH
7286: CALL_OW 12
7290: PPUSH
7291: CALL_OW 336
7295: GO 7242
7297: POP
7298: POP
// end ;
7299: PPOPN 1
7301: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7302: LD_EXP 2
7306: IFFALSE 7314
7308: PUSH
7309: LD_EXP 14
7313: AND
7314: IFFALSE 7393
7316: GO 7318
7318: DISABLE
7319: LD_INT 0
7321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7322: LD_ADDR_VAR 0 1
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_OWVAR 2
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 21
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PPUSH
7353: CALL_OW 69
7357: ST_TO_ADDR
// if not tmp then
7358: LD_VAR 0 1
7362: NOT
7363: IFFALSE 7367
// exit ;
7365: GO 7393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7367: LD_VAR 0 1
7371: PUSH
7372: LD_INT 1
7374: PPUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: CALL_OW 12
7384: ARRAY
7385: PPUSH
7386: LD_INT 100
7388: PPUSH
7389: CALL_OW 234
// end ;
7393: PPOPN 1
7395: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7396: LD_EXP 2
7400: IFFALSE 7408
7402: PUSH
7403: LD_EXP 16
7407: AND
7408: IFFALSE 7506
7410: GO 7412
7412: DISABLE
7413: LD_INT 0
7415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7416: LD_ADDR_VAR 0 1
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_OWVAR 2
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 21
7435: PUSH
7436: LD_INT 1
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: ST_TO_ADDR
// if not tmp then
7452: LD_VAR 0 1
7456: NOT
7457: IFFALSE 7461
// exit ;
7459: GO 7506
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7461: LD_VAR 0 1
7465: PUSH
7466: LD_INT 1
7468: PPUSH
7469: LD_VAR 0 1
7473: PPUSH
7474: CALL_OW 12
7478: ARRAY
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: LD_INT 4
7485: PPUSH
7486: CALL_OW 12
7490: PPUSH
7491: LD_INT 3000
7493: PPUSH
7494: LD_INT 9000
7496: PPUSH
7497: CALL_OW 12
7501: PPUSH
7502: CALL_OW 492
// end ;
7506: PPOPN 1
7508: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7509: LD_EXP 2
7513: IFFALSE 7521
7515: PUSH
7516: LD_EXP 17
7520: AND
7521: IFFALSE 7541
7523: GO 7525
7525: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7526: LD_INT 1
7528: PPUSH
7529: LD_OWVAR 2
7533: PPUSH
7534: LD_INT 0
7536: PPUSH
7537: CALL_OW 324
7541: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7542: LD_EXP 2
7546: IFFALSE 7554
7548: PUSH
7549: LD_EXP 18
7553: AND
7554: IFFALSE 7637
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: LD_INT 22
7570: PUSH
7571: LD_OWVAR 2
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 21
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 69
7598: ST_TO_ADDR
// if not tmp then
7599: LD_VAR 0 2
7603: NOT
7604: IFFALSE 7608
// exit ;
7606: GO 7637
// for i in tmp do
7608: LD_ADDR_VAR 0 1
7612: PUSH
7613: LD_VAR 0 2
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7635
// SetBLevel ( i , 10 ) ;
7621: LD_VAR 0 1
7625: PPUSH
7626: LD_INT 10
7628: PPUSH
7629: CALL_OW 241
7633: GO 7618
7635: POP
7636: POP
// end ;
7637: PPOPN 2
7639: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7640: LD_EXP 2
7644: IFFALSE 7652
7646: PUSH
7647: LD_EXP 19
7651: AND
7652: IFFALSE 7763
7654: GO 7656
7656: DISABLE
7657: LD_INT 0
7659: PPUSH
7660: PPUSH
7661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7662: LD_ADDR_VAR 0 3
7666: PUSH
7667: LD_INT 22
7669: PUSH
7670: LD_OWVAR 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 25
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: ST_TO_ADDR
// if not tmp then
7698: LD_VAR 0 3
7702: NOT
7703: IFFALSE 7707
// exit ;
7705: GO 7763
// un := tmp [ rand ( 1 , tmp ) ] ;
7707: LD_ADDR_VAR 0 2
7711: PUSH
7712: LD_VAR 0 3
7716: PUSH
7717: LD_INT 1
7719: PPUSH
7720: LD_VAR 0 3
7724: PPUSH
7725: CALL_OW 12
7729: ARRAY
7730: ST_TO_ADDR
// if Crawls ( un ) then
7731: LD_VAR 0 2
7735: PPUSH
7736: CALL_OW 318
7740: IFFALSE 7751
// ComWalk ( un ) ;
7742: LD_VAR 0 2
7746: PPUSH
7747: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7751: LD_VAR 0 2
7755: PPUSH
7756: LD_INT 5
7758: PPUSH
7759: CALL_OW 336
// end ;
7763: PPOPN 3
7765: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7766: LD_EXP 2
7770: IFFALSE 7778
7772: PUSH
7773: LD_EXP 20
7777: AND
7778: IFFALSE 7790
7780: PUSH
7781: LD_OWVAR 67
7785: PUSH
7786: LD_INT 4
7788: LESS
7789: AND
7790: IFFALSE 7809
7792: GO 7794
7794: DISABLE
// begin Difficulty := Difficulty + 1 ;
7795: LD_ADDR_OWVAR 67
7799: PUSH
7800: LD_OWVAR 67
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: ST_TO_ADDR
// end ;
7809: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7810: LD_EXP 2
7814: IFFALSE 7822
7816: PUSH
7817: LD_EXP 21
7821: AND
7822: IFFALSE 7925
7824: GO 7826
7826: DISABLE
7827: LD_INT 0
7829: PPUSH
// begin for i := 1 to 5 do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: DOUBLE
7836: LD_INT 1
7838: DEC
7839: ST_TO_ADDR
7840: LD_INT 5
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7923
// begin uc_nation := nation_nature ;
7846: LD_ADDR_OWVAR 21
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// uc_side := 0 ;
7854: LD_ADDR_OWVAR 20
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7862: LD_ADDR_OWVAR 29
7866: PUSH
7867: LD_INT 12
7869: PUSH
7870: LD_INT 12
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
// hc_agressivity := 20 ;
7877: LD_ADDR_OWVAR 35
7881: PUSH
7882: LD_INT 20
7884: ST_TO_ADDR
// hc_class := class_tiger ;
7885: LD_ADDR_OWVAR 28
7889: PUSH
7890: LD_INT 14
7892: ST_TO_ADDR
// hc_gallery :=  ;
7893: LD_ADDR_OWVAR 33
7897: PUSH
7898: LD_STRING 
7900: ST_TO_ADDR
// hc_name :=  ;
7901: LD_ADDR_OWVAR 26
7905: PUSH
7906: LD_STRING 
7908: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7909: CALL_OW 44
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 51
// end ;
7921: GO 7843
7923: POP
7924: POP
// end ;
7925: PPOPN 1
7927: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7928: LD_EXP 2
7932: IFFALSE 7940
7934: PUSH
7935: LD_EXP 22
7939: AND
7940: IFFALSE 7949
7942: GO 7944
7944: DISABLE
// StreamSibBomb ;
7945: CALL 7950 0 0
7949: END
// export function StreamSibBomb ; var i , x , y ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
// result := false ;
7956: LD_ADDR_VAR 0 1
7960: PUSH
7961: LD_INT 0
7963: ST_TO_ADDR
// for i := 1 to 16 do
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: DOUBLE
7970: LD_INT 1
7972: DEC
7973: ST_TO_ADDR
7974: LD_INT 16
7976: PUSH
7977: FOR_TO
7978: IFFALSE 8177
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7980: LD_ADDR_VAR 0 3
7984: PUSH
7985: LD_INT 10
7987: PUSH
7988: LD_INT 20
7990: PUSH
7991: LD_INT 30
7993: PUSH
7994: LD_INT 40
7996: PUSH
7997: LD_INT 50
7999: PUSH
8000: LD_INT 60
8002: PUSH
8003: LD_INT 70
8005: PUSH
8006: LD_INT 80
8008: PUSH
8009: LD_INT 90
8011: PUSH
8012: LD_INT 100
8014: PUSH
8015: LD_INT 110
8017: PUSH
8018: LD_INT 120
8020: PUSH
8021: LD_INT 130
8023: PUSH
8024: LD_INT 140
8026: PUSH
8027: LD_INT 150
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 1
8049: PPUSH
8050: LD_INT 15
8052: PPUSH
8053: CALL_OW 12
8057: ARRAY
8058: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8059: LD_ADDR_VAR 0 4
8063: PUSH
8064: LD_INT 10
8066: PUSH
8067: LD_INT 20
8069: PUSH
8070: LD_INT 30
8072: PUSH
8073: LD_INT 40
8075: PUSH
8076: LD_INT 50
8078: PUSH
8079: LD_INT 60
8081: PUSH
8082: LD_INT 70
8084: PUSH
8085: LD_INT 80
8087: PUSH
8088: LD_INT 90
8090: PUSH
8091: LD_INT 100
8093: PUSH
8094: LD_INT 110
8096: PUSH
8097: LD_INT 120
8099: PUSH
8100: LD_INT 130
8102: PUSH
8103: LD_INT 140
8105: PUSH
8106: LD_INT 150
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 1
8128: PPUSH
8129: LD_INT 15
8131: PPUSH
8132: CALL_OW 12
8136: ARRAY
8137: ST_TO_ADDR
// if ValidHex ( x , y ) then
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_VAR 0 4
8147: PPUSH
8148: CALL_OW 488
8152: IFFALSE 8175
// begin result := [ x , y ] ;
8154: LD_ADDR_VAR 0 1
8158: PUSH
8159: LD_VAR 0 3
8163: PUSH
8164: LD_VAR 0 4
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// break ;
8173: GO 8177
// end ; end ;
8175: GO 7977
8177: POP
8178: POP
// if result then
8179: LD_VAR 0 1
8183: IFFALSE 8243
// begin ToLua ( playSibBomb() ) ;
8185: LD_STRING playSibBomb()
8187: PPUSH
8188: CALL_OW 559
// wait ( 0 0$14 ) ;
8192: LD_INT 490
8194: PPUSH
8195: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8199: LD_VAR 0 1
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 1
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PPUSH
8217: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8221: LD_VAR 0 1
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 1
8234: PUSH
8235: LD_INT 2
8237: ARRAY
8238: PPUSH
8239: CALL_OW 429
// end ; end ;
8243: LD_VAR 0 1
8247: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8248: LD_EXP 2
8252: IFFALSE 8260
8254: PUSH
8255: LD_EXP 24
8259: AND
8260: IFFALSE 8272
8262: GO 8264
8264: DISABLE
// YouLost (  ) ;
8265: LD_STRING 
8267: PPUSH
8268: CALL_OW 104
8272: END
// every 0 0$1 trigger StreamModeActive and sFog do
8273: LD_EXP 2
8277: IFFALSE 8285
8279: PUSH
8280: LD_EXP 23
8284: AND
8285: IFFALSE 8299
8287: GO 8289
8289: DISABLE
// FogOff ( your_side ) ;
8290: LD_OWVAR 2
8294: PPUSH
8295: CALL_OW 344
8299: END
// every 0 0$1 trigger StreamModeActive and sSun do
8300: LD_EXP 2
8304: IFFALSE 8312
8306: PUSH
8307: LD_EXP 25
8311: AND
8312: IFFALSE 8340
8314: GO 8316
8316: DISABLE
// begin solar_recharge_percent := 0 ;
8317: LD_ADDR_OWVAR 79
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8325: LD_INT 10500
8327: PPUSH
8328: CALL_OW 67
// solar_recharge_percent := 100 ;
8332: LD_ADDR_OWVAR 79
8336: PUSH
8337: LD_INT 100
8339: ST_TO_ADDR
// end ;
8340: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8341: LD_EXP 2
8345: IFFALSE 8353
8347: PUSH
8348: LD_EXP 26
8352: AND
8353: IFFALSE 8592
8355: GO 8357
8357: DISABLE
8358: LD_INT 0
8360: PPUSH
8361: PPUSH
8362: PPUSH
// begin tmp := [ ] ;
8363: LD_ADDR_VAR 0 3
8367: PUSH
8368: EMPTY
8369: ST_TO_ADDR
// for i := 1 to 6 do
8370: LD_ADDR_VAR 0 1
8374: PUSH
8375: DOUBLE
8376: LD_INT 1
8378: DEC
8379: ST_TO_ADDR
8380: LD_INT 6
8382: PUSH
8383: FOR_TO
8384: IFFALSE 8489
// begin uc_nation := nation_nature ;
8386: LD_ADDR_OWVAR 21
8390: PUSH
8391: LD_INT 0
8393: ST_TO_ADDR
// uc_side := 0 ;
8394: LD_ADDR_OWVAR 20
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8402: LD_ADDR_OWVAR 29
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 12
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: ST_TO_ADDR
// hc_agressivity := 20 ;
8417: LD_ADDR_OWVAR 35
8421: PUSH
8422: LD_INT 20
8424: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8425: LD_ADDR_OWVAR 28
8429: PUSH
8430: LD_INT 17
8432: ST_TO_ADDR
// hc_gallery :=  ;
8433: LD_ADDR_OWVAR 33
8437: PUSH
8438: LD_STRING 
8440: ST_TO_ADDR
// hc_name :=  ;
8441: LD_ADDR_OWVAR 26
8445: PUSH
8446: LD_STRING 
8448: ST_TO_ADDR
// un := CreateHuman ;
8449: LD_ADDR_VAR 0 2
8453: PUSH
8454: CALL_OW 44
8458: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_INT 1
8466: PPUSH
8467: CALL_OW 51
// tmp := tmp ^ un ;
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_VAR 0 3
8480: PUSH
8481: LD_VAR 0 2
8485: ADD
8486: ST_TO_ADDR
// end ;
8487: GO 8383
8489: POP
8490: POP
// repeat wait ( 0 0$1 ) ;
8491: LD_INT 35
8493: PPUSH
8494: CALL_OW 67
// for un in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 3
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8583
// begin if IsDead ( un ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 301
8520: IFFALSE 8540
// begin tmp := tmp diff un ;
8522: LD_ADDR_VAR 0 3
8526: PUSH
8527: LD_VAR 0 3
8531: PUSH
8532: LD_VAR 0 2
8536: DIFF
8537: ST_TO_ADDR
// continue ;
8538: GO 8508
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_INT 3
8547: PUSH
8548: LD_INT 22
8550: PUSH
8551: LD_INT 0
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: PPUSH
8567: LD_VAR 0 2
8571: PPUSH
8572: CALL_OW 74
8576: PPUSH
8577: CALL_OW 115
// end ;
8581: GO 8508
8583: POP
8584: POP
// until not tmp ;
8585: LD_VAR 0 3
8589: NOT
8590: IFFALSE 8491
// end ;
8592: PPOPN 3
8594: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8595: LD_EXP 2
8599: IFFALSE 8607
8601: PUSH
8602: LD_EXP 27
8606: AND
8607: IFFALSE 8661
8609: GO 8611
8611: DISABLE
// begin ToLua ( displayTroll(); ) ;
8612: LD_STRING displayTroll();
8614: PPUSH
8615: CALL_OW 559
// wait ( 3 3$00 ) ;
8619: LD_INT 6300
8621: PPUSH
8622: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8626: LD_STRING hideTroll();
8628: PPUSH
8629: CALL_OW 559
// wait ( 1 1$00 ) ;
8633: LD_INT 2100
8635: PPUSH
8636: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8640: LD_STRING displayTroll();
8642: PPUSH
8643: CALL_OW 559
// wait ( 1 1$00 ) ;
8647: LD_INT 2100
8649: PPUSH
8650: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8654: LD_STRING hideTroll();
8656: PPUSH
8657: CALL_OW 559
// end ;
8661: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8662: LD_EXP 2
8666: IFFALSE 8674
8668: PUSH
8669: LD_EXP 28
8673: AND
8674: IFFALSE 8737
8676: GO 8678
8678: DISABLE
8679: LD_INT 0
8681: PPUSH
// begin p := 0 ;
8682: LD_ADDR_VAR 0 1
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// repeat game_speed := 1 ;
8690: LD_ADDR_OWVAR 65
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8698: LD_INT 35
8700: PPUSH
8701: CALL_OW 67
// p := p + 1 ;
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: LD_VAR 0 1
8714: PUSH
8715: LD_INT 1
8717: PLUS
8718: ST_TO_ADDR
// until p >= 60 ;
8719: LD_VAR 0 1
8723: PUSH
8724: LD_INT 60
8726: GREATEREQUAL
8727: IFFALSE 8690
// game_speed := 4 ;
8729: LD_ADDR_OWVAR 65
8733: PUSH
8734: LD_INT 4
8736: ST_TO_ADDR
// end ;
8737: PPOPN 1
8739: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8740: LD_EXP 2
8744: IFFALSE 8752
8746: PUSH
8747: LD_EXP 29
8751: AND
8752: IFFALSE 8898
8754: GO 8756
8756: DISABLE
8757: LD_INT 0
8759: PPUSH
8760: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8761: LD_ADDR_VAR 0 1
8765: PUSH
8766: LD_INT 22
8768: PUSH
8769: LD_OWVAR 2
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 2
8780: PUSH
8781: LD_INT 30
8783: PUSH
8784: LD_INT 0
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 30
8793: PUSH
8794: LD_INT 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PPUSH
8810: CALL_OW 69
8814: ST_TO_ADDR
// if not depot then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8824
// exit ;
8822: GO 8898
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_VAR 0 1
8833: PUSH
8834: LD_INT 1
8836: PPUSH
8837: LD_VAR 0 1
8841: PPUSH
8842: CALL_OW 12
8846: ARRAY
8847: PPUSH
8848: CALL_OW 274
8852: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8853: LD_VAR 0 2
8857: PPUSH
8858: LD_INT 1
8860: PPUSH
8861: LD_INT 0
8863: PPUSH
8864: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8868: LD_VAR 0 2
8872: PPUSH
8873: LD_INT 2
8875: PPUSH
8876: LD_INT 0
8878: PPUSH
8879: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8883: LD_VAR 0 2
8887: PPUSH
8888: LD_INT 3
8890: PPUSH
8891: LD_INT 0
8893: PPUSH
8894: CALL_OW 277
// end ;
8898: PPOPN 2
8900: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8901: LD_EXP 2
8905: IFFALSE 8913
8907: PUSH
8908: LD_EXP 30
8912: AND
8913: IFFALSE 9010
8915: GO 8917
8917: DISABLE
8918: LD_INT 0
8920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8921: LD_ADDR_VAR 0 1
8925: PUSH
8926: LD_INT 22
8928: PUSH
8929: LD_OWVAR 2
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 23
8953: PUSH
8954: LD_INT 0
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: PPUSH
8970: CALL_OW 69
8974: ST_TO_ADDR
// if not tmp then
8975: LD_VAR 0 1
8979: NOT
8980: IFFALSE 8984
// exit ;
8982: GO 9010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8984: LD_VAR 0 1
8988: PUSH
8989: LD_INT 1
8991: PPUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 12
9001: ARRAY
9002: PPUSH
9003: LD_INT 200
9005: PPUSH
9006: CALL_OW 234
// end ;
9010: PPOPN 1
9012: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9013: LD_EXP 2
9017: IFFALSE 9025
9019: PUSH
9020: LD_EXP 31
9024: AND
9025: IFFALSE 9104
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9033: LD_ADDR_VAR 0 1
9037: PUSH
9038: LD_INT 22
9040: PUSH
9041: LD_OWVAR 2
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 21
9052: PUSH
9053: LD_INT 2
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: ST_TO_ADDR
// if not tmp then
9069: LD_VAR 0 1
9073: NOT
9074: IFFALSE 9078
// exit ;
9076: GO 9104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9078: LD_VAR 0 1
9082: PUSH
9083: LD_INT 1
9085: PPUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 12
9095: ARRAY
9096: PPUSH
9097: LD_INT 60
9099: PPUSH
9100: CALL_OW 234
// end ;
9104: PPOPN 1
9106: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9107: LD_EXP 2
9111: IFFALSE 9119
9113: PUSH
9114: LD_EXP 32
9118: AND
9119: IFFALSE 9218
9121: GO 9123
9123: DISABLE
9124: LD_INT 0
9126: PPUSH
9127: PPUSH
// begin enable ;
9128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_OWVAR 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 61
9148: PUSH
9149: EMPTY
9150: LIST
9151: PUSH
9152: LD_INT 33
9154: PUSH
9155: LD_INT 2
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 69
9171: ST_TO_ADDR
// if not tmp then
9172: LD_VAR 0 1
9176: NOT
9177: IFFALSE 9181
// exit ;
9179: GO 9218
// for i in tmp do
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_VAR 0 1
9190: PUSH
9191: FOR_IN
9192: IFFALSE 9216
// if IsControledBy ( i ) then
9194: LD_VAR 0 2
9198: PPUSH
9199: CALL_OW 312
9203: IFFALSE 9214
// ComUnlink ( i ) ;
9205: LD_VAR 0 2
9209: PPUSH
9210: CALL_OW 136
9214: GO 9191
9216: POP
9217: POP
// end ;
9218: PPOPN 2
9220: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9221: LD_EXP 2
9225: IFFALSE 9233
9227: PUSH
9228: LD_EXP 33
9232: AND
9233: IFFALSE 9373
9235: GO 9237
9237: DISABLE
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
// begin ToLua ( displayPowell(); ) ;
9242: LD_STRING displayPowell();
9244: PPUSH
9245: CALL_OW 559
// uc_side := 0 ;
9249: LD_ADDR_OWVAR 20
9253: PUSH
9254: LD_INT 0
9256: ST_TO_ADDR
// uc_nation := 2 ;
9257: LD_ADDR_OWVAR 21
9261: PUSH
9262: LD_INT 2
9264: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9265: LD_ADDR_OWVAR 37
9269: PUSH
9270: LD_INT 14
9272: ST_TO_ADDR
// vc_engine := engine_siberite ;
9273: LD_ADDR_OWVAR 39
9277: PUSH
9278: LD_INT 3
9280: ST_TO_ADDR
// vc_control := control_apeman ;
9281: LD_ADDR_OWVAR 38
9285: PUSH
9286: LD_INT 5
9288: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9289: LD_ADDR_OWVAR 40
9293: PUSH
9294: LD_INT 29
9296: ST_TO_ADDR
// un := CreateVehicle ;
9297: LD_ADDR_VAR 0 2
9301: PUSH
9302: CALL_OW 45
9306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 1
9314: PPUSH
9315: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9319: LD_INT 35
9321: PPUSH
9322: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: LD_INT 22
9333: PUSH
9334: LD_OWVAR 2
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: PPUSH
9348: LD_VAR 0 2
9352: PPUSH
9353: CALL_OW 74
9357: PPUSH
9358: CALL_OW 115
// until IsDead ( un ) ;
9362: LD_VAR 0 2
9366: PPUSH
9367: CALL_OW 301
9371: IFFALSE 9319
// end ;
9373: PPOPN 2
9375: END
// every 0 0$1 trigger StreamModeActive and sStu do
9376: LD_EXP 2
9380: IFFALSE 9388
9382: PUSH
9383: LD_EXP 41
9387: AND
9388: IFFALSE 9404
9390: GO 9392
9392: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9393: LD_STRING displayStucuk();
9395: PPUSH
9396: CALL_OW 559
// ResetFog ;
9400: CALL_OW 335
// end ;
9404: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9405: LD_EXP 2
9409: IFFALSE 9417
9411: PUSH
9412: LD_EXP 34
9416: AND
9417: IFFALSE 9558
9419: GO 9421
9421: DISABLE
9422: LD_INT 0
9424: PPUSH
9425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9426: LD_ADDR_VAR 0 2
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_OWVAR 2
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 1
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: ST_TO_ADDR
// if not tmp then
9462: LD_VAR 0 2
9466: NOT
9467: IFFALSE 9471
// exit ;
9469: GO 9558
// un := tmp [ rand ( 1 , tmp ) ] ;
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_VAR 0 2
9480: PUSH
9481: LD_INT 1
9483: PPUSH
9484: LD_VAR 0 2
9488: PPUSH
9489: CALL_OW 12
9493: ARRAY
9494: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9495: LD_VAR 0 1
9499: PPUSH
9500: LD_INT 0
9502: PPUSH
9503: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_OWVAR 3
9516: PUSH
9517: LD_VAR 0 1
9521: DIFF
9522: PPUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL_OW 74
9532: PPUSH
9533: CALL_OW 115
// wait ( 0 0$20 ) ;
9537: LD_INT 700
9539: PPUSH
9540: CALL_OW 67
// SetSide ( un , your_side ) ;
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_OWVAR 2
9553: PPUSH
9554: CALL_OW 235
// end ;
9558: PPOPN 2
9560: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9561: LD_EXP 2
9565: IFFALSE 9573
9567: PUSH
9568: LD_EXP 35
9572: AND
9573: IFFALSE 9679
9575: GO 9577
9577: DISABLE
9578: LD_INT 0
9580: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9581: LD_ADDR_VAR 0 1
9585: PUSH
9586: LD_INT 22
9588: PUSH
9589: LD_OWVAR 2
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 0
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 30
9613: PUSH
9614: LD_INT 1
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 69
9634: ST_TO_ADDR
// if not depot then
9635: LD_VAR 0 1
9639: NOT
9640: IFFALSE 9644
// exit ;
9642: GO 9679
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9644: LD_VAR 0 1
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 250
9657: PPUSH
9658: LD_VAR 0 1
9662: PUSH
9663: LD_INT 1
9665: ARRAY
9666: PPUSH
9667: CALL_OW 251
9671: PPUSH
9672: LD_INT 70
9674: PPUSH
9675: CALL_OW 495
// end ;
9679: PPOPN 1
9681: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9682: LD_EXP 2
9686: IFFALSE 9694
9688: PUSH
9689: LD_EXP 36
9693: AND
9694: IFFALSE 9905
9696: GO 9698
9698: DISABLE
9699: LD_INT 0
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9706: LD_ADDR_VAR 0 5
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if not tmp then
9742: LD_VAR 0 5
9746: NOT
9747: IFFALSE 9751
// exit ;
9749: GO 9905
// for i in tmp do
9751: LD_ADDR_VAR 0 1
9755: PUSH
9756: LD_VAR 0 5
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9903
// begin d := rand ( 0 , 5 ) ;
9764: LD_ADDR_VAR 0 4
9768: PUSH
9769: LD_INT 0
9771: PPUSH
9772: LD_INT 5
9774: PPUSH
9775: CALL_OW 12
9779: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 250
9794: PPUSH
9795: LD_VAR 0 4
9799: PPUSH
9800: LD_INT 3
9802: PPUSH
9803: LD_INT 12
9805: PPUSH
9806: CALL_OW 12
9810: PPUSH
9811: CALL_OW 272
9815: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 1
9825: PPUSH
9826: CALL_OW 251
9830: PPUSH
9831: LD_VAR 0 4
9835: PPUSH
9836: LD_INT 3
9838: PPUSH
9839: LD_INT 12
9841: PPUSH
9842: CALL_OW 12
9846: PPUSH
9847: CALL_OW 273
9851: ST_TO_ADDR
// if ValidHex ( x , y ) then
9852: LD_VAR 0 2
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: CALL_OW 488
9866: IFFALSE 9901
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9868: LD_VAR 0 1
9872: PPUSH
9873: LD_VAR 0 2
9877: PPUSH
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_INT 3
9885: PPUSH
9886: LD_INT 6
9888: PPUSH
9889: CALL_OW 12
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 483
// end ;
9901: GO 9761
9903: POP
9904: POP
// end ;
9905: PPOPN 5
9907: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9908: LD_EXP 2
9912: IFFALSE 9920
9914: PUSH
9915: LD_EXP 37
9919: AND
9920: IFFALSE 10014
9922: GO 9924
9924: DISABLE
9925: LD_INT 0
9927: PPUSH
9928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: LD_INT 22
9936: PUSH
9937: LD_OWVAR 2
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 32
9948: PUSH
9949: LD_INT 1
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: ST_TO_ADDR
// if not tmp then
9976: LD_VAR 0 2
9980: NOT
9981: IFFALSE 9985
// exit ;
9983: GO 10014
// for i in tmp do
9985: LD_ADDR_VAR 0 1
9989: PUSH
9990: LD_VAR 0 2
9994: PUSH
9995: FOR_IN
9996: IFFALSE 10012
// SetFuel ( i , 0 ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: LD_INT 0
10005: PPUSH
10006: CALL_OW 240
10010: GO 9995
10012: POP
10013: POP
// end ;
10014: PPOPN 2
10016: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10017: LD_EXP 2
10021: IFFALSE 10029
10023: PUSH
10024: LD_EXP 38
10028: AND
10029: IFFALSE 10095
10031: GO 10033
10033: DISABLE
10034: LD_INT 0
10036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10037: LD_ADDR_VAR 0 1
10041: PUSH
10042: LD_INT 22
10044: PUSH
10045: LD_OWVAR 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 30
10056: PUSH
10057: LD_INT 29
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PPUSH
10068: CALL_OW 69
10072: ST_TO_ADDR
// if not tmp then
10073: LD_VAR 0 1
10077: NOT
10078: IFFALSE 10082
// exit ;
10080: GO 10095
// DestroyUnit ( tmp [ 1 ] ) ;
10082: LD_VAR 0 1
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: PPUSH
10091: CALL_OW 65
// end ;
10095: PPOPN 1
10097: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10098: LD_EXP 2
10102: IFFALSE 10110
10104: PUSH
10105: LD_EXP 40
10109: AND
10110: IFFALSE 10239
10112: GO 10114
10114: DISABLE
10115: LD_INT 0
10117: PPUSH
// begin uc_side := 0 ;
10118: LD_ADDR_OWVAR 20
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// uc_nation := nation_arabian ;
10126: LD_ADDR_OWVAR 21
10130: PUSH
10131: LD_INT 2
10133: ST_TO_ADDR
// hc_gallery :=  ;
10134: LD_ADDR_OWVAR 33
10138: PUSH
10139: LD_STRING 
10141: ST_TO_ADDR
// hc_name :=  ;
10142: LD_ADDR_OWVAR 26
10146: PUSH
10147: LD_STRING 
10149: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10150: LD_INT 1
10152: PPUSH
10153: LD_INT 11
10155: PPUSH
10156: LD_INT 10
10158: PPUSH
10159: CALL_OW 380
// un := CreateHuman ;
10163: LD_ADDR_VAR 0 1
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10185: LD_INT 35
10187: PPUSH
10188: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_INT 22
10199: PUSH
10200: LD_OWVAR 2
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PPUSH
10209: CALL_OW 69
10213: PPUSH
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 74
10223: PPUSH
10224: CALL_OW 115
// until IsDead ( un ) ;
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 301
10237: IFFALSE 10185
// end ;
10239: PPOPN 1
10241: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10242: LD_EXP 2
10246: IFFALSE 10254
10248: PUSH
10249: LD_EXP 42
10253: AND
10254: IFFALSE 10266
10256: GO 10258
10258: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10259: LD_STRING earthquake(getX(game), 0, 32)
10261: PPUSH
10262: CALL_OW 559
10266: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10267: LD_EXP 2
10271: IFFALSE 10279
10273: PUSH
10274: LD_EXP 43
10278: AND
10279: IFFALSE 10370
10281: GO 10283
10283: DISABLE
10284: LD_INT 0
10286: PPUSH
// begin enable ;
10287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10288: LD_ADDR_VAR 0 1
10292: PUSH
10293: LD_INT 22
10295: PUSH
10296: LD_OWVAR 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 21
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 33
10317: PUSH
10318: LD_INT 3
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: PPUSH
10330: CALL_OW 69
10334: ST_TO_ADDR
// if not tmp then
10335: LD_VAR 0 1
10339: NOT
10340: IFFALSE 10344
// exit ;
10342: GO 10370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10344: LD_VAR 0 1
10348: PUSH
10349: LD_INT 1
10351: PPUSH
10352: LD_VAR 0 1
10356: PPUSH
10357: CALL_OW 12
10361: ARRAY
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 234
// end ;
10370: PPOPN 1
10372: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10373: LD_EXP 2
10377: IFFALSE 10385
10379: PUSH
10380: LD_EXP 44
10384: AND
10385: IFFALSE 10526
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10526
// un := tmp [ rand ( 1 , tmp ) ] ;
10440: LD_ADDR_VAR 0 2
10444: PUSH
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 1
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: CALL_OW 12
10462: ARRAY
10463: ST_TO_ADDR
// if Crawls ( un ) then
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 318
10473: IFFALSE 10484
// ComWalk ( un ) ;
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10484: LD_VAR 0 2
10488: PPUSH
10489: LD_INT 9
10491: PPUSH
10492: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10496: LD_INT 28
10498: PPUSH
10499: LD_OWVAR 2
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10511: LD_INT 29
10513: PPUSH
10514: LD_OWVAR 2
10518: PPUSH
10519: LD_INT 2
10521: PPUSH
10522: CALL_OW 322
// end ;
10526: PPOPN 3
10528: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10529: LD_EXP 2
10533: IFFALSE 10541
10535: PUSH
10536: LD_EXP 45
10540: AND
10541: IFFALSE 10652
10543: GO 10545
10545: DISABLE
10546: LD_INT 0
10548: PPUSH
10549: PPUSH
10550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10551: LD_ADDR_VAR 0 3
10555: PUSH
10556: LD_INT 22
10558: PUSH
10559: LD_OWVAR 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 25
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: ST_TO_ADDR
// if not tmp then
10587: LD_VAR 0 3
10591: NOT
10592: IFFALSE 10596
// exit ;
10594: GO 10652
// un := tmp [ rand ( 1 , tmp ) ] ;
10596: LD_ADDR_VAR 0 2
10600: PUSH
10601: LD_VAR 0 3
10605: PUSH
10606: LD_INT 1
10608: PPUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: CALL_OW 12
10618: ARRAY
10619: ST_TO_ADDR
// if Crawls ( un ) then
10620: LD_VAR 0 2
10624: PPUSH
10625: CALL_OW 318
10629: IFFALSE 10640
// ComWalk ( un ) ;
10631: LD_VAR 0 2
10635: PPUSH
10636: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10640: LD_VAR 0 2
10644: PPUSH
10645: LD_INT 8
10647: PPUSH
10648: CALL_OW 336
// end ;
10652: PPOPN 3
10654: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10655: LD_EXP 2
10659: IFFALSE 10667
10661: PUSH
10662: LD_EXP 46
10666: AND
10667: IFFALSE 10811
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_INT 22
10683: PUSH
10684: LD_OWVAR 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 21
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 34
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 34
10718: PUSH
10719: LD_INT 51
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 34
10728: PUSH
10729: LD_INT 32
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 69
10751: ST_TO_ADDR
// if not tmp then
10752: LD_VAR 0 2
10756: NOT
10757: IFFALSE 10761
// exit ;
10759: GO 10811
// for i in tmp do
10761: LD_ADDR_VAR 0 1
10765: PUSH
10766: LD_VAR 0 2
10770: PUSH
10771: FOR_IN
10772: IFFALSE 10809
// if GetCargo ( i , mat_artifact ) = 0 then
10774: LD_VAR 0 1
10778: PPUSH
10779: LD_INT 4
10781: PPUSH
10782: CALL_OW 289
10786: PUSH
10787: LD_INT 0
10789: EQUAL
10790: IFFALSE 10807
// SetCargo ( i , mat_siberit , 100 ) ;
10792: LD_VAR 0 1
10796: PPUSH
10797: LD_INT 3
10799: PPUSH
10800: LD_INT 100
10802: PPUSH
10803: CALL_OW 290
10807: GO 10771
10809: POP
10810: POP
// end ;
10811: PPOPN 2
10813: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10814: LD_EXP 2
10818: IFFALSE 10826
10820: PUSH
10821: LD_EXP 47
10825: AND
10826: IFFALSE 11009
10828: GO 10830
10830: DISABLE
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 22
10842: PUSH
10843: LD_OWVAR 2
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: ST_TO_ADDR
// if not tmp then
10857: LD_VAR 0 2
10861: NOT
10862: IFFALSE 10866
// exit ;
10864: GO 11009
// for i := 1 to 2 do
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: DOUBLE
10872: LD_INT 1
10874: DEC
10875: ST_TO_ADDR
10876: LD_INT 2
10878: PUSH
10879: FOR_TO
10880: IFFALSE 11007
// begin uc_side := your_side ;
10882: LD_ADDR_OWVAR 20
10886: PUSH
10887: LD_OWVAR 2
10891: ST_TO_ADDR
// uc_nation := nation_american ;
10892: LD_ADDR_OWVAR 21
10896: PUSH
10897: LD_INT 1
10899: ST_TO_ADDR
// vc_chassis := us_morphling ;
10900: LD_ADDR_OWVAR 37
10904: PUSH
10905: LD_INT 5
10907: ST_TO_ADDR
// vc_engine := engine_siberite ;
10908: LD_ADDR_OWVAR 39
10912: PUSH
10913: LD_INT 3
10915: ST_TO_ADDR
// vc_control := control_computer ;
10916: LD_ADDR_OWVAR 38
10920: PUSH
10921: LD_INT 3
10923: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10924: LD_ADDR_OWVAR 40
10928: PUSH
10929: LD_INT 10
10931: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10932: LD_VAR 0 2
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: CALL_OW 310
10945: NOT
10946: IFFALSE 10993
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10948: CALL_OW 45
10952: PPUSH
10953: LD_VAR 0 2
10957: PUSH
10958: LD_INT 1
10960: ARRAY
10961: PPUSH
10962: CALL_OW 250
10966: PPUSH
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 1
10974: ARRAY
10975: PPUSH
10976: CALL_OW 251
10980: PPUSH
10981: LD_INT 12
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 50
10991: GO 11005
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10993: CALL_OW 45
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 51
// end ;
11005: GO 10879
11007: POP
11008: POP
// end ;
11009: PPOPN 2
11011: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11012: LD_EXP 2
11016: IFFALSE 11024
11018: PUSH
11019: LD_EXP 48
11023: AND
11024: IFFALSE 11246
11026: GO 11028
11028: DISABLE
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
11034: PPUSH
11035: PPUSH
11036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11037: LD_ADDR_VAR 0 6
11041: PUSH
11042: LD_INT 22
11044: PUSH
11045: LD_OWVAR 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 3
11066: PUSH
11067: LD_INT 23
11069: PUSH
11070: LD_INT 0
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: PPUSH
11086: CALL_OW 69
11090: ST_TO_ADDR
// if not tmp then
11091: LD_VAR 0 6
11095: NOT
11096: IFFALSE 11100
// exit ;
11098: GO 11246
// s1 := rand ( 1 , 4 ) ;
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_INT 1
11107: PPUSH
11108: LD_INT 4
11110: PPUSH
11111: CALL_OW 12
11115: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11116: LD_ADDR_VAR 0 4
11120: PUSH
11121: LD_VAR 0 6
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PPUSH
11130: LD_VAR 0 2
11134: PPUSH
11135: CALL_OW 259
11139: ST_TO_ADDR
// if s1 = 1 then
11140: LD_VAR 0 2
11144: PUSH
11145: LD_INT 1
11147: EQUAL
11148: IFFALSE 11168
// s2 := rand ( 2 , 4 ) else
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: LD_INT 2
11157: PPUSH
11158: LD_INT 4
11160: PPUSH
11161: CALL_OW 12
11165: ST_TO_ADDR
11166: GO 11176
// s2 := 1 ;
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11176: LD_ADDR_VAR 0 5
11180: PUSH
11181: LD_VAR 0 6
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PPUSH
11190: LD_VAR 0 3
11194: PPUSH
11195: CALL_OW 259
11199: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11200: LD_VAR 0 6
11204: PUSH
11205: LD_INT 1
11207: ARRAY
11208: PPUSH
11209: LD_VAR 0 2
11213: PPUSH
11214: LD_VAR 0 5
11218: PPUSH
11219: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11223: LD_VAR 0 6
11227: PUSH
11228: LD_INT 1
11230: ARRAY
11231: PPUSH
11232: LD_VAR 0 3
11236: PPUSH
11237: LD_VAR 0 4
11241: PPUSH
11242: CALL_OW 237
// end ;
11246: PPOPN 6
11248: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11249: LD_EXP 2
11253: IFFALSE 11261
11255: PUSH
11256: LD_EXP 49
11260: AND
11261: IFFALSE 11340
11263: GO 11265
11265: DISABLE
11266: LD_INT 0
11268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_OWVAR 2
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 30
11288: PUSH
11289: LD_INT 3
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PPUSH
11300: CALL_OW 69
11304: ST_TO_ADDR
// if not tmp then
11305: LD_VAR 0 1
11309: NOT
11310: IFFALSE 11314
// exit ;
11312: GO 11340
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11314: LD_VAR 0 1
11318: PUSH
11319: LD_INT 1
11321: PPUSH
11322: LD_VAR 0 1
11326: PPUSH
11327: CALL_OW 12
11331: ARRAY
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 234
// end ;
11340: PPOPN 1
11342: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11343: LD_EXP 2
11347: IFFALSE 11355
11349: PUSH
11350: LD_EXP 50
11354: AND
11355: IFFALSE 11467
11357: GO 11359
11359: DISABLE
11360: LD_INT 0
11362: PPUSH
11363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_OWVAR 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 27
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 30
11396: PUSH
11397: LD_INT 26
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 30
11406: PUSH
11407: LD_INT 28
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not tmp then
11429: LD_VAR 0 2
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11467
// for i in tmp do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_VAR 0 2
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11465
// SetLives ( i , 1 ) ;
11451: LD_VAR 0 1
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 234
11463: GO 11448
11465: POP
11466: POP
// end ;
11467: PPOPN 2
11469: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11470: LD_EXP 2
11474: IFFALSE 11482
11476: PUSH
11477: LD_EXP 51
11481: AND
11482: IFFALSE 11769
11484: GO 11486
11486: DISABLE
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
// begin i := rand ( 1 , 7 ) ;
11492: LD_ADDR_VAR 0 1
11496: PUSH
11497: LD_INT 1
11499: PPUSH
11500: LD_INT 7
11502: PPUSH
11503: CALL_OW 12
11507: ST_TO_ADDR
// case i of 1 :
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 1
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11531
11521: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11522: LD_STRING earthquake(getX(game), 0, 32)
11524: PPUSH
11525: CALL_OW 559
11529: GO 11769
11531: LD_INT 2
11533: DOUBLE
11534: EQUAL
11535: IFTRUE 11539
11537: GO 11553
11539: POP
// begin ToLua ( displayStucuk(); ) ;
11540: LD_STRING displayStucuk();
11542: PPUSH
11543: CALL_OW 559
// ResetFog ;
11547: CALL_OW 335
// end ; 3 :
11551: GO 11769
11553: LD_INT 3
11555: DOUBLE
11556: EQUAL
11557: IFTRUE 11561
11559: GO 11665
11561: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_OWVAR 2
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: ST_TO_ADDR
// if not tmp then
11598: LD_VAR 0 2
11602: NOT
11603: IFFALSE 11607
// exit ;
11605: GO 11769
// un := tmp [ rand ( 1 , tmp ) ] ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 2
11616: PUSH
11617: LD_INT 1
11619: PPUSH
11620: LD_VAR 0 2
11624: PPUSH
11625: CALL_OW 12
11629: ARRAY
11630: ST_TO_ADDR
// if Crawls ( un ) then
11631: LD_VAR 0 3
11635: PPUSH
11636: CALL_OW 318
11640: IFFALSE 11651
// ComWalk ( un ) ;
11642: LD_VAR 0 3
11646: PPUSH
11647: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 8
11658: PPUSH
11659: CALL_OW 336
// end ; 4 :
11663: GO 11769
11665: LD_INT 4
11667: DOUBLE
11668: EQUAL
11669: IFTRUE 11673
11671: GO 11747
11673: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11674: LD_ADDR_VAR 0 2
11678: PUSH
11679: LD_INT 22
11681: PUSH
11682: LD_OWVAR 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 30
11693: PUSH
11694: LD_INT 29
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 69
11709: ST_TO_ADDR
// if not tmp then
11710: LD_VAR 0 2
11714: NOT
11715: IFFALSE 11719
// exit ;
11717: GO 11769
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11719: LD_VAR 0 2
11723: PUSH
11724: LD_INT 1
11726: ARRAY
11727: PPUSH
11728: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11732: LD_VAR 0 2
11736: PUSH
11737: LD_INT 1
11739: ARRAY
11740: PPUSH
11741: CALL_OW 65
// end ; 5 .. 7 :
11745: GO 11769
11747: LD_INT 5
11749: DOUBLE
11750: GREATEREQUAL
11751: IFFALSE 11759
11753: LD_INT 7
11755: DOUBLE
11756: LESSEQUAL
11757: IFTRUE 11761
11759: GO 11768
11761: POP
// StreamSibBomb ; end ;
11762: CALL 7950 0 0
11766: GO 11769
11768: POP
// end ;
11769: PPOPN 3
11771: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11772: LD_EXP 2
11776: IFFALSE 11784
11778: PUSH
11779: LD_EXP 52
11783: AND
11784: IFFALSE 11940
11786: GO 11788
11788: DISABLE
11789: LD_INT 0
11791: PPUSH
11792: PPUSH
11793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11794: LD_ADDR_VAR 0 2
11798: PUSH
11799: LD_INT 81
11801: PUSH
11802: LD_OWVAR 2
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 21
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 21
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 69
11847: ST_TO_ADDR
// if not tmp then
11848: LD_VAR 0 2
11852: NOT
11853: IFFALSE 11857
// exit ;
11855: GO 11940
// p := 0 ;
11857: LD_ADDR_VAR 0 3
11861: PUSH
11862: LD_INT 0
11864: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11865: LD_INT 35
11867: PPUSH
11868: CALL_OW 67
// p := p + 1 ;
11872: LD_ADDR_VAR 0 3
11876: PUSH
11877: LD_VAR 0 3
11881: PUSH
11882: LD_INT 1
11884: PLUS
11885: ST_TO_ADDR
// for i in tmp do
11886: LD_ADDR_VAR 0 1
11890: PUSH
11891: LD_VAR 0 2
11895: PUSH
11896: FOR_IN
11897: IFFALSE 11928
// if GetLives ( i ) < 1000 then
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 256
11908: PUSH
11909: LD_INT 1000
11911: LESS
11912: IFFALSE 11926
// SetLives ( i , 1000 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_INT 1000
11921: PPUSH
11922: CALL_OW 234
11926: GO 11896
11928: POP
11929: POP
// until p > 20 ;
11930: LD_VAR 0 3
11934: PUSH
11935: LD_INT 20
11937: GREATER
11938: IFFALSE 11865
// end ;
11940: PPOPN 3
11942: END
// every 0 0$1 trigger StreamModeActive and sTime do
11943: LD_EXP 2
11947: IFFALSE 11955
11949: PUSH
11950: LD_EXP 53
11954: AND
11955: IFFALSE 11990
11957: GO 11959
11959: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11960: LD_INT 28
11962: PPUSH
11963: LD_OWVAR 2
11967: PPUSH
11968: LD_INT 2
11970: PPUSH
11971: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11975: LD_INT 30
11977: PPUSH
11978: LD_OWVAR 2
11982: PPUSH
11983: LD_INT 2
11985: PPUSH
11986: CALL_OW 322
// end ;
11990: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11991: LD_EXP 2
11995: IFFALSE 12003
11997: PUSH
11998: LD_EXP 54
12002: AND
12003: IFFALSE 12124
12005: GO 12007
12007: DISABLE
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12012: LD_ADDR_VAR 0 2
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_OWVAR 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 21
12031: PUSH
12032: LD_INT 1
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: LD_INT 23
12044: PUSH
12045: LD_INT 0
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 69
12065: ST_TO_ADDR
// if not tmp then
12066: LD_VAR 0 2
12070: NOT
12071: IFFALSE 12075
// exit ;
12073: GO 12124
// for i in tmp do
12075: LD_ADDR_VAR 0 1
12079: PUSH
12080: LD_VAR 0 2
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12122
// begin if Crawls ( i ) then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 318
12097: IFFALSE 12108
// ComWalk ( i ) ;
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 138
// SetClass ( i , 2 ) ;
12108: LD_VAR 0 1
12112: PPUSH
12113: LD_INT 2
12115: PPUSH
12116: CALL_OW 336
// end ;
12120: GO 12085
12122: POP
12123: POP
// end ;
12124: PPOPN 2
12126: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12127: LD_EXP 2
12131: IFFALSE 12139
12133: PUSH
12134: LD_EXP 55
12138: AND
12139: IFFALSE 12429
12141: GO 12143
12143: DISABLE
12144: LD_INT 0
12146: PPUSH
12147: PPUSH
12148: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12149: LD_OWVAR 2
12153: PPUSH
12154: LD_INT 9
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12167: LD_INT 9
12169: PPUSH
12170: LD_OWVAR 2
12174: PPUSH
12175: CALL_OW 343
// uc_side := 9 ;
12179: LD_ADDR_OWVAR 20
12183: PUSH
12184: LD_INT 9
12186: ST_TO_ADDR
// uc_nation := 2 ;
12187: LD_ADDR_OWVAR 21
12191: PUSH
12192: LD_INT 2
12194: ST_TO_ADDR
// hc_name := Dark Warrior ;
12195: LD_ADDR_OWVAR 26
12199: PUSH
12200: LD_STRING Dark Warrior
12202: ST_TO_ADDR
// hc_gallery :=  ;
12203: LD_ADDR_OWVAR 33
12207: PUSH
12208: LD_STRING 
12210: ST_TO_ADDR
// hc_noskilllimit := true ;
12211: LD_ADDR_OWVAR 76
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12219: LD_ADDR_OWVAR 31
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 30
12229: PUSH
12230: LD_INT 30
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: ST_TO_ADDR
// un := CreateHuman ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: CALL_OW 44
12251: ST_TO_ADDR
// hc_noskilllimit := false ;
12252: LD_ADDR_OWVAR 76
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12260: LD_VAR 0 3
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 51
// ToLua ( playRanger() ) ;
12272: LD_STRING playRanger()
12274: PPUSH
12275: CALL_OW 559
// p := 0 ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// p := p + 1 ;
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 2
12303: PUSH
12304: LD_INT 1
12306: PLUS
12307: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12308: LD_VAR 0 3
12312: PPUSH
12313: CALL_OW 256
12317: PUSH
12318: LD_INT 1000
12320: LESS
12321: IFFALSE 12335
// SetLives ( un , 1000 ) ;
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 1000
12330: PPUSH
12331: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12335: LD_VAR 0 3
12339: PPUSH
12340: LD_INT 81
12342: PUSH
12343: LD_OWVAR 2
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 91
12354: PUSH
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: CALL_OW 74
12386: PPUSH
12387: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12391: LD_VAR 0 2
12395: PUSH
12396: LD_INT 80
12398: GREATER
12399: IFTRUE 12412
12401: PUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: CALL_OW 301
12411: OR
12412: IFFALSE 12287
// if un then
12414: LD_VAR 0 3
12418: IFFALSE 12429
// RemoveUnit ( un ) ;
12420: LD_VAR 0 3
12424: PPUSH
12425: CALL_OW 64
// end ;
12429: PPOPN 3
12431: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12432: LD_EXP 56
12436: IFFALSE 12552
12438: GO 12440
12440: DISABLE
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12446: LD_ADDR_VAR 0 2
12450: PUSH
12451: LD_INT 81
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 21
12465: PUSH
12466: LD_INT 1
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12482: LD_STRING playComputer()
12484: PPUSH
12485: CALL_OW 559
// if not tmp then
12489: LD_VAR 0 2
12493: NOT
12494: IFFALSE 12498
// exit ;
12496: GO 12552
// for i in tmp do
12498: LD_ADDR_VAR 0 1
12502: PUSH
12503: LD_VAR 0 2
12507: PUSH
12508: FOR_IN
12509: IFFALSE 12550
// for j := 1 to 4 do
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: DOUBLE
12517: LD_INT 1
12519: DEC
12520: ST_TO_ADDR
12521: LD_INT 4
12523: PUSH
12524: FOR_TO
12525: IFFALSE 12546
// SetSkill ( i , j , 10 ) ;
12527: LD_VAR 0 1
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 10
12539: PPUSH
12540: CALL_OW 237
12544: GO 12524
12546: POP
12547: POP
12548: GO 12508
12550: POP
12551: POP
// end ;
12552: PPOPN 3
12554: END
// every 0 0$1 trigger s30 do var i , tmp ;
12555: LD_EXP 57
12559: IFFALSE 12628
12561: GO 12563
12563: DISABLE
12564: LD_INT 0
12566: PPUSH
12567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12568: LD_ADDR_VAR 0 2
12572: PUSH
12573: LD_INT 22
12575: PUSH
12576: LD_OWVAR 2
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: ST_TO_ADDR
// if not tmp then
12590: LD_VAR 0 2
12594: NOT
12595: IFFALSE 12599
// exit ;
12597: GO 12628
// for i in tmp do
12599: LD_ADDR_VAR 0 1
12603: PUSH
12604: LD_VAR 0 2
12608: PUSH
12609: FOR_IN
12610: IFFALSE 12626
// SetLives ( i , 300 ) ;
12612: LD_VAR 0 1
12616: PPUSH
12617: LD_INT 300
12619: PPUSH
12620: CALL_OW 234
12624: GO 12609
12626: POP
12627: POP
// end ;
12628: PPOPN 2
12630: END
// every 0 0$1 trigger s60 do var i , tmp ;
12631: LD_EXP 58
12635: IFFALSE 12704
12637: GO 12639
12639: DISABLE
12640: LD_INT 0
12642: PPUSH
12643: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12644: LD_ADDR_VAR 0 2
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_OWVAR 2
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 69
12665: ST_TO_ADDR
// if not tmp then
12666: LD_VAR 0 2
12670: NOT
12671: IFFALSE 12675
// exit ;
12673: GO 12704
// for i in tmp do
12675: LD_ADDR_VAR 0 1
12679: PUSH
12680: LD_VAR 0 2
12684: PUSH
12685: FOR_IN
12686: IFFALSE 12702
// SetLives ( i , 600 ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_INT 600
12695: PPUSH
12696: CALL_OW 234
12700: GO 12685
12702: POP
12703: POP
// end ;
12704: PPOPN 2
12706: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12707: LD_INT 0
12709: PPUSH
// case cmd of 301 :
12710: LD_VAR 0 1
12714: PUSH
12715: LD_INT 301
12717: DOUBLE
12718: EQUAL
12719: IFTRUE 12723
12721: GO 12755
12723: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12724: LD_VAR 0 6
12728: PPUSH
12729: LD_VAR 0 7
12733: PPUSH
12734: LD_VAR 0 8
12738: PPUSH
12739: LD_VAR 0 4
12743: PPUSH
12744: LD_VAR 0 5
12748: PPUSH
12749: CALL 13968 0 5
12753: GO 12876
12755: LD_INT 302
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12800
12763: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12764: LD_VAR 0 6
12768: PPUSH
12769: LD_VAR 0 7
12773: PPUSH
12774: LD_VAR 0 8
12778: PPUSH
12779: LD_VAR 0 9
12783: PPUSH
12784: LD_VAR 0 4
12788: PPUSH
12789: LD_VAR 0 5
12793: PPUSH
12794: CALL 14059 0 6
12798: GO 12876
12800: LD_INT 303
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12845
12808: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12809: LD_VAR 0 6
12813: PPUSH
12814: LD_VAR 0 7
12818: PPUSH
12819: LD_VAR 0 8
12823: PPUSH
12824: LD_VAR 0 9
12828: PPUSH
12829: LD_VAR 0 4
12833: PPUSH
12834: LD_VAR 0 5
12838: PPUSH
12839: CALL 12881 0 6
12843: GO 12876
12845: LD_INT 304
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 12875
12853: POP
// hHackTeleport ( unit , x , y ) ; end ;
12854: LD_VAR 0 2
12858: PPUSH
12859: LD_VAR 0 4
12863: PPUSH
12864: LD_VAR 0 5
12868: PPUSH
12869: CALL 14652 0 3
12873: GO 12876
12875: POP
// end ;
12876: LD_VAR 0 12
12880: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12881: LD_INT 0
12883: PPUSH
12884: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12885: LD_VAR 0 1
12889: PUSH
12890: LD_INT 1
12892: LESS
12893: IFTRUE 12905
12895: PUSH
12896: LD_VAR 0 1
12900: PUSH
12901: LD_INT 3
12903: GREATER
12904: OR
12905: IFTRUE 12923
12907: PUSH
12908: LD_VAR 0 5
12912: PPUSH
12913: LD_VAR 0 6
12917: PPUSH
12918: CALL_OW 428
12922: OR
12923: IFFALSE 12927
// exit ;
12925: GO 13655
// uc_side := your_side ;
12927: LD_ADDR_OWVAR 20
12931: PUSH
12932: LD_OWVAR 2
12936: ST_TO_ADDR
// uc_nation := nation ;
12937: LD_ADDR_OWVAR 21
12941: PUSH
12942: LD_VAR 0 1
12946: ST_TO_ADDR
// bc_level = 1 ;
12947: LD_ADDR_OWVAR 43
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// case btype of 1 :
12955: LD_VAR 0 2
12959: PUSH
12960: LD_INT 1
12962: DOUBLE
12963: EQUAL
12964: IFTRUE 12968
12966: GO 12979
12968: POP
// bc_type := b_depot ; 2 :
12969: LD_ADDR_OWVAR 42
12973: PUSH
12974: LD_INT 0
12976: ST_TO_ADDR
12977: GO 13599
12979: LD_INT 2
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 12998
12987: POP
// bc_type := b_warehouse ; 3 :
12988: LD_ADDR_OWVAR 42
12992: PUSH
12993: LD_INT 1
12995: ST_TO_ADDR
12996: GO 13599
12998: LD_INT 3
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13017
13006: POP
// bc_type := b_lab ; 4 .. 9 :
13007: LD_ADDR_OWVAR 42
13011: PUSH
13012: LD_INT 6
13014: ST_TO_ADDR
13015: GO 13599
13017: LD_INT 4
13019: DOUBLE
13020: GREATEREQUAL
13021: IFFALSE 13029
13023: LD_INT 9
13025: DOUBLE
13026: LESSEQUAL
13027: IFTRUE 13031
13029: GO 13091
13031: POP
// begin bc_type := b_lab_half ;
13032: LD_ADDR_OWVAR 42
13036: PUSH
13037: LD_INT 7
13039: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13040: LD_ADDR_OWVAR 44
13044: PUSH
13045: LD_INT 10
13047: PUSH
13048: LD_INT 11
13050: PUSH
13051: LD_INT 12
13053: PUSH
13054: LD_INT 15
13056: PUSH
13057: LD_INT 14
13059: PUSH
13060: LD_INT 13
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: LD_VAR 0 2
13075: PUSH
13076: LD_INT 3
13078: MINUS
13079: ARRAY
13080: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13081: LD_ADDR_OWVAR 45
13085: PUSH
13086: LD_INT 9
13088: ST_TO_ADDR
// end ; 10 .. 13 :
13089: GO 13599
13091: LD_INT 10
13093: DOUBLE
13094: GREATEREQUAL
13095: IFFALSE 13103
13097: LD_INT 13
13099: DOUBLE
13100: LESSEQUAL
13101: IFTRUE 13105
13103: GO 13182
13105: POP
// begin bc_type := b_lab_full ;
13106: LD_ADDR_OWVAR 42
13110: PUSH
13111: LD_INT 8
13113: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13114: LD_ADDR_OWVAR 44
13118: PUSH
13119: LD_INT 10
13121: PUSH
13122: LD_INT 12
13124: PUSH
13125: LD_INT 14
13127: PUSH
13128: LD_INT 13
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: LD_VAR 0 2
13141: PUSH
13142: LD_INT 9
13144: MINUS
13145: ARRAY
13146: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13147: LD_ADDR_OWVAR 45
13151: PUSH
13152: LD_INT 11
13154: PUSH
13155: LD_INT 15
13157: PUSH
13158: LD_INT 12
13160: PUSH
13161: LD_INT 15
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: LD_VAR 0 2
13174: PUSH
13175: LD_INT 9
13177: MINUS
13178: ARRAY
13179: ST_TO_ADDR
// end ; 14 :
13180: GO 13599
13182: LD_INT 14
13184: DOUBLE
13185: EQUAL
13186: IFTRUE 13190
13188: GO 13201
13190: POP
// bc_type := b_workshop ; 15 :
13191: LD_ADDR_OWVAR 42
13195: PUSH
13196: LD_INT 2
13198: ST_TO_ADDR
13199: GO 13599
13201: LD_INT 15
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13220
13209: POP
// bc_type := b_factory ; 16 :
13210: LD_ADDR_OWVAR 42
13214: PUSH
13215: LD_INT 3
13217: ST_TO_ADDR
13218: GO 13599
13220: LD_INT 16
13222: DOUBLE
13223: EQUAL
13224: IFTRUE 13228
13226: GO 13239
13228: POP
// bc_type := b_ext_gun ; 17 :
13229: LD_ADDR_OWVAR 42
13233: PUSH
13234: LD_INT 17
13236: ST_TO_ADDR
13237: GO 13599
13239: LD_INT 17
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13275
13247: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13248: LD_ADDR_OWVAR 42
13252: PUSH
13253: LD_INT 19
13255: PUSH
13256: LD_INT 23
13258: PUSH
13259: LD_INT 19
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: LD_VAR 0 1
13271: ARRAY
13272: ST_TO_ADDR
13273: GO 13599
13275: LD_INT 18
13277: DOUBLE
13278: EQUAL
13279: IFTRUE 13283
13281: GO 13294
13283: POP
// bc_type := b_ext_radar ; 19 :
13284: LD_ADDR_OWVAR 42
13288: PUSH
13289: LD_INT 20
13291: ST_TO_ADDR
13292: GO 13599
13294: LD_INT 19
13296: DOUBLE
13297: EQUAL
13298: IFTRUE 13302
13300: GO 13313
13302: POP
// bc_type := b_ext_radio ; 20 :
13303: LD_ADDR_OWVAR 42
13307: PUSH
13308: LD_INT 22
13310: ST_TO_ADDR
13311: GO 13599
13313: LD_INT 20
13315: DOUBLE
13316: EQUAL
13317: IFTRUE 13321
13319: GO 13332
13321: POP
// bc_type := b_ext_siberium ; 21 :
13322: LD_ADDR_OWVAR 42
13326: PUSH
13327: LD_INT 21
13329: ST_TO_ADDR
13330: GO 13599
13332: LD_INT 21
13334: DOUBLE
13335: EQUAL
13336: IFTRUE 13340
13338: GO 13351
13340: POP
// bc_type := b_ext_computer ; 22 :
13341: LD_ADDR_OWVAR 42
13345: PUSH
13346: LD_INT 24
13348: ST_TO_ADDR
13349: GO 13599
13351: LD_INT 22
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13370
13359: POP
// bc_type := b_ext_track ; 23 :
13360: LD_ADDR_OWVAR 42
13364: PUSH
13365: LD_INT 16
13367: ST_TO_ADDR
13368: GO 13599
13370: LD_INT 23
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13389
13378: POP
// bc_type := b_ext_laser ; 24 :
13379: LD_ADDR_OWVAR 42
13383: PUSH
13384: LD_INT 25
13386: ST_TO_ADDR
13387: GO 13599
13389: LD_INT 24
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13397
13395: GO 13408
13397: POP
// bc_type := b_control_tower ; 25 :
13398: LD_ADDR_OWVAR 42
13402: PUSH
13403: LD_INT 36
13405: ST_TO_ADDR
13406: GO 13599
13408: LD_INT 25
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13427
13416: POP
// bc_type := b_breastwork ; 26 :
13417: LD_ADDR_OWVAR 42
13421: PUSH
13422: LD_INT 31
13424: ST_TO_ADDR
13425: GO 13599
13427: LD_INT 26
13429: DOUBLE
13430: EQUAL
13431: IFTRUE 13435
13433: GO 13446
13435: POP
// bc_type := b_bunker ; 27 :
13436: LD_ADDR_OWVAR 42
13440: PUSH
13441: LD_INT 32
13443: ST_TO_ADDR
13444: GO 13599
13446: LD_INT 27
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13465
13454: POP
// bc_type := b_turret ; 28 :
13455: LD_ADDR_OWVAR 42
13459: PUSH
13460: LD_INT 33
13462: ST_TO_ADDR
13463: GO 13599
13465: LD_INT 28
13467: DOUBLE
13468: EQUAL
13469: IFTRUE 13473
13471: GO 13484
13473: POP
// bc_type := b_armoury ; 29 :
13474: LD_ADDR_OWVAR 42
13478: PUSH
13479: LD_INT 4
13481: ST_TO_ADDR
13482: GO 13599
13484: LD_INT 29
13486: DOUBLE
13487: EQUAL
13488: IFTRUE 13492
13490: GO 13503
13492: POP
// bc_type := b_barracks ; 30 :
13493: LD_ADDR_OWVAR 42
13497: PUSH
13498: LD_INT 5
13500: ST_TO_ADDR
13501: GO 13599
13503: LD_INT 30
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13522
13511: POP
// bc_type := b_solar_power ; 31 :
13512: LD_ADDR_OWVAR 42
13516: PUSH
13517: LD_INT 27
13519: ST_TO_ADDR
13520: GO 13599
13522: LD_INT 31
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13541
13530: POP
// bc_type := b_oil_power ; 32 :
13531: LD_ADDR_OWVAR 42
13535: PUSH
13536: LD_INT 26
13538: ST_TO_ADDR
13539: GO 13599
13541: LD_INT 32
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13560
13549: POP
// bc_type := b_siberite_power ; 33 :
13550: LD_ADDR_OWVAR 42
13554: PUSH
13555: LD_INT 28
13557: ST_TO_ADDR
13558: GO 13599
13560: LD_INT 33
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13579
13568: POP
// bc_type := b_oil_mine ; 34 :
13569: LD_ADDR_OWVAR 42
13573: PUSH
13574: LD_INT 29
13576: ST_TO_ADDR
13577: GO 13599
13579: LD_INT 34
13581: DOUBLE
13582: EQUAL
13583: IFTRUE 13587
13585: GO 13598
13587: POP
// bc_type := b_siberite_mine ; end ;
13588: LD_ADDR_OWVAR 42
13592: PUSH
13593: LD_INT 30
13595: ST_TO_ADDR
13596: GO 13599
13598: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13599: LD_ADDR_VAR 0 8
13603: PUSH
13604: LD_VAR 0 5
13608: PPUSH
13609: LD_VAR 0 6
13613: PPUSH
13614: LD_VAR 0 3
13618: PPUSH
13619: CALL_OW 47
13623: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13624: LD_OWVAR 42
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 33
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: IN
13639: IFFALSE 13655
// PlaceWeaponTurret ( b , weapon ) ;
13641: LD_VAR 0 8
13645: PPUSH
13646: LD_VAR 0 4
13650: PPUSH
13651: CALL_OW 431
// end ;
13655: LD_VAR 0 7
13659: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13666: LD_ADDR_VAR 0 4
13670: PUSH
13671: LD_INT 22
13673: PUSH
13674: LD_OWVAR 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 2
13685: PUSH
13686: LD_INT 30
13688: PUSH
13689: LD_INT 0
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PPUSH
13715: CALL_OW 69
13719: ST_TO_ADDR
// if not tmp then
13720: LD_VAR 0 4
13724: NOT
13725: IFFALSE 13729
// exit ;
13727: GO 13788
// for i in tmp do
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_VAR 0 4
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13786
// for j = 1 to 3 do
13742: LD_ADDR_VAR 0 3
13746: PUSH
13747: DOUBLE
13748: LD_INT 1
13750: DEC
13751: ST_TO_ADDR
13752: LD_INT 3
13754: PUSH
13755: FOR_TO
13756: IFFALSE 13782
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13758: LD_VAR 0 2
13762: PPUSH
13763: CALL_OW 274
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 99999
13775: PPUSH
13776: CALL_OW 277
13780: GO 13755
13782: POP
13783: POP
13784: GO 13739
13786: POP
13787: POP
// end ;
13788: LD_VAR 0 1
13792: RET
// export function hHackSetLevel10 ; var i , j ; begin
13793: LD_INT 0
13795: PPUSH
13796: PPUSH
13797: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13798: LD_ADDR_VAR 0 2
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: PUSH
13818: FOR_IN
13819: IFFALSE 13871
// if IsSelected ( i ) then
13821: LD_VAR 0 2
13825: PPUSH
13826: CALL_OW 306
13830: IFFALSE 13869
// begin for j := 1 to 4 do
13832: LD_ADDR_VAR 0 3
13836: PUSH
13837: DOUBLE
13838: LD_INT 1
13840: DEC
13841: ST_TO_ADDR
13842: LD_INT 4
13844: PUSH
13845: FOR_TO
13846: IFFALSE 13867
// SetSkill ( i , j , 10 ) ;
13848: LD_VAR 0 2
13852: PPUSH
13853: LD_VAR 0 3
13857: PPUSH
13858: LD_INT 10
13860: PPUSH
13861: CALL_OW 237
13865: GO 13845
13867: POP
13868: POP
// end ;
13869: GO 13818
13871: POP
13872: POP
// end ;
13873: LD_VAR 0 1
13877: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
13882: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 1
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 13961
// begin for j := 1 to 4 do
13922: LD_ADDR_VAR 0 3
13926: PUSH
13927: DOUBLE
13928: LD_INT 1
13930: DEC
13931: ST_TO_ADDR
13932: LD_INT 4
13934: PUSH
13935: FOR_TO
13936: IFFALSE 13957
// SetSkill ( i , j , 10 ) ;
13938: LD_VAR 0 2
13942: PPUSH
13943: LD_VAR 0 3
13947: PPUSH
13948: LD_INT 10
13950: PPUSH
13951: CALL_OW 237
13955: GO 13935
13957: POP
13958: POP
// end ;
13959: GO 13919
13961: POP
13962: POP
// end ;
13963: LD_VAR 0 1
13967: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13968: LD_INT 0
13970: PPUSH
// uc_side := your_side ;
13971: LD_ADDR_OWVAR 20
13975: PUSH
13976: LD_OWVAR 2
13980: ST_TO_ADDR
// uc_nation := nation ;
13981: LD_ADDR_OWVAR 21
13985: PUSH
13986: LD_VAR 0 1
13990: ST_TO_ADDR
// InitHc ;
13991: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13995: LD_INT 0
13997: PPUSH
13998: LD_VAR 0 2
14002: PPUSH
14003: LD_VAR 0 3
14007: PPUSH
14008: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14012: LD_VAR 0 4
14016: PPUSH
14017: LD_VAR 0 5
14021: PPUSH
14022: CALL_OW 428
14026: PUSH
14027: LD_INT 0
14029: EQUAL
14030: IFFALSE 14054
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14032: CALL_OW 44
14036: PPUSH
14037: LD_VAR 0 4
14041: PPUSH
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 48
// end ;
14054: LD_VAR 0 6
14058: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14059: LD_INT 0
14061: PPUSH
14062: PPUSH
// uc_side := your_side ;
14063: LD_ADDR_OWVAR 20
14067: PUSH
14068: LD_OWVAR 2
14072: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: LD_INT 4
14089: PUSH
14090: LD_INT 5
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: IN
14100: IFFALSE 14112
// uc_nation := nation_american else
14102: LD_ADDR_OWVAR 21
14106: PUSH
14107: LD_INT 1
14109: ST_TO_ADDR
14110: GO 14155
// if chassis in [ 11 , 12 , 13 , 14 ] then
14112: LD_VAR 0 1
14116: PUSH
14117: LD_INT 11
14119: PUSH
14120: LD_INT 12
14122: PUSH
14123: LD_INT 13
14125: PUSH
14126: LD_INT 14
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: IN
14135: IFFALSE 14147
// uc_nation := nation_arabian else
14137: LD_ADDR_OWVAR 21
14141: PUSH
14142: LD_INT 2
14144: ST_TO_ADDR
14145: GO 14155
// uc_nation := nation_russian ;
14147: LD_ADDR_OWVAR 21
14151: PUSH
14152: LD_INT 3
14154: ST_TO_ADDR
// vc_chassis := chassis ;
14155: LD_ADDR_OWVAR 37
14159: PUSH
14160: LD_VAR 0 1
14164: ST_TO_ADDR
// vc_engine := engine ;
14165: LD_ADDR_OWVAR 39
14169: PUSH
14170: LD_VAR 0 2
14174: ST_TO_ADDR
// vc_control := control ;
14175: LD_ADDR_OWVAR 38
14179: PUSH
14180: LD_VAR 0 3
14184: ST_TO_ADDR
// vc_weapon := weapon ;
14185: LD_ADDR_OWVAR 40
14189: PUSH
14190: LD_VAR 0 4
14194: ST_TO_ADDR
// un := CreateVehicle ;
14195: LD_ADDR_VAR 0 8
14199: PUSH
14200: CALL_OW 45
14204: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14205: LD_VAR 0 8
14209: PPUSH
14210: LD_INT 0
14212: PPUSH
14213: LD_INT 5
14215: PPUSH
14216: CALL_OW 12
14220: PPUSH
14221: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14225: LD_VAR 0 8
14229: PPUSH
14230: LD_VAR 0 5
14234: PPUSH
14235: LD_VAR 0 6
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 48
// end ;
14247: LD_VAR 0 7
14251: RET
// export hInvincible ; every 1 do
14252: GO 14254
14254: DISABLE
// hInvincible := [ ] ;
14255: LD_ADDR_EXP 59
14259: PUSH
14260: EMPTY
14261: ST_TO_ADDR
14262: END
// every 10 do var i ;
14263: GO 14265
14265: DISABLE
14266: LD_INT 0
14268: PPUSH
// begin enable ;
14269: ENABLE
// if not hInvincible then
14270: LD_EXP 59
14274: NOT
14275: IFFALSE 14279
// exit ;
14277: GO 14323
// for i in hInvincible do
14279: LD_ADDR_VAR 0 1
14283: PUSH
14284: LD_EXP 59
14288: PUSH
14289: FOR_IN
14290: IFFALSE 14321
// if GetLives ( i ) < 1000 then
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL_OW 256
14301: PUSH
14302: LD_INT 1000
14304: LESS
14305: IFFALSE 14319
// SetLives ( i , 1000 ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_INT 1000
14314: PPUSH
14315: CALL_OW 234
14319: GO 14289
14321: POP
14322: POP
// end ;
14323: PPOPN 1
14325: END
// export function hHackInvincible ; var i ; begin
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14330: LD_ADDR_VAR 0 2
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 69
14367: PUSH
14368: FOR_IN
14369: IFFALSE 14430
// if IsSelected ( i ) then
14371: LD_VAR 0 2
14375: PPUSH
14376: CALL_OW 306
14380: IFFALSE 14428
// begin if i in hInvincible then
14382: LD_VAR 0 2
14386: PUSH
14387: LD_EXP 59
14391: IN
14392: IFFALSE 14412
// hInvincible := hInvincible diff i else
14394: LD_ADDR_EXP 59
14398: PUSH
14399: LD_EXP 59
14403: PUSH
14404: LD_VAR 0 2
14408: DIFF
14409: ST_TO_ADDR
14410: GO 14428
// hInvincible := hInvincible union i ;
14412: LD_ADDR_EXP 59
14416: PUSH
14417: LD_EXP 59
14421: PUSH
14422: LD_VAR 0 2
14426: UNION
14427: ST_TO_ADDR
// end ;
14428: GO 14368
14430: POP
14431: POP
// end ;
14432: LD_VAR 0 1
14436: RET
// export function hHackInvisible ; var i , j ; begin
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: LD_INT 21
14449: PUSH
14450: LD_INT 1
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PUSH
14462: FOR_IN
14463: IFFALSE 14487
// if IsSelected ( i ) then
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL_OW 306
14474: IFFALSE 14485
// ComForceInvisible ( i ) ;
14476: LD_VAR 0 2
14480: PPUSH
14481: CALL_OW 496
14485: GO 14462
14487: POP
14488: POP
// end ;
14489: LD_VAR 0 1
14493: RET
// export function hHackChangeYourSide ; begin
14494: LD_INT 0
14496: PPUSH
// if your_side = 8 then
14497: LD_OWVAR 2
14501: PUSH
14502: LD_INT 8
14504: EQUAL
14505: IFFALSE 14517
// your_side := 0 else
14507: LD_ADDR_OWVAR 2
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
14515: GO 14531
// your_side := your_side + 1 ;
14517: LD_ADDR_OWVAR 2
14521: PUSH
14522: LD_OWVAR 2
14526: PUSH
14527: LD_INT 1
14529: PLUS
14530: ST_TO_ADDR
// end ;
14531: LD_VAR 0 1
14535: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14536: LD_INT 0
14538: PPUSH
14539: PPUSH
14540: PPUSH
// for i in all_units do
14541: LD_ADDR_VAR 0 2
14545: PUSH
14546: LD_OWVAR 3
14550: PUSH
14551: FOR_IN
14552: IFFALSE 14630
// if IsSelected ( i ) then
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 306
14563: IFFALSE 14628
// begin j := GetSide ( i ) ;
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_VAR 0 2
14574: PPUSH
14575: CALL_OW 255
14579: ST_TO_ADDR
// if j = 8 then
14580: LD_VAR 0 3
14584: PUSH
14585: LD_INT 8
14587: EQUAL
14588: IFFALSE 14600
// j := 0 else
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
14598: GO 14614
// j := j + 1 ;
14600: LD_ADDR_VAR 0 3
14604: PUSH
14605: LD_VAR 0 3
14609: PUSH
14610: LD_INT 1
14612: PLUS
14613: ST_TO_ADDR
// SetSide ( i , j ) ;
14614: LD_VAR 0 2
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: CALL_OW 235
// end ;
14628: GO 14551
14630: POP
14631: POP
// end ;
14632: LD_VAR 0 1
14636: RET
// export function hHackFog ; begin
14637: LD_INT 0
14639: PPUSH
// FogOff ( true ) ;
14640: LD_INT 1
14642: PPUSH
14643: CALL_OW 344
// end ;
14647: LD_VAR 0 1
14651: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14652: LD_INT 0
14654: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14655: LD_VAR 0 1
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: LD_VAR 0 3
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 483
// CenterOnXY ( x , y ) ;
14680: LD_VAR 0 2
14684: PPUSH
14685: LD_VAR 0 3
14689: PPUSH
14690: CALL_OW 84
// end ;
14694: LD_VAR 0 4
14698: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14699: LD_INT 0
14701: PPUSH
14702: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14703: LD_VAR 0 1
14707: NOT
14708: IFTRUE 14727
14710: PUSH
14711: LD_VAR 0 2
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: CALL_OW 488
14725: NOT
14726: OR
14727: IFTRUE 14762
14729: PUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 266
14739: PUSH
14740: LD_INT 3
14742: NONEQUAL
14743: IFFALSE 14761
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 247
14755: PUSH
14756: LD_INT 1
14758: EQUAL
14759: NOT
14760: AND
14761: OR
14762: IFFALSE 14766
// exit ;
14764: GO 15048
// if GetType ( factory ) = unit_human then
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 247
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: IFFALSE 14796
// factory := IsInUnit ( factory ) ;
14781: LD_ADDR_VAR 0 1
14785: PUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: CALL_OW 310
14795: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 266
14805: PUSH
14806: LD_INT 3
14808: NONEQUAL
14809: IFFALSE 14813
// exit ;
14811: GO 15048
// for i := 1 to Count ( factoryWaypoints ) do
14813: LD_ADDR_VAR 0 5
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_EXP 60
14827: PPUSH
14828: CALL 25015 0 1
14832: PUSH
14833: FOR_TO
14834: IFFALSE 14996
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14836: LD_VAR 0 2
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: CALL_OW 428
14850: PUSH
14851: LD_EXP 60
14855: PUSH
14856: LD_VAR 0 5
14860: ARRAY
14861: PUSH
14862: LD_INT 2
14864: ARRAY
14865: EQUAL
14866: IFFALSE 14898
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14868: LD_ADDR_EXP 60
14872: PUSH
14873: LD_EXP 60
14877: PPUSH
14878: LD_VAR 0 5
14882: PPUSH
14883: CALL_OW 3
14887: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14888: CALL 15053 0 0
// exit ;
14892: POP
14893: POP
14894: GO 15048
// end else
14896: GO 14994
// if factory = factoryWaypoints [ i ] [ 2 ] then
14898: LD_VAR 0 1
14902: PUSH
14903: LD_EXP 60
14907: PUSH
14908: LD_VAR 0 5
14912: ARRAY
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: EQUAL
14918: IFFALSE 14994
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14920: LD_ADDR_EXP 60
14924: PUSH
14925: LD_EXP 60
14929: PPUSH
14930: LD_VAR 0 5
14934: PPUSH
14935: CALL_OW 3
14939: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14940: LD_ADDR_EXP 60
14944: PUSH
14945: LD_EXP 60
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 255
14959: PUSH
14960: LD_VAR 0 1
14964: PUSH
14965: LD_VAR 0 2
14969: PUSH
14970: LD_VAR 0 3
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL 60991 0 2
14985: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14986: CALL 15053 0 0
// exit ;
14990: POP
14991: POP
14992: GO 15048
// end ; end ;
14994: GO 14833
14996: POP
14997: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14998: LD_ADDR_EXP 60
15002: PUSH
15003: LD_EXP 60
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 255
15017: PUSH
15018: LD_VAR 0 1
15022: PUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL 60991 0 2
15043: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15044: CALL 15053 0 0
// end ;
15048: LD_VAR 0 4
15052: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15053: LD_INT 0
15055: PPUSH
15056: PPUSH
15057: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15058: LD_STRING resetFactoryWaypoint();
15060: PPUSH
15061: CALL_OW 559
// if factoryWaypoints then
15065: LD_EXP 60
15069: IFFALSE 15190
// begin list := factoryWaypoints ;
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_EXP 60
15080: ST_TO_ADDR
// for i := 1 to list do
15081: LD_ADDR_VAR 0 2
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_VAR 0 3
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15188
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15099: LD_STRING setFactoryWaypointXY(
15101: PUSH
15102: LD_VAR 0 3
15106: PUSH
15107: LD_VAR 0 2
15111: ARRAY
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: STR
15117: PUSH
15118: LD_STRING ,
15120: STR
15121: PUSH
15122: LD_VAR 0 3
15126: PUSH
15127: LD_VAR 0 2
15131: ARRAY
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: STR
15137: PUSH
15138: LD_STRING ,
15140: STR
15141: PUSH
15142: LD_VAR 0 3
15146: PUSH
15147: LD_VAR 0 2
15151: ARRAY
15152: PUSH
15153: LD_INT 3
15155: ARRAY
15156: STR
15157: PUSH
15158: LD_STRING ,
15160: STR
15161: PUSH
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 2
15171: ARRAY
15172: PUSH
15173: LD_INT 4
15175: ARRAY
15176: STR
15177: PUSH
15178: LD_STRING )
15180: STR
15181: PPUSH
15182: CALL_OW 559
15186: GO 15096
15188: POP
15189: POP
// end ; end ;
15190: LD_VAR 0 1
15194: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15195: LD_INT 0
15197: PPUSH
// if HexInfo ( x , y ) = warehouse then
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: CALL_OW 428
15212: PUSH
15213: LD_VAR 0 1
15217: EQUAL
15218: IFFALSE 15245
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15220: LD_ADDR_EXP 62
15224: PUSH
15225: LD_EXP 62
15229: PPUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_INT 0
15237: PPUSH
15238: CALL_OW 1
15242: ST_TO_ADDR
15243: GO 15296
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15245: LD_ADDR_EXP 62
15249: PUSH
15250: LD_EXP 62
15254: PPUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 255
15269: PUSH
15270: LD_VAR 0 1
15274: PUSH
15275: LD_VAR 0 2
15279: PUSH
15280: LD_VAR 0 3
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 1
15295: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15296: CALL 15305 0 0
// end ;
15300: LD_VAR 0 4
15304: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
15309: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15310: LD_STRING resetWarehouseGatheringPoints();
15312: PPUSH
15313: CALL_OW 559
// if warehouseGatheringPoints then
15317: LD_EXP 62
15321: IFFALSE 15447
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15323: LD_ADDR_VAR 0 3
15327: PUSH
15328: LD_EXP 62
15332: PPUSH
15333: CALL 64925 0 1
15337: ST_TO_ADDR
// for i := 1 to list do
15338: LD_ADDR_VAR 0 2
15342: PUSH
15343: DOUBLE
15344: LD_INT 1
15346: DEC
15347: ST_TO_ADDR
15348: LD_VAR 0 3
15352: PUSH
15353: FOR_TO
15354: IFFALSE 15445
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15356: LD_STRING setWarehouseGatheringPointXY(
15358: PUSH
15359: LD_VAR 0 3
15363: PUSH
15364: LD_VAR 0 2
15368: ARRAY
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: STR
15374: PUSH
15375: LD_STRING ,
15377: STR
15378: PUSH
15379: LD_VAR 0 3
15383: PUSH
15384: LD_VAR 0 2
15388: ARRAY
15389: PUSH
15390: LD_INT 2
15392: ARRAY
15393: STR
15394: PUSH
15395: LD_STRING ,
15397: STR
15398: PUSH
15399: LD_VAR 0 3
15403: PUSH
15404: LD_VAR 0 2
15408: ARRAY
15409: PUSH
15410: LD_INT 3
15412: ARRAY
15413: STR
15414: PUSH
15415: LD_STRING ,
15417: STR
15418: PUSH
15419: LD_VAR 0 3
15423: PUSH
15424: LD_VAR 0 2
15428: ARRAY
15429: PUSH
15430: LD_INT 4
15432: ARRAY
15433: STR
15434: PUSH
15435: LD_STRING )
15437: STR
15438: PPUSH
15439: CALL_OW 559
15443: GO 15353
15445: POP
15446: POP
// end ; end ;
15447: LD_VAR 0 1
15451: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15452: LD_EXP 62
15456: IFFALSE 16151
15458: GO 15460
15460: DISABLE
15461: LD_INT 0
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
// begin enable ;
15472: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_EXP 62
15482: PPUSH
15483: CALL 64925 0 1
15487: ST_TO_ADDR
// if not list then
15488: LD_VAR 0 3
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 16151
// for i := 1 to list do
15497: LD_ADDR_VAR 0 1
15501: PUSH
15502: DOUBLE
15503: LD_INT 1
15505: DEC
15506: ST_TO_ADDR
15507: LD_VAR 0 3
15511: PUSH
15512: FOR_TO
15513: IFFALSE 16149
// begin depot := list [ i ] [ 2 ] ;
15515: LD_ADDR_VAR 0 8
15519: PUSH
15520: LD_VAR 0 3
15524: PUSH
15525: LD_VAR 0 1
15529: ARRAY
15530: PUSH
15531: LD_INT 2
15533: ARRAY
15534: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15535: LD_ADDR_VAR 0 5
15539: PUSH
15540: LD_VAR 0 3
15544: PUSH
15545: LD_VAR 0 1
15549: ARRAY
15550: PUSH
15551: LD_INT 1
15553: ARRAY
15554: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15555: LD_VAR 0 8
15559: PPUSH
15560: CALL_OW 301
15564: IFTRUE 15583
15566: PUSH
15567: LD_VAR 0 5
15571: PUSH
15572: LD_VAR 0 8
15576: PPUSH
15577: CALL_OW 255
15581: NONEQUAL
15582: OR
15583: IFFALSE 15612
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15585: LD_ADDR_EXP 62
15589: PUSH
15590: LD_EXP 62
15594: PPUSH
15595: LD_VAR 0 8
15599: PPUSH
15600: LD_INT 0
15602: PPUSH
15603: CALL_OW 1
15607: ST_TO_ADDR
// exit ;
15608: POP
15609: POP
15610: GO 16151
// end ; x := list [ i ] [ 3 ] ;
15612: LD_ADDR_VAR 0 6
15616: PUSH
15617: LD_VAR 0 3
15621: PUSH
15622: LD_VAR 0 1
15626: ARRAY
15627: PUSH
15628: LD_INT 3
15630: ARRAY
15631: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15632: LD_ADDR_VAR 0 7
15636: PUSH
15637: LD_VAR 0 3
15641: PUSH
15642: LD_VAR 0 1
15646: ARRAY
15647: PUSH
15648: LD_INT 4
15650: ARRAY
15651: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15652: LD_ADDR_VAR 0 9
15656: PUSH
15657: LD_VAR 0 6
15661: PPUSH
15662: LD_VAR 0 7
15666: PPUSH
15667: LD_INT 16
15669: PPUSH
15670: CALL 63499 0 3
15674: ST_TO_ADDR
// if not cratesNearbyPoint then
15675: LD_VAR 0 9
15679: NOT
15680: IFFALSE 15686
// exit ;
15682: POP
15683: POP
15684: GO 16151
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_INT 22
15693: PUSH
15694: LD_VAR 0 5
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 3
15705: PUSH
15706: LD_INT 60
15708: PUSH
15709: EMPTY
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 91
15718: PUSH
15719: LD_VAR 0 8
15723: PUSH
15724: LD_INT 6
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: LD_INT 25
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 25
15747: PUSH
15748: LD_INT 16
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: PPUSH
15766: CALL_OW 69
15770: PUSH
15771: LD_VAR 0 8
15775: PPUSH
15776: CALL_OW 313
15780: PPUSH
15781: LD_INT 3
15783: PUSH
15784: LD_INT 60
15786: PUSH
15787: EMPTY
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 2
15796: PUSH
15797: LD_INT 25
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 25
15809: PUSH
15810: LD_INT 16
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PPUSH
15826: CALL_OW 72
15830: UNION
15831: ST_TO_ADDR
// if tmp then
15832: LD_VAR 0 4
15836: IFFALSE 15916
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15838: LD_ADDR_VAR 0 4
15842: PUSH
15843: LD_VAR 0 4
15847: PPUSH
15848: LD_INT 3
15850: PPUSH
15851: CALL 61306 0 2
15855: ST_TO_ADDR
// for j in tmp do
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_VAR 0 4
15865: PUSH
15866: FOR_IN
15867: IFFALSE 15910
// begin if IsInUnit ( j ) then
15869: LD_VAR 0 2
15873: PPUSH
15874: CALL_OW 310
15878: IFFALSE 15889
// ComExit ( j ) ;
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL 61389 0 1
// AddComCollect ( j , x , y ) ;
15889: LD_VAR 0 2
15893: PPUSH
15894: LD_VAR 0 6
15898: PPUSH
15899: LD_VAR 0 7
15903: PPUSH
15904: CALL_OW 177
// end ;
15908: GO 15866
15910: POP
15911: POP
// exit ;
15912: POP
15913: POP
15914: GO 16151
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_INT 22
15923: PUSH
15924: LD_VAR 0 5
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 91
15935: PUSH
15936: LD_VAR 0 8
15940: PUSH
15941: LD_INT 8
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: LD_INT 34
15954: PUSH
15955: LD_INT 12
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 34
15964: PUSH
15965: LD_INT 51
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 34
15974: PUSH
15975: LD_INT 32
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 34
15984: PUSH
15985: LD_INT 89
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: ST_TO_ADDR
// if tmp then
16009: LD_VAR 0 4
16013: IFFALSE 16147
// begin for j in tmp do
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_VAR 0 4
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16145
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL_OW 262
16037: PUSH
16038: LD_INT 3
16040: EQUAL
16041: IFTRUE 16058
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 261
16053: PUSH
16054: LD_INT 20
16056: GREATER
16057: OR
16058: IFFALSE 16072
16060: PUSH
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 314
16070: NOT
16071: AND
16072: IFFALSE 16102
16074: PUSH
16075: LD_VAR 0 2
16079: PPUSH
16080: CALL_OW 263
16084: PUSH
16085: LD_INT 1
16087: NONEQUAL
16088: IFTRUE 16101
16090: PUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 311
16100: OR
16101: AND
16102: IFFALSE 16143
// begin ComCollect ( j , x , y ) ;
16104: LD_VAR 0 2
16108: PPUSH
16109: LD_VAR 0 6
16113: PPUSH
16114: LD_VAR 0 7
16118: PPUSH
16119: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: LD_VAR 0 8
16132: PPUSH
16133: CALL_OW 172
// exit ;
16137: POP
16138: POP
16139: POP
16140: POP
16141: GO 16151
// end ;
16143: GO 16025
16145: POP
16146: POP
// end ; end ;
16147: GO 15512
16149: POP
16150: POP
// end ; end_of_file
16151: PPOPN 9
16153: END
// export function SOS_UnitDestroyed ( un ) ; begin
16154: LD_INT 0
16156: PPUSH
// ComRadiation ( un ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL 17324 0 1
// end ;
16166: LD_VAR 0 2
16170: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16171: LD_INT 0
16173: PPUSH
// ComRadiation ( un ) ;
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL 17324 0 1
// end ;
16183: LD_VAR 0 2
16187: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16188: LD_INT 0
16190: PPUSH
// end ;
16191: LD_VAR 0 4
16195: RET
// export function SOS_Command ( cmd ) ; begin
16196: LD_INT 0
16198: PPUSH
// end ;
16199: LD_VAR 0 2
16203: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16204: LD_INT 0
16206: PPUSH
// end ;
16207: LD_VAR 0 6
16211: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
16212: LD_INT 0
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// if not vehicle or not factory then
16219: LD_VAR 0 1
16223: NOT
16224: IFTRUE 16233
16226: PUSH
16227: LD_VAR 0 2
16231: NOT
16232: OR
16233: IFFALSE 16237
// exit ;
16235: GO 16899
// weapon := GetWeapon ( vehicle ) ;
16237: LD_ADDR_VAR 0 7
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 264
16251: ST_TO_ADDR
// if weapon = ar_miner then
16252: LD_VAR 0 7
16256: PUSH
16257: LD_INT 81
16259: EQUAL
16260: IFFALSE 16317
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
16262: LD_ADDR_EXP 71
16266: PUSH
16267: LD_EXP 71
16271: PPUSH
16272: LD_EXP 71
16276: PUSH
16277: LD_INT 1
16279: PLUS
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 1
16290: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16291: LD_ADDR_EXP 72
16295: PUSH
16296: LD_EXP 72
16300: PPUSH
16301: LD_EXP 72
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: PPUSH
16310: EMPTY
16311: PPUSH
16312: CALL_OW 1
16316: ST_TO_ADDR
// end ; if not factoryWaypoints then
16317: LD_EXP 60
16321: NOT
16322: IFFALSE 16326
// exit ;
16324: GO 16899
// for i := 1 to Count ( factoryWaypoints ) do
16326: LD_ADDR_VAR 0 4
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_EXP 60
16340: PPUSH
16341: CALL 25015 0 1
16345: PUSH
16346: FOR_TO
16347: IFFALSE 16897
// if factoryWaypoints [ i ] [ 2 ] = factory then
16349: LD_EXP 60
16353: PUSH
16354: LD_VAR 0 4
16358: ARRAY
16359: PUSH
16360: LD_INT 2
16362: ARRAY
16363: PUSH
16364: LD_VAR 0 2
16368: EQUAL
16369: IFFALSE 16895
// begin if GetControl ( vehicle ) = control_manual then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 263
16380: PUSH
16381: LD_INT 1
16383: EQUAL
16384: IFFALSE 16748
// begin driver := IsDrivenBy ( vehicle ) ;
16386: LD_ADDR_VAR 0 5
16390: PUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 311
16400: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16401: LD_VAR 0 5
16405: PUSH
16406: LD_EXP 61
16410: IN
16411: IFTRUE 16425
16413: PUSH
16414: LD_VAR 0 1
16418: PUSH
16419: LD_EXP 61
16423: IN
16424: OR
16425: IFFALSE 16431
// exit ;
16427: POP
16428: POP
16429: GO 16899
// if not HasTask ( driver ) then
16431: LD_VAR 0 5
16435: PPUSH
16436: CALL_OW 314
16440: NOT
16441: IFFALSE 16746
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16443: LD_ADDR_EXP 61
16447: PUSH
16448: LD_EXP 61
16452: PPUSH
16453: LD_VAR 0 5
16457: PPUSH
16458: CALL 60991 0 2
16462: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16463: LD_ADDR_EXP 61
16467: PUSH
16468: LD_EXP 61
16472: PPUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 60991 0 2
16482: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16483: LD_ADDR_VAR 0 6
16487: PUSH
16488: LD_EXP 60
16492: PUSH
16493: LD_VAR 0 4
16497: ARRAY
16498: PUSH
16499: LD_INT 3
16501: ARRAY
16502: PPUSH
16503: LD_EXP 60
16507: PUSH
16508: LD_VAR 0 4
16512: ARRAY
16513: PUSH
16514: LD_INT 4
16516: ARRAY
16517: PPUSH
16518: CALL_OW 428
16522: ST_TO_ADDR
// if hex then
16523: LD_VAR 0 6
16527: IFFALSE 16545
// ComMoveUnit ( driver , hex ) else
16529: LD_VAR 0 5
16533: PPUSH
16534: LD_VAR 0 6
16538: PPUSH
16539: CALL_OW 112
16543: GO 16629
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16545: LD_VAR 0 1
16549: PPUSH
16550: LD_EXP 60
16554: PUSH
16555: LD_VAR 0 4
16559: ARRAY
16560: PUSH
16561: LD_INT 3
16563: ARRAY
16564: PPUSH
16565: LD_EXP 60
16569: PUSH
16570: LD_VAR 0 4
16574: ARRAY
16575: PUSH
16576: LD_INT 4
16578: ARRAY
16579: PPUSH
16580: CALL_OW 297
16584: PUSH
16585: LD_INT 0
16587: GREATER
16588: IFFALSE 16629
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16590: LD_VAR 0 5
16594: PPUSH
16595: LD_EXP 60
16599: PUSH
16600: LD_VAR 0 4
16604: ARRAY
16605: PUSH
16606: LD_INT 3
16608: ARRAY
16609: PPUSH
16610: LD_EXP 60
16614: PUSH
16615: LD_VAR 0 4
16619: ARRAY
16620: PUSH
16621: LD_INT 4
16623: ARRAY
16624: PPUSH
16625: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 181
// if Multiplayer then
16638: LD_OWVAR 4
16642: IFFALSE 16691
// begin repeat wait ( 10 ) ;
16644: LD_INT 10
16646: PPUSH
16647: CALL_OW 67
// until not IsInUnit ( driver ) ;
16651: LD_VAR 0 5
16655: PPUSH
16656: CALL_OW 310
16660: NOT
16661: IFFALSE 16644
// if not HasTask ( driver ) then
16663: LD_VAR 0 5
16667: PPUSH
16668: CALL_OW 314
16672: NOT
16673: IFFALSE 16689
// ComEnterUnit ( driver , factory ) ;
16675: LD_VAR 0 5
16679: PPUSH
16680: LD_VAR 0 2
16684: PPUSH
16685: CALL_OW 120
// end else
16689: GO 16705
// AddComEnterUnit ( driver , factory ) ;
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL_OW 180
// wait ( 0 0$1 ) ;
16705: LD_INT 35
16707: PPUSH
16708: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16712: LD_ADDR_EXP 61
16716: PUSH
16717: LD_EXP 61
16721: PUSH
16722: LD_VAR 0 5
16726: DIFF
16727: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16728: LD_ADDR_EXP 61
16732: PUSH
16733: LD_EXP 61
16737: PUSH
16738: LD_VAR 0 1
16742: DIFF
16743: ST_TO_ADDR
// break ;
16744: GO 16897
// end ; end else
16746: GO 16895
// if GetControl ( vehicle ) = control_remote then
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 263
16757: PUSH
16758: LD_INT 2
16760: EQUAL
16761: IFFALSE 16847
// begin wait ( 0 0$2 ) ;
16763: LD_INT 70
16765: PPUSH
16766: CALL_OW 67
// repeat wait ( 10 ) ;
16770: LD_INT 10
16772: PPUSH
16773: CALL_OW 67
// Connect ( vehicle ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: CALL 31293 0 1
// until IsControledBy ( vehicle ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 312
16795: IFFALSE 16770
// wait ( 10 ) ;
16797: LD_INT 10
16799: PPUSH
16800: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16804: LD_VAR 0 1
16808: PPUSH
16809: LD_EXP 60
16813: PUSH
16814: LD_VAR 0 4
16818: ARRAY
16819: PUSH
16820: LD_INT 3
16822: ARRAY
16823: PPUSH
16824: LD_EXP 60
16828: PUSH
16829: LD_VAR 0 4
16833: ARRAY
16834: PUSH
16835: LD_INT 4
16837: ARRAY
16838: PPUSH
16839: CALL_OW 111
// break ;
16843: GO 16897
// end else
16845: GO 16895
// begin wait ( 0 0$3 ) ;
16847: LD_INT 105
16849: PPUSH
16850: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16854: LD_VAR 0 1
16858: PPUSH
16859: LD_EXP 60
16863: PUSH
16864: LD_VAR 0 4
16868: ARRAY
16869: PUSH
16870: LD_INT 3
16872: ARRAY
16873: PPUSH
16874: LD_EXP 60
16878: PUSH
16879: LD_VAR 0 4
16883: ARRAY
16884: PUSH
16885: LD_INT 4
16887: ARRAY
16888: PPUSH
16889: CALL_OW 111
// break ;
16893: GO 16897
// end ; end ;
16895: GO 16346
16897: POP
16898: POP
// end ;
16899: LD_VAR 0 3
16903: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16904: LD_INT 0
16906: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16907: LD_VAR 0 1
16911: PUSH
16912: LD_INT 250
16914: EQUAL
16915: IFFALSE 16932
16917: PUSH
16918: LD_VAR 0 2
16922: PPUSH
16923: CALL_OW 264
16927: PUSH
16928: LD_INT 81
16930: EQUAL
16931: AND
16932: IFFALSE 16953
// MinerPlaceMine ( unit , x , y ) ;
16934: LD_VAR 0 2
16938: PPUSH
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_VAR 0 5
16948: PPUSH
16949: CALL 20299 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16953: LD_VAR 0 1
16957: PUSH
16958: LD_INT 251
16960: EQUAL
16961: IFFALSE 16978
16963: PUSH
16964: LD_VAR 0 2
16968: PPUSH
16969: CALL_OW 264
16973: PUSH
16974: LD_INT 81
16976: EQUAL
16977: AND
16978: IFFALSE 16999
// MinerDetonateMine ( unit , x , y ) ;
16980: LD_VAR 0 2
16984: PPUSH
16985: LD_VAR 0 4
16989: PPUSH
16990: LD_VAR 0 5
16994: PPUSH
16995: CALL 20706 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16999: LD_VAR 0 1
17003: PUSH
17004: LD_INT 252
17006: EQUAL
17007: IFFALSE 17024
17009: PUSH
17010: LD_VAR 0 2
17014: PPUSH
17015: CALL_OW 264
17019: PUSH
17020: LD_INT 81
17022: EQUAL
17023: AND
17024: IFFALSE 17045
// MinerCreateMinefield ( unit , x , y ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: LD_VAR 0 4
17035: PPUSH
17036: LD_VAR 0 5
17040: PPUSH
17041: CALL 20938 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17045: LD_VAR 0 1
17049: PUSH
17050: LD_INT 253
17052: EQUAL
17053: IFFALSE 17070
17055: PUSH
17056: LD_VAR 0 2
17060: PPUSH
17061: CALL_OW 257
17065: PUSH
17066: LD_INT 5
17068: EQUAL
17069: AND
17070: IFFALSE 17091
// ComBinocular ( unit , x , y ) ;
17072: LD_VAR 0 2
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: LD_VAR 0 5
17086: PPUSH
17087: CALL 21313 0 3
// if selectedUnit then
17091: LD_VAR 0 3
17095: IFFALSE 17155
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17097: LD_VAR 0 1
17101: PUSH
17102: LD_INT 254
17104: EQUAL
17105: IFFALSE 17122
17107: PUSH
17108: LD_VAR 0 2
17112: PPUSH
17113: CALL_OW 264
17117: PUSH
17118: LD_INT 99
17120: EQUAL
17121: AND
17122: IFFALSE 17139
17124: PUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: CALL_OW 263
17134: PUSH
17135: LD_INT 3
17137: EQUAL
17138: AND
17139: IFFALSE 17155
// HackDestroyVehicle ( unit , selectedUnit ) ;
17141: LD_VAR 0 2
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: CALL 19489 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 255
17162: EQUAL
17163: IFFALSE 17187
17165: PUSH
17166: LD_VAR 0 2
17170: PPUSH
17171: CALL_OW 264
17175: PUSH
17176: LD_INT 14
17178: PUSH
17179: LD_INT 53
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: IN
17186: AND
17187: IFFALSE 17205
17189: PUSH
17190: LD_VAR 0 4
17194: PPUSH
17195: LD_VAR 0 5
17199: PPUSH
17200: CALL_OW 488
17204: AND
17205: IFFALSE 17229
// CutTreeXYR ( unit , x , y , 12 ) ;
17207: LD_VAR 0 2
17211: PPUSH
17212: LD_VAR 0 4
17216: PPUSH
17217: LD_VAR 0 5
17221: PPUSH
17222: LD_INT 12
17224: PPUSH
17225: CALL 17420 0 4
// if cmd = 256 then
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 256
17236: EQUAL
17237: IFFALSE 17258
// SetFactoryWaypoint ( unit , x , y ) ;
17239: LD_VAR 0 2
17243: PPUSH
17244: LD_VAR 0 4
17248: PPUSH
17249: LD_VAR 0 5
17253: PPUSH
17254: CALL 14699 0 3
// if cmd = 257 then
17258: LD_VAR 0 1
17262: PUSH
17263: LD_INT 257
17265: EQUAL
17266: IFFALSE 17287
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_VAR 0 4
17277: PPUSH
17278: LD_VAR 0 5
17282: PPUSH
17283: CALL 15195 0 3
// if cmd = 258 then
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 258
17294: EQUAL
17295: IFFALSE 17319
// BurnTreeXYR ( unit , x , y , 8 ) ;
17297: LD_VAR 0 2
17301: PPUSH
17302: LD_VAR 0 4
17306: PPUSH
17307: LD_VAR 0 5
17311: PPUSH
17312: LD_INT 8
17314: PPUSH
17315: CALL 17842 0 4
// end ;
17319: LD_VAR 0 6
17323: RET
// export function ComRadiation ( un ) ; var eff ; begin
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 264
17337: PUSH
17338: LD_INT 91
17340: NONEQUAL
17341: IFFALSE 17345
// exit ;
17343: GO 17415
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17345: LD_INT 68
17347: PPUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 255
17357: PPUSH
17358: CALL_OW 321
17362: PUSH
17363: LD_INT 2
17365: EQUAL
17366: IFFALSE 17378
// eff := 50 else
17368: LD_ADDR_VAR 0 3
17372: PUSH
17373: LD_INT 50
17375: ST_TO_ADDR
17376: GO 17386
// eff := 25 ;
17378: LD_ADDR_VAR 0 3
17382: PUSH
17383: LD_INT 25
17385: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 250
17395: PPUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 251
17405: PPUSH
17406: LD_VAR 0 3
17410: PPUSH
17411: CALL_OW 495
// end ;
17415: LD_VAR 0 2
17419: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17420: LD_INT 0
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17431: LD_VAR 0 1
17435: PPUSH
17436: CALL_OW 302
17440: NOT
17441: IFTRUE 17460
17443: PUSH
17444: LD_VAR 0 2
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 488
17458: NOT
17459: OR
17460: IFTRUE 17469
17462: PUSH
17463: LD_VAR 0 4
17467: NOT
17468: OR
17469: IFFALSE 17473
// exit ;
17471: GO 17837
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 437
17482: PPUSH
17483: CALL 25015 0 1
17487: PUSH
17488: LD_INT 10
17490: GREATER
17491: IFFALSE 17495
// exit ;
17493: GO 17837
// list := [ ] ;
17495: LD_ADDR_VAR 0 13
17499: PUSH
17500: EMPTY
17501: ST_TO_ADDR
// if x - r < 0 then
17502: LD_VAR 0 2
17506: PUSH
17507: LD_VAR 0 4
17511: MINUS
17512: PUSH
17513: LD_INT 0
17515: LESS
17516: IFFALSE 17528
// min_x := 0 else
17518: LD_ADDR_VAR 0 7
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
17526: GO 17544
// min_x := x - r ;
17528: LD_ADDR_VAR 0 7
17532: PUSH
17533: LD_VAR 0 2
17537: PUSH
17538: LD_VAR 0 4
17542: MINUS
17543: ST_TO_ADDR
// if y - r < 0 then
17544: LD_VAR 0 3
17548: PUSH
17549: LD_VAR 0 4
17553: MINUS
17554: PUSH
17555: LD_INT 0
17557: LESS
17558: IFFALSE 17570
// min_y := 0 else
17560: LD_ADDR_VAR 0 8
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
17568: GO 17586
// min_y := y - r ;
17570: LD_ADDR_VAR 0 8
17574: PUSH
17575: LD_VAR 0 3
17579: PUSH
17580: LD_VAR 0 4
17584: MINUS
17585: ST_TO_ADDR
// max_x := x + r ;
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_VAR 0 2
17595: PUSH
17596: LD_VAR 0 4
17600: PLUS
17601: ST_TO_ADDR
// max_y := y + r ;
17602: LD_ADDR_VAR 0 10
17606: PUSH
17607: LD_VAR 0 3
17611: PUSH
17612: LD_VAR 0 4
17616: PLUS
17617: ST_TO_ADDR
// for _x = min_x to max_x do
17618: LD_ADDR_VAR 0 11
17622: PUSH
17623: DOUBLE
17624: LD_VAR 0 7
17628: DEC
17629: ST_TO_ADDR
17630: LD_VAR 0 9
17634: PUSH
17635: FOR_TO
17636: IFFALSE 17755
// for _y = min_y to max_y do
17638: LD_ADDR_VAR 0 12
17642: PUSH
17643: DOUBLE
17644: LD_VAR 0 8
17648: DEC
17649: ST_TO_ADDR
17650: LD_VAR 0 10
17654: PUSH
17655: FOR_TO
17656: IFFALSE 17751
// begin if not ValidHex ( _x , _y ) then
17658: LD_VAR 0 11
17662: PPUSH
17663: LD_VAR 0 12
17667: PPUSH
17668: CALL_OW 488
17672: NOT
17673: IFFALSE 17677
// continue ;
17675: GO 17655
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17677: LD_VAR 0 11
17681: PPUSH
17682: LD_VAR 0 12
17686: PPUSH
17687: CALL_OW 351
17691: IFFALSE 17709
17693: PUSH
17694: LD_VAR 0 11
17698: PPUSH
17699: LD_VAR 0 12
17703: PPUSH
17704: CALL_OW 554
17708: AND
17709: IFFALSE 17749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17711: LD_ADDR_VAR 0 13
17715: PUSH
17716: LD_VAR 0 13
17720: PPUSH
17721: LD_VAR 0 13
17725: PUSH
17726: LD_INT 1
17728: PLUS
17729: PPUSH
17730: LD_VAR 0 11
17734: PUSH
17735: LD_VAR 0 12
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 2
17748: ST_TO_ADDR
// end ;
17749: GO 17655
17751: POP
17752: POP
17753: GO 17635
17755: POP
17756: POP
// if not list then
17757: LD_VAR 0 13
17761: NOT
17762: IFFALSE 17766
// exit ;
17764: GO 17837
// for i in list do
17766: LD_ADDR_VAR 0 6
17770: PUSH
17771: LD_VAR 0 13
17775: PUSH
17776: FOR_IN
17777: IFFALSE 17835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_STRING M
17786: PUSH
17787: LD_VAR 0 6
17791: PUSH
17792: LD_INT 1
17794: ARRAY
17795: PUSH
17796: LD_VAR 0 6
17800: PUSH
17801: LD_INT 2
17803: ARRAY
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: LD_INT 0
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: PPUSH
17829: CALL_OW 447
17833: GO 17776
17835: POP
17836: POP
// end ;
17837: LD_VAR 0 5
17841: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17842: LD_INT 0
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17854: LD_VAR 0 1
17858: PPUSH
17859: CALL_OW 302
17863: NOT
17864: IFTRUE 17883
17866: PUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: CALL_OW 488
17881: NOT
17882: OR
17883: IFTRUE 17892
17885: PUSH
17886: LD_VAR 0 4
17890: NOT
17891: OR
17892: IFFALSE 17896
// exit ;
17894: GO 18435
// if Count ( GetTaskList ( flame ) ) > 10 then
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 437
17905: PPUSH
17906: CALL 25015 0 1
17910: PUSH
17911: LD_INT 10
17913: GREATER
17914: IFFALSE 17918
// exit ;
17916: GO 18435
// list := [ ] ;
17918: LD_ADDR_VAR 0 13
17922: PUSH
17923: EMPTY
17924: ST_TO_ADDR
// if x - r < 0 then
17925: LD_VAR 0 2
17929: PUSH
17930: LD_VAR 0 4
17934: MINUS
17935: PUSH
17936: LD_INT 0
17938: LESS
17939: IFFALSE 17951
// min_x := 0 else
17941: LD_ADDR_VAR 0 7
17945: PUSH
17946: LD_INT 0
17948: ST_TO_ADDR
17949: GO 17967
// min_x := x - r ;
17951: LD_ADDR_VAR 0 7
17955: PUSH
17956: LD_VAR 0 2
17960: PUSH
17961: LD_VAR 0 4
17965: MINUS
17966: ST_TO_ADDR
// if y - r < 0 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_VAR 0 4
17976: MINUS
17977: PUSH
17978: LD_INT 0
17980: LESS
17981: IFFALSE 17993
// min_y := 0 else
17983: LD_ADDR_VAR 0 8
17987: PUSH
17988: LD_INT 0
17990: ST_TO_ADDR
17991: GO 18009
// min_y := y - r ;
17993: LD_ADDR_VAR 0 8
17997: PUSH
17998: LD_VAR 0 3
18002: PUSH
18003: LD_VAR 0 4
18007: MINUS
18008: ST_TO_ADDR
// max_x := x + r ;
18009: LD_ADDR_VAR 0 9
18013: PUSH
18014: LD_VAR 0 2
18018: PUSH
18019: LD_VAR 0 4
18023: PLUS
18024: ST_TO_ADDR
// max_y := y + r ;
18025: LD_ADDR_VAR 0 10
18029: PUSH
18030: LD_VAR 0 3
18034: PUSH
18035: LD_VAR 0 4
18039: PLUS
18040: ST_TO_ADDR
// for _x = min_x to max_x do
18041: LD_ADDR_VAR 0 11
18045: PUSH
18046: DOUBLE
18047: LD_VAR 0 7
18051: DEC
18052: ST_TO_ADDR
18053: LD_VAR 0 9
18057: PUSH
18058: FOR_TO
18059: IFFALSE 18178
// for _y = min_y to max_y do
18061: LD_ADDR_VAR 0 12
18065: PUSH
18066: DOUBLE
18067: LD_VAR 0 8
18071: DEC
18072: ST_TO_ADDR
18073: LD_VAR 0 10
18077: PUSH
18078: FOR_TO
18079: IFFALSE 18174
// begin if not ValidHex ( _x , _y ) then
18081: LD_VAR 0 11
18085: PPUSH
18086: LD_VAR 0 12
18090: PPUSH
18091: CALL_OW 488
18095: NOT
18096: IFFALSE 18100
// continue ;
18098: GO 18078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18100: LD_VAR 0 11
18104: PPUSH
18105: LD_VAR 0 12
18109: PPUSH
18110: CALL_OW 351
18114: IFFALSE 18132
18116: PUSH
18117: LD_VAR 0 11
18121: PPUSH
18122: LD_VAR 0 12
18126: PPUSH
18127: CALL_OW 554
18131: AND
18132: IFFALSE 18172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18134: LD_ADDR_VAR 0 13
18138: PUSH
18139: LD_VAR 0 13
18143: PPUSH
18144: LD_VAR 0 13
18148: PUSH
18149: LD_INT 1
18151: PLUS
18152: PPUSH
18153: LD_VAR 0 11
18157: PUSH
18158: LD_VAR 0 12
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 2
18171: ST_TO_ADDR
// end ;
18172: GO 18078
18174: POP
18175: POP
18176: GO 18058
18178: POP
18179: POP
// if not list then
18180: LD_VAR 0 13
18184: NOT
18185: IFFALSE 18189
// exit ;
18187: GO 18435
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18189: LD_ADDR_VAR 0 13
18193: PUSH
18194: LD_VAR 0 1
18198: PPUSH
18199: LD_VAR 0 13
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_INT 1
18209: PPUSH
18210: CALL 28421 0 4
18214: ST_TO_ADDR
// ComStop ( flame ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 141
// for i in list do
18224: LD_ADDR_VAR 0 6
18228: PUSH
18229: LD_VAR 0 13
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18266
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_VAR 0 6
18246: PUSH
18247: LD_INT 1
18249: ARRAY
18250: PPUSH
18251: LD_VAR 0 6
18255: PUSH
18256: LD_INT 2
18258: ARRAY
18259: PPUSH
18260: CALL_OW 176
18264: GO 18234
18266: POP
18267: POP
// repeat wait ( 0 0$1 ) ;
18268: LD_INT 35
18270: PPUSH
18271: CALL_OW 67
// task := GetTaskList ( flame ) ;
18275: LD_ADDR_VAR 0 14
18279: PUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 437
18289: ST_TO_ADDR
// if not task then
18290: LD_VAR 0 14
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18435
// if task [ 1 ] [ 1 ] <> | then
18299: LD_VAR 0 14
18303: PUSH
18304: LD_INT 1
18306: ARRAY
18307: PUSH
18308: LD_INT 1
18310: ARRAY
18311: PUSH
18312: LD_STRING |
18314: NONEQUAL
18315: IFFALSE 18319
// exit ;
18317: GO 18435
// _x := task [ 1 ] [ 2 ] ;
18319: LD_ADDR_VAR 0 11
18323: PUSH
18324: LD_VAR 0 14
18328: PUSH
18329: LD_INT 1
18331: ARRAY
18332: PUSH
18333: LD_INT 2
18335: ARRAY
18336: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18337: LD_ADDR_VAR 0 12
18341: PUSH
18342: LD_VAR 0 14
18346: PUSH
18347: LD_INT 1
18349: ARRAY
18350: PUSH
18351: LD_INT 3
18353: ARRAY
18354: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18355: LD_VAR 0 11
18359: PPUSH
18360: LD_VAR 0 12
18364: PPUSH
18365: CALL_OW 351
18369: NOT
18370: IFTRUE 18389
18372: PUSH
18373: LD_VAR 0 11
18377: PPUSH
18378: LD_VAR 0 12
18382: PPUSH
18383: CALL_OW 554
18387: NOT
18388: OR
18389: IFFALSE 18423
// begin task := Delete ( task , 1 ) ;
18391: LD_ADDR_VAR 0 14
18395: PUSH
18396: LD_VAR 0 14
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 3
18408: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_VAR 0 14
18418: PPUSH
18419: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 314
18432: NOT
18433: IFFALSE 18268
// end ;
18435: LD_VAR 0 5
18439: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18440: LD_EXP 64
18444: NOT
18445: IFFALSE 18495
18447: GO 18449
18449: DISABLE
// begin initHack := true ;
18450: LD_ADDR_EXP 64
18454: PUSH
18455: LD_INT 1
18457: ST_TO_ADDR
// hackTanks := [ ] ;
18458: LD_ADDR_EXP 65
18462: PUSH
18463: EMPTY
18464: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18465: LD_ADDR_EXP 66
18469: PUSH
18470: EMPTY
18471: ST_TO_ADDR
// hackLimit := 3 ;
18472: LD_ADDR_EXP 67
18476: PUSH
18477: LD_INT 3
18479: ST_TO_ADDR
// hackDist := 12 ;
18480: LD_ADDR_EXP 68
18484: PUSH
18485: LD_INT 12
18487: ST_TO_ADDR
// hackCounter := [ ] ;
18488: LD_ADDR_EXP 69
18492: PUSH
18493: EMPTY
18494: ST_TO_ADDR
// end ;
18495: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18496: LD_EXP 64
18500: IFFALSE 18518
18502: PUSH
18503: LD_INT 34
18505: PUSH
18506: LD_INT 99
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 69
18517: AND
18518: IFFALSE 18771
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
// begin enable ;
18527: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: LD_INT 34
18535: PUSH
18536: LD_INT 99
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PUSH
18548: FOR_IN
18549: IFFALSE 18769
// begin if not i in hackTanks then
18551: LD_VAR 0 1
18555: PUSH
18556: LD_EXP 65
18560: IN
18561: NOT
18562: IFFALSE 18645
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18564: LD_ADDR_EXP 65
18568: PUSH
18569: LD_EXP 65
18573: PPUSH
18574: LD_EXP 65
18578: PUSH
18579: LD_INT 1
18581: PLUS
18582: PPUSH
18583: LD_VAR 0 1
18587: PPUSH
18588: CALL_OW 1
18592: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18593: LD_ADDR_EXP 66
18597: PUSH
18598: LD_EXP 66
18602: PPUSH
18603: LD_EXP 66
18607: PUSH
18608: LD_INT 1
18610: PLUS
18611: PPUSH
18612: EMPTY
18613: PPUSH
18614: CALL_OW 1
18618: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18619: LD_ADDR_EXP 69
18623: PUSH
18624: LD_EXP 69
18628: PPUSH
18629: LD_EXP 69
18633: PUSH
18634: LD_INT 1
18636: PLUS
18637: PPUSH
18638: EMPTY
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 302
18654: NOT
18655: IFFALSE 18668
// begin HackUnlinkAll ( i ) ;
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL 18774 0 1
// continue ;
18666: GO 18548
// end ; HackCheckCapturedStatus ( i ) ;
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL 19219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 81
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 255
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 33
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 91
18711: PUSH
18712: LD_VAR 0 1
18716: PUSH
18717: LD_EXP 68
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 50
18729: PUSH
18730: EMPTY
18731: LIST
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PPUSH
18739: CALL_OW 69
18743: ST_TO_ADDR
// if not tmp then
18744: LD_VAR 0 2
18748: NOT
18749: IFFALSE 18753
// continue ;
18751: GO 18548
// HackLink ( i , tmp ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_VAR 0 2
18762: PPUSH
18763: CALL 18910 0 2
// end ;
18767: GO 18548
18769: POP
18770: POP
// end ;
18771: PPOPN 2
18773: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18774: LD_INT 0
18776: PPUSH
18777: PPUSH
18778: PPUSH
// if not hack in hackTanks then
18779: LD_VAR 0 1
18783: PUSH
18784: LD_EXP 65
18788: IN
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 18905
// index := GetElementIndex ( hackTanks , hack ) ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_EXP 65
18803: PPUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL 27716 0 2
18813: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18814: LD_EXP 66
18818: PUSH
18819: LD_VAR 0 4
18823: ARRAY
18824: IFFALSE 18905
// begin for i in hackTanksCaptured [ index ] do
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_EXP 66
18835: PUSH
18836: LD_VAR 0 4
18840: ARRAY
18841: PUSH
18842: FOR_IN
18843: IFFALSE 18869
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18845: LD_VAR 0 3
18849: PUSH
18850: LD_INT 1
18852: ARRAY
18853: PPUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_INT 2
18861: ARRAY
18862: PPUSH
18863: CALL_OW 235
18867: GO 18842
18869: POP
18870: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18871: LD_ADDR_EXP 66
18875: PUSH
18876: LD_EXP 66
18880: PPUSH
18881: LD_VAR 0 4
18885: PPUSH
18886: EMPTY
18887: PPUSH
18888: CALL_OW 1
18892: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: LD_INT 0
18900: PPUSH
18901: CALL_OW 505
// end ; end ;
18905: LD_VAR 0 2
18909: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18910: LD_INT 0
18912: PPUSH
18913: PPUSH
18914: PPUSH
// if not hack in hackTanks or not vehicles then
18915: LD_VAR 0 1
18919: PUSH
18920: LD_EXP 65
18924: IN
18925: NOT
18926: IFTRUE 18935
18928: PUSH
18929: LD_VAR 0 2
18933: NOT
18934: OR
18935: IFFALSE 18939
// exit ;
18937: GO 19214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18939: LD_ADDR_VAR 0 2
18943: PUSH
18944: LD_VAR 0 1
18948: PPUSH
18949: LD_VAR 0 2
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL 28368 0 4
18964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18965: LD_ADDR_VAR 0 5
18969: PUSH
18970: LD_EXP 65
18974: PPUSH
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL 27716 0 2
18984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18985: LD_EXP 66
18989: PUSH
18990: LD_VAR 0 5
18994: ARRAY
18995: PUSH
18996: LD_EXP 67
19000: LESS
19001: IFFALSE 19190
// begin for i := 1 to vehicles do
19003: LD_ADDR_VAR 0 4
19007: PUSH
19008: DOUBLE
19009: LD_INT 1
19011: DEC
19012: ST_TO_ADDR
19013: LD_VAR 0 2
19017: PUSH
19018: FOR_TO
19019: IFFALSE 19188
// begin if hackTanksCaptured [ index ] = hackLimit then
19021: LD_EXP 66
19025: PUSH
19026: LD_VAR 0 5
19030: ARRAY
19031: PUSH
19032: LD_EXP 67
19036: EQUAL
19037: IFFALSE 19041
// break ;
19039: GO 19188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19041: LD_ADDR_EXP 69
19045: PUSH
19046: LD_EXP 69
19050: PPUSH
19051: LD_VAR 0 5
19055: PPUSH
19056: LD_EXP 69
19060: PUSH
19061: LD_VAR 0 5
19065: ARRAY
19066: PUSH
19067: LD_INT 1
19069: PLUS
19070: PPUSH
19071: CALL_OW 1
19075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19076: LD_ADDR_EXP 66
19080: PUSH
19081: LD_EXP 66
19085: PPUSH
19086: LD_VAR 0 5
19090: PUSH
19091: LD_EXP 66
19095: PUSH
19096: LD_VAR 0 5
19100: ARRAY
19101: PUSH
19102: LD_INT 1
19104: PLUS
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PPUSH
19110: LD_VAR 0 2
19114: PUSH
19115: LD_VAR 0 4
19119: ARRAY
19120: PUSH
19121: LD_VAR 0 2
19125: PUSH
19126: LD_VAR 0 4
19130: ARRAY
19131: PPUSH
19132: CALL_OW 255
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL 27933 0 3
19145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19146: LD_VAR 0 2
19150: PUSH
19151: LD_VAR 0 4
19155: ARRAY
19156: PPUSH
19157: LD_VAR 0 1
19161: PPUSH
19162: CALL_OW 255
19166: PPUSH
19167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19171: LD_VAR 0 2
19175: PUSH
19176: LD_VAR 0 4
19180: ARRAY
19181: PPUSH
19182: CALL_OW 141
// end ;
19186: GO 19018
19188: POP
19189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19190: LD_VAR 0 1
19194: PPUSH
19195: LD_EXP 66
19199: PUSH
19200: LD_VAR 0 5
19204: ARRAY
19205: PUSH
19206: LD_INT 0
19208: PLUS
19209: PPUSH
19210: CALL_OW 505
// end ;
19214: LD_VAR 0 3
19218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19219: LD_INT 0
19221: PPUSH
19222: PPUSH
19223: PPUSH
19224: PPUSH
// if not hack in hackTanks then
19225: LD_VAR 0 1
19229: PUSH
19230: LD_EXP 65
19234: IN
19235: NOT
19236: IFFALSE 19240
// exit ;
19238: GO 19484
// index := GetElementIndex ( hackTanks , hack ) ;
19240: LD_ADDR_VAR 0 4
19244: PUSH
19245: LD_EXP 65
19249: PPUSH
19250: LD_VAR 0 1
19254: PPUSH
19255: CALL 27716 0 2
19259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: DOUBLE
19266: LD_EXP 66
19270: PUSH
19271: LD_VAR 0 4
19275: ARRAY
19276: INC
19277: ST_TO_ADDR
19278: LD_INT 1
19280: PUSH
19281: FOR_DOWNTO
19282: IFFALSE 19458
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19284: LD_ADDR_VAR 0 5
19288: PUSH
19289: LD_EXP 66
19293: PUSH
19294: LD_VAR 0 4
19298: ARRAY
19299: PUSH
19300: LD_VAR 0 3
19304: ARRAY
19305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19306: LD_VAR 0 5
19310: PUSH
19311: LD_INT 1
19313: ARRAY
19314: PPUSH
19315: CALL_OW 302
19319: NOT
19320: IFTRUE 19348
19322: PUSH
19323: LD_VAR 0 5
19327: PUSH
19328: LD_INT 1
19330: ARRAY
19331: PPUSH
19332: CALL_OW 255
19336: PUSH
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 255
19346: NONEQUAL
19347: OR
19348: IFFALSE 19456
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19350: LD_VAR 0 5
19354: PUSH
19355: LD_INT 1
19357: ARRAY
19358: PPUSH
19359: CALL_OW 305
19363: IFFALSE 19391
19365: PUSH
19366: LD_VAR 0 5
19370: PUSH
19371: LD_INT 1
19373: ARRAY
19374: PPUSH
19375: CALL_OW 255
19379: PUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 255
19389: EQUAL
19390: AND
19391: IFFALSE 19415
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19393: LD_VAR 0 5
19397: PUSH
19398: LD_INT 1
19400: ARRAY
19401: PPUSH
19402: LD_VAR 0 5
19406: PUSH
19407: LD_INT 2
19409: ARRAY
19410: PPUSH
19411: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19415: LD_ADDR_EXP 66
19419: PUSH
19420: LD_EXP 66
19424: PPUSH
19425: LD_VAR 0 4
19429: PPUSH
19430: LD_EXP 66
19434: PUSH
19435: LD_VAR 0 4
19439: ARRAY
19440: PPUSH
19441: LD_VAR 0 3
19445: PPUSH
19446: CALL_OW 3
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
// end ; end ;
19456: GO 19281
19458: POP
19459: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_EXP 66
19469: PUSH
19470: LD_VAR 0 4
19474: ARRAY
19475: PUSH
19476: LD_INT 0
19478: PLUS
19479: PPUSH
19480: CALL_OW 505
// end ;
19484: LD_VAR 0 2
19488: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19489: LD_INT 0
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
// if not hack in hackTanks then
19495: LD_VAR 0 1
19499: PUSH
19500: LD_EXP 65
19504: IN
19505: NOT
19506: IFFALSE 19510
// exit ;
19508: GO 19595
// index := GetElementIndex ( hackTanks , hack ) ;
19510: LD_ADDR_VAR 0 5
19514: PUSH
19515: LD_EXP 65
19519: PPUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL 27716 0 2
19529: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: DOUBLE
19536: LD_INT 1
19538: DEC
19539: ST_TO_ADDR
19540: LD_EXP 66
19544: PUSH
19545: LD_VAR 0 5
19549: ARRAY
19550: PUSH
19551: FOR_TO
19552: IFFALSE 19593
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19554: LD_EXP 66
19558: PUSH
19559: LD_VAR 0 5
19563: ARRAY
19564: PUSH
19565: LD_VAR 0 4
19569: ARRAY
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PUSH
19575: LD_VAR 0 2
19579: EQUAL
19580: IFFALSE 19591
// KillUnit ( vehicle ) ;
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 66
19591: GO 19551
19593: POP
19594: POP
// end ;
19595: LD_VAR 0 3
19599: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
19600: LD_EXP 70
19604: NOT
19605: IFFALSE 19738
19607: GO 19609
19609: DISABLE
19610: LD_INT 0
19612: PPUSH
// begin initMiner := true ;
19613: LD_ADDR_EXP 70
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// minersList := [ ] ;
19621: LD_ADDR_EXP 71
19625: PUSH
19626: EMPTY
19627: ST_TO_ADDR
// minerMinesList := [ ] ;
19628: LD_ADDR_EXP 72
19632: PUSH
19633: EMPTY
19634: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
19635: LD_ADDR_EXP 73
19639: PUSH
19640: LD_INT 10
19642: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: LD_INT 34
19650: PUSH
19651: LD_INT 81
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 69
19662: PUSH
19663: FOR_IN
19664: IFFALSE 19736
// begin if not i in minersList then
19666: LD_VAR 0 1
19670: PUSH
19671: LD_EXP 71
19675: IN
19676: NOT
19677: IFFALSE 19734
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19679: LD_ADDR_EXP 71
19683: PUSH
19684: LD_EXP 71
19688: PPUSH
19689: LD_EXP 71
19693: PUSH
19694: LD_INT 1
19696: PLUS
19697: PPUSH
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 1
19707: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19708: LD_ADDR_EXP 72
19712: PUSH
19713: LD_EXP 72
19717: PPUSH
19718: LD_EXP 72
19722: PUSH
19723: LD_INT 1
19725: PLUS
19726: PPUSH
19727: EMPTY
19728: PPUSH
19729: CALL_OW 1
19733: ST_TO_ADDR
// end end ;
19734: GO 19663
19736: POP
19737: POP
// end ;
19738: PPOPN 1
19740: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
19741: LD_EXP 70
19745: IFFALSE 19776
19747: PUSH
19748: LD_EXP 72
19752: PPUSH
19753: CALL 25015 0 1
19757: IFTRUE 19775
19759: PUSH
19760: LD_INT 34
19762: PUSH
19763: LD_INT 81
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: OR
19775: AND
19776: IFFALSE 20296
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
// begin enable ;
19787: ENABLE
// for i := minerMinesList downto 1 do
19788: LD_ADDR_VAR 0 1
19792: PUSH
19793: DOUBLE
19794: LD_EXP 72
19798: INC
19799: ST_TO_ADDR
19800: LD_INT 1
19802: PUSH
19803: FOR_DOWNTO
19804: IFFALSE 20294
// begin side := GetSide ( minersList [ i ] ) ;
19806: LD_ADDR_VAR 0 3
19810: PUSH
19811: LD_EXP 71
19815: PUSH
19816: LD_VAR 0 1
19820: ARRAY
19821: PPUSH
19822: CALL_OW 255
19826: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
19827: LD_EXP 71
19831: PUSH
19832: LD_VAR 0 1
19836: ARRAY
19837: PPUSH
19838: CALL_OW 300
19842: IFFALSE 19863
19844: PUSH
19845: LD_VAR 0 3
19849: PUSH
19850: LD_OWVAR 2
19854: PUSH
19855: LD_INT 9
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: IN
19862: AND
19863: IFFALSE 19896
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
19865: LD_EXP 71
19869: PUSH
19870: LD_VAR 0 1
19874: ARRAY
19875: PPUSH
19876: LD_EXP 72
19880: PUSH
19881: LD_VAR 0 1
19885: ARRAY
19886: PPUSH
19887: CALL 25015 0 1
19891: PPUSH
19892: CALL_OW 505
// if not minerMinesList [ i ] then
19896: LD_EXP 72
19900: PUSH
19901: LD_VAR 0 1
19905: ARRAY
19906: NOT
19907: IFFALSE 19911
// continue ;
19909: GO 19803
// for j := minerMinesList [ i ] downto 1 do
19911: LD_ADDR_VAR 0 2
19915: PUSH
19916: DOUBLE
19917: LD_EXP 72
19921: PUSH
19922: LD_VAR 0 1
19926: ARRAY
19927: INC
19928: ST_TO_ADDR
19929: LD_INT 1
19931: PUSH
19932: FOR_DOWNTO
19933: IFFALSE 20290
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
19935: LD_EXP 71
19939: PUSH
19940: LD_VAR 0 1
19944: ARRAY
19945: PPUSH
19946: CALL_OW 301
19950: IFTRUE 19970
19952: PUSH
19953: LD_EXP 71
19957: PUSH
19958: LD_VAR 0 1
19962: ARRAY
19963: PPUSH
19964: CALL_OW 305
19968: NOT
19969: OR
19970: IFFALSE 20061
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19972: LD_EXP 72
19976: PUSH
19977: LD_VAR 0 1
19981: ARRAY
19982: PUSH
19983: LD_VAR 0 2
19987: ARRAY
19988: PUSH
19989: LD_INT 1
19991: ARRAY
19992: PPUSH
19993: LD_EXP 72
19997: PUSH
19998: LD_VAR 0 1
20002: ARRAY
20003: PUSH
20004: LD_VAR 0 2
20008: ARRAY
20009: PUSH
20010: LD_INT 2
20012: ARRAY
20013: PPUSH
20014: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20018: LD_ADDR_EXP 72
20022: PUSH
20023: LD_EXP 72
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_EXP 72
20037: PUSH
20038: LD_VAR 0 1
20042: ARRAY
20043: PPUSH
20044: LD_VAR 0 2
20048: PPUSH
20049: CALL_OW 3
20053: PPUSH
20054: CALL_OW 1
20058: ST_TO_ADDR
// continue ;
20059: GO 19932
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20061: LD_ADDR_VAR 0 4
20065: PUSH
20066: LD_EXP 72
20070: PUSH
20071: LD_VAR 0 1
20075: ARRAY
20076: PUSH
20077: LD_VAR 0 2
20081: ARRAY
20082: PUSH
20083: LD_INT 1
20085: ARRAY
20086: PPUSH
20087: LD_EXP 72
20091: PUSH
20092: LD_VAR 0 1
20096: ARRAY
20097: PUSH
20098: LD_VAR 0 2
20102: ARRAY
20103: PUSH
20104: LD_INT 2
20106: ARRAY
20107: PPUSH
20108: CALL_OW 428
20112: ST_TO_ADDR
// if not tmp then
20113: LD_VAR 0 4
20117: NOT
20118: IFFALSE 20122
// continue ;
20120: GO 19932
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20122: LD_VAR 0 4
20126: PUSH
20127: LD_INT 81
20129: PUSH
20130: LD_VAR 0 3
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PPUSH
20139: CALL_OW 69
20143: IN
20144: IFFALSE 20194
20146: PUSH
20147: LD_EXP 72
20151: PUSH
20152: LD_VAR 0 1
20156: ARRAY
20157: PUSH
20158: LD_VAR 0 2
20162: ARRAY
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: LD_EXP 72
20172: PUSH
20173: LD_VAR 0 1
20177: ARRAY
20178: PUSH
20179: LD_VAR 0 2
20183: ARRAY
20184: PUSH
20185: LD_INT 2
20187: ARRAY
20188: PPUSH
20189: CALL_OW 458
20193: AND
20194: IFFALSE 20288
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20196: LD_EXP 72
20200: PUSH
20201: LD_VAR 0 1
20205: ARRAY
20206: PUSH
20207: LD_VAR 0 2
20211: ARRAY
20212: PUSH
20213: LD_INT 1
20215: ARRAY
20216: PPUSH
20217: LD_EXP 72
20221: PUSH
20222: LD_VAR 0 1
20226: ARRAY
20227: PUSH
20228: LD_VAR 0 2
20232: ARRAY
20233: PUSH
20234: LD_INT 2
20236: ARRAY
20237: PPUSH
20238: LD_VAR 0 3
20242: PPUSH
20243: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20247: LD_ADDR_EXP 72
20251: PUSH
20252: LD_EXP 72
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: LD_EXP 72
20266: PUSH
20267: LD_VAR 0 1
20271: ARRAY
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: CALL_OW 3
20282: PPUSH
20283: CALL_OW 1
20287: ST_TO_ADDR
// end ; end ;
20288: GO 19932
20290: POP
20291: POP
// end ;
20292: GO 19803
20294: POP
20295: POP
// end ;
20296: PPOPN 4
20298: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
20299: LD_INT 0
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
// result := false ;
20305: LD_ADDR_VAR 0 4
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20313: LD_VAR 0 1
20317: PPUSH
20318: CALL_OW 264
20322: PUSH
20323: LD_INT 81
20325: EQUAL
20326: NOT
20327: IFFALSE 20331
// exit ;
20329: GO 20701
// side := GetSide ( unit ) ;
20331: LD_ADDR_VAR 0 6
20335: PUSH
20336: LD_VAR 0 1
20340: PPUSH
20341: CALL_OW 255
20345: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
20346: LD_ADDR_VAR 0 5
20350: PUSH
20351: LD_EXP 71
20355: PPUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL 27716 0 2
20365: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20366: LD_EXP 72
20370: PUSH
20371: LD_VAR 0 5
20375: ARRAY
20376: PUSH
20377: LD_EXP 73
20381: GREATEREQUAL
20382: IFFALSE 20386
// exit ;
20384: GO 20701
// ComMoveXY ( unit , x , y ) ;
20386: LD_VAR 0 1
20390: PPUSH
20391: LD_VAR 0 2
20395: PPUSH
20396: LD_VAR 0 3
20400: PPUSH
20401: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20405: LD_INT 35
20407: PPUSH
20408: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20412: LD_VAR 0 1
20416: PPUSH
20417: LD_VAR 0 2
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: CALL 59772 0 3
20431: NOT
20432: IFFALSE 20445
20434: PUSH
20435: LD_VAR 0 1
20439: PPUSH
20440: CALL_OW 314
20444: AND
20445: IFFALSE 20449
// exit ;
20447: GO 20701
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20449: LD_VAR 0 2
20453: PPUSH
20454: LD_VAR 0 3
20458: PPUSH
20459: CALL_OW 428
20463: PUSH
20464: LD_VAR 0 1
20468: EQUAL
20469: IFFALSE 20483
20471: PUSH
20472: LD_VAR 0 1
20476: PPUSH
20477: CALL_OW 314
20481: NOT
20482: AND
20483: IFFALSE 20405
// if MineAtPos ( x , y ) then
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: CALL_OW 458
20499: IFFALSE 20503
// exit ;
20501: GO 20701
// if your_side = side then
20503: LD_OWVAR 2
20507: PUSH
20508: LD_VAR 0 6
20512: EQUAL
20513: IFFALSE 20532
// PlaySoundXY ( x , y , PlantMine ) ;
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_STRING PlantMine
20527: PPUSH
20528: CALL_OW 366
// repeat wait ( 1 ) ;
20532: LD_INT 1
20534: PPUSH
20535: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
20539: LD_VAR 0 2
20543: PPUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_VAR 0 6
20553: PPUSH
20554: LD_INT 0
20556: PPUSH
20557: CALL_OW 454
20561: IFFALSE 20532
// if MineAtPos ( x , y ) then
20563: LD_VAR 0 2
20567: PPUSH
20568: LD_VAR 0 3
20572: PPUSH
20573: CALL_OW 458
20577: IFFALSE 20693
// begin for i in minerMinesList [ index ] do
20579: LD_ADDR_VAR 0 7
20583: PUSH
20584: LD_EXP 72
20588: PUSH
20589: LD_VAR 0 5
20593: ARRAY
20594: PUSH
20595: FOR_IN
20596: IFFALSE 20638
// if i [ 1 ] = x and i [ 2 ] = y then
20598: LD_VAR 0 7
20602: PUSH
20603: LD_INT 1
20605: ARRAY
20606: PUSH
20607: LD_VAR 0 2
20611: EQUAL
20612: IFFALSE 20630
20614: PUSH
20615: LD_VAR 0 7
20619: PUSH
20620: LD_INT 2
20622: ARRAY
20623: PUSH
20624: LD_VAR 0 3
20628: EQUAL
20629: AND
20630: IFFALSE 20636
// exit ;
20632: POP
20633: POP
20634: GO 20701
20636: GO 20595
20638: POP
20639: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20640: LD_ADDR_EXP 72
20644: PUSH
20645: LD_EXP 72
20649: PPUSH
20650: LD_VAR 0 5
20654: PUSH
20655: LD_EXP 72
20659: PUSH
20660: LD_VAR 0 5
20664: ARRAY
20665: PUSH
20666: LD_INT 1
20668: PLUS
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PPUSH
20674: LD_VAR 0 2
20678: PUSH
20679: LD_VAR 0 3
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PPUSH
20688: CALL 27933 0 3
20692: ST_TO_ADDR
// end ; result := true ;
20693: LD_ADDR_VAR 0 4
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// end ;
20701: LD_VAR 0 4
20705: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20706: LD_INT 0
20708: PPUSH
20709: PPUSH
20710: PPUSH
// if not unit in minersList then
20711: LD_VAR 0 1
20715: PUSH
20716: LD_EXP 71
20720: IN
20721: NOT
20722: IFFALSE 20726
// exit ;
20724: GO 20933
// index := GetElementIndex ( minersList , unit ) ;
20726: LD_ADDR_VAR 0 6
20730: PUSH
20731: LD_EXP 71
20735: PPUSH
20736: LD_VAR 0 1
20740: PPUSH
20741: CALL 27716 0 2
20745: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20746: LD_ADDR_VAR 0 5
20750: PUSH
20751: DOUBLE
20752: LD_EXP 72
20756: PUSH
20757: LD_VAR 0 6
20761: ARRAY
20762: INC
20763: ST_TO_ADDR
20764: LD_INT 1
20766: PUSH
20767: FOR_DOWNTO
20768: IFFALSE 20931
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20770: LD_EXP 72
20774: PUSH
20775: LD_VAR 0 6
20779: ARRAY
20780: PUSH
20781: LD_VAR 0 5
20785: ARRAY
20786: PUSH
20787: LD_INT 1
20789: ARRAY
20790: PPUSH
20791: LD_EXP 72
20795: PUSH
20796: LD_VAR 0 6
20800: ARRAY
20801: PUSH
20802: LD_VAR 0 5
20806: ARRAY
20807: PUSH
20808: LD_INT 2
20810: ARRAY
20811: PPUSH
20812: LD_VAR 0 2
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: CALL_OW 298
20826: PUSH
20827: LD_INT 6
20829: LESS
20830: IFFALSE 20929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20832: LD_EXP 72
20836: PUSH
20837: LD_VAR 0 6
20841: ARRAY
20842: PUSH
20843: LD_VAR 0 5
20847: ARRAY
20848: PUSH
20849: LD_INT 1
20851: ARRAY
20852: PPUSH
20853: LD_EXP 72
20857: PUSH
20858: LD_VAR 0 6
20862: ARRAY
20863: PUSH
20864: LD_VAR 0 5
20868: ARRAY
20869: PUSH
20870: LD_INT 2
20872: ARRAY
20873: PPUSH
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 255
20883: PPUSH
20884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20888: LD_ADDR_EXP 72
20892: PUSH
20893: LD_EXP 72
20897: PPUSH
20898: LD_VAR 0 6
20902: PPUSH
20903: LD_EXP 72
20907: PUSH
20908: LD_VAR 0 6
20912: ARRAY
20913: PPUSH
20914: LD_VAR 0 5
20918: PPUSH
20919: CALL_OW 3
20923: PPUSH
20924: CALL_OW 1
20928: ST_TO_ADDR
// end ; end ;
20929: GO 20767
20931: POP
20932: POP
// end ;
20933: LD_VAR 0 4
20937: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
20946: PPUSH
20947: PPUSH
20948: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 264
20958: PUSH
20959: LD_INT 81
20961: EQUAL
20962: NOT
20963: IFTRUE 20978
20965: PUSH
20966: LD_VAR 0 1
20970: PUSH
20971: LD_EXP 71
20975: IN
20976: NOT
20977: OR
20978: IFFALSE 20982
// exit ;
20980: GO 21308
// index := GetElementIndex ( minersList , unit ) ;
20982: LD_ADDR_VAR 0 6
20986: PUSH
20987: LD_EXP 71
20991: PPUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL 27716 0 2
21001: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21002: LD_ADDR_VAR 0 8
21006: PUSH
21007: LD_EXP 73
21011: PUSH
21012: LD_EXP 72
21016: PUSH
21017: LD_VAR 0 6
21021: ARRAY
21022: MINUS
21023: ST_TO_ADDR
// if not minesFreeAmount then
21024: LD_VAR 0 8
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21308
// tmp := [ ] ;
21033: LD_ADDR_VAR 0 7
21037: PUSH
21038: EMPTY
21039: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21040: LD_ADDR_VAR 0 5
21044: PUSH
21045: DOUBLE
21046: LD_INT 1
21048: DEC
21049: ST_TO_ADDR
21050: LD_VAR 0 8
21054: PUSH
21055: FOR_TO
21056: IFFALSE 21255
// begin _d := rand ( 0 , 5 ) ;
21058: LD_ADDR_VAR 0 11
21062: PUSH
21063: LD_INT 0
21065: PPUSH
21066: LD_INT 5
21068: PPUSH
21069: CALL_OW 12
21073: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21074: LD_ADDR_VAR 0 12
21078: PUSH
21079: LD_INT 2
21081: PPUSH
21082: LD_INT 6
21084: PPUSH
21085: CALL_OW 12
21089: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21090: LD_ADDR_VAR 0 9
21094: PUSH
21095: LD_VAR 0 2
21099: PPUSH
21100: LD_VAR 0 11
21104: PPUSH
21105: LD_VAR 0 12
21109: PPUSH
21110: CALL_OW 272
21114: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21115: LD_ADDR_VAR 0 10
21119: PUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_VAR 0 11
21129: PPUSH
21130: LD_VAR 0 12
21134: PPUSH
21135: CALL_OW 273
21139: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21140: LD_VAR 0 9
21144: PPUSH
21145: LD_VAR 0 10
21149: PPUSH
21150: CALL_OW 488
21154: IFFALSE 21178
21156: PUSH
21157: LD_VAR 0 9
21161: PUSH
21162: LD_VAR 0 10
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_VAR 0 7
21175: IN
21176: NOT
21177: AND
21178: IFFALSE 21197
21180: PUSH
21181: LD_VAR 0 9
21185: PPUSH
21186: LD_VAR 0 10
21190: PPUSH
21191: CALL_OW 458
21195: NOT
21196: AND
21197: IFFALSE 21239
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21199: LD_ADDR_VAR 0 7
21203: PUSH
21204: LD_VAR 0 7
21208: PPUSH
21209: LD_VAR 0 7
21213: PUSH
21214: LD_INT 1
21216: PLUS
21217: PPUSH
21218: LD_VAR 0 9
21222: PUSH
21223: LD_VAR 0 10
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PPUSH
21232: CALL_OW 1
21236: ST_TO_ADDR
21237: GO 21253
// i := i - 1 ;
21239: LD_ADDR_VAR 0 5
21243: PUSH
21244: LD_VAR 0 5
21248: PUSH
21249: LD_INT 1
21251: MINUS
21252: ST_TO_ADDR
// end ;
21253: GO 21055
21255: POP
21256: POP
// for i in tmp do
21257: LD_ADDR_VAR 0 5
21261: PUSH
21262: LD_VAR 0 7
21266: PUSH
21267: FOR_IN
21268: IFFALSE 21306
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21270: LD_VAR 0 1
21274: PPUSH
21275: LD_VAR 0 5
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: LD_VAR 0 5
21288: PUSH
21289: LD_INT 2
21291: ARRAY
21292: PPUSH
21293: CALL 20299 0 3
21297: NOT
21298: IFFALSE 21304
// exit ;
21300: POP
21301: POP
21302: GO 21308
21304: GO 21267
21306: POP
21307: POP
// end ;
21308: LD_VAR 0 4
21312: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
// if GetClass ( unit ) <> class_sniper then
21324: LD_VAR 0 1
21328: PPUSH
21329: CALL_OW 257
21333: PUSH
21334: LD_INT 5
21336: NONEQUAL
21337: IFFALSE 21341
// exit ;
21339: GO 21811
// dist := 8 ;
21341: LD_ADDR_VAR 0 5
21345: PUSH
21346: LD_INT 8
21348: ST_TO_ADDR
// viewRange := 12 ;
21349: LD_ADDR_VAR 0 8
21353: PUSH
21354: LD_INT 12
21356: ST_TO_ADDR
// side := GetSide ( unit ) ;
21357: LD_ADDR_VAR 0 6
21361: PUSH
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 255
21371: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21372: LD_INT 61
21374: PPUSH
21375: LD_VAR 0 6
21379: PPUSH
21380: CALL_OW 321
21384: PUSH
21385: LD_INT 2
21387: EQUAL
21388: IFFALSE 21398
// viewRange := 16 ;
21390: LD_ADDR_VAR 0 8
21394: PUSH
21395: LD_INT 16
21397: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_VAR 0 2
21407: PPUSH
21408: LD_VAR 0 3
21412: PPUSH
21413: CALL_OW 297
21417: PUSH
21418: LD_VAR 0 5
21422: GREATER
21423: IFFALSE 21502
// begin ComMoveXY ( unit , x , y ) ;
21425: LD_VAR 0 1
21429: PPUSH
21430: LD_VAR 0 2
21434: PPUSH
21435: LD_VAR 0 3
21439: PPUSH
21440: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21444: LD_INT 35
21446: PPUSH
21447: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21451: LD_VAR 0 1
21455: PPUSH
21456: LD_VAR 0 2
21460: PPUSH
21461: LD_VAR 0 3
21465: PPUSH
21466: CALL 59772 0 3
21470: NOT
21471: IFFALSE 21475
// exit ;
21473: GO 21811
// until GetDistUnitXY ( unit , x , y ) < dist ;
21475: LD_VAR 0 1
21479: PPUSH
21480: LD_VAR 0 2
21484: PPUSH
21485: LD_VAR 0 3
21489: PPUSH
21490: CALL_OW 297
21494: PUSH
21495: LD_VAR 0 5
21499: LESS
21500: IFFALSE 21444
// end ; ComTurnXY ( unit , x , y ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: CALL_OW 118
// repeat if Multiplayer then
21521: LD_OWVAR 4
21525: IFFALSE 21536
// wait ( 35 ) else
21527: LD_INT 35
21529: PPUSH
21530: CALL_OW 67
21534: GO 21543
// wait ( 5 ) ;
21536: LD_INT 5
21538: PPUSH
21539: CALL_OW 67
// _d := GetDir ( unit ) ;
21543: LD_ADDR_VAR 0 11
21547: PUSH
21548: LD_VAR 0 1
21552: PPUSH
21553: CALL_OW 254
21557: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21558: LD_ADDR_VAR 0 7
21562: PUSH
21563: LD_VAR 0 1
21567: PPUSH
21568: CALL_OW 250
21572: PPUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 251
21582: PPUSH
21583: LD_VAR 0 2
21587: PPUSH
21588: LD_VAR 0 3
21592: PPUSH
21593: CALL 62408 0 4
21597: ST_TO_ADDR
// until dir = _d ;
21598: LD_VAR 0 7
21602: PUSH
21603: LD_VAR 0 11
21607: EQUAL
21608: IFFALSE 21521
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21610: LD_ADDR_VAR 0 9
21614: PUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 250
21624: PPUSH
21625: LD_VAR 0 7
21629: PPUSH
21630: LD_VAR 0 5
21634: PPUSH
21635: CALL_OW 272
21639: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21640: LD_ADDR_VAR 0 10
21644: PUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 251
21654: PPUSH
21655: LD_VAR 0 7
21659: PPUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL_OW 273
21669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21670: LD_VAR 0 9
21674: PPUSH
21675: LD_VAR 0 10
21679: PPUSH
21680: CALL_OW 488
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21811
// ComAnimCustom ( unit , 1 ) ;
21689: LD_VAR 0 1
21693: PPUSH
21694: LD_INT 1
21696: PPUSH
21697: CALL_OW 592
// p := 0 ;
21701: LD_ADDR_VAR 0 12
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21709: LD_VAR 0 9
21713: PPUSH
21714: LD_VAR 0 10
21718: PPUSH
21719: LD_VAR 0 6
21723: PPUSH
21724: LD_VAR 0 8
21728: PPUSH
21729: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21733: LD_INT 35
21735: PPUSH
21736: CALL_OW 67
// p := Inc ( p ) ;
21740: LD_ADDR_VAR 0 12
21744: PUSH
21745: LD_VAR 0 12
21749: PPUSH
21750: CALL 62364 0 1
21754: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21755: LD_VAR 0 12
21759: PUSH
21760: LD_INT 3
21762: EQUAL
21763: IFTRUE 21777
21765: PUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 302
21775: NOT
21776: OR
21777: IFTRUE 21790
21779: PUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 301
21789: OR
21790: IFFALSE 21733
// RemoveSeeing ( _x , _y , side ) ;
21792: LD_VAR 0 9
21796: PPUSH
21797: LD_VAR 0 10
21801: PPUSH
21802: LD_VAR 0 6
21806: PPUSH
21807: CALL_OW 331
// end ;
21811: LD_VAR 0 4
21815: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
21816: LD_INT 0
21818: PPUSH
21819: PPUSH
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
// if not unit then
21829: LD_VAR 0 1
21833: NOT
21834: IFFALSE 21838
// exit ;
21836: GO 22109
// side := GetSide ( unit ) ;
21838: LD_ADDR_VAR 0 3
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 255
21852: ST_TO_ADDR
// x := GetX ( unit ) ;
21853: LD_ADDR_VAR 0 5
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 250
21867: ST_TO_ADDR
// y := GetY ( unit ) ;
21868: LD_ADDR_VAR 0 6
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 251
21882: ST_TO_ADDR
// r := 8 ;
21883: LD_ADDR_VAR 0 4
21887: PUSH
21888: LD_INT 8
21890: ST_TO_ADDR
// if x - r < 0 then
21891: LD_VAR 0 5
21895: PUSH
21896: LD_VAR 0 4
21900: MINUS
21901: PUSH
21902: LD_INT 0
21904: LESS
21905: IFFALSE 21917
// min_x := 0 else
21907: LD_ADDR_VAR 0 7
21911: PUSH
21912: LD_INT 0
21914: ST_TO_ADDR
21915: GO 21933
// min_x := x - r ;
21917: LD_ADDR_VAR 0 7
21921: PUSH
21922: LD_VAR 0 5
21926: PUSH
21927: LD_VAR 0 4
21931: MINUS
21932: ST_TO_ADDR
// if y - r < 0 then
21933: LD_VAR 0 6
21937: PUSH
21938: LD_VAR 0 4
21942: MINUS
21943: PUSH
21944: LD_INT 0
21946: LESS
21947: IFFALSE 21959
// min_y := 0 else
21949: LD_ADDR_VAR 0 8
21953: PUSH
21954: LD_INT 0
21956: ST_TO_ADDR
21957: GO 21975
// min_y := y - r ;
21959: LD_ADDR_VAR 0 8
21963: PUSH
21964: LD_VAR 0 6
21968: PUSH
21969: LD_VAR 0 4
21973: MINUS
21974: ST_TO_ADDR
// max_x := x + r ;
21975: LD_ADDR_VAR 0 9
21979: PUSH
21980: LD_VAR 0 5
21984: PUSH
21985: LD_VAR 0 4
21989: PLUS
21990: ST_TO_ADDR
// max_y := y + r ;
21991: LD_ADDR_VAR 0 10
21995: PUSH
21996: LD_VAR 0 6
22000: PUSH
22001: LD_VAR 0 4
22005: PLUS
22006: ST_TO_ADDR
// for _x = min_x to max_x do
22007: LD_ADDR_VAR 0 11
22011: PUSH
22012: DOUBLE
22013: LD_VAR 0 7
22017: DEC
22018: ST_TO_ADDR
22019: LD_VAR 0 9
22023: PUSH
22024: FOR_TO
22025: IFFALSE 22107
// for _y = min_y to max_y do
22027: LD_ADDR_VAR 0 12
22031: PUSH
22032: DOUBLE
22033: LD_VAR 0 8
22037: DEC
22038: ST_TO_ADDR
22039: LD_VAR 0 10
22043: PUSH
22044: FOR_TO
22045: IFFALSE 22103
// begin if not ValidHex ( _x , _y ) then
22047: LD_VAR 0 11
22051: PPUSH
22052: LD_VAR 0 12
22056: PPUSH
22057: CALL_OW 488
22061: NOT
22062: IFFALSE 22066
// continue ;
22064: GO 22044
// if MineAtPos ( _x , _y ) then
22066: LD_VAR 0 11
22070: PPUSH
22071: LD_VAR 0 12
22075: PPUSH
22076: CALL_OW 458
22080: IFFALSE 22101
// ViewMineAtPos ( _x , _y , side ) ;
22082: LD_VAR 0 11
22086: PPUSH
22087: LD_VAR 0 12
22091: PPUSH
22092: LD_VAR 0 3
22096: PPUSH
22097: CALL_OW 457
// end ;
22101: GO 22044
22103: POP
22104: POP
22105: GO 22024
22107: POP
22108: POP
// end ;
22109: LD_VAR 0 2
22113: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
22114: LD_INT 0
22116: PPUSH
22117: PPUSH
22118: PPUSH
22119: PPUSH
22120: PPUSH
22121: PPUSH
22122: PPUSH
// if not units then
22123: LD_VAR 0 1
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22596
// scaners := [ ] ;
22132: LD_ADDR_VAR 0 6
22136: PUSH
22137: EMPTY
22138: ST_TO_ADDR
// for i in units do
22139: LD_ADDR_VAR 0 3
22143: PUSH
22144: LD_VAR 0 1
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22307
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
22152: LD_VAR 0 3
22156: PPUSH
22157: CALL_OW 264
22161: PUSH
22162: LD_INT 11
22164: NONEQUAL
22165: IFTRUE 22179
22167: PUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: CALL_OW 302
22177: NOT
22178: OR
22179: IFTRUE 22196
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: CALL_OW 110
22191: PUSH
22192: LD_INT 502
22194: EQUAL
22195: OR
22196: IFFALSE 22200
// continue ;
22198: GO 22149
// ComStop ( i ) ;
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 141
// x := GetX ( i ) ;
22209: LD_ADDR_VAR 0 4
22213: PUSH
22214: LD_VAR 0 3
22218: PPUSH
22219: CALL_OW 250
22223: ST_TO_ADDR
// y := GetY ( i ) ;
22224: LD_ADDR_VAR 0 5
22228: PUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 251
22238: ST_TO_ADDR
// if GetSide ( i ) = your_side then
22239: LD_VAR 0 3
22243: PPUSH
22244: CALL_OW 255
22248: PUSH
22249: LD_OWVAR 2
22253: EQUAL
22254: IFFALSE 22273
// PlaySoundXY ( x , y , mineDetector ) ;
22256: LD_VAR 0 4
22260: PPUSH
22261: LD_VAR 0 5
22265: PPUSH
22266: LD_STRING mineDetector
22268: PPUSH
22269: CALL_OW 366
// scaners := Join ( scaners , i ) ;
22273: LD_ADDR_VAR 0 6
22277: PUSH
22278: LD_VAR 0 6
22282: PPUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: CALL 60991 0 2
22292: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
22293: LD_VAR 0 3
22297: PPUSH
22298: LD_INT 502
22300: PPUSH
22301: CALL_OW 109
// end ;
22305: GO 22149
22307: POP
22308: POP
// if not scaners then
22309: LD_VAR 0 6
22313: NOT
22314: IFFALSE 22318
// exit ;
22316: GO 22596
// wait ( 3 ) ;
22318: LD_INT 3
22320: PPUSH
22321: CALL_OW 67
// timer := 6 ;
22325: LD_ADDR_VAR 0 7
22329: PUSH
22330: LD_INT 6
22332: ST_TO_ADDR
// repeat for i in scaners do
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_VAR 0 6
22342: PUSH
22343: FOR_IN
22344: IFFALSE 22494
// begin side := GetSide ( i ) ;
22346: LD_ADDR_VAR 0 8
22350: PUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: CALL_OW 255
22360: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
22361: LD_VAR 0 3
22365: PPUSH
22366: CALL_OW 302
22370: NOT
22371: IFTRUE 22384
22373: PUSH
22374: LD_VAR 0 3
22378: PPUSH
22379: CALL_OW 314
22383: OR
22384: IFTRUE 22415
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 263
22396: PUSH
22397: LD_INT 1
22399: EQUAL
22400: IFFALSE 22414
22402: PUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: CALL_OW 311
22412: NOT
22413: AND
22414: OR
22415: IFFALSE 22459
// begin SetUnitDisplayNumber ( i , 0 ) ;
22417: LD_VAR 0 3
22421: PPUSH
22422: LD_INT 0
22424: PPUSH
22425: CALL_OW 505
// SetTag ( i , 0 ) ;
22429: LD_VAR 0 3
22433: PPUSH
22434: LD_INT 0
22436: PPUSH
22437: CALL_OW 109
// scaners := scaners diff i ;
22441: LD_ADDR_VAR 0 6
22445: PUSH
22446: LD_VAR 0 6
22450: PUSH
22451: LD_VAR 0 3
22455: DIFF
22456: ST_TO_ADDR
// continue ;
22457: GO 22343
// end ; if side in [ your_side , 9 ] then
22459: LD_VAR 0 8
22463: PUSH
22464: LD_OWVAR 2
22468: PUSH
22469: LD_INT 9
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: IN
22476: IFFALSE 22492
// SetUnitDisplayNumber ( i , timer ) ;
22478: LD_VAR 0 3
22482: PPUSH
22483: LD_VAR 0 7
22487: PPUSH
22488: CALL_OW 505
// end ;
22492: GO 22343
22494: POP
22495: POP
// if not scaners then
22496: LD_VAR 0 6
22500: NOT
22501: IFFALSE 22505
// exit ;
22503: GO 22596
// timer := Dec ( timer ) ;
22505: LD_ADDR_VAR 0 7
22509: PUSH
22510: LD_VAR 0 7
22514: PPUSH
22515: CALL 62386 0 1
22519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22520: LD_INT 35
22522: PPUSH
22523: CALL_OW 67
// until timer = 0 ;
22527: LD_VAR 0 7
22531: PUSH
22532: LD_INT 0
22534: EQUAL
22535: IFFALSE 22333
// if not scaners then
22537: LD_VAR 0 6
22541: NOT
22542: IFFALSE 22546
// exit ;
22544: GO 22596
// for i in scaners do
22546: LD_ADDR_VAR 0 3
22550: PUSH
22551: LD_VAR 0 6
22555: PUSH
22556: FOR_IN
22557: IFFALSE 22594
// begin SetUnitDisplayNumber ( i , 0 ) ;
22559: LD_VAR 0 3
22563: PPUSH
22564: LD_INT 0
22566: PPUSH
22567: CALL_OW 505
// SetTag ( i , 0 ) ;
22571: LD_VAR 0 3
22575: PPUSH
22576: LD_INT 0
22578: PPUSH
22579: CALL_OW 109
// RevealDetectorMine ( i ) ;
22583: LD_VAR 0 3
22587: PPUSH
22588: CALL 21816 0 1
// end ;
22592: GO 22556
22594: POP
22595: POP
// end ;
22596: LD_VAR 0 2
22600: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
22601: LD_INT 0
22603: PPUSH
// if p1 = mine_detector_mode then
22604: LD_VAR 0 2
22608: PUSH
22609: LD_INT 103
22611: EQUAL
22612: IFFALSE 22623
// DetectMine ( units ) ;
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL 22114 0 1
// end ; end_of_file
22623: LD_VAR 0 7
22627: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22628: LD_VAR 0 1
22632: PUSH
22633: LD_INT 200
22635: DOUBLE
22636: GREATEREQUAL
22637: IFFALSE 22645
22639: LD_INT 299
22641: DOUBLE
22642: LESSEQUAL
22643: IFTRUE 22647
22645: GO 22679
22647: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22648: LD_VAR 0 1
22652: PPUSH
22653: LD_VAR 0 2
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: LD_VAR 0 4
22667: PPUSH
22668: LD_VAR 0 5
22672: PPUSH
22673: CALL 16904 0 5
22677: GO 22756
22679: LD_INT 300
22681: DOUBLE
22682: GREATEREQUAL
22683: IFFALSE 22691
22685: LD_INT 399
22687: DOUBLE
22688: LESSEQUAL
22689: IFTRUE 22693
22691: GO 22755
22693: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22694: LD_VAR 0 1
22698: PPUSH
22699: LD_VAR 0 2
22703: PPUSH
22704: LD_VAR 0 3
22708: PPUSH
22709: LD_VAR 0 4
22713: PPUSH
22714: LD_VAR 0 5
22718: PPUSH
22719: LD_VAR 0 6
22723: PPUSH
22724: LD_VAR 0 7
22728: PPUSH
22729: LD_VAR 0 8
22733: PPUSH
22734: LD_VAR 0 9
22738: PPUSH
22739: LD_VAR 0 10
22743: PPUSH
22744: LD_VAR 0 11
22748: PPUSH
22749: CALL 12707 0 11
22753: GO 22756
22755: POP
// end ;
22756: PPOPN 11
22758: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22759: LD_VAR 0 1
22763: PPUSH
22764: LD_VAR 0 2
22768: PPUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: LD_VAR 0 4
22778: PPUSH
22779: LD_VAR 0 5
22783: PPUSH
22784: CALL 16204 0 5
// end ; end_of_file
22788: PPOPN 5
22790: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22791: LD_INT 0
22793: PPUSH
22794: PPUSH
// if exist_mode then
22795: LD_VAR 0 2
22799: IFFALSE 22845
// begin unit := CreateCharacter ( prefix & ident ) ;
22801: LD_ADDR_VAR 0 5
22805: PUSH
22806: LD_VAR 0 3
22810: PUSH
22811: LD_VAR 0 1
22815: STR
22816: PPUSH
22817: CALL_OW 34
22821: ST_TO_ADDR
// if unit then
22822: LD_VAR 0 5
22826: IFFALSE 22843
// DeleteCharacters ( prefix & ident ) ;
22828: LD_VAR 0 3
22832: PUSH
22833: LD_VAR 0 1
22837: STR
22838: PPUSH
22839: CALL_OW 40
// end else
22843: GO 22860
// unit := NewCharacter ( ident ) ;
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 25
22859: ST_TO_ADDR
// result := unit ;
22860: LD_ADDR_VAR 0 4
22864: PUSH
22865: LD_VAR 0 5
22869: ST_TO_ADDR
// end ;
22870: LD_VAR 0 4
22874: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
22875: LD_INT 0
22877: PPUSH
22878: PPUSH
// if exist_mode then
22879: LD_VAR 0 2
22883: IFFALSE 22908
// unit := CreateCharacter ( prefix & ident ) else
22885: LD_ADDR_VAR 0 5
22889: PUSH
22890: LD_VAR 0 3
22894: PUSH
22895: LD_VAR 0 1
22899: STR
22900: PPUSH
22901: CALL_OW 34
22905: ST_TO_ADDR
22906: GO 22923
// unit := NewCharacter ( ident ) ;
22908: LD_ADDR_VAR 0 5
22912: PUSH
22913: LD_VAR 0 1
22917: PPUSH
22918: CALL_OW 25
22922: ST_TO_ADDR
// result := unit ;
22923: LD_ADDR_VAR 0 4
22927: PUSH
22928: LD_VAR 0 5
22932: ST_TO_ADDR
// end ;
22933: LD_VAR 0 4
22937: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22938: LD_INT 0
22940: PPUSH
22941: PPUSH
// if not side or not nation then
22942: LD_VAR 0 1
22946: NOT
22947: IFTRUE 22956
22949: PUSH
22950: LD_VAR 0 2
22954: NOT
22955: OR
22956: IFFALSE 22960
// exit ;
22958: GO 23754
// case nation of nation_american :
22960: LD_VAR 0 2
22964: PUSH
22965: LD_INT 1
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 23195
22973: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
22974: LD_ADDR_VAR 0 4
22978: PUSH
22979: LD_INT 35
22981: PUSH
22982: LD_INT 45
22984: PUSH
22985: LD_INT 46
22987: PUSH
22988: LD_INT 47
22990: PUSH
22991: LD_INT 82
22993: PUSH
22994: LD_INT 83
22996: PUSH
22997: LD_INT 84
22999: PUSH
23000: LD_INT 85
23002: PUSH
23003: LD_INT 86
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 6
23014: PUSH
23015: LD_INT 15
23017: PUSH
23018: LD_INT 16
23020: PUSH
23021: LD_INT 7
23023: PUSH
23024: LD_INT 12
23026: PUSH
23027: LD_INT 13
23029: PUSH
23030: LD_INT 10
23032: PUSH
23033: LD_INT 14
23035: PUSH
23036: LD_INT 20
23038: PUSH
23039: LD_INT 21
23041: PUSH
23042: LD_INT 22
23044: PUSH
23045: LD_INT 25
23047: PUSH
23048: LD_INT 32
23050: PUSH
23051: LD_INT 27
23053: PUSH
23054: LD_INT 36
23056: PUSH
23057: LD_INT 69
23059: PUSH
23060: LD_INT 39
23062: PUSH
23063: LD_INT 34
23065: PUSH
23066: LD_INT 40
23068: PUSH
23069: LD_INT 48
23071: PUSH
23072: LD_INT 49
23074: PUSH
23075: LD_INT 50
23077: PUSH
23078: LD_INT 51
23080: PUSH
23081: LD_INT 52
23083: PUSH
23084: LD_INT 53
23086: PUSH
23087: LD_INT 54
23089: PUSH
23090: LD_INT 55
23092: PUSH
23093: LD_INT 56
23095: PUSH
23096: LD_INT 57
23098: PUSH
23099: LD_INT 58
23101: PUSH
23102: LD_INT 59
23104: PUSH
23105: LD_INT 60
23107: PUSH
23108: LD_INT 61
23110: PUSH
23111: LD_INT 62
23113: PUSH
23114: LD_INT 80
23116: PUSH
23117: LD_INT 82
23119: PUSH
23120: LD_INT 83
23122: PUSH
23123: LD_INT 84
23125: PUSH
23126: LD_INT 85
23128: PUSH
23129: LD_INT 86
23131: PUSH
23132: LD_INT 90
23134: PUSH
23135: LD_INT 93
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: ST_TO_ADDR
23193: GO 23676
23195: LD_INT 2
23197: DOUBLE
23198: EQUAL
23199: IFTRUE 23203
23201: GO 23437
23203: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
23204: LD_ADDR_VAR 0 4
23208: PUSH
23209: LD_INT 35
23211: PUSH
23212: LD_INT 45
23214: PUSH
23215: LD_INT 46
23217: PUSH
23218: LD_INT 47
23220: PUSH
23221: LD_INT 82
23223: PUSH
23224: LD_INT 83
23226: PUSH
23227: LD_INT 84
23229: PUSH
23230: LD_INT 85
23232: PUSH
23233: LD_INT 87
23235: PUSH
23236: LD_INT 70
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 11
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: LD_INT 4
23250: PUSH
23251: LD_INT 5
23253: PUSH
23254: LD_INT 6
23256: PUSH
23257: LD_INT 15
23259: PUSH
23260: LD_INT 18
23262: PUSH
23263: LD_INT 7
23265: PUSH
23266: LD_INT 17
23268: PUSH
23269: LD_INT 8
23271: PUSH
23272: LD_INT 20
23274: PUSH
23275: LD_INT 21
23277: PUSH
23278: LD_INT 22
23280: PUSH
23281: LD_INT 72
23283: PUSH
23284: LD_INT 26
23286: PUSH
23287: LD_INT 69
23289: PUSH
23290: LD_INT 39
23292: PUSH
23293: LD_INT 40
23295: PUSH
23296: LD_INT 41
23298: PUSH
23299: LD_INT 42
23301: PUSH
23302: LD_INT 43
23304: PUSH
23305: LD_INT 48
23307: PUSH
23308: LD_INT 49
23310: PUSH
23311: LD_INT 50
23313: PUSH
23314: LD_INT 51
23316: PUSH
23317: LD_INT 52
23319: PUSH
23320: LD_INT 53
23322: PUSH
23323: LD_INT 54
23325: PUSH
23326: LD_INT 55
23328: PUSH
23329: LD_INT 56
23331: PUSH
23332: LD_INT 60
23334: PUSH
23335: LD_INT 61
23337: PUSH
23338: LD_INT 62
23340: PUSH
23341: LD_INT 66
23343: PUSH
23344: LD_INT 67
23346: PUSH
23347: LD_INT 68
23349: PUSH
23350: LD_INT 81
23352: PUSH
23353: LD_INT 82
23355: PUSH
23356: LD_INT 83
23358: PUSH
23359: LD_INT 84
23361: PUSH
23362: LD_INT 85
23364: PUSH
23365: LD_INT 87
23367: PUSH
23368: LD_INT 88
23370: PUSH
23371: LD_INT 92
23373: PUSH
23374: LD_INT 94
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: ST_TO_ADDR
23435: GO 23676
23437: LD_INT 3
23439: DOUBLE
23440: EQUAL
23441: IFTRUE 23445
23443: GO 23675
23445: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
23446: LD_ADDR_VAR 0 4
23450: PUSH
23451: LD_INT 46
23453: PUSH
23454: LD_INT 47
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 82
23465: PUSH
23466: LD_INT 83
23468: PUSH
23469: LD_INT 84
23471: PUSH
23472: LD_INT 85
23474: PUSH
23475: LD_INT 86
23477: PUSH
23478: LD_INT 11
23480: PUSH
23481: LD_INT 9
23483: PUSH
23484: LD_INT 20
23486: PUSH
23487: LD_INT 19
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 24
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_INT 25
23501: PUSH
23502: LD_INT 28
23504: PUSH
23505: LD_INT 29
23507: PUSH
23508: LD_INT 30
23510: PUSH
23511: LD_INT 31
23513: PUSH
23514: LD_INT 37
23516: PUSH
23517: LD_INT 38
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 27
23525: PUSH
23526: LD_INT 33
23528: PUSH
23529: LD_INT 69
23531: PUSH
23532: LD_INT 39
23534: PUSH
23535: LD_INT 34
23537: PUSH
23538: LD_INT 40
23540: PUSH
23541: LD_INT 71
23543: PUSH
23544: LD_INT 23
23546: PUSH
23547: LD_INT 44
23549: PUSH
23550: LD_INT 48
23552: PUSH
23553: LD_INT 49
23555: PUSH
23556: LD_INT 50
23558: PUSH
23559: LD_INT 51
23561: PUSH
23562: LD_INT 52
23564: PUSH
23565: LD_INT 53
23567: PUSH
23568: LD_INT 54
23570: PUSH
23571: LD_INT 55
23573: PUSH
23574: LD_INT 56
23576: PUSH
23577: LD_INT 57
23579: PUSH
23580: LD_INT 58
23582: PUSH
23583: LD_INT 59
23585: PUSH
23586: LD_INT 63
23588: PUSH
23589: LD_INT 64
23591: PUSH
23592: LD_INT 65
23594: PUSH
23595: LD_INT 82
23597: PUSH
23598: LD_INT 83
23600: PUSH
23601: LD_INT 84
23603: PUSH
23604: LD_INT 85
23606: PUSH
23607: LD_INT 86
23609: PUSH
23610: LD_INT 89
23612: PUSH
23613: LD_INT 91
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
23673: GO 23676
23675: POP
// if state > - 1 and state < 3 then
23676: LD_VAR 0 3
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: GREATER
23685: IFFALSE 23697
23687: PUSH
23688: LD_VAR 0 3
23692: PUSH
23693: LD_INT 3
23695: LESS
23696: AND
23697: IFFALSE 23754
// for i in result do
23699: LD_ADDR_VAR 0 5
23703: PUSH
23704: LD_VAR 0 4
23708: PUSH
23709: FOR_IN
23710: IFFALSE 23752
// if GetTech ( i , side ) <> state then
23712: LD_VAR 0 5
23716: PPUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 321
23726: PUSH
23727: LD_VAR 0 3
23731: NONEQUAL
23732: IFFALSE 23750
// result := result diff i ;
23734: LD_ADDR_VAR 0 4
23738: PUSH
23739: LD_VAR 0 4
23743: PUSH
23744: LD_VAR 0 5
23748: DIFF
23749: ST_TO_ADDR
23750: GO 23709
23752: POP
23753: POP
// end ;
23754: LD_VAR 0 4
23758: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
23763: PPUSH
// result := true ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_INT 1
23771: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23772: LD_ADDR_VAR 0 5
23776: PUSH
23777: LD_VAR 0 2
23781: PPUSH
23782: CALL_OW 480
23786: ST_TO_ADDR
// if not tmp then
23787: LD_VAR 0 5
23791: NOT
23792: IFFALSE 23796
// exit ;
23794: GO 23845
// for i in tmp do
23796: LD_ADDR_VAR 0 4
23800: PUSH
23801: LD_VAR 0 5
23805: PUSH
23806: FOR_IN
23807: IFFALSE 23843
// if GetTech ( i , side ) <> state_researched then
23809: LD_VAR 0 4
23813: PPUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 2
23826: NONEQUAL
23827: IFFALSE 23841
// begin result := false ;
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_INT 0
23836: ST_TO_ADDR
// exit ;
23837: POP
23838: POP
23839: GO 23845
// end ;
23841: GO 23806
23843: POP
23844: POP
// end ;
23845: LD_VAR 0 3
23849: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23850: LD_INT 0
23852: PPUSH
23853: PPUSH
23854: PPUSH
23855: PPUSH
23856: PPUSH
23857: PPUSH
23858: PPUSH
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23865: LD_VAR 0 1
23869: NOT
23870: IFTRUE 23887
23872: PUSH
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 257
23882: PUSH
23883: LD_INT 9
23885: NONEQUAL
23886: OR
23887: IFFALSE 23891
// exit ;
23889: GO 24470
// side := GetSide ( unit ) ;
23891: LD_ADDR_VAR 0 9
23895: PUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 255
23905: ST_TO_ADDR
// tech_space := tech_spacanom ;
23906: LD_ADDR_VAR 0 12
23910: PUSH
23911: LD_INT 29
23913: ST_TO_ADDR
// tech_time := tech_taurad ;
23914: LD_ADDR_VAR 0 13
23918: PUSH
23919: LD_INT 28
23921: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23922: LD_ADDR_VAR 0 11
23926: PUSH
23927: LD_VAR 0 1
23931: PPUSH
23932: CALL_OW 310
23936: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23937: LD_VAR 0 11
23941: PPUSH
23942: CALL_OW 247
23946: PUSH
23947: LD_INT 2
23949: EQUAL
23950: IFFALSE 23954
// exit ;
23952: GO 24470
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23954: LD_ADDR_VAR 0 8
23958: PUSH
23959: LD_INT 81
23961: PUSH
23962: LD_VAR 0 9
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 3
23973: PUSH
23974: LD_INT 21
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PPUSH
23992: CALL_OW 69
23996: ST_TO_ADDR
// if not tmp then
23997: LD_VAR 0 8
24001: NOT
24002: IFFALSE 24006
// exit ;
24004: GO 24470
// if in_unit then
24006: LD_VAR 0 11
24010: IFFALSE 24034
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24012: LD_ADDR_VAR 0 10
24016: PUSH
24017: LD_VAR 0 8
24021: PPUSH
24022: LD_VAR 0 11
24026: PPUSH
24027: CALL_OW 74
24031: ST_TO_ADDR
24032: GO 24054
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24034: LD_ADDR_VAR 0 10
24038: PUSH
24039: LD_VAR 0 8
24043: PPUSH
24044: LD_VAR 0 1
24048: PPUSH
24049: CALL_OW 74
24053: ST_TO_ADDR
// if not enemy then
24054: LD_VAR 0 10
24058: NOT
24059: IFFALSE 24063
// exit ;
24061: GO 24470
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24063: LD_VAR 0 11
24067: IFFALSE 24089
24069: PUSH
24070: LD_VAR 0 11
24074: PPUSH
24075: LD_VAR 0 10
24079: PPUSH
24080: CALL_OW 296
24084: PUSH
24085: LD_INT 13
24087: GREATER
24088: AND
24089: IFTRUE 24111
24091: PUSH
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_VAR 0 10
24101: PPUSH
24102: CALL_OW 296
24106: PUSH
24107: LD_INT 12
24109: GREATER
24110: OR
24111: IFFALSE 24115
// exit ;
24113: GO 24470
// missile := [ 1 ] ;
24115: LD_ADDR_VAR 0 14
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: EMPTY
24124: LIST
24125: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24126: LD_VAR 0 9
24130: PPUSH
24131: LD_VAR 0 12
24135: PPUSH
24136: CALL_OW 325
24140: IFFALSE 24169
// missile := Replace ( missile , missile + 1 , 2 ) ;
24142: LD_ADDR_VAR 0 14
24146: PUSH
24147: LD_VAR 0 14
24151: PPUSH
24152: LD_VAR 0 14
24156: PUSH
24157: LD_INT 1
24159: PLUS
24160: PPUSH
24161: LD_INT 2
24163: PPUSH
24164: CALL_OW 1
24168: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24169: LD_VAR 0 9
24173: PPUSH
24174: LD_VAR 0 13
24178: PPUSH
24179: CALL_OW 325
24183: IFFALSE 24207
24185: PUSH
24186: LD_VAR 0 10
24190: PPUSH
24191: CALL_OW 255
24195: PPUSH
24196: LD_VAR 0 13
24200: PPUSH
24201: CALL_OW 325
24205: NOT
24206: AND
24207: IFFALSE 24236
// missile := Replace ( missile , missile + 1 , 3 ) ;
24209: LD_ADDR_VAR 0 14
24213: PUSH
24214: LD_VAR 0 14
24218: PPUSH
24219: LD_VAR 0 14
24223: PUSH
24224: LD_INT 1
24226: PLUS
24227: PPUSH
24228: LD_INT 3
24230: PPUSH
24231: CALL_OW 1
24235: ST_TO_ADDR
// if missile < 2 then
24236: LD_VAR 0 14
24240: PUSH
24241: LD_INT 2
24243: LESS
24244: IFFALSE 24248
// exit ;
24246: GO 24470
// x := GetX ( enemy ) ;
24248: LD_ADDR_VAR 0 4
24252: PUSH
24253: LD_VAR 0 10
24257: PPUSH
24258: CALL_OW 250
24262: ST_TO_ADDR
// y := GetY ( enemy ) ;
24263: LD_ADDR_VAR 0 5
24267: PUSH
24268: LD_VAR 0 10
24272: PPUSH
24273: CALL_OW 251
24277: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24278: LD_ADDR_VAR 0 6
24282: PUSH
24283: LD_VAR 0 4
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PPUSH
24292: LD_INT 1
24294: PPUSH
24295: CALL_OW 12
24299: PLUS
24300: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24301: LD_ADDR_VAR 0 7
24305: PUSH
24306: LD_VAR 0 5
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PPUSH
24315: LD_INT 1
24317: PPUSH
24318: CALL_OW 12
24322: PLUS
24323: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24324: LD_VAR 0 6
24328: PPUSH
24329: LD_VAR 0 7
24333: PPUSH
24334: CALL_OW 488
24338: NOT
24339: IFFALSE 24361
// begin _x := x ;
24341: LD_ADDR_VAR 0 6
24345: PUSH
24346: LD_VAR 0 4
24350: ST_TO_ADDR
// _y := y ;
24351: LD_ADDR_VAR 0 7
24355: PUSH
24356: LD_VAR 0 5
24360: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 1
24368: PPUSH
24369: LD_VAR 0 14
24373: PPUSH
24374: CALL_OW 12
24378: ST_TO_ADDR
// case i of 1 :
24379: LD_VAR 0 3
24383: PUSH
24384: LD_INT 1
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24409
24392: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24393: LD_VAR 0 1
24397: PPUSH
24398: LD_VAR 0 10
24402: PPUSH
24403: CALL_OW 115
24407: GO 24470
24409: LD_INT 2
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24439
24417: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_VAR 0 6
24427: PPUSH
24428: LD_VAR 0 7
24432: PPUSH
24433: CALL_OW 153
24437: GO 24470
24439: LD_INT 3
24441: DOUBLE
24442: EQUAL
24443: IFTRUE 24447
24445: GO 24469
24447: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24448: LD_VAR 0 1
24452: PPUSH
24453: LD_VAR 0 6
24457: PPUSH
24458: LD_VAR 0 7
24462: PPUSH
24463: CALL_OW 154
24467: GO 24470
24469: POP
// end ;
24470: LD_VAR 0 2
24474: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24475: LD_INT 0
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
// if not unit or not building then
24483: LD_VAR 0 1
24487: NOT
24488: IFTRUE 24497
24490: PUSH
24491: LD_VAR 0 2
24495: NOT
24496: OR
24497: IFFALSE 24501
// exit ;
24499: GO 24659
// x := GetX ( building ) ;
24501: LD_ADDR_VAR 0 5
24505: PUSH
24506: LD_VAR 0 2
24510: PPUSH
24511: CALL_OW 250
24515: ST_TO_ADDR
// y := GetY ( building ) ;
24516: LD_ADDR_VAR 0 6
24520: PUSH
24521: LD_VAR 0 2
24525: PPUSH
24526: CALL_OW 251
24530: ST_TO_ADDR
// for i := 0 to 5 do
24531: LD_ADDR_VAR 0 4
24535: PUSH
24536: DOUBLE
24537: LD_INT 0
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 5
24543: PUSH
24544: FOR_TO
24545: IFFALSE 24657
// begin _x := ShiftX ( x , i , 3 ) ;
24547: LD_ADDR_VAR 0 7
24551: PUSH
24552: LD_VAR 0 5
24556: PPUSH
24557: LD_VAR 0 4
24561: PPUSH
24562: LD_INT 3
24564: PPUSH
24565: CALL_OW 272
24569: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24570: LD_ADDR_VAR 0 8
24574: PUSH
24575: LD_VAR 0 6
24579: PPUSH
24580: LD_VAR 0 4
24584: PPUSH
24585: LD_INT 3
24587: PPUSH
24588: CALL_OW 273
24592: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24593: LD_VAR 0 7
24597: PPUSH
24598: LD_VAR 0 8
24602: PPUSH
24603: CALL_OW 488
24607: NOT
24608: IFFALSE 24612
// continue ;
24610: GO 24544
// if HexInfo ( _x , _y ) = 0 then
24612: LD_VAR 0 7
24616: PPUSH
24617: LD_VAR 0 8
24621: PPUSH
24622: CALL_OW 428
24626: PUSH
24627: LD_INT 0
24629: EQUAL
24630: IFFALSE 24655
// begin ComMoveXY ( unit , _x , _y ) ;
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_VAR 0 7
24641: PPUSH
24642: LD_VAR 0 8
24646: PPUSH
24647: CALL_OW 111
// exit ;
24651: POP
24652: POP
24653: GO 24659
// end ; end ;
24655: GO 24544
24657: POP
24658: POP
// end ;
24659: LD_VAR 0 3
24663: RET
// export function ScanBase ( side , base_area ) ; begin
24664: LD_INT 0
24666: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_VAR 0 2
24676: PPUSH
24677: LD_INT 81
24679: PUSH
24680: LD_VAR 0 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 70
24693: ST_TO_ADDR
// end ;
24694: LD_VAR 0 3
24698: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
24703: PPUSH
24704: PPUSH
// result := false ;
24705: LD_ADDR_VAR 0 2
24709: PUSH
24710: LD_INT 0
24712: ST_TO_ADDR
// side := GetSide ( unit ) ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 1
24722: PPUSH
24723: CALL_OW 255
24727: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24728: LD_ADDR_VAR 0 4
24732: PUSH
24733: LD_VAR 0 1
24737: PPUSH
24738: CALL_OW 248
24742: ST_TO_ADDR
// case nat of 1 :
24743: LD_VAR 0 4
24747: PUSH
24748: LD_INT 1
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24767
24756: POP
// tech := tech_lassight ; 2 :
24757: LD_ADDR_VAR 0 5
24761: PUSH
24762: LD_INT 12
24764: ST_TO_ADDR
24765: GO 24806
24767: LD_INT 2
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24786
24775: POP
// tech := tech_mortar ; 3 :
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: LD_INT 41
24783: ST_TO_ADDR
24784: GO 24806
24786: LD_INT 3
24788: DOUBLE
24789: EQUAL
24790: IFTRUE 24794
24792: GO 24805
24794: POP
// tech := tech_bazooka ; end ;
24795: LD_ADDR_VAR 0 5
24799: PUSH
24800: LD_INT 44
24802: ST_TO_ADDR
24803: GO 24806
24805: POP
// if Researched ( side , tech ) then
24806: LD_VAR 0 3
24810: PPUSH
24811: LD_VAR 0 5
24815: PPUSH
24816: CALL_OW 325
24820: IFFALSE 24847
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24822: LD_ADDR_VAR 0 2
24826: PUSH
24827: LD_INT 5
24829: PUSH
24830: LD_INT 8
24832: PUSH
24833: LD_INT 9
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: PUSH
24841: LD_VAR 0 4
24845: ARRAY
24846: ST_TO_ADDR
// end ;
24847: LD_VAR 0 2
24851: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24852: LD_INT 0
24854: PPUSH
24855: PPUSH
24856: PPUSH
// if not mines then
24857: LD_VAR 0 2
24861: NOT
24862: IFFALSE 24866
// exit ;
24864: GO 25010
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24866: LD_ADDR_VAR 0 5
24870: PUSH
24871: LD_INT 81
24873: PUSH
24874: LD_VAR 0 1
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 21
24888: PUSH
24889: LD_INT 3
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 69
24908: ST_TO_ADDR
// for i in mines do
24909: LD_ADDR_VAR 0 4
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: FOR_IN
24920: IFFALSE 25008
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24922: LD_VAR 0 4
24926: PUSH
24927: LD_INT 1
24929: ARRAY
24930: PPUSH
24931: LD_VAR 0 4
24935: PUSH
24936: LD_INT 2
24938: ARRAY
24939: PPUSH
24940: CALL_OW 458
24944: NOT
24945: IFFALSE 24949
// continue ;
24947: GO 24919
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24949: LD_VAR 0 4
24953: PUSH
24954: LD_INT 1
24956: ARRAY
24957: PPUSH
24958: LD_VAR 0 4
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: CALL_OW 428
24971: PUSH
24972: LD_VAR 0 5
24976: IN
24977: IFFALSE 25006
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24979: LD_VAR 0 4
24983: PUSH
24984: LD_INT 1
24986: ARRAY
24987: PPUSH
24988: LD_VAR 0 4
24992: PUSH
24993: LD_INT 2
24995: ARRAY
24996: PPUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 456
// end ;
25006: GO 24919
25008: POP
25009: POP
// end ;
25010: LD_VAR 0 3
25014: RET
// export function Count ( array ) ; begin
25015: LD_INT 0
25017: PPUSH
// result := array + 0 ;
25018: LD_ADDR_VAR 0 2
25022: PUSH
25023: LD_VAR 0 1
25027: PUSH
25028: LD_INT 0
25030: PLUS
25031: ST_TO_ADDR
// end ;
25032: LD_VAR 0 2
25036: RET
// export function IsEmpty ( building ) ; begin
25037: LD_INT 0
25039: PPUSH
// if not building then
25040: LD_VAR 0 1
25044: NOT
25045: IFFALSE 25049
// exit ;
25047: GO 25092
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25049: LD_ADDR_VAR 0 2
25053: PUSH
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 22
25061: PUSH
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 255
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 58
25078: PUSH
25079: EMPTY
25080: LIST
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PPUSH
25086: CALL_OW 69
25090: IN
25091: ST_TO_ADDR
// end ;
25092: LD_VAR 0 2
25096: RET
// export function IsNotFull ( building ) ; var places ; begin
25097: LD_INT 0
25099: PPUSH
25100: PPUSH
// if not building then
25101: LD_VAR 0 1
25105: NOT
25106: IFFALSE 25110
// exit ;
25108: GO 25138
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25110: LD_ADDR_VAR 0 2
25114: PUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 62
25125: PUSH
25126: EMPTY
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 72
25137: ST_TO_ADDR
// end ;
25138: LD_VAR 0 2
25142: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25143: LD_INT 0
25145: PPUSH
25146: PPUSH
25147: PPUSH
25148: PPUSH
// tmp := [ ] ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: EMPTY
25155: ST_TO_ADDR
// list := [ ] ;
25156: LD_ADDR_VAR 0 5
25160: PUSH
25161: EMPTY
25162: ST_TO_ADDR
// for i = 16 to 25 do
25163: LD_ADDR_VAR 0 4
25167: PUSH
25168: DOUBLE
25169: LD_INT 16
25171: DEC
25172: ST_TO_ADDR
25173: LD_INT 25
25175: PUSH
25176: FOR_TO
25177: IFFALSE 25250
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_VAR 0 3
25188: PUSH
25189: LD_INT 22
25191: PUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL_OW 255
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 91
25208: PUSH
25209: LD_VAR 0 1
25213: PUSH
25214: LD_INT 6
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 30
25224: PUSH
25225: LD_VAR 0 4
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: ADD
25247: ST_TO_ADDR
25248: GO 25176
25250: POP
25251: POP
// for i = 1 to tmp do
25252: LD_ADDR_VAR 0 4
25256: PUSH
25257: DOUBLE
25258: LD_INT 1
25260: DEC
25261: ST_TO_ADDR
25262: LD_VAR 0 3
25266: PUSH
25267: FOR_TO
25268: IFFALSE 25356
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25270: LD_ADDR_VAR 0 5
25274: PUSH
25275: LD_VAR 0 5
25279: PUSH
25280: LD_VAR 0 3
25284: PUSH
25285: LD_VAR 0 4
25289: ARRAY
25290: PPUSH
25291: CALL_OW 266
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 4
25305: ARRAY
25306: PPUSH
25307: CALL_OW 250
25311: PUSH
25312: LD_VAR 0 3
25316: PUSH
25317: LD_VAR 0 4
25321: ARRAY
25322: PPUSH
25323: CALL_OW 251
25327: PUSH
25328: LD_VAR 0 3
25332: PUSH
25333: LD_VAR 0 4
25337: ARRAY
25338: PPUSH
25339: CALL_OW 254
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: ADD
25353: ST_TO_ADDR
25354: GO 25267
25356: POP
25357: POP
// result := list ;
25358: LD_ADDR_VAR 0 2
25362: PUSH
25363: LD_VAR 0 5
25367: ST_TO_ADDR
// end ;
25368: LD_VAR 0 2
25372: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
// if not factory then
25382: LD_VAR 0 1
25386: NOT
25387: IFFALSE 25391
// exit ;
25389: GO 25994
// if control = control_apeman then
25391: LD_VAR 0 4
25395: PUSH
25396: LD_INT 5
25398: EQUAL
25399: IFFALSE 25508
// begin tmp := UnitsInside ( factory ) ;
25401: LD_ADDR_VAR 0 8
25405: PUSH
25406: LD_VAR 0 1
25410: PPUSH
25411: CALL_OW 313
25415: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25416: LD_VAR 0 8
25420: PPUSH
25421: LD_INT 25
25423: PUSH
25424: LD_INT 12
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PPUSH
25431: CALL_OW 72
25435: NOT
25436: IFFALSE 25446
// control := control_manual ;
25438: LD_ADDR_VAR 0 4
25442: PUSH
25443: LD_INT 1
25445: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25446: LD_ADDR_VAR 0 8
25450: PUSH
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL 25143 0 1
25460: ST_TO_ADDR
// if tmp then
25461: LD_VAR 0 8
25465: IFFALSE 25508
// begin for i in tmp do
25467: LD_ADDR_VAR 0 7
25471: PUSH
25472: LD_VAR 0 8
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25506
// if i [ 1 ] = b_ext_radio then
25480: LD_VAR 0 7
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: PUSH
25489: LD_INT 22
25491: EQUAL
25492: IFFALSE 25504
// begin control := control_remote ;
25494: LD_ADDR_VAR 0 4
25498: PUSH
25499: LD_INT 2
25501: ST_TO_ADDR
// break ;
25502: GO 25506
// end ;
25504: GO 25477
25506: POP
25507: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25508: LD_VAR 0 1
25512: PPUSH
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_VAR 0 3
25522: PPUSH
25523: LD_VAR 0 4
25527: PPUSH
25528: LD_VAR 0 5
25532: PPUSH
25533: CALL_OW 448
25537: IFFALSE 25572
// begin result := [ chassis , engine , control , weapon ] ;
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_VAR 0 2
25548: PUSH
25549: LD_VAR 0 3
25553: PUSH
25554: LD_VAR 0 4
25558: PUSH
25559: LD_VAR 0 5
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: ST_TO_ADDR
// exit ;
25570: GO 25994
// end ; _chassis := AvailableChassisList ( factory ) ;
25572: LD_ADDR_VAR 0 9
25576: PUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL_OW 475
25586: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25587: LD_ADDR_VAR 0 11
25591: PUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 476
25601: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25602: LD_ADDR_VAR 0 12
25606: PUSH
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL_OW 477
25616: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25617: LD_ADDR_VAR 0 10
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 478
25631: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25632: LD_VAR 0 9
25636: NOT
25637: IFTRUE 25646
25639: PUSH
25640: LD_VAR 0 11
25644: NOT
25645: OR
25646: IFTRUE 25655
25648: PUSH
25649: LD_VAR 0 12
25653: NOT
25654: OR
25655: IFTRUE 25664
25657: PUSH
25658: LD_VAR 0 10
25662: NOT
25663: OR
25664: IFFALSE 25699
// begin result := [ chassis , engine , control , weapon ] ;
25666: LD_ADDR_VAR 0 6
25670: PUSH
25671: LD_VAR 0 2
25675: PUSH
25676: LD_VAR 0 3
25680: PUSH
25681: LD_VAR 0 4
25685: PUSH
25686: LD_VAR 0 5
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
// exit ;
25697: GO 25994
// end ; if not chassis in _chassis then
25699: LD_VAR 0 2
25703: PUSH
25704: LD_VAR 0 9
25708: IN
25709: NOT
25710: IFFALSE 25736
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25712: LD_ADDR_VAR 0 2
25716: PUSH
25717: LD_VAR 0 9
25721: PUSH
25722: LD_INT 1
25724: PPUSH
25725: LD_VAR 0 9
25729: PPUSH
25730: CALL_OW 12
25734: ARRAY
25735: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_VAR 0 3
25745: PPUSH
25746: CALL 25999 0 2
25750: NOT
25751: IFFALSE 25812
// repeat engine := _engine [ 1 ] ;
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_VAR 0 11
25762: PUSH
25763: LD_INT 1
25765: ARRAY
25766: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25767: LD_ADDR_VAR 0 11
25771: PUSH
25772: LD_VAR 0 11
25776: PPUSH
25777: LD_INT 1
25779: PPUSH
25780: CALL_OW 3
25784: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25785: LD_VAR 0 2
25789: PPUSH
25790: LD_VAR 0 3
25794: PPUSH
25795: CALL 25999 0 2
25799: IFTRUE 25810
25801: PUSH
25802: LD_VAR 0 11
25806: PUSH
25807: EMPTY
25808: EQUAL
25809: OR
25810: IFFALSE 25753
// if not control in _control then
25812: LD_VAR 0 4
25816: PUSH
25817: LD_VAR 0 12
25821: IN
25822: NOT
25823: IFFALSE 25849
// control := _control [ rand ( 1 , _control ) ] ;
25825: LD_ADDR_VAR 0 4
25829: PUSH
25830: LD_VAR 0 12
25834: PUSH
25835: LD_INT 1
25837: PPUSH
25838: LD_VAR 0 12
25842: PPUSH
25843: CALL_OW 12
25847: ARRAY
25848: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25849: LD_VAR 0 2
25853: PPUSH
25854: LD_VAR 0 5
25858: PPUSH
25859: CALL 26221 0 2
25863: NOT
25864: IFFALSE 25925
// repeat weapon := _weapon [ 1 ] ;
25866: LD_ADDR_VAR 0 5
25870: PUSH
25871: LD_VAR 0 10
25875: PUSH
25876: LD_INT 1
25878: ARRAY
25879: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25880: LD_ADDR_VAR 0 10
25884: PUSH
25885: LD_VAR 0 10
25889: PPUSH
25890: LD_INT 1
25892: PPUSH
25893: CALL_OW 3
25897: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25898: LD_VAR 0 2
25902: PPUSH
25903: LD_VAR 0 5
25907: PPUSH
25908: CALL 26221 0 2
25912: IFTRUE 25923
25914: PUSH
25915: LD_VAR 0 10
25919: PUSH
25920: EMPTY
25921: EQUAL
25922: OR
25923: IFFALSE 25866
// result := [ ] ;
25925: LD_ADDR_VAR 0 6
25929: PUSH
25930: EMPTY
25931: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25932: LD_VAR 0 1
25936: PPUSH
25937: LD_VAR 0 2
25941: PPUSH
25942: LD_VAR 0 3
25946: PPUSH
25947: LD_VAR 0 4
25951: PPUSH
25952: LD_VAR 0 5
25956: PPUSH
25957: CALL_OW 448
25961: IFFALSE 25994
// result := [ chassis , engine , control , weapon ] ;
25963: LD_ADDR_VAR 0 6
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: LD_VAR 0 3
25977: PUSH
25978: LD_VAR 0 4
25982: PUSH
25983: LD_VAR 0 5
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
// end ;
25994: LD_VAR 0 6
25998: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25999: LD_INT 0
26001: PPUSH
// if not chassis or not engine then
26002: LD_VAR 0 1
26006: NOT
26007: IFTRUE 26016
26009: PUSH
26010: LD_VAR 0 2
26014: NOT
26015: OR
26016: IFFALSE 26020
// exit ;
26018: GO 26216
// case engine of engine_solar :
26020: LD_VAR 0 2
26024: PUSH
26025: LD_INT 2
26027: DOUBLE
26028: EQUAL
26029: IFTRUE 26033
26031: GO 26071
26033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_INT 11
26041: PUSH
26042: LD_INT 12
26044: PUSH
26045: LD_INT 13
26047: PUSH
26048: LD_INT 14
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: ST_TO_ADDR
26069: GO 26200
26071: LD_INT 1
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26141
26079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_INT 11
26087: PUSH
26088: LD_INT 12
26090: PUSH
26091: LD_INT 13
26093: PUSH
26094: LD_INT 14
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 4
26108: PUSH
26109: LD_INT 5
26111: PUSH
26112: LD_INT 21
26114: PUSH
26115: LD_INT 23
26117: PUSH
26118: LD_INT 22
26120: PUSH
26121: LD_INT 24
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: ST_TO_ADDR
26139: GO 26200
26141: LD_INT 3
26143: DOUBLE
26144: EQUAL
26145: IFTRUE 26149
26147: GO 26199
26149: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26150: LD_ADDR_VAR 0 3
26154: PUSH
26155: LD_INT 13
26157: PUSH
26158: LD_INT 14
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: LD_INT 4
26169: PUSH
26170: LD_INT 5
26172: PUSH
26173: LD_INT 21
26175: PUSH
26176: LD_INT 22
26178: PUSH
26179: LD_INT 23
26181: PUSH
26182: LD_INT 24
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 26200
26199: POP
// result := ( chassis in result ) ;
26200: LD_ADDR_VAR 0 3
26204: PUSH
26205: LD_VAR 0 1
26209: PUSH
26210: LD_VAR 0 3
26214: IN
26215: ST_TO_ADDR
// end ;
26216: LD_VAR 0 3
26220: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26221: LD_INT 0
26223: PPUSH
// if not chassis or not weapon then
26224: LD_VAR 0 1
26228: NOT
26229: IFTRUE 26238
26231: PUSH
26232: LD_VAR 0 2
26236: NOT
26237: OR
26238: IFFALSE 26242
// exit ;
26240: GO 27336
// case weapon of us_machine_gun :
26242: LD_VAR 0 2
26246: PUSH
26247: LD_INT 2
26249: DOUBLE
26250: EQUAL
26251: IFTRUE 26255
26253: GO 26285
26255: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26256: LD_ADDR_VAR 0 3
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: LD_INT 4
26272: PUSH
26273: LD_INT 5
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 27320
26285: LD_INT 3
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26323
26293: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: LD_INT 3
26307: PUSH
26308: LD_INT 4
26310: PUSH
26311: LD_INT 5
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
26321: GO 27320
26323: LD_INT 11
26325: DOUBLE
26326: EQUAL
26327: IFTRUE 26331
26329: GO 26361
26331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: LD_INT 3
26345: PUSH
26346: LD_INT 4
26348: PUSH
26349: LD_INT 5
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: ST_TO_ADDR
26359: GO 27320
26361: LD_INT 4
26363: DOUBLE
26364: EQUAL
26365: IFTRUE 26369
26367: GO 26395
26369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: LD_INT 3
26380: PUSH
26381: LD_INT 4
26383: PUSH
26384: LD_INT 5
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: ST_TO_ADDR
26393: GO 27320
26395: LD_INT 5
26397: DOUBLE
26398: EQUAL
26399: IFTRUE 26403
26401: GO 26429
26403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26404: LD_ADDR_VAR 0 3
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 3
26414: PUSH
26415: LD_INT 4
26417: PUSH
26418: LD_INT 5
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: ST_TO_ADDR
26427: GO 27320
26429: LD_INT 9
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 26463
26437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26438: LD_ADDR_VAR 0 3
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 3
26448: PUSH
26449: LD_INT 4
26451: PUSH
26452: LD_INT 5
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
26461: GO 27320
26463: LD_INT 7
26465: DOUBLE
26466: EQUAL
26467: IFTRUE 26471
26469: GO 26497
26471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: LD_INT 4
26485: PUSH
26486: LD_INT 5
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: ST_TO_ADDR
26495: GO 27320
26497: LD_INT 12
26499: DOUBLE
26500: EQUAL
26501: IFTRUE 26505
26503: GO 26531
26505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26506: LD_ADDR_VAR 0 3
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: LD_INT 4
26519: PUSH
26520: LD_INT 5
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: ST_TO_ADDR
26529: GO 27320
26531: LD_INT 13
26533: DOUBLE
26534: EQUAL
26535: IFTRUE 26539
26537: GO 26565
26539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 3
26550: PUSH
26551: LD_INT 4
26553: PUSH
26554: LD_INT 5
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: ST_TO_ADDR
26563: GO 27320
26565: LD_INT 14
26567: DOUBLE
26568: EQUAL
26569: IFTRUE 26573
26571: GO 26591
26573: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_INT 4
26581: PUSH
26582: LD_INT 5
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: ST_TO_ADDR
26589: GO 27320
26591: LD_INT 6
26593: DOUBLE
26594: EQUAL
26595: IFTRUE 26599
26597: GO 26617
26599: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_INT 4
26607: PUSH
26608: LD_INT 5
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: ST_TO_ADDR
26615: GO 27320
26617: LD_INT 10
26619: DOUBLE
26620: EQUAL
26621: IFTRUE 26625
26623: GO 26643
26625: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26626: LD_ADDR_VAR 0 3
26630: PUSH
26631: LD_INT 4
26633: PUSH
26634: LD_INT 5
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: ST_TO_ADDR
26641: GO 27320
26643: LD_INT 22
26645: DOUBLE
26646: EQUAL
26647: IFTRUE 26651
26649: GO 26677
26651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26652: LD_ADDR_VAR 0 3
26656: PUSH
26657: LD_INT 11
26659: PUSH
26660: LD_INT 12
26662: PUSH
26663: LD_INT 13
26665: PUSH
26666: LD_INT 14
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: ST_TO_ADDR
26675: GO 27320
26677: LD_INT 23
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26711
26685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 11
26693: PUSH
26694: LD_INT 12
26696: PUSH
26697: LD_INT 13
26699: PUSH
26700: LD_INT 14
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
26709: GO 27320
26711: LD_INT 24
26713: DOUBLE
26714: EQUAL
26715: IFTRUE 26719
26717: GO 26745
26719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26720: LD_ADDR_VAR 0 3
26724: PUSH
26725: LD_INT 11
26727: PUSH
26728: LD_INT 12
26730: PUSH
26731: LD_INT 13
26733: PUSH
26734: LD_INT 14
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: ST_TO_ADDR
26743: GO 27320
26745: LD_INT 30
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26779
26753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26754: LD_ADDR_VAR 0 3
26758: PUSH
26759: LD_INT 11
26761: PUSH
26762: LD_INT 12
26764: PUSH
26765: LD_INT 13
26767: PUSH
26768: LD_INT 14
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: ST_TO_ADDR
26777: GO 27320
26779: LD_INT 25
26781: DOUBLE
26782: EQUAL
26783: IFTRUE 26787
26785: GO 26805
26787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26788: LD_ADDR_VAR 0 3
26792: PUSH
26793: LD_INT 13
26795: PUSH
26796: LD_INT 14
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: ST_TO_ADDR
26803: GO 27320
26805: LD_INT 27
26807: DOUBLE
26808: EQUAL
26809: IFTRUE 26813
26811: GO 26831
26813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: LD_INT 13
26821: PUSH
26822: LD_INT 14
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: ST_TO_ADDR
26829: GO 27320
26831: LD_INT 92
26833: DOUBLE
26834: EQUAL
26835: IFTRUE 26839
26837: GO 26865
26839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26840: LD_ADDR_VAR 0 3
26844: PUSH
26845: LD_INT 11
26847: PUSH
26848: LD_INT 12
26850: PUSH
26851: LD_INT 13
26853: PUSH
26854: LD_INT 14
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: ST_TO_ADDR
26863: GO 27320
26865: LD_INT 28
26867: DOUBLE
26868: EQUAL
26869: IFTRUE 26873
26871: GO 26891
26873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26874: LD_ADDR_VAR 0 3
26878: PUSH
26879: LD_INT 13
26881: PUSH
26882: LD_INT 14
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: ST_TO_ADDR
26889: GO 27320
26891: LD_INT 29
26893: DOUBLE
26894: EQUAL
26895: IFTRUE 26899
26897: GO 26917
26899: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26900: LD_ADDR_VAR 0 3
26904: PUSH
26905: LD_INT 13
26907: PUSH
26908: LD_INT 14
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: ST_TO_ADDR
26915: GO 27320
26917: LD_INT 31
26919: DOUBLE
26920: EQUAL
26921: IFTRUE 26925
26923: GO 26943
26925: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26926: LD_ADDR_VAR 0 3
26930: PUSH
26931: LD_INT 13
26933: PUSH
26934: LD_INT 14
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: ST_TO_ADDR
26941: GO 27320
26943: LD_INT 26
26945: DOUBLE
26946: EQUAL
26947: IFTRUE 26951
26949: GO 26969
26951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26952: LD_ADDR_VAR 0 3
26956: PUSH
26957: LD_INT 13
26959: PUSH
26960: LD_INT 14
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: ST_TO_ADDR
26967: GO 27320
26969: LD_INT 42
26971: DOUBLE
26972: EQUAL
26973: IFTRUE 26977
26975: GO 27003
26977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_INT 21
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_INT 23
26991: PUSH
26992: LD_INT 24
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
27001: GO 27320
27003: LD_INT 43
27005: DOUBLE
27006: EQUAL
27007: IFTRUE 27011
27009: GO 27037
27011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27012: LD_ADDR_VAR 0 3
27016: PUSH
27017: LD_INT 21
27019: PUSH
27020: LD_INT 22
27022: PUSH
27023: LD_INT 23
27025: PUSH
27026: LD_INT 24
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
27035: GO 27320
27037: LD_INT 44
27039: DOUBLE
27040: EQUAL
27041: IFTRUE 27045
27043: GO 27071
27045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27046: LD_ADDR_VAR 0 3
27050: PUSH
27051: LD_INT 21
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_INT 23
27059: PUSH
27060: LD_INT 24
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
27069: GO 27320
27071: LD_INT 45
27073: DOUBLE
27074: EQUAL
27075: IFTRUE 27079
27077: GO 27105
27079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_INT 21
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_INT 23
27093: PUSH
27094: LD_INT 24
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: ST_TO_ADDR
27103: GO 27320
27105: LD_INT 49
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27113
27111: GO 27139
27113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_INT 21
27121: PUSH
27122: LD_INT 22
27124: PUSH
27125: LD_INT 23
27127: PUSH
27128: LD_INT 24
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: ST_TO_ADDR
27137: GO 27320
27139: LD_INT 51
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27173
27147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_INT 21
27155: PUSH
27156: LD_INT 22
27158: PUSH
27159: LD_INT 23
27161: PUSH
27162: LD_INT 24
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 27320
27173: LD_INT 52
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27207
27181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_INT 23
27195: PUSH
27196: LD_INT 24
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
27205: GO 27320
27207: LD_INT 53
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27233
27215: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 23
27223: PUSH
27224: LD_INT 24
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: ST_TO_ADDR
27231: GO 27320
27233: LD_INT 46
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27259
27241: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: LD_INT 23
27249: PUSH
27250: LD_INT 24
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: ST_TO_ADDR
27257: GO 27320
27259: LD_INT 47
27261: DOUBLE
27262: EQUAL
27263: IFTRUE 27267
27265: GO 27285
27267: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_INT 23
27275: PUSH
27276: LD_INT 24
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: ST_TO_ADDR
27283: GO 27320
27285: LD_INT 98
27287: DOUBLE
27288: EQUAL
27289: IFTRUE 27293
27291: GO 27319
27293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27294: LD_ADDR_VAR 0 3
27298: PUSH
27299: LD_INT 21
27301: PUSH
27302: LD_INT 22
27304: PUSH
27305: LD_INT 23
27307: PUSH
27308: LD_INT 24
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: ST_TO_ADDR
27317: GO 27320
27319: POP
// result := ( chassis in result ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_VAR 0 1
27329: PUSH
27330: LD_VAR 0 3
27334: IN
27335: ST_TO_ADDR
// end ;
27336: LD_VAR 0 3
27340: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
27345: PPUSH
27346: PPUSH
27347: PPUSH
27348: PPUSH
27349: PPUSH
// result := array ;
27350: LD_ADDR_VAR 0 5
27354: PUSH
27355: LD_VAR 0 1
27359: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27360: LD_VAR 0 1
27364: NOT
27365: IFTRUE 27374
27367: PUSH
27368: LD_VAR 0 2
27372: NOT
27373: OR
27374: IFTRUE 27383
27376: PUSH
27377: LD_VAR 0 3
27381: NOT
27382: OR
27383: IFTRUE 27397
27385: PUSH
27386: LD_VAR 0 2
27390: PUSH
27391: LD_VAR 0 1
27395: GREATER
27396: OR
27397: IFTRUE 27411
27399: PUSH
27400: LD_VAR 0 3
27404: PUSH
27405: LD_VAR 0 1
27409: GREATER
27410: OR
27411: IFFALSE 27415
// exit ;
27413: GO 27711
// if direction then
27415: LD_VAR 0 4
27419: IFFALSE 27483
// begin d := 1 ;
27421: LD_ADDR_VAR 0 9
27425: PUSH
27426: LD_INT 1
27428: ST_TO_ADDR
// if i_from > i_to then
27429: LD_VAR 0 2
27433: PUSH
27434: LD_VAR 0 3
27438: GREATER
27439: IFFALSE 27465
// length := ( array - i_from ) + i_to else
27441: LD_ADDR_VAR 0 11
27445: PUSH
27446: LD_VAR 0 1
27450: PUSH
27451: LD_VAR 0 2
27455: MINUS
27456: PUSH
27457: LD_VAR 0 3
27461: PLUS
27462: ST_TO_ADDR
27463: GO 27481
// length := i_to - i_from ;
27465: LD_ADDR_VAR 0 11
27469: PUSH
27470: LD_VAR 0 3
27474: PUSH
27475: LD_VAR 0 2
27479: MINUS
27480: ST_TO_ADDR
// end else
27481: GO 27544
// begin d := - 1 ;
27483: LD_ADDR_VAR 0 9
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: ST_TO_ADDR
// if i_from > i_to then
27492: LD_VAR 0 2
27496: PUSH
27497: LD_VAR 0 3
27501: GREATER
27502: IFFALSE 27522
// length := i_from - i_to else
27504: LD_ADDR_VAR 0 11
27508: PUSH
27509: LD_VAR 0 2
27513: PUSH
27514: LD_VAR 0 3
27518: MINUS
27519: ST_TO_ADDR
27520: GO 27544
// length := ( array - i_to ) + i_from ;
27522: LD_ADDR_VAR 0 11
27526: PUSH
27527: LD_VAR 0 1
27531: PUSH
27532: LD_VAR 0 3
27536: MINUS
27537: PUSH
27538: LD_VAR 0 2
27542: PLUS
27543: ST_TO_ADDR
// end ; if not length then
27544: LD_VAR 0 11
27548: NOT
27549: IFFALSE 27553
// exit ;
27551: GO 27711
// tmp := array ;
27553: LD_ADDR_VAR 0 10
27557: PUSH
27558: LD_VAR 0 1
27562: ST_TO_ADDR
// for i = 1 to length do
27563: LD_ADDR_VAR 0 6
27567: PUSH
27568: DOUBLE
27569: LD_INT 1
27571: DEC
27572: ST_TO_ADDR
27573: LD_VAR 0 11
27577: PUSH
27578: FOR_TO
27579: IFFALSE 27699
// begin for j = 1 to array do
27581: LD_ADDR_VAR 0 7
27585: PUSH
27586: DOUBLE
27587: LD_INT 1
27589: DEC
27590: ST_TO_ADDR
27591: LD_VAR 0 1
27595: PUSH
27596: FOR_TO
27597: IFFALSE 27685
// begin k := j + d ;
27599: LD_ADDR_VAR 0 8
27603: PUSH
27604: LD_VAR 0 7
27608: PUSH
27609: LD_VAR 0 9
27613: PLUS
27614: ST_TO_ADDR
// if k > array then
27615: LD_VAR 0 8
27619: PUSH
27620: LD_VAR 0 1
27624: GREATER
27625: IFFALSE 27635
// k := 1 ;
27627: LD_ADDR_VAR 0 8
27631: PUSH
27632: LD_INT 1
27634: ST_TO_ADDR
// if not k then
27635: LD_VAR 0 8
27639: NOT
27640: IFFALSE 27652
// k := array ;
27642: LD_ADDR_VAR 0 8
27646: PUSH
27647: LD_VAR 0 1
27651: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27652: LD_ADDR_VAR 0 10
27656: PUSH
27657: LD_VAR 0 10
27661: PPUSH
27662: LD_VAR 0 8
27666: PPUSH
27667: LD_VAR 0 1
27671: PUSH
27672: LD_VAR 0 7
27676: ARRAY
27677: PPUSH
27678: CALL_OW 1
27682: ST_TO_ADDR
// end ;
27683: GO 27596
27685: POP
27686: POP
// array := tmp ;
27687: LD_ADDR_VAR 0 1
27691: PUSH
27692: LD_VAR 0 10
27696: ST_TO_ADDR
// end ;
27697: GO 27578
27699: POP
27700: POP
// result := array ;
27701: LD_ADDR_VAR 0 5
27705: PUSH
27706: LD_VAR 0 1
27710: ST_TO_ADDR
// end ;
27711: LD_VAR 0 5
27715: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
// result := 0 ;
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 0
27727: ST_TO_ADDR
// if not array or not value in array then
27728: LD_VAR 0 1
27732: NOT
27733: IFTRUE 27748
27735: PUSH
27736: LD_VAR 0 2
27740: PUSH
27741: LD_VAR 0 1
27745: IN
27746: NOT
27747: OR
27748: IFFALSE 27752
// exit ;
27750: GO 27806
// for i = 1 to array do
27752: LD_ADDR_VAR 0 4
27756: PUSH
27757: DOUBLE
27758: LD_INT 1
27760: DEC
27761: ST_TO_ADDR
27762: LD_VAR 0 1
27766: PUSH
27767: FOR_TO
27768: IFFALSE 27804
// if value = array [ i ] then
27770: LD_VAR 0 2
27774: PUSH
27775: LD_VAR 0 1
27779: PUSH
27780: LD_VAR 0 4
27784: ARRAY
27785: EQUAL
27786: IFFALSE 27802
// begin result := i ;
27788: LD_ADDR_VAR 0 3
27792: PUSH
27793: LD_VAR 0 4
27797: ST_TO_ADDR
// exit ;
27798: POP
27799: POP
27800: GO 27806
// end ;
27802: GO 27767
27804: POP
27805: POP
// end ;
27806: LD_VAR 0 3
27810: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27811: LD_INT 0
27813: PPUSH
// vc_chassis := chassis ;
27814: LD_ADDR_OWVAR 37
27818: PUSH
27819: LD_VAR 0 1
27823: ST_TO_ADDR
// vc_engine := engine ;
27824: LD_ADDR_OWVAR 39
27828: PUSH
27829: LD_VAR 0 2
27833: ST_TO_ADDR
// vc_control := control ;
27834: LD_ADDR_OWVAR 38
27838: PUSH
27839: LD_VAR 0 3
27843: ST_TO_ADDR
// vc_weapon := weapon ;
27844: LD_ADDR_OWVAR 40
27848: PUSH
27849: LD_VAR 0 4
27853: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27854: LD_ADDR_OWVAR 41
27858: PUSH
27859: LD_VAR 0 5
27863: ST_TO_ADDR
// end ;
27864: LD_VAR 0 6
27868: RET
// export function WantPlant ( unit ) ; var task ; begin
27869: LD_INT 0
27871: PPUSH
27872: PPUSH
// result := false ;
27873: LD_ADDR_VAR 0 2
27877: PUSH
27878: LD_INT 0
27880: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27881: LD_ADDR_VAR 0 3
27885: PUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 437
27895: ST_TO_ADDR
// if task then
27896: LD_VAR 0 3
27900: IFFALSE 27928
// if task [ 1 ] [ 1 ] = p then
27902: LD_VAR 0 3
27906: PUSH
27907: LD_INT 1
27909: ARRAY
27910: PUSH
27911: LD_INT 1
27913: ARRAY
27914: PUSH
27915: LD_STRING p
27917: EQUAL
27918: IFFALSE 27928
// result := true ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: LD_INT 1
27927: ST_TO_ADDR
// end ;
27928: LD_VAR 0 2
27932: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27933: LD_INT 0
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
// if pos < 1 then
27939: LD_VAR 0 2
27943: PUSH
27944: LD_INT 1
27946: LESS
27947: IFFALSE 27951
// exit ;
27949: GO 28254
// if pos = 1 then
27951: LD_VAR 0 2
27955: PUSH
27956: LD_INT 1
27958: EQUAL
27959: IFFALSE 27992
// result := Replace ( arr , pos [ 1 ] , value ) else
27961: LD_ADDR_VAR 0 4
27965: PUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: LD_VAR 0 2
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: PPUSH
27980: LD_VAR 0 3
27984: PPUSH
27985: CALL_OW 1
27989: ST_TO_ADDR
27990: GO 28254
// begin tmp := arr ;
27992: LD_ADDR_VAR 0 6
27996: PUSH
27997: LD_VAR 0 1
28001: ST_TO_ADDR
// s_arr := [ tmp ] ;
28002: LD_ADDR_VAR 0 7
28006: PUSH
28007: LD_VAR 0 6
28011: PUSH
28012: EMPTY
28013: LIST
28014: ST_TO_ADDR
// for i = 1 to pos - 1 do
28015: LD_ADDR_VAR 0 5
28019: PUSH
28020: DOUBLE
28021: LD_INT 1
28023: DEC
28024: ST_TO_ADDR
28025: LD_VAR 0 2
28029: PUSH
28030: LD_INT 1
28032: MINUS
28033: PUSH
28034: FOR_TO
28035: IFFALSE 28080
// begin tmp := tmp [ pos [ i ] ] ;
28037: LD_ADDR_VAR 0 6
28041: PUSH
28042: LD_VAR 0 6
28046: PUSH
28047: LD_VAR 0 2
28051: PUSH
28052: LD_VAR 0 5
28056: ARRAY
28057: ARRAY
28058: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28059: LD_ADDR_VAR 0 7
28063: PUSH
28064: LD_VAR 0 7
28068: PUSH
28069: LD_VAR 0 6
28073: PUSH
28074: EMPTY
28075: LIST
28076: ADD
28077: ST_TO_ADDR
// end ;
28078: GO 28034
28080: POP
28081: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28082: LD_ADDR_VAR 0 6
28086: PUSH
28087: LD_VAR 0 6
28091: PPUSH
28092: LD_VAR 0 2
28096: PUSH
28097: LD_VAR 0 2
28101: ARRAY
28102: PPUSH
28103: LD_VAR 0 3
28107: PPUSH
28108: CALL_OW 1
28112: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28113: LD_ADDR_VAR 0 7
28117: PUSH
28118: LD_VAR 0 7
28122: PPUSH
28123: LD_VAR 0 7
28127: PPUSH
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 1
28137: ST_TO_ADDR
// for i = s_arr downto 2 do
28138: LD_ADDR_VAR 0 5
28142: PUSH
28143: DOUBLE
28144: LD_VAR 0 7
28148: INC
28149: ST_TO_ADDR
28150: LD_INT 2
28152: PUSH
28153: FOR_DOWNTO
28154: IFFALSE 28238
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28156: LD_ADDR_VAR 0 6
28160: PUSH
28161: LD_VAR 0 7
28165: PUSH
28166: LD_VAR 0 5
28170: PUSH
28171: LD_INT 1
28173: MINUS
28174: ARRAY
28175: PPUSH
28176: LD_VAR 0 2
28180: PUSH
28181: LD_VAR 0 5
28185: PUSH
28186: LD_INT 1
28188: MINUS
28189: ARRAY
28190: PPUSH
28191: LD_VAR 0 7
28195: PUSH
28196: LD_VAR 0 5
28200: ARRAY
28201: PPUSH
28202: CALL_OW 1
28206: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28207: LD_ADDR_VAR 0 7
28211: PUSH
28212: LD_VAR 0 7
28216: PPUSH
28217: LD_VAR 0 5
28221: PUSH
28222: LD_INT 1
28224: MINUS
28225: PPUSH
28226: LD_VAR 0 6
28230: PPUSH
28231: CALL_OW 1
28235: ST_TO_ADDR
// end ;
28236: GO 28153
28238: POP
28239: POP
// result := s_arr [ 1 ] ;
28240: LD_ADDR_VAR 0 4
28244: PUSH
28245: LD_VAR 0 7
28249: PUSH
28250: LD_INT 1
28252: ARRAY
28253: ST_TO_ADDR
// end ; end ;
28254: LD_VAR 0 4
28258: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28259: LD_INT 0
28261: PPUSH
28262: PPUSH
// if not list then
28263: LD_VAR 0 1
28267: NOT
28268: IFFALSE 28272
// exit ;
28270: GO 28363
// i := list [ pos1 ] ;
28272: LD_ADDR_VAR 0 5
28276: PUSH
28277: LD_VAR 0 1
28281: PUSH
28282: LD_VAR 0 2
28286: ARRAY
28287: ST_TO_ADDR
// if not i then
28288: LD_VAR 0 5
28292: NOT
28293: IFFALSE 28297
// exit ;
28295: GO 28363
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28297: LD_ADDR_VAR 0 1
28301: PUSH
28302: LD_VAR 0 1
28306: PPUSH
28307: LD_VAR 0 2
28311: PPUSH
28312: LD_VAR 0 1
28316: PUSH
28317: LD_VAR 0 3
28321: ARRAY
28322: PPUSH
28323: CALL_OW 1
28327: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_VAR 0 3
28342: PPUSH
28343: LD_VAR 0 5
28347: PPUSH
28348: CALL_OW 1
28352: ST_TO_ADDR
// result := list ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_VAR 0 1
28362: ST_TO_ADDR
// end ;
28363: LD_VAR 0 4
28367: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28368: LD_INT 0
28370: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 250
28385: PPUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 251
28395: PPUSH
28396: LD_VAR 0 2
28400: PPUSH
28401: LD_VAR 0 3
28405: PPUSH
28406: LD_VAR 0 4
28410: PPUSH
28411: CALL 28793 0 5
28415: ST_TO_ADDR
// end ;
28416: LD_VAR 0 5
28420: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28421: LD_INT 0
28423: PPUSH
28424: PPUSH
28425: PPUSH
28426: PPUSH
// if not list or not unit then
28427: LD_VAR 0 2
28431: NOT
28432: IFTRUE 28441
28434: PUSH
28435: LD_VAR 0 1
28439: NOT
28440: OR
28441: IFFALSE 28445
// exit ;
28443: GO 28788
// result := [ ] ;
28445: LD_ADDR_VAR 0 5
28449: PUSH
28450: EMPTY
28451: ST_TO_ADDR
// for i in list do
28452: LD_ADDR_VAR 0 6
28456: PUSH
28457: LD_VAR 0 2
28461: PUSH
28462: FOR_IN
28463: IFFALSE 28681
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 6
28479: PUSH
28480: LD_INT 1
28482: ARRAY
28483: PPUSH
28484: LD_VAR 0 6
28488: PUSH
28489: LD_INT 2
28491: ARRAY
28492: PPUSH
28493: CALL_OW 297
28497: ST_TO_ADDR
// if not Count ( result ) then
28498: LD_VAR 0 5
28502: PPUSH
28503: CALL 25015 0 1
28507: NOT
28508: IFFALSE 28541
// begin result := Join ( result , [ i , tmp ] ) ;
28510: LD_ADDR_VAR 0 5
28514: PUSH
28515: LD_VAR 0 5
28519: PPUSH
28520: LD_VAR 0 6
28524: PUSH
28525: LD_VAR 0 8
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL 60991 0 2
28538: ST_TO_ADDR
// continue ;
28539: GO 28462
// end ; if result [ result ] [ 2 ] <= tmp then
28541: LD_VAR 0 5
28545: PUSH
28546: LD_VAR 0 5
28550: ARRAY
28551: PUSH
28552: LD_INT 2
28554: ARRAY
28555: PUSH
28556: LD_VAR 0 8
28560: LESSEQUAL
28561: IFFALSE 28594
// result := Join ( result , [ i , tmp ] ) else
28563: LD_ADDR_VAR 0 5
28567: PUSH
28568: LD_VAR 0 5
28572: PPUSH
28573: LD_VAR 0 6
28577: PUSH
28578: LD_VAR 0 8
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL 60991 0 2
28591: ST_TO_ADDR
28592: GO 28679
// begin for j := 1 to Count ( result ) do
28594: LD_ADDR_VAR 0 7
28598: PUSH
28599: DOUBLE
28600: LD_INT 1
28602: DEC
28603: ST_TO_ADDR
28604: LD_VAR 0 5
28608: PPUSH
28609: CALL 25015 0 1
28613: PUSH
28614: FOR_TO
28615: IFFALSE 28677
// begin if tmp < result [ j ] [ 2 ] then
28617: LD_VAR 0 8
28621: PUSH
28622: LD_VAR 0 5
28626: PUSH
28627: LD_VAR 0 7
28631: ARRAY
28632: PUSH
28633: LD_INT 2
28635: ARRAY
28636: LESS
28637: IFFALSE 28675
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28639: LD_ADDR_VAR 0 5
28643: PUSH
28644: LD_VAR 0 5
28648: PPUSH
28649: LD_VAR 0 7
28653: PPUSH
28654: LD_VAR 0 6
28658: PUSH
28659: LD_VAR 0 8
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PPUSH
28668: CALL_OW 2
28672: ST_TO_ADDR
// break ;
28673: GO 28677
// end ; end ;
28675: GO 28614
28677: POP
28678: POP
// end ; end ;
28679: GO 28462
28681: POP
28682: POP
// if result and not asc then
28683: LD_VAR 0 5
28687: IFFALSE 28696
28689: PUSH
28690: LD_VAR 0 3
28694: NOT
28695: AND
28696: IFFALSE 28713
// result := ReverseArray ( result ) ;
28698: LD_ADDR_VAR 0 5
28702: PUSH
28703: LD_VAR 0 5
28707: PPUSH
28708: CALL 56071 0 1
28712: ST_TO_ADDR
// tmp := [ ] ;
28713: LD_ADDR_VAR 0 8
28717: PUSH
28718: EMPTY
28719: ST_TO_ADDR
// if mode then
28720: LD_VAR 0 4
28724: IFFALSE 28788
// begin for i := 1 to result do
28726: LD_ADDR_VAR 0 6
28730: PUSH
28731: DOUBLE
28732: LD_INT 1
28734: DEC
28735: ST_TO_ADDR
28736: LD_VAR 0 5
28740: PUSH
28741: FOR_TO
28742: IFFALSE 28776
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28744: LD_ADDR_VAR 0 8
28748: PUSH
28749: LD_VAR 0 8
28753: PPUSH
28754: LD_VAR 0 5
28758: PUSH
28759: LD_VAR 0 6
28763: ARRAY
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: CALL 60991 0 2
28773: ST_TO_ADDR
28774: GO 28741
28776: POP
28777: POP
// result := tmp ;
28778: LD_ADDR_VAR 0 5
28782: PUSH
28783: LD_VAR 0 8
28787: ST_TO_ADDR
// end ; end ;
28788: LD_VAR 0 5
28792: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
// if not list then
28799: LD_VAR 0 3
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 29198
// result := [ ] ;
28808: LD_ADDR_VAR 0 6
28812: PUSH
28813: EMPTY
28814: ST_TO_ADDR
// for i in list do
28815: LD_ADDR_VAR 0 7
28819: PUSH
28820: LD_VAR 0 3
28824: PUSH
28825: FOR_IN
28826: IFFALSE 29028
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28828: LD_ADDR_VAR 0 9
28832: PUSH
28833: LD_VAR 0 7
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: LD_VAR 0 2
28847: PPUSH
28848: CALL_OW 297
28852: ST_TO_ADDR
// if not result then
28853: LD_VAR 0 6
28857: NOT
28858: IFFALSE 28884
// result := [ [ i , tmp ] ] else
28860: LD_ADDR_VAR 0 6
28864: PUSH
28865: LD_VAR 0 7
28869: PUSH
28870: LD_VAR 0 9
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: ST_TO_ADDR
28882: GO 29026
// begin if result [ result ] [ 2 ] <= tmp then
28884: LD_VAR 0 6
28888: PUSH
28889: LD_VAR 0 6
28893: ARRAY
28894: PUSH
28895: LD_INT 2
28897: ARRAY
28898: PUSH
28899: LD_VAR 0 9
28903: LESSEQUAL
28904: IFFALSE 28946
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28906: LD_ADDR_VAR 0 6
28910: PUSH
28911: LD_VAR 0 6
28915: PPUSH
28916: LD_VAR 0 6
28920: PUSH
28921: LD_INT 1
28923: PLUS
28924: PPUSH
28925: LD_VAR 0 7
28929: PUSH
28930: LD_VAR 0 9
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 2
28943: ST_TO_ADDR
28944: GO 29026
// for j := 1 to result do
28946: LD_ADDR_VAR 0 8
28950: PUSH
28951: DOUBLE
28952: LD_INT 1
28954: DEC
28955: ST_TO_ADDR
28956: LD_VAR 0 6
28960: PUSH
28961: FOR_TO
28962: IFFALSE 29024
// begin if tmp < result [ j ] [ 2 ] then
28964: LD_VAR 0 9
28968: PUSH
28969: LD_VAR 0 6
28973: PUSH
28974: LD_VAR 0 8
28978: ARRAY
28979: PUSH
28980: LD_INT 2
28982: ARRAY
28983: LESS
28984: IFFALSE 29022
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28986: LD_ADDR_VAR 0 6
28990: PUSH
28991: LD_VAR 0 6
28995: PPUSH
28996: LD_VAR 0 8
29000: PPUSH
29001: LD_VAR 0 7
29005: PUSH
29006: LD_VAR 0 9
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 2
29019: ST_TO_ADDR
// break ;
29020: GO 29024
// end ; end ;
29022: GO 28961
29024: POP
29025: POP
// end ; end ;
29026: GO 28825
29028: POP
29029: POP
// if result and not asc then
29030: LD_VAR 0 6
29034: IFFALSE 29043
29036: PUSH
29037: LD_VAR 0 4
29041: NOT
29042: AND
29043: IFFALSE 29118
// begin tmp := result ;
29045: LD_ADDR_VAR 0 9
29049: PUSH
29050: LD_VAR 0 6
29054: ST_TO_ADDR
// for i = tmp downto 1 do
29055: LD_ADDR_VAR 0 7
29059: PUSH
29060: DOUBLE
29061: LD_VAR 0 9
29065: INC
29066: ST_TO_ADDR
29067: LD_INT 1
29069: PUSH
29070: FOR_DOWNTO
29071: IFFALSE 29116
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29073: LD_ADDR_VAR 0 6
29077: PUSH
29078: LD_VAR 0 6
29082: PPUSH
29083: LD_VAR 0 9
29087: PUSH
29088: LD_VAR 0 7
29092: MINUS
29093: PUSH
29094: LD_INT 1
29096: PLUS
29097: PPUSH
29098: LD_VAR 0 9
29102: PUSH
29103: LD_VAR 0 7
29107: ARRAY
29108: PPUSH
29109: CALL_OW 1
29113: ST_TO_ADDR
29114: GO 29070
29116: POP
29117: POP
// end ; tmp := [ ] ;
29118: LD_ADDR_VAR 0 9
29122: PUSH
29123: EMPTY
29124: ST_TO_ADDR
// if mode then
29125: LD_VAR 0 5
29129: IFFALSE 29198
// begin for i = 1 to result do
29131: LD_ADDR_VAR 0 7
29135: PUSH
29136: DOUBLE
29137: LD_INT 1
29139: DEC
29140: ST_TO_ADDR
29141: LD_VAR 0 6
29145: PUSH
29146: FOR_TO
29147: IFFALSE 29186
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29149: LD_ADDR_VAR 0 9
29153: PUSH
29154: LD_VAR 0 9
29158: PPUSH
29159: LD_VAR 0 7
29163: PPUSH
29164: LD_VAR 0 6
29168: PUSH
29169: LD_VAR 0 7
29173: ARRAY
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: PPUSH
29179: CALL_OW 1
29183: ST_TO_ADDR
29184: GO 29146
29186: POP
29187: POP
// result := tmp ;
29188: LD_ADDR_VAR 0 6
29192: PUSH
29193: LD_VAR 0 9
29197: ST_TO_ADDR
// end ; end ;
29198: LD_VAR 0 6
29202: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29211: LD_ADDR_VAR 0 5
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// if not x or not y then
29233: LD_VAR 0 2
29237: NOT
29238: IFTRUE 29247
29240: PUSH
29241: LD_VAR 0 3
29245: NOT
29246: OR
29247: IFFALSE 29251
// exit ;
29249: GO 30907
// if not range then
29251: LD_VAR 0 4
29255: NOT
29256: IFFALSE 29266
// range := 10 ;
29258: LD_ADDR_VAR 0 4
29262: PUSH
29263: LD_INT 10
29265: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29266: LD_ADDR_VAR 0 8
29270: PUSH
29271: LD_INT 81
29273: PUSH
29274: LD_VAR 0 1
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 92
29285: PUSH
29286: LD_VAR 0 2
29290: PUSH
29291: LD_VAR 0 3
29295: PUSH
29296: LD_VAR 0 4
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: LD_INT 21
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 69
29333: ST_TO_ADDR
// if not tmp then
29334: LD_VAR 0 8
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 30907
// for i in tmp do
29343: LD_ADDR_VAR 0 6
29347: PUSH
29348: LD_VAR 0 8
29352: PUSH
29353: FOR_IN
29354: IFFALSE 30882
// begin points := [ 0 , 0 , 0 ] ;
29356: LD_ADDR_VAR 0 9
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: ST_TO_ADDR
// bpoints := 1 ;
29375: LD_ADDR_VAR 0 10
29379: PUSH
29380: LD_INT 1
29382: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29383: LD_VAR 0 6
29387: PPUSH
29388: CALL_OW 247
29392: PUSH
29393: LD_INT 1
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29983
29401: POP
// begin if GetClass ( i ) = 1 then
29402: LD_VAR 0 6
29406: PPUSH
29407: CALL_OW 257
29411: PUSH
29412: LD_INT 1
29414: EQUAL
29415: IFFALSE 29436
// points := [ 10 , 5 , 3 ] ;
29417: LD_ADDR_VAR 0 9
29421: PUSH
29422: LD_INT 10
29424: PUSH
29425: LD_INT 5
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29436: LD_VAR 0 6
29440: PPUSH
29441: CALL_OW 257
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: LD_INT 4
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: IN
29460: IFFALSE 29481
// points := [ 3 , 2 , 1 ] ;
29462: LD_ADDR_VAR 0 9
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29481: LD_VAR 0 6
29485: PPUSH
29486: CALL_OW 257
29490: PUSH
29491: LD_INT 5
29493: EQUAL
29494: IFFALSE 29515
// points := [ 130 , 5 , 2 ] ;
29496: LD_ADDR_VAR 0 9
29500: PUSH
29501: LD_INT 130
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29515: LD_VAR 0 6
29519: PPUSH
29520: CALL_OW 257
29524: PUSH
29525: LD_INT 8
29527: EQUAL
29528: IFFALSE 29549
// points := [ 35 , 35 , 30 ] ;
29530: LD_ADDR_VAR 0 9
29534: PUSH
29535: LD_INT 35
29537: PUSH
29538: LD_INT 35
29540: PUSH
29541: LD_INT 30
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29549: LD_VAR 0 6
29553: PPUSH
29554: CALL_OW 257
29558: PUSH
29559: LD_INT 9
29561: EQUAL
29562: IFFALSE 29583
// points := [ 20 , 55 , 40 ] ;
29564: LD_ADDR_VAR 0 9
29568: PUSH
29569: LD_INT 20
29571: PUSH
29572: LD_INT 55
29574: PUSH
29575: LD_INT 40
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29583: LD_VAR 0 6
29587: PPUSH
29588: CALL_OW 257
29592: PUSH
29593: LD_INT 12
29595: PUSH
29596: LD_INT 16
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: IN
29603: IFFALSE 29624
// points := [ 5 , 3 , 2 ] ;
29605: LD_ADDR_VAR 0 9
29609: PUSH
29610: LD_INT 5
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29624: LD_VAR 0 6
29628: PPUSH
29629: CALL_OW 257
29633: PUSH
29634: LD_INT 17
29636: EQUAL
29637: IFFALSE 29658
// points := [ 100 , 50 , 75 ] ;
29639: LD_ADDR_VAR 0 9
29643: PUSH
29644: LD_INT 100
29646: PUSH
29647: LD_INT 50
29649: PUSH
29650: LD_INT 75
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29658: LD_VAR 0 6
29662: PPUSH
29663: CALL_OW 257
29667: PUSH
29668: LD_INT 15
29670: EQUAL
29671: IFFALSE 29692
// points := [ 10 , 5 , 3 ] ;
29673: LD_ADDR_VAR 0 9
29677: PUSH
29678: LD_INT 10
29680: PUSH
29681: LD_INT 5
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29692: LD_VAR 0 6
29696: PPUSH
29697: CALL_OW 257
29701: PUSH
29702: LD_INT 14
29704: EQUAL
29705: IFFALSE 29726
// points := [ 10 , 0 , 0 ] ;
29707: LD_ADDR_VAR 0 9
29711: PUSH
29712: LD_INT 10
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29726: LD_VAR 0 6
29730: PPUSH
29731: CALL_OW 257
29735: PUSH
29736: LD_INT 11
29738: EQUAL
29739: IFFALSE 29760
// points := [ 30 , 10 , 5 ] ;
29741: LD_ADDR_VAR 0 9
29745: PUSH
29746: LD_INT 30
29748: PUSH
29749: LD_INT 10
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29760: LD_VAR 0 1
29764: PPUSH
29765: LD_INT 5
29767: PPUSH
29768: CALL_OW 321
29772: PUSH
29773: LD_INT 2
29775: EQUAL
29776: IFFALSE 29793
// bpoints := bpoints * 1.8 ;
29778: LD_ADDR_VAR 0 10
29782: PUSH
29783: LD_VAR 0 10
29787: PUSH
29788: LD_REAL  1.80000000000000E+0000
29791: MUL
29792: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29793: LD_VAR 0 6
29797: PPUSH
29798: CALL_OW 257
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 2
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: LD_INT 4
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: IN
29821: IFFALSE 29841
29823: PUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_INT 51
29831: PPUSH
29832: CALL_OW 321
29836: PUSH
29837: LD_INT 2
29839: EQUAL
29840: AND
29841: IFFALSE 29858
// bpoints := bpoints * 1.2 ;
29843: LD_ADDR_VAR 0 10
29847: PUSH
29848: LD_VAR 0 10
29852: PUSH
29853: LD_REAL  1.20000000000000E+0000
29856: MUL
29857: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29858: LD_VAR 0 6
29862: PPUSH
29863: CALL_OW 257
29867: PUSH
29868: LD_INT 5
29870: PUSH
29871: LD_INT 7
29873: PUSH
29874: LD_INT 9
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: IN
29882: IFFALSE 29902
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: LD_INT 52
29892: PPUSH
29893: CALL_OW 321
29897: PUSH
29898: LD_INT 2
29900: EQUAL
29901: AND
29902: IFFALSE 29919
// bpoints := bpoints * 1.5 ;
29904: LD_ADDR_VAR 0 10
29908: PUSH
29909: LD_VAR 0 10
29913: PUSH
29914: LD_REAL  1.50000000000000E+0000
29917: MUL
29918: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29919: LD_VAR 0 1
29923: PPUSH
29924: LD_INT 66
29926: PPUSH
29927: CALL_OW 321
29931: PUSH
29932: LD_INT 2
29934: EQUAL
29935: IFFALSE 29952
// bpoints := bpoints * 1.1 ;
29937: LD_ADDR_VAR 0 10
29941: PUSH
29942: LD_VAR 0 10
29946: PUSH
29947: LD_REAL  1.10000000000000E+0000
29950: MUL
29951: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29952: LD_ADDR_VAR 0 10
29956: PUSH
29957: LD_VAR 0 10
29961: PUSH
29962: LD_VAR 0 6
29966: PPUSH
29967: LD_INT 1
29969: PPUSH
29970: CALL_OW 259
29974: PUSH
29975: LD_REAL  1.15000000000000E+0000
29978: MUL
29979: MUL
29980: ST_TO_ADDR
// end ; unit_vehicle :
29981: GO 30811
29983: LD_INT 2
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30799
29991: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29992: LD_VAR 0 6
29996: PPUSH
29997: CALL_OW 264
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 42
30007: PUSH
30008: LD_INT 24
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: IN
30016: IFFALSE 30037
// points := [ 25 , 5 , 3 ] ;
30018: LD_ADDR_VAR 0 9
30022: PUSH
30023: LD_INT 25
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30037: LD_VAR 0 6
30041: PPUSH
30042: CALL_OW 264
30046: PUSH
30047: LD_INT 4
30049: PUSH
30050: LD_INT 43
30052: PUSH
30053: LD_INT 25
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: IN
30061: IFFALSE 30082
// points := [ 40 , 15 , 5 ] ;
30063: LD_ADDR_VAR 0 9
30067: PUSH
30068: LD_INT 40
30070: PUSH
30071: LD_INT 15
30073: PUSH
30074: LD_INT 5
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30082: LD_VAR 0 6
30086: PPUSH
30087: CALL_OW 264
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 23
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: IN
30102: IFFALSE 30123
// points := [ 7 , 25 , 8 ] ;
30104: LD_ADDR_VAR 0 9
30108: PUSH
30109: LD_INT 7
30111: PUSH
30112: LD_INT 25
30114: PUSH
30115: LD_INT 8
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30123: LD_VAR 0 6
30127: PPUSH
30128: CALL_OW 264
30132: PUSH
30133: LD_INT 5
30135: PUSH
30136: LD_INT 27
30138: PUSH
30139: LD_INT 44
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: IN
30147: IFFALSE 30168
// points := [ 14 , 50 , 16 ] ;
30149: LD_ADDR_VAR 0 9
30153: PUSH
30154: LD_INT 14
30156: PUSH
30157: LD_INT 50
30159: PUSH
30160: LD_INT 16
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30168: LD_VAR 0 6
30172: PPUSH
30173: CALL_OW 264
30177: PUSH
30178: LD_INT 6
30180: PUSH
30181: LD_INT 46
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: IN
30188: IFFALSE 30209
// points := [ 32 , 120 , 70 ] ;
30190: LD_ADDR_VAR 0 9
30194: PUSH
30195: LD_INT 32
30197: PUSH
30198: LD_INT 120
30200: PUSH
30201: LD_INT 70
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30209: LD_VAR 0 6
30213: PPUSH
30214: CALL_OW 264
30218: PUSH
30219: LD_INT 7
30221: PUSH
30222: LD_INT 28
30224: PUSH
30225: LD_INT 45
30227: PUSH
30228: LD_INT 92
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: IN
30237: IFFALSE 30258
// points := [ 35 , 20 , 45 ] ;
30239: LD_ADDR_VAR 0 9
30243: PUSH
30244: LD_INT 35
30246: PUSH
30247: LD_INT 20
30249: PUSH
30250: LD_INT 45
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30258: LD_VAR 0 6
30262: PPUSH
30263: CALL_OW 264
30267: PUSH
30268: LD_INT 47
30270: PUSH
30271: EMPTY
30272: LIST
30273: IN
30274: IFFALSE 30295
// points := [ 67 , 45 , 75 ] ;
30276: LD_ADDR_VAR 0 9
30280: PUSH
30281: LD_INT 67
30283: PUSH
30284: LD_INT 45
30286: PUSH
30287: LD_INT 75
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30295: LD_VAR 0 6
30299: PPUSH
30300: CALL_OW 264
30304: PUSH
30305: LD_INT 26
30307: PUSH
30308: EMPTY
30309: LIST
30310: IN
30311: IFFALSE 30332
// points := [ 120 , 30 , 80 ] ;
30313: LD_ADDR_VAR 0 9
30317: PUSH
30318: LD_INT 120
30320: PUSH
30321: LD_INT 30
30323: PUSH
30324: LD_INT 80
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30332: LD_VAR 0 6
30336: PPUSH
30337: CALL_OW 264
30341: PUSH
30342: LD_INT 22
30344: PUSH
30345: EMPTY
30346: LIST
30347: IN
30348: IFFALSE 30369
// points := [ 40 , 1 , 1 ] ;
30350: LD_ADDR_VAR 0 9
30354: PUSH
30355: LD_INT 40
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30369: LD_VAR 0 6
30373: PPUSH
30374: CALL_OW 264
30378: PUSH
30379: LD_INT 29
30381: PUSH
30382: EMPTY
30383: LIST
30384: IN
30385: IFFALSE 30406
// points := [ 70 , 200 , 400 ] ;
30387: LD_ADDR_VAR 0 9
30391: PUSH
30392: LD_INT 70
30394: PUSH
30395: LD_INT 200
30397: PUSH
30398: LD_INT 400
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30406: LD_VAR 0 6
30410: PPUSH
30411: CALL_OW 264
30415: PUSH
30416: LD_INT 14
30418: PUSH
30419: LD_INT 53
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: IN
30426: IFFALSE 30447
// points := [ 40 , 10 , 20 ] ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: LD_INT 40
30435: PUSH
30436: LD_INT 10
30438: PUSH
30439: LD_INT 20
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30447: LD_VAR 0 6
30451: PPUSH
30452: CALL_OW 264
30456: PUSH
30457: LD_INT 9
30459: PUSH
30460: EMPTY
30461: LIST
30462: IN
30463: IFFALSE 30484
// points := [ 5 , 70 , 20 ] ;
30465: LD_ADDR_VAR 0 9
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: LD_INT 70
30475: PUSH
30476: LD_INT 20
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30484: LD_VAR 0 6
30488: PPUSH
30489: CALL_OW 264
30493: PUSH
30494: LD_INT 10
30496: PUSH
30497: EMPTY
30498: LIST
30499: IN
30500: IFFALSE 30521
// points := [ 35 , 110 , 70 ] ;
30502: LD_ADDR_VAR 0 9
30506: PUSH
30507: LD_INT 35
30509: PUSH
30510: LD_INT 110
30512: PUSH
30513: LD_INT 70
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30521: LD_VAR 0 6
30525: PPUSH
30526: CALL_OW 265
30530: PUSH
30531: LD_INT 25
30533: EQUAL
30534: IFFALSE 30555
// points := [ 80 , 65 , 100 ] ;
30536: LD_ADDR_VAR 0 9
30540: PUSH
30541: LD_INT 80
30543: PUSH
30544: LD_INT 65
30546: PUSH
30547: LD_INT 100
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30555: LD_VAR 0 6
30559: PPUSH
30560: CALL_OW 263
30564: PUSH
30565: LD_INT 1
30567: EQUAL
30568: IFFALSE 30603
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30570: LD_ADDR_VAR 0 10
30574: PUSH
30575: LD_VAR 0 10
30579: PUSH
30580: LD_VAR 0 6
30584: PPUSH
30585: CALL_OW 311
30589: PPUSH
30590: LD_INT 3
30592: PPUSH
30593: CALL_OW 259
30597: PUSH
30598: LD_INT 4
30600: MUL
30601: MUL
30602: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30603: LD_VAR 0 6
30607: PPUSH
30608: CALL_OW 263
30612: PUSH
30613: LD_INT 2
30615: EQUAL
30616: IFFALSE 30667
// begin j := IsControledBy ( i ) ;
30618: LD_ADDR_VAR 0 7
30622: PUSH
30623: LD_VAR 0 6
30627: PPUSH
30628: CALL_OW 312
30632: ST_TO_ADDR
// if j then
30633: LD_VAR 0 7
30637: IFFALSE 30667
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30639: LD_ADDR_VAR 0 10
30643: PUSH
30644: LD_VAR 0 10
30648: PUSH
30649: LD_VAR 0 7
30653: PPUSH
30654: LD_INT 3
30656: PPUSH
30657: CALL_OW 259
30661: PUSH
30662: LD_INT 3
30664: MUL
30665: MUL
30666: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30667: LD_VAR 0 6
30671: PPUSH
30672: CALL_OW 264
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: LD_INT 6
30682: PUSH
30683: LD_INT 46
30685: PUSH
30686: LD_INT 44
30688: PUSH
30689: LD_INT 47
30691: PUSH
30692: LD_INT 45
30694: PUSH
30695: LD_INT 28
30697: PUSH
30698: LD_INT 7
30700: PUSH
30701: LD_INT 27
30703: PUSH
30704: LD_INT 29
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: IN
30719: IFFALSE 30739
30721: PUSH
30722: LD_VAR 0 1
30726: PPUSH
30727: LD_INT 52
30729: PPUSH
30730: CALL_OW 321
30734: PUSH
30735: LD_INT 2
30737: EQUAL
30738: AND
30739: IFFALSE 30756
// bpoints := bpoints * 1.2 ;
30741: LD_ADDR_VAR 0 10
30745: PUSH
30746: LD_VAR 0 10
30750: PUSH
30751: LD_REAL  1.20000000000000E+0000
30754: MUL
30755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30756: LD_VAR 0 6
30760: PPUSH
30761: CALL_OW 264
30765: PUSH
30766: LD_INT 6
30768: PUSH
30769: LD_INT 46
30771: PUSH
30772: LD_INT 47
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: IN
30780: IFFALSE 30797
// bpoints := bpoints * 1.2 ;
30782: LD_ADDR_VAR 0 10
30786: PUSH
30787: LD_VAR 0 10
30791: PUSH
30792: LD_REAL  1.20000000000000E+0000
30795: MUL
30796: ST_TO_ADDR
// end ; unit_building :
30797: GO 30811
30799: LD_INT 3
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30810
30807: POP
// ; end ;
30808: GO 30811
30810: POP
// for j = 1 to 3 do
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: DOUBLE
30817: LD_INT 1
30819: DEC
30820: ST_TO_ADDR
30821: LD_INT 3
30823: PUSH
30824: FOR_TO
30825: IFFALSE 30878
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 5
30836: PPUSH
30837: LD_VAR 0 7
30841: PPUSH
30842: LD_VAR 0 5
30846: PUSH
30847: LD_VAR 0 7
30851: ARRAY
30852: PUSH
30853: LD_VAR 0 9
30857: PUSH
30858: LD_VAR 0 7
30862: ARRAY
30863: PUSH
30864: LD_VAR 0 10
30868: MUL
30869: PLUS
30870: PPUSH
30871: CALL_OW 1
30875: ST_TO_ADDR
30876: GO 30824
30878: POP
30879: POP
// end ;
30880: GO 29353
30882: POP
30883: POP
// result := Replace ( result , 4 , tmp ) ;
30884: LD_ADDR_VAR 0 5
30888: PUSH
30889: LD_VAR 0 5
30893: PPUSH
30894: LD_INT 4
30896: PPUSH
30897: LD_VAR 0 8
30901: PPUSH
30902: CALL_OW 1
30906: ST_TO_ADDR
// end ;
30907: LD_VAR 0 5
30911: RET
// export function DangerAtRange ( unit , range ) ; begin
30912: LD_INT 0
30914: PPUSH
// if not unit then
30915: LD_VAR 0 1
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 30969
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 255
30938: PPUSH
30939: LD_VAR 0 1
30943: PPUSH
30944: CALL_OW 250
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 251
30958: PPUSH
30959: LD_VAR 0 2
30963: PPUSH
30964: CALL 29203 0 4
30968: ST_TO_ADDR
// end ;
30969: LD_VAR 0 3
30973: RET
// export function DangerInArea ( side , area ) ; begin
30974: LD_INT 0
30976: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_VAR 0 2
30986: PPUSH
30987: LD_INT 81
30989: PUSH
30990: LD_VAR 0 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 70
31003: ST_TO_ADDR
// end ;
31004: LD_VAR 0 3
31008: RET
// export function IsExtension ( b ) ; begin
31009: LD_INT 0
31011: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31012: LD_ADDR_VAR 0 2
31016: PUSH
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 23
31024: PUSH
31025: LD_INT 20
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_INT 17
31033: PUSH
31034: LD_INT 24
31036: PUSH
31037: LD_INT 21
31039: PUSH
31040: LD_INT 19
31042: PUSH
31043: LD_INT 16
31045: PUSH
31046: LD_INT 25
31048: PUSH
31049: LD_INT 18
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: IN
31064: ST_TO_ADDR
// end ;
31065: LD_VAR 0 2
31069: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
31074: PPUSH
// result := [ ] ;
31075: LD_ADDR_VAR 0 4
31079: PUSH
31080: EMPTY
31081: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31082: LD_ADDR_VAR 0 5
31086: PUSH
31087: LD_VAR 0 2
31091: PPUSH
31092: LD_INT 21
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL_OW 70
31106: ST_TO_ADDR
// if not tmp then
31107: LD_VAR 0 5
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31180
// if checkLink then
31116: LD_VAR 0 3
31120: IFFALSE 31170
// begin for i in tmp do
31122: LD_ADDR_VAR 0 6
31126: PUSH
31127: LD_VAR 0 5
31131: PUSH
31132: FOR_IN
31133: IFFALSE 31168
// if GetBase ( i ) <> base then
31135: LD_VAR 0 6
31139: PPUSH
31140: CALL_OW 274
31144: PUSH
31145: LD_VAR 0 1
31149: NONEQUAL
31150: IFFALSE 31166
// ComLinkToBase ( base , i ) ;
31152: LD_VAR 0 1
31156: PPUSH
31157: LD_VAR 0 6
31161: PPUSH
31162: CALL_OW 169
31166: GO 31132
31168: POP
31169: POP
// end ; result := tmp ;
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: LD_VAR 0 5
31179: ST_TO_ADDR
// end ;
31180: LD_VAR 0 4
31184: RET
// export function ComComplete ( units , b ) ; var i ; begin
31185: LD_INT 0
31187: PPUSH
31188: PPUSH
// if not units then
31189: LD_VAR 0 1
31193: NOT
31194: IFFALSE 31198
// exit ;
31196: GO 31288
// for i in units do
31198: LD_ADDR_VAR 0 4
31202: PUSH
31203: LD_VAR 0 1
31207: PUSH
31208: FOR_IN
31209: IFFALSE 31286
// if BuildingStatus ( b ) = bs_build then
31211: LD_VAR 0 2
31215: PPUSH
31216: CALL_OW 461
31220: PUSH
31221: LD_INT 1
31223: EQUAL
31224: IFFALSE 31284
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31226: LD_VAR 0 4
31230: PPUSH
31231: LD_STRING h
31233: PUSH
31234: LD_VAR 0 2
31238: PPUSH
31239: CALL_OW 250
31243: PUSH
31244: LD_VAR 0 2
31248: PPUSH
31249: CALL_OW 251
31253: PUSH
31254: LD_VAR 0 2
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: PPUSH
31280: CALL_OW 446
31284: GO 31208
31286: POP
31287: POP
// end ;
31288: LD_VAR 0 3
31292: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31293: LD_INT 0
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31301: LD_VAR 0 1
31305: NOT
31306: IFTRUE 31323
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 263
31318: PUSH
31319: LD_INT 2
31321: NONEQUAL
31322: OR
31323: IFFALSE 31327
// exit ;
31325: GO 31643
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31327: LD_ADDR_VAR 0 6
31331: PUSH
31332: LD_INT 22
31334: PUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 255
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 30
31354: PUSH
31355: LD_INT 36
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 34
31364: PUSH
31365: LD_INT 31
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PPUSH
31381: CALL_OW 69
31385: ST_TO_ADDR
// if not tmp then
31386: LD_VAR 0 6
31390: NOT
31391: IFFALSE 31395
// exit ;
31393: GO 31643
// result := [ ] ;
31395: LD_ADDR_VAR 0 2
31399: PUSH
31400: EMPTY
31401: ST_TO_ADDR
// for i in tmp do
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_VAR 0 6
31411: PUSH
31412: FOR_IN
31413: IFFALSE 31484
// begin t := UnitsInside ( i ) ;
31415: LD_ADDR_VAR 0 4
31419: PUSH
31420: LD_VAR 0 3
31424: PPUSH
31425: CALL_OW 313
31429: ST_TO_ADDR
// if t then
31430: LD_VAR 0 4
31434: IFFALSE 31482
// for j in t do
31436: LD_ADDR_VAR 0 7
31440: PUSH
31441: LD_VAR 0 4
31445: PUSH
31446: FOR_IN
31447: IFFALSE 31480
// result := Replace ( result , result + 1 , j ) ;
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_VAR 0 2
31458: PPUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_INT 1
31466: PLUS
31467: PPUSH
31468: LD_VAR 0 7
31472: PPUSH
31473: CALL_OW 1
31477: ST_TO_ADDR
31478: GO 31446
31480: POP
31481: POP
// end ;
31482: GO 31412
31484: POP
31485: POP
// if not result then
31486: LD_VAR 0 2
31490: NOT
31491: IFFALSE 31495
// exit ;
31493: GO 31643
// mech := result [ 1 ] ;
31495: LD_ADDR_VAR 0 5
31499: PUSH
31500: LD_VAR 0 2
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: ST_TO_ADDR
// if result > 1 then
31509: LD_VAR 0 2
31513: PUSH
31514: LD_INT 1
31516: GREATER
31517: IFFALSE 31629
// begin for i = 2 to result do
31519: LD_ADDR_VAR 0 3
31523: PUSH
31524: DOUBLE
31525: LD_INT 2
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 2
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31627
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31537: LD_ADDR_VAR 0 4
31541: PUSH
31542: LD_VAR 0 2
31546: PUSH
31547: LD_VAR 0 3
31551: ARRAY
31552: PPUSH
31553: LD_INT 3
31555: PPUSH
31556: CALL_OW 259
31560: PUSH
31561: LD_VAR 0 2
31565: PUSH
31566: LD_VAR 0 3
31570: ARRAY
31571: PPUSH
31572: CALL_OW 432
31576: MINUS
31577: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31578: LD_VAR 0 4
31582: PUSH
31583: LD_VAR 0 5
31587: PPUSH
31588: LD_INT 3
31590: PPUSH
31591: CALL_OW 259
31595: PUSH
31596: LD_VAR 0 5
31600: PPUSH
31601: CALL_OW 432
31605: MINUS
31606: GREATEREQUAL
31607: IFFALSE 31625
// mech := result [ i ] ;
31609: LD_ADDR_VAR 0 5
31613: PUSH
31614: LD_VAR 0 2
31618: PUSH
31619: LD_VAR 0 3
31623: ARRAY
31624: ST_TO_ADDR
// end ;
31625: GO 31534
31627: POP
31628: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31629: LD_VAR 0 1
31633: PPUSH
31634: LD_VAR 0 5
31638: PPUSH
31639: CALL_OW 135
// end ;
31643: LD_VAR 0 2
31647: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31648: LD_INT 0
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
// result := [ ] ;
31663: LD_ADDR_VAR 0 7
31667: PUSH
31668: EMPTY
31669: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31670: LD_VAR 0 1
31674: PPUSH
31675: CALL_OW 266
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: IN
31690: NOT
31691: IFFALSE 31695
// exit ;
31693: GO 33335
// if name then
31695: LD_VAR 0 3
31699: IFFALSE 31715
// SetBName ( base_dep , name ) ;
31701: LD_VAR 0 1
31705: PPUSH
31706: LD_VAR 0 3
31710: PPUSH
31711: CALL_OW 500
// base := GetBase ( base_dep ) ;
31715: LD_ADDR_VAR 0 15
31719: PUSH
31720: LD_VAR 0 1
31724: PPUSH
31725: CALL_OW 274
31729: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31730: LD_ADDR_VAR 0 16
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 255
31744: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31745: LD_ADDR_VAR 0 17
31749: PUSH
31750: LD_VAR 0 1
31754: PPUSH
31755: CALL_OW 248
31759: ST_TO_ADDR
// if sources then
31760: LD_VAR 0 5
31764: IFFALSE 31811
// for i = 1 to 3 do
31766: LD_ADDR_VAR 0 8
31770: PUSH
31771: DOUBLE
31772: LD_INT 1
31774: DEC
31775: ST_TO_ADDR
31776: LD_INT 3
31778: PUSH
31779: FOR_TO
31780: IFFALSE 31809
// AddResourceType ( base , i , sources [ i ] ) ;
31782: LD_VAR 0 15
31786: PPUSH
31787: LD_VAR 0 8
31791: PPUSH
31792: LD_VAR 0 5
31796: PUSH
31797: LD_VAR 0 8
31801: ARRAY
31802: PPUSH
31803: CALL_OW 276
31807: GO 31779
31809: POP
31810: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31811: LD_ADDR_VAR 0 18
31815: PUSH
31816: LD_VAR 0 15
31820: PPUSH
31821: LD_VAR 0 2
31825: PPUSH
31826: LD_INT 1
31828: PPUSH
31829: CALL 31070 0 3
31833: ST_TO_ADDR
// InitHc ;
31834: CALL_OW 19
// InitUc ;
31838: CALL_OW 18
// uc_side := side ;
31842: LD_ADDR_OWVAR 20
31846: PUSH
31847: LD_VAR 0 16
31851: ST_TO_ADDR
// uc_nation := nation ;
31852: LD_ADDR_OWVAR 21
31856: PUSH
31857: LD_VAR 0 17
31861: ST_TO_ADDR
// if buildings then
31862: LD_VAR 0 18
31866: IFFALSE 33194
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31868: LD_ADDR_VAR 0 19
31872: PUSH
31873: LD_VAR 0 18
31877: PPUSH
31878: LD_INT 2
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_INT 29
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: LD_INT 30
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: PPUSH
31906: CALL_OW 72
31910: ST_TO_ADDR
// if tmp then
31911: LD_VAR 0 19
31915: IFFALSE 31963
// for i in tmp do
31917: LD_ADDR_VAR 0 8
31921: PUSH
31922: LD_VAR 0 19
31926: PUSH
31927: FOR_IN
31928: IFFALSE 31961
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31930: LD_VAR 0 8
31934: PPUSH
31935: CALL_OW 250
31939: PPUSH
31940: LD_VAR 0 8
31944: PPUSH
31945: CALL_OW 251
31949: PPUSH
31950: LD_VAR 0 16
31954: PPUSH
31955: CALL_OW 441
31959: GO 31927
31961: POP
31962: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31963: LD_VAR 0 18
31967: PPUSH
31968: LD_INT 2
31970: PUSH
31971: LD_INT 30
31973: PUSH
31974: LD_INT 32
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 30
31983: PUSH
31984: LD_INT 33
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: PPUSH
31996: CALL_OW 72
32000: IFFALSE 32088
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32002: LD_ADDR_VAR 0 8
32006: PUSH
32007: LD_VAR 0 18
32011: PPUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 30
32017: PUSH
32018: LD_INT 32
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 30
32027: PUSH
32028: LD_INT 33
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: PPUSH
32040: CALL_OW 72
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32086
// begin if not GetBWeapon ( i ) then
32048: LD_VAR 0 8
32052: PPUSH
32053: CALL_OW 269
32057: NOT
32058: IFFALSE 32084
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32060: LD_VAR 0 8
32064: PPUSH
32065: LD_VAR 0 8
32069: PPUSH
32070: LD_VAR 0 2
32074: PPUSH
32075: CALL 33340 0 2
32079: PPUSH
32080: CALL_OW 431
// end ;
32084: GO 32045
32086: POP
32087: POP
// end ; for i = 1 to personel do
32088: LD_ADDR_VAR 0 8
32092: PUSH
32093: DOUBLE
32094: LD_INT 1
32096: DEC
32097: ST_TO_ADDR
32098: LD_VAR 0 6
32102: PUSH
32103: FOR_TO
32104: IFFALSE 33174
// begin if i > 4 then
32106: LD_VAR 0 8
32110: PUSH
32111: LD_INT 4
32113: GREATER
32114: IFFALSE 32118
// break ;
32116: GO 33174
// case i of 1 :
32118: LD_VAR 0 8
32122: PUSH
32123: LD_INT 1
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32211
32131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32132: LD_ADDR_VAR 0 12
32136: PUSH
32137: LD_VAR 0 18
32141: PPUSH
32142: LD_INT 22
32144: PUSH
32145: LD_VAR 0 16
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 58
32156: PUSH
32157: EMPTY
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: LD_INT 30
32165: PUSH
32166: LD_INT 32
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 30
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 30
32185: PUSH
32186: LD_INT 5
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PPUSH
32204: CALL_OW 72
32208: ST_TO_ADDR
32209: GO 32433
32211: LD_INT 2
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32281
32219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32220: LD_ADDR_VAR 0 12
32224: PUSH
32225: LD_VAR 0 18
32229: PPUSH
32230: LD_INT 22
32232: PUSH
32233: LD_VAR 0 16
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: LD_INT 30
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 30
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PPUSH
32274: CALL_OW 72
32278: ST_TO_ADDR
32279: GO 32433
32281: LD_INT 3
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32351
32289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32290: LD_ADDR_VAR 0 12
32294: PUSH
32295: LD_VAR 0 18
32299: PPUSH
32300: LD_INT 22
32302: PUSH
32303: LD_VAR 0 16
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: LD_INT 30
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 30
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 72
32348: ST_TO_ADDR
32349: GO 32433
32351: LD_INT 4
32353: DOUBLE
32354: EQUAL
32355: IFTRUE 32359
32357: GO 32432
32359: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32360: LD_ADDR_VAR 0 12
32364: PUSH
32365: LD_VAR 0 18
32369: PPUSH
32370: LD_INT 22
32372: PUSH
32373: LD_VAR 0 16
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: LD_INT 30
32387: PUSH
32388: LD_INT 6
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 30
32397: PUSH
32398: LD_INT 7
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 30
32407: PUSH
32408: LD_INT 8
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PPUSH
32425: CALL_OW 72
32429: ST_TO_ADDR
32430: GO 32433
32432: POP
// if i = 1 then
32433: LD_VAR 0 8
32437: PUSH
32438: LD_INT 1
32440: EQUAL
32441: IFFALSE 32552
// begin tmp := [ ] ;
32443: LD_ADDR_VAR 0 19
32447: PUSH
32448: EMPTY
32449: ST_TO_ADDR
// for j in f do
32450: LD_ADDR_VAR 0 9
32454: PUSH
32455: LD_VAR 0 12
32459: PUSH
32460: FOR_IN
32461: IFFALSE 32534
// if GetBType ( j ) = b_bunker then
32463: LD_VAR 0 9
32467: PPUSH
32468: CALL_OW 266
32472: PUSH
32473: LD_INT 32
32475: EQUAL
32476: IFFALSE 32503
// tmp := Insert ( tmp , 1 , j ) else
32478: LD_ADDR_VAR 0 19
32482: PUSH
32483: LD_VAR 0 19
32487: PPUSH
32488: LD_INT 1
32490: PPUSH
32491: LD_VAR 0 9
32495: PPUSH
32496: CALL_OW 2
32500: ST_TO_ADDR
32501: GO 32532
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32503: LD_ADDR_VAR 0 19
32507: PUSH
32508: LD_VAR 0 19
32512: PPUSH
32513: LD_VAR 0 19
32517: PUSH
32518: LD_INT 1
32520: PLUS
32521: PPUSH
32522: LD_VAR 0 9
32526: PPUSH
32527: CALL_OW 2
32531: ST_TO_ADDR
32532: GO 32460
32534: POP
32535: POP
// if tmp then
32536: LD_VAR 0 19
32540: IFFALSE 32552
// f := tmp ;
32542: LD_ADDR_VAR 0 12
32546: PUSH
32547: LD_VAR 0 19
32551: ST_TO_ADDR
// end ; x := personel [ i ] ;
32552: LD_ADDR_VAR 0 13
32556: PUSH
32557: LD_VAR 0 6
32561: PUSH
32562: LD_VAR 0 8
32566: ARRAY
32567: ST_TO_ADDR
// if x = - 1 then
32568: LD_VAR 0 13
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: EQUAL
32577: IFFALSE 32788
// begin for j in f do
32579: LD_ADDR_VAR 0 9
32583: PUSH
32584: LD_VAR 0 12
32588: PUSH
32589: FOR_IN
32590: IFFALSE 32784
// repeat InitHc ;
32592: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32596: LD_VAR 0 9
32600: PPUSH
32601: CALL_OW 266
32605: PUSH
32606: LD_INT 5
32608: EQUAL
32609: IFFALSE 32679
// begin if UnitsInside ( j ) < 3 then
32611: LD_VAR 0 9
32615: PPUSH
32616: CALL_OW 313
32620: PUSH
32621: LD_INT 3
32623: LESS
32624: IFFALSE 32660
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32626: LD_INT 0
32628: PPUSH
32629: LD_INT 5
32631: PUSH
32632: LD_INT 8
32634: PUSH
32635: LD_INT 9
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: PUSH
32643: LD_VAR 0 17
32647: ARRAY
32648: PPUSH
32649: LD_VAR 0 4
32653: PPUSH
32654: CALL_OW 380
32658: GO 32677
// PrepareHuman ( false , i , skill ) ;
32660: LD_INT 0
32662: PPUSH
32663: LD_VAR 0 8
32667: PPUSH
32668: LD_VAR 0 4
32672: PPUSH
32673: CALL_OW 380
// end else
32677: GO 32696
// PrepareHuman ( false , i , skill ) ;
32679: LD_INT 0
32681: PPUSH
32682: LD_VAR 0 8
32686: PPUSH
32687: LD_VAR 0 4
32691: PPUSH
32692: CALL_OW 380
// un := CreateHuman ;
32696: LD_ADDR_VAR 0 14
32700: PUSH
32701: CALL_OW 44
32705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32706: LD_ADDR_VAR 0 7
32710: PUSH
32711: LD_VAR 0 7
32715: PPUSH
32716: LD_INT 1
32718: PPUSH
32719: LD_VAR 0 14
32723: PPUSH
32724: CALL_OW 2
32728: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32729: LD_VAR 0 14
32733: PPUSH
32734: LD_VAR 0 9
32738: PPUSH
32739: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32743: LD_VAR 0 9
32747: PPUSH
32748: CALL_OW 313
32752: PUSH
32753: LD_INT 6
32755: EQUAL
32756: IFTRUE 32780
32758: PUSH
32759: LD_VAR 0 9
32763: PPUSH
32764: CALL_OW 266
32768: PUSH
32769: LD_INT 32
32771: PUSH
32772: LD_INT 31
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: IN
32779: OR
32780: IFFALSE 32592
32782: GO 32589
32784: POP
32785: POP
// end else
32786: GO 33172
// for j = 1 to x do
32788: LD_ADDR_VAR 0 9
32792: PUSH
32793: DOUBLE
32794: LD_INT 1
32796: DEC
32797: ST_TO_ADDR
32798: LD_VAR 0 13
32802: PUSH
32803: FOR_TO
32804: IFFALSE 33170
// begin InitHc ;
32806: CALL_OW 19
// if not f then
32810: LD_VAR 0 12
32814: NOT
32815: IFFALSE 32904
// begin PrepareHuman ( false , i , skill ) ;
32817: LD_INT 0
32819: PPUSH
32820: LD_VAR 0 8
32824: PPUSH
32825: LD_VAR 0 4
32829: PPUSH
32830: CALL_OW 380
// un := CreateHuman ;
32834: LD_ADDR_VAR 0 14
32838: PUSH
32839: CALL_OW 44
32843: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32844: LD_ADDR_VAR 0 7
32848: PUSH
32849: LD_VAR 0 7
32853: PPUSH
32854: LD_INT 1
32856: PPUSH
32857: LD_VAR 0 14
32861: PPUSH
32862: CALL_OW 2
32866: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32867: LD_VAR 0 14
32871: PPUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 250
32881: PPUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 251
32891: PPUSH
32892: LD_INT 10
32894: PPUSH
32895: LD_INT 0
32897: PPUSH
32898: CALL_OW 50
// continue ;
32902: GO 32803
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32904: LD_VAR 0 12
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: CALL_OW 313
32917: IFFALSE 32945
32919: PUSH
32920: LD_VAR 0 12
32924: PUSH
32925: LD_INT 1
32927: ARRAY
32928: PPUSH
32929: CALL_OW 266
32933: PUSH
32934: LD_INT 32
32936: PUSH
32937: LD_INT 31
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: IN
32944: AND
32945: IFTRUE 32966
32947: PUSH
32948: LD_VAR 0 12
32952: PUSH
32953: LD_INT 1
32955: ARRAY
32956: PPUSH
32957: CALL_OW 313
32961: PUSH
32962: LD_INT 6
32964: EQUAL
32965: OR
32966: IFFALSE 32986
// f := Delete ( f , 1 ) ;
32968: LD_ADDR_VAR 0 12
32972: PUSH
32973: LD_VAR 0 12
32977: PPUSH
32978: LD_INT 1
32980: PPUSH
32981: CALL_OW 3
32985: ST_TO_ADDR
// if not f then
32986: LD_VAR 0 12
32990: NOT
32991: IFFALSE 33009
// begin x := x + 2 ;
32993: LD_ADDR_VAR 0 13
32997: PUSH
32998: LD_VAR 0 13
33002: PUSH
33003: LD_INT 2
33005: PLUS
33006: ST_TO_ADDR
// continue ;
33007: GO 32803
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33009: LD_VAR 0 12
33013: PUSH
33014: LD_INT 1
33016: ARRAY
33017: PPUSH
33018: CALL_OW 266
33022: PUSH
33023: LD_INT 5
33025: EQUAL
33026: IFFALSE 33100
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33028: LD_VAR 0 12
33032: PUSH
33033: LD_INT 1
33035: ARRAY
33036: PPUSH
33037: CALL_OW 313
33041: PUSH
33042: LD_INT 3
33044: LESS
33045: IFFALSE 33081
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33047: LD_INT 0
33049: PPUSH
33050: LD_INT 5
33052: PUSH
33053: LD_INT 8
33055: PUSH
33056: LD_INT 9
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PUSH
33064: LD_VAR 0 17
33068: ARRAY
33069: PPUSH
33070: LD_VAR 0 4
33074: PPUSH
33075: CALL_OW 380
33079: GO 33098
// PrepareHuman ( false , i , skill ) ;
33081: LD_INT 0
33083: PPUSH
33084: LD_VAR 0 8
33088: PPUSH
33089: LD_VAR 0 4
33093: PPUSH
33094: CALL_OW 380
// end else
33098: GO 33117
// PrepareHuman ( false , i , skill ) ;
33100: LD_INT 0
33102: PPUSH
33103: LD_VAR 0 8
33107: PPUSH
33108: LD_VAR 0 4
33112: PPUSH
33113: CALL_OW 380
// un := CreateHuman ;
33117: LD_ADDR_VAR 0 14
33121: PUSH
33122: CALL_OW 44
33126: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33127: LD_ADDR_VAR 0 7
33131: PUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: LD_INT 1
33139: PPUSH
33140: LD_VAR 0 14
33144: PPUSH
33145: CALL_OW 2
33149: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33150: LD_VAR 0 14
33154: PPUSH
33155: LD_VAR 0 12
33159: PUSH
33160: LD_INT 1
33162: ARRAY
33163: PPUSH
33164: CALL_OW 52
// end ;
33168: GO 32803
33170: POP
33171: POP
// end ;
33172: GO 32103
33174: POP
33175: POP
// result := result ^ buildings ;
33176: LD_ADDR_VAR 0 7
33180: PUSH
33181: LD_VAR 0 7
33185: PUSH
33186: LD_VAR 0 18
33190: ADD
33191: ST_TO_ADDR
// end else
33192: GO 33335
// begin for i = 1 to personel do
33194: LD_ADDR_VAR 0 8
33198: PUSH
33199: DOUBLE
33200: LD_INT 1
33202: DEC
33203: ST_TO_ADDR
33204: LD_VAR 0 6
33208: PUSH
33209: FOR_TO
33210: IFFALSE 33333
// begin if i > 4 then
33212: LD_VAR 0 8
33216: PUSH
33217: LD_INT 4
33219: GREATER
33220: IFFALSE 33224
// break ;
33222: GO 33333
// x := personel [ i ] ;
33224: LD_ADDR_VAR 0 13
33228: PUSH
33229: LD_VAR 0 6
33233: PUSH
33234: LD_VAR 0 8
33238: ARRAY
33239: ST_TO_ADDR
// if x = - 1 then
33240: LD_VAR 0 13
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: EQUAL
33249: IFFALSE 33253
// continue ;
33251: GO 33209
// PrepareHuman ( false , i , skill ) ;
33253: LD_INT 0
33255: PPUSH
33256: LD_VAR 0 8
33260: PPUSH
33261: LD_VAR 0 4
33265: PPUSH
33266: CALL_OW 380
// un := CreateHuman ;
33270: LD_ADDR_VAR 0 14
33274: PUSH
33275: CALL_OW 44
33279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33280: LD_VAR 0 14
33284: PPUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL_OW 250
33294: PPUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 251
33304: PPUSH
33305: LD_INT 10
33307: PPUSH
33308: LD_INT 0
33310: PPUSH
33311: CALL_OW 50
// result := result ^ un ;
33315: LD_ADDR_VAR 0 7
33319: PUSH
33320: LD_VAR 0 7
33324: PUSH
33325: LD_VAR 0 14
33329: ADD
33330: ST_TO_ADDR
// end ;
33331: GO 33209
33333: POP
33334: POP
// end ; end ;
33335: LD_VAR 0 7
33339: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33340: LD_INT 0
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
// result := false ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 0
33365: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33366: LD_VAR 0 1
33370: NOT
33371: IFTRUE 33396
33373: PUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 266
33383: PUSH
33384: LD_INT 32
33386: PUSH
33387: LD_INT 33
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: IN
33394: NOT
33395: OR
33396: IFFALSE 33400
// exit ;
33398: GO 34535
// nat := GetNation ( tower ) ;
33400: LD_ADDR_VAR 0 12
33404: PUSH
33405: LD_VAR 0 1
33409: PPUSH
33410: CALL_OW 248
33414: ST_TO_ADDR
// side := GetSide ( tower ) ;
33415: LD_ADDR_VAR 0 16
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 255
33429: ST_TO_ADDR
// x := GetX ( tower ) ;
33430: LD_ADDR_VAR 0 10
33434: PUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 250
33444: ST_TO_ADDR
// y := GetY ( tower ) ;
33445: LD_ADDR_VAR 0 11
33449: PUSH
33450: LD_VAR 0 1
33454: PPUSH
33455: CALL_OW 251
33459: ST_TO_ADDR
// if not x or not y then
33460: LD_VAR 0 10
33464: NOT
33465: IFTRUE 33474
33467: PUSH
33468: LD_VAR 0 11
33472: NOT
33473: OR
33474: IFFALSE 33478
// exit ;
33476: GO 34535
// weapon := 0 ;
33478: LD_ADDR_VAR 0 18
33482: PUSH
33483: LD_INT 0
33485: ST_TO_ADDR
// fac_list := [ ] ;
33486: LD_ADDR_VAR 0 17
33490: PUSH
33491: EMPTY
33492: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33493: LD_ADDR_VAR 0 6
33497: PUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 274
33507: PPUSH
33508: LD_VAR 0 2
33512: PPUSH
33513: LD_INT 0
33515: PPUSH
33516: CALL 31070 0 3
33520: PPUSH
33521: LD_INT 30
33523: PUSH
33524: LD_INT 3
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PPUSH
33531: CALL_OW 72
33535: ST_TO_ADDR
// if not factories then
33536: LD_VAR 0 6
33540: NOT
33541: IFFALSE 33545
// exit ;
33543: GO 34535
// for i in factories do
33545: LD_ADDR_VAR 0 8
33549: PUSH
33550: LD_VAR 0 6
33554: PUSH
33555: FOR_IN
33556: IFFALSE 33581
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33558: LD_ADDR_VAR 0 17
33562: PUSH
33563: LD_VAR 0 17
33567: PUSH
33568: LD_VAR 0 8
33572: PPUSH
33573: CALL_OW 478
33577: UNION
33578: ST_TO_ADDR
33579: GO 33555
33581: POP
33582: POP
// if not fac_list then
33583: LD_VAR 0 17
33587: NOT
33588: IFFALSE 33592
// exit ;
33590: GO 34535
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33592: LD_ADDR_VAR 0 5
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 5
33602: PUSH
33603: LD_INT 9
33605: PUSH
33606: LD_INT 10
33608: PUSH
33609: LD_INT 6
33611: PUSH
33612: LD_INT 7
33614: PUSH
33615: LD_INT 11
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 27
33629: PUSH
33630: LD_INT 28
33632: PUSH
33633: LD_INT 26
33635: PUSH
33636: LD_INT 30
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 43
33647: PUSH
33648: LD_INT 44
33650: PUSH
33651: LD_INT 46
33653: PUSH
33654: LD_INT 45
33656: PUSH
33657: LD_INT 47
33659: PUSH
33660: LD_INT 49
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: PUSH
33676: LD_VAR 0 12
33680: ARRAY
33681: ST_TO_ADDR
// list := list isect fac_list ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_VAR 0 5
33691: PUSH
33692: LD_VAR 0 17
33696: ISECT
33697: ST_TO_ADDR
// if not list then
33698: LD_VAR 0 5
33702: NOT
33703: IFFALSE 33707
// exit ;
33705: GO 34535
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33707: LD_VAR 0 12
33711: PUSH
33712: LD_INT 3
33714: EQUAL
33715: IFFALSE 33727
33717: PUSH
33718: LD_INT 49
33720: PUSH
33721: LD_VAR 0 5
33725: IN
33726: AND
33727: IFFALSE 33747
33729: PUSH
33730: LD_INT 31
33732: PPUSH
33733: LD_VAR 0 16
33737: PPUSH
33738: CALL_OW 321
33742: PUSH
33743: LD_INT 2
33745: EQUAL
33746: AND
33747: IFFALSE 33807
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33749: LD_INT 22
33751: PUSH
33752: LD_VAR 0 16
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 35
33763: PUSH
33764: LD_INT 49
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 91
33773: PUSH
33774: LD_VAR 0 1
33778: PUSH
33779: LD_INT 10
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: PPUSH
33792: CALL_OW 69
33796: NOT
33797: IFFALSE 33807
// weapon := ru_time_lapser ;
33799: LD_ADDR_VAR 0 18
33803: PUSH
33804: LD_INT 49
33806: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33807: LD_VAR 0 12
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: IN
33822: IFFALSE 33846
33824: PUSH
33825: LD_INT 11
33827: PUSH
33828: LD_VAR 0 5
33832: IN
33833: IFTRUE 33845
33835: PUSH
33836: LD_INT 30
33838: PUSH
33839: LD_VAR 0 5
33843: IN
33844: OR
33845: AND
33846: IFFALSE 33866
33848: PUSH
33849: LD_INT 6
33851: PPUSH
33852: LD_VAR 0 16
33856: PPUSH
33857: CALL_OW 321
33861: PUSH
33862: LD_INT 2
33864: EQUAL
33865: AND
33866: IFFALSE 34033
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33868: LD_INT 22
33870: PUSH
33871: LD_VAR 0 16
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 35
33885: PUSH
33886: LD_INT 11
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 35
33895: PUSH
33896: LD_INT 30
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 91
33910: PUSH
33911: LD_VAR 0 1
33915: PUSH
33916: LD_INT 18
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: PPUSH
33929: CALL_OW 69
33933: NOT
33934: IFFALSE 34010
33936: PUSH
33937: LD_INT 22
33939: PUSH
33940: LD_VAR 0 16
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 30
33954: PUSH
33955: LD_INT 32
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 30
33964: PUSH
33965: LD_INT 33
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 91
33979: PUSH
33980: LD_VAR 0 1
33984: PUSH
33985: LD_INT 12
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: PUSH
33998: EMPTY
33999: LIST
34000: PPUSH
34001: CALL_OW 69
34005: PUSH
34006: LD_INT 2
34008: GREATER
34009: AND
34010: IFFALSE 34033
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34012: LD_ADDR_VAR 0 18
34016: PUSH
34017: LD_INT 11
34019: PUSH
34020: LD_INT 30
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_VAR 0 12
34031: ARRAY
34032: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34033: LD_VAR 0 18
34037: NOT
34038: IFFALSE 34058
34040: PUSH
34041: LD_INT 40
34043: PPUSH
34044: LD_VAR 0 16
34048: PPUSH
34049: CALL_OW 321
34053: PUSH
34054: LD_INT 2
34056: EQUAL
34057: AND
34058: IFFALSE 34094
34060: PUSH
34061: LD_INT 7
34063: PUSH
34064: LD_VAR 0 5
34068: IN
34069: IFTRUE 34081
34071: PUSH
34072: LD_INT 28
34074: PUSH
34075: LD_VAR 0 5
34079: IN
34080: OR
34081: IFTRUE 34093
34083: PUSH
34084: LD_INT 45
34086: PUSH
34087: LD_VAR 0 5
34091: IN
34092: OR
34093: AND
34094: IFFALSE 34348
// begin hex := GetHexInfo ( x , y ) ;
34096: LD_ADDR_VAR 0 4
34100: PUSH
34101: LD_VAR 0 10
34105: PPUSH
34106: LD_VAR 0 11
34110: PPUSH
34111: CALL_OW 546
34115: ST_TO_ADDR
// if hex [ 1 ] then
34116: LD_VAR 0 4
34120: PUSH
34121: LD_INT 1
34123: ARRAY
34124: IFFALSE 34128
// exit ;
34126: GO 34535
// height := hex [ 2 ] ;
34128: LD_ADDR_VAR 0 15
34132: PUSH
34133: LD_VAR 0 4
34137: PUSH
34138: LD_INT 2
34140: ARRAY
34141: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34142: LD_ADDR_VAR 0 14
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 5
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: ST_TO_ADDR
// for i in tmp do
34165: LD_ADDR_VAR 0 8
34169: PUSH
34170: LD_VAR 0 14
34174: PUSH
34175: FOR_IN
34176: IFFALSE 34346
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34178: LD_ADDR_VAR 0 9
34182: PUSH
34183: LD_VAR 0 10
34187: PPUSH
34188: LD_VAR 0 8
34192: PPUSH
34193: LD_INT 5
34195: PPUSH
34196: CALL_OW 272
34200: PUSH
34201: LD_VAR 0 11
34205: PPUSH
34206: LD_VAR 0 8
34210: PPUSH
34211: LD_INT 5
34213: PPUSH
34214: CALL_OW 273
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34223: LD_VAR 0 9
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: LD_VAR 0 9
34236: PUSH
34237: LD_INT 2
34239: ARRAY
34240: PPUSH
34241: CALL_OW 488
34245: IFFALSE 34344
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34247: LD_ADDR_VAR 0 4
34251: PUSH
34252: LD_VAR 0 9
34256: PUSH
34257: LD_INT 1
34259: ARRAY
34260: PPUSH
34261: LD_VAR 0 9
34265: PUSH
34266: LD_INT 2
34268: ARRAY
34269: PPUSH
34270: CALL_OW 546
34274: ST_TO_ADDR
// if hex [ 1 ] then
34275: LD_VAR 0 4
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: IFFALSE 34287
// continue ;
34285: GO 34175
// h := hex [ 2 ] ;
34287: LD_ADDR_VAR 0 13
34291: PUSH
34292: LD_VAR 0 4
34296: PUSH
34297: LD_INT 2
34299: ARRAY
34300: ST_TO_ADDR
// if h + 7 < height then
34301: LD_VAR 0 13
34305: PUSH
34306: LD_INT 7
34308: PLUS
34309: PUSH
34310: LD_VAR 0 15
34314: LESS
34315: IFFALSE 34344
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34317: LD_ADDR_VAR 0 18
34321: PUSH
34322: LD_INT 7
34324: PUSH
34325: LD_INT 28
34327: PUSH
34328: LD_INT 45
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: PUSH
34336: LD_VAR 0 12
34340: ARRAY
34341: ST_TO_ADDR
// break ;
34342: GO 34346
// end ; end ; end ;
34344: GO 34175
34346: POP
34347: POP
// end ; if not weapon then
34348: LD_VAR 0 18
34352: NOT
34353: IFFALSE 34413
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34355: LD_ADDR_VAR 0 5
34359: PUSH
34360: LD_VAR 0 5
34364: PUSH
34365: LD_INT 11
34367: PUSH
34368: LD_INT 30
34370: PUSH
34371: LD_INT 49
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: DIFF
34379: ST_TO_ADDR
// if not list then
34380: LD_VAR 0 5
34384: NOT
34385: IFFALSE 34389
// exit ;
34387: GO 34535
// weapon := list [ rand ( 1 , list ) ] ;
34389: LD_ADDR_VAR 0 18
34393: PUSH
34394: LD_VAR 0 5
34398: PUSH
34399: LD_INT 1
34401: PPUSH
34402: LD_VAR 0 5
34406: PPUSH
34407: CALL_OW 12
34411: ARRAY
34412: ST_TO_ADDR
// end ; if weapon then
34413: LD_VAR 0 18
34417: IFFALSE 34535
// begin tmp := CostOfWeapon ( weapon ) ;
34419: LD_ADDR_VAR 0 14
34423: PUSH
34424: LD_VAR 0 18
34428: PPUSH
34429: CALL_OW 451
34433: ST_TO_ADDR
// j := GetBase ( tower ) ;
34434: LD_ADDR_VAR 0 9
34438: PUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 274
34448: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34449: LD_VAR 0 9
34453: PPUSH
34454: LD_INT 1
34456: PPUSH
34457: CALL_OW 275
34461: PUSH
34462: LD_VAR 0 14
34466: PUSH
34467: LD_INT 1
34469: ARRAY
34470: GREATEREQUAL
34471: IFFALSE 34497
34473: PUSH
34474: LD_VAR 0 9
34478: PPUSH
34479: LD_INT 2
34481: PPUSH
34482: CALL_OW 275
34486: PUSH
34487: LD_VAR 0 14
34491: PUSH
34492: LD_INT 2
34494: ARRAY
34495: GREATEREQUAL
34496: AND
34497: IFFALSE 34523
34499: PUSH
34500: LD_VAR 0 9
34504: PPUSH
34505: LD_INT 3
34507: PPUSH
34508: CALL_OW 275
34512: PUSH
34513: LD_VAR 0 14
34517: PUSH
34518: LD_INT 3
34520: ARRAY
34521: GREATEREQUAL
34522: AND
34523: IFFALSE 34535
// result := weapon ;
34525: LD_ADDR_VAR 0 3
34529: PUSH
34530: LD_VAR 0 18
34534: ST_TO_ADDR
// end ; end ;
34535: LD_VAR 0 3
34539: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34540: LD_INT 0
34542: PPUSH
34543: PPUSH
// result := true ;
34544: LD_ADDR_VAR 0 3
34548: PUSH
34549: LD_INT 1
34551: ST_TO_ADDR
// if array1 = array2 then
34552: LD_VAR 0 1
34556: PUSH
34557: LD_VAR 0 2
34561: EQUAL
34562: IFFALSE 34622
// begin for i = 1 to array1 do
34564: LD_ADDR_VAR 0 4
34568: PUSH
34569: DOUBLE
34570: LD_INT 1
34572: DEC
34573: ST_TO_ADDR
34574: LD_VAR 0 1
34578: PUSH
34579: FOR_TO
34580: IFFALSE 34618
// if array1 [ i ] <> array2 [ i ] then
34582: LD_VAR 0 1
34586: PUSH
34587: LD_VAR 0 4
34591: ARRAY
34592: PUSH
34593: LD_VAR 0 2
34597: PUSH
34598: LD_VAR 0 4
34602: ARRAY
34603: NONEQUAL
34604: IFFALSE 34616
// begin result := false ;
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_INT 0
34613: ST_TO_ADDR
// break ;
34614: GO 34618
// end ;
34616: GO 34579
34618: POP
34619: POP
// end else
34620: GO 34630
// result := false ;
34622: LD_ADDR_VAR 0 3
34626: PUSH
34627: LD_INT 0
34629: ST_TO_ADDR
// end ;
34630: LD_VAR 0 3
34634: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34635: LD_INT 0
34637: PPUSH
34638: PPUSH
// if not array1 or not array2 then
34639: LD_VAR 0 1
34643: NOT
34644: IFTRUE 34653
34646: PUSH
34647: LD_VAR 0 2
34651: NOT
34652: OR
34653: IFFALSE 34657
// exit ;
34655: GO 34721
// result := true ;
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// for i = 1 to array1 do
34665: LD_ADDR_VAR 0 4
34669: PUSH
34670: DOUBLE
34671: LD_INT 1
34673: DEC
34674: ST_TO_ADDR
34675: LD_VAR 0 1
34679: PUSH
34680: FOR_TO
34681: IFFALSE 34719
// if array1 [ i ] <> array2 [ i ] then
34683: LD_VAR 0 1
34687: PUSH
34688: LD_VAR 0 4
34692: ARRAY
34693: PUSH
34694: LD_VAR 0 2
34698: PUSH
34699: LD_VAR 0 4
34703: ARRAY
34704: NONEQUAL
34705: IFFALSE 34717
// begin result := false ;
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 0
34714: ST_TO_ADDR
// break ;
34715: GO 34719
// end ;
34717: GO 34680
34719: POP
34720: POP
// end ;
34721: LD_VAR 0 3
34725: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34726: LD_INT 0
34728: PPUSH
34729: PPUSH
34730: PPUSH
// pom := GetBase ( fac ) ;
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 274
34745: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34746: LD_ADDR_VAR 0 4
34750: PUSH
34751: LD_VAR 0 2
34755: PUSH
34756: LD_INT 1
34758: ARRAY
34759: PPUSH
34760: LD_VAR 0 2
34764: PUSH
34765: LD_INT 2
34767: ARRAY
34768: PPUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_INT 3
34776: ARRAY
34777: PPUSH
34778: LD_VAR 0 2
34782: PUSH
34783: LD_INT 4
34785: ARRAY
34786: PPUSH
34787: CALL_OW 449
34791: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: LD_VAR 0 5
34801: PPUSH
34802: LD_INT 1
34804: PPUSH
34805: CALL_OW 275
34809: PUSH
34810: LD_VAR 0 4
34814: PUSH
34815: LD_INT 1
34817: ARRAY
34818: GREATEREQUAL
34819: IFFALSE 34845
34821: PUSH
34822: LD_VAR 0 5
34826: PPUSH
34827: LD_INT 2
34829: PPUSH
34830: CALL_OW 275
34834: PUSH
34835: LD_VAR 0 4
34839: PUSH
34840: LD_INT 2
34842: ARRAY
34843: GREATEREQUAL
34844: AND
34845: IFFALSE 34871
34847: PUSH
34848: LD_VAR 0 5
34852: PPUSH
34853: LD_INT 3
34855: PPUSH
34856: CALL_OW 275
34860: PUSH
34861: LD_VAR 0 4
34865: PUSH
34866: LD_INT 3
34868: ARRAY
34869: GREATEREQUAL
34870: AND
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 3
34876: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
// pom := GetBase ( building ) ;
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 274
34897: ST_TO_ADDR
// if not pom then
34898: LD_VAR 0 3
34902: NOT
34903: IFFALSE 34907
// exit ;
34905: GO 35081
// btype := GetBType ( building ) ;
34907: LD_ADDR_VAR 0 5
34911: PUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 266
34921: ST_TO_ADDR
// if btype = b_armoury then
34922: LD_VAR 0 5
34926: PUSH
34927: LD_INT 4
34929: EQUAL
34930: IFFALSE 34940
// btype := b_barracks ;
34932: LD_ADDR_VAR 0 5
34936: PUSH
34937: LD_INT 5
34939: ST_TO_ADDR
// if btype = b_depot then
34940: LD_VAR 0 5
34944: PUSH
34945: LD_INT 0
34947: EQUAL
34948: IFFALSE 34958
// btype := b_warehouse ;
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_INT 1
34957: ST_TO_ADDR
// if btype = b_workshop then
34958: LD_VAR 0 5
34962: PUSH
34963: LD_INT 2
34965: EQUAL
34966: IFFALSE 34976
// btype := b_factory ;
34968: LD_ADDR_VAR 0 5
34972: PUSH
34973: LD_INT 3
34975: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34976: LD_ADDR_VAR 0 4
34980: PUSH
34981: LD_VAR 0 5
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 248
34995: PPUSH
34996: CALL_OW 450
35000: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35001: LD_ADDR_VAR 0 2
35005: PUSH
35006: LD_VAR 0 3
35010: PPUSH
35011: LD_INT 1
35013: PPUSH
35014: CALL_OW 275
35018: PUSH
35019: LD_VAR 0 4
35023: PUSH
35024: LD_INT 1
35026: ARRAY
35027: GREATEREQUAL
35028: IFFALSE 35054
35030: PUSH
35031: LD_VAR 0 3
35035: PPUSH
35036: LD_INT 2
35038: PPUSH
35039: CALL_OW 275
35043: PUSH
35044: LD_VAR 0 4
35048: PUSH
35049: LD_INT 2
35051: ARRAY
35052: GREATEREQUAL
35053: AND
35054: IFFALSE 35080
35056: PUSH
35057: LD_VAR 0 3
35061: PPUSH
35062: LD_INT 3
35064: PPUSH
35065: CALL_OW 275
35069: PUSH
35070: LD_VAR 0 4
35074: PUSH
35075: LD_INT 3
35077: ARRAY
35078: GREATEREQUAL
35079: AND
35080: ST_TO_ADDR
// end ;
35081: LD_VAR 0 2
35085: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
// pom := GetBase ( building ) ;
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: CALL_OW 274
35105: ST_TO_ADDR
// if not pom then
35106: LD_VAR 0 4
35110: NOT
35111: IFFALSE 35115
// exit ;
35113: GO 35220
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35115: LD_ADDR_VAR 0 5
35119: PUSH
35120: LD_VAR 0 2
35124: PPUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 248
35134: PPUSH
35135: CALL_OW 450
35139: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: LD_VAR 0 4
35149: PPUSH
35150: LD_INT 1
35152: PPUSH
35153: CALL_OW 275
35157: PUSH
35158: LD_VAR 0 5
35162: PUSH
35163: LD_INT 1
35165: ARRAY
35166: GREATEREQUAL
35167: IFFALSE 35193
35169: PUSH
35170: LD_VAR 0 4
35174: PPUSH
35175: LD_INT 2
35177: PPUSH
35178: CALL_OW 275
35182: PUSH
35183: LD_VAR 0 5
35187: PUSH
35188: LD_INT 2
35190: ARRAY
35191: GREATEREQUAL
35192: AND
35193: IFFALSE 35219
35195: PUSH
35196: LD_VAR 0 4
35200: PPUSH
35201: LD_INT 3
35203: PPUSH
35204: CALL_OW 275
35208: PUSH
35209: LD_VAR 0 5
35213: PUSH
35214: LD_INT 3
35216: ARRAY
35217: GREATEREQUAL
35218: AND
35219: ST_TO_ADDR
// end ;
35220: LD_VAR 0 3
35224: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35225: LD_INT 0
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
// result := false ;
35238: LD_ADDR_VAR 0 8
35242: PUSH
35243: LD_INT 0
35245: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35246: LD_VAR 0 5
35250: NOT
35251: IFTRUE 35260
35253: PUSH
35254: LD_VAR 0 1
35258: NOT
35259: OR
35260: IFTRUE 35269
35262: PUSH
35263: LD_VAR 0 2
35267: NOT
35268: OR
35269: IFTRUE 35278
35271: PUSH
35272: LD_VAR 0 3
35276: NOT
35277: OR
35278: IFFALSE 35282
// exit ;
35280: GO 36108
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35282: LD_ADDR_VAR 0 14
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: LD_VAR 0 2
35296: PPUSH
35297: LD_VAR 0 3
35301: PPUSH
35302: LD_VAR 0 4
35306: PPUSH
35307: LD_VAR 0 5
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: PPUSH
35316: CALL_OW 248
35320: PPUSH
35321: LD_INT 0
35323: PPUSH
35324: CALL 37389 0 6
35328: ST_TO_ADDR
// if not hexes then
35329: LD_VAR 0 14
35333: NOT
35334: IFFALSE 35338
// exit ;
35336: GO 36108
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35338: LD_ADDR_VAR 0 17
35342: PUSH
35343: LD_VAR 0 5
35347: PPUSH
35348: LD_INT 22
35350: PUSH
35351: LD_VAR 0 13
35355: PPUSH
35356: CALL_OW 255
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 30
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 30
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PPUSH
35397: CALL_OW 72
35401: ST_TO_ADDR
// for i = 1 to hexes do
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: DOUBLE
35408: LD_INT 1
35410: DEC
35411: ST_TO_ADDR
35412: LD_VAR 0 14
35416: PUSH
35417: FOR_TO
35418: IFFALSE 36106
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35420: LD_ADDR_VAR 0 13
35424: PUSH
35425: LD_VAR 0 14
35429: PUSH
35430: LD_VAR 0 9
35434: ARRAY
35435: PUSH
35436: LD_INT 1
35438: ARRAY
35439: PPUSH
35440: LD_VAR 0 14
35444: PUSH
35445: LD_VAR 0 9
35449: ARRAY
35450: PUSH
35451: LD_INT 2
35453: ARRAY
35454: PPUSH
35455: CALL_OW 428
35459: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35460: LD_VAR 0 14
35464: PUSH
35465: LD_VAR 0 9
35469: ARRAY
35470: PUSH
35471: LD_INT 1
35473: ARRAY
35474: PPUSH
35475: LD_VAR 0 14
35479: PUSH
35480: LD_VAR 0 9
35484: ARRAY
35485: PUSH
35486: LD_INT 2
35488: ARRAY
35489: PPUSH
35490: CALL_OW 351
35494: IFTRUE 35533
35496: PUSH
35497: LD_VAR 0 14
35501: PUSH
35502: LD_VAR 0 9
35506: ARRAY
35507: PUSH
35508: LD_INT 1
35510: ARRAY
35511: PPUSH
35512: LD_VAR 0 14
35516: PUSH
35517: LD_VAR 0 9
35521: ARRAY
35522: PUSH
35523: LD_INT 2
35525: ARRAY
35526: PPUSH
35527: CALL_OW 488
35531: NOT
35532: OR
35533: IFTRUE 35550
35535: PUSH
35536: LD_VAR 0 13
35540: PPUSH
35541: CALL_OW 247
35545: PUSH
35546: LD_INT 3
35548: EQUAL
35549: OR
35550: IFFALSE 35556
// exit ;
35552: POP
35553: POP
35554: GO 36108
// if not tmp then
35556: LD_VAR 0 13
35560: NOT
35561: IFFALSE 35565
// continue ;
35563: GO 35417
// result := true ;
35565: LD_ADDR_VAR 0 8
35569: PUSH
35570: LD_INT 1
35572: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35573: LD_VAR 0 6
35577: IFFALSE 35594
35579: PUSH
35580: LD_VAR 0 13
35584: PPUSH
35585: CALL_OW 247
35589: PUSH
35590: LD_INT 2
35592: EQUAL
35593: AND
35594: IFFALSE 35611
35596: PUSH
35597: LD_VAR 0 13
35601: PPUSH
35602: CALL_OW 263
35606: PUSH
35607: LD_INT 1
35609: EQUAL
35610: AND
35611: IFFALSE 35775
// begin if IsDrivenBy ( tmp ) then
35613: LD_VAR 0 13
35617: PPUSH
35618: CALL_OW 311
35622: IFFALSE 35626
// continue ;
35624: GO 35417
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35626: LD_VAR 0 6
35630: PPUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 60
35636: PUSH
35637: EMPTY
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: LD_INT 55
35649: PUSH
35650: EMPTY
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PPUSH
35661: CALL_OW 72
35665: IFFALSE 35773
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35667: LD_ADDR_VAR 0 18
35671: PUSH
35672: LD_VAR 0 6
35676: PPUSH
35677: LD_INT 3
35679: PUSH
35680: LD_INT 60
35682: PUSH
35683: EMPTY
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: LD_INT 55
35695: PUSH
35696: EMPTY
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PPUSH
35707: CALL_OW 72
35711: PUSH
35712: LD_INT 1
35714: ARRAY
35715: ST_TO_ADDR
// if IsInUnit ( driver ) then
35716: LD_VAR 0 18
35720: PPUSH
35721: CALL_OW 310
35725: IFFALSE 35736
// ComExit ( driver ) ;
35727: LD_VAR 0 18
35731: PPUSH
35732: CALL 61389 0 1
// AddComEnterUnit ( driver , tmp ) ;
35736: LD_VAR 0 18
35740: PPUSH
35741: LD_VAR 0 13
35745: PPUSH
35746: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35750: LD_VAR 0 18
35754: PPUSH
35755: LD_VAR 0 7
35759: PPUSH
35760: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35764: LD_VAR 0 18
35768: PPUSH
35769: CALL_OW 181
// end ; continue ;
35773: GO 35417
// end ; if not cleaners or not tmp in cleaners then
35775: LD_VAR 0 6
35779: NOT
35780: IFTRUE 35795
35782: PUSH
35783: LD_VAR 0 13
35787: PUSH
35788: LD_VAR 0 6
35792: IN
35793: NOT
35794: OR
35795: IFFALSE 36104
// begin if dep then
35797: LD_VAR 0 17
35801: IFFALSE 35937
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35803: LD_ADDR_VAR 0 16
35807: PUSH
35808: LD_VAR 0 17
35812: PUSH
35813: LD_INT 1
35815: ARRAY
35816: PPUSH
35817: CALL_OW 250
35821: PPUSH
35822: LD_VAR 0 17
35826: PUSH
35827: LD_INT 1
35829: ARRAY
35830: PPUSH
35831: CALL_OW 254
35835: PPUSH
35836: LD_INT 5
35838: PPUSH
35839: CALL_OW 272
35843: PUSH
35844: LD_VAR 0 17
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: PPUSH
35853: CALL_OW 251
35857: PPUSH
35858: LD_VAR 0 17
35862: PUSH
35863: LD_INT 1
35865: ARRAY
35866: PPUSH
35867: CALL_OW 254
35871: PPUSH
35872: LD_INT 5
35874: PPUSH
35875: CALL_OW 273
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35884: LD_VAR 0 16
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: PPUSH
35893: LD_VAR 0 16
35897: PUSH
35898: LD_INT 2
35900: ARRAY
35901: PPUSH
35902: CALL_OW 488
35906: IFFALSE 35937
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35908: LD_VAR 0 13
35912: PPUSH
35913: LD_VAR 0 16
35917: PUSH
35918: LD_INT 1
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 16
35926: PUSH
35927: LD_INT 2
35929: ARRAY
35930: PPUSH
35931: CALL_OW 111
// continue ;
35935: GO 35417
// end ; end ; r := GetDir ( tmp ) ;
35937: LD_ADDR_VAR 0 15
35941: PUSH
35942: LD_VAR 0 13
35946: PPUSH
35947: CALL_OW 254
35951: ST_TO_ADDR
// if r = 5 then
35952: LD_VAR 0 15
35956: PUSH
35957: LD_INT 5
35959: EQUAL
35960: IFFALSE 35970
// r := 0 ;
35962: LD_ADDR_VAR 0 15
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// for j = r to 5 do
35970: LD_ADDR_VAR 0 10
35974: PUSH
35975: DOUBLE
35976: LD_VAR 0 15
35980: DEC
35981: ST_TO_ADDR
35982: LD_INT 5
35984: PUSH
35985: FOR_TO
35986: IFFALSE 36102
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35988: LD_ADDR_VAR 0 11
35992: PUSH
35993: LD_VAR 0 13
35997: PPUSH
35998: CALL_OW 250
36002: PPUSH
36003: LD_VAR 0 10
36007: PPUSH
36008: LD_INT 2
36010: PPUSH
36011: CALL_OW 272
36015: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36016: LD_ADDR_VAR 0 12
36020: PUSH
36021: LD_VAR 0 13
36025: PPUSH
36026: CALL_OW 251
36030: PPUSH
36031: LD_VAR 0 10
36035: PPUSH
36036: LD_INT 2
36038: PPUSH
36039: CALL_OW 273
36043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36044: LD_VAR 0 11
36048: PPUSH
36049: LD_VAR 0 12
36053: PPUSH
36054: CALL_OW 488
36058: IFFALSE 36077
36060: PUSH
36061: LD_VAR 0 11
36065: PPUSH
36066: LD_VAR 0 12
36070: PPUSH
36071: CALL_OW 428
36075: NOT
36076: AND
36077: IFFALSE 36100
// begin ComMoveXY ( tmp , _x , _y ) ;
36079: LD_VAR 0 13
36083: PPUSH
36084: LD_VAR 0 11
36088: PPUSH
36089: LD_VAR 0 12
36093: PPUSH
36094: CALL_OW 111
// break ;
36098: GO 36102
// end ; end ;
36100: GO 35985
36102: POP
36103: POP
// end ; end ;
36104: GO 35417
36106: POP
36107: POP
// end ;
36108: LD_VAR 0 8
36112: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36113: LD_INT 0
36115: PPUSH
// result := true ;
36116: LD_ADDR_VAR 0 3
36120: PUSH
36121: LD_INT 1
36123: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36124: LD_VAR 0 2
36128: PUSH
36129: LD_INT 24
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36143
36135: LD_INT 33
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36143
36141: GO 36168
36143: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36144: LD_ADDR_VAR 0 3
36148: PUSH
36149: LD_INT 32
36151: PPUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 321
36161: PUSH
36162: LD_INT 2
36164: EQUAL
36165: ST_TO_ADDR
36166: GO 36484
36168: LD_INT 20
36170: DOUBLE
36171: EQUAL
36172: IFTRUE 36176
36174: GO 36201
36176: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36177: LD_ADDR_VAR 0 3
36181: PUSH
36182: LD_INT 6
36184: PPUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 321
36194: PUSH
36195: LD_INT 2
36197: EQUAL
36198: ST_TO_ADDR
36199: GO 36484
36201: LD_INT 22
36203: DOUBLE
36204: EQUAL
36205: IFTRUE 36215
36207: LD_INT 36
36209: DOUBLE
36210: EQUAL
36211: IFTRUE 36215
36213: GO 36240
36215: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_INT 15
36223: PPUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL_OW 321
36233: PUSH
36234: LD_INT 2
36236: EQUAL
36237: ST_TO_ADDR
36238: GO 36484
36240: LD_INT 30
36242: DOUBLE
36243: EQUAL
36244: IFTRUE 36248
36246: GO 36273
36248: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: LD_INT 20
36256: PPUSH
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 321
36266: PUSH
36267: LD_INT 2
36269: EQUAL
36270: ST_TO_ADDR
36271: GO 36484
36273: LD_INT 28
36275: DOUBLE
36276: EQUAL
36277: IFTRUE 36287
36279: LD_INT 21
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36312
36287: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 21
36295: PPUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 321
36305: PUSH
36306: LD_INT 2
36308: EQUAL
36309: ST_TO_ADDR
36310: GO 36484
36312: LD_INT 16
36314: DOUBLE
36315: EQUAL
36316: IFTRUE 36320
36318: GO 36345
36320: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36321: LD_ADDR_VAR 0 3
36325: PUSH
36326: LD_INT 84
36328: PPUSH
36329: LD_VAR 0 1
36333: PPUSH
36334: CALL_OW 321
36338: PUSH
36339: LD_INT 2
36341: EQUAL
36342: ST_TO_ADDR
36343: GO 36484
36345: LD_INT 19
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36359
36351: LD_INT 23
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36384
36359: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_INT 83
36367: PPUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 321
36377: PUSH
36378: LD_INT 2
36380: EQUAL
36381: ST_TO_ADDR
36382: GO 36484
36384: LD_INT 17
36386: DOUBLE
36387: EQUAL
36388: IFTRUE 36392
36390: GO 36417
36392: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_INT 39
36400: PPUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 321
36410: PUSH
36411: LD_INT 2
36413: EQUAL
36414: ST_TO_ADDR
36415: GO 36484
36417: LD_INT 18
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36450
36425: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: LD_INT 40
36433: PPUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 321
36443: PUSH
36444: LD_INT 2
36446: EQUAL
36447: ST_TO_ADDR
36448: GO 36484
36450: LD_INT 27
36452: DOUBLE
36453: EQUAL
36454: IFTRUE 36458
36456: GO 36483
36458: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36459: LD_ADDR_VAR 0 3
36463: PUSH
36464: LD_INT 35
36466: PPUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 321
36476: PUSH
36477: LD_INT 2
36479: EQUAL
36480: ST_TO_ADDR
36481: GO 36484
36483: POP
// end ;
36484: LD_VAR 0 3
36488: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36489: LD_INT 0
36491: PPUSH
36492: PPUSH
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
// result := false ;
36502: LD_ADDR_VAR 0 6
36506: PUSH
36507: LD_INT 0
36509: ST_TO_ADDR
// if btype = b_depot then
36510: LD_VAR 0 2
36514: PUSH
36515: LD_INT 0
36517: EQUAL
36518: IFFALSE 36530
// begin result := true ;
36520: LD_ADDR_VAR 0 6
36524: PUSH
36525: LD_INT 1
36527: ST_TO_ADDR
// exit ;
36528: GO 37384
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36530: LD_VAR 0 1
36534: NOT
36535: IFTRUE 36560
36537: PUSH
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL_OW 266
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: IN
36558: NOT
36559: OR
36560: IFTRUE 36569
36562: PUSH
36563: LD_VAR 0 2
36567: NOT
36568: OR
36569: IFTRUE 36605
36571: PUSH
36572: LD_VAR 0 5
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 4
36591: PUSH
36592: LD_INT 5
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: IN
36603: NOT
36604: OR
36605: IFTRUE 36624
36607: PUSH
36608: LD_VAR 0 3
36612: PPUSH
36613: LD_VAR 0 4
36617: PPUSH
36618: CALL_OW 488
36622: NOT
36623: OR
36624: IFFALSE 36628
// exit ;
36626: GO 37384
// side := GetSide ( depot ) ;
36628: LD_ADDR_VAR 0 9
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 255
36642: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36643: LD_VAR 0 9
36647: PPUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: CALL 36113 0 2
36657: NOT
36658: IFFALSE 36662
// exit ;
36660: GO 37384
// pom := GetBase ( depot ) ;
36662: LD_ADDR_VAR 0 10
36666: PUSH
36667: LD_VAR 0 1
36671: PPUSH
36672: CALL_OW 274
36676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36677: LD_ADDR_VAR 0 11
36681: PUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: CALL_OW 248
36696: PPUSH
36697: CALL_OW 450
36701: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36702: LD_VAR 0 10
36706: PPUSH
36707: LD_INT 1
36709: PPUSH
36710: CALL_OW 275
36714: PUSH
36715: LD_VAR 0 11
36719: PUSH
36720: LD_INT 1
36722: ARRAY
36723: GREATEREQUAL
36724: IFFALSE 36750
36726: PUSH
36727: LD_VAR 0 10
36731: PPUSH
36732: LD_INT 2
36734: PPUSH
36735: CALL_OW 275
36739: PUSH
36740: LD_VAR 0 11
36744: PUSH
36745: LD_INT 2
36747: ARRAY
36748: GREATEREQUAL
36749: AND
36750: IFFALSE 36776
36752: PUSH
36753: LD_VAR 0 10
36757: PPUSH
36758: LD_INT 3
36760: PPUSH
36761: CALL_OW 275
36765: PUSH
36766: LD_VAR 0 11
36770: PUSH
36771: LD_INT 3
36773: ARRAY
36774: GREATEREQUAL
36775: AND
36776: NOT
36777: IFFALSE 36781
// exit ;
36779: GO 37384
// if GetBType ( depot ) = b_depot then
36781: LD_VAR 0 1
36785: PPUSH
36786: CALL_OW 266
36790: PUSH
36791: LD_INT 0
36793: EQUAL
36794: IFFALSE 36806
// dist := 28 else
36796: LD_ADDR_VAR 0 14
36800: PUSH
36801: LD_INT 28
36803: ST_TO_ADDR
36804: GO 36814
// dist := 36 ;
36806: LD_ADDR_VAR 0 14
36810: PUSH
36811: LD_INT 36
36813: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36814: LD_VAR 0 1
36818: PPUSH
36819: LD_VAR 0 3
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: CALL_OW 297
36833: PUSH
36834: LD_VAR 0 14
36838: GREATER
36839: IFFALSE 36843
// exit ;
36841: GO 37384
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36843: LD_ADDR_VAR 0 12
36847: PUSH
36848: LD_VAR 0 2
36852: PPUSH
36853: LD_VAR 0 3
36857: PPUSH
36858: LD_VAR 0 4
36862: PPUSH
36863: LD_VAR 0 5
36867: PPUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 248
36877: PPUSH
36878: LD_INT 0
36880: PPUSH
36881: CALL 37389 0 6
36885: ST_TO_ADDR
// if not hexes then
36886: LD_VAR 0 12
36890: NOT
36891: IFFALSE 36895
// exit ;
36893: GO 37384
// hex := GetHexInfo ( x , y ) ;
36895: LD_ADDR_VAR 0 15
36899: PUSH
36900: LD_VAR 0 3
36904: PPUSH
36905: LD_VAR 0 4
36909: PPUSH
36910: CALL_OW 546
36914: ST_TO_ADDR
// if hex [ 1 ] then
36915: LD_VAR 0 15
36919: PUSH
36920: LD_INT 1
36922: ARRAY
36923: IFFALSE 36927
// exit ;
36925: GO 37384
// height := hex [ 2 ] ;
36927: LD_ADDR_VAR 0 13
36931: PUSH
36932: LD_VAR 0 15
36936: PUSH
36937: LD_INT 2
36939: ARRAY
36940: ST_TO_ADDR
// for i = 1 to hexes do
36941: LD_ADDR_VAR 0 7
36945: PUSH
36946: DOUBLE
36947: LD_INT 1
36949: DEC
36950: ST_TO_ADDR
36951: LD_VAR 0 12
36955: PUSH
36956: FOR_TO
36957: IFFALSE 37301
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36959: LD_VAR 0 12
36963: PUSH
36964: LD_VAR 0 7
36968: ARRAY
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_VAR 0 12
36978: PUSH
36979: LD_VAR 0 7
36983: ARRAY
36984: PUSH
36985: LD_INT 2
36987: ARRAY
36988: PPUSH
36989: CALL_OW 488
36993: NOT
36994: IFTRUE 37036
36996: PUSH
36997: LD_VAR 0 12
37001: PUSH
37002: LD_VAR 0 7
37006: ARRAY
37007: PUSH
37008: LD_INT 1
37010: ARRAY
37011: PPUSH
37012: LD_VAR 0 12
37016: PUSH
37017: LD_VAR 0 7
37021: ARRAY
37022: PUSH
37023: LD_INT 2
37025: ARRAY
37026: PPUSH
37027: CALL_OW 428
37031: PUSH
37032: LD_INT 0
37034: GREATER
37035: OR
37036: IFTRUE 37074
37038: PUSH
37039: LD_VAR 0 12
37043: PUSH
37044: LD_VAR 0 7
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 12
37058: PUSH
37059: LD_VAR 0 7
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: CALL_OW 351
37073: OR
37074: IFFALSE 37080
// exit ;
37076: POP
37077: POP
37078: GO 37384
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37080: LD_ADDR_VAR 0 8
37084: PUSH
37085: LD_VAR 0 12
37089: PUSH
37090: LD_VAR 0 7
37094: ARRAY
37095: PUSH
37096: LD_INT 1
37098: ARRAY
37099: PPUSH
37100: LD_VAR 0 12
37104: PUSH
37105: LD_VAR 0 7
37109: ARRAY
37110: PUSH
37111: LD_INT 2
37113: ARRAY
37114: PPUSH
37115: CALL_OW 546
37119: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37120: LD_VAR 0 8
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: IFTRUE 37150
37130: PUSH
37131: LD_VAR 0 8
37135: PUSH
37136: LD_INT 2
37138: ARRAY
37139: PUSH
37140: LD_VAR 0 13
37144: PUSH
37145: LD_INT 2
37147: PLUS
37148: GREATER
37149: OR
37150: IFTRUE 37172
37152: PUSH
37153: LD_VAR 0 8
37157: PUSH
37158: LD_INT 2
37160: ARRAY
37161: PUSH
37162: LD_VAR 0 13
37166: PUSH
37167: LD_INT 2
37169: MINUS
37170: LESS
37171: OR
37172: IFTRUE 37240
37174: PUSH
37175: LD_VAR 0 8
37179: PUSH
37180: LD_INT 3
37182: ARRAY
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 8
37189: PUSH
37190: LD_INT 9
37192: PUSH
37193: LD_INT 10
37195: PUSH
37196: LD_INT 11
37198: PUSH
37199: LD_INT 12
37201: PUSH
37202: LD_INT 13
37204: PUSH
37205: LD_INT 16
37207: PUSH
37208: LD_INT 17
37210: PUSH
37211: LD_INT 18
37213: PUSH
37214: LD_INT 19
37216: PUSH
37217: LD_INT 20
37219: PUSH
37220: LD_INT 21
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: IN
37238: NOT
37239: OR
37240: IFTRUE 37253
37242: PUSH
37243: LD_VAR 0 8
37247: PUSH
37248: LD_INT 5
37250: ARRAY
37251: NOT
37252: OR
37253: IFTRUE 37293
37255: PUSH
37256: LD_VAR 0 8
37260: PUSH
37261: LD_INT 6
37263: ARRAY
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: LD_INT 7
37273: PUSH
37274: LD_INT 9
37276: PUSH
37277: LD_INT 10
37279: PUSH
37280: LD_INT 11
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: IN
37291: NOT
37292: OR
37293: IFFALSE 37299
// exit ;
37295: POP
37296: POP
37297: GO 37384
// end ;
37299: GO 36956
37301: POP
37302: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37303: LD_VAR 0 9
37307: PPUSH
37308: LD_VAR 0 3
37312: PPUSH
37313: LD_VAR 0 4
37317: PPUSH
37318: LD_INT 20
37320: PPUSH
37321: CALL 29203 0 4
37325: PUSH
37326: LD_INT 4
37328: ARRAY
37329: IFFALSE 37333
// exit ;
37331: GO 37384
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37333: LD_VAR 0 2
37337: PUSH
37338: LD_INT 29
37340: PUSH
37341: LD_INT 30
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: IN
37348: IFFALSE 37372
37350: PUSH
37351: LD_VAR 0 3
37355: PPUSH
37356: LD_VAR 0 4
37360: PPUSH
37361: LD_VAR 0 9
37365: PPUSH
37366: CALL_OW 440
37370: NOT
37371: AND
37372: IFFALSE 37376
// exit ;
37374: GO 37384
// result := true ;
37376: LD_ADDR_VAR 0 6
37380: PUSH
37381: LD_INT 1
37383: ST_TO_ADDR
// end ;
37384: LD_VAR 0 6
37388: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37389: LD_INT 0
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
// result = [ ] ;
37449: LD_ADDR_VAR 0 7
37453: PUSH
37454: EMPTY
37455: ST_TO_ADDR
// temp_list = [ ] ;
37456: LD_ADDR_VAR 0 9
37460: PUSH
37461: EMPTY
37462: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37463: LD_VAR 0 4
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: LD_INT 4
37482: PUSH
37483: LD_INT 5
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: IN
37494: NOT
37495: IFTRUE 37538
37497: PUSH
37498: LD_VAR 0 1
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: IN
37513: IFFALSE 37537
37515: PUSH
37516: LD_VAR 0 5
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 3
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: IN
37535: NOT
37536: AND
37537: OR
37538: IFFALSE 37542
// exit ;
37540: GO 55941
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37542: LD_VAR 0 1
37546: PUSH
37547: LD_INT 6
37549: PUSH
37550: LD_INT 7
37552: PUSH
37553: LD_INT 8
37555: PUSH
37556: LD_INT 13
37558: PUSH
37559: LD_INT 12
37561: PUSH
37562: LD_INT 15
37564: PUSH
37565: LD_INT 11
37567: PUSH
37568: LD_INT 14
37570: PUSH
37571: LD_INT 10
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: IN
37585: IFFALSE 37595
// btype = b_lab ;
37587: LD_ADDR_VAR 0 1
37591: PUSH
37592: LD_INT 6
37594: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37595: LD_VAR 0 6
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: IN
37614: NOT
37615: IFTRUE 37683
37617: PUSH
37618: LD_VAR 0 1
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 6
37637: PUSH
37638: LD_INT 36
37640: PUSH
37641: LD_INT 4
37643: PUSH
37644: LD_INT 5
37646: PUSH
37647: LD_INT 31
37649: PUSH
37650: LD_INT 32
37652: PUSH
37653: LD_INT 33
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: IN
37669: NOT
37670: IFFALSE 37682
37672: PUSH
37673: LD_VAR 0 6
37677: PUSH
37678: LD_INT 1
37680: EQUAL
37681: AND
37682: OR
37683: IFTRUE 37715
37685: PUSH
37686: LD_VAR 0 1
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: IN
37701: NOT
37702: IFFALSE 37714
37704: PUSH
37705: LD_VAR 0 6
37709: PUSH
37710: LD_INT 2
37712: EQUAL
37713: AND
37714: OR
37715: IFFALSE 37725
// mode = 0 ;
37717: LD_ADDR_VAR 0 6
37721: PUSH
37722: LD_INT 0
37724: ST_TO_ADDR
// case mode of 0 :
37725: LD_VAR 0 6
37729: PUSH
37730: LD_INT 0
37732: DOUBLE
37733: EQUAL
37734: IFTRUE 37738
37736: GO 49191
37738: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37739: LD_ADDR_VAR 0 11
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37932: LD_ADDR_VAR 0 12
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 3
38089: NEG
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 3
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38128: LD_ADDR_VAR 0 13
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38327: LD_ADDR_VAR 0 14
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38523: LD_ADDR_VAR 0 15
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 3
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 3
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38716: LD_ADDR_VAR 0 16
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38909: LD_ADDR_VAR 0 17
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: LD_INT 2
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: NEG
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39139: LD_ADDR_VAR 0 18
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39369: LD_ADDR_VAR 0 19
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39599: LD_ADDR_VAR 0 20
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39829: LD_ADDR_VAR 0 21
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 2
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40059: LD_ADDR_VAR 0 22
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40289: LD_ADDR_VAR 0 23
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40569: LD_ADDR_VAR 0 24
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40845: LD_ADDR_VAR 0 25
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41119: LD_ADDR_VAR 0 26
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41395: LD_ADDR_VAR 0 27
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 3
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41675: LD_ADDR_VAR 0 28
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 3
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 3
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41957: LD_ADDR_VAR 0 29
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42236: LD_ADDR_VAR 0 30
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 3
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 2
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42514: LD_ADDR_VAR 0 31
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 3
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42792: LD_ADDR_VAR 0 32
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 3
43035: NEG
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43070: LD_ADDR_VAR 0 33
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43349: LD_ADDR_VAR 0 34
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 3
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 3
43594: NEG
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43629: LD_ADDR_VAR 0 35
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43741: LD_ADDR_VAR 0 36
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43853: LD_ADDR_VAR 0 37
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43965: LD_ADDR_VAR 0 38
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44077: LD_ADDR_VAR 0 39
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44189: LD_ADDR_VAR 0 40
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44301: LD_ADDR_VAR 0 41
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44651: LD_ADDR_VAR 0 42
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 3
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 3
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 3
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 3
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 3
44960: NEG
44961: PUSH
44962: LD_INT 3
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45001: LD_ADDR_VAR 0 43
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 3
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45349: LD_ADDR_VAR 0 44
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: LD_INT 3
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45699: LD_ADDR_VAR 0 45
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: LD_INT 3
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46049: LD_ADDR_VAR 0 46
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46397: LD_ADDR_VAR 0 47
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46548: LD_ADDR_VAR 0 48
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46695: LD_ADDR_VAR 0 49
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46839: LD_ADDR_VAR 0 50
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46983: LD_ADDR_VAR 0 51
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47130: LD_ADDR_VAR 0 52
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47281: LD_ADDR_VAR 0 53
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47511: LD_ADDR_VAR 0 54
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47741: LD_ADDR_VAR 0 55
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47971: LD_ADDR_VAR 0 56
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48201: LD_ADDR_VAR 0 57
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48431: LD_ADDR_VAR 0 58
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48661: LD_ADDR_VAR 0 59
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48749: LD_ADDR_VAR 0 60
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48837: LD_ADDR_VAR 0 61
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48925: LD_ADDR_VAR 0 62
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49013: LD_ADDR_VAR 0 63
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49101: LD_ADDR_VAR 0 64
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// end ; 1 :
49189: GO 55086
49191: LD_INT 1
49193: DOUBLE
49194: EQUAL
49195: IFTRUE 49199
49197: GO 51822
49199: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49200: LD_ADDR_VAR 0 11
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 3
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49244: LD_ADDR_VAR 0 12
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49285: LD_ADDR_VAR 0 13
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49325: LD_ADDR_VAR 0 14
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49366: LD_ADDR_VAR 0 15
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 3
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49410: LD_ADDR_VAR 0 16
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49456: LD_ADDR_VAR 0 17
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: LIST
49499: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49500: LD_ADDR_VAR 0 18
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49541: LD_ADDR_VAR 0 19
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: LD_INT 3
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49581: LD_ADDR_VAR 0 20
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49622: LD_ADDR_VAR 0 21
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49666: LD_ADDR_VAR 0 22
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49712: LD_ADDR_VAR 0 23
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 4
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49756: LD_ADDR_VAR 0 24
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49797: LD_ADDR_VAR 0 25
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 4
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: LD_INT 4
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49837: LD_ADDR_VAR 0 26
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 4
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49878: LD_ADDR_VAR 0 27
49882: PUSH
49883: LD_INT 3
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 4
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49922: LD_ADDR_VAR 0 28
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: LD_INT 4
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49968: LD_ADDR_VAR 0 29
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 4
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 4
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 5
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 5
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 4
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 6
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 6
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 5
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50123: LD_ADDR_VAR 0 30
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 4
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 4
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 5
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 5
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 5
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 6
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 6
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50266: LD_ADDR_VAR 0 31
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 4
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: LD_INT 4
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: LD_INT 4
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 5
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 5
50343: PUSH
50344: LD_INT 5
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 4
50353: PUSH
50354: LD_INT 5
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 6
50363: PUSH
50364: LD_INT 5
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 6
50373: PUSH
50374: LD_INT 6
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 5
50383: PUSH
50384: LD_INT 6
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50405: LD_ADDR_VAR 0 32
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 4
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 4
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 5
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 4
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 6
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 6
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 5
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50548: LD_ADDR_VAR 0 33
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 4
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 4
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 5
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 5
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 5
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 6
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 6
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50703: LD_ADDR_VAR 0 34
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 4
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 4
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 4
50770: NEG
50771: PUSH
50772: LD_INT 4
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: LD_INT 5
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 5
50794: NEG
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 5
50806: NEG
50807: PUSH
50808: LD_INT 5
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 5
50818: NEG
50819: PUSH
50820: LD_INT 6
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 6
50830: NEG
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 6
50842: NEG
50843: PUSH
50844: LD_INT 6
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50866: LD_ADDR_VAR 0 41
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50910: LD_ADDR_VAR 0 42
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 3
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: LIST
50950: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50951: LD_ADDR_VAR 0 43
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50991: LD_ADDR_VAR 0 44
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51032: LD_ADDR_VAR 0 45
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51076: LD_ADDR_VAR 0 46
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51122: LD_ADDR_VAR 0 47
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51155: LD_ADDR_VAR 0 48
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51186: LD_ADDR_VAR 0 49
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51215: LD_ADDR_VAR 0 50
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51244: LD_ADDR_VAR 0 51
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51275: LD_ADDR_VAR 0 52
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51308: LD_ADDR_VAR 0 53
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51352: LD_ADDR_VAR 0 54
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51393: LD_ADDR_VAR 0 55
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51433: LD_ADDR_VAR 0 56
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51474: LD_ADDR_VAR 0 57
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51518: LD_ADDR_VAR 0 58
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51564: LD_ADDR_VAR 0 59
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51608: LD_ADDR_VAR 0 60
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51649: LD_ADDR_VAR 0 61
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51689: LD_ADDR_VAR 0 62
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51730: LD_ADDR_VAR 0 63
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51774: LD_ADDR_VAR 0 64
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// end ; 2 :
51820: GO 55086
51822: LD_INT 2
51824: DOUBLE
51825: EQUAL
51826: IFTRUE 51830
51828: GO 55085
51830: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51831: LD_ADDR_VAR 0 29
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 4
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 5
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 5
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 4
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 5
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 4
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 4
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 5
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 5
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 4
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 4
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 4
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 4
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 4
52216: NEG
52217: PUSH
52218: LD_INT 4
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: NEG
52229: PUSH
52230: LD_INT 5
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: LD_INT 4
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 4
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 5
52276: NEG
52277: PUSH
52278: LD_INT 4
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 5
52288: NEG
52289: PUSH
52290: LD_INT 5
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: LD_INT 5
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 5
52312: NEG
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52369: LD_ADDR_VAR 0 30
52373: PUSH
52374: LD_INT 4
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 4
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 5
52396: PUSH
52397: LD_INT 4
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: LD_INT 5
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 5
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 5
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 5
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 4
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 4
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 4
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 5
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 5
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 5
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 4
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 4
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 4
52733: NEG
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 4
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 4
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 4
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 5
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 4
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 4
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 5
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52916: LD_ADDR_VAR 0 31
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 4
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 5
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 5
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 4
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 5
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 4
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 4
53095: NEG
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 4
53118: NEG
53119: PUSH
53120: LD_INT 4
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 4
53130: NEG
53131: PUSH
53132: LD_INT 5
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: LD_INT 4
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: NEG
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 5
53178: NEG
53179: PUSH
53180: LD_INT 4
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 5
53190: NEG
53191: PUSH
53192: LD_INT 5
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 5
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 5
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 4
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 4
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 4
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 4
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 4
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 5
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 5
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 4
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53466: LD_ADDR_VAR 0 32
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 4
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 5
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 5
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 5
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: LD_INT 3
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 3
53587: NEG
53588: PUSH
53589: LD_INT 4
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 4
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: NEG
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 4
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 4
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 5
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 4
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 5
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 4
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 4
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 4
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: LD_INT 4
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 5
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54013: LD_ADDR_VAR 0 33
54017: PUSH
54018: LD_INT 4
54020: NEG
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: LD_INT 5
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: LD_INT 4
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 4
54068: NEG
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 5
54080: NEG
54081: PUSH
54082: LD_INT 4
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: NEG
54093: PUSH
54094: LD_INT 5
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 5
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 5
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 4
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 3
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 4
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 4
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 5
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 5
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 4
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 5
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: LD_INT 3
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: LD_INT 4
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 4
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 4
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 5
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 5
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 5
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54551: LD_ADDR_VAR 0 34
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 4
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 4
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 5
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 5
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 4
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 4
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 5
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 5
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// end ; end ;
55083: GO 55086
55085: POP
// case btype of b_depot , b_warehouse :
55086: LD_VAR 0 1
55090: PUSH
55091: LD_INT 0
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55105
55097: LD_INT 1
55099: DOUBLE
55100: EQUAL
55101: IFTRUE 55105
55103: GO 55306
55105: POP
// case nation of nation_american :
55106: LD_VAR 0 5
55110: PUSH
55111: LD_INT 1
55113: DOUBLE
55114: EQUAL
55115: IFTRUE 55119
55117: GO 55175
55119: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55120: LD_ADDR_VAR 0 9
55124: PUSH
55125: LD_VAR 0 11
55129: PUSH
55130: LD_VAR 0 12
55134: PUSH
55135: LD_VAR 0 13
55139: PUSH
55140: LD_VAR 0 14
55144: PUSH
55145: LD_VAR 0 15
55149: PUSH
55150: LD_VAR 0 16
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: PUSH
55163: LD_VAR 0 4
55167: PUSH
55168: LD_INT 1
55170: PLUS
55171: ARRAY
55172: ST_TO_ADDR
55173: GO 55304
55175: LD_INT 2
55177: DOUBLE
55178: EQUAL
55179: IFTRUE 55183
55181: GO 55239
55183: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55184: LD_ADDR_VAR 0 9
55188: PUSH
55189: LD_VAR 0 17
55193: PUSH
55194: LD_VAR 0 18
55198: PUSH
55199: LD_VAR 0 19
55203: PUSH
55204: LD_VAR 0 20
55208: PUSH
55209: LD_VAR 0 21
55213: PUSH
55214: LD_VAR 0 22
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: PUSH
55227: LD_VAR 0 4
55231: PUSH
55232: LD_INT 1
55234: PLUS
55235: ARRAY
55236: ST_TO_ADDR
55237: GO 55304
55239: LD_INT 3
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 55303
55247: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55248: LD_ADDR_VAR 0 9
55252: PUSH
55253: LD_VAR 0 23
55257: PUSH
55258: LD_VAR 0 24
55262: PUSH
55263: LD_VAR 0 25
55267: PUSH
55268: LD_VAR 0 26
55272: PUSH
55273: LD_VAR 0 27
55277: PUSH
55278: LD_VAR 0 28
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: LD_VAR 0 4
55295: PUSH
55296: LD_INT 1
55298: PLUS
55299: ARRAY
55300: ST_TO_ADDR
55301: GO 55304
55303: POP
55304: GO 55859
55306: LD_INT 2
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55320
55312: LD_INT 3
55314: DOUBLE
55315: EQUAL
55316: IFTRUE 55320
55318: GO 55376
55320: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55321: LD_ADDR_VAR 0 9
55325: PUSH
55326: LD_VAR 0 29
55330: PUSH
55331: LD_VAR 0 30
55335: PUSH
55336: LD_VAR 0 31
55340: PUSH
55341: LD_VAR 0 32
55345: PUSH
55346: LD_VAR 0 33
55350: PUSH
55351: LD_VAR 0 34
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: PUSH
55364: LD_VAR 0 4
55368: PUSH
55369: LD_INT 1
55371: PLUS
55372: ARRAY
55373: ST_TO_ADDR
55374: GO 55859
55376: LD_INT 16
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55438
55382: LD_INT 17
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55438
55388: LD_INT 18
55390: DOUBLE
55391: EQUAL
55392: IFTRUE 55438
55394: LD_INT 19
55396: DOUBLE
55397: EQUAL
55398: IFTRUE 55438
55400: LD_INT 22
55402: DOUBLE
55403: EQUAL
55404: IFTRUE 55438
55406: LD_INT 20
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55438
55412: LD_INT 21
55414: DOUBLE
55415: EQUAL
55416: IFTRUE 55438
55418: LD_INT 23
55420: DOUBLE
55421: EQUAL
55422: IFTRUE 55438
55424: LD_INT 24
55426: DOUBLE
55427: EQUAL
55428: IFTRUE 55438
55430: LD_INT 25
55432: DOUBLE
55433: EQUAL
55434: IFTRUE 55438
55436: GO 55494
55438: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55439: LD_ADDR_VAR 0 9
55443: PUSH
55444: LD_VAR 0 35
55448: PUSH
55449: LD_VAR 0 36
55453: PUSH
55454: LD_VAR 0 37
55458: PUSH
55459: LD_VAR 0 38
55463: PUSH
55464: LD_VAR 0 39
55468: PUSH
55469: LD_VAR 0 40
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: PUSH
55482: LD_VAR 0 4
55486: PUSH
55487: LD_INT 1
55489: PLUS
55490: ARRAY
55491: ST_TO_ADDR
55492: GO 55859
55494: LD_INT 6
55496: DOUBLE
55497: EQUAL
55498: IFTRUE 55550
55500: LD_INT 7
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55550
55506: LD_INT 8
55508: DOUBLE
55509: EQUAL
55510: IFTRUE 55550
55512: LD_INT 13
55514: DOUBLE
55515: EQUAL
55516: IFTRUE 55550
55518: LD_INT 12
55520: DOUBLE
55521: EQUAL
55522: IFTRUE 55550
55524: LD_INT 15
55526: DOUBLE
55527: EQUAL
55528: IFTRUE 55550
55530: LD_INT 11
55532: DOUBLE
55533: EQUAL
55534: IFTRUE 55550
55536: LD_INT 14
55538: DOUBLE
55539: EQUAL
55540: IFTRUE 55550
55542: LD_INT 10
55544: DOUBLE
55545: EQUAL
55546: IFTRUE 55550
55548: GO 55606
55550: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55551: LD_ADDR_VAR 0 9
55555: PUSH
55556: LD_VAR 0 41
55560: PUSH
55561: LD_VAR 0 42
55565: PUSH
55566: LD_VAR 0 43
55570: PUSH
55571: LD_VAR 0 44
55575: PUSH
55576: LD_VAR 0 45
55580: PUSH
55581: LD_VAR 0 46
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: PUSH
55594: LD_VAR 0 4
55598: PUSH
55599: LD_INT 1
55601: PLUS
55602: ARRAY
55603: ST_TO_ADDR
55604: GO 55859
55606: LD_INT 36
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55614
55612: GO 55670
55614: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55615: LD_ADDR_VAR 0 9
55619: PUSH
55620: LD_VAR 0 47
55624: PUSH
55625: LD_VAR 0 48
55629: PUSH
55630: LD_VAR 0 49
55634: PUSH
55635: LD_VAR 0 50
55639: PUSH
55640: LD_VAR 0 51
55644: PUSH
55645: LD_VAR 0 52
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: PUSH
55658: LD_VAR 0 4
55662: PUSH
55663: LD_INT 1
55665: PLUS
55666: ARRAY
55667: ST_TO_ADDR
55668: GO 55859
55670: LD_INT 4
55672: DOUBLE
55673: EQUAL
55674: IFTRUE 55696
55676: LD_INT 5
55678: DOUBLE
55679: EQUAL
55680: IFTRUE 55696
55682: LD_INT 34
55684: DOUBLE
55685: EQUAL
55686: IFTRUE 55696
55688: LD_INT 37
55690: DOUBLE
55691: EQUAL
55692: IFTRUE 55696
55694: GO 55752
55696: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55697: LD_ADDR_VAR 0 9
55701: PUSH
55702: LD_VAR 0 53
55706: PUSH
55707: LD_VAR 0 54
55711: PUSH
55712: LD_VAR 0 55
55716: PUSH
55717: LD_VAR 0 56
55721: PUSH
55722: LD_VAR 0 57
55726: PUSH
55727: LD_VAR 0 58
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: PUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: ARRAY
55749: ST_TO_ADDR
55750: GO 55859
55752: LD_INT 31
55754: DOUBLE
55755: EQUAL
55756: IFTRUE 55802
55758: LD_INT 32
55760: DOUBLE
55761: EQUAL
55762: IFTRUE 55802
55764: LD_INT 33
55766: DOUBLE
55767: EQUAL
55768: IFTRUE 55802
55770: LD_INT 27
55772: DOUBLE
55773: EQUAL
55774: IFTRUE 55802
55776: LD_INT 26
55778: DOUBLE
55779: EQUAL
55780: IFTRUE 55802
55782: LD_INT 28
55784: DOUBLE
55785: EQUAL
55786: IFTRUE 55802
55788: LD_INT 29
55790: DOUBLE
55791: EQUAL
55792: IFTRUE 55802
55794: LD_INT 30
55796: DOUBLE
55797: EQUAL
55798: IFTRUE 55802
55800: GO 55858
55802: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55803: LD_ADDR_VAR 0 9
55807: PUSH
55808: LD_VAR 0 59
55812: PUSH
55813: LD_VAR 0 60
55817: PUSH
55818: LD_VAR 0 61
55822: PUSH
55823: LD_VAR 0 62
55827: PUSH
55828: LD_VAR 0 63
55832: PUSH
55833: LD_VAR 0 64
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: PUSH
55846: LD_VAR 0 4
55850: PUSH
55851: LD_INT 1
55853: PLUS
55854: ARRAY
55855: ST_TO_ADDR
55856: GO 55859
55858: POP
// temp_list2 = [ ] ;
55859: LD_ADDR_VAR 0 10
55863: PUSH
55864: EMPTY
55865: ST_TO_ADDR
// for i in temp_list do
55866: LD_ADDR_VAR 0 8
55870: PUSH
55871: LD_VAR 0 9
55875: PUSH
55876: FOR_IN
55877: IFFALSE 55929
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55879: LD_ADDR_VAR 0 10
55883: PUSH
55884: LD_VAR 0 10
55888: PUSH
55889: LD_VAR 0 8
55893: PUSH
55894: LD_INT 1
55896: ARRAY
55897: PUSH
55898: LD_VAR 0 2
55902: PLUS
55903: PUSH
55904: LD_VAR 0 8
55908: PUSH
55909: LD_INT 2
55911: ARRAY
55912: PUSH
55913: LD_VAR 0 3
55917: PLUS
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: ADD
55926: ST_TO_ADDR
55927: GO 55876
55929: POP
55930: POP
// result = temp_list2 ;
55931: LD_ADDR_VAR 0 7
55935: PUSH
55936: LD_VAR 0 10
55940: ST_TO_ADDR
// end ;
55941: LD_VAR 0 7
55945: RET
// export function EnemyInRange ( unit , dist ) ; begin
55946: LD_INT 0
55948: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55949: LD_ADDR_VAR 0 3
55953: PUSH
55954: LD_VAR 0 1
55958: PPUSH
55959: CALL_OW 255
55963: PPUSH
55964: LD_VAR 0 1
55968: PPUSH
55969: CALL_OW 250
55973: PPUSH
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 251
55983: PPUSH
55984: LD_VAR 0 2
55988: PPUSH
55989: CALL 29203 0 4
55993: PUSH
55994: LD_INT 4
55996: ARRAY
55997: ST_TO_ADDR
// end ;
55998: LD_VAR 0 3
56002: RET
// export function PlayerSeeMe ( unit ) ; begin
56003: LD_INT 0
56005: PPUSH
// result := See ( your_side , unit ) ;
56006: LD_ADDR_VAR 0 2
56010: PUSH
56011: LD_OWVAR 2
56015: PPUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 292
56025: ST_TO_ADDR
// end ;
56026: LD_VAR 0 2
56030: RET
// export function ReverseDir ( unit ) ; begin
56031: LD_INT 0
56033: PPUSH
// if not unit then
56034: LD_VAR 0 1
56038: NOT
56039: IFFALSE 56043
// exit ;
56041: GO 56066
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56043: LD_ADDR_VAR 0 2
56047: PUSH
56048: LD_VAR 0 1
56052: PPUSH
56053: CALL_OW 254
56057: PUSH
56058: LD_INT 3
56060: PLUS
56061: PUSH
56062: LD_INT 6
56064: MOD
56065: ST_TO_ADDR
// end ;
56066: LD_VAR 0 2
56070: RET
// export function ReverseArray ( array ) ; var i ; begin
56071: LD_INT 0
56073: PPUSH
56074: PPUSH
// if not array then
56075: LD_VAR 0 1
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56139
// result := [ ] ;
56084: LD_ADDR_VAR 0 2
56088: PUSH
56089: EMPTY
56090: ST_TO_ADDR
// for i := array downto 1 do
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: DOUBLE
56097: LD_VAR 0 1
56101: INC
56102: ST_TO_ADDR
56103: LD_INT 1
56105: PUSH
56106: FOR_DOWNTO
56107: IFFALSE 56137
// result := Join ( result , array [ i ] ) ;
56109: LD_ADDR_VAR 0 2
56113: PUSH
56114: LD_VAR 0 2
56118: PPUSH
56119: LD_VAR 0 1
56123: PUSH
56124: LD_VAR 0 3
56128: ARRAY
56129: PPUSH
56130: CALL 60991 0 2
56134: ST_TO_ADDR
56135: GO 56106
56137: POP
56138: POP
// end ;
56139: LD_VAR 0 2
56143: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56144: LD_INT 0
56146: PPUSH
56147: PPUSH
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
// if not unit or not hexes then
56152: LD_VAR 0 1
56156: NOT
56157: IFTRUE 56166
56159: PUSH
56160: LD_VAR 0 2
56164: NOT
56165: OR
56166: IFFALSE 56170
// exit ;
56168: GO 56293
// dist := 9999 ;
56170: LD_ADDR_VAR 0 5
56174: PUSH
56175: LD_INT 9999
56177: ST_TO_ADDR
// for i = 1 to hexes do
56178: LD_ADDR_VAR 0 4
56182: PUSH
56183: DOUBLE
56184: LD_INT 1
56186: DEC
56187: ST_TO_ADDR
56188: LD_VAR 0 2
56192: PUSH
56193: FOR_TO
56194: IFFALSE 56281
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56196: LD_ADDR_VAR 0 6
56200: PUSH
56201: LD_VAR 0 1
56205: PPUSH
56206: LD_VAR 0 2
56210: PUSH
56211: LD_VAR 0 4
56215: ARRAY
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: PPUSH
56221: LD_VAR 0 2
56225: PUSH
56226: LD_VAR 0 4
56230: ARRAY
56231: PUSH
56232: LD_INT 2
56234: ARRAY
56235: PPUSH
56236: CALL_OW 297
56240: ST_TO_ADDR
// if tdist < dist then
56241: LD_VAR 0 6
56245: PUSH
56246: LD_VAR 0 5
56250: LESS
56251: IFFALSE 56279
// begin hex := hexes [ i ] ;
56253: LD_ADDR_VAR 0 8
56257: PUSH
56258: LD_VAR 0 2
56262: PUSH
56263: LD_VAR 0 4
56267: ARRAY
56268: ST_TO_ADDR
// dist := tdist ;
56269: LD_ADDR_VAR 0 5
56273: PUSH
56274: LD_VAR 0 6
56278: ST_TO_ADDR
// end ; end ;
56279: GO 56193
56281: POP
56282: POP
// result := hex ;
56283: LD_ADDR_VAR 0 3
56287: PUSH
56288: LD_VAR 0 8
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 3
56297: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56302: LD_VAR 0 1
56306: NOT
56307: IFTRUE 56346
56309: PUSH
56310: LD_VAR 0 1
56314: PUSH
56315: LD_INT 21
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 23
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: CALL_OW 69
56343: IN
56344: NOT
56345: OR
56346: IFFALSE 56350
// exit ;
56348: GO 56397
// for i = 1 to 3 do
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: DOUBLE
56356: LD_INT 1
56358: DEC
56359: ST_TO_ADDR
56360: LD_INT 3
56362: PUSH
56363: FOR_TO
56364: IFFALSE 56395
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56366: LD_VAR 0 1
56370: PPUSH
56371: CALL_OW 250
56375: PPUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 251
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL_OW 453
56393: GO 56363
56395: POP
56396: POP
// end ;
56397: LD_VAR 0 2
56401: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56402: LD_INT 0
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
56409: PPUSH
// if not unit or not enemy_unit then
56410: LD_VAR 0 1
56414: NOT
56415: IFTRUE 56424
56417: PUSH
56418: LD_VAR 0 2
56422: NOT
56423: OR
56424: IFFALSE 56428
// exit ;
56426: GO 56909
// if GetLives ( i ) < 250 then
56428: LD_VAR 0 4
56432: PPUSH
56433: CALL_OW 256
56437: PUSH
56438: LD_INT 250
56440: LESS
56441: IFFALSE 56454
// begin ComAutodestruct ( i ) ;
56443: LD_VAR 0 4
56447: PPUSH
56448: CALL 56298 0 1
// exit ;
56452: GO 56909
// end ; x := GetX ( enemy_unit ) ;
56454: LD_ADDR_VAR 0 7
56458: PUSH
56459: LD_VAR 0 2
56463: PPUSH
56464: CALL_OW 250
56468: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56469: LD_ADDR_VAR 0 8
56473: PUSH
56474: LD_VAR 0 2
56478: PPUSH
56479: CALL_OW 251
56483: ST_TO_ADDR
// if not x or not y then
56484: LD_VAR 0 7
56488: NOT
56489: IFTRUE 56498
56491: PUSH
56492: LD_VAR 0 8
56496: NOT
56497: OR
56498: IFFALSE 56502
// exit ;
56500: GO 56909
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56502: LD_ADDR_VAR 0 6
56506: PUSH
56507: LD_VAR 0 7
56511: PPUSH
56512: LD_INT 0
56514: PPUSH
56515: LD_INT 4
56517: PPUSH
56518: CALL_OW 272
56522: PUSH
56523: LD_VAR 0 8
56527: PPUSH
56528: LD_INT 0
56530: PPUSH
56531: LD_INT 4
56533: PPUSH
56534: CALL_OW 273
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_VAR 0 7
56547: PPUSH
56548: LD_INT 1
56550: PPUSH
56551: LD_INT 4
56553: PPUSH
56554: CALL_OW 272
56558: PUSH
56559: LD_VAR 0 8
56563: PPUSH
56564: LD_INT 1
56566: PPUSH
56567: LD_INT 4
56569: PPUSH
56570: CALL_OW 273
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_VAR 0 7
56583: PPUSH
56584: LD_INT 2
56586: PPUSH
56587: LD_INT 4
56589: PPUSH
56590: CALL_OW 272
56594: PUSH
56595: LD_VAR 0 8
56599: PPUSH
56600: LD_INT 2
56602: PPUSH
56603: LD_INT 4
56605: PPUSH
56606: CALL_OW 273
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_VAR 0 7
56619: PPUSH
56620: LD_INT 3
56622: PPUSH
56623: LD_INT 4
56625: PPUSH
56626: CALL_OW 272
56630: PUSH
56631: LD_VAR 0 8
56635: PPUSH
56636: LD_INT 3
56638: PPUSH
56639: LD_INT 4
56641: PPUSH
56642: CALL_OW 273
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_VAR 0 7
56655: PPUSH
56656: LD_INT 4
56658: PPUSH
56659: LD_INT 4
56661: PPUSH
56662: CALL_OW 272
56666: PUSH
56667: LD_VAR 0 8
56671: PPUSH
56672: LD_INT 4
56674: PPUSH
56675: LD_INT 4
56677: PPUSH
56678: CALL_OW 273
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_VAR 0 7
56691: PPUSH
56692: LD_INT 5
56694: PPUSH
56695: LD_INT 4
56697: PPUSH
56698: CALL_OW 272
56702: PUSH
56703: LD_VAR 0 8
56707: PPUSH
56708: LD_INT 5
56710: PPUSH
56711: LD_INT 4
56713: PPUSH
56714: CALL_OW 273
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// for i = tmp downto 1 do
56731: LD_ADDR_VAR 0 4
56735: PUSH
56736: DOUBLE
56737: LD_VAR 0 6
56741: INC
56742: ST_TO_ADDR
56743: LD_INT 1
56745: PUSH
56746: FOR_DOWNTO
56747: IFFALSE 56850
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56749: LD_VAR 0 6
56753: PUSH
56754: LD_VAR 0 4
56758: ARRAY
56759: PUSH
56760: LD_INT 1
56762: ARRAY
56763: PPUSH
56764: LD_VAR 0 6
56768: PUSH
56769: LD_VAR 0 4
56773: ARRAY
56774: PUSH
56775: LD_INT 2
56777: ARRAY
56778: PPUSH
56779: CALL_OW 488
56783: NOT
56784: IFTRUE 56826
56786: PUSH
56787: LD_VAR 0 6
56791: PUSH
56792: LD_VAR 0 4
56796: ARRAY
56797: PUSH
56798: LD_INT 1
56800: ARRAY
56801: PPUSH
56802: LD_VAR 0 6
56806: PUSH
56807: LD_VAR 0 4
56811: ARRAY
56812: PUSH
56813: LD_INT 2
56815: ARRAY
56816: PPUSH
56817: CALL_OW 428
56821: PUSH
56822: LD_INT 0
56824: NONEQUAL
56825: OR
56826: IFFALSE 56848
// tmp := Delete ( tmp , i ) ;
56828: LD_ADDR_VAR 0 6
56832: PUSH
56833: LD_VAR 0 6
56837: PPUSH
56838: LD_VAR 0 4
56842: PPUSH
56843: CALL_OW 3
56847: ST_TO_ADDR
56848: GO 56746
56850: POP
56851: POP
// j := GetClosestHex ( unit , tmp ) ;
56852: LD_ADDR_VAR 0 5
56856: PUSH
56857: LD_VAR 0 1
56861: PPUSH
56862: LD_VAR 0 6
56866: PPUSH
56867: CALL 56144 0 2
56871: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56872: LD_VAR 0 1
56876: PPUSH
56877: LD_VAR 0 5
56881: PUSH
56882: LD_INT 1
56884: ARRAY
56885: PPUSH
56886: LD_VAR 0 5
56890: PUSH
56891: LD_INT 2
56893: ARRAY
56894: PPUSH
56895: CALL_OW 111
// result := j ;
56899: LD_ADDR_VAR 0 3
56903: PUSH
56904: LD_VAR 0 5
56908: ST_TO_ADDR
// end ;
56909: LD_VAR 0 3
56913: RET
// export function PrepareApemanSoldier ( ) ; begin
56914: LD_INT 0
56916: PPUSH
// uc_nation := 0 ;
56917: LD_ADDR_OWVAR 21
56921: PUSH
56922: LD_INT 0
56924: ST_TO_ADDR
// hc_sex := sex_male ;
56925: LD_ADDR_OWVAR 27
56929: PUSH
56930: LD_INT 1
56932: ST_TO_ADDR
// hc_name :=  ;
56933: LD_ADDR_OWVAR 26
56937: PUSH
56938: LD_STRING 
56940: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56941: LD_ADDR_OWVAR 28
56945: PUSH
56946: LD_INT 15
56948: ST_TO_ADDR
// hc_gallery :=  ;
56949: LD_ADDR_OWVAR 33
56953: PUSH
56954: LD_STRING 
56956: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56957: LD_ADDR_OWVAR 31
56961: PUSH
56962: LD_INT 0
56964: PPUSH
56965: LD_INT 3
56967: PPUSH
56968: CALL_OW 12
56972: PUSH
56973: LD_INT 0
56975: PPUSH
56976: LD_INT 3
56978: PPUSH
56979: CALL_OW 12
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
56996: LD_ADDR_OWVAR 29
57000: PUSH
57001: LD_INT 10
57003: PUSH
57004: LD_INT 12
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// end ;
57011: LD_VAR 0 1
57015: RET
// export function PrepareApemanEngineer ( ) ; begin
57016: LD_INT 0
57018: PPUSH
// uc_nation := 0 ;
57019: LD_ADDR_OWVAR 21
57023: PUSH
57024: LD_INT 0
57026: ST_TO_ADDR
// hc_sex := sex_male ;
57027: LD_ADDR_OWVAR 27
57031: PUSH
57032: LD_INT 1
57034: ST_TO_ADDR
// hc_name :=  ;
57035: LD_ADDR_OWVAR 26
57039: PUSH
57040: LD_STRING 
57042: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57043: LD_ADDR_OWVAR 28
57047: PUSH
57048: LD_INT 16
57050: ST_TO_ADDR
// hc_gallery :=  ;
57051: LD_ADDR_OWVAR 33
57055: PUSH
57056: LD_STRING 
57058: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57059: LD_ADDR_OWVAR 31
57063: PUSH
57064: LD_INT 0
57066: PPUSH
57067: LD_INT 3
57069: PPUSH
57070: CALL_OW 12
57074: PUSH
57075: LD_INT 0
57077: PPUSH
57078: LD_INT 3
57080: PPUSH
57081: CALL_OW 12
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
57098: LD_ADDR_OWVAR 29
57102: PUSH
57103: LD_INT 10
57105: PUSH
57106: LD_INT 12
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// end ;
57113: LD_VAR 0 1
57117: RET
// export function PrepareApeman ( agressivity ) ; begin
57118: LD_INT 0
57120: PPUSH
// uc_side := 0 ;
57121: LD_ADDR_OWVAR 20
57125: PUSH
57126: LD_INT 0
57128: ST_TO_ADDR
// uc_nation := 0 ;
57129: LD_ADDR_OWVAR 21
57133: PUSH
57134: LD_INT 0
57136: ST_TO_ADDR
// hc_sex := sex_male ;
57137: LD_ADDR_OWVAR 27
57141: PUSH
57142: LD_INT 1
57144: ST_TO_ADDR
// hc_class := class_apeman ;
57145: LD_ADDR_OWVAR 28
57149: PUSH
57150: LD_INT 12
57152: ST_TO_ADDR
// hc_gallery :=  ;
57153: LD_ADDR_OWVAR 33
57157: PUSH
57158: LD_STRING 
57160: ST_TO_ADDR
// hc_name :=  ;
57161: LD_ADDR_OWVAR 26
57165: PUSH
57166: LD_STRING 
57168: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
57169: LD_ADDR_OWVAR 29
57173: PUSH
57174: LD_INT 10
57176: PUSH
57177: LD_INT 12
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// if agressivity = 0 then
57184: LD_VAR 0 1
57188: PUSH
57189: LD_INT 0
57191: EQUAL
57192: IFFALSE 57204
// hc_agressivity := 0 else
57194: LD_ADDR_OWVAR 35
57198: PUSH
57199: LD_INT 0
57201: ST_TO_ADDR
57202: GO 57225
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57204: LD_ADDR_OWVAR 35
57208: PUSH
57209: LD_VAR 0 1
57213: NEG
57214: PPUSH
57215: LD_VAR 0 1
57219: PPUSH
57220: CALL_OW 12
57224: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57225: LD_ADDR_OWVAR 31
57229: PUSH
57230: LD_INT 0
57232: PPUSH
57233: LD_INT 3
57235: PPUSH
57236: CALL_OW 12
57240: PUSH
57241: LD_INT 0
57243: PPUSH
57244: LD_INT 3
57246: PPUSH
57247: CALL_OW 12
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// end ;
57264: LD_VAR 0 2
57268: RET
// export function PrepareTiger ( agressivity ) ; begin
57269: LD_INT 0
57271: PPUSH
// uc_side := 0 ;
57272: LD_ADDR_OWVAR 20
57276: PUSH
57277: LD_INT 0
57279: ST_TO_ADDR
// uc_nation := 0 ;
57280: LD_ADDR_OWVAR 21
57284: PUSH
57285: LD_INT 0
57287: ST_TO_ADDR
// InitHc ;
57288: CALL_OW 19
// hc_class := class_tiger ;
57292: LD_ADDR_OWVAR 28
57296: PUSH
57297: LD_INT 14
57299: ST_TO_ADDR
// hc_gallery :=  ;
57300: LD_ADDR_OWVAR 33
57304: PUSH
57305: LD_STRING 
57307: ST_TO_ADDR
// hc_name :=  ;
57308: LD_ADDR_OWVAR 26
57312: PUSH
57313: LD_STRING 
57315: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57316: LD_ADDR_OWVAR 35
57320: PUSH
57321: LD_VAR 0 1
57325: NEG
57326: PPUSH
57327: LD_VAR 0 1
57331: PPUSH
57332: CALL_OW 12
57336: ST_TO_ADDR
// end ;
57337: LD_VAR 0 2
57341: RET
// export function PrepareEnchidna ( ) ; begin
57342: LD_INT 0
57344: PPUSH
// uc_side := 0 ;
57345: LD_ADDR_OWVAR 20
57349: PUSH
57350: LD_INT 0
57352: ST_TO_ADDR
// uc_nation := 0 ;
57353: LD_ADDR_OWVAR 21
57357: PUSH
57358: LD_INT 0
57360: ST_TO_ADDR
// InitHc ;
57361: CALL_OW 19
// hc_class := class_baggie ;
57365: LD_ADDR_OWVAR 28
57369: PUSH
57370: LD_INT 13
57372: ST_TO_ADDR
// hc_gallery :=  ;
57373: LD_ADDR_OWVAR 33
57377: PUSH
57378: LD_STRING 
57380: ST_TO_ADDR
// hc_name :=  ;
57381: LD_ADDR_OWVAR 26
57385: PUSH
57386: LD_STRING 
57388: ST_TO_ADDR
// end ;
57389: LD_VAR 0 1
57393: RET
// export function PrepareFrog ( ) ; begin
57394: LD_INT 0
57396: PPUSH
// uc_side := 0 ;
57397: LD_ADDR_OWVAR 20
57401: PUSH
57402: LD_INT 0
57404: ST_TO_ADDR
// uc_nation := 0 ;
57405: LD_ADDR_OWVAR 21
57409: PUSH
57410: LD_INT 0
57412: ST_TO_ADDR
// InitHc ;
57413: CALL_OW 19
// hc_class := class_frog ;
57417: LD_ADDR_OWVAR 28
57421: PUSH
57422: LD_INT 19
57424: ST_TO_ADDR
// hc_gallery :=  ;
57425: LD_ADDR_OWVAR 33
57429: PUSH
57430: LD_STRING 
57432: ST_TO_ADDR
// hc_name :=  ;
57433: LD_ADDR_OWVAR 26
57437: PUSH
57438: LD_STRING 
57440: ST_TO_ADDR
// end ;
57441: LD_VAR 0 1
57445: RET
// export function PrepareFish ( ) ; begin
57446: LD_INT 0
57448: PPUSH
// uc_side := 0 ;
57449: LD_ADDR_OWVAR 20
57453: PUSH
57454: LD_INT 0
57456: ST_TO_ADDR
// uc_nation := 0 ;
57457: LD_ADDR_OWVAR 21
57461: PUSH
57462: LD_INT 0
57464: ST_TO_ADDR
// InitHc ;
57465: CALL_OW 19
// hc_class := class_fish ;
57469: LD_ADDR_OWVAR 28
57473: PUSH
57474: LD_INT 20
57476: ST_TO_ADDR
// hc_gallery :=  ;
57477: LD_ADDR_OWVAR 33
57481: PUSH
57482: LD_STRING 
57484: ST_TO_ADDR
// hc_name :=  ;
57485: LD_ADDR_OWVAR 26
57489: PUSH
57490: LD_STRING 
57492: ST_TO_ADDR
// end ;
57493: LD_VAR 0 1
57497: RET
// export function PrepareBird ( ) ; begin
57498: LD_INT 0
57500: PPUSH
// uc_side := 0 ;
57501: LD_ADDR_OWVAR 20
57505: PUSH
57506: LD_INT 0
57508: ST_TO_ADDR
// uc_nation := 0 ;
57509: LD_ADDR_OWVAR 21
57513: PUSH
57514: LD_INT 0
57516: ST_TO_ADDR
// InitHc ;
57517: CALL_OW 19
// hc_class := class_phororhacos ;
57521: LD_ADDR_OWVAR 28
57525: PUSH
57526: LD_INT 18
57528: ST_TO_ADDR
// hc_gallery :=  ;
57529: LD_ADDR_OWVAR 33
57533: PUSH
57534: LD_STRING 
57536: ST_TO_ADDR
// hc_name :=  ;
57537: LD_ADDR_OWVAR 26
57541: PUSH
57542: LD_STRING 
57544: ST_TO_ADDR
// end ;
57545: LD_VAR 0 1
57549: RET
// export function PrepareHorse ( ) ; begin
57550: LD_INT 0
57552: PPUSH
// uc_side := 0 ;
57553: LD_ADDR_OWVAR 20
57557: PUSH
57558: LD_INT 0
57560: ST_TO_ADDR
// uc_nation := 0 ;
57561: LD_ADDR_OWVAR 21
57565: PUSH
57566: LD_INT 0
57568: ST_TO_ADDR
// InitHc ;
57569: CALL_OW 19
// hc_class := class_horse ;
57573: LD_ADDR_OWVAR 28
57577: PUSH
57578: LD_INT 21
57580: ST_TO_ADDR
// hc_gallery :=  ;
57581: LD_ADDR_OWVAR 33
57585: PUSH
57586: LD_STRING 
57588: ST_TO_ADDR
// hc_name :=  ;
57589: LD_ADDR_OWVAR 26
57593: PUSH
57594: LD_STRING 
57596: ST_TO_ADDR
// end ;
57597: LD_VAR 0 1
57601: RET
// export function PrepareMastodont ( ) ; begin
57602: LD_INT 0
57604: PPUSH
// uc_side := 0 ;
57605: LD_ADDR_OWVAR 20
57609: PUSH
57610: LD_INT 0
57612: ST_TO_ADDR
// uc_nation := 0 ;
57613: LD_ADDR_OWVAR 21
57617: PUSH
57618: LD_INT 0
57620: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57621: LD_ADDR_OWVAR 37
57625: PUSH
57626: LD_INT 31
57628: ST_TO_ADDR
// vc_control := control_rider ;
57629: LD_ADDR_OWVAR 38
57633: PUSH
57634: LD_INT 4
57636: ST_TO_ADDR
// end ;
57637: LD_VAR 0 1
57641: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57642: LD_INT 0
57644: PPUSH
57645: PPUSH
57646: PPUSH
// uc_side = 0 ;
57647: LD_ADDR_OWVAR 20
57651: PUSH
57652: LD_INT 0
57654: ST_TO_ADDR
// uc_nation = 0 ;
57655: LD_ADDR_OWVAR 21
57659: PUSH
57660: LD_INT 0
57662: ST_TO_ADDR
// InitHc_All ( ) ;
57663: CALL_OW 584
// InitVc ;
57667: CALL_OW 20
// if mastodonts then
57671: LD_VAR 0 6
57675: IFFALSE 57742
// for i = 1 to mastodonts do
57677: LD_ADDR_VAR 0 11
57681: PUSH
57682: DOUBLE
57683: LD_INT 1
57685: DEC
57686: ST_TO_ADDR
57687: LD_VAR 0 6
57691: PUSH
57692: FOR_TO
57693: IFFALSE 57740
// begin vc_chassis := 31 ;
57695: LD_ADDR_OWVAR 37
57699: PUSH
57700: LD_INT 31
57702: ST_TO_ADDR
// vc_control := control_rider ;
57703: LD_ADDR_OWVAR 38
57707: PUSH
57708: LD_INT 4
57710: ST_TO_ADDR
// animal := CreateVehicle ;
57711: LD_ADDR_VAR 0 12
57715: PUSH
57716: CALL_OW 45
57720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57721: LD_VAR 0 12
57725: PPUSH
57726: LD_VAR 0 8
57730: PPUSH
57731: LD_INT 0
57733: PPUSH
57734: CALL 59884 0 3
// end ;
57738: GO 57692
57740: POP
57741: POP
// if horses then
57742: LD_VAR 0 5
57746: IFFALSE 57813
// for i = 1 to horses do
57748: LD_ADDR_VAR 0 11
57752: PUSH
57753: DOUBLE
57754: LD_INT 1
57756: DEC
57757: ST_TO_ADDR
57758: LD_VAR 0 5
57762: PUSH
57763: FOR_TO
57764: IFFALSE 57811
// begin hc_class := 21 ;
57766: LD_ADDR_OWVAR 28
57770: PUSH
57771: LD_INT 21
57773: ST_TO_ADDR
// hc_gallery :=  ;
57774: LD_ADDR_OWVAR 33
57778: PUSH
57779: LD_STRING 
57781: ST_TO_ADDR
// animal := CreateHuman ;
57782: LD_ADDR_VAR 0 12
57786: PUSH
57787: CALL_OW 44
57791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57792: LD_VAR 0 12
57796: PPUSH
57797: LD_VAR 0 8
57801: PPUSH
57802: LD_INT 0
57804: PPUSH
57805: CALL 59884 0 3
// end ;
57809: GO 57763
57811: POP
57812: POP
// if birds then
57813: LD_VAR 0 1
57817: IFFALSE 57884
// for i = 1 to birds do
57819: LD_ADDR_VAR 0 11
57823: PUSH
57824: DOUBLE
57825: LD_INT 1
57827: DEC
57828: ST_TO_ADDR
57829: LD_VAR 0 1
57833: PUSH
57834: FOR_TO
57835: IFFALSE 57882
// begin hc_class := 18 ;
57837: LD_ADDR_OWVAR 28
57841: PUSH
57842: LD_INT 18
57844: ST_TO_ADDR
// hc_gallery =  ;
57845: LD_ADDR_OWVAR 33
57849: PUSH
57850: LD_STRING 
57852: ST_TO_ADDR
// animal := CreateHuman ;
57853: LD_ADDR_VAR 0 12
57857: PUSH
57858: CALL_OW 44
57862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57863: LD_VAR 0 12
57867: PPUSH
57868: LD_VAR 0 8
57872: PPUSH
57873: LD_INT 0
57875: PPUSH
57876: CALL 59884 0 3
// end ;
57880: GO 57834
57882: POP
57883: POP
// if tigers then
57884: LD_VAR 0 2
57888: IFFALSE 57972
// for i = 1 to tigers do
57890: LD_ADDR_VAR 0 11
57894: PUSH
57895: DOUBLE
57896: LD_INT 1
57898: DEC
57899: ST_TO_ADDR
57900: LD_VAR 0 2
57904: PUSH
57905: FOR_TO
57906: IFFALSE 57970
// begin hc_class = class_tiger ;
57908: LD_ADDR_OWVAR 28
57912: PUSH
57913: LD_INT 14
57915: ST_TO_ADDR
// hc_gallery =  ;
57916: LD_ADDR_OWVAR 33
57920: PUSH
57921: LD_STRING 
57923: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57924: LD_ADDR_OWVAR 35
57928: PUSH
57929: LD_INT 7
57931: NEG
57932: PPUSH
57933: LD_INT 7
57935: PPUSH
57936: CALL_OW 12
57940: ST_TO_ADDR
// animal := CreateHuman ;
57941: LD_ADDR_VAR 0 12
57945: PUSH
57946: CALL_OW 44
57950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57951: LD_VAR 0 12
57955: PPUSH
57956: LD_VAR 0 8
57960: PPUSH
57961: LD_INT 0
57963: PPUSH
57964: CALL 59884 0 3
// end ;
57968: GO 57905
57970: POP
57971: POP
// if apemans then
57972: LD_VAR 0 3
57976: IFFALSE 58099
// for i = 1 to apemans do
57978: LD_ADDR_VAR 0 11
57982: PUSH
57983: DOUBLE
57984: LD_INT 1
57986: DEC
57987: ST_TO_ADDR
57988: LD_VAR 0 3
57992: PUSH
57993: FOR_TO
57994: IFFALSE 58097
// begin hc_class = class_apeman ;
57996: LD_ADDR_OWVAR 28
58000: PUSH
58001: LD_INT 12
58003: ST_TO_ADDR
// hc_gallery =  ;
58004: LD_ADDR_OWVAR 33
58008: PUSH
58009: LD_STRING 
58011: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58012: LD_ADDR_OWVAR 35
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PPUSH
58021: LD_INT 2
58023: PPUSH
58024: CALL_OW 12
58028: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58029: LD_ADDR_OWVAR 31
58033: PUSH
58034: LD_INT 1
58036: PPUSH
58037: LD_INT 3
58039: PPUSH
58040: CALL_OW 12
58044: PUSH
58045: LD_INT 1
58047: PPUSH
58048: LD_INT 3
58050: PPUSH
58051: CALL_OW 12
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: ST_TO_ADDR
// animal := CreateHuman ;
58068: LD_ADDR_VAR 0 12
58072: PUSH
58073: CALL_OW 44
58077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58078: LD_VAR 0 12
58082: PPUSH
58083: LD_VAR 0 8
58087: PPUSH
58088: LD_INT 0
58090: PPUSH
58091: CALL 59884 0 3
// end ;
58095: GO 57993
58097: POP
58098: POP
// if enchidnas then
58099: LD_VAR 0 4
58103: IFFALSE 58170
// for i = 1 to enchidnas do
58105: LD_ADDR_VAR 0 11
58109: PUSH
58110: DOUBLE
58111: LD_INT 1
58113: DEC
58114: ST_TO_ADDR
58115: LD_VAR 0 4
58119: PUSH
58120: FOR_TO
58121: IFFALSE 58168
// begin hc_class = 13 ;
58123: LD_ADDR_OWVAR 28
58127: PUSH
58128: LD_INT 13
58130: ST_TO_ADDR
// hc_gallery =  ;
58131: LD_ADDR_OWVAR 33
58135: PUSH
58136: LD_STRING 
58138: ST_TO_ADDR
// animal := CreateHuman ;
58139: LD_ADDR_VAR 0 12
58143: PUSH
58144: CALL_OW 44
58148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58149: LD_VAR 0 12
58153: PPUSH
58154: LD_VAR 0 8
58158: PPUSH
58159: LD_INT 0
58161: PPUSH
58162: CALL 59884 0 3
// end ;
58166: GO 58120
58168: POP
58169: POP
// if fishes then
58170: LD_VAR 0 7
58174: IFFALSE 58241
// for i = 1 to fishes do
58176: LD_ADDR_VAR 0 11
58180: PUSH
58181: DOUBLE
58182: LD_INT 1
58184: DEC
58185: ST_TO_ADDR
58186: LD_VAR 0 7
58190: PUSH
58191: FOR_TO
58192: IFFALSE 58239
// begin hc_class = 20 ;
58194: LD_ADDR_OWVAR 28
58198: PUSH
58199: LD_INT 20
58201: ST_TO_ADDR
// hc_gallery =  ;
58202: LD_ADDR_OWVAR 33
58206: PUSH
58207: LD_STRING 
58209: ST_TO_ADDR
// animal := CreateHuman ;
58210: LD_ADDR_VAR 0 12
58214: PUSH
58215: CALL_OW 44
58219: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58220: LD_VAR 0 12
58224: PPUSH
58225: LD_VAR 0 9
58229: PPUSH
58230: LD_INT 0
58232: PPUSH
58233: CALL 59884 0 3
// end ;
58237: GO 58191
58239: POP
58240: POP
// end ;
58241: LD_VAR 0 10
58245: RET
// export function WantHeal ( sci , unit ) ; begin
58246: LD_INT 0
58248: PPUSH
// if GetTaskList ( sci ) > 0 then
58249: LD_VAR 0 1
58253: PPUSH
58254: CALL_OW 437
58258: PUSH
58259: LD_INT 0
58261: GREATER
58262: IFFALSE 58334
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL_OW 437
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: PUSH
58282: LD_STRING l
58284: EQUAL
58285: IFFALSE 58312
58287: PUSH
58288: LD_VAR 0 1
58292: PPUSH
58293: CALL_OW 437
58297: PUSH
58298: LD_INT 1
58300: ARRAY
58301: PUSH
58302: LD_INT 4
58304: ARRAY
58305: PUSH
58306: LD_VAR 0 2
58310: EQUAL
58311: AND
58312: IFFALSE 58324
// result := true else
58314: LD_ADDR_VAR 0 3
58318: PUSH
58319: LD_INT 1
58321: ST_TO_ADDR
58322: GO 58332
// result := false ;
58324: LD_ADDR_VAR 0 3
58328: PUSH
58329: LD_INT 0
58331: ST_TO_ADDR
// end else
58332: GO 58342
// result := false ;
58334: LD_ADDR_VAR 0 3
58338: PUSH
58339: LD_INT 0
58341: ST_TO_ADDR
// end ;
58342: LD_VAR 0 3
58346: RET
// export function HealTarget ( sci ) ; begin
58347: LD_INT 0
58349: PPUSH
// if not sci then
58350: LD_VAR 0 1
58354: NOT
58355: IFFALSE 58359
// exit ;
58357: GO 58424
// result := 0 ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// if GetTaskList ( sci ) then
58367: LD_VAR 0 1
58371: PPUSH
58372: CALL_OW 437
58376: IFFALSE 58424
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58378: LD_VAR 0 1
58382: PPUSH
58383: CALL_OW 437
58387: PUSH
58388: LD_INT 1
58390: ARRAY
58391: PUSH
58392: LD_INT 1
58394: ARRAY
58395: PUSH
58396: LD_STRING l
58398: EQUAL
58399: IFFALSE 58424
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58401: LD_ADDR_VAR 0 2
58405: PUSH
58406: LD_VAR 0 1
58410: PPUSH
58411: CALL_OW 437
58415: PUSH
58416: LD_INT 1
58418: ARRAY
58419: PUSH
58420: LD_INT 4
58422: ARRAY
58423: ST_TO_ADDR
// end ;
58424: LD_VAR 0 2
58428: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58429: LD_INT 0
58431: PPUSH
58432: PPUSH
58433: PPUSH
58434: PPUSH
// if not base_units then
58435: LD_VAR 0 1
58439: NOT
58440: IFFALSE 58444
// exit ;
58442: GO 58531
// result := false ;
58444: LD_ADDR_VAR 0 2
58448: PUSH
58449: LD_INT 0
58451: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58452: LD_ADDR_VAR 0 5
58456: PUSH
58457: LD_VAR 0 1
58461: PPUSH
58462: LD_INT 21
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PPUSH
58472: CALL_OW 72
58476: ST_TO_ADDR
// if not tmp then
58477: LD_VAR 0 5
58481: NOT
58482: IFFALSE 58486
// exit ;
58484: GO 58531
// for i in tmp do
58486: LD_ADDR_VAR 0 3
58490: PUSH
58491: LD_VAR 0 5
58495: PUSH
58496: FOR_IN
58497: IFFALSE 58529
// begin result := EnemyInRange ( i , 22 ) ;
58499: LD_ADDR_VAR 0 2
58503: PUSH
58504: LD_VAR 0 3
58508: PPUSH
58509: LD_INT 22
58511: PPUSH
58512: CALL 55946 0 2
58516: ST_TO_ADDR
// if result then
58517: LD_VAR 0 2
58521: IFFALSE 58527
// exit ;
58523: POP
58524: POP
58525: GO 58531
// end ;
58527: GO 58496
58529: POP
58530: POP
// end ;
58531: LD_VAR 0 2
58535: RET
// export function FilterByTag ( units , tag ) ; begin
58536: LD_INT 0
58538: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58539: LD_ADDR_VAR 0 3
58543: PUSH
58544: LD_VAR 0 1
58548: PPUSH
58549: LD_INT 120
58551: PUSH
58552: LD_VAR 0 2
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PPUSH
58561: CALL_OW 72
58565: ST_TO_ADDR
// end ;
58566: LD_VAR 0 3
58570: RET
// export function IsDriver ( un ) ; begin
58571: LD_INT 0
58573: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58574: LD_ADDR_VAR 0 2
58578: PUSH
58579: LD_VAR 0 1
58583: PUSH
58584: LD_INT 55
58586: PUSH
58587: EMPTY
58588: LIST
58589: PPUSH
58590: CALL_OW 69
58594: IN
58595: ST_TO_ADDR
// end ;
58596: LD_VAR 0 2
58600: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58601: LD_INT 0
58603: PPUSH
58604: PPUSH
// list := [ ] ;
58605: LD_ADDR_VAR 0 5
58609: PUSH
58610: EMPTY
58611: ST_TO_ADDR
// case d of 0 :
58612: LD_VAR 0 3
58616: PUSH
58617: LD_INT 0
58619: DOUBLE
58620: EQUAL
58621: IFTRUE 58625
58623: GO 58758
58625: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58626: LD_ADDR_VAR 0 5
58630: PUSH
58631: LD_VAR 0 1
58635: PUSH
58636: LD_INT 4
58638: MINUS
58639: PUSH
58640: LD_VAR 0 2
58644: PUSH
58645: LD_INT 4
58647: MINUS
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: LD_VAR 0 1
58661: PUSH
58662: LD_INT 3
58664: MINUS
58665: PUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: PUSH
58679: LD_VAR 0 1
58683: PUSH
58684: LD_INT 4
58686: PLUS
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 4
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: PUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_INT 3
58708: PLUS
58709: PUSH
58710: LD_VAR 0 2
58714: PUSH
58715: LD_INT 3
58717: PLUS
58718: PUSH
58719: LD_INT 5
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: PUSH
58727: LD_VAR 0 1
58731: PUSH
58732: LD_VAR 0 2
58736: PUSH
58737: LD_INT 4
58739: PLUS
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// end ; 1 :
58756: GO 59456
58758: LD_INT 1
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58766
58764: GO 58899
58766: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58767: LD_ADDR_VAR 0 5
58771: PUSH
58772: LD_VAR 0 1
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: LD_INT 4
58784: MINUS
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: PUSH
58794: LD_VAR 0 1
58798: PUSH
58799: LD_INT 3
58801: MINUS
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 3
58810: MINUS
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: PUSH
58820: LD_VAR 0 1
58824: PUSH
58825: LD_INT 4
58827: MINUS
58828: PUSH
58829: LD_VAR 0 2
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: PUSH
58842: LD_VAR 0 1
58846: PUSH
58847: LD_VAR 0 2
58851: PUSH
58852: LD_INT 3
58854: PLUS
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: PUSH
58864: LD_VAR 0 1
58868: PUSH
58869: LD_INT 4
58871: PLUS
58872: PUSH
58873: LD_VAR 0 2
58877: PUSH
58878: LD_INT 4
58880: PLUS
58881: PUSH
58882: LD_INT 5
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: ST_TO_ADDR
// end ; 2 :
58897: GO 59456
58899: LD_INT 2
58901: DOUBLE
58902: EQUAL
58903: IFTRUE 58907
58905: GO 59036
58907: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58908: LD_ADDR_VAR 0 5
58912: PUSH
58913: LD_VAR 0 1
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: LD_INT 3
58925: MINUS
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: PUSH
58935: LD_VAR 0 1
58939: PUSH
58940: LD_INT 4
58942: PLUS
58943: PUSH
58944: LD_VAR 0 2
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_VAR 0 2
58966: PUSH
58967: LD_INT 4
58969: PLUS
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_INT 3
58986: MINUS
58987: PUSH
58988: LD_VAR 0 2
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: LD_VAR 0 1
59005: PUSH
59006: LD_INT 4
59008: MINUS
59009: PUSH
59010: LD_VAR 0 2
59014: PUSH
59015: LD_INT 4
59017: MINUS
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// end ; 3 :
59034: GO 59456
59036: LD_INT 3
59038: DOUBLE
59039: EQUAL
59040: IFTRUE 59044
59042: GO 59177
59044: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59045: LD_ADDR_VAR 0 5
59049: PUSH
59050: LD_VAR 0 1
59054: PUSH
59055: LD_INT 3
59057: PLUS
59058: PUSH
59059: LD_VAR 0 2
59063: PUSH
59064: LD_INT 4
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: PUSH
59072: LD_VAR 0 1
59076: PUSH
59077: LD_INT 4
59079: PLUS
59080: PUSH
59081: LD_VAR 0 2
59085: PUSH
59086: LD_INT 4
59088: PLUS
59089: PUSH
59090: LD_INT 5
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: PUSH
59098: LD_VAR 0 1
59102: PUSH
59103: LD_INT 4
59105: MINUS
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: PUSH
59120: LD_VAR 0 1
59124: PUSH
59125: LD_VAR 0 2
59129: PUSH
59130: LD_INT 4
59132: MINUS
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: PUSH
59142: LD_VAR 0 1
59146: PUSH
59147: LD_INT 3
59149: MINUS
59150: PUSH
59151: LD_VAR 0 2
59155: PUSH
59156: LD_INT 3
59158: MINUS
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// end ; 4 :
59175: GO 59456
59177: LD_INT 4
59179: DOUBLE
59180: EQUAL
59181: IFTRUE 59185
59183: GO 59318
59185: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59186: LD_ADDR_VAR 0 5
59190: PUSH
59191: LD_VAR 0 1
59195: PUSH
59196: LD_VAR 0 2
59200: PUSH
59201: LD_INT 4
59203: PLUS
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: PUSH
59213: LD_VAR 0 1
59217: PUSH
59218: LD_INT 3
59220: PLUS
59221: PUSH
59222: LD_VAR 0 2
59226: PUSH
59227: LD_INT 3
59229: PLUS
59230: PUSH
59231: LD_INT 5
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: PUSH
59239: LD_VAR 0 1
59243: PUSH
59244: LD_INT 4
59246: PLUS
59247: PUSH
59248: LD_VAR 0 2
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_VAR 0 2
59270: PUSH
59271: LD_INT 3
59273: MINUS
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: PUSH
59283: LD_VAR 0 1
59287: PUSH
59288: LD_INT 4
59290: MINUS
59291: PUSH
59292: LD_VAR 0 2
59296: PUSH
59297: LD_INT 4
59299: MINUS
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// end ; 5 :
59316: GO 59456
59318: LD_INT 5
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59326
59324: GO 59455
59326: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59327: LD_ADDR_VAR 0 5
59331: PUSH
59332: LD_VAR 0 1
59336: PUSH
59337: LD_INT 4
59339: MINUS
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: PUSH
59354: LD_VAR 0 1
59358: PUSH
59359: LD_VAR 0 2
59363: PUSH
59364: LD_INT 4
59366: MINUS
59367: PUSH
59368: LD_INT 3
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: PUSH
59376: LD_VAR 0 1
59380: PUSH
59381: LD_INT 4
59383: PLUS
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_INT 4
59392: PLUS
59393: PUSH
59394: LD_INT 5
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: PUSH
59402: LD_VAR 0 1
59406: PUSH
59407: LD_INT 3
59409: PLUS
59410: PUSH
59411: LD_VAR 0 2
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: LD_VAR 0 1
59428: PUSH
59429: LD_VAR 0 2
59433: PUSH
59434: LD_INT 3
59436: PLUS
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// end ; end ;
59453: GO 59456
59455: POP
// result := list ;
59456: LD_ADDR_VAR 0 4
59460: PUSH
59461: LD_VAR 0 5
59465: ST_TO_ADDR
// end ;
59466: LD_VAR 0 4
59470: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59471: LD_INT 0
59473: PPUSH
59474: PPUSH
59475: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59476: LD_VAR 0 1
59480: NOT
59481: IFTRUE 59509
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: LD_INT 4
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: IN
59507: NOT
59508: OR
59509: IFFALSE 59513
// exit ;
59511: GO 59596
// tmp := [ ] ;
59513: LD_ADDR_VAR 0 5
59517: PUSH
59518: EMPTY
59519: ST_TO_ADDR
// for i in units do
59520: LD_ADDR_VAR 0 4
59524: PUSH
59525: LD_VAR 0 1
59529: PUSH
59530: FOR_IN
59531: IFFALSE 59565
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59533: LD_ADDR_VAR 0 5
59537: PUSH
59538: LD_VAR 0 5
59542: PPUSH
59543: LD_VAR 0 4
59547: PPUSH
59548: LD_VAR 0 2
59552: PPUSH
59553: CALL_OW 259
59557: PPUSH
59558: CALL 60991 0 2
59562: ST_TO_ADDR
59563: GO 59530
59565: POP
59566: POP
// if not tmp then
59567: LD_VAR 0 5
59571: NOT
59572: IFFALSE 59576
// exit ;
59574: GO 59596
// result := SortListByListDesc ( units , tmp ) ;
59576: LD_ADDR_VAR 0 3
59580: PUSH
59581: LD_VAR 0 1
59585: PPUSH
59586: LD_VAR 0 5
59590: PPUSH
59591: CALL_OW 77
59595: ST_TO_ADDR
// end ;
59596: LD_VAR 0 3
59600: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59601: LD_INT 0
59603: PPUSH
59604: PPUSH
59605: PPUSH
// result := false ;
59606: LD_ADDR_VAR 0 3
59610: PUSH
59611: LD_INT 0
59613: ST_TO_ADDR
// if not building then
59614: LD_VAR 0 2
59618: NOT
59619: IFFALSE 59623
// exit ;
59621: GO 59767
// x := GetX ( building ) ;
59623: LD_ADDR_VAR 0 4
59627: PUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: CALL_OW 250
59637: ST_TO_ADDR
// y := GetY ( building ) ;
59638: LD_ADDR_VAR 0 5
59642: PUSH
59643: LD_VAR 0 2
59647: PPUSH
59648: CALL_OW 251
59652: ST_TO_ADDR
// if not x or not y then
59653: LD_VAR 0 4
59657: NOT
59658: IFTRUE 59667
59660: PUSH
59661: LD_VAR 0 5
59665: NOT
59666: OR
59667: IFFALSE 59671
// exit ;
59669: GO 59767
// if GetTaskList ( unit ) then
59671: LD_VAR 0 1
59675: PPUSH
59676: CALL_OW 437
59680: IFFALSE 59767
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59682: LD_STRING e
59684: PUSH
59685: LD_VAR 0 1
59689: PPUSH
59690: CALL_OW 437
59694: PUSH
59695: LD_INT 1
59697: ARRAY
59698: PUSH
59699: LD_INT 1
59701: ARRAY
59702: EQUAL
59703: IFFALSE 59730
59705: PUSH
59706: LD_VAR 0 4
59710: PUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 437
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: PUSH
59725: LD_INT 2
59727: ARRAY
59728: EQUAL
59729: AND
59730: IFFALSE 59757
59732: PUSH
59733: LD_VAR 0 5
59737: PUSH
59738: LD_VAR 0 1
59742: PPUSH
59743: CALL_OW 437
59747: PUSH
59748: LD_INT 1
59750: ARRAY
59751: PUSH
59752: LD_INT 3
59754: ARRAY
59755: EQUAL
59756: AND
59757: IFFALSE 59767
// result := true end ;
59759: LD_ADDR_VAR 0 3
59763: PUSH
59764: LD_INT 1
59766: ST_TO_ADDR
// end ;
59767: LD_VAR 0 3
59771: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59772: LD_INT 0
59774: PPUSH
// result := false ;
59775: LD_ADDR_VAR 0 4
59779: PUSH
59780: LD_INT 0
59782: ST_TO_ADDR
// if GetTaskList ( unit ) then
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 437
59792: IFFALSE 59879
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59794: LD_STRING M
59796: PUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 437
59806: PUSH
59807: LD_INT 1
59809: ARRAY
59810: PUSH
59811: LD_INT 1
59813: ARRAY
59814: EQUAL
59815: IFFALSE 59842
59817: PUSH
59818: LD_VAR 0 2
59822: PUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: CALL_OW 437
59832: PUSH
59833: LD_INT 1
59835: ARRAY
59836: PUSH
59837: LD_INT 2
59839: ARRAY
59840: EQUAL
59841: AND
59842: IFFALSE 59869
59844: PUSH
59845: LD_VAR 0 3
59849: PUSH
59850: LD_VAR 0 1
59854: PPUSH
59855: CALL_OW 437
59859: PUSH
59860: LD_INT 1
59862: ARRAY
59863: PUSH
59864: LD_INT 3
59866: ARRAY
59867: EQUAL
59868: AND
59869: IFFALSE 59879
// result := true ;
59871: LD_ADDR_VAR 0 4
59875: PUSH
59876: LD_INT 1
59878: ST_TO_ADDR
// end ; end ;
59879: LD_VAR 0 4
59883: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59884: LD_INT 0
59886: PPUSH
59887: PPUSH
59888: PPUSH
59889: PPUSH
// if not unit or not area then
59890: LD_VAR 0 1
59894: NOT
59895: IFTRUE 59904
59897: PUSH
59898: LD_VAR 0 2
59902: NOT
59903: OR
59904: IFFALSE 59908
// exit ;
59906: GO 60084
// tmp := AreaToList ( area , i ) ;
59908: LD_ADDR_VAR 0 6
59912: PUSH
59913: LD_VAR 0 2
59917: PPUSH
59918: LD_VAR 0 5
59922: PPUSH
59923: CALL_OW 517
59927: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59928: LD_ADDR_VAR 0 5
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_VAR 0 6
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: PUSH
59947: FOR_TO
59948: IFFALSE 60082
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59950: LD_ADDR_VAR 0 7
59954: PUSH
59955: LD_VAR 0 6
59959: PUSH
59960: LD_INT 1
59962: ARRAY
59963: PUSH
59964: LD_VAR 0 5
59968: ARRAY
59969: PUSH
59970: LD_VAR 0 6
59974: PUSH
59975: LD_INT 2
59977: ARRAY
59978: PUSH
59979: LD_VAR 0 5
59983: ARRAY
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59989: LD_INT 92
59991: PUSH
59992: LD_VAR 0 7
59996: PUSH
59997: LD_INT 1
59999: ARRAY
60000: PUSH
60001: LD_VAR 0 7
60005: PUSH
60006: LD_INT 2
60008: ARRAY
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: PPUSH
60019: CALL_OW 69
60023: PUSH
60024: LD_INT 0
60026: EQUAL
60027: IFFALSE 60080
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60029: LD_VAR 0 1
60033: PPUSH
60034: LD_VAR 0 7
60038: PUSH
60039: LD_INT 1
60041: ARRAY
60042: PPUSH
60043: LD_VAR 0 7
60047: PUSH
60048: LD_INT 2
60050: ARRAY
60051: PPUSH
60052: LD_VAR 0 3
60056: PPUSH
60057: CALL_OW 48
// result := IsPlaced ( unit ) ;
60061: LD_ADDR_VAR 0 4
60065: PUSH
60066: LD_VAR 0 1
60070: PPUSH
60071: CALL_OW 305
60075: ST_TO_ADDR
// exit ;
60076: POP
60077: POP
60078: GO 60084
// end ; end ;
60080: GO 59947
60082: POP
60083: POP
// end ;
60084: LD_VAR 0 4
60088: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60089: LD_INT 0
60091: PPUSH
60092: PPUSH
60093: PPUSH
// if not side or side > 8 then
60094: LD_VAR 0 1
60098: NOT
60099: IFTRUE 60111
60101: PUSH
60102: LD_VAR 0 1
60106: PUSH
60107: LD_INT 8
60109: GREATER
60110: OR
60111: IFFALSE 60115
// exit ;
60113: GO 60302
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60115: LD_ADDR_VAR 0 4
60119: PUSH
60120: LD_INT 22
60122: PUSH
60123: LD_VAR 0 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 21
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PPUSH
60146: CALL_OW 69
60150: ST_TO_ADDR
// if not tmp then
60151: LD_VAR 0 4
60155: NOT
60156: IFFALSE 60160
// exit ;
60158: GO 60302
// enable_addtolog := true ;
60160: LD_ADDR_OWVAR 81
60164: PUSH
60165: LD_INT 1
60167: ST_TO_ADDR
// AddToLog ( [ ) ;
60168: LD_STRING [
60170: PPUSH
60171: CALL_OW 561
// for i in tmp do
60175: LD_ADDR_VAR 0 3
60179: PUSH
60180: LD_VAR 0 4
60184: PUSH
60185: FOR_IN
60186: IFFALSE 60293
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60188: LD_STRING [
60190: PUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: CALL_OW 266
60200: STR
60201: PUSH
60202: LD_STRING , 
60204: STR
60205: PUSH
60206: LD_VAR 0 3
60210: PPUSH
60211: CALL_OW 250
60215: STR
60216: PUSH
60217: LD_STRING , 
60219: STR
60220: PUSH
60221: LD_VAR 0 3
60225: PPUSH
60226: CALL_OW 251
60230: STR
60231: PUSH
60232: LD_STRING , 
60234: STR
60235: PUSH
60236: LD_VAR 0 3
60240: PPUSH
60241: CALL_OW 254
60245: STR
60246: PUSH
60247: LD_STRING , 
60249: STR
60250: PUSH
60251: LD_VAR 0 3
60255: PPUSH
60256: LD_INT 1
60258: PPUSH
60259: CALL_OW 268
60263: STR
60264: PUSH
60265: LD_STRING , 
60267: STR
60268: PUSH
60269: LD_VAR 0 3
60273: PPUSH
60274: LD_INT 2
60276: PPUSH
60277: CALL_OW 268
60281: STR
60282: PUSH
60283: LD_STRING ],
60285: STR
60286: PPUSH
60287: CALL_OW 561
// end ;
60291: GO 60185
60293: POP
60294: POP
// AddToLog ( ]; ) ;
60295: LD_STRING ];
60297: PPUSH
60298: CALL_OW 561
// end ;
60302: LD_VAR 0 2
60306: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60307: LD_INT 0
60309: PPUSH
60310: PPUSH
60311: PPUSH
60312: PPUSH
60313: PPUSH
// if not area or not rate or not max then
60314: LD_VAR 0 1
60318: NOT
60319: IFTRUE 60328
60321: PUSH
60322: LD_VAR 0 2
60326: NOT
60327: OR
60328: IFTRUE 60337
60330: PUSH
60331: LD_VAR 0 4
60335: NOT
60336: OR
60337: IFFALSE 60341
// exit ;
60339: GO 60530
// while 1 do
60341: LD_INT 1
60343: IFFALSE 60530
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60345: LD_ADDR_VAR 0 9
60349: PUSH
60350: LD_VAR 0 1
60354: PPUSH
60355: LD_INT 1
60357: PPUSH
60358: CALL_OW 287
60362: PUSH
60363: LD_INT 10
60365: MUL
60366: ST_TO_ADDR
// r := rate / 10 ;
60367: LD_ADDR_VAR 0 7
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 10
60379: DIVREAL
60380: ST_TO_ADDR
// time := 1 1$00 ;
60381: LD_ADDR_VAR 0 8
60385: PUSH
60386: LD_INT 2100
60388: ST_TO_ADDR
// if amount < min then
60389: LD_VAR 0 9
60393: PUSH
60394: LD_VAR 0 3
60398: LESS
60399: IFFALSE 60417
// r := r * 2 else
60401: LD_ADDR_VAR 0 7
60405: PUSH
60406: LD_VAR 0 7
60410: PUSH
60411: LD_INT 2
60413: MUL
60414: ST_TO_ADDR
60415: GO 60443
// if amount > max then
60417: LD_VAR 0 9
60421: PUSH
60422: LD_VAR 0 4
60426: GREATER
60427: IFFALSE 60443
// r := r / 2 ;
60429: LD_ADDR_VAR 0 7
60433: PUSH
60434: LD_VAR 0 7
60438: PUSH
60439: LD_INT 2
60441: DIVREAL
60442: ST_TO_ADDR
// time := time / r ;
60443: LD_ADDR_VAR 0 8
60447: PUSH
60448: LD_VAR 0 8
60452: PUSH
60453: LD_VAR 0 7
60457: DIVREAL
60458: ST_TO_ADDR
// if time < 0 then
60459: LD_VAR 0 8
60463: PUSH
60464: LD_INT 0
60466: LESS
60467: IFFALSE 60484
// time := time * - 1 ;
60469: LD_ADDR_VAR 0 8
60473: PUSH
60474: LD_VAR 0 8
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: MUL
60483: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60484: LD_VAR 0 8
60488: PUSH
60489: LD_INT 35
60491: PPUSH
60492: LD_INT 875
60494: PPUSH
60495: CALL_OW 12
60499: PLUS
60500: PPUSH
60501: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60505: LD_INT 1
60507: PPUSH
60508: LD_INT 5
60510: PPUSH
60511: CALL_OW 12
60515: PPUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_INT 1
60523: PPUSH
60524: CALL_OW 55
// end ;
60528: GO 60341
// end ;
60530: LD_VAR 0 5
60534: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60535: LD_INT 0
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
60542: PPUSH
60543: PPUSH
60544: PPUSH
// if not turrets or not factories then
60545: LD_VAR 0 1
60549: NOT
60550: IFTRUE 60559
60552: PUSH
60553: LD_VAR 0 2
60557: NOT
60558: OR
60559: IFFALSE 60563
// exit ;
60561: GO 60870
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60563: LD_ADDR_VAR 0 10
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: LD_INT 6
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: LD_INT 4
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: LD_INT 5
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 24
60605: PUSH
60606: LD_INT 25
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 23
60615: PUSH
60616: LD_INT 27
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 42
60629: PUSH
60630: LD_INT 43
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 44
60639: PUSH
60640: LD_INT 46
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 45
60649: PUSH
60650: LD_INT 47
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// result := [ ] ;
60667: LD_ADDR_VAR 0 3
60671: PUSH
60672: EMPTY
60673: ST_TO_ADDR
// for i in turrets do
60674: LD_ADDR_VAR 0 4
60678: PUSH
60679: LD_VAR 0 1
60683: PUSH
60684: FOR_IN
60685: IFFALSE 60868
// begin nat := GetNation ( i ) ;
60687: LD_ADDR_VAR 0 7
60691: PUSH
60692: LD_VAR 0 4
60696: PPUSH
60697: CALL_OW 248
60701: ST_TO_ADDR
// weapon := 0 ;
60702: LD_ADDR_VAR 0 8
60706: PUSH
60707: LD_INT 0
60709: ST_TO_ADDR
// if not nat then
60710: LD_VAR 0 7
60714: NOT
60715: IFFALSE 60719
// continue ;
60717: GO 60684
// for j in list [ nat ] do
60719: LD_ADDR_VAR 0 5
60723: PUSH
60724: LD_VAR 0 10
60728: PUSH
60729: LD_VAR 0 7
60733: ARRAY
60734: PUSH
60735: FOR_IN
60736: IFFALSE 60777
// if GetBWeapon ( i ) = j [ 1 ] then
60738: LD_VAR 0 4
60742: PPUSH
60743: CALL_OW 269
60747: PUSH
60748: LD_VAR 0 5
60752: PUSH
60753: LD_INT 1
60755: ARRAY
60756: EQUAL
60757: IFFALSE 60775
// begin weapon := j [ 2 ] ;
60759: LD_ADDR_VAR 0 8
60763: PUSH
60764: LD_VAR 0 5
60768: PUSH
60769: LD_INT 2
60771: ARRAY
60772: ST_TO_ADDR
// break ;
60773: GO 60777
// end ;
60775: GO 60735
60777: POP
60778: POP
// if not weapon then
60779: LD_VAR 0 8
60783: NOT
60784: IFFALSE 60788
// continue ;
60786: GO 60684
// for k in factories do
60788: LD_ADDR_VAR 0 6
60792: PUSH
60793: LD_VAR 0 2
60797: PUSH
60798: FOR_IN
60799: IFFALSE 60864
// begin weapons := AvailableWeaponList ( k ) ;
60801: LD_ADDR_VAR 0 9
60805: PUSH
60806: LD_VAR 0 6
60810: PPUSH
60811: CALL_OW 478
60815: ST_TO_ADDR
// if not weapons then
60816: LD_VAR 0 9
60820: NOT
60821: IFFALSE 60825
// continue ;
60823: GO 60798
// if weapon in weapons then
60825: LD_VAR 0 8
60829: PUSH
60830: LD_VAR 0 9
60834: IN
60835: IFFALSE 60862
// begin result := [ i , weapon ] ;
60837: LD_ADDR_VAR 0 3
60841: PUSH
60842: LD_VAR 0 4
60846: PUSH
60847: LD_VAR 0 8
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: ST_TO_ADDR
// exit ;
60856: POP
60857: POP
60858: POP
60859: POP
60860: GO 60870
// end ; end ;
60862: GO 60798
60864: POP
60865: POP
// end ;
60866: GO 60684
60868: POP
60869: POP
// end ;
60870: LD_VAR 0 3
60874: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60875: LD_INT 0
60877: PPUSH
// if not side or side > 8 then
60878: LD_VAR 0 3
60882: NOT
60883: IFTRUE 60895
60885: PUSH
60886: LD_VAR 0 3
60890: PUSH
60891: LD_INT 8
60893: GREATER
60894: OR
60895: IFFALSE 60899
// exit ;
60897: GO 60958
// if not range then
60899: LD_VAR 0 4
60903: NOT
60904: IFFALSE 60915
// range := - 12 ;
60906: LD_ADDR_VAR 0 4
60910: PUSH
60911: LD_INT 12
60913: NEG
60914: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60915: LD_VAR 0 1
60919: PPUSH
60920: LD_VAR 0 2
60924: PPUSH
60925: LD_VAR 0 3
60929: PPUSH
60930: LD_VAR 0 4
60934: PPUSH
60935: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60939: LD_VAR 0 1
60943: PPUSH
60944: LD_VAR 0 2
60948: PPUSH
60949: LD_VAR 0 3
60953: PPUSH
60954: CALL_OW 331
// end ;
60958: LD_VAR 0 5
60962: RET
// export function Video ( mode ) ; begin
60963: LD_INT 0
60965: PPUSH
// ingame_video = mode ;
60966: LD_ADDR_OWVAR 52
60970: PUSH
60971: LD_VAR 0 1
60975: ST_TO_ADDR
// interface_hidden = mode ;
60976: LD_ADDR_OWVAR 54
60980: PUSH
60981: LD_VAR 0 1
60985: ST_TO_ADDR
// end ;
60986: LD_VAR 0 2
60990: RET
// export function Join ( array , element ) ; begin
60991: LD_INT 0
60993: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60994: LD_ADDR_VAR 0 3
60998: PUSH
60999: LD_VAR 0 1
61003: PPUSH
61004: LD_VAR 0 1
61008: PUSH
61009: LD_INT 1
61011: PLUS
61012: PPUSH
61013: LD_VAR 0 2
61017: PPUSH
61018: CALL_OW 1
61022: ST_TO_ADDR
// end ;
61023: LD_VAR 0 3
61027: RET
// export function JoinUnion ( array , element ) ; begin
61028: LD_INT 0
61030: PPUSH
// result := array union element ;
61031: LD_ADDR_VAR 0 3
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: LD_VAR 0 2
61045: UNION
61046: ST_TO_ADDR
// end ;
61047: LD_VAR 0 3
61051: RET
// export function GetBehemoths ( side ) ; begin
61052: LD_INT 0
61054: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61055: LD_ADDR_VAR 0 2
61059: PUSH
61060: LD_INT 22
61062: PUSH
61063: LD_VAR 0 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 31
61074: PUSH
61075: LD_INT 25
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PPUSH
61086: CALL_OW 69
61090: ST_TO_ADDR
// end ;
61091: LD_VAR 0 2
61095: RET
// export function Shuffle ( array ) ; var i , index ; begin
61096: LD_INT 0
61098: PPUSH
61099: PPUSH
61100: PPUSH
// result := [ ] ;
61101: LD_ADDR_VAR 0 2
61105: PUSH
61106: EMPTY
61107: ST_TO_ADDR
// if not array then
61108: LD_VAR 0 1
61112: NOT
61113: IFFALSE 61117
// exit ;
61115: GO 61216
// Randomize ;
61117: CALL_OW 10
// for i = array downto 1 do
61121: LD_ADDR_VAR 0 3
61125: PUSH
61126: DOUBLE
61127: LD_VAR 0 1
61131: INC
61132: ST_TO_ADDR
61133: LD_INT 1
61135: PUSH
61136: FOR_DOWNTO
61137: IFFALSE 61214
// begin index := rand ( 1 , array ) ;
61139: LD_ADDR_VAR 0 4
61143: PUSH
61144: LD_INT 1
61146: PPUSH
61147: LD_VAR 0 1
61151: PPUSH
61152: CALL_OW 12
61156: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: LD_VAR 0 2
61166: PPUSH
61167: LD_VAR 0 2
61171: PUSH
61172: LD_INT 1
61174: PLUS
61175: PPUSH
61176: LD_VAR 0 1
61180: PUSH
61181: LD_VAR 0 4
61185: ARRAY
61186: PPUSH
61187: CALL_OW 2
61191: ST_TO_ADDR
// array := Delete ( array , index ) ;
61192: LD_ADDR_VAR 0 1
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_VAR 0 4
61206: PPUSH
61207: CALL_OW 3
61211: ST_TO_ADDR
// end ;
61212: GO 61136
61214: POP
61215: POP
// end ;
61216: LD_VAR 0 2
61220: RET
// export function GetBaseMaterials ( base ) ; begin
61221: LD_INT 0
61223: PPUSH
// result := [ 0 , 0 , 0 ] ;
61224: LD_ADDR_VAR 0 2
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// if not base then
61243: LD_VAR 0 1
61247: NOT
61248: IFFALSE 61252
// exit ;
61250: GO 61301
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61252: LD_ADDR_VAR 0 2
61256: PUSH
61257: LD_VAR 0 1
61261: PPUSH
61262: LD_INT 1
61264: PPUSH
61265: CALL_OW 275
61269: PUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: LD_INT 2
61277: PPUSH
61278: CALL_OW 275
61282: PUSH
61283: LD_VAR 0 1
61287: PPUSH
61288: LD_INT 3
61290: PPUSH
61291: CALL_OW 275
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: ST_TO_ADDR
// end ;
61301: LD_VAR 0 2
61305: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61306: LD_INT 0
61308: PPUSH
61309: PPUSH
// result := array ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_VAR 0 1
61319: ST_TO_ADDR
// if size >= result then
61320: LD_VAR 0 2
61324: PUSH
61325: LD_VAR 0 3
61329: GREATEREQUAL
61330: IFFALSE 61334
// exit ;
61332: GO 61384
// if size then
61334: LD_VAR 0 2
61338: IFFALSE 61384
// for i := array downto size do
61340: LD_ADDR_VAR 0 4
61344: PUSH
61345: DOUBLE
61346: LD_VAR 0 1
61350: INC
61351: ST_TO_ADDR
61352: LD_VAR 0 2
61356: PUSH
61357: FOR_DOWNTO
61358: IFFALSE 61382
// result := Delete ( result , result ) ;
61360: LD_ADDR_VAR 0 3
61364: PUSH
61365: LD_VAR 0 3
61369: PPUSH
61370: LD_VAR 0 3
61374: PPUSH
61375: CALL_OW 3
61379: ST_TO_ADDR
61380: GO 61357
61382: POP
61383: POP
// end ;
61384: LD_VAR 0 3
61388: RET
// export function ComExit ( unit ) ; var tmp ; begin
61389: LD_INT 0
61391: PPUSH
61392: PPUSH
// if not IsInUnit ( unit ) then
61393: LD_VAR 0 1
61397: PPUSH
61398: CALL_OW 310
61402: NOT
61403: IFFALSE 61407
// exit ;
61405: GO 61467
// tmp := IsInUnit ( unit ) ;
61407: LD_ADDR_VAR 0 3
61411: PUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 310
61421: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61422: LD_VAR 0 3
61426: PPUSH
61427: CALL_OW 247
61431: PUSH
61432: LD_INT 2
61434: EQUAL
61435: IFFALSE 61448
// ComExitVehicle ( unit ) else
61437: LD_VAR 0 1
61441: PPUSH
61442: CALL_OW 121
61446: GO 61457
// ComExitBuilding ( unit ) ;
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL_OW 122
// result := tmp ;
61457: LD_ADDR_VAR 0 2
61461: PUSH
61462: LD_VAR 0 3
61466: ST_TO_ADDR
// end ;
61467: LD_VAR 0 2
61471: RET
// export function ComExitAll ( units ) ; var i ; begin
61472: LD_INT 0
61474: PPUSH
61475: PPUSH
// if not units then
61476: LD_VAR 0 1
61480: NOT
61481: IFFALSE 61485
// exit ;
61483: GO 61511
// for i in units do
61485: LD_ADDR_VAR 0 3
61489: PUSH
61490: LD_VAR 0 1
61494: PUSH
61495: FOR_IN
61496: IFFALSE 61509
// ComExit ( i ) ;
61498: LD_VAR 0 3
61502: PPUSH
61503: CALL 61389 0 1
61507: GO 61495
61509: POP
61510: POP
// end ;
61511: LD_VAR 0 2
61515: RET
// export function ResetHc ; begin
61516: LD_INT 0
61518: PPUSH
// InitHc ;
61519: CALL_OW 19
// hc_importance := 0 ;
61523: LD_ADDR_OWVAR 32
61527: PUSH
61528: LD_INT 0
61530: ST_TO_ADDR
// end ;
61531: LD_VAR 0 1
61535: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61536: LD_INT 0
61538: PPUSH
61539: PPUSH
61540: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61541: LD_ADDR_VAR 0 6
61545: PUSH
61546: LD_VAR 0 1
61550: PUSH
61551: LD_VAR 0 3
61555: PLUS
61556: PUSH
61557: LD_INT 2
61559: DIV
61560: ST_TO_ADDR
// if _x < 0 then
61561: LD_VAR 0 6
61565: PUSH
61566: LD_INT 0
61568: LESS
61569: IFFALSE 61586
// _x := _x * - 1 ;
61571: LD_ADDR_VAR 0 6
61575: PUSH
61576: LD_VAR 0 6
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: MUL
61585: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61586: LD_ADDR_VAR 0 7
61590: PUSH
61591: LD_VAR 0 2
61595: PUSH
61596: LD_VAR 0 4
61600: PLUS
61601: PUSH
61602: LD_INT 2
61604: DIV
61605: ST_TO_ADDR
// if _y < 0 then
61606: LD_VAR 0 7
61610: PUSH
61611: LD_INT 0
61613: LESS
61614: IFFALSE 61631
// _y := _y * - 1 ;
61616: LD_ADDR_VAR 0 7
61620: PUSH
61621: LD_VAR 0 7
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: MUL
61630: ST_TO_ADDR
// result := [ _x , _y ] ;
61631: LD_ADDR_VAR 0 5
61635: PUSH
61636: LD_VAR 0 6
61640: PUSH
61641: LD_VAR 0 7
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// end ;
61650: LD_VAR 0 5
61654: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61655: LD_INT 0
61657: PPUSH
61658: PPUSH
61659: PPUSH
61660: PPUSH
// task := GetTaskList ( unit ) ;
61661: LD_ADDR_VAR 0 7
61665: PUSH
61666: LD_VAR 0 1
61670: PPUSH
61671: CALL_OW 437
61675: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61676: LD_VAR 0 7
61680: NOT
61681: IFFALSE 61700
61683: PUSH
61684: LD_VAR 0 1
61688: PPUSH
61689: LD_VAR 0 2
61693: PPUSH
61694: CALL_OW 308
61698: NOT
61699: AND
61700: IFFALSE 61704
// exit ;
61702: GO 61822
// if IsInArea ( unit , area ) then
61704: LD_VAR 0 1
61708: PPUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: CALL_OW 308
61718: IFFALSE 61736
// begin ComMoveToArea ( unit , goAway ) ;
61720: LD_VAR 0 1
61724: PPUSH
61725: LD_VAR 0 3
61729: PPUSH
61730: CALL_OW 113
// exit ;
61734: GO 61822
// end ; if task [ 1 ] [ 1 ] <> M then
61736: LD_VAR 0 7
61740: PUSH
61741: LD_INT 1
61743: ARRAY
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PUSH
61749: LD_STRING M
61751: NONEQUAL
61752: IFFALSE 61756
// exit ;
61754: GO 61822
// x := task [ 1 ] [ 2 ] ;
61756: LD_ADDR_VAR 0 5
61760: PUSH
61761: LD_VAR 0 7
61765: PUSH
61766: LD_INT 1
61768: ARRAY
61769: PUSH
61770: LD_INT 2
61772: ARRAY
61773: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61774: LD_ADDR_VAR 0 6
61778: PUSH
61779: LD_VAR 0 7
61783: PUSH
61784: LD_INT 1
61786: ARRAY
61787: PUSH
61788: LD_INT 3
61790: ARRAY
61791: ST_TO_ADDR
// if InArea ( x , y , area ) then
61792: LD_VAR 0 5
61796: PPUSH
61797: LD_VAR 0 6
61801: PPUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: CALL_OW 309
61811: IFFALSE 61822
// ComStop ( unit ) ;
61813: LD_VAR 0 1
61817: PPUSH
61818: CALL_OW 141
// end ;
61822: LD_VAR 0 4
61826: RET
// export function Abs ( value ) ; begin
61827: LD_INT 0
61829: PPUSH
// result := value ;
61830: LD_ADDR_VAR 0 2
61834: PUSH
61835: LD_VAR 0 1
61839: ST_TO_ADDR
// if value < 0 then
61840: LD_VAR 0 1
61844: PUSH
61845: LD_INT 0
61847: LESS
61848: IFFALSE 61865
// result := value * - 1 ;
61850: LD_ADDR_VAR 0 2
61854: PUSH
61855: LD_VAR 0 1
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: MUL
61864: ST_TO_ADDR
// end ;
61865: LD_VAR 0 2
61869: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61870: LD_INT 0
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
61877: PPUSH
61878: PPUSH
61879: PPUSH
// if not unit or not building then
61880: LD_VAR 0 1
61884: NOT
61885: IFTRUE 61894
61887: PUSH
61888: LD_VAR 0 2
61892: NOT
61893: OR
61894: IFFALSE 61898
// exit ;
61896: GO 62126
// x := GetX ( building ) ;
61898: LD_ADDR_VAR 0 4
61902: PUSH
61903: LD_VAR 0 2
61907: PPUSH
61908: CALL_OW 250
61912: ST_TO_ADDR
// y := GetY ( building ) ;
61913: LD_ADDR_VAR 0 6
61917: PUSH
61918: LD_VAR 0 2
61922: PPUSH
61923: CALL_OW 251
61927: ST_TO_ADDR
// d := GetDir ( building ) ;
61928: LD_ADDR_VAR 0 8
61932: PUSH
61933: LD_VAR 0 2
61937: PPUSH
61938: CALL_OW 254
61942: ST_TO_ADDR
// r := 4 ;
61943: LD_ADDR_VAR 0 9
61947: PUSH
61948: LD_INT 4
61950: ST_TO_ADDR
// for i := 1 to 5 do
61951: LD_ADDR_VAR 0 10
61955: PUSH
61956: DOUBLE
61957: LD_INT 1
61959: DEC
61960: ST_TO_ADDR
61961: LD_INT 5
61963: PUSH
61964: FOR_TO
61965: IFFALSE 62124
// begin _x := ShiftX ( x , d , r + i ) ;
61967: LD_ADDR_VAR 0 5
61971: PUSH
61972: LD_VAR 0 4
61976: PPUSH
61977: LD_VAR 0 8
61981: PPUSH
61982: LD_VAR 0 9
61986: PUSH
61987: LD_VAR 0 10
61991: PLUS
61992: PPUSH
61993: CALL_OW 272
61997: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61998: LD_ADDR_VAR 0 7
62002: PUSH
62003: LD_VAR 0 6
62007: PPUSH
62008: LD_VAR 0 8
62012: PPUSH
62013: LD_VAR 0 9
62017: PUSH
62018: LD_VAR 0 10
62022: PLUS
62023: PPUSH
62024: CALL_OW 273
62028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62029: LD_VAR 0 5
62033: PPUSH
62034: LD_VAR 0 7
62038: PPUSH
62039: CALL_OW 488
62043: IFFALSE 62078
62045: PUSH
62046: LD_VAR 0 5
62050: PPUSH
62051: LD_VAR 0 7
62055: PPUSH
62056: CALL_OW 428
62060: PPUSH
62061: CALL_OW 247
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: IN
62076: NOT
62077: AND
62078: IFFALSE 62122
// begin ComMoveXY ( unit , _x , _y ) ;
62080: LD_VAR 0 1
62084: PPUSH
62085: LD_VAR 0 5
62089: PPUSH
62090: LD_VAR 0 7
62094: PPUSH
62095: CALL_OW 111
// result := [ _x , _y ] ;
62099: LD_ADDR_VAR 0 3
62103: PUSH
62104: LD_VAR 0 5
62108: PUSH
62109: LD_VAR 0 7
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// exit ;
62118: POP
62119: POP
62120: GO 62126
// end ; end ;
62122: GO 61964
62124: POP
62125: POP
// end ;
62126: LD_VAR 0 3
62130: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62131: LD_INT 0
62133: PPUSH
62134: PPUSH
62135: PPUSH
// result := 0 ;
62136: LD_ADDR_VAR 0 3
62140: PUSH
62141: LD_INT 0
62143: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 0
62151: LESS
62152: IFTRUE 62164
62154: PUSH
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 8
62162: GREATER
62163: OR
62164: IFTRUE 62176
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: LD_INT 0
62174: LESS
62175: OR
62176: IFTRUE 62188
62178: PUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 8
62186: GREATER
62187: OR
62188: IFFALSE 62192
// exit ;
62190: GO 62267
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62192: LD_ADDR_VAR 0 4
62196: PUSH
62197: LD_INT 22
62199: PUSH
62200: LD_VAR 0 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PPUSH
62209: CALL_OW 69
62213: PUSH
62214: FOR_IN
62215: IFFALSE 62265
// begin un := UnitShoot ( i ) ;
62217: LD_ADDR_VAR 0 5
62221: PUSH
62222: LD_VAR 0 4
62226: PPUSH
62227: CALL_OW 504
62231: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62232: LD_VAR 0 5
62236: PPUSH
62237: CALL_OW 255
62241: PUSH
62242: LD_VAR 0 1
62246: EQUAL
62247: IFFALSE 62263
// begin result := un ;
62249: LD_ADDR_VAR 0 3
62253: PUSH
62254: LD_VAR 0 5
62258: ST_TO_ADDR
// exit ;
62259: POP
62260: POP
62261: GO 62267
// end ; end ;
62263: GO 62214
62265: POP
62266: POP
// end ;
62267: LD_VAR 0 3
62271: RET
// export function GetCargoBay ( units ) ; begin
62272: LD_INT 0
62274: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62275: LD_ADDR_VAR 0 2
62279: PUSH
62280: LD_VAR 0 1
62284: PPUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 34
62290: PUSH
62291: LD_INT 12
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 34
62300: PUSH
62301: LD_INT 51
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 34
62310: PUSH
62311: LD_INT 32
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 34
62320: PUSH
62321: LD_INT 89
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: PPUSH
62335: CALL_OW 72
62339: ST_TO_ADDR
// end ;
62340: LD_VAR 0 2
62344: RET
// export function Negate ( value ) ; begin
62345: LD_INT 0
62347: PPUSH
// result := not value ;
62348: LD_ADDR_VAR 0 2
62352: PUSH
62353: LD_VAR 0 1
62357: NOT
62358: ST_TO_ADDR
// end ;
62359: LD_VAR 0 2
62363: RET
// export function Inc ( value ) ; begin
62364: LD_INT 0
62366: PPUSH
// result := value + 1 ;
62367: LD_ADDR_VAR 0 2
62371: PUSH
62372: LD_VAR 0 1
62376: PUSH
62377: LD_INT 1
62379: PLUS
62380: ST_TO_ADDR
// end ;
62381: LD_VAR 0 2
62385: RET
// export function Dec ( value ) ; begin
62386: LD_INT 0
62388: PPUSH
// result := value - 1 ;
62389: LD_ADDR_VAR 0 2
62393: PUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_INT 1
62401: MINUS
62402: ST_TO_ADDR
// end ;
62403: LD_VAR 0 2
62407: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62408: LD_INT 0
62410: PPUSH
62411: PPUSH
62412: PPUSH
62413: PPUSH
62414: PPUSH
62415: PPUSH
62416: PPUSH
62417: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62418: LD_VAR 0 1
62422: PPUSH
62423: LD_VAR 0 2
62427: PPUSH
62428: CALL_OW 488
62432: NOT
62433: IFTRUE 62452
62435: PUSH
62436: LD_VAR 0 3
62440: PPUSH
62441: LD_VAR 0 4
62445: PPUSH
62446: CALL_OW 488
62450: NOT
62451: OR
62452: IFFALSE 62465
// begin result := - 1 ;
62454: LD_ADDR_VAR 0 5
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: ST_TO_ADDR
// exit ;
62463: GO 62700
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62465: LD_ADDR_VAR 0 12
62469: PUSH
62470: LD_VAR 0 1
62474: PPUSH
62475: LD_VAR 0 2
62479: PPUSH
62480: LD_VAR 0 3
62484: PPUSH
62485: LD_VAR 0 4
62489: PPUSH
62490: CALL 61536 0 4
62494: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62495: LD_ADDR_VAR 0 11
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: LD_VAR 0 2
62509: PPUSH
62510: LD_VAR 0 12
62514: PUSH
62515: LD_INT 1
62517: ARRAY
62518: PPUSH
62519: LD_VAR 0 12
62523: PUSH
62524: LD_INT 2
62526: ARRAY
62527: PPUSH
62528: CALL_OW 298
62532: ST_TO_ADDR
// distance := 9999 ;
62533: LD_ADDR_VAR 0 10
62537: PUSH
62538: LD_INT 9999
62540: ST_TO_ADDR
// for i := 0 to 5 do
62541: LD_ADDR_VAR 0 6
62545: PUSH
62546: DOUBLE
62547: LD_INT 0
62549: DEC
62550: ST_TO_ADDR
62551: LD_INT 5
62553: PUSH
62554: FOR_TO
62555: IFFALSE 62698
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62557: LD_ADDR_VAR 0 7
62561: PUSH
62562: LD_VAR 0 1
62566: PPUSH
62567: LD_VAR 0 6
62571: PPUSH
62572: LD_VAR 0 11
62576: PPUSH
62577: CALL_OW 272
62581: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62582: LD_ADDR_VAR 0 8
62586: PUSH
62587: LD_VAR 0 2
62591: PPUSH
62592: LD_VAR 0 6
62596: PPUSH
62597: LD_VAR 0 11
62601: PPUSH
62602: CALL_OW 273
62606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62607: LD_VAR 0 7
62611: PPUSH
62612: LD_VAR 0 8
62616: PPUSH
62617: CALL_OW 488
62621: NOT
62622: IFFALSE 62626
// continue ;
62624: GO 62554
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62626: LD_ADDR_VAR 0 9
62630: PUSH
62631: LD_VAR 0 12
62635: PUSH
62636: LD_INT 1
62638: ARRAY
62639: PPUSH
62640: LD_VAR 0 12
62644: PUSH
62645: LD_INT 2
62647: ARRAY
62648: PPUSH
62649: LD_VAR 0 7
62653: PPUSH
62654: LD_VAR 0 8
62658: PPUSH
62659: CALL_OW 298
62663: ST_TO_ADDR
// if tmp < distance then
62664: LD_VAR 0 9
62668: PUSH
62669: LD_VAR 0 10
62673: LESS
62674: IFFALSE 62696
// begin result := i ;
62676: LD_ADDR_VAR 0 5
62680: PUSH
62681: LD_VAR 0 6
62685: ST_TO_ADDR
// distance := tmp ;
62686: LD_ADDR_VAR 0 10
62690: PUSH
62691: LD_VAR 0 9
62695: ST_TO_ADDR
// end ; end ;
62696: GO 62554
62698: POP
62699: POP
// end ;
62700: LD_VAR 0 5
62704: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62705: LD_INT 0
62707: PPUSH
62708: PPUSH
// if not driver or not IsInUnit ( driver ) then
62709: LD_VAR 0 1
62713: NOT
62714: IFTRUE 62728
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 310
62726: NOT
62727: OR
62728: IFFALSE 62732
// exit ;
62730: GO 62822
// vehicle := IsInUnit ( driver ) ;
62732: LD_ADDR_VAR 0 3
62736: PUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL_OW 310
62746: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_STRING \
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: PUSH
62782: LD_STRING E
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_VAR 0 3
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PPUSH
62818: CALL_OW 446
// end ;
62822: LD_VAR 0 2
62826: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62827: LD_INT 0
62829: PPUSH
62830: PPUSH
// if not driver or not IsInUnit ( driver ) then
62831: LD_VAR 0 1
62835: NOT
62836: IFTRUE 62850
62838: PUSH
62839: LD_VAR 0 1
62843: PPUSH
62844: CALL_OW 310
62848: NOT
62849: OR
62850: IFFALSE 62854
// exit ;
62852: GO 62944
// vehicle := IsInUnit ( driver ) ;
62854: LD_ADDR_VAR 0 3
62858: PUSH
62859: LD_VAR 0 1
62863: PPUSH
62864: CALL_OW 310
62868: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62869: LD_VAR 0 1
62873: PPUSH
62874: LD_STRING \
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: PUSH
62904: LD_STRING E
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_VAR 0 3
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PPUSH
62940: CALL_OW 447
// end ;
62944: LD_VAR 0 2
62948: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62949: LD_INT 0
62951: PPUSH
62952: PPUSH
62953: PPUSH
// tmp := [ ] ;
62954: LD_ADDR_VAR 0 5
62958: PUSH
62959: EMPTY
62960: ST_TO_ADDR
// for i in units do
62961: LD_ADDR_VAR 0 4
62965: PUSH
62966: LD_VAR 0 1
62970: PUSH
62971: FOR_IN
62972: IFFALSE 63010
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62974: LD_ADDR_VAR 0 5
62978: PUSH
62979: LD_VAR 0 5
62983: PPUSH
62984: LD_VAR 0 5
62988: PUSH
62989: LD_INT 1
62991: PLUS
62992: PPUSH
62993: LD_VAR 0 4
62997: PPUSH
62998: CALL_OW 256
63002: PPUSH
63003: CALL_OW 2
63007: ST_TO_ADDR
63008: GO 62971
63010: POP
63011: POP
// if not tmp then
63012: LD_VAR 0 5
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63069
// if asc then
63021: LD_VAR 0 2
63025: IFFALSE 63049
// result := SortListByListAsc ( units , tmp ) else
63027: LD_ADDR_VAR 0 3
63031: PUSH
63032: LD_VAR 0 1
63036: PPUSH
63037: LD_VAR 0 5
63041: PPUSH
63042: CALL_OW 76
63046: ST_TO_ADDR
63047: GO 63069
// result := SortListByListDesc ( units , tmp ) ;
63049: LD_ADDR_VAR 0 3
63053: PUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: LD_VAR 0 5
63063: PPUSH
63064: CALL_OW 77
63068: ST_TO_ADDR
// end ;
63069: LD_VAR 0 3
63073: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63074: LD_INT 0
63076: PPUSH
63077: PPUSH
// task := GetTaskList ( mech ) ;
63078: LD_ADDR_VAR 0 4
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 437
63092: ST_TO_ADDR
// if not task then
63093: LD_VAR 0 4
63097: NOT
63098: IFFALSE 63102
// exit ;
63100: GO 63146
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63102: LD_ADDR_VAR 0 3
63106: PUSH
63107: LD_VAR 0 4
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: PUSH
63116: LD_INT 1
63118: ARRAY
63119: PUSH
63120: LD_STRING r
63122: EQUAL
63123: IFFALSE 63145
63125: PUSH
63126: LD_VAR 0 4
63130: PUSH
63131: LD_INT 1
63133: ARRAY
63134: PUSH
63135: LD_INT 4
63137: ARRAY
63138: PUSH
63139: LD_VAR 0 2
63143: EQUAL
63144: AND
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 3
63150: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63151: LD_INT 0
63153: PPUSH
// SetDir ( unit , d ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: LD_VAR 0 4
63163: PPUSH
63164: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
63168: LD_ADDR_VAR 0 6
63172: PUSH
63173: LD_VAR 0 1
63177: PPUSH
63178: LD_VAR 0 2
63182: PPUSH
63183: LD_VAR 0 3
63187: PPUSH
63188: LD_VAR 0 5
63192: PPUSH
63193: CALL_OW 48
63197: ST_TO_ADDR
// end ;
63198: LD_VAR 0 6
63202: RET
// export function ToNaturalNumber ( number ) ; begin
63203: LD_INT 0
63205: PPUSH
// result := number div 1 ;
63206: LD_ADDR_VAR 0 2
63210: PUSH
63211: LD_VAR 0 1
63215: PUSH
63216: LD_INT 1
63218: DIV
63219: ST_TO_ADDR
// if number < 0 then
63220: LD_VAR 0 1
63224: PUSH
63225: LD_INT 0
63227: LESS
63228: IFFALSE 63238
// result := 0 ;
63230: LD_ADDR_VAR 0 2
63234: PUSH
63235: LD_INT 0
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 2
63242: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
63243: LD_INT 0
63245: PPUSH
63246: PPUSH
63247: PPUSH
// if not buildings then
63248: LD_VAR 0 1
63252: NOT
63253: IFFALSE 63257
// exit ;
63255: GO 63372
// tmp := [ ] ;
63257: LD_ADDR_VAR 0 5
63261: PUSH
63262: EMPTY
63263: ST_TO_ADDR
// for b in buildings do
63264: LD_ADDR_VAR 0 4
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: FOR_IN
63275: IFFALSE 63313
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
63277: LD_ADDR_VAR 0 5
63281: PUSH
63282: LD_VAR 0 5
63286: PPUSH
63287: LD_VAR 0 5
63291: PUSH
63292: LD_INT 1
63294: PLUS
63295: PPUSH
63296: LD_VAR 0 4
63300: PPUSH
63301: CALL_OW 266
63305: PPUSH
63306: CALL_OW 1
63310: ST_TO_ADDR
63311: GO 63274
63313: POP
63314: POP
// if not tmp then
63315: LD_VAR 0 5
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63372
// if asc then
63324: LD_VAR 0 2
63328: IFFALSE 63352
// result := SortListByListAsc ( buildings , tmp ) else
63330: LD_ADDR_VAR 0 3
63334: PUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: LD_VAR 0 5
63344: PPUSH
63345: CALL_OW 76
63349: ST_TO_ADDR
63350: GO 63372
// result := SortListByListDesc ( buildings , tmp ) ;
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: LD_VAR 0 5
63366: PPUSH
63367: CALL_OW 77
63371: ST_TO_ADDR
// end ;
63372: LD_VAR 0 3
63376: RET
// export function SortByClass ( units , class ) ; var un ; begin
63377: LD_INT 0
63379: PPUSH
63380: PPUSH
// if not units or not class then
63381: LD_VAR 0 1
63385: NOT
63386: IFTRUE 63395
63388: PUSH
63389: LD_VAR 0 2
63393: NOT
63394: OR
63395: IFFALSE 63399
// exit ;
63397: GO 63494
// result := [ ] ;
63399: LD_ADDR_VAR 0 3
63403: PUSH
63404: EMPTY
63405: ST_TO_ADDR
// for un in units do
63406: LD_ADDR_VAR 0 4
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: FOR_IN
63417: IFFALSE 63492
// if GetClass ( un ) = class then
63419: LD_VAR 0 4
63423: PPUSH
63424: CALL_OW 257
63428: PUSH
63429: LD_VAR 0 2
63433: EQUAL
63434: IFFALSE 63461
// result := Insert ( result , 1 , un ) else
63436: LD_ADDR_VAR 0 3
63440: PUSH
63441: LD_VAR 0 3
63445: PPUSH
63446: LD_INT 1
63448: PPUSH
63449: LD_VAR 0 4
63453: PPUSH
63454: CALL_OW 2
63458: ST_TO_ADDR
63459: GO 63490
// result := Replace ( result , result + 1 , un ) ;
63461: LD_ADDR_VAR 0 3
63465: PUSH
63466: LD_VAR 0 3
63470: PPUSH
63471: LD_VAR 0 3
63475: PUSH
63476: LD_INT 1
63478: PLUS
63479: PPUSH
63480: LD_VAR 0 4
63484: PPUSH
63485: CALL_OW 1
63489: ST_TO_ADDR
63490: GO 63416
63492: POP
63493: POP
// end ;
63494: LD_VAR 0 3
63498: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63499: LD_INT 0
63501: PPUSH
63502: PPUSH
63503: PPUSH
63504: PPUSH
63505: PPUSH
63506: PPUSH
63507: PPUSH
// result := [ ] ;
63508: LD_ADDR_VAR 0 4
63512: PUSH
63513: EMPTY
63514: ST_TO_ADDR
// if x - r < 0 then
63515: LD_VAR 0 1
63519: PUSH
63520: LD_VAR 0 3
63524: MINUS
63525: PUSH
63526: LD_INT 0
63528: LESS
63529: IFFALSE 63541
// min_x := 0 else
63531: LD_ADDR_VAR 0 8
63535: PUSH
63536: LD_INT 0
63538: ST_TO_ADDR
63539: GO 63557
// min_x := x - r ;
63541: LD_ADDR_VAR 0 8
63545: PUSH
63546: LD_VAR 0 1
63550: PUSH
63551: LD_VAR 0 3
63555: MINUS
63556: ST_TO_ADDR
// if y - r < 0 then
63557: LD_VAR 0 2
63561: PUSH
63562: LD_VAR 0 3
63566: MINUS
63567: PUSH
63568: LD_INT 0
63570: LESS
63571: IFFALSE 63583
// min_y := 0 else
63573: LD_ADDR_VAR 0 7
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
63581: GO 63599
// min_y := y - r ;
63583: LD_ADDR_VAR 0 7
63587: PUSH
63588: LD_VAR 0 2
63592: PUSH
63593: LD_VAR 0 3
63597: MINUS
63598: ST_TO_ADDR
// max_x := x + r ;
63599: LD_ADDR_VAR 0 9
63603: PUSH
63604: LD_VAR 0 1
63608: PUSH
63609: LD_VAR 0 3
63613: PLUS
63614: ST_TO_ADDR
// max_y := y + r ;
63615: LD_ADDR_VAR 0 10
63619: PUSH
63620: LD_VAR 0 2
63624: PUSH
63625: LD_VAR 0 3
63629: PLUS
63630: ST_TO_ADDR
// for _x = min_x to max_x do
63631: LD_ADDR_VAR 0 5
63635: PUSH
63636: DOUBLE
63637: LD_VAR 0 8
63641: DEC
63642: ST_TO_ADDR
63643: LD_VAR 0 9
63647: PUSH
63648: FOR_TO
63649: IFFALSE 63750
// for _y = min_y to max_y do
63651: LD_ADDR_VAR 0 6
63655: PUSH
63656: DOUBLE
63657: LD_VAR 0 7
63661: DEC
63662: ST_TO_ADDR
63663: LD_VAR 0 10
63667: PUSH
63668: FOR_TO
63669: IFFALSE 63746
// begin if not ValidHex ( _x , _y ) then
63671: LD_VAR 0 5
63675: PPUSH
63676: LD_VAR 0 6
63680: PPUSH
63681: CALL_OW 488
63685: NOT
63686: IFFALSE 63690
// continue ;
63688: GO 63668
// if GetResourceTypeXY ( _x , _y ) then
63690: LD_VAR 0 5
63694: PPUSH
63695: LD_VAR 0 6
63699: PPUSH
63700: CALL_OW 283
63704: IFFALSE 63744
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63706: LD_ADDR_VAR 0 4
63710: PUSH
63711: LD_VAR 0 4
63715: PPUSH
63716: LD_VAR 0 4
63720: PUSH
63721: LD_INT 1
63723: PLUS
63724: PPUSH
63725: LD_VAR 0 5
63729: PUSH
63730: LD_VAR 0 6
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PPUSH
63739: CALL_OW 1
63743: ST_TO_ADDR
// end ;
63744: GO 63668
63746: POP
63747: POP
63748: GO 63648
63750: POP
63751: POP
// end ;
63752: LD_VAR 0 4
63756: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63757: LD_INT 0
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
63763: PPUSH
63764: PPUSH
63765: PPUSH
63766: PPUSH
// if not units then
63767: LD_VAR 0 1
63771: NOT
63772: IFFALSE 63776
// exit ;
63774: GO 64308
// result := UnitFilter ( units , [ f_ok ] ) ;
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: LD_VAR 0 1
63785: PPUSH
63786: LD_INT 50
63788: PUSH
63789: EMPTY
63790: LIST
63791: PPUSH
63792: CALL_OW 72
63796: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63797: LD_ADDR_VAR 0 8
63801: PUSH
63802: LD_VAR 0 1
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PPUSH
63811: CALL_OW 255
63815: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63816: LD_ADDR_VAR 0 10
63820: PUSH
63821: LD_INT 29
63823: PUSH
63824: LD_INT 91
63826: PUSH
63827: LD_INT 49
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// if not result then
63835: LD_VAR 0 3
63839: NOT
63840: IFFALSE 63844
// exit ;
63842: GO 64308
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63844: LD_ADDR_VAR 0 5
63848: PUSH
63849: LD_INT 81
63851: PUSH
63852: LD_VAR 0 8
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PPUSH
63861: CALL_OW 69
63865: ST_TO_ADDR
// for i in result do
63866: LD_ADDR_VAR 0 4
63870: PUSH
63871: LD_VAR 0 3
63875: PUSH
63876: FOR_IN
63877: IFFALSE 64306
// begin tag := GetTag ( i ) + 1 ;
63879: LD_ADDR_VAR 0 9
63883: PUSH
63884: LD_VAR 0 4
63888: PPUSH
63889: CALL_OW 110
63893: PUSH
63894: LD_INT 1
63896: PLUS
63897: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63898: LD_ADDR_VAR 0 7
63902: PUSH
63903: LD_VAR 0 4
63907: PPUSH
63908: CALL_OW 250
63912: PPUSH
63913: LD_VAR 0 4
63917: PPUSH
63918: CALL_OW 251
63922: PPUSH
63923: LD_INT 4
63925: PPUSH
63926: CALL 63499 0 3
63930: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63931: LD_VAR 0 4
63935: PPUSH
63936: CALL_OW 247
63940: PUSH
63941: LD_INT 2
63943: EQUAL
63944: IFFALSE 63956
63946: PUSH
63947: LD_VAR 0 7
63951: PUSH
63952: LD_INT 2
63954: GREATER
63955: AND
63956: IFFALSE 63976
63958: PUSH
63959: LD_VAR 0 4
63963: PPUSH
63964: CALL_OW 264
63968: PUSH
63969: LD_VAR 0 10
63973: IN
63974: NOT
63975: AND
63976: IFFALSE 64015
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63978: LD_VAR 0 4
63982: PPUSH
63983: LD_VAR 0 7
63987: PUSH
63988: LD_INT 1
63990: ARRAY
63991: PUSH
63992: LD_INT 1
63994: ARRAY
63995: PPUSH
63996: LD_VAR 0 7
64000: PUSH
64001: LD_INT 1
64003: ARRAY
64004: PUSH
64005: LD_INT 2
64007: ARRAY
64008: PPUSH
64009: CALL_OW 116
64013: GO 64304
// if path > tag then
64015: LD_VAR 0 2
64019: PUSH
64020: LD_VAR 0 9
64024: GREATER
64025: IFFALSE 64233
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64027: LD_ADDR_VAR 0 6
64031: PUSH
64032: LD_VAR 0 5
64036: PPUSH
64037: LD_INT 91
64039: PUSH
64040: LD_VAR 0 4
64044: PUSH
64045: LD_INT 8
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: PPUSH
64053: CALL_OW 72
64057: ST_TO_ADDR
// if nearEnemy then
64058: LD_VAR 0 6
64062: IFFALSE 64131
// begin if GetWeapon ( i ) = ru_time_lapser then
64064: LD_VAR 0 4
64068: PPUSH
64069: CALL_OW 264
64073: PUSH
64074: LD_INT 49
64076: EQUAL
64077: IFFALSE 64105
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64079: LD_VAR 0 4
64083: PPUSH
64084: LD_VAR 0 6
64088: PPUSH
64089: LD_VAR 0 4
64093: PPUSH
64094: CALL_OW 74
64098: PPUSH
64099: CALL_OW 112
64103: GO 64129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64105: LD_VAR 0 4
64109: PPUSH
64110: LD_VAR 0 6
64114: PPUSH
64115: LD_VAR 0 4
64119: PPUSH
64120: CALL_OW 74
64124: PPUSH
64125: CALL 65389 0 2
// end else
64129: GO 64231
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64131: LD_VAR 0 4
64135: PPUSH
64136: LD_VAR 0 2
64140: PUSH
64141: LD_VAR 0 9
64145: ARRAY
64146: PUSH
64147: LD_INT 1
64149: ARRAY
64150: PPUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_VAR 0 9
64160: ARRAY
64161: PUSH
64162: LD_INT 2
64164: ARRAY
64165: PPUSH
64166: CALL_OW 297
64170: PUSH
64171: LD_INT 6
64173: GREATER
64174: IFFALSE 64217
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64176: LD_VAR 0 4
64180: PPUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_VAR 0 9
64190: ARRAY
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: PPUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_VAR 0 9
64205: ARRAY
64206: PUSH
64207: LD_INT 2
64209: ARRAY
64210: PPUSH
64211: CALL_OW 114
64215: GO 64231
// SetTag ( i , tag ) ;
64217: LD_VAR 0 4
64221: PPUSH
64222: LD_VAR 0 9
64226: PPUSH
64227: CALL_OW 109
// end else
64231: GO 64304
// if enemy then
64233: LD_VAR 0 5
64237: IFFALSE 64304
// begin if GetWeapon ( i ) = ru_time_lapser then
64239: LD_VAR 0 4
64243: PPUSH
64244: CALL_OW 264
64248: PUSH
64249: LD_INT 49
64251: EQUAL
64252: IFFALSE 64280
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64254: LD_VAR 0 4
64258: PPUSH
64259: LD_VAR 0 5
64263: PPUSH
64264: LD_VAR 0 4
64268: PPUSH
64269: CALL_OW 74
64273: PPUSH
64274: CALL_OW 112
64278: GO 64304
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64280: LD_VAR 0 4
64284: PPUSH
64285: LD_VAR 0 5
64289: PPUSH
64290: LD_VAR 0 4
64294: PPUSH
64295: CALL_OW 74
64299: PPUSH
64300: CALL 65389 0 2
// end ; end ;
64304: GO 63876
64306: POP
64307: POP
// end ;
64308: LD_VAR 0 3
64312: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64313: LD_INT 0
64315: PPUSH
64316: PPUSH
64317: PPUSH
// if not unit or IsInUnit ( unit ) then
64318: LD_VAR 0 1
64322: NOT
64323: IFTRUE 64336
64325: PUSH
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 310
64335: OR
64336: IFFALSE 64340
// exit ;
64338: GO 64431
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_VAR 0 1
64349: PPUSH
64350: CALL_OW 250
64354: PPUSH
64355: LD_VAR 0 2
64359: PPUSH
64360: LD_INT 1
64362: PPUSH
64363: CALL_OW 272
64367: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64368: LD_ADDR_VAR 0 5
64372: PUSH
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 251
64382: PPUSH
64383: LD_VAR 0 2
64387: PPUSH
64388: LD_INT 1
64390: PPUSH
64391: CALL_OW 273
64395: ST_TO_ADDR
// if ValidHex ( x , y ) then
64396: LD_VAR 0 4
64400: PPUSH
64401: LD_VAR 0 5
64405: PPUSH
64406: CALL_OW 488
64410: IFFALSE 64431
// ComTurnXY ( unit , x , y ) ;
64412: LD_VAR 0 1
64416: PPUSH
64417: LD_VAR 0 4
64421: PPUSH
64422: LD_VAR 0 5
64426: PPUSH
64427: CALL_OW 118
// end ;
64431: LD_VAR 0 3
64435: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64436: LD_INT 0
64438: PPUSH
64439: PPUSH
// result := false ;
64440: LD_ADDR_VAR 0 3
64444: PUSH
64445: LD_INT 0
64447: ST_TO_ADDR
// if not units then
64448: LD_VAR 0 2
64452: NOT
64453: IFFALSE 64457
// exit ;
64455: GO 64502
// for i in units do
64457: LD_ADDR_VAR 0 4
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: FOR_IN
64468: IFFALSE 64500
// if See ( side , i ) then
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_VAR 0 4
64479: PPUSH
64480: CALL_OW 292
64484: IFFALSE 64498
// begin result := true ;
64486: LD_ADDR_VAR 0 3
64490: PUSH
64491: LD_INT 1
64493: ST_TO_ADDR
// exit ;
64494: POP
64495: POP
64496: GO 64502
// end ;
64498: GO 64467
64500: POP
64501: POP
// end ;
64502: LD_VAR 0 3
64506: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64507: LD_INT 0
64509: PPUSH
64510: PPUSH
64511: PPUSH
64512: PPUSH
// if not unit or not points then
64513: LD_VAR 0 1
64517: NOT
64518: IFTRUE 64527
64520: PUSH
64521: LD_VAR 0 2
64525: NOT
64526: OR
64527: IFFALSE 64531
// exit ;
64529: GO 64621
// dist := 99999 ;
64531: LD_ADDR_VAR 0 5
64535: PUSH
64536: LD_INT 99999
64538: ST_TO_ADDR
// for i in points do
64539: LD_ADDR_VAR 0 4
64543: PUSH
64544: LD_VAR 0 2
64548: PUSH
64549: FOR_IN
64550: IFFALSE 64619
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64552: LD_ADDR_VAR 0 6
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_VAR 0 4
64566: PUSH
64567: LD_INT 1
64569: ARRAY
64570: PPUSH
64571: LD_VAR 0 4
64575: PUSH
64576: LD_INT 2
64578: ARRAY
64579: PPUSH
64580: CALL_OW 297
64584: ST_TO_ADDR
// if tmpDist < dist then
64585: LD_VAR 0 6
64589: PUSH
64590: LD_VAR 0 5
64594: LESS
64595: IFFALSE 64617
// begin result := i ;
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 4
64606: ST_TO_ADDR
// dist := tmpDist ;
64607: LD_ADDR_VAR 0 5
64611: PUSH
64612: LD_VAR 0 6
64616: ST_TO_ADDR
// end ; end ;
64617: GO 64549
64619: POP
64620: POP
// end ;
64621: LD_VAR 0 3
64625: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64626: LD_INT 0
64628: PPUSH
// uc_side := side ;
64629: LD_ADDR_OWVAR 20
64633: PUSH
64634: LD_VAR 0 1
64638: ST_TO_ADDR
// uc_nation := 3 ;
64639: LD_ADDR_OWVAR 21
64643: PUSH
64644: LD_INT 3
64646: ST_TO_ADDR
// vc_chassis := 25 ;
64647: LD_ADDR_OWVAR 37
64651: PUSH
64652: LD_INT 25
64654: ST_TO_ADDR
// vc_engine := engine_siberite ;
64655: LD_ADDR_OWVAR 39
64659: PUSH
64660: LD_INT 3
64662: ST_TO_ADDR
// vc_control := control_computer ;
64663: LD_ADDR_OWVAR 38
64667: PUSH
64668: LD_INT 3
64670: ST_TO_ADDR
// vc_weapon := 59 ;
64671: LD_ADDR_OWVAR 40
64675: PUSH
64676: LD_INT 59
64678: ST_TO_ADDR
// result := CreateVehicle ;
64679: LD_ADDR_VAR 0 5
64683: PUSH
64684: CALL_OW 45
64688: ST_TO_ADDR
// SetDir ( result , d ) ;
64689: LD_VAR 0 5
64693: PPUSH
64694: LD_VAR 0 4
64698: PPUSH
64699: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64703: LD_VAR 0 5
64707: PPUSH
64708: LD_VAR 0 2
64712: PPUSH
64713: LD_VAR 0 3
64717: PPUSH
64718: LD_INT 0
64720: PPUSH
64721: CALL_OW 48
// end ;
64725: LD_VAR 0 5
64729: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64730: LD_INT 0
64732: PPUSH
64733: PPUSH
64734: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64735: LD_ADDR_VAR 0 2
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64758: LD_VAR 0 1
64762: NOT
64763: IFTRUE 64796
64765: PUSH
64766: LD_VAR 0 1
64770: PPUSH
64771: CALL_OW 264
64775: PUSH
64776: LD_INT 12
64778: PUSH
64779: LD_INT 51
64781: PUSH
64782: LD_INT 32
64784: PUSH
64785: LD_INT 89
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: IN
64794: NOT
64795: OR
64796: IFFALSE 64800
// exit ;
64798: GO 64898
// for i := 1 to 3 do
64800: LD_ADDR_VAR 0 3
64804: PUSH
64805: DOUBLE
64806: LD_INT 1
64808: DEC
64809: ST_TO_ADDR
64810: LD_INT 3
64812: PUSH
64813: FOR_TO
64814: IFFALSE 64896
// begin tmp := GetCargo ( cargo , i ) ;
64816: LD_ADDR_VAR 0 4
64820: PUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: LD_VAR 0 3
64830: PPUSH
64831: CALL_OW 289
64835: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64836: LD_ADDR_VAR 0 2
64840: PUSH
64841: LD_VAR 0 2
64845: PPUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: LD_VAR 0 4
64855: PPUSH
64856: CALL_OW 1
64860: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64861: LD_ADDR_VAR 0 2
64865: PUSH
64866: LD_VAR 0 2
64870: PPUSH
64871: LD_INT 4
64873: PPUSH
64874: LD_VAR 0 2
64878: PUSH
64879: LD_INT 4
64881: ARRAY
64882: PUSH
64883: LD_VAR 0 4
64887: PLUS
64888: PPUSH
64889: CALL_OW 1
64893: ST_TO_ADDR
// end ;
64894: GO 64813
64896: POP
64897: POP
// end ;
64898: LD_VAR 0 2
64902: RET
// export function Length ( array ) ; begin
64903: LD_INT 0
64905: PPUSH
// result := array + 0 ;
64906: LD_ADDR_VAR 0 2
64910: PUSH
64911: LD_VAR 0 1
64915: PUSH
64916: LD_INT 0
64918: PLUS
64919: ST_TO_ADDR
// end ;
64920: LD_VAR 0 2
64924: RET
// export function PrepareArray ( array ) ; begin
64925: LD_INT 0
64927: PPUSH
// result := array diff 0 ;
64928: LD_ADDR_VAR 0 2
64932: PUSH
64933: LD_VAR 0 1
64937: PUSH
64938: LD_INT 0
64940: DIFF
64941: ST_TO_ADDR
// if not result [ 1 ] then
64942: LD_VAR 0 2
64946: PUSH
64947: LD_INT 1
64949: ARRAY
64950: NOT
64951: IFFALSE 64971
// result := Delete ( result , 1 ) ;
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_VAR 0 2
64962: PPUSH
64963: LD_INT 1
64965: PPUSH
64966: CALL_OW 3
64970: ST_TO_ADDR
// end ;
64971: LD_VAR 0 2
64975: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64976: LD_INT 0
64978: PPUSH
64979: PPUSH
64980: PPUSH
64981: PPUSH
// sibRocketRange := 25 ;
64982: LD_ADDR_VAR 0 6
64986: PUSH
64987: LD_INT 25
64989: ST_TO_ADDR
// result := false ;
64990: LD_ADDR_VAR 0 4
64994: PUSH
64995: LD_INT 0
64997: ST_TO_ADDR
// for i := 0 to 5 do
64998: LD_ADDR_VAR 0 5
65002: PUSH
65003: DOUBLE
65004: LD_INT 0
65006: DEC
65007: ST_TO_ADDR
65008: LD_INT 5
65010: PUSH
65011: FOR_TO
65012: IFFALSE 65079
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65014: LD_VAR 0 1
65018: PPUSH
65019: LD_VAR 0 5
65023: PPUSH
65024: LD_VAR 0 6
65028: PPUSH
65029: CALL_OW 272
65033: PPUSH
65034: LD_VAR 0 2
65038: PPUSH
65039: LD_VAR 0 5
65043: PPUSH
65044: LD_VAR 0 6
65048: PPUSH
65049: CALL_OW 273
65053: PPUSH
65054: LD_VAR 0 3
65058: PPUSH
65059: CALL_OW 309
65063: IFFALSE 65077
// begin result := true ;
65065: LD_ADDR_VAR 0 4
65069: PUSH
65070: LD_INT 1
65072: ST_TO_ADDR
// exit ;
65073: POP
65074: POP
65075: GO 65081
// end ;
65077: GO 65011
65079: POP
65080: POP
// end ;
65081: LD_VAR 0 4
65085: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
65090: PPUSH
// if btype = b_depot then
65091: LD_VAR 0 2
65095: PUSH
65096: LD_INT 0
65098: EQUAL
65099: IFFALSE 65111
// begin result := true ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_INT 1
65108: ST_TO_ADDR
// exit ;
65109: GO 65231
// end ; pom := GetBase ( depot ) ;
65111: LD_ADDR_VAR 0 4
65115: PUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 274
65125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65126: LD_ADDR_VAR 0 5
65130: PUSH
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 1
65140: PPUSH
65141: CALL_OW 248
65145: PPUSH
65146: CALL_OW 450
65150: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
65151: LD_ADDR_VAR 0 3
65155: PUSH
65156: LD_VAR 0 4
65160: PPUSH
65161: LD_INT 1
65163: PPUSH
65164: CALL_OW 275
65168: PUSH
65169: LD_VAR 0 5
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: GREATEREQUAL
65178: IFFALSE 65204
65180: PUSH
65181: LD_VAR 0 4
65185: PPUSH
65186: LD_INT 2
65188: PPUSH
65189: CALL_OW 275
65193: PUSH
65194: LD_VAR 0 5
65198: PUSH
65199: LD_INT 2
65201: ARRAY
65202: GREATEREQUAL
65203: AND
65204: IFFALSE 65230
65206: PUSH
65207: LD_VAR 0 4
65211: PPUSH
65212: LD_INT 3
65214: PPUSH
65215: CALL_OW 275
65219: PUSH
65220: LD_VAR 0 5
65224: PUSH
65225: LD_INT 3
65227: ARRAY
65228: GREATEREQUAL
65229: AND
65230: ST_TO_ADDR
// end ;
65231: LD_VAR 0 3
65235: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65236: LD_INT 0
65238: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65239: LD_VAR 0 1
65243: PPUSH
65244: LD_VAR 0 2
65248: PPUSH
65249: LD_INT 0
65251: PPUSH
65252: LD_INT 0
65254: PPUSH
65255: LD_INT 1
65257: PPUSH
65258: LD_INT 0
65260: PPUSH
65261: CALL_OW 587
// end ;
65265: LD_VAR 0 3
65269: RET
// export function CenterOnNow ( unit ) ; begin
65270: LD_INT 0
65272: PPUSH
// result := IsInUnit ( unit ) ;
65273: LD_ADDR_VAR 0 2
65277: PUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 310
65287: ST_TO_ADDR
// if not result then
65288: LD_VAR 0 2
65292: NOT
65293: IFFALSE 65305
// result := unit ;
65295: LD_ADDR_VAR 0 2
65299: PUSH
65300: LD_VAR 0 1
65304: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65305: LD_VAR 0 1
65309: PPUSH
65310: CALL_OW 87
// end ;
65314: LD_VAR 0 2
65318: RET
// export function ComMoveHex ( unit , hex ) ; begin
65319: LD_INT 0
65321: PPUSH
// if not hex then
65322: LD_VAR 0 2
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65384
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65331: LD_VAR 0 2
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PPUSH
65340: LD_VAR 0 2
65344: PUSH
65345: LD_INT 2
65347: ARRAY
65348: PPUSH
65349: CALL_OW 428
65353: IFFALSE 65357
// exit ;
65355: GO 65384
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65357: LD_VAR 0 1
65361: PPUSH
65362: LD_VAR 0 2
65366: PUSH
65367: LD_INT 1
65369: ARRAY
65370: PPUSH
65371: LD_VAR 0 2
65375: PUSH
65376: LD_INT 2
65378: ARRAY
65379: PPUSH
65380: CALL_OW 111
// end ;
65384: LD_VAR 0 3
65388: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65389: LD_INT 0
65391: PPUSH
65392: PPUSH
65393: PPUSH
// if not unit or not enemy then
65394: LD_VAR 0 1
65398: NOT
65399: IFTRUE 65408
65401: PUSH
65402: LD_VAR 0 2
65406: NOT
65407: OR
65408: IFFALSE 65412
// exit ;
65410: GO 65538
// x := GetX ( enemy ) ;
65412: LD_ADDR_VAR 0 4
65416: PUSH
65417: LD_VAR 0 2
65421: PPUSH
65422: CALL_OW 250
65426: ST_TO_ADDR
// y := GetY ( enemy ) ;
65427: LD_ADDR_VAR 0 5
65431: PUSH
65432: LD_VAR 0 2
65436: PPUSH
65437: CALL_OW 251
65441: ST_TO_ADDR
// if ValidHex ( x , y ) then
65442: LD_VAR 0 4
65446: PPUSH
65447: LD_VAR 0 5
65451: PPUSH
65452: CALL_OW 488
65456: IFFALSE 65538
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
65458: LD_VAR 0 2
65462: PPUSH
65463: CALL_OW 247
65467: PUSH
65468: LD_INT 3
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: IN
65478: IFTRUE 65501
65480: PUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: CALL_OW 255
65490: PPUSH
65491: LD_VAR 0 2
65495: PPUSH
65496: CALL_OW 292
65500: OR
65501: IFFALSE 65519
// ComAttackUnit ( unit , enemy ) else
65503: LD_VAR 0 1
65507: PPUSH
65508: LD_VAR 0 2
65512: PPUSH
65513: CALL_OW 115
65517: GO 65538
// ComAgressiveMove ( unit , x , y ) ;
65519: LD_VAR 0 1
65523: PPUSH
65524: LD_VAR 0 4
65528: PPUSH
65529: LD_VAR 0 5
65533: PPUSH
65534: CALL_OW 114
// end ;
65538: LD_VAR 0 3
65542: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
65543: LD_INT 0
65545: PPUSH
65546: PPUSH
65547: PPUSH
// list := AreaToList ( area , 0 ) ;
65548: LD_ADDR_VAR 0 5
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: LD_INT 0
65560: PPUSH
65561: CALL_OW 517
65565: ST_TO_ADDR
// if not list then
65566: LD_VAR 0 5
65570: NOT
65571: IFFALSE 65575
// exit ;
65573: GO 65705
// if all then
65575: LD_VAR 0 2
65579: IFFALSE 65667
// begin for i := 1 to list [ 1 ] do
65581: LD_ADDR_VAR 0 4
65585: PUSH
65586: DOUBLE
65587: LD_INT 1
65589: DEC
65590: ST_TO_ADDR
65591: LD_VAR 0 5
65595: PUSH
65596: LD_INT 1
65598: ARRAY
65599: PUSH
65600: FOR_TO
65601: IFFALSE 65663
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
65603: LD_ADDR_VAR 0 3
65607: PUSH
65608: LD_VAR 0 3
65612: PPUSH
65613: LD_VAR 0 3
65617: PUSH
65618: LD_INT 1
65620: PLUS
65621: PPUSH
65622: LD_VAR 0 5
65626: PUSH
65627: LD_INT 1
65629: ARRAY
65630: PUSH
65631: LD_VAR 0 4
65635: ARRAY
65636: PUSH
65637: LD_VAR 0 5
65641: PUSH
65642: LD_INT 2
65644: ARRAY
65645: PUSH
65646: LD_VAR 0 4
65650: ARRAY
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PPUSH
65656: CALL_OW 1
65660: ST_TO_ADDR
65661: GO 65600
65663: POP
65664: POP
// exit ;
65665: GO 65705
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
65667: LD_ADDR_VAR 0 3
65671: PUSH
65672: LD_VAR 0 5
65676: PUSH
65677: LD_INT 1
65679: ARRAY
65680: PUSH
65681: LD_INT 1
65683: ARRAY
65684: PUSH
65685: LD_VAR 0 5
65689: PUSH
65690: LD_INT 2
65692: ARRAY
65693: PUSH
65694: LD_INT 1
65696: ARRAY
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: EMPTY
65703: LIST
65704: ST_TO_ADDR
// end ;
65705: LD_VAR 0 3
65709: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
65710: LD_INT 0
65712: PPUSH
65713: PPUSH
// list := AreaToList ( area , 0 ) ;
65714: LD_ADDR_VAR 0 4
65718: PUSH
65719: LD_VAR 0 1
65723: PPUSH
65724: LD_INT 0
65726: PPUSH
65727: CALL_OW 517
65731: ST_TO_ADDR
// if not list then
65732: LD_VAR 0 4
65736: NOT
65737: IFFALSE 65741
// exit ;
65739: GO 65782
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65741: LD_ADDR_VAR 0 3
65745: PUSH
65746: LD_VAR 0 4
65750: PUSH
65751: LD_INT 1
65753: ARRAY
65754: PUSH
65755: LD_INT 1
65757: ARRAY
65758: PUSH
65759: LD_VAR 0 4
65763: PUSH
65764: LD_INT 2
65766: ARRAY
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PUSH
65772: LD_VAR 0 2
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// end ;
65782: LD_VAR 0 3
65786: RET
// export function First ( array ) ; begin
65787: LD_INT 0
65789: PPUSH
// if not array then
65790: LD_VAR 0 1
65794: NOT
65795: IFFALSE 65799
// exit ;
65797: GO 65813
// result := array [ 1 ] ;
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: LD_VAR 0 1
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: ST_TO_ADDR
// end ;
65813: LD_VAR 0 2
65817: RET
// export function Last ( array ) ; begin
65818: LD_INT 0
65820: PPUSH
// if not array then
65821: LD_VAR 0 1
65825: NOT
65826: IFFALSE 65830
// exit ;
65828: GO 65846
// result := array [ array ] ;
65830: LD_ADDR_VAR 0 2
65834: PUSH
65835: LD_VAR 0 1
65839: PUSH
65840: LD_VAR 0 1
65844: ARRAY
65845: ST_TO_ADDR
// end ;
65846: LD_VAR 0 2
65850: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65851: LD_INT 0
65853: PPUSH
65854: PPUSH
// result := [ ] ;
65855: LD_ADDR_VAR 0 5
65859: PUSH
65860: EMPTY
65861: ST_TO_ADDR
// if not array then
65862: LD_VAR 0 1
65866: NOT
65867: IFFALSE 65871
// exit ;
65869: GO 65983
// for i := 1 to array do
65871: LD_ADDR_VAR 0 6
65875: PUSH
65876: DOUBLE
65877: LD_INT 1
65879: DEC
65880: ST_TO_ADDR
65881: LD_VAR 0 1
65885: PUSH
65886: FOR_TO
65887: IFFALSE 65981
// if array [ i ] [ index ] = value then
65889: LD_VAR 0 1
65893: PUSH
65894: LD_VAR 0 6
65898: ARRAY
65899: PUSH
65900: LD_VAR 0 2
65904: ARRAY
65905: PUSH
65906: LD_VAR 0 3
65910: EQUAL
65911: IFFALSE 65979
// begin if indexColumn then
65913: LD_VAR 0 4
65917: IFFALSE 65953
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65919: LD_ADDR_VAR 0 5
65923: PUSH
65924: LD_VAR 0 5
65928: PPUSH
65929: LD_VAR 0 1
65933: PUSH
65934: LD_VAR 0 6
65938: ARRAY
65939: PUSH
65940: LD_VAR 0 4
65944: ARRAY
65945: PPUSH
65946: CALL 60991 0 2
65950: ST_TO_ADDR
65951: GO 65979
// result := Join ( result , array [ i ] ) ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: LD_VAR 0 5
65962: PPUSH
65963: LD_VAR 0 1
65967: PUSH
65968: LD_VAR 0 6
65972: ARRAY
65973: PPUSH
65974: CALL 60991 0 2
65978: ST_TO_ADDR
// end ;
65979: GO 65886
65981: POP
65982: POP
// end ;
65983: LD_VAR 0 5
65987: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65988: LD_INT 0
65990: PPUSH
// if not vehicles or not parkingPoint then
65991: LD_VAR 0 1
65995: NOT
65996: IFTRUE 66005
65998: PUSH
65999: LD_VAR 0 2
66003: NOT
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66107
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
66009: LD_ADDR_VAR 0 1
66013: PUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: LD_INT 50
66021: PUSH
66022: EMPTY
66023: LIST
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 92
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_INT 1
66038: ARRAY
66039: PUSH
66040: LD_VAR 0 2
66044: PUSH
66045: LD_INT 2
66047: ARRAY
66048: PUSH
66049: LD_INT 8
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PPUSH
66066: CALL_OW 72
66070: ST_TO_ADDR
// if not vehicles then
66071: LD_VAR 0 1
66075: NOT
66076: IFFALSE 66080
// exit ;
66078: GO 66107
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
66080: LD_VAR 0 1
66084: PPUSH
66085: LD_VAR 0 2
66089: PUSH
66090: LD_INT 1
66092: ARRAY
66093: PPUSH
66094: LD_VAR 0 2
66098: PUSH
66099: LD_INT 2
66101: ARRAY
66102: PPUSH
66103: CALL_OW 111
// end ;
66107: LD_VAR 0 3
66111: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
66112: LD_INT 0
66114: PPUSH
66115: PPUSH
66116: PPUSH
// if not side or not area then
66117: LD_VAR 0 1
66121: NOT
66122: IFTRUE 66131
66124: PUSH
66125: LD_VAR 0 2
66129: NOT
66130: OR
66131: IFFALSE 66135
// exit ;
66133: GO 66254
// tmp := AreaToList ( area , 0 ) ;
66135: LD_ADDR_VAR 0 5
66139: PUSH
66140: LD_VAR 0 2
66144: PPUSH
66145: LD_INT 0
66147: PPUSH
66148: CALL_OW 517
66152: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
66153: LD_ADDR_VAR 0 4
66157: PUSH
66158: DOUBLE
66159: LD_INT 1
66161: DEC
66162: ST_TO_ADDR
66163: LD_VAR 0 5
66167: PUSH
66168: LD_INT 1
66170: ARRAY
66171: PUSH
66172: FOR_TO
66173: IFFALSE 66252
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
66175: LD_VAR 0 5
66179: PUSH
66180: LD_INT 1
66182: ARRAY
66183: PUSH
66184: LD_VAR 0 4
66188: ARRAY
66189: PPUSH
66190: LD_VAR 0 5
66194: PUSH
66195: LD_INT 2
66197: ARRAY
66198: PUSH
66199: LD_VAR 0 4
66203: ARRAY
66204: PPUSH
66205: CALL_OW 351
66209: IFFALSE 66250
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
66211: LD_VAR 0 5
66215: PUSH
66216: LD_INT 1
66218: ARRAY
66219: PUSH
66220: LD_VAR 0 4
66224: ARRAY
66225: PPUSH
66226: LD_VAR 0 5
66230: PUSH
66231: LD_INT 2
66233: ARRAY
66234: PUSH
66235: LD_VAR 0 4
66239: ARRAY
66240: PPUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: CALL_OW 244
// end ;
66250: GO 66172
66252: POP
66253: POP
// end ;
66254: LD_VAR 0 3
66258: RET
// export function UniqueArray ( array ) ; var i ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
// result := [ ] ;
66263: LD_ADDR_VAR 0 2
66267: PUSH
66268: EMPTY
66269: ST_TO_ADDR
// if not array then
66270: LD_VAR 0 1
66274: NOT
66275: IFFALSE 66279
// exit ;
66277: GO 66340
// for i := 1 to array do
66279: LD_ADDR_VAR 0 3
66283: PUSH
66284: DOUBLE
66285: LD_INT 1
66287: DEC
66288: ST_TO_ADDR
66289: LD_VAR 0 1
66293: PUSH
66294: FOR_TO
66295: IFFALSE 66338
// if not array [ i ] in result then
66297: LD_VAR 0 1
66301: PUSH
66302: LD_VAR 0 3
66306: ARRAY
66307: PUSH
66308: LD_VAR 0 2
66312: IN
66313: NOT
66314: IFFALSE 66336
// result := Join ( result , i ) ;
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: LD_VAR 0 3
66330: PPUSH
66331: CALL 60991 0 2
66335: ST_TO_ADDR
66336: GO 66294
66338: POP
66339: POP
// end ;
66340: LD_VAR 0 2
66344: RET
