// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ;
  14: END
// every 0 0$1 do var un , x , i ;
  15: GO 17
  17: DISABLE
  18: LD_INT 0
  20: PPUSH
  21: PPUSH
  22: PPUSH
// begin uc_side := 2 ;
  23: LD_ADDR_OWVAR 20
  27: PUSH
  28: LD_INT 2
  30: ST_TO_ADDR
// uc_nation := 2 ;
  31: LD_ADDR_OWVAR 21
  35: PUSH
  36: LD_INT 2
  38: ST_TO_ADDR
// i := 0 ;
  39: LD_ADDR_VAR 0 3
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_gun , 100 ) ;
  47: LD_INT 14
  49: PPUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 27
  58: PPUSH
  59: LD_INT 100
  61: PPUSH
  62: CALL 26201 0 5
// un := CreateVehicle ;
  66: LD_ADDR_VAR 0 1
  70: PUSH
  71: CALL_OW 45
  75: ST_TO_ADDR
// repeat wait ( 3 ) ;
  76: LD_INT 3
  78: PPUSH
  79: CALL_OW 67
// i := Inc ( i ) ;
  83: LD_ADDR_VAR 0 3
  87: PUSH
  88: LD_VAR 0 3
  92: PPUSH
  93: CALL 60413 0 1
  97: ST_TO_ADDR
// display_strings := i ;
  98: LD_ADDR_OWVAR 47
 102: PUSH
 103: LD_VAR 0 3
 107: ST_TO_ADDR
// x := PlaceUnitArea ( un , area130 , false ) ;
 108: LD_ADDR_VAR 0 2
 112: PUSH
 113: LD_VAR 0 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: CALL_OW 49
 128: ST_TO_ADDR
// until x ;
 129: LD_VAR 0 2
 133: IFFALSE 76
// end ; end_of_file
 135: PPOPN 3
 137: END
// export globalGameSaveCounter ; every 0 0$1 do
 138: GO 140
 140: DISABLE
// begin enable ;
 141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 142: LD_STRING updateTimer(
 144: PUSH
 145: LD_OWVAR 1
 149: STR
 150: PUSH
 151: LD_STRING );
 153: STR
 154: PPUSH
 155: CALL_OW 559
// end ;
 159: END
// every 0 0$1 do
 160: GO 162
 162: DISABLE
// begin globalGameSaveCounter := 0 ;
 163: LD_ADDR_EXP 1
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 171: LD_STRING setGameSaveCounter(0)
 173: PPUSH
 174: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 178: LD_STRING initStreamRollete();
 180: PPUSH
 181: CALL_OW 559
// InitStreamMode ;
 185: CALL 1528 0 0
// DefineStreamItems ( false ) ;
 189: LD_INT 0
 191: PPUSH
 192: CALL 1992 0 1
// end ;
 196: END
// export function SOS_MapStart ( ) ; begin
 197: LD_INT 0
 199: PPUSH
// if streamModeActive then
 200: LD_EXP 2
 204: IFFALSE 213
// DefineStreamItems ( true ) ;
 206: LD_INT 1
 208: PPUSH
 209: CALL 1992 0 1
// UpdateLuaVariables ( ) ;
 213: CALL 230 0 0
// UpdateFactoryWaypoints ( ) ;
 217: CALL 14861 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 221: CALL 15118 0 0
// end ;
 225: LD_VAR 0 1
 229: RET
// function UpdateLuaVariables ( ) ; begin
 230: LD_INT 0
 232: PPUSH
// if globalGameSaveCounter then
 233: LD_EXP 1
 237: IFFALSE 271
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 239: LD_ADDR_EXP 1
 243: PUSH
 244: LD_EXP 1
 248: PPUSH
 249: CALL 60413 0 1
 253: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 254: LD_STRING setGameSaveCounter(
 256: PUSH
 257: LD_EXP 1
 261: STR
 262: PUSH
 263: LD_STRING )
 265: STR
 266: PPUSH
 267: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 271: LD_STRING setGameDifficulty(
 273: PUSH
 274: LD_OWVAR 67
 278: STR
 279: PUSH
 280: LD_STRING )
 282: STR
 283: PPUSH
 284: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 288: LD_STRING displayDifficulty(
 290: PUSH
 291: LD_OWVAR 67
 295: STR
 296: PUSH
 297: LD_STRING )
 299: STR
 300: PPUSH
 301: CALL_OW 559
// end ;
 305: LD_VAR 0 1
 309: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 310: LD_INT 0
 312: PPUSH
// if p2 = stream_mode then
 313: LD_VAR 0 2
 317: PUSH
 318: LD_INT 100
 320: EQUAL
 321: IFFALSE 1324
// begin if not StreamModeActive then
 323: LD_EXP 2
 327: NOT
 328: IFFALSE 338
// StreamModeActive := true ;
 330: LD_ADDR_EXP 2
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// if p3 = 0 then
 338: LD_VAR 0 3
 342: PUSH
 343: LD_INT 0
 345: EQUAL
 346: IFFALSE 352
// InitStreamMode ;
 348: CALL 1528 0 0
// if p3 = 1 then
 352: LD_VAR 0 3
 356: PUSH
 357: LD_INT 1
 359: EQUAL
 360: IFFALSE 370
// sRocket := true ;
 362: LD_ADDR_EXP 7
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// if p3 = 2 then
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: IFFALSE 388
// sSpeed := true ;
 380: LD_ADDR_EXP 6
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// if p3 = 3 then
 388: LD_VAR 0 3
 392: PUSH
 393: LD_INT 3
 395: EQUAL
 396: IFFALSE 406
// sEngine := true ;
 398: LD_ADDR_EXP 8
 402: PUSH
 403: LD_INT 1
 405: ST_TO_ADDR
// if p3 = 4 then
 406: LD_VAR 0 3
 410: PUSH
 411: LD_INT 4
 413: EQUAL
 414: IFFALSE 424
// sSpec := true ;
 416: LD_ADDR_EXP 5
 420: PUSH
 421: LD_INT 1
 423: ST_TO_ADDR
// if p3 = 5 then
 424: LD_VAR 0 3
 428: PUSH
 429: LD_INT 5
 431: EQUAL
 432: IFFALSE 442
// sLevel := true ;
 434: LD_ADDR_EXP 9
 438: PUSH
 439: LD_INT 1
 441: ST_TO_ADDR
// if p3 = 6 then
 442: LD_VAR 0 3
 446: PUSH
 447: LD_INT 6
 449: EQUAL
 450: IFFALSE 460
// sArmoury := true ;
 452: LD_ADDR_EXP 10
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// if p3 = 7 then
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 7
 467: EQUAL
 468: IFFALSE 478
// sRadar := true ;
 470: LD_ADDR_EXP 11
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// if p3 = 8 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_INT 8
 485: EQUAL
 486: IFFALSE 496
// sBunker := true ;
 488: LD_ADDR_EXP 12
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// if p3 = 9 then
 496: LD_VAR 0 3
 500: PUSH
 501: LD_INT 9
 503: EQUAL
 504: IFFALSE 514
// sHack := true ;
 506: LD_ADDR_EXP 13
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// if p3 = 10 then
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 10
 521: EQUAL
 522: IFFALSE 532
// sFire := true ;
 524: LD_ADDR_EXP 14
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// if p3 = 11 then
 532: LD_VAR 0 3
 536: PUSH
 537: LD_INT 11
 539: EQUAL
 540: IFFALSE 550
// sRefresh := true ;
 542: LD_ADDR_EXP 15
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// if p3 = 12 then
 550: LD_VAR 0 3
 554: PUSH
 555: LD_INT 12
 557: EQUAL
 558: IFFALSE 568
// sExp := true ;
 560: LD_ADDR_EXP 16
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// if p3 = 13 then
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 13
 575: EQUAL
 576: IFFALSE 586
// sDepot := true ;
 578: LD_ADDR_EXP 17
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// if p3 = 14 then
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 14
 593: EQUAL
 594: IFFALSE 604
// sFlag := true ;
 596: LD_ADDR_EXP 18
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if p3 = 15 then
 604: LD_VAR 0 3
 608: PUSH
 609: LD_INT 15
 611: EQUAL
 612: IFFALSE 622
// sKamikadze := true ;
 614: LD_ADDR_EXP 26
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
// if p3 = 16 then
 622: LD_VAR 0 3
 626: PUSH
 627: LD_INT 16
 629: EQUAL
 630: IFFALSE 640
// sTroll := true ;
 632: LD_ADDR_EXP 27
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// if p3 = 17 then
 640: LD_VAR 0 3
 644: PUSH
 645: LD_INT 17
 647: EQUAL
 648: IFFALSE 658
// sSlow := true ;
 650: LD_ADDR_EXP 28
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// if p3 = 18 then
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 18
 665: EQUAL
 666: IFFALSE 676
// sLack := true ;
 668: LD_ADDR_EXP 29
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// if p3 = 19 then
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 19
 683: EQUAL
 684: IFFALSE 694
// sTank := true ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// if p3 = 20 then
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 20
 701: EQUAL
 702: IFFALSE 712
// sRemote := true ;
 704: LD_ADDR_EXP 32
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// if p3 = 21 then
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 21
 719: EQUAL
 720: IFFALSE 730
// sPowell := true ;
 722: LD_ADDR_EXP 33
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// if p3 = 22 then
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 22
 737: EQUAL
 738: IFFALSE 748
// sTeleport := true ;
 740: LD_ADDR_EXP 36
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// if p3 = 23 then
 748: LD_VAR 0 3
 752: PUSH
 753: LD_INT 23
 755: EQUAL
 756: IFFALSE 766
// sOilTower := true ;
 758: LD_ADDR_EXP 38
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// if p3 = 24 then
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 24
 773: EQUAL
 774: IFFALSE 784
// sShovel := true ;
 776: LD_ADDR_EXP 39
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// if p3 = 25 then
 784: LD_VAR 0 3
 788: PUSH
 789: LD_INT 25
 791: EQUAL
 792: IFFALSE 802
// sSheik := true ;
 794: LD_ADDR_EXP 40
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// if p3 = 26 then
 802: LD_VAR 0 3
 806: PUSH
 807: LD_INT 26
 809: EQUAL
 810: IFFALSE 820
// sEarthquake := true ;
 812: LD_ADDR_EXP 42
 816: PUSH
 817: LD_INT 1
 819: ST_TO_ADDR
// if p3 = 27 then
 820: LD_VAR 0 3
 824: PUSH
 825: LD_INT 27
 827: EQUAL
 828: IFFALSE 838
// sAI := true ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// if p3 = 28 then
 838: LD_VAR 0 3
 842: PUSH
 843: LD_INT 28
 845: EQUAL
 846: IFFALSE 856
// sCargo := true ;
 848: LD_ADDR_EXP 46
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// if p3 = 29 then
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 29
 863: EQUAL
 864: IFFALSE 874
// sDLaser := true ;
 866: LD_ADDR_EXP 47
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// if p3 = 30 then
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 30
 881: EQUAL
 882: IFFALSE 892
// sExchange := true ;
 884: LD_ADDR_EXP 48
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
// if p3 = 31 then
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 31
 899: EQUAL
 900: IFFALSE 910
// sFac := true ;
 902: LD_ADDR_EXP 49
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// if p3 = 32 then
 910: LD_VAR 0 3
 914: PUSH
 915: LD_INT 32
 917: EQUAL
 918: IFFALSE 928
// sPower := true ;
 920: LD_ADDR_EXP 50
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// if p3 = 33 then
 928: LD_VAR 0 3
 932: PUSH
 933: LD_INT 33
 935: EQUAL
 936: IFFALSE 946
// sRandom := true ;
 938: LD_ADDR_EXP 51
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// if p3 = 34 then
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 34
 953: EQUAL
 954: IFFALSE 964
// sShield := true ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_INT 1
 963: ST_TO_ADDR
// if p3 = 35 then
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 35
 971: EQUAL
 972: IFFALSE 982
// sTime := true ;
 974: LD_ADDR_EXP 53
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// if p3 = 36 then
 982: LD_VAR 0 3
 986: PUSH
 987: LD_INT 36
 989: EQUAL
 990: IFFALSE 1000
// sTools := true ;
 992: LD_ADDR_EXP 54
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// if p3 = 101 then
1000: LD_VAR 0 3
1004: PUSH
1005: LD_INT 101
1007: EQUAL
1008: IFFALSE 1018
// sSold := true ;
1010: LD_ADDR_EXP 19
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if p3 = 102 then
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 102
1025: EQUAL
1026: IFFALSE 1036
// sDiff := true ;
1028: LD_ADDR_EXP 20
1032: PUSH
1033: LD_INT 1
1035: ST_TO_ADDR
// if p3 = 103 then
1036: LD_VAR 0 3
1040: PUSH
1041: LD_INT 103
1043: EQUAL
1044: IFFALSE 1054
// sFog := true ;
1046: LD_ADDR_EXP 23
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// if p3 = 104 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 104
1061: EQUAL
1062: IFFALSE 1072
// sReset := true ;
1064: LD_ADDR_EXP 24
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// if p3 = 105 then
1072: LD_VAR 0 3
1076: PUSH
1077: LD_INT 105
1079: EQUAL
1080: IFFALSE 1090
// sSun := true ;
1082: LD_ADDR_EXP 25
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// if p3 = 106 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 106
1097: EQUAL
1098: IFFALSE 1108
// sTiger := true ;
1100: LD_ADDR_EXP 21
1104: PUSH
1105: LD_INT 1
1107: ST_TO_ADDR
// if p3 = 107 then
1108: LD_VAR 0 3
1112: PUSH
1113: LD_INT 107
1115: EQUAL
1116: IFFALSE 1126
// sBomb := true ;
1118: LD_ADDR_EXP 22
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// if p3 = 108 then
1126: LD_VAR 0 3
1130: PUSH
1131: LD_INT 108
1133: EQUAL
1134: IFFALSE 1144
// sWound := true ;
1136: LD_ADDR_EXP 30
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// if p3 = 109 then
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 109
1151: EQUAL
1152: IFFALSE 1162
// sBetray := true ;
1154: LD_ADDR_EXP 34
1158: PUSH
1159: LD_INT 1
1161: ST_TO_ADDR
// if p3 = 110 then
1162: LD_VAR 0 3
1166: PUSH
1167: LD_INT 110
1169: EQUAL
1170: IFFALSE 1180
// sContamin := true ;
1172: LD_ADDR_EXP 35
1176: PUSH
1177: LD_INT 1
1179: ST_TO_ADDR
// if p3 = 111 then
1180: LD_VAR 0 3
1184: PUSH
1185: LD_INT 111
1187: EQUAL
1188: IFFALSE 1198
// sOil := true ;
1190: LD_ADDR_EXP 37
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if p3 = 112 then
1198: LD_VAR 0 3
1202: PUSH
1203: LD_INT 112
1205: EQUAL
1206: IFFALSE 1216
// sStu := true ;
1208: LD_ADDR_EXP 41
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if p3 = 113 then
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 113
1223: EQUAL
1224: IFFALSE 1234
// sBazooka := true ;
1226: LD_ADDR_EXP 44
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// if p3 = 114 then
1234: LD_VAR 0 3
1238: PUSH
1239: LD_INT 114
1241: EQUAL
1242: IFFALSE 1252
// sMortar := true ;
1244: LD_ADDR_EXP 45
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// if p3 = 115 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 115
1259: EQUAL
1260: IFFALSE 1270
// sRanger := true ;
1262: LD_ADDR_EXP 55
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// if p3 = 116 then
1270: LD_VAR 0 3
1274: PUSH
1275: LD_INT 116
1277: EQUAL
1278: IFFALSE 1288
// sComputer := true ;
1280: LD_ADDR_EXP 56
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// if p3 = 117 then
1288: LD_VAR 0 3
1292: PUSH
1293: LD_INT 117
1295: EQUAL
1296: IFFALSE 1306
// s30 := true ;
1298: LD_ADDR_EXP 57
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// if p3 = 118 then
1306: LD_VAR 0 3
1310: PUSH
1311: LD_INT 118
1313: EQUAL
1314: IFFALSE 1324
// s60 := true ;
1316: LD_ADDR_EXP 58
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// end ; if p2 = hack_mode then
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 101
1331: EQUAL
1332: IFFALSE 1460
// begin case p3 of 1 :
1334: LD_VAR 0 3
1338: PUSH
1339: LD_INT 1
1341: DOUBLE
1342: EQUAL
1343: IFTRUE 1347
1345: GO 1354
1347: POP
// hHackUnlimitedResources ; 2 :
1348: CALL 13607 0 0
1352: GO 1460
1354: LD_INT 2
1356: DOUBLE
1357: EQUAL
1358: IFTRUE 1362
1360: GO 1369
1362: POP
// hHackSetLevel10 ; 3 :
1363: CALL 13740 0 0
1367: GO 1460
1369: LD_INT 3
1371: DOUBLE
1372: EQUAL
1373: IFTRUE 1377
1375: GO 1384
1377: POP
// hHackSetLevel10YourUnits ; 4 :
1378: CALL 13825 0 0
1382: GO 1460
1384: LD_INT 4
1386: DOUBLE
1387: EQUAL
1388: IFTRUE 1392
1390: GO 1399
1392: POP
// hHackInvincible ; 5 :
1393: CALL 14273 0 0
1397: GO 1460
1399: LD_INT 5
1401: DOUBLE
1402: EQUAL
1403: IFTRUE 1407
1405: GO 1414
1407: POP
// hHackInvisible ; 6 :
1408: CALL 14384 0 0
1412: GO 1460
1414: LD_INT 6
1416: DOUBLE
1417: EQUAL
1418: IFTRUE 1422
1420: GO 1429
1422: POP
// hHackChangeYourSide ; 7 :
1423: CALL 14441 0 0
1427: GO 1460
1429: LD_INT 7
1431: DOUBLE
1432: EQUAL
1433: IFTRUE 1437
1435: GO 1444
1437: POP
// hHackChangeUnitSide ; 8 :
1438: CALL 14483 0 0
1442: GO 1460
1444: LD_INT 8
1446: DOUBLE
1447: EQUAL
1448: IFTRUE 1452
1450: GO 1459
1452: POP
// hHackFog ; end ;
1453: CALL 14584 0 0
1457: GO 1460
1459: POP
// end ; if p2 = game_save_mode then
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 102
1467: EQUAL
1468: IFFALSE 1523
// begin if p3 = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1490
// globalGameSaveCounter := p4 ;
1480: LD_ADDR_EXP 1
1484: PUSH
1485: LD_VAR 0 4
1489: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1490: LD_VAR 0 3
1494: PUSH
1495: LD_INT 2
1497: EQUAL
1498: PUSH
1499: LD_EXP 1
1503: AND
1504: IFFALSE 1523
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1506: LD_STRING setGameSaveCounter(
1508: PUSH
1509: LD_EXP 1
1513: STR
1514: PUSH
1515: LD_STRING )
1517: STR
1518: PPUSH
1519: CALL_OW 559
// end ; end ;
1523: LD_VAR 0 7
1527: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1528: LD_INT 0
1530: PPUSH
// streamModeActive := false ;
1531: LD_ADDR_EXP 2
1535: PUSH
1536: LD_INT 0
1538: ST_TO_ADDR
// normalCounter := 36 ;
1539: LD_ADDR_EXP 3
1543: PUSH
1544: LD_INT 36
1546: ST_TO_ADDR
// hardcoreCounter := 18 ;
1547: LD_ADDR_EXP 4
1551: PUSH
1552: LD_INT 18
1554: ST_TO_ADDR
// sRocket := false ;
1555: LD_ADDR_EXP 7
1559: PUSH
1560: LD_INT 0
1562: ST_TO_ADDR
// sSpeed := false ;
1563: LD_ADDR_EXP 6
1567: PUSH
1568: LD_INT 0
1570: ST_TO_ADDR
// sEngine := false ;
1571: LD_ADDR_EXP 8
1575: PUSH
1576: LD_INT 0
1578: ST_TO_ADDR
// sSpec := false ;
1579: LD_ADDR_EXP 5
1583: PUSH
1584: LD_INT 0
1586: ST_TO_ADDR
// sLevel := false ;
1587: LD_ADDR_EXP 9
1591: PUSH
1592: LD_INT 0
1594: ST_TO_ADDR
// sArmoury := false ;
1595: LD_ADDR_EXP 10
1599: PUSH
1600: LD_INT 0
1602: ST_TO_ADDR
// sRadar := false ;
1603: LD_ADDR_EXP 11
1607: PUSH
1608: LD_INT 0
1610: ST_TO_ADDR
// sBunker := false ;
1611: LD_ADDR_EXP 12
1615: PUSH
1616: LD_INT 0
1618: ST_TO_ADDR
// sHack := false ;
1619: LD_ADDR_EXP 13
1623: PUSH
1624: LD_INT 0
1626: ST_TO_ADDR
// sFire := false ;
1627: LD_ADDR_EXP 14
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// sRefresh := false ;
1635: LD_ADDR_EXP 15
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// sExp := false ;
1643: LD_ADDR_EXP 16
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// sDepot := false ;
1651: LD_ADDR_EXP 17
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// sFlag := false ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// sKamikadze := false ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 0
1674: ST_TO_ADDR
// sTroll := false ;
1675: LD_ADDR_EXP 27
1679: PUSH
1680: LD_INT 0
1682: ST_TO_ADDR
// sSlow := false ;
1683: LD_ADDR_EXP 28
1687: PUSH
1688: LD_INT 0
1690: ST_TO_ADDR
// sLack := false ;
1691: LD_ADDR_EXP 29
1695: PUSH
1696: LD_INT 0
1698: ST_TO_ADDR
// sTank := false ;
1699: LD_ADDR_EXP 31
1703: PUSH
1704: LD_INT 0
1706: ST_TO_ADDR
// sRemote := false ;
1707: LD_ADDR_EXP 32
1711: PUSH
1712: LD_INT 0
1714: ST_TO_ADDR
// sPowell := false ;
1715: LD_ADDR_EXP 33
1719: PUSH
1720: LD_INT 0
1722: ST_TO_ADDR
// sTeleport := false ;
1723: LD_ADDR_EXP 36
1727: PUSH
1728: LD_INT 0
1730: ST_TO_ADDR
// sOilTower := false ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: LD_INT 0
1738: ST_TO_ADDR
// sShovel := false ;
1739: LD_ADDR_EXP 39
1743: PUSH
1744: LD_INT 0
1746: ST_TO_ADDR
// sSheik := false ;
1747: LD_ADDR_EXP 40
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// sEarthquake := false ;
1755: LD_ADDR_EXP 42
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// sAI := false ;
1763: LD_ADDR_EXP 43
1767: PUSH
1768: LD_INT 0
1770: ST_TO_ADDR
// sCargo := false ;
1771: LD_ADDR_EXP 46
1775: PUSH
1776: LD_INT 0
1778: ST_TO_ADDR
// sDLaser := false ;
1779: LD_ADDR_EXP 47
1783: PUSH
1784: LD_INT 0
1786: ST_TO_ADDR
// sExchange := false ;
1787: LD_ADDR_EXP 48
1791: PUSH
1792: LD_INT 0
1794: ST_TO_ADDR
// sFac := false ;
1795: LD_ADDR_EXP 49
1799: PUSH
1800: LD_INT 0
1802: ST_TO_ADDR
// sPower := false ;
1803: LD_ADDR_EXP 50
1807: PUSH
1808: LD_INT 0
1810: ST_TO_ADDR
// sRandom := false ;
1811: LD_ADDR_EXP 51
1815: PUSH
1816: LD_INT 0
1818: ST_TO_ADDR
// sShield := false ;
1819: LD_ADDR_EXP 52
1823: PUSH
1824: LD_INT 0
1826: ST_TO_ADDR
// sTime := false ;
1827: LD_ADDR_EXP 53
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// sTools := false ;
1835: LD_ADDR_EXP 54
1839: PUSH
1840: LD_INT 0
1842: ST_TO_ADDR
// sSold := false ;
1843: LD_ADDR_EXP 19
1847: PUSH
1848: LD_INT 0
1850: ST_TO_ADDR
// sDiff := false ;
1851: LD_ADDR_EXP 20
1855: PUSH
1856: LD_INT 0
1858: ST_TO_ADDR
// sFog := false ;
1859: LD_ADDR_EXP 23
1863: PUSH
1864: LD_INT 0
1866: ST_TO_ADDR
// sReset := false ;
1867: LD_ADDR_EXP 24
1871: PUSH
1872: LD_INT 0
1874: ST_TO_ADDR
// sSun := false ;
1875: LD_ADDR_EXP 25
1879: PUSH
1880: LD_INT 0
1882: ST_TO_ADDR
// sTiger := false ;
1883: LD_ADDR_EXP 21
1887: PUSH
1888: LD_INT 0
1890: ST_TO_ADDR
// sBomb := false ;
1891: LD_ADDR_EXP 22
1895: PUSH
1896: LD_INT 0
1898: ST_TO_ADDR
// sWound := false ;
1899: LD_ADDR_EXP 30
1903: PUSH
1904: LD_INT 0
1906: ST_TO_ADDR
// sBetray := false ;
1907: LD_ADDR_EXP 34
1911: PUSH
1912: LD_INT 0
1914: ST_TO_ADDR
// sContamin := false ;
1915: LD_ADDR_EXP 35
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// sOil := false ;
1923: LD_ADDR_EXP 37
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// sStu := false ;
1931: LD_ADDR_EXP 41
1935: PUSH
1936: LD_INT 0
1938: ST_TO_ADDR
// sBazooka := false ;
1939: LD_ADDR_EXP 44
1943: PUSH
1944: LD_INT 0
1946: ST_TO_ADDR
// sMortar := false ;
1947: LD_ADDR_EXP 45
1951: PUSH
1952: LD_INT 0
1954: ST_TO_ADDR
// sRanger := false ;
1955: LD_ADDR_EXP 55
1959: PUSH
1960: LD_INT 0
1962: ST_TO_ADDR
// sComputer := false ;
1963: LD_ADDR_EXP 56
1967: PUSH
1968: LD_INT 0
1970: ST_TO_ADDR
// s30 := false ;
1971: LD_ADDR_EXP 57
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// s60 := false ;
1979: LD_ADDR_EXP 58
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// end ;
1987: LD_VAR 0 1
1991: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := [ ] ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: EMPTY
2007: ST_TO_ADDR
// if campaign_id = 1 then
2008: LD_OWVAR 69
2012: PUSH
2013: LD_INT 1
2015: EQUAL
2016: IFFALSE 5182
// begin case mission_number of 1 :
2018: LD_OWVAR 70
2022: PUSH
2023: LD_INT 1
2025: DOUBLE
2026: EQUAL
2027: IFTRUE 2031
2029: GO 2107
2031: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: LD_INT 11
2045: PUSH
2046: LD_INT 12
2048: PUSH
2049: LD_INT 15
2051: PUSH
2052: LD_INT 16
2054: PUSH
2055: LD_INT 22
2057: PUSH
2058: LD_INT 23
2060: PUSH
2061: LD_INT 26
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 101
2077: PUSH
2078: LD_INT 102
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 116
2086: PUSH
2087: LD_INT 117
2089: PUSH
2090: LD_INT 118
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
2105: GO 5180
2107: LD_INT 2
2109: DOUBLE
2110: EQUAL
2111: IFTRUE 2115
2113: GO 2199
2115: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: LD_INT 4
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 12
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 16
2138: PUSH
2139: LD_INT 22
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 26
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 101
2161: PUSH
2162: LD_INT 102
2164: PUSH
2165: LD_INT 105
2167: PUSH
2168: LD_INT 106
2170: PUSH
2171: LD_INT 108
2173: PUSH
2174: LD_INT 116
2176: PUSH
2177: LD_INT 117
2179: PUSH
2180: LD_INT 118
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: ST_TO_ADDR
2197: GO 5180
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2295
2207: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: LD_INT 5
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 15
2230: PUSH
2231: LD_INT 16
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 26
2239: PUSH
2240: LD_INT 36
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 101
2257: PUSH
2258: LD_INT 102
2260: PUSH
2261: LD_INT 105
2263: PUSH
2264: LD_INT 106
2266: PUSH
2267: LD_INT 108
2269: PUSH
2270: LD_INT 116
2272: PUSH
2273: LD_INT 117
2275: PUSH
2276: LD_INT 118
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: ST_TO_ADDR
2293: GO 5180
2295: LD_INT 4
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2399
2303: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 5
2317: PUSH
2318: LD_INT 8
2320: PUSH
2321: LD_INT 11
2323: PUSH
2324: LD_INT 12
2326: PUSH
2327: LD_INT 15
2329: PUSH
2330: LD_INT 16
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 23
2338: PUSH
2339: LD_INT 26
2341: PUSH
2342: LD_INT 36
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 101
2361: PUSH
2362: LD_INT 102
2364: PUSH
2365: LD_INT 105
2367: PUSH
2368: LD_INT 106
2370: PUSH
2371: LD_INT 108
2373: PUSH
2374: LD_INT 116
2376: PUSH
2377: LD_INT 117
2379: PUSH
2380: LD_INT 118
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: ST_TO_ADDR
2397: GO 5180
2399: LD_INT 5
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2519
2407: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_INT 2
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: LD_INT 8
2427: PUSH
2428: LD_INT 11
2430: PUSH
2431: LD_INT 12
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 16
2439: PUSH
2440: LD_INT 22
2442: PUSH
2443: LD_INT 23
2445: PUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 26
2451: PUSH
2452: LD_INT 36
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 101
2473: PUSH
2474: LD_INT 102
2476: PUSH
2477: LD_INT 105
2479: PUSH
2480: LD_INT 106
2482: PUSH
2483: LD_INT 108
2485: PUSH
2486: LD_INT 109
2488: PUSH
2489: LD_INT 112
2491: PUSH
2492: LD_INT 116
2494: PUSH
2495: LD_INT 117
2497: PUSH
2498: LD_INT 118
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: ST_TO_ADDR
2517: GO 5180
2519: LD_INT 6
2521: DOUBLE
2522: EQUAL
2523: IFTRUE 2527
2525: GO 2659
2527: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: LD_INT 4
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 6
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 11
2550: PUSH
2551: LD_INT 12
2553: PUSH
2554: LD_INT 15
2556: PUSH
2557: LD_INT 16
2559: PUSH
2560: LD_INT 20
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: LD_INT 25
2574: PUSH
2575: LD_INT 26
2577: PUSH
2578: LD_INT 30
2580: PUSH
2581: LD_INT 31
2583: PUSH
2584: LD_INT 32
2586: PUSH
2587: LD_INT 36
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 101
2613: PUSH
2614: LD_INT 102
2616: PUSH
2617: LD_INT 105
2619: PUSH
2620: LD_INT 106
2622: PUSH
2623: LD_INT 108
2625: PUSH
2626: LD_INT 109
2628: PUSH
2629: LD_INT 112
2631: PUSH
2632: LD_INT 116
2634: PUSH
2635: LD_INT 117
2637: PUSH
2638: LD_INT 118
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: ST_TO_ADDR
2657: GO 5180
2659: LD_INT 7
2661: DOUBLE
2662: EQUAL
2663: IFTRUE 2667
2665: GO 2779
2667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_INT 2
2675: PUSH
2676: LD_INT 4
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 11
2687: PUSH
2688: LD_INT 12
2690: PUSH
2691: LD_INT 15
2693: PUSH
2694: LD_INT 16
2696: PUSH
2697: LD_INT 20
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 22
2705: PUSH
2706: LD_INT 23
2708: PUSH
2709: LD_INT 25
2711: PUSH
2712: LD_INT 26
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 101
2733: PUSH
2734: LD_INT 102
2736: PUSH
2737: LD_INT 103
2739: PUSH
2740: LD_INT 105
2742: PUSH
2743: LD_INT 106
2745: PUSH
2746: LD_INT 108
2748: PUSH
2749: LD_INT 112
2751: PUSH
2752: LD_INT 116
2754: PUSH
2755: LD_INT 117
2757: PUSH
2758: LD_INT 118
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
2777: GO 5180
2779: LD_INT 8
2781: DOUBLE
2782: EQUAL
2783: IFTRUE 2787
2785: GO 2927
2787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 4
2798: PUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: LD_INT 11
2813: PUSH
2814: LD_INT 12
2816: PUSH
2817: LD_INT 15
2819: PUSH
2820: LD_INT 16
2822: PUSH
2823: LD_INT 20
2825: PUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 23
2834: PUSH
2835: LD_INT 25
2837: PUSH
2838: LD_INT 26
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: LD_INT 32
2849: PUSH
2850: LD_INT 36
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 101
2877: PUSH
2878: LD_INT 102
2880: PUSH
2881: LD_INT 103
2883: PUSH
2884: LD_INT 105
2886: PUSH
2887: LD_INT 106
2889: PUSH
2890: LD_INT 108
2892: PUSH
2893: LD_INT 109
2895: PUSH
2896: LD_INT 112
2898: PUSH
2899: LD_INT 116
2901: PUSH
2902: LD_INT 117
2904: PUSH
2905: LD_INT 118
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: ST_TO_ADDR
2925: GO 5180
2927: LD_INT 9
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 3083
2935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 4
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: LD_INT 11
2961: PUSH
2962: LD_INT 12
2964: PUSH
2965: LD_INT 15
2967: PUSH
2968: LD_INT 16
2970: PUSH
2971: LD_INT 20
2973: PUSH
2974: LD_INT 21
2976: PUSH
2977: LD_INT 22
2979: PUSH
2980: LD_INT 23
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 26
2988: PUSH
2989: LD_INT 28
2991: PUSH
2992: LD_INT 30
2994: PUSH
2995: LD_INT 31
2997: PUSH
2998: LD_INT 32
3000: PUSH
3001: LD_INT 36
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 101
3029: PUSH
3030: LD_INT 102
3032: PUSH
3033: LD_INT 103
3035: PUSH
3036: LD_INT 105
3038: PUSH
3039: LD_INT 106
3041: PUSH
3042: LD_INT 108
3044: PUSH
3045: LD_INT 109
3047: PUSH
3048: LD_INT 112
3050: PUSH
3051: LD_INT 114
3053: PUSH
3054: LD_INT 116
3056: PUSH
3057: LD_INT 117
3059: PUSH
3060: LD_INT 118
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: ST_TO_ADDR
3081: GO 5180
3083: LD_INT 10
3085: DOUBLE
3086: EQUAL
3087: IFTRUE 3091
3089: GO 3287
3091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: LD_INT 5
3105: PUSH
3106: LD_INT 6
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: LD_INT 8
3114: PUSH
3115: LD_INT 9
3117: PUSH
3118: LD_INT 10
3120: PUSH
3121: LD_INT 11
3123: PUSH
3124: LD_INT 12
3126: PUSH
3127: LD_INT 13
3129: PUSH
3130: LD_INT 14
3132: PUSH
3133: LD_INT 15
3135: PUSH
3136: LD_INT 16
3138: PUSH
3139: LD_INT 17
3141: PUSH
3142: LD_INT 18
3144: PUSH
3145: LD_INT 19
3147: PUSH
3148: LD_INT 20
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 23
3159: PUSH
3160: LD_INT 24
3162: PUSH
3163: LD_INT 25
3165: PUSH
3166: LD_INT 26
3168: PUSH
3169: LD_INT 28
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 31
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: LD_INT 36
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 101
3217: PUSH
3218: LD_INT 102
3220: PUSH
3221: LD_INT 103
3223: PUSH
3224: LD_INT 104
3226: PUSH
3227: LD_INT 105
3229: PUSH
3230: LD_INT 106
3232: PUSH
3233: LD_INT 107
3235: PUSH
3236: LD_INT 108
3238: PUSH
3239: LD_INT 109
3241: PUSH
3242: LD_INT 110
3244: PUSH
3245: LD_INT 111
3247: PUSH
3248: LD_INT 112
3250: PUSH
3251: LD_INT 114
3253: PUSH
3254: LD_INT 116
3256: PUSH
3257: LD_INT 117
3259: PUSH
3260: LD_INT 118
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: ST_TO_ADDR
3285: GO 5180
3287: LD_INT 11
3289: DOUBLE
3290: EQUAL
3291: IFTRUE 3295
3293: GO 3499
3295: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 6
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 8
3321: PUSH
3322: LD_INT 9
3324: PUSH
3325: LD_INT 10
3327: PUSH
3328: LD_INT 11
3330: PUSH
3331: LD_INT 12
3333: PUSH
3334: LD_INT 13
3336: PUSH
3337: LD_INT 14
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 16
3345: PUSH
3346: LD_INT 17
3348: PUSH
3349: LD_INT 18
3351: PUSH
3352: LD_INT 19
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 23
3366: PUSH
3367: LD_INT 24
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 28
3378: PUSH
3379: LD_INT 30
3381: PUSH
3382: LD_INT 31
3384: PUSH
3385: LD_INT 32
3387: PUSH
3388: LD_INT 34
3390: PUSH
3391: LD_INT 36
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 101
3429: PUSH
3430: LD_INT 102
3432: PUSH
3433: LD_INT 103
3435: PUSH
3436: LD_INT 104
3438: PUSH
3439: LD_INT 105
3441: PUSH
3442: LD_INT 106
3444: PUSH
3445: LD_INT 107
3447: PUSH
3448: LD_INT 108
3450: PUSH
3451: LD_INT 109
3453: PUSH
3454: LD_INT 110
3456: PUSH
3457: LD_INT 111
3459: PUSH
3460: LD_INT 112
3462: PUSH
3463: LD_INT 114
3465: PUSH
3466: LD_INT 116
3468: PUSH
3469: LD_INT 117
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: ST_TO_ADDR
3497: GO 5180
3499: LD_INT 12
3501: DOUBLE
3502: EQUAL
3503: IFTRUE 3507
3505: GO 3727
3507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: LD_INT 5
3527: PUSH
3528: LD_INT 6
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: LD_INT 9
3539: PUSH
3540: LD_INT 10
3542: PUSH
3543: LD_INT 11
3545: PUSH
3546: LD_INT 12
3548: PUSH
3549: LD_INT 13
3551: PUSH
3552: LD_INT 14
3554: PUSH
3555: LD_INT 15
3557: PUSH
3558: LD_INT 16
3560: PUSH
3561: LD_INT 17
3563: PUSH
3564: LD_INT 18
3566: PUSH
3567: LD_INT 19
3569: PUSH
3570: LD_INT 20
3572: PUSH
3573: LD_INT 21
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 24
3584: PUSH
3585: LD_INT 25
3587: PUSH
3588: LD_INT 26
3590: PUSH
3591: LD_INT 27
3593: PUSH
3594: LD_INT 28
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 31
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 33
3608: PUSH
3609: LD_INT 34
3611: PUSH
3612: LD_INT 36
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 101
3653: PUSH
3654: LD_INT 102
3656: PUSH
3657: LD_INT 103
3659: PUSH
3660: LD_INT 104
3662: PUSH
3663: LD_INT 105
3665: PUSH
3666: LD_INT 106
3668: PUSH
3669: LD_INT 107
3671: PUSH
3672: LD_INT 108
3674: PUSH
3675: LD_INT 109
3677: PUSH
3678: LD_INT 110
3680: PUSH
3681: LD_INT 111
3683: PUSH
3684: LD_INT 112
3686: PUSH
3687: LD_INT 113
3689: PUSH
3690: LD_INT 114
3692: PUSH
3693: LD_INT 116
3695: PUSH
3696: LD_INT 117
3698: PUSH
3699: LD_INT 118
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
3725: GO 5180
3727: LD_INT 13
3729: DOUBLE
3730: EQUAL
3731: IFTRUE 3735
3733: GO 3943
3735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: LD_INT 8
3758: PUSH
3759: LD_INT 9
3761: PUSH
3762: LD_INT 10
3764: PUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: LD_INT 14
3773: PUSH
3774: LD_INT 15
3776: PUSH
3777: LD_INT 16
3779: PUSH
3780: LD_INT 17
3782: PUSH
3783: LD_INT 18
3785: PUSH
3786: LD_INT 19
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 25
3806: PUSH
3807: LD_INT 26
3809: PUSH
3810: LD_INT 27
3812: PUSH
3813: LD_INT 28
3815: PUSH
3816: LD_INT 30
3818: PUSH
3819: LD_INT 31
3821: PUSH
3822: LD_INT 32
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 34
3830: PUSH
3831: LD_INT 36
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 101
3869: PUSH
3870: LD_INT 102
3872: PUSH
3873: LD_INT 103
3875: PUSH
3876: LD_INT 104
3878: PUSH
3879: LD_INT 105
3881: PUSH
3882: LD_INT 106
3884: PUSH
3885: LD_INT 107
3887: PUSH
3888: LD_INT 108
3890: PUSH
3891: LD_INT 109
3893: PUSH
3894: LD_INT 110
3896: PUSH
3897: LD_INT 111
3899: PUSH
3900: LD_INT 112
3902: PUSH
3903: LD_INT 113
3905: PUSH
3906: LD_INT 114
3908: PUSH
3909: LD_INT 116
3911: PUSH
3912: LD_INT 117
3914: PUSH
3915: LD_INT 118
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: ST_TO_ADDR
3941: GO 5180
3943: LD_INT 14
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 4175
3951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: LD_INT 6
3974: PUSH
3975: LD_INT 7
3977: PUSH
3978: LD_INT 8
3980: PUSH
3981: LD_INT 9
3983: PUSH
3984: LD_INT 10
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 12
3992: PUSH
3993: LD_INT 13
3995: PUSH
3996: LD_INT 14
3998: PUSH
3999: LD_INT 15
4001: PUSH
4002: LD_INT 16
4004: PUSH
4005: LD_INT 17
4007: PUSH
4008: LD_INT 18
4010: PUSH
4011: LD_INT 19
4013: PUSH
4014: LD_INT 20
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 23
4025: PUSH
4026: LD_INT 24
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 26
4034: PUSH
4035: LD_INT 27
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 29
4043: PUSH
4044: LD_INT 30
4046: PUSH
4047: LD_INT 31
4049: PUSH
4050: LD_INT 32
4052: PUSH
4053: LD_INT 33
4055: PUSH
4056: LD_INT 34
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 101
4101: PUSH
4102: LD_INT 102
4104: PUSH
4105: LD_INT 103
4107: PUSH
4108: LD_INT 104
4110: PUSH
4111: LD_INT 105
4113: PUSH
4114: LD_INT 106
4116: PUSH
4117: LD_INT 107
4119: PUSH
4120: LD_INT 108
4122: PUSH
4123: LD_INT 109
4125: PUSH
4126: LD_INT 110
4128: PUSH
4129: LD_INT 111
4131: PUSH
4132: LD_INT 112
4134: PUSH
4135: LD_INT 113
4137: PUSH
4138: LD_INT 114
4140: PUSH
4141: LD_INT 116
4143: PUSH
4144: LD_INT 117
4146: PUSH
4147: LD_INT 118
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5180
4175: LD_INT 15
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4407
4183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: LD_INT 6
4206: PUSH
4207: LD_INT 7
4209: PUSH
4210: LD_INT 8
4212: PUSH
4213: LD_INT 9
4215: PUSH
4216: LD_INT 10
4218: PUSH
4219: LD_INT 11
4221: PUSH
4222: LD_INT 12
4224: PUSH
4225: LD_INT 13
4227: PUSH
4228: LD_INT 14
4230: PUSH
4231: LD_INT 15
4233: PUSH
4234: LD_INT 16
4236: PUSH
4237: LD_INT 17
4239: PUSH
4240: LD_INT 18
4242: PUSH
4243: LD_INT 19
4245: PUSH
4246: LD_INT 20
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 23
4257: PUSH
4258: LD_INT 24
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 27
4269: PUSH
4270: LD_INT 28
4272: PUSH
4273: LD_INT 29
4275: PUSH
4276: LD_INT 30
4278: PUSH
4279: LD_INT 31
4281: PUSH
4282: LD_INT 32
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 34
4290: PUSH
4291: LD_INT 36
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 101
4333: PUSH
4334: LD_INT 102
4336: PUSH
4337: LD_INT 103
4339: PUSH
4340: LD_INT 104
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 106
4348: PUSH
4349: LD_INT 107
4351: PUSH
4352: LD_INT 108
4354: PUSH
4355: LD_INT 109
4357: PUSH
4358: LD_INT 110
4360: PUSH
4361: LD_INT 111
4363: PUSH
4364: LD_INT 112
4366: PUSH
4367: LD_INT 113
4369: PUSH
4370: LD_INT 114
4372: PUSH
4373: LD_INT 116
4375: PUSH
4376: LD_INT 117
4378: PUSH
4379: LD_INT 118
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 5180
4407: LD_INT 16
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4551
4415: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: LD_INT 7
4432: PUSH
4433: LD_INT 11
4435: PUSH
4436: LD_INT 12
4438: PUSH
4439: LD_INT 15
4441: PUSH
4442: LD_INT 16
4444: PUSH
4445: LD_INT 20
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 23
4456: PUSH
4457: LD_INT 25
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 31
4468: PUSH
4469: LD_INT 32
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 34
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 101
4501: PUSH
4502: LD_INT 102
4504: PUSH
4505: LD_INT 103
4507: PUSH
4508: LD_INT 106
4510: PUSH
4511: LD_INT 108
4513: PUSH
4514: LD_INT 112
4516: PUSH
4517: LD_INT 113
4519: PUSH
4520: LD_INT 114
4522: PUSH
4523: LD_INT 116
4525: PUSH
4526: LD_INT 117
4528: PUSH
4529: LD_INT 118
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5180
4551: LD_INT 17
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4783
4559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: LD_INT 5
4579: PUSH
4580: LD_INT 6
4582: PUSH
4583: LD_INT 7
4585: PUSH
4586: LD_INT 8
4588: PUSH
4589: LD_INT 9
4591: PUSH
4592: LD_INT 10
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 12
4600: PUSH
4601: LD_INT 13
4603: PUSH
4604: LD_INT 14
4606: PUSH
4607: LD_INT 15
4609: PUSH
4610: LD_INT 16
4612: PUSH
4613: LD_INT 17
4615: PUSH
4616: LD_INT 18
4618: PUSH
4619: LD_INT 19
4621: PUSH
4622: LD_INT 20
4624: PUSH
4625: LD_INT 21
4627: PUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 23
4633: PUSH
4634: LD_INT 24
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 26
4642: PUSH
4643: LD_INT 27
4645: PUSH
4646: LD_INT 28
4648: PUSH
4649: LD_INT 29
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 33
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 36
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 101
4709: PUSH
4710: LD_INT 102
4712: PUSH
4713: LD_INT 103
4715: PUSH
4716: LD_INT 104
4718: PUSH
4719: LD_INT 105
4721: PUSH
4722: LD_INT 106
4724: PUSH
4725: LD_INT 107
4727: PUSH
4728: LD_INT 108
4730: PUSH
4731: LD_INT 109
4733: PUSH
4734: LD_INT 110
4736: PUSH
4737: LD_INT 111
4739: PUSH
4740: LD_INT 112
4742: PUSH
4743: LD_INT 113
4745: PUSH
4746: LD_INT 114
4748: PUSH
4749: LD_INT 116
4751: PUSH
4752: LD_INT 117
4754: PUSH
4755: LD_INT 118
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5180
4783: LD_INT 18
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4939
4791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 7
4808: PUSH
4809: LD_INT 11
4811: PUSH
4812: LD_INT 12
4814: PUSH
4815: LD_INT 15
4817: PUSH
4818: LD_INT 16
4820: PUSH
4821: LD_INT 20
4823: PUSH
4824: LD_INT 21
4826: PUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 23
4832: PUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 26
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 31
4844: PUSH
4845: LD_INT 32
4847: PUSH
4848: LD_INT 33
4850: PUSH
4851: LD_INT 34
4853: PUSH
4854: LD_INT 35
4856: PUSH
4857: LD_INT 36
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PUSH
4883: LD_INT 101
4885: PUSH
4886: LD_INT 102
4888: PUSH
4889: LD_INT 103
4891: PUSH
4892: LD_INT 106
4894: PUSH
4895: LD_INT 108
4897: PUSH
4898: LD_INT 112
4900: PUSH
4901: LD_INT 113
4903: PUSH
4904: LD_INT 114
4906: PUSH
4907: LD_INT 115
4909: PUSH
4910: LD_INT 116
4912: PUSH
4913: LD_INT 117
4915: PUSH
4916: LD_INT 118
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5180
4939: LD_INT 19
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5179
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 6
4970: PUSH
4971: LD_INT 7
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: LD_INT 9
4979: PUSH
4980: LD_INT 10
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: LD_INT 15
4997: PUSH
4998: LD_INT 16
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: LD_INT 18
5006: PUSH
5007: LD_INT 19
5009: PUSH
5010: LD_INT 20
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: LD_INT 25
5027: PUSH
5028: LD_INT 26
5030: PUSH
5031: LD_INT 27
5033: PUSH
5034: LD_INT 28
5036: PUSH
5037: LD_INT 29
5039: PUSH
5040: LD_INT 30
5042: PUSH
5043: LD_INT 31
5045: PUSH
5046: LD_INT 32
5048: PUSH
5049: LD_INT 33
5051: PUSH
5052: LD_INT 34
5054: PUSH
5055: LD_INT 35
5057: PUSH
5058: LD_INT 36
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 101
5101: PUSH
5102: LD_INT 102
5104: PUSH
5105: LD_INT 103
5107: PUSH
5108: LD_INT 104
5110: PUSH
5111: LD_INT 105
5113: PUSH
5114: LD_INT 106
5116: PUSH
5117: LD_INT 107
5119: PUSH
5120: LD_INT 108
5122: PUSH
5123: LD_INT 109
5125: PUSH
5126: LD_INT 110
5128: PUSH
5129: LD_INT 111
5131: PUSH
5132: LD_INT 112
5134: PUSH
5135: LD_INT 113
5137: PUSH
5138: LD_INT 114
5140: PUSH
5141: LD_INT 115
5143: PUSH
5144: LD_INT 116
5146: PUSH
5147: LD_INT 117
5149: PUSH
5150: LD_INT 118
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5180
5179: POP
// end else
5180: GO 5411
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: LD_INT 2
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 5
5201: PUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: LD_INT 9
5213: PUSH
5214: LD_INT 10
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: LD_INT 12
5222: PUSH
5223: LD_INT 13
5225: PUSH
5226: LD_INT 14
5228: PUSH
5229: LD_INT 15
5231: PUSH
5232: LD_INT 16
5234: PUSH
5235: LD_INT 17
5237: PUSH
5238: LD_INT 18
5240: PUSH
5241: LD_INT 19
5243: PUSH
5244: LD_INT 20
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_INT 23
5255: PUSH
5256: LD_INT 24
5258: PUSH
5259: LD_INT 25
5261: PUSH
5262: LD_INT 26
5264: PUSH
5265: LD_INT 27
5267: PUSH
5268: LD_INT 28
5270: PUSH
5271: LD_INT 29
5273: PUSH
5274: LD_INT 30
5276: PUSH
5277: LD_INT 31
5279: PUSH
5280: LD_INT 32
5282: PUSH
5283: LD_INT 33
5285: PUSH
5286: LD_INT 34
5288: PUSH
5289: LD_INT 35
5291: PUSH
5292: LD_INT 36
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 101
5335: PUSH
5336: LD_INT 102
5338: PUSH
5339: LD_INT 103
5341: PUSH
5342: LD_INT 104
5344: PUSH
5345: LD_INT 105
5347: PUSH
5348: LD_INT 106
5350: PUSH
5351: LD_INT 107
5353: PUSH
5354: LD_INT 108
5356: PUSH
5357: LD_INT 109
5359: PUSH
5360: LD_INT 110
5362: PUSH
5363: LD_INT 111
5365: PUSH
5366: LD_INT 112
5368: PUSH
5369: LD_INT 113
5371: PUSH
5372: LD_INT 114
5374: PUSH
5375: LD_INT 115
5377: PUSH
5378: LD_INT 116
5380: PUSH
5381: LD_INT 117
5383: PUSH
5384: LD_INT 118
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: ST_TO_ADDR
// if result then
5411: LD_VAR 0 2
5415: IFFALSE 6201
// begin normal :=  ;
5417: LD_ADDR_VAR 0 5
5421: PUSH
5422: LD_STRING 
5424: ST_TO_ADDR
// hardcore :=  ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_STRING 
5432: ST_TO_ADDR
// active :=  ;
5433: LD_ADDR_VAR 0 7
5437: PUSH
5438: LD_STRING 
5440: ST_TO_ADDR
// for i = 1 to normalCounter do
5441: LD_ADDR_VAR 0 8
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 3
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5558
// begin tmp := 0 ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_STRING 0
5466: ST_TO_ADDR
// if result [ 1 ] then
5467: LD_VAR 0 2
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: IFFALSE 5540
// if result [ 1 ] [ 1 ] = i then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PUSH
5490: LD_VAR 0 8
5494: EQUAL
5495: IFFALSE 5540
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 3
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// tmp := 1 ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_STRING 1
5539: ST_TO_ADDR
// end ; normal := normal & tmp ;
5540: LD_ADDR_VAR 0 5
5544: PUSH
5545: LD_VAR 0 5
5549: PUSH
5550: LD_VAR 0 3
5554: STR
5555: ST_TO_ADDR
// end ;
5556: GO 5456
5558: POP
5559: POP
// for i = 1 to hardcoreCounter do
5560: LD_ADDR_VAR 0 8
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_EXP 4
5574: PUSH
5575: FOR_TO
5576: IFFALSE 5681
// begin tmp := 0 ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_STRING 0
5585: ST_TO_ADDR
// if result [ 2 ] then
5586: LD_VAR 0 2
5590: PUSH
5591: LD_INT 2
5593: ARRAY
5594: IFFALSE 5663
// if result [ 2 ] [ 1 ] = 100 + i then
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 2
5603: ARRAY
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PUSH
5609: LD_INT 100
5611: PUSH
5612: LD_VAR 0 8
5616: PLUS
5617: EQUAL
5618: IFFALSE 5663
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_VAR 0 2
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: CALL_OW 3
5649: PPUSH
5650: CALL_OW 1
5654: ST_TO_ADDR
// tmp := 1 ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_STRING 1
5662: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5663: LD_ADDR_VAR 0 6
5667: PUSH
5668: LD_VAR 0 6
5672: PUSH
5673: LD_VAR 0 3
5677: STR
5678: ST_TO_ADDR
// end ;
5679: GO 5575
5681: POP
5682: POP
// if isGameLoad then
5683: LD_VAR 0 1
5687: IFFALSE 6162
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5689: LD_ADDR_VAR 0 4
5693: PUSH
5694: LD_EXP 7
5698: PUSH
5699: LD_EXP 6
5703: PUSH
5704: LD_EXP 8
5708: PUSH
5709: LD_EXP 5
5713: PUSH
5714: LD_EXP 9
5718: PUSH
5719: LD_EXP 10
5723: PUSH
5724: LD_EXP 11
5728: PUSH
5729: LD_EXP 12
5733: PUSH
5734: LD_EXP 13
5738: PUSH
5739: LD_EXP 14
5743: PUSH
5744: LD_EXP 15
5748: PUSH
5749: LD_EXP 16
5753: PUSH
5754: LD_EXP 17
5758: PUSH
5759: LD_EXP 18
5763: PUSH
5764: LD_EXP 26
5768: PUSH
5769: LD_EXP 27
5773: PUSH
5774: LD_EXP 28
5778: PUSH
5779: LD_EXP 29
5783: PUSH
5784: LD_EXP 31
5788: PUSH
5789: LD_EXP 32
5793: PUSH
5794: LD_EXP 33
5798: PUSH
5799: LD_EXP 36
5803: PUSH
5804: LD_EXP 38
5808: PUSH
5809: LD_EXP 39
5813: PUSH
5814: LD_EXP 40
5818: PUSH
5819: LD_EXP 42
5823: PUSH
5824: LD_EXP 43
5828: PUSH
5829: LD_EXP 46
5833: PUSH
5834: LD_EXP 47
5838: PUSH
5839: LD_EXP 48
5843: PUSH
5844: LD_EXP 49
5848: PUSH
5849: LD_EXP 50
5853: PUSH
5854: LD_EXP 51
5858: PUSH
5859: LD_EXP 52
5863: PUSH
5864: LD_EXP 53
5868: PUSH
5869: LD_EXP 54
5873: PUSH
5874: LD_EXP 19
5878: PUSH
5879: LD_EXP 20
5883: PUSH
5884: LD_EXP 23
5888: PUSH
5889: LD_EXP 24
5893: PUSH
5894: LD_EXP 25
5898: PUSH
5899: LD_EXP 21
5903: PUSH
5904: LD_EXP 22
5908: PUSH
5909: LD_EXP 30
5913: PUSH
5914: LD_EXP 34
5918: PUSH
5919: LD_EXP 35
5923: PUSH
5924: LD_EXP 37
5928: PUSH
5929: LD_EXP 41
5933: PUSH
5934: LD_EXP 44
5938: PUSH
5939: LD_EXP 45
5943: PUSH
5944: LD_EXP 55
5948: PUSH
5949: LD_EXP 56
5953: PUSH
5954: LD_EXP 57
5958: PUSH
5959: LD_EXP 58
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: ST_TO_ADDR
// tmp :=  ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_STRING 
6027: ST_TO_ADDR
// for i = 1 to normalCounter do
6028: LD_ADDR_VAR 0 8
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 3
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6080
// begin if flags [ i ] then
6046: LD_VAR 0 4
6050: PUSH
6051: LD_VAR 0 8
6055: ARRAY
6056: IFFALSE 6078
// tmp := tmp & i & ; ;
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 3
6067: PUSH
6068: LD_VAR 0 8
6072: STR
6073: PUSH
6074: LD_STRING ;
6076: STR
6077: ST_TO_ADDR
// end ;
6078: GO 6043
6080: POP
6081: POP
// for i = 1 to hardcoreCounter do
6082: LD_ADDR_VAR 0 8
6086: PUSH
6087: DOUBLE
6088: LD_INT 1
6090: DEC
6091: ST_TO_ADDR
6092: LD_EXP 4
6096: PUSH
6097: FOR_TO
6098: IFFALSE 6144
// begin if flags [ normalCounter + i ] then
6100: LD_VAR 0 4
6104: PUSH
6105: LD_EXP 3
6109: PUSH
6110: LD_VAR 0 8
6114: PLUS
6115: ARRAY
6116: IFFALSE 6142
// tmp := tmp & ( 100 + i ) & ; ;
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 100
6130: PUSH
6131: LD_VAR 0 8
6135: PLUS
6136: STR
6137: PUSH
6138: LD_STRING ;
6140: STR
6141: ST_TO_ADDR
// end ;
6142: GO 6097
6144: POP
6145: POP
// if tmp then
6146: LD_VAR 0 3
6150: IFFALSE 6162
// active := tmp ;
6152: LD_ADDR_VAR 0 7
6156: PUSH
6157: LD_VAR 0 3
6161: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6162: LD_STRING getStreamItemsFromMission("
6164: PUSH
6165: LD_VAR 0 5
6169: STR
6170: PUSH
6171: LD_STRING ","
6173: STR
6174: PUSH
6175: LD_VAR 0 6
6179: STR
6180: PUSH
6181: LD_STRING ","
6183: STR
6184: PUSH
6185: LD_VAR 0 7
6189: STR
6190: PUSH
6191: LD_STRING ")
6193: STR
6194: PPUSH
6195: CALL_OW 559
// end else
6199: GO 6208
// ToLua ( getStreamItemsFromMission("","","") ) ;
6201: LD_STRING getStreamItemsFromMission("","","")
6203: PPUSH
6204: CALL_OW 559
// end ;
6208: LD_VAR 0 2
6212: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6213: LD_EXP 2
6217: PUSH
6218: LD_EXP 7
6222: AND
6223: IFFALSE 6347
6225: GO 6227
6227: DISABLE
6228: LD_INT 0
6230: PPUSH
6231: PPUSH
// begin enable ;
6232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_OWVAR 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 34
6255: PUSH
6256: LD_INT 7
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 34
6265: PUSH
6266: LD_INT 45
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 34
6275: PUSH
6276: LD_INT 28
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 34
6285: PUSH
6286: LD_INT 47
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not tmp then
6309: LD_VAR 0 2
6313: NOT
6314: IFFALSE 6318
// exit ;
6316: GO 6347
// for i in tmp do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 2
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6345
// begin SetLives ( i , 0 ) ;
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 234
// end ;
6343: GO 6328
6345: POP
6346: POP
// end ;
6347: PPOPN 2
6349: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6350: LD_EXP 2
6354: PUSH
6355: LD_EXP 8
6359: AND
6360: IFFALSE 6444
6362: GO 6364
6364: DISABLE
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
// begin enable ;
6369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_INT 22
6377: PUSH
6378: LD_OWVAR 2
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 69
6405: ST_TO_ADDR
// if not tmp then
6406: LD_VAR 0 2
6410: NOT
6411: IFFALSE 6415
// exit ;
6413: GO 6444
// for i in tmp do
6415: LD_ADDR_VAR 0 1
6419: PUSH
6420: LD_VAR 0 2
6424: PUSH
6425: FOR_IN
6426: IFFALSE 6442
// begin SetLives ( i , 0 ) ;
6428: LD_VAR 0 1
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 234
// end ;
6440: GO 6425
6442: POP
6443: POP
// end ;
6444: PPOPN 2
6446: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6447: LD_EXP 2
6451: PUSH
6452: LD_EXP 5
6456: AND
6457: IFFALSE 6550
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
// begin enable ;
6465: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 22
6473: PUSH
6474: LD_OWVAR 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 25
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 25
6508: PUSH
6509: LD_INT 8
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 69
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6548
// begin SetClass ( i , 1 ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 336
// end ;
6546: GO 6531
6548: POP
6549: POP
// end ;
6550: PPOPN 1
6552: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6553: LD_EXP 2
6557: PUSH
6558: LD_EXP 6
6562: AND
6563: PUSH
6564: LD_OWVAR 65
6568: PUSH
6569: LD_INT 7
6571: LESS
6572: AND
6573: IFFALSE 6587
6575: GO 6577
6577: DISABLE
// begin enable ;
6578: ENABLE
// game_speed := 7 ;
6579: LD_ADDR_OWVAR 65
6583: PUSH
6584: LD_INT 7
6586: ST_TO_ADDR
// end ;
6587: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6588: LD_EXP 2
6592: PUSH
6593: LD_EXP 9
6597: AND
6598: IFFALSE 6800
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
6607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 81
6615: PUSH
6616: LD_OWVAR 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// if not tmp then
6644: LD_VAR 0 3
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6800
// if tmp > 5 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 5
6660: GREATER
6661: IFFALSE 6673
// k := 5 else
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 5
6670: ST_TO_ADDR
6671: GO 6683
// k := tmp ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ST_TO_ADDR
// for i := 1 to k do
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: DOUBLE
6689: LD_INT 1
6691: DEC
6692: ST_TO_ADDR
6693: LD_VAR 0 2
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6798
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: PPUSH
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 4
6719: MOD
6720: PUSH
6721: LD_INT 1
6723: PLUS
6724: PPUSH
6725: CALL_OW 259
6729: PUSH
6730: LD_INT 10
6732: LESS
6733: IFFALSE 6796
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6735: LD_VAR 0 3
6739: PUSH
6740: LD_VAR 0 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 4
6753: MOD
6754: PUSH
6755: LD_INT 1
6757: PLUS
6758: PPUSH
6759: LD_VAR 0 3
6763: PUSH
6764: LD_VAR 0 1
6768: ARRAY
6769: PPUSH
6770: LD_VAR 0 1
6774: PUSH
6775: LD_INT 4
6777: MOD
6778: PUSH
6779: LD_INT 1
6781: PLUS
6782: PPUSH
6783: CALL_OW 259
6787: PUSH
6788: LD_INT 1
6790: PLUS
6791: PPUSH
6792: CALL_OW 237
6796: GO 6698
6798: POP
6799: POP
// end ;
6800: PPOPN 3
6802: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6803: LD_EXP 2
6807: PUSH
6808: LD_EXP 10
6812: AND
6813: IFFALSE 6833
6815: GO 6817
6817: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6818: LD_INT 4
6820: PPUSH
6821: LD_OWVAR 2
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 324
6833: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6834: LD_EXP 2
6838: PUSH
6839: LD_EXP 39
6843: AND
6844: IFFALSE 6864
6846: GO 6848
6848: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6849: LD_INT 19
6851: PPUSH
6852: LD_OWVAR 2
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 324
6864: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6865: LD_EXP 2
6869: PUSH
6870: LD_EXP 11
6874: AND
6875: IFFALSE 6977
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
// begin enable ;
6884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_OWVAR 2
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 11
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: LD_INT 30
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: ST_TO_ADDR
// if not tmp then
6939: LD_VAR 0 2
6943: NOT
6944: IFFALSE 6948
// exit ;
6946: GO 6977
// for i in tmp do
6948: LD_ADDR_VAR 0 1
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: FOR_IN
6959: IFFALSE 6975
// begin SetLives ( i , 0 ) ;
6961: LD_VAR 0 1
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 234
// end ;
6973: GO 6958
6975: POP
6976: POP
// end ;
6977: PPOPN 2
6979: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6980: LD_EXP 2
6984: PUSH
6985: LD_EXP 12
6989: AND
6990: IFFALSE 7010
6992: GO 6994
6994: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6995: LD_INT 32
6997: PPUSH
6998: LD_OWVAR 2
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 324
7010: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7011: LD_EXP 2
7015: PUSH
7016: LD_EXP 13
7020: AND
7021: IFFALSE 7202
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_OWVAR 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 33
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: ST_TO_ADDR
// if not tmp then
7067: LD_VAR 0 2
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7202
// side := 0 ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// for i := 1 to 8 do
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: DOUBLE
7090: LD_INT 1
7092: DEC
7093: ST_TO_ADDR
7094: LD_INT 8
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7146
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7100: LD_OWVAR 2
7104: PUSH
7105: LD_VAR 0 1
7109: NONEQUAL
7110: PUSH
7111: LD_OWVAR 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 81
7125: PUSH
7126: LD_INT 2
7128: EQUAL
7129: AND
7130: IFFALSE 7144
// begin side := i ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// break ;
7142: GO 7146
// end ;
7144: GO 7097
7146: POP
7147: POP
// if not side then
7148: LD_VAR 0 3
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7202
// for i := 1 to tmp do
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 2
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7200
// if Prob ( 60 ) then
7175: LD_INT 60
7177: PPUSH
7178: CALL_OW 13
7182: IFFALSE 7198
// SetSide ( i , side ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 235
7198: GO 7172
7200: POP
7201: POP
// end ;
7202: PPOPN 3
7204: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7205: LD_EXP 2
7209: PUSH
7210: LD_EXP 15
7214: AND
7215: IFFALSE 7334
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7223: LD_ADDR_VAR 0 1
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_OWVAR 2
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: LD_INT 23
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PPUSH
7272: CALL_OW 69
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7332
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 257
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: IN
7308: IFFALSE 7330
// SetClass ( un , rand ( 1 , 4 ) ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 4
7320: PPUSH
7321: CALL_OW 12
7325: PPUSH
7326: CALL_OW 336
7330: GO 7277
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7337: LD_EXP 2
7341: PUSH
7342: LD_EXP 14
7346: AND
7347: IFFALSE 7426
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_OWVAR 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: ST_TO_ADDR
// if not tmp then
7391: LD_VAR 0 1
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 7426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7400: LD_VAR 0 1
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 100
7421: PPUSH
7422: CALL_OW 234
// end ;
7426: PPOPN 1
7428: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7429: LD_EXP 2
7433: PUSH
7434: LD_EXP 16
7438: AND
7439: IFFALSE 7537
7441: GO 7443
7443: DISABLE
7444: LD_INT 0
7446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_OWVAR 2
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if not tmp then
7483: LD_VAR 0 1
7487: NOT
7488: IFFALSE 7492
// exit ;
7490: GO 7537
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7492: LD_VAR 0 1
7496: PUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 12
7509: ARRAY
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_INT 4
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: LD_INT 3000
7524: PPUSH
7525: LD_INT 9000
7527: PPUSH
7528: CALL_OW 12
7532: PPUSH
7533: CALL_OW 492
// end ;
7537: PPOPN 1
7539: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7540: LD_EXP 2
7544: PUSH
7545: LD_EXP 17
7549: AND
7550: IFFALSE 7570
7552: GO 7554
7554: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7555: LD_INT 1
7557: PPUSH
7558: LD_OWVAR 2
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL_OW 324
7570: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7571: LD_EXP 2
7575: PUSH
7576: LD_EXP 18
7580: AND
7581: IFFALSE 7664
7583: GO 7585
7585: DISABLE
7586: LD_INT 0
7588: PPUSH
7589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_OWVAR 2
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 21
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if not tmp then
7626: LD_VAR 0 2
7630: NOT
7631: IFFALSE 7635
// exit ;
7633: GO 7664
// for i in tmp do
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: FOR_IN
7646: IFFALSE 7662
// SetBLevel ( i , 10 ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_INT 10
7655: PPUSH
7656: CALL_OW 241
7660: GO 7645
7662: POP
7663: POP
// end ;
7664: PPOPN 2
7666: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7667: LD_EXP 2
7671: PUSH
7672: LD_EXP 19
7676: AND
7677: IFFALSE 7788
7679: GO 7681
7681: DISABLE
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 3
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7788
// un := tmp [ rand ( 1 , tmp ) ] ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: PPUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 12
7754: ARRAY
7755: ST_TO_ADDR
// if Crawls ( un ) then
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 318
7765: IFFALSE 7776
// ComWalk ( un ) ;
7767: LD_VAR 0 2
7771: PPUSH
7772: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 5
7783: PPUSH
7784: CALL_OW 336
// end ;
7788: PPOPN 3
7790: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7791: LD_EXP 2
7795: PUSH
7796: LD_EXP 20
7800: AND
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 4
7809: LESS
7810: AND
7811: IFFALSE 7830
7813: GO 7815
7815: DISABLE
// begin Difficulty := Difficulty + 1 ;
7816: LD_ADDR_OWVAR 67
7820: PUSH
7821: LD_OWVAR 67
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ST_TO_ADDR
// end ;
7830: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7831: LD_EXP 2
7835: PUSH
7836: LD_EXP 21
7840: AND
7841: IFFALSE 7944
7843: GO 7845
7845: DISABLE
7846: LD_INT 0
7848: PPUSH
// begin for i := 1 to 5 do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_INT 5
7861: PUSH
7862: FOR_TO
7863: IFFALSE 7942
// begin uc_nation := nation_nature ;
7865: LD_ADDR_OWVAR 21
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// uc_side := 0 ;
7873: LD_ADDR_OWVAR 20
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7881: LD_ADDR_OWVAR 29
7885: PUSH
7886: LD_INT 12
7888: PUSH
7889: LD_INT 12
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// hc_agressivity := 20 ;
7896: LD_ADDR_OWVAR 35
7900: PUSH
7901: LD_INT 20
7903: ST_TO_ADDR
// hc_class := class_tiger ;
7904: LD_ADDR_OWVAR 28
7908: PUSH
7909: LD_INT 14
7911: ST_TO_ADDR
// hc_gallery :=  ;
7912: LD_ADDR_OWVAR 33
7916: PUSH
7917: LD_STRING 
7919: ST_TO_ADDR
// hc_name :=  ;
7920: LD_ADDR_OWVAR 26
7924: PUSH
7925: LD_STRING 
7927: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7928: CALL_OW 44
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 51
// end ;
7940: GO 7862
7942: POP
7943: POP
// end ;
7944: PPOPN 1
7946: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7947: LD_EXP 2
7951: PUSH
7952: LD_EXP 22
7956: AND
7957: IFFALSE 7966
7959: GO 7961
7961: DISABLE
// StreamSibBomb ;
7962: CALL 7967 0 0
7966: END
// export function StreamSibBomb ; var i , x , y ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// result := false ;
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// for i := 1 to 16 do
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: DOUBLE
7987: LD_INT 1
7989: DEC
7990: ST_TO_ADDR
7991: LD_INT 16
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8194
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 10
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 40
8013: PUSH
8014: LD_INT 50
8016: PUSH
8017: LD_INT 60
8019: PUSH
8020: LD_INT 70
8022: PUSH
8023: LD_INT 80
8025: PUSH
8026: LD_INT 90
8028: PUSH
8029: LD_INT 100
8031: PUSH
8032: LD_INT 110
8034: PUSH
8035: LD_INT 120
8037: PUSH
8038: LD_INT 130
8040: PUSH
8041: LD_INT 140
8043: PUSH
8044: LD_INT 150
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 1
8066: PPUSH
8067: LD_INT 15
8069: PPUSH
8070: CALL_OW 12
8074: ARRAY
8075: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: LD_INT 20
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 40
8092: PUSH
8093: LD_INT 50
8095: PUSH
8096: LD_INT 60
8098: PUSH
8099: LD_INT 70
8101: PUSH
8102: LD_INT 80
8104: PUSH
8105: LD_INT 90
8107: PUSH
8108: LD_INT 100
8110: PUSH
8111: LD_INT 110
8113: PUSH
8114: LD_INT 120
8116: PUSH
8117: LD_INT 130
8119: PUSH
8120: LD_INT 140
8122: PUSH
8123: LD_INT 150
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 1
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 12
8153: ARRAY
8154: ST_TO_ADDR
// if ValidHex ( x , y ) then
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_VAR 0 4
8164: PPUSH
8165: CALL_OW 488
8169: IFFALSE 8192
// begin result := [ x , y ] ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 3
8180: PUSH
8181: LD_VAR 0 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// break ;
8190: GO 8194
// end ; end ;
8192: GO 7994
8194: POP
8195: POP
// if result then
8196: LD_VAR 0 1
8200: IFFALSE 8260
// begin ToLua ( playSibBomb() ) ;
8202: LD_STRING playSibBomb()
8204: PPUSH
8205: CALL_OW 559
// wait ( 0 0$14 ) ;
8209: LD_INT 490
8211: PPUSH
8212: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8216: LD_VAR 0 1
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_VAR 0 1
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PPUSH
8234: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8238: LD_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_INT 2
8254: ARRAY
8255: PPUSH
8256: CALL_OW 429
// end ; end ;
8260: LD_VAR 0 1
8264: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8265: LD_EXP 2
8269: PUSH
8270: LD_EXP 24
8274: AND
8275: IFFALSE 8287
8277: GO 8279
8279: DISABLE
// YouLost (  ) ;
8280: LD_STRING 
8282: PPUSH
8283: CALL_OW 104
8287: END
// every 0 0$1 trigger StreamModeActive and sFog do
8288: LD_EXP 2
8292: PUSH
8293: LD_EXP 23
8297: AND
8298: IFFALSE 8312
8300: GO 8302
8302: DISABLE
// FogOff ( your_side ) ;
8303: LD_OWVAR 2
8307: PPUSH
8308: CALL_OW 344
8312: END
// every 0 0$1 trigger StreamModeActive and sSun do
8313: LD_EXP 2
8317: PUSH
8318: LD_EXP 25
8322: AND
8323: IFFALSE 8351
8325: GO 8327
8327: DISABLE
// begin solar_recharge_percent := 0 ;
8328: LD_ADDR_OWVAR 79
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8336: LD_INT 10500
8338: PPUSH
8339: CALL_OW 67
// solar_recharge_percent := 100 ;
8343: LD_ADDR_OWVAR 79
8347: PUSH
8348: LD_INT 100
8350: ST_TO_ADDR
// end ;
8351: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8352: LD_EXP 2
8356: PUSH
8357: LD_EXP 26
8361: AND
8362: IFFALSE 8601
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
// begin tmp := [ ] ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: EMPTY
8378: ST_TO_ADDR
// for i := 1 to 6 do
8379: LD_ADDR_VAR 0 1
8383: PUSH
8384: DOUBLE
8385: LD_INT 1
8387: DEC
8388: ST_TO_ADDR
8389: LD_INT 6
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8498
// begin uc_nation := nation_nature ;
8395: LD_ADDR_OWVAR 21
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// uc_side := 0 ;
8403: LD_ADDR_OWVAR 20
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8411: LD_ADDR_OWVAR 29
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 12
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// hc_agressivity := 20 ;
8426: LD_ADDR_OWVAR 35
8430: PUSH
8431: LD_INT 20
8433: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 17
8441: ST_TO_ADDR
// hc_gallery :=  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name :=  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// un := CreateHuman ;
8458: LD_ADDR_VAR 0 2
8462: PUSH
8463: CALL_OW 44
8467: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: CALL_OW 51
// tmp := tmp ^ un ;
8480: LD_ADDR_VAR 0 3
8484: PUSH
8485: LD_VAR 0 3
8489: PUSH
8490: LD_VAR 0 2
8494: ADD
8495: ST_TO_ADDR
// end ;
8496: GO 8392
8498: POP
8499: POP
// repeat wait ( 0 0$1 ) ;
8500: LD_INT 35
8502: PPUSH
8503: CALL_OW 67
// for un in tmp do
8507: LD_ADDR_VAR 0 2
8511: PUSH
8512: LD_VAR 0 3
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8592
// begin if IsDead ( un ) then
8520: LD_VAR 0 2
8524: PPUSH
8525: CALL_OW 301
8529: IFFALSE 8549
// begin tmp := tmp diff un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 2
8545: DIFF
8546: ST_TO_ADDR
// continue ;
8547: GO 8517
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8549: LD_VAR 0 2
8553: PPUSH
8554: LD_INT 3
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PPUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 74
8585: PPUSH
8586: CALL_OW 115
// end ;
8590: GO 8517
8592: POP
8593: POP
// until not tmp ;
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8500
// end ;
8601: PPOPN 3
8603: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8604: LD_EXP 2
8608: PUSH
8609: LD_EXP 27
8613: AND
8614: IFFALSE 8668
8616: GO 8618
8618: DISABLE
// begin ToLua ( displayTroll(); ) ;
8619: LD_STRING displayTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 3 3$00 ) ;
8626: LD_INT 6300
8628: PPUSH
8629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8633: LD_STRING hideTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8647: LD_STRING displayTroll();
8649: PPUSH
8650: CALL_OW 559
// wait ( 1 1$00 ) ;
8654: LD_INT 2100
8656: PPUSH
8657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8661: LD_STRING hideTroll();
8663: PPUSH
8664: CALL_OW 559
// end ;
8668: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8669: LD_EXP 2
8673: PUSH
8674: LD_EXP 28
8678: AND
8679: IFFALSE 8742
8681: GO 8683
8683: DISABLE
8684: LD_INT 0
8686: PPUSH
// begin p := 0 ;
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// repeat game_speed := 1 ;
8695: LD_ADDR_OWVAR 65
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// p := p + 1 ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: PLUS
8723: ST_TO_ADDR
// until p >= 60 ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 60
8731: GREATEREQUAL
8732: IFFALSE 8695
// game_speed := 4 ;
8734: LD_ADDR_OWVAR 65
8738: PUSH
8739: LD_INT 4
8741: ST_TO_ADDR
// end ;
8742: PPOPN 1
8744: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8745: LD_EXP 2
8749: PUSH
8750: LD_EXP 29
8754: AND
8755: IFFALSE 8901
8757: GO 8759
8759: DISABLE
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_OWVAR 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 0
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 30
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// if not depot then
8818: LD_VAR 0 1
8822: NOT
8823: IFFALSE 8827
// exit ;
8825: GO 8901
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 12
8849: ARRAY
8850: PPUSH
8851: CALL_OW 274
8855: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_INT 2
8878: PPUSH
8879: LD_INT 0
8881: PPUSH
8882: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_INT 3
8893: PPUSH
8894: LD_INT 0
8896: PPUSH
8897: CALL_OW 277
// end ;
8901: PPOPN 2
8903: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8904: LD_EXP 2
8908: PUSH
8909: LD_EXP 30
8913: AND
8914: IFFALSE 9011
8916: GO 8918
8918: DISABLE
8919: LD_INT 0
8921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_OWVAR 2
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: ST_TO_ADDR
// if not tmp then
8976: LD_VAR 0 1
8980: NOT
8981: IFFALSE 8985
// exit ;
8983: GO 9011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 1
8992: PPUSH
8993: LD_VAR 0 1
8997: PPUSH
8998: CALL_OW 12
9002: ARRAY
9003: PPUSH
9004: LD_INT 200
9006: PPUSH
9007: CALL_OW 234
// end ;
9011: PPOPN 1
9013: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9014: LD_EXP 2
9018: PUSH
9019: LD_EXP 31
9023: AND
9024: IFFALSE 9103
9026: GO 9028
9028: DISABLE
9029: LD_INT 0
9031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_OWVAR 2
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 2
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: ST_TO_ADDR
// if not tmp then
9068: LD_VAR 0 1
9072: NOT
9073: IFFALSE 9077
// exit ;
9075: GO 9103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9077: LD_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 12
9094: ARRAY
9095: PPUSH
9096: LD_INT 60
9098: PPUSH
9099: CALL_OW 234
// end ;
9103: PPOPN 1
9105: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9106: LD_EXP 2
9110: PUSH
9111: LD_EXP 32
9115: AND
9116: IFFALSE 9215
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin enable ;
9125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9126: LD_ADDR_VAR 0 1
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_OWVAR 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 61
9145: PUSH
9146: EMPTY
9147: LIST
9148: PUSH
9149: LD_INT 33
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if not tmp then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9215
// for i in tmp do
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9213
// if IsControledBy ( i ) then
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 312
9200: IFFALSE 9211
// ComUnlink ( i ) ;
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 136
9211: GO 9188
9213: POP
9214: POP
// end ;
9215: PPOPN 2
9217: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9218: LD_EXP 2
9222: PUSH
9223: LD_EXP 33
9227: AND
9228: IFFALSE 9368
9230: GO 9232
9232: DISABLE
9233: LD_INT 0
9235: PPUSH
9236: PPUSH
// begin ToLua ( displayPowell(); ) ;
9237: LD_STRING displayPowell();
9239: PPUSH
9240: CALL_OW 559
// uc_side := 0 ;
9244: LD_ADDR_OWVAR 20
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// uc_nation := 2 ;
9252: LD_ADDR_OWVAR 21
9256: PUSH
9257: LD_INT 2
9259: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9260: LD_ADDR_OWVAR 37
9264: PUSH
9265: LD_INT 14
9267: ST_TO_ADDR
// vc_engine := engine_siberite ;
9268: LD_ADDR_OWVAR 39
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// vc_control := control_apeman ;
9276: LD_ADDR_OWVAR 38
9280: PUSH
9281: LD_INT 5
9283: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9284: LD_ADDR_OWVAR 40
9288: PUSH
9289: LD_INT 29
9291: ST_TO_ADDR
// un := CreateVehicle ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: CALL_OW 45
9301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9314: LD_INT 35
9316: PPUSH
9317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 22
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: PPUSH
9343: LD_VAR 0 2
9347: PPUSH
9348: CALL_OW 74
9352: PPUSH
9353: CALL_OW 115
// until IsDead ( un ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: CALL_OW 301
9366: IFFALSE 9314
// end ;
9368: PPOPN 2
9370: END
// every 0 0$1 trigger StreamModeActive and sStu do
9371: LD_EXP 2
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: PUSH
9403: LD_EXP 34
9407: AND
9408: IFFALSE 9549
9410: GO 9412
9412: DISABLE
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_OWVAR 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: ST_TO_ADDR
// if not tmp then
9453: LD_VAR 0 2
9457: NOT
9458: IFFALSE 9462
// exit ;
9460: GO 9549
// un := tmp [ rand ( 1 , tmp ) ] ;
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: CALL_OW 12
9484: ARRAY
9485: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9498: LD_VAR 0 1
9502: PPUSH
9503: LD_OWVAR 3
9507: PUSH
9508: LD_VAR 0 1
9512: DIFF
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 74
9523: PPUSH
9524: CALL_OW 115
// wait ( 0 0$20 ) ;
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 67
// SetSide ( un , your_side ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_OWVAR 2
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 2
9551: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9552: LD_EXP 2
9556: PUSH
9557: LD_EXP 35
9561: AND
9562: IFFALSE 9668
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9570: LD_ADDR_VAR 0 1
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: ST_TO_ADDR
// if not depot then
9624: LD_VAR 0 1
9628: NOT
9629: IFFALSE 9633
// exit ;
9631: GO 9668
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: CALL_OW 250
9646: PPUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 495
// end ;
9668: PPOPN 1
9670: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9671: LD_EXP 2
9675: PUSH
9676: LD_EXP 36
9680: AND
9681: IFFALSE 9892
9683: GO 9685
9685: DISABLE
9686: LD_INT 0
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
9692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9693: LD_ADDR_VAR 0 5
9697: PUSH
9698: LD_INT 22
9700: PUSH
9701: LD_OWVAR 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 21
9712: PUSH
9713: LD_INT 1
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 69
9728: ST_TO_ADDR
// if not tmp then
9729: LD_VAR 0 5
9733: NOT
9734: IFFALSE 9738
// exit ;
9736: GO 9892
// for i in tmp do
9738: LD_ADDR_VAR 0 1
9742: PUSH
9743: LD_VAR 0 5
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9890
// begin d := rand ( 0 , 5 ) ;
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_INT 0
9758: PPUSH
9759: LD_INT 5
9761: PPUSH
9762: CALL_OW 12
9766: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 250
9781: PPUSH
9782: LD_VAR 0 4
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 12
9792: PPUSH
9793: CALL_OW 12
9797: PPUSH
9798: CALL_OW 272
9802: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 4
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: LD_INT 12
9828: PPUSH
9829: CALL_OW 12
9833: PPUSH
9834: CALL_OW 273
9838: ST_TO_ADDR
// if ValidHex ( x , y ) then
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: CALL_OW 488
9853: IFFALSE 9888
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_VAR 0 2
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 6
9875: PPUSH
9876: CALL_OW 12
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 483
// end ;
9888: GO 9748
9890: POP
9891: POP
// end ;
9892: PPOPN 5
9894: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9895: LD_EXP 2
9899: PUSH
9900: LD_EXP 37
9904: AND
9905: IFFALSE 9999
9907: GO 9909
9909: DISABLE
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_OWVAR 2
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 2
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 9999
// for i in tmp do
9970: LD_ADDR_VAR 0 1
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: FOR_IN
9981: IFFALSE 9997
// SetFuel ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 240
9995: GO 9980
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10002: LD_EXP 2
10006: PUSH
10007: LD_EXP 38
10011: AND
10012: IFFALSE 10078
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10020: LD_ADDR_VAR 0 1
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 29
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if not tmp then
10056: LD_VAR 0 1
10060: NOT
10061: IFFALSE 10065
// exit ;
10063: GO 10078
// DestroyUnit ( tmp [ 1 ] ) ;
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: ARRAY
10073: PPUSH
10074: CALL_OW 65
// end ;
10078: PPOPN 1
10080: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10081: LD_EXP 2
10085: PUSH
10086: LD_EXP 40
10090: AND
10091: IFFALSE 10220
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin uc_side := 0 ;
10099: LD_ADDR_OWVAR 20
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// uc_nation := nation_arabian ;
10107: LD_ADDR_OWVAR 21
10111: PUSH
10112: LD_INT 2
10114: ST_TO_ADDR
// hc_gallery :=  ;
10115: LD_ADDR_OWVAR 33
10119: PUSH
10120: LD_STRING 
10122: ST_TO_ADDR
// hc_name :=  ;
10123: LD_ADDR_OWVAR 26
10127: PUSH
10128: LD_STRING 
10130: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_INT 11
10136: PPUSH
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 380
// un := CreateHuman ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10166: LD_INT 35
10168: PPUSH
10169: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 22
10180: PUSH
10181: LD_OWVAR 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 74
10204: PPUSH
10205: CALL_OW 115
// until IsDead ( un ) ;
10209: LD_VAR 0 1
10213: PPUSH
10214: CALL_OW 301
10218: IFFALSE 10166
// end ;
10220: PPOPN 1
10222: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10223: LD_EXP 2
10227: PUSH
10228: LD_EXP 42
10232: AND
10233: IFFALSE 10245
10235: GO 10237
10237: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10238: LD_STRING earthquake(getX(game), 0, 32)
10240: PPUSH
10241: CALL_OW 559
10245: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10246: LD_EXP 2
10250: PUSH
10251: LD_EXP 43
10255: AND
10256: IFFALSE 10347
10258: GO 10260
10260: DISABLE
10261: LD_INT 0
10263: PPUSH
// begin enable ;
10264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_OWVAR 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 33
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: ST_TO_ADDR
// if not tmp then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10321: LD_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: PPUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 12
10338: ARRAY
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: PPOPN 1
10349: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10350: LD_EXP 2
10354: PUSH
10355: LD_EXP 44
10359: AND
10360: IFFALSE 10501
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10370: LD_ADDR_VAR 0 3
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_OWVAR 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: ST_TO_ADDR
// if not tmp then
10406: LD_VAR 0 3
10410: NOT
10411: IFFALSE 10415
// exit ;
10413: GO 10501
// un := tmp [ rand ( 1 , tmp ) ] ;
10415: LD_ADDR_VAR 0 2
10419: PUSH
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: CALL_OW 12
10437: ARRAY
10438: ST_TO_ADDR
// if Crawls ( un ) then
10439: LD_VAR 0 2
10443: PPUSH
10444: CALL_OW 318
10448: IFFALSE 10459
// ComWalk ( un ) ;
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: LD_INT 9
10466: PPUSH
10467: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10471: LD_INT 28
10473: PPUSH
10474: LD_OWVAR 2
10478: PPUSH
10479: LD_INT 2
10481: PPUSH
10482: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10486: LD_INT 29
10488: PPUSH
10489: LD_OWVAR 2
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 322
// end ;
10501: PPOPN 3
10503: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10504: LD_EXP 2
10508: PUSH
10509: LD_EXP 45
10513: AND
10514: IFFALSE 10625
10516: GO 10518
10518: DISABLE
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: ST_TO_ADDR
// if not tmp then
10560: LD_VAR 0 3
10564: NOT
10565: IFFALSE 10569
// exit ;
10567: GO 10625
// un := tmp [ rand ( 1 , tmp ) ] ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: CALL_OW 12
10591: ARRAY
10592: ST_TO_ADDR
// if Crawls ( un ) then
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 318
10602: IFFALSE 10613
// ComWalk ( un ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10613: LD_VAR 0 2
10617: PPUSH
10618: LD_INT 8
10620: PPUSH
10621: CALL_OW 336
// end ;
10625: PPOPN 3
10627: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10628: LD_EXP 2
10632: PUSH
10633: LD_EXP 46
10637: AND
10638: IFFALSE 10782
10640: GO 10642
10642: DISABLE
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_OWVAR 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 34
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 34
10689: PUSH
10690: LD_INT 51
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 32
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 2
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10782
// for i in tmp do
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_VAR 0 2
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10780
// if GetCargo ( i , mat_artifact ) = 0 then
10745: LD_VAR 0 1
10749: PPUSH
10750: LD_INT 4
10752: PPUSH
10753: CALL_OW 289
10757: PUSH
10758: LD_INT 0
10760: EQUAL
10761: IFFALSE 10778
// SetCargo ( i , mat_siberit , 100 ) ;
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 3
10770: PPUSH
10771: LD_INT 100
10773: PPUSH
10774: CALL_OW 290
10778: GO 10742
10780: POP
10781: POP
// end ;
10782: PPOPN 2
10784: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10785: LD_EXP 2
10789: PUSH
10790: LD_EXP 47
10794: AND
10795: IFFALSE 10978
10797: GO 10799
10799: DISABLE
10800: LD_INT 0
10802: PPUSH
10803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: ST_TO_ADDR
// if not tmp then
10826: LD_VAR 0 2
10830: NOT
10831: IFFALSE 10835
// exit ;
10833: GO 10978
// for i := 1 to 2 do
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_INT 2
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10976
// begin uc_side := your_side ;
10851: LD_ADDR_OWVAR 20
10855: PUSH
10856: LD_OWVAR 2
10860: ST_TO_ADDR
// uc_nation := nation_american ;
10861: LD_ADDR_OWVAR 21
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// vc_chassis := us_morphling ;
10869: LD_ADDR_OWVAR 37
10873: PUSH
10874: LD_INT 5
10876: ST_TO_ADDR
// vc_engine := engine_siberite ;
10877: LD_ADDR_OWVAR 39
10881: PUSH
10882: LD_INT 3
10884: ST_TO_ADDR
// vc_control := control_computer ;
10885: LD_ADDR_OWVAR 38
10889: PUSH
10890: LD_INT 3
10892: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10893: LD_ADDR_OWVAR 40
10897: PUSH
10898: LD_INT 10
10900: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 310
10914: NOT
10915: IFFALSE 10962
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10917: CALL_OW 45
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 250
10935: PPUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: CALL_OW 251
10949: PPUSH
10950: LD_INT 12
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 50
10960: GO 10974
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10962: CALL_OW 45
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 51
// end ;
10974: GO 10848
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10981: LD_EXP 2
10985: PUSH
10986: LD_EXP 48
10990: AND
10991: IFFALSE 11213
10993: GO 10995
10995: DISABLE
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11004: LD_ADDR_VAR 0 6
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_OWVAR 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 23
11036: PUSH
11037: LD_INT 0
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 6
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11213
// s1 := rand ( 1 , 4 ) ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 4
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_VAR 0 6
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 2
11101: PPUSH
11102: CALL_OW 259
11106: ST_TO_ADDR
// if s1 = 1 then
11107: LD_VAR 0 2
11111: PUSH
11112: LD_INT 1
11114: EQUAL
11115: IFFALSE 11135
// s2 := rand ( 2 , 4 ) else
11117: LD_ADDR_VAR 0 3
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 12
11132: ST_TO_ADDR
11133: GO 11143
// s2 := 1 ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11143: LD_ADDR_VAR 0 5
11147: PUSH
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: CALL_OW 259
11166: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11167: LD_VAR 0 6
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_VAR 0 5
11185: PPUSH
11186: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11190: LD_VAR 0 6
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_VAR 0 4
11208: PPUSH
11209: CALL_OW 237
// end ;
11213: PPOPN 6
11215: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11216: LD_EXP 2
11220: PUSH
11221: LD_EXP 49
11225: AND
11226: IFFALSE 11305
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 234
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11308: LD_EXP 2
11312: PUSH
11313: LD_EXP 50
11317: AND
11318: IFFALSE 11430
11320: GO 11322
11322: DISABLE
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_OWVAR 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 30
11369: PUSH
11370: LD_INT 28
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// if not tmp then
11392: LD_VAR 0 2
11396: NOT
11397: IFFALSE 11401
// exit ;
11399: GO 11430
// for i in tmp do
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_VAR 0 2
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11428
// SetLives ( i , 1 ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 234
11426: GO 11411
11428: POP
11429: POP
// end ;
11430: PPOPN 2
11432: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11433: LD_EXP 2
11437: PUSH
11438: LD_EXP 51
11442: AND
11443: IFFALSE 11730
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin i := rand ( 1 , 7 ) ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 7
11463: PPUSH
11464: CALL_OW 12
11468: ST_TO_ADDR
// case i of 1 :
11469: LD_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11492
11482: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11483: LD_STRING earthquake(getX(game), 0, 32)
11485: PPUSH
11486: CALL_OW 559
11490: GO 11730
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11514
11500: POP
// begin ToLua ( displayStucuk(); ) ;
11501: LD_STRING displayStucuk();
11503: PPUSH
11504: CALL_OW 559
// ResetFog ;
11508: CALL_OW 335
// end ; 3 :
11512: GO 11730
11514: LD_INT 3
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11626
11522: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_OWVAR 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 2
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: CALL_OW 12
11590: ARRAY
11591: ST_TO_ADDR
// if Crawls ( un ) then
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 318
11601: IFFALSE 11612
// ComWalk ( un ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 8
11619: PPUSH
11620: CALL_OW 336
// end ; 4 :
11624: GO 11730
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11708
11634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 2
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11730
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 65
// end ; 5 .. 7 :
11706: GO 11730
11708: LD_INT 5
11710: DOUBLE
11711: GREATEREQUAL
11712: IFFALSE 11720
11714: LD_INT 7
11716: DOUBLE
11717: LESSEQUAL
11718: IFTRUE 11722
11720: GO 11729
11722: POP
// StreamSibBomb ; end ;
11723: CALL 7967 0 0
11727: GO 11730
11729: POP
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11733: LD_EXP 2
11737: PUSH
11738: LD_EXP 52
11742: AND
11743: IFFALSE 11899
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11753: LD_ADDR_VAR 0 2
11757: PUSH
11758: LD_INT 81
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 69
11806: ST_TO_ADDR
// if not tmp then
11807: LD_VAR 0 2
11811: NOT
11812: IFFALSE 11816
// exit ;
11814: GO 11899
// p := 0 ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// p := p + 1 ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 1
11843: PLUS
11844: ST_TO_ADDR
// for i in tmp do
11845: LD_ADDR_VAR 0 1
11849: PUSH
11850: LD_VAR 0 2
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11887
// if GetLives ( i ) < 1000 then
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 256
11867: PUSH
11868: LD_INT 1000
11870: LESS
11871: IFFALSE 11885
// SetLives ( i , 1000 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 1000
11880: PPUSH
11881: CALL_OW 234
11885: GO 11855
11887: POP
11888: POP
// until p > 20 ;
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 20
11896: GREATER
11897: IFFALSE 11824
// end ;
11899: PPOPN 3
11901: END
// every 0 0$1 trigger StreamModeActive and sTime do
11902: LD_EXP 2
11906: PUSH
11907: LD_EXP 53
11911: AND
11912: IFFALSE 11947
11914: GO 11916
11916: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11917: LD_INT 28
11919: PPUSH
11920: LD_OWVAR 2
11924: PPUSH
11925: LD_INT 2
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11932: LD_INT 30
11934: PPUSH
11935: LD_OWVAR 2
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: CALL_OW 322
// end ;
11947: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11948: LD_EXP 2
11952: PUSH
11953: LD_EXP 54
11957: AND
11958: IFFALSE 12079
11960: GO 11962
11962: DISABLE
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_OWVAR 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 23
11999: PUSH
12000: LD_INT 0
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: ST_TO_ADDR
// if not tmp then
12021: LD_VAR 0 2
12025: NOT
12026: IFFALSE 12030
// exit ;
12028: GO 12079
// for i in tmp do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: LD_VAR 0 2
12039: PUSH
12040: FOR_IN
12041: IFFALSE 12077
// begin if Crawls ( i ) then
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 318
12052: IFFALSE 12063
// ComWalk ( i ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 138
// SetClass ( i , 2 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 336
// end ;
12075: GO 12040
12077: POP
12078: POP
// end ;
12079: PPOPN 2
12081: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12082: LD_EXP 2
12086: PUSH
12087: LD_EXP 55
12091: AND
12092: IFFALSE 12380
12094: GO 12096
12096: DISABLE
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12102: LD_OWVAR 2
12106: PPUSH
12107: LD_INT 9
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12120: LD_INT 9
12122: PPUSH
12123: LD_OWVAR 2
12127: PPUSH
12128: CALL_OW 343
// uc_side := 9 ;
12132: LD_ADDR_OWVAR 20
12136: PUSH
12137: LD_INT 9
12139: ST_TO_ADDR
// uc_nation := 2 ;
12140: LD_ADDR_OWVAR 21
12144: PUSH
12145: LD_INT 2
12147: ST_TO_ADDR
// hc_name := Dark Warrior ;
12148: LD_ADDR_OWVAR 26
12152: PUSH
12153: LD_STRING Dark Warrior
12155: ST_TO_ADDR
// hc_gallery :=  ;
12156: LD_ADDR_OWVAR 33
12160: PUSH
12161: LD_STRING 
12163: ST_TO_ADDR
// hc_noskilllimit := true ;
12164: LD_ADDR_OWVAR 76
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12172: LD_ADDR_OWVAR 31
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: ST_TO_ADDR
// un := CreateHuman ;
12195: LD_ADDR_VAR 0 3
12199: PUSH
12200: CALL_OW 44
12204: ST_TO_ADDR
// hc_noskilllimit := false ;
12205: LD_ADDR_OWVAR 76
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 51
// ToLua ( playRanger() ) ;
12225: LD_STRING playRanger()
12227: PPUSH
12228: CALL_OW 559
// p := 0 ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12240: LD_INT 35
12242: PPUSH
12243: CALL_OW 67
// p := p + 1 ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: LD_VAR 0 2
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 256
12270: PUSH
12271: LD_INT 1000
12273: LESS
12274: IFFALSE 12288
// SetLives ( un , 1000 ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1000
12283: PPUSH
12284: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 81
12295: PUSH
12296: LD_OWVAR 2
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 91
12307: PUSH
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: CALL_OW 74
12339: PPUSH
12340: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12344: LD_VAR 0 2
12348: PUSH
12349: LD_INT 80
12351: GREATER
12352: PUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: CALL_OW 301
12362: OR
12363: IFFALSE 12240
// if un then
12365: LD_VAR 0 3
12369: IFFALSE 12380
// RemoveUnit ( un ) ;
12371: LD_VAR 0 3
12375: PPUSH
12376: CALL_OW 64
// end ;
12380: PPOPN 3
12382: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12383: LD_EXP 56
12387: IFFALSE 12503
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 81
12404: PUSH
12405: LD_OWVAR 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 21
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12433: LD_STRING playComputer()
12435: PPUSH
12436: CALL_OW 559
// if not tmp then
12440: LD_VAR 0 2
12444: NOT
12445: IFFALSE 12449
// exit ;
12447: GO 12503
// for i in tmp do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12501
// for j := 1 to 4 do
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: DOUBLE
12468: LD_INT 1
12470: DEC
12471: ST_TO_ADDR
12472: LD_INT 4
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12497
// SetSkill ( i , j , 10 ) ;
12478: LD_VAR 0 1
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 10
12490: PPUSH
12491: CALL_OW 237
12495: GO 12475
12497: POP
12498: POP
12499: GO 12459
12501: POP
12502: POP
// end ;
12503: PPOPN 3
12505: END
// every 0 0$1 trigger s30 do var i , tmp ;
12506: LD_EXP 57
12510: IFFALSE 12579
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
12518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_OWVAR 2
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 2
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12579
// for i in tmp do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 2
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12577
// SetLives ( i , 300 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 300
12570: PPUSH
12571: CALL_OW 234
12575: GO 12560
12577: POP
12578: POP
// end ;
12579: PPOPN 2
12581: END
// every 0 0$1 trigger s60 do var i , tmp ;
12582: LD_EXP 58
12586: IFFALSE 12655
12588: GO 12590
12590: DISABLE
12591: LD_INT 0
12593: PPUSH
12594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_OWVAR 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 2
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12655
// for i in tmp do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: FOR_IN
12637: IFFALSE 12653
// SetLives ( i , 600 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 600
12646: PPUSH
12647: CALL_OW 234
12651: GO 12636
12653: POP
12654: POP
// end ;
12655: PPOPN 2
12657: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12658: LD_INT 0
12660: PPUSH
// case cmd of 301 :
12661: LD_VAR 0 1
12665: PUSH
12666: LD_INT 301
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12706
12674: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12675: LD_VAR 0 6
12679: PPUSH
12680: LD_VAR 0 7
12684: PPUSH
12685: LD_VAR 0 8
12689: PPUSH
12690: LD_VAR 0 4
12694: PPUSH
12695: LD_VAR 0 5
12699: PPUSH
12700: CALL 13915 0 5
12704: GO 12827
12706: LD_INT 302
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12751
12714: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12715: LD_VAR 0 6
12719: PPUSH
12720: LD_VAR 0 7
12724: PPUSH
12725: LD_VAR 0 8
12729: PPUSH
12730: LD_VAR 0 9
12734: PPUSH
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL 14006 0 6
12749: GO 12827
12751: LD_INT 303
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12796
12759: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12760: LD_VAR 0 6
12764: PPUSH
12765: LD_VAR 0 7
12769: PPUSH
12770: LD_VAR 0 8
12774: PPUSH
12775: LD_VAR 0 9
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: LD_VAR 0 5
12789: PPUSH
12790: CALL 12832 0 6
12794: GO 12827
12796: LD_INT 304
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12826
12804: POP
// hHackTeleport ( unit , x , y ) ; end ;
12805: LD_VAR 0 2
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: LD_VAR 0 5
12819: PPUSH
12820: CALL 14599 0 3
12824: GO 12827
12826: POP
// end ;
12827: LD_VAR 0 12
12831: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: LESS
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 3
12852: GREATER
12853: OR
12854: PUSH
12855: LD_VAR 0 5
12859: PPUSH
12860: LD_VAR 0 6
12864: PPUSH
12865: CALL_OW 428
12869: OR
12870: IFFALSE 12874
// exit ;
12872: GO 13602
// uc_side := your_side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_OWVAR 2
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 1
12893: ST_TO_ADDR
// bc_level = 1 ;
12894: LD_ADDR_OWVAR 43
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// case btype of 1 :
12902: LD_VAR 0 2
12906: PUSH
12907: LD_INT 1
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_depot ; 2 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
12924: GO 13546
12926: LD_INT 2
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_warehouse ; 3 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
12943: GO 13546
12945: LD_INT 3
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12964
12953: POP
// bc_type := b_lab ; 4 .. 9 :
12954: LD_ADDR_OWVAR 42
12958: PUSH
12959: LD_INT 6
12961: ST_TO_ADDR
12962: GO 13546
12964: LD_INT 4
12966: DOUBLE
12967: GREATEREQUAL
12968: IFFALSE 12976
12970: LD_INT 9
12972: DOUBLE
12973: LESSEQUAL
12974: IFTRUE 12978
12976: GO 13038
12978: POP
// begin bc_type := b_lab_half ;
12979: LD_ADDR_OWVAR 42
12983: PUSH
12984: LD_INT 7
12986: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12987: LD_ADDR_OWVAR 44
12991: PUSH
12992: LD_INT 10
12994: PUSH
12995: LD_INT 11
12997: PUSH
12998: LD_INT 12
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: LD_INT 13
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 3
13025: MINUS
13026: ARRAY
13027: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13028: LD_ADDR_OWVAR 45
13032: PUSH
13033: LD_INT 9
13035: ST_TO_ADDR
// end ; 10 .. 13 :
13036: GO 13546
13038: LD_INT 10
13040: DOUBLE
13041: GREATEREQUAL
13042: IFFALSE 13050
13044: LD_INT 13
13046: DOUBLE
13047: LESSEQUAL
13048: IFTRUE 13052
13050: GO 13129
13052: POP
// begin bc_type := b_lab_full ;
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 8
13060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13061: LD_ADDR_OWVAR 44
13065: PUSH
13066: LD_INT 10
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 14
13074: PUSH
13075: LD_INT 13
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 9
13091: MINUS
13092: ARRAY
13093: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13094: LD_ADDR_OWVAR 45
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 15
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 15
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: LD_INT 9
13124: MINUS
13125: ARRAY
13126: ST_TO_ADDR
// end ; 14 :
13127: GO 13546
13129: LD_INT 14
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13148
13137: POP
// bc_type := b_workshop ; 15 :
13138: LD_ADDR_OWVAR 42
13142: PUSH
13143: LD_INT 2
13145: ST_TO_ADDR
13146: GO 13546
13148: LD_INT 15
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13167
13156: POP
// bc_type := b_factory ; 16 :
13157: LD_ADDR_OWVAR 42
13161: PUSH
13162: LD_INT 3
13164: ST_TO_ADDR
13165: GO 13546
13167: LD_INT 16
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13186
13175: POP
// bc_type := b_ext_gun ; 17 :
13176: LD_ADDR_OWVAR 42
13180: PUSH
13181: LD_INT 17
13183: ST_TO_ADDR
13184: GO 13546
13186: LD_INT 17
13188: DOUBLE
13189: EQUAL
13190: IFTRUE 13194
13192: GO 13222
13194: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13195: LD_ADDR_OWVAR 42
13199: PUSH
13200: LD_INT 19
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 19
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_VAR 0 1
13218: ARRAY
13219: ST_TO_ADDR
13220: GO 13546
13222: LD_INT 18
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13241
13230: POP
// bc_type := b_ext_radar ; 19 :
13231: LD_ADDR_OWVAR 42
13235: PUSH
13236: LD_INT 20
13238: ST_TO_ADDR
13239: GO 13546
13241: LD_INT 19
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13260
13249: POP
// bc_type := b_ext_radio ; 20 :
13250: LD_ADDR_OWVAR 42
13254: PUSH
13255: LD_INT 22
13257: ST_TO_ADDR
13258: GO 13546
13260: LD_INT 20
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13279
13268: POP
// bc_type := b_ext_siberium ; 21 :
13269: LD_ADDR_OWVAR 42
13273: PUSH
13274: LD_INT 21
13276: ST_TO_ADDR
13277: GO 13546
13279: LD_INT 21
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13298
13287: POP
// bc_type := b_ext_computer ; 22 :
13288: LD_ADDR_OWVAR 42
13292: PUSH
13293: LD_INT 24
13295: ST_TO_ADDR
13296: GO 13546
13298: LD_INT 22
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13317
13306: POP
// bc_type := b_ext_track ; 23 :
13307: LD_ADDR_OWVAR 42
13311: PUSH
13312: LD_INT 16
13314: ST_TO_ADDR
13315: GO 13546
13317: LD_INT 23
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13336
13325: POP
// bc_type := b_ext_laser ; 24 :
13326: LD_ADDR_OWVAR 42
13330: PUSH
13331: LD_INT 25
13333: ST_TO_ADDR
13334: GO 13546
13336: LD_INT 24
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13355
13344: POP
// bc_type := b_control_tower ; 25 :
13345: LD_ADDR_OWVAR 42
13349: PUSH
13350: LD_INT 36
13352: ST_TO_ADDR
13353: GO 13546
13355: LD_INT 25
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13374
13363: POP
// bc_type := b_breastwork ; 26 :
13364: LD_ADDR_OWVAR 42
13368: PUSH
13369: LD_INT 31
13371: ST_TO_ADDR
13372: GO 13546
13374: LD_INT 26
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13393
13382: POP
// bc_type := b_bunker ; 27 :
13383: LD_ADDR_OWVAR 42
13387: PUSH
13388: LD_INT 32
13390: ST_TO_ADDR
13391: GO 13546
13393: LD_INT 27
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13412
13401: POP
// bc_type := b_turret ; 28 :
13402: LD_ADDR_OWVAR 42
13406: PUSH
13407: LD_INT 33
13409: ST_TO_ADDR
13410: GO 13546
13412: LD_INT 28
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13431
13420: POP
// bc_type := b_armoury ; 29 :
13421: LD_ADDR_OWVAR 42
13425: PUSH
13426: LD_INT 4
13428: ST_TO_ADDR
13429: GO 13546
13431: LD_INT 29
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13450
13439: POP
// bc_type := b_barracks ; 30 :
13440: LD_ADDR_OWVAR 42
13444: PUSH
13445: LD_INT 5
13447: ST_TO_ADDR
13448: GO 13546
13450: LD_INT 30
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13469
13458: POP
// bc_type := b_solar_power ; 31 :
13459: LD_ADDR_OWVAR 42
13463: PUSH
13464: LD_INT 27
13466: ST_TO_ADDR
13467: GO 13546
13469: LD_INT 31
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13488
13477: POP
// bc_type := b_oil_power ; 32 :
13478: LD_ADDR_OWVAR 42
13482: PUSH
13483: LD_INT 26
13485: ST_TO_ADDR
13486: GO 13546
13488: LD_INT 32
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13507
13496: POP
// bc_type := b_siberite_power ; 33 :
13497: LD_ADDR_OWVAR 42
13501: PUSH
13502: LD_INT 28
13504: ST_TO_ADDR
13505: GO 13546
13507: LD_INT 33
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13526
13515: POP
// bc_type := b_oil_mine ; 34 :
13516: LD_ADDR_OWVAR 42
13520: PUSH
13521: LD_INT 29
13523: ST_TO_ADDR
13524: GO 13546
13526: LD_INT 34
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13545
13534: POP
// bc_type := b_siberite_mine ; end ;
13535: LD_ADDR_OWVAR 42
13539: PUSH
13540: LD_INT 30
13542: ST_TO_ADDR
13543: GO 13546
13545: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13546: LD_ADDR_VAR 0 8
13550: PUSH
13551: LD_VAR 0 5
13555: PPUSH
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 47
13570: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13571: LD_OWVAR 42
13575: PUSH
13576: LD_INT 32
13578: PUSH
13579: LD_INT 33
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: IN
13586: IFFALSE 13602
// PlaceWeaponTurret ( b , weapon ) ;
13588: LD_VAR 0 8
13592: PPUSH
13593: LD_VAR 0 4
13597: PPUSH
13598: CALL_OW 431
// end ;
13602: LD_VAR 0 7
13606: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_OWVAR 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: ST_TO_ADDR
// if not tmp then
13667: LD_VAR 0 4
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13735
// for i in tmp do
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_VAR 0 4
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13733
// for j = 1 to 3 do
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 3
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13705: LD_VAR 0 2
13709: PPUSH
13710: CALL_OW 274
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 99999
13722: PPUSH
13723: CALL_OW 277
13727: GO 13702
13729: POP
13730: POP
13731: GO 13686
13733: POP
13734: POP
// end ;
13735: LD_VAR 0 1
13739: RET
// export function hHackSetLevel10 ; var i , j ; begin
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
13744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13818
// if IsSelected ( i ) then
13768: LD_VAR 0 2
13772: PPUSH
13773: CALL_OW 306
13777: IFFALSE 13816
// begin for j := 1 to 4 do
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: DOUBLE
13785: LD_INT 1
13787: DEC
13788: ST_TO_ADDR
13789: LD_INT 4
13791: PUSH
13792: FOR_TO
13793: IFFALSE 13814
// SetSkill ( i , j , 10 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 10
13807: PPUSH
13808: CALL_OW 237
13812: GO 13792
13814: POP
13815: POP
// end ;
13816: GO 13765
13818: POP
13819: POP
// end ;
13820: LD_VAR 0 1
13824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PUSH
13866: FOR_IN
13867: IFFALSE 13908
// begin for j := 1 to 4 do
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: DOUBLE
13875: LD_INT 1
13877: DEC
13878: ST_TO_ADDR
13879: LD_INT 4
13881: PUSH
13882: FOR_TO
13883: IFFALSE 13904
// SetSkill ( i , j , 10 ) ;
13885: LD_VAR 0 2
13889: PPUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 10
13897: PPUSH
13898: CALL_OW 237
13902: GO 13882
13904: POP
13905: POP
// end ;
13906: GO 13866
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 1
13914: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13915: LD_INT 0
13917: PPUSH
// uc_side := your_side ;
13918: LD_ADDR_OWVAR 20
13922: PUSH
13923: LD_OWVAR 2
13927: ST_TO_ADDR
// uc_nation := nation ;
13928: LD_ADDR_OWVAR 21
13932: PUSH
13933: LD_VAR 0 1
13937: ST_TO_ADDR
// InitHc ;
13938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13942: LD_INT 0
13944: PPUSH
13945: LD_VAR 0 2
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13959: LD_VAR 0 4
13963: PPUSH
13964: LD_VAR 0 5
13968: PPUSH
13969: CALL_OW 428
13973: PUSH
13974: LD_INT 0
13976: EQUAL
13977: IFFALSE 14001
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13979: CALL_OW 44
13983: PPUSH
13984: LD_VAR 0 4
13988: PPUSH
13989: LD_VAR 0 5
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 48
// end ;
14001: LD_VAR 0 6
14005: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// uc_side := your_side ;
14010: LD_ADDR_OWVAR 20
14014: PUSH
14015: LD_OWVAR 2
14019: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14020: LD_VAR 0 1
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: IN
14047: IFFALSE 14059
// uc_nation := nation_american else
14049: LD_ADDR_OWVAR 21
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
14057: GO 14102
// if chassis in [ 11 , 12 , 13 , 14 ] then
14059: LD_VAR 0 1
14063: PUSH
14064: LD_INT 11
14066: PUSH
14067: LD_INT 12
14069: PUSH
14070: LD_INT 13
14072: PUSH
14073: LD_INT 14
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: IN
14082: IFFALSE 14094
// uc_nation := nation_arabian else
14084: LD_ADDR_OWVAR 21
14088: PUSH
14089: LD_INT 2
14091: ST_TO_ADDR
14092: GO 14102
// uc_nation := nation_russian ;
14094: LD_ADDR_OWVAR 21
14098: PUSH
14099: LD_INT 3
14101: ST_TO_ADDR
// vc_chassis := chassis ;
14102: LD_ADDR_OWVAR 37
14106: PUSH
14107: LD_VAR 0 1
14111: ST_TO_ADDR
// vc_engine := engine ;
14112: LD_ADDR_OWVAR 39
14116: PUSH
14117: LD_VAR 0 2
14121: ST_TO_ADDR
// vc_control := control ;
14122: LD_ADDR_OWVAR 38
14126: PUSH
14127: LD_VAR 0 3
14131: ST_TO_ADDR
// vc_weapon := weapon ;
14132: LD_ADDR_OWVAR 40
14136: PUSH
14137: LD_VAR 0 4
14141: ST_TO_ADDR
// un := CreateVehicle ;
14142: LD_ADDR_VAR 0 8
14146: PUSH
14147: CALL_OW 45
14151: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14152: LD_VAR 0 8
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: LD_INT 5
14162: PPUSH
14163: CALL_OW 12
14167: PPUSH
14168: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14172: LD_VAR 0 8
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: LD_VAR 0 6
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 48
// end ;
14194: LD_VAR 0 7
14198: RET
// export hInvincible ; every 1 do
14199: GO 14201
14201: DISABLE
// hInvincible := [ ] ;
14202: LD_ADDR_EXP 59
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
14209: END
// every 10 do var i ;
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin enable ;
14216: ENABLE
// if not hInvincible then
14217: LD_EXP 59
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14270
// for i in hInvincible do
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_EXP 59
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14268
// if GetLives ( i ) < 1000 then
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 256
14248: PUSH
14249: LD_INT 1000
14251: LESS
14252: IFFALSE 14266
// SetLives ( i , 1000 ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 1000
14261: PPUSH
14262: CALL_OW 234
14266: GO 14236
14268: POP
14269: POP
// end ;
14270: PPOPN 1
14272: END
// export function hHackInvincible ; var i ; begin
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: FOR_IN
14316: IFFALSE 14377
// if IsSelected ( i ) then
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 306
14327: IFFALSE 14375
// begin if i in hInvincible then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_EXP 59
14338: IN
14339: IFFALSE 14359
// hInvincible := hInvincible diff i else
14341: LD_ADDR_EXP 59
14345: PUSH
14346: LD_EXP 59
14350: PUSH
14351: LD_VAR 0 2
14355: DIFF
14356: ST_TO_ADDR
14357: GO 14375
// hInvincible := hInvincible union i ;
14359: LD_ADDR_EXP 59
14363: PUSH
14364: LD_EXP 59
14368: PUSH
14369: LD_VAR 0 2
14373: UNION
14374: ST_TO_ADDR
// end ;
14375: GO 14315
14377: POP
14378: POP
// end ;
14379: LD_VAR 0 1
14383: RET
// export function hHackInvisible ; var i , j ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
14388: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14434
// if IsSelected ( i ) then
14412: LD_VAR 0 2
14416: PPUSH
14417: CALL_OW 306
14421: IFFALSE 14432
// ComForceInvisible ( i ) ;
14423: LD_VAR 0 2
14427: PPUSH
14428: CALL_OW 496
14432: GO 14409
14434: POP
14435: POP
// end ;
14436: LD_VAR 0 1
14440: RET
// export function hHackChangeYourSide ; begin
14441: LD_INT 0
14443: PPUSH
// if your_side = 8 then
14444: LD_OWVAR 2
14448: PUSH
14449: LD_INT 8
14451: EQUAL
14452: IFFALSE 14464
// your_side := 0 else
14454: LD_ADDR_OWVAR 2
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
14462: GO 14478
// your_side := your_side + 1 ;
14464: LD_ADDR_OWVAR 2
14468: PUSH
14469: LD_OWVAR 2
14473: PUSH
14474: LD_INT 1
14476: PLUS
14477: ST_TO_ADDR
// end ;
14478: LD_VAR 0 1
14482: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
14487: PPUSH
// for i in all_units do
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_OWVAR 3
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14577
// if IsSelected ( i ) then
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 306
14510: IFFALSE 14575
// begin j := GetSide ( i ) ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: PPUSH
14522: CALL_OW 255
14526: ST_TO_ADDR
// if j = 8 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 8
14534: EQUAL
14535: IFFALSE 14547
// j := 0 else
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
14545: GO 14561
// j := j + 1 ;
14547: LD_ADDR_VAR 0 3
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PLUS
14560: ST_TO_ADDR
// SetSide ( i , j ) ;
14561: LD_VAR 0 2
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: CALL_OW 235
// end ;
14575: GO 14498
14577: POP
14578: POP
// end ;
14579: LD_VAR 0 1
14583: RET
// export function hHackFog ; begin
14584: LD_INT 0
14586: PPUSH
// FogOff ( true ) ;
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 344
// end ;
14594: LD_VAR 0 1
14598: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14599: LD_INT 0
14601: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 483
// CenterOnXY ( x , y ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 84
// end ;
14641: LD_VAR 0 4
14645: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14650: LD_VAR 0 1
14654: NOT
14655: PUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: CALL_OW 488
14670: NOT
14671: OR
14672: PUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 266
14682: PUSH
14683: LD_INT 3
14685: NONEQUAL
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 247
14696: PUSH
14697: LD_INT 1
14699: EQUAL
14700: NOT
14701: AND
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 14856
// if GetType ( factory ) = unit_human then
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 247
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14737
// factory := IsInUnit ( factory ) ;
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 310
14736: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 266
14746: PUSH
14747: LD_INT 3
14749: NONEQUAL
14750: IFFALSE 14754
// exit ;
14752: GO 14856
// if HexInfo ( x , y ) = factory then
14754: LD_VAR 0 2
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 428
14768: PUSH
14769: LD_VAR 0 1
14773: EQUAL
14774: IFFALSE 14801
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14776: LD_ADDR_EXP 60
14780: PUSH
14781: LD_EXP 60
14785: PPUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 0
14793: PPUSH
14794: CALL_OW 1
14798: ST_TO_ADDR
14799: GO 14852
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14801: LD_ADDR_EXP 60
14805: PUSH
14806: LD_EXP 60
14810: PPUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 255
14825: PUSH
14826: LD_VAR 0 1
14830: PUSH
14831: LD_VAR 0 2
14835: PUSH
14836: LD_VAR 0 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 1
14851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14852: CALL 14861 0 0
// end ;
14856: LD_VAR 0 4
14860: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14861: LD_INT 0
14863: PPUSH
14864: PPUSH
14865: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14866: LD_STRING resetFactoryWaypoint();
14868: PPUSH
14869: CALL_OW 559
// if factoryWaypoints then
14873: LD_EXP 60
14877: IFFALSE 15003
// begin list := PrepareArray ( factoryWaypoints ) ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_EXP 60
14888: PPUSH
14889: CALL 62814 0 1
14893: ST_TO_ADDR
// for i := 1 to list do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: DOUBLE
14900: LD_INT 1
14902: DEC
14903: ST_TO_ADDR
14904: LD_VAR 0 3
14908: PUSH
14909: FOR_TO
14910: IFFALSE 15001
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14912: LD_STRING setFactoryWaypointXY(
14914: PUSH
14915: LD_VAR 0 3
14919: PUSH
14920: LD_VAR 0 2
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: STR
14930: PUSH
14931: LD_STRING ,
14933: STR
14934: PUSH
14935: LD_VAR 0 3
14939: PUSH
14940: LD_VAR 0 2
14944: ARRAY
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: STR
14950: PUSH
14951: LD_STRING ,
14953: STR
14954: PUSH
14955: LD_VAR 0 3
14959: PUSH
14960: LD_VAR 0 2
14964: ARRAY
14965: PUSH
14966: LD_INT 3
14968: ARRAY
14969: STR
14970: PUSH
14971: LD_STRING ,
14973: STR
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 2
14984: ARRAY
14985: PUSH
14986: LD_INT 4
14988: ARRAY
14989: STR
14990: PUSH
14991: LD_STRING )
14993: STR
14994: PPUSH
14995: CALL_OW 559
14999: GO 14909
15001: POP
15002: POP
// end ; end ;
15003: LD_VAR 0 1
15007: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15008: LD_INT 0
15010: PPUSH
// if HexInfo ( x , y ) = warehouse then
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: CALL_OW 428
15025: PUSH
15026: LD_VAR 0 1
15030: EQUAL
15031: IFFALSE 15058
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15033: LD_ADDR_EXP 61
15037: PUSH
15038: LD_EXP 61
15042: PPUSH
15043: LD_VAR 0 1
15047: PPUSH
15048: LD_INT 0
15050: PPUSH
15051: CALL_OW 1
15055: ST_TO_ADDR
15056: GO 15109
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15058: LD_ADDR_EXP 61
15062: PUSH
15063: LD_EXP 61
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_VAR 0 1
15087: PUSH
15088: LD_VAR 0 2
15092: PUSH
15093: LD_VAR 0 3
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 1
15108: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15109: CALL 15118 0 0
// end ;
15113: LD_VAR 0 4
15117: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15118: LD_INT 0
15120: PPUSH
15121: PPUSH
15122: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15123: LD_STRING resetWarehouseGatheringPoints();
15125: PPUSH
15126: CALL_OW 559
// if warehouseGatheringPoints then
15130: LD_EXP 61
15134: IFFALSE 15260
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_EXP 61
15145: PPUSH
15146: CALL 62814 0 1
15150: ST_TO_ADDR
// for i := 1 to list do
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: DOUBLE
15157: LD_INT 1
15159: DEC
15160: ST_TO_ADDR
15161: LD_VAR 0 3
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15258
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15169: LD_STRING setWarehouseGatheringPointXY(
15171: PUSH
15172: LD_VAR 0 3
15176: PUSH
15177: LD_VAR 0 2
15181: ARRAY
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: STR
15187: PUSH
15188: LD_STRING ,
15190: STR
15191: PUSH
15192: LD_VAR 0 3
15196: PUSH
15197: LD_VAR 0 2
15201: ARRAY
15202: PUSH
15203: LD_INT 2
15205: ARRAY
15206: STR
15207: PUSH
15208: LD_STRING ,
15210: STR
15211: PUSH
15212: LD_VAR 0 3
15216: PUSH
15217: LD_VAR 0 2
15221: ARRAY
15222: PUSH
15223: LD_INT 3
15225: ARRAY
15226: STR
15227: PUSH
15228: LD_STRING ,
15230: STR
15231: PUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 2
15241: ARRAY
15242: PUSH
15243: LD_INT 4
15245: ARRAY
15246: STR
15247: PUSH
15248: LD_STRING )
15250: STR
15251: PPUSH
15252: CALL_OW 559
15256: GO 15166
15258: POP
15259: POP
// end ; end ;
15260: LD_VAR 0 1
15264: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15265: LD_EXP 61
15269: IFFALSE 15954
15271: GO 15273
15273: DISABLE
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin enable ;
15285: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: LD_EXP 61
15295: PPUSH
15296: CALL 62814 0 1
15300: ST_TO_ADDR
// if not list then
15301: LD_VAR 0 3
15305: NOT
15306: IFFALSE 15310
// exit ;
15308: GO 15954
// for i := 1 to list do
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_VAR 0 3
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15952
// begin depot := list [ i ] [ 2 ] ;
15328: LD_ADDR_VAR 0 8
15332: PUSH
15333: LD_VAR 0 3
15337: PUSH
15338: LD_VAR 0 1
15342: ARRAY
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 1
15362: ARRAY
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15368: LD_VAR 0 8
15372: PPUSH
15373: CALL_OW 301
15377: PUSH
15378: LD_VAR 0 5
15382: PUSH
15383: LD_VAR 0 8
15387: PPUSH
15388: CALL_OW 255
15392: NONEQUAL
15393: OR
15394: IFFALSE 15423
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15396: LD_ADDR_EXP 61
15400: PUSH
15401: LD_EXP 61
15405: PPUSH
15406: LD_VAR 0 8
15410: PPUSH
15411: LD_INT 0
15413: PPUSH
15414: CALL_OW 1
15418: ST_TO_ADDR
// exit ;
15419: POP
15420: POP
15421: GO 15954
// end ; x := list [ i ] [ 3 ] ;
15423: LD_ADDR_VAR 0 6
15427: PUSH
15428: LD_VAR 0 3
15432: PUSH
15433: LD_VAR 0 1
15437: ARRAY
15438: PUSH
15439: LD_INT 3
15441: ARRAY
15442: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15443: LD_ADDR_VAR 0 7
15447: PUSH
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ARRAY
15458: PUSH
15459: LD_INT 4
15461: ARRAY
15462: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_VAR 0 6
15472: PPUSH
15473: LD_VAR 0 7
15477: PPUSH
15478: LD_INT 16
15480: PPUSH
15481: CALL 61398 0 3
15485: ST_TO_ADDR
// if not cratesNearbyPoint then
15486: LD_VAR 0 9
15490: NOT
15491: IFFALSE 15497
// exit ;
15493: POP
15494: POP
15495: GO 15954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15497: LD_ADDR_VAR 0 4
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_VAR 0 5
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 60
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 91
15529: PUSH
15530: LD_VAR 0 8
15534: PUSH
15535: LD_INT 6
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 16
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: PUSH
15582: LD_VAR 0 8
15586: PPUSH
15587: CALL_OW 313
15591: PPUSH
15592: LD_INT 3
15594: PUSH
15595: LD_INT 60
15597: PUSH
15598: EMPTY
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 2
15607: PUSH
15608: LD_INT 25
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 25
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 72
15641: UNION
15642: ST_TO_ADDR
// if tmp then
15643: LD_VAR 0 4
15647: IFFALSE 15727
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_VAR 0 4
15658: PPUSH
15659: LD_INT 3
15661: PPUSH
15662: CALL 59367 0 2
15666: ST_TO_ADDR
// for j in tmp do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 4
15676: PUSH
15677: FOR_IN
15678: IFFALSE 15721
// begin if IsInUnit ( j ) then
15680: LD_VAR 0 2
15684: PPUSH
15685: CALL_OW 310
15689: IFFALSE 15700
// ComExit ( j ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL 59450 0 1
// AddComCollect ( j , x , y ) ;
15700: LD_VAR 0 2
15704: PPUSH
15705: LD_VAR 0 6
15709: PPUSH
15710: LD_VAR 0 7
15714: PPUSH
15715: CALL_OW 177
// end ;
15719: GO 15677
15721: POP
15722: POP
// exit ;
15723: POP
15724: POP
15725: GO 15954
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15727: LD_ADDR_VAR 0 4
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_VAR 0 5
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 91
15746: PUSH
15747: LD_VAR 0 8
15751: PUSH
15752: LD_INT 8
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: LD_INT 34
15765: PUSH
15766: LD_INT 12
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 34
15775: PUSH
15776: LD_INT 51
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 34
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 34
15795: PUSH
15796: LD_INT 89
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// if tmp then
15820: LD_VAR 0 4
15824: IFFALSE 15950
// begin for j in tmp do
15826: LD_ADDR_VAR 0 2
15830: PUSH
15831: LD_VAR 0 4
15835: PUSH
15836: FOR_IN
15837: IFFALSE 15948
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 262
15848: PUSH
15849: LD_INT 3
15851: EQUAL
15852: PUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 261
15862: PUSH
15863: LD_INT 20
15865: GREATER
15866: OR
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: CALL_OW 314
15877: NOT
15878: AND
15879: PUSH
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL_OW 263
15889: PUSH
15890: LD_INT 1
15892: NONEQUAL
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 311
15903: OR
15904: AND
15905: IFFALSE 15946
// begin ComCollect ( j , x , y ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_VAR 0 6
15916: PPUSH
15917: LD_VAR 0 7
15921: PPUSH
15922: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15926: LD_VAR 0 2
15930: PPUSH
15931: LD_VAR 0 8
15935: PPUSH
15936: CALL_OW 172
// exit ;
15940: POP
15941: POP
15942: POP
15943: POP
15944: GO 15954
// end ;
15946: GO 15836
15948: POP
15949: POP
// end ; end ;
15950: GO 15325
15952: POP
15953: POP
// end ; end_of_file
15954: PPOPN 9
15956: END
// export function SOS_UnitDestroyed ( un ) ; begin
15957: LD_INT 0
15959: PPUSH
// ComRadiation ( un ) ;
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL 16903 0 1
// end ;
15969: LD_VAR 0 2
15973: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15974: LD_INT 0
15976: PPUSH
// ComRadiation ( un ) ;
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL 16903 0 1
// end ;
15986: LD_VAR 0 2
15990: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15991: LD_INT 0
15993: PPUSH
// end ;
15994: LD_VAR 0 4
15998: RET
// export function SOS_Command ( cmd ) ; begin
15999: LD_INT 0
16001: PPUSH
// end ;
16002: LD_VAR 0 2
16006: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16007: LD_INT 0
16009: PPUSH
// end ;
16010: LD_VAR 0 6
16014: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
16015: LD_INT 0
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
// if not vehicle or not factory then
16021: LD_VAR 0 1
16025: NOT
16026: PUSH
16027: LD_VAR 0 2
16031: NOT
16032: OR
16033: IFFALSE 16037
// exit ;
16035: GO 16494
// if factoryWaypoints >= factory then
16037: LD_EXP 60
16041: PUSH
16042: LD_VAR 0 2
16046: GREATEREQUAL
16047: IFFALSE 16494
// if factoryWaypoints [ factory ] then
16049: LD_EXP 60
16053: PUSH
16054: LD_VAR 0 2
16058: ARRAY
16059: IFFALSE 16494
// begin if GetControl ( vehicle ) = control_manual then
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 263
16070: PUSH
16071: LD_INT 1
16073: EQUAL
16074: IFFALSE 16381
// begin driver := IsDrivenBy ( vehicle ) ;
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 311
16090: ST_TO_ADDR
// tag := GetTag ( driver ) ;
16091: LD_ADDR_VAR 0 4
16095: PUSH
16096: LD_VAR 0 5
16100: PPUSH
16101: CALL_OW 110
16105: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
16106: LD_VAR 0 4
16110: PUSH
16111: LD_INT 501
16113: EQUAL
16114: PUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 110
16124: PUSH
16125: LD_INT 501
16127: EQUAL
16128: OR
16129: IFFALSE 16133
// exit ;
16131: GO 16494
// if not HasTask ( driver ) then
16133: LD_VAR 0 5
16137: PPUSH
16138: CALL_OW 314
16142: NOT
16143: IFFALSE 16379
// begin SetTag ( driver , tDriver ) ;
16145: LD_VAR 0 5
16149: PPUSH
16150: LD_INT 501
16152: PPUSH
16153: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: LD_INT 501
16164: PPUSH
16165: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16169: LD_ADDR_VAR 0 6
16173: PUSH
16174: LD_EXP 60
16178: PUSH
16179: LD_VAR 0 2
16183: ARRAY
16184: PUSH
16185: LD_INT 3
16187: ARRAY
16188: PPUSH
16189: LD_EXP 60
16193: PUSH
16194: LD_VAR 0 2
16198: ARRAY
16199: PUSH
16200: LD_INT 4
16202: ARRAY
16203: PPUSH
16204: CALL_OW 428
16208: ST_TO_ADDR
// if hex then
16209: LD_VAR 0 6
16213: IFFALSE 16231
// ComMoveUnit ( driver , hex ) else
16215: LD_VAR 0 5
16219: PPUSH
16220: LD_VAR 0 6
16224: PPUSH
16225: CALL_OW 112
16229: GO 16270
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16231: LD_VAR 0 5
16235: PPUSH
16236: LD_EXP 60
16240: PUSH
16241: LD_VAR 0 2
16245: ARRAY
16246: PUSH
16247: LD_INT 3
16249: ARRAY
16250: PPUSH
16251: LD_EXP 60
16255: PUSH
16256: LD_VAR 0 2
16260: ARRAY
16261: PUSH
16262: LD_INT 4
16264: ARRAY
16265: PPUSH
16266: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16270: LD_VAR 0 5
16274: PPUSH
16275: CALL_OW 181
// if Multiplayer then
16279: LD_OWVAR 4
16283: IFFALSE 16332
// begin repeat wait ( 10 ) ;
16285: LD_INT 10
16287: PPUSH
16288: CALL_OW 67
// until not IsInUnit ( driver ) ;
16292: LD_VAR 0 5
16296: PPUSH
16297: CALL_OW 310
16301: NOT
16302: IFFALSE 16285
// if not HasTask ( driver ) then
16304: LD_VAR 0 5
16308: PPUSH
16309: CALL_OW 314
16313: NOT
16314: IFFALSE 16330
// ComEnterUnit ( driver , factory ) ;
16316: LD_VAR 0 5
16320: PPUSH
16321: LD_VAR 0 2
16325: PPUSH
16326: CALL_OW 120
// end else
16330: GO 16346
// AddComEnterUnit ( driver , factory ) ;
16332: LD_VAR 0 5
16336: PPUSH
16337: LD_VAR 0 2
16341: PPUSH
16342: CALL_OW 180
// wait ( 0 0$1 ) ;
16346: LD_INT 35
16348: PPUSH
16349: CALL_OW 67
// SetTag ( driver , tag ) ;
16353: LD_VAR 0 5
16357: PPUSH
16358: LD_VAR 0 4
16362: PPUSH
16363: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_INT 0
16374: PPUSH
16375: CALL_OW 109
// end ; end else
16379: GO 16494
// if GetControl ( vehicle ) = control_remote then
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 263
16390: PUSH
16391: LD_INT 2
16393: EQUAL
16394: IFFALSE 16455
// begin wait ( 0 0$2 ) ;
16396: LD_INT 70
16398: PPUSH
16399: CALL_OW 67
// if Connect ( vehicle ) then
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL 29669 0 1
16412: IFFALSE 16453
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16414: LD_VAR 0 1
16418: PPUSH
16419: LD_EXP 60
16423: PUSH
16424: LD_VAR 0 2
16428: ARRAY
16429: PUSH
16430: LD_INT 3
16432: ARRAY
16433: PPUSH
16434: LD_EXP 60
16438: PUSH
16439: LD_VAR 0 2
16443: ARRAY
16444: PUSH
16445: LD_INT 4
16447: ARRAY
16448: PPUSH
16449: CALL_OW 171
// end else
16453: GO 16494
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16455: LD_VAR 0 1
16459: PPUSH
16460: LD_EXP 60
16464: PUSH
16465: LD_VAR 0 2
16469: ARRAY
16470: PUSH
16471: LD_INT 3
16473: ARRAY
16474: PPUSH
16475: LD_EXP 60
16479: PUSH
16480: LD_VAR 0 2
16484: ARRAY
16485: PUSH
16486: LD_INT 4
16488: ARRAY
16489: PPUSH
16490: CALL_OW 171
// end ; end ;
16494: LD_VAR 0 3
16498: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16499: LD_INT 0
16501: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16502: LD_VAR 0 1
16506: PUSH
16507: LD_INT 250
16509: EQUAL
16510: PUSH
16511: LD_VAR 0 2
16515: PPUSH
16516: CALL_OW 264
16520: PUSH
16521: LD_INT 81
16523: EQUAL
16524: AND
16525: IFFALSE 16546
// MinerPlaceMine ( unit , x , y ) ;
16527: LD_VAR 0 2
16531: PPUSH
16532: LD_VAR 0 4
16536: PPUSH
16537: LD_VAR 0 5
16541: PPUSH
16542: CALL 19638 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16546: LD_VAR 0 1
16550: PUSH
16551: LD_INT 251
16553: EQUAL
16554: PUSH
16555: LD_VAR 0 2
16559: PPUSH
16560: CALL_OW 264
16564: PUSH
16565: LD_INT 81
16567: EQUAL
16568: AND
16569: IFFALSE 16590
// MinerDetonateMine ( unit , x , y ) ;
16571: LD_VAR 0 2
16575: PPUSH
16576: LD_VAR 0 4
16580: PPUSH
16581: LD_VAR 0 5
16585: PPUSH
16586: CALL 19913 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16590: LD_VAR 0 1
16594: PUSH
16595: LD_INT 252
16597: EQUAL
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 264
16608: PUSH
16609: LD_INT 81
16611: EQUAL
16612: AND
16613: IFFALSE 16634
// MinerCreateMinefield ( unit , x , y ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: LD_VAR 0 4
16624: PPUSH
16625: LD_VAR 0 5
16629: PPUSH
16630: CALL 20330 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16634: LD_VAR 0 1
16638: PUSH
16639: LD_INT 253
16641: EQUAL
16642: PUSH
16643: LD_VAR 0 2
16647: PPUSH
16648: CALL_OW 257
16652: PUSH
16653: LD_INT 5
16655: EQUAL
16656: AND
16657: IFFALSE 16678
// ComBinocular ( unit , x , y ) ;
16659: LD_VAR 0 2
16663: PPUSH
16664: LD_VAR 0 4
16668: PPUSH
16669: LD_VAR 0 5
16673: PPUSH
16674: CALL 20699 0 3
// if selectedUnit then
16678: LD_VAR 0 3
16682: IFFALSE 16738
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16684: LD_VAR 0 1
16688: PUSH
16689: LD_INT 254
16691: EQUAL
16692: PUSH
16693: LD_VAR 0 2
16697: PPUSH
16698: CALL_OW 264
16702: PUSH
16703: LD_INT 99
16705: EQUAL
16706: AND
16707: PUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: CALL_OW 263
16717: PUSH
16718: LD_INT 3
16720: EQUAL
16721: AND
16722: IFFALSE 16738
// HackDestroyVehicle ( unit , selectedUnit ) ;
16724: LD_VAR 0 2
16728: PPUSH
16729: LD_VAR 0 3
16733: PPUSH
16734: CALL 19002 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 255
16745: EQUAL
16746: PUSH
16747: LD_VAR 0 2
16751: PPUSH
16752: CALL_OW 264
16756: PUSH
16757: LD_INT 14
16759: PUSH
16760: LD_INT 53
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: IN
16767: AND
16768: PUSH
16769: LD_VAR 0 4
16773: PPUSH
16774: LD_VAR 0 5
16778: PPUSH
16779: CALL_OW 488
16783: AND
16784: IFFALSE 16808
// CutTreeXYR ( unit , x , y , 12 ) ;
16786: LD_VAR 0 2
16790: PPUSH
16791: LD_VAR 0 4
16795: PPUSH
16796: LD_VAR 0 5
16800: PPUSH
16801: LD_INT 12
16803: PPUSH
16804: CALL 16999 0 4
// if cmd = 256 then
16808: LD_VAR 0 1
16812: PUSH
16813: LD_INT 256
16815: EQUAL
16816: IFFALSE 16837
// SetFactoryWaypoint ( unit , x , y ) ;
16818: LD_VAR 0 2
16822: PPUSH
16823: LD_VAR 0 4
16827: PPUSH
16828: LD_VAR 0 5
16832: PPUSH
16833: CALL 14646 0 3
// if cmd = 257 then
16837: LD_VAR 0 1
16841: PUSH
16842: LD_INT 257
16844: EQUAL
16845: IFFALSE 16866
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16847: LD_VAR 0 2
16851: PPUSH
16852: LD_VAR 0 4
16856: PPUSH
16857: LD_VAR 0 5
16861: PPUSH
16862: CALL 15008 0 3
// if cmd = 258 then
16866: LD_VAR 0 1
16870: PUSH
16871: LD_INT 258
16873: EQUAL
16874: IFFALSE 16898
// BurnTreeXYR ( unit , x , y , 8 ) ;
16876: LD_VAR 0 2
16880: PPUSH
16881: LD_VAR 0 4
16885: PPUSH
16886: LD_VAR 0 5
16890: PPUSH
16891: LD_INT 8
16893: PPUSH
16894: CALL 17393 0 4
// end ;
16898: LD_VAR 0 6
16902: RET
// export function ComRadiation ( un ) ; var eff ; begin
16903: LD_INT 0
16905: PPUSH
16906: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 264
16916: PUSH
16917: LD_INT 91
16919: NONEQUAL
16920: IFFALSE 16924
// exit ;
16922: GO 16994
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16924: LD_INT 68
16926: PPUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 255
16936: PPUSH
16937: CALL_OW 321
16941: PUSH
16942: LD_INT 2
16944: EQUAL
16945: IFFALSE 16957
// eff := 70 else
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_INT 70
16954: ST_TO_ADDR
16955: GO 16965
// eff := 30 ;
16957: LD_ADDR_VAR 0 3
16961: PUSH
16962: LD_INT 30
16964: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 250
16974: PPUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 251
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: CALL_OW 495
// end ;
16994: LD_VAR 0 2
16998: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
17009: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 302
17019: NOT
17020: PUSH
17021: LD_VAR 0 2
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: CALL_OW 488
17035: NOT
17036: OR
17037: PUSH
17038: LD_VAR 0 4
17042: NOT
17043: OR
17044: IFFALSE 17048
// exit ;
17046: GO 17388
// list := [ ] ;
17048: LD_ADDR_VAR 0 13
17052: PUSH
17053: EMPTY
17054: ST_TO_ADDR
// if x - r < 0 then
17055: LD_VAR 0 2
17059: PUSH
17060: LD_VAR 0 4
17064: MINUS
17065: PUSH
17066: LD_INT 0
17068: LESS
17069: IFFALSE 17081
// min_x := 0 else
17071: LD_ADDR_VAR 0 7
17075: PUSH
17076: LD_INT 0
17078: ST_TO_ADDR
17079: GO 17097
// min_x := x - r ;
17081: LD_ADDR_VAR 0 7
17085: PUSH
17086: LD_VAR 0 2
17090: PUSH
17091: LD_VAR 0 4
17095: MINUS
17096: ST_TO_ADDR
// if y - r < 0 then
17097: LD_VAR 0 3
17101: PUSH
17102: LD_VAR 0 4
17106: MINUS
17107: PUSH
17108: LD_INT 0
17110: LESS
17111: IFFALSE 17123
// min_y := 0 else
17113: LD_ADDR_VAR 0 8
17117: PUSH
17118: LD_INT 0
17120: ST_TO_ADDR
17121: GO 17139
// min_y := y - r ;
17123: LD_ADDR_VAR 0 8
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: LD_VAR 0 4
17137: MINUS
17138: ST_TO_ADDR
// max_x := x + r ;
17139: LD_ADDR_VAR 0 9
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_VAR 0 4
17153: PLUS
17154: ST_TO_ADDR
// max_y := y + r ;
17155: LD_ADDR_VAR 0 10
17159: PUSH
17160: LD_VAR 0 3
17164: PUSH
17165: LD_VAR 0 4
17169: PLUS
17170: ST_TO_ADDR
// for _x = min_x to max_x do
17171: LD_ADDR_VAR 0 11
17175: PUSH
17176: DOUBLE
17177: LD_VAR 0 7
17181: DEC
17182: ST_TO_ADDR
17183: LD_VAR 0 9
17187: PUSH
17188: FOR_TO
17189: IFFALSE 17306
// for _y = min_y to max_y do
17191: LD_ADDR_VAR 0 12
17195: PUSH
17196: DOUBLE
17197: LD_VAR 0 8
17201: DEC
17202: ST_TO_ADDR
17203: LD_VAR 0 10
17207: PUSH
17208: FOR_TO
17209: IFFALSE 17302
// begin if not ValidHex ( _x , _y ) then
17211: LD_VAR 0 11
17215: PPUSH
17216: LD_VAR 0 12
17220: PPUSH
17221: CALL_OW 488
17225: NOT
17226: IFFALSE 17230
// continue ;
17228: GO 17208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17230: LD_VAR 0 11
17234: PPUSH
17235: LD_VAR 0 12
17239: PPUSH
17240: CALL_OW 351
17244: PUSH
17245: LD_VAR 0 11
17249: PPUSH
17250: LD_VAR 0 12
17254: PPUSH
17255: CALL_OW 554
17259: AND
17260: IFFALSE 17300
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17262: LD_ADDR_VAR 0 13
17266: PUSH
17267: LD_VAR 0 13
17271: PPUSH
17272: LD_VAR 0 13
17276: PUSH
17277: LD_INT 1
17279: PLUS
17280: PPUSH
17281: LD_VAR 0 11
17285: PUSH
17286: LD_VAR 0 12
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 2
17299: ST_TO_ADDR
// end ;
17300: GO 17208
17302: POP
17303: POP
17304: GO 17188
17306: POP
17307: POP
// if not list then
17308: LD_VAR 0 13
17312: NOT
17313: IFFALSE 17317
// exit ;
17315: GO 17388
// for i in list do
17317: LD_ADDR_VAR 0 6
17321: PUSH
17322: LD_VAR 0 13
17326: PUSH
17327: FOR_IN
17328: IFFALSE 17386
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17330: LD_VAR 0 1
17334: PPUSH
17335: LD_STRING M
17337: PUSH
17338: LD_VAR 0 6
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PUSH
17347: LD_VAR 0 6
17351: PUSH
17352: LD_INT 2
17354: ARRAY
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: EMPTY
17378: LIST
17379: PPUSH
17380: CALL_OW 447
17384: GO 17327
17386: POP
17387: POP
// end ;
17388: LD_VAR 0 5
17392: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17393: LD_INT 0
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 302
17414: NOT
17415: PUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: LD_VAR 0 3
17425: PPUSH
17426: CALL_OW 488
17430: NOT
17431: OR
17432: PUSH
17433: LD_VAR 0 4
17437: NOT
17438: OR
17439: IFFALSE 17443
// exit ;
17441: GO 17956
// list := [ ] ;
17443: LD_ADDR_VAR 0 13
17447: PUSH
17448: EMPTY
17449: ST_TO_ADDR
// if x - r < 0 then
17450: LD_VAR 0 2
17454: PUSH
17455: LD_VAR 0 4
17459: MINUS
17460: PUSH
17461: LD_INT 0
17463: LESS
17464: IFFALSE 17476
// min_x := 0 else
17466: LD_ADDR_VAR 0 7
17470: PUSH
17471: LD_INT 0
17473: ST_TO_ADDR
17474: GO 17492
// min_x := x - r ;
17476: LD_ADDR_VAR 0 7
17480: PUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_VAR 0 4
17490: MINUS
17491: ST_TO_ADDR
// if y - r < 0 then
17492: LD_VAR 0 3
17496: PUSH
17497: LD_VAR 0 4
17501: MINUS
17502: PUSH
17503: LD_INT 0
17505: LESS
17506: IFFALSE 17518
// min_y := 0 else
17508: LD_ADDR_VAR 0 8
17512: PUSH
17513: LD_INT 0
17515: ST_TO_ADDR
17516: GO 17534
// min_y := y - r ;
17518: LD_ADDR_VAR 0 8
17522: PUSH
17523: LD_VAR 0 3
17527: PUSH
17528: LD_VAR 0 4
17532: MINUS
17533: ST_TO_ADDR
// max_x := x + r ;
17534: LD_ADDR_VAR 0 9
17538: PUSH
17539: LD_VAR 0 2
17543: PUSH
17544: LD_VAR 0 4
17548: PLUS
17549: ST_TO_ADDR
// max_y := y + r ;
17550: LD_ADDR_VAR 0 10
17554: PUSH
17555: LD_VAR 0 3
17559: PUSH
17560: LD_VAR 0 4
17564: PLUS
17565: ST_TO_ADDR
// for _x = min_x to max_x do
17566: LD_ADDR_VAR 0 11
17570: PUSH
17571: DOUBLE
17572: LD_VAR 0 7
17576: DEC
17577: ST_TO_ADDR
17578: LD_VAR 0 9
17582: PUSH
17583: FOR_TO
17584: IFFALSE 17701
// for _y = min_y to max_y do
17586: LD_ADDR_VAR 0 12
17590: PUSH
17591: DOUBLE
17592: LD_VAR 0 8
17596: DEC
17597: ST_TO_ADDR
17598: LD_VAR 0 10
17602: PUSH
17603: FOR_TO
17604: IFFALSE 17697
// begin if not ValidHex ( _x , _y ) then
17606: LD_VAR 0 11
17610: PPUSH
17611: LD_VAR 0 12
17615: PPUSH
17616: CALL_OW 488
17620: NOT
17621: IFFALSE 17625
// continue ;
17623: GO 17603
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17625: LD_VAR 0 11
17629: PPUSH
17630: LD_VAR 0 12
17634: PPUSH
17635: CALL_OW 351
17639: PUSH
17640: LD_VAR 0 11
17644: PPUSH
17645: LD_VAR 0 12
17649: PPUSH
17650: CALL_OW 554
17654: AND
17655: IFFALSE 17695
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17657: LD_ADDR_VAR 0 13
17661: PUSH
17662: LD_VAR 0 13
17666: PPUSH
17667: LD_VAR 0 13
17671: PUSH
17672: LD_INT 1
17674: PLUS
17675: PPUSH
17676: LD_VAR 0 11
17680: PUSH
17681: LD_VAR 0 12
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 2
17694: ST_TO_ADDR
// end ;
17695: GO 17603
17697: POP
17698: POP
17699: GO 17583
17701: POP
17702: POP
// if not list then
17703: LD_VAR 0 13
17707: NOT
17708: IFFALSE 17712
// exit ;
17710: GO 17956
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17712: LD_ADDR_VAR 0 13
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: LD_VAR 0 13
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL 26811 0 4
17737: ST_TO_ADDR
// ComStop ( flame ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 141
// for i in list do
17747: LD_ADDR_VAR 0 6
17751: PUSH
17752: LD_VAR 0 13
17756: PUSH
17757: FOR_IN
17758: IFFALSE 17789
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_VAR 0 6
17769: PUSH
17770: LD_INT 1
17772: ARRAY
17773: PPUSH
17774: LD_VAR 0 6
17778: PUSH
17779: LD_INT 2
17781: ARRAY
17782: PPUSH
17783: CALL_OW 176
17787: GO 17757
17789: POP
17790: POP
// repeat wait ( 0 0$1 ) ;
17791: LD_INT 35
17793: PPUSH
17794: CALL_OW 67
// task := GetTaskList ( flame ) ;
17798: LD_ADDR_VAR 0 14
17802: PUSH
17803: LD_VAR 0 1
17807: PPUSH
17808: CALL_OW 437
17812: ST_TO_ADDR
// if not task then
17813: LD_VAR 0 14
17817: NOT
17818: IFFALSE 17822
// exit ;
17820: GO 17956
// if task [ 1 ] [ 1 ] <> | then
17822: LD_VAR 0 14
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PUSH
17831: LD_INT 1
17833: ARRAY
17834: PUSH
17835: LD_STRING |
17837: NONEQUAL
17838: IFFALSE 17842
// exit ;
17840: GO 17956
// _x := task [ 1 ] [ 2 ] ;
17842: LD_ADDR_VAR 0 11
17846: PUSH
17847: LD_VAR 0 14
17851: PUSH
17852: LD_INT 1
17854: ARRAY
17855: PUSH
17856: LD_INT 2
17858: ARRAY
17859: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17860: LD_ADDR_VAR 0 12
17864: PUSH
17865: LD_VAR 0 14
17869: PUSH
17870: LD_INT 1
17872: ARRAY
17873: PUSH
17874: LD_INT 3
17876: ARRAY
17877: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17878: LD_VAR 0 11
17882: PPUSH
17883: LD_VAR 0 12
17887: PPUSH
17888: CALL_OW 351
17892: NOT
17893: PUSH
17894: LD_VAR 0 11
17898: PPUSH
17899: LD_VAR 0 12
17903: PPUSH
17904: CALL_OW 554
17908: NOT
17909: OR
17910: IFFALSE 17944
// begin task := Delete ( task , 1 ) ;
17912: LD_ADDR_VAR 0 14
17916: PUSH
17917: LD_VAR 0 14
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: CALL_OW 3
17929: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17930: LD_VAR 0 1
17934: PPUSH
17935: LD_VAR 0 14
17939: PPUSH
17940: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 314
17953: NOT
17954: IFFALSE 17791
// end ;
17956: LD_VAR 0 5
17960: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17961: LD_EXP 63
17965: NOT
17966: IFFALSE 18016
17968: GO 17970
17970: DISABLE
// begin initHack := true ;
17971: LD_ADDR_EXP 63
17975: PUSH
17976: LD_INT 1
17978: ST_TO_ADDR
// hackTanks := [ ] ;
17979: LD_ADDR_EXP 64
17983: PUSH
17984: EMPTY
17985: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17986: LD_ADDR_EXP 65
17990: PUSH
17991: EMPTY
17992: ST_TO_ADDR
// hackLimit := 3 ;
17993: LD_ADDR_EXP 66
17997: PUSH
17998: LD_INT 3
18000: ST_TO_ADDR
// hackDist := 12 ;
18001: LD_ADDR_EXP 67
18005: PUSH
18006: LD_INT 12
18008: ST_TO_ADDR
// hackCounter := [ ] ;
18009: LD_ADDR_EXP 68
18013: PUSH
18014: EMPTY
18015: ST_TO_ADDR
// end ;
18016: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18017: LD_EXP 63
18021: PUSH
18022: LD_INT 34
18024: PUSH
18025: LD_INT 99
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: AND
18037: IFFALSE 18290
18039: GO 18041
18041: DISABLE
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
// begin enable ;
18046: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18047: LD_ADDR_VAR 0 1
18051: PUSH
18052: LD_INT 34
18054: PUSH
18055: LD_INT 99
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: PUSH
18067: FOR_IN
18068: IFFALSE 18288
// begin if not i in hackTanks then
18070: LD_VAR 0 1
18074: PUSH
18075: LD_EXP 64
18079: IN
18080: NOT
18081: IFFALSE 18164
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18083: LD_ADDR_EXP 64
18087: PUSH
18088: LD_EXP 64
18092: PPUSH
18093: LD_EXP 64
18097: PUSH
18098: LD_INT 1
18100: PLUS
18101: PPUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 1
18111: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18112: LD_ADDR_EXP 65
18116: PUSH
18117: LD_EXP 65
18121: PPUSH
18122: LD_EXP 65
18126: PUSH
18127: LD_INT 1
18129: PLUS
18130: PPUSH
18131: EMPTY
18132: PPUSH
18133: CALL_OW 1
18137: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18138: LD_ADDR_EXP 68
18142: PUSH
18143: LD_EXP 68
18147: PPUSH
18148: LD_EXP 68
18152: PUSH
18153: LD_INT 1
18155: PLUS
18156: PPUSH
18157: EMPTY
18158: PPUSH
18159: CALL_OW 1
18163: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 302
18173: NOT
18174: IFFALSE 18187
// begin HackUnlinkAll ( i ) ;
18176: LD_VAR 0 1
18180: PPUSH
18181: CALL 18293 0 1
// continue ;
18185: GO 18067
// end ; HackCheckCapturedStatus ( i ) ;
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL 18736 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 81
18203: PUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 255
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 33
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 91
18230: PUSH
18231: LD_VAR 0 1
18235: PUSH
18236: LD_EXP 67
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 50
18248: PUSH
18249: EMPTY
18250: LIST
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: ST_TO_ADDR
// if not tmp then
18263: LD_VAR 0 2
18267: NOT
18268: IFFALSE 18272
// continue ;
18270: GO 18067
// HackLink ( i , tmp ) ;
18272: LD_VAR 0 1
18276: PPUSH
18277: LD_VAR 0 2
18281: PPUSH
18282: CALL 18429 0 2
// end ;
18286: GO 18067
18288: POP
18289: POP
// end ;
18290: PPOPN 2
18292: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18293: LD_INT 0
18295: PPUSH
18296: PPUSH
18297: PPUSH
// if not hack in hackTanks then
18298: LD_VAR 0 1
18302: PUSH
18303: LD_EXP 64
18307: IN
18308: NOT
18309: IFFALSE 18313
// exit ;
18311: GO 18424
// index := GetElementIndex ( hackTanks , hack ) ;
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: LD_EXP 64
18322: PPUSH
18323: LD_VAR 0 1
18327: PPUSH
18328: CALL 26108 0 2
18332: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18333: LD_EXP 65
18337: PUSH
18338: LD_VAR 0 4
18342: ARRAY
18343: IFFALSE 18424
// begin for i in hackTanksCaptured [ index ] do
18345: LD_ADDR_VAR 0 3
18349: PUSH
18350: LD_EXP 65
18354: PUSH
18355: LD_VAR 0 4
18359: ARRAY
18360: PUSH
18361: FOR_IN
18362: IFFALSE 18388
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18364: LD_VAR 0 3
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 3
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: CALL_OW 235
18386: GO 18361
18388: POP
18389: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18390: LD_ADDR_EXP 65
18394: PUSH
18395: LD_EXP 65
18399: PPUSH
18400: LD_VAR 0 4
18404: PPUSH
18405: EMPTY
18406: PPUSH
18407: CALL_OW 1
18411: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18412: LD_VAR 0 1
18416: PPUSH
18417: LD_INT 0
18419: PPUSH
18420: CALL_OW 505
// end ; end ;
18424: LD_VAR 0 2
18428: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18429: LD_INT 0
18431: PPUSH
18432: PPUSH
18433: PPUSH
// if not hack in hackTanks or not vehicles then
18434: LD_VAR 0 1
18438: PUSH
18439: LD_EXP 64
18443: IN
18444: NOT
18445: PUSH
18446: LD_VAR 0 2
18450: NOT
18451: OR
18452: IFFALSE 18456
// exit ;
18454: GO 18731
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18456: LD_ADDR_VAR 0 2
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_VAR 0 2
18470: PPUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: CALL 26758 0 4
18481: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18482: LD_ADDR_VAR 0 5
18486: PUSH
18487: LD_EXP 64
18491: PPUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL 26108 0 2
18501: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18502: LD_EXP 65
18506: PUSH
18507: LD_VAR 0 5
18511: ARRAY
18512: PUSH
18513: LD_EXP 66
18517: LESS
18518: IFFALSE 18707
// begin for i := 1 to vehicles do
18520: LD_ADDR_VAR 0 4
18524: PUSH
18525: DOUBLE
18526: LD_INT 1
18528: DEC
18529: ST_TO_ADDR
18530: LD_VAR 0 2
18534: PUSH
18535: FOR_TO
18536: IFFALSE 18705
// begin if hackTanksCaptured [ index ] = hackLimit then
18538: LD_EXP 65
18542: PUSH
18543: LD_VAR 0 5
18547: ARRAY
18548: PUSH
18549: LD_EXP 66
18553: EQUAL
18554: IFFALSE 18558
// break ;
18556: GO 18705
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18558: LD_ADDR_EXP 68
18562: PUSH
18563: LD_EXP 68
18567: PPUSH
18568: LD_VAR 0 5
18572: PPUSH
18573: LD_EXP 68
18577: PUSH
18578: LD_VAR 0 5
18582: ARRAY
18583: PUSH
18584: LD_INT 1
18586: PLUS
18587: PPUSH
18588: CALL_OW 1
18592: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18593: LD_ADDR_EXP 65
18597: PUSH
18598: LD_EXP 65
18602: PPUSH
18603: LD_VAR 0 5
18607: PUSH
18608: LD_EXP 65
18612: PUSH
18613: LD_VAR 0 5
18617: ARRAY
18618: PUSH
18619: LD_INT 1
18621: PLUS
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PPUSH
18627: LD_VAR 0 2
18631: PUSH
18632: LD_VAR 0 4
18636: ARRAY
18637: PUSH
18638: LD_VAR 0 2
18642: PUSH
18643: LD_VAR 0 4
18647: ARRAY
18648: PPUSH
18649: CALL_OW 255
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PPUSH
18658: CALL 26323 0 3
18662: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18663: LD_VAR 0 2
18667: PUSH
18668: LD_VAR 0 4
18672: ARRAY
18673: PPUSH
18674: LD_VAR 0 1
18678: PPUSH
18679: CALL_OW 255
18683: PPUSH
18684: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18688: LD_VAR 0 2
18692: PUSH
18693: LD_VAR 0 4
18697: ARRAY
18698: PPUSH
18699: CALL_OW 141
// end ;
18703: GO 18535
18705: POP
18706: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18707: LD_VAR 0 1
18711: PPUSH
18712: LD_EXP 65
18716: PUSH
18717: LD_VAR 0 5
18721: ARRAY
18722: PUSH
18723: LD_INT 0
18725: PLUS
18726: PPUSH
18727: CALL_OW 505
// end ;
18731: LD_VAR 0 3
18735: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18736: LD_INT 0
18738: PPUSH
18739: PPUSH
18740: PPUSH
18741: PPUSH
// if not hack in hackTanks then
18742: LD_VAR 0 1
18746: PUSH
18747: LD_EXP 64
18751: IN
18752: NOT
18753: IFFALSE 18757
// exit ;
18755: GO 18997
// index := GetElementIndex ( hackTanks , hack ) ;
18757: LD_ADDR_VAR 0 4
18761: PUSH
18762: LD_EXP 64
18766: PPUSH
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL 26108 0 2
18776: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: DOUBLE
18783: LD_EXP 65
18787: PUSH
18788: LD_VAR 0 4
18792: ARRAY
18793: INC
18794: ST_TO_ADDR
18795: LD_INT 1
18797: PUSH
18798: FOR_DOWNTO
18799: IFFALSE 18971
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18801: LD_ADDR_VAR 0 5
18805: PUSH
18806: LD_EXP 65
18810: PUSH
18811: LD_VAR 0 4
18815: ARRAY
18816: PUSH
18817: LD_VAR 0 3
18821: ARRAY
18822: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18823: LD_VAR 0 5
18827: PUSH
18828: LD_INT 1
18830: ARRAY
18831: PPUSH
18832: CALL_OW 302
18836: NOT
18837: PUSH
18838: LD_VAR 0 5
18842: PUSH
18843: LD_INT 1
18845: ARRAY
18846: PPUSH
18847: CALL_OW 255
18851: PUSH
18852: LD_VAR 0 1
18856: PPUSH
18857: CALL_OW 255
18861: NONEQUAL
18862: OR
18863: IFFALSE 18969
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18865: LD_VAR 0 5
18869: PUSH
18870: LD_INT 1
18872: ARRAY
18873: PPUSH
18874: CALL_OW 305
18878: PUSH
18879: LD_VAR 0 5
18883: PUSH
18884: LD_INT 1
18886: ARRAY
18887: PPUSH
18888: CALL_OW 255
18892: PUSH
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 255
18902: EQUAL
18903: AND
18904: IFFALSE 18928
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18906: LD_VAR 0 5
18910: PUSH
18911: LD_INT 1
18913: ARRAY
18914: PPUSH
18915: LD_VAR 0 5
18919: PUSH
18920: LD_INT 2
18922: ARRAY
18923: PPUSH
18924: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18928: LD_ADDR_EXP 65
18932: PUSH
18933: LD_EXP 65
18937: PPUSH
18938: LD_VAR 0 4
18942: PPUSH
18943: LD_EXP 65
18947: PUSH
18948: LD_VAR 0 4
18952: ARRAY
18953: PPUSH
18954: LD_VAR 0 3
18958: PPUSH
18959: CALL_OW 3
18963: PPUSH
18964: CALL_OW 1
18968: ST_TO_ADDR
// end ; end ;
18969: GO 18798
18971: POP
18972: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18973: LD_VAR 0 1
18977: PPUSH
18978: LD_EXP 65
18982: PUSH
18983: LD_VAR 0 4
18987: ARRAY
18988: PUSH
18989: LD_INT 0
18991: PLUS
18992: PPUSH
18993: CALL_OW 505
// end ;
18997: LD_VAR 0 2
19001: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
// if not hack in hackTanks then
19008: LD_VAR 0 1
19012: PUSH
19013: LD_EXP 64
19017: IN
19018: NOT
19019: IFFALSE 19023
// exit ;
19021: GO 19108
// index := GetElementIndex ( hackTanks , hack ) ;
19023: LD_ADDR_VAR 0 5
19027: PUSH
19028: LD_EXP 64
19032: PPUSH
19033: LD_VAR 0 1
19037: PPUSH
19038: CALL 26108 0 2
19042: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19043: LD_ADDR_VAR 0 4
19047: PUSH
19048: DOUBLE
19049: LD_INT 1
19051: DEC
19052: ST_TO_ADDR
19053: LD_EXP 65
19057: PUSH
19058: LD_VAR 0 5
19062: ARRAY
19063: PUSH
19064: FOR_TO
19065: IFFALSE 19106
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19067: LD_EXP 65
19071: PUSH
19072: LD_VAR 0 5
19076: ARRAY
19077: PUSH
19078: LD_VAR 0 4
19082: ARRAY
19083: PUSH
19084: LD_INT 1
19086: ARRAY
19087: PUSH
19088: LD_VAR 0 2
19092: EQUAL
19093: IFFALSE 19104
// KillUnit ( vehicle ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 66
19104: GO 19064
19106: POP
19107: POP
// end ;
19108: LD_VAR 0 3
19112: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19113: LD_EXP 69
19117: NOT
19118: IFFALSE 19153
19120: GO 19122
19122: DISABLE
// begin initMiner := true ;
19123: LD_ADDR_EXP 69
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// minersList := [ ] ;
19131: LD_ADDR_EXP 70
19135: PUSH
19136: EMPTY
19137: ST_TO_ADDR
// minerMinesList := [ ] ;
19138: LD_ADDR_EXP 71
19142: PUSH
19143: EMPTY
19144: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19145: LD_ADDR_EXP 72
19149: PUSH
19150: LD_INT 5
19152: ST_TO_ADDR
// end ;
19153: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19154: LD_EXP 69
19158: PUSH
19159: LD_INT 34
19161: PUSH
19162: LD_INT 81
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 69
19173: AND
19174: IFFALSE 19635
19176: GO 19178
19178: DISABLE
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
19184: PPUSH
// begin enable ;
19185: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 34
19193: PUSH
19194: LD_INT 81
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: PUSH
19206: FOR_IN
19207: IFFALSE 19279
// begin if not i in minersList then
19209: LD_VAR 0 1
19213: PUSH
19214: LD_EXP 70
19218: IN
19219: NOT
19220: IFFALSE 19277
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19222: LD_ADDR_EXP 70
19226: PUSH
19227: LD_EXP 70
19231: PPUSH
19232: LD_EXP 70
19236: PUSH
19237: LD_INT 1
19239: PLUS
19240: PPUSH
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 1
19250: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19251: LD_ADDR_EXP 71
19255: PUSH
19256: LD_EXP 71
19260: PPUSH
19261: LD_EXP 71
19265: PUSH
19266: LD_INT 1
19268: PLUS
19269: PPUSH
19270: EMPTY
19271: PPUSH
19272: CALL_OW 1
19276: ST_TO_ADDR
// end end ;
19277: GO 19206
19279: POP
19280: POP
// for i := minerMinesList downto 1 do
19281: LD_ADDR_VAR 0 1
19285: PUSH
19286: DOUBLE
19287: LD_EXP 71
19291: INC
19292: ST_TO_ADDR
19293: LD_INT 1
19295: PUSH
19296: FOR_DOWNTO
19297: IFFALSE 19633
// begin if IsLive ( minersList [ i ] ) then
19299: LD_EXP 70
19303: PUSH
19304: LD_VAR 0 1
19308: ARRAY
19309: PPUSH
19310: CALL_OW 300
19314: IFFALSE 19342
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19316: LD_EXP 70
19320: PUSH
19321: LD_VAR 0 1
19325: ARRAY
19326: PPUSH
19327: LD_EXP 71
19331: PUSH
19332: LD_VAR 0 1
19336: ARRAY
19337: PPUSH
19338: CALL_OW 505
// if not minerMinesList [ i ] then
19342: LD_EXP 71
19346: PUSH
19347: LD_VAR 0 1
19351: ARRAY
19352: NOT
19353: IFFALSE 19357
// continue ;
19355: GO 19296
// for j := minerMinesList [ i ] downto 1 do
19357: LD_ADDR_VAR 0 2
19361: PUSH
19362: DOUBLE
19363: LD_EXP 71
19367: PUSH
19368: LD_VAR 0 1
19372: ARRAY
19373: INC
19374: ST_TO_ADDR
19375: LD_INT 1
19377: PUSH
19378: FOR_DOWNTO
19379: IFFALSE 19629
// begin side := GetSide ( minersList [ i ] ) ;
19381: LD_ADDR_VAR 0 3
19385: PUSH
19386: LD_EXP 70
19390: PUSH
19391: LD_VAR 0 1
19395: ARRAY
19396: PPUSH
19397: CALL_OW 255
19401: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19402: LD_ADDR_VAR 0 4
19406: PUSH
19407: LD_EXP 71
19411: PUSH
19412: LD_VAR 0 1
19416: ARRAY
19417: PUSH
19418: LD_VAR 0 2
19422: ARRAY
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: LD_EXP 71
19432: PUSH
19433: LD_VAR 0 1
19437: ARRAY
19438: PUSH
19439: LD_VAR 0 2
19443: ARRAY
19444: PUSH
19445: LD_INT 2
19447: ARRAY
19448: PPUSH
19449: CALL_OW 428
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 4
19458: NOT
19459: IFFALSE 19463
// continue ;
19461: GO 19378
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19463: LD_VAR 0 4
19467: PUSH
19468: LD_INT 81
19470: PUSH
19471: LD_VAR 0 3
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 69
19484: IN
19485: PUSH
19486: LD_EXP 71
19490: PUSH
19491: LD_VAR 0 1
19495: ARRAY
19496: PUSH
19497: LD_VAR 0 2
19501: ARRAY
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: PPUSH
19507: LD_EXP 71
19511: PUSH
19512: LD_VAR 0 1
19516: ARRAY
19517: PUSH
19518: LD_VAR 0 2
19522: ARRAY
19523: PUSH
19524: LD_INT 2
19526: ARRAY
19527: PPUSH
19528: CALL_OW 458
19532: AND
19533: IFFALSE 19627
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19535: LD_EXP 71
19539: PUSH
19540: LD_VAR 0 1
19544: ARRAY
19545: PUSH
19546: LD_VAR 0 2
19550: ARRAY
19551: PUSH
19552: LD_INT 1
19554: ARRAY
19555: PPUSH
19556: LD_EXP 71
19560: PUSH
19561: LD_VAR 0 1
19565: ARRAY
19566: PUSH
19567: LD_VAR 0 2
19571: ARRAY
19572: PUSH
19573: LD_INT 2
19575: ARRAY
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19586: LD_ADDR_EXP 71
19590: PUSH
19591: LD_EXP 71
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: LD_EXP 71
19605: PUSH
19606: LD_VAR 0 1
19610: ARRAY
19611: PPUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: CALL_OW 3
19621: PPUSH
19622: CALL_OW 1
19626: ST_TO_ADDR
// end ; end ;
19627: GO 19378
19629: POP
19630: POP
// end ;
19631: GO 19296
19633: POP
19634: POP
// end ;
19635: PPOPN 4
19637: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19638: LD_INT 0
19640: PPUSH
19641: PPUSH
// result := false ;
19642: LD_ADDR_VAR 0 4
19646: PUSH
19647: LD_INT 0
19649: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 264
19659: PUSH
19660: LD_INT 81
19662: EQUAL
19663: NOT
19664: IFFALSE 19668
// exit ;
19666: GO 19908
// index := GetElementIndex ( minersList , unit ) ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_EXP 70
19677: PPUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL 26108 0 2
19687: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19688: LD_EXP 71
19692: PUSH
19693: LD_VAR 0 5
19697: ARRAY
19698: PUSH
19699: LD_EXP 72
19703: GREATEREQUAL
19704: IFFALSE 19708
// exit ;
19706: GO 19908
// ComMoveXY ( unit , x , y ) ;
19708: LD_VAR 0 1
19712: PPUSH
19713: LD_VAR 0 2
19717: PPUSH
19718: LD_VAR 0 3
19722: PPUSH
19723: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19727: LD_INT 35
19729: PPUSH
19730: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19734: LD_VAR 0 1
19738: PPUSH
19739: LD_VAR 0 2
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: CALL 57849 0 3
19753: NOT
19754: PUSH
19755: LD_VAR 0 1
19759: PPUSH
19760: CALL_OW 314
19764: AND
19765: IFFALSE 19769
// exit ;
19767: GO 19908
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19769: LD_VAR 0 2
19773: PPUSH
19774: LD_VAR 0 3
19778: PPUSH
19779: CALL_OW 428
19783: PUSH
19784: LD_VAR 0 1
19788: EQUAL
19789: PUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 314
19799: NOT
19800: AND
19801: IFFALSE 19727
// PlaySoundXY ( x , y , PlantMine ) ;
19803: LD_VAR 0 2
19807: PPUSH
19808: LD_VAR 0 3
19812: PPUSH
19813: LD_STRING PlantMine
19815: PPUSH
19816: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19820: LD_VAR 0 2
19824: PPUSH
19825: LD_VAR 0 3
19829: PPUSH
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 255
19839: PPUSH
19840: LD_INT 0
19842: PPUSH
19843: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19847: LD_ADDR_EXP 71
19851: PUSH
19852: LD_EXP 71
19856: PPUSH
19857: LD_VAR 0 5
19861: PUSH
19862: LD_EXP 71
19866: PUSH
19867: LD_VAR 0 5
19871: ARRAY
19872: PUSH
19873: LD_INT 1
19875: PLUS
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PPUSH
19881: LD_VAR 0 2
19885: PUSH
19886: LD_VAR 0 3
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PPUSH
19895: CALL 26323 0 3
19899: ST_TO_ADDR
// result := true ;
19900: LD_ADDR_VAR 0 4
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// end ;
19908: LD_VAR 0 4
19912: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
// if not unit in minersList then
19918: LD_VAR 0 1
19922: PUSH
19923: LD_EXP 70
19927: IN
19928: NOT
19929: IFFALSE 19933
// exit ;
19931: GO 20325
// index := GetElementIndex ( minersList , unit ) ;
19933: LD_ADDR_VAR 0 6
19937: PUSH
19938: LD_EXP 70
19942: PPUSH
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL 26108 0 2
19952: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19953: LD_ADDR_VAR 0 5
19957: PUSH
19958: DOUBLE
19959: LD_EXP 71
19963: PUSH
19964: LD_VAR 0 6
19968: ARRAY
19969: INC
19970: ST_TO_ADDR
19971: LD_INT 1
19973: PUSH
19974: FOR_DOWNTO
19975: IFFALSE 20136
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19977: LD_EXP 71
19981: PUSH
19982: LD_VAR 0 6
19986: ARRAY
19987: PUSH
19988: LD_VAR 0 5
19992: ARRAY
19993: PUSH
19994: LD_INT 1
19996: ARRAY
19997: PUSH
19998: LD_VAR 0 2
20002: EQUAL
20003: PUSH
20004: LD_EXP 71
20008: PUSH
20009: LD_VAR 0 6
20013: ARRAY
20014: PUSH
20015: LD_VAR 0 5
20019: ARRAY
20020: PUSH
20021: LD_INT 2
20023: ARRAY
20024: PUSH
20025: LD_VAR 0 3
20029: EQUAL
20030: AND
20031: IFFALSE 20134
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20033: LD_EXP 71
20037: PUSH
20038: LD_VAR 0 6
20042: ARRAY
20043: PUSH
20044: LD_VAR 0 5
20048: ARRAY
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: PPUSH
20054: LD_EXP 71
20058: PUSH
20059: LD_VAR 0 6
20063: ARRAY
20064: PUSH
20065: LD_VAR 0 5
20069: ARRAY
20070: PUSH
20071: LD_INT 2
20073: ARRAY
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: CALL_OW 255
20084: PPUSH
20085: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20089: LD_ADDR_EXP 71
20093: PUSH
20094: LD_EXP 71
20098: PPUSH
20099: LD_VAR 0 6
20103: PPUSH
20104: LD_EXP 71
20108: PUSH
20109: LD_VAR 0 6
20113: ARRAY
20114: PPUSH
20115: LD_VAR 0 5
20119: PPUSH
20120: CALL_OW 3
20124: PPUSH
20125: CALL_OW 1
20129: ST_TO_ADDR
// exit ;
20130: POP
20131: POP
20132: GO 20325
// end ; end ;
20134: GO 19974
20136: POP
20137: POP
// for i := minerMinesList [ index ] downto 1 do
20138: LD_ADDR_VAR 0 5
20142: PUSH
20143: DOUBLE
20144: LD_EXP 71
20148: PUSH
20149: LD_VAR 0 6
20153: ARRAY
20154: INC
20155: ST_TO_ADDR
20156: LD_INT 1
20158: PUSH
20159: FOR_DOWNTO
20160: IFFALSE 20323
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20162: LD_EXP 71
20166: PUSH
20167: LD_VAR 0 6
20171: ARRAY
20172: PUSH
20173: LD_VAR 0 5
20177: ARRAY
20178: PUSH
20179: LD_INT 1
20181: ARRAY
20182: PPUSH
20183: LD_EXP 71
20187: PUSH
20188: LD_VAR 0 6
20192: ARRAY
20193: PUSH
20194: LD_VAR 0 5
20198: ARRAY
20199: PUSH
20200: LD_INT 2
20202: ARRAY
20203: PPUSH
20204: LD_VAR 0 2
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: CALL_OW 298
20218: PUSH
20219: LD_INT 6
20221: LESS
20222: IFFALSE 20321
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20224: LD_EXP 71
20228: PUSH
20229: LD_VAR 0 6
20233: ARRAY
20234: PUSH
20235: LD_VAR 0 5
20239: ARRAY
20240: PUSH
20241: LD_INT 1
20243: ARRAY
20244: PPUSH
20245: LD_EXP 71
20249: PUSH
20250: LD_VAR 0 6
20254: ARRAY
20255: PUSH
20256: LD_VAR 0 5
20260: ARRAY
20261: PUSH
20262: LD_INT 2
20264: ARRAY
20265: PPUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: CALL_OW 255
20275: PPUSH
20276: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20280: LD_ADDR_EXP 71
20284: PUSH
20285: LD_EXP 71
20289: PPUSH
20290: LD_VAR 0 6
20294: PPUSH
20295: LD_EXP 71
20299: PUSH
20300: LD_VAR 0 6
20304: ARRAY
20305: PPUSH
20306: LD_VAR 0 5
20310: PPUSH
20311: CALL_OW 3
20315: PPUSH
20316: CALL_OW 1
20320: ST_TO_ADDR
// end ; end ;
20321: GO 20159
20323: POP
20324: POP
// end ;
20325: LD_VAR 0 4
20329: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20330: LD_INT 0
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
20338: PPUSH
20339: PPUSH
20340: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20341: LD_VAR 0 1
20345: PPUSH
20346: CALL_OW 264
20350: PUSH
20351: LD_INT 81
20353: EQUAL
20354: NOT
20355: PUSH
20356: LD_VAR 0 1
20360: PUSH
20361: LD_EXP 70
20365: IN
20366: NOT
20367: OR
20368: IFFALSE 20372
// exit ;
20370: GO 20694
// index := GetElementIndex ( minersList , unit ) ;
20372: LD_ADDR_VAR 0 6
20376: PUSH
20377: LD_EXP 70
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL 26108 0 2
20391: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20392: LD_ADDR_VAR 0 8
20396: PUSH
20397: LD_EXP 72
20401: PUSH
20402: LD_EXP 71
20406: PUSH
20407: LD_VAR 0 6
20411: ARRAY
20412: MINUS
20413: ST_TO_ADDR
// if not minesFreeAmount then
20414: LD_VAR 0 8
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20694
// tmp := [ ] ;
20423: LD_ADDR_VAR 0 7
20427: PUSH
20428: EMPTY
20429: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20430: LD_ADDR_VAR 0 5
20434: PUSH
20435: DOUBLE
20436: LD_INT 1
20438: DEC
20439: ST_TO_ADDR
20440: LD_VAR 0 8
20444: PUSH
20445: FOR_TO
20446: IFFALSE 20641
// begin _d := rand ( 0 , 5 ) ;
20448: LD_ADDR_VAR 0 11
20452: PUSH
20453: LD_INT 0
20455: PPUSH
20456: LD_INT 5
20458: PPUSH
20459: CALL_OW 12
20463: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20464: LD_ADDR_VAR 0 12
20468: PUSH
20469: LD_INT 2
20471: PPUSH
20472: LD_INT 6
20474: PPUSH
20475: CALL_OW 12
20479: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20480: LD_ADDR_VAR 0 9
20484: PUSH
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 11
20494: PPUSH
20495: LD_VAR 0 12
20499: PPUSH
20500: CALL_OW 272
20504: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20505: LD_ADDR_VAR 0 10
20509: PUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: LD_VAR 0 11
20519: PPUSH
20520: LD_VAR 0 12
20524: PPUSH
20525: CALL_OW 273
20529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20530: LD_VAR 0 9
20534: PPUSH
20535: LD_VAR 0 10
20539: PPUSH
20540: CALL_OW 488
20544: PUSH
20545: LD_VAR 0 9
20549: PUSH
20550: LD_VAR 0 10
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_VAR 0 7
20563: IN
20564: NOT
20565: AND
20566: PUSH
20567: LD_VAR 0 9
20571: PPUSH
20572: LD_VAR 0 10
20576: PPUSH
20577: CALL_OW 458
20581: NOT
20582: AND
20583: IFFALSE 20625
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20585: LD_ADDR_VAR 0 7
20589: PUSH
20590: LD_VAR 0 7
20594: PPUSH
20595: LD_VAR 0 7
20599: PUSH
20600: LD_INT 1
20602: PLUS
20603: PPUSH
20604: LD_VAR 0 9
20608: PUSH
20609: LD_VAR 0 10
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 1
20622: ST_TO_ADDR
20623: GO 20639
// i := i - 1 ;
20625: LD_ADDR_VAR 0 5
20629: PUSH
20630: LD_VAR 0 5
20634: PUSH
20635: LD_INT 1
20637: MINUS
20638: ST_TO_ADDR
// end ;
20639: GO 20445
20641: POP
20642: POP
// for i in tmp do
20643: LD_ADDR_VAR 0 5
20647: PUSH
20648: LD_VAR 0 7
20652: PUSH
20653: FOR_IN
20654: IFFALSE 20692
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20656: LD_VAR 0 1
20660: PPUSH
20661: LD_VAR 0 5
20665: PUSH
20666: LD_INT 1
20668: ARRAY
20669: PPUSH
20670: LD_VAR 0 5
20674: PUSH
20675: LD_INT 2
20677: ARRAY
20678: PPUSH
20679: CALL 19638 0 3
20683: NOT
20684: IFFALSE 20690
// exit ;
20686: POP
20687: POP
20688: GO 20694
20690: GO 20653
20692: POP
20693: POP
// end ;
20694: LD_VAR 0 4
20698: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20699: LD_INT 0
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
20706: PPUSH
20707: PPUSH
20708: PPUSH
20709: PPUSH
// if GetClass ( unit ) <> class_sniper then
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 257
20719: PUSH
20720: LD_INT 5
20722: NONEQUAL
20723: IFFALSE 20727
// exit ;
20725: GO 21193
// dist := 8 ;
20727: LD_ADDR_VAR 0 5
20731: PUSH
20732: LD_INT 8
20734: ST_TO_ADDR
// viewRange := 12 ;
20735: LD_ADDR_VAR 0 8
20739: PUSH
20740: LD_INT 12
20742: ST_TO_ADDR
// side := GetSide ( unit ) ;
20743: LD_ADDR_VAR 0 6
20747: PUSH
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 255
20757: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20758: LD_INT 61
20760: PPUSH
20761: LD_VAR 0 6
20765: PPUSH
20766: CALL_OW 321
20770: PUSH
20771: LD_INT 2
20773: EQUAL
20774: IFFALSE 20784
// viewRange := 16 ;
20776: LD_ADDR_VAR 0 8
20780: PUSH
20781: LD_INT 16
20783: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_VAR 0 2
20793: PPUSH
20794: LD_VAR 0 3
20798: PPUSH
20799: CALL_OW 297
20803: PUSH
20804: LD_VAR 0 5
20808: GREATER
20809: IFFALSE 20888
// begin ComMoveXY ( unit , x , y ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_VAR 0 2
20820: PPUSH
20821: LD_VAR 0 3
20825: PPUSH
20826: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20830: LD_INT 35
20832: PPUSH
20833: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20837: LD_VAR 0 1
20841: PPUSH
20842: LD_VAR 0 2
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL 57849 0 3
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 21193
// until GetDistUnitXY ( unit , x , y ) < dist ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_VAR 0 2
20870: PPUSH
20871: LD_VAR 0 3
20875: PPUSH
20876: CALL_OW 297
20880: PUSH
20881: LD_VAR 0 5
20885: LESS
20886: IFFALSE 20830
// end ; ComTurnXY ( unit , x , y ) ;
20888: LD_VAR 0 1
20892: PPUSH
20893: LD_VAR 0 2
20897: PPUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: CALL_OW 118
// repeat if Multiplayer then
20907: LD_OWVAR 4
20911: IFFALSE 20922
// wait ( 35 ) else
20913: LD_INT 35
20915: PPUSH
20916: CALL_OW 67
20920: GO 20929
// wait ( 5 ) ;
20922: LD_INT 5
20924: PPUSH
20925: CALL_OW 67
// _d := GetDir ( unit ) ;
20929: LD_ADDR_VAR 0 11
20933: PUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: CALL_OW 254
20943: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20944: LD_ADDR_VAR 0 7
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 250
20958: PPUSH
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 251
20968: PPUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: LD_VAR 0 3
20978: PPUSH
20979: CALL 60457 0 4
20983: ST_TO_ADDR
// until dir = _d ;
20984: LD_VAR 0 7
20988: PUSH
20989: LD_VAR 0 11
20993: EQUAL
20994: IFFALSE 20907
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20996: LD_ADDR_VAR 0 9
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 250
21010: PPUSH
21011: LD_VAR 0 7
21015: PPUSH
21016: LD_VAR 0 5
21020: PPUSH
21021: CALL_OW 272
21025: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21026: LD_ADDR_VAR 0 10
21030: PUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 251
21040: PPUSH
21041: LD_VAR 0 7
21045: PPUSH
21046: LD_VAR 0 5
21050: PPUSH
21051: CALL_OW 273
21055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21056: LD_VAR 0 9
21060: PPUSH
21061: LD_VAR 0 10
21065: PPUSH
21066: CALL_OW 488
21070: NOT
21071: IFFALSE 21075
// exit ;
21073: GO 21193
// ComAnimCustom ( unit , 1 ) ;
21075: LD_VAR 0 1
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 592
// p := 0 ;
21087: LD_ADDR_VAR 0 12
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21095: LD_VAR 0 9
21099: PPUSH
21100: LD_VAR 0 10
21104: PPUSH
21105: LD_VAR 0 6
21109: PPUSH
21110: LD_VAR 0 8
21114: PPUSH
21115: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21119: LD_INT 35
21121: PPUSH
21122: CALL_OW 67
// p := Inc ( p ) ;
21126: LD_ADDR_VAR 0 12
21130: PUSH
21131: LD_VAR 0 12
21135: PPUSH
21136: CALL 60413 0 1
21140: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21141: LD_VAR 0 12
21145: PUSH
21146: LD_INT 3
21148: EQUAL
21149: PUSH
21150: LD_VAR 0 1
21154: PPUSH
21155: CALL_OW 302
21159: NOT
21160: OR
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 301
21171: OR
21172: IFFALSE 21119
// RemoveSeeing ( _x , _y , side ) ;
21174: LD_VAR 0 9
21178: PPUSH
21179: LD_VAR 0 10
21183: PPUSH
21184: LD_VAR 0 6
21188: PPUSH
21189: CALL_OW 331
// end ; end_of_file
21193: LD_VAR 0 4
21197: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21198: LD_VAR 0 1
21202: PUSH
21203: LD_INT 200
21205: DOUBLE
21206: GREATEREQUAL
21207: IFFALSE 21215
21209: LD_INT 299
21211: DOUBLE
21212: LESSEQUAL
21213: IFTRUE 21217
21215: GO 21249
21217: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_VAR 0 2
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_VAR 0 4
21237: PPUSH
21238: LD_VAR 0 5
21242: PPUSH
21243: CALL 16499 0 5
21247: GO 21326
21249: LD_INT 300
21251: DOUBLE
21252: GREATEREQUAL
21253: IFFALSE 21261
21255: LD_INT 399
21257: DOUBLE
21258: LESSEQUAL
21259: IFTRUE 21263
21261: GO 21325
21263: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21264: LD_VAR 0 1
21268: PPUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: LD_VAR 0 3
21278: PPUSH
21279: LD_VAR 0 4
21283: PPUSH
21284: LD_VAR 0 5
21288: PPUSH
21289: LD_VAR 0 6
21293: PPUSH
21294: LD_VAR 0 7
21298: PPUSH
21299: LD_VAR 0 8
21303: PPUSH
21304: LD_VAR 0 9
21308: PPUSH
21309: LD_VAR 0 10
21313: PPUSH
21314: LD_VAR 0 11
21318: PPUSH
21319: CALL 12658 0 11
21323: GO 21326
21325: POP
// end ;
21326: PPOPN 11
21328: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21329: LD_VAR 0 1
21333: PPUSH
21334: LD_VAR 0 2
21338: PPUSH
21339: LD_VAR 0 3
21343: PPUSH
21344: LD_VAR 0 4
21348: PPUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: CALL 16007 0 5
// end ; end_of_file
21358: PPOPN 5
21360: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21361: LD_INT 0
21363: PPUSH
21364: PPUSH
// if exist_mode then
21365: LD_VAR 0 2
21369: IFFALSE 21394
// unit := CreateCharacter ( prefix & ident ) else
21371: LD_ADDR_VAR 0 5
21375: PUSH
21376: LD_VAR 0 3
21380: PUSH
21381: LD_VAR 0 1
21385: STR
21386: PPUSH
21387: CALL_OW 34
21391: ST_TO_ADDR
21392: GO 21409
// unit := NewCharacter ( ident ) ;
21394: LD_ADDR_VAR 0 5
21398: PUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 25
21408: ST_TO_ADDR
// result := unit ;
21409: LD_ADDR_VAR 0 4
21413: PUSH
21414: LD_VAR 0 5
21418: ST_TO_ADDR
// end ;
21419: LD_VAR 0 4
21423: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21424: LD_INT 0
21426: PPUSH
21427: PPUSH
// if not side or not nation then
21428: LD_VAR 0 1
21432: NOT
21433: PUSH
21434: LD_VAR 0 2
21438: NOT
21439: OR
21440: IFFALSE 21444
// exit ;
21442: GO 22212
// case nation of nation_american :
21444: LD_VAR 0 2
21448: PUSH
21449: LD_INT 1
21451: DOUBLE
21452: EQUAL
21453: IFTRUE 21457
21455: GO 21671
21457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21458: LD_ADDR_VAR 0 4
21462: PUSH
21463: LD_INT 35
21465: PUSH
21466: LD_INT 45
21468: PUSH
21469: LD_INT 46
21471: PUSH
21472: LD_INT 47
21474: PUSH
21475: LD_INT 82
21477: PUSH
21478: LD_INT 83
21480: PUSH
21481: LD_INT 84
21483: PUSH
21484: LD_INT 85
21486: PUSH
21487: LD_INT 86
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 6
21498: PUSH
21499: LD_INT 15
21501: PUSH
21502: LD_INT 16
21504: PUSH
21505: LD_INT 7
21507: PUSH
21508: LD_INT 12
21510: PUSH
21511: LD_INT 13
21513: PUSH
21514: LD_INT 10
21516: PUSH
21517: LD_INT 14
21519: PUSH
21520: LD_INT 20
21522: PUSH
21523: LD_INT 21
21525: PUSH
21526: LD_INT 22
21528: PUSH
21529: LD_INT 25
21531: PUSH
21532: LD_INT 32
21534: PUSH
21535: LD_INT 27
21537: PUSH
21538: LD_INT 36
21540: PUSH
21541: LD_INT 69
21543: PUSH
21544: LD_INT 39
21546: PUSH
21547: LD_INT 34
21549: PUSH
21550: LD_INT 40
21552: PUSH
21553: LD_INT 48
21555: PUSH
21556: LD_INT 49
21558: PUSH
21559: LD_INT 50
21561: PUSH
21562: LD_INT 51
21564: PUSH
21565: LD_INT 52
21567: PUSH
21568: LD_INT 53
21570: PUSH
21571: LD_INT 54
21573: PUSH
21574: LD_INT 55
21576: PUSH
21577: LD_INT 56
21579: PUSH
21580: LD_INT 57
21582: PUSH
21583: LD_INT 58
21585: PUSH
21586: LD_INT 59
21588: PUSH
21589: LD_INT 60
21591: PUSH
21592: LD_INT 61
21594: PUSH
21595: LD_INT 62
21597: PUSH
21598: LD_INT 80
21600: PUSH
21601: LD_INT 82
21603: PUSH
21604: LD_INT 83
21606: PUSH
21607: LD_INT 84
21609: PUSH
21610: LD_INT 85
21612: PUSH
21613: LD_INT 86
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: ST_TO_ADDR
21669: GO 22136
21671: LD_INT 2
21673: DOUBLE
21674: EQUAL
21675: IFTRUE 21679
21677: GO 21905
21679: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21680: LD_ADDR_VAR 0 4
21684: PUSH
21685: LD_INT 35
21687: PUSH
21688: LD_INT 45
21690: PUSH
21691: LD_INT 46
21693: PUSH
21694: LD_INT 47
21696: PUSH
21697: LD_INT 82
21699: PUSH
21700: LD_INT 83
21702: PUSH
21703: LD_INT 84
21705: PUSH
21706: LD_INT 85
21708: PUSH
21709: LD_INT 87
21711: PUSH
21712: LD_INT 70
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 3
21723: PUSH
21724: LD_INT 4
21726: PUSH
21727: LD_INT 5
21729: PUSH
21730: LD_INT 6
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 18
21738: PUSH
21739: LD_INT 7
21741: PUSH
21742: LD_INT 17
21744: PUSH
21745: LD_INT 8
21747: PUSH
21748: LD_INT 20
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_INT 72
21759: PUSH
21760: LD_INT 26
21762: PUSH
21763: LD_INT 69
21765: PUSH
21766: LD_INT 39
21768: PUSH
21769: LD_INT 40
21771: PUSH
21772: LD_INT 41
21774: PUSH
21775: LD_INT 42
21777: PUSH
21778: LD_INT 43
21780: PUSH
21781: LD_INT 48
21783: PUSH
21784: LD_INT 49
21786: PUSH
21787: LD_INT 50
21789: PUSH
21790: LD_INT 51
21792: PUSH
21793: LD_INT 52
21795: PUSH
21796: LD_INT 53
21798: PUSH
21799: LD_INT 54
21801: PUSH
21802: LD_INT 55
21804: PUSH
21805: LD_INT 56
21807: PUSH
21808: LD_INT 60
21810: PUSH
21811: LD_INT 61
21813: PUSH
21814: LD_INT 62
21816: PUSH
21817: LD_INT 66
21819: PUSH
21820: LD_INT 67
21822: PUSH
21823: LD_INT 68
21825: PUSH
21826: LD_INT 81
21828: PUSH
21829: LD_INT 82
21831: PUSH
21832: LD_INT 83
21834: PUSH
21835: LD_INT 84
21837: PUSH
21838: LD_INT 85
21840: PUSH
21841: LD_INT 87
21843: PUSH
21844: LD_INT 88
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: ST_TO_ADDR
21903: GO 22136
21905: LD_INT 3
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 22135
21913: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21914: LD_ADDR_VAR 0 4
21918: PUSH
21919: LD_INT 46
21921: PUSH
21922: LD_INT 47
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: LD_INT 82
21933: PUSH
21934: LD_INT 83
21936: PUSH
21937: LD_INT 84
21939: PUSH
21940: LD_INT 85
21942: PUSH
21943: LD_INT 86
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 9
21951: PUSH
21952: LD_INT 20
21954: PUSH
21955: LD_INT 19
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 24
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_INT 25
21969: PUSH
21970: LD_INT 28
21972: PUSH
21973: LD_INT 29
21975: PUSH
21976: LD_INT 30
21978: PUSH
21979: LD_INT 31
21981: PUSH
21982: LD_INT 37
21984: PUSH
21985: LD_INT 38
21987: PUSH
21988: LD_INT 32
21990: PUSH
21991: LD_INT 27
21993: PUSH
21994: LD_INT 33
21996: PUSH
21997: LD_INT 69
21999: PUSH
22000: LD_INT 39
22002: PUSH
22003: LD_INT 34
22005: PUSH
22006: LD_INT 40
22008: PUSH
22009: LD_INT 71
22011: PUSH
22012: LD_INT 23
22014: PUSH
22015: LD_INT 44
22017: PUSH
22018: LD_INT 48
22020: PUSH
22021: LD_INT 49
22023: PUSH
22024: LD_INT 50
22026: PUSH
22027: LD_INT 51
22029: PUSH
22030: LD_INT 52
22032: PUSH
22033: LD_INT 53
22035: PUSH
22036: LD_INT 54
22038: PUSH
22039: LD_INT 55
22041: PUSH
22042: LD_INT 56
22044: PUSH
22045: LD_INT 57
22047: PUSH
22048: LD_INT 58
22050: PUSH
22051: LD_INT 59
22053: PUSH
22054: LD_INT 63
22056: PUSH
22057: LD_INT 64
22059: PUSH
22060: LD_INT 65
22062: PUSH
22063: LD_INT 82
22065: PUSH
22066: LD_INT 83
22068: PUSH
22069: LD_INT 84
22071: PUSH
22072: LD_INT 85
22074: PUSH
22075: LD_INT 86
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: ST_TO_ADDR
22133: GO 22136
22135: POP
// if state > - 1 and state < 3 then
22136: LD_VAR 0 3
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: GREATER
22145: PUSH
22146: LD_VAR 0 3
22150: PUSH
22151: LD_INT 3
22153: LESS
22154: AND
22155: IFFALSE 22212
// for i in result do
22157: LD_ADDR_VAR 0 5
22161: PUSH
22162: LD_VAR 0 4
22166: PUSH
22167: FOR_IN
22168: IFFALSE 22210
// if GetTech ( i , side ) <> state then
22170: LD_VAR 0 5
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 321
22184: PUSH
22185: LD_VAR 0 3
22189: NONEQUAL
22190: IFFALSE 22208
// result := result diff i ;
22192: LD_ADDR_VAR 0 4
22196: PUSH
22197: LD_VAR 0 4
22201: PUSH
22202: LD_VAR 0 5
22206: DIFF
22207: ST_TO_ADDR
22208: GO 22167
22210: POP
22211: POP
// end ;
22212: LD_VAR 0 4
22216: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22217: LD_INT 0
22219: PPUSH
22220: PPUSH
22221: PPUSH
// result := true ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_INT 1
22229: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22230: LD_ADDR_VAR 0 5
22234: PUSH
22235: LD_VAR 0 2
22239: PPUSH
22240: CALL_OW 480
22244: ST_TO_ADDR
// if not tmp then
22245: LD_VAR 0 5
22249: NOT
22250: IFFALSE 22254
// exit ;
22252: GO 22303
// for i in tmp do
22254: LD_ADDR_VAR 0 4
22258: PUSH
22259: LD_VAR 0 5
22263: PUSH
22264: FOR_IN
22265: IFFALSE 22301
// if GetTech ( i , side ) <> state_researched then
22267: LD_VAR 0 4
22271: PPUSH
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 321
22281: PUSH
22282: LD_INT 2
22284: NONEQUAL
22285: IFFALSE 22299
// begin result := false ;
22287: LD_ADDR_VAR 0 3
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// exit ;
22295: POP
22296: POP
22297: GO 22303
// end ;
22299: GO 22264
22301: POP
22302: POP
// end ;
22303: LD_VAR 0 3
22307: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
22312: PPUSH
22313: PPUSH
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22323: LD_VAR 0 1
22327: NOT
22328: PUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 257
22338: PUSH
22339: LD_INT 9
22341: NONEQUAL
22342: OR
22343: IFFALSE 22347
// exit ;
22345: GO 22920
// side := GetSide ( unit ) ;
22347: LD_ADDR_VAR 0 9
22351: PUSH
22352: LD_VAR 0 1
22356: PPUSH
22357: CALL_OW 255
22361: ST_TO_ADDR
// tech_space := tech_spacanom ;
22362: LD_ADDR_VAR 0 12
22366: PUSH
22367: LD_INT 29
22369: ST_TO_ADDR
// tech_time := tech_taurad ;
22370: LD_ADDR_VAR 0 13
22374: PUSH
22375: LD_INT 28
22377: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22378: LD_ADDR_VAR 0 11
22382: PUSH
22383: LD_VAR 0 1
22387: PPUSH
22388: CALL_OW 310
22392: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22393: LD_VAR 0 11
22397: PPUSH
22398: CALL_OW 247
22402: PUSH
22403: LD_INT 2
22405: EQUAL
22406: IFFALSE 22410
// exit ;
22408: GO 22920
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22410: LD_ADDR_VAR 0 8
22414: PUSH
22415: LD_INT 81
22417: PUSH
22418: LD_VAR 0 9
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 3
22429: PUSH
22430: LD_INT 21
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 69
22452: ST_TO_ADDR
// if not tmp then
22453: LD_VAR 0 8
22457: NOT
22458: IFFALSE 22462
// exit ;
22460: GO 22920
// if in_unit then
22462: LD_VAR 0 11
22466: IFFALSE 22490
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22468: LD_ADDR_VAR 0 10
22472: PUSH
22473: LD_VAR 0 8
22477: PPUSH
22478: LD_VAR 0 11
22482: PPUSH
22483: CALL_OW 74
22487: ST_TO_ADDR
22488: GO 22510
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22490: LD_ADDR_VAR 0 10
22494: PUSH
22495: LD_VAR 0 8
22499: PPUSH
22500: LD_VAR 0 1
22504: PPUSH
22505: CALL_OW 74
22509: ST_TO_ADDR
// if not enemy then
22510: LD_VAR 0 10
22514: NOT
22515: IFFALSE 22519
// exit ;
22517: GO 22920
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22519: LD_VAR 0 11
22523: PUSH
22524: LD_VAR 0 11
22528: PPUSH
22529: LD_VAR 0 10
22533: PPUSH
22534: CALL_OW 296
22538: PUSH
22539: LD_INT 13
22541: GREATER
22542: AND
22543: PUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: LD_VAR 0 10
22553: PPUSH
22554: CALL_OW 296
22558: PUSH
22559: LD_INT 12
22561: GREATER
22562: OR
22563: IFFALSE 22567
// exit ;
22565: GO 22920
// missile := [ 1 ] ;
22567: LD_ADDR_VAR 0 14
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22578: LD_VAR 0 9
22582: PPUSH
22583: LD_VAR 0 12
22587: PPUSH
22588: CALL_OW 325
22592: IFFALSE 22621
// missile := Replace ( missile , missile + 1 , 2 ) ;
22594: LD_ADDR_VAR 0 14
22598: PUSH
22599: LD_VAR 0 14
22603: PPUSH
22604: LD_VAR 0 14
22608: PUSH
22609: LD_INT 1
22611: PLUS
22612: PPUSH
22613: LD_INT 2
22615: PPUSH
22616: CALL_OW 1
22620: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22621: LD_VAR 0 9
22625: PPUSH
22626: LD_VAR 0 13
22630: PPUSH
22631: CALL_OW 325
22635: PUSH
22636: LD_VAR 0 10
22640: PPUSH
22641: CALL_OW 255
22645: PPUSH
22646: LD_VAR 0 13
22650: PPUSH
22651: CALL_OW 325
22655: NOT
22656: AND
22657: IFFALSE 22686
// missile := Replace ( missile , missile + 1 , 3 ) ;
22659: LD_ADDR_VAR 0 14
22663: PUSH
22664: LD_VAR 0 14
22668: PPUSH
22669: LD_VAR 0 14
22673: PUSH
22674: LD_INT 1
22676: PLUS
22677: PPUSH
22678: LD_INT 3
22680: PPUSH
22681: CALL_OW 1
22685: ST_TO_ADDR
// if missile < 2 then
22686: LD_VAR 0 14
22690: PUSH
22691: LD_INT 2
22693: LESS
22694: IFFALSE 22698
// exit ;
22696: GO 22920
// x := GetX ( enemy ) ;
22698: LD_ADDR_VAR 0 4
22702: PUSH
22703: LD_VAR 0 10
22707: PPUSH
22708: CALL_OW 250
22712: ST_TO_ADDR
// y := GetY ( enemy ) ;
22713: LD_ADDR_VAR 0 5
22717: PUSH
22718: LD_VAR 0 10
22722: PPUSH
22723: CALL_OW 251
22727: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22728: LD_ADDR_VAR 0 6
22732: PUSH
22733: LD_VAR 0 4
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL_OW 12
22749: PLUS
22750: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22751: LD_ADDR_VAR 0 7
22755: PUSH
22756: LD_VAR 0 5
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PPUSH
22765: LD_INT 1
22767: PPUSH
22768: CALL_OW 12
22772: PLUS
22773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22774: LD_VAR 0 6
22778: PPUSH
22779: LD_VAR 0 7
22783: PPUSH
22784: CALL_OW 488
22788: NOT
22789: IFFALSE 22811
// begin _x := x ;
22791: LD_ADDR_VAR 0 6
22795: PUSH
22796: LD_VAR 0 4
22800: ST_TO_ADDR
// _y := y ;
22801: LD_ADDR_VAR 0 7
22805: PUSH
22806: LD_VAR 0 5
22810: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 1
22818: PPUSH
22819: LD_VAR 0 14
22823: PPUSH
22824: CALL_OW 12
22828: ST_TO_ADDR
// case i of 1 :
22829: LD_VAR 0 3
22833: PUSH
22834: LD_INT 1
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22859
22842: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_VAR 0 10
22852: PPUSH
22853: CALL_OW 115
22857: GO 22920
22859: LD_INT 2
22861: DOUBLE
22862: EQUAL
22863: IFTRUE 22867
22865: GO 22889
22867: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22868: LD_VAR 0 1
22872: PPUSH
22873: LD_VAR 0 6
22877: PPUSH
22878: LD_VAR 0 7
22882: PPUSH
22883: CALL_OW 153
22887: GO 22920
22889: LD_INT 3
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 22919
22897: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22898: LD_VAR 0 1
22902: PPUSH
22903: LD_VAR 0 6
22907: PPUSH
22908: LD_VAR 0 7
22912: PPUSH
22913: CALL_OW 154
22917: GO 22920
22919: POP
// end ;
22920: LD_VAR 0 2
22924: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22925: LD_INT 0
22927: PPUSH
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
22932: PPUSH
// if not unit or not building then
22933: LD_VAR 0 1
22937: NOT
22938: PUSH
22939: LD_VAR 0 2
22943: NOT
22944: OR
22945: IFFALSE 22949
// exit ;
22947: GO 23107
// x := GetX ( building ) ;
22949: LD_ADDR_VAR 0 5
22953: PUSH
22954: LD_VAR 0 2
22958: PPUSH
22959: CALL_OW 250
22963: ST_TO_ADDR
// y := GetY ( building ) ;
22964: LD_ADDR_VAR 0 6
22968: PUSH
22969: LD_VAR 0 2
22973: PPUSH
22974: CALL_OW 251
22978: ST_TO_ADDR
// for i = 0 to 5 do
22979: LD_ADDR_VAR 0 4
22983: PUSH
22984: DOUBLE
22985: LD_INT 0
22987: DEC
22988: ST_TO_ADDR
22989: LD_INT 5
22991: PUSH
22992: FOR_TO
22993: IFFALSE 23105
// begin _x := ShiftX ( x , i , 3 ) ;
22995: LD_ADDR_VAR 0 7
22999: PUSH
23000: LD_VAR 0 5
23004: PPUSH
23005: LD_VAR 0 4
23009: PPUSH
23010: LD_INT 3
23012: PPUSH
23013: CALL_OW 272
23017: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23018: LD_ADDR_VAR 0 8
23022: PUSH
23023: LD_VAR 0 6
23027: PPUSH
23028: LD_VAR 0 4
23032: PPUSH
23033: LD_INT 3
23035: PPUSH
23036: CALL_OW 273
23040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23041: LD_VAR 0 7
23045: PPUSH
23046: LD_VAR 0 8
23050: PPUSH
23051: CALL_OW 488
23055: NOT
23056: IFFALSE 23060
// continue ;
23058: GO 22992
// if HexInfo ( _x , _y ) = 0 then
23060: LD_VAR 0 7
23064: PPUSH
23065: LD_VAR 0 8
23069: PPUSH
23070: CALL_OW 428
23074: PUSH
23075: LD_INT 0
23077: EQUAL
23078: IFFALSE 23103
// begin ComMoveXY ( unit , _x , _y ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_VAR 0 7
23089: PPUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: CALL_OW 111
// exit ;
23099: POP
23100: POP
23101: GO 23107
// end ; end ;
23103: GO 22992
23105: POP
23106: POP
// end ;
23107: LD_VAR 0 3
23111: RET
// export function ScanBase ( side , base_area ) ; begin
23112: LD_INT 0
23114: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: LD_INT 81
23127: PUSH
23128: LD_VAR 0 1
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 70
23141: ST_TO_ADDR
// end ;
23142: LD_VAR 0 3
23146: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
// result := false ;
23153: LD_ADDR_VAR 0 2
23157: PUSH
23158: LD_INT 0
23160: ST_TO_ADDR
// side := GetSide ( unit ) ;
23161: LD_ADDR_VAR 0 3
23165: PUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 255
23175: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23176: LD_ADDR_VAR 0 4
23180: PUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 248
23190: ST_TO_ADDR
// case nat of 1 :
23191: LD_VAR 0 4
23195: PUSH
23196: LD_INT 1
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23215
23204: POP
// tech := tech_lassight ; 2 :
23205: LD_ADDR_VAR 0 5
23209: PUSH
23210: LD_INT 12
23212: ST_TO_ADDR
23213: GO 23254
23215: LD_INT 2
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23234
23223: POP
// tech := tech_mortar ; 3 :
23224: LD_ADDR_VAR 0 5
23228: PUSH
23229: LD_INT 41
23231: ST_TO_ADDR
23232: GO 23254
23234: LD_INT 3
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23253
23242: POP
// tech := tech_bazooka ; end ;
23243: LD_ADDR_VAR 0 5
23247: PUSH
23248: LD_INT 44
23250: ST_TO_ADDR
23251: GO 23254
23253: POP
// if Researched ( side , tech ) then
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_VAR 0 5
23263: PPUSH
23264: CALL_OW 325
23268: IFFALSE 23295
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23270: LD_ADDR_VAR 0 2
23274: PUSH
23275: LD_INT 5
23277: PUSH
23278: LD_INT 8
23280: PUSH
23281: LD_INT 9
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: PUSH
23289: LD_VAR 0 4
23293: ARRAY
23294: ST_TO_ADDR
// end ;
23295: LD_VAR 0 2
23299: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23300: LD_INT 0
23302: PPUSH
23303: PPUSH
23304: PPUSH
// if not mines then
23305: LD_VAR 0 2
23309: NOT
23310: IFFALSE 23314
// exit ;
23312: GO 23458
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23314: LD_ADDR_VAR 0 5
23318: PUSH
23319: LD_INT 81
23321: PUSH
23322: LD_VAR 0 1
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 3
23333: PUSH
23334: LD_INT 21
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PPUSH
23352: CALL_OW 69
23356: ST_TO_ADDR
// for i in mines do
23357: LD_ADDR_VAR 0 4
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: FOR_IN
23368: IFFALSE 23456
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23370: LD_VAR 0 4
23374: PUSH
23375: LD_INT 1
23377: ARRAY
23378: PPUSH
23379: LD_VAR 0 4
23383: PUSH
23384: LD_INT 2
23386: ARRAY
23387: PPUSH
23388: CALL_OW 458
23392: NOT
23393: IFFALSE 23397
// continue ;
23395: GO 23367
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23397: LD_VAR 0 4
23401: PUSH
23402: LD_INT 1
23404: ARRAY
23405: PPUSH
23406: LD_VAR 0 4
23410: PUSH
23411: LD_INT 2
23413: ARRAY
23414: PPUSH
23415: CALL_OW 428
23419: PUSH
23420: LD_VAR 0 5
23424: IN
23425: IFFALSE 23454
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23427: LD_VAR 0 4
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PPUSH
23436: LD_VAR 0 4
23440: PUSH
23441: LD_INT 2
23443: ARRAY
23444: PPUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 456
// end ;
23454: GO 23367
23456: POP
23457: POP
// end ;
23458: LD_VAR 0 3
23462: RET
// export function Count ( array ) ; begin
23463: LD_INT 0
23465: PPUSH
// result := array + 0 ;
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_VAR 0 1
23475: PUSH
23476: LD_INT 0
23478: PLUS
23479: ST_TO_ADDR
// end ;
23480: LD_VAR 0 2
23484: RET
// export function IsEmpty ( building ) ; begin
23485: LD_INT 0
23487: PPUSH
// if not building then
23488: LD_VAR 0 1
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23540
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_VAR 0 1
23506: PUSH
23507: LD_INT 22
23509: PUSH
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL_OW 255
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 58
23526: PUSH
23527: EMPTY
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 69
23538: IN
23539: ST_TO_ADDR
// end ;
23540: LD_VAR 0 2
23544: RET
// export function IsNotFull ( building ) ; var places ; begin
23545: LD_INT 0
23547: PPUSH
23548: PPUSH
// if not building then
23549: LD_VAR 0 1
23553: NOT
23554: IFFALSE 23558
// exit ;
23556: GO 23586
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23558: LD_ADDR_VAR 0 2
23562: PUSH
23563: LD_VAR 0 1
23567: PPUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 62
23573: PUSH
23574: EMPTY
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 72
23585: ST_TO_ADDR
// end ;
23586: LD_VAR 0 2
23590: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
// tmp := [ ] ;
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: EMPTY
23603: ST_TO_ADDR
// list := [ ] ;
23604: LD_ADDR_VAR 0 5
23608: PUSH
23609: EMPTY
23610: ST_TO_ADDR
// for i = 16 to 25 do
23611: LD_ADDR_VAR 0 4
23615: PUSH
23616: DOUBLE
23617: LD_INT 16
23619: DEC
23620: ST_TO_ADDR
23621: LD_INT 25
23623: PUSH
23624: FOR_TO
23625: IFFALSE 23698
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 255
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 91
23656: PUSH
23657: LD_VAR 0 1
23661: PUSH
23662: LD_INT 6
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_VAR 0 4
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: PPUSH
23690: CALL_OW 69
23694: ADD
23695: ST_TO_ADDR
23696: GO 23624
23698: POP
23699: POP
// for i = 1 to tmp do
23700: LD_ADDR_VAR 0 4
23704: PUSH
23705: DOUBLE
23706: LD_INT 1
23708: DEC
23709: ST_TO_ADDR
23710: LD_VAR 0 3
23714: PUSH
23715: FOR_TO
23716: IFFALSE 23804
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23718: LD_ADDR_VAR 0 5
23722: PUSH
23723: LD_VAR 0 5
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_VAR 0 4
23737: ARRAY
23738: PPUSH
23739: CALL_OW 266
23743: PUSH
23744: LD_VAR 0 3
23748: PUSH
23749: LD_VAR 0 4
23753: ARRAY
23754: PPUSH
23755: CALL_OW 250
23759: PUSH
23760: LD_VAR 0 3
23764: PUSH
23765: LD_VAR 0 4
23769: ARRAY
23770: PPUSH
23771: CALL_OW 251
23775: PUSH
23776: LD_VAR 0 3
23780: PUSH
23781: LD_VAR 0 4
23785: ARRAY
23786: PPUSH
23787: CALL_OW 254
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: ADD
23801: ST_TO_ADDR
23802: GO 23715
23804: POP
23805: POP
// result := list ;
23806: LD_ADDR_VAR 0 2
23810: PUSH
23811: LD_VAR 0 5
23815: ST_TO_ADDR
// end ;
23816: LD_VAR 0 2
23820: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23821: LD_INT 0
23823: PPUSH
23824: PPUSH
23825: PPUSH
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
// if not factory then
23830: LD_VAR 0 1
23834: NOT
23835: IFFALSE 23839
// exit ;
23837: GO 24432
// if control = control_apeman then
23839: LD_VAR 0 4
23843: PUSH
23844: LD_INT 5
23846: EQUAL
23847: IFFALSE 23956
// begin tmp := UnitsInside ( factory ) ;
23849: LD_ADDR_VAR 0 8
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 313
23863: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23864: LD_VAR 0 8
23868: PPUSH
23869: LD_INT 25
23871: PUSH
23872: LD_INT 12
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PPUSH
23879: CALL_OW 72
23883: NOT
23884: IFFALSE 23894
// control := control_manual ;
23886: LD_ADDR_VAR 0 4
23890: PUSH
23891: LD_INT 1
23893: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23894: LD_ADDR_VAR 0 8
23898: PUSH
23899: LD_VAR 0 1
23903: PPUSH
23904: CALL 23591 0 1
23908: ST_TO_ADDR
// if tmp then
23909: LD_VAR 0 8
23913: IFFALSE 23956
// begin for i in tmp do
23915: LD_ADDR_VAR 0 7
23919: PUSH
23920: LD_VAR 0 8
23924: PUSH
23925: FOR_IN
23926: IFFALSE 23954
// if i [ 1 ] = b_ext_radio then
23928: LD_VAR 0 7
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: PUSH
23937: LD_INT 22
23939: EQUAL
23940: IFFALSE 23952
// begin control := control_remote ;
23942: LD_ADDR_VAR 0 4
23946: PUSH
23947: LD_INT 2
23949: ST_TO_ADDR
// break ;
23950: GO 23954
// end ;
23952: GO 23925
23954: POP
23955: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23956: LD_VAR 0 1
23960: PPUSH
23961: LD_VAR 0 2
23965: PPUSH
23966: LD_VAR 0 3
23970: PPUSH
23971: LD_VAR 0 4
23975: PPUSH
23976: LD_VAR 0 5
23980: PPUSH
23981: CALL_OW 448
23985: IFFALSE 24020
// begin result := [ chassis , engine , control , weapon ] ;
23987: LD_ADDR_VAR 0 6
23991: PUSH
23992: LD_VAR 0 2
23996: PUSH
23997: LD_VAR 0 3
24001: PUSH
24002: LD_VAR 0 4
24006: PUSH
24007: LD_VAR 0 5
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// exit ;
24018: GO 24432
// end ; _chassis := AvailableChassisList ( factory ) ;
24020: LD_ADDR_VAR 0 9
24024: PUSH
24025: LD_VAR 0 1
24029: PPUSH
24030: CALL_OW 475
24034: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24035: LD_ADDR_VAR 0 11
24039: PUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 476
24049: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24050: LD_ADDR_VAR 0 12
24054: PUSH
24055: LD_VAR 0 1
24059: PPUSH
24060: CALL_OW 477
24064: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24065: LD_ADDR_VAR 0 10
24069: PUSH
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 478
24079: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24080: LD_VAR 0 9
24084: NOT
24085: PUSH
24086: LD_VAR 0 11
24090: NOT
24091: OR
24092: PUSH
24093: LD_VAR 0 12
24097: NOT
24098: OR
24099: PUSH
24100: LD_VAR 0 10
24104: NOT
24105: OR
24106: IFFALSE 24141
// begin result := [ chassis , engine , control , weapon ] ;
24108: LD_ADDR_VAR 0 6
24112: PUSH
24113: LD_VAR 0 2
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_VAR 0 4
24127: PUSH
24128: LD_VAR 0 5
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
// exit ;
24139: GO 24432
// end ; if not chassis in _chassis then
24141: LD_VAR 0 2
24145: PUSH
24146: LD_VAR 0 9
24150: IN
24151: NOT
24152: IFFALSE 24178
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24154: LD_ADDR_VAR 0 2
24158: PUSH
24159: LD_VAR 0 9
24163: PUSH
24164: LD_INT 1
24166: PPUSH
24167: LD_VAR 0 9
24171: PPUSH
24172: CALL_OW 12
24176: ARRAY
24177: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_VAR 0 3
24187: PPUSH
24188: CALL 24437 0 2
24192: NOT
24193: IFFALSE 24252
// repeat engine := _engine [ 1 ] ;
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_VAR 0 11
24204: PUSH
24205: LD_INT 1
24207: ARRAY
24208: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24209: LD_ADDR_VAR 0 11
24213: PUSH
24214: LD_VAR 0 11
24218: PPUSH
24219: LD_INT 1
24221: PPUSH
24222: CALL_OW 3
24226: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24227: LD_VAR 0 2
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: CALL 24437 0 2
24241: PUSH
24242: LD_VAR 0 11
24246: PUSH
24247: EMPTY
24248: EQUAL
24249: OR
24250: IFFALSE 24195
// if not control in _control then
24252: LD_VAR 0 4
24256: PUSH
24257: LD_VAR 0 12
24261: IN
24262: NOT
24263: IFFALSE 24289
// control := _control [ rand ( 1 , _control ) ] ;
24265: LD_ADDR_VAR 0 4
24269: PUSH
24270: LD_VAR 0 12
24274: PUSH
24275: LD_INT 1
24277: PPUSH
24278: LD_VAR 0 12
24282: PPUSH
24283: CALL_OW 12
24287: ARRAY
24288: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24289: LD_VAR 0 2
24293: PPUSH
24294: LD_VAR 0 5
24298: PPUSH
24299: CALL 24657 0 2
24303: NOT
24304: IFFALSE 24363
// repeat weapon := _weapon [ 1 ] ;
24306: LD_ADDR_VAR 0 5
24310: PUSH
24311: LD_VAR 0 10
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24320: LD_ADDR_VAR 0 10
24324: PUSH
24325: LD_VAR 0 10
24329: PPUSH
24330: LD_INT 1
24332: PPUSH
24333: CALL_OW 3
24337: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 5
24347: PPUSH
24348: CALL 24657 0 2
24352: PUSH
24353: LD_VAR 0 10
24357: PUSH
24358: EMPTY
24359: EQUAL
24360: OR
24361: IFFALSE 24306
// result := [ ] ;
24363: LD_ADDR_VAR 0 6
24367: PUSH
24368: EMPTY
24369: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24370: LD_VAR 0 1
24374: PPUSH
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_VAR 0 3
24384: PPUSH
24385: LD_VAR 0 4
24389: PPUSH
24390: LD_VAR 0 5
24394: PPUSH
24395: CALL_OW 448
24399: IFFALSE 24432
// result := [ chassis , engine , control , weapon ] ;
24401: LD_ADDR_VAR 0 6
24405: PUSH
24406: LD_VAR 0 2
24410: PUSH
24411: LD_VAR 0 3
24415: PUSH
24416: LD_VAR 0 4
24420: PUSH
24421: LD_VAR 0 5
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: ST_TO_ADDR
// end ;
24432: LD_VAR 0 6
24436: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24437: LD_INT 0
24439: PPUSH
// if not chassis or not engine then
24440: LD_VAR 0 1
24444: NOT
24445: PUSH
24446: LD_VAR 0 2
24450: NOT
24451: OR
24452: IFFALSE 24456
// exit ;
24454: GO 24652
// case engine of engine_solar :
24456: LD_VAR 0 2
24460: PUSH
24461: LD_INT 2
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24507
24469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24470: LD_ADDR_VAR 0 3
24474: PUSH
24475: LD_INT 11
24477: PUSH
24478: LD_INT 12
24480: PUSH
24481: LD_INT 13
24483: PUSH
24484: LD_INT 14
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: ST_TO_ADDR
24505: GO 24636
24507: LD_INT 1
24509: DOUBLE
24510: EQUAL
24511: IFTRUE 24515
24513: GO 24577
24515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24516: LD_ADDR_VAR 0 3
24520: PUSH
24521: LD_INT 11
24523: PUSH
24524: LD_INT 12
24526: PUSH
24527: LD_INT 13
24529: PUSH
24530: LD_INT 14
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: LD_INT 5
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 23
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_INT 24
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 24636
24577: LD_INT 3
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24635
24585: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 13
24593: PUSH
24594: LD_INT 14
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: LD_INT 4
24605: PUSH
24606: LD_INT 5
24608: PUSH
24609: LD_INT 21
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_INT 23
24617: PUSH
24618: LD_INT 24
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: ST_TO_ADDR
24633: GO 24636
24635: POP
// result := ( chassis in result ) ;
24636: LD_ADDR_VAR 0 3
24640: PUSH
24641: LD_VAR 0 1
24645: PUSH
24646: LD_VAR 0 3
24650: IN
24651: ST_TO_ADDR
// end ;
24652: LD_VAR 0 3
24656: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24657: LD_INT 0
24659: PPUSH
// if not chassis or not weapon then
24660: LD_VAR 0 1
24664: NOT
24665: PUSH
24666: LD_VAR 0 2
24670: NOT
24671: OR
24672: IFFALSE 24676
// exit ;
24674: GO 25736
// case weapon of us_machine_gun :
24676: LD_VAR 0 2
24680: PUSH
24681: LD_INT 2
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24719
24689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: LD_INT 4
24706: PUSH
24707: LD_INT 5
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: ST_TO_ADDR
24717: GO 25720
24719: LD_INT 3
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24757
24727: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24728: LD_ADDR_VAR 0 3
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 4
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: ST_TO_ADDR
24755: GO 25720
24757: LD_INT 11
24759: DOUBLE
24760: EQUAL
24761: IFTRUE 24765
24763: GO 24795
24765: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24766: LD_ADDR_VAR 0 3
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: LD_INT 3
24779: PUSH
24780: LD_INT 4
24782: PUSH
24783: LD_INT 5
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 25720
24795: LD_INT 4
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24829
24803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: LD_INT 4
24817: PUSH
24818: LD_INT 5
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: ST_TO_ADDR
24827: GO 25720
24829: LD_INT 5
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24863
24837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: LD_INT 4
24851: PUSH
24852: LD_INT 5
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
24861: GO 25720
24863: LD_INT 9
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24897
24871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: LD_INT 4
24885: PUSH
24886: LD_INT 5
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: ST_TO_ADDR
24895: GO 25720
24897: LD_INT 7
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 24931
24905: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 4
24919: PUSH
24920: LD_INT 5
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
24929: GO 25720
24931: LD_INT 12
24933: DOUBLE
24934: EQUAL
24935: IFTRUE 24939
24937: GO 24965
24939: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: LD_INT 4
24953: PUSH
24954: LD_INT 5
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: ST_TO_ADDR
24963: GO 25720
24965: LD_INT 13
24967: DOUBLE
24968: EQUAL
24969: IFTRUE 24973
24971: GO 24999
24973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24974: LD_ADDR_VAR 0 3
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: LD_INT 3
24984: PUSH
24985: LD_INT 4
24987: PUSH
24988: LD_INT 5
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: ST_TO_ADDR
24997: GO 25720
24999: LD_INT 14
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25025
25007: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 4
25015: PUSH
25016: LD_INT 5
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: ST_TO_ADDR
25023: GO 25720
25025: LD_INT 6
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25051
25033: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: LD_INT 4
25041: PUSH
25042: LD_INT 5
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: ST_TO_ADDR
25049: GO 25720
25051: LD_INT 10
25053: DOUBLE
25054: EQUAL
25055: IFTRUE 25059
25057: GO 25077
25059: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 4
25067: PUSH
25068: LD_INT 5
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: ST_TO_ADDR
25075: GO 25720
25077: LD_INT 22
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25111
25085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25086: LD_ADDR_VAR 0 3
25090: PUSH
25091: LD_INT 11
25093: PUSH
25094: LD_INT 12
25096: PUSH
25097: LD_INT 13
25099: PUSH
25100: LD_INT 14
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
25109: GO 25720
25111: LD_INT 23
25113: DOUBLE
25114: EQUAL
25115: IFTRUE 25119
25117: GO 25145
25119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25120: LD_ADDR_VAR 0 3
25124: PUSH
25125: LD_INT 11
25127: PUSH
25128: LD_INT 12
25130: PUSH
25131: LD_INT 13
25133: PUSH
25134: LD_INT 14
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
25143: GO 25720
25145: LD_INT 24
25147: DOUBLE
25148: EQUAL
25149: IFTRUE 25153
25151: GO 25179
25153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: LD_INT 11
25161: PUSH
25162: LD_INT 12
25164: PUSH
25165: LD_INT 13
25167: PUSH
25168: LD_INT 14
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: ST_TO_ADDR
25177: GO 25720
25179: LD_INT 30
25181: DOUBLE
25182: EQUAL
25183: IFTRUE 25187
25185: GO 25213
25187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25188: LD_ADDR_VAR 0 3
25192: PUSH
25193: LD_INT 11
25195: PUSH
25196: LD_INT 12
25198: PUSH
25199: LD_INT 13
25201: PUSH
25202: LD_INT 14
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: ST_TO_ADDR
25211: GO 25720
25213: LD_INT 25
25215: DOUBLE
25216: EQUAL
25217: IFTRUE 25221
25219: GO 25239
25221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25222: LD_ADDR_VAR 0 3
25226: PUSH
25227: LD_INT 13
25229: PUSH
25230: LD_INT 14
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
25237: GO 25720
25239: LD_INT 27
25241: DOUBLE
25242: EQUAL
25243: IFTRUE 25247
25245: GO 25265
25247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 13
25255: PUSH
25256: LD_INT 14
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 25720
25265: LD_INT 92
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25299
25273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_INT 11
25281: PUSH
25282: LD_INT 12
25284: PUSH
25285: LD_INT 13
25287: PUSH
25288: LD_INT 14
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
25297: GO 25720
25299: LD_INT 28
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25325
25307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_INT 13
25315: PUSH
25316: LD_INT 14
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 25720
25325: LD_INT 29
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25351
25333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: LD_INT 14
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: ST_TO_ADDR
25349: GO 25720
25351: LD_INT 31
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25377
25359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25360: LD_ADDR_VAR 0 3
25364: PUSH
25365: LD_INT 13
25367: PUSH
25368: LD_INT 14
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: ST_TO_ADDR
25375: GO 25720
25377: LD_INT 26
25379: DOUBLE
25380: EQUAL
25381: IFTRUE 25385
25383: GO 25403
25385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_INT 13
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: ST_TO_ADDR
25401: GO 25720
25403: LD_INT 42
25405: DOUBLE
25406: EQUAL
25407: IFTRUE 25411
25409: GO 25437
25411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25412: LD_ADDR_VAR 0 3
25416: PUSH
25417: LD_INT 21
25419: PUSH
25420: LD_INT 22
25422: PUSH
25423: LD_INT 23
25425: PUSH
25426: LD_INT 24
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
25435: GO 25720
25437: LD_INT 43
25439: DOUBLE
25440: EQUAL
25441: IFTRUE 25445
25443: GO 25471
25445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_INT 21
25453: PUSH
25454: LD_INT 22
25456: PUSH
25457: LD_INT 23
25459: PUSH
25460: LD_INT 24
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: ST_TO_ADDR
25469: GO 25720
25471: LD_INT 44
25473: DOUBLE
25474: EQUAL
25475: IFTRUE 25479
25477: GO 25505
25479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25480: LD_ADDR_VAR 0 3
25484: PUSH
25485: LD_INT 21
25487: PUSH
25488: LD_INT 22
25490: PUSH
25491: LD_INT 23
25493: PUSH
25494: LD_INT 24
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
25503: GO 25720
25505: LD_INT 45
25507: DOUBLE
25508: EQUAL
25509: IFTRUE 25513
25511: GO 25539
25513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25514: LD_ADDR_VAR 0 3
25518: PUSH
25519: LD_INT 21
25521: PUSH
25522: LD_INT 22
25524: PUSH
25525: LD_INT 23
25527: PUSH
25528: LD_INT 24
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: ST_TO_ADDR
25537: GO 25720
25539: LD_INT 49
25541: DOUBLE
25542: EQUAL
25543: IFTRUE 25547
25545: GO 25573
25547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_INT 21
25555: PUSH
25556: LD_INT 22
25558: PUSH
25559: LD_INT 23
25561: PUSH
25562: LD_INT 24
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: ST_TO_ADDR
25571: GO 25720
25573: LD_INT 51
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25607
25581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: LD_INT 21
25589: PUSH
25590: LD_INT 22
25592: PUSH
25593: LD_INT 23
25595: PUSH
25596: LD_INT 24
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 25720
25607: LD_INT 52
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25641
25615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_INT 21
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_INT 23
25629: PUSH
25630: LD_INT 24
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: ST_TO_ADDR
25639: GO 25720
25641: LD_INT 53
25643: DOUBLE
25644: EQUAL
25645: IFTRUE 25649
25647: GO 25667
25649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25650: LD_ADDR_VAR 0 3
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 24
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: ST_TO_ADDR
25665: GO 25720
25667: LD_INT 46
25669: DOUBLE
25670: EQUAL
25671: IFTRUE 25675
25673: GO 25693
25675: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_INT 23
25683: PUSH
25684: LD_INT 24
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: ST_TO_ADDR
25691: GO 25720
25693: LD_INT 47
25695: DOUBLE
25696: EQUAL
25697: IFTRUE 25701
25699: GO 25719
25701: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25702: LD_ADDR_VAR 0 3
25706: PUSH
25707: LD_INT 23
25709: PUSH
25710: LD_INT 24
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: ST_TO_ADDR
25717: GO 25720
25719: POP
// result := ( chassis in result ) ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_VAR 0 3
25734: IN
25735: ST_TO_ADDR
// end ;
25736: LD_VAR 0 3
25740: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25741: LD_INT 0
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
// result := array ;
25750: LD_ADDR_VAR 0 5
25754: PUSH
25755: LD_VAR 0 1
25759: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25760: LD_VAR 0 1
25764: NOT
25765: PUSH
25766: LD_VAR 0 2
25770: NOT
25771: OR
25772: PUSH
25773: LD_VAR 0 3
25777: NOT
25778: OR
25779: PUSH
25780: LD_VAR 0 2
25784: PUSH
25785: LD_VAR 0 1
25789: GREATER
25790: OR
25791: PUSH
25792: LD_VAR 0 3
25796: PUSH
25797: LD_VAR 0 1
25801: GREATER
25802: OR
25803: IFFALSE 25807
// exit ;
25805: GO 26103
// if direction then
25807: LD_VAR 0 4
25811: IFFALSE 25875
// begin d := 1 ;
25813: LD_ADDR_VAR 0 9
25817: PUSH
25818: LD_INT 1
25820: ST_TO_ADDR
// if i_from > i_to then
25821: LD_VAR 0 2
25825: PUSH
25826: LD_VAR 0 3
25830: GREATER
25831: IFFALSE 25857
// length := ( array - i_from ) + i_to else
25833: LD_ADDR_VAR 0 11
25837: PUSH
25838: LD_VAR 0 1
25842: PUSH
25843: LD_VAR 0 2
25847: MINUS
25848: PUSH
25849: LD_VAR 0 3
25853: PLUS
25854: ST_TO_ADDR
25855: GO 25873
// length := i_to - i_from ;
25857: LD_ADDR_VAR 0 11
25861: PUSH
25862: LD_VAR 0 3
25866: PUSH
25867: LD_VAR 0 2
25871: MINUS
25872: ST_TO_ADDR
// end else
25873: GO 25936
// begin d := - 1 ;
25875: LD_ADDR_VAR 0 9
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: ST_TO_ADDR
// if i_from > i_to then
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 3
25893: GREATER
25894: IFFALSE 25914
// length := i_from - i_to else
25896: LD_ADDR_VAR 0 11
25900: PUSH
25901: LD_VAR 0 2
25905: PUSH
25906: LD_VAR 0 3
25910: MINUS
25911: ST_TO_ADDR
25912: GO 25936
// length := ( array - i_to ) + i_from ;
25914: LD_ADDR_VAR 0 11
25918: PUSH
25919: LD_VAR 0 1
25923: PUSH
25924: LD_VAR 0 3
25928: MINUS
25929: PUSH
25930: LD_VAR 0 2
25934: PLUS
25935: ST_TO_ADDR
// end ; if not length then
25936: LD_VAR 0 11
25940: NOT
25941: IFFALSE 25945
// exit ;
25943: GO 26103
// tmp := array ;
25945: LD_ADDR_VAR 0 10
25949: PUSH
25950: LD_VAR 0 1
25954: ST_TO_ADDR
// for i = 1 to length do
25955: LD_ADDR_VAR 0 6
25959: PUSH
25960: DOUBLE
25961: LD_INT 1
25963: DEC
25964: ST_TO_ADDR
25965: LD_VAR 0 11
25969: PUSH
25970: FOR_TO
25971: IFFALSE 26091
// begin for j = 1 to array do
25973: LD_ADDR_VAR 0 7
25977: PUSH
25978: DOUBLE
25979: LD_INT 1
25981: DEC
25982: ST_TO_ADDR
25983: LD_VAR 0 1
25987: PUSH
25988: FOR_TO
25989: IFFALSE 26077
// begin k := j + d ;
25991: LD_ADDR_VAR 0 8
25995: PUSH
25996: LD_VAR 0 7
26000: PUSH
26001: LD_VAR 0 9
26005: PLUS
26006: ST_TO_ADDR
// if k > array then
26007: LD_VAR 0 8
26011: PUSH
26012: LD_VAR 0 1
26016: GREATER
26017: IFFALSE 26027
// k := 1 ;
26019: LD_ADDR_VAR 0 8
26023: PUSH
26024: LD_INT 1
26026: ST_TO_ADDR
// if not k then
26027: LD_VAR 0 8
26031: NOT
26032: IFFALSE 26044
// k := array ;
26034: LD_ADDR_VAR 0 8
26038: PUSH
26039: LD_VAR 0 1
26043: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26044: LD_ADDR_VAR 0 10
26048: PUSH
26049: LD_VAR 0 10
26053: PPUSH
26054: LD_VAR 0 8
26058: PPUSH
26059: LD_VAR 0 1
26063: PUSH
26064: LD_VAR 0 7
26068: ARRAY
26069: PPUSH
26070: CALL_OW 1
26074: ST_TO_ADDR
// end ;
26075: GO 25988
26077: POP
26078: POP
// array := tmp ;
26079: LD_ADDR_VAR 0 1
26083: PUSH
26084: LD_VAR 0 10
26088: ST_TO_ADDR
// end ;
26089: GO 25970
26091: POP
26092: POP
// result := array ;
26093: LD_ADDR_VAR 0 5
26097: PUSH
26098: LD_VAR 0 1
26102: ST_TO_ADDR
// end ;
26103: LD_VAR 0 5
26107: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
// result := 0 ;
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_INT 0
26119: ST_TO_ADDR
// if not array or not value in array then
26120: LD_VAR 0 1
26124: NOT
26125: PUSH
26126: LD_VAR 0 2
26130: PUSH
26131: LD_VAR 0 1
26135: IN
26136: NOT
26137: OR
26138: IFFALSE 26142
// exit ;
26140: GO 26196
// for i = 1 to array do
26142: LD_ADDR_VAR 0 4
26146: PUSH
26147: DOUBLE
26148: LD_INT 1
26150: DEC
26151: ST_TO_ADDR
26152: LD_VAR 0 1
26156: PUSH
26157: FOR_TO
26158: IFFALSE 26194
// if value = array [ i ] then
26160: LD_VAR 0 2
26164: PUSH
26165: LD_VAR 0 1
26169: PUSH
26170: LD_VAR 0 4
26174: ARRAY
26175: EQUAL
26176: IFFALSE 26192
// begin result := i ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_VAR 0 4
26187: ST_TO_ADDR
// exit ;
26188: POP
26189: POP
26190: GO 26196
// end ;
26192: GO 26157
26194: POP
26195: POP
// end ;
26196: LD_VAR 0 3
26200: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26201: LD_INT 0
26203: PPUSH
// vc_chassis := chassis ;
26204: LD_ADDR_OWVAR 37
26208: PUSH
26209: LD_VAR 0 1
26213: ST_TO_ADDR
// vc_engine := engine ;
26214: LD_ADDR_OWVAR 39
26218: PUSH
26219: LD_VAR 0 2
26223: ST_TO_ADDR
// vc_control := control ;
26224: LD_ADDR_OWVAR 38
26228: PUSH
26229: LD_VAR 0 3
26233: ST_TO_ADDR
// vc_weapon := weapon ;
26234: LD_ADDR_OWVAR 40
26238: PUSH
26239: LD_VAR 0 4
26243: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26244: LD_ADDR_OWVAR 41
26248: PUSH
26249: LD_VAR 0 5
26253: ST_TO_ADDR
// end ;
26254: LD_VAR 0 6
26258: RET
// export function WantPlant ( unit ) ; var task ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
// result := false ;
26263: LD_ADDR_VAR 0 2
26267: PUSH
26268: LD_INT 0
26270: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26271: LD_ADDR_VAR 0 3
26275: PUSH
26276: LD_VAR 0 1
26280: PPUSH
26281: CALL_OW 437
26285: ST_TO_ADDR
// if task then
26286: LD_VAR 0 3
26290: IFFALSE 26318
// if task [ 1 ] [ 1 ] = p then
26292: LD_VAR 0 3
26296: PUSH
26297: LD_INT 1
26299: ARRAY
26300: PUSH
26301: LD_INT 1
26303: ARRAY
26304: PUSH
26305: LD_STRING p
26307: EQUAL
26308: IFFALSE 26318
// result := true ;
26310: LD_ADDR_VAR 0 2
26314: PUSH
26315: LD_INT 1
26317: ST_TO_ADDR
// end ;
26318: LD_VAR 0 2
26322: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26323: LD_INT 0
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
// if pos < 1 then
26329: LD_VAR 0 2
26333: PUSH
26334: LD_INT 1
26336: LESS
26337: IFFALSE 26341
// exit ;
26339: GO 26644
// if pos = 1 then
26341: LD_VAR 0 2
26345: PUSH
26346: LD_INT 1
26348: EQUAL
26349: IFFALSE 26382
// result := Replace ( arr , pos [ 1 ] , value ) else
26351: LD_ADDR_VAR 0 4
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: LD_VAR 0 2
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: LD_VAR 0 3
26374: PPUSH
26375: CALL_OW 1
26379: ST_TO_ADDR
26380: GO 26644
// begin tmp := arr ;
26382: LD_ADDR_VAR 0 6
26386: PUSH
26387: LD_VAR 0 1
26391: ST_TO_ADDR
// s_arr := [ tmp ] ;
26392: LD_ADDR_VAR 0 7
26396: PUSH
26397: LD_VAR 0 6
26401: PUSH
26402: EMPTY
26403: LIST
26404: ST_TO_ADDR
// for i = 1 to pos - 1 do
26405: LD_ADDR_VAR 0 5
26409: PUSH
26410: DOUBLE
26411: LD_INT 1
26413: DEC
26414: ST_TO_ADDR
26415: LD_VAR 0 2
26419: PUSH
26420: LD_INT 1
26422: MINUS
26423: PUSH
26424: FOR_TO
26425: IFFALSE 26470
// begin tmp := tmp [ pos [ i ] ] ;
26427: LD_ADDR_VAR 0 6
26431: PUSH
26432: LD_VAR 0 6
26436: PUSH
26437: LD_VAR 0 2
26441: PUSH
26442: LD_VAR 0 5
26446: ARRAY
26447: ARRAY
26448: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26449: LD_ADDR_VAR 0 7
26453: PUSH
26454: LD_VAR 0 7
26458: PUSH
26459: LD_VAR 0 6
26463: PUSH
26464: EMPTY
26465: LIST
26466: ADD
26467: ST_TO_ADDR
// end ;
26468: GO 26424
26470: POP
26471: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26472: LD_ADDR_VAR 0 6
26476: PUSH
26477: LD_VAR 0 6
26481: PPUSH
26482: LD_VAR 0 2
26486: PUSH
26487: LD_VAR 0 2
26491: ARRAY
26492: PPUSH
26493: LD_VAR 0 3
26497: PPUSH
26498: CALL_OW 1
26502: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26503: LD_ADDR_VAR 0 7
26507: PUSH
26508: LD_VAR 0 7
26512: PPUSH
26513: LD_VAR 0 7
26517: PPUSH
26518: LD_VAR 0 6
26522: PPUSH
26523: CALL_OW 1
26527: ST_TO_ADDR
// for i = s_arr downto 2 do
26528: LD_ADDR_VAR 0 5
26532: PUSH
26533: DOUBLE
26534: LD_VAR 0 7
26538: INC
26539: ST_TO_ADDR
26540: LD_INT 2
26542: PUSH
26543: FOR_DOWNTO
26544: IFFALSE 26628
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26546: LD_ADDR_VAR 0 6
26550: PUSH
26551: LD_VAR 0 7
26555: PUSH
26556: LD_VAR 0 5
26560: PUSH
26561: LD_INT 1
26563: MINUS
26564: ARRAY
26565: PPUSH
26566: LD_VAR 0 2
26570: PUSH
26571: LD_VAR 0 5
26575: PUSH
26576: LD_INT 1
26578: MINUS
26579: ARRAY
26580: PPUSH
26581: LD_VAR 0 7
26585: PUSH
26586: LD_VAR 0 5
26590: ARRAY
26591: PPUSH
26592: CALL_OW 1
26596: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26597: LD_ADDR_VAR 0 7
26601: PUSH
26602: LD_VAR 0 7
26606: PPUSH
26607: LD_VAR 0 5
26611: PUSH
26612: LD_INT 1
26614: MINUS
26615: PPUSH
26616: LD_VAR 0 6
26620: PPUSH
26621: CALL_OW 1
26625: ST_TO_ADDR
// end ;
26626: GO 26543
26628: POP
26629: POP
// result := s_arr [ 1 ] ;
26630: LD_ADDR_VAR 0 4
26634: PUSH
26635: LD_VAR 0 7
26639: PUSH
26640: LD_INT 1
26642: ARRAY
26643: ST_TO_ADDR
// end ; end ;
26644: LD_VAR 0 4
26648: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26649: LD_INT 0
26651: PPUSH
26652: PPUSH
// if not list then
26653: LD_VAR 0 1
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 26753
// i := list [ pos1 ] ;
26662: LD_ADDR_VAR 0 5
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: LD_VAR 0 2
26676: ARRAY
26677: ST_TO_ADDR
// if not i then
26678: LD_VAR 0 5
26682: NOT
26683: IFFALSE 26687
// exit ;
26685: GO 26753
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: LD_VAR 0 2
26701: PPUSH
26702: LD_VAR 0 1
26706: PUSH
26707: LD_VAR 0 3
26711: ARRAY
26712: PPUSH
26713: CALL_OW 1
26717: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26718: LD_ADDR_VAR 0 1
26722: PUSH
26723: LD_VAR 0 1
26727: PPUSH
26728: LD_VAR 0 3
26732: PPUSH
26733: LD_VAR 0 5
26737: PPUSH
26738: CALL_OW 1
26742: ST_TO_ADDR
// result := list ;
26743: LD_ADDR_VAR 0 4
26747: PUSH
26748: LD_VAR 0 1
26752: ST_TO_ADDR
// end ;
26753: LD_VAR 0 4
26757: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26758: LD_INT 0
26760: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26761: LD_ADDR_VAR 0 5
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 250
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 251
26785: PPUSH
26786: LD_VAR 0 2
26790: PPUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: LD_VAR 0 4
26800: PPUSH
26801: CALL 27179 0 5
26805: ST_TO_ADDR
// end ;
26806: LD_VAR 0 5
26810: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26811: LD_INT 0
26813: PPUSH
26814: PPUSH
26815: PPUSH
26816: PPUSH
// if not list or not unit then
26817: LD_VAR 0 2
26821: NOT
26822: PUSH
26823: LD_VAR 0 1
26827: NOT
26828: OR
26829: IFFALSE 26833
// exit ;
26831: GO 27174
// result := [ ] ;
26833: LD_ADDR_VAR 0 5
26837: PUSH
26838: EMPTY
26839: ST_TO_ADDR
// for i in list do
26840: LD_ADDR_VAR 0 6
26844: PUSH
26845: LD_VAR 0 2
26849: PUSH
26850: FOR_IN
26851: IFFALSE 27069
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26853: LD_ADDR_VAR 0 8
26857: PUSH
26858: LD_VAR 0 1
26862: PPUSH
26863: LD_VAR 0 6
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PPUSH
26872: LD_VAR 0 6
26876: PUSH
26877: LD_INT 2
26879: ARRAY
26880: PPUSH
26881: CALL_OW 297
26885: ST_TO_ADDR
// if not Count ( result ) then
26886: LD_VAR 0 5
26890: PPUSH
26891: CALL 23463 0 1
26895: NOT
26896: IFFALSE 26929
// begin result := Join ( result , [ i , tmp ] ) ;
26898: LD_ADDR_VAR 0 5
26902: PUSH
26903: LD_VAR 0 5
26907: PPUSH
26908: LD_VAR 0 6
26912: PUSH
26913: LD_VAR 0 8
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL 59052 0 2
26926: ST_TO_ADDR
// continue ;
26927: GO 26850
// end ; if result [ result ] [ 2 ] <= tmp then
26929: LD_VAR 0 5
26933: PUSH
26934: LD_VAR 0 5
26938: ARRAY
26939: PUSH
26940: LD_INT 2
26942: ARRAY
26943: PUSH
26944: LD_VAR 0 8
26948: LESSEQUAL
26949: IFFALSE 26982
// result := Join ( result , [ i , tmp ] ) else
26951: LD_ADDR_VAR 0 5
26955: PUSH
26956: LD_VAR 0 5
26960: PPUSH
26961: LD_VAR 0 6
26965: PUSH
26966: LD_VAR 0 8
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PPUSH
26975: CALL 59052 0 2
26979: ST_TO_ADDR
26980: GO 27067
// begin for j := 1 to Count ( result ) do
26982: LD_ADDR_VAR 0 7
26986: PUSH
26987: DOUBLE
26988: LD_INT 1
26990: DEC
26991: ST_TO_ADDR
26992: LD_VAR 0 5
26996: PPUSH
26997: CALL 23463 0 1
27001: PUSH
27002: FOR_TO
27003: IFFALSE 27065
// begin if tmp < result [ j ] [ 2 ] then
27005: LD_VAR 0 8
27009: PUSH
27010: LD_VAR 0 5
27014: PUSH
27015: LD_VAR 0 7
27019: ARRAY
27020: PUSH
27021: LD_INT 2
27023: ARRAY
27024: LESS
27025: IFFALSE 27063
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27027: LD_ADDR_VAR 0 5
27031: PUSH
27032: LD_VAR 0 5
27036: PPUSH
27037: LD_VAR 0 7
27041: PPUSH
27042: LD_VAR 0 6
27046: PUSH
27047: LD_VAR 0 8
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: CALL_OW 2
27060: ST_TO_ADDR
// break ;
27061: GO 27065
// end ; end ;
27063: GO 27002
27065: POP
27066: POP
// end ; end ;
27067: GO 26850
27069: POP
27070: POP
// if result and not asc then
27071: LD_VAR 0 5
27075: PUSH
27076: LD_VAR 0 3
27080: NOT
27081: AND
27082: IFFALSE 27099
// result := ReverseArray ( result ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_VAR 0 5
27093: PPUSH
27094: CALL 54339 0 1
27098: ST_TO_ADDR
// tmp := [ ] ;
27099: LD_ADDR_VAR 0 8
27103: PUSH
27104: EMPTY
27105: ST_TO_ADDR
// if mode then
27106: LD_VAR 0 4
27110: IFFALSE 27174
// begin for i := 1 to result do
27112: LD_ADDR_VAR 0 6
27116: PUSH
27117: DOUBLE
27118: LD_INT 1
27120: DEC
27121: ST_TO_ADDR
27122: LD_VAR 0 5
27126: PUSH
27127: FOR_TO
27128: IFFALSE 27162
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27130: LD_ADDR_VAR 0 8
27134: PUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: LD_VAR 0 5
27144: PUSH
27145: LD_VAR 0 6
27149: ARRAY
27150: PUSH
27151: LD_INT 1
27153: ARRAY
27154: PPUSH
27155: CALL 59052 0 2
27159: ST_TO_ADDR
27160: GO 27127
27162: POP
27163: POP
// result := tmp ;
27164: LD_ADDR_VAR 0 5
27168: PUSH
27169: LD_VAR 0 8
27173: ST_TO_ADDR
// end ; end ;
27174: LD_VAR 0 5
27178: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
27183: PPUSH
27184: PPUSH
// if not list then
27185: LD_VAR 0 3
27189: NOT
27190: IFFALSE 27194
// exit ;
27192: GO 27582
// result := [ ] ;
27194: LD_ADDR_VAR 0 6
27198: PUSH
27199: EMPTY
27200: ST_TO_ADDR
// for i in list do
27201: LD_ADDR_VAR 0 7
27205: PUSH
27206: LD_VAR 0 3
27210: PUSH
27211: FOR_IN
27212: IFFALSE 27414
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27214: LD_ADDR_VAR 0 9
27218: PUSH
27219: LD_VAR 0 7
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: LD_VAR 0 2
27233: PPUSH
27234: CALL_OW 297
27238: ST_TO_ADDR
// if not result then
27239: LD_VAR 0 6
27243: NOT
27244: IFFALSE 27270
// result := [ [ i , tmp ] ] else
27246: LD_ADDR_VAR 0 6
27250: PUSH
27251: LD_VAR 0 7
27255: PUSH
27256: LD_VAR 0 9
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: ST_TO_ADDR
27268: GO 27412
// begin if result [ result ] [ 2 ] < tmp then
27270: LD_VAR 0 6
27274: PUSH
27275: LD_VAR 0 6
27279: ARRAY
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: PUSH
27285: LD_VAR 0 9
27289: LESS
27290: IFFALSE 27332
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27292: LD_ADDR_VAR 0 6
27296: PUSH
27297: LD_VAR 0 6
27301: PPUSH
27302: LD_VAR 0 6
27306: PUSH
27307: LD_INT 1
27309: PLUS
27310: PPUSH
27311: LD_VAR 0 7
27315: PUSH
27316: LD_VAR 0 9
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PPUSH
27325: CALL_OW 2
27329: ST_TO_ADDR
27330: GO 27412
// for j = 1 to result do
27332: LD_ADDR_VAR 0 8
27336: PUSH
27337: DOUBLE
27338: LD_INT 1
27340: DEC
27341: ST_TO_ADDR
27342: LD_VAR 0 6
27346: PUSH
27347: FOR_TO
27348: IFFALSE 27410
// begin if tmp < result [ j ] [ 2 ] then
27350: LD_VAR 0 9
27354: PUSH
27355: LD_VAR 0 6
27359: PUSH
27360: LD_VAR 0 8
27364: ARRAY
27365: PUSH
27366: LD_INT 2
27368: ARRAY
27369: LESS
27370: IFFALSE 27408
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27372: LD_ADDR_VAR 0 6
27376: PUSH
27377: LD_VAR 0 6
27381: PPUSH
27382: LD_VAR 0 8
27386: PPUSH
27387: LD_VAR 0 7
27391: PUSH
27392: LD_VAR 0 9
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PPUSH
27401: CALL_OW 2
27405: ST_TO_ADDR
// break ;
27406: GO 27410
// end ; end ;
27408: GO 27347
27410: POP
27411: POP
// end ; end ;
27412: GO 27211
27414: POP
27415: POP
// if result and not asc then
27416: LD_VAR 0 6
27420: PUSH
27421: LD_VAR 0 4
27425: NOT
27426: AND
27427: IFFALSE 27502
// begin tmp := result ;
27429: LD_ADDR_VAR 0 9
27433: PUSH
27434: LD_VAR 0 6
27438: ST_TO_ADDR
// for i = tmp downto 1 do
27439: LD_ADDR_VAR 0 7
27443: PUSH
27444: DOUBLE
27445: LD_VAR 0 9
27449: INC
27450: ST_TO_ADDR
27451: LD_INT 1
27453: PUSH
27454: FOR_DOWNTO
27455: IFFALSE 27500
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27457: LD_ADDR_VAR 0 6
27461: PUSH
27462: LD_VAR 0 6
27466: PPUSH
27467: LD_VAR 0 9
27471: PUSH
27472: LD_VAR 0 7
27476: MINUS
27477: PUSH
27478: LD_INT 1
27480: PLUS
27481: PPUSH
27482: LD_VAR 0 9
27486: PUSH
27487: LD_VAR 0 7
27491: ARRAY
27492: PPUSH
27493: CALL_OW 1
27497: ST_TO_ADDR
27498: GO 27454
27500: POP
27501: POP
// end ; tmp := [ ] ;
27502: LD_ADDR_VAR 0 9
27506: PUSH
27507: EMPTY
27508: ST_TO_ADDR
// if mode then
27509: LD_VAR 0 5
27513: IFFALSE 27582
// begin for i = 1 to result do
27515: LD_ADDR_VAR 0 7
27519: PUSH
27520: DOUBLE
27521: LD_INT 1
27523: DEC
27524: ST_TO_ADDR
27525: LD_VAR 0 6
27529: PUSH
27530: FOR_TO
27531: IFFALSE 27570
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27533: LD_ADDR_VAR 0 9
27537: PUSH
27538: LD_VAR 0 9
27542: PPUSH
27543: LD_VAR 0 7
27547: PPUSH
27548: LD_VAR 0 6
27552: PUSH
27553: LD_VAR 0 7
27557: ARRAY
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: PPUSH
27563: CALL_OW 1
27567: ST_TO_ADDR
27568: GO 27530
27570: POP
27571: POP
// result := tmp ;
27572: LD_ADDR_VAR 0 6
27576: PUSH
27577: LD_VAR 0 9
27581: ST_TO_ADDR
// end ; end ;
27582: LD_VAR 0 6
27586: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27587: LD_INT 0
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27595: LD_ADDR_VAR 0 5
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
// if not x or not y then
27617: LD_VAR 0 2
27621: NOT
27622: PUSH
27623: LD_VAR 0 3
27627: NOT
27628: OR
27629: IFFALSE 27633
// exit ;
27631: GO 29283
// if not range then
27633: LD_VAR 0 4
27637: NOT
27638: IFFALSE 27648
// range := 10 ;
27640: LD_ADDR_VAR 0 4
27644: PUSH
27645: LD_INT 10
27647: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27648: LD_ADDR_VAR 0 8
27652: PUSH
27653: LD_INT 81
27655: PUSH
27656: LD_VAR 0 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 92
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: LD_VAR 0 3
27677: PUSH
27678: LD_VAR 0 4
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 3
27691: PUSH
27692: LD_INT 21
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: ST_TO_ADDR
// if not tmp then
27716: LD_VAR 0 8
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 29283
// for i in tmp do
27725: LD_ADDR_VAR 0 6
27729: PUSH
27730: LD_VAR 0 8
27734: PUSH
27735: FOR_IN
27736: IFFALSE 29258
// begin points := [ 0 , 0 , 0 ] ;
27738: LD_ADDR_VAR 0 9
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: LIST
27756: ST_TO_ADDR
// bpoints := 1 ;
27757: LD_ADDR_VAR 0 10
27761: PUSH
27762: LD_INT 1
27764: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27765: LD_VAR 0 6
27769: PPUSH
27770: CALL_OW 247
27774: PUSH
27775: LD_INT 1
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27783
27781: GO 28361
27783: POP
// begin if GetClass ( i ) = 1 then
27784: LD_VAR 0 6
27788: PPUSH
27789: CALL_OW 257
27793: PUSH
27794: LD_INT 1
27796: EQUAL
27797: IFFALSE 27818
// points := [ 10 , 5 , 3 ] ;
27799: LD_ADDR_VAR 0 9
27803: PUSH
27804: LD_INT 10
27806: PUSH
27807: LD_INT 5
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27818: LD_VAR 0 6
27822: PPUSH
27823: CALL_OW 257
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 4
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: IN
27842: IFFALSE 27863
// points := [ 3 , 2 , 1 ] ;
27844: LD_ADDR_VAR 0 9
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27863: LD_VAR 0 6
27867: PPUSH
27868: CALL_OW 257
27872: PUSH
27873: LD_INT 5
27875: EQUAL
27876: IFFALSE 27897
// points := [ 130 , 5 , 2 ] ;
27878: LD_ADDR_VAR 0 9
27882: PUSH
27883: LD_INT 130
27885: PUSH
27886: LD_INT 5
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27897: LD_VAR 0 6
27901: PPUSH
27902: CALL_OW 257
27906: PUSH
27907: LD_INT 8
27909: EQUAL
27910: IFFALSE 27931
// points := [ 35 , 35 , 30 ] ;
27912: LD_ADDR_VAR 0 9
27916: PUSH
27917: LD_INT 35
27919: PUSH
27920: LD_INT 35
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27931: LD_VAR 0 6
27935: PPUSH
27936: CALL_OW 257
27940: PUSH
27941: LD_INT 9
27943: EQUAL
27944: IFFALSE 27965
// points := [ 20 , 55 , 40 ] ;
27946: LD_ADDR_VAR 0 9
27950: PUSH
27951: LD_INT 20
27953: PUSH
27954: LD_INT 55
27956: PUSH
27957: LD_INT 40
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27965: LD_VAR 0 6
27969: PPUSH
27970: CALL_OW 257
27974: PUSH
27975: LD_INT 12
27977: PUSH
27978: LD_INT 16
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: IN
27985: IFFALSE 28006
// points := [ 5 , 3 , 2 ] ;
27987: LD_ADDR_VAR 0 9
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28006: LD_VAR 0 6
28010: PPUSH
28011: CALL_OW 257
28015: PUSH
28016: LD_INT 17
28018: EQUAL
28019: IFFALSE 28040
// points := [ 100 , 50 , 75 ] ;
28021: LD_ADDR_VAR 0 9
28025: PUSH
28026: LD_INT 100
28028: PUSH
28029: LD_INT 50
28031: PUSH
28032: LD_INT 75
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28040: LD_VAR 0 6
28044: PPUSH
28045: CALL_OW 257
28049: PUSH
28050: LD_INT 15
28052: EQUAL
28053: IFFALSE 28074
// points := [ 10 , 5 , 3 ] ;
28055: LD_ADDR_VAR 0 9
28059: PUSH
28060: LD_INT 10
28062: PUSH
28063: LD_INT 5
28065: PUSH
28066: LD_INT 3
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28074: LD_VAR 0 6
28078: PPUSH
28079: CALL_OW 257
28083: PUSH
28084: LD_INT 14
28086: EQUAL
28087: IFFALSE 28108
// points := [ 10 , 0 , 0 ] ;
28089: LD_ADDR_VAR 0 9
28093: PUSH
28094: LD_INT 10
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28108: LD_VAR 0 6
28112: PPUSH
28113: CALL_OW 257
28117: PUSH
28118: LD_INT 11
28120: EQUAL
28121: IFFALSE 28142
// points := [ 30 , 10 , 5 ] ;
28123: LD_ADDR_VAR 0 9
28127: PUSH
28128: LD_INT 30
28130: PUSH
28131: LD_INT 10
28133: PUSH
28134: LD_INT 5
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28142: LD_VAR 0 1
28146: PPUSH
28147: LD_INT 5
28149: PPUSH
28150: CALL_OW 321
28154: PUSH
28155: LD_INT 2
28157: EQUAL
28158: IFFALSE 28175
// bpoints := bpoints * 1.8 ;
28160: LD_ADDR_VAR 0 10
28164: PUSH
28165: LD_VAR 0 10
28169: PUSH
28170: LD_REAL  1.80000000000000E+0000
28173: MUL
28174: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28175: LD_VAR 0 6
28179: PPUSH
28180: CALL_OW 257
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 3
28193: PUSH
28194: LD_INT 4
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: IN
28203: PUSH
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_INT 51
28211: PPUSH
28212: CALL_OW 321
28216: PUSH
28217: LD_INT 2
28219: EQUAL
28220: AND
28221: IFFALSE 28238
// bpoints := bpoints * 1.2 ;
28223: LD_ADDR_VAR 0 10
28227: PUSH
28228: LD_VAR 0 10
28232: PUSH
28233: LD_REAL  1.20000000000000E+0000
28236: MUL
28237: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28238: LD_VAR 0 6
28242: PPUSH
28243: CALL_OW 257
28247: PUSH
28248: LD_INT 5
28250: PUSH
28251: LD_INT 7
28253: PUSH
28254: LD_INT 9
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: IN
28262: PUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_INT 52
28270: PPUSH
28271: CALL_OW 321
28275: PUSH
28276: LD_INT 2
28278: EQUAL
28279: AND
28280: IFFALSE 28297
// bpoints := bpoints * 1.5 ;
28282: LD_ADDR_VAR 0 10
28286: PUSH
28287: LD_VAR 0 10
28291: PUSH
28292: LD_REAL  1.50000000000000E+0000
28295: MUL
28296: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28297: LD_VAR 0 1
28301: PPUSH
28302: LD_INT 66
28304: PPUSH
28305: CALL_OW 321
28309: PUSH
28310: LD_INT 2
28312: EQUAL
28313: IFFALSE 28330
// bpoints := bpoints * 1.1 ;
28315: LD_ADDR_VAR 0 10
28319: PUSH
28320: LD_VAR 0 10
28324: PUSH
28325: LD_REAL  1.10000000000000E+0000
28328: MUL
28329: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28330: LD_ADDR_VAR 0 10
28334: PUSH
28335: LD_VAR 0 10
28339: PUSH
28340: LD_VAR 0 6
28344: PPUSH
28345: LD_INT 1
28347: PPUSH
28348: CALL_OW 259
28352: PUSH
28353: LD_REAL  1.15000000000000E+0000
28356: MUL
28357: MUL
28358: ST_TO_ADDR
// end ; unit_vehicle :
28359: GO 29187
28361: LD_INT 2
28363: DOUBLE
28364: EQUAL
28365: IFTRUE 28369
28367: GO 29175
28369: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28370: LD_VAR 0 6
28374: PPUSH
28375: CALL_OW 264
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 42
28385: PUSH
28386: LD_INT 24
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: IN
28394: IFFALSE 28415
// points := [ 25 , 5 , 3 ] ;
28396: LD_ADDR_VAR 0 9
28400: PUSH
28401: LD_INT 25
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28415: LD_VAR 0 6
28419: PPUSH
28420: CALL_OW 264
28424: PUSH
28425: LD_INT 4
28427: PUSH
28428: LD_INT 43
28430: PUSH
28431: LD_INT 25
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: IN
28439: IFFALSE 28460
// points := [ 40 , 15 , 5 ] ;
28441: LD_ADDR_VAR 0 9
28445: PUSH
28446: LD_INT 40
28448: PUSH
28449: LD_INT 15
28451: PUSH
28452: LD_INT 5
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28460: LD_VAR 0 6
28464: PPUSH
28465: CALL_OW 264
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: LD_INT 23
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: IN
28480: IFFALSE 28501
// points := [ 7 , 25 , 8 ] ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 7
28489: PUSH
28490: LD_INT 25
28492: PUSH
28493: LD_INT 8
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28501: LD_VAR 0 6
28505: PPUSH
28506: CALL_OW 264
28510: PUSH
28511: LD_INT 5
28513: PUSH
28514: LD_INT 27
28516: PUSH
28517: LD_INT 44
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: IN
28525: IFFALSE 28546
// points := [ 14 , 50 , 16 ] ;
28527: LD_ADDR_VAR 0 9
28531: PUSH
28532: LD_INT 14
28534: PUSH
28535: LD_INT 50
28537: PUSH
28538: LD_INT 16
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28546: LD_VAR 0 6
28550: PPUSH
28551: CALL_OW 264
28555: PUSH
28556: LD_INT 6
28558: PUSH
28559: LD_INT 46
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: IN
28566: IFFALSE 28587
// points := [ 32 , 120 , 70 ] ;
28568: LD_ADDR_VAR 0 9
28572: PUSH
28573: LD_INT 32
28575: PUSH
28576: LD_INT 120
28578: PUSH
28579: LD_INT 70
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28587: LD_VAR 0 6
28591: PPUSH
28592: CALL_OW 264
28596: PUSH
28597: LD_INT 7
28599: PUSH
28600: LD_INT 28
28602: PUSH
28603: LD_INT 45
28605: PUSH
28606: LD_INT 92
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: IN
28615: IFFALSE 28636
// points := [ 35 , 20 , 45 ] ;
28617: LD_ADDR_VAR 0 9
28621: PUSH
28622: LD_INT 35
28624: PUSH
28625: LD_INT 20
28627: PUSH
28628: LD_INT 45
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28636: LD_VAR 0 6
28640: PPUSH
28641: CALL_OW 264
28645: PUSH
28646: LD_INT 47
28648: PUSH
28649: EMPTY
28650: LIST
28651: IN
28652: IFFALSE 28673
// points := [ 67 , 45 , 75 ] ;
28654: LD_ADDR_VAR 0 9
28658: PUSH
28659: LD_INT 67
28661: PUSH
28662: LD_INT 45
28664: PUSH
28665: LD_INT 75
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28673: LD_VAR 0 6
28677: PPUSH
28678: CALL_OW 264
28682: PUSH
28683: LD_INT 26
28685: PUSH
28686: EMPTY
28687: LIST
28688: IN
28689: IFFALSE 28710
// points := [ 120 , 30 , 80 ] ;
28691: LD_ADDR_VAR 0 9
28695: PUSH
28696: LD_INT 120
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 80
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28710: LD_VAR 0 6
28714: PPUSH
28715: CALL_OW 264
28719: PUSH
28720: LD_INT 22
28722: PUSH
28723: EMPTY
28724: LIST
28725: IN
28726: IFFALSE 28747
// points := [ 40 , 1 , 1 ] ;
28728: LD_ADDR_VAR 0 9
28732: PUSH
28733: LD_INT 40
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28747: LD_VAR 0 6
28751: PPUSH
28752: CALL_OW 264
28756: PUSH
28757: LD_INT 29
28759: PUSH
28760: EMPTY
28761: LIST
28762: IN
28763: IFFALSE 28784
// points := [ 70 , 200 , 400 ] ;
28765: LD_ADDR_VAR 0 9
28769: PUSH
28770: LD_INT 70
28772: PUSH
28773: LD_INT 200
28775: PUSH
28776: LD_INT 400
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28784: LD_VAR 0 6
28788: PPUSH
28789: CALL_OW 264
28793: PUSH
28794: LD_INT 14
28796: PUSH
28797: LD_INT 53
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: IN
28804: IFFALSE 28825
// points := [ 40 , 10 , 20 ] ;
28806: LD_ADDR_VAR 0 9
28810: PUSH
28811: LD_INT 40
28813: PUSH
28814: LD_INT 10
28816: PUSH
28817: LD_INT 20
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28825: LD_VAR 0 6
28829: PPUSH
28830: CALL_OW 264
28834: PUSH
28835: LD_INT 9
28837: PUSH
28838: EMPTY
28839: LIST
28840: IN
28841: IFFALSE 28862
// points := [ 5 , 70 , 20 ] ;
28843: LD_ADDR_VAR 0 9
28847: PUSH
28848: LD_INT 5
28850: PUSH
28851: LD_INT 70
28853: PUSH
28854: LD_INT 20
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28862: LD_VAR 0 6
28866: PPUSH
28867: CALL_OW 264
28871: PUSH
28872: LD_INT 10
28874: PUSH
28875: EMPTY
28876: LIST
28877: IN
28878: IFFALSE 28899
// points := [ 35 , 110 , 70 ] ;
28880: LD_ADDR_VAR 0 9
28884: PUSH
28885: LD_INT 35
28887: PUSH
28888: LD_INT 110
28890: PUSH
28891: LD_INT 70
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28899: LD_VAR 0 6
28903: PPUSH
28904: CALL_OW 265
28908: PUSH
28909: LD_INT 25
28911: EQUAL
28912: IFFALSE 28933
// points := [ 80 , 65 , 100 ] ;
28914: LD_ADDR_VAR 0 9
28918: PUSH
28919: LD_INT 80
28921: PUSH
28922: LD_INT 65
28924: PUSH
28925: LD_INT 100
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28933: LD_VAR 0 6
28937: PPUSH
28938: CALL_OW 263
28942: PUSH
28943: LD_INT 1
28945: EQUAL
28946: IFFALSE 28981
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28948: LD_ADDR_VAR 0 10
28952: PUSH
28953: LD_VAR 0 10
28957: PUSH
28958: LD_VAR 0 6
28962: PPUSH
28963: CALL_OW 311
28967: PPUSH
28968: LD_INT 3
28970: PPUSH
28971: CALL_OW 259
28975: PUSH
28976: LD_INT 4
28978: MUL
28979: MUL
28980: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 263
28990: PUSH
28991: LD_INT 2
28993: EQUAL
28994: IFFALSE 29045
// begin j := IsControledBy ( i ) ;
28996: LD_ADDR_VAR 0 7
29000: PUSH
29001: LD_VAR 0 6
29005: PPUSH
29006: CALL_OW 312
29010: ST_TO_ADDR
// if j then
29011: LD_VAR 0 7
29015: IFFALSE 29045
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29017: LD_ADDR_VAR 0 10
29021: PUSH
29022: LD_VAR 0 10
29026: PUSH
29027: LD_VAR 0 7
29031: PPUSH
29032: LD_INT 3
29034: PPUSH
29035: CALL_OW 259
29039: PUSH
29040: LD_INT 3
29042: MUL
29043: MUL
29044: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29045: LD_VAR 0 6
29049: PPUSH
29050: CALL_OW 264
29054: PUSH
29055: LD_INT 5
29057: PUSH
29058: LD_INT 6
29060: PUSH
29061: LD_INT 46
29063: PUSH
29064: LD_INT 44
29066: PUSH
29067: LD_INT 47
29069: PUSH
29070: LD_INT 45
29072: PUSH
29073: LD_INT 28
29075: PUSH
29076: LD_INT 7
29078: PUSH
29079: LD_INT 27
29081: PUSH
29082: LD_INT 29
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: IN
29097: PUSH
29098: LD_VAR 0 1
29102: PPUSH
29103: LD_INT 52
29105: PPUSH
29106: CALL_OW 321
29110: PUSH
29111: LD_INT 2
29113: EQUAL
29114: AND
29115: IFFALSE 29132
// bpoints := bpoints * 1.2 ;
29117: LD_ADDR_VAR 0 10
29121: PUSH
29122: LD_VAR 0 10
29126: PUSH
29127: LD_REAL  1.20000000000000E+0000
29130: MUL
29131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29132: LD_VAR 0 6
29136: PPUSH
29137: CALL_OW 264
29141: PUSH
29142: LD_INT 6
29144: PUSH
29145: LD_INT 46
29147: PUSH
29148: LD_INT 47
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: IN
29156: IFFALSE 29173
// bpoints := bpoints * 1.2 ;
29158: LD_ADDR_VAR 0 10
29162: PUSH
29163: LD_VAR 0 10
29167: PUSH
29168: LD_REAL  1.20000000000000E+0000
29171: MUL
29172: ST_TO_ADDR
// end ; unit_building :
29173: GO 29187
29175: LD_INT 3
29177: DOUBLE
29178: EQUAL
29179: IFTRUE 29183
29181: GO 29186
29183: POP
// ; end ;
29184: GO 29187
29186: POP
// for j = 1 to 3 do
29187: LD_ADDR_VAR 0 7
29191: PUSH
29192: DOUBLE
29193: LD_INT 1
29195: DEC
29196: ST_TO_ADDR
29197: LD_INT 3
29199: PUSH
29200: FOR_TO
29201: IFFALSE 29254
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29203: LD_ADDR_VAR 0 5
29207: PUSH
29208: LD_VAR 0 5
29212: PPUSH
29213: LD_VAR 0 7
29217: PPUSH
29218: LD_VAR 0 5
29222: PUSH
29223: LD_VAR 0 7
29227: ARRAY
29228: PUSH
29229: LD_VAR 0 9
29233: PUSH
29234: LD_VAR 0 7
29238: ARRAY
29239: PUSH
29240: LD_VAR 0 10
29244: MUL
29245: PLUS
29246: PPUSH
29247: CALL_OW 1
29251: ST_TO_ADDR
29252: GO 29200
29254: POP
29255: POP
// end ;
29256: GO 27735
29258: POP
29259: POP
// result := Replace ( result , 4 , tmp ) ;
29260: LD_ADDR_VAR 0 5
29264: PUSH
29265: LD_VAR 0 5
29269: PPUSH
29270: LD_INT 4
29272: PPUSH
29273: LD_VAR 0 8
29277: PPUSH
29278: CALL_OW 1
29282: ST_TO_ADDR
// end ;
29283: LD_VAR 0 5
29287: RET
// export function DangerAtRange ( unit , range ) ; begin
29288: LD_INT 0
29290: PPUSH
// if not unit then
29291: LD_VAR 0 1
29295: NOT
29296: IFFALSE 29300
// exit ;
29298: GO 29345
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29300: LD_ADDR_VAR 0 3
29304: PUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 255
29314: PPUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: CALL_OW 250
29324: PPUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 251
29334: PPUSH
29335: LD_VAR 0 2
29339: PPUSH
29340: CALL 27587 0 4
29344: ST_TO_ADDR
// end ;
29345: LD_VAR 0 3
29349: RET
// export function DangerInArea ( side , area ) ; begin
29350: LD_INT 0
29352: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29353: LD_ADDR_VAR 0 3
29357: PUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: LD_INT 81
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 70
29379: ST_TO_ADDR
// end ;
29380: LD_VAR 0 3
29384: RET
// export function IsExtension ( b ) ; begin
29385: LD_INT 0
29387: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 23
29400: PUSH
29401: LD_INT 20
29403: PUSH
29404: LD_INT 22
29406: PUSH
29407: LD_INT 17
29409: PUSH
29410: LD_INT 24
29412: PUSH
29413: LD_INT 21
29415: PUSH
29416: LD_INT 19
29418: PUSH
29419: LD_INT 16
29421: PUSH
29422: LD_INT 25
29424: PUSH
29425: LD_INT 18
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: IN
29440: ST_TO_ADDR
// end ;
29441: LD_VAR 0 2
29445: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29446: LD_INT 0
29448: PPUSH
29449: PPUSH
29450: PPUSH
// result := [ ] ;
29451: LD_ADDR_VAR 0 4
29455: PUSH
29456: EMPTY
29457: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29458: LD_ADDR_VAR 0 5
29462: PUSH
29463: LD_VAR 0 2
29467: PPUSH
29468: LD_INT 21
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PPUSH
29478: CALL_OW 70
29482: ST_TO_ADDR
// if not tmp then
29483: LD_VAR 0 5
29487: NOT
29488: IFFALSE 29492
// exit ;
29490: GO 29556
// if checkLink then
29492: LD_VAR 0 3
29496: IFFALSE 29546
// begin for i in tmp do
29498: LD_ADDR_VAR 0 6
29502: PUSH
29503: LD_VAR 0 5
29507: PUSH
29508: FOR_IN
29509: IFFALSE 29544
// if GetBase ( i ) <> base then
29511: LD_VAR 0 6
29515: PPUSH
29516: CALL_OW 274
29520: PUSH
29521: LD_VAR 0 1
29525: NONEQUAL
29526: IFFALSE 29542
// ComLinkToBase ( base , i ) ;
29528: LD_VAR 0 1
29532: PPUSH
29533: LD_VAR 0 6
29537: PPUSH
29538: CALL_OW 169
29542: GO 29508
29544: POP
29545: POP
// end ; result := tmp ;
29546: LD_ADDR_VAR 0 4
29550: PUSH
29551: LD_VAR 0 5
29555: ST_TO_ADDR
// end ;
29556: LD_VAR 0 4
29560: RET
// export function ComComplete ( units , b ) ; var i ; begin
29561: LD_INT 0
29563: PPUSH
29564: PPUSH
// if not units then
29565: LD_VAR 0 1
29569: NOT
29570: IFFALSE 29574
// exit ;
29572: GO 29664
// for i in units do
29574: LD_ADDR_VAR 0 4
29578: PUSH
29579: LD_VAR 0 1
29583: PUSH
29584: FOR_IN
29585: IFFALSE 29662
// if BuildingStatus ( b ) = bs_build then
29587: LD_VAR 0 2
29591: PPUSH
29592: CALL_OW 461
29596: PUSH
29597: LD_INT 1
29599: EQUAL
29600: IFFALSE 29660
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29602: LD_VAR 0 4
29606: PPUSH
29607: LD_STRING h
29609: PUSH
29610: LD_VAR 0 2
29614: PPUSH
29615: CALL_OW 250
29619: PUSH
29620: LD_VAR 0 2
29624: PPUSH
29625: CALL_OW 251
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: PPUSH
29656: CALL_OW 446
29660: GO 29584
29662: POP
29663: POP
// end ;
29664: LD_VAR 0 3
29668: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29669: LD_INT 0
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29677: LD_VAR 0 1
29681: NOT
29682: PUSH
29683: LD_VAR 0 1
29687: PPUSH
29688: CALL_OW 263
29692: PUSH
29693: LD_INT 2
29695: NONEQUAL
29696: OR
29697: IFFALSE 29701
// exit ;
29699: GO 30017
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29701: LD_ADDR_VAR 0 6
29705: PUSH
29706: LD_INT 22
29708: PUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL_OW 255
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 30
29728: PUSH
29729: LD_INT 36
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 34
29738: PUSH
29739: LD_INT 31
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PPUSH
29755: CALL_OW 69
29759: ST_TO_ADDR
// if not tmp then
29760: LD_VAR 0 6
29764: NOT
29765: IFFALSE 29769
// exit ;
29767: GO 30017
// result := [ ] ;
29769: LD_ADDR_VAR 0 2
29773: PUSH
29774: EMPTY
29775: ST_TO_ADDR
// for i in tmp do
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_VAR 0 6
29785: PUSH
29786: FOR_IN
29787: IFFALSE 29858
// begin t := UnitsInside ( i ) ;
29789: LD_ADDR_VAR 0 4
29793: PUSH
29794: LD_VAR 0 3
29798: PPUSH
29799: CALL_OW 313
29803: ST_TO_ADDR
// if t then
29804: LD_VAR 0 4
29808: IFFALSE 29856
// for j in t do
29810: LD_ADDR_VAR 0 7
29814: PUSH
29815: LD_VAR 0 4
29819: PUSH
29820: FOR_IN
29821: IFFALSE 29854
// result := Replace ( result , result + 1 , j ) ;
29823: LD_ADDR_VAR 0 2
29827: PUSH
29828: LD_VAR 0 2
29832: PPUSH
29833: LD_VAR 0 2
29837: PUSH
29838: LD_INT 1
29840: PLUS
29841: PPUSH
29842: LD_VAR 0 7
29846: PPUSH
29847: CALL_OW 1
29851: ST_TO_ADDR
29852: GO 29820
29854: POP
29855: POP
// end ;
29856: GO 29786
29858: POP
29859: POP
// if not result then
29860: LD_VAR 0 2
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 30017
// mech := result [ 1 ] ;
29869: LD_ADDR_VAR 0 5
29873: PUSH
29874: LD_VAR 0 2
29878: PUSH
29879: LD_INT 1
29881: ARRAY
29882: ST_TO_ADDR
// if result > 1 then
29883: LD_VAR 0 2
29887: PUSH
29888: LD_INT 1
29890: GREATER
29891: IFFALSE 30003
// begin for i = 2 to result do
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: DOUBLE
29899: LD_INT 2
29901: DEC
29902: ST_TO_ADDR
29903: LD_VAR 0 2
29907: PUSH
29908: FOR_TO
29909: IFFALSE 30001
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29911: LD_ADDR_VAR 0 4
29915: PUSH
29916: LD_VAR 0 2
29920: PUSH
29921: LD_VAR 0 3
29925: ARRAY
29926: PPUSH
29927: LD_INT 3
29929: PPUSH
29930: CALL_OW 259
29934: PUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_VAR 0 3
29944: ARRAY
29945: PPUSH
29946: CALL_OW 432
29950: MINUS
29951: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29952: LD_VAR 0 4
29956: PUSH
29957: LD_VAR 0 5
29961: PPUSH
29962: LD_INT 3
29964: PPUSH
29965: CALL_OW 259
29969: PUSH
29970: LD_VAR 0 5
29974: PPUSH
29975: CALL_OW 432
29979: MINUS
29980: GREATEREQUAL
29981: IFFALSE 29999
// mech := result [ i ] ;
29983: LD_ADDR_VAR 0 5
29987: PUSH
29988: LD_VAR 0 2
29992: PUSH
29993: LD_VAR 0 3
29997: ARRAY
29998: ST_TO_ADDR
// end ;
29999: GO 29908
30001: POP
30002: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30003: LD_VAR 0 1
30007: PPUSH
30008: LD_VAR 0 5
30012: PPUSH
30013: CALL_OW 135
// end ;
30017: LD_VAR 0 2
30021: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30022: LD_INT 0
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
// result := [ ] ;
30037: LD_ADDR_VAR 0 7
30041: PUSH
30042: EMPTY
30043: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30044: LD_VAR 0 1
30048: PPUSH
30049: CALL_OW 266
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: IN
30064: NOT
30065: IFFALSE 30069
// exit ;
30067: GO 31703
// if name then
30069: LD_VAR 0 3
30073: IFFALSE 30089
// SetBName ( base_dep , name ) ;
30075: LD_VAR 0 1
30079: PPUSH
30080: LD_VAR 0 3
30084: PPUSH
30085: CALL_OW 500
// base := GetBase ( base_dep ) ;
30089: LD_ADDR_VAR 0 15
30093: PUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 274
30103: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30104: LD_ADDR_VAR 0 16
30108: PUSH
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 255
30118: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30119: LD_ADDR_VAR 0 17
30123: PUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: CALL_OW 248
30133: ST_TO_ADDR
// if sources then
30134: LD_VAR 0 5
30138: IFFALSE 30185
// for i = 1 to 3 do
30140: LD_ADDR_VAR 0 8
30144: PUSH
30145: DOUBLE
30146: LD_INT 1
30148: DEC
30149: ST_TO_ADDR
30150: LD_INT 3
30152: PUSH
30153: FOR_TO
30154: IFFALSE 30183
// AddResourceType ( base , i , sources [ i ] ) ;
30156: LD_VAR 0 15
30160: PPUSH
30161: LD_VAR 0 8
30165: PPUSH
30166: LD_VAR 0 5
30170: PUSH
30171: LD_VAR 0 8
30175: ARRAY
30176: PPUSH
30177: CALL_OW 276
30181: GO 30153
30183: POP
30184: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30185: LD_ADDR_VAR 0 18
30189: PUSH
30190: LD_VAR 0 15
30194: PPUSH
30195: LD_VAR 0 2
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: CALL 29446 0 3
30207: ST_TO_ADDR
// InitHc ;
30208: CALL_OW 19
// InitUc ;
30212: CALL_OW 18
// uc_side := side ;
30216: LD_ADDR_OWVAR 20
30220: PUSH
30221: LD_VAR 0 16
30225: ST_TO_ADDR
// uc_nation := nation ;
30226: LD_ADDR_OWVAR 21
30230: PUSH
30231: LD_VAR 0 17
30235: ST_TO_ADDR
// if buildings then
30236: LD_VAR 0 18
30240: IFFALSE 31562
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30242: LD_ADDR_VAR 0 19
30246: PUSH
30247: LD_VAR 0 18
30251: PPUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 30
30257: PUSH
30258: LD_INT 29
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 30
30267: PUSH
30268: LD_INT 30
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: PPUSH
30280: CALL_OW 72
30284: ST_TO_ADDR
// if tmp then
30285: LD_VAR 0 19
30289: IFFALSE 30337
// for i in tmp do
30291: LD_ADDR_VAR 0 8
30295: PUSH
30296: LD_VAR 0 19
30300: PUSH
30301: FOR_IN
30302: IFFALSE 30335
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30304: LD_VAR 0 8
30308: PPUSH
30309: CALL_OW 250
30313: PPUSH
30314: LD_VAR 0 8
30318: PPUSH
30319: CALL_OW 251
30323: PPUSH
30324: LD_VAR 0 16
30328: PPUSH
30329: CALL_OW 441
30333: GO 30301
30335: POP
30336: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30337: LD_VAR 0 18
30341: PPUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 30
30347: PUSH
30348: LD_INT 32
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 30
30357: PUSH
30358: LD_INT 33
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 72
30374: IFFALSE 30462
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30376: LD_ADDR_VAR 0 8
30380: PUSH
30381: LD_VAR 0 18
30385: PPUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 30
30391: PUSH
30392: LD_INT 32
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 30
30401: PUSH
30402: LD_INT 33
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: PPUSH
30414: CALL_OW 72
30418: PUSH
30419: FOR_IN
30420: IFFALSE 30460
// begin if not GetBWeapon ( i ) then
30422: LD_VAR 0 8
30426: PPUSH
30427: CALL_OW 269
30431: NOT
30432: IFFALSE 30458
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30434: LD_VAR 0 8
30438: PPUSH
30439: LD_VAR 0 8
30443: PPUSH
30444: LD_VAR 0 2
30448: PPUSH
30449: CALL 31708 0 2
30453: PPUSH
30454: CALL_OW 431
// end ;
30458: GO 30419
30460: POP
30461: POP
// end ; for i = 1 to personel do
30462: LD_ADDR_VAR 0 8
30466: PUSH
30467: DOUBLE
30468: LD_INT 1
30470: DEC
30471: ST_TO_ADDR
30472: LD_VAR 0 6
30476: PUSH
30477: FOR_TO
30478: IFFALSE 31542
// begin if i > 4 then
30480: LD_VAR 0 8
30484: PUSH
30485: LD_INT 4
30487: GREATER
30488: IFFALSE 30492
// break ;
30490: GO 31542
// case i of 1 :
30492: LD_VAR 0 8
30496: PUSH
30497: LD_INT 1
30499: DOUBLE
30500: EQUAL
30501: IFTRUE 30505
30503: GO 30585
30505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30506: LD_ADDR_VAR 0 12
30510: PUSH
30511: LD_VAR 0 18
30515: PPUSH
30516: LD_INT 22
30518: PUSH
30519: LD_VAR 0 16
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 58
30530: PUSH
30531: EMPTY
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 30
30539: PUSH
30540: LD_INT 32
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 30
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 30
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: PPUSH
30578: CALL_OW 72
30582: ST_TO_ADDR
30583: GO 30807
30585: LD_INT 2
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30655
30593: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30594: LD_ADDR_VAR 0 12
30598: PUSH
30599: LD_VAR 0 18
30603: PPUSH
30604: LD_INT 22
30606: PUSH
30607: LD_VAR 0 16
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 30
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 30
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 72
30652: ST_TO_ADDR
30653: GO 30807
30655: LD_INT 3
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30725
30663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30664: LD_ADDR_VAR 0 12
30668: PUSH
30669: LD_VAR 0 18
30673: PPUSH
30674: LD_INT 22
30676: PUSH
30677: LD_VAR 0 16
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 30
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 30
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PPUSH
30718: CALL_OW 72
30722: ST_TO_ADDR
30723: GO 30807
30725: LD_INT 4
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30806
30733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30734: LD_ADDR_VAR 0 12
30738: PUSH
30739: LD_VAR 0 18
30743: PPUSH
30744: LD_INT 22
30746: PUSH
30747: LD_VAR 0 16
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 30
30761: PUSH
30762: LD_INT 6
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 30
30771: PUSH
30772: LD_INT 7
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 8
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PPUSH
30799: CALL_OW 72
30803: ST_TO_ADDR
30804: GO 30807
30806: POP
// if i = 1 then
30807: LD_VAR 0 8
30811: PUSH
30812: LD_INT 1
30814: EQUAL
30815: IFFALSE 30926
// begin tmp := [ ] ;
30817: LD_ADDR_VAR 0 19
30821: PUSH
30822: EMPTY
30823: ST_TO_ADDR
// for j in f do
30824: LD_ADDR_VAR 0 9
30828: PUSH
30829: LD_VAR 0 12
30833: PUSH
30834: FOR_IN
30835: IFFALSE 30908
// if GetBType ( j ) = b_bunker then
30837: LD_VAR 0 9
30841: PPUSH
30842: CALL_OW 266
30846: PUSH
30847: LD_INT 32
30849: EQUAL
30850: IFFALSE 30877
// tmp := Insert ( tmp , 1 , j ) else
30852: LD_ADDR_VAR 0 19
30856: PUSH
30857: LD_VAR 0 19
30861: PPUSH
30862: LD_INT 1
30864: PPUSH
30865: LD_VAR 0 9
30869: PPUSH
30870: CALL_OW 2
30874: ST_TO_ADDR
30875: GO 30906
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30877: LD_ADDR_VAR 0 19
30881: PUSH
30882: LD_VAR 0 19
30886: PPUSH
30887: LD_VAR 0 19
30891: PUSH
30892: LD_INT 1
30894: PLUS
30895: PPUSH
30896: LD_VAR 0 9
30900: PPUSH
30901: CALL_OW 2
30905: ST_TO_ADDR
30906: GO 30834
30908: POP
30909: POP
// if tmp then
30910: LD_VAR 0 19
30914: IFFALSE 30926
// f := tmp ;
30916: LD_ADDR_VAR 0 12
30920: PUSH
30921: LD_VAR 0 19
30925: ST_TO_ADDR
// end ; x := personel [ i ] ;
30926: LD_ADDR_VAR 0 13
30930: PUSH
30931: LD_VAR 0 6
30935: PUSH
30936: LD_VAR 0 8
30940: ARRAY
30941: ST_TO_ADDR
// if x = - 1 then
30942: LD_VAR 0 13
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: EQUAL
30951: IFFALSE 31160
// begin for j in f do
30953: LD_ADDR_VAR 0 9
30957: PUSH
30958: LD_VAR 0 12
30962: PUSH
30963: FOR_IN
30964: IFFALSE 31156
// repeat InitHc ;
30966: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30970: LD_VAR 0 9
30974: PPUSH
30975: CALL_OW 266
30979: PUSH
30980: LD_INT 5
30982: EQUAL
30983: IFFALSE 31053
// begin if UnitsInside ( j ) < 3 then
30985: LD_VAR 0 9
30989: PPUSH
30990: CALL_OW 313
30994: PUSH
30995: LD_INT 3
30997: LESS
30998: IFFALSE 31034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31000: LD_INT 0
31002: PPUSH
31003: LD_INT 5
31005: PUSH
31006: LD_INT 8
31008: PUSH
31009: LD_INT 9
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: PUSH
31017: LD_VAR 0 17
31021: ARRAY
31022: PPUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: CALL_OW 380
31032: GO 31051
// PrepareHuman ( false , i , skill ) ;
31034: LD_INT 0
31036: PPUSH
31037: LD_VAR 0 8
31041: PPUSH
31042: LD_VAR 0 4
31046: PPUSH
31047: CALL_OW 380
// end else
31051: GO 31070
// PrepareHuman ( false , i , skill ) ;
31053: LD_INT 0
31055: PPUSH
31056: LD_VAR 0 8
31060: PPUSH
31061: LD_VAR 0 4
31065: PPUSH
31066: CALL_OW 380
// un := CreateHuman ;
31070: LD_ADDR_VAR 0 14
31074: PUSH
31075: CALL_OW 44
31079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31080: LD_ADDR_VAR 0 7
31084: PUSH
31085: LD_VAR 0 7
31089: PPUSH
31090: LD_INT 1
31092: PPUSH
31093: LD_VAR 0 14
31097: PPUSH
31098: CALL_OW 2
31102: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31103: LD_VAR 0 14
31107: PPUSH
31108: LD_VAR 0 9
31112: PPUSH
31113: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31117: LD_VAR 0 9
31121: PPUSH
31122: CALL_OW 313
31126: PUSH
31127: LD_INT 6
31129: EQUAL
31130: PUSH
31131: LD_VAR 0 9
31135: PPUSH
31136: CALL_OW 266
31140: PUSH
31141: LD_INT 32
31143: PUSH
31144: LD_INT 31
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: IN
31151: OR
31152: IFFALSE 30966
31154: GO 30963
31156: POP
31157: POP
// end else
31158: GO 31540
// for j = 1 to x do
31160: LD_ADDR_VAR 0 9
31164: PUSH
31165: DOUBLE
31166: LD_INT 1
31168: DEC
31169: ST_TO_ADDR
31170: LD_VAR 0 13
31174: PUSH
31175: FOR_TO
31176: IFFALSE 31538
// begin InitHc ;
31178: CALL_OW 19
// if not f then
31182: LD_VAR 0 12
31186: NOT
31187: IFFALSE 31276
// begin PrepareHuman ( false , i , skill ) ;
31189: LD_INT 0
31191: PPUSH
31192: LD_VAR 0 8
31196: PPUSH
31197: LD_VAR 0 4
31201: PPUSH
31202: CALL_OW 380
// un := CreateHuman ;
31206: LD_ADDR_VAR 0 14
31210: PUSH
31211: CALL_OW 44
31215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31216: LD_ADDR_VAR 0 7
31220: PUSH
31221: LD_VAR 0 7
31225: PPUSH
31226: LD_INT 1
31228: PPUSH
31229: LD_VAR 0 14
31233: PPUSH
31234: CALL_OW 2
31238: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31239: LD_VAR 0 14
31243: PPUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 250
31253: PPUSH
31254: LD_VAR 0 1
31258: PPUSH
31259: CALL_OW 251
31263: PPUSH
31264: LD_INT 10
31266: PPUSH
31267: LD_INT 0
31269: PPUSH
31270: CALL_OW 50
// continue ;
31274: GO 31175
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31276: LD_VAR 0 12
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: CALL_OW 313
31289: PUSH
31290: LD_VAR 0 12
31294: PUSH
31295: LD_INT 1
31297: ARRAY
31298: PPUSH
31299: CALL_OW 266
31303: PUSH
31304: LD_INT 32
31306: PUSH
31307: LD_INT 31
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: IN
31314: AND
31315: PUSH
31316: LD_VAR 0 12
31320: PUSH
31321: LD_INT 1
31323: ARRAY
31324: PPUSH
31325: CALL_OW 313
31329: PUSH
31330: LD_INT 6
31332: EQUAL
31333: OR
31334: IFFALSE 31354
// f := Delete ( f , 1 ) ;
31336: LD_ADDR_VAR 0 12
31340: PUSH
31341: LD_VAR 0 12
31345: PPUSH
31346: LD_INT 1
31348: PPUSH
31349: CALL_OW 3
31353: ST_TO_ADDR
// if not f then
31354: LD_VAR 0 12
31358: NOT
31359: IFFALSE 31377
// begin x := x + 2 ;
31361: LD_ADDR_VAR 0 13
31365: PUSH
31366: LD_VAR 0 13
31370: PUSH
31371: LD_INT 2
31373: PLUS
31374: ST_TO_ADDR
// continue ;
31375: GO 31175
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31377: LD_VAR 0 12
31381: PUSH
31382: LD_INT 1
31384: ARRAY
31385: PPUSH
31386: CALL_OW 266
31390: PUSH
31391: LD_INT 5
31393: EQUAL
31394: IFFALSE 31468
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31396: LD_VAR 0 12
31400: PUSH
31401: LD_INT 1
31403: ARRAY
31404: PPUSH
31405: CALL_OW 313
31409: PUSH
31410: LD_INT 3
31412: LESS
31413: IFFALSE 31449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31415: LD_INT 0
31417: PPUSH
31418: LD_INT 5
31420: PUSH
31421: LD_INT 8
31423: PUSH
31424: LD_INT 9
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: LIST
31431: PUSH
31432: LD_VAR 0 17
31436: ARRAY
31437: PPUSH
31438: LD_VAR 0 4
31442: PPUSH
31443: CALL_OW 380
31447: GO 31466
// PrepareHuman ( false , i , skill ) ;
31449: LD_INT 0
31451: PPUSH
31452: LD_VAR 0 8
31456: PPUSH
31457: LD_VAR 0 4
31461: PPUSH
31462: CALL_OW 380
// end else
31466: GO 31485
// PrepareHuman ( false , i , skill ) ;
31468: LD_INT 0
31470: PPUSH
31471: LD_VAR 0 8
31475: PPUSH
31476: LD_VAR 0 4
31480: PPUSH
31481: CALL_OW 380
// un := CreateHuman ;
31485: LD_ADDR_VAR 0 14
31489: PUSH
31490: CALL_OW 44
31494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31495: LD_ADDR_VAR 0 7
31499: PUSH
31500: LD_VAR 0 7
31504: PPUSH
31505: LD_INT 1
31507: PPUSH
31508: LD_VAR 0 14
31512: PPUSH
31513: CALL_OW 2
31517: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31518: LD_VAR 0 14
31522: PPUSH
31523: LD_VAR 0 12
31527: PUSH
31528: LD_INT 1
31530: ARRAY
31531: PPUSH
31532: CALL_OW 52
// end ;
31536: GO 31175
31538: POP
31539: POP
// end ;
31540: GO 30477
31542: POP
31543: POP
// result := result ^ buildings ;
31544: LD_ADDR_VAR 0 7
31548: PUSH
31549: LD_VAR 0 7
31553: PUSH
31554: LD_VAR 0 18
31558: ADD
31559: ST_TO_ADDR
// end else
31560: GO 31703
// begin for i = 1 to personel do
31562: LD_ADDR_VAR 0 8
31566: PUSH
31567: DOUBLE
31568: LD_INT 1
31570: DEC
31571: ST_TO_ADDR
31572: LD_VAR 0 6
31576: PUSH
31577: FOR_TO
31578: IFFALSE 31701
// begin if i > 4 then
31580: LD_VAR 0 8
31584: PUSH
31585: LD_INT 4
31587: GREATER
31588: IFFALSE 31592
// break ;
31590: GO 31701
// x := personel [ i ] ;
31592: LD_ADDR_VAR 0 13
31596: PUSH
31597: LD_VAR 0 6
31601: PUSH
31602: LD_VAR 0 8
31606: ARRAY
31607: ST_TO_ADDR
// if x = - 1 then
31608: LD_VAR 0 13
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: EQUAL
31617: IFFALSE 31621
// continue ;
31619: GO 31577
// PrepareHuman ( false , i , skill ) ;
31621: LD_INT 0
31623: PPUSH
31624: LD_VAR 0 8
31628: PPUSH
31629: LD_VAR 0 4
31633: PPUSH
31634: CALL_OW 380
// un := CreateHuman ;
31638: LD_ADDR_VAR 0 14
31642: PUSH
31643: CALL_OW 44
31647: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31648: LD_VAR 0 14
31652: PPUSH
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 250
31662: PPUSH
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 251
31672: PPUSH
31673: LD_INT 10
31675: PPUSH
31676: LD_INT 0
31678: PPUSH
31679: CALL_OW 50
// result := result ^ un ;
31683: LD_ADDR_VAR 0 7
31687: PUSH
31688: LD_VAR 0 7
31692: PUSH
31693: LD_VAR 0 14
31697: ADD
31698: ST_TO_ADDR
// end ;
31699: GO 31577
31701: POP
31702: POP
// end ; end ;
31703: LD_VAR 0 7
31707: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31708: LD_INT 0
31710: PPUSH
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
// result := false ;
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_INT 0
31733: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31734: LD_VAR 0 1
31738: NOT
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 266
31749: PUSH
31750: LD_INT 32
31752: PUSH
31753: LD_INT 33
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: IN
31760: NOT
31761: OR
31762: IFFALSE 31766
// exit ;
31764: GO 32875
// nat := GetNation ( tower ) ;
31766: LD_ADDR_VAR 0 12
31770: PUSH
31771: LD_VAR 0 1
31775: PPUSH
31776: CALL_OW 248
31780: ST_TO_ADDR
// side := GetSide ( tower ) ;
31781: LD_ADDR_VAR 0 16
31785: PUSH
31786: LD_VAR 0 1
31790: PPUSH
31791: CALL_OW 255
31795: ST_TO_ADDR
// x := GetX ( tower ) ;
31796: LD_ADDR_VAR 0 10
31800: PUSH
31801: LD_VAR 0 1
31805: PPUSH
31806: CALL_OW 250
31810: ST_TO_ADDR
// y := GetY ( tower ) ;
31811: LD_ADDR_VAR 0 11
31815: PUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 251
31825: ST_TO_ADDR
// if not x or not y then
31826: LD_VAR 0 10
31830: NOT
31831: PUSH
31832: LD_VAR 0 11
31836: NOT
31837: OR
31838: IFFALSE 31842
// exit ;
31840: GO 32875
// weapon := 0 ;
31842: LD_ADDR_VAR 0 18
31846: PUSH
31847: LD_INT 0
31849: ST_TO_ADDR
// fac_list := [ ] ;
31850: LD_ADDR_VAR 0 17
31854: PUSH
31855: EMPTY
31856: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: CALL_OW 274
31871: PPUSH
31872: LD_VAR 0 2
31876: PPUSH
31877: LD_INT 0
31879: PPUSH
31880: CALL 29446 0 3
31884: PPUSH
31885: LD_INT 30
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PPUSH
31895: CALL_OW 72
31899: ST_TO_ADDR
// if not factories then
31900: LD_VAR 0 6
31904: NOT
31905: IFFALSE 31909
// exit ;
31907: GO 32875
// for i in factories do
31909: LD_ADDR_VAR 0 8
31913: PUSH
31914: LD_VAR 0 6
31918: PUSH
31919: FOR_IN
31920: IFFALSE 31945
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31922: LD_ADDR_VAR 0 17
31926: PUSH
31927: LD_VAR 0 17
31931: PUSH
31932: LD_VAR 0 8
31936: PPUSH
31937: CALL_OW 478
31941: UNION
31942: ST_TO_ADDR
31943: GO 31919
31945: POP
31946: POP
// if not fac_list then
31947: LD_VAR 0 17
31951: NOT
31952: IFFALSE 31956
// exit ;
31954: GO 32875
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31956: LD_ADDR_VAR 0 5
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: LD_INT 9
31969: PUSH
31970: LD_INT 10
31972: PUSH
31973: LD_INT 6
31975: PUSH
31976: LD_INT 7
31978: PUSH
31979: LD_INT 11
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 27
31993: PUSH
31994: LD_INT 28
31996: PUSH
31997: LD_INT 26
31999: PUSH
32000: LD_INT 30
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 43
32011: PUSH
32012: LD_INT 44
32014: PUSH
32015: LD_INT 46
32017: PUSH
32018: LD_INT 45
32020: PUSH
32021: LD_INT 47
32023: PUSH
32024: LD_INT 49
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: PUSH
32040: LD_VAR 0 12
32044: ARRAY
32045: ST_TO_ADDR
// list := list isect fac_list ;
32046: LD_ADDR_VAR 0 5
32050: PUSH
32051: LD_VAR 0 5
32055: PUSH
32056: LD_VAR 0 17
32060: ISECT
32061: ST_TO_ADDR
// if not list then
32062: LD_VAR 0 5
32066: NOT
32067: IFFALSE 32071
// exit ;
32069: GO 32875
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32071: LD_VAR 0 12
32075: PUSH
32076: LD_INT 3
32078: EQUAL
32079: PUSH
32080: LD_INT 49
32082: PUSH
32083: LD_VAR 0 5
32087: IN
32088: AND
32089: PUSH
32090: LD_INT 31
32092: PPUSH
32093: LD_VAR 0 16
32097: PPUSH
32098: CALL_OW 321
32102: PUSH
32103: LD_INT 2
32105: EQUAL
32106: AND
32107: IFFALSE 32167
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32109: LD_INT 22
32111: PUSH
32112: LD_VAR 0 16
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 35
32123: PUSH
32124: LD_INT 49
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 91
32133: PUSH
32134: LD_VAR 0 1
32138: PUSH
32139: LD_INT 10
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: PPUSH
32152: CALL_OW 69
32156: NOT
32157: IFFALSE 32167
// weapon := ru_time_lapser ;
32159: LD_ADDR_VAR 0 18
32163: PUSH
32164: LD_INT 49
32166: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32167: LD_VAR 0 12
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: IN
32182: PUSH
32183: LD_INT 11
32185: PUSH
32186: LD_VAR 0 5
32190: IN
32191: PUSH
32192: LD_INT 30
32194: PUSH
32195: LD_VAR 0 5
32199: IN
32200: OR
32201: AND
32202: PUSH
32203: LD_INT 6
32205: PPUSH
32206: LD_VAR 0 16
32210: PPUSH
32211: CALL_OW 321
32215: PUSH
32216: LD_INT 2
32218: EQUAL
32219: AND
32220: IFFALSE 32385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32222: LD_INT 22
32224: PUSH
32225: LD_VAR 0 16
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: LD_INT 35
32239: PUSH
32240: LD_INT 11
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 35
32249: PUSH
32250: LD_INT 30
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 91
32264: PUSH
32265: LD_VAR 0 1
32269: PUSH
32270: LD_INT 18
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: PPUSH
32283: CALL_OW 69
32287: NOT
32288: PUSH
32289: LD_INT 22
32291: PUSH
32292: LD_VAR 0 16
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 32
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 30
32316: PUSH
32317: LD_INT 33
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 91
32331: PUSH
32332: LD_VAR 0 1
32336: PUSH
32337: LD_INT 12
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: PUSH
32358: LD_INT 2
32360: GREATER
32361: AND
32362: IFFALSE 32385
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32364: LD_ADDR_VAR 0 18
32368: PUSH
32369: LD_INT 11
32371: PUSH
32372: LD_INT 30
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_VAR 0 12
32383: ARRAY
32384: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32385: LD_VAR 0 18
32389: NOT
32390: PUSH
32391: LD_INT 40
32393: PPUSH
32394: LD_VAR 0 16
32398: PPUSH
32399: CALL_OW 321
32403: PUSH
32404: LD_INT 2
32406: EQUAL
32407: AND
32408: PUSH
32409: LD_INT 7
32411: PUSH
32412: LD_VAR 0 5
32416: IN
32417: PUSH
32418: LD_INT 28
32420: PUSH
32421: LD_VAR 0 5
32425: IN
32426: OR
32427: PUSH
32428: LD_INT 45
32430: PUSH
32431: LD_VAR 0 5
32435: IN
32436: OR
32437: AND
32438: IFFALSE 32692
// begin hex := GetHexInfo ( x , y ) ;
32440: LD_ADDR_VAR 0 4
32444: PUSH
32445: LD_VAR 0 10
32449: PPUSH
32450: LD_VAR 0 11
32454: PPUSH
32455: CALL_OW 546
32459: ST_TO_ADDR
// if hex [ 1 ] then
32460: LD_VAR 0 4
32464: PUSH
32465: LD_INT 1
32467: ARRAY
32468: IFFALSE 32472
// exit ;
32470: GO 32875
// height := hex [ 2 ] ;
32472: LD_ADDR_VAR 0 15
32476: PUSH
32477: LD_VAR 0 4
32481: PUSH
32482: LD_INT 2
32484: ARRAY
32485: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32486: LD_ADDR_VAR 0 14
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: ST_TO_ADDR
// for i in tmp do
32509: LD_ADDR_VAR 0 8
32513: PUSH
32514: LD_VAR 0 14
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32690
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32522: LD_ADDR_VAR 0 9
32526: PUSH
32527: LD_VAR 0 10
32531: PPUSH
32532: LD_VAR 0 8
32536: PPUSH
32537: LD_INT 5
32539: PPUSH
32540: CALL_OW 272
32544: PUSH
32545: LD_VAR 0 11
32549: PPUSH
32550: LD_VAR 0 8
32554: PPUSH
32555: LD_INT 5
32557: PPUSH
32558: CALL_OW 273
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32567: LD_VAR 0 9
32571: PUSH
32572: LD_INT 1
32574: ARRAY
32575: PPUSH
32576: LD_VAR 0 9
32580: PUSH
32581: LD_INT 2
32583: ARRAY
32584: PPUSH
32585: CALL_OW 488
32589: IFFALSE 32688
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32591: LD_ADDR_VAR 0 4
32595: PUSH
32596: LD_VAR 0 9
32600: PUSH
32601: LD_INT 1
32603: ARRAY
32604: PPUSH
32605: LD_VAR 0 9
32609: PUSH
32610: LD_INT 2
32612: ARRAY
32613: PPUSH
32614: CALL_OW 546
32618: ST_TO_ADDR
// if hex [ 1 ] then
32619: LD_VAR 0 4
32623: PUSH
32624: LD_INT 1
32626: ARRAY
32627: IFFALSE 32631
// continue ;
32629: GO 32519
// h := hex [ 2 ] ;
32631: LD_ADDR_VAR 0 13
32635: PUSH
32636: LD_VAR 0 4
32640: PUSH
32641: LD_INT 2
32643: ARRAY
32644: ST_TO_ADDR
// if h + 7 < height then
32645: LD_VAR 0 13
32649: PUSH
32650: LD_INT 7
32652: PLUS
32653: PUSH
32654: LD_VAR 0 15
32658: LESS
32659: IFFALSE 32688
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32661: LD_ADDR_VAR 0 18
32665: PUSH
32666: LD_INT 7
32668: PUSH
32669: LD_INT 28
32671: PUSH
32672: LD_INT 45
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: PUSH
32680: LD_VAR 0 12
32684: ARRAY
32685: ST_TO_ADDR
// break ;
32686: GO 32690
// end ; end ; end ;
32688: GO 32519
32690: POP
32691: POP
// end ; if not weapon then
32692: LD_VAR 0 18
32696: NOT
32697: IFFALSE 32757
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32699: LD_ADDR_VAR 0 5
32703: PUSH
32704: LD_VAR 0 5
32708: PUSH
32709: LD_INT 11
32711: PUSH
32712: LD_INT 30
32714: PUSH
32715: LD_INT 49
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: DIFF
32723: ST_TO_ADDR
// if not list then
32724: LD_VAR 0 5
32728: NOT
32729: IFFALSE 32733
// exit ;
32731: GO 32875
// weapon := list [ rand ( 1 , list ) ] ;
32733: LD_ADDR_VAR 0 18
32737: PUSH
32738: LD_VAR 0 5
32742: PUSH
32743: LD_INT 1
32745: PPUSH
32746: LD_VAR 0 5
32750: PPUSH
32751: CALL_OW 12
32755: ARRAY
32756: ST_TO_ADDR
// end ; if weapon then
32757: LD_VAR 0 18
32761: IFFALSE 32875
// begin tmp := CostOfWeapon ( weapon ) ;
32763: LD_ADDR_VAR 0 14
32767: PUSH
32768: LD_VAR 0 18
32772: PPUSH
32773: CALL_OW 451
32777: ST_TO_ADDR
// j := GetBase ( tower ) ;
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 274
32792: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32793: LD_VAR 0 9
32797: PPUSH
32798: LD_INT 1
32800: PPUSH
32801: CALL_OW 275
32805: PUSH
32806: LD_VAR 0 14
32810: PUSH
32811: LD_INT 1
32813: ARRAY
32814: GREATEREQUAL
32815: PUSH
32816: LD_VAR 0 9
32820: PPUSH
32821: LD_INT 2
32823: PPUSH
32824: CALL_OW 275
32828: PUSH
32829: LD_VAR 0 14
32833: PUSH
32834: LD_INT 2
32836: ARRAY
32837: GREATEREQUAL
32838: AND
32839: PUSH
32840: LD_VAR 0 9
32844: PPUSH
32845: LD_INT 3
32847: PPUSH
32848: CALL_OW 275
32852: PUSH
32853: LD_VAR 0 14
32857: PUSH
32858: LD_INT 3
32860: ARRAY
32861: GREATEREQUAL
32862: AND
32863: IFFALSE 32875
// result := weapon ;
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_VAR 0 18
32874: ST_TO_ADDR
// end ; end ;
32875: LD_VAR 0 3
32879: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
// result := true ;
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_INT 1
32891: ST_TO_ADDR
// if array1 = array2 then
32892: LD_VAR 0 1
32896: PUSH
32897: LD_VAR 0 2
32901: EQUAL
32902: IFFALSE 32962
// begin for i = 1 to array1 do
32904: LD_ADDR_VAR 0 4
32908: PUSH
32909: DOUBLE
32910: LD_INT 1
32912: DEC
32913: ST_TO_ADDR
32914: LD_VAR 0 1
32918: PUSH
32919: FOR_TO
32920: IFFALSE 32958
// if array1 [ i ] <> array2 [ i ] then
32922: LD_VAR 0 1
32926: PUSH
32927: LD_VAR 0 4
32931: ARRAY
32932: PUSH
32933: LD_VAR 0 2
32937: PUSH
32938: LD_VAR 0 4
32942: ARRAY
32943: NONEQUAL
32944: IFFALSE 32956
// begin result := false ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 0
32953: ST_TO_ADDR
// break ;
32954: GO 32958
// end ;
32956: GO 32919
32958: POP
32959: POP
// end else
32960: GO 32970
// result := false ;
32962: LD_ADDR_VAR 0 3
32966: PUSH
32967: LD_INT 0
32969: ST_TO_ADDR
// end ;
32970: LD_VAR 0 3
32974: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
// if not array1 or not array2 then
32979: LD_VAR 0 1
32983: NOT
32984: PUSH
32985: LD_VAR 0 2
32989: NOT
32990: OR
32991: IFFALSE 32995
// exit ;
32993: GO 33059
// result := true ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: ST_TO_ADDR
// for i = 1 to array1 do
33003: LD_ADDR_VAR 0 4
33007: PUSH
33008: DOUBLE
33009: LD_INT 1
33011: DEC
33012: ST_TO_ADDR
33013: LD_VAR 0 1
33017: PUSH
33018: FOR_TO
33019: IFFALSE 33057
// if array1 [ i ] <> array2 [ i ] then
33021: LD_VAR 0 1
33025: PUSH
33026: LD_VAR 0 4
33030: ARRAY
33031: PUSH
33032: LD_VAR 0 2
33036: PUSH
33037: LD_VAR 0 4
33041: ARRAY
33042: NONEQUAL
33043: IFFALSE 33055
// begin result := false ;
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_INT 0
33052: ST_TO_ADDR
// break ;
33053: GO 33057
// end ;
33055: GO 33018
33057: POP
33058: POP
// end ;
33059: LD_VAR 0 3
33063: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33064: LD_INT 0
33066: PPUSH
33067: PPUSH
33068: PPUSH
// pom := GetBase ( fac ) ;
33069: LD_ADDR_VAR 0 5
33073: PUSH
33074: LD_VAR 0 1
33078: PPUSH
33079: CALL_OW 274
33083: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33084: LD_ADDR_VAR 0 4
33088: PUSH
33089: LD_VAR 0 2
33093: PUSH
33094: LD_INT 1
33096: ARRAY
33097: PPUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 2
33105: ARRAY
33106: PPUSH
33107: LD_VAR 0 2
33111: PUSH
33112: LD_INT 3
33114: ARRAY
33115: PPUSH
33116: LD_VAR 0 2
33120: PUSH
33121: LD_INT 4
33123: ARRAY
33124: PPUSH
33125: CALL_OW 449
33129: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_VAR 0 5
33139: PPUSH
33140: LD_INT 1
33142: PPUSH
33143: CALL_OW 275
33147: PUSH
33148: LD_VAR 0 4
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: GREATEREQUAL
33157: PUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: LD_INT 2
33165: PPUSH
33166: CALL_OW 275
33170: PUSH
33171: LD_VAR 0 4
33175: PUSH
33176: LD_INT 2
33178: ARRAY
33179: GREATEREQUAL
33180: AND
33181: PUSH
33182: LD_VAR 0 5
33186: PPUSH
33187: LD_INT 3
33189: PPUSH
33190: CALL_OW 275
33194: PUSH
33195: LD_VAR 0 4
33199: PUSH
33200: LD_INT 3
33202: ARRAY
33203: GREATEREQUAL
33204: AND
33205: ST_TO_ADDR
// end ;
33206: LD_VAR 0 3
33210: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
// pom := GetBase ( building ) ;
33217: LD_ADDR_VAR 0 3
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 274
33231: ST_TO_ADDR
// if not pom then
33232: LD_VAR 0 3
33236: NOT
33237: IFFALSE 33241
// exit ;
33239: GO 33411
// btype := GetBType ( building ) ;
33241: LD_ADDR_VAR 0 5
33245: PUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: CALL_OW 266
33255: ST_TO_ADDR
// if btype = b_armoury then
33256: LD_VAR 0 5
33260: PUSH
33261: LD_INT 4
33263: EQUAL
33264: IFFALSE 33274
// btype := b_barracks ;
33266: LD_ADDR_VAR 0 5
33270: PUSH
33271: LD_INT 5
33273: ST_TO_ADDR
// if btype = b_depot then
33274: LD_VAR 0 5
33278: PUSH
33279: LD_INT 0
33281: EQUAL
33282: IFFALSE 33292
// btype := b_warehouse ;
33284: LD_ADDR_VAR 0 5
33288: PUSH
33289: LD_INT 1
33291: ST_TO_ADDR
// if btype = b_workshop then
33292: LD_VAR 0 5
33296: PUSH
33297: LD_INT 2
33299: EQUAL
33300: IFFALSE 33310
// btype := b_factory ;
33302: LD_ADDR_VAR 0 5
33306: PUSH
33307: LD_INT 3
33309: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33310: LD_ADDR_VAR 0 4
33314: PUSH
33315: LD_VAR 0 5
33319: PPUSH
33320: LD_VAR 0 1
33324: PPUSH
33325: CALL_OW 248
33329: PPUSH
33330: CALL_OW 450
33334: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33335: LD_ADDR_VAR 0 2
33339: PUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: LD_INT 1
33347: PPUSH
33348: CALL_OW 275
33352: PUSH
33353: LD_VAR 0 4
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: GREATEREQUAL
33362: PUSH
33363: LD_VAR 0 3
33367: PPUSH
33368: LD_INT 2
33370: PPUSH
33371: CALL_OW 275
33375: PUSH
33376: LD_VAR 0 4
33380: PUSH
33381: LD_INT 2
33383: ARRAY
33384: GREATEREQUAL
33385: AND
33386: PUSH
33387: LD_VAR 0 3
33391: PPUSH
33392: LD_INT 3
33394: PPUSH
33395: CALL_OW 275
33399: PUSH
33400: LD_VAR 0 4
33404: PUSH
33405: LD_INT 3
33407: ARRAY
33408: GREATEREQUAL
33409: AND
33410: ST_TO_ADDR
// end ;
33411: LD_VAR 0 2
33415: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33416: LD_INT 0
33418: PPUSH
33419: PPUSH
33420: PPUSH
// pom := GetBase ( building ) ;
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_VAR 0 1
33430: PPUSH
33431: CALL_OW 274
33435: ST_TO_ADDR
// if not pom then
33436: LD_VAR 0 4
33440: NOT
33441: IFFALSE 33445
// exit ;
33443: GO 33546
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33445: LD_ADDR_VAR 0 5
33449: PUSH
33450: LD_VAR 0 2
33454: PPUSH
33455: LD_VAR 0 1
33459: PPUSH
33460: CALL_OW 248
33464: PPUSH
33465: CALL_OW 450
33469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_VAR 0 4
33479: PPUSH
33480: LD_INT 1
33482: PPUSH
33483: CALL_OW 275
33487: PUSH
33488: LD_VAR 0 5
33492: PUSH
33493: LD_INT 1
33495: ARRAY
33496: GREATEREQUAL
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: LD_INT 2
33505: PPUSH
33506: CALL_OW 275
33510: PUSH
33511: LD_VAR 0 5
33515: PUSH
33516: LD_INT 2
33518: ARRAY
33519: GREATEREQUAL
33520: AND
33521: PUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: LD_INT 3
33529: PPUSH
33530: CALL_OW 275
33534: PUSH
33535: LD_VAR 0 5
33539: PUSH
33540: LD_INT 3
33542: ARRAY
33543: GREATEREQUAL
33544: AND
33545: ST_TO_ADDR
// end ;
33546: LD_VAR 0 3
33550: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33551: LD_INT 0
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
// result := false ;
33564: LD_ADDR_VAR 0 8
33568: PUSH
33569: LD_INT 0
33571: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33572: LD_VAR 0 5
33576: NOT
33577: PUSH
33578: LD_VAR 0 1
33582: NOT
33583: OR
33584: PUSH
33585: LD_VAR 0 2
33589: NOT
33590: OR
33591: PUSH
33592: LD_VAR 0 3
33596: NOT
33597: OR
33598: IFFALSE 33602
// exit ;
33600: GO 34416
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33602: LD_ADDR_VAR 0 14
33606: PUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: LD_VAR 0 2
33616: PPUSH
33617: LD_VAR 0 3
33621: PPUSH
33622: LD_VAR 0 4
33626: PPUSH
33627: LD_VAR 0 5
33631: PUSH
33632: LD_INT 1
33634: ARRAY
33635: PPUSH
33636: CALL_OW 248
33640: PPUSH
33641: LD_INT 0
33643: PPUSH
33644: CALL 35669 0 6
33648: ST_TO_ADDR
// if not hexes then
33649: LD_VAR 0 14
33653: NOT
33654: IFFALSE 33658
// exit ;
33656: GO 34416
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33658: LD_ADDR_VAR 0 17
33662: PUSH
33663: LD_VAR 0 5
33667: PPUSH
33668: LD_INT 22
33670: PUSH
33671: LD_VAR 0 13
33675: PPUSH
33676: CALL_OW 255
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 30
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 30
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PPUSH
33717: CALL_OW 72
33721: ST_TO_ADDR
// for i = 1 to hexes do
33722: LD_ADDR_VAR 0 9
33726: PUSH
33727: DOUBLE
33728: LD_INT 1
33730: DEC
33731: ST_TO_ADDR
33732: LD_VAR 0 14
33736: PUSH
33737: FOR_TO
33738: IFFALSE 34414
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33740: LD_ADDR_VAR 0 13
33744: PUSH
33745: LD_VAR 0 14
33749: PUSH
33750: LD_VAR 0 9
33754: ARRAY
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: PPUSH
33760: LD_VAR 0 14
33764: PUSH
33765: LD_VAR 0 9
33769: ARRAY
33770: PUSH
33771: LD_INT 2
33773: ARRAY
33774: PPUSH
33775: CALL_OW 428
33779: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33780: LD_VAR 0 14
33784: PUSH
33785: LD_VAR 0 9
33789: ARRAY
33790: PUSH
33791: LD_INT 1
33793: ARRAY
33794: PPUSH
33795: LD_VAR 0 14
33799: PUSH
33800: LD_VAR 0 9
33804: ARRAY
33805: PUSH
33806: LD_INT 2
33808: ARRAY
33809: PPUSH
33810: CALL_OW 351
33814: PUSH
33815: LD_VAR 0 14
33819: PUSH
33820: LD_VAR 0 9
33824: ARRAY
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PPUSH
33830: LD_VAR 0 14
33834: PUSH
33835: LD_VAR 0 9
33839: ARRAY
33840: PUSH
33841: LD_INT 2
33843: ARRAY
33844: PPUSH
33845: CALL_OW 488
33849: NOT
33850: OR
33851: PUSH
33852: LD_VAR 0 13
33856: PPUSH
33857: CALL_OW 247
33861: PUSH
33862: LD_INT 3
33864: EQUAL
33865: OR
33866: IFFALSE 33872
// exit ;
33868: POP
33869: POP
33870: GO 34416
// if not tmp then
33872: LD_VAR 0 13
33876: NOT
33877: IFFALSE 33881
// continue ;
33879: GO 33737
// result := true ;
33881: LD_ADDR_VAR 0 8
33885: PUSH
33886: LD_INT 1
33888: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33889: LD_VAR 0 6
33893: PUSH
33894: LD_VAR 0 13
33898: PPUSH
33899: CALL_OW 247
33903: PUSH
33904: LD_INT 2
33906: EQUAL
33907: AND
33908: PUSH
33909: LD_VAR 0 13
33913: PPUSH
33914: CALL_OW 263
33918: PUSH
33919: LD_INT 1
33921: EQUAL
33922: AND
33923: IFFALSE 34087
// begin if IsDrivenBy ( tmp ) then
33925: LD_VAR 0 13
33929: PPUSH
33930: CALL_OW 311
33934: IFFALSE 33938
// continue ;
33936: GO 33737
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33938: LD_VAR 0 6
33942: PPUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 60
33948: PUSH
33949: EMPTY
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: LD_INT 55
33961: PUSH
33962: EMPTY
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 72
33977: IFFALSE 34085
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33979: LD_ADDR_VAR 0 18
33983: PUSH
33984: LD_VAR 0 6
33988: PPUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 60
33994: PUSH
33995: EMPTY
33996: LIST
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 55
34007: PUSH
34008: EMPTY
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PPUSH
34019: CALL_OW 72
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: ST_TO_ADDR
// if IsInUnit ( driver ) then
34028: LD_VAR 0 18
34032: PPUSH
34033: CALL_OW 310
34037: IFFALSE 34048
// ComExit ( driver ) ;
34039: LD_VAR 0 18
34043: PPUSH
34044: CALL 59450 0 1
// AddComEnterUnit ( driver , tmp ) ;
34048: LD_VAR 0 18
34052: PPUSH
34053: LD_VAR 0 13
34057: PPUSH
34058: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34062: LD_VAR 0 18
34066: PPUSH
34067: LD_VAR 0 7
34071: PPUSH
34072: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34076: LD_VAR 0 18
34080: PPUSH
34081: CALL_OW 181
// end ; continue ;
34085: GO 33737
// end ; if not cleaners or not tmp in cleaners then
34087: LD_VAR 0 6
34091: NOT
34092: PUSH
34093: LD_VAR 0 13
34097: PUSH
34098: LD_VAR 0 6
34102: IN
34103: NOT
34104: OR
34105: IFFALSE 34412
// begin if dep then
34107: LD_VAR 0 17
34111: IFFALSE 34247
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34113: LD_ADDR_VAR 0 16
34117: PUSH
34118: LD_VAR 0 17
34122: PUSH
34123: LD_INT 1
34125: ARRAY
34126: PPUSH
34127: CALL_OW 250
34131: PPUSH
34132: LD_VAR 0 17
34136: PUSH
34137: LD_INT 1
34139: ARRAY
34140: PPUSH
34141: CALL_OW 254
34145: PPUSH
34146: LD_INT 5
34148: PPUSH
34149: CALL_OW 272
34153: PUSH
34154: LD_VAR 0 17
34158: PUSH
34159: LD_INT 1
34161: ARRAY
34162: PPUSH
34163: CALL_OW 251
34167: PPUSH
34168: LD_VAR 0 17
34172: PUSH
34173: LD_INT 1
34175: ARRAY
34176: PPUSH
34177: CALL_OW 254
34181: PPUSH
34182: LD_INT 5
34184: PPUSH
34185: CALL_OW 273
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34194: LD_VAR 0 16
34198: PUSH
34199: LD_INT 1
34201: ARRAY
34202: PPUSH
34203: LD_VAR 0 16
34207: PUSH
34208: LD_INT 2
34210: ARRAY
34211: PPUSH
34212: CALL_OW 488
34216: IFFALSE 34247
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34218: LD_VAR 0 13
34222: PPUSH
34223: LD_VAR 0 16
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: LD_VAR 0 16
34236: PUSH
34237: LD_INT 2
34239: ARRAY
34240: PPUSH
34241: CALL_OW 111
// continue ;
34245: GO 33737
// end ; end ; r := GetDir ( tmp ) ;
34247: LD_ADDR_VAR 0 15
34251: PUSH
34252: LD_VAR 0 13
34256: PPUSH
34257: CALL_OW 254
34261: ST_TO_ADDR
// if r = 5 then
34262: LD_VAR 0 15
34266: PUSH
34267: LD_INT 5
34269: EQUAL
34270: IFFALSE 34280
// r := 0 ;
34272: LD_ADDR_VAR 0 15
34276: PUSH
34277: LD_INT 0
34279: ST_TO_ADDR
// for j = r to 5 do
34280: LD_ADDR_VAR 0 10
34284: PUSH
34285: DOUBLE
34286: LD_VAR 0 15
34290: DEC
34291: ST_TO_ADDR
34292: LD_INT 5
34294: PUSH
34295: FOR_TO
34296: IFFALSE 34410
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34298: LD_ADDR_VAR 0 11
34302: PUSH
34303: LD_VAR 0 13
34307: PPUSH
34308: CALL_OW 250
34312: PPUSH
34313: LD_VAR 0 10
34317: PPUSH
34318: LD_INT 2
34320: PPUSH
34321: CALL_OW 272
34325: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34326: LD_ADDR_VAR 0 12
34330: PUSH
34331: LD_VAR 0 13
34335: PPUSH
34336: CALL_OW 251
34340: PPUSH
34341: LD_VAR 0 10
34345: PPUSH
34346: LD_INT 2
34348: PPUSH
34349: CALL_OW 273
34353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34354: LD_VAR 0 11
34358: PPUSH
34359: LD_VAR 0 12
34363: PPUSH
34364: CALL_OW 488
34368: PUSH
34369: LD_VAR 0 11
34373: PPUSH
34374: LD_VAR 0 12
34378: PPUSH
34379: CALL_OW 428
34383: NOT
34384: AND
34385: IFFALSE 34408
// begin ComMoveXY ( tmp , _x , _y ) ;
34387: LD_VAR 0 13
34391: PPUSH
34392: LD_VAR 0 11
34396: PPUSH
34397: LD_VAR 0 12
34401: PPUSH
34402: CALL_OW 111
// break ;
34406: GO 34410
// end ; end ;
34408: GO 34295
34410: POP
34411: POP
// end ; end ;
34412: GO 33737
34414: POP
34415: POP
// end ;
34416: LD_VAR 0 8
34420: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34421: LD_INT 0
34423: PPUSH
// result := true ;
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_INT 1
34431: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34432: LD_VAR 0 2
34436: PUSH
34437: LD_INT 24
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34451
34443: LD_INT 33
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34476
34451: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 32
34459: PPUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL_OW 321
34469: PUSH
34470: LD_INT 2
34472: EQUAL
34473: ST_TO_ADDR
34474: GO 34792
34476: LD_INT 20
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34484
34482: GO 34509
34484: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34485: LD_ADDR_VAR 0 3
34489: PUSH
34490: LD_INT 6
34492: PPUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 321
34502: PUSH
34503: LD_INT 2
34505: EQUAL
34506: ST_TO_ADDR
34507: GO 34792
34509: LD_INT 22
34511: DOUBLE
34512: EQUAL
34513: IFTRUE 34523
34515: LD_INT 36
34517: DOUBLE
34518: EQUAL
34519: IFTRUE 34523
34521: GO 34548
34523: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_INT 15
34531: PPUSH
34532: LD_VAR 0 1
34536: PPUSH
34537: CALL_OW 321
34541: PUSH
34542: LD_INT 2
34544: EQUAL
34545: ST_TO_ADDR
34546: GO 34792
34548: LD_INT 30
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 34581
34556: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 20
34564: PPUSH
34565: LD_VAR 0 1
34569: PPUSH
34570: CALL_OW 321
34574: PUSH
34575: LD_INT 2
34577: EQUAL
34578: ST_TO_ADDR
34579: GO 34792
34581: LD_INT 28
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34595
34587: LD_INT 21
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34620
34595: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34596: LD_ADDR_VAR 0 3
34600: PUSH
34601: LD_INT 21
34603: PPUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: CALL_OW 321
34613: PUSH
34614: LD_INT 2
34616: EQUAL
34617: ST_TO_ADDR
34618: GO 34792
34620: LD_INT 16
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34628
34626: GO 34653
34628: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_INT 84
34636: PPUSH
34637: LD_VAR 0 1
34641: PPUSH
34642: CALL_OW 321
34646: PUSH
34647: LD_INT 2
34649: EQUAL
34650: ST_TO_ADDR
34651: GO 34792
34653: LD_INT 19
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34667
34659: LD_INT 23
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34692
34667: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 83
34675: PPUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 321
34685: PUSH
34686: LD_INT 2
34688: EQUAL
34689: ST_TO_ADDR
34690: GO 34792
34692: LD_INT 17
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34700
34698: GO 34725
34700: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34701: LD_ADDR_VAR 0 3
34705: PUSH
34706: LD_INT 39
34708: PPUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 321
34718: PUSH
34719: LD_INT 2
34721: EQUAL
34722: ST_TO_ADDR
34723: GO 34792
34725: LD_INT 18
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34758
34733: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34734: LD_ADDR_VAR 0 3
34738: PUSH
34739: LD_INT 40
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 321
34751: PUSH
34752: LD_INT 2
34754: EQUAL
34755: ST_TO_ADDR
34756: GO 34792
34758: LD_INT 27
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34791
34766: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_INT 35
34774: PPUSH
34775: LD_VAR 0 1
34779: PPUSH
34780: CALL_OW 321
34784: PUSH
34785: LD_INT 2
34787: EQUAL
34788: ST_TO_ADDR
34789: GO 34792
34791: POP
// end ;
34792: LD_VAR 0 3
34796: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34797: LD_INT 0
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
// result := false ;
34810: LD_ADDR_VAR 0 6
34814: PUSH
34815: LD_INT 0
34817: ST_TO_ADDR
// if btype = b_depot then
34818: LD_VAR 0 2
34822: PUSH
34823: LD_INT 0
34825: EQUAL
34826: IFFALSE 34838
// begin result := true ;
34828: LD_ADDR_VAR 0 6
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
// exit ;
34836: GO 35664
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34838: LD_VAR 0 1
34842: NOT
34843: PUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: CALL_OW 266
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: IN
34864: NOT
34865: OR
34866: PUSH
34867: LD_VAR 0 2
34871: NOT
34872: OR
34873: PUSH
34874: LD_VAR 0 5
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 4
34893: PUSH
34894: LD_INT 5
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: IN
34905: NOT
34906: OR
34907: PUSH
34908: LD_VAR 0 3
34912: PPUSH
34913: LD_VAR 0 4
34917: PPUSH
34918: CALL_OW 488
34922: NOT
34923: OR
34924: IFFALSE 34928
// exit ;
34926: GO 35664
// side := GetSide ( depot ) ;
34928: LD_ADDR_VAR 0 9
34932: PUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 255
34942: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34943: LD_VAR 0 9
34947: PPUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL 34421 0 2
34957: NOT
34958: IFFALSE 34962
// exit ;
34960: GO 35664
// pom := GetBase ( depot ) ;
34962: LD_ADDR_VAR 0 10
34966: PUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 274
34976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34977: LD_ADDR_VAR 0 11
34981: PUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 248
34996: PPUSH
34997: CALL_OW 450
35001: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35002: LD_VAR 0 10
35006: PPUSH
35007: LD_INT 1
35009: PPUSH
35010: CALL_OW 275
35014: PUSH
35015: LD_VAR 0 11
35019: PUSH
35020: LD_INT 1
35022: ARRAY
35023: GREATEREQUAL
35024: PUSH
35025: LD_VAR 0 10
35029: PPUSH
35030: LD_INT 2
35032: PPUSH
35033: CALL_OW 275
35037: PUSH
35038: LD_VAR 0 11
35042: PUSH
35043: LD_INT 2
35045: ARRAY
35046: GREATEREQUAL
35047: AND
35048: PUSH
35049: LD_VAR 0 10
35053: PPUSH
35054: LD_INT 3
35056: PPUSH
35057: CALL_OW 275
35061: PUSH
35062: LD_VAR 0 11
35066: PUSH
35067: LD_INT 3
35069: ARRAY
35070: GREATEREQUAL
35071: AND
35072: NOT
35073: IFFALSE 35077
// exit ;
35075: GO 35664
// if GetBType ( depot ) = b_depot then
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 266
35086: PUSH
35087: LD_INT 0
35089: EQUAL
35090: IFFALSE 35102
// dist := 28 else
35092: LD_ADDR_VAR 0 14
35096: PUSH
35097: LD_INT 28
35099: ST_TO_ADDR
35100: GO 35110
// dist := 36 ;
35102: LD_ADDR_VAR 0 14
35106: PUSH
35107: LD_INT 36
35109: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35110: LD_VAR 0 1
35114: PPUSH
35115: LD_VAR 0 3
35119: PPUSH
35120: LD_VAR 0 4
35124: PPUSH
35125: CALL_OW 297
35129: PUSH
35130: LD_VAR 0 14
35134: GREATER
35135: IFFALSE 35139
// exit ;
35137: GO 35664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35139: LD_ADDR_VAR 0 12
35143: PUSH
35144: LD_VAR 0 2
35148: PPUSH
35149: LD_VAR 0 3
35153: PPUSH
35154: LD_VAR 0 4
35158: PPUSH
35159: LD_VAR 0 5
35163: PPUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 248
35173: PPUSH
35174: LD_INT 0
35176: PPUSH
35177: CALL 35669 0 6
35181: ST_TO_ADDR
// if not hexes then
35182: LD_VAR 0 12
35186: NOT
35187: IFFALSE 35191
// exit ;
35189: GO 35664
// hex := GetHexInfo ( x , y ) ;
35191: LD_ADDR_VAR 0 15
35195: PUSH
35196: LD_VAR 0 3
35200: PPUSH
35201: LD_VAR 0 4
35205: PPUSH
35206: CALL_OW 546
35210: ST_TO_ADDR
// if hex [ 1 ] then
35211: LD_VAR 0 15
35215: PUSH
35216: LD_INT 1
35218: ARRAY
35219: IFFALSE 35223
// exit ;
35221: GO 35664
// height := hex [ 2 ] ;
35223: LD_ADDR_VAR 0 13
35227: PUSH
35228: LD_VAR 0 15
35232: PUSH
35233: LD_INT 2
35235: ARRAY
35236: ST_TO_ADDR
// for i = 1 to hexes do
35237: LD_ADDR_VAR 0 7
35241: PUSH
35242: DOUBLE
35243: LD_INT 1
35245: DEC
35246: ST_TO_ADDR
35247: LD_VAR 0 12
35251: PUSH
35252: FOR_TO
35253: IFFALSE 35583
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35255: LD_VAR 0 12
35259: PUSH
35260: LD_VAR 0 7
35264: ARRAY
35265: PUSH
35266: LD_INT 1
35268: ARRAY
35269: PPUSH
35270: LD_VAR 0 12
35274: PUSH
35275: LD_VAR 0 7
35279: ARRAY
35280: PUSH
35281: LD_INT 2
35283: ARRAY
35284: PPUSH
35285: CALL_OW 488
35289: NOT
35290: PUSH
35291: LD_VAR 0 12
35295: PUSH
35296: LD_VAR 0 7
35300: ARRAY
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: PPUSH
35306: LD_VAR 0 12
35310: PUSH
35311: LD_VAR 0 7
35315: ARRAY
35316: PUSH
35317: LD_INT 2
35319: ARRAY
35320: PPUSH
35321: CALL_OW 428
35325: PUSH
35326: LD_INT 0
35328: GREATER
35329: OR
35330: PUSH
35331: LD_VAR 0 12
35335: PUSH
35336: LD_VAR 0 7
35340: ARRAY
35341: PUSH
35342: LD_INT 1
35344: ARRAY
35345: PPUSH
35346: LD_VAR 0 12
35350: PUSH
35351: LD_VAR 0 7
35355: ARRAY
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: PPUSH
35361: CALL_OW 351
35365: OR
35366: IFFALSE 35372
// exit ;
35368: POP
35369: POP
35370: GO 35664
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35372: LD_ADDR_VAR 0 8
35376: PUSH
35377: LD_VAR 0 12
35381: PUSH
35382: LD_VAR 0 7
35386: ARRAY
35387: PUSH
35388: LD_INT 1
35390: ARRAY
35391: PPUSH
35392: LD_VAR 0 12
35396: PUSH
35397: LD_VAR 0 7
35401: ARRAY
35402: PUSH
35403: LD_INT 2
35405: ARRAY
35406: PPUSH
35407: CALL_OW 546
35411: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35412: LD_VAR 0 8
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: PUSH
35421: LD_VAR 0 8
35425: PUSH
35426: LD_INT 2
35428: ARRAY
35429: PUSH
35430: LD_VAR 0 13
35434: PUSH
35435: LD_INT 2
35437: PLUS
35438: GREATER
35439: OR
35440: PUSH
35441: LD_VAR 0 8
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: PUSH
35450: LD_VAR 0 13
35454: PUSH
35455: LD_INT 2
35457: MINUS
35458: LESS
35459: OR
35460: PUSH
35461: LD_VAR 0 8
35465: PUSH
35466: LD_INT 3
35468: ARRAY
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 8
35475: PUSH
35476: LD_INT 9
35478: PUSH
35479: LD_INT 10
35481: PUSH
35482: LD_INT 11
35484: PUSH
35485: LD_INT 12
35487: PUSH
35488: LD_INT 13
35490: PUSH
35491: LD_INT 16
35493: PUSH
35494: LD_INT 17
35496: PUSH
35497: LD_INT 18
35499: PUSH
35500: LD_INT 19
35502: PUSH
35503: LD_INT 20
35505: PUSH
35506: LD_INT 21
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: IN
35524: NOT
35525: OR
35526: PUSH
35527: LD_VAR 0 8
35531: PUSH
35532: LD_INT 5
35534: ARRAY
35535: NOT
35536: OR
35537: PUSH
35538: LD_VAR 0 8
35542: PUSH
35543: LD_INT 6
35545: ARRAY
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 7
35555: PUSH
35556: LD_INT 9
35558: PUSH
35559: LD_INT 10
35561: PUSH
35562: LD_INT 11
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: IN
35573: NOT
35574: OR
35575: IFFALSE 35581
// exit ;
35577: POP
35578: POP
35579: GO 35664
// end ;
35581: GO 35252
35583: POP
35584: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35585: LD_VAR 0 9
35589: PPUSH
35590: LD_VAR 0 3
35594: PPUSH
35595: LD_VAR 0 4
35599: PPUSH
35600: LD_INT 20
35602: PPUSH
35603: CALL 27587 0 4
35607: PUSH
35608: LD_INT 4
35610: ARRAY
35611: IFFALSE 35615
// exit ;
35613: GO 35664
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35615: LD_VAR 0 2
35619: PUSH
35620: LD_INT 29
35622: PUSH
35623: LD_INT 30
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: IN
35630: PUSH
35631: LD_VAR 0 3
35635: PPUSH
35636: LD_VAR 0 4
35640: PPUSH
35641: LD_VAR 0 9
35645: PPUSH
35646: CALL_OW 440
35650: NOT
35651: AND
35652: IFFALSE 35656
// exit ;
35654: GO 35664
// result := true ;
35656: LD_ADDR_VAR 0 6
35660: PUSH
35661: LD_INT 1
35663: ST_TO_ADDR
// end ;
35664: LD_VAR 0 6
35668: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35669: LD_INT 0
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
// result = [ ] ;
35729: LD_ADDR_VAR 0 7
35733: PUSH
35734: EMPTY
35735: ST_TO_ADDR
// temp_list = [ ] ;
35736: LD_ADDR_VAR 0 9
35740: PUSH
35741: EMPTY
35742: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35743: LD_VAR 0 4
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: LD_INT 3
35759: PUSH
35760: LD_INT 4
35762: PUSH
35763: LD_INT 5
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: IN
35774: NOT
35775: PUSH
35776: LD_VAR 0 1
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: IN
35791: PUSH
35792: LD_VAR 0 5
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: IN
35811: NOT
35812: AND
35813: OR
35814: IFFALSE 35818
// exit ;
35816: GO 54209
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35818: LD_VAR 0 1
35822: PUSH
35823: LD_INT 6
35825: PUSH
35826: LD_INT 7
35828: PUSH
35829: LD_INT 8
35831: PUSH
35832: LD_INT 13
35834: PUSH
35835: LD_INT 12
35837: PUSH
35838: LD_INT 15
35840: PUSH
35841: LD_INT 11
35843: PUSH
35844: LD_INT 14
35846: PUSH
35847: LD_INT 10
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: IN
35861: IFFALSE 35871
// btype = b_lab ;
35863: LD_ADDR_VAR 0 1
35867: PUSH
35868: LD_INT 6
35870: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35871: LD_VAR 0 6
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: IN
35890: NOT
35891: PUSH
35892: LD_VAR 0 1
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: LD_INT 6
35911: PUSH
35912: LD_INT 36
35914: PUSH
35915: LD_INT 4
35917: PUSH
35918: LD_INT 5
35920: PUSH
35921: LD_INT 31
35923: PUSH
35924: LD_INT 32
35926: PUSH
35927: LD_INT 33
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: IN
35943: NOT
35944: PUSH
35945: LD_VAR 0 6
35949: PUSH
35950: LD_INT 1
35952: EQUAL
35953: AND
35954: OR
35955: PUSH
35956: LD_VAR 0 1
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 3
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: IN
35971: NOT
35972: PUSH
35973: LD_VAR 0 6
35977: PUSH
35978: LD_INT 2
35980: EQUAL
35981: AND
35982: OR
35983: IFFALSE 35993
// mode = 0 ;
35985: LD_ADDR_VAR 0 6
35989: PUSH
35990: LD_INT 0
35992: ST_TO_ADDR
// case mode of 0 :
35993: LD_VAR 0 6
35997: PUSH
35998: LD_INT 0
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 47459
36006: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36007: LD_ADDR_VAR 0 11
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 2
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 3
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36200: LD_ADDR_VAR 0 12
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 3
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36396: LD_ADDR_VAR 0 13
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: LD_INT 3
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 3
36555: NEG
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: LD_INT 3
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36595: LD_ADDR_VAR 0 14
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 3
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 3
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36791: LD_ADDR_VAR 0 15
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36984: LD_ADDR_VAR 0 16
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37177: LD_ADDR_VAR 0 17
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37407: LD_ADDR_VAR 0 18
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: LD_INT 2
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37637: LD_ADDR_VAR 0 19
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37867: LD_ADDR_VAR 0 20
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38097: LD_ADDR_VAR 0 21
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38327: LD_ADDR_VAR 0 22
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38557: LD_ADDR_VAR 0 23
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 3
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38837: LD_ADDR_VAR 0 24
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39113: LD_ADDR_VAR 0 25
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 3
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39387: LD_ADDR_VAR 0 26
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 2
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39663: LD_ADDR_VAR 0 27
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39943: LD_ADDR_VAR 0 28
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 3
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 3
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40225: LD_ADDR_VAR 0 29
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 3
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40504: LD_ADDR_VAR 0 30
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 3
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40782: LD_ADDR_VAR 0 31
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 3
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41060: LD_ADDR_VAR 0 32
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 3
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41338: LD_ADDR_VAR 0 33
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 3
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41617: LD_ADDR_VAR 0 34
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41897: LD_ADDR_VAR 0 35
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42009: LD_ADDR_VAR 0 36
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42121: LD_ADDR_VAR 0 37
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42233: LD_ADDR_VAR 0 38
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42345: LD_ADDR_VAR 0 39
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42457: LD_ADDR_VAR 0 40
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42569: LD_ADDR_VAR 0 41
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42919: LD_ADDR_VAR 0 42
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 3
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43269: LD_ADDR_VAR 0 43
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43617: LD_ADDR_VAR 0 44
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 3
43926: NEG
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43967: LD_ADDR_VAR 0 45
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 3
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: NEG
44277: PUSH
44278: LD_INT 3
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44317: LD_ADDR_VAR 0 46
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 3
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44665: LD_ADDR_VAR 0 47
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44816: LD_ADDR_VAR 0 48
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44963: LD_ADDR_VAR 0 49
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45107: LD_ADDR_VAR 0 50
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45251: LD_ADDR_VAR 0 51
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45398: LD_ADDR_VAR 0 52
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45549: LD_ADDR_VAR 0 53
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45779: LD_ADDR_VAR 0 54
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46009: LD_ADDR_VAR 0 55
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46239: LD_ADDR_VAR 0 56
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46469: LD_ADDR_VAR 0 57
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46699: LD_ADDR_VAR 0 58
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46929: LD_ADDR_VAR 0 59
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47017: LD_ADDR_VAR 0 60
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47105: LD_ADDR_VAR 0 61
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47193: LD_ADDR_VAR 0 62
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47281: LD_ADDR_VAR 0 63
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47369: LD_ADDR_VAR 0 64
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// end ; 1 :
47457: GO 53354
47459: LD_INT 1
47461: DOUBLE
47462: EQUAL
47463: IFTRUE 47467
47465: GO 50090
47467: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47468: LD_ADDR_VAR 0 11
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 3
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47512: LD_ADDR_VAR 0 12
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47553: LD_ADDR_VAR 0 13
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47593: LD_ADDR_VAR 0 14
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47634: LD_ADDR_VAR 0 15
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: LIST
47677: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47678: LD_ADDR_VAR 0 16
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47724: LD_ADDR_VAR 0 17
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47768: LD_ADDR_VAR 0 18
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47809: LD_ADDR_VAR 0 19
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47849: LD_ADDR_VAR 0 20
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47890: LD_ADDR_VAR 0 21
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47934: LD_ADDR_VAR 0 22
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47980: LD_ADDR_VAR 0 23
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 4
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48024: LD_ADDR_VAR 0 24
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 4
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48065: LD_ADDR_VAR 0 25
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 4
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: LD_INT 4
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48105: LD_ADDR_VAR 0 26
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 3
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 4
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48146: LD_ADDR_VAR 0 27
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48190: LD_ADDR_VAR 0 28
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: LD_INT 4
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 4
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48236: LD_ADDR_VAR 0 29
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 4
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 5
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 4
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 6
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 6
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 5
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48391: LD_ADDR_VAR 0 30
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 4
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 5
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 5
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 6
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 6
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48534: LD_ADDR_VAR 0 31
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 4
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 4
48581: PUSH
48582: LD_INT 4
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: PUSH
48592: LD_INT 4
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 5
48601: PUSH
48602: LD_INT 4
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 5
48611: PUSH
48612: LD_INT 5
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: LD_INT 5
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 6
48631: PUSH
48632: LD_INT 5
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 6
48641: PUSH
48642: LD_INT 6
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 5
48651: PUSH
48652: LD_INT 6
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48673: LD_ADDR_VAR 0 32
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 4
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 4
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 5
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 5
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 4
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 6
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 6
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 5
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48816: LD_ADDR_VAR 0 33
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 3
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 4
48868: NEG
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 4
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 4
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 5
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 5
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 5
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 6
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 6
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48971: LD_ADDR_VAR 0 34
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: LD_INT 4
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 4
49026: NEG
49027: PUSH
49028: LD_INT 3
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 4
49038: NEG
49039: PUSH
49040: LD_INT 4
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 4
49050: NEG
49051: PUSH
49052: LD_INT 5
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 5
49062: NEG
49063: PUSH
49064: LD_INT 4
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 5
49074: NEG
49075: PUSH
49076: LD_INT 5
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 5
49086: NEG
49087: PUSH
49088: LD_INT 6
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 6
49098: NEG
49099: PUSH
49100: LD_INT 5
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 6
49110: NEG
49111: PUSH
49112: LD_INT 6
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49134: LD_ADDR_VAR 0 41
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49178: LD_ADDR_VAR 0 42
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49219: LD_ADDR_VAR 0 43
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49259: LD_ADDR_VAR 0 44
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49300: LD_ADDR_VAR 0 45
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49344: LD_ADDR_VAR 0 46
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49390: LD_ADDR_VAR 0 47
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49423: LD_ADDR_VAR 0 48
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49454: LD_ADDR_VAR 0 49
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49483: LD_ADDR_VAR 0 50
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49512: LD_ADDR_VAR 0 51
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49543: LD_ADDR_VAR 0 52
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49576: LD_ADDR_VAR 0 53
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49620: LD_ADDR_VAR 0 54
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49661: LD_ADDR_VAR 0 55
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49701: LD_ADDR_VAR 0 56
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49742: LD_ADDR_VAR 0 57
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 3
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49786: LD_ADDR_VAR 0 58
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: LIST
49831: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49832: LD_ADDR_VAR 0 59
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49876: LD_ADDR_VAR 0 60
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49917: LD_ADDR_VAR 0 61
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49957: LD_ADDR_VAR 0 62
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49998: LD_ADDR_VAR 0 63
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50042: LD_ADDR_VAR 0 64
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// end ; 2 :
50088: GO 53354
50090: LD_INT 2
50092: DOUBLE
50093: EQUAL
50094: IFTRUE 50098
50096: GO 53353
50098: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50099: LD_ADDR_VAR 0 29
50103: PUSH
50104: LD_INT 4
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 4
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 5
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 5
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 4
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 4
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 4
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 4
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 4
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 4
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 5
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 5
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 4
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 5
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 4
50438: NEG
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 4
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 4
50461: NEG
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 4
50484: NEG
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 4
50496: NEG
50497: PUSH
50498: LD_INT 5
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: LD_INT 4
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 5
50544: NEG
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 5
50556: NEG
50557: PUSH
50558: LD_INT 5
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: LD_INT 5
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 5
50580: NEG
50581: PUSH
50582: LD_INT 3
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50637: LD_ADDR_VAR 0 30
50641: PUSH
50642: LD_INT 4
50644: PUSH
50645: LD_INT 4
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 5
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 5
50674: PUSH
50675: LD_INT 5
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 4
50684: PUSH
50685: LD_INT 5
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 4
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 5
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 5
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 4
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 4
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 4
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 4
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 5
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 5
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 5
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 4
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: LD_INT 4
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 4
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 4
51025: NEG
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 5
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 4
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 4
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 5
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 3
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 5
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51184: LD_ADDR_VAR 0 31
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 4
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 5
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 5
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 5
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 4
51340: NEG
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 4
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 4
51386: NEG
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: LD_INT 5
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: NEG
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 4
51434: NEG
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: NEG
51447: PUSH
51448: LD_INT 4
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 5
51458: NEG
51459: PUSH
51460: LD_INT 5
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: LD_INT 5
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 5
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 4
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 4
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 4
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 5
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 4
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51734: LD_ADDR_VAR 0 32
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 4
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 4
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 5
51797: NEG
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 5
51808: NEG
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 5
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 4
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 4
51903: NEG
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: LD_INT 4
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: LD_INT 4
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: NEG
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 5
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 4
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 5
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 5
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: LD_INT 4
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 5
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: PUSH
52177: LD_INT 5
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: LD_INT 5
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 5
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 5
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52281: LD_ADDR_VAR 0 33
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 4
52300: NEG
52301: PUSH
52302: LD_INT 5
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 4
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 4
52336: NEG
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 5
52348: NEG
52349: PUSH
52350: LD_INT 4
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 5
52360: NEG
52361: PUSH
52362: LD_INT 5
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 5
52384: NEG
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 4
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 4
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 4
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 4
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 4
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 5
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 5
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: LD_INT 4
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 4
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 5
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 5
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 4
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 5
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52819: LD_ADDR_VAR 0 34
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 4
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 5
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 4
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 5
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 5
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 4
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: LD_INT 4
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 4
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 5
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 5
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: LD_INT 5
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 5
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 3
53101: PUSH
53102: LD_INT 5
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 4
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 4
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 4
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 5
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 5
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// end ; end ;
53351: GO 53354
53353: POP
// case btype of b_depot , b_warehouse :
53354: LD_VAR 0 1
53358: PUSH
53359: LD_INT 0
53361: DOUBLE
53362: EQUAL
53363: IFTRUE 53373
53365: LD_INT 1
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53373
53371: GO 53574
53373: POP
// case nation of nation_american :
53374: LD_VAR 0 5
53378: PUSH
53379: LD_INT 1
53381: DOUBLE
53382: EQUAL
53383: IFTRUE 53387
53385: GO 53443
53387: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53388: LD_ADDR_VAR 0 9
53392: PUSH
53393: LD_VAR 0 11
53397: PUSH
53398: LD_VAR 0 12
53402: PUSH
53403: LD_VAR 0 13
53407: PUSH
53408: LD_VAR 0 14
53412: PUSH
53413: LD_VAR 0 15
53417: PUSH
53418: LD_VAR 0 16
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: PUSH
53431: LD_VAR 0 4
53435: PUSH
53436: LD_INT 1
53438: PLUS
53439: ARRAY
53440: ST_TO_ADDR
53441: GO 53572
53443: LD_INT 2
53445: DOUBLE
53446: EQUAL
53447: IFTRUE 53451
53449: GO 53507
53451: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53452: LD_ADDR_VAR 0 9
53456: PUSH
53457: LD_VAR 0 17
53461: PUSH
53462: LD_VAR 0 18
53466: PUSH
53467: LD_VAR 0 19
53471: PUSH
53472: LD_VAR 0 20
53476: PUSH
53477: LD_VAR 0 21
53481: PUSH
53482: LD_VAR 0 22
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: PUSH
53495: LD_VAR 0 4
53499: PUSH
53500: LD_INT 1
53502: PLUS
53503: ARRAY
53504: ST_TO_ADDR
53505: GO 53572
53507: LD_INT 3
53509: DOUBLE
53510: EQUAL
53511: IFTRUE 53515
53513: GO 53571
53515: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53516: LD_ADDR_VAR 0 9
53520: PUSH
53521: LD_VAR 0 23
53525: PUSH
53526: LD_VAR 0 24
53530: PUSH
53531: LD_VAR 0 25
53535: PUSH
53536: LD_VAR 0 26
53540: PUSH
53541: LD_VAR 0 27
53545: PUSH
53546: LD_VAR 0 28
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: PUSH
53559: LD_VAR 0 4
53563: PUSH
53564: LD_INT 1
53566: PLUS
53567: ARRAY
53568: ST_TO_ADDR
53569: GO 53572
53571: POP
53572: GO 54127
53574: LD_INT 2
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53588
53580: LD_INT 3
53582: DOUBLE
53583: EQUAL
53584: IFTRUE 53588
53586: GO 53644
53588: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53589: LD_ADDR_VAR 0 9
53593: PUSH
53594: LD_VAR 0 29
53598: PUSH
53599: LD_VAR 0 30
53603: PUSH
53604: LD_VAR 0 31
53608: PUSH
53609: LD_VAR 0 32
53613: PUSH
53614: LD_VAR 0 33
53618: PUSH
53619: LD_VAR 0 34
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: PUSH
53632: LD_VAR 0 4
53636: PUSH
53637: LD_INT 1
53639: PLUS
53640: ARRAY
53641: ST_TO_ADDR
53642: GO 54127
53644: LD_INT 16
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53706
53650: LD_INT 17
53652: DOUBLE
53653: EQUAL
53654: IFTRUE 53706
53656: LD_INT 18
53658: DOUBLE
53659: EQUAL
53660: IFTRUE 53706
53662: LD_INT 19
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53706
53668: LD_INT 22
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53706
53674: LD_INT 20
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53706
53680: LD_INT 21
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53706
53686: LD_INT 23
53688: DOUBLE
53689: EQUAL
53690: IFTRUE 53706
53692: LD_INT 24
53694: DOUBLE
53695: EQUAL
53696: IFTRUE 53706
53698: LD_INT 25
53700: DOUBLE
53701: EQUAL
53702: IFTRUE 53706
53704: GO 53762
53706: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53707: LD_ADDR_VAR 0 9
53711: PUSH
53712: LD_VAR 0 35
53716: PUSH
53717: LD_VAR 0 36
53721: PUSH
53722: LD_VAR 0 37
53726: PUSH
53727: LD_VAR 0 38
53731: PUSH
53732: LD_VAR 0 39
53736: PUSH
53737: LD_VAR 0 40
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: PUSH
53750: LD_VAR 0 4
53754: PUSH
53755: LD_INT 1
53757: PLUS
53758: ARRAY
53759: ST_TO_ADDR
53760: GO 54127
53762: LD_INT 6
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53818
53768: LD_INT 7
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53818
53774: LD_INT 8
53776: DOUBLE
53777: EQUAL
53778: IFTRUE 53818
53780: LD_INT 13
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53818
53786: LD_INT 12
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53818
53792: LD_INT 15
53794: DOUBLE
53795: EQUAL
53796: IFTRUE 53818
53798: LD_INT 11
53800: DOUBLE
53801: EQUAL
53802: IFTRUE 53818
53804: LD_INT 14
53806: DOUBLE
53807: EQUAL
53808: IFTRUE 53818
53810: LD_INT 10
53812: DOUBLE
53813: EQUAL
53814: IFTRUE 53818
53816: GO 53874
53818: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53819: LD_ADDR_VAR 0 9
53823: PUSH
53824: LD_VAR 0 41
53828: PUSH
53829: LD_VAR 0 42
53833: PUSH
53834: LD_VAR 0 43
53838: PUSH
53839: LD_VAR 0 44
53843: PUSH
53844: LD_VAR 0 45
53848: PUSH
53849: LD_VAR 0 46
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: PUSH
53862: LD_VAR 0 4
53866: PUSH
53867: LD_INT 1
53869: PLUS
53870: ARRAY
53871: ST_TO_ADDR
53872: GO 54127
53874: LD_INT 36
53876: DOUBLE
53877: EQUAL
53878: IFTRUE 53882
53880: GO 53938
53882: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53883: LD_ADDR_VAR 0 9
53887: PUSH
53888: LD_VAR 0 47
53892: PUSH
53893: LD_VAR 0 48
53897: PUSH
53898: LD_VAR 0 49
53902: PUSH
53903: LD_VAR 0 50
53907: PUSH
53908: LD_VAR 0 51
53912: PUSH
53913: LD_VAR 0 52
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: LD_VAR 0 4
53930: PUSH
53931: LD_INT 1
53933: PLUS
53934: ARRAY
53935: ST_TO_ADDR
53936: GO 54127
53938: LD_INT 4
53940: DOUBLE
53941: EQUAL
53942: IFTRUE 53964
53944: LD_INT 5
53946: DOUBLE
53947: EQUAL
53948: IFTRUE 53964
53950: LD_INT 34
53952: DOUBLE
53953: EQUAL
53954: IFTRUE 53964
53956: LD_INT 37
53958: DOUBLE
53959: EQUAL
53960: IFTRUE 53964
53962: GO 54020
53964: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53965: LD_ADDR_VAR 0 9
53969: PUSH
53970: LD_VAR 0 53
53974: PUSH
53975: LD_VAR 0 54
53979: PUSH
53980: LD_VAR 0 55
53984: PUSH
53985: LD_VAR 0 56
53989: PUSH
53990: LD_VAR 0 57
53994: PUSH
53995: LD_VAR 0 58
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: PUSH
54008: LD_VAR 0 4
54012: PUSH
54013: LD_INT 1
54015: PLUS
54016: ARRAY
54017: ST_TO_ADDR
54018: GO 54127
54020: LD_INT 31
54022: DOUBLE
54023: EQUAL
54024: IFTRUE 54070
54026: LD_INT 32
54028: DOUBLE
54029: EQUAL
54030: IFTRUE 54070
54032: LD_INT 33
54034: DOUBLE
54035: EQUAL
54036: IFTRUE 54070
54038: LD_INT 27
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54070
54044: LD_INT 26
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54070
54050: LD_INT 28
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54070
54056: LD_INT 29
54058: DOUBLE
54059: EQUAL
54060: IFTRUE 54070
54062: LD_INT 30
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54126
54070: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54071: LD_ADDR_VAR 0 9
54075: PUSH
54076: LD_VAR 0 59
54080: PUSH
54081: LD_VAR 0 60
54085: PUSH
54086: LD_VAR 0 61
54090: PUSH
54091: LD_VAR 0 62
54095: PUSH
54096: LD_VAR 0 63
54100: PUSH
54101: LD_VAR 0 64
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: PUSH
54114: LD_VAR 0 4
54118: PUSH
54119: LD_INT 1
54121: PLUS
54122: ARRAY
54123: ST_TO_ADDR
54124: GO 54127
54126: POP
// temp_list2 = [ ] ;
54127: LD_ADDR_VAR 0 10
54131: PUSH
54132: EMPTY
54133: ST_TO_ADDR
// for i in temp_list do
54134: LD_ADDR_VAR 0 8
54138: PUSH
54139: LD_VAR 0 9
54143: PUSH
54144: FOR_IN
54145: IFFALSE 54197
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54147: LD_ADDR_VAR 0 10
54151: PUSH
54152: LD_VAR 0 10
54156: PUSH
54157: LD_VAR 0 8
54161: PUSH
54162: LD_INT 1
54164: ARRAY
54165: PUSH
54166: LD_VAR 0 2
54170: PLUS
54171: PUSH
54172: LD_VAR 0 8
54176: PUSH
54177: LD_INT 2
54179: ARRAY
54180: PUSH
54181: LD_VAR 0 3
54185: PLUS
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: ADD
54194: ST_TO_ADDR
54195: GO 54144
54197: POP
54198: POP
// result = temp_list2 ;
54199: LD_ADDR_VAR 0 7
54203: PUSH
54204: LD_VAR 0 10
54208: ST_TO_ADDR
// end ;
54209: LD_VAR 0 7
54213: RET
// export function EnemyInRange ( unit , dist ) ; begin
54214: LD_INT 0
54216: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54217: LD_ADDR_VAR 0 3
54221: PUSH
54222: LD_VAR 0 1
54226: PPUSH
54227: CALL_OW 255
54231: PPUSH
54232: LD_VAR 0 1
54236: PPUSH
54237: CALL_OW 250
54241: PPUSH
54242: LD_VAR 0 1
54246: PPUSH
54247: CALL_OW 251
54251: PPUSH
54252: LD_VAR 0 2
54256: PPUSH
54257: CALL 27587 0 4
54261: PUSH
54262: LD_INT 4
54264: ARRAY
54265: ST_TO_ADDR
// end ;
54266: LD_VAR 0 3
54270: RET
// export function PlayerSeeMe ( unit ) ; begin
54271: LD_INT 0
54273: PPUSH
// result := See ( your_side , unit ) ;
54274: LD_ADDR_VAR 0 2
54278: PUSH
54279: LD_OWVAR 2
54283: PPUSH
54284: LD_VAR 0 1
54288: PPUSH
54289: CALL_OW 292
54293: ST_TO_ADDR
// end ;
54294: LD_VAR 0 2
54298: RET
// export function ReverseDir ( unit ) ; begin
54299: LD_INT 0
54301: PPUSH
// if not unit then
54302: LD_VAR 0 1
54306: NOT
54307: IFFALSE 54311
// exit ;
54309: GO 54334
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54311: LD_ADDR_VAR 0 2
54315: PUSH
54316: LD_VAR 0 1
54320: PPUSH
54321: CALL_OW 254
54325: PUSH
54326: LD_INT 3
54328: PLUS
54329: PUSH
54330: LD_INT 6
54332: MOD
54333: ST_TO_ADDR
// end ;
54334: LD_VAR 0 2
54338: RET
// export function ReverseArray ( array ) ; var i ; begin
54339: LD_INT 0
54341: PPUSH
54342: PPUSH
// if not array then
54343: LD_VAR 0 1
54347: NOT
54348: IFFALSE 54352
// exit ;
54350: GO 54407
// result := [ ] ;
54352: LD_ADDR_VAR 0 2
54356: PUSH
54357: EMPTY
54358: ST_TO_ADDR
// for i := array downto 1 do
54359: LD_ADDR_VAR 0 3
54363: PUSH
54364: DOUBLE
54365: LD_VAR 0 1
54369: INC
54370: ST_TO_ADDR
54371: LD_INT 1
54373: PUSH
54374: FOR_DOWNTO
54375: IFFALSE 54405
// result := Join ( result , array [ i ] ) ;
54377: LD_ADDR_VAR 0 2
54381: PUSH
54382: LD_VAR 0 2
54386: PPUSH
54387: LD_VAR 0 1
54391: PUSH
54392: LD_VAR 0 3
54396: ARRAY
54397: PPUSH
54398: CALL 59052 0 2
54402: ST_TO_ADDR
54403: GO 54374
54405: POP
54406: POP
// end ;
54407: LD_VAR 0 2
54411: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54412: LD_INT 0
54414: PPUSH
54415: PPUSH
54416: PPUSH
54417: PPUSH
54418: PPUSH
54419: PPUSH
// if not unit or not hexes then
54420: LD_VAR 0 1
54424: NOT
54425: PUSH
54426: LD_VAR 0 2
54430: NOT
54431: OR
54432: IFFALSE 54436
// exit ;
54434: GO 54559
// dist := 9999 ;
54436: LD_ADDR_VAR 0 5
54440: PUSH
54441: LD_INT 9999
54443: ST_TO_ADDR
// for i = 1 to hexes do
54444: LD_ADDR_VAR 0 4
54448: PUSH
54449: DOUBLE
54450: LD_INT 1
54452: DEC
54453: ST_TO_ADDR
54454: LD_VAR 0 2
54458: PUSH
54459: FOR_TO
54460: IFFALSE 54547
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54462: LD_ADDR_VAR 0 6
54466: PUSH
54467: LD_VAR 0 1
54471: PPUSH
54472: LD_VAR 0 2
54476: PUSH
54477: LD_VAR 0 4
54481: ARRAY
54482: PUSH
54483: LD_INT 1
54485: ARRAY
54486: PPUSH
54487: LD_VAR 0 2
54491: PUSH
54492: LD_VAR 0 4
54496: ARRAY
54497: PUSH
54498: LD_INT 2
54500: ARRAY
54501: PPUSH
54502: CALL_OW 297
54506: ST_TO_ADDR
// if tdist < dist then
54507: LD_VAR 0 6
54511: PUSH
54512: LD_VAR 0 5
54516: LESS
54517: IFFALSE 54545
// begin hex := hexes [ i ] ;
54519: LD_ADDR_VAR 0 8
54523: PUSH
54524: LD_VAR 0 2
54528: PUSH
54529: LD_VAR 0 4
54533: ARRAY
54534: ST_TO_ADDR
// dist := tdist ;
54535: LD_ADDR_VAR 0 5
54539: PUSH
54540: LD_VAR 0 6
54544: ST_TO_ADDR
// end ; end ;
54545: GO 54459
54547: POP
54548: POP
// result := hex ;
54549: LD_ADDR_VAR 0 3
54553: PUSH
54554: LD_VAR 0 8
54558: ST_TO_ADDR
// end ;
54559: LD_VAR 0 3
54563: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54564: LD_INT 0
54566: PPUSH
54567: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54568: LD_VAR 0 1
54572: NOT
54573: PUSH
54574: LD_VAR 0 1
54578: PUSH
54579: LD_INT 21
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 23
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PPUSH
54603: CALL_OW 69
54607: IN
54608: NOT
54609: OR
54610: IFFALSE 54614
// exit ;
54612: GO 54661
// for i = 1 to 3 do
54614: LD_ADDR_VAR 0 3
54618: PUSH
54619: DOUBLE
54620: LD_INT 1
54622: DEC
54623: ST_TO_ADDR
54624: LD_INT 3
54626: PUSH
54627: FOR_TO
54628: IFFALSE 54659
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54630: LD_VAR 0 1
54634: PPUSH
54635: CALL_OW 250
54639: PPUSH
54640: LD_VAR 0 1
54644: PPUSH
54645: CALL_OW 251
54649: PPUSH
54650: LD_INT 1
54652: PPUSH
54653: CALL_OW 453
54657: GO 54627
54659: POP
54660: POP
// end ;
54661: LD_VAR 0 2
54665: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54666: LD_INT 0
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
// if not unit or not enemy_unit then
54674: LD_VAR 0 1
54678: NOT
54679: PUSH
54680: LD_VAR 0 2
54684: NOT
54685: OR
54686: IFFALSE 54690
// exit ;
54688: GO 55157
// if GetLives ( i ) < 250 then
54690: LD_VAR 0 4
54694: PPUSH
54695: CALL_OW 256
54699: PUSH
54700: LD_INT 250
54702: LESS
54703: IFFALSE 54716
// begin ComAutodestruct ( i ) ;
54705: LD_VAR 0 4
54709: PPUSH
54710: CALL 54564 0 1
// exit ;
54714: GO 55157
// end ; x := GetX ( enemy_unit ) ;
54716: LD_ADDR_VAR 0 7
54720: PUSH
54721: LD_VAR 0 2
54725: PPUSH
54726: CALL_OW 250
54730: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54731: LD_ADDR_VAR 0 8
54735: PUSH
54736: LD_VAR 0 2
54740: PPUSH
54741: CALL_OW 251
54745: ST_TO_ADDR
// if not x or not y then
54746: LD_VAR 0 7
54750: NOT
54751: PUSH
54752: LD_VAR 0 8
54756: NOT
54757: OR
54758: IFFALSE 54762
// exit ;
54760: GO 55157
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54762: LD_ADDR_VAR 0 6
54766: PUSH
54767: LD_VAR 0 7
54771: PPUSH
54772: LD_INT 0
54774: PPUSH
54775: LD_INT 4
54777: PPUSH
54778: CALL_OW 272
54782: PUSH
54783: LD_VAR 0 8
54787: PPUSH
54788: LD_INT 0
54790: PPUSH
54791: LD_INT 4
54793: PPUSH
54794: CALL_OW 273
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_VAR 0 7
54807: PPUSH
54808: LD_INT 1
54810: PPUSH
54811: LD_INT 4
54813: PPUSH
54814: CALL_OW 272
54818: PUSH
54819: LD_VAR 0 8
54823: PPUSH
54824: LD_INT 1
54826: PPUSH
54827: LD_INT 4
54829: PPUSH
54830: CALL_OW 273
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_VAR 0 7
54843: PPUSH
54844: LD_INT 2
54846: PPUSH
54847: LD_INT 4
54849: PPUSH
54850: CALL_OW 272
54854: PUSH
54855: LD_VAR 0 8
54859: PPUSH
54860: LD_INT 2
54862: PPUSH
54863: LD_INT 4
54865: PPUSH
54866: CALL_OW 273
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_VAR 0 7
54879: PPUSH
54880: LD_INT 3
54882: PPUSH
54883: LD_INT 4
54885: PPUSH
54886: CALL_OW 272
54890: PUSH
54891: LD_VAR 0 8
54895: PPUSH
54896: LD_INT 3
54898: PPUSH
54899: LD_INT 4
54901: PPUSH
54902: CALL_OW 273
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_VAR 0 7
54915: PPUSH
54916: LD_INT 4
54918: PPUSH
54919: LD_INT 4
54921: PPUSH
54922: CALL_OW 272
54926: PUSH
54927: LD_VAR 0 8
54931: PPUSH
54932: LD_INT 4
54934: PPUSH
54935: LD_INT 4
54937: PPUSH
54938: CALL_OW 273
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_VAR 0 7
54951: PPUSH
54952: LD_INT 5
54954: PPUSH
54955: LD_INT 4
54957: PPUSH
54958: CALL_OW 272
54962: PUSH
54963: LD_VAR 0 8
54967: PPUSH
54968: LD_INT 5
54970: PPUSH
54971: LD_INT 4
54973: PPUSH
54974: CALL_OW 273
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// for i = tmp downto 1 do
54991: LD_ADDR_VAR 0 4
54995: PUSH
54996: DOUBLE
54997: LD_VAR 0 6
55001: INC
55002: ST_TO_ADDR
55003: LD_INT 1
55005: PUSH
55006: FOR_DOWNTO
55007: IFFALSE 55108
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55009: LD_VAR 0 6
55013: PUSH
55014: LD_VAR 0 4
55018: ARRAY
55019: PUSH
55020: LD_INT 1
55022: ARRAY
55023: PPUSH
55024: LD_VAR 0 6
55028: PUSH
55029: LD_VAR 0 4
55033: ARRAY
55034: PUSH
55035: LD_INT 2
55037: ARRAY
55038: PPUSH
55039: CALL_OW 488
55043: NOT
55044: PUSH
55045: LD_VAR 0 6
55049: PUSH
55050: LD_VAR 0 4
55054: ARRAY
55055: PUSH
55056: LD_INT 1
55058: ARRAY
55059: PPUSH
55060: LD_VAR 0 6
55064: PUSH
55065: LD_VAR 0 4
55069: ARRAY
55070: PUSH
55071: LD_INT 2
55073: ARRAY
55074: PPUSH
55075: CALL_OW 428
55079: PUSH
55080: LD_INT 0
55082: NONEQUAL
55083: OR
55084: IFFALSE 55106
// tmp := Delete ( tmp , i ) ;
55086: LD_ADDR_VAR 0 6
55090: PUSH
55091: LD_VAR 0 6
55095: PPUSH
55096: LD_VAR 0 4
55100: PPUSH
55101: CALL_OW 3
55105: ST_TO_ADDR
55106: GO 55006
55108: POP
55109: POP
// j := GetClosestHex ( unit , tmp ) ;
55110: LD_ADDR_VAR 0 5
55114: PUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_VAR 0 6
55124: PPUSH
55125: CALL 54412 0 2
55129: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55130: LD_VAR 0 1
55134: PPUSH
55135: LD_VAR 0 5
55139: PUSH
55140: LD_INT 1
55142: ARRAY
55143: PPUSH
55144: LD_VAR 0 5
55148: PUSH
55149: LD_INT 2
55151: ARRAY
55152: PPUSH
55153: CALL_OW 111
// end ;
55157: LD_VAR 0 3
55161: RET
// export function PrepareApemanSoldier ( ) ; begin
55162: LD_INT 0
55164: PPUSH
// uc_nation := 0 ;
55165: LD_ADDR_OWVAR 21
55169: PUSH
55170: LD_INT 0
55172: ST_TO_ADDR
// hc_sex := sex_male ;
55173: LD_ADDR_OWVAR 27
55177: PUSH
55178: LD_INT 1
55180: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55181: LD_ADDR_OWVAR 28
55185: PUSH
55186: LD_INT 15
55188: ST_TO_ADDR
// hc_gallery :=  ;
55189: LD_ADDR_OWVAR 33
55193: PUSH
55194: LD_STRING 
55196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55197: LD_ADDR_OWVAR 31
55201: PUSH
55202: LD_INT 0
55204: PPUSH
55205: LD_INT 3
55207: PPUSH
55208: CALL_OW 12
55212: PUSH
55213: LD_INT 0
55215: PPUSH
55216: LD_INT 3
55218: PPUSH
55219: CALL_OW 12
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// end ;
55236: LD_VAR 0 1
55240: RET
// export function PrepareApemanEngineer ( ) ; begin
55241: LD_INT 0
55243: PPUSH
// uc_nation := 0 ;
55244: LD_ADDR_OWVAR 21
55248: PUSH
55249: LD_INT 0
55251: ST_TO_ADDR
// hc_sex := sex_male ;
55252: LD_ADDR_OWVAR 27
55256: PUSH
55257: LD_INT 1
55259: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55260: LD_ADDR_OWVAR 28
55264: PUSH
55265: LD_INT 16
55267: ST_TO_ADDR
// hc_gallery :=  ;
55268: LD_ADDR_OWVAR 33
55272: PUSH
55273: LD_STRING 
55275: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55276: LD_ADDR_OWVAR 31
55280: PUSH
55281: LD_INT 0
55283: PPUSH
55284: LD_INT 3
55286: PPUSH
55287: CALL_OW 12
55291: PUSH
55292: LD_INT 0
55294: PPUSH
55295: LD_INT 3
55297: PPUSH
55298: CALL_OW 12
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: ST_TO_ADDR
// end ;
55315: LD_VAR 0 1
55319: RET
// export function PrepareApeman ( agressivity ) ; begin
55320: LD_INT 0
55322: PPUSH
// uc_side := 0 ;
55323: LD_ADDR_OWVAR 20
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// uc_nation := 0 ;
55331: LD_ADDR_OWVAR 21
55335: PUSH
55336: LD_INT 0
55338: ST_TO_ADDR
// hc_sex := sex_male ;
55339: LD_ADDR_OWVAR 27
55343: PUSH
55344: LD_INT 1
55346: ST_TO_ADDR
// hc_class := class_apeman ;
55347: LD_ADDR_OWVAR 28
55351: PUSH
55352: LD_INT 12
55354: ST_TO_ADDR
// hc_gallery :=  ;
55355: LD_ADDR_OWVAR 33
55359: PUSH
55360: LD_STRING 
55362: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55363: LD_ADDR_OWVAR 35
55367: PUSH
55368: LD_VAR 0 1
55372: NEG
55373: PPUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: CALL_OW 12
55383: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55384: LD_ADDR_OWVAR 31
55388: PUSH
55389: LD_INT 0
55391: PPUSH
55392: LD_INT 3
55394: PPUSH
55395: CALL_OW 12
55399: PUSH
55400: LD_INT 0
55402: PPUSH
55403: LD_INT 3
55405: PPUSH
55406: CALL_OW 12
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// end ;
55423: LD_VAR 0 2
55427: RET
// export function PrepareTiger ( agressivity ) ; begin
55428: LD_INT 0
55430: PPUSH
// uc_side := 0 ;
55431: LD_ADDR_OWVAR 20
55435: PUSH
55436: LD_INT 0
55438: ST_TO_ADDR
// uc_nation := 0 ;
55439: LD_ADDR_OWVAR 21
55443: PUSH
55444: LD_INT 0
55446: ST_TO_ADDR
// hc_class := class_tiger ;
55447: LD_ADDR_OWVAR 28
55451: PUSH
55452: LD_INT 14
55454: ST_TO_ADDR
// hc_gallery :=  ;
55455: LD_ADDR_OWVAR 33
55459: PUSH
55460: LD_STRING 
55462: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55463: LD_ADDR_OWVAR 35
55467: PUSH
55468: LD_VAR 0 1
55472: NEG
55473: PPUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: CALL_OW 12
55483: ST_TO_ADDR
// end ;
55484: LD_VAR 0 2
55488: RET
// export function PrepareEnchidna ( ) ; begin
55489: LD_INT 0
55491: PPUSH
// uc_side := 0 ;
55492: LD_ADDR_OWVAR 20
55496: PUSH
55497: LD_INT 0
55499: ST_TO_ADDR
// uc_nation := 0 ;
55500: LD_ADDR_OWVAR 21
55504: PUSH
55505: LD_INT 0
55507: ST_TO_ADDR
// hc_class := class_baggie ;
55508: LD_ADDR_OWVAR 28
55512: PUSH
55513: LD_INT 13
55515: ST_TO_ADDR
// hc_gallery :=  ;
55516: LD_ADDR_OWVAR 33
55520: PUSH
55521: LD_STRING 
55523: ST_TO_ADDR
// end ;
55524: LD_VAR 0 1
55528: RET
// export function PrepareFrog ( ) ; begin
55529: LD_INT 0
55531: PPUSH
// uc_side := 0 ;
55532: LD_ADDR_OWVAR 20
55536: PUSH
55537: LD_INT 0
55539: ST_TO_ADDR
// uc_nation := 0 ;
55540: LD_ADDR_OWVAR 21
55544: PUSH
55545: LD_INT 0
55547: ST_TO_ADDR
// hc_class := class_frog ;
55548: LD_ADDR_OWVAR 28
55552: PUSH
55553: LD_INT 19
55555: ST_TO_ADDR
// hc_gallery :=  ;
55556: LD_ADDR_OWVAR 33
55560: PUSH
55561: LD_STRING 
55563: ST_TO_ADDR
// end ;
55564: LD_VAR 0 1
55568: RET
// export function PrepareFish ( ) ; begin
55569: LD_INT 0
55571: PPUSH
// uc_side := 0 ;
55572: LD_ADDR_OWVAR 20
55576: PUSH
55577: LD_INT 0
55579: ST_TO_ADDR
// uc_nation := 0 ;
55580: LD_ADDR_OWVAR 21
55584: PUSH
55585: LD_INT 0
55587: ST_TO_ADDR
// hc_class := class_fish ;
55588: LD_ADDR_OWVAR 28
55592: PUSH
55593: LD_INT 20
55595: ST_TO_ADDR
// hc_gallery :=  ;
55596: LD_ADDR_OWVAR 33
55600: PUSH
55601: LD_STRING 
55603: ST_TO_ADDR
// end ;
55604: LD_VAR 0 1
55608: RET
// export function PrepareBird ( ) ; begin
55609: LD_INT 0
55611: PPUSH
// uc_side := 0 ;
55612: LD_ADDR_OWVAR 20
55616: PUSH
55617: LD_INT 0
55619: ST_TO_ADDR
// uc_nation := 0 ;
55620: LD_ADDR_OWVAR 21
55624: PUSH
55625: LD_INT 0
55627: ST_TO_ADDR
// hc_class := class_phororhacos ;
55628: LD_ADDR_OWVAR 28
55632: PUSH
55633: LD_INT 18
55635: ST_TO_ADDR
// hc_gallery :=  ;
55636: LD_ADDR_OWVAR 33
55640: PUSH
55641: LD_STRING 
55643: ST_TO_ADDR
// end ;
55644: LD_VAR 0 1
55648: RET
// export function PrepareHorse ( ) ; begin
55649: LD_INT 0
55651: PPUSH
// uc_side := 0 ;
55652: LD_ADDR_OWVAR 20
55656: PUSH
55657: LD_INT 0
55659: ST_TO_ADDR
// uc_nation := 0 ;
55660: LD_ADDR_OWVAR 21
55664: PUSH
55665: LD_INT 0
55667: ST_TO_ADDR
// hc_class := class_horse ;
55668: LD_ADDR_OWVAR 28
55672: PUSH
55673: LD_INT 21
55675: ST_TO_ADDR
// hc_gallery :=  ;
55676: LD_ADDR_OWVAR 33
55680: PUSH
55681: LD_STRING 
55683: ST_TO_ADDR
// end ;
55684: LD_VAR 0 1
55688: RET
// export function PrepareMastodont ( ) ; begin
55689: LD_INT 0
55691: PPUSH
// uc_side := 0 ;
55692: LD_ADDR_OWVAR 20
55696: PUSH
55697: LD_INT 0
55699: ST_TO_ADDR
// uc_nation := 0 ;
55700: LD_ADDR_OWVAR 21
55704: PUSH
55705: LD_INT 0
55707: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55708: LD_ADDR_OWVAR 37
55712: PUSH
55713: LD_INT 31
55715: ST_TO_ADDR
// vc_control := control_rider ;
55716: LD_ADDR_OWVAR 38
55720: PUSH
55721: LD_INT 4
55723: ST_TO_ADDR
// end ;
55724: LD_VAR 0 1
55728: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55729: LD_INT 0
55731: PPUSH
55732: PPUSH
55733: PPUSH
// uc_side = 0 ;
55734: LD_ADDR_OWVAR 20
55738: PUSH
55739: LD_INT 0
55741: ST_TO_ADDR
// uc_nation = 0 ;
55742: LD_ADDR_OWVAR 21
55746: PUSH
55747: LD_INT 0
55749: ST_TO_ADDR
// InitHc_All ( ) ;
55750: CALL_OW 584
// InitVc ;
55754: CALL_OW 20
// if mastodonts then
55758: LD_VAR 0 6
55762: IFFALSE 55829
// for i = 1 to mastodonts do
55764: LD_ADDR_VAR 0 11
55768: PUSH
55769: DOUBLE
55770: LD_INT 1
55772: DEC
55773: ST_TO_ADDR
55774: LD_VAR 0 6
55778: PUSH
55779: FOR_TO
55780: IFFALSE 55827
// begin vc_chassis := 31 ;
55782: LD_ADDR_OWVAR 37
55786: PUSH
55787: LD_INT 31
55789: ST_TO_ADDR
// vc_control := control_rider ;
55790: LD_ADDR_OWVAR 38
55794: PUSH
55795: LD_INT 4
55797: ST_TO_ADDR
// animal := CreateVehicle ;
55798: LD_ADDR_VAR 0 12
55802: PUSH
55803: CALL_OW 45
55807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55808: LD_VAR 0 12
55812: PPUSH
55813: LD_VAR 0 8
55817: PPUSH
55818: LD_INT 0
55820: PPUSH
55821: CALL 57957 0 3
// end ;
55825: GO 55779
55827: POP
55828: POP
// if horses then
55829: LD_VAR 0 5
55833: IFFALSE 55900
// for i = 1 to horses do
55835: LD_ADDR_VAR 0 11
55839: PUSH
55840: DOUBLE
55841: LD_INT 1
55843: DEC
55844: ST_TO_ADDR
55845: LD_VAR 0 5
55849: PUSH
55850: FOR_TO
55851: IFFALSE 55898
// begin hc_class := 21 ;
55853: LD_ADDR_OWVAR 28
55857: PUSH
55858: LD_INT 21
55860: ST_TO_ADDR
// hc_gallery :=  ;
55861: LD_ADDR_OWVAR 33
55865: PUSH
55866: LD_STRING 
55868: ST_TO_ADDR
// animal := CreateHuman ;
55869: LD_ADDR_VAR 0 12
55873: PUSH
55874: CALL_OW 44
55878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55879: LD_VAR 0 12
55883: PPUSH
55884: LD_VAR 0 8
55888: PPUSH
55889: LD_INT 0
55891: PPUSH
55892: CALL 57957 0 3
// end ;
55896: GO 55850
55898: POP
55899: POP
// if birds then
55900: LD_VAR 0 1
55904: IFFALSE 55971
// for i = 1 to birds do
55906: LD_ADDR_VAR 0 11
55910: PUSH
55911: DOUBLE
55912: LD_INT 1
55914: DEC
55915: ST_TO_ADDR
55916: LD_VAR 0 1
55920: PUSH
55921: FOR_TO
55922: IFFALSE 55969
// begin hc_class := 18 ;
55924: LD_ADDR_OWVAR 28
55928: PUSH
55929: LD_INT 18
55931: ST_TO_ADDR
// hc_gallery =  ;
55932: LD_ADDR_OWVAR 33
55936: PUSH
55937: LD_STRING 
55939: ST_TO_ADDR
// animal := CreateHuman ;
55940: LD_ADDR_VAR 0 12
55944: PUSH
55945: CALL_OW 44
55949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55950: LD_VAR 0 12
55954: PPUSH
55955: LD_VAR 0 8
55959: PPUSH
55960: LD_INT 0
55962: PPUSH
55963: CALL 57957 0 3
// end ;
55967: GO 55921
55969: POP
55970: POP
// if tigers then
55971: LD_VAR 0 2
55975: IFFALSE 56059
// for i = 1 to tigers do
55977: LD_ADDR_VAR 0 11
55981: PUSH
55982: DOUBLE
55983: LD_INT 1
55985: DEC
55986: ST_TO_ADDR
55987: LD_VAR 0 2
55991: PUSH
55992: FOR_TO
55993: IFFALSE 56057
// begin hc_class = class_tiger ;
55995: LD_ADDR_OWVAR 28
55999: PUSH
56000: LD_INT 14
56002: ST_TO_ADDR
// hc_gallery =  ;
56003: LD_ADDR_OWVAR 33
56007: PUSH
56008: LD_STRING 
56010: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56011: LD_ADDR_OWVAR 35
56015: PUSH
56016: LD_INT 7
56018: NEG
56019: PPUSH
56020: LD_INT 7
56022: PPUSH
56023: CALL_OW 12
56027: ST_TO_ADDR
// animal := CreateHuman ;
56028: LD_ADDR_VAR 0 12
56032: PUSH
56033: CALL_OW 44
56037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56038: LD_VAR 0 12
56042: PPUSH
56043: LD_VAR 0 8
56047: PPUSH
56048: LD_INT 0
56050: PPUSH
56051: CALL 57957 0 3
// end ;
56055: GO 55992
56057: POP
56058: POP
// if apemans then
56059: LD_VAR 0 3
56063: IFFALSE 56186
// for i = 1 to apemans do
56065: LD_ADDR_VAR 0 11
56069: PUSH
56070: DOUBLE
56071: LD_INT 1
56073: DEC
56074: ST_TO_ADDR
56075: LD_VAR 0 3
56079: PUSH
56080: FOR_TO
56081: IFFALSE 56184
// begin hc_class = class_apeman ;
56083: LD_ADDR_OWVAR 28
56087: PUSH
56088: LD_INT 12
56090: ST_TO_ADDR
// hc_gallery =  ;
56091: LD_ADDR_OWVAR 33
56095: PUSH
56096: LD_STRING 
56098: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56099: LD_ADDR_OWVAR 35
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PPUSH
56108: LD_INT 2
56110: PPUSH
56111: CALL_OW 12
56115: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56116: LD_ADDR_OWVAR 31
56120: PUSH
56121: LD_INT 1
56123: PPUSH
56124: LD_INT 3
56126: PPUSH
56127: CALL_OW 12
56131: PUSH
56132: LD_INT 1
56134: PPUSH
56135: LD_INT 3
56137: PPUSH
56138: CALL_OW 12
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// animal := CreateHuman ;
56155: LD_ADDR_VAR 0 12
56159: PUSH
56160: CALL_OW 44
56164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56165: LD_VAR 0 12
56169: PPUSH
56170: LD_VAR 0 8
56174: PPUSH
56175: LD_INT 0
56177: PPUSH
56178: CALL 57957 0 3
// end ;
56182: GO 56080
56184: POP
56185: POP
// if enchidnas then
56186: LD_VAR 0 4
56190: IFFALSE 56257
// for i = 1 to enchidnas do
56192: LD_ADDR_VAR 0 11
56196: PUSH
56197: DOUBLE
56198: LD_INT 1
56200: DEC
56201: ST_TO_ADDR
56202: LD_VAR 0 4
56206: PUSH
56207: FOR_TO
56208: IFFALSE 56255
// begin hc_class = 13 ;
56210: LD_ADDR_OWVAR 28
56214: PUSH
56215: LD_INT 13
56217: ST_TO_ADDR
// hc_gallery =  ;
56218: LD_ADDR_OWVAR 33
56222: PUSH
56223: LD_STRING 
56225: ST_TO_ADDR
// animal := CreateHuman ;
56226: LD_ADDR_VAR 0 12
56230: PUSH
56231: CALL_OW 44
56235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56236: LD_VAR 0 12
56240: PPUSH
56241: LD_VAR 0 8
56245: PPUSH
56246: LD_INT 0
56248: PPUSH
56249: CALL 57957 0 3
// end ;
56253: GO 56207
56255: POP
56256: POP
// if fishes then
56257: LD_VAR 0 7
56261: IFFALSE 56328
// for i = 1 to fishes do
56263: LD_ADDR_VAR 0 11
56267: PUSH
56268: DOUBLE
56269: LD_INT 1
56271: DEC
56272: ST_TO_ADDR
56273: LD_VAR 0 7
56277: PUSH
56278: FOR_TO
56279: IFFALSE 56326
// begin hc_class = 20 ;
56281: LD_ADDR_OWVAR 28
56285: PUSH
56286: LD_INT 20
56288: ST_TO_ADDR
// hc_gallery =  ;
56289: LD_ADDR_OWVAR 33
56293: PUSH
56294: LD_STRING 
56296: ST_TO_ADDR
// animal := CreateHuman ;
56297: LD_ADDR_VAR 0 12
56301: PUSH
56302: CALL_OW 44
56306: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56307: LD_VAR 0 12
56311: PPUSH
56312: LD_VAR 0 9
56316: PPUSH
56317: LD_INT 0
56319: PPUSH
56320: CALL 57957 0 3
// end ;
56324: GO 56278
56326: POP
56327: POP
// end ;
56328: LD_VAR 0 10
56332: RET
// export function WantHeal ( sci , unit ) ; begin
56333: LD_INT 0
56335: PPUSH
// if GetTaskList ( sci ) > 0 then
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL_OW 437
56345: PUSH
56346: LD_INT 0
56348: GREATER
56349: IFFALSE 56419
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56351: LD_VAR 0 1
56355: PPUSH
56356: CALL_OW 437
56360: PUSH
56361: LD_INT 1
56363: ARRAY
56364: PUSH
56365: LD_INT 1
56367: ARRAY
56368: PUSH
56369: LD_STRING l
56371: EQUAL
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: CALL_OW 437
56382: PUSH
56383: LD_INT 1
56385: ARRAY
56386: PUSH
56387: LD_INT 4
56389: ARRAY
56390: PUSH
56391: LD_VAR 0 2
56395: EQUAL
56396: AND
56397: IFFALSE 56409
// result := true else
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: LD_INT 1
56406: ST_TO_ADDR
56407: GO 56417
// result := false ;
56409: LD_ADDR_VAR 0 3
56413: PUSH
56414: LD_INT 0
56416: ST_TO_ADDR
// end else
56417: GO 56427
// result := false ;
56419: LD_ADDR_VAR 0 3
56423: PUSH
56424: LD_INT 0
56426: ST_TO_ADDR
// end ;
56427: LD_VAR 0 3
56431: RET
// export function HealTarget ( sci ) ; begin
56432: LD_INT 0
56434: PPUSH
// if not sci then
56435: LD_VAR 0 1
56439: NOT
56440: IFFALSE 56444
// exit ;
56442: GO 56509
// result := 0 ;
56444: LD_ADDR_VAR 0 2
56448: PUSH
56449: LD_INT 0
56451: ST_TO_ADDR
// if GetTaskList ( sci ) then
56452: LD_VAR 0 1
56456: PPUSH
56457: CALL_OW 437
56461: IFFALSE 56509
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56463: LD_VAR 0 1
56467: PPUSH
56468: CALL_OW 437
56472: PUSH
56473: LD_INT 1
56475: ARRAY
56476: PUSH
56477: LD_INT 1
56479: ARRAY
56480: PUSH
56481: LD_STRING l
56483: EQUAL
56484: IFFALSE 56509
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56486: LD_ADDR_VAR 0 2
56490: PUSH
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 437
56500: PUSH
56501: LD_INT 1
56503: ARRAY
56504: PUSH
56505: LD_INT 4
56507: ARRAY
56508: ST_TO_ADDR
// end ;
56509: LD_VAR 0 2
56513: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56514: LD_INT 0
56516: PPUSH
56517: PPUSH
56518: PPUSH
56519: PPUSH
// if not base_units then
56520: LD_VAR 0 1
56524: NOT
56525: IFFALSE 56529
// exit ;
56527: GO 56616
// result := false ;
56529: LD_ADDR_VAR 0 2
56533: PUSH
56534: LD_INT 0
56536: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56537: LD_ADDR_VAR 0 5
56541: PUSH
56542: LD_VAR 0 1
56546: PPUSH
56547: LD_INT 21
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PPUSH
56557: CALL_OW 72
56561: ST_TO_ADDR
// if not tmp then
56562: LD_VAR 0 5
56566: NOT
56567: IFFALSE 56571
// exit ;
56569: GO 56616
// for i in tmp do
56571: LD_ADDR_VAR 0 3
56575: PUSH
56576: LD_VAR 0 5
56580: PUSH
56581: FOR_IN
56582: IFFALSE 56614
// begin result := EnemyInRange ( i , 22 ) ;
56584: LD_ADDR_VAR 0 2
56588: PUSH
56589: LD_VAR 0 3
56593: PPUSH
56594: LD_INT 22
56596: PPUSH
56597: CALL 54214 0 2
56601: ST_TO_ADDR
// if result then
56602: LD_VAR 0 2
56606: IFFALSE 56612
// exit ;
56608: POP
56609: POP
56610: GO 56616
// end ;
56612: GO 56581
56614: POP
56615: POP
// end ;
56616: LD_VAR 0 2
56620: RET
// export function FilterByTag ( units , tag ) ; begin
56621: LD_INT 0
56623: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56624: LD_ADDR_VAR 0 3
56628: PUSH
56629: LD_VAR 0 1
56633: PPUSH
56634: LD_INT 120
56636: PUSH
56637: LD_VAR 0 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PPUSH
56646: CALL_OW 72
56650: ST_TO_ADDR
// end ;
56651: LD_VAR 0 3
56655: RET
// export function IsDriver ( un ) ; begin
56656: LD_INT 0
56658: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56659: LD_ADDR_VAR 0 2
56663: PUSH
56664: LD_VAR 0 1
56668: PUSH
56669: LD_INT 55
56671: PUSH
56672: EMPTY
56673: LIST
56674: PPUSH
56675: CALL_OW 69
56679: IN
56680: ST_TO_ADDR
// end ;
56681: LD_VAR 0 2
56685: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56686: LD_INT 0
56688: PPUSH
56689: PPUSH
// list := [ ] ;
56690: LD_ADDR_VAR 0 5
56694: PUSH
56695: EMPTY
56696: ST_TO_ADDR
// case d of 0 :
56697: LD_VAR 0 3
56701: PUSH
56702: LD_INT 0
56704: DOUBLE
56705: EQUAL
56706: IFTRUE 56710
56708: GO 56843
56710: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56711: LD_ADDR_VAR 0 5
56715: PUSH
56716: LD_VAR 0 1
56720: PUSH
56721: LD_INT 4
56723: MINUS
56724: PUSH
56725: LD_VAR 0 2
56729: PUSH
56730: LD_INT 4
56732: MINUS
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: PUSH
56742: LD_VAR 0 1
56746: PUSH
56747: LD_INT 3
56749: MINUS
56750: PUSH
56751: LD_VAR 0 2
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: PUSH
56764: LD_VAR 0 1
56768: PUSH
56769: LD_INT 4
56771: PLUS
56772: PUSH
56773: LD_VAR 0 2
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_INT 3
56793: PLUS
56794: PUSH
56795: LD_VAR 0 2
56799: PUSH
56800: LD_INT 3
56802: PLUS
56803: PUSH
56804: LD_INT 5
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: PUSH
56812: LD_VAR 0 1
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 4
56824: PLUS
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// end ; 1 :
56841: GO 57541
56843: LD_INT 1
56845: DOUBLE
56846: EQUAL
56847: IFTRUE 56851
56849: GO 56984
56851: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56852: LD_ADDR_VAR 0 5
56856: PUSH
56857: LD_VAR 0 1
56861: PUSH
56862: LD_VAR 0 2
56866: PUSH
56867: LD_INT 4
56869: MINUS
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: LIST
56878: PUSH
56879: LD_VAR 0 1
56883: PUSH
56884: LD_INT 3
56886: MINUS
56887: PUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 3
56895: MINUS
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: PUSH
56905: LD_VAR 0 1
56909: PUSH
56910: LD_INT 4
56912: MINUS
56913: PUSH
56914: LD_VAR 0 2
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: PUSH
56927: LD_VAR 0 1
56931: PUSH
56932: LD_VAR 0 2
56936: PUSH
56937: LD_INT 3
56939: PLUS
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: PUSH
56949: LD_VAR 0 1
56953: PUSH
56954: LD_INT 4
56956: PLUS
56957: PUSH
56958: LD_VAR 0 2
56962: PUSH
56963: LD_INT 4
56965: PLUS
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// end ; 2 :
56982: GO 57541
56984: LD_INT 2
56986: DOUBLE
56987: EQUAL
56988: IFTRUE 56992
56990: GO 57121
56992: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56993: LD_ADDR_VAR 0 5
56997: PUSH
56998: LD_VAR 0 1
57002: PUSH
57003: LD_VAR 0 2
57007: PUSH
57008: LD_INT 3
57010: MINUS
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: PUSH
57020: LD_VAR 0 1
57024: PUSH
57025: LD_INT 4
57027: PLUS
57028: PUSH
57029: LD_VAR 0 2
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: PUSH
57042: LD_VAR 0 1
57046: PUSH
57047: LD_VAR 0 2
57051: PUSH
57052: LD_INT 4
57054: PLUS
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: PUSH
57064: LD_VAR 0 1
57068: PUSH
57069: LD_INT 3
57071: MINUS
57072: PUSH
57073: LD_VAR 0 2
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: PUSH
57086: LD_VAR 0 1
57090: PUSH
57091: LD_INT 4
57093: MINUS
57094: PUSH
57095: LD_VAR 0 2
57099: PUSH
57100: LD_INT 4
57102: MINUS
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// end ; 3 :
57119: GO 57541
57121: LD_INT 3
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57129
57127: GO 57262
57129: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57130: LD_ADDR_VAR 0 5
57134: PUSH
57135: LD_VAR 0 1
57139: PUSH
57140: LD_INT 3
57142: PLUS
57143: PUSH
57144: LD_VAR 0 2
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: PUSH
57157: LD_VAR 0 1
57161: PUSH
57162: LD_INT 4
57164: PLUS
57165: PUSH
57166: LD_VAR 0 2
57170: PUSH
57171: LD_INT 4
57173: PLUS
57174: PUSH
57175: LD_INT 5
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: PUSH
57183: LD_VAR 0 1
57187: PUSH
57188: LD_INT 4
57190: MINUS
57191: PUSH
57192: LD_VAR 0 2
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: PUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_VAR 0 2
57214: PUSH
57215: LD_INT 4
57217: MINUS
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: PUSH
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 3
57234: MINUS
57235: PUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_INT 3
57243: MINUS
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: ST_TO_ADDR
// end ; 4 :
57260: GO 57541
57262: LD_INT 4
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57270
57268: GO 57403
57270: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57271: LD_ADDR_VAR 0 5
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_VAR 0 2
57285: PUSH
57286: LD_INT 4
57288: PLUS
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 3
57305: PLUS
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_INT 3
57314: PLUS
57315: PUSH
57316: LD_INT 5
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: PUSH
57324: LD_VAR 0 1
57328: PUSH
57329: LD_INT 4
57331: PLUS
57332: PUSH
57333: LD_VAR 0 2
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: PUSH
57346: LD_VAR 0 1
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 3
57358: MINUS
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 1
57372: PUSH
57373: LD_INT 4
57375: MINUS
57376: PUSH
57377: LD_VAR 0 2
57381: PUSH
57382: LD_INT 4
57384: MINUS
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// end ; 5 :
57401: GO 57541
57403: LD_INT 5
57405: DOUBLE
57406: EQUAL
57407: IFTRUE 57411
57409: GO 57540
57411: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57412: LD_ADDR_VAR 0 5
57416: PUSH
57417: LD_VAR 0 1
57421: PUSH
57422: LD_INT 4
57424: MINUS
57425: PUSH
57426: LD_VAR 0 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: PUSH
57439: LD_VAR 0 1
57443: PUSH
57444: LD_VAR 0 2
57448: PUSH
57449: LD_INT 4
57451: MINUS
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_INT 4
57468: PLUS
57469: PUSH
57470: LD_VAR 0 2
57474: PUSH
57475: LD_INT 4
57477: PLUS
57478: PUSH
57479: LD_INT 5
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: LIST
57486: PUSH
57487: LD_VAR 0 1
57491: PUSH
57492: LD_INT 3
57494: PLUS
57495: PUSH
57496: LD_VAR 0 2
57500: PUSH
57501: LD_INT 4
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: PUSH
57509: LD_VAR 0 1
57513: PUSH
57514: LD_VAR 0 2
57518: PUSH
57519: LD_INT 3
57521: PLUS
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// end ; end ;
57538: GO 57541
57540: POP
// result := list ;
57541: LD_ADDR_VAR 0 4
57545: PUSH
57546: LD_VAR 0 5
57550: ST_TO_ADDR
// end ;
57551: LD_VAR 0 4
57555: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57556: LD_INT 0
57558: PPUSH
57559: PPUSH
57560: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57561: LD_VAR 0 1
57565: NOT
57566: PUSH
57567: LD_VAR 0 2
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: IN
57590: NOT
57591: OR
57592: IFFALSE 57596
// exit ;
57594: GO 57679
// tmp := [ ] ;
57596: LD_ADDR_VAR 0 5
57600: PUSH
57601: EMPTY
57602: ST_TO_ADDR
// for i in units do
57603: LD_ADDR_VAR 0 4
57607: PUSH
57608: LD_VAR 0 1
57612: PUSH
57613: FOR_IN
57614: IFFALSE 57648
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57616: LD_ADDR_VAR 0 5
57620: PUSH
57621: LD_VAR 0 5
57625: PPUSH
57626: LD_VAR 0 4
57630: PPUSH
57631: LD_VAR 0 2
57635: PPUSH
57636: CALL_OW 259
57640: PPUSH
57641: CALL 59052 0 2
57645: ST_TO_ADDR
57646: GO 57613
57648: POP
57649: POP
// if not tmp then
57650: LD_VAR 0 5
57654: NOT
57655: IFFALSE 57659
// exit ;
57657: GO 57679
// result := SortListByListDesc ( units , tmp ) ;
57659: LD_ADDR_VAR 0 3
57663: PUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: LD_VAR 0 5
57673: PPUSH
57674: CALL_OW 77
57678: ST_TO_ADDR
// end ;
57679: LD_VAR 0 3
57683: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57684: LD_INT 0
57686: PPUSH
57687: PPUSH
57688: PPUSH
// result := false ;
57689: LD_ADDR_VAR 0 3
57693: PUSH
57694: LD_INT 0
57696: ST_TO_ADDR
// if not building then
57697: LD_VAR 0 2
57701: NOT
57702: IFFALSE 57706
// exit ;
57704: GO 57844
// x := GetX ( building ) ;
57706: LD_ADDR_VAR 0 4
57710: PUSH
57711: LD_VAR 0 2
57715: PPUSH
57716: CALL_OW 250
57720: ST_TO_ADDR
// y := GetY ( building ) ;
57721: LD_ADDR_VAR 0 5
57725: PUSH
57726: LD_VAR 0 2
57730: PPUSH
57731: CALL_OW 251
57735: ST_TO_ADDR
// if not x or not y then
57736: LD_VAR 0 4
57740: NOT
57741: PUSH
57742: LD_VAR 0 5
57746: NOT
57747: OR
57748: IFFALSE 57752
// exit ;
57750: GO 57844
// if GetTaskList ( unit ) then
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 437
57761: IFFALSE 57844
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57763: LD_STRING e
57765: PUSH
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 437
57775: PUSH
57776: LD_INT 1
57778: ARRAY
57779: PUSH
57780: LD_INT 1
57782: ARRAY
57783: EQUAL
57784: PUSH
57785: LD_VAR 0 4
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 437
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: LD_INT 2
57806: ARRAY
57807: EQUAL
57808: AND
57809: PUSH
57810: LD_VAR 0 5
57814: PUSH
57815: LD_VAR 0 1
57819: PPUSH
57820: CALL_OW 437
57824: PUSH
57825: LD_INT 1
57827: ARRAY
57828: PUSH
57829: LD_INT 3
57831: ARRAY
57832: EQUAL
57833: AND
57834: IFFALSE 57844
// result := true end ;
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_INT 1
57843: ST_TO_ADDR
// end ;
57844: LD_VAR 0 3
57848: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57849: LD_INT 0
57851: PPUSH
// result := false ;
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_INT 0
57859: ST_TO_ADDR
// if GetTaskList ( unit ) then
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 437
57869: IFFALSE 57952
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57871: LD_STRING M
57873: PUSH
57874: LD_VAR 0 1
57878: PPUSH
57879: CALL_OW 437
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PUSH
57888: LD_INT 1
57890: ARRAY
57891: EQUAL
57892: PUSH
57893: LD_VAR 0 2
57897: PUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 437
57907: PUSH
57908: LD_INT 1
57910: ARRAY
57911: PUSH
57912: LD_INT 2
57914: ARRAY
57915: EQUAL
57916: AND
57917: PUSH
57918: LD_VAR 0 3
57922: PUSH
57923: LD_VAR 0 1
57927: PPUSH
57928: CALL_OW 437
57932: PUSH
57933: LD_INT 1
57935: ARRAY
57936: PUSH
57937: LD_INT 3
57939: ARRAY
57940: EQUAL
57941: AND
57942: IFFALSE 57952
// result := true ;
57944: LD_ADDR_VAR 0 4
57948: PUSH
57949: LD_INT 1
57951: ST_TO_ADDR
// end ; end ;
57952: LD_VAR 0 4
57956: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57957: LD_INT 0
57959: PPUSH
57960: PPUSH
57961: PPUSH
57962: PPUSH
// if not unit or not area then
57963: LD_VAR 0 1
57967: NOT
57968: PUSH
57969: LD_VAR 0 2
57973: NOT
57974: OR
57975: IFFALSE 57979
// exit ;
57977: GO 58155
// tmp := AreaToList ( area , i ) ;
57979: LD_ADDR_VAR 0 6
57983: PUSH
57984: LD_VAR 0 2
57988: PPUSH
57989: LD_VAR 0 5
57993: PPUSH
57994: CALL_OW 517
57998: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57999: LD_ADDR_VAR 0 5
58003: PUSH
58004: DOUBLE
58005: LD_INT 1
58007: DEC
58008: ST_TO_ADDR
58009: LD_VAR 0 6
58013: PUSH
58014: LD_INT 1
58016: ARRAY
58017: PUSH
58018: FOR_TO
58019: IFFALSE 58153
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58021: LD_ADDR_VAR 0 7
58025: PUSH
58026: LD_VAR 0 6
58030: PUSH
58031: LD_INT 1
58033: ARRAY
58034: PUSH
58035: LD_VAR 0 5
58039: ARRAY
58040: PUSH
58041: LD_VAR 0 6
58045: PUSH
58046: LD_INT 2
58048: ARRAY
58049: PUSH
58050: LD_VAR 0 5
58054: ARRAY
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58060: LD_INT 92
58062: PUSH
58063: LD_VAR 0 7
58067: PUSH
58068: LD_INT 1
58070: ARRAY
58071: PUSH
58072: LD_VAR 0 7
58076: PUSH
58077: LD_INT 2
58079: ARRAY
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: PPUSH
58090: CALL_OW 69
58094: PUSH
58095: LD_INT 0
58097: EQUAL
58098: IFFALSE 58151
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58100: LD_VAR 0 1
58104: PPUSH
58105: LD_VAR 0 7
58109: PUSH
58110: LD_INT 1
58112: ARRAY
58113: PPUSH
58114: LD_VAR 0 7
58118: PUSH
58119: LD_INT 2
58121: ARRAY
58122: PPUSH
58123: LD_VAR 0 3
58127: PPUSH
58128: CALL_OW 48
// result := IsPlaced ( unit ) ;
58132: LD_ADDR_VAR 0 4
58136: PUSH
58137: LD_VAR 0 1
58141: PPUSH
58142: CALL_OW 305
58146: ST_TO_ADDR
// exit ;
58147: POP
58148: POP
58149: GO 58155
// end ; end ;
58151: GO 58018
58153: POP
58154: POP
// end ;
58155: LD_VAR 0 4
58159: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58160: LD_INT 0
58162: PPUSH
58163: PPUSH
58164: PPUSH
// if not side or side > 8 then
58165: LD_VAR 0 1
58169: NOT
58170: PUSH
58171: LD_VAR 0 1
58175: PUSH
58176: LD_INT 8
58178: GREATER
58179: OR
58180: IFFALSE 58184
// exit ;
58182: GO 58371
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58184: LD_ADDR_VAR 0 4
58188: PUSH
58189: LD_INT 22
58191: PUSH
58192: LD_VAR 0 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 21
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PPUSH
58215: CALL_OW 69
58219: ST_TO_ADDR
// if not tmp then
58220: LD_VAR 0 4
58224: NOT
58225: IFFALSE 58229
// exit ;
58227: GO 58371
// enable_addtolog := true ;
58229: LD_ADDR_OWVAR 81
58233: PUSH
58234: LD_INT 1
58236: ST_TO_ADDR
// AddToLog ( [ ) ;
58237: LD_STRING [
58239: PPUSH
58240: CALL_OW 561
// for i in tmp do
58244: LD_ADDR_VAR 0 3
58248: PUSH
58249: LD_VAR 0 4
58253: PUSH
58254: FOR_IN
58255: IFFALSE 58362
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58257: LD_STRING [
58259: PUSH
58260: LD_VAR 0 3
58264: PPUSH
58265: CALL_OW 266
58269: STR
58270: PUSH
58271: LD_STRING , 
58273: STR
58274: PUSH
58275: LD_VAR 0 3
58279: PPUSH
58280: CALL_OW 250
58284: STR
58285: PUSH
58286: LD_STRING , 
58288: STR
58289: PUSH
58290: LD_VAR 0 3
58294: PPUSH
58295: CALL_OW 251
58299: STR
58300: PUSH
58301: LD_STRING , 
58303: STR
58304: PUSH
58305: LD_VAR 0 3
58309: PPUSH
58310: CALL_OW 254
58314: STR
58315: PUSH
58316: LD_STRING , 
58318: STR
58319: PUSH
58320: LD_VAR 0 3
58324: PPUSH
58325: LD_INT 1
58327: PPUSH
58328: CALL_OW 268
58332: STR
58333: PUSH
58334: LD_STRING , 
58336: STR
58337: PUSH
58338: LD_VAR 0 3
58342: PPUSH
58343: LD_INT 2
58345: PPUSH
58346: CALL_OW 268
58350: STR
58351: PUSH
58352: LD_STRING ],
58354: STR
58355: PPUSH
58356: CALL_OW 561
// end ;
58360: GO 58254
58362: POP
58363: POP
// AddToLog ( ]; ) ;
58364: LD_STRING ];
58366: PPUSH
58367: CALL_OW 561
// end ;
58371: LD_VAR 0 2
58375: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58376: LD_INT 0
58378: PPUSH
58379: PPUSH
58380: PPUSH
58381: PPUSH
58382: PPUSH
// if not area or not rate or not max then
58383: LD_VAR 0 1
58387: NOT
58388: PUSH
58389: LD_VAR 0 2
58393: NOT
58394: OR
58395: PUSH
58396: LD_VAR 0 4
58400: NOT
58401: OR
58402: IFFALSE 58406
// exit ;
58404: GO 58595
// while 1 do
58406: LD_INT 1
58408: IFFALSE 58595
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58410: LD_ADDR_VAR 0 9
58414: PUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: LD_INT 1
58422: PPUSH
58423: CALL_OW 287
58427: PUSH
58428: LD_INT 10
58430: MUL
58431: ST_TO_ADDR
// r := rate / 10 ;
58432: LD_ADDR_VAR 0 7
58436: PUSH
58437: LD_VAR 0 2
58441: PUSH
58442: LD_INT 10
58444: DIVREAL
58445: ST_TO_ADDR
// time := 1 1$00 ;
58446: LD_ADDR_VAR 0 8
58450: PUSH
58451: LD_INT 2100
58453: ST_TO_ADDR
// if amount < min then
58454: LD_VAR 0 9
58458: PUSH
58459: LD_VAR 0 3
58463: LESS
58464: IFFALSE 58482
// r := r * 2 else
58466: LD_ADDR_VAR 0 7
58470: PUSH
58471: LD_VAR 0 7
58475: PUSH
58476: LD_INT 2
58478: MUL
58479: ST_TO_ADDR
58480: GO 58508
// if amount > max then
58482: LD_VAR 0 9
58486: PUSH
58487: LD_VAR 0 4
58491: GREATER
58492: IFFALSE 58508
// r := r / 2 ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: LD_VAR 0 7
58503: PUSH
58504: LD_INT 2
58506: DIVREAL
58507: ST_TO_ADDR
// time := time / r ;
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: LD_VAR 0 8
58517: PUSH
58518: LD_VAR 0 7
58522: DIVREAL
58523: ST_TO_ADDR
// if time < 0 then
58524: LD_VAR 0 8
58528: PUSH
58529: LD_INT 0
58531: LESS
58532: IFFALSE 58549
// time := time * - 1 ;
58534: LD_ADDR_VAR 0 8
58538: PUSH
58539: LD_VAR 0 8
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: MUL
58548: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58549: LD_VAR 0 8
58553: PUSH
58554: LD_INT 35
58556: PPUSH
58557: LD_INT 875
58559: PPUSH
58560: CALL_OW 12
58564: PLUS
58565: PPUSH
58566: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58570: LD_INT 1
58572: PPUSH
58573: LD_INT 5
58575: PPUSH
58576: CALL_OW 12
58580: PPUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: LD_INT 1
58588: PPUSH
58589: CALL_OW 55
// end ;
58593: GO 58406
// end ;
58595: LD_VAR 0 5
58599: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58600: LD_INT 0
58602: PPUSH
58603: PPUSH
58604: PPUSH
58605: PPUSH
58606: PPUSH
58607: PPUSH
58608: PPUSH
58609: PPUSH
// if not turrets or not factories then
58610: LD_VAR 0 1
58614: NOT
58615: PUSH
58616: LD_VAR 0 2
58620: NOT
58621: OR
58622: IFFALSE 58626
// exit ;
58624: GO 58933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58626: LD_ADDR_VAR 0 10
58630: PUSH
58631: LD_INT 5
58633: PUSH
58634: LD_INT 6
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 4
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: LD_INT 5
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 24
58668: PUSH
58669: LD_INT 25
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 23
58678: PUSH
58679: LD_INT 27
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 42
58692: PUSH
58693: LD_INT 43
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 44
58702: PUSH
58703: LD_INT 46
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 45
58712: PUSH
58713: LD_INT 47
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// result := [ ] ;
58730: LD_ADDR_VAR 0 3
58734: PUSH
58735: EMPTY
58736: ST_TO_ADDR
// for i in turrets do
58737: LD_ADDR_VAR 0 4
58741: PUSH
58742: LD_VAR 0 1
58746: PUSH
58747: FOR_IN
58748: IFFALSE 58931
// begin nat := GetNation ( i ) ;
58750: LD_ADDR_VAR 0 7
58754: PUSH
58755: LD_VAR 0 4
58759: PPUSH
58760: CALL_OW 248
58764: ST_TO_ADDR
// weapon := 0 ;
58765: LD_ADDR_VAR 0 8
58769: PUSH
58770: LD_INT 0
58772: ST_TO_ADDR
// if not nat then
58773: LD_VAR 0 7
58777: NOT
58778: IFFALSE 58782
// continue ;
58780: GO 58747
// for j in list [ nat ] do
58782: LD_ADDR_VAR 0 5
58786: PUSH
58787: LD_VAR 0 10
58791: PUSH
58792: LD_VAR 0 7
58796: ARRAY
58797: PUSH
58798: FOR_IN
58799: IFFALSE 58840
// if GetBWeapon ( i ) = j [ 1 ] then
58801: LD_VAR 0 4
58805: PPUSH
58806: CALL_OW 269
58810: PUSH
58811: LD_VAR 0 5
58815: PUSH
58816: LD_INT 1
58818: ARRAY
58819: EQUAL
58820: IFFALSE 58838
// begin weapon := j [ 2 ] ;
58822: LD_ADDR_VAR 0 8
58826: PUSH
58827: LD_VAR 0 5
58831: PUSH
58832: LD_INT 2
58834: ARRAY
58835: ST_TO_ADDR
// break ;
58836: GO 58840
// end ;
58838: GO 58798
58840: POP
58841: POP
// if not weapon then
58842: LD_VAR 0 8
58846: NOT
58847: IFFALSE 58851
// continue ;
58849: GO 58747
// for k in factories do
58851: LD_ADDR_VAR 0 6
58855: PUSH
58856: LD_VAR 0 2
58860: PUSH
58861: FOR_IN
58862: IFFALSE 58927
// begin weapons := AvailableWeaponList ( k ) ;
58864: LD_ADDR_VAR 0 9
58868: PUSH
58869: LD_VAR 0 6
58873: PPUSH
58874: CALL_OW 478
58878: ST_TO_ADDR
// if not weapons then
58879: LD_VAR 0 9
58883: NOT
58884: IFFALSE 58888
// continue ;
58886: GO 58861
// if weapon in weapons then
58888: LD_VAR 0 8
58892: PUSH
58893: LD_VAR 0 9
58897: IN
58898: IFFALSE 58925
// begin result := [ i , weapon ] ;
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: LD_VAR 0 4
58909: PUSH
58910: LD_VAR 0 8
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// exit ;
58919: POP
58920: POP
58921: POP
58922: POP
58923: GO 58933
// end ; end ;
58925: GO 58861
58927: POP
58928: POP
// end ;
58929: GO 58747
58931: POP
58932: POP
// end ;
58933: LD_VAR 0 3
58937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58938: LD_INT 0
58940: PPUSH
// if not side or side > 8 then
58941: LD_VAR 0 3
58945: NOT
58946: PUSH
58947: LD_VAR 0 3
58951: PUSH
58952: LD_INT 8
58954: GREATER
58955: OR
58956: IFFALSE 58960
// exit ;
58958: GO 59019
// if not range then
58960: LD_VAR 0 4
58964: NOT
58965: IFFALSE 58976
// range := - 12 ;
58967: LD_ADDR_VAR 0 4
58971: PUSH
58972: LD_INT 12
58974: NEG
58975: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58976: LD_VAR 0 1
58980: PPUSH
58981: LD_VAR 0 2
58985: PPUSH
58986: LD_VAR 0 3
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59000: LD_VAR 0 1
59004: PPUSH
59005: LD_VAR 0 2
59009: PPUSH
59010: LD_VAR 0 3
59014: PPUSH
59015: CALL_OW 331
// end ;
59019: LD_VAR 0 5
59023: RET
// export function Video ( mode ) ; begin
59024: LD_INT 0
59026: PPUSH
// ingame_video = mode ;
59027: LD_ADDR_OWVAR 52
59031: PUSH
59032: LD_VAR 0 1
59036: ST_TO_ADDR
// interface_hidden = mode ;
59037: LD_ADDR_OWVAR 54
59041: PUSH
59042: LD_VAR 0 1
59046: ST_TO_ADDR
// end ;
59047: LD_VAR 0 2
59051: RET
// export function Join ( array , element ) ; begin
59052: LD_INT 0
59054: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59055: LD_ADDR_VAR 0 3
59059: PUSH
59060: LD_VAR 0 1
59064: PPUSH
59065: LD_VAR 0 1
59069: PUSH
59070: LD_INT 1
59072: PLUS
59073: PPUSH
59074: LD_VAR 0 2
59078: PPUSH
59079: CALL_OW 1
59083: ST_TO_ADDR
// end ;
59084: LD_VAR 0 3
59088: RET
// export function JoinUnion ( array , element ) ; begin
59089: LD_INT 0
59091: PPUSH
// result := array union element ;
59092: LD_ADDR_VAR 0 3
59096: PUSH
59097: LD_VAR 0 1
59101: PUSH
59102: LD_VAR 0 2
59106: UNION
59107: ST_TO_ADDR
// end ;
59108: LD_VAR 0 3
59112: RET
// export function GetBehemoths ( side ) ; begin
59113: LD_INT 0
59115: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59116: LD_ADDR_VAR 0 2
59120: PUSH
59121: LD_INT 22
59123: PUSH
59124: LD_VAR 0 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 31
59135: PUSH
59136: LD_INT 25
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PPUSH
59147: CALL_OW 69
59151: ST_TO_ADDR
// end ;
59152: LD_VAR 0 2
59156: RET
// export function Shuffle ( array ) ; var i , index ; begin
59157: LD_INT 0
59159: PPUSH
59160: PPUSH
59161: PPUSH
// result := [ ] ;
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: EMPTY
59168: ST_TO_ADDR
// if not array then
59169: LD_VAR 0 1
59173: NOT
59174: IFFALSE 59178
// exit ;
59176: GO 59277
// Randomize ;
59178: CALL_OW 10
// for i = array downto 1 do
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: DOUBLE
59188: LD_VAR 0 1
59192: INC
59193: ST_TO_ADDR
59194: LD_INT 1
59196: PUSH
59197: FOR_DOWNTO
59198: IFFALSE 59275
// begin index := rand ( 1 , array ) ;
59200: LD_ADDR_VAR 0 4
59204: PUSH
59205: LD_INT 1
59207: PPUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 12
59217: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59218: LD_ADDR_VAR 0 2
59222: PUSH
59223: LD_VAR 0 2
59227: PPUSH
59228: LD_VAR 0 2
59232: PUSH
59233: LD_INT 1
59235: PLUS
59236: PPUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_VAR 0 4
59246: ARRAY
59247: PPUSH
59248: CALL_OW 2
59252: ST_TO_ADDR
// array := Delete ( array , index ) ;
59253: LD_ADDR_VAR 0 1
59257: PUSH
59258: LD_VAR 0 1
59262: PPUSH
59263: LD_VAR 0 4
59267: PPUSH
59268: CALL_OW 3
59272: ST_TO_ADDR
// end ;
59273: GO 59197
59275: POP
59276: POP
// end ;
59277: LD_VAR 0 2
59281: RET
// export function GetBaseMaterials ( base ) ; begin
59282: LD_INT 0
59284: PPUSH
// result := [ 0 , 0 , 0 ] ;
59285: LD_ADDR_VAR 0 2
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: LIST
59303: ST_TO_ADDR
// if not base then
59304: LD_VAR 0 1
59308: NOT
59309: IFFALSE 59313
// exit ;
59311: GO 59362
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59313: LD_ADDR_VAR 0 2
59317: PUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: LD_INT 1
59325: PPUSH
59326: CALL_OW 275
59330: PUSH
59331: LD_VAR 0 1
59335: PPUSH
59336: LD_INT 2
59338: PPUSH
59339: CALL_OW 275
59343: PUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: LD_INT 3
59351: PPUSH
59352: CALL_OW 275
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// end ;
59362: LD_VAR 0 2
59366: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59367: LD_INT 0
59369: PPUSH
59370: PPUSH
// result := array ;
59371: LD_ADDR_VAR 0 3
59375: PUSH
59376: LD_VAR 0 1
59380: ST_TO_ADDR
// if size >= result then
59381: LD_VAR 0 2
59385: PUSH
59386: LD_VAR 0 3
59390: GREATEREQUAL
59391: IFFALSE 59395
// exit ;
59393: GO 59445
// if size then
59395: LD_VAR 0 2
59399: IFFALSE 59445
// for i := array downto size do
59401: LD_ADDR_VAR 0 4
59405: PUSH
59406: DOUBLE
59407: LD_VAR 0 1
59411: INC
59412: ST_TO_ADDR
59413: LD_VAR 0 2
59417: PUSH
59418: FOR_DOWNTO
59419: IFFALSE 59443
// result := Delete ( result , result ) ;
59421: LD_ADDR_VAR 0 3
59425: PUSH
59426: LD_VAR 0 3
59430: PPUSH
59431: LD_VAR 0 3
59435: PPUSH
59436: CALL_OW 3
59440: ST_TO_ADDR
59441: GO 59418
59443: POP
59444: POP
// end ;
59445: LD_VAR 0 3
59449: RET
// export function ComExit ( unit ) ; var tmp ; begin
59450: LD_INT 0
59452: PPUSH
59453: PPUSH
// if not IsInUnit ( unit ) then
59454: LD_VAR 0 1
59458: PPUSH
59459: CALL_OW 310
59463: NOT
59464: IFFALSE 59468
// exit ;
59466: GO 59528
// tmp := IsInUnit ( unit ) ;
59468: LD_ADDR_VAR 0 3
59472: PUSH
59473: LD_VAR 0 1
59477: PPUSH
59478: CALL_OW 310
59482: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59483: LD_VAR 0 3
59487: PPUSH
59488: CALL_OW 247
59492: PUSH
59493: LD_INT 2
59495: EQUAL
59496: IFFALSE 59509
// ComExitVehicle ( unit ) else
59498: LD_VAR 0 1
59502: PPUSH
59503: CALL_OW 121
59507: GO 59518
// ComExitBuilding ( unit ) ;
59509: LD_VAR 0 1
59513: PPUSH
59514: CALL_OW 122
// result := tmp ;
59518: LD_ADDR_VAR 0 2
59522: PUSH
59523: LD_VAR 0 3
59527: ST_TO_ADDR
// end ;
59528: LD_VAR 0 2
59532: RET
// export function ComExitAll ( units ) ; var i ; begin
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
// if not units then
59537: LD_VAR 0 1
59541: NOT
59542: IFFALSE 59546
// exit ;
59544: GO 59572
// for i in units do
59546: LD_ADDR_VAR 0 3
59550: PUSH
59551: LD_VAR 0 1
59555: PUSH
59556: FOR_IN
59557: IFFALSE 59570
// ComExit ( i ) ;
59559: LD_VAR 0 3
59563: PPUSH
59564: CALL 59450 0 1
59568: GO 59556
59570: POP
59571: POP
// end ;
59572: LD_VAR 0 2
59576: RET
// export function ResetHc ; begin
59577: LD_INT 0
59579: PPUSH
// InitHc ;
59580: CALL_OW 19
// hc_importance := 0 ;
59584: LD_ADDR_OWVAR 32
59588: PUSH
59589: LD_INT 0
59591: ST_TO_ADDR
// end ;
59592: LD_VAR 0 1
59596: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
59601: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59602: LD_ADDR_VAR 0 6
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: LD_VAR 0 3
59616: PLUS
59617: PUSH
59618: LD_INT 2
59620: DIV
59621: ST_TO_ADDR
// if _x < 0 then
59622: LD_VAR 0 6
59626: PUSH
59627: LD_INT 0
59629: LESS
59630: IFFALSE 59647
// _x := _x * - 1 ;
59632: LD_ADDR_VAR 0 6
59636: PUSH
59637: LD_VAR 0 6
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: MUL
59646: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59647: LD_ADDR_VAR 0 7
59651: PUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_VAR 0 4
59661: PLUS
59662: PUSH
59663: LD_INT 2
59665: DIV
59666: ST_TO_ADDR
// if _y < 0 then
59667: LD_VAR 0 7
59671: PUSH
59672: LD_INT 0
59674: LESS
59675: IFFALSE 59692
// _y := _y * - 1 ;
59677: LD_ADDR_VAR 0 7
59681: PUSH
59682: LD_VAR 0 7
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: MUL
59691: ST_TO_ADDR
// result := [ _x , _y ] ;
59692: LD_ADDR_VAR 0 5
59696: PUSH
59697: LD_VAR 0 6
59701: PUSH
59702: LD_VAR 0 7
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// end ;
59711: LD_VAR 0 5
59715: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59716: LD_INT 0
59718: PPUSH
59719: PPUSH
59720: PPUSH
59721: PPUSH
// task := GetTaskList ( unit ) ;
59722: LD_ADDR_VAR 0 7
59726: PUSH
59727: LD_VAR 0 1
59731: PPUSH
59732: CALL_OW 437
59736: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59737: LD_VAR 0 7
59741: NOT
59742: PUSH
59743: LD_VAR 0 1
59747: PPUSH
59748: LD_VAR 0 2
59752: PPUSH
59753: CALL_OW 308
59757: NOT
59758: AND
59759: IFFALSE 59763
// exit ;
59761: GO 59881
// if IsInArea ( unit , area ) then
59763: LD_VAR 0 1
59767: PPUSH
59768: LD_VAR 0 2
59772: PPUSH
59773: CALL_OW 308
59777: IFFALSE 59795
// begin ComMoveToArea ( unit , goAway ) ;
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_VAR 0 3
59788: PPUSH
59789: CALL_OW 113
// exit ;
59793: GO 59881
// end ; if task [ 1 ] [ 1 ] <> M then
59795: LD_VAR 0 7
59799: PUSH
59800: LD_INT 1
59802: ARRAY
59803: PUSH
59804: LD_INT 1
59806: ARRAY
59807: PUSH
59808: LD_STRING M
59810: NONEQUAL
59811: IFFALSE 59815
// exit ;
59813: GO 59881
// x := task [ 1 ] [ 2 ] ;
59815: LD_ADDR_VAR 0 5
59819: PUSH
59820: LD_VAR 0 7
59824: PUSH
59825: LD_INT 1
59827: ARRAY
59828: PUSH
59829: LD_INT 2
59831: ARRAY
59832: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59833: LD_ADDR_VAR 0 6
59837: PUSH
59838: LD_VAR 0 7
59842: PUSH
59843: LD_INT 1
59845: ARRAY
59846: PUSH
59847: LD_INT 3
59849: ARRAY
59850: ST_TO_ADDR
// if InArea ( x , y , area ) then
59851: LD_VAR 0 5
59855: PPUSH
59856: LD_VAR 0 6
59860: PPUSH
59861: LD_VAR 0 2
59865: PPUSH
59866: CALL_OW 309
59870: IFFALSE 59881
// ComStop ( unit ) ;
59872: LD_VAR 0 1
59876: PPUSH
59877: CALL_OW 141
// end ;
59881: LD_VAR 0 4
59885: RET
// export function Abs ( value ) ; begin
59886: LD_INT 0
59888: PPUSH
// result := value ;
59889: LD_ADDR_VAR 0 2
59893: PUSH
59894: LD_VAR 0 1
59898: ST_TO_ADDR
// if value < 0 then
59899: LD_VAR 0 1
59903: PUSH
59904: LD_INT 0
59906: LESS
59907: IFFALSE 59924
// result := value * - 1 ;
59909: LD_ADDR_VAR 0 2
59913: PUSH
59914: LD_VAR 0 1
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: MUL
59923: ST_TO_ADDR
// end ;
59924: LD_VAR 0 2
59928: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59929: LD_INT 0
59931: PPUSH
59932: PPUSH
59933: PPUSH
59934: PPUSH
59935: PPUSH
59936: PPUSH
59937: PPUSH
59938: PPUSH
// if not unit or not building then
59939: LD_VAR 0 1
59943: NOT
59944: PUSH
59945: LD_VAR 0 2
59949: NOT
59950: OR
59951: IFFALSE 59955
// exit ;
59953: GO 60181
// x := GetX ( building ) ;
59955: LD_ADDR_VAR 0 4
59959: PUSH
59960: LD_VAR 0 2
59964: PPUSH
59965: CALL_OW 250
59969: ST_TO_ADDR
// y := GetY ( building ) ;
59970: LD_ADDR_VAR 0 6
59974: PUSH
59975: LD_VAR 0 2
59979: PPUSH
59980: CALL_OW 251
59984: ST_TO_ADDR
// d := GetDir ( building ) ;
59985: LD_ADDR_VAR 0 8
59989: PUSH
59990: LD_VAR 0 2
59994: PPUSH
59995: CALL_OW 254
59999: ST_TO_ADDR
// r := 4 ;
60000: LD_ADDR_VAR 0 9
60004: PUSH
60005: LD_INT 4
60007: ST_TO_ADDR
// for i := 1 to 5 do
60008: LD_ADDR_VAR 0 10
60012: PUSH
60013: DOUBLE
60014: LD_INT 1
60016: DEC
60017: ST_TO_ADDR
60018: LD_INT 5
60020: PUSH
60021: FOR_TO
60022: IFFALSE 60179
// begin _x := ShiftX ( x , d , r + i ) ;
60024: LD_ADDR_VAR 0 5
60028: PUSH
60029: LD_VAR 0 4
60033: PPUSH
60034: LD_VAR 0 8
60038: PPUSH
60039: LD_VAR 0 9
60043: PUSH
60044: LD_VAR 0 10
60048: PLUS
60049: PPUSH
60050: CALL_OW 272
60054: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60055: LD_ADDR_VAR 0 7
60059: PUSH
60060: LD_VAR 0 6
60064: PPUSH
60065: LD_VAR 0 8
60069: PPUSH
60070: LD_VAR 0 9
60074: PUSH
60075: LD_VAR 0 10
60079: PLUS
60080: PPUSH
60081: CALL_OW 273
60085: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60086: LD_VAR 0 5
60090: PPUSH
60091: LD_VAR 0 7
60095: PPUSH
60096: CALL_OW 488
60100: PUSH
60101: LD_VAR 0 5
60105: PPUSH
60106: LD_VAR 0 7
60110: PPUSH
60111: CALL_OW 428
60115: PPUSH
60116: CALL_OW 247
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: IN
60131: NOT
60132: AND
60133: IFFALSE 60177
// begin ComMoveXY ( unit , _x , _y ) ;
60135: LD_VAR 0 1
60139: PPUSH
60140: LD_VAR 0 5
60144: PPUSH
60145: LD_VAR 0 7
60149: PPUSH
60150: CALL_OW 111
// result := [ _x , _y ] ;
60154: LD_ADDR_VAR 0 3
60158: PUSH
60159: LD_VAR 0 5
60163: PUSH
60164: LD_VAR 0 7
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: ST_TO_ADDR
// exit ;
60173: POP
60174: POP
60175: GO 60181
// end ; end ;
60177: GO 60021
60179: POP
60180: POP
// end ;
60181: LD_VAR 0 3
60185: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60186: LD_INT 0
60188: PPUSH
60189: PPUSH
60190: PPUSH
// result := 0 ;
60191: LD_ADDR_VAR 0 3
60195: PUSH
60196: LD_INT 0
60198: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60199: LD_VAR 0 1
60203: PUSH
60204: LD_INT 0
60206: LESS
60207: PUSH
60208: LD_VAR 0 1
60212: PUSH
60213: LD_INT 8
60215: GREATER
60216: OR
60217: PUSH
60218: LD_VAR 0 2
60222: PUSH
60223: LD_INT 0
60225: LESS
60226: OR
60227: PUSH
60228: LD_VAR 0 2
60232: PUSH
60233: LD_INT 8
60235: GREATER
60236: OR
60237: IFFALSE 60241
// exit ;
60239: GO 60316
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60241: LD_ADDR_VAR 0 4
60245: PUSH
60246: LD_INT 22
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PPUSH
60258: CALL_OW 69
60262: PUSH
60263: FOR_IN
60264: IFFALSE 60314
// begin un := UnitShoot ( i ) ;
60266: LD_ADDR_VAR 0 5
60270: PUSH
60271: LD_VAR 0 4
60275: PPUSH
60276: CALL_OW 504
60280: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60281: LD_VAR 0 5
60285: PPUSH
60286: CALL_OW 255
60290: PUSH
60291: LD_VAR 0 1
60295: EQUAL
60296: IFFALSE 60312
// begin result := un ;
60298: LD_ADDR_VAR 0 3
60302: PUSH
60303: LD_VAR 0 5
60307: ST_TO_ADDR
// exit ;
60308: POP
60309: POP
60310: GO 60316
// end ; end ;
60312: GO 60263
60314: POP
60315: POP
// end ;
60316: LD_VAR 0 3
60320: RET
// export function GetCargoBay ( units ) ; begin
60321: LD_INT 0
60323: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60324: LD_ADDR_VAR 0 2
60328: PUSH
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 34
60339: PUSH
60340: LD_INT 12
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 34
60349: PUSH
60350: LD_INT 51
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 34
60359: PUSH
60360: LD_INT 32
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 34
60369: PUSH
60370: LD_INT 89
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: PPUSH
60384: CALL_OW 72
60388: ST_TO_ADDR
// end ;
60389: LD_VAR 0 2
60393: RET
// export function Negate ( value ) ; begin
60394: LD_INT 0
60396: PPUSH
// result := not value ;
60397: LD_ADDR_VAR 0 2
60401: PUSH
60402: LD_VAR 0 1
60406: NOT
60407: ST_TO_ADDR
// end ;
60408: LD_VAR 0 2
60412: RET
// export function Inc ( value ) ; begin
60413: LD_INT 0
60415: PPUSH
// result := value + 1 ;
60416: LD_ADDR_VAR 0 2
60420: PUSH
60421: LD_VAR 0 1
60425: PUSH
60426: LD_INT 1
60428: PLUS
60429: ST_TO_ADDR
// end ;
60430: LD_VAR 0 2
60434: RET
// export function Dec ( value ) ; begin
60435: LD_INT 0
60437: PPUSH
// result := value - 1 ;
60438: LD_ADDR_VAR 0 2
60442: PUSH
60443: LD_VAR 0 1
60447: PUSH
60448: LD_INT 1
60450: MINUS
60451: ST_TO_ADDR
// end ;
60452: LD_VAR 0 2
60456: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60457: LD_INT 0
60459: PPUSH
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
60465: PPUSH
60466: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60467: LD_VAR 0 1
60471: PPUSH
60472: LD_VAR 0 2
60476: PPUSH
60477: CALL_OW 488
60481: NOT
60482: PUSH
60483: LD_VAR 0 3
60487: PPUSH
60488: LD_VAR 0 4
60492: PPUSH
60493: CALL_OW 488
60497: NOT
60498: OR
60499: IFFALSE 60512
// begin result := - 1 ;
60501: LD_ADDR_VAR 0 5
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: ST_TO_ADDR
// exit ;
60510: GO 60747
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60512: LD_ADDR_VAR 0 12
60516: PUSH
60517: LD_VAR 0 1
60521: PPUSH
60522: LD_VAR 0 2
60526: PPUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: LD_VAR 0 4
60536: PPUSH
60537: CALL 59597 0 4
60541: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60542: LD_ADDR_VAR 0 11
60546: PUSH
60547: LD_VAR 0 1
60551: PPUSH
60552: LD_VAR 0 2
60556: PPUSH
60557: LD_VAR 0 12
60561: PUSH
60562: LD_INT 1
60564: ARRAY
60565: PPUSH
60566: LD_VAR 0 12
60570: PUSH
60571: LD_INT 2
60573: ARRAY
60574: PPUSH
60575: CALL_OW 298
60579: ST_TO_ADDR
// distance := 9999 ;
60580: LD_ADDR_VAR 0 10
60584: PUSH
60585: LD_INT 9999
60587: ST_TO_ADDR
// for i := 0 to 5 do
60588: LD_ADDR_VAR 0 6
60592: PUSH
60593: DOUBLE
60594: LD_INT 0
60596: DEC
60597: ST_TO_ADDR
60598: LD_INT 5
60600: PUSH
60601: FOR_TO
60602: IFFALSE 60745
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60604: LD_ADDR_VAR 0 7
60608: PUSH
60609: LD_VAR 0 1
60613: PPUSH
60614: LD_VAR 0 6
60618: PPUSH
60619: LD_VAR 0 11
60623: PPUSH
60624: CALL_OW 272
60628: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60629: LD_ADDR_VAR 0 8
60633: PUSH
60634: LD_VAR 0 2
60638: PPUSH
60639: LD_VAR 0 6
60643: PPUSH
60644: LD_VAR 0 11
60648: PPUSH
60649: CALL_OW 273
60653: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60654: LD_VAR 0 7
60658: PPUSH
60659: LD_VAR 0 8
60663: PPUSH
60664: CALL_OW 488
60668: NOT
60669: IFFALSE 60673
// continue ;
60671: GO 60601
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60673: LD_ADDR_VAR 0 9
60677: PUSH
60678: LD_VAR 0 12
60682: PUSH
60683: LD_INT 1
60685: ARRAY
60686: PPUSH
60687: LD_VAR 0 12
60691: PUSH
60692: LD_INT 2
60694: ARRAY
60695: PPUSH
60696: LD_VAR 0 7
60700: PPUSH
60701: LD_VAR 0 8
60705: PPUSH
60706: CALL_OW 298
60710: ST_TO_ADDR
// if tmp < distance then
60711: LD_VAR 0 9
60715: PUSH
60716: LD_VAR 0 10
60720: LESS
60721: IFFALSE 60743
// begin result := i ;
60723: LD_ADDR_VAR 0 5
60727: PUSH
60728: LD_VAR 0 6
60732: ST_TO_ADDR
// distance := tmp ;
60733: LD_ADDR_VAR 0 10
60737: PUSH
60738: LD_VAR 0 9
60742: ST_TO_ADDR
// end ; end ;
60743: GO 60601
60745: POP
60746: POP
// end ;
60747: LD_VAR 0 5
60751: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60752: LD_INT 0
60754: PPUSH
60755: PPUSH
// if not driver or not IsInUnit ( driver ) then
60756: LD_VAR 0 1
60760: NOT
60761: PUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: CALL_OW 310
60771: NOT
60772: OR
60773: IFFALSE 60777
// exit ;
60775: GO 60867
// vehicle := IsInUnit ( driver ) ;
60777: LD_ADDR_VAR 0 3
60781: PUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: CALL_OW 310
60791: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60792: LD_VAR 0 1
60796: PPUSH
60797: LD_STRING \
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: PUSH
60827: LD_STRING E
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_VAR 0 3
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PPUSH
60863: CALL_OW 446
// end ;
60867: LD_VAR 0 2
60871: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60872: LD_INT 0
60874: PPUSH
60875: PPUSH
// if not driver or not IsInUnit ( driver ) then
60876: LD_VAR 0 1
60880: NOT
60881: PUSH
60882: LD_VAR 0 1
60886: PPUSH
60887: CALL_OW 310
60891: NOT
60892: OR
60893: IFFALSE 60897
// exit ;
60895: GO 60987
// vehicle := IsInUnit ( driver ) ;
60897: LD_ADDR_VAR 0 3
60901: PUSH
60902: LD_VAR 0 1
60906: PPUSH
60907: CALL_OW 310
60911: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60912: LD_VAR 0 1
60916: PPUSH
60917: LD_STRING \
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: LD_STRING E
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_VAR 0 3
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PPUSH
60983: CALL_OW 447
// end ;
60987: LD_VAR 0 2
60991: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60992: LD_INT 0
60994: PPUSH
60995: PPUSH
60996: PPUSH
// tmp := [ ] ;
60997: LD_ADDR_VAR 0 5
61001: PUSH
61002: EMPTY
61003: ST_TO_ADDR
// for i in units do
61004: LD_ADDR_VAR 0 4
61008: PUSH
61009: LD_VAR 0 1
61013: PUSH
61014: FOR_IN
61015: IFFALSE 61053
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61017: LD_ADDR_VAR 0 5
61021: PUSH
61022: LD_VAR 0 5
61026: PPUSH
61027: LD_VAR 0 5
61031: PUSH
61032: LD_INT 1
61034: PLUS
61035: PPUSH
61036: LD_VAR 0 4
61040: PPUSH
61041: CALL_OW 256
61045: PPUSH
61046: CALL_OW 2
61050: ST_TO_ADDR
61051: GO 61014
61053: POP
61054: POP
// if not tmp then
61055: LD_VAR 0 5
61059: NOT
61060: IFFALSE 61064
// exit ;
61062: GO 61112
// if asc then
61064: LD_VAR 0 2
61068: IFFALSE 61092
// result := SortListByListAsc ( units , tmp ) else
61070: LD_ADDR_VAR 0 3
61074: PUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: CALL_OW 76
61089: ST_TO_ADDR
61090: GO 61112
// result := SortListByListDesc ( units , tmp ) ;
61092: LD_ADDR_VAR 0 3
61096: PUSH
61097: LD_VAR 0 1
61101: PPUSH
61102: LD_VAR 0 5
61106: PPUSH
61107: CALL_OW 77
61111: ST_TO_ADDR
// end ;
61112: LD_VAR 0 3
61116: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61117: LD_INT 0
61119: PPUSH
61120: PPUSH
// task := GetTaskList ( mech ) ;
61121: LD_ADDR_VAR 0 4
61125: PUSH
61126: LD_VAR 0 1
61130: PPUSH
61131: CALL_OW 437
61135: ST_TO_ADDR
// if not task then
61136: LD_VAR 0 4
61140: NOT
61141: IFFALSE 61145
// exit ;
61143: GO 61187
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61145: LD_ADDR_VAR 0 3
61149: PUSH
61150: LD_VAR 0 4
61154: PUSH
61155: LD_INT 1
61157: ARRAY
61158: PUSH
61159: LD_INT 1
61161: ARRAY
61162: PUSH
61163: LD_STRING r
61165: EQUAL
61166: PUSH
61167: LD_VAR 0 4
61171: PUSH
61172: LD_INT 1
61174: ARRAY
61175: PUSH
61176: LD_INT 4
61178: ARRAY
61179: PUSH
61180: LD_VAR 0 2
61184: EQUAL
61185: AND
61186: ST_TO_ADDR
// end ;
61187: LD_VAR 0 3
61191: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61192: LD_INT 0
61194: PPUSH
// SetDir ( unit , d ) ;
61195: LD_VAR 0 1
61199: PPUSH
61200: LD_VAR 0 4
61204: PPUSH
61205: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61209: LD_VAR 0 1
61213: PPUSH
61214: LD_VAR 0 2
61218: PPUSH
61219: LD_VAR 0 3
61223: PPUSH
61224: LD_VAR 0 5
61228: PPUSH
61229: CALL_OW 48
// end ;
61233: LD_VAR 0 6
61237: RET
// export function ToNaturalNumber ( number ) ; begin
61238: LD_INT 0
61240: PPUSH
// result := number div 1 ;
61241: LD_ADDR_VAR 0 2
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_INT 1
61253: DIV
61254: ST_TO_ADDR
// if number < 0 then
61255: LD_VAR 0 1
61259: PUSH
61260: LD_INT 0
61262: LESS
61263: IFFALSE 61273
// result := 0 ;
61265: LD_ADDR_VAR 0 2
61269: PUSH
61270: LD_INT 0
61272: ST_TO_ADDR
// end ;
61273: LD_VAR 0 2
61277: RET
// export function SortByClass ( units , class ) ; var un ; begin
61278: LD_INT 0
61280: PPUSH
61281: PPUSH
// if not units or not class then
61282: LD_VAR 0 1
61286: NOT
61287: PUSH
61288: LD_VAR 0 2
61292: NOT
61293: OR
61294: IFFALSE 61298
// exit ;
61296: GO 61393
// result := [ ] ;
61298: LD_ADDR_VAR 0 3
61302: PUSH
61303: EMPTY
61304: ST_TO_ADDR
// for un in units do
61305: LD_ADDR_VAR 0 4
61309: PUSH
61310: LD_VAR 0 1
61314: PUSH
61315: FOR_IN
61316: IFFALSE 61391
// if GetClass ( un ) = class then
61318: LD_VAR 0 4
61322: PPUSH
61323: CALL_OW 257
61327: PUSH
61328: LD_VAR 0 2
61332: EQUAL
61333: IFFALSE 61360
// result := Insert ( result , 1 , un ) else
61335: LD_ADDR_VAR 0 3
61339: PUSH
61340: LD_VAR 0 3
61344: PPUSH
61345: LD_INT 1
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: CALL_OW 2
61357: ST_TO_ADDR
61358: GO 61389
// result := Replace ( result , result + 1 , un ) ;
61360: LD_ADDR_VAR 0 3
61364: PUSH
61365: LD_VAR 0 3
61369: PPUSH
61370: LD_VAR 0 3
61374: PUSH
61375: LD_INT 1
61377: PLUS
61378: PPUSH
61379: LD_VAR 0 4
61383: PPUSH
61384: CALL_OW 1
61388: ST_TO_ADDR
61389: GO 61315
61391: POP
61392: POP
// end ;
61393: LD_VAR 0 3
61397: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61398: LD_INT 0
61400: PPUSH
61401: PPUSH
61402: PPUSH
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
// result := [ ] ;
61407: LD_ADDR_VAR 0 4
61411: PUSH
61412: EMPTY
61413: ST_TO_ADDR
// if x - r < 0 then
61414: LD_VAR 0 1
61418: PUSH
61419: LD_VAR 0 3
61423: MINUS
61424: PUSH
61425: LD_INT 0
61427: LESS
61428: IFFALSE 61440
// min_x := 0 else
61430: LD_ADDR_VAR 0 8
61434: PUSH
61435: LD_INT 0
61437: ST_TO_ADDR
61438: GO 61456
// min_x := x - r ;
61440: LD_ADDR_VAR 0 8
61444: PUSH
61445: LD_VAR 0 1
61449: PUSH
61450: LD_VAR 0 3
61454: MINUS
61455: ST_TO_ADDR
// if y - r < 0 then
61456: LD_VAR 0 2
61460: PUSH
61461: LD_VAR 0 3
61465: MINUS
61466: PUSH
61467: LD_INT 0
61469: LESS
61470: IFFALSE 61482
// min_y := 0 else
61472: LD_ADDR_VAR 0 7
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
61480: GO 61498
// min_y := y - r ;
61482: LD_ADDR_VAR 0 7
61486: PUSH
61487: LD_VAR 0 2
61491: PUSH
61492: LD_VAR 0 3
61496: MINUS
61497: ST_TO_ADDR
// max_x := x + r ;
61498: LD_ADDR_VAR 0 9
61502: PUSH
61503: LD_VAR 0 1
61507: PUSH
61508: LD_VAR 0 3
61512: PLUS
61513: ST_TO_ADDR
// max_y := y + r ;
61514: LD_ADDR_VAR 0 10
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: LD_VAR 0 3
61528: PLUS
61529: ST_TO_ADDR
// for _x = min_x to max_x do
61530: LD_ADDR_VAR 0 5
61534: PUSH
61535: DOUBLE
61536: LD_VAR 0 8
61540: DEC
61541: ST_TO_ADDR
61542: LD_VAR 0 9
61546: PUSH
61547: FOR_TO
61548: IFFALSE 61649
// for _y = min_y to max_y do
61550: LD_ADDR_VAR 0 6
61554: PUSH
61555: DOUBLE
61556: LD_VAR 0 7
61560: DEC
61561: ST_TO_ADDR
61562: LD_VAR 0 10
61566: PUSH
61567: FOR_TO
61568: IFFALSE 61645
// begin if not ValidHex ( _x , _y ) then
61570: LD_VAR 0 5
61574: PPUSH
61575: LD_VAR 0 6
61579: PPUSH
61580: CALL_OW 488
61584: NOT
61585: IFFALSE 61589
// continue ;
61587: GO 61567
// if GetResourceTypeXY ( _x , _y ) then
61589: LD_VAR 0 5
61593: PPUSH
61594: LD_VAR 0 6
61598: PPUSH
61599: CALL_OW 283
61603: IFFALSE 61643
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61605: LD_ADDR_VAR 0 4
61609: PUSH
61610: LD_VAR 0 4
61614: PPUSH
61615: LD_VAR 0 4
61619: PUSH
61620: LD_INT 1
61622: PLUS
61623: PPUSH
61624: LD_VAR 0 5
61628: PUSH
61629: LD_VAR 0 6
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PPUSH
61638: CALL_OW 1
61642: ST_TO_ADDR
// end ;
61643: GO 61567
61645: POP
61646: POP
61647: GO 61547
61649: POP
61650: POP
// end ;
61651: LD_VAR 0 4
61655: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61656: LD_INT 0
61658: PPUSH
61659: PPUSH
61660: PPUSH
61661: PPUSH
61662: PPUSH
61663: PPUSH
61664: PPUSH
61665: PPUSH
// if not units then
61666: LD_VAR 0 1
61670: NOT
61671: IFFALSE 61675
// exit ;
61673: GO 62203
// result := UnitFilter ( units , [ f_ok ] ) ;
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 50
61687: PUSH
61688: EMPTY
61689: LIST
61690: PPUSH
61691: CALL_OW 72
61695: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61696: LD_ADDR_VAR 0 8
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: LD_INT 1
61708: ARRAY
61709: PPUSH
61710: CALL_OW 255
61714: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61715: LD_ADDR_VAR 0 10
61719: PUSH
61720: LD_INT 29
61722: PUSH
61723: LD_INT 91
61725: PUSH
61726: LD_INT 49
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: ST_TO_ADDR
// if not result then
61734: LD_VAR 0 3
61738: NOT
61739: IFFALSE 61743
// exit ;
61741: GO 62203
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_INT 81
61750: PUSH
61751: LD_VAR 0 8
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PPUSH
61760: CALL_OW 69
61764: ST_TO_ADDR
// for i in result do
61765: LD_ADDR_VAR 0 4
61769: PUSH
61770: LD_VAR 0 3
61774: PUSH
61775: FOR_IN
61776: IFFALSE 62201
// begin tag := GetTag ( i ) + 1 ;
61778: LD_ADDR_VAR 0 9
61782: PUSH
61783: LD_VAR 0 4
61787: PPUSH
61788: CALL_OW 110
61792: PUSH
61793: LD_INT 1
61795: PLUS
61796: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61797: LD_ADDR_VAR 0 7
61801: PUSH
61802: LD_VAR 0 4
61806: PPUSH
61807: CALL_OW 250
61811: PPUSH
61812: LD_VAR 0 4
61816: PPUSH
61817: CALL_OW 251
61821: PPUSH
61822: LD_INT 4
61824: PPUSH
61825: CALL 61398 0 3
61829: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61830: LD_VAR 0 4
61834: PPUSH
61835: CALL_OW 247
61839: PUSH
61840: LD_INT 2
61842: EQUAL
61843: PUSH
61844: LD_VAR 0 7
61848: PUSH
61849: LD_INT 2
61851: GREATER
61852: AND
61853: PUSH
61854: LD_VAR 0 4
61858: PPUSH
61859: CALL_OW 264
61863: PUSH
61864: LD_VAR 0 10
61868: IN
61869: NOT
61870: AND
61871: IFFALSE 61910
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61873: LD_VAR 0 4
61877: PPUSH
61878: LD_VAR 0 7
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: PUSH
61887: LD_INT 1
61889: ARRAY
61890: PPUSH
61891: LD_VAR 0 7
61895: PUSH
61896: LD_INT 1
61898: ARRAY
61899: PUSH
61900: LD_INT 2
61902: ARRAY
61903: PPUSH
61904: CALL_OW 116
61908: GO 62199
// if path > tag then
61910: LD_VAR 0 2
61914: PUSH
61915: LD_VAR 0 9
61919: GREATER
61920: IFFALSE 62128
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61922: LD_ADDR_VAR 0 6
61926: PUSH
61927: LD_VAR 0 5
61931: PPUSH
61932: LD_INT 91
61934: PUSH
61935: LD_VAR 0 4
61939: PUSH
61940: LD_INT 8
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: PPUSH
61948: CALL_OW 72
61952: ST_TO_ADDR
// if nearEnemy then
61953: LD_VAR 0 6
61957: IFFALSE 62026
// begin if GetWeapon ( i ) = ru_time_lapser then
61959: LD_VAR 0 4
61963: PPUSH
61964: CALL_OW 264
61968: PUSH
61969: LD_INT 49
61971: EQUAL
61972: IFFALSE 62000
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61974: LD_VAR 0 4
61978: PPUSH
61979: LD_VAR 0 6
61983: PPUSH
61984: LD_VAR 0 4
61988: PPUSH
61989: CALL_OW 74
61993: PPUSH
61994: CALL_OW 112
61998: GO 62024
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62000: LD_VAR 0 4
62004: PPUSH
62005: LD_VAR 0 6
62009: PPUSH
62010: LD_VAR 0 4
62014: PPUSH
62015: CALL_OW 74
62019: PPUSH
62020: CALL 63274 0 2
// end else
62024: GO 62126
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62026: LD_VAR 0 4
62030: PPUSH
62031: LD_VAR 0 2
62035: PUSH
62036: LD_VAR 0 9
62040: ARRAY
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PPUSH
62046: LD_VAR 0 2
62050: PUSH
62051: LD_VAR 0 9
62055: ARRAY
62056: PUSH
62057: LD_INT 2
62059: ARRAY
62060: PPUSH
62061: CALL_OW 297
62065: PUSH
62066: LD_INT 6
62068: GREATER
62069: IFFALSE 62112
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62071: LD_VAR 0 4
62075: PPUSH
62076: LD_VAR 0 2
62080: PUSH
62081: LD_VAR 0 9
62085: ARRAY
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PPUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_VAR 0 9
62100: ARRAY
62101: PUSH
62102: LD_INT 2
62104: ARRAY
62105: PPUSH
62106: CALL_OW 114
62110: GO 62126
// SetTag ( i , tag ) ;
62112: LD_VAR 0 4
62116: PPUSH
62117: LD_VAR 0 9
62121: PPUSH
62122: CALL_OW 109
// end else
62126: GO 62199
// if enemy then
62128: LD_VAR 0 5
62132: IFFALSE 62199
// begin if GetWeapon ( i ) = ru_time_lapser then
62134: LD_VAR 0 4
62138: PPUSH
62139: CALL_OW 264
62143: PUSH
62144: LD_INT 49
62146: EQUAL
62147: IFFALSE 62175
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62149: LD_VAR 0 4
62153: PPUSH
62154: LD_VAR 0 5
62158: PPUSH
62159: LD_VAR 0 4
62163: PPUSH
62164: CALL_OW 74
62168: PPUSH
62169: CALL_OW 112
62173: GO 62199
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62175: LD_VAR 0 4
62179: PPUSH
62180: LD_VAR 0 5
62184: PPUSH
62185: LD_VAR 0 4
62189: PPUSH
62190: CALL_OW 74
62194: PPUSH
62195: CALL 63274 0 2
// end ; end ;
62199: GO 61775
62201: POP
62202: POP
// end ;
62203: LD_VAR 0 3
62207: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62208: LD_INT 0
62210: PPUSH
62211: PPUSH
62212: PPUSH
// if not unit or IsInUnit ( unit ) then
62213: LD_VAR 0 1
62217: NOT
62218: PUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: CALL_OW 310
62228: OR
62229: IFFALSE 62233
// exit ;
62231: GO 62324
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62233: LD_ADDR_VAR 0 4
62237: PUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 250
62247: PPUSH
62248: LD_VAR 0 2
62252: PPUSH
62253: LD_INT 1
62255: PPUSH
62256: CALL_OW 272
62260: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62261: LD_ADDR_VAR 0 5
62265: PUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: CALL_OW 251
62275: PPUSH
62276: LD_VAR 0 2
62280: PPUSH
62281: LD_INT 1
62283: PPUSH
62284: CALL_OW 273
62288: ST_TO_ADDR
// if ValidHex ( x , y ) then
62289: LD_VAR 0 4
62293: PPUSH
62294: LD_VAR 0 5
62298: PPUSH
62299: CALL_OW 488
62303: IFFALSE 62324
// ComTurnXY ( unit , x , y ) ;
62305: LD_VAR 0 1
62309: PPUSH
62310: LD_VAR 0 4
62314: PPUSH
62315: LD_VAR 0 5
62319: PPUSH
62320: CALL_OW 118
// end ;
62324: LD_VAR 0 3
62328: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62329: LD_INT 0
62331: PPUSH
62332: PPUSH
// result := false ;
62333: LD_ADDR_VAR 0 3
62337: PUSH
62338: LD_INT 0
62340: ST_TO_ADDR
// if not units then
62341: LD_VAR 0 2
62345: NOT
62346: IFFALSE 62350
// exit ;
62348: GO 62395
// for i in units do
62350: LD_ADDR_VAR 0 4
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: FOR_IN
62361: IFFALSE 62393
// if See ( side , i ) then
62363: LD_VAR 0 1
62367: PPUSH
62368: LD_VAR 0 4
62372: PPUSH
62373: CALL_OW 292
62377: IFFALSE 62391
// begin result := true ;
62379: LD_ADDR_VAR 0 3
62383: PUSH
62384: LD_INT 1
62386: ST_TO_ADDR
// exit ;
62387: POP
62388: POP
62389: GO 62395
// end ;
62391: GO 62360
62393: POP
62394: POP
// end ;
62395: LD_VAR 0 3
62399: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62400: LD_INT 0
62402: PPUSH
62403: PPUSH
62404: PPUSH
62405: PPUSH
// if not unit or not points then
62406: LD_VAR 0 1
62410: NOT
62411: PUSH
62412: LD_VAR 0 2
62416: NOT
62417: OR
62418: IFFALSE 62422
// exit ;
62420: GO 62512
// dist := 99999 ;
62422: LD_ADDR_VAR 0 5
62426: PUSH
62427: LD_INT 99999
62429: ST_TO_ADDR
// for i in points do
62430: LD_ADDR_VAR 0 4
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: FOR_IN
62441: IFFALSE 62510
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62443: LD_ADDR_VAR 0 6
62447: PUSH
62448: LD_VAR 0 1
62452: PPUSH
62453: LD_VAR 0 4
62457: PUSH
62458: LD_INT 1
62460: ARRAY
62461: PPUSH
62462: LD_VAR 0 4
62466: PUSH
62467: LD_INT 2
62469: ARRAY
62470: PPUSH
62471: CALL_OW 297
62475: ST_TO_ADDR
// if tmpDist < dist then
62476: LD_VAR 0 6
62480: PUSH
62481: LD_VAR 0 5
62485: LESS
62486: IFFALSE 62508
// begin result := i ;
62488: LD_ADDR_VAR 0 3
62492: PUSH
62493: LD_VAR 0 4
62497: ST_TO_ADDR
// dist := tmpDist ;
62498: LD_ADDR_VAR 0 5
62502: PUSH
62503: LD_VAR 0 6
62507: ST_TO_ADDR
// end ; end ;
62508: GO 62440
62510: POP
62511: POP
// end ;
62512: LD_VAR 0 3
62516: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62517: LD_INT 0
62519: PPUSH
// uc_side := side ;
62520: LD_ADDR_OWVAR 20
62524: PUSH
62525: LD_VAR 0 1
62529: ST_TO_ADDR
// uc_nation := 3 ;
62530: LD_ADDR_OWVAR 21
62534: PUSH
62535: LD_INT 3
62537: ST_TO_ADDR
// vc_chassis := 25 ;
62538: LD_ADDR_OWVAR 37
62542: PUSH
62543: LD_INT 25
62545: ST_TO_ADDR
// vc_engine := engine_siberite ;
62546: LD_ADDR_OWVAR 39
62550: PUSH
62551: LD_INT 3
62553: ST_TO_ADDR
// vc_control := control_computer ;
62554: LD_ADDR_OWVAR 38
62558: PUSH
62559: LD_INT 3
62561: ST_TO_ADDR
// vc_weapon := 59 ;
62562: LD_ADDR_OWVAR 40
62566: PUSH
62567: LD_INT 59
62569: ST_TO_ADDR
// result := CreateVehicle ;
62570: LD_ADDR_VAR 0 5
62574: PUSH
62575: CALL_OW 45
62579: ST_TO_ADDR
// SetDir ( result , d ) ;
62580: LD_VAR 0 5
62584: PPUSH
62585: LD_VAR 0 4
62589: PPUSH
62590: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62594: LD_VAR 0 5
62598: PPUSH
62599: LD_VAR 0 2
62603: PPUSH
62604: LD_VAR 0 3
62608: PPUSH
62609: LD_INT 0
62611: PPUSH
62612: CALL_OW 48
// end ;
62616: LD_VAR 0 5
62620: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62626: LD_ADDR_VAR 0 2
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62649: LD_VAR 0 1
62653: NOT
62654: PUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 264
62664: PUSH
62665: LD_INT 12
62667: PUSH
62668: LD_INT 51
62670: PUSH
62671: LD_INT 32
62673: PUSH
62674: LD_INT 89
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: IN
62683: NOT
62684: OR
62685: IFFALSE 62689
// exit ;
62687: GO 62787
// for i := 1 to 3 do
62689: LD_ADDR_VAR 0 3
62693: PUSH
62694: DOUBLE
62695: LD_INT 1
62697: DEC
62698: ST_TO_ADDR
62699: LD_INT 3
62701: PUSH
62702: FOR_TO
62703: IFFALSE 62785
// begin tmp := GetCargo ( cargo , i ) ;
62705: LD_ADDR_VAR 0 4
62709: PUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: LD_VAR 0 3
62719: PPUSH
62720: CALL_OW 289
62724: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62725: LD_ADDR_VAR 0 2
62729: PUSH
62730: LD_VAR 0 2
62734: PPUSH
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_VAR 0 4
62744: PPUSH
62745: CALL_OW 1
62749: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62750: LD_ADDR_VAR 0 2
62754: PUSH
62755: LD_VAR 0 2
62759: PPUSH
62760: LD_INT 4
62762: PPUSH
62763: LD_VAR 0 2
62767: PUSH
62768: LD_INT 4
62770: ARRAY
62771: PUSH
62772: LD_VAR 0 4
62776: PLUS
62777: PPUSH
62778: CALL_OW 1
62782: ST_TO_ADDR
// end ;
62783: GO 62702
62785: POP
62786: POP
// end ;
62787: LD_VAR 0 2
62791: RET
// export function Length ( array ) ; begin
62792: LD_INT 0
62794: PPUSH
// result := array + 0 ;
62795: LD_ADDR_VAR 0 2
62799: PUSH
62800: LD_VAR 0 1
62804: PUSH
62805: LD_INT 0
62807: PLUS
62808: ST_TO_ADDR
// end ;
62809: LD_VAR 0 2
62813: RET
// export function PrepareArray ( array ) ; begin
62814: LD_INT 0
62816: PPUSH
// result := array diff 0 ;
62817: LD_ADDR_VAR 0 2
62821: PUSH
62822: LD_VAR 0 1
62826: PUSH
62827: LD_INT 0
62829: DIFF
62830: ST_TO_ADDR
// if not result [ 1 ] then
62831: LD_VAR 0 2
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: NOT
62840: IFFALSE 62860
// result := Delete ( result , 1 ) ;
62842: LD_ADDR_VAR 0 2
62846: PUSH
62847: LD_VAR 0 2
62851: PPUSH
62852: LD_INT 1
62854: PPUSH
62855: CALL_OW 3
62859: ST_TO_ADDR
// end ;
62860: LD_VAR 0 2
62864: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62865: LD_INT 0
62867: PPUSH
62868: PPUSH
62869: PPUSH
62870: PPUSH
// sibRocketRange := 25 ;
62871: LD_ADDR_VAR 0 6
62875: PUSH
62876: LD_INT 25
62878: ST_TO_ADDR
// result := false ;
62879: LD_ADDR_VAR 0 4
62883: PUSH
62884: LD_INT 0
62886: ST_TO_ADDR
// for i := 0 to 5 do
62887: LD_ADDR_VAR 0 5
62891: PUSH
62892: DOUBLE
62893: LD_INT 0
62895: DEC
62896: ST_TO_ADDR
62897: LD_INT 5
62899: PUSH
62900: FOR_TO
62901: IFFALSE 62968
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62903: LD_VAR 0 1
62907: PPUSH
62908: LD_VAR 0 5
62912: PPUSH
62913: LD_VAR 0 6
62917: PPUSH
62918: CALL_OW 272
62922: PPUSH
62923: LD_VAR 0 2
62927: PPUSH
62928: LD_VAR 0 5
62932: PPUSH
62933: LD_VAR 0 6
62937: PPUSH
62938: CALL_OW 273
62942: PPUSH
62943: LD_VAR 0 3
62947: PPUSH
62948: CALL_OW 309
62952: IFFALSE 62966
// begin result := true ;
62954: LD_ADDR_VAR 0 4
62958: PUSH
62959: LD_INT 1
62961: ST_TO_ADDR
// exit ;
62962: POP
62963: POP
62964: GO 62970
// end ;
62966: GO 62900
62968: POP
62969: POP
// end ;
62970: LD_VAR 0 4
62974: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62975: LD_INT 0
62977: PPUSH
62978: PPUSH
62979: PPUSH
// if btype = b_depot then
62980: LD_VAR 0 2
62984: PUSH
62985: LD_INT 0
62987: EQUAL
62988: IFFALSE 63000
// begin result := true ;
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_INT 1
62997: ST_TO_ADDR
// exit ;
62998: GO 63116
// end ; pom := GetBase ( depot ) ;
63000: LD_ADDR_VAR 0 4
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 274
63014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63015: LD_ADDR_VAR 0 5
63019: PUSH
63020: LD_VAR 0 2
63024: PPUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 248
63034: PPUSH
63035: CALL_OW 450
63039: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63040: LD_ADDR_VAR 0 3
63044: PUSH
63045: LD_VAR 0 4
63049: PPUSH
63050: LD_INT 1
63052: PPUSH
63053: CALL_OW 275
63057: PUSH
63058: LD_VAR 0 5
63062: PUSH
63063: LD_INT 1
63065: ARRAY
63066: GREATEREQUAL
63067: PUSH
63068: LD_VAR 0 4
63072: PPUSH
63073: LD_INT 2
63075: PPUSH
63076: CALL_OW 275
63080: PUSH
63081: LD_VAR 0 5
63085: PUSH
63086: LD_INT 2
63088: ARRAY
63089: GREATEREQUAL
63090: AND
63091: PUSH
63092: LD_VAR 0 4
63096: PPUSH
63097: LD_INT 3
63099: PPUSH
63100: CALL_OW 275
63104: PUSH
63105: LD_VAR 0 5
63109: PUSH
63110: LD_INT 3
63112: ARRAY
63113: GREATEREQUAL
63114: AND
63115: ST_TO_ADDR
// end ;
63116: LD_VAR 0 3
63120: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63121: LD_INT 0
63123: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63124: LD_VAR 0 1
63128: PPUSH
63129: LD_VAR 0 2
63133: PPUSH
63134: LD_INT 0
63136: PPUSH
63137: LD_INT 0
63139: PPUSH
63140: LD_INT 1
63142: PPUSH
63143: LD_INT 0
63145: PPUSH
63146: CALL_OW 587
// end ;
63150: LD_VAR 0 3
63154: RET
// export function CenterOnNow ( unit ) ; begin
63155: LD_INT 0
63157: PPUSH
// result := IsInUnit ( unit ) ;
63158: LD_ADDR_VAR 0 2
63162: PUSH
63163: LD_VAR 0 1
63167: PPUSH
63168: CALL_OW 310
63172: ST_TO_ADDR
// if not result then
63173: LD_VAR 0 2
63177: NOT
63178: IFFALSE 63190
// result := unit ;
63180: LD_ADDR_VAR 0 2
63184: PUSH
63185: LD_VAR 0 1
63189: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63190: LD_VAR 0 1
63194: PPUSH
63195: CALL_OW 87
// end ;
63199: LD_VAR 0 2
63203: RET
// export function ComMoveHex ( unit , hex ) ; begin
63204: LD_INT 0
63206: PPUSH
// if not hex then
63207: LD_VAR 0 2
63211: NOT
63212: IFFALSE 63216
// exit ;
63214: GO 63269
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63216: LD_VAR 0 2
63220: PUSH
63221: LD_INT 1
63223: ARRAY
63224: PPUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_INT 2
63232: ARRAY
63233: PPUSH
63234: CALL_OW 428
63238: IFFALSE 63242
// exit ;
63240: GO 63269
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63242: LD_VAR 0 1
63246: PPUSH
63247: LD_VAR 0 2
63251: PUSH
63252: LD_INT 1
63254: ARRAY
63255: PPUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 2
63263: ARRAY
63264: PPUSH
63265: CALL_OW 111
// end ;
63269: LD_VAR 0 3
63273: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63274: LD_INT 0
63276: PPUSH
63277: PPUSH
63278: PPUSH
// if not unit or not enemy then
63279: LD_VAR 0 1
63283: NOT
63284: PUSH
63285: LD_VAR 0 2
63289: NOT
63290: OR
63291: IFFALSE 63295
// exit ;
63293: GO 63419
// x := GetX ( enemy ) ;
63295: LD_ADDR_VAR 0 4
63299: PUSH
63300: LD_VAR 0 2
63304: PPUSH
63305: CALL_OW 250
63309: ST_TO_ADDR
// y := GetY ( enemy ) ;
63310: LD_ADDR_VAR 0 5
63314: PUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: CALL_OW 251
63324: ST_TO_ADDR
// if ValidHex ( x , y ) then
63325: LD_VAR 0 4
63329: PPUSH
63330: LD_VAR 0 5
63334: PPUSH
63335: CALL_OW 488
63339: IFFALSE 63419
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63341: LD_VAR 0 2
63345: PPUSH
63346: CALL_OW 247
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: IN
63361: PUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 255
63371: PPUSH
63372: LD_VAR 0 2
63376: PPUSH
63377: CALL_OW 292
63381: OR
63382: IFFALSE 63400
// ComAttackUnit ( unit , enemy ) else
63384: LD_VAR 0 1
63388: PPUSH
63389: LD_VAR 0 2
63393: PPUSH
63394: CALL_OW 115
63398: GO 63419
// ComAgressiveMove ( unit , x , y ) ;
63400: LD_VAR 0 1
63404: PPUSH
63405: LD_VAR 0 4
63409: PPUSH
63410: LD_VAR 0 5
63414: PPUSH
63415: CALL_OW 114
// end ;
63419: LD_VAR 0 3
63423: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63424: LD_INT 0
63426: PPUSH
63427: PPUSH
63428: PPUSH
// list := AreaToList ( area , 0 ) ;
63429: LD_ADDR_VAR 0 5
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: LD_INT 0
63441: PPUSH
63442: CALL_OW 517
63446: ST_TO_ADDR
// if not list then
63447: LD_VAR 0 5
63451: NOT
63452: IFFALSE 63456
// exit ;
63454: GO 63586
// if all then
63456: LD_VAR 0 2
63460: IFFALSE 63548
// begin for i := 1 to list [ 1 ] do
63462: LD_ADDR_VAR 0 4
63466: PUSH
63467: DOUBLE
63468: LD_INT 1
63470: DEC
63471: ST_TO_ADDR
63472: LD_VAR 0 5
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: FOR_TO
63482: IFFALSE 63544
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63484: LD_ADDR_VAR 0 3
63488: PUSH
63489: LD_VAR 0 3
63493: PPUSH
63494: LD_VAR 0 3
63498: PUSH
63499: LD_INT 1
63501: PLUS
63502: PPUSH
63503: LD_VAR 0 5
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PUSH
63512: LD_VAR 0 4
63516: ARRAY
63517: PUSH
63518: LD_VAR 0 5
63522: PUSH
63523: LD_INT 2
63525: ARRAY
63526: PUSH
63527: LD_VAR 0 4
63531: ARRAY
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PPUSH
63537: CALL_OW 1
63541: ST_TO_ADDR
63542: GO 63481
63544: POP
63545: POP
// exit ;
63546: GO 63586
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63548: LD_ADDR_VAR 0 3
63552: PUSH
63553: LD_VAR 0 5
63557: PUSH
63558: LD_INT 1
63560: ARRAY
63561: PUSH
63562: LD_INT 1
63564: ARRAY
63565: PUSH
63566: LD_VAR 0 5
63570: PUSH
63571: LD_INT 2
63573: ARRAY
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: ST_TO_ADDR
// end ;
63586: LD_VAR 0 3
63590: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
// list := AreaToList ( area , 0 ) ;
63595: LD_ADDR_VAR 0 4
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_INT 0
63607: PPUSH
63608: CALL_OW 517
63612: ST_TO_ADDR
// if not list then
63613: LD_VAR 0 4
63617: NOT
63618: IFFALSE 63622
// exit ;
63620: GO 63663
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_VAR 0 4
63631: PUSH
63632: LD_INT 1
63634: ARRAY
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PUSH
63640: LD_VAR 0 4
63644: PUSH
63645: LD_INT 2
63647: ARRAY
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PUSH
63653: LD_VAR 0 2
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: LIST
63662: ST_TO_ADDR
// end ;
63663: LD_VAR 0 3
63667: RET
// export function First ( array ) ; begin
63668: LD_INT 0
63670: PPUSH
// if not array then
63671: LD_VAR 0 1
63675: NOT
63676: IFFALSE 63680
// exit ;
63678: GO 63694
// result := array [ 1 ] ;
63680: LD_ADDR_VAR 0 2
63684: PUSH
63685: LD_VAR 0 1
63689: PUSH
63690: LD_INT 1
63692: ARRAY
63693: ST_TO_ADDR
// end ;
63694: LD_VAR 0 2
63698: RET
// export function Last ( array ) ; begin
63699: LD_INT 0
63701: PPUSH
// if not array then
63702: LD_VAR 0 1
63706: NOT
63707: IFFALSE 63711
// exit ;
63709: GO 63727
// result := array [ array ] ;
63711: LD_ADDR_VAR 0 2
63715: PUSH
63716: LD_VAR 0 1
63720: PUSH
63721: LD_VAR 0 1
63725: ARRAY
63726: ST_TO_ADDR
// end ;
63727: LD_VAR 0 2
63731: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63732: LD_INT 0
63734: PPUSH
63735: PPUSH
// result := [ ] ;
63736: LD_ADDR_VAR 0 5
63740: PUSH
63741: EMPTY
63742: ST_TO_ADDR
// if not array then
63743: LD_VAR 0 1
63747: NOT
63748: IFFALSE 63752
// exit ;
63750: GO 63864
// for i := 1 to array do
63752: LD_ADDR_VAR 0 6
63756: PUSH
63757: DOUBLE
63758: LD_INT 1
63760: DEC
63761: ST_TO_ADDR
63762: LD_VAR 0 1
63766: PUSH
63767: FOR_TO
63768: IFFALSE 63862
// if array [ i ] [ index ] = value then
63770: LD_VAR 0 1
63774: PUSH
63775: LD_VAR 0 6
63779: ARRAY
63780: PUSH
63781: LD_VAR 0 2
63785: ARRAY
63786: PUSH
63787: LD_VAR 0 3
63791: EQUAL
63792: IFFALSE 63860
// begin if indexColumn then
63794: LD_VAR 0 4
63798: IFFALSE 63834
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63800: LD_ADDR_VAR 0 5
63804: PUSH
63805: LD_VAR 0 5
63809: PPUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_VAR 0 6
63819: ARRAY
63820: PUSH
63821: LD_VAR 0 4
63825: ARRAY
63826: PPUSH
63827: CALL 59052 0 2
63831: ST_TO_ADDR
63832: GO 63860
// result := Join ( result , array [ i ] ) ;
63834: LD_ADDR_VAR 0 5
63838: PUSH
63839: LD_VAR 0 5
63843: PPUSH
63844: LD_VAR 0 1
63848: PUSH
63849: LD_VAR 0 6
63853: ARRAY
63854: PPUSH
63855: CALL 59052 0 2
63859: ST_TO_ADDR
// end ;
63860: GO 63767
63862: POP
63863: POP
// end ;
63864: LD_VAR 0 5
63868: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63869: LD_INT 0
63871: PPUSH
// if not vehicles or not parkingPoint then
63872: LD_VAR 0 1
63876: NOT
63877: PUSH
63878: LD_VAR 0 2
63882: NOT
63883: OR
63884: IFFALSE 63888
// exit ;
63886: GO 63986
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63888: LD_ADDR_VAR 0 1
63892: PUSH
63893: LD_VAR 0 1
63897: PPUSH
63898: LD_INT 50
63900: PUSH
63901: EMPTY
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: LD_INT 92
63909: PUSH
63910: LD_VAR 0 2
63914: PUSH
63915: LD_INT 1
63917: ARRAY
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_INT 2
63926: ARRAY
63927: PUSH
63928: LD_INT 8
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PPUSH
63945: CALL_OW 72
63949: ST_TO_ADDR
// if not vehicles then
63950: LD_VAR 0 1
63954: NOT
63955: IFFALSE 63959
// exit ;
63957: GO 63986
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_VAR 0 2
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PPUSH
63973: LD_VAR 0 2
63977: PUSH
63978: LD_INT 2
63980: ARRAY
63981: PPUSH
63982: CALL_OW 111
// end ;
63986: LD_VAR 0 3
63990: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63991: LD_INT 0
63993: PPUSH
63994: PPUSH
63995: PPUSH
// if not side or not area then
63996: LD_VAR 0 1
64000: NOT
64001: PUSH
64002: LD_VAR 0 2
64006: NOT
64007: OR
64008: IFFALSE 64012
// exit ;
64010: GO 64131
// tmp := AreaToList ( area , 0 ) ;
64012: LD_ADDR_VAR 0 5
64016: PUSH
64017: LD_VAR 0 2
64021: PPUSH
64022: LD_INT 0
64024: PPUSH
64025: CALL_OW 517
64029: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64030: LD_ADDR_VAR 0 4
64034: PUSH
64035: DOUBLE
64036: LD_INT 1
64038: DEC
64039: ST_TO_ADDR
64040: LD_VAR 0 5
64044: PUSH
64045: LD_INT 1
64047: ARRAY
64048: PUSH
64049: FOR_TO
64050: IFFALSE 64129
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64052: LD_VAR 0 5
64056: PUSH
64057: LD_INT 1
64059: ARRAY
64060: PUSH
64061: LD_VAR 0 4
64065: ARRAY
64066: PPUSH
64067: LD_VAR 0 5
64071: PUSH
64072: LD_INT 2
64074: ARRAY
64075: PUSH
64076: LD_VAR 0 4
64080: ARRAY
64081: PPUSH
64082: CALL_OW 351
64086: IFFALSE 64127
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64088: LD_VAR 0 5
64092: PUSH
64093: LD_INT 1
64095: ARRAY
64096: PUSH
64097: LD_VAR 0 4
64101: ARRAY
64102: PPUSH
64103: LD_VAR 0 5
64107: PUSH
64108: LD_INT 2
64110: ARRAY
64111: PUSH
64112: LD_VAR 0 4
64116: ARRAY
64117: PPUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 244
// end ;
64127: GO 64049
64129: POP
64130: POP
// end ;
64131: LD_VAR 0 3
64135: RET
