// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// every 0 0$1 trigger GetLives ( JMM ) < 500 and Test1 ( JMM ) do
   5: LD_INT 84
   7: PPUSH
   8: CALL_OW 256
  12: PUSH
  13: LD_INT 500
  15: LESS
  16: IFFALSE 27
  18: PUSH
  19: LD_INT 84
  21: PPUSH
  22: CALL 34 0 1
  26: AND
  27: IFFALSE 33
  29: GO 31
  31: DISABLE
// begin enable ;
  32: ENABLE
// end ;
  33: END
// export function Test1 ( unit ) ; begin
  34: LD_INT 0
  36: PPUSH
// display_strings := Test ;
  37: LD_ADDR_OWVAR 47
  41: PUSH
  42: LD_STRING Test
  44: ST_TO_ADDR
// result := See ( 1 , unit ) ;
  45: LD_ADDR_VAR 0 2
  49: PUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_VAR 0 1
  57: PPUSH
  58: CALL_OW 292
  62: ST_TO_ADDR
// end ; end_of_file
  63: LD_VAR 0 2
  67: RET
// export globalGameSaveCounter ; every 0 0$1 do
  68: GO 70
  70: DISABLE
// begin enable ;
  71: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  72: LD_STRING updateTimer(
  74: PUSH
  75: LD_OWVAR 1
  79: STR
  80: PUSH
  81: LD_STRING );
  83: STR
  84: PPUSH
  85: CALL_OW 559
// end ;
  89: END
// every 0 0$1 do
  90: GO 92
  92: DISABLE
// begin globalGameSaveCounter := 0 ;
  93: LD_ADDR_EXP 1
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 101: LD_STRING setGameSaveCounter(0)
 103: PPUSH
 104: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 108: LD_STRING initStreamRollete();
 110: PPUSH
 111: CALL_OW 559
// InitStreamMode ;
 115: CALL 1460 0 0
// DefineStreamItems ( false ) ;
 119: LD_INT 0
 121: PPUSH
 122: CALL 1924 0 1
// end ;
 126: END
// export function SOS_MapStart ( ) ; begin
 127: LD_INT 0
 129: PPUSH
// if streamModeActive then
 130: LD_EXP 2
 134: IFFALSE 143
// DefineStreamItems ( true ) ;
 136: LD_INT 1
 138: PPUSH
 139: CALL 1924 0 1
// UpdateLuaVariables ( ) ;
 143: CALL 160 0 0
// UpdateFactoryWaypoints ( ) ;
 147: CALL 15046 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 151: CALL 15298 0 0
// end ;
 155: LD_VAR 0 1
 159: RET
// function UpdateLuaVariables ( ) ; begin
 160: LD_INT 0
 162: PPUSH
// if globalGameSaveCounter then
 163: LD_EXP 1
 167: IFFALSE 201
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 169: LD_ADDR_EXP 1
 173: PUSH
 174: LD_EXP 1
 178: PPUSH
 179: CALL 61241 0 1
 183: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 184: LD_STRING setGameSaveCounter(
 186: PUSH
 187: LD_EXP 1
 191: STR
 192: PUSH
 193: LD_STRING )
 195: STR
 196: PPUSH
 197: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 201: LD_STRING setGameDifficulty(
 203: PUSH
 204: LD_OWVAR 67
 208: STR
 209: PUSH
 210: LD_STRING )
 212: STR
 213: PPUSH
 214: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 218: LD_STRING displayDifficulty(
 220: PUSH
 221: LD_OWVAR 67
 225: STR
 226: PUSH
 227: LD_STRING )
 229: STR
 230: PPUSH
 231: CALL_OW 559
// end ;
 235: LD_VAR 0 1
 239: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 240: LD_INT 0
 242: PPUSH
// if p2 = stream_mode then
 243: LD_VAR 0 2
 247: PUSH
 248: LD_INT 100
 250: EQUAL
 251: IFFALSE 1254
// begin if not StreamModeActive then
 253: LD_EXP 2
 257: NOT
 258: IFFALSE 268
// StreamModeActive := true ;
 260: LD_ADDR_EXP 2
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 0 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 0
 275: EQUAL
 276: IFFALSE 282
// InitStreamMode ;
 278: CALL 1460 0 0
// if p3 = 1 then
 282: LD_VAR 0 3
 286: PUSH
 287: LD_INT 1
 289: EQUAL
 290: IFFALSE 300
// sRocket := true ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 1
 299: ST_TO_ADDR
// if p3 = 2 then
 300: LD_VAR 0 3
 304: PUSH
 305: LD_INT 2
 307: EQUAL
 308: IFFALSE 318
// sSpeed := true ;
 310: LD_ADDR_EXP 6
 314: PUSH
 315: LD_INT 1
 317: ST_TO_ADDR
// if p3 = 3 then
 318: LD_VAR 0 3
 322: PUSH
 323: LD_INT 3
 325: EQUAL
 326: IFFALSE 336
// sEngine := true ;
 328: LD_ADDR_EXP 8
 332: PUSH
 333: LD_INT 1
 335: ST_TO_ADDR
// if p3 = 4 then
 336: LD_VAR 0 3
 340: PUSH
 341: LD_INT 4
 343: EQUAL
 344: IFFALSE 354
// sSpec := true ;
 346: LD_ADDR_EXP 5
 350: PUSH
 351: LD_INT 1
 353: ST_TO_ADDR
// if p3 = 5 then
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 5
 361: EQUAL
 362: IFFALSE 372
// sLevel := true ;
 364: LD_ADDR_EXP 9
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// if p3 = 6 then
 372: LD_VAR 0 3
 376: PUSH
 377: LD_INT 6
 379: EQUAL
 380: IFFALSE 390
// sArmoury := true ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// if p3 = 7 then
 390: LD_VAR 0 3
 394: PUSH
 395: LD_INT 7
 397: EQUAL
 398: IFFALSE 408
// sRadar := true ;
 400: LD_ADDR_EXP 11
 404: PUSH
 405: LD_INT 1
 407: ST_TO_ADDR
// if p3 = 8 then
 408: LD_VAR 0 3
 412: PUSH
 413: LD_INT 8
 415: EQUAL
 416: IFFALSE 426
// sBunker := true ;
 418: LD_ADDR_EXP 12
 422: PUSH
 423: LD_INT 1
 425: ST_TO_ADDR
// if p3 = 9 then
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 9
 433: EQUAL
 434: IFFALSE 444
// sHack := true ;
 436: LD_ADDR_EXP 13
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// if p3 = 10 then
 444: LD_VAR 0 3
 448: PUSH
 449: LD_INT 10
 451: EQUAL
 452: IFFALSE 462
// sFire := true ;
 454: LD_ADDR_EXP 14
 458: PUSH
 459: LD_INT 1
 461: ST_TO_ADDR
// if p3 = 11 then
 462: LD_VAR 0 3
 466: PUSH
 467: LD_INT 11
 469: EQUAL
 470: IFFALSE 480
// sRefresh := true ;
 472: LD_ADDR_EXP 15
 476: PUSH
 477: LD_INT 1
 479: ST_TO_ADDR
// if p3 = 12 then
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 12
 487: EQUAL
 488: IFFALSE 498
// sExp := true ;
 490: LD_ADDR_EXP 16
 494: PUSH
 495: LD_INT 1
 497: ST_TO_ADDR
// if p3 = 13 then
 498: LD_VAR 0 3
 502: PUSH
 503: LD_INT 13
 505: EQUAL
 506: IFFALSE 516
// sDepot := true ;
 508: LD_ADDR_EXP 17
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// if p3 = 14 then
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 14
 523: EQUAL
 524: IFFALSE 534
// sFlag := true ;
 526: LD_ADDR_EXP 18
 530: PUSH
 531: LD_INT 1
 533: ST_TO_ADDR
// if p3 = 15 then
 534: LD_VAR 0 3
 538: PUSH
 539: LD_INT 15
 541: EQUAL
 542: IFFALSE 552
// sKamikadze := true ;
 544: LD_ADDR_EXP 26
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if p3 = 16 then
 552: LD_VAR 0 3
 556: PUSH
 557: LD_INT 16
 559: EQUAL
 560: IFFALSE 570
// sTroll := true ;
 562: LD_ADDR_EXP 27
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// if p3 = 17 then
 570: LD_VAR 0 3
 574: PUSH
 575: LD_INT 17
 577: EQUAL
 578: IFFALSE 588
// sSlow := true ;
 580: LD_ADDR_EXP 28
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// if p3 = 18 then
 588: LD_VAR 0 3
 592: PUSH
 593: LD_INT 18
 595: EQUAL
 596: IFFALSE 606
// sLack := true ;
 598: LD_ADDR_EXP 29
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// if p3 = 19 then
 606: LD_VAR 0 3
 610: PUSH
 611: LD_INT 19
 613: EQUAL
 614: IFFALSE 624
// sTank := true ;
 616: LD_ADDR_EXP 31
 620: PUSH
 621: LD_INT 1
 623: ST_TO_ADDR
// if p3 = 20 then
 624: LD_VAR 0 3
 628: PUSH
 629: LD_INT 20
 631: EQUAL
 632: IFFALSE 642
// sRemote := true ;
 634: LD_ADDR_EXP 32
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// if p3 = 21 then
 642: LD_VAR 0 3
 646: PUSH
 647: LD_INT 21
 649: EQUAL
 650: IFFALSE 660
// sPowell := true ;
 652: LD_ADDR_EXP 33
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// if p3 = 22 then
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 22
 667: EQUAL
 668: IFFALSE 678
// sTeleport := true ;
 670: LD_ADDR_EXP 36
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// if p3 = 23 then
 678: LD_VAR 0 3
 682: PUSH
 683: LD_INT 23
 685: EQUAL
 686: IFFALSE 696
// sOilTower := true ;
 688: LD_ADDR_EXP 38
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// if p3 = 24 then
 696: LD_VAR 0 3
 700: PUSH
 701: LD_INT 24
 703: EQUAL
 704: IFFALSE 714
// sShovel := true ;
 706: LD_ADDR_EXP 39
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// if p3 = 25 then
 714: LD_VAR 0 3
 718: PUSH
 719: LD_INT 25
 721: EQUAL
 722: IFFALSE 732
// sSheik := true ;
 724: LD_ADDR_EXP 40
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// if p3 = 26 then
 732: LD_VAR 0 3
 736: PUSH
 737: LD_INT 26
 739: EQUAL
 740: IFFALSE 750
// sEarthquake := true ;
 742: LD_ADDR_EXP 42
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// if p3 = 27 then
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 27
 757: EQUAL
 758: IFFALSE 768
// sAI := true ;
 760: LD_ADDR_EXP 43
 764: PUSH
 765: LD_INT 1
 767: ST_TO_ADDR
// if p3 = 28 then
 768: LD_VAR 0 3
 772: PUSH
 773: LD_INT 28
 775: EQUAL
 776: IFFALSE 786
// sCargo := true ;
 778: LD_ADDR_EXP 46
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// if p3 = 29 then
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 29
 793: EQUAL
 794: IFFALSE 804
// sDLaser := true ;
 796: LD_ADDR_EXP 47
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// if p3 = 30 then
 804: LD_VAR 0 3
 808: PUSH
 809: LD_INT 30
 811: EQUAL
 812: IFFALSE 822
// sExchange := true ;
 814: LD_ADDR_EXP 48
 818: PUSH
 819: LD_INT 1
 821: ST_TO_ADDR
// if p3 = 31 then
 822: LD_VAR 0 3
 826: PUSH
 827: LD_INT 31
 829: EQUAL
 830: IFFALSE 840
// sFac := true ;
 832: LD_ADDR_EXP 49
 836: PUSH
 837: LD_INT 1
 839: ST_TO_ADDR
// if p3 = 32 then
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 32
 847: EQUAL
 848: IFFALSE 858
// sPower := true ;
 850: LD_ADDR_EXP 50
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// if p3 = 33 then
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 33
 865: EQUAL
 866: IFFALSE 876
// sRandom := true ;
 868: LD_ADDR_EXP 51
 872: PUSH
 873: LD_INT 1
 875: ST_TO_ADDR
// if p3 = 34 then
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 34
 883: EQUAL
 884: IFFALSE 894
// sShield := true ;
 886: LD_ADDR_EXP 52
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// if p3 = 35 then
 894: LD_VAR 0 3
 898: PUSH
 899: LD_INT 35
 901: EQUAL
 902: IFFALSE 912
// sTime := true ;
 904: LD_ADDR_EXP 53
 908: PUSH
 909: LD_INT 1
 911: ST_TO_ADDR
// if p3 = 36 then
 912: LD_VAR 0 3
 916: PUSH
 917: LD_INT 36
 919: EQUAL
 920: IFFALSE 930
// sTools := true ;
 922: LD_ADDR_EXP 54
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// if p3 = 101 then
 930: LD_VAR 0 3
 934: PUSH
 935: LD_INT 101
 937: EQUAL
 938: IFFALSE 948
// sSold := true ;
 940: LD_ADDR_EXP 19
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// if p3 = 102 then
 948: LD_VAR 0 3
 952: PUSH
 953: LD_INT 102
 955: EQUAL
 956: IFFALSE 966
// sDiff := true ;
 958: LD_ADDR_EXP 20
 962: PUSH
 963: LD_INT 1
 965: ST_TO_ADDR
// if p3 = 103 then
 966: LD_VAR 0 3
 970: PUSH
 971: LD_INT 103
 973: EQUAL
 974: IFFALSE 984
// sFog := true ;
 976: LD_ADDR_EXP 23
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// if p3 = 104 then
 984: LD_VAR 0 3
 988: PUSH
 989: LD_INT 104
 991: EQUAL
 992: IFFALSE 1002
// sReset := true ;
 994: LD_ADDR_EXP 24
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// if p3 = 105 then
1002: LD_VAR 0 3
1006: PUSH
1007: LD_INT 105
1009: EQUAL
1010: IFFALSE 1020
// sSun := true ;
1012: LD_ADDR_EXP 25
1016: PUSH
1017: LD_INT 1
1019: ST_TO_ADDR
// if p3 = 106 then
1020: LD_VAR 0 3
1024: PUSH
1025: LD_INT 106
1027: EQUAL
1028: IFFALSE 1038
// sTiger := true ;
1030: LD_ADDR_EXP 21
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// if p3 = 107 then
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 107
1045: EQUAL
1046: IFFALSE 1056
// sBomb := true ;
1048: LD_ADDR_EXP 22
1052: PUSH
1053: LD_INT 1
1055: ST_TO_ADDR
// if p3 = 108 then
1056: LD_VAR 0 3
1060: PUSH
1061: LD_INT 108
1063: EQUAL
1064: IFFALSE 1074
// sWound := true ;
1066: LD_ADDR_EXP 30
1070: PUSH
1071: LD_INT 1
1073: ST_TO_ADDR
// if p3 = 109 then
1074: LD_VAR 0 3
1078: PUSH
1079: LD_INT 109
1081: EQUAL
1082: IFFALSE 1092
// sBetray := true ;
1084: LD_ADDR_EXP 34
1088: PUSH
1089: LD_INT 1
1091: ST_TO_ADDR
// if p3 = 110 then
1092: LD_VAR 0 3
1096: PUSH
1097: LD_INT 110
1099: EQUAL
1100: IFFALSE 1110
// sContamin := true ;
1102: LD_ADDR_EXP 35
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// if p3 = 111 then
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 111
1117: EQUAL
1118: IFFALSE 1128
// sOil := true ;
1120: LD_ADDR_EXP 37
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if p3 = 112 then
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 112
1135: EQUAL
1136: IFFALSE 1146
// sStu := true ;
1138: LD_ADDR_EXP 41
1142: PUSH
1143: LD_INT 1
1145: ST_TO_ADDR
// if p3 = 113 then
1146: LD_VAR 0 3
1150: PUSH
1151: LD_INT 113
1153: EQUAL
1154: IFFALSE 1164
// sBazooka := true ;
1156: LD_ADDR_EXP 44
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// if p3 = 114 then
1164: LD_VAR 0 3
1168: PUSH
1169: LD_INT 114
1171: EQUAL
1172: IFFALSE 1182
// sMortar := true ;
1174: LD_ADDR_EXP 45
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// if p3 = 115 then
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 115
1189: EQUAL
1190: IFFALSE 1200
// sRanger := true ;
1192: LD_ADDR_EXP 55
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if p3 = 116 then
1200: LD_VAR 0 3
1204: PUSH
1205: LD_INT 116
1207: EQUAL
1208: IFFALSE 1218
// sComputer := true ;
1210: LD_ADDR_EXP 56
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if p3 = 117 then
1218: LD_VAR 0 3
1222: PUSH
1223: LD_INT 117
1225: EQUAL
1226: IFFALSE 1236
// s30 := true ;
1228: LD_ADDR_EXP 57
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// if p3 = 118 then
1236: LD_VAR 0 3
1240: PUSH
1241: LD_INT 118
1243: EQUAL
1244: IFFALSE 1254
// s60 := true ;
1246: LD_ADDR_EXP 58
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; if p2 = hack_mode then
1254: LD_VAR 0 2
1258: PUSH
1259: LD_INT 101
1261: EQUAL
1262: IFFALSE 1390
// begin case p3 of 1 :
1264: LD_VAR 0 3
1268: PUSH
1269: LD_INT 1
1271: DOUBLE
1272: EQUAL
1273: IFTRUE 1277
1275: GO 1284
1277: POP
// hHackUnlimitedResources ; 2 :
1278: CALL 13653 0 0
1282: GO 1390
1284: LD_INT 2
1286: DOUBLE
1287: EQUAL
1288: IFTRUE 1292
1290: GO 1299
1292: POP
// hHackSetLevel10 ; 3 :
1293: CALL 13786 0 0
1297: GO 1390
1299: LD_INT 3
1301: DOUBLE
1302: EQUAL
1303: IFTRUE 1307
1305: GO 1314
1307: POP
// hHackSetLevel10YourUnits ; 4 :
1308: CALL 13871 0 0
1312: GO 1390
1314: LD_INT 4
1316: DOUBLE
1317: EQUAL
1318: IFTRUE 1322
1320: GO 1329
1322: POP
// hHackInvincible ; 5 :
1323: CALL 14319 0 0
1327: GO 1390
1329: LD_INT 5
1331: DOUBLE
1332: EQUAL
1333: IFTRUE 1337
1335: GO 1344
1337: POP
// hHackInvisible ; 6 :
1338: CALL 14430 0 0
1342: GO 1390
1344: LD_INT 6
1346: DOUBLE
1347: EQUAL
1348: IFTRUE 1352
1350: GO 1359
1352: POP
// hHackChangeYourSide ; 7 :
1353: CALL 14487 0 0
1357: GO 1390
1359: LD_INT 7
1361: DOUBLE
1362: EQUAL
1363: IFTRUE 1367
1365: GO 1374
1367: POP
// hHackChangeUnitSide ; 8 :
1368: CALL 14529 0 0
1372: GO 1390
1374: LD_INT 8
1376: DOUBLE
1377: EQUAL
1378: IFTRUE 1382
1380: GO 1389
1382: POP
// hHackFog ; end ;
1383: CALL 14630 0 0
1387: GO 1390
1389: POP
// end ; if p2 = game_save_mode then
1390: LD_VAR 0 2
1394: PUSH
1395: LD_INT 102
1397: EQUAL
1398: IFFALSE 1455
// begin if p3 = 1 then
1400: LD_VAR 0 3
1404: PUSH
1405: LD_INT 1
1407: EQUAL
1408: IFFALSE 1420
// globalGameSaveCounter := p4 ;
1410: LD_ADDR_EXP 1
1414: PUSH
1415: LD_VAR 0 4
1419: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1420: LD_VAR 0 3
1424: PUSH
1425: LD_INT 2
1427: EQUAL
1428: IFFALSE 1436
1430: PUSH
1431: LD_EXP 1
1435: AND
1436: IFFALSE 1455
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1438: LD_STRING setGameSaveCounter(
1440: PUSH
1441: LD_EXP 1
1445: STR
1446: PUSH
1447: LD_STRING )
1449: STR
1450: PPUSH
1451: CALL_OW 559
// end ; end ;
1455: LD_VAR 0 7
1459: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1460: LD_INT 0
1462: PPUSH
// streamModeActive := false ;
1463: LD_ADDR_EXP 2
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// normalCounter := 36 ;
1471: LD_ADDR_EXP 3
1475: PUSH
1476: LD_INT 36
1478: ST_TO_ADDR
// hardcoreCounter := 18 ;
1479: LD_ADDR_EXP 4
1483: PUSH
1484: LD_INT 18
1486: ST_TO_ADDR
// sRocket := false ;
1487: LD_ADDR_EXP 7
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// sSpeed := false ;
1495: LD_ADDR_EXP 6
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// sEngine := false ;
1503: LD_ADDR_EXP 8
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// sSpec := false ;
1511: LD_ADDR_EXP 5
1515: PUSH
1516: LD_INT 0
1518: ST_TO_ADDR
// sLevel := false ;
1519: LD_ADDR_EXP 9
1523: PUSH
1524: LD_INT 0
1526: ST_TO_ADDR
// sArmoury := false ;
1527: LD_ADDR_EXP 10
1531: PUSH
1532: LD_INT 0
1534: ST_TO_ADDR
// sRadar := false ;
1535: LD_ADDR_EXP 11
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// sBunker := false ;
1543: LD_ADDR_EXP 12
1547: PUSH
1548: LD_INT 0
1550: ST_TO_ADDR
// sHack := false ;
1551: LD_ADDR_EXP 13
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
// sFire := false ;
1559: LD_ADDR_EXP 14
1563: PUSH
1564: LD_INT 0
1566: ST_TO_ADDR
// sRefresh := false ;
1567: LD_ADDR_EXP 15
1571: PUSH
1572: LD_INT 0
1574: ST_TO_ADDR
// sExp := false ;
1575: LD_ADDR_EXP 16
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// sDepot := false ;
1583: LD_ADDR_EXP 17
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// sFlag := false ;
1591: LD_ADDR_EXP 18
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// sKamikadze := false ;
1599: LD_ADDR_EXP 26
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// sTroll := false ;
1607: LD_ADDR_EXP 27
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// sSlow := false ;
1615: LD_ADDR_EXP 28
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// sLack := false ;
1623: LD_ADDR_EXP 29
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// sTank := false ;
1631: LD_ADDR_EXP 31
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// sRemote := false ;
1639: LD_ADDR_EXP 32
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// sPowell := false ;
1647: LD_ADDR_EXP 33
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// sTeleport := false ;
1655: LD_ADDR_EXP 36
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// sOilTower := false ;
1663: LD_ADDR_EXP 38
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// sShovel := false ;
1671: LD_ADDR_EXP 39
1675: PUSH
1676: LD_INT 0
1678: ST_TO_ADDR
// sSheik := false ;
1679: LD_ADDR_EXP 40
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// sEarthquake := false ;
1687: LD_ADDR_EXP 42
1691: PUSH
1692: LD_INT 0
1694: ST_TO_ADDR
// sAI := false ;
1695: LD_ADDR_EXP 43
1699: PUSH
1700: LD_INT 0
1702: ST_TO_ADDR
// sCargo := false ;
1703: LD_ADDR_EXP 46
1707: PUSH
1708: LD_INT 0
1710: ST_TO_ADDR
// sDLaser := false ;
1711: LD_ADDR_EXP 47
1715: PUSH
1716: LD_INT 0
1718: ST_TO_ADDR
// sExchange := false ;
1719: LD_ADDR_EXP 48
1723: PUSH
1724: LD_INT 0
1726: ST_TO_ADDR
// sFac := false ;
1727: LD_ADDR_EXP 49
1731: PUSH
1732: LD_INT 0
1734: ST_TO_ADDR
// sPower := false ;
1735: LD_ADDR_EXP 50
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// sRandom := false ;
1743: LD_ADDR_EXP 51
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// sShield := false ;
1751: LD_ADDR_EXP 52
1755: PUSH
1756: LD_INT 0
1758: ST_TO_ADDR
// sTime := false ;
1759: LD_ADDR_EXP 53
1763: PUSH
1764: LD_INT 0
1766: ST_TO_ADDR
// sTools := false ;
1767: LD_ADDR_EXP 54
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// sSold := false ;
1775: LD_ADDR_EXP 19
1779: PUSH
1780: LD_INT 0
1782: ST_TO_ADDR
// sDiff := false ;
1783: LD_ADDR_EXP 20
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// sFog := false ;
1791: LD_ADDR_EXP 23
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// sReset := false ;
1799: LD_ADDR_EXP 24
1803: PUSH
1804: LD_INT 0
1806: ST_TO_ADDR
// sSun := false ;
1807: LD_ADDR_EXP 25
1811: PUSH
1812: LD_INT 0
1814: ST_TO_ADDR
// sTiger := false ;
1815: LD_ADDR_EXP 21
1819: PUSH
1820: LD_INT 0
1822: ST_TO_ADDR
// sBomb := false ;
1823: LD_ADDR_EXP 22
1827: PUSH
1828: LD_INT 0
1830: ST_TO_ADDR
// sWound := false ;
1831: LD_ADDR_EXP 30
1835: PUSH
1836: LD_INT 0
1838: ST_TO_ADDR
// sBetray := false ;
1839: LD_ADDR_EXP 34
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
// sContamin := false ;
1847: LD_ADDR_EXP 35
1851: PUSH
1852: LD_INT 0
1854: ST_TO_ADDR
// sOil := false ;
1855: LD_ADDR_EXP 37
1859: PUSH
1860: LD_INT 0
1862: ST_TO_ADDR
// sStu := false ;
1863: LD_ADDR_EXP 41
1867: PUSH
1868: LD_INT 0
1870: ST_TO_ADDR
// sBazooka := false ;
1871: LD_ADDR_EXP 44
1875: PUSH
1876: LD_INT 0
1878: ST_TO_ADDR
// sMortar := false ;
1879: LD_ADDR_EXP 45
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// sRanger := false ;
1887: LD_ADDR_EXP 55
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
// sComputer := false ;
1895: LD_ADDR_EXP 56
1899: PUSH
1900: LD_INT 0
1902: ST_TO_ADDR
// s30 := false ;
1903: LD_ADDR_EXP 57
1907: PUSH
1908: LD_INT 0
1910: ST_TO_ADDR
// s60 := false ;
1911: LD_ADDR_EXP 58
1915: PUSH
1916: LD_INT 0
1918: ST_TO_ADDR
// end ;
1919: LD_VAR 0 1
1923: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// result := [ ] ;
1933: LD_ADDR_VAR 0 2
1937: PUSH
1938: EMPTY
1939: ST_TO_ADDR
// if campaign_id = 1 then
1940: LD_OWVAR 69
1944: PUSH
1945: LD_INT 1
1947: EQUAL
1948: IFFALSE 5114
// begin case mission_number of 1 :
1950: LD_OWVAR 70
1954: PUSH
1955: LD_INT 1
1957: DOUBLE
1958: EQUAL
1959: IFTRUE 1963
1961: GO 2039
1963: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 4
1974: PUSH
1975: LD_INT 11
1977: PUSH
1978: LD_INT 12
1980: PUSH
1981: LD_INT 15
1983: PUSH
1984: LD_INT 16
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 23
1992: PUSH
1993: LD_INT 26
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 101
2009: PUSH
2010: LD_INT 102
2012: PUSH
2013: LD_INT 106
2015: PUSH
2016: LD_INT 116
2018: PUSH
2019: LD_INT 117
2021: PUSH
2022: LD_INT 118
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: ST_TO_ADDR
2037: GO 5112
2039: LD_INT 2
2041: DOUBLE
2042: EQUAL
2043: IFTRUE 2047
2045: GO 2131
2047: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: LD_INT 2
2055: PUSH
2056: LD_INT 4
2058: PUSH
2059: LD_INT 11
2061: PUSH
2062: LD_INT 12
2064: PUSH
2065: LD_INT 15
2067: PUSH
2068: LD_INT 16
2070: PUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 23
2076: PUSH
2077: LD_INT 26
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 101
2093: PUSH
2094: LD_INT 102
2096: PUSH
2097: LD_INT 105
2099: PUSH
2100: LD_INT 106
2102: PUSH
2103: LD_INT 108
2105: PUSH
2106: LD_INT 116
2108: PUSH
2109: LD_INT 117
2111: PUSH
2112: LD_INT 118
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 5112
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2227
2139: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 2
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: LD_INT 5
2153: PUSH
2154: LD_INT 11
2156: PUSH
2157: LD_INT 12
2159: PUSH
2160: LD_INT 15
2162: PUSH
2163: LD_INT 16
2165: PUSH
2166: LD_INT 22
2168: PUSH
2169: LD_INT 26
2171: PUSH
2172: LD_INT 36
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 101
2189: PUSH
2190: LD_INT 102
2192: PUSH
2193: LD_INT 105
2195: PUSH
2196: LD_INT 106
2198: PUSH
2199: LD_INT 108
2201: PUSH
2202: LD_INT 116
2204: PUSH
2205: LD_INT 117
2207: PUSH
2208: LD_INT 118
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: ST_TO_ADDR
2225: GO 5112
2227: LD_INT 4
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2331
2235: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2236: LD_ADDR_VAR 0 2
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: LD_INT 4
2246: PUSH
2247: LD_INT 5
2249: PUSH
2250: LD_INT 8
2252: PUSH
2253: LD_INT 11
2255: PUSH
2256: LD_INT 12
2258: PUSH
2259: LD_INT 15
2261: PUSH
2262: LD_INT 16
2264: PUSH
2265: LD_INT 22
2267: PUSH
2268: LD_INT 23
2270: PUSH
2271: LD_INT 26
2273: PUSH
2274: LD_INT 36
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 101
2293: PUSH
2294: LD_INT 102
2296: PUSH
2297: LD_INT 105
2299: PUSH
2300: LD_INT 106
2302: PUSH
2303: LD_INT 108
2305: PUSH
2306: LD_INT 116
2308: PUSH
2309: LD_INT 117
2311: PUSH
2312: LD_INT 118
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: ST_TO_ADDR
2329: GO 5112
2331: LD_INT 5
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2451
2339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: LD_INT 4
2350: PUSH
2351: LD_INT 5
2353: PUSH
2354: LD_INT 6
2356: PUSH
2357: LD_INT 8
2359: PUSH
2360: LD_INT 11
2362: PUSH
2363: LD_INT 12
2365: PUSH
2366: LD_INT 15
2368: PUSH
2369: LD_INT 16
2371: PUSH
2372: LD_INT 22
2374: PUSH
2375: LD_INT 23
2377: PUSH
2378: LD_INT 25
2380: PUSH
2381: LD_INT 26
2383: PUSH
2384: LD_INT 36
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 101
2405: PUSH
2406: LD_INT 102
2408: PUSH
2409: LD_INT 105
2411: PUSH
2412: LD_INT 106
2414: PUSH
2415: LD_INT 108
2417: PUSH
2418: LD_INT 109
2420: PUSH
2421: LD_INT 112
2423: PUSH
2424: LD_INT 116
2426: PUSH
2427: LD_INT 117
2429: PUSH
2430: LD_INT 118
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: ST_TO_ADDR
2449: GO 5112
2451: LD_INT 6
2453: DOUBLE
2454: EQUAL
2455: IFTRUE 2459
2457: GO 2591
2459: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2460: LD_ADDR_VAR 0 2
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: LD_INT 4
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: LD_INT 8
2479: PUSH
2480: LD_INT 11
2482: PUSH
2483: LD_INT 12
2485: PUSH
2486: LD_INT 15
2488: PUSH
2489: LD_INT 16
2491: PUSH
2492: LD_INT 20
2494: PUSH
2495: LD_INT 21
2497: PUSH
2498: LD_INT 22
2500: PUSH
2501: LD_INT 23
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 26
2509: PUSH
2510: LD_INT 30
2512: PUSH
2513: LD_INT 31
2515: PUSH
2516: LD_INT 32
2518: PUSH
2519: LD_INT 36
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 101
2545: PUSH
2546: LD_INT 102
2548: PUSH
2549: LD_INT 105
2551: PUSH
2552: LD_INT 106
2554: PUSH
2555: LD_INT 108
2557: PUSH
2558: LD_INT 109
2560: PUSH
2561: LD_INT 112
2563: PUSH
2564: LD_INT 116
2566: PUSH
2567: LD_INT 117
2569: PUSH
2570: LD_INT 118
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: ST_TO_ADDR
2589: GO 5112
2591: LD_INT 7
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2711
2599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2600: LD_ADDR_VAR 0 2
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: LD_INT 4
2610: PUSH
2611: LD_INT 5
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: LD_INT 11
2619: PUSH
2620: LD_INT 12
2622: PUSH
2623: LD_INT 15
2625: PUSH
2626: LD_INT 16
2628: PUSH
2629: LD_INT 20
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 22
2637: PUSH
2638: LD_INT 23
2640: PUSH
2641: LD_INT 25
2643: PUSH
2644: LD_INT 26
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 101
2665: PUSH
2666: LD_INT 102
2668: PUSH
2669: LD_INT 103
2671: PUSH
2672: LD_INT 105
2674: PUSH
2675: LD_INT 106
2677: PUSH
2678: LD_INT 108
2680: PUSH
2681: LD_INT 112
2683: PUSH
2684: LD_INT 116
2686: PUSH
2687: LD_INT 117
2689: PUSH
2690: LD_INT 118
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: ST_TO_ADDR
2709: GO 5112
2711: LD_INT 8
2713: DOUBLE
2714: EQUAL
2715: IFTRUE 2719
2717: GO 2859
2719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: LD_INT 2
2727: PUSH
2728: LD_INT 4
2730: PUSH
2731: LD_INT 5
2733: PUSH
2734: LD_INT 6
2736: PUSH
2737: LD_INT 7
2739: PUSH
2740: LD_INT 8
2742: PUSH
2743: LD_INT 11
2745: PUSH
2746: LD_INT 12
2748: PUSH
2749: LD_INT 15
2751: PUSH
2752: LD_INT 16
2754: PUSH
2755: LD_INT 20
2757: PUSH
2758: LD_INT 21
2760: PUSH
2761: LD_INT 22
2763: PUSH
2764: LD_INT 23
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 26
2772: PUSH
2773: LD_INT 30
2775: PUSH
2776: LD_INT 31
2778: PUSH
2779: LD_INT 32
2781: PUSH
2782: LD_INT 36
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 101
2809: PUSH
2810: LD_INT 102
2812: PUSH
2813: LD_INT 103
2815: PUSH
2816: LD_INT 105
2818: PUSH
2819: LD_INT 106
2821: PUSH
2822: LD_INT 108
2824: PUSH
2825: LD_INT 109
2827: PUSH
2828: LD_INT 112
2830: PUSH
2831: LD_INT 116
2833: PUSH
2834: LD_INT 117
2836: PUSH
2837: LD_INT 118
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: ST_TO_ADDR
2857: GO 5112
2859: LD_INT 9
2861: DOUBLE
2862: EQUAL
2863: IFTRUE 2867
2865: GO 3015
2867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2868: LD_ADDR_VAR 0 2
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: LD_INT 4
2878: PUSH
2879: LD_INT 5
2881: PUSH
2882: LD_INT 6
2884: PUSH
2885: LD_INT 7
2887: PUSH
2888: LD_INT 8
2890: PUSH
2891: LD_INT 11
2893: PUSH
2894: LD_INT 12
2896: PUSH
2897: LD_INT 15
2899: PUSH
2900: LD_INT 16
2902: PUSH
2903: LD_INT 20
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 23
2914: PUSH
2915: LD_INT 25
2917: PUSH
2918: LD_INT 26
2920: PUSH
2921: LD_INT 28
2923: PUSH
2924: LD_INT 30
2926: PUSH
2927: LD_INT 31
2929: PUSH
2930: LD_INT 32
2932: PUSH
2933: LD_INT 36
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 101
2961: PUSH
2962: LD_INT 102
2964: PUSH
2965: LD_INT 103
2967: PUSH
2968: LD_INT 105
2970: PUSH
2971: LD_INT 106
2973: PUSH
2974: LD_INT 108
2976: PUSH
2977: LD_INT 109
2979: PUSH
2980: LD_INT 112
2982: PUSH
2983: LD_INT 114
2985: PUSH
2986: LD_INT 116
2988: PUSH
2989: LD_INT 117
2991: PUSH
2992: LD_INT 118
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: ST_TO_ADDR
3013: GO 5112
3015: LD_INT 10
3017: DOUBLE
3018: EQUAL
3019: IFTRUE 3023
3021: GO 3219
3023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: LD_INT 2
3031: PUSH
3032: LD_INT 4
3034: PUSH
3035: LD_INT 5
3037: PUSH
3038: LD_INT 6
3040: PUSH
3041: LD_INT 7
3043: PUSH
3044: LD_INT 8
3046: PUSH
3047: LD_INT 9
3049: PUSH
3050: LD_INT 10
3052: PUSH
3053: LD_INT 11
3055: PUSH
3056: LD_INT 12
3058: PUSH
3059: LD_INT 13
3061: PUSH
3062: LD_INT 14
3064: PUSH
3065: LD_INT 15
3067: PUSH
3068: LD_INT 16
3070: PUSH
3071: LD_INT 17
3073: PUSH
3074: LD_INT 18
3076: PUSH
3077: LD_INT 19
3079: PUSH
3080: LD_INT 20
3082: PUSH
3083: LD_INT 21
3085: PUSH
3086: LD_INT 22
3088: PUSH
3089: LD_INT 23
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 25
3097: PUSH
3098: LD_INT 26
3100: PUSH
3101: LD_INT 28
3103: PUSH
3104: LD_INT 30
3106: PUSH
3107: LD_INT 31
3109: PUSH
3110: LD_INT 32
3112: PUSH
3113: LD_INT 36
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 101
3149: PUSH
3150: LD_INT 102
3152: PUSH
3153: LD_INT 103
3155: PUSH
3156: LD_INT 104
3158: PUSH
3159: LD_INT 105
3161: PUSH
3162: LD_INT 106
3164: PUSH
3165: LD_INT 107
3167: PUSH
3168: LD_INT 108
3170: PUSH
3171: LD_INT 109
3173: PUSH
3174: LD_INT 110
3176: PUSH
3177: LD_INT 111
3179: PUSH
3180: LD_INT 112
3182: PUSH
3183: LD_INT 114
3185: PUSH
3186: LD_INT 116
3188: PUSH
3189: LD_INT 117
3191: PUSH
3192: LD_INT 118
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
3217: GO 5112
3219: LD_INT 11
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3431
3227: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 4
3241: PUSH
3242: LD_INT 5
3244: PUSH
3245: LD_INT 6
3247: PUSH
3248: LD_INT 7
3250: PUSH
3251: LD_INT 8
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: LD_INT 10
3259: PUSH
3260: LD_INT 11
3262: PUSH
3263: LD_INT 12
3265: PUSH
3266: LD_INT 13
3268: PUSH
3269: LD_INT 14
3271: PUSH
3272: LD_INT 15
3274: PUSH
3275: LD_INT 16
3277: PUSH
3278: LD_INT 17
3280: PUSH
3281: LD_INT 18
3283: PUSH
3284: LD_INT 19
3286: PUSH
3287: LD_INT 20
3289: PUSH
3290: LD_INT 21
3292: PUSH
3293: LD_INT 22
3295: PUSH
3296: LD_INT 23
3298: PUSH
3299: LD_INT 24
3301: PUSH
3302: LD_INT 25
3304: PUSH
3305: LD_INT 26
3307: PUSH
3308: LD_INT 28
3310: PUSH
3311: LD_INT 30
3313: PUSH
3314: LD_INT 31
3316: PUSH
3317: LD_INT 32
3319: PUSH
3320: LD_INT 34
3322: PUSH
3323: LD_INT 36
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 101
3361: PUSH
3362: LD_INT 102
3364: PUSH
3365: LD_INT 103
3367: PUSH
3368: LD_INT 104
3370: PUSH
3371: LD_INT 105
3373: PUSH
3374: LD_INT 106
3376: PUSH
3377: LD_INT 107
3379: PUSH
3380: LD_INT 108
3382: PUSH
3383: LD_INT 109
3385: PUSH
3386: LD_INT 110
3388: PUSH
3389: LD_INT 111
3391: PUSH
3392: LD_INT 112
3394: PUSH
3395: LD_INT 114
3397: PUSH
3398: LD_INT 116
3400: PUSH
3401: LD_INT 117
3403: PUSH
3404: LD_INT 118
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: ST_TO_ADDR
3429: GO 5112
3431: LD_INT 12
3433: DOUBLE
3434: EQUAL
3435: IFTRUE 3439
3437: GO 3659
3439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3440: LD_ADDR_VAR 0 2
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 3
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: LD_INT 8
3468: PUSH
3469: LD_INT 9
3471: PUSH
3472: LD_INT 10
3474: PUSH
3475: LD_INT 11
3477: PUSH
3478: LD_INT 12
3480: PUSH
3481: LD_INT 13
3483: PUSH
3484: LD_INT 14
3486: PUSH
3487: LD_INT 15
3489: PUSH
3490: LD_INT 16
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 18
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 20
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 23
3513: PUSH
3514: LD_INT 24
3516: PUSH
3517: LD_INT 25
3519: PUSH
3520: LD_INT 26
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 28
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 34
3543: PUSH
3544: LD_INT 36
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 101
3585: PUSH
3586: LD_INT 102
3588: PUSH
3589: LD_INT 103
3591: PUSH
3592: LD_INT 104
3594: PUSH
3595: LD_INT 105
3597: PUSH
3598: LD_INT 106
3600: PUSH
3601: LD_INT 107
3603: PUSH
3604: LD_INT 108
3606: PUSH
3607: LD_INT 109
3609: PUSH
3610: LD_INT 110
3612: PUSH
3613: LD_INT 111
3615: PUSH
3616: LD_INT 112
3618: PUSH
3619: LD_INT 113
3621: PUSH
3622: LD_INT 114
3624: PUSH
3625: LD_INT 116
3627: PUSH
3628: LD_INT 117
3630: PUSH
3631: LD_INT 118
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: ST_TO_ADDR
3657: GO 5112
3659: LD_INT 13
3661: DOUBLE
3662: EQUAL
3663: IFTRUE 3667
3665: GO 3875
3667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3668: LD_ADDR_VAR 0 2
3672: PUSH
3673: LD_INT 1
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: LD_INT 8
3690: PUSH
3691: LD_INT 9
3693: PUSH
3694: LD_INT 10
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 14
3705: PUSH
3706: LD_INT 15
3708: PUSH
3709: LD_INT 16
3711: PUSH
3712: LD_INT 17
3714: PUSH
3715: LD_INT 18
3717: PUSH
3718: LD_INT 19
3720: PUSH
3721: LD_INT 20
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 22
3729: PUSH
3730: LD_INT 23
3732: PUSH
3733: LD_INT 24
3735: PUSH
3736: LD_INT 25
3738: PUSH
3739: LD_INT 26
3741: PUSH
3742: LD_INT 27
3744: PUSH
3745: LD_INT 28
3747: PUSH
3748: LD_INT 30
3750: PUSH
3751: LD_INT 31
3753: PUSH
3754: LD_INT 32
3756: PUSH
3757: LD_INT 33
3759: PUSH
3760: LD_INT 34
3762: PUSH
3763: LD_INT 36
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 101
3801: PUSH
3802: LD_INT 102
3804: PUSH
3805: LD_INT 103
3807: PUSH
3808: LD_INT 104
3810: PUSH
3811: LD_INT 105
3813: PUSH
3814: LD_INT 106
3816: PUSH
3817: LD_INT 107
3819: PUSH
3820: LD_INT 108
3822: PUSH
3823: LD_INT 109
3825: PUSH
3826: LD_INT 110
3828: PUSH
3829: LD_INT 111
3831: PUSH
3832: LD_INT 112
3834: PUSH
3835: LD_INT 113
3837: PUSH
3838: LD_INT 114
3840: PUSH
3841: LD_INT 116
3843: PUSH
3844: LD_INT 117
3846: PUSH
3847: LD_INT 118
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: ST_TO_ADDR
3873: GO 5112
3875: LD_INT 14
3877: DOUBLE
3878: EQUAL
3879: IFTRUE 3883
3881: GO 4107
3883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 1
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 4
3900: PUSH
3901: LD_INT 5
3903: PUSH
3904: LD_INT 6
3906: PUSH
3907: LD_INT 7
3909: PUSH
3910: LD_INT 8
3912: PUSH
3913: LD_INT 9
3915: PUSH
3916: LD_INT 10
3918: PUSH
3919: LD_INT 11
3921: PUSH
3922: LD_INT 12
3924: PUSH
3925: LD_INT 13
3927: PUSH
3928: LD_INT 14
3930: PUSH
3931: LD_INT 15
3933: PUSH
3934: LD_INT 16
3936: PUSH
3937: LD_INT 17
3939: PUSH
3940: LD_INT 18
3942: PUSH
3943: LD_INT 19
3945: PUSH
3946: LD_INT 20
3948: PUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 23
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 25
3963: PUSH
3964: LD_INT 26
3966: PUSH
3967: LD_INT 27
3969: PUSH
3970: LD_INT 28
3972: PUSH
3973: LD_INT 29
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 31
3981: PUSH
3982: LD_INT 32
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: LD_INT 34
3990: PUSH
3991: LD_INT 36
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 101
4033: PUSH
4034: LD_INT 102
4036: PUSH
4037: LD_INT 103
4039: PUSH
4040: LD_INT 104
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: LD_INT 106
4048: PUSH
4049: LD_INT 107
4051: PUSH
4052: LD_INT 108
4054: PUSH
4055: LD_INT 109
4057: PUSH
4058: LD_INT 110
4060: PUSH
4061: LD_INT 111
4063: PUSH
4064: LD_INT 112
4066: PUSH
4067: LD_INT 113
4069: PUSH
4070: LD_INT 114
4072: PUSH
4073: LD_INT 116
4075: PUSH
4076: LD_INT 117
4078: PUSH
4079: LD_INT 118
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 5112
4107: LD_INT 15
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4339
4115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4116: LD_ADDR_VAR 0 2
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: LD_INT 2
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: LD_INT 4
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: LD_INT 6
4138: PUSH
4139: LD_INT 7
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 9
4147: PUSH
4148: LD_INT 10
4150: PUSH
4151: LD_INT 11
4153: PUSH
4154: LD_INT 12
4156: PUSH
4157: LD_INT 13
4159: PUSH
4160: LD_INT 14
4162: PUSH
4163: LD_INT 15
4165: PUSH
4166: LD_INT 16
4168: PUSH
4169: LD_INT 17
4171: PUSH
4172: LD_INT 18
4174: PUSH
4175: LD_INT 19
4177: PUSH
4178: LD_INT 20
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 22
4186: PUSH
4187: LD_INT 23
4189: PUSH
4190: LD_INT 24
4192: PUSH
4193: LD_INT 25
4195: PUSH
4196: LD_INT 26
4198: PUSH
4199: LD_INT 27
4201: PUSH
4202: LD_INT 28
4204: PUSH
4205: LD_INT 29
4207: PUSH
4208: LD_INT 30
4210: PUSH
4211: LD_INT 31
4213: PUSH
4214: LD_INT 32
4216: PUSH
4217: LD_INT 33
4219: PUSH
4220: LD_INT 34
4222: PUSH
4223: LD_INT 36
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 101
4265: PUSH
4266: LD_INT 102
4268: PUSH
4269: LD_INT 103
4271: PUSH
4272: LD_INT 104
4274: PUSH
4275: LD_INT 105
4277: PUSH
4278: LD_INT 106
4280: PUSH
4281: LD_INT 107
4283: PUSH
4284: LD_INT 108
4286: PUSH
4287: LD_INT 109
4289: PUSH
4290: LD_INT 110
4292: PUSH
4293: LD_INT 111
4295: PUSH
4296: LD_INT 112
4298: PUSH
4299: LD_INT 113
4301: PUSH
4302: LD_INT 114
4304: PUSH
4305: LD_INT 116
4307: PUSH
4308: LD_INT 117
4310: PUSH
4311: LD_INT 118
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: ST_TO_ADDR
4337: GO 5112
4339: LD_INT 16
4341: DOUBLE
4342: EQUAL
4343: IFTRUE 4347
4345: GO 4483
4347: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4348: LD_ADDR_VAR 0 2
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: LD_INT 4
4358: PUSH
4359: LD_INT 5
4361: PUSH
4362: LD_INT 7
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 15
4373: PUSH
4374: LD_INT 16
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 31
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 33
4406: PUSH
4407: LD_INT 34
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 101
4433: PUSH
4434: LD_INT 102
4436: PUSH
4437: LD_INT 103
4439: PUSH
4440: LD_INT 106
4442: PUSH
4443: LD_INT 108
4445: PUSH
4446: LD_INT 112
4448: PUSH
4449: LD_INT 113
4451: PUSH
4452: LD_INT 114
4454: PUSH
4455: LD_INT 116
4457: PUSH
4458: LD_INT 117
4460: PUSH
4461: LD_INT 118
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: ST_TO_ADDR
4481: GO 5112
4483: LD_INT 17
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4715
4491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 5
4511: PUSH
4512: LD_INT 6
4514: PUSH
4515: LD_INT 7
4517: PUSH
4518: LD_INT 8
4520: PUSH
4521: LD_INT 9
4523: PUSH
4524: LD_INT 10
4526: PUSH
4527: LD_INT 11
4529: PUSH
4530: LD_INT 12
4532: PUSH
4533: LD_INT 13
4535: PUSH
4536: LD_INT 14
4538: PUSH
4539: LD_INT 15
4541: PUSH
4542: LD_INT 16
4544: PUSH
4545: LD_INT 17
4547: PUSH
4548: LD_INT 18
4550: PUSH
4551: LD_INT 19
4553: PUSH
4554: LD_INT 20
4556: PUSH
4557: LD_INT 21
4559: PUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 23
4565: PUSH
4566: LD_INT 24
4568: PUSH
4569: LD_INT 25
4571: PUSH
4572: LD_INT 26
4574: PUSH
4575: LD_INT 27
4577: PUSH
4578: LD_INT 28
4580: PUSH
4581: LD_INT 29
4583: PUSH
4584: LD_INT 30
4586: PUSH
4587: LD_INT 31
4589: PUSH
4590: LD_INT 32
4592: PUSH
4593: LD_INT 33
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 36
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 113
4677: PUSH
4678: LD_INT 114
4680: PUSH
4681: LD_INT 116
4683: PUSH
4684: LD_INT 117
4686: PUSH
4687: LD_INT 118
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 5112
4715: LD_INT 18
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4871
4723: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: LD_INT 2
4731: PUSH
4732: LD_INT 4
4734: PUSH
4735: LD_INT 5
4737: PUSH
4738: LD_INT 7
4740: PUSH
4741: LD_INT 11
4743: PUSH
4744: LD_INT 12
4746: PUSH
4747: LD_INT 15
4749: PUSH
4750: LD_INT 16
4752: PUSH
4753: LD_INT 20
4755: PUSH
4756: LD_INT 21
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 26
4770: PUSH
4771: LD_INT 30
4773: PUSH
4774: LD_INT 31
4776: PUSH
4777: LD_INT 32
4779: PUSH
4780: LD_INT 33
4782: PUSH
4783: LD_INT 34
4785: PUSH
4786: LD_INT 35
4788: PUSH
4789: LD_INT 36
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 101
4817: PUSH
4818: LD_INT 102
4820: PUSH
4821: LD_INT 103
4823: PUSH
4824: LD_INT 106
4826: PUSH
4827: LD_INT 108
4829: PUSH
4830: LD_INT 112
4832: PUSH
4833: LD_INT 113
4835: PUSH
4836: LD_INT 114
4838: PUSH
4839: LD_INT 115
4841: PUSH
4842: LD_INT 116
4844: PUSH
4845: LD_INT 117
4847: PUSH
4848: LD_INT 118
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5112
4871: LD_INT 19
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 5111
4879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4880: LD_ADDR_VAR 0 2
4884: PUSH
4885: LD_INT 1
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 4
4896: PUSH
4897: LD_INT 5
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 8
4908: PUSH
4909: LD_INT 9
4911: PUSH
4912: LD_INT 10
4914: PUSH
4915: LD_INT 11
4917: PUSH
4918: LD_INT 12
4920: PUSH
4921: LD_INT 13
4923: PUSH
4924: LD_INT 14
4926: PUSH
4927: LD_INT 15
4929: PUSH
4930: LD_INT 16
4932: PUSH
4933: LD_INT 17
4935: PUSH
4936: LD_INT 18
4938: PUSH
4939: LD_INT 19
4941: PUSH
4942: LD_INT 20
4944: PUSH
4945: LD_INT 21
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 23
4953: PUSH
4954: LD_INT 24
4956: PUSH
4957: LD_INT 25
4959: PUSH
4960: LD_INT 26
4962: PUSH
4963: LD_INT 27
4965: PUSH
4966: LD_INT 28
4968: PUSH
4969: LD_INT 29
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 33
4983: PUSH
4984: LD_INT 34
4986: PUSH
4987: LD_INT 35
4989: PUSH
4990: LD_INT 36
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 101
5033: PUSH
5034: LD_INT 102
5036: PUSH
5037: LD_INT 103
5039: PUSH
5040: LD_INT 104
5042: PUSH
5043: LD_INT 105
5045: PUSH
5046: LD_INT 106
5048: PUSH
5049: LD_INT 107
5051: PUSH
5052: LD_INT 108
5054: PUSH
5055: LD_INT 109
5057: PUSH
5058: LD_INT 110
5060: PUSH
5061: LD_INT 111
5063: PUSH
5064: LD_INT 112
5066: PUSH
5067: LD_INT 113
5069: PUSH
5070: LD_INT 114
5072: PUSH
5073: LD_INT 115
5075: PUSH
5076: LD_INT 116
5078: PUSH
5079: LD_INT 117
5081: PUSH
5082: LD_INT 118
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: ST_TO_ADDR
5109: GO 5112
5111: POP
// end else
5112: GO 5343
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: LD_INT 2
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 5
5133: PUSH
5134: LD_INT 6
5136: PUSH
5137: LD_INT 7
5139: PUSH
5140: LD_INT 8
5142: PUSH
5143: LD_INT 9
5145: PUSH
5146: LD_INT 10
5148: PUSH
5149: LD_INT 11
5151: PUSH
5152: LD_INT 12
5154: PUSH
5155: LD_INT 13
5157: PUSH
5158: LD_INT 14
5160: PUSH
5161: LD_INT 15
5163: PUSH
5164: LD_INT 16
5166: PUSH
5167: LD_INT 17
5169: PUSH
5170: LD_INT 18
5172: PUSH
5173: LD_INT 19
5175: PUSH
5176: LD_INT 20
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_INT 23
5187: PUSH
5188: LD_INT 24
5190: PUSH
5191: LD_INT 25
5193: PUSH
5194: LD_INT 26
5196: PUSH
5197: LD_INT 27
5199: PUSH
5200: LD_INT 28
5202: PUSH
5203: LD_INT 29
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 31
5211: PUSH
5212: LD_INT 32
5214: PUSH
5215: LD_INT 33
5217: PUSH
5218: LD_INT 34
5220: PUSH
5221: LD_INT 35
5223: PUSH
5224: LD_INT 36
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 101
5267: PUSH
5268: LD_INT 102
5270: PUSH
5271: LD_INT 103
5273: PUSH
5274: LD_INT 104
5276: PUSH
5277: LD_INT 105
5279: PUSH
5280: LD_INT 106
5282: PUSH
5283: LD_INT 107
5285: PUSH
5286: LD_INT 108
5288: PUSH
5289: LD_INT 109
5291: PUSH
5292: LD_INT 110
5294: PUSH
5295: LD_INT 111
5297: PUSH
5298: LD_INT 112
5300: PUSH
5301: LD_INT 113
5303: PUSH
5304: LD_INT 114
5306: PUSH
5307: LD_INT 115
5309: PUSH
5310: LD_INT 116
5312: PUSH
5313: LD_INT 117
5315: PUSH
5316: LD_INT 118
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: ST_TO_ADDR
// if result then
5343: LD_VAR 0 2
5347: IFFALSE 6133
// begin normal :=  ;
5349: LD_ADDR_VAR 0 5
5353: PUSH
5354: LD_STRING 
5356: ST_TO_ADDR
// hardcore :=  ;
5357: LD_ADDR_VAR 0 6
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// active :=  ;
5365: LD_ADDR_VAR 0 7
5369: PUSH
5370: LD_STRING 
5372: ST_TO_ADDR
// for i = 1 to normalCounter do
5373: LD_ADDR_VAR 0 8
5377: PUSH
5378: DOUBLE
5379: LD_INT 1
5381: DEC
5382: ST_TO_ADDR
5383: LD_EXP 3
5387: PUSH
5388: FOR_TO
5389: IFFALSE 5490
// begin tmp := 0 ;
5391: LD_ADDR_VAR 0 3
5395: PUSH
5396: LD_STRING 0
5398: ST_TO_ADDR
// if result [ 1 ] then
5399: LD_VAR 0 2
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: IFFALSE 5472
// if result [ 1 ] [ 1 ] = i then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PUSH
5422: LD_VAR 0 8
5426: EQUAL
5427: IFFALSE 5472
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5429: LD_ADDR_VAR 0 2
5433: PUSH
5434: LD_VAR 0 2
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: LD_VAR 0 2
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 3
5458: PPUSH
5459: CALL_OW 1
5463: ST_TO_ADDR
// tmp := 1 ;
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_STRING 1
5471: ST_TO_ADDR
// end ; normal := normal & tmp ;
5472: LD_ADDR_VAR 0 5
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 3
5486: STR
5487: ST_TO_ADDR
// end ;
5488: GO 5388
5490: POP
5491: POP
// for i = 1 to hardcoreCounter do
5492: LD_ADDR_VAR 0 8
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_EXP 4
5506: PUSH
5507: FOR_TO
5508: IFFALSE 5613
// begin tmp := 0 ;
5510: LD_ADDR_VAR 0 3
5514: PUSH
5515: LD_STRING 0
5517: ST_TO_ADDR
// if result [ 2 ] then
5518: LD_VAR 0 2
5522: PUSH
5523: LD_INT 2
5525: ARRAY
5526: IFFALSE 5595
// if result [ 2 ] [ 1 ] = 100 + i then
5528: LD_VAR 0 2
5532: PUSH
5533: LD_INT 2
5535: ARRAY
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PUSH
5541: LD_INT 100
5543: PUSH
5544: LD_VAR 0 8
5548: PLUS
5549: EQUAL
5550: IFFALSE 5595
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5552: LD_ADDR_VAR 0 2
5556: PUSH
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_INT 2
5564: PPUSH
5565: LD_VAR 0 2
5569: PUSH
5570: LD_INT 2
5572: ARRAY
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 3
5581: PPUSH
5582: CALL_OW 1
5586: ST_TO_ADDR
// tmp := 1 ;
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: LD_STRING 1
5594: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5595: LD_ADDR_VAR 0 6
5599: PUSH
5600: LD_VAR 0 6
5604: PUSH
5605: LD_VAR 0 3
5609: STR
5610: ST_TO_ADDR
// end ;
5611: GO 5507
5613: POP
5614: POP
// if isGameLoad then
5615: LD_VAR 0 1
5619: IFFALSE 6094
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5621: LD_ADDR_VAR 0 4
5625: PUSH
5626: LD_EXP 7
5630: PUSH
5631: LD_EXP 6
5635: PUSH
5636: LD_EXP 8
5640: PUSH
5641: LD_EXP 5
5645: PUSH
5646: LD_EXP 9
5650: PUSH
5651: LD_EXP 10
5655: PUSH
5656: LD_EXP 11
5660: PUSH
5661: LD_EXP 12
5665: PUSH
5666: LD_EXP 13
5670: PUSH
5671: LD_EXP 14
5675: PUSH
5676: LD_EXP 15
5680: PUSH
5681: LD_EXP 16
5685: PUSH
5686: LD_EXP 17
5690: PUSH
5691: LD_EXP 18
5695: PUSH
5696: LD_EXP 26
5700: PUSH
5701: LD_EXP 27
5705: PUSH
5706: LD_EXP 28
5710: PUSH
5711: LD_EXP 29
5715: PUSH
5716: LD_EXP 31
5720: PUSH
5721: LD_EXP 32
5725: PUSH
5726: LD_EXP 33
5730: PUSH
5731: LD_EXP 36
5735: PUSH
5736: LD_EXP 38
5740: PUSH
5741: LD_EXP 39
5745: PUSH
5746: LD_EXP 40
5750: PUSH
5751: LD_EXP 42
5755: PUSH
5756: LD_EXP 43
5760: PUSH
5761: LD_EXP 46
5765: PUSH
5766: LD_EXP 47
5770: PUSH
5771: LD_EXP 48
5775: PUSH
5776: LD_EXP 49
5780: PUSH
5781: LD_EXP 50
5785: PUSH
5786: LD_EXP 51
5790: PUSH
5791: LD_EXP 52
5795: PUSH
5796: LD_EXP 53
5800: PUSH
5801: LD_EXP 54
5805: PUSH
5806: LD_EXP 19
5810: PUSH
5811: LD_EXP 20
5815: PUSH
5816: LD_EXP 23
5820: PUSH
5821: LD_EXP 24
5825: PUSH
5826: LD_EXP 25
5830: PUSH
5831: LD_EXP 21
5835: PUSH
5836: LD_EXP 22
5840: PUSH
5841: LD_EXP 30
5845: PUSH
5846: LD_EXP 34
5850: PUSH
5851: LD_EXP 35
5855: PUSH
5856: LD_EXP 37
5860: PUSH
5861: LD_EXP 41
5865: PUSH
5866: LD_EXP 44
5870: PUSH
5871: LD_EXP 45
5875: PUSH
5876: LD_EXP 55
5880: PUSH
5881: LD_EXP 56
5885: PUSH
5886: LD_EXP 57
5890: PUSH
5891: LD_EXP 58
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// tmp :=  ;
5952: LD_ADDR_VAR 0 3
5956: PUSH
5957: LD_STRING 
5959: ST_TO_ADDR
// for i = 1 to normalCounter do
5960: LD_ADDR_VAR 0 8
5964: PUSH
5965: DOUBLE
5966: LD_INT 1
5968: DEC
5969: ST_TO_ADDR
5970: LD_EXP 3
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6012
// begin if flags [ i ] then
5978: LD_VAR 0 4
5982: PUSH
5983: LD_VAR 0 8
5987: ARRAY
5988: IFFALSE 6010
// tmp := tmp & i & ; ;
5990: LD_ADDR_VAR 0 3
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: LD_VAR 0 8
6004: STR
6005: PUSH
6006: LD_STRING ;
6008: STR
6009: ST_TO_ADDR
// end ;
6010: GO 5975
6012: POP
6013: POP
// for i = 1 to hardcoreCounter do
6014: LD_ADDR_VAR 0 8
6018: PUSH
6019: DOUBLE
6020: LD_INT 1
6022: DEC
6023: ST_TO_ADDR
6024: LD_EXP 4
6028: PUSH
6029: FOR_TO
6030: IFFALSE 6076
// begin if flags [ normalCounter + i ] then
6032: LD_VAR 0 4
6036: PUSH
6037: LD_EXP 3
6041: PUSH
6042: LD_VAR 0 8
6046: PLUS
6047: ARRAY
6048: IFFALSE 6074
// tmp := tmp & ( 100 + i ) & ; ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 100
6062: PUSH
6063: LD_VAR 0 8
6067: PLUS
6068: STR
6069: PUSH
6070: LD_STRING ;
6072: STR
6073: ST_TO_ADDR
// end ;
6074: GO 6029
6076: POP
6077: POP
// if tmp then
6078: LD_VAR 0 3
6082: IFFALSE 6094
// active := tmp ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 3
6093: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6094: LD_STRING getStreamItemsFromMission("
6096: PUSH
6097: LD_VAR 0 5
6101: STR
6102: PUSH
6103: LD_STRING ","
6105: STR
6106: PUSH
6107: LD_VAR 0 6
6111: STR
6112: PUSH
6113: LD_STRING ","
6115: STR
6116: PUSH
6117: LD_VAR 0 7
6121: STR
6122: PUSH
6123: LD_STRING ")
6125: STR
6126: PPUSH
6127: CALL_OW 559
// end else
6131: GO 6140
// ToLua ( getStreamItemsFromMission("","","") ) ;
6133: LD_STRING getStreamItemsFromMission("","","")
6135: PPUSH
6136: CALL_OW 559
// end ;
6140: LD_VAR 0 2
6144: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6145: LD_EXP 2
6149: IFFALSE 6157
6151: PUSH
6152: LD_EXP 7
6156: AND
6157: IFFALSE 6281
6159: GO 6161
6161: DISABLE
6162: LD_INT 0
6164: PPUSH
6165: PPUSH
// begin enable ;
6166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_OWVAR 2
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: LD_INT 34
6189: PUSH
6190: LD_INT 7
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 34
6199: PUSH
6200: LD_INT 45
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 34
6209: PUSH
6210: LD_INT 28
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 34
6219: PUSH
6220: LD_INT 47
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: ST_TO_ADDR
// if not tmp then
6243: LD_VAR 0 2
6247: NOT
6248: IFFALSE 6252
// exit ;
6250: GO 6281
// for i in tmp do
6252: LD_ADDR_VAR 0 1
6256: PUSH
6257: LD_VAR 0 2
6261: PUSH
6262: FOR_IN
6263: IFFALSE 6279
// begin SetLives ( i , 0 ) ;
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 234
// end ;
6277: GO 6262
6279: POP
6280: POP
// end ;
6281: PPOPN 2
6283: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6284: LD_EXP 2
6288: IFFALSE 6296
6290: PUSH
6291: LD_EXP 8
6295: AND
6296: IFFALSE 6380
6298: GO 6300
6300: DISABLE
6301: LD_INT 0
6303: PPUSH
6304: PPUSH
// begin enable ;
6305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 22
6313: PUSH
6314: LD_OWVAR 2
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 32
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 69
6341: ST_TO_ADDR
// if not tmp then
6342: LD_VAR 0 2
6346: NOT
6347: IFFALSE 6351
// exit ;
6349: GO 6380
// for i in tmp do
6351: LD_ADDR_VAR 0 1
6355: PUSH
6356: LD_VAR 0 2
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6378
// begin SetLives ( i , 0 ) ;
6364: LD_VAR 0 1
6368: PPUSH
6369: LD_INT 0
6371: PPUSH
6372: CALL_OW 234
// end ;
6376: GO 6361
6378: POP
6379: POP
// end ;
6380: PPOPN 2
6382: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6383: LD_EXP 2
6387: IFFALSE 6395
6389: PUSH
6390: LD_EXP 5
6394: AND
6395: IFFALSE 6488
6397: GO 6399
6399: DISABLE
6400: LD_INT 0
6402: PPUSH
// begin enable ;
6403: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6404: LD_ADDR_VAR 0 1
6408: PUSH
6409: LD_INT 22
6411: PUSH
6412: LD_OWVAR 2
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 5
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 9
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 8
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 69
6468: PUSH
6469: FOR_IN
6470: IFFALSE 6486
// begin SetClass ( i , 1 ) ;
6472: LD_VAR 0 1
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 336
// end ;
6484: GO 6469
6486: POP
6487: POP
// end ;
6488: PPOPN 1
6490: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6491: LD_EXP 2
6495: IFFALSE 6503
6497: PUSH
6498: LD_EXP 6
6502: AND
6503: IFFALSE 6515
6505: PUSH
6506: LD_OWVAR 65
6510: PUSH
6511: LD_INT 7
6513: LESS
6514: AND
6515: IFFALSE 6529
6517: GO 6519
6519: DISABLE
// begin enable ;
6520: ENABLE
// game_speed := 7 ;
6521: LD_ADDR_OWVAR 65
6525: PUSH
6526: LD_INT 7
6528: ST_TO_ADDR
// end ;
6529: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6530: LD_EXP 2
6534: IFFALSE 6542
6536: PUSH
6537: LD_EXP 9
6541: AND
6542: IFFALSE 6744
6544: GO 6546
6546: DISABLE
6547: LD_INT 0
6549: PPUSH
6550: PPUSH
6551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_INT 81
6559: PUSH
6560: LD_OWVAR 2
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 21
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 69
6587: ST_TO_ADDR
// if not tmp then
6588: LD_VAR 0 3
6592: NOT
6593: IFFALSE 6597
// exit ;
6595: GO 6744
// if tmp > 5 then
6597: LD_VAR 0 3
6601: PUSH
6602: LD_INT 5
6604: GREATER
6605: IFFALSE 6617
// k := 5 else
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 5
6614: ST_TO_ADDR
6615: GO 6627
// k := tmp ;
6617: LD_ADDR_VAR 0 2
6621: PUSH
6622: LD_VAR 0 3
6626: ST_TO_ADDR
// for i := 1 to k do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_VAR 0 2
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6742
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6645: LD_VAR 0 3
6649: PUSH
6650: LD_VAR 0 1
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_INT 4
6663: MOD
6664: PUSH
6665: LD_INT 1
6667: PLUS
6668: PPUSH
6669: CALL_OW 259
6673: PUSH
6674: LD_INT 10
6676: LESS
6677: IFFALSE 6740
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6679: LD_VAR 0 3
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PUSH
6695: LD_INT 4
6697: MOD
6698: PUSH
6699: LD_INT 1
6701: PLUS
6702: PPUSH
6703: LD_VAR 0 3
6707: PUSH
6708: LD_VAR 0 1
6712: ARRAY
6713: PPUSH
6714: LD_VAR 0 1
6718: PUSH
6719: LD_INT 4
6721: MOD
6722: PUSH
6723: LD_INT 1
6725: PLUS
6726: PPUSH
6727: CALL_OW 259
6731: PUSH
6732: LD_INT 1
6734: PLUS
6735: PPUSH
6736: CALL_OW 237
6740: GO 6642
6742: POP
6743: POP
// end ;
6744: PPOPN 3
6746: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6747: LD_EXP 2
6751: IFFALSE 6759
6753: PUSH
6754: LD_EXP 10
6758: AND
6759: IFFALSE 6779
6761: GO 6763
6763: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6764: LD_INT 4
6766: PPUSH
6767: LD_OWVAR 2
6771: PPUSH
6772: LD_INT 0
6774: PPUSH
6775: CALL_OW 324
6779: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6780: LD_EXP 2
6784: IFFALSE 6792
6786: PUSH
6787: LD_EXP 39
6791: AND
6792: IFFALSE 6812
6794: GO 6796
6796: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6797: LD_INT 19
6799: PPUSH
6800: LD_OWVAR 2
6804: PPUSH
6805: LD_INT 0
6807: PPUSH
6808: CALL_OW 324
6812: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6813: LD_EXP 2
6817: IFFALSE 6825
6819: PUSH
6820: LD_EXP 11
6824: AND
6825: IFFALSE 6927
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
// begin enable ;
6834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_OWVAR 2
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 2
6854: PUSH
6855: LD_INT 34
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 34
6867: PUSH
6868: LD_INT 30
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 69
6888: ST_TO_ADDR
// if not tmp then
6889: LD_VAR 0 2
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6927
// for i in tmp do
6898: LD_ADDR_VAR 0 1
6902: PUSH
6903: LD_VAR 0 2
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6925
// begin SetLives ( i , 0 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 0
6918: PPUSH
6919: CALL_OW 234
// end ;
6923: GO 6908
6925: POP
6926: POP
// end ;
6927: PPOPN 2
6929: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6930: LD_EXP 2
6934: IFFALSE 6942
6936: PUSH
6937: LD_EXP 12
6941: AND
6942: IFFALSE 6962
6944: GO 6946
6946: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6947: LD_INT 32
6949: PPUSH
6950: LD_OWVAR 2
6954: PPUSH
6955: LD_INT 0
6957: PPUSH
6958: CALL_OW 324
6962: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6963: LD_EXP 2
6967: IFFALSE 6975
6969: PUSH
6970: LD_EXP 13
6974: AND
6975: IFFALSE 7158
6977: GO 6979
6979: DISABLE
6980: LD_INT 0
6982: PPUSH
6983: PPUSH
6984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_OWVAR 2
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 33
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: ST_TO_ADDR
// if not tmp then
7021: LD_VAR 0 2
7025: NOT
7026: IFFALSE 7030
// exit ;
7028: GO 7158
// side := 0 ;
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// for i := 1 to 8 do
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: DOUBLE
7044: LD_INT 1
7046: DEC
7047: ST_TO_ADDR
7048: LD_INT 8
7050: PUSH
7051: FOR_TO
7052: IFFALSE 7102
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7054: LD_OWVAR 2
7058: PUSH
7059: LD_VAR 0 1
7063: NONEQUAL
7064: IFFALSE 7086
7066: PUSH
7067: LD_OWVAR 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 81
7081: PUSH
7082: LD_INT 2
7084: EQUAL
7085: AND
7086: IFFALSE 7100
// begin side := i ;
7088: LD_ADDR_VAR 0 3
7092: PUSH
7093: LD_VAR 0 1
7097: ST_TO_ADDR
// break ;
7098: GO 7102
// end ;
7100: GO 7051
7102: POP
7103: POP
// if not side then
7104: LD_VAR 0 3
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 7158
// for i := 1 to tmp do
7113: LD_ADDR_VAR 0 1
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_VAR 0 2
7127: PUSH
7128: FOR_TO
7129: IFFALSE 7156
// if Prob ( 60 ) then
7131: LD_INT 60
7133: PPUSH
7134: CALL_OW 13
7138: IFFALSE 7154
// SetSide ( i , side ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: LD_VAR 0 3
7149: PPUSH
7150: CALL_OW 235
7154: GO 7128
7156: POP
7157: POP
// end ;
7158: PPOPN 3
7160: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7161: LD_EXP 2
7165: IFFALSE 7173
7167: PUSH
7168: LD_EXP 15
7172: AND
7173: IFFALSE 7292
7175: GO 7177
7177: DISABLE
7178: LD_INT 0
7180: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_OWVAR 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 21
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 3
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: PPUSH
7230: CALL_OW 69
7234: PUSH
7235: FOR_IN
7236: IFFALSE 7290
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 257
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: IN
7266: IFFALSE 7288
// SetClass ( un , rand ( 1 , 4 ) ) ;
7268: LD_VAR 0 1
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: LD_INT 4
7278: PPUSH
7279: CALL_OW 12
7283: PPUSH
7284: CALL_OW 336
7288: GO 7235
7290: POP
7291: POP
// end ;
7292: PPOPN 1
7294: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7295: LD_EXP 2
7299: IFFALSE 7307
7301: PUSH
7302: LD_EXP 14
7306: AND
7307: IFFALSE 7386
7309: GO 7311
7311: DISABLE
7312: LD_INT 0
7314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 22
7322: PUSH
7323: LD_OWVAR 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 21
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 69
7350: ST_TO_ADDR
// if not tmp then
7351: LD_VAR 0 1
7355: NOT
7356: IFFALSE 7360
// exit ;
7358: GO 7386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7360: LD_VAR 0 1
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 12
7377: ARRAY
7378: PPUSH
7379: LD_INT 100
7381: PPUSH
7382: CALL_OW 234
// end ;
7386: PPOPN 1
7388: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7389: LD_EXP 2
7393: IFFALSE 7401
7395: PUSH
7396: LD_EXP 16
7400: AND
7401: IFFALSE 7499
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_OWVAR 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 21
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: ST_TO_ADDR
// if not tmp then
7445: LD_VAR 0 1
7449: NOT
7450: IFFALSE 7454
// exit ;
7452: GO 7499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7454: LD_VAR 0 1
7458: PUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 12
7471: ARRAY
7472: PPUSH
7473: LD_INT 1
7475: PPUSH
7476: LD_INT 4
7478: PPUSH
7479: CALL_OW 12
7483: PPUSH
7484: LD_INT 3000
7486: PPUSH
7487: LD_INT 9000
7489: PPUSH
7490: CALL_OW 12
7494: PPUSH
7495: CALL_OW 492
// end ;
7499: PPOPN 1
7501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7502: LD_EXP 2
7506: IFFALSE 7514
7508: PUSH
7509: LD_EXP 17
7513: AND
7514: IFFALSE 7534
7516: GO 7518
7518: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7519: LD_INT 1
7521: PPUSH
7522: LD_OWVAR 2
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 324
7534: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7535: LD_EXP 2
7539: IFFALSE 7547
7541: PUSH
7542: LD_EXP 18
7546: AND
7547: IFFALSE 7630
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7556: LD_ADDR_VAR 0 2
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_OWVAR 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 21
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PPUSH
7587: CALL_OW 69
7591: ST_TO_ADDR
// if not tmp then
7592: LD_VAR 0 2
7596: NOT
7597: IFFALSE 7601
// exit ;
7599: GO 7630
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 7628
// SetBLevel ( i , 10 ) ;
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 10
7621: PPUSH
7622: CALL_OW 241
7626: GO 7611
7628: POP
7629: POP
// end ;
7630: PPOPN 2
7632: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7633: LD_EXP 2
7637: IFFALSE 7645
7639: PUSH
7640: LD_EXP 19
7644: AND
7645: IFFALSE 7756
7647: GO 7649
7649: DISABLE
7650: LD_INT 0
7652: PPUSH
7653: PPUSH
7654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7655: LD_ADDR_VAR 0 3
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_OWVAR 2
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 1
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 69
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 3
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7756
// un := tmp [ rand ( 1 , tmp ) ] ;
7700: LD_ADDR_VAR 0 2
7704: PUSH
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: PPUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 12
7722: ARRAY
7723: ST_TO_ADDR
// if Crawls ( un ) then
7724: LD_VAR 0 2
7728: PPUSH
7729: CALL_OW 318
7733: IFFALSE 7744
// ComWalk ( un ) ;
7735: LD_VAR 0 2
7739: PPUSH
7740: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_INT 5
7751: PPUSH
7752: CALL_OW 336
// end ;
7756: PPOPN 3
7758: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7759: LD_EXP 2
7763: IFFALSE 7771
7765: PUSH
7766: LD_EXP 20
7770: AND
7771: IFFALSE 7783
7773: PUSH
7774: LD_OWVAR 67
7778: PUSH
7779: LD_INT 4
7781: LESS
7782: AND
7783: IFFALSE 7802
7785: GO 7787
7787: DISABLE
// begin Difficulty := Difficulty + 1 ;
7788: LD_ADDR_OWVAR 67
7792: PUSH
7793: LD_OWVAR 67
7797: PUSH
7798: LD_INT 1
7800: PLUS
7801: ST_TO_ADDR
// end ;
7802: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7803: LD_EXP 2
7807: IFFALSE 7815
7809: PUSH
7810: LD_EXP 21
7814: AND
7815: IFFALSE 7918
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
// begin for i := 1 to 5 do
7823: LD_ADDR_VAR 0 1
7827: PUSH
7828: DOUBLE
7829: LD_INT 1
7831: DEC
7832: ST_TO_ADDR
7833: LD_INT 5
7835: PUSH
7836: FOR_TO
7837: IFFALSE 7916
// begin uc_nation := nation_nature ;
7839: LD_ADDR_OWVAR 21
7843: PUSH
7844: LD_INT 0
7846: ST_TO_ADDR
// uc_side := 0 ;
7847: LD_ADDR_OWVAR 20
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7855: LD_ADDR_OWVAR 29
7859: PUSH
7860: LD_INT 12
7862: PUSH
7863: LD_INT 12
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: ST_TO_ADDR
// hc_agressivity := 20 ;
7870: LD_ADDR_OWVAR 35
7874: PUSH
7875: LD_INT 20
7877: ST_TO_ADDR
// hc_class := class_tiger ;
7878: LD_ADDR_OWVAR 28
7882: PUSH
7883: LD_INT 14
7885: ST_TO_ADDR
// hc_gallery :=  ;
7886: LD_ADDR_OWVAR 33
7890: PUSH
7891: LD_STRING 
7893: ST_TO_ADDR
// hc_name :=  ;
7894: LD_ADDR_OWVAR 26
7898: PUSH
7899: LD_STRING 
7901: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7902: CALL_OW 44
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 51
// end ;
7914: GO 7836
7916: POP
7917: POP
// end ;
7918: PPOPN 1
7920: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7921: LD_EXP 2
7925: IFFALSE 7933
7927: PUSH
7928: LD_EXP 22
7932: AND
7933: IFFALSE 7942
7935: GO 7937
7937: DISABLE
// StreamSibBomb ;
7938: CALL 7943 0 0
7942: END
// export function StreamSibBomb ; var i , x , y ; begin
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// result := false ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// for i := 1 to 16 do
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: DOUBLE
7963: LD_INT 1
7965: DEC
7966: ST_TO_ADDR
7967: LD_INT 16
7969: PUSH
7970: FOR_TO
7971: IFFALSE 8170
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_INT 10
7980: PUSH
7981: LD_INT 20
7983: PUSH
7984: LD_INT 30
7986: PUSH
7987: LD_INT 40
7989: PUSH
7990: LD_INT 50
7992: PUSH
7993: LD_INT 60
7995: PUSH
7996: LD_INT 70
7998: PUSH
7999: LD_INT 80
8001: PUSH
8002: LD_INT 90
8004: PUSH
8005: LD_INT 100
8007: PUSH
8008: LD_INT 110
8010: PUSH
8011: LD_INT 120
8013: PUSH
8014: LD_INT 130
8016: PUSH
8017: LD_INT 140
8019: PUSH
8020: LD_INT 150
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 1
8042: PPUSH
8043: LD_INT 15
8045: PPUSH
8046: CALL_OW 12
8050: ARRAY
8051: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 10
8059: PUSH
8060: LD_INT 20
8062: PUSH
8063: LD_INT 30
8065: PUSH
8066: LD_INT 40
8068: PUSH
8069: LD_INT 50
8071: PUSH
8072: LD_INT 60
8074: PUSH
8075: LD_INT 70
8077: PUSH
8078: LD_INT 80
8080: PUSH
8081: LD_INT 90
8083: PUSH
8084: LD_INT 100
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 120
8092: PUSH
8093: LD_INT 130
8095: PUSH
8096: LD_INT 140
8098: PUSH
8099: LD_INT 150
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 15
8124: PPUSH
8125: CALL_OW 12
8129: ARRAY
8130: ST_TO_ADDR
// if ValidHex ( x , y ) then
8131: LD_VAR 0 3
8135: PPUSH
8136: LD_VAR 0 4
8140: PPUSH
8141: CALL_OW 488
8145: IFFALSE 8168
// begin result := [ x , y ] ;
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_VAR 0 3
8156: PUSH
8157: LD_VAR 0 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: ST_TO_ADDR
// break ;
8166: GO 8170
// end ; end ;
8168: GO 7970
8170: POP
8171: POP
// if result then
8172: LD_VAR 0 1
8176: IFFALSE 8236
// begin ToLua ( playSibBomb() ) ;
8178: LD_STRING playSibBomb()
8180: PPUSH
8181: CALL_OW 559
// wait ( 0 0$14 ) ;
8185: LD_INT 490
8187: PPUSH
8188: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8192: LD_VAR 0 1
8196: PUSH
8197: LD_INT 1
8199: ARRAY
8200: PPUSH
8201: LD_VAR 0 1
8205: PUSH
8206: LD_INT 2
8208: ARRAY
8209: PPUSH
8210: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8214: LD_VAR 0 1
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_INT 2
8230: ARRAY
8231: PPUSH
8232: CALL_OW 429
// end ; end ;
8236: LD_VAR 0 1
8240: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8241: LD_EXP 2
8245: IFFALSE 8253
8247: PUSH
8248: LD_EXP 24
8252: AND
8253: IFFALSE 8265
8255: GO 8257
8257: DISABLE
// YouLost (  ) ;
8258: LD_STRING 
8260: PPUSH
8261: CALL_OW 104
8265: END
// every 0 0$1 trigger StreamModeActive and sFog do
8266: LD_EXP 2
8270: IFFALSE 8278
8272: PUSH
8273: LD_EXP 23
8277: AND
8278: IFFALSE 8292
8280: GO 8282
8282: DISABLE
// FogOff ( your_side ) ;
8283: LD_OWVAR 2
8287: PPUSH
8288: CALL_OW 344
8292: END
// every 0 0$1 trigger StreamModeActive and sSun do
8293: LD_EXP 2
8297: IFFALSE 8305
8299: PUSH
8300: LD_EXP 25
8304: AND
8305: IFFALSE 8333
8307: GO 8309
8309: DISABLE
// begin solar_recharge_percent := 0 ;
8310: LD_ADDR_OWVAR 79
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8318: LD_INT 10500
8320: PPUSH
8321: CALL_OW 67
// solar_recharge_percent := 100 ;
8325: LD_ADDR_OWVAR 79
8329: PUSH
8330: LD_INT 100
8332: ST_TO_ADDR
// end ;
8333: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8334: LD_EXP 2
8338: IFFALSE 8346
8340: PUSH
8341: LD_EXP 26
8345: AND
8346: IFFALSE 8585
8348: GO 8350
8350: DISABLE
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
8355: PPUSH
// begin tmp := [ ] ;
8356: LD_ADDR_VAR 0 3
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// for i := 1 to 6 do
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: DOUBLE
8369: LD_INT 1
8371: DEC
8372: ST_TO_ADDR
8373: LD_INT 6
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8482
// begin uc_nation := nation_nature ;
8379: LD_ADDR_OWVAR 21
8383: PUSH
8384: LD_INT 0
8386: ST_TO_ADDR
// uc_side := 0 ;
8387: LD_ADDR_OWVAR 20
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8395: LD_ADDR_OWVAR 29
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: LD_INT 12
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: ST_TO_ADDR
// hc_agressivity := 20 ;
8410: LD_ADDR_OWVAR 35
8414: PUSH
8415: LD_INT 20
8417: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8418: LD_ADDR_OWVAR 28
8422: PUSH
8423: LD_INT 17
8425: ST_TO_ADDR
// hc_gallery :=  ;
8426: LD_ADDR_OWVAR 33
8430: PUSH
8431: LD_STRING 
8433: ST_TO_ADDR
// hc_name :=  ;
8434: LD_ADDR_OWVAR 26
8438: PUSH
8439: LD_STRING 
8441: ST_TO_ADDR
// un := CreateHuman ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8452: LD_VAR 0 2
8456: PPUSH
8457: LD_INT 1
8459: PPUSH
8460: CALL_OW 51
// tmp := tmp ^ un ;
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_VAR 0 3
8473: PUSH
8474: LD_VAR 0 2
8478: ADD
8479: ST_TO_ADDR
// end ;
8480: GO 8376
8482: POP
8483: POP
// repeat wait ( 0 0$1 ) ;
8484: LD_INT 35
8486: PPUSH
8487: CALL_OW 67
// for un in tmp do
8491: LD_ADDR_VAR 0 2
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: FOR_IN
8502: IFFALSE 8576
// begin if IsDead ( un ) then
8504: LD_VAR 0 2
8508: PPUSH
8509: CALL_OW 301
8513: IFFALSE 8533
// begin tmp := tmp diff un ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_VAR 0 3
8524: PUSH
8525: LD_VAR 0 2
8529: DIFF
8530: ST_TO_ADDR
// continue ;
8531: GO 8501
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8533: LD_VAR 0 2
8537: PPUSH
8538: LD_INT 3
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 0
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 69
8559: PPUSH
8560: LD_VAR 0 2
8564: PPUSH
8565: CALL_OW 74
8569: PPUSH
8570: CALL_OW 115
// end ;
8574: GO 8501
8576: POP
8577: POP
// until not tmp ;
8578: LD_VAR 0 3
8582: NOT
8583: IFFALSE 8484
// end ;
8585: PPOPN 3
8587: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8588: LD_EXP 2
8592: IFFALSE 8600
8594: PUSH
8595: LD_EXP 27
8599: AND
8600: IFFALSE 8654
8602: GO 8604
8604: DISABLE
// begin ToLua ( displayTroll(); ) ;
8605: LD_STRING displayTroll();
8607: PPUSH
8608: CALL_OW 559
// wait ( 3 3$00 ) ;
8612: LD_INT 6300
8614: PPUSH
8615: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8619: LD_STRING hideTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 1 1$00 ) ;
8626: LD_INT 2100
8628: PPUSH
8629: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8633: LD_STRING displayTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8647: LD_STRING hideTroll();
8649: PPUSH
8650: CALL_OW 559
// end ;
8654: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8655: LD_EXP 2
8659: IFFALSE 8667
8661: PUSH
8662: LD_EXP 28
8666: AND
8667: IFFALSE 8730
8669: GO 8671
8671: DISABLE
8672: LD_INT 0
8674: PPUSH
// begin p := 0 ;
8675: LD_ADDR_VAR 0 1
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// repeat game_speed := 1 ;
8683: LD_ADDR_OWVAR 65
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// p := p + 1 ;
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 1
8707: PUSH
8708: LD_INT 1
8710: PLUS
8711: ST_TO_ADDR
// until p >= 60 ;
8712: LD_VAR 0 1
8716: PUSH
8717: LD_INT 60
8719: GREATEREQUAL
8720: IFFALSE 8683
// game_speed := 4 ;
8722: LD_ADDR_OWVAR 65
8726: PUSH
8727: LD_INT 4
8729: ST_TO_ADDR
// end ;
8730: PPOPN 1
8732: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8733: LD_EXP 2
8737: IFFALSE 8745
8739: PUSH
8740: LD_EXP 29
8744: AND
8745: IFFALSE 8891
8747: GO 8749
8749: DISABLE
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8754: LD_ADDR_VAR 0 1
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_OWVAR 2
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: LD_INT 30
8776: PUSH
8777: LD_INT 0
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 69
8807: ST_TO_ADDR
// if not depot then
8808: LD_VAR 0 1
8812: NOT
8813: IFFALSE 8817
// exit ;
8815: GO 8891
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: LD_INT 1
8829: PPUSH
8830: LD_VAR 0 1
8834: PPUSH
8835: CALL_OW 12
8839: ARRAY
8840: PPUSH
8841: CALL_OW 274
8845: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8846: LD_VAR 0 2
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 0
8856: PPUSH
8857: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: LD_INT 0
8871: PPUSH
8872: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8876: LD_VAR 0 2
8880: PPUSH
8881: LD_INT 3
8883: PPUSH
8884: LD_INT 0
8886: PPUSH
8887: CALL_OW 277
// end ;
8891: PPOPN 2
8893: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8894: LD_EXP 2
8898: IFFALSE 8906
8900: PUSH
8901: LD_EXP 30
8905: AND
8906: IFFALSE 9003
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_OWVAR 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 21
8933: PUSH
8934: LD_INT 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PPUSH
8963: CALL_OW 69
8967: ST_TO_ADDR
// if not tmp then
8968: LD_VAR 0 1
8972: NOT
8973: IFFALSE 8977
// exit ;
8975: GO 9003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8977: LD_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: PPUSH
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 12
8994: ARRAY
8995: PPUSH
8996: LD_INT 200
8998: PPUSH
8999: CALL_OW 234
// end ;
9003: PPOPN 1
9005: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9006: LD_EXP 2
9010: IFFALSE 9018
9012: PUSH
9013: LD_EXP 31
9017: AND
9018: IFFALSE 9097
9020: GO 9022
9022: DISABLE
9023: LD_INT 0
9025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: LD_INT 22
9033: PUSH
9034: LD_OWVAR 2
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 2
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: ST_TO_ADDR
// if not tmp then
9062: LD_VAR 0 1
9066: NOT
9067: IFFALSE 9071
// exit ;
9069: GO 9097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9071: LD_VAR 0 1
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: PPUSH
9090: LD_INT 60
9092: PPUSH
9093: CALL_OW 234
// end ;
9097: PPOPN 1
9099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9100: LD_EXP 2
9104: IFFALSE 9112
9106: PUSH
9107: LD_EXP 32
9111: AND
9112: IFFALSE 9211
9114: GO 9116
9116: DISABLE
9117: LD_INT 0
9119: PPUSH
9120: PPUSH
// begin enable ;
9121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9122: LD_ADDR_VAR 0 1
9126: PUSH
9127: LD_INT 22
9129: PUSH
9130: LD_OWVAR 2
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 61
9141: PUSH
9142: EMPTY
9143: LIST
9144: PUSH
9145: LD_INT 33
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 69
9164: ST_TO_ADDR
// if not tmp then
9165: LD_VAR 0 1
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9211
// for i in tmp do
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: LD_VAR 0 1
9183: PUSH
9184: FOR_IN
9185: IFFALSE 9209
// if IsControledBy ( i ) then
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 312
9196: IFFALSE 9207
// ComUnlink ( i ) ;
9198: LD_VAR 0 2
9202: PPUSH
9203: CALL_OW 136
9207: GO 9184
9209: POP
9210: POP
// end ;
9211: PPOPN 2
9213: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9214: LD_EXP 2
9218: IFFALSE 9226
9220: PUSH
9221: LD_EXP 33
9225: AND
9226: IFFALSE 9366
9228: GO 9230
9230: DISABLE
9231: LD_INT 0
9233: PPUSH
9234: PPUSH
// begin ToLua ( displayPowell(); ) ;
9235: LD_STRING displayPowell();
9237: PPUSH
9238: CALL_OW 559
// uc_side := 0 ;
9242: LD_ADDR_OWVAR 20
9246: PUSH
9247: LD_INT 0
9249: ST_TO_ADDR
// uc_nation := 2 ;
9250: LD_ADDR_OWVAR 21
9254: PUSH
9255: LD_INT 2
9257: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9258: LD_ADDR_OWVAR 37
9262: PUSH
9263: LD_INT 14
9265: ST_TO_ADDR
// vc_engine := engine_siberite ;
9266: LD_ADDR_OWVAR 39
9270: PUSH
9271: LD_INT 3
9273: ST_TO_ADDR
// vc_control := control_apeman ;
9274: LD_ADDR_OWVAR 38
9278: PUSH
9279: LD_INT 5
9281: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9282: LD_ADDR_OWVAR 40
9286: PUSH
9287: LD_INT 29
9289: ST_TO_ADDR
// un := CreateVehicle ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: CALL_OW 45
9299: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9300: LD_VAR 0 2
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9312: LD_INT 35
9314: PPUSH
9315: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_OWVAR 2
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 69
9340: PPUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL_OW 74
9350: PPUSH
9351: CALL_OW 115
// until IsDead ( un ) ;
9355: LD_VAR 0 2
9359: PPUSH
9360: CALL_OW 301
9364: IFFALSE 9312
// end ;
9366: PPOPN 2
9368: END
// every 0 0$1 trigger StreamModeActive and sStu do
9369: LD_EXP 2
9373: IFFALSE 9381
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: IFFALSE 9410
9404: PUSH
9405: LD_EXP 34
9409: AND
9410: IFFALSE 9551
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9419: LD_ADDR_VAR 0 2
9423: PUSH
9424: LD_INT 22
9426: PUSH
9427: LD_OWVAR 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 69
9454: ST_TO_ADDR
// if not tmp then
9455: LD_VAR 0 2
9459: NOT
9460: IFFALSE 9464
// exit ;
9462: GO 9551
// un := tmp [ rand ( 1 , tmp ) ] ;
9464: LD_ADDR_VAR 0 1
9468: PUSH
9469: LD_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: PPUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 12
9486: ARRAY
9487: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9488: LD_VAR 0 1
9492: PPUSH
9493: LD_INT 0
9495: PPUSH
9496: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9500: LD_VAR 0 1
9504: PPUSH
9505: LD_OWVAR 3
9509: PUSH
9510: LD_VAR 0 1
9514: DIFF
9515: PPUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: CALL_OW 74
9525: PPUSH
9526: CALL_OW 115
// wait ( 0 0$20 ) ;
9530: LD_INT 700
9532: PPUSH
9533: CALL_OW 67
// SetSide ( un , your_side ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_OWVAR 2
9546: PPUSH
9547: CALL_OW 235
// end ;
9551: PPOPN 2
9553: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9554: LD_EXP 2
9558: IFFALSE 9566
9560: PUSH
9561: LD_EXP 35
9565: AND
9566: IFFALSE 9672
9568: GO 9570
9570: DISABLE
9571: LD_INT 0
9573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9574: LD_ADDR_VAR 0 1
9578: PUSH
9579: LD_INT 22
9581: PUSH
9582: LD_OWVAR 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: LD_INT 30
9596: PUSH
9597: LD_INT 0
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 30
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PPUSH
9623: CALL_OW 69
9627: ST_TO_ADDR
// if not depot then
9628: LD_VAR 0 1
9632: NOT
9633: IFFALSE 9637
// exit ;
9635: GO 9672
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: CALL_OW 250
9650: PPUSH
9651: LD_VAR 0 1
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: PPUSH
9660: CALL_OW 251
9664: PPUSH
9665: LD_INT 70
9667: PPUSH
9668: CALL_OW 495
// end ;
9672: PPOPN 1
9674: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9675: LD_EXP 2
9679: IFFALSE 9687
9681: PUSH
9682: LD_EXP 36
9686: AND
9687: IFFALSE 9898
9689: GO 9691
9691: DISABLE
9692: LD_INT 0
9694: PPUSH
9695: PPUSH
9696: PPUSH
9697: PPUSH
9698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9699: LD_ADDR_VAR 0 5
9703: PUSH
9704: LD_INT 22
9706: PUSH
9707: LD_OWVAR 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 5
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9898
// for i in tmp do
9744: LD_ADDR_VAR 0 1
9748: PUSH
9749: LD_VAR 0 5
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9896
// begin d := rand ( 0 , 5 ) ;
9757: LD_ADDR_VAR 0 4
9761: PUSH
9762: LD_INT 0
9764: PPUSH
9765: LD_INT 5
9767: PPUSH
9768: CALL_OW 12
9772: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 250
9787: PPUSH
9788: LD_VAR 0 4
9792: PPUSH
9793: LD_INT 3
9795: PPUSH
9796: LD_INT 12
9798: PPUSH
9799: CALL_OW 12
9803: PPUSH
9804: CALL_OW 272
9808: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_VAR 0 1
9818: PPUSH
9819: CALL_OW 251
9823: PPUSH
9824: LD_VAR 0 4
9828: PPUSH
9829: LD_INT 3
9831: PPUSH
9832: LD_INT 12
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL_OW 273
9844: ST_TO_ADDR
// if ValidHex ( x , y ) then
9845: LD_VAR 0 2
9849: PPUSH
9850: LD_VAR 0 3
9854: PPUSH
9855: CALL_OW 488
9859: IFFALSE 9894
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: LD_INT 3
9878: PPUSH
9879: LD_INT 6
9881: PPUSH
9882: CALL_OW 12
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 483
// end ;
9894: GO 9754
9896: POP
9897: POP
// end ;
9898: PPOPN 5
9900: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9901: LD_EXP 2
9905: IFFALSE 9913
9907: PUSH
9908: LD_EXP 37
9912: AND
9913: IFFALSE 10007
9915: GO 9917
9917: DISABLE
9918: LD_INT 0
9920: PPUSH
9921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 22
9929: PUSH
9930: LD_OWVAR 2
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 32
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: ST_TO_ADDR
// if not tmp then
9969: LD_VAR 0 2
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10007
// for i in tmp do
9978: LD_ADDR_VAR 0 1
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: FOR_IN
9989: IFFALSE 10005
// SetFuel ( i , 0 ) ;
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_INT 0
9998: PPUSH
9999: CALL_OW 240
10003: GO 9988
10005: POP
10006: POP
// end ;
10007: PPOPN 2
10009: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10010: LD_EXP 2
10014: IFFALSE 10022
10016: PUSH
10017: LD_EXP 38
10021: AND
10022: IFFALSE 10088
10024: GO 10026
10026: DISABLE
10027: LD_INT 0
10029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10030: LD_ADDR_VAR 0 1
10034: PUSH
10035: LD_INT 22
10037: PUSH
10038: LD_OWVAR 2
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 30
10049: PUSH
10050: LD_INT 29
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: CALL_OW 69
10065: ST_TO_ADDR
// if not tmp then
10066: LD_VAR 0 1
10070: NOT
10071: IFFALSE 10075
// exit ;
10073: GO 10088
// DestroyUnit ( tmp [ 1 ] ) ;
10075: LD_VAR 0 1
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: PPUSH
10084: CALL_OW 65
// end ;
10088: PPOPN 1
10090: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10091: LD_EXP 2
10095: IFFALSE 10103
10097: PUSH
10098: LD_EXP 40
10102: AND
10103: IFFALSE 10232
10105: GO 10107
10107: DISABLE
10108: LD_INT 0
10110: PPUSH
// begin uc_side := 0 ;
10111: LD_ADDR_OWVAR 20
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// uc_nation := nation_arabian ;
10119: LD_ADDR_OWVAR 21
10123: PUSH
10124: LD_INT 2
10126: ST_TO_ADDR
// hc_gallery :=  ;
10127: LD_ADDR_OWVAR 33
10131: PUSH
10132: LD_STRING 
10134: ST_TO_ADDR
// hc_name :=  ;
10135: LD_ADDR_OWVAR 26
10139: PUSH
10140: LD_STRING 
10142: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10143: LD_INT 1
10145: PPUSH
10146: LD_INT 11
10148: PPUSH
10149: LD_INT 10
10151: PPUSH
10152: CALL_OW 380
// un := CreateHuman ;
10156: LD_ADDR_VAR 0 1
10160: PUSH
10161: CALL_OW 44
10165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10178: LD_INT 35
10180: PPUSH
10181: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10185: LD_VAR 0 1
10189: PPUSH
10190: LD_INT 22
10192: PUSH
10193: LD_OWVAR 2
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 74
10216: PPUSH
10217: CALL_OW 115
// until IsDead ( un ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 301
10230: IFFALSE 10178
// end ;
10232: PPOPN 1
10234: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10235: LD_EXP 2
10239: IFFALSE 10247
10241: PUSH
10242: LD_EXP 42
10246: AND
10247: IFFALSE 10259
10249: GO 10251
10251: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10252: LD_STRING earthquake(getX(game), 0, 32)
10254: PPUSH
10255: CALL_OW 559
10259: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10260: LD_EXP 2
10264: IFFALSE 10272
10266: PUSH
10267: LD_EXP 43
10271: AND
10272: IFFALSE 10363
10274: GO 10276
10276: DISABLE
10277: LD_INT 0
10279: PPUSH
// begin enable ;
10280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10281: LD_ADDR_VAR 0 1
10285: PUSH
10286: LD_INT 22
10288: PUSH
10289: LD_OWVAR 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 33
10310: PUSH
10311: LD_INT 3
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: ST_TO_ADDR
// if not tmp then
10328: LD_VAR 0 1
10332: NOT
10333: IFFALSE 10337
// exit ;
10335: GO 10363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10337: LD_VAR 0 1
10341: PUSH
10342: LD_INT 1
10344: PPUSH
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 234
// end ;
10363: PPOPN 1
10365: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10366: LD_EXP 2
10370: IFFALSE 10378
10372: PUSH
10373: LD_EXP 44
10377: AND
10378: IFFALSE 10519
10380: GO 10382
10382: DISABLE
10383: LD_INT 0
10385: PPUSH
10386: PPUSH
10387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10388: LD_ADDR_VAR 0 3
10392: PUSH
10393: LD_INT 22
10395: PUSH
10396: LD_OWVAR 2
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 25
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PPUSH
10419: CALL_OW 69
10423: ST_TO_ADDR
// if not tmp then
10424: LD_VAR 0 3
10428: NOT
10429: IFFALSE 10433
// exit ;
10431: GO 10519
// un := tmp [ rand ( 1 , tmp ) ] ;
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 1
10445: PPUSH
10446: LD_VAR 0 3
10450: PPUSH
10451: CALL_OW 12
10455: ARRAY
10456: ST_TO_ADDR
// if Crawls ( un ) then
10457: LD_VAR 0 2
10461: PPUSH
10462: CALL_OW 318
10466: IFFALSE 10477
// ComWalk ( un ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10477: LD_VAR 0 2
10481: PPUSH
10482: LD_INT 9
10484: PPUSH
10485: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10489: LD_INT 28
10491: PPUSH
10492: LD_OWVAR 2
10496: PPUSH
10497: LD_INT 2
10499: PPUSH
10500: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10504: LD_INT 29
10506: PPUSH
10507: LD_OWVAR 2
10511: PPUSH
10512: LD_INT 2
10514: PPUSH
10515: CALL_OW 322
// end ;
10519: PPOPN 3
10521: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10522: LD_EXP 2
10526: IFFALSE 10534
10528: PUSH
10529: LD_EXP 45
10533: AND
10534: IFFALSE 10645
10536: GO 10538
10538: DISABLE
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10544: LD_ADDR_VAR 0 3
10548: PUSH
10549: LD_INT 22
10551: PUSH
10552: LD_OWVAR 2
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: ST_TO_ADDR
// if not tmp then
10580: LD_VAR 0 3
10584: NOT
10585: IFFALSE 10589
// exit ;
10587: GO 10645
// un := tmp [ rand ( 1 , tmp ) ] ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_VAR 0 3
10598: PUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: CALL_OW 12
10611: ARRAY
10612: ST_TO_ADDR
// if Crawls ( un ) then
10613: LD_VAR 0 2
10617: PPUSH
10618: CALL_OW 318
10622: IFFALSE 10633
// ComWalk ( un ) ;
10624: LD_VAR 0 2
10628: PPUSH
10629: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10633: LD_VAR 0 2
10637: PPUSH
10638: LD_INT 8
10640: PPUSH
10641: CALL_OW 336
// end ;
10645: PPOPN 3
10647: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10648: LD_EXP 2
10652: IFFALSE 10660
10654: PUSH
10655: LD_EXP 46
10659: AND
10660: IFFALSE 10804
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_OWVAR 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 21
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 34
10711: PUSH
10712: LD_INT 51
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10804
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10802
// if GetCargo ( i , mat_artifact ) = 0 then
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 4
10774: PPUSH
10775: CALL_OW 289
10779: PUSH
10780: LD_INT 0
10782: EQUAL
10783: IFFALSE 10800
// SetCargo ( i , mat_siberit , 100 ) ;
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 3
10792: PPUSH
10793: LD_INT 100
10795: PPUSH
10796: CALL_OW 290
10800: GO 10764
10802: POP
10803: POP
// end ;
10804: PPOPN 2
10806: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10807: LD_EXP 2
10811: IFFALSE 10819
10813: PUSH
10814: LD_EXP 47
10818: AND
10819: IFFALSE 11002
10821: GO 10823
10823: DISABLE
10824: LD_INT 0
10826: PPUSH
10827: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_OWVAR 2
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: ST_TO_ADDR
// if not tmp then
10850: LD_VAR 0 2
10854: NOT
10855: IFFALSE 10859
// exit ;
10857: GO 11002
// for i := 1 to 2 do
10859: LD_ADDR_VAR 0 1
10863: PUSH
10864: DOUBLE
10865: LD_INT 1
10867: DEC
10868: ST_TO_ADDR
10869: LD_INT 2
10871: PUSH
10872: FOR_TO
10873: IFFALSE 11000
// begin uc_side := your_side ;
10875: LD_ADDR_OWVAR 20
10879: PUSH
10880: LD_OWVAR 2
10884: ST_TO_ADDR
// uc_nation := nation_american ;
10885: LD_ADDR_OWVAR 21
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// vc_chassis := us_morphling ;
10893: LD_ADDR_OWVAR 37
10897: PUSH
10898: LD_INT 5
10900: ST_TO_ADDR
// vc_engine := engine_siberite ;
10901: LD_ADDR_OWVAR 39
10905: PUSH
10906: LD_INT 3
10908: ST_TO_ADDR
// vc_control := control_computer ;
10909: LD_ADDR_OWVAR 38
10913: PUSH
10914: LD_INT 3
10916: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10917: LD_ADDR_OWVAR 40
10921: PUSH
10922: LD_INT 10
10924: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10925: LD_VAR 0 2
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: PPUSH
10934: CALL_OW 310
10938: NOT
10939: IFFALSE 10986
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10941: CALL_OW 45
10945: PPUSH
10946: LD_VAR 0 2
10950: PUSH
10951: LD_INT 1
10953: ARRAY
10954: PPUSH
10955: CALL_OW 250
10959: PPUSH
10960: LD_VAR 0 2
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PPUSH
10969: CALL_OW 251
10973: PPUSH
10974: LD_INT 12
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 50
10984: GO 10998
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10986: CALL_OW 45
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 51
// end ;
10998: GO 10872
11000: POP
11001: POP
// end ;
11002: PPOPN 2
11004: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11005: LD_EXP 2
11009: IFFALSE 11017
11011: PUSH
11012: LD_EXP 48
11016: AND
11017: IFFALSE 11239
11019: GO 11021
11021: DISABLE
11022: LD_INT 0
11024: PPUSH
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_OWVAR 2
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 23
11062: PUSH
11063: LD_INT 0
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: ST_TO_ADDR
// if not tmp then
11084: LD_VAR 0 6
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 11239
// s1 := rand ( 1 , 4 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_INT 1
11100: PPUSH
11101: LD_INT 4
11103: PPUSH
11104: CALL_OW 12
11108: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11109: LD_ADDR_VAR 0 4
11113: PUSH
11114: LD_VAR 0 6
11118: PUSH
11119: LD_INT 1
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 2
11127: PPUSH
11128: CALL_OW 259
11132: ST_TO_ADDR
// if s1 = 1 then
11133: LD_VAR 0 2
11137: PUSH
11138: LD_INT 1
11140: EQUAL
11141: IFFALSE 11161
// s2 := rand ( 2 , 4 ) else
11143: LD_ADDR_VAR 0 3
11147: PUSH
11148: LD_INT 2
11150: PPUSH
11151: LD_INT 4
11153: PPUSH
11154: CALL_OW 12
11158: ST_TO_ADDR
11159: GO 11169
// s2 := 1 ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11169: LD_ADDR_VAR 0 5
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: CALL_OW 259
11192: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11193: LD_VAR 0 6
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PPUSH
11202: LD_VAR 0 2
11206: PPUSH
11207: LD_VAR 0 5
11211: PPUSH
11212: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11216: LD_VAR 0 6
11220: PUSH
11221: LD_INT 1
11223: ARRAY
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_VAR 0 4
11234: PPUSH
11235: CALL_OW 237
// end ;
11239: PPOPN 6
11241: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11242: LD_EXP 2
11246: IFFALSE 11254
11248: PUSH
11249: LD_EXP 49
11253: AND
11254: IFFALSE 11333
11256: GO 11258
11258: DISABLE
11259: LD_INT 0
11261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_INT 22
11269: PUSH
11270: LD_OWVAR 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: LD_INT 3
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: ST_TO_ADDR
// if not tmp then
11298: LD_VAR 0 1
11302: NOT
11303: IFFALSE 11307
// exit ;
11305: GO 11333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11307: LD_VAR 0 1
11311: PUSH
11312: LD_INT 1
11314: PPUSH
11315: LD_VAR 0 1
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 234
// end ;
11333: PPOPN 1
11335: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11336: LD_EXP 2
11340: IFFALSE 11348
11342: PUSH
11343: LD_EXP 50
11347: AND
11348: IFFALSE 11460
11350: GO 11352
11352: DISABLE
11353: LD_INT 0
11355: PPUSH
11356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_OWVAR 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 30
11379: PUSH
11380: LD_INT 27
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 26
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 28
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 69
11421: ST_TO_ADDR
// if not tmp then
11422: LD_VAR 0 2
11426: NOT
11427: IFFALSE 11431
// exit ;
11429: GO 11460
// for i in tmp do
11431: LD_ADDR_VAR 0 1
11435: PUSH
11436: LD_VAR 0 2
11440: PUSH
11441: FOR_IN
11442: IFFALSE 11458
// SetLives ( i , 1 ) ;
11444: LD_VAR 0 1
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 234
11456: GO 11441
11458: POP
11459: POP
// end ;
11460: PPOPN 2
11462: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11463: LD_EXP 2
11467: IFFALSE 11475
11469: PUSH
11470: LD_EXP 51
11474: AND
11475: IFFALSE 11762
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
11483: PPUSH
11484: PPUSH
// begin i := rand ( 1 , 7 ) ;
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_INT 1
11492: PPUSH
11493: LD_INT 7
11495: PPUSH
11496: CALL_OW 12
11500: ST_TO_ADDR
// case i of 1 :
11501: LD_VAR 0 1
11505: PUSH
11506: LD_INT 1
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11524
11514: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11515: LD_STRING earthquake(getX(game), 0, 32)
11517: PPUSH
11518: CALL_OW 559
11522: GO 11762
11524: LD_INT 2
11526: DOUBLE
11527: EQUAL
11528: IFTRUE 11532
11530: GO 11546
11532: POP
// begin ToLua ( displayStucuk(); ) ;
11533: LD_STRING displayStucuk();
11535: PPUSH
11536: CALL_OW 559
// ResetFog ;
11540: CALL_OW 335
// end ; 3 :
11544: GO 11762
11546: LD_INT 3
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11658
11554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11555: LD_ADDR_VAR 0 2
11559: PUSH
11560: LD_INT 22
11562: PUSH
11563: LD_OWVAR 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 25
11574: PUSH
11575: LD_INT 1
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: ST_TO_ADDR
// if not tmp then
11591: LD_VAR 0 2
11595: NOT
11596: IFFALSE 11600
// exit ;
11598: GO 11762
// un := tmp [ rand ( 1 , tmp ) ] ;
11600: LD_ADDR_VAR 0 3
11604: PUSH
11605: LD_VAR 0 2
11609: PUSH
11610: LD_INT 1
11612: PPUSH
11613: LD_VAR 0 2
11617: PPUSH
11618: CALL_OW 12
11622: ARRAY
11623: ST_TO_ADDR
// if Crawls ( un ) then
11624: LD_VAR 0 3
11628: PPUSH
11629: CALL_OW 318
11633: IFFALSE 11644
// ComWalk ( un ) ;
11635: LD_VAR 0 3
11639: PPUSH
11640: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 8
11651: PPUSH
11652: CALL_OW 336
// end ; 4 :
11656: GO 11762
11658: LD_INT 4
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11740
11666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_INT 22
11674: PUSH
11675: LD_OWVAR 2
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 30
11686: PUSH
11687: LD_INT 29
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// if not tmp then
11703: LD_VAR 0 2
11707: NOT
11708: IFFALSE 11712
// exit ;
11710: GO 11762
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11712: LD_VAR 0 2
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: PPUSH
11721: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11725: LD_VAR 0 2
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PPUSH
11734: CALL_OW 65
// end ; 5 .. 7 :
11738: GO 11762
11740: LD_INT 5
11742: DOUBLE
11743: GREATEREQUAL
11744: IFFALSE 11752
11746: LD_INT 7
11748: DOUBLE
11749: LESSEQUAL
11750: IFTRUE 11754
11752: GO 11761
11754: POP
// StreamSibBomb ; end ;
11755: CALL 7943 0 0
11759: GO 11762
11761: POP
// end ;
11762: PPOPN 3
11764: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11765: LD_EXP 2
11769: IFFALSE 11777
11771: PUSH
11772: LD_EXP 52
11776: AND
11777: IFFALSE 11933
11779: GO 11781
11781: DISABLE
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11787: LD_ADDR_VAR 0 2
11791: PUSH
11792: LD_INT 81
11794: PUSH
11795: LD_OWVAR 2
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 21
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: ST_TO_ADDR
// if not tmp then
11841: LD_VAR 0 2
11845: NOT
11846: IFFALSE 11850
// exit ;
11848: GO 11933
// p := 0 ;
11850: LD_ADDR_VAR 0 3
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11858: LD_INT 35
11860: PPUSH
11861: CALL_OW 67
// p := p + 1 ;
11865: LD_ADDR_VAR 0 3
11869: PUSH
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 1
11877: PLUS
11878: ST_TO_ADDR
// for i in tmp do
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_VAR 0 2
11888: PUSH
11889: FOR_IN
11890: IFFALSE 11921
// if GetLives ( i ) < 1000 then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 256
11901: PUSH
11902: LD_INT 1000
11904: LESS
11905: IFFALSE 11919
// SetLives ( i , 1000 ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_INT 1000
11914: PPUSH
11915: CALL_OW 234
11919: GO 11889
11921: POP
11922: POP
// until p > 20 ;
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 20
11930: GREATER
11931: IFFALSE 11858
// end ;
11933: PPOPN 3
11935: END
// every 0 0$1 trigger StreamModeActive and sTime do
11936: LD_EXP 2
11940: IFFALSE 11948
11942: PUSH
11943: LD_EXP 53
11947: AND
11948: IFFALSE 11983
11950: GO 11952
11952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11953: LD_INT 28
11955: PPUSH
11956: LD_OWVAR 2
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11968: LD_INT 30
11970: PPUSH
11971: LD_OWVAR 2
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 322
// end ;
11983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11984: LD_EXP 2
11988: IFFALSE 11996
11990: PUSH
11991: LD_EXP 54
11995: AND
11996: IFFALSE 12117
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12005: LD_ADDR_VAR 0 2
12009: PUSH
12010: LD_INT 22
12012: PUSH
12013: LD_OWVAR 2
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 3
12034: PUSH
12035: LD_INT 23
12037: PUSH
12038: LD_INT 0
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: ST_TO_ADDR
// if not tmp then
12059: LD_VAR 0 2
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 12117
// for i in tmp do
12068: LD_ADDR_VAR 0 1
12072: PUSH
12073: LD_VAR 0 2
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12115
// begin if Crawls ( i ) then
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 318
12090: IFFALSE 12101
// ComWalk ( i ) ;
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 138
// SetClass ( i , 2 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_INT 2
12108: PPUSH
12109: CALL_OW 336
// end ;
12113: GO 12078
12115: POP
12116: POP
// end ;
12117: PPOPN 2
12119: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12120: LD_EXP 2
12124: IFFALSE 12132
12126: PUSH
12127: LD_EXP 55
12131: AND
12132: IFFALSE 12422
12134: GO 12136
12136: DISABLE
12137: LD_INT 0
12139: PPUSH
12140: PPUSH
12141: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12142: LD_OWVAR 2
12146: PPUSH
12147: LD_INT 9
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12160: LD_INT 9
12162: PPUSH
12163: LD_OWVAR 2
12167: PPUSH
12168: CALL_OW 343
// uc_side := 9 ;
12172: LD_ADDR_OWVAR 20
12176: PUSH
12177: LD_INT 9
12179: ST_TO_ADDR
// uc_nation := 2 ;
12180: LD_ADDR_OWVAR 21
12184: PUSH
12185: LD_INT 2
12187: ST_TO_ADDR
// hc_name := Dark Warrior ;
12188: LD_ADDR_OWVAR 26
12192: PUSH
12193: LD_STRING Dark Warrior
12195: ST_TO_ADDR
// hc_gallery :=  ;
12196: LD_ADDR_OWVAR 33
12200: PUSH
12201: LD_STRING 
12203: ST_TO_ADDR
// hc_noskilllimit := true ;
12204: LD_ADDR_OWVAR 76
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12212: LD_ADDR_OWVAR 31
12216: PUSH
12217: LD_INT 30
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 30
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: ST_TO_ADDR
// un := CreateHuman ;
12235: LD_ADDR_VAR 0 3
12239: PUSH
12240: CALL_OW 44
12244: ST_TO_ADDR
// hc_noskilllimit := false ;
12245: LD_ADDR_OWVAR 76
12249: PUSH
12250: LD_INT 0
12252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 51
// ToLua ( playRanger() ) ;
12265: LD_STRING playRanger()
12267: PPUSH
12268: CALL_OW 559
// p := 0 ;
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12280: LD_INT 35
12282: PPUSH
12283: CALL_OW 67
// p := p + 1 ;
12287: LD_ADDR_VAR 0 2
12291: PUSH
12292: LD_VAR 0 2
12296: PUSH
12297: LD_INT 1
12299: PLUS
12300: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12301: LD_VAR 0 3
12305: PPUSH
12306: CALL_OW 256
12310: PUSH
12311: LD_INT 1000
12313: LESS
12314: IFFALSE 12328
// SetLives ( un , 1000 ) ;
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1000
12323: PPUSH
12324: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 81
12335: PUSH
12336: LD_OWVAR 2
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 91
12347: PUSH
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: CALL_OW 74
12379: PPUSH
12380: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12384: LD_VAR 0 2
12388: PUSH
12389: LD_INT 80
12391: GREATER
12392: IFTRUE 12405
12394: PUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: CALL_OW 301
12404: OR
12405: IFFALSE 12280
// if un then
12407: LD_VAR 0 3
12411: IFFALSE 12422
// RemoveUnit ( un ) ;
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL_OW 64
// end ;
12422: PPOPN 3
12424: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12425: LD_EXP 56
12429: IFFALSE 12545
12431: GO 12433
12433: DISABLE
12434: LD_INT 0
12436: PPUSH
12437: PPUSH
12438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: LD_INT 81
12446: PUSH
12447: LD_OWVAR 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 21
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12475: LD_STRING playComputer()
12477: PPUSH
12478: CALL_OW 559
// if not tmp then
12482: LD_VAR 0 2
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12545
// for i in tmp do
12491: LD_ADDR_VAR 0 1
12495: PUSH
12496: LD_VAR 0 2
12500: PUSH
12501: FOR_IN
12502: IFFALSE 12543
// for j := 1 to 4 do
12504: LD_ADDR_VAR 0 3
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_INT 4
12516: PUSH
12517: FOR_TO
12518: IFFALSE 12539
// SetSkill ( i , j , 10 ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 10
12532: PPUSH
12533: CALL_OW 237
12537: GO 12517
12539: POP
12540: POP
12541: GO 12501
12543: POP
12544: POP
// end ;
12545: PPOPN 3
12547: END
// every 0 0$1 trigger s30 do var i , tmp ;
12548: LD_EXP 57
12552: IFFALSE 12621
12554: GO 12556
12556: DISABLE
12557: LD_INT 0
12559: PPUSH
12560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_OWVAR 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: ST_TO_ADDR
// if not tmp then
12583: LD_VAR 0 2
12587: NOT
12588: IFFALSE 12592
// exit ;
12590: GO 12621
// for i in tmp do
12592: LD_ADDR_VAR 0 1
12596: PUSH
12597: LD_VAR 0 2
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12619
// SetLives ( i , 300 ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: LD_INT 300
12612: PPUSH
12613: CALL_OW 234
12617: GO 12602
12619: POP
12620: POP
// end ;
12621: PPOPN 2
12623: END
// every 0 0$1 trigger s60 do var i , tmp ;
12624: LD_EXP 58
12628: IFFALSE 12697
12630: GO 12632
12632: DISABLE
12633: LD_INT 0
12635: PPUSH
12636: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12637: LD_ADDR_VAR 0 2
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_OWVAR 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: ST_TO_ADDR
// if not tmp then
12659: LD_VAR 0 2
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12697
// for i in tmp do
12668: LD_ADDR_VAR 0 1
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12695
// SetLives ( i , 600 ) ;
12681: LD_VAR 0 1
12685: PPUSH
12686: LD_INT 600
12688: PPUSH
12689: CALL_OW 234
12693: GO 12678
12695: POP
12696: POP
// end ;
12697: PPOPN 2
12699: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12700: LD_INT 0
12702: PPUSH
// case cmd of 301 :
12703: LD_VAR 0 1
12707: PUSH
12708: LD_INT 301
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12748
12716: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12717: LD_VAR 0 6
12721: PPUSH
12722: LD_VAR 0 7
12726: PPUSH
12727: LD_VAR 0 8
12731: PPUSH
12732: LD_VAR 0 4
12736: PPUSH
12737: LD_VAR 0 5
12741: PPUSH
12742: CALL 13961 0 5
12746: GO 12869
12748: LD_INT 302
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12793
12756: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12757: LD_VAR 0 6
12761: PPUSH
12762: LD_VAR 0 7
12766: PPUSH
12767: LD_VAR 0 8
12771: PPUSH
12772: LD_VAR 0 9
12776: PPUSH
12777: LD_VAR 0 4
12781: PPUSH
12782: LD_VAR 0 5
12786: PPUSH
12787: CALL 14052 0 6
12791: GO 12869
12793: LD_INT 303
12795: DOUBLE
12796: EQUAL
12797: IFTRUE 12801
12799: GO 12838
12801: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12802: LD_VAR 0 6
12806: PPUSH
12807: LD_VAR 0 7
12811: PPUSH
12812: LD_VAR 0 8
12816: PPUSH
12817: LD_VAR 0 9
12821: PPUSH
12822: LD_VAR 0 4
12826: PPUSH
12827: LD_VAR 0 5
12831: PPUSH
12832: CALL 12874 0 6
12836: GO 12869
12838: LD_INT 304
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12868
12846: POP
// hHackTeleport ( unit , x , y ) ; end ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_VAR 0 4
12856: PPUSH
12857: LD_VAR 0 5
12861: PPUSH
12862: CALL 14645 0 3
12866: GO 12869
12868: POP
// end ;
12869: LD_VAR 0 12
12873: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12874: LD_INT 0
12876: PPUSH
12877: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12878: LD_VAR 0 1
12882: PUSH
12883: LD_INT 1
12885: LESS
12886: IFTRUE 12898
12888: PUSH
12889: LD_VAR 0 1
12893: PUSH
12894: LD_INT 3
12896: GREATER
12897: OR
12898: IFTRUE 12916
12900: PUSH
12901: LD_VAR 0 5
12905: PPUSH
12906: LD_VAR 0 6
12910: PPUSH
12911: CALL_OW 428
12915: OR
12916: IFFALSE 12920
// exit ;
12918: GO 13648
// uc_side := your_side ;
12920: LD_ADDR_OWVAR 20
12924: PUSH
12925: LD_OWVAR 2
12929: ST_TO_ADDR
// uc_nation := nation ;
12930: LD_ADDR_OWVAR 21
12934: PUSH
12935: LD_VAR 0 1
12939: ST_TO_ADDR
// bc_level = 1 ;
12940: LD_ADDR_OWVAR 43
12944: PUSH
12945: LD_INT 1
12947: ST_TO_ADDR
// case btype of 1 :
12948: LD_VAR 0 2
12952: PUSH
12953: LD_INT 1
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 12972
12961: POP
// bc_type := b_depot ; 2 :
12962: LD_ADDR_OWVAR 42
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
12970: GO 13592
12972: LD_INT 2
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 12991
12980: POP
// bc_type := b_warehouse ; 3 :
12981: LD_ADDR_OWVAR 42
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
12989: GO 13592
12991: LD_INT 3
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 12999
12997: GO 13010
12999: POP
// bc_type := b_lab ; 4 .. 9 :
13000: LD_ADDR_OWVAR 42
13004: PUSH
13005: LD_INT 6
13007: ST_TO_ADDR
13008: GO 13592
13010: LD_INT 4
13012: DOUBLE
13013: GREATEREQUAL
13014: IFFALSE 13022
13016: LD_INT 9
13018: DOUBLE
13019: LESSEQUAL
13020: IFTRUE 13024
13022: GO 13084
13024: POP
// begin bc_type := b_lab_half ;
13025: LD_ADDR_OWVAR 42
13029: PUSH
13030: LD_INT 7
13032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13033: LD_ADDR_OWVAR 44
13037: PUSH
13038: LD_INT 10
13040: PUSH
13041: LD_INT 11
13043: PUSH
13044: LD_INT 12
13046: PUSH
13047: LD_INT 15
13049: PUSH
13050: LD_INT 14
13052: PUSH
13053: LD_INT 13
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: LD_VAR 0 2
13068: PUSH
13069: LD_INT 3
13071: MINUS
13072: ARRAY
13073: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13074: LD_ADDR_OWVAR 45
13078: PUSH
13079: LD_INT 9
13081: ST_TO_ADDR
// end ; 10 .. 13 :
13082: GO 13592
13084: LD_INT 10
13086: DOUBLE
13087: GREATEREQUAL
13088: IFFALSE 13096
13090: LD_INT 13
13092: DOUBLE
13093: LESSEQUAL
13094: IFTRUE 13098
13096: GO 13175
13098: POP
// begin bc_type := b_lab_full ;
13099: LD_ADDR_OWVAR 42
13103: PUSH
13104: LD_INT 8
13106: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13107: LD_ADDR_OWVAR 44
13111: PUSH
13112: LD_INT 10
13114: PUSH
13115: LD_INT 12
13117: PUSH
13118: LD_INT 14
13120: PUSH
13121: LD_INT 13
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: LD_VAR 0 2
13134: PUSH
13135: LD_INT 9
13137: MINUS
13138: ARRAY
13139: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13140: LD_ADDR_OWVAR 45
13144: PUSH
13145: LD_INT 11
13147: PUSH
13148: LD_INT 15
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 15
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_VAR 0 2
13167: PUSH
13168: LD_INT 9
13170: MINUS
13171: ARRAY
13172: ST_TO_ADDR
// end ; 14 :
13173: GO 13592
13175: LD_INT 14
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13194
13183: POP
// bc_type := b_workshop ; 15 :
13184: LD_ADDR_OWVAR 42
13188: PUSH
13189: LD_INT 2
13191: ST_TO_ADDR
13192: GO 13592
13194: LD_INT 15
13196: DOUBLE
13197: EQUAL
13198: IFTRUE 13202
13200: GO 13213
13202: POP
// bc_type := b_factory ; 16 :
13203: LD_ADDR_OWVAR 42
13207: PUSH
13208: LD_INT 3
13210: ST_TO_ADDR
13211: GO 13592
13213: LD_INT 16
13215: DOUBLE
13216: EQUAL
13217: IFTRUE 13221
13219: GO 13232
13221: POP
// bc_type := b_ext_gun ; 17 :
13222: LD_ADDR_OWVAR 42
13226: PUSH
13227: LD_INT 17
13229: ST_TO_ADDR
13230: GO 13592
13232: LD_INT 17
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13268
13240: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13241: LD_ADDR_OWVAR 42
13245: PUSH
13246: LD_INT 19
13248: PUSH
13249: LD_INT 23
13251: PUSH
13252: LD_INT 19
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_VAR 0 1
13264: ARRAY
13265: ST_TO_ADDR
13266: GO 13592
13268: LD_INT 18
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 13287
13276: POP
// bc_type := b_ext_radar ; 19 :
13277: LD_ADDR_OWVAR 42
13281: PUSH
13282: LD_INT 20
13284: ST_TO_ADDR
13285: GO 13592
13287: LD_INT 19
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13306
13295: POP
// bc_type := b_ext_radio ; 20 :
13296: LD_ADDR_OWVAR 42
13300: PUSH
13301: LD_INT 22
13303: ST_TO_ADDR
13304: GO 13592
13306: LD_INT 20
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13325
13314: POP
// bc_type := b_ext_siberium ; 21 :
13315: LD_ADDR_OWVAR 42
13319: PUSH
13320: LD_INT 21
13322: ST_TO_ADDR
13323: GO 13592
13325: LD_INT 21
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13344
13333: POP
// bc_type := b_ext_computer ; 22 :
13334: LD_ADDR_OWVAR 42
13338: PUSH
13339: LD_INT 24
13341: ST_TO_ADDR
13342: GO 13592
13344: LD_INT 22
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13363
13352: POP
// bc_type := b_ext_track ; 23 :
13353: LD_ADDR_OWVAR 42
13357: PUSH
13358: LD_INT 16
13360: ST_TO_ADDR
13361: GO 13592
13363: LD_INT 23
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13382
13371: POP
// bc_type := b_ext_laser ; 24 :
13372: LD_ADDR_OWVAR 42
13376: PUSH
13377: LD_INT 25
13379: ST_TO_ADDR
13380: GO 13592
13382: LD_INT 24
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13401
13390: POP
// bc_type := b_control_tower ; 25 :
13391: LD_ADDR_OWVAR 42
13395: PUSH
13396: LD_INT 36
13398: ST_TO_ADDR
13399: GO 13592
13401: LD_INT 25
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13420
13409: POP
// bc_type := b_breastwork ; 26 :
13410: LD_ADDR_OWVAR 42
13414: PUSH
13415: LD_INT 31
13417: ST_TO_ADDR
13418: GO 13592
13420: LD_INT 26
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13439
13428: POP
// bc_type := b_bunker ; 27 :
13429: LD_ADDR_OWVAR 42
13433: PUSH
13434: LD_INT 32
13436: ST_TO_ADDR
13437: GO 13592
13439: LD_INT 27
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13458
13447: POP
// bc_type := b_turret ; 28 :
13448: LD_ADDR_OWVAR 42
13452: PUSH
13453: LD_INT 33
13455: ST_TO_ADDR
13456: GO 13592
13458: LD_INT 28
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13477
13466: POP
// bc_type := b_armoury ; 29 :
13467: LD_ADDR_OWVAR 42
13471: PUSH
13472: LD_INT 4
13474: ST_TO_ADDR
13475: GO 13592
13477: LD_INT 29
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13496
13485: POP
// bc_type := b_barracks ; 30 :
13486: LD_ADDR_OWVAR 42
13490: PUSH
13491: LD_INT 5
13493: ST_TO_ADDR
13494: GO 13592
13496: LD_INT 30
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13515
13504: POP
// bc_type := b_solar_power ; 31 :
13505: LD_ADDR_OWVAR 42
13509: PUSH
13510: LD_INT 27
13512: ST_TO_ADDR
13513: GO 13592
13515: LD_INT 31
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13534
13523: POP
// bc_type := b_oil_power ; 32 :
13524: LD_ADDR_OWVAR 42
13528: PUSH
13529: LD_INT 26
13531: ST_TO_ADDR
13532: GO 13592
13534: LD_INT 32
13536: DOUBLE
13537: EQUAL
13538: IFTRUE 13542
13540: GO 13553
13542: POP
// bc_type := b_siberite_power ; 33 :
13543: LD_ADDR_OWVAR 42
13547: PUSH
13548: LD_INT 28
13550: ST_TO_ADDR
13551: GO 13592
13553: LD_INT 33
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13561
13559: GO 13572
13561: POP
// bc_type := b_oil_mine ; 34 :
13562: LD_ADDR_OWVAR 42
13566: PUSH
13567: LD_INT 29
13569: ST_TO_ADDR
13570: GO 13592
13572: LD_INT 34
13574: DOUBLE
13575: EQUAL
13576: IFTRUE 13580
13578: GO 13591
13580: POP
// bc_type := b_siberite_mine ; end ;
13581: LD_ADDR_OWVAR 42
13585: PUSH
13586: LD_INT 30
13588: ST_TO_ADDR
13589: GO 13592
13591: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13592: LD_ADDR_VAR 0 8
13596: PUSH
13597: LD_VAR 0 5
13601: PPUSH
13602: LD_VAR 0 6
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: CALL_OW 47
13616: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13617: LD_OWVAR 42
13621: PUSH
13622: LD_INT 32
13624: PUSH
13625: LD_INT 33
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: IN
13632: IFFALSE 13648
// PlaceWeaponTurret ( b , weapon ) ;
13634: LD_VAR 0 8
13638: PPUSH
13639: LD_VAR 0 4
13643: PPUSH
13644: CALL_OW 431
// end ;
13648: LD_VAR 0 7
13652: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13653: LD_INT 0
13655: PPUSH
13656: PPUSH
13657: PPUSH
13658: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13659: LD_ADDR_VAR 0 4
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_OWVAR 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 30
13681: PUSH
13682: LD_INT 0
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 30
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PPUSH
13708: CALL_OW 69
13712: ST_TO_ADDR
// if not tmp then
13713: LD_VAR 0 4
13717: NOT
13718: IFFALSE 13722
// exit ;
13720: GO 13781
// for i in tmp do
13722: LD_ADDR_VAR 0 2
13726: PUSH
13727: LD_VAR 0 4
13731: PUSH
13732: FOR_IN
13733: IFFALSE 13779
// for j = 1 to 3 do
13735: LD_ADDR_VAR 0 3
13739: PUSH
13740: DOUBLE
13741: LD_INT 1
13743: DEC
13744: ST_TO_ADDR
13745: LD_INT 3
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13775
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13751: LD_VAR 0 2
13755: PPUSH
13756: CALL_OW 274
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 99999
13768: PPUSH
13769: CALL_OW 277
13773: GO 13748
13775: POP
13776: POP
13777: GO 13732
13779: POP
13780: POP
// end ;
13781: LD_VAR 0 1
13785: RET
// export function hHackSetLevel10 ; var i , j ; begin
13786: LD_INT 0
13788: PPUSH
13789: PPUSH
13790: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_INT 21
13798: PUSH
13799: LD_INT 1
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: FOR_IN
13812: IFFALSE 13864
// if IsSelected ( i ) then
13814: LD_VAR 0 2
13818: PPUSH
13819: CALL_OW 306
13823: IFFALSE 13862
// begin for j := 1 to 4 do
13825: LD_ADDR_VAR 0 3
13829: PUSH
13830: DOUBLE
13831: LD_INT 1
13833: DEC
13834: ST_TO_ADDR
13835: LD_INT 4
13837: PUSH
13838: FOR_TO
13839: IFFALSE 13860
// SetSkill ( i , j , 10 ) ;
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 237
13858: GO 13838
13860: POP
13861: POP
// end ;
13862: GO 13811
13864: POP
13865: POP
// end ;
13866: LD_VAR 0 1
13870: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
13875: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13876: LD_ADDR_VAR 0 2
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_OWVAR 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PPUSH
13907: CALL_OW 69
13911: PUSH
13912: FOR_IN
13913: IFFALSE 13954
// begin for j := 1 to 4 do
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_INT 4
13927: PUSH
13928: FOR_TO
13929: IFFALSE 13950
// SetSkill ( i , j , 10 ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: LD_INT 10
13943: PPUSH
13944: CALL_OW 237
13948: GO 13928
13950: POP
13951: POP
// end ;
13952: GO 13912
13954: POP
13955: POP
// end ;
13956: LD_VAR 0 1
13960: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13961: LD_INT 0
13963: PPUSH
// uc_side := your_side ;
13964: LD_ADDR_OWVAR 20
13968: PUSH
13969: LD_OWVAR 2
13973: ST_TO_ADDR
// uc_nation := nation ;
13974: LD_ADDR_OWVAR 21
13978: PUSH
13979: LD_VAR 0 1
13983: ST_TO_ADDR
// InitHc ;
13984: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13988: LD_INT 0
13990: PPUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14005: LD_VAR 0 4
14009: PPUSH
14010: LD_VAR 0 5
14014: PPUSH
14015: CALL_OW 428
14019: PUSH
14020: LD_INT 0
14022: EQUAL
14023: IFFALSE 14047
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14025: CALL_OW 44
14029: PPUSH
14030: LD_VAR 0 4
14034: PPUSH
14035: LD_VAR 0 5
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 48
// end ;
14047: LD_VAR 0 6
14051: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14052: LD_INT 0
14054: PPUSH
14055: PPUSH
// uc_side := your_side ;
14056: LD_ADDR_OWVAR 20
14060: PUSH
14061: LD_OWVAR 2
14065: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14066: LD_VAR 0 1
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: LD_INT 5
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: IN
14093: IFFALSE 14105
// uc_nation := nation_american else
14095: LD_ADDR_OWVAR 21
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
14103: GO 14148
// if chassis in [ 11 , 12 , 13 , 14 ] then
14105: LD_VAR 0 1
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 13
14118: PUSH
14119: LD_INT 14
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: IN
14128: IFFALSE 14140
// uc_nation := nation_arabian else
14130: LD_ADDR_OWVAR 21
14134: PUSH
14135: LD_INT 2
14137: ST_TO_ADDR
14138: GO 14148
// uc_nation := nation_russian ;
14140: LD_ADDR_OWVAR 21
14144: PUSH
14145: LD_INT 3
14147: ST_TO_ADDR
// vc_chassis := chassis ;
14148: LD_ADDR_OWVAR 37
14152: PUSH
14153: LD_VAR 0 1
14157: ST_TO_ADDR
// vc_engine := engine ;
14158: LD_ADDR_OWVAR 39
14162: PUSH
14163: LD_VAR 0 2
14167: ST_TO_ADDR
// vc_control := control ;
14168: LD_ADDR_OWVAR 38
14172: PUSH
14173: LD_VAR 0 3
14177: ST_TO_ADDR
// vc_weapon := weapon ;
14178: LD_ADDR_OWVAR 40
14182: PUSH
14183: LD_VAR 0 4
14187: ST_TO_ADDR
// un := CreateVehicle ;
14188: LD_ADDR_VAR 0 8
14192: PUSH
14193: CALL_OW 45
14197: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14198: LD_VAR 0 8
14202: PPUSH
14203: LD_INT 0
14205: PPUSH
14206: LD_INT 5
14208: PPUSH
14209: CALL_OW 12
14213: PPUSH
14214: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14218: LD_VAR 0 8
14222: PPUSH
14223: LD_VAR 0 5
14227: PPUSH
14228: LD_VAR 0 6
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 48
// end ;
14240: LD_VAR 0 7
14244: RET
// export hInvincible ; every 1 do
14245: GO 14247
14247: DISABLE
// hInvincible := [ ] ;
14248: LD_ADDR_EXP 59
14252: PUSH
14253: EMPTY
14254: ST_TO_ADDR
14255: END
// every 10 do var i ;
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
// begin enable ;
14262: ENABLE
// if not hInvincible then
14263: LD_EXP 59
14267: NOT
14268: IFFALSE 14272
// exit ;
14270: GO 14316
// for i in hInvincible do
14272: LD_ADDR_VAR 0 1
14276: PUSH
14277: LD_EXP 59
14281: PUSH
14282: FOR_IN
14283: IFFALSE 14314
// if GetLives ( i ) < 1000 then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 256
14294: PUSH
14295: LD_INT 1000
14297: LESS
14298: IFFALSE 14312
// SetLives ( i , 1000 ) ;
14300: LD_VAR 0 1
14304: PPUSH
14305: LD_INT 1000
14307: PPUSH
14308: CALL_OW 234
14312: GO 14282
14314: POP
14315: POP
// end ;
14316: PPOPN 1
14318: END
// export function hHackInvincible ; var i ; begin
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: LD_INT 21
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PUSH
14361: FOR_IN
14362: IFFALSE 14423
// if IsSelected ( i ) then
14364: LD_VAR 0 2
14368: PPUSH
14369: CALL_OW 306
14373: IFFALSE 14421
// begin if i in hInvincible then
14375: LD_VAR 0 2
14379: PUSH
14380: LD_EXP 59
14384: IN
14385: IFFALSE 14405
// hInvincible := hInvincible diff i else
14387: LD_ADDR_EXP 59
14391: PUSH
14392: LD_EXP 59
14396: PUSH
14397: LD_VAR 0 2
14401: DIFF
14402: ST_TO_ADDR
14403: GO 14421
// hInvincible := hInvincible union i ;
14405: LD_ADDR_EXP 59
14409: PUSH
14410: LD_EXP 59
14414: PUSH
14415: LD_VAR 0 2
14419: UNION
14420: ST_TO_ADDR
// end ;
14421: GO 14361
14423: POP
14424: POP
// end ;
14425: LD_VAR 0 1
14429: RET
// export function hHackInvisible ; var i , j ; begin
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
14434: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: PUSH
14455: FOR_IN
14456: IFFALSE 14480
// if IsSelected ( i ) then
14458: LD_VAR 0 2
14462: PPUSH
14463: CALL_OW 306
14467: IFFALSE 14478
// ComForceInvisible ( i ) ;
14469: LD_VAR 0 2
14473: PPUSH
14474: CALL_OW 496
14478: GO 14455
14480: POP
14481: POP
// end ;
14482: LD_VAR 0 1
14486: RET
// export function hHackChangeYourSide ; begin
14487: LD_INT 0
14489: PPUSH
// if your_side = 8 then
14490: LD_OWVAR 2
14494: PUSH
14495: LD_INT 8
14497: EQUAL
14498: IFFALSE 14510
// your_side := 0 else
14500: LD_ADDR_OWVAR 2
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
14508: GO 14524
// your_side := your_side + 1 ;
14510: LD_ADDR_OWVAR 2
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: LD_INT 1
14522: PLUS
14523: ST_TO_ADDR
// end ;
14524: LD_VAR 0 1
14528: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
// for i in all_units do
14534: LD_ADDR_VAR 0 2
14538: PUSH
14539: LD_OWVAR 3
14543: PUSH
14544: FOR_IN
14545: IFFALSE 14623
// if IsSelected ( i ) then
14547: LD_VAR 0 2
14551: PPUSH
14552: CALL_OW 306
14556: IFFALSE 14621
// begin j := GetSide ( i ) ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: CALL_OW 255
14572: ST_TO_ADDR
// if j = 8 then
14573: LD_VAR 0 3
14577: PUSH
14578: LD_INT 8
14580: EQUAL
14581: IFFALSE 14593
// j := 0 else
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
14591: GO 14607
// j := j + 1 ;
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_VAR 0 3
14602: PUSH
14603: LD_INT 1
14605: PLUS
14606: ST_TO_ADDR
// SetSide ( i , j ) ;
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 235
// end ;
14621: GO 14544
14623: POP
14624: POP
// end ;
14625: LD_VAR 0 1
14629: RET
// export function hHackFog ; begin
14630: LD_INT 0
14632: PPUSH
// FogOff ( true ) ;
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 344
// end ;
14640: LD_VAR 0 1
14644: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14645: LD_INT 0
14647: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 483
// CenterOnXY ( x , y ) ;
14673: LD_VAR 0 2
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: CALL_OW 84
// end ;
14687: LD_VAR 0 4
14691: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14696: LD_VAR 0 1
14700: NOT
14701: IFTRUE 14720
14703: PUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: CALL_OW 488
14718: NOT
14719: OR
14720: IFTRUE 14755
14722: PUSH
14723: LD_VAR 0 1
14727: PPUSH
14728: CALL_OW 266
14732: PUSH
14733: LD_INT 3
14735: NONEQUAL
14736: IFFALSE 14754
14738: PUSH
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 247
14748: PUSH
14749: LD_INT 1
14751: EQUAL
14752: NOT
14753: AND
14754: OR
14755: IFFALSE 14759
// exit ;
14757: GO 15041
// if GetType ( factory ) = unit_human then
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 247
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: IFFALSE 14789
// factory := IsInUnit ( factory ) ;
14774: LD_ADDR_VAR 0 1
14778: PUSH
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 310
14788: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 266
14798: PUSH
14799: LD_INT 3
14801: NONEQUAL
14802: IFFALSE 14806
// exit ;
14804: GO 15041
// for i := 1 to Count ( factoryWaypoints ) do
14806: LD_ADDR_VAR 0 5
14810: PUSH
14811: DOUBLE
14812: LD_INT 1
14814: DEC
14815: ST_TO_ADDR
14816: LD_EXP 60
14820: PPUSH
14821: CALL 23936 0 1
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14989
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14829: LD_VAR 0 2
14833: PPUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: CALL_OW 428
14843: PUSH
14844: LD_EXP 60
14848: PUSH
14849: LD_VAR 0 5
14853: ARRAY
14854: PUSH
14855: LD_INT 2
14857: ARRAY
14858: EQUAL
14859: IFFALSE 14891
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14861: LD_ADDR_EXP 60
14865: PUSH
14866: LD_EXP 60
14870: PPUSH
14871: LD_VAR 0 5
14875: PPUSH
14876: CALL_OW 3
14880: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14881: CALL 15046 0 0
// exit ;
14885: POP
14886: POP
14887: GO 15041
// end else
14889: GO 14987
// if factory = factoryWaypoints [ i ] [ 2 ] then
14891: LD_VAR 0 1
14895: PUSH
14896: LD_EXP 60
14900: PUSH
14901: LD_VAR 0 5
14905: ARRAY
14906: PUSH
14907: LD_INT 2
14909: ARRAY
14910: EQUAL
14911: IFFALSE 14987
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14913: LD_ADDR_EXP 60
14917: PUSH
14918: LD_EXP 60
14922: PPUSH
14923: LD_VAR 0 5
14927: PPUSH
14928: CALL_OW 3
14932: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14933: LD_ADDR_EXP 60
14937: PUSH
14938: LD_EXP 60
14942: PPUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_VAR 0 1
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: LD_VAR 0 3
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL 59868 0 2
14978: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14979: CALL 15046 0 0
// exit ;
14983: POP
14984: POP
14985: GO 15041
// end ; end ;
14987: GO 14826
14989: POP
14990: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14991: LD_ADDR_EXP 60
14995: PUSH
14996: LD_EXP 60
15000: PPUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 255
15010: PUSH
15011: LD_VAR 0 1
15015: PUSH
15016: LD_VAR 0 2
15020: PUSH
15021: LD_VAR 0 3
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL 59868 0 2
15036: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15037: CALL 15046 0 0
// end ;
15041: LD_VAR 0 4
15045: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15046: LD_INT 0
15048: PPUSH
15049: PPUSH
15050: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15051: LD_STRING resetFactoryWaypoint();
15053: PPUSH
15054: CALL_OW 559
// if factoryWaypoints then
15058: LD_EXP 60
15062: IFFALSE 15183
// begin list := factoryWaypoints ;
15064: LD_ADDR_VAR 0 3
15068: PUSH
15069: LD_EXP 60
15073: ST_TO_ADDR
// for i := 1 to list do
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: DOUBLE
15080: LD_INT 1
15082: DEC
15083: ST_TO_ADDR
15084: LD_VAR 0 3
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15181
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15092: LD_STRING setFactoryWaypointXY(
15094: PUSH
15095: LD_VAR 0 3
15099: PUSH
15100: LD_VAR 0 2
15104: ARRAY
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: STR
15110: PUSH
15111: LD_STRING ,
15113: STR
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 2
15124: ARRAY
15125: PUSH
15126: LD_INT 2
15128: ARRAY
15129: STR
15130: PUSH
15131: LD_STRING ,
15133: STR
15134: PUSH
15135: LD_VAR 0 3
15139: PUSH
15140: LD_VAR 0 2
15144: ARRAY
15145: PUSH
15146: LD_INT 3
15148: ARRAY
15149: STR
15150: PUSH
15151: LD_STRING ,
15153: STR
15154: PUSH
15155: LD_VAR 0 3
15159: PUSH
15160: LD_VAR 0 2
15164: ARRAY
15165: PUSH
15166: LD_INT 4
15168: ARRAY
15169: STR
15170: PUSH
15171: LD_STRING )
15173: STR
15174: PPUSH
15175: CALL_OW 559
15179: GO 15089
15181: POP
15182: POP
// end ; end ;
15183: LD_VAR 0 1
15187: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15188: LD_INT 0
15190: PPUSH
// if HexInfo ( x , y ) = warehouse then
15191: LD_VAR 0 2
15195: PPUSH
15196: LD_VAR 0 3
15200: PPUSH
15201: CALL_OW 428
15205: PUSH
15206: LD_VAR 0 1
15210: EQUAL
15211: IFFALSE 15238
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15213: LD_ADDR_EXP 62
15217: PUSH
15218: LD_EXP 62
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: LD_INT 0
15230: PPUSH
15231: CALL_OW 1
15235: ST_TO_ADDR
15236: GO 15289
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15238: LD_ADDR_EXP 62
15242: PUSH
15243: LD_EXP 62
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 255
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: LD_VAR 0 2
15272: PUSH
15273: LD_VAR 0 3
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 1
15288: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15289: CALL 15298 0 0
// end ;
15293: LD_VAR 0 4
15297: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
15302: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15303: LD_STRING resetWarehouseGatheringPoints();
15305: PPUSH
15306: CALL_OW 559
// if warehouseGatheringPoints then
15310: LD_EXP 62
15314: IFFALSE 15440
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_EXP 62
15325: PPUSH
15326: CALL 63802 0 1
15330: ST_TO_ADDR
// for i := 1 to list do
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: DOUBLE
15337: LD_INT 1
15339: DEC
15340: ST_TO_ADDR
15341: LD_VAR 0 3
15345: PUSH
15346: FOR_TO
15347: IFFALSE 15438
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15349: LD_STRING setWarehouseGatheringPointXY(
15351: PUSH
15352: LD_VAR 0 3
15356: PUSH
15357: LD_VAR 0 2
15361: ARRAY
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: STR
15367: PUSH
15368: LD_STRING ,
15370: STR
15371: PUSH
15372: LD_VAR 0 3
15376: PUSH
15377: LD_VAR 0 2
15381: ARRAY
15382: PUSH
15383: LD_INT 2
15385: ARRAY
15386: STR
15387: PUSH
15388: LD_STRING ,
15390: STR
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_VAR 0 2
15401: ARRAY
15402: PUSH
15403: LD_INT 3
15405: ARRAY
15406: STR
15407: PUSH
15408: LD_STRING ,
15410: STR
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: LD_VAR 0 2
15421: ARRAY
15422: PUSH
15423: LD_INT 4
15425: ARRAY
15426: STR
15427: PUSH
15428: LD_STRING )
15430: STR
15431: PPUSH
15432: CALL_OW 559
15436: GO 15346
15438: POP
15439: POP
// end ; end ;
15440: LD_VAR 0 1
15444: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15445: LD_EXP 62
15449: IFFALSE 16144
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// begin enable ;
15465: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: LD_EXP 62
15475: PPUSH
15476: CALL 63802 0 1
15480: ST_TO_ADDR
// if not list then
15481: LD_VAR 0 3
15485: NOT
15486: IFFALSE 15490
// exit ;
15488: GO 16144
// for i := 1 to list do
15490: LD_ADDR_VAR 0 1
15494: PUSH
15495: DOUBLE
15496: LD_INT 1
15498: DEC
15499: ST_TO_ADDR
15500: LD_VAR 0 3
15504: PUSH
15505: FOR_TO
15506: IFFALSE 16142
// begin depot := list [ i ] [ 2 ] ;
15508: LD_ADDR_VAR 0 8
15512: PUSH
15513: LD_VAR 0 3
15517: PUSH
15518: LD_VAR 0 1
15522: ARRAY
15523: PUSH
15524: LD_INT 2
15526: ARRAY
15527: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 3
15537: PUSH
15538: LD_VAR 0 1
15542: ARRAY
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15548: LD_VAR 0 8
15552: PPUSH
15553: CALL_OW 301
15557: IFTRUE 15576
15559: PUSH
15560: LD_VAR 0 5
15564: PUSH
15565: LD_VAR 0 8
15569: PPUSH
15570: CALL_OW 255
15574: NONEQUAL
15575: OR
15576: IFFALSE 15605
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15578: LD_ADDR_EXP 62
15582: PUSH
15583: LD_EXP 62
15587: PPUSH
15588: LD_VAR 0 8
15592: PPUSH
15593: LD_INT 0
15595: PPUSH
15596: CALL_OW 1
15600: ST_TO_ADDR
// exit ;
15601: POP
15602: POP
15603: GO 16144
// end ; x := list [ i ] [ 3 ] ;
15605: LD_ADDR_VAR 0 6
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: ARRAY
15620: PUSH
15621: LD_INT 3
15623: ARRAY
15624: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15625: LD_ADDR_VAR 0 7
15629: PUSH
15630: LD_VAR 0 3
15634: PUSH
15635: LD_VAR 0 1
15639: ARRAY
15640: PUSH
15641: LD_INT 4
15643: ARRAY
15644: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15645: LD_ADDR_VAR 0 9
15649: PUSH
15650: LD_VAR 0 6
15654: PPUSH
15655: LD_VAR 0 7
15659: PPUSH
15660: LD_INT 16
15662: PPUSH
15663: CALL 62376 0 3
15667: ST_TO_ADDR
// if not cratesNearbyPoint then
15668: LD_VAR 0 9
15672: NOT
15673: IFFALSE 15679
// exit ;
15675: POP
15676: POP
15677: GO 16144
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15679: LD_ADDR_VAR 0 4
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_VAR 0 5
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 3
15698: PUSH
15699: LD_INT 60
15701: PUSH
15702: EMPTY
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 91
15711: PUSH
15712: LD_VAR 0 8
15716: PUSH
15717: LD_INT 6
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: PUSH
15764: LD_VAR 0 8
15768: PPUSH
15769: CALL_OW 313
15773: PPUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 60
15779: PUSH
15780: EMPTY
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 25
15792: PUSH
15793: LD_INT 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 16
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 72
15823: UNION
15824: ST_TO_ADDR
// if tmp then
15825: LD_VAR 0 4
15829: IFFALSE 15909
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15831: LD_ADDR_VAR 0 4
15835: PUSH
15836: LD_VAR 0 4
15840: PPUSH
15841: LD_INT 3
15843: PPUSH
15844: CALL 60183 0 2
15848: ST_TO_ADDR
// for j in tmp do
15849: LD_ADDR_VAR 0 2
15853: PUSH
15854: LD_VAR 0 4
15858: PUSH
15859: FOR_IN
15860: IFFALSE 15903
// begin if IsInUnit ( j ) then
15862: LD_VAR 0 2
15866: PPUSH
15867: CALL_OW 310
15871: IFFALSE 15882
// ComExit ( j ) ;
15873: LD_VAR 0 2
15877: PPUSH
15878: CALL 60266 0 1
// AddComCollect ( j , x , y ) ;
15882: LD_VAR 0 2
15886: PPUSH
15887: LD_VAR 0 6
15891: PPUSH
15892: LD_VAR 0 7
15896: PPUSH
15897: CALL_OW 177
// end ;
15901: GO 15859
15903: POP
15904: POP
// exit ;
15905: POP
15906: POP
15907: GO 16144
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15909: LD_ADDR_VAR 0 4
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_VAR 0 5
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 91
15928: PUSH
15929: LD_VAR 0 8
15933: PUSH
15934: LD_INT 8
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 34
15947: PUSH
15948: LD_INT 12
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 34
15957: PUSH
15958: LD_INT 51
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 34
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 34
15977: PUSH
15978: LD_INT 89
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if tmp then
16002: LD_VAR 0 4
16006: IFFALSE 16140
// begin for j in tmp do
16008: LD_ADDR_VAR 0 2
16012: PUSH
16013: LD_VAR 0 4
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16138
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16021: LD_VAR 0 2
16025: PPUSH
16026: CALL_OW 262
16030: PUSH
16031: LD_INT 3
16033: EQUAL
16034: IFTRUE 16051
16036: PUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 261
16046: PUSH
16047: LD_INT 20
16049: GREATER
16050: OR
16051: IFFALSE 16065
16053: PUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 314
16063: NOT
16064: AND
16065: IFFALSE 16095
16067: PUSH
16068: LD_VAR 0 2
16072: PPUSH
16073: CALL_OW 263
16077: PUSH
16078: LD_INT 1
16080: NONEQUAL
16081: IFTRUE 16094
16083: PUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 311
16093: OR
16094: AND
16095: IFFALSE 16136
// begin ComCollect ( j , x , y ) ;
16097: LD_VAR 0 2
16101: PPUSH
16102: LD_VAR 0 6
16106: PPUSH
16107: LD_VAR 0 7
16111: PPUSH
16112: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16116: LD_VAR 0 2
16120: PPUSH
16121: LD_VAR 0 8
16125: PPUSH
16126: CALL_OW 172
// exit ;
16130: POP
16131: POP
16132: POP
16133: POP
16134: GO 16144
// end ;
16136: GO 16018
16138: POP
16139: POP
// end ; end ;
16140: GO 15505
16142: POP
16143: POP
// end ; end_of_file
16144: PPOPN 9
16146: END
// export function SOS_UnitDestroyed ( un ) ; begin
16147: LD_INT 0
16149: PPUSH
// ComRadiation ( un ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL 17236 0 1
// end ;
16159: LD_VAR 0 2
16163: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16164: LD_INT 0
16166: PPUSH
// ComRadiation ( un ) ;
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL 17236 0 1
// end ;
16176: LD_VAR 0 2
16180: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16181: LD_INT 0
16183: PPUSH
// end ;
16184: LD_VAR 0 4
16188: RET
// export function SOS_Command ( cmd ) ; begin
16189: LD_INT 0
16191: PPUSH
// end ;
16192: LD_VAR 0 2
16196: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16197: LD_INT 0
16199: PPUSH
// end ;
16200: LD_VAR 0 6
16204: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16205: LD_INT 0
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
// if not vehicle or not factory then
16211: LD_VAR 0 1
16215: NOT
16216: IFTRUE 16225
16218: PUSH
16219: LD_VAR 0 2
16223: NOT
16224: OR
16225: IFFALSE 16229
// exit ;
16227: GO 16811
// if not factoryWaypoints then
16229: LD_EXP 60
16233: NOT
16234: IFFALSE 16238
// exit ;
16236: GO 16811
// for i := 1 to Count ( factoryWaypoints ) do
16238: LD_ADDR_VAR 0 4
16242: PUSH
16243: DOUBLE
16244: LD_INT 1
16246: DEC
16247: ST_TO_ADDR
16248: LD_EXP 60
16252: PPUSH
16253: CALL 23936 0 1
16257: PUSH
16258: FOR_TO
16259: IFFALSE 16809
// if factoryWaypoints [ i ] [ 2 ] = factory then
16261: LD_EXP 60
16265: PUSH
16266: LD_VAR 0 4
16270: ARRAY
16271: PUSH
16272: LD_INT 2
16274: ARRAY
16275: PUSH
16276: LD_VAR 0 2
16280: EQUAL
16281: IFFALSE 16807
// begin if GetControl ( vehicle ) = control_manual then
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 263
16292: PUSH
16293: LD_INT 1
16295: EQUAL
16296: IFFALSE 16660
// begin driver := IsDrivenBy ( vehicle ) ;
16298: LD_ADDR_VAR 0 5
16302: PUSH
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 311
16312: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16313: LD_VAR 0 5
16317: PUSH
16318: LD_EXP 61
16322: IN
16323: IFTRUE 16337
16325: PUSH
16326: LD_VAR 0 1
16330: PUSH
16331: LD_EXP 61
16335: IN
16336: OR
16337: IFFALSE 16343
// exit ;
16339: POP
16340: POP
16341: GO 16811
// if not HasTask ( driver ) then
16343: LD_VAR 0 5
16347: PPUSH
16348: CALL_OW 314
16352: NOT
16353: IFFALSE 16658
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16355: LD_ADDR_EXP 61
16359: PUSH
16360: LD_EXP 61
16364: PPUSH
16365: LD_VAR 0 5
16369: PPUSH
16370: CALL 59868 0 2
16374: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16375: LD_ADDR_EXP 61
16379: PUSH
16380: LD_EXP 61
16384: PPUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL 59868 0 2
16394: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16395: LD_ADDR_VAR 0 6
16399: PUSH
16400: LD_EXP 60
16404: PUSH
16405: LD_VAR 0 4
16409: ARRAY
16410: PUSH
16411: LD_INT 3
16413: ARRAY
16414: PPUSH
16415: LD_EXP 60
16419: PUSH
16420: LD_VAR 0 4
16424: ARRAY
16425: PUSH
16426: LD_INT 4
16428: ARRAY
16429: PPUSH
16430: CALL_OW 428
16434: ST_TO_ADDR
// if hex then
16435: LD_VAR 0 6
16439: IFFALSE 16457
// ComMoveUnit ( driver , hex ) else
16441: LD_VAR 0 5
16445: PPUSH
16446: LD_VAR 0 6
16450: PPUSH
16451: CALL_OW 112
16455: GO 16541
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_EXP 60
16466: PUSH
16467: LD_VAR 0 4
16471: ARRAY
16472: PUSH
16473: LD_INT 3
16475: ARRAY
16476: PPUSH
16477: LD_EXP 60
16481: PUSH
16482: LD_VAR 0 4
16486: ARRAY
16487: PUSH
16488: LD_INT 4
16490: ARRAY
16491: PPUSH
16492: CALL_OW 297
16496: PUSH
16497: LD_INT 0
16499: GREATER
16500: IFFALSE 16541
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16502: LD_VAR 0 5
16506: PPUSH
16507: LD_EXP 60
16511: PUSH
16512: LD_VAR 0 4
16516: ARRAY
16517: PUSH
16518: LD_INT 3
16520: ARRAY
16521: PPUSH
16522: LD_EXP 60
16526: PUSH
16527: LD_VAR 0 4
16531: ARRAY
16532: PUSH
16533: LD_INT 4
16535: ARRAY
16536: PPUSH
16537: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16541: LD_VAR 0 5
16545: PPUSH
16546: CALL_OW 181
// if Multiplayer then
16550: LD_OWVAR 4
16554: IFFALSE 16603
// begin repeat wait ( 10 ) ;
16556: LD_INT 10
16558: PPUSH
16559: CALL_OW 67
// until not IsInUnit ( driver ) ;
16563: LD_VAR 0 5
16567: PPUSH
16568: CALL_OW 310
16572: NOT
16573: IFFALSE 16556
// if not HasTask ( driver ) then
16575: LD_VAR 0 5
16579: PPUSH
16580: CALL_OW 314
16584: NOT
16585: IFFALSE 16601
// ComEnterUnit ( driver , factory ) ;
16587: LD_VAR 0 5
16591: PPUSH
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL_OW 120
// end else
16601: GO 16617
// AddComEnterUnit ( driver , factory ) ;
16603: LD_VAR 0 5
16607: PPUSH
16608: LD_VAR 0 2
16612: PPUSH
16613: CALL_OW 180
// wait ( 0 0$1 ) ;
16617: LD_INT 35
16619: PPUSH
16620: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16624: LD_ADDR_EXP 61
16628: PUSH
16629: LD_EXP 61
16633: PUSH
16634: LD_VAR 0 5
16638: DIFF
16639: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16640: LD_ADDR_EXP 61
16644: PUSH
16645: LD_EXP 61
16649: PUSH
16650: LD_VAR 0 1
16654: DIFF
16655: ST_TO_ADDR
// break ;
16656: GO 16809
// end ; end else
16658: GO 16807
// if GetControl ( vehicle ) = control_remote then
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 263
16669: PUSH
16670: LD_INT 2
16672: EQUAL
16673: IFFALSE 16759
// begin wait ( 0 0$2 ) ;
16675: LD_INT 70
16677: PPUSH
16678: CALL_OW 67
// repeat wait ( 10 ) ;
16682: LD_INT 10
16684: PPUSH
16685: CALL_OW 67
// Connect ( vehicle ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL 30180 0 1
// until IsControledBy ( vehicle ) ;
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 312
16707: IFFALSE 16682
// wait ( 10 ) ;
16709: LD_INT 10
16711: PPUSH
16712: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16716: LD_VAR 0 1
16720: PPUSH
16721: LD_EXP 60
16725: PUSH
16726: LD_VAR 0 4
16730: ARRAY
16731: PUSH
16732: LD_INT 3
16734: ARRAY
16735: PPUSH
16736: LD_EXP 60
16740: PUSH
16741: LD_VAR 0 4
16745: ARRAY
16746: PUSH
16747: LD_INT 4
16749: ARRAY
16750: PPUSH
16751: CALL_OW 111
// break ;
16755: GO 16809
// end else
16757: GO 16807
// begin wait ( 0 0$3 ) ;
16759: LD_INT 105
16761: PPUSH
16762: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16766: LD_VAR 0 1
16770: PPUSH
16771: LD_EXP 60
16775: PUSH
16776: LD_VAR 0 4
16780: ARRAY
16781: PUSH
16782: LD_INT 3
16784: ARRAY
16785: PPUSH
16786: LD_EXP 60
16790: PUSH
16791: LD_VAR 0 4
16795: ARRAY
16796: PUSH
16797: LD_INT 4
16799: ARRAY
16800: PPUSH
16801: CALL_OW 111
// break ;
16805: GO 16809
// end ; end ;
16807: GO 16258
16809: POP
16810: POP
// end ;
16811: LD_VAR 0 3
16815: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16816: LD_INT 0
16818: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 250
16826: EQUAL
16827: IFFALSE 16844
16829: PUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 264
16839: PUSH
16840: LD_INT 81
16842: EQUAL
16843: AND
16844: IFFALSE 16865
// MinerPlaceMine ( unit , x , y ) ;
16846: LD_VAR 0 2
16850: PPUSH
16851: LD_VAR 0 4
16855: PPUSH
16856: LD_VAR 0 5
16860: PPUSH
16861: CALL 19997 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 251
16872: EQUAL
16873: IFFALSE 16890
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 264
16885: PUSH
16886: LD_INT 81
16888: EQUAL
16889: AND
16890: IFFALSE 16911
// MinerDetonateMine ( unit , x , y ) ;
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 4
16901: PPUSH
16902: LD_VAR 0 5
16906: PPUSH
16907: CALL 20276 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16911: LD_VAR 0 1
16915: PUSH
16916: LD_INT 252
16918: EQUAL
16919: IFFALSE 16936
16921: PUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: CALL_OW 264
16931: PUSH
16932: LD_INT 81
16934: EQUAL
16935: AND
16936: IFFALSE 16957
// MinerCreateMinefield ( unit , x , y ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: LD_VAR 0 4
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL 20695 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16957: LD_VAR 0 1
16961: PUSH
16962: LD_INT 253
16964: EQUAL
16965: IFFALSE 16982
16967: PUSH
16968: LD_VAR 0 2
16972: PPUSH
16973: CALL_OW 257
16977: PUSH
16978: LD_INT 5
16980: EQUAL
16981: AND
16982: IFFALSE 17003
// ComBinocular ( unit , x , y ) ;
16984: LD_VAR 0 2
16988: PPUSH
16989: LD_VAR 0 4
16993: PPUSH
16994: LD_VAR 0 5
16998: PPUSH
16999: CALL 21070 0 3
// if selectedUnit then
17003: LD_VAR 0 3
17007: IFFALSE 17067
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17009: LD_VAR 0 1
17013: PUSH
17014: LD_INT 254
17016: EQUAL
17017: IFFALSE 17034
17019: PUSH
17020: LD_VAR 0 2
17024: PPUSH
17025: CALL_OW 264
17029: PUSH
17030: LD_INT 99
17032: EQUAL
17033: AND
17034: IFFALSE 17051
17036: PUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: CALL_OW 263
17046: PUSH
17047: LD_INT 3
17049: EQUAL
17050: AND
17051: IFFALSE 17067
// HackDestroyVehicle ( unit , selectedUnit ) ;
17053: LD_VAR 0 2
17057: PPUSH
17058: LD_VAR 0 3
17062: PPUSH
17063: CALL 19357 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17067: LD_VAR 0 1
17071: PUSH
17072: LD_INT 255
17074: EQUAL
17075: IFFALSE 17099
17077: PUSH
17078: LD_VAR 0 2
17082: PPUSH
17083: CALL_OW 264
17087: PUSH
17088: LD_INT 14
17090: PUSH
17091: LD_INT 53
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: IN
17098: AND
17099: IFFALSE 17117
17101: PUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_VAR 0 5
17111: PPUSH
17112: CALL_OW 488
17116: AND
17117: IFFALSE 17141
// CutTreeXYR ( unit , x , y , 12 ) ;
17119: LD_VAR 0 2
17123: PPUSH
17124: LD_VAR 0 4
17128: PPUSH
17129: LD_VAR 0 5
17133: PPUSH
17134: LD_INT 12
17136: PPUSH
17137: CALL 17332 0 4
// if cmd = 256 then
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 256
17148: EQUAL
17149: IFFALSE 17170
// SetFactoryWaypoint ( unit , x , y ) ;
17151: LD_VAR 0 2
17155: PPUSH
17156: LD_VAR 0 4
17160: PPUSH
17161: LD_VAR 0 5
17165: PPUSH
17166: CALL 14692 0 3
// if cmd = 257 then
17170: LD_VAR 0 1
17174: PUSH
17175: LD_INT 257
17177: EQUAL
17178: IFFALSE 17199
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17180: LD_VAR 0 2
17184: PPUSH
17185: LD_VAR 0 4
17189: PPUSH
17190: LD_VAR 0 5
17194: PPUSH
17195: CALL 15188 0 3
// if cmd = 258 then
17199: LD_VAR 0 1
17203: PUSH
17204: LD_INT 258
17206: EQUAL
17207: IFFALSE 17231
// BurnTreeXYR ( unit , x , y , 8 ) ;
17209: LD_VAR 0 2
17213: PPUSH
17214: LD_VAR 0 4
17218: PPUSH
17219: LD_VAR 0 5
17223: PPUSH
17224: LD_INT 8
17226: PPUSH
17227: CALL 17732 0 4
// end ;
17231: LD_VAR 0 6
17235: RET
// export function ComRadiation ( un ) ; var eff ; begin
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 264
17249: PUSH
17250: LD_INT 91
17252: NONEQUAL
17253: IFFALSE 17257
// exit ;
17255: GO 17327
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17257: LD_INT 68
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 255
17269: PPUSH
17270: CALL_OW 321
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: IFFALSE 17290
// eff := 50 else
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 50
17287: ST_TO_ADDR
17288: GO 17298
// eff := 25 ;
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 25
17297: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 250
17307: PPUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 251
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: CALL_OW 495
// end ;
17327: LD_VAR 0 2
17331: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17332: LD_INT 0
17334: PPUSH
17335: PPUSH
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 302
17352: NOT
17353: IFTRUE 17372
17355: PUSH
17356: LD_VAR 0 2
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: CALL_OW 488
17370: NOT
17371: OR
17372: IFTRUE 17381
17374: PUSH
17375: LD_VAR 0 4
17379: NOT
17380: OR
17381: IFFALSE 17385
// exit ;
17383: GO 17727
// list := [ ] ;
17385: LD_ADDR_VAR 0 13
17389: PUSH
17390: EMPTY
17391: ST_TO_ADDR
// if x - r < 0 then
17392: LD_VAR 0 2
17396: PUSH
17397: LD_VAR 0 4
17401: MINUS
17402: PUSH
17403: LD_INT 0
17405: LESS
17406: IFFALSE 17418
// min_x := 0 else
17408: LD_ADDR_VAR 0 7
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
17416: GO 17434
// min_x := x - r ;
17418: LD_ADDR_VAR 0 7
17422: PUSH
17423: LD_VAR 0 2
17427: PUSH
17428: LD_VAR 0 4
17432: MINUS
17433: ST_TO_ADDR
// if y - r < 0 then
17434: LD_VAR 0 3
17438: PUSH
17439: LD_VAR 0 4
17443: MINUS
17444: PUSH
17445: LD_INT 0
17447: LESS
17448: IFFALSE 17460
// min_y := 0 else
17450: LD_ADDR_VAR 0 8
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
17458: GO 17476
// min_y := y - r ;
17460: LD_ADDR_VAR 0 8
17464: PUSH
17465: LD_VAR 0 3
17469: PUSH
17470: LD_VAR 0 4
17474: MINUS
17475: ST_TO_ADDR
// max_x := x + r ;
17476: LD_ADDR_VAR 0 9
17480: PUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_VAR 0 4
17490: PLUS
17491: ST_TO_ADDR
// max_y := y + r ;
17492: LD_ADDR_VAR 0 10
17496: PUSH
17497: LD_VAR 0 3
17501: PUSH
17502: LD_VAR 0 4
17506: PLUS
17507: ST_TO_ADDR
// for _x = min_x to max_x do
17508: LD_ADDR_VAR 0 11
17512: PUSH
17513: DOUBLE
17514: LD_VAR 0 7
17518: DEC
17519: ST_TO_ADDR
17520: LD_VAR 0 9
17524: PUSH
17525: FOR_TO
17526: IFFALSE 17645
// for _y = min_y to max_y do
17528: LD_ADDR_VAR 0 12
17532: PUSH
17533: DOUBLE
17534: LD_VAR 0 8
17538: DEC
17539: ST_TO_ADDR
17540: LD_VAR 0 10
17544: PUSH
17545: FOR_TO
17546: IFFALSE 17641
// begin if not ValidHex ( _x , _y ) then
17548: LD_VAR 0 11
17552: PPUSH
17553: LD_VAR 0 12
17557: PPUSH
17558: CALL_OW 488
17562: NOT
17563: IFFALSE 17567
// continue ;
17565: GO 17545
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17567: LD_VAR 0 11
17571: PPUSH
17572: LD_VAR 0 12
17576: PPUSH
17577: CALL_OW 351
17581: IFFALSE 17599
17583: PUSH
17584: LD_VAR 0 11
17588: PPUSH
17589: LD_VAR 0 12
17593: PPUSH
17594: CALL_OW 554
17598: AND
17599: IFFALSE 17639
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17601: LD_ADDR_VAR 0 13
17605: PUSH
17606: LD_VAR 0 13
17610: PPUSH
17611: LD_VAR 0 13
17615: PUSH
17616: LD_INT 1
17618: PLUS
17619: PPUSH
17620: LD_VAR 0 11
17624: PUSH
17625: LD_VAR 0 12
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 2
17638: ST_TO_ADDR
// end ;
17639: GO 17545
17641: POP
17642: POP
17643: GO 17525
17645: POP
17646: POP
// if not list then
17647: LD_VAR 0 13
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17727
// for i in list do
17656: LD_ADDR_VAR 0 6
17660: PUSH
17661: LD_VAR 0 13
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17725
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17669: LD_VAR 0 1
17673: PPUSH
17674: LD_STRING M
17676: PUSH
17677: LD_VAR 0 6
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PUSH
17686: LD_VAR 0 6
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: PPUSH
17719: CALL_OW 447
17723: GO 17666
17725: POP
17726: POP
// end ;
17727: LD_VAR 0 5
17731: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17732: LD_INT 0
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 302
17753: NOT
17754: IFTRUE 17773
17756: PUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: LD_VAR 0 3
17766: PPUSH
17767: CALL_OW 488
17771: NOT
17772: OR
17773: IFTRUE 17782
17775: PUSH
17776: LD_VAR 0 4
17780: NOT
17781: OR
17782: IFFALSE 17786
// exit ;
17784: GO 18303
// list := [ ] ;
17786: LD_ADDR_VAR 0 13
17790: PUSH
17791: EMPTY
17792: ST_TO_ADDR
// if x - r < 0 then
17793: LD_VAR 0 2
17797: PUSH
17798: LD_VAR 0 4
17802: MINUS
17803: PUSH
17804: LD_INT 0
17806: LESS
17807: IFFALSE 17819
// min_x := 0 else
17809: LD_ADDR_VAR 0 7
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
17817: GO 17835
// min_x := x - r ;
17819: LD_ADDR_VAR 0 7
17823: PUSH
17824: LD_VAR 0 2
17828: PUSH
17829: LD_VAR 0 4
17833: MINUS
17834: ST_TO_ADDR
// if y - r < 0 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_VAR 0 4
17844: MINUS
17845: PUSH
17846: LD_INT 0
17848: LESS
17849: IFFALSE 17861
// min_y := 0 else
17851: LD_ADDR_VAR 0 8
17855: PUSH
17856: LD_INT 0
17858: ST_TO_ADDR
17859: GO 17877
// min_y := y - r ;
17861: LD_ADDR_VAR 0 8
17865: PUSH
17866: LD_VAR 0 3
17870: PUSH
17871: LD_VAR 0 4
17875: MINUS
17876: ST_TO_ADDR
// max_x := x + r ;
17877: LD_ADDR_VAR 0 9
17881: PUSH
17882: LD_VAR 0 2
17886: PUSH
17887: LD_VAR 0 4
17891: PLUS
17892: ST_TO_ADDR
// max_y := y + r ;
17893: LD_ADDR_VAR 0 10
17897: PUSH
17898: LD_VAR 0 3
17902: PUSH
17903: LD_VAR 0 4
17907: PLUS
17908: ST_TO_ADDR
// for _x = min_x to max_x do
17909: LD_ADDR_VAR 0 11
17913: PUSH
17914: DOUBLE
17915: LD_VAR 0 7
17919: DEC
17920: ST_TO_ADDR
17921: LD_VAR 0 9
17925: PUSH
17926: FOR_TO
17927: IFFALSE 18046
// for _y = min_y to max_y do
17929: LD_ADDR_VAR 0 12
17933: PUSH
17934: DOUBLE
17935: LD_VAR 0 8
17939: DEC
17940: ST_TO_ADDR
17941: LD_VAR 0 10
17945: PUSH
17946: FOR_TO
17947: IFFALSE 18042
// begin if not ValidHex ( _x , _y ) then
17949: LD_VAR 0 11
17953: PPUSH
17954: LD_VAR 0 12
17958: PPUSH
17959: CALL_OW 488
17963: NOT
17964: IFFALSE 17968
// continue ;
17966: GO 17946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17968: LD_VAR 0 11
17972: PPUSH
17973: LD_VAR 0 12
17977: PPUSH
17978: CALL_OW 351
17982: IFFALSE 18000
17984: PUSH
17985: LD_VAR 0 11
17989: PPUSH
17990: LD_VAR 0 12
17994: PPUSH
17995: CALL_OW 554
17999: AND
18000: IFFALSE 18040
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18002: LD_ADDR_VAR 0 13
18006: PUSH
18007: LD_VAR 0 13
18011: PPUSH
18012: LD_VAR 0 13
18016: PUSH
18017: LD_INT 1
18019: PLUS
18020: PPUSH
18021: LD_VAR 0 11
18025: PUSH
18026: LD_VAR 0 12
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 2
18039: ST_TO_ADDR
// end ;
18040: GO 17946
18042: POP
18043: POP
18044: GO 17926
18046: POP
18047: POP
// if not list then
18048: LD_VAR 0 13
18052: NOT
18053: IFFALSE 18057
// exit ;
18055: GO 18303
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18057: LD_ADDR_VAR 0 13
18061: PUSH
18062: LD_VAR 0 1
18066: PPUSH
18067: LD_VAR 0 13
18071: PPUSH
18072: LD_INT 1
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL 27308 0 4
18082: ST_TO_ADDR
// ComStop ( flame ) ;
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 141
// for i in list do
18092: LD_ADDR_VAR 0 6
18096: PUSH
18097: LD_VAR 0 13
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18134
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 6
18114: PUSH
18115: LD_INT 1
18117: ARRAY
18118: PPUSH
18119: LD_VAR 0 6
18123: PUSH
18124: LD_INT 2
18126: ARRAY
18127: PPUSH
18128: CALL_OW 176
18132: GO 18102
18134: POP
18135: POP
// repeat wait ( 0 0$1 ) ;
18136: LD_INT 35
18138: PPUSH
18139: CALL_OW 67
// task := GetTaskList ( flame ) ;
18143: LD_ADDR_VAR 0 14
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 437
18157: ST_TO_ADDR
// if not task then
18158: LD_VAR 0 14
18162: NOT
18163: IFFALSE 18167
// exit ;
18165: GO 18303
// if task [ 1 ] [ 1 ] <> | then
18167: LD_VAR 0 14
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PUSH
18180: LD_STRING |
18182: NONEQUAL
18183: IFFALSE 18187
// exit ;
18185: GO 18303
// _x := task [ 1 ] [ 2 ] ;
18187: LD_ADDR_VAR 0 11
18191: PUSH
18192: LD_VAR 0 14
18196: PUSH
18197: LD_INT 1
18199: ARRAY
18200: PUSH
18201: LD_INT 2
18203: ARRAY
18204: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18205: LD_ADDR_VAR 0 12
18209: PUSH
18210: LD_VAR 0 14
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PUSH
18219: LD_INT 3
18221: ARRAY
18222: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18223: LD_VAR 0 11
18227: PPUSH
18228: LD_VAR 0 12
18232: PPUSH
18233: CALL_OW 351
18237: NOT
18238: IFTRUE 18257
18240: PUSH
18241: LD_VAR 0 11
18245: PPUSH
18246: LD_VAR 0 12
18250: PPUSH
18251: CALL_OW 554
18255: NOT
18256: OR
18257: IFFALSE 18291
// begin task := Delete ( task , 1 ) ;
18259: LD_ADDR_VAR 0 14
18263: PUSH
18264: LD_VAR 0 14
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 3
18276: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_VAR 0 14
18286: PPUSH
18287: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: CALL_OW 314
18300: NOT
18301: IFFALSE 18136
// end ;
18303: LD_VAR 0 5
18307: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18308: LD_EXP 64
18312: NOT
18313: IFFALSE 18363
18315: GO 18317
18317: DISABLE
// begin initHack := true ;
18318: LD_ADDR_EXP 64
18322: PUSH
18323: LD_INT 1
18325: ST_TO_ADDR
// hackTanks := [ ] ;
18326: LD_ADDR_EXP 65
18330: PUSH
18331: EMPTY
18332: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18333: LD_ADDR_EXP 66
18337: PUSH
18338: EMPTY
18339: ST_TO_ADDR
// hackLimit := 3 ;
18340: LD_ADDR_EXP 67
18344: PUSH
18345: LD_INT 3
18347: ST_TO_ADDR
// hackDist := 12 ;
18348: LD_ADDR_EXP 68
18352: PUSH
18353: LD_INT 12
18355: ST_TO_ADDR
// hackCounter := [ ] ;
18356: LD_ADDR_EXP 69
18360: PUSH
18361: EMPTY
18362: ST_TO_ADDR
// end ;
18363: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18364: LD_EXP 64
18368: IFFALSE 18386
18370: PUSH
18371: LD_INT 34
18373: PUSH
18374: LD_INT 99
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: AND
18386: IFFALSE 18639
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
// begin enable ;
18395: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: LD_INT 34
18403: PUSH
18404: LD_INT 99
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: PUSH
18416: FOR_IN
18417: IFFALSE 18637
// begin if not i in hackTanks then
18419: LD_VAR 0 1
18423: PUSH
18424: LD_EXP 65
18428: IN
18429: NOT
18430: IFFALSE 18513
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18432: LD_ADDR_EXP 65
18436: PUSH
18437: LD_EXP 65
18441: PPUSH
18442: LD_EXP 65
18446: PUSH
18447: LD_INT 1
18449: PLUS
18450: PPUSH
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL_OW 1
18460: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18461: LD_ADDR_EXP 66
18465: PUSH
18466: LD_EXP 66
18470: PPUSH
18471: LD_EXP 66
18475: PUSH
18476: LD_INT 1
18478: PLUS
18479: PPUSH
18480: EMPTY
18481: PPUSH
18482: CALL_OW 1
18486: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18487: LD_ADDR_EXP 69
18491: PUSH
18492: LD_EXP 69
18496: PPUSH
18497: LD_EXP 69
18501: PUSH
18502: LD_INT 1
18504: PLUS
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18513: LD_VAR 0 1
18517: PPUSH
18518: CALL_OW 302
18522: NOT
18523: IFFALSE 18536
// begin HackUnlinkAll ( i ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL 18642 0 1
// continue ;
18534: GO 18416
// end ; HackCheckCapturedStatus ( i ) ;
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL 19087 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 81
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 33
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 91
18579: PUSH
18580: LD_VAR 0 1
18584: PUSH
18585: LD_EXP 68
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 50
18597: PUSH
18598: EMPTY
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: ST_TO_ADDR
// if not tmp then
18612: LD_VAR 0 2
18616: NOT
18617: IFFALSE 18621
// continue ;
18619: GO 18416
// HackLink ( i , tmp ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL 18778 0 2
// end ;
18635: GO 18416
18637: POP
18638: POP
// end ;
18639: PPOPN 2
18641: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
18646: PPUSH
// if not hack in hackTanks then
18647: LD_VAR 0 1
18651: PUSH
18652: LD_EXP 65
18656: IN
18657: NOT
18658: IFFALSE 18662
// exit ;
18660: GO 18773
// index := GetElementIndex ( hackTanks , hack ) ;
18662: LD_ADDR_VAR 0 4
18666: PUSH
18667: LD_EXP 65
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL 26603 0 2
18681: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18682: LD_EXP 66
18686: PUSH
18687: LD_VAR 0 4
18691: ARRAY
18692: IFFALSE 18773
// begin for i in hackTanksCaptured [ index ] do
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_EXP 66
18703: PUSH
18704: LD_VAR 0 4
18708: ARRAY
18709: PUSH
18710: FOR_IN
18711: IFFALSE 18737
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18713: LD_VAR 0 3
18717: PUSH
18718: LD_INT 1
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 3
18726: PUSH
18727: LD_INT 2
18729: ARRAY
18730: PPUSH
18731: CALL_OW 235
18735: GO 18710
18737: POP
18738: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18739: LD_ADDR_EXP 66
18743: PUSH
18744: LD_EXP 66
18748: PPUSH
18749: LD_VAR 0 4
18753: PPUSH
18754: EMPTY
18755: PPUSH
18756: CALL_OW 1
18760: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18761: LD_VAR 0 1
18765: PPUSH
18766: LD_INT 0
18768: PPUSH
18769: CALL_OW 505
// end ; end ;
18773: LD_VAR 0 2
18777: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18778: LD_INT 0
18780: PPUSH
18781: PPUSH
18782: PPUSH
// if not hack in hackTanks or not vehicles then
18783: LD_VAR 0 1
18787: PUSH
18788: LD_EXP 65
18792: IN
18793: NOT
18794: IFTRUE 18803
18796: PUSH
18797: LD_VAR 0 2
18801: NOT
18802: OR
18803: IFFALSE 18807
// exit ;
18805: GO 19082
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 2
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL 27255 0 4
18832: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18833: LD_ADDR_VAR 0 5
18837: PUSH
18838: LD_EXP 65
18842: PPUSH
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL 26603 0 2
18852: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18853: LD_EXP 66
18857: PUSH
18858: LD_VAR 0 5
18862: ARRAY
18863: PUSH
18864: LD_EXP 67
18868: LESS
18869: IFFALSE 19058
// begin for i := 1 to vehicles do
18871: LD_ADDR_VAR 0 4
18875: PUSH
18876: DOUBLE
18877: LD_INT 1
18879: DEC
18880: ST_TO_ADDR
18881: LD_VAR 0 2
18885: PUSH
18886: FOR_TO
18887: IFFALSE 19056
// begin if hackTanksCaptured [ index ] = hackLimit then
18889: LD_EXP 66
18893: PUSH
18894: LD_VAR 0 5
18898: ARRAY
18899: PUSH
18900: LD_EXP 67
18904: EQUAL
18905: IFFALSE 18909
// break ;
18907: GO 19056
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18909: LD_ADDR_EXP 69
18913: PUSH
18914: LD_EXP 69
18918: PPUSH
18919: LD_VAR 0 5
18923: PPUSH
18924: LD_EXP 69
18928: PUSH
18929: LD_VAR 0 5
18933: ARRAY
18934: PUSH
18935: LD_INT 1
18937: PLUS
18938: PPUSH
18939: CALL_OW 1
18943: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18944: LD_ADDR_EXP 66
18948: PUSH
18949: LD_EXP 66
18953: PPUSH
18954: LD_VAR 0 5
18958: PUSH
18959: LD_EXP 66
18963: PUSH
18964: LD_VAR 0 5
18968: ARRAY
18969: PUSH
18970: LD_INT 1
18972: PLUS
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: LD_VAR 0 2
18982: PUSH
18983: LD_VAR 0 4
18987: ARRAY
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: LD_VAR 0 4
18998: ARRAY
18999: PPUSH
19000: CALL_OW 255
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL 26820 0 3
19013: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19014: LD_VAR 0 2
19018: PUSH
19019: LD_VAR 0 4
19023: ARRAY
19024: PPUSH
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 255
19034: PPUSH
19035: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19039: LD_VAR 0 2
19043: PUSH
19044: LD_VAR 0 4
19048: ARRAY
19049: PPUSH
19050: CALL_OW 141
// end ;
19054: GO 18886
19056: POP
19057: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19058: LD_VAR 0 1
19062: PPUSH
19063: LD_EXP 66
19067: PUSH
19068: LD_VAR 0 5
19072: ARRAY
19073: PUSH
19074: LD_INT 0
19076: PLUS
19077: PPUSH
19078: CALL_OW 505
// end ;
19082: LD_VAR 0 3
19086: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// if not hack in hackTanks then
19093: LD_VAR 0 1
19097: PUSH
19098: LD_EXP 65
19102: IN
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19352
// index := GetElementIndex ( hackTanks , hack ) ;
19108: LD_ADDR_VAR 0 4
19112: PUSH
19113: LD_EXP 65
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL 26603 0 2
19127: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: DOUBLE
19134: LD_EXP 66
19138: PUSH
19139: LD_VAR 0 4
19143: ARRAY
19144: INC
19145: ST_TO_ADDR
19146: LD_INT 1
19148: PUSH
19149: FOR_DOWNTO
19150: IFFALSE 19326
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19152: LD_ADDR_VAR 0 5
19156: PUSH
19157: LD_EXP 66
19161: PUSH
19162: LD_VAR 0 4
19166: ARRAY
19167: PUSH
19168: LD_VAR 0 3
19172: ARRAY
19173: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19174: LD_VAR 0 5
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: CALL_OW 302
19187: NOT
19188: IFTRUE 19216
19190: PUSH
19191: LD_VAR 0 5
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 255
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: CALL_OW 255
19214: NONEQUAL
19215: OR
19216: IFFALSE 19324
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19218: LD_VAR 0 5
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: CALL_OW 305
19231: IFFALSE 19259
19233: PUSH
19234: LD_VAR 0 5
19238: PUSH
19239: LD_INT 1
19241: ARRAY
19242: PPUSH
19243: CALL_OW 255
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 255
19257: EQUAL
19258: AND
19259: IFFALSE 19283
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19261: LD_VAR 0 5
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 5
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19283: LD_ADDR_EXP 66
19287: PUSH
19288: LD_EXP 66
19292: PPUSH
19293: LD_VAR 0 4
19297: PPUSH
19298: LD_EXP 66
19302: PUSH
19303: LD_VAR 0 4
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 3
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// end ; end ;
19324: GO 19149
19326: POP
19327: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_EXP 66
19337: PUSH
19338: LD_VAR 0 4
19342: ARRAY
19343: PUSH
19344: LD_INT 0
19346: PLUS
19347: PPUSH
19348: CALL_OW 505
// end ;
19352: LD_VAR 0 2
19356: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
// if not hack in hackTanks then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 65
19372: IN
19373: NOT
19374: IFFALSE 19378
// exit ;
19376: GO 19463
// index := GetElementIndex ( hackTanks , hack ) ;
19378: LD_ADDR_VAR 0 5
19382: PUSH
19383: LD_EXP 65
19387: PPUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL 26603 0 2
19397: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_EXP 66
19412: PUSH
19413: LD_VAR 0 5
19417: ARRAY
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19461
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19422: LD_EXP 66
19426: PUSH
19427: LD_VAR 0 5
19431: ARRAY
19432: PUSH
19433: LD_VAR 0 4
19437: ARRAY
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: PUSH
19443: LD_VAR 0 2
19447: EQUAL
19448: IFFALSE 19459
// KillUnit ( vehicle ) ;
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 66
19459: GO 19419
19461: POP
19462: POP
// end ;
19463: LD_VAR 0 3
19467: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19468: LD_EXP 70
19472: NOT
19473: IFFALSE 19508
19475: GO 19477
19477: DISABLE
// begin initMiner := true ;
19478: LD_ADDR_EXP 70
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// minersList := [ ] ;
19486: LD_ADDR_EXP 71
19490: PUSH
19491: EMPTY
19492: ST_TO_ADDR
// minerMinesList := [ ] ;
19493: LD_ADDR_EXP 72
19497: PUSH
19498: EMPTY
19499: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19500: LD_ADDR_EXP 73
19504: PUSH
19505: LD_INT 5
19507: ST_TO_ADDR
// end ;
19508: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19509: LD_EXP 70
19513: IFFALSE 19531
19515: PUSH
19516: LD_INT 34
19518: PUSH
19519: LD_INT 81
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: AND
19531: IFFALSE 19994
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
// begin enable ;
19542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_INT 34
19550: PUSH
19551: LD_INT 81
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: FOR_IN
19564: IFFALSE 19636
// begin if not i in minersList then
19566: LD_VAR 0 1
19570: PUSH
19571: LD_EXP 71
19575: IN
19576: NOT
19577: IFFALSE 19634
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19579: LD_ADDR_EXP 71
19583: PUSH
19584: LD_EXP 71
19588: PPUSH
19589: LD_EXP 71
19593: PUSH
19594: LD_INT 1
19596: PLUS
19597: PPUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 1
19607: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19608: LD_ADDR_EXP 72
19612: PUSH
19613: LD_EXP 72
19617: PPUSH
19618: LD_EXP 72
19622: PUSH
19623: LD_INT 1
19625: PLUS
19626: PPUSH
19627: EMPTY
19628: PPUSH
19629: CALL_OW 1
19633: ST_TO_ADDR
// end end ;
19634: GO 19563
19636: POP
19637: POP
// for i := minerMinesList downto 1 do
19638: LD_ADDR_VAR 0 1
19642: PUSH
19643: DOUBLE
19644: LD_EXP 72
19648: INC
19649: ST_TO_ADDR
19650: LD_INT 1
19652: PUSH
19653: FOR_DOWNTO
19654: IFFALSE 19992
// begin if IsLive ( minersList [ i ] ) then
19656: LD_EXP 71
19660: PUSH
19661: LD_VAR 0 1
19665: ARRAY
19666: PPUSH
19667: CALL_OW 300
19671: IFFALSE 19699
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19673: LD_EXP 71
19677: PUSH
19678: LD_VAR 0 1
19682: ARRAY
19683: PPUSH
19684: LD_EXP 72
19688: PUSH
19689: LD_VAR 0 1
19693: ARRAY
19694: PPUSH
19695: CALL_OW 505
// if not minerMinesList [ i ] then
19699: LD_EXP 72
19703: PUSH
19704: LD_VAR 0 1
19708: ARRAY
19709: NOT
19710: IFFALSE 19714
// continue ;
19712: GO 19653
// for j := minerMinesList [ i ] downto 1 do
19714: LD_ADDR_VAR 0 2
19718: PUSH
19719: DOUBLE
19720: LD_EXP 72
19724: PUSH
19725: LD_VAR 0 1
19729: ARRAY
19730: INC
19731: ST_TO_ADDR
19732: LD_INT 1
19734: PUSH
19735: FOR_DOWNTO
19736: IFFALSE 19988
// begin side := GetSide ( minersList [ i ] ) ;
19738: LD_ADDR_VAR 0 3
19742: PUSH
19743: LD_EXP 71
19747: PUSH
19748: LD_VAR 0 1
19752: ARRAY
19753: PPUSH
19754: CALL_OW 255
19758: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19759: LD_ADDR_VAR 0 4
19763: PUSH
19764: LD_EXP 72
19768: PUSH
19769: LD_VAR 0 1
19773: ARRAY
19774: PUSH
19775: LD_VAR 0 2
19779: ARRAY
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PPUSH
19785: LD_EXP 72
19789: PUSH
19790: LD_VAR 0 1
19794: ARRAY
19795: PUSH
19796: LD_VAR 0 2
19800: ARRAY
19801: PUSH
19802: LD_INT 2
19804: ARRAY
19805: PPUSH
19806: CALL_OW 428
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 4
19815: NOT
19816: IFFALSE 19820
// continue ;
19818: GO 19735
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19820: LD_VAR 0 4
19824: PUSH
19825: LD_INT 81
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: IN
19842: IFFALSE 19892
19844: PUSH
19845: LD_EXP 72
19849: PUSH
19850: LD_VAR 0 1
19854: ARRAY
19855: PUSH
19856: LD_VAR 0 2
19860: ARRAY
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PPUSH
19866: LD_EXP 72
19870: PUSH
19871: LD_VAR 0 1
19875: ARRAY
19876: PUSH
19877: LD_VAR 0 2
19881: ARRAY
19882: PUSH
19883: LD_INT 2
19885: ARRAY
19886: PPUSH
19887: CALL_OW 458
19891: AND
19892: IFFALSE 19986
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19894: LD_EXP 72
19898: PUSH
19899: LD_VAR 0 1
19903: ARRAY
19904: PUSH
19905: LD_VAR 0 2
19909: ARRAY
19910: PUSH
19911: LD_INT 1
19913: ARRAY
19914: PPUSH
19915: LD_EXP 72
19919: PUSH
19920: LD_VAR 0 1
19924: ARRAY
19925: PUSH
19926: LD_VAR 0 2
19930: ARRAY
19931: PUSH
19932: LD_INT 2
19934: ARRAY
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19945: LD_ADDR_EXP 72
19949: PUSH
19950: LD_EXP 72
19954: PPUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: LD_EXP 72
19964: PUSH
19965: LD_VAR 0 1
19969: ARRAY
19970: PPUSH
19971: LD_VAR 0 2
19975: PPUSH
19976: CALL_OW 3
19980: PPUSH
19981: CALL_OW 1
19985: ST_TO_ADDR
// end ; end ;
19986: GO 19735
19988: POP
19989: POP
// end ;
19990: GO 19653
19992: POP
19993: POP
// end ;
19994: PPOPN 4
19996: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
// result := false ;
20001: LD_ADDR_VAR 0 4
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL_OW 264
20018: PUSH
20019: LD_INT 81
20021: EQUAL
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20271
// index := GetElementIndex ( minersList , unit ) ;
20027: LD_ADDR_VAR 0 5
20031: PUSH
20032: LD_EXP 71
20036: PPUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL 26603 0 2
20046: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20047: LD_EXP 72
20051: PUSH
20052: LD_VAR 0 5
20056: ARRAY
20057: PUSH
20058: LD_EXP 73
20062: GREATEREQUAL
20063: IFFALSE 20067
// exit ;
20065: GO 20271
// ComMoveXY ( unit , x , y ) ;
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_VAR 0 2
20076: PPUSH
20077: LD_VAR 0 3
20081: PPUSH
20082: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20086: LD_INT 35
20088: PPUSH
20089: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: CALL 58649 0 3
20112: NOT
20113: IFFALSE 20126
20115: PUSH
20116: LD_VAR 0 1
20120: PPUSH
20121: CALL_OW 314
20125: AND
20126: IFFALSE 20130
// exit ;
20128: GO 20271
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20130: LD_VAR 0 2
20134: PPUSH
20135: LD_VAR 0 3
20139: PPUSH
20140: CALL_OW 428
20144: PUSH
20145: LD_VAR 0 1
20149: EQUAL
20150: IFFALSE 20164
20152: PUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 314
20162: NOT
20163: AND
20164: IFFALSE 20086
// PlaySoundXY ( x , y , PlantMine ) ;
20166: LD_VAR 0 2
20170: PPUSH
20171: LD_VAR 0 3
20175: PPUSH
20176: LD_STRING PlantMine
20178: PPUSH
20179: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20183: LD_VAR 0 2
20187: PPUSH
20188: LD_VAR 0 3
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 255
20202: PPUSH
20203: LD_INT 0
20205: PPUSH
20206: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20210: LD_ADDR_EXP 72
20214: PUSH
20215: LD_EXP 72
20219: PPUSH
20220: LD_VAR 0 5
20224: PUSH
20225: LD_EXP 72
20229: PUSH
20230: LD_VAR 0 5
20234: ARRAY
20235: PUSH
20236: LD_INT 1
20238: PLUS
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: LD_VAR 0 2
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL 26820 0 3
20262: ST_TO_ADDR
// result := true ;
20263: LD_ADDR_VAR 0 4
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// end ;
20271: LD_VAR 0 4
20275: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20276: LD_INT 0
20278: PPUSH
20279: PPUSH
20280: PPUSH
// if not unit in minersList then
20281: LD_VAR 0 1
20285: PUSH
20286: LD_EXP 71
20290: IN
20291: NOT
20292: IFFALSE 20296
// exit ;
20294: GO 20690
// index := GetElementIndex ( minersList , unit ) ;
20296: LD_ADDR_VAR 0 6
20300: PUSH
20301: LD_EXP 71
20305: PPUSH
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL 26603 0 2
20315: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20316: LD_ADDR_VAR 0 5
20320: PUSH
20321: DOUBLE
20322: LD_EXP 72
20326: PUSH
20327: LD_VAR 0 6
20331: ARRAY
20332: INC
20333: ST_TO_ADDR
20334: LD_INT 1
20336: PUSH
20337: FOR_DOWNTO
20338: IFFALSE 20501
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20340: LD_EXP 72
20344: PUSH
20345: LD_VAR 0 6
20349: ARRAY
20350: PUSH
20351: LD_VAR 0 5
20355: ARRAY
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 2
20365: EQUAL
20366: IFFALSE 20396
20368: PUSH
20369: LD_EXP 72
20373: PUSH
20374: LD_VAR 0 6
20378: ARRAY
20379: PUSH
20380: LD_VAR 0 5
20384: ARRAY
20385: PUSH
20386: LD_INT 2
20388: ARRAY
20389: PUSH
20390: LD_VAR 0 3
20394: EQUAL
20395: AND
20396: IFFALSE 20499
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20398: LD_EXP 72
20402: PUSH
20403: LD_VAR 0 6
20407: ARRAY
20408: PUSH
20409: LD_VAR 0 5
20413: ARRAY
20414: PUSH
20415: LD_INT 1
20417: ARRAY
20418: PPUSH
20419: LD_EXP 72
20423: PUSH
20424: LD_VAR 0 6
20428: ARRAY
20429: PUSH
20430: LD_VAR 0 5
20434: ARRAY
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: PPUSH
20440: LD_VAR 0 1
20444: PPUSH
20445: CALL_OW 255
20449: PPUSH
20450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20454: LD_ADDR_EXP 72
20458: PUSH
20459: LD_EXP 72
20463: PPUSH
20464: LD_VAR 0 6
20468: PPUSH
20469: LD_EXP 72
20473: PUSH
20474: LD_VAR 0 6
20478: ARRAY
20479: PPUSH
20480: LD_VAR 0 5
20484: PPUSH
20485: CALL_OW 3
20489: PPUSH
20490: CALL_OW 1
20494: ST_TO_ADDR
// exit ;
20495: POP
20496: POP
20497: GO 20690
// end ; end ;
20499: GO 20337
20501: POP
20502: POP
// for i := minerMinesList [ index ] downto 1 do
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: DOUBLE
20509: LD_EXP 72
20513: PUSH
20514: LD_VAR 0 6
20518: ARRAY
20519: INC
20520: ST_TO_ADDR
20521: LD_INT 1
20523: PUSH
20524: FOR_DOWNTO
20525: IFFALSE 20688
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20527: LD_EXP 72
20531: PUSH
20532: LD_VAR 0 6
20536: ARRAY
20537: PUSH
20538: LD_VAR 0 5
20542: ARRAY
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PPUSH
20548: LD_EXP 72
20552: PUSH
20553: LD_VAR 0 6
20557: ARRAY
20558: PUSH
20559: LD_VAR 0 5
20563: ARRAY
20564: PUSH
20565: LD_INT 2
20567: ARRAY
20568: PPUSH
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: CALL_OW 298
20583: PUSH
20584: LD_INT 6
20586: LESS
20587: IFFALSE 20686
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20589: LD_EXP 72
20593: PUSH
20594: LD_VAR 0 6
20598: ARRAY
20599: PUSH
20600: LD_VAR 0 5
20604: ARRAY
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PPUSH
20610: LD_EXP 72
20614: PUSH
20615: LD_VAR 0 6
20619: ARRAY
20620: PUSH
20621: LD_VAR 0 5
20625: ARRAY
20626: PUSH
20627: LD_INT 2
20629: ARRAY
20630: PPUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 255
20640: PPUSH
20641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20645: LD_ADDR_EXP 72
20649: PUSH
20650: LD_EXP 72
20654: PPUSH
20655: LD_VAR 0 6
20659: PPUSH
20660: LD_EXP 72
20664: PUSH
20665: LD_VAR 0 6
20669: ARRAY
20670: PPUSH
20671: LD_VAR 0 5
20675: PPUSH
20676: CALL_OW 3
20680: PPUSH
20681: CALL_OW 1
20685: ST_TO_ADDR
// end ; end ;
20686: GO 20524
20688: POP
20689: POP
// end ;
20690: LD_VAR 0 4
20694: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 264
20715: PUSH
20716: LD_INT 81
20718: EQUAL
20719: NOT
20720: IFTRUE 20735
20722: PUSH
20723: LD_VAR 0 1
20727: PUSH
20728: LD_EXP 71
20732: IN
20733: NOT
20734: OR
20735: IFFALSE 20739
// exit ;
20737: GO 21065
// index := GetElementIndex ( minersList , unit ) ;
20739: LD_ADDR_VAR 0 6
20743: PUSH
20744: LD_EXP 71
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL 26603 0 2
20758: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20759: LD_ADDR_VAR 0 8
20763: PUSH
20764: LD_EXP 73
20768: PUSH
20769: LD_EXP 72
20773: PUSH
20774: LD_VAR 0 6
20778: ARRAY
20779: MINUS
20780: ST_TO_ADDR
// if not minesFreeAmount then
20781: LD_VAR 0 8
20785: NOT
20786: IFFALSE 20790
// exit ;
20788: GO 21065
// tmp := [ ] ;
20790: LD_ADDR_VAR 0 7
20794: PUSH
20795: EMPTY
20796: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20797: LD_ADDR_VAR 0 5
20801: PUSH
20802: DOUBLE
20803: LD_INT 1
20805: DEC
20806: ST_TO_ADDR
20807: LD_VAR 0 8
20811: PUSH
20812: FOR_TO
20813: IFFALSE 21012
// begin _d := rand ( 0 , 5 ) ;
20815: LD_ADDR_VAR 0 11
20819: PUSH
20820: LD_INT 0
20822: PPUSH
20823: LD_INT 5
20825: PPUSH
20826: CALL_OW 12
20830: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20831: LD_ADDR_VAR 0 12
20835: PUSH
20836: LD_INT 2
20838: PPUSH
20839: LD_INT 6
20841: PPUSH
20842: CALL_OW 12
20846: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20847: LD_ADDR_VAR 0 9
20851: PUSH
20852: LD_VAR 0 2
20856: PPUSH
20857: LD_VAR 0 11
20861: PPUSH
20862: LD_VAR 0 12
20866: PPUSH
20867: CALL_OW 272
20871: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20872: LD_ADDR_VAR 0 10
20876: PUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: LD_VAR 0 11
20886: PPUSH
20887: LD_VAR 0 12
20891: PPUSH
20892: CALL_OW 273
20896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20897: LD_VAR 0 9
20901: PPUSH
20902: LD_VAR 0 10
20906: PPUSH
20907: CALL_OW 488
20911: IFFALSE 20935
20913: PUSH
20914: LD_VAR 0 9
20918: PUSH
20919: LD_VAR 0 10
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_VAR 0 7
20932: IN
20933: NOT
20934: AND
20935: IFFALSE 20954
20937: PUSH
20938: LD_VAR 0 9
20942: PPUSH
20943: LD_VAR 0 10
20947: PPUSH
20948: CALL_OW 458
20952: NOT
20953: AND
20954: IFFALSE 20996
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20956: LD_ADDR_VAR 0 7
20960: PUSH
20961: LD_VAR 0 7
20965: PPUSH
20966: LD_VAR 0 7
20970: PUSH
20971: LD_INT 1
20973: PLUS
20974: PPUSH
20975: LD_VAR 0 9
20979: PUSH
20980: LD_VAR 0 10
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PPUSH
20989: CALL_OW 1
20993: ST_TO_ADDR
20994: GO 21010
// i := i - 1 ;
20996: LD_ADDR_VAR 0 5
21000: PUSH
21001: LD_VAR 0 5
21005: PUSH
21006: LD_INT 1
21008: MINUS
21009: ST_TO_ADDR
// end ;
21010: GO 20812
21012: POP
21013: POP
// for i in tmp do
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: LD_VAR 0 7
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21063
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21027: LD_VAR 0 1
21031: PPUSH
21032: LD_VAR 0 5
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: LD_VAR 0 5
21045: PUSH
21046: LD_INT 2
21048: ARRAY
21049: PPUSH
21050: CALL 19997 0 3
21054: NOT
21055: IFFALSE 21061
// exit ;
21057: POP
21058: POP
21059: GO 21065
21061: GO 21024
21063: POP
21064: POP
// end ;
21065: LD_VAR 0 4
21069: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21070: LD_INT 0
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
// if GetClass ( unit ) <> class_sniper then
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 257
21090: PUSH
21091: LD_INT 5
21093: NONEQUAL
21094: IFFALSE 21098
// exit ;
21096: GO 21568
// dist := 8 ;
21098: LD_ADDR_VAR 0 5
21102: PUSH
21103: LD_INT 8
21105: ST_TO_ADDR
// viewRange := 12 ;
21106: LD_ADDR_VAR 0 8
21110: PUSH
21111: LD_INT 12
21113: ST_TO_ADDR
// side := GetSide ( unit ) ;
21114: LD_ADDR_VAR 0 6
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 255
21128: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21129: LD_INT 61
21131: PPUSH
21132: LD_VAR 0 6
21136: PPUSH
21137: CALL_OW 321
21141: PUSH
21142: LD_INT 2
21144: EQUAL
21145: IFFALSE 21155
// viewRange := 16 ;
21147: LD_ADDR_VAR 0 8
21151: PUSH
21152: LD_INT 16
21154: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21155: LD_VAR 0 1
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: CALL_OW 297
21174: PUSH
21175: LD_VAR 0 5
21179: GREATER
21180: IFFALSE 21259
// begin ComMoveXY ( unit , x , y ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: LD_VAR 0 2
21191: PPUSH
21192: LD_VAR 0 3
21196: PPUSH
21197: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21201: LD_INT 35
21203: PPUSH
21204: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21208: LD_VAR 0 1
21212: PPUSH
21213: LD_VAR 0 2
21217: PPUSH
21218: LD_VAR 0 3
21222: PPUSH
21223: CALL 58649 0 3
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 21568
// until GetDistUnitXY ( unit , x , y ) < dist ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_VAR 0 2
21241: PPUSH
21242: LD_VAR 0 3
21246: PPUSH
21247: CALL_OW 297
21251: PUSH
21252: LD_VAR 0 5
21256: LESS
21257: IFFALSE 21201
// end ; ComTurnXY ( unit , x , y ) ;
21259: LD_VAR 0 1
21263: PPUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_VAR 0 3
21273: PPUSH
21274: CALL_OW 118
// repeat if Multiplayer then
21278: LD_OWVAR 4
21282: IFFALSE 21293
// wait ( 35 ) else
21284: LD_INT 35
21286: PPUSH
21287: CALL_OW 67
21291: GO 21300
// wait ( 5 ) ;
21293: LD_INT 5
21295: PPUSH
21296: CALL_OW 67
// _d := GetDir ( unit ) ;
21300: LD_ADDR_VAR 0 11
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 254
21314: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21315: LD_ADDR_VAR 0 7
21319: PUSH
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 250
21329: PPUSH
21330: LD_VAR 0 1
21334: PPUSH
21335: CALL_OW 251
21339: PPUSH
21340: LD_VAR 0 2
21344: PPUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: CALL 61285 0 4
21354: ST_TO_ADDR
// until dir = _d ;
21355: LD_VAR 0 7
21359: PUSH
21360: LD_VAR 0 11
21364: EQUAL
21365: IFFALSE 21278
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21367: LD_ADDR_VAR 0 9
21371: PUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 250
21381: PPUSH
21382: LD_VAR 0 7
21386: PPUSH
21387: LD_VAR 0 5
21391: PPUSH
21392: CALL_OW 272
21396: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21397: LD_ADDR_VAR 0 10
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 251
21411: PPUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_VAR 0 5
21421: PPUSH
21422: CALL_OW 273
21426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21427: LD_VAR 0 9
21431: PPUSH
21432: LD_VAR 0 10
21436: PPUSH
21437: CALL_OW 488
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21568
// ComAnimCustom ( unit , 1 ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 592
// p := 0 ;
21458: LD_ADDR_VAR 0 12
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21466: LD_VAR 0 9
21470: PPUSH
21471: LD_VAR 0 10
21475: PPUSH
21476: LD_VAR 0 6
21480: PPUSH
21481: LD_VAR 0 8
21485: PPUSH
21486: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21490: LD_INT 35
21492: PPUSH
21493: CALL_OW 67
// p := Inc ( p ) ;
21497: LD_ADDR_VAR 0 12
21501: PUSH
21502: LD_VAR 0 12
21506: PPUSH
21507: CALL 61241 0 1
21511: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21512: LD_VAR 0 12
21516: PUSH
21517: LD_INT 3
21519: EQUAL
21520: IFTRUE 21534
21522: PUSH
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 302
21532: NOT
21533: OR
21534: IFTRUE 21547
21536: PUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 301
21546: OR
21547: IFFALSE 21490
// RemoveSeeing ( _x , _y , side ) ;
21549: LD_VAR 0 9
21553: PPUSH
21554: LD_VAR 0 10
21558: PPUSH
21559: LD_VAR 0 6
21563: PPUSH
21564: CALL_OW 331
// end ; end_of_file
21568: LD_VAR 0 4
21572: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21573: LD_VAR 0 1
21577: PUSH
21578: LD_INT 200
21580: DOUBLE
21581: GREATEREQUAL
21582: IFFALSE 21590
21584: LD_INT 299
21586: DOUBLE
21587: LESSEQUAL
21588: IFTRUE 21592
21590: GO 21624
21592: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21593: LD_VAR 0 1
21597: PPUSH
21598: LD_VAR 0 2
21602: PPUSH
21603: LD_VAR 0 3
21607: PPUSH
21608: LD_VAR 0 4
21612: PPUSH
21613: LD_VAR 0 5
21617: PPUSH
21618: CALL 16816 0 5
21622: GO 21701
21624: LD_INT 300
21626: DOUBLE
21627: GREATEREQUAL
21628: IFFALSE 21636
21630: LD_INT 399
21632: DOUBLE
21633: LESSEQUAL
21634: IFTRUE 21638
21636: GO 21700
21638: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21639: LD_VAR 0 1
21643: PPUSH
21644: LD_VAR 0 2
21648: PPUSH
21649: LD_VAR 0 3
21653: PPUSH
21654: LD_VAR 0 4
21658: PPUSH
21659: LD_VAR 0 5
21663: PPUSH
21664: LD_VAR 0 6
21668: PPUSH
21669: LD_VAR 0 7
21673: PPUSH
21674: LD_VAR 0 8
21678: PPUSH
21679: LD_VAR 0 9
21683: PPUSH
21684: LD_VAR 0 10
21688: PPUSH
21689: LD_VAR 0 11
21693: PPUSH
21694: CALL 12700 0 11
21698: GO 21701
21700: POP
// end ;
21701: PPOPN 11
21703: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_VAR 0 2
21713: PPUSH
21714: LD_VAR 0 3
21718: PPUSH
21719: LD_VAR 0 4
21723: PPUSH
21724: LD_VAR 0 5
21728: PPUSH
21729: CALL 16197 0 5
// end ; end_of_file
21733: PPOPN 5
21735: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
// if exist_mode then
21740: LD_VAR 0 2
21744: IFFALSE 21790
// begin unit := CreateCharacter ( prefix & ident ) ;
21746: LD_ADDR_VAR 0 5
21750: PUSH
21751: LD_VAR 0 3
21755: PUSH
21756: LD_VAR 0 1
21760: STR
21761: PPUSH
21762: CALL_OW 34
21766: ST_TO_ADDR
// if unit then
21767: LD_VAR 0 5
21771: IFFALSE 21788
// DeleteCharacters ( prefix & ident ) ;
21773: LD_VAR 0 3
21777: PUSH
21778: LD_VAR 0 1
21782: STR
21783: PPUSH
21784: CALL_OW 40
// end else
21788: GO 21805
// unit := NewCharacter ( ident ) ;
21790: LD_ADDR_VAR 0 5
21794: PUSH
21795: LD_VAR 0 1
21799: PPUSH
21800: CALL_OW 25
21804: ST_TO_ADDR
// result := unit ;
21805: LD_ADDR_VAR 0 4
21809: PUSH
21810: LD_VAR 0 5
21814: ST_TO_ADDR
// end ;
21815: LD_VAR 0 4
21819: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
// if exist_mode then
21824: LD_VAR 0 2
21828: IFFALSE 21853
// unit := CreateCharacter ( prefix & ident ) else
21830: LD_ADDR_VAR 0 5
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_VAR 0 1
21844: STR
21845: PPUSH
21846: CALL_OW 34
21850: ST_TO_ADDR
21851: GO 21868
// unit := NewCharacter ( ident ) ;
21853: LD_ADDR_VAR 0 5
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 25
21867: ST_TO_ADDR
// result := unit ;
21868: LD_ADDR_VAR 0 4
21872: PUSH
21873: LD_VAR 0 5
21877: ST_TO_ADDR
// end ;
21878: LD_VAR 0 4
21882: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21883: LD_INT 0
21885: PPUSH
21886: PPUSH
// if not side or not nation then
21887: LD_VAR 0 1
21891: NOT
21892: IFTRUE 21901
21894: PUSH
21895: LD_VAR 0 2
21899: NOT
21900: OR
21901: IFFALSE 21905
// exit ;
21903: GO 22675
// case nation of nation_american :
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 22132
21918: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21919: LD_ADDR_VAR 0 4
21923: PUSH
21924: LD_INT 35
21926: PUSH
21927: LD_INT 45
21929: PUSH
21930: LD_INT 46
21932: PUSH
21933: LD_INT 47
21935: PUSH
21936: LD_INT 82
21938: PUSH
21939: LD_INT 83
21941: PUSH
21942: LD_INT 84
21944: PUSH
21945: LD_INT 85
21947: PUSH
21948: LD_INT 86
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 6
21959: PUSH
21960: LD_INT 15
21962: PUSH
21963: LD_INT 16
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 12
21971: PUSH
21972: LD_INT 13
21974: PUSH
21975: LD_INT 10
21977: PUSH
21978: LD_INT 14
21980: PUSH
21981: LD_INT 20
21983: PUSH
21984: LD_INT 21
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 32
21995: PUSH
21996: LD_INT 27
21998: PUSH
21999: LD_INT 36
22001: PUSH
22002: LD_INT 69
22004: PUSH
22005: LD_INT 39
22007: PUSH
22008: LD_INT 34
22010: PUSH
22011: LD_INT 40
22013: PUSH
22014: LD_INT 48
22016: PUSH
22017: LD_INT 49
22019: PUSH
22020: LD_INT 50
22022: PUSH
22023: LD_INT 51
22025: PUSH
22026: LD_INT 52
22028: PUSH
22029: LD_INT 53
22031: PUSH
22032: LD_INT 54
22034: PUSH
22035: LD_INT 55
22037: PUSH
22038: LD_INT 56
22040: PUSH
22041: LD_INT 57
22043: PUSH
22044: LD_INT 58
22046: PUSH
22047: LD_INT 59
22049: PUSH
22050: LD_INT 60
22052: PUSH
22053: LD_INT 61
22055: PUSH
22056: LD_INT 62
22058: PUSH
22059: LD_INT 80
22061: PUSH
22062: LD_INT 82
22064: PUSH
22065: LD_INT 83
22067: PUSH
22068: LD_INT 84
22070: PUSH
22071: LD_INT 85
22073: PUSH
22074: LD_INT 86
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 22597
22132: LD_INT 2
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22366
22140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_INT 35
22148: PUSH
22149: LD_INT 45
22151: PUSH
22152: LD_INT 46
22154: PUSH
22155: LD_INT 47
22157: PUSH
22158: LD_INT 82
22160: PUSH
22161: LD_INT 83
22163: PUSH
22164: LD_INT 84
22166: PUSH
22167: LD_INT 85
22169: PUSH
22170: LD_INT 87
22172: PUSH
22173: LD_INT 70
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 11
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: LD_INT 5
22190: PUSH
22191: LD_INT 6
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 18
22199: PUSH
22200: LD_INT 7
22202: PUSH
22203: LD_INT 17
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 72
22220: PUSH
22221: LD_INT 26
22223: PUSH
22224: LD_INT 69
22226: PUSH
22227: LD_INT 39
22229: PUSH
22230: LD_INT 40
22232: PUSH
22233: LD_INT 41
22235: PUSH
22236: LD_INT 42
22238: PUSH
22239: LD_INT 43
22241: PUSH
22242: LD_INT 48
22244: PUSH
22245: LD_INT 49
22247: PUSH
22248: LD_INT 50
22250: PUSH
22251: LD_INT 51
22253: PUSH
22254: LD_INT 52
22256: PUSH
22257: LD_INT 53
22259: PUSH
22260: LD_INT 54
22262: PUSH
22263: LD_INT 55
22265: PUSH
22266: LD_INT 56
22268: PUSH
22269: LD_INT 60
22271: PUSH
22272: LD_INT 61
22274: PUSH
22275: LD_INT 62
22277: PUSH
22278: LD_INT 66
22280: PUSH
22281: LD_INT 67
22283: PUSH
22284: LD_INT 68
22286: PUSH
22287: LD_INT 81
22289: PUSH
22290: LD_INT 82
22292: PUSH
22293: LD_INT 83
22295: PUSH
22296: LD_INT 84
22298: PUSH
22299: LD_INT 85
22301: PUSH
22302: LD_INT 87
22304: PUSH
22305: LD_INT 88
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: ST_TO_ADDR
22364: GO 22597
22366: LD_INT 3
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22596
22374: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_INT 46
22382: PUSH
22383: LD_INT 47
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 82
22394: PUSH
22395: LD_INT 83
22397: PUSH
22398: LD_INT 84
22400: PUSH
22401: LD_INT 85
22403: PUSH
22404: LD_INT 86
22406: PUSH
22407: LD_INT 11
22409: PUSH
22410: LD_INT 9
22412: PUSH
22413: LD_INT 20
22415: PUSH
22416: LD_INT 19
22418: PUSH
22419: LD_INT 21
22421: PUSH
22422: LD_INT 24
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 25
22430: PUSH
22431: LD_INT 28
22433: PUSH
22434: LD_INT 29
22436: PUSH
22437: LD_INT 30
22439: PUSH
22440: LD_INT 31
22442: PUSH
22443: LD_INT 37
22445: PUSH
22446: LD_INT 38
22448: PUSH
22449: LD_INT 32
22451: PUSH
22452: LD_INT 27
22454: PUSH
22455: LD_INT 33
22457: PUSH
22458: LD_INT 69
22460: PUSH
22461: LD_INT 39
22463: PUSH
22464: LD_INT 34
22466: PUSH
22467: LD_INT 40
22469: PUSH
22470: LD_INT 71
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 44
22478: PUSH
22479: LD_INT 48
22481: PUSH
22482: LD_INT 49
22484: PUSH
22485: LD_INT 50
22487: PUSH
22488: LD_INT 51
22490: PUSH
22491: LD_INT 52
22493: PUSH
22494: LD_INT 53
22496: PUSH
22497: LD_INT 54
22499: PUSH
22500: LD_INT 55
22502: PUSH
22503: LD_INT 56
22505: PUSH
22506: LD_INT 57
22508: PUSH
22509: LD_INT 58
22511: PUSH
22512: LD_INT 59
22514: PUSH
22515: LD_INT 63
22517: PUSH
22518: LD_INT 64
22520: PUSH
22521: LD_INT 65
22523: PUSH
22524: LD_INT 82
22526: PUSH
22527: LD_INT 83
22529: PUSH
22530: LD_INT 84
22532: PUSH
22533: LD_INT 85
22535: PUSH
22536: LD_INT 86
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: ST_TO_ADDR
22594: GO 22597
22596: POP
// if state > - 1 and state < 3 then
22597: LD_VAR 0 3
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: GREATER
22606: IFFALSE 22618
22608: PUSH
22609: LD_VAR 0 3
22613: PUSH
22614: LD_INT 3
22616: LESS
22617: AND
22618: IFFALSE 22675
// for i in result do
22620: LD_ADDR_VAR 0 5
22624: PUSH
22625: LD_VAR 0 4
22629: PUSH
22630: FOR_IN
22631: IFFALSE 22673
// if GetTech ( i , side ) <> state then
22633: LD_VAR 0 5
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 321
22647: PUSH
22648: LD_VAR 0 3
22652: NONEQUAL
22653: IFFALSE 22671
// result := result diff i ;
22655: LD_ADDR_VAR 0 4
22659: PUSH
22660: LD_VAR 0 4
22664: PUSH
22665: LD_VAR 0 5
22669: DIFF
22670: ST_TO_ADDR
22671: GO 22630
22673: POP
22674: POP
// end ;
22675: LD_VAR 0 4
22679: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22680: LD_INT 0
22682: PPUSH
22683: PPUSH
22684: PPUSH
// result := true ;
22685: LD_ADDR_VAR 0 3
22689: PUSH
22690: LD_INT 1
22692: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22693: LD_ADDR_VAR 0 5
22697: PUSH
22698: LD_VAR 0 2
22702: PPUSH
22703: CALL_OW 480
22707: ST_TO_ADDR
// if not tmp then
22708: LD_VAR 0 5
22712: NOT
22713: IFFALSE 22717
// exit ;
22715: GO 22766
// for i in tmp do
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 5
22726: PUSH
22727: FOR_IN
22728: IFFALSE 22764
// if GetTech ( i , side ) <> state_researched then
22730: LD_VAR 0 4
22734: PPUSH
22735: LD_VAR 0 1
22739: PPUSH
22740: CALL_OW 321
22744: PUSH
22745: LD_INT 2
22747: NONEQUAL
22748: IFFALSE 22762
// begin result := false ;
22750: LD_ADDR_VAR 0 3
22754: PUSH
22755: LD_INT 0
22757: ST_TO_ADDR
// exit ;
22758: POP
22759: POP
22760: GO 22766
// end ;
22762: GO 22727
22764: POP
22765: POP
// end ;
22766: LD_VAR 0 3
22770: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22771: LD_INT 0
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
22784: PPUSH
22785: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22786: LD_VAR 0 1
22790: NOT
22791: IFTRUE 22808
22793: PUSH
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 257
22803: PUSH
22804: LD_INT 9
22806: NONEQUAL
22807: OR
22808: IFFALSE 22812
// exit ;
22810: GO 23391
// side := GetSide ( unit ) ;
22812: LD_ADDR_VAR 0 9
22816: PUSH
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 255
22826: ST_TO_ADDR
// tech_space := tech_spacanom ;
22827: LD_ADDR_VAR 0 12
22831: PUSH
22832: LD_INT 29
22834: ST_TO_ADDR
// tech_time := tech_taurad ;
22835: LD_ADDR_VAR 0 13
22839: PUSH
22840: LD_INT 28
22842: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22843: LD_ADDR_VAR 0 11
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 310
22857: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22858: LD_VAR 0 11
22862: PPUSH
22863: CALL_OW 247
22867: PUSH
22868: LD_INT 2
22870: EQUAL
22871: IFFALSE 22875
// exit ;
22873: GO 23391
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22875: LD_ADDR_VAR 0 8
22879: PUSH
22880: LD_INT 81
22882: PUSH
22883: LD_VAR 0 9
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PPUSH
22913: CALL_OW 69
22917: ST_TO_ADDR
// if not tmp then
22918: LD_VAR 0 8
22922: NOT
22923: IFFALSE 22927
// exit ;
22925: GO 23391
// if in_unit then
22927: LD_VAR 0 11
22931: IFFALSE 22955
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22933: LD_ADDR_VAR 0 10
22937: PUSH
22938: LD_VAR 0 8
22942: PPUSH
22943: LD_VAR 0 11
22947: PPUSH
22948: CALL_OW 74
22952: ST_TO_ADDR
22953: GO 22975
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22955: LD_ADDR_VAR 0 10
22959: PUSH
22960: LD_VAR 0 8
22964: PPUSH
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL_OW 74
22974: ST_TO_ADDR
// if not enemy then
22975: LD_VAR 0 10
22979: NOT
22980: IFFALSE 22984
// exit ;
22982: GO 23391
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22984: LD_VAR 0 11
22988: IFFALSE 23010
22990: PUSH
22991: LD_VAR 0 11
22995: PPUSH
22996: LD_VAR 0 10
23000: PPUSH
23001: CALL_OW 296
23005: PUSH
23006: LD_INT 13
23008: GREATER
23009: AND
23010: IFTRUE 23032
23012: PUSH
23013: LD_VAR 0 1
23017: PPUSH
23018: LD_VAR 0 10
23022: PPUSH
23023: CALL_OW 296
23027: PUSH
23028: LD_INT 12
23030: GREATER
23031: OR
23032: IFFALSE 23036
// exit ;
23034: GO 23391
// missile := [ 1 ] ;
23036: LD_ADDR_VAR 0 14
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: EMPTY
23045: LIST
23046: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23047: LD_VAR 0 9
23051: PPUSH
23052: LD_VAR 0 12
23056: PPUSH
23057: CALL_OW 325
23061: IFFALSE 23090
// missile := Replace ( missile , missile + 1 , 2 ) ;
23063: LD_ADDR_VAR 0 14
23067: PUSH
23068: LD_VAR 0 14
23072: PPUSH
23073: LD_VAR 0 14
23077: PUSH
23078: LD_INT 1
23080: PLUS
23081: PPUSH
23082: LD_INT 2
23084: PPUSH
23085: CALL_OW 1
23089: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23090: LD_VAR 0 9
23094: PPUSH
23095: LD_VAR 0 13
23099: PPUSH
23100: CALL_OW 325
23104: IFFALSE 23128
23106: PUSH
23107: LD_VAR 0 10
23111: PPUSH
23112: CALL_OW 255
23116: PPUSH
23117: LD_VAR 0 13
23121: PPUSH
23122: CALL_OW 325
23126: NOT
23127: AND
23128: IFFALSE 23157
// missile := Replace ( missile , missile + 1 , 3 ) ;
23130: LD_ADDR_VAR 0 14
23134: PUSH
23135: LD_VAR 0 14
23139: PPUSH
23140: LD_VAR 0 14
23144: PUSH
23145: LD_INT 1
23147: PLUS
23148: PPUSH
23149: LD_INT 3
23151: PPUSH
23152: CALL_OW 1
23156: ST_TO_ADDR
// if missile < 2 then
23157: LD_VAR 0 14
23161: PUSH
23162: LD_INT 2
23164: LESS
23165: IFFALSE 23169
// exit ;
23167: GO 23391
// x := GetX ( enemy ) ;
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_VAR 0 10
23178: PPUSH
23179: CALL_OW 250
23183: ST_TO_ADDR
// y := GetY ( enemy ) ;
23184: LD_ADDR_VAR 0 5
23188: PUSH
23189: LD_VAR 0 10
23193: PPUSH
23194: CALL_OW 251
23198: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23199: LD_ADDR_VAR 0 6
23203: PUSH
23204: LD_VAR 0 4
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PPUSH
23213: LD_INT 1
23215: PPUSH
23216: CALL_OW 12
23220: PLUS
23221: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23222: LD_ADDR_VAR 0 7
23226: PUSH
23227: LD_VAR 0 5
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 12
23243: PLUS
23244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23245: LD_VAR 0 6
23249: PPUSH
23250: LD_VAR 0 7
23254: PPUSH
23255: CALL_OW 488
23259: NOT
23260: IFFALSE 23282
// begin _x := x ;
23262: LD_ADDR_VAR 0 6
23266: PUSH
23267: LD_VAR 0 4
23271: ST_TO_ADDR
// _y := y ;
23272: LD_ADDR_VAR 0 7
23276: PUSH
23277: LD_VAR 0 5
23281: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23282: LD_ADDR_VAR 0 3
23286: PUSH
23287: LD_INT 1
23289: PPUSH
23290: LD_VAR 0 14
23294: PPUSH
23295: CALL_OW 12
23299: ST_TO_ADDR
// case i of 1 :
23300: LD_VAR 0 3
23304: PUSH
23305: LD_INT 1
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23330
23313: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23314: LD_VAR 0 1
23318: PPUSH
23319: LD_VAR 0 10
23323: PPUSH
23324: CALL_OW 115
23328: GO 23391
23330: LD_INT 2
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23360
23338: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23339: LD_VAR 0 1
23343: PPUSH
23344: LD_VAR 0 6
23348: PPUSH
23349: LD_VAR 0 7
23353: PPUSH
23354: CALL_OW 153
23358: GO 23391
23360: LD_INT 3
23362: DOUBLE
23363: EQUAL
23364: IFTRUE 23368
23366: GO 23390
23368: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23369: LD_VAR 0 1
23373: PPUSH
23374: LD_VAR 0 6
23378: PPUSH
23379: LD_VAR 0 7
23383: PPUSH
23384: CALL_OW 154
23388: GO 23391
23390: POP
// end ;
23391: LD_VAR 0 2
23395: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
// if not unit or not building then
23404: LD_VAR 0 1
23408: NOT
23409: IFTRUE 23418
23411: PUSH
23412: LD_VAR 0 2
23416: NOT
23417: OR
23418: IFFALSE 23422
// exit ;
23420: GO 23580
// x := GetX ( building ) ;
23422: LD_ADDR_VAR 0 5
23426: PUSH
23427: LD_VAR 0 2
23431: PPUSH
23432: CALL_OW 250
23436: ST_TO_ADDR
// y := GetY ( building ) ;
23437: LD_ADDR_VAR 0 6
23441: PUSH
23442: LD_VAR 0 2
23446: PPUSH
23447: CALL_OW 251
23451: ST_TO_ADDR
// for i := 0 to 5 do
23452: LD_ADDR_VAR 0 4
23456: PUSH
23457: DOUBLE
23458: LD_INT 0
23460: DEC
23461: ST_TO_ADDR
23462: LD_INT 5
23464: PUSH
23465: FOR_TO
23466: IFFALSE 23578
// begin _x := ShiftX ( x , i , 3 ) ;
23468: LD_ADDR_VAR 0 7
23472: PUSH
23473: LD_VAR 0 5
23477: PPUSH
23478: LD_VAR 0 4
23482: PPUSH
23483: LD_INT 3
23485: PPUSH
23486: CALL_OW 272
23490: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23491: LD_ADDR_VAR 0 8
23495: PUSH
23496: LD_VAR 0 6
23500: PPUSH
23501: LD_VAR 0 4
23505: PPUSH
23506: LD_INT 3
23508: PPUSH
23509: CALL_OW 273
23513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23514: LD_VAR 0 7
23518: PPUSH
23519: LD_VAR 0 8
23523: PPUSH
23524: CALL_OW 488
23528: NOT
23529: IFFALSE 23533
// continue ;
23531: GO 23465
// if HexInfo ( _x , _y ) = 0 then
23533: LD_VAR 0 7
23537: PPUSH
23538: LD_VAR 0 8
23542: PPUSH
23543: CALL_OW 428
23547: PUSH
23548: LD_INT 0
23550: EQUAL
23551: IFFALSE 23576
// begin ComMoveXY ( unit , _x , _y ) ;
23553: LD_VAR 0 1
23557: PPUSH
23558: LD_VAR 0 7
23562: PPUSH
23563: LD_VAR 0 8
23567: PPUSH
23568: CALL_OW 111
// exit ;
23572: POP
23573: POP
23574: GO 23580
// end ; end ;
23576: GO 23465
23578: POP
23579: POP
// end ;
23580: LD_VAR 0 3
23584: RET
// export function ScanBase ( side , base_area ) ; begin
23585: LD_INT 0
23587: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23588: LD_ADDR_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: LD_INT 81
23600: PUSH
23601: LD_VAR 0 1
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PPUSH
23610: CALL_OW 70
23614: ST_TO_ADDR
// end ;
23615: LD_VAR 0 3
23619: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23620: LD_INT 0
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
// result := false ;
23626: LD_ADDR_VAR 0 2
23630: PUSH
23631: LD_INT 0
23633: ST_TO_ADDR
// side := GetSide ( unit ) ;
23634: LD_ADDR_VAR 0 3
23638: PUSH
23639: LD_VAR 0 1
23643: PPUSH
23644: CALL_OW 255
23648: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_VAR 0 1
23658: PPUSH
23659: CALL_OW 248
23663: ST_TO_ADDR
// case nat of 1 :
23664: LD_VAR 0 4
23668: PUSH
23669: LD_INT 1
23671: DOUBLE
23672: EQUAL
23673: IFTRUE 23677
23675: GO 23688
23677: POP
// tech := tech_lassight ; 2 :
23678: LD_ADDR_VAR 0 5
23682: PUSH
23683: LD_INT 12
23685: ST_TO_ADDR
23686: GO 23727
23688: LD_INT 2
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23707
23696: POP
// tech := tech_mortar ; 3 :
23697: LD_ADDR_VAR 0 5
23701: PUSH
23702: LD_INT 41
23704: ST_TO_ADDR
23705: GO 23727
23707: LD_INT 3
23709: DOUBLE
23710: EQUAL
23711: IFTRUE 23715
23713: GO 23726
23715: POP
// tech := tech_bazooka ; end ;
23716: LD_ADDR_VAR 0 5
23720: PUSH
23721: LD_INT 44
23723: ST_TO_ADDR
23724: GO 23727
23726: POP
// if Researched ( side , tech ) then
23727: LD_VAR 0 3
23731: PPUSH
23732: LD_VAR 0 5
23736: PPUSH
23737: CALL_OW 325
23741: IFFALSE 23768
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23743: LD_ADDR_VAR 0 2
23747: PUSH
23748: LD_INT 5
23750: PUSH
23751: LD_INT 8
23753: PUSH
23754: LD_INT 9
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: PUSH
23762: LD_VAR 0 4
23766: ARRAY
23767: ST_TO_ADDR
// end ;
23768: LD_VAR 0 2
23772: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23773: LD_INT 0
23775: PPUSH
23776: PPUSH
23777: PPUSH
// if not mines then
23778: LD_VAR 0 2
23782: NOT
23783: IFFALSE 23787
// exit ;
23785: GO 23931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23787: LD_ADDR_VAR 0 5
23791: PUSH
23792: LD_INT 81
23794: PUSH
23795: LD_VAR 0 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: LD_INT 21
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PPUSH
23825: CALL_OW 69
23829: ST_TO_ADDR
// for i in mines do
23830: LD_ADDR_VAR 0 4
23834: PUSH
23835: LD_VAR 0 2
23839: PUSH
23840: FOR_IN
23841: IFFALSE 23929
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23843: LD_VAR 0 4
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: LD_VAR 0 4
23856: PUSH
23857: LD_INT 2
23859: ARRAY
23860: PPUSH
23861: CALL_OW 458
23865: NOT
23866: IFFALSE 23870
// continue ;
23868: GO 23840
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23870: LD_VAR 0 4
23874: PUSH
23875: LD_INT 1
23877: ARRAY
23878: PPUSH
23879: LD_VAR 0 4
23883: PUSH
23884: LD_INT 2
23886: ARRAY
23887: PPUSH
23888: CALL_OW 428
23892: PUSH
23893: LD_VAR 0 5
23897: IN
23898: IFFALSE 23927
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23900: LD_VAR 0 4
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: LD_VAR 0 4
23913: PUSH
23914: LD_INT 2
23916: ARRAY
23917: PPUSH
23918: LD_VAR 0 1
23922: PPUSH
23923: CALL_OW 456
// end ;
23927: GO 23840
23929: POP
23930: POP
// end ;
23931: LD_VAR 0 3
23935: RET
// export function Count ( array ) ; begin
23936: LD_INT 0
23938: PPUSH
// result := array + 0 ;
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: LD_VAR 0 1
23948: PUSH
23949: LD_INT 0
23951: PLUS
23952: ST_TO_ADDR
// end ;
23953: LD_VAR 0 2
23957: RET
// export function IsEmpty ( building ) ; begin
23958: LD_INT 0
23960: PPUSH
// if not building then
23961: LD_VAR 0 1
23965: NOT
23966: IFFALSE 23970
// exit ;
23968: GO 24013
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23970: LD_ADDR_VAR 0 2
23974: PUSH
23975: LD_VAR 0 1
23979: PUSH
23980: LD_INT 22
23982: PUSH
23983: LD_VAR 0 1
23987: PPUSH
23988: CALL_OW 255
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 58
23999: PUSH
24000: EMPTY
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: IN
24012: ST_TO_ADDR
// end ;
24013: LD_VAR 0 2
24017: RET
// export function IsNotFull ( building ) ; var places ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
// if not building then
24022: LD_VAR 0 1
24026: NOT
24027: IFFALSE 24031
// exit ;
24029: GO 24059
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24031: LD_ADDR_VAR 0 2
24035: PUSH
24036: LD_VAR 0 1
24040: PPUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 62
24046: PUSH
24047: EMPTY
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 72
24058: ST_TO_ADDR
// end ;
24059: LD_VAR 0 2
24063: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
24068: PPUSH
24069: PPUSH
// tmp := [ ] ;
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: EMPTY
24076: ST_TO_ADDR
// list := [ ] ;
24077: LD_ADDR_VAR 0 5
24081: PUSH
24082: EMPTY
24083: ST_TO_ADDR
// for i = 16 to 25 do
24084: LD_ADDR_VAR 0 4
24088: PUSH
24089: DOUBLE
24090: LD_INT 16
24092: DEC
24093: ST_TO_ADDR
24094: LD_INT 25
24096: PUSH
24097: FOR_TO
24098: IFFALSE 24171
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24100: LD_ADDR_VAR 0 3
24104: PUSH
24105: LD_VAR 0 3
24109: PUSH
24110: LD_INT 22
24112: PUSH
24113: LD_VAR 0 1
24117: PPUSH
24118: CALL_OW 255
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 91
24129: PUSH
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 6
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_VAR 0 4
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: ADD
24168: ST_TO_ADDR
24169: GO 24097
24171: POP
24172: POP
// for i = 1 to tmp do
24173: LD_ADDR_VAR 0 4
24177: PUSH
24178: DOUBLE
24179: LD_INT 1
24181: DEC
24182: ST_TO_ADDR
24183: LD_VAR 0 3
24187: PUSH
24188: FOR_TO
24189: IFFALSE 24277
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24191: LD_ADDR_VAR 0 5
24195: PUSH
24196: LD_VAR 0 5
24200: PUSH
24201: LD_VAR 0 3
24205: PUSH
24206: LD_VAR 0 4
24210: ARRAY
24211: PPUSH
24212: CALL_OW 266
24216: PUSH
24217: LD_VAR 0 3
24221: PUSH
24222: LD_VAR 0 4
24226: ARRAY
24227: PPUSH
24228: CALL_OW 250
24232: PUSH
24233: LD_VAR 0 3
24237: PUSH
24238: LD_VAR 0 4
24242: ARRAY
24243: PPUSH
24244: CALL_OW 251
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_VAR 0 4
24258: ARRAY
24259: PPUSH
24260: CALL_OW 254
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: ADD
24274: ST_TO_ADDR
24275: GO 24188
24277: POP
24278: POP
// result := list ;
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_VAR 0 5
24288: ST_TO_ADDR
// end ;
24289: LD_VAR 0 2
24293: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
24298: PPUSH
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
// if not factory then
24303: LD_VAR 0 1
24307: NOT
24308: IFFALSE 24312
// exit ;
24310: GO 24915
// if control = control_apeman then
24312: LD_VAR 0 4
24316: PUSH
24317: LD_INT 5
24319: EQUAL
24320: IFFALSE 24429
// begin tmp := UnitsInside ( factory ) ;
24322: LD_ADDR_VAR 0 8
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: CALL_OW 313
24336: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24337: LD_VAR 0 8
24341: PPUSH
24342: LD_INT 25
24344: PUSH
24345: LD_INT 12
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PPUSH
24352: CALL_OW 72
24356: NOT
24357: IFFALSE 24367
// control := control_manual ;
24359: LD_ADDR_VAR 0 4
24363: PUSH
24364: LD_INT 1
24366: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24367: LD_ADDR_VAR 0 8
24371: PUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL 24064 0 1
24381: ST_TO_ADDR
// if tmp then
24382: LD_VAR 0 8
24386: IFFALSE 24429
// begin for i in tmp do
24388: LD_ADDR_VAR 0 7
24392: PUSH
24393: LD_VAR 0 8
24397: PUSH
24398: FOR_IN
24399: IFFALSE 24427
// if i [ 1 ] = b_ext_radio then
24401: LD_VAR 0 7
24405: PUSH
24406: LD_INT 1
24408: ARRAY
24409: PUSH
24410: LD_INT 22
24412: EQUAL
24413: IFFALSE 24425
// begin control := control_remote ;
24415: LD_ADDR_VAR 0 4
24419: PUSH
24420: LD_INT 2
24422: ST_TO_ADDR
// break ;
24423: GO 24427
// end ;
24425: GO 24398
24427: POP
24428: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24429: LD_VAR 0 1
24433: PPUSH
24434: LD_VAR 0 2
24438: PPUSH
24439: LD_VAR 0 3
24443: PPUSH
24444: LD_VAR 0 4
24448: PPUSH
24449: LD_VAR 0 5
24453: PPUSH
24454: CALL_OW 448
24458: IFFALSE 24493
// begin result := [ chassis , engine , control , weapon ] ;
24460: LD_ADDR_VAR 0 6
24464: PUSH
24465: LD_VAR 0 2
24469: PUSH
24470: LD_VAR 0 3
24474: PUSH
24475: LD_VAR 0 4
24479: PUSH
24480: LD_VAR 0 5
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: ST_TO_ADDR
// exit ;
24491: GO 24915
// end ; _chassis := AvailableChassisList ( factory ) ;
24493: LD_ADDR_VAR 0 9
24497: PUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 475
24507: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24508: LD_ADDR_VAR 0 11
24512: PUSH
24513: LD_VAR 0 1
24517: PPUSH
24518: CALL_OW 476
24522: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24523: LD_ADDR_VAR 0 12
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 477
24537: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24538: LD_ADDR_VAR 0 10
24542: PUSH
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 478
24552: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24553: LD_VAR 0 9
24557: NOT
24558: IFTRUE 24567
24560: PUSH
24561: LD_VAR 0 11
24565: NOT
24566: OR
24567: IFTRUE 24576
24569: PUSH
24570: LD_VAR 0 12
24574: NOT
24575: OR
24576: IFTRUE 24585
24578: PUSH
24579: LD_VAR 0 10
24583: NOT
24584: OR
24585: IFFALSE 24620
// begin result := [ chassis , engine , control , weapon ] ;
24587: LD_ADDR_VAR 0 6
24591: PUSH
24592: LD_VAR 0 2
24596: PUSH
24597: LD_VAR 0 3
24601: PUSH
24602: LD_VAR 0 4
24606: PUSH
24607: LD_VAR 0 5
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: ST_TO_ADDR
// exit ;
24618: GO 24915
// end ; if not chassis in _chassis then
24620: LD_VAR 0 2
24624: PUSH
24625: LD_VAR 0 9
24629: IN
24630: NOT
24631: IFFALSE 24657
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_VAR 0 9
24642: PUSH
24643: LD_INT 1
24645: PPUSH
24646: LD_VAR 0 9
24650: PPUSH
24651: CALL_OW 12
24655: ARRAY
24656: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24657: LD_VAR 0 2
24661: PPUSH
24662: LD_VAR 0 3
24666: PPUSH
24667: CALL 24920 0 2
24671: NOT
24672: IFFALSE 24733
// repeat engine := _engine [ 1 ] ;
24674: LD_ADDR_VAR 0 3
24678: PUSH
24679: LD_VAR 0 11
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24688: LD_ADDR_VAR 0 11
24692: PUSH
24693: LD_VAR 0 11
24697: PPUSH
24698: LD_INT 1
24700: PPUSH
24701: CALL_OW 3
24705: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: CALL 24920 0 2
24720: IFTRUE 24731
24722: PUSH
24723: LD_VAR 0 11
24727: PUSH
24728: EMPTY
24729: EQUAL
24730: OR
24731: IFFALSE 24674
// if not control in _control then
24733: LD_VAR 0 4
24737: PUSH
24738: LD_VAR 0 12
24742: IN
24743: NOT
24744: IFFALSE 24770
// control := _control [ rand ( 1 , _control ) ] ;
24746: LD_ADDR_VAR 0 4
24750: PUSH
24751: LD_VAR 0 12
24755: PUSH
24756: LD_INT 1
24758: PPUSH
24759: LD_VAR 0 12
24763: PPUSH
24764: CALL_OW 12
24768: ARRAY
24769: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24770: LD_VAR 0 2
24774: PPUSH
24775: LD_VAR 0 5
24779: PPUSH
24780: CALL 25142 0 2
24784: NOT
24785: IFFALSE 24846
// repeat weapon := _weapon [ 1 ] ;
24787: LD_ADDR_VAR 0 5
24791: PUSH
24792: LD_VAR 0 10
24796: PUSH
24797: LD_INT 1
24799: ARRAY
24800: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24801: LD_ADDR_VAR 0 10
24805: PUSH
24806: LD_VAR 0 10
24810: PPUSH
24811: LD_INT 1
24813: PPUSH
24814: CALL_OW 3
24818: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_VAR 0 5
24828: PPUSH
24829: CALL 25142 0 2
24833: IFTRUE 24844
24835: PUSH
24836: LD_VAR 0 10
24840: PUSH
24841: EMPTY
24842: EQUAL
24843: OR
24844: IFFALSE 24787
// result := [ ] ;
24846: LD_ADDR_VAR 0 6
24850: PUSH
24851: EMPTY
24852: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: LD_VAR 0 5
24877: PPUSH
24878: CALL_OW 448
24882: IFFALSE 24915
// result := [ chassis , engine , control , weapon ] ;
24884: LD_ADDR_VAR 0 6
24888: PUSH
24889: LD_VAR 0 2
24893: PUSH
24894: LD_VAR 0 3
24898: PUSH
24899: LD_VAR 0 4
24903: PUSH
24904: LD_VAR 0 5
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
// end ;
24915: LD_VAR 0 6
24919: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24920: LD_INT 0
24922: PPUSH
// if not chassis or not engine then
24923: LD_VAR 0 1
24927: NOT
24928: IFTRUE 24937
24930: PUSH
24931: LD_VAR 0 2
24935: NOT
24936: OR
24937: IFFALSE 24941
// exit ;
24939: GO 25137
// case engine of engine_solar :
24941: LD_VAR 0 2
24945: PUSH
24946: LD_INT 2
24948: DOUBLE
24949: EQUAL
24950: IFTRUE 24954
24952: GO 24992
24954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_INT 11
24962: PUSH
24963: LD_INT 12
24965: PUSH
24966: LD_INT 13
24968: PUSH
24969: LD_INT 14
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25121
24992: LD_INT 1
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25062
25000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 11
25008: PUSH
25009: LD_INT 12
25011: PUSH
25012: LD_INT 13
25014: PUSH
25015: LD_INT 14
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 4
25029: PUSH
25030: LD_INT 5
25032: PUSH
25033: LD_INT 21
25035: PUSH
25036: LD_INT 23
25038: PUSH
25039: LD_INT 22
25041: PUSH
25042: LD_INT 24
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: ST_TO_ADDR
25060: GO 25121
25062: LD_INT 3
25064: DOUBLE
25065: EQUAL
25066: IFTRUE 25070
25068: GO 25120
25070: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_INT 13
25078: PUSH
25079: LD_INT 14
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: LD_INT 4
25090: PUSH
25091: LD_INT 5
25093: PUSH
25094: LD_INT 21
25096: PUSH
25097: LD_INT 22
25099: PUSH
25100: LD_INT 23
25102: PUSH
25103: LD_INT 24
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 25121
25120: POP
// result := ( chassis in result ) ;
25121: LD_ADDR_VAR 0 3
25125: PUSH
25126: LD_VAR 0 1
25130: PUSH
25131: LD_VAR 0 3
25135: IN
25136: ST_TO_ADDR
// end ;
25137: LD_VAR 0 3
25141: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25142: LD_INT 0
25144: PPUSH
// if not chassis or not weapon then
25145: LD_VAR 0 1
25149: NOT
25150: IFTRUE 25159
25152: PUSH
25153: LD_VAR 0 2
25157: NOT
25158: OR
25159: IFFALSE 25163
// exit ;
25161: GO 26223
// case weapon of us_machine_gun :
25163: LD_VAR 0 2
25167: PUSH
25168: LD_INT 2
25170: DOUBLE
25171: EQUAL
25172: IFTRUE 25176
25174: GO 25206
25176: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25177: LD_ADDR_VAR 0 3
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 4
25193: PUSH
25194: LD_INT 5
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
25204: GO 26207
25206: LD_INT 3
25208: DOUBLE
25209: EQUAL
25210: IFTRUE 25214
25212: GO 25244
25214: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: LD_INT 3
25228: PUSH
25229: LD_INT 4
25231: PUSH
25232: LD_INT 5
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: ST_TO_ADDR
25242: GO 26207
25244: LD_INT 11
25246: DOUBLE
25247: EQUAL
25248: IFTRUE 25252
25250: GO 25282
25252: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 2
25263: PUSH
25264: LD_INT 3
25266: PUSH
25267: LD_INT 4
25269: PUSH
25270: LD_INT 5
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
25280: GO 26207
25282: LD_INT 4
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: LD_INT 4
25304: PUSH
25305: LD_INT 5
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 26207
25316: LD_INT 5
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25350
25324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: LD_INT 4
25338: PUSH
25339: LD_INT 5
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: ST_TO_ADDR
25348: GO 26207
25350: LD_INT 9
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25384
25358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25359: LD_ADDR_VAR 0 3
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: LD_INT 4
25372: PUSH
25373: LD_INT 5
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
25382: GO 26207
25384: LD_INT 7
25386: DOUBLE
25387: EQUAL
25388: IFTRUE 25392
25390: GO 25418
25392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: LD_INT 4
25406: PUSH
25407: LD_INT 5
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 26207
25418: LD_INT 12
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25452
25426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: LD_INT 4
25440: PUSH
25441: LD_INT 5
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 26207
25452: LD_INT 13
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25486
25460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: LD_INT 4
25474: PUSH
25475: LD_INT 5
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: ST_TO_ADDR
25484: GO 26207
25486: LD_INT 14
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25512
25494: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 4
25502: PUSH
25503: LD_INT 5
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 26207
25512: LD_INT 6
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25538
25520: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 4
25528: PUSH
25529: LD_INT 5
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: ST_TO_ADDR
25536: GO 26207
25538: LD_INT 10
25540: DOUBLE
25541: EQUAL
25542: IFTRUE 25546
25544: GO 25564
25546: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_INT 4
25554: PUSH
25555: LD_INT 5
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: ST_TO_ADDR
25562: GO 26207
25564: LD_INT 22
25566: DOUBLE
25567: EQUAL
25568: IFTRUE 25572
25570: GO 25598
25572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25573: LD_ADDR_VAR 0 3
25577: PUSH
25578: LD_INT 11
25580: PUSH
25581: LD_INT 12
25583: PUSH
25584: LD_INT 13
25586: PUSH
25587: LD_INT 14
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: ST_TO_ADDR
25596: GO 26207
25598: LD_INT 23
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25632
25606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_INT 11
25614: PUSH
25615: LD_INT 12
25617: PUSH
25618: LD_INT 13
25620: PUSH
25621: LD_INT 14
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
25630: GO 26207
25632: LD_INT 24
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25666
25640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25641: LD_ADDR_VAR 0 3
25645: PUSH
25646: LD_INT 11
25648: PUSH
25649: LD_INT 12
25651: PUSH
25652: LD_INT 13
25654: PUSH
25655: LD_INT 14
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
25664: GO 26207
25666: LD_INT 30
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25700
25674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_INT 11
25682: PUSH
25683: LD_INT 12
25685: PUSH
25686: LD_INT 13
25688: PUSH
25689: LD_INT 14
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: ST_TO_ADDR
25698: GO 26207
25700: LD_INT 25
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25726
25708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25709: LD_ADDR_VAR 0 3
25713: PUSH
25714: LD_INT 13
25716: PUSH
25717: LD_INT 14
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: ST_TO_ADDR
25724: GO 26207
25726: LD_INT 27
25728: DOUBLE
25729: EQUAL
25730: IFTRUE 25734
25732: GO 25752
25734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25735: LD_ADDR_VAR 0 3
25739: PUSH
25740: LD_INT 13
25742: PUSH
25743: LD_INT 14
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: ST_TO_ADDR
25750: GO 26207
25752: LD_INT 92
25754: DOUBLE
25755: EQUAL
25756: IFTRUE 25760
25758: GO 25786
25760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_INT 11
25768: PUSH
25769: LD_INT 12
25771: PUSH
25772: LD_INT 13
25774: PUSH
25775: LD_INT 14
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: ST_TO_ADDR
25784: GO 26207
25786: LD_INT 28
25788: DOUBLE
25789: EQUAL
25790: IFTRUE 25794
25792: GO 25812
25794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25795: LD_ADDR_VAR 0 3
25799: PUSH
25800: LD_INT 13
25802: PUSH
25803: LD_INT 14
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 26207
25812: LD_INT 29
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25838
25820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_INT 13
25828: PUSH
25829: LD_INT 14
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: ST_TO_ADDR
25836: GO 26207
25838: LD_INT 31
25840: DOUBLE
25841: EQUAL
25842: IFTRUE 25846
25844: GO 25864
25846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25847: LD_ADDR_VAR 0 3
25851: PUSH
25852: LD_INT 13
25854: PUSH
25855: LD_INT 14
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: ST_TO_ADDR
25862: GO 26207
25864: LD_INT 26
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 25890
25872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: LD_INT 13
25880: PUSH
25881: LD_INT 14
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: ST_TO_ADDR
25888: GO 26207
25890: LD_INT 42
25892: DOUBLE
25893: EQUAL
25894: IFTRUE 25898
25896: GO 25924
25898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25899: LD_ADDR_VAR 0 3
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 22
25909: PUSH
25910: LD_INT 23
25912: PUSH
25913: LD_INT 24
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: ST_TO_ADDR
25922: GO 26207
25924: LD_INT 43
25926: DOUBLE
25927: EQUAL
25928: IFTRUE 25932
25930: GO 25958
25932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_INT 21
25940: PUSH
25941: LD_INT 22
25943: PUSH
25944: LD_INT 23
25946: PUSH
25947: LD_INT 24
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: ST_TO_ADDR
25956: GO 26207
25958: LD_INT 44
25960: DOUBLE
25961: EQUAL
25962: IFTRUE 25966
25964: GO 25992
25966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25967: LD_ADDR_VAR 0 3
25971: PUSH
25972: LD_INT 21
25974: PUSH
25975: LD_INT 22
25977: PUSH
25978: LD_INT 23
25980: PUSH
25981: LD_INT 24
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: ST_TO_ADDR
25990: GO 26207
25992: LD_INT 45
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26026
26000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 21
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_INT 23
26014: PUSH
26015: LD_INT 24
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: ST_TO_ADDR
26024: GO 26207
26026: LD_INT 49
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26060
26034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 21
26042: PUSH
26043: LD_INT 22
26045: PUSH
26046: LD_INT 23
26048: PUSH
26049: LD_INT 24
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26207
26060: LD_INT 51
26062: DOUBLE
26063: EQUAL
26064: IFTRUE 26068
26066: GO 26094
26068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 21
26076: PUSH
26077: LD_INT 22
26079: PUSH
26080: LD_INT 23
26082: PUSH
26083: LD_INT 24
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
26092: GO 26207
26094: LD_INT 52
26096: DOUBLE
26097: EQUAL
26098: IFTRUE 26102
26100: GO 26128
26102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: LD_INT 21
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 23
26116: PUSH
26117: LD_INT 24
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
26126: GO 26207
26128: LD_INT 53
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26154
26136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: LD_INT 23
26144: PUSH
26145: LD_INT 24
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: ST_TO_ADDR
26152: GO 26207
26154: LD_INT 46
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26180
26162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_INT 23
26170: PUSH
26171: LD_INT 24
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: ST_TO_ADDR
26178: GO 26207
26180: LD_INT 47
26182: DOUBLE
26183: EQUAL
26184: IFTRUE 26188
26186: GO 26206
26188: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26189: LD_ADDR_VAR 0 3
26193: PUSH
26194: LD_INT 23
26196: PUSH
26197: LD_INT 24
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: ST_TO_ADDR
26204: GO 26207
26206: POP
// result := ( chassis in result ) ;
26207: LD_ADDR_VAR 0 3
26211: PUSH
26212: LD_VAR 0 1
26216: PUSH
26217: LD_VAR 0 3
26221: IN
26222: ST_TO_ADDR
// end ;
26223: LD_VAR 0 3
26227: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26228: LD_INT 0
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
// result := array ;
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 1
26246: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26247: LD_VAR 0 1
26251: NOT
26252: IFTRUE 26261
26254: PUSH
26255: LD_VAR 0 2
26259: NOT
26260: OR
26261: IFTRUE 26270
26263: PUSH
26264: LD_VAR 0 3
26268: NOT
26269: OR
26270: IFTRUE 26284
26272: PUSH
26273: LD_VAR 0 2
26277: PUSH
26278: LD_VAR 0 1
26282: GREATER
26283: OR
26284: IFTRUE 26298
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 1
26296: GREATER
26297: OR
26298: IFFALSE 26302
// exit ;
26300: GO 26598
// if direction then
26302: LD_VAR 0 4
26306: IFFALSE 26370
// begin d := 1 ;
26308: LD_ADDR_VAR 0 9
26312: PUSH
26313: LD_INT 1
26315: ST_TO_ADDR
// if i_from > i_to then
26316: LD_VAR 0 2
26320: PUSH
26321: LD_VAR 0 3
26325: GREATER
26326: IFFALSE 26352
// length := ( array - i_from ) + i_to else
26328: LD_ADDR_VAR 0 11
26332: PUSH
26333: LD_VAR 0 1
26337: PUSH
26338: LD_VAR 0 2
26342: MINUS
26343: PUSH
26344: LD_VAR 0 3
26348: PLUS
26349: ST_TO_ADDR
26350: GO 26368
// length := i_to - i_from ;
26352: LD_ADDR_VAR 0 11
26356: PUSH
26357: LD_VAR 0 3
26361: PUSH
26362: LD_VAR 0 2
26366: MINUS
26367: ST_TO_ADDR
// end else
26368: GO 26431
// begin d := - 1 ;
26370: LD_ADDR_VAR 0 9
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: ST_TO_ADDR
// if i_from > i_to then
26379: LD_VAR 0 2
26383: PUSH
26384: LD_VAR 0 3
26388: GREATER
26389: IFFALSE 26409
// length := i_from - i_to else
26391: LD_ADDR_VAR 0 11
26395: PUSH
26396: LD_VAR 0 2
26400: PUSH
26401: LD_VAR 0 3
26405: MINUS
26406: ST_TO_ADDR
26407: GO 26431
// length := ( array - i_to ) + i_from ;
26409: LD_ADDR_VAR 0 11
26413: PUSH
26414: LD_VAR 0 1
26418: PUSH
26419: LD_VAR 0 3
26423: MINUS
26424: PUSH
26425: LD_VAR 0 2
26429: PLUS
26430: ST_TO_ADDR
// end ; if not length then
26431: LD_VAR 0 11
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 26598
// tmp := array ;
26440: LD_ADDR_VAR 0 10
26444: PUSH
26445: LD_VAR 0 1
26449: ST_TO_ADDR
// for i = 1 to length do
26450: LD_ADDR_VAR 0 6
26454: PUSH
26455: DOUBLE
26456: LD_INT 1
26458: DEC
26459: ST_TO_ADDR
26460: LD_VAR 0 11
26464: PUSH
26465: FOR_TO
26466: IFFALSE 26586
// begin for j = 1 to array do
26468: LD_ADDR_VAR 0 7
26472: PUSH
26473: DOUBLE
26474: LD_INT 1
26476: DEC
26477: ST_TO_ADDR
26478: LD_VAR 0 1
26482: PUSH
26483: FOR_TO
26484: IFFALSE 26572
// begin k := j + d ;
26486: LD_ADDR_VAR 0 8
26490: PUSH
26491: LD_VAR 0 7
26495: PUSH
26496: LD_VAR 0 9
26500: PLUS
26501: ST_TO_ADDR
// if k > array then
26502: LD_VAR 0 8
26506: PUSH
26507: LD_VAR 0 1
26511: GREATER
26512: IFFALSE 26522
// k := 1 ;
26514: LD_ADDR_VAR 0 8
26518: PUSH
26519: LD_INT 1
26521: ST_TO_ADDR
// if not k then
26522: LD_VAR 0 8
26526: NOT
26527: IFFALSE 26539
// k := array ;
26529: LD_ADDR_VAR 0 8
26533: PUSH
26534: LD_VAR 0 1
26538: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26539: LD_ADDR_VAR 0 10
26543: PUSH
26544: LD_VAR 0 10
26548: PPUSH
26549: LD_VAR 0 8
26553: PPUSH
26554: LD_VAR 0 1
26558: PUSH
26559: LD_VAR 0 7
26563: ARRAY
26564: PPUSH
26565: CALL_OW 1
26569: ST_TO_ADDR
// end ;
26570: GO 26483
26572: POP
26573: POP
// array := tmp ;
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_VAR 0 10
26583: ST_TO_ADDR
// end ;
26584: GO 26465
26586: POP
26587: POP
// result := array ;
26588: LD_ADDR_VAR 0 5
26592: PUSH
26593: LD_VAR 0 1
26597: ST_TO_ADDR
// end ;
26598: LD_VAR 0 5
26602: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26603: LD_INT 0
26605: PPUSH
26606: PPUSH
// result := 0 ;
26607: LD_ADDR_VAR 0 3
26611: PUSH
26612: LD_INT 0
26614: ST_TO_ADDR
// if not array or not value in array then
26615: LD_VAR 0 1
26619: NOT
26620: IFTRUE 26635
26622: PUSH
26623: LD_VAR 0 2
26627: PUSH
26628: LD_VAR 0 1
26632: IN
26633: NOT
26634: OR
26635: IFFALSE 26639
// exit ;
26637: GO 26693
// for i = 1 to array do
26639: LD_ADDR_VAR 0 4
26643: PUSH
26644: DOUBLE
26645: LD_INT 1
26647: DEC
26648: ST_TO_ADDR
26649: LD_VAR 0 1
26653: PUSH
26654: FOR_TO
26655: IFFALSE 26691
// if value = array [ i ] then
26657: LD_VAR 0 2
26661: PUSH
26662: LD_VAR 0 1
26666: PUSH
26667: LD_VAR 0 4
26671: ARRAY
26672: EQUAL
26673: IFFALSE 26689
// begin result := i ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_VAR 0 4
26684: ST_TO_ADDR
// exit ;
26685: POP
26686: POP
26687: GO 26693
// end ;
26689: GO 26654
26691: POP
26692: POP
// end ;
26693: LD_VAR 0 3
26697: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26698: LD_INT 0
26700: PPUSH
// vc_chassis := chassis ;
26701: LD_ADDR_OWVAR 37
26705: PUSH
26706: LD_VAR 0 1
26710: ST_TO_ADDR
// vc_engine := engine ;
26711: LD_ADDR_OWVAR 39
26715: PUSH
26716: LD_VAR 0 2
26720: ST_TO_ADDR
// vc_control := control ;
26721: LD_ADDR_OWVAR 38
26725: PUSH
26726: LD_VAR 0 3
26730: ST_TO_ADDR
// vc_weapon := weapon ;
26731: LD_ADDR_OWVAR 40
26735: PUSH
26736: LD_VAR 0 4
26740: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26741: LD_ADDR_OWVAR 41
26745: PUSH
26746: LD_VAR 0 5
26750: ST_TO_ADDR
// end ;
26751: LD_VAR 0 6
26755: RET
// export function WantPlant ( unit ) ; var task ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
// result := false ;
26760: LD_ADDR_VAR 0 2
26764: PUSH
26765: LD_INT 0
26767: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_VAR 0 1
26777: PPUSH
26778: CALL_OW 437
26782: ST_TO_ADDR
// if task then
26783: LD_VAR 0 3
26787: IFFALSE 26815
// if task [ 1 ] [ 1 ] = p then
26789: LD_VAR 0 3
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: PUSH
26798: LD_INT 1
26800: ARRAY
26801: PUSH
26802: LD_STRING p
26804: EQUAL
26805: IFFALSE 26815
// result := true ;
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: LD_INT 1
26814: ST_TO_ADDR
// end ;
26815: LD_VAR 0 2
26819: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26820: LD_INT 0
26822: PPUSH
26823: PPUSH
26824: PPUSH
26825: PPUSH
// if pos < 1 then
26826: LD_VAR 0 2
26830: PUSH
26831: LD_INT 1
26833: LESS
26834: IFFALSE 26838
// exit ;
26836: GO 27141
// if pos = 1 then
26838: LD_VAR 0 2
26842: PUSH
26843: LD_INT 1
26845: EQUAL
26846: IFFALSE 26879
// result := Replace ( arr , pos [ 1 ] , value ) else
26848: LD_ADDR_VAR 0 4
26852: PUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_VAR 0 2
26862: PUSH
26863: LD_INT 1
26865: ARRAY
26866: PPUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 1
26876: ST_TO_ADDR
26877: GO 27141
// begin tmp := arr ;
26879: LD_ADDR_VAR 0 6
26883: PUSH
26884: LD_VAR 0 1
26888: ST_TO_ADDR
// s_arr := [ tmp ] ;
26889: LD_ADDR_VAR 0 7
26893: PUSH
26894: LD_VAR 0 6
26898: PUSH
26899: EMPTY
26900: LIST
26901: ST_TO_ADDR
// for i = 1 to pos - 1 do
26902: LD_ADDR_VAR 0 5
26906: PUSH
26907: DOUBLE
26908: LD_INT 1
26910: DEC
26911: ST_TO_ADDR
26912: LD_VAR 0 2
26916: PUSH
26917: LD_INT 1
26919: MINUS
26920: PUSH
26921: FOR_TO
26922: IFFALSE 26967
// begin tmp := tmp [ pos [ i ] ] ;
26924: LD_ADDR_VAR 0 6
26928: PUSH
26929: LD_VAR 0 6
26933: PUSH
26934: LD_VAR 0 2
26938: PUSH
26939: LD_VAR 0 5
26943: ARRAY
26944: ARRAY
26945: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26946: LD_ADDR_VAR 0 7
26950: PUSH
26951: LD_VAR 0 7
26955: PUSH
26956: LD_VAR 0 6
26960: PUSH
26961: EMPTY
26962: LIST
26963: ADD
26964: ST_TO_ADDR
// end ;
26965: GO 26921
26967: POP
26968: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26969: LD_ADDR_VAR 0 6
26973: PUSH
26974: LD_VAR 0 6
26978: PPUSH
26979: LD_VAR 0 2
26983: PUSH
26984: LD_VAR 0 2
26988: ARRAY
26989: PPUSH
26990: LD_VAR 0 3
26994: PPUSH
26995: CALL_OW 1
26999: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27000: LD_ADDR_VAR 0 7
27004: PUSH
27005: LD_VAR 0 7
27009: PPUSH
27010: LD_VAR 0 7
27014: PPUSH
27015: LD_VAR 0 6
27019: PPUSH
27020: CALL_OW 1
27024: ST_TO_ADDR
// for i = s_arr downto 2 do
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: DOUBLE
27031: LD_VAR 0 7
27035: INC
27036: ST_TO_ADDR
27037: LD_INT 2
27039: PUSH
27040: FOR_DOWNTO
27041: IFFALSE 27125
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27043: LD_ADDR_VAR 0 6
27047: PUSH
27048: LD_VAR 0 7
27052: PUSH
27053: LD_VAR 0 5
27057: PUSH
27058: LD_INT 1
27060: MINUS
27061: ARRAY
27062: PPUSH
27063: LD_VAR 0 2
27067: PUSH
27068: LD_VAR 0 5
27072: PUSH
27073: LD_INT 1
27075: MINUS
27076: ARRAY
27077: PPUSH
27078: LD_VAR 0 7
27082: PUSH
27083: LD_VAR 0 5
27087: ARRAY
27088: PPUSH
27089: CALL_OW 1
27093: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27094: LD_ADDR_VAR 0 7
27098: PUSH
27099: LD_VAR 0 7
27103: PPUSH
27104: LD_VAR 0 5
27108: PUSH
27109: LD_INT 1
27111: MINUS
27112: PPUSH
27113: LD_VAR 0 6
27117: PPUSH
27118: CALL_OW 1
27122: ST_TO_ADDR
// end ;
27123: GO 27040
27125: POP
27126: POP
// result := s_arr [ 1 ] ;
27127: LD_ADDR_VAR 0 4
27131: PUSH
27132: LD_VAR 0 7
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: ST_TO_ADDR
// end ; end ;
27141: LD_VAR 0 4
27145: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
// if not list then
27150: LD_VAR 0 1
27154: NOT
27155: IFFALSE 27159
// exit ;
27157: GO 27250
// i := list [ pos1 ] ;
27159: LD_ADDR_VAR 0 5
27163: PUSH
27164: LD_VAR 0 1
27168: PUSH
27169: LD_VAR 0 2
27173: ARRAY
27174: ST_TO_ADDR
// if not i then
27175: LD_VAR 0 5
27179: NOT
27180: IFFALSE 27184
// exit ;
27182: GO 27250
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27184: LD_ADDR_VAR 0 1
27188: PUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: LD_VAR 0 2
27198: PPUSH
27199: LD_VAR 0 1
27203: PUSH
27204: LD_VAR 0 3
27208: ARRAY
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_VAR 0 3
27229: PPUSH
27230: LD_VAR 0 5
27234: PPUSH
27235: CALL_OW 1
27239: ST_TO_ADDR
// result := list ;
27240: LD_ADDR_VAR 0 4
27244: PUSH
27245: LD_VAR 0 1
27249: ST_TO_ADDR
// end ;
27250: LD_VAR 0 4
27254: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27255: LD_INT 0
27257: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27258: LD_ADDR_VAR 0 5
27262: PUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 250
27272: PPUSH
27273: LD_VAR 0 1
27277: PPUSH
27278: CALL_OW 251
27282: PPUSH
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: LD_VAR 0 4
27297: PPUSH
27298: CALL 27680 0 5
27302: ST_TO_ADDR
// end ;
27303: LD_VAR 0 5
27307: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// if not list or not unit then
27314: LD_VAR 0 2
27318: NOT
27319: IFTRUE 27328
27321: PUSH
27322: LD_VAR 0 1
27326: NOT
27327: OR
27328: IFFALSE 27332
// exit ;
27330: GO 27675
// result := [ ] ;
27332: LD_ADDR_VAR 0 5
27336: PUSH
27337: EMPTY
27338: ST_TO_ADDR
// for i in list do
27339: LD_ADDR_VAR 0 6
27343: PUSH
27344: LD_VAR 0 2
27348: PUSH
27349: FOR_IN
27350: IFFALSE 27568
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27352: LD_ADDR_VAR 0 8
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: LD_VAR 0 6
27366: PUSH
27367: LD_INT 1
27369: ARRAY
27370: PPUSH
27371: LD_VAR 0 6
27375: PUSH
27376: LD_INT 2
27378: ARRAY
27379: PPUSH
27380: CALL_OW 297
27384: ST_TO_ADDR
// if not Count ( result ) then
27385: LD_VAR 0 5
27389: PPUSH
27390: CALL 23936 0 1
27394: NOT
27395: IFFALSE 27428
// begin result := Join ( result , [ i , tmp ] ) ;
27397: LD_ADDR_VAR 0 5
27401: PUSH
27402: LD_VAR 0 5
27406: PPUSH
27407: LD_VAR 0 6
27411: PUSH
27412: LD_VAR 0 8
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL 59868 0 2
27425: ST_TO_ADDR
// continue ;
27426: GO 27349
// end ; if result [ result ] [ 2 ] <= tmp then
27428: LD_VAR 0 5
27432: PUSH
27433: LD_VAR 0 5
27437: ARRAY
27438: PUSH
27439: LD_INT 2
27441: ARRAY
27442: PUSH
27443: LD_VAR 0 8
27447: LESSEQUAL
27448: IFFALSE 27481
// result := Join ( result , [ i , tmp ] ) else
27450: LD_ADDR_VAR 0 5
27454: PUSH
27455: LD_VAR 0 5
27459: PPUSH
27460: LD_VAR 0 6
27464: PUSH
27465: LD_VAR 0 8
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL 59868 0 2
27478: ST_TO_ADDR
27479: GO 27566
// begin for j := 1 to Count ( result ) do
27481: LD_ADDR_VAR 0 7
27485: PUSH
27486: DOUBLE
27487: LD_INT 1
27489: DEC
27490: ST_TO_ADDR
27491: LD_VAR 0 5
27495: PPUSH
27496: CALL 23936 0 1
27500: PUSH
27501: FOR_TO
27502: IFFALSE 27564
// begin if tmp < result [ j ] [ 2 ] then
27504: LD_VAR 0 8
27508: PUSH
27509: LD_VAR 0 5
27513: PUSH
27514: LD_VAR 0 7
27518: ARRAY
27519: PUSH
27520: LD_INT 2
27522: ARRAY
27523: LESS
27524: IFFALSE 27562
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27526: LD_ADDR_VAR 0 5
27530: PUSH
27531: LD_VAR 0 5
27535: PPUSH
27536: LD_VAR 0 7
27540: PPUSH
27541: LD_VAR 0 6
27545: PUSH
27546: LD_VAR 0 8
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PPUSH
27555: CALL_OW 2
27559: ST_TO_ADDR
// break ;
27560: GO 27564
// end ; end ;
27562: GO 27501
27564: POP
27565: POP
// end ; end ;
27566: GO 27349
27568: POP
27569: POP
// if result and not asc then
27570: LD_VAR 0 5
27574: IFFALSE 27583
27576: PUSH
27577: LD_VAR 0 3
27581: NOT
27582: AND
27583: IFFALSE 27600
// result := ReverseArray ( result ) ;
27585: LD_ADDR_VAR 0 5
27589: PUSH
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL 54958 0 1
27599: ST_TO_ADDR
// tmp := [ ] ;
27600: LD_ADDR_VAR 0 8
27604: PUSH
27605: EMPTY
27606: ST_TO_ADDR
// if mode then
27607: LD_VAR 0 4
27611: IFFALSE 27675
// begin for i := 1 to result do
27613: LD_ADDR_VAR 0 6
27617: PUSH
27618: DOUBLE
27619: LD_INT 1
27621: DEC
27622: ST_TO_ADDR
27623: LD_VAR 0 5
27627: PUSH
27628: FOR_TO
27629: IFFALSE 27663
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27631: LD_ADDR_VAR 0 8
27635: PUSH
27636: LD_VAR 0 8
27640: PPUSH
27641: LD_VAR 0 5
27645: PUSH
27646: LD_VAR 0 6
27650: ARRAY
27651: PUSH
27652: LD_INT 1
27654: ARRAY
27655: PPUSH
27656: CALL 59868 0 2
27660: ST_TO_ADDR
27661: GO 27628
27663: POP
27664: POP
// result := tmp ;
27665: LD_ADDR_VAR 0 5
27669: PUSH
27670: LD_VAR 0 8
27674: ST_TO_ADDR
// end ; end ;
27675: LD_VAR 0 5
27679: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27680: LD_INT 0
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not list then
27686: LD_VAR 0 3
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 28085
// result := [ ] ;
27695: LD_ADDR_VAR 0 6
27699: PUSH
27700: EMPTY
27701: ST_TO_ADDR
// for i in list do
27702: LD_ADDR_VAR 0 7
27706: PUSH
27707: LD_VAR 0 3
27711: PUSH
27712: FOR_IN
27713: IFFALSE 27915
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27715: LD_ADDR_VAR 0 9
27719: PUSH
27720: LD_VAR 0 7
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: CALL_OW 297
27739: ST_TO_ADDR
// if not result then
27740: LD_VAR 0 6
27744: NOT
27745: IFFALSE 27771
// result := [ [ i , tmp ] ] else
27747: LD_ADDR_VAR 0 6
27751: PUSH
27752: LD_VAR 0 7
27756: PUSH
27757: LD_VAR 0 9
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: EMPTY
27767: LIST
27768: ST_TO_ADDR
27769: GO 27913
// begin if result [ result ] [ 2 ] <= tmp then
27771: LD_VAR 0 6
27775: PUSH
27776: LD_VAR 0 6
27780: ARRAY
27781: PUSH
27782: LD_INT 2
27784: ARRAY
27785: PUSH
27786: LD_VAR 0 9
27790: LESSEQUAL
27791: IFFALSE 27833
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27793: LD_ADDR_VAR 0 6
27797: PUSH
27798: LD_VAR 0 6
27802: PPUSH
27803: LD_VAR 0 6
27807: PUSH
27808: LD_INT 1
27810: PLUS
27811: PPUSH
27812: LD_VAR 0 7
27816: PUSH
27817: LD_VAR 0 9
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 2
27830: ST_TO_ADDR
27831: GO 27913
// for j := 1 to result do
27833: LD_ADDR_VAR 0 8
27837: PUSH
27838: DOUBLE
27839: LD_INT 1
27841: DEC
27842: ST_TO_ADDR
27843: LD_VAR 0 6
27847: PUSH
27848: FOR_TO
27849: IFFALSE 27911
// begin if tmp < result [ j ] [ 2 ] then
27851: LD_VAR 0 9
27855: PUSH
27856: LD_VAR 0 6
27860: PUSH
27861: LD_VAR 0 8
27865: ARRAY
27866: PUSH
27867: LD_INT 2
27869: ARRAY
27870: LESS
27871: IFFALSE 27909
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27873: LD_ADDR_VAR 0 6
27877: PUSH
27878: LD_VAR 0 6
27882: PPUSH
27883: LD_VAR 0 8
27887: PPUSH
27888: LD_VAR 0 7
27892: PUSH
27893: LD_VAR 0 9
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PPUSH
27902: CALL_OW 2
27906: ST_TO_ADDR
// break ;
27907: GO 27911
// end ; end ;
27909: GO 27848
27911: POP
27912: POP
// end ; end ;
27913: GO 27712
27915: POP
27916: POP
// if result and not asc then
27917: LD_VAR 0 6
27921: IFFALSE 27930
27923: PUSH
27924: LD_VAR 0 4
27928: NOT
27929: AND
27930: IFFALSE 28005
// begin tmp := result ;
27932: LD_ADDR_VAR 0 9
27936: PUSH
27937: LD_VAR 0 6
27941: ST_TO_ADDR
// for i = tmp downto 1 do
27942: LD_ADDR_VAR 0 7
27946: PUSH
27947: DOUBLE
27948: LD_VAR 0 9
27952: INC
27953: ST_TO_ADDR
27954: LD_INT 1
27956: PUSH
27957: FOR_DOWNTO
27958: IFFALSE 28003
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: LD_VAR 0 6
27969: PPUSH
27970: LD_VAR 0 9
27974: PUSH
27975: LD_VAR 0 7
27979: MINUS
27980: PUSH
27981: LD_INT 1
27983: PLUS
27984: PPUSH
27985: LD_VAR 0 9
27989: PUSH
27990: LD_VAR 0 7
27994: ARRAY
27995: PPUSH
27996: CALL_OW 1
28000: ST_TO_ADDR
28001: GO 27957
28003: POP
28004: POP
// end ; tmp := [ ] ;
28005: LD_ADDR_VAR 0 9
28009: PUSH
28010: EMPTY
28011: ST_TO_ADDR
// if mode then
28012: LD_VAR 0 5
28016: IFFALSE 28085
// begin for i = 1 to result do
28018: LD_ADDR_VAR 0 7
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 6
28032: PUSH
28033: FOR_TO
28034: IFFALSE 28073
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28036: LD_ADDR_VAR 0 9
28040: PUSH
28041: LD_VAR 0 9
28045: PPUSH
28046: LD_VAR 0 7
28050: PPUSH
28051: LD_VAR 0 6
28055: PUSH
28056: LD_VAR 0 7
28060: ARRAY
28061: PUSH
28062: LD_INT 1
28064: ARRAY
28065: PPUSH
28066: CALL_OW 1
28070: ST_TO_ADDR
28071: GO 28033
28073: POP
28074: POP
// result := tmp ;
28075: LD_ADDR_VAR 0 6
28079: PUSH
28080: LD_VAR 0 9
28084: ST_TO_ADDR
// end ; end ;
28085: LD_VAR 0 6
28089: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28098: LD_ADDR_VAR 0 5
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: EMPTY
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// if not x or not y then
28120: LD_VAR 0 2
28124: NOT
28125: IFTRUE 28134
28127: PUSH
28128: LD_VAR 0 3
28132: NOT
28133: OR
28134: IFFALSE 28138
// exit ;
28136: GO 29794
// if not range then
28138: LD_VAR 0 4
28142: NOT
28143: IFFALSE 28153
// range := 10 ;
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_INT 10
28152: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28153: LD_ADDR_VAR 0 8
28157: PUSH
28158: LD_INT 81
28160: PUSH
28161: LD_VAR 0 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 92
28172: PUSH
28173: LD_VAR 0 2
28177: PUSH
28178: LD_VAR 0 3
28182: PUSH
28183: LD_VAR 0 4
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 21
28199: PUSH
28200: LD_INT 3
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: ST_TO_ADDR
// if not tmp then
28221: LD_VAR 0 8
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 29794
// for i in tmp do
28230: LD_ADDR_VAR 0 6
28234: PUSH
28235: LD_VAR 0 8
28239: PUSH
28240: FOR_IN
28241: IFFALSE 29769
// begin points := [ 0 , 0 , 0 ] ;
28243: LD_ADDR_VAR 0 9
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// bpoints := 1 ;
28262: LD_ADDR_VAR 0 10
28266: PUSH
28267: LD_INT 1
28269: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28270: LD_VAR 0 6
28274: PPUSH
28275: CALL_OW 247
28279: PUSH
28280: LD_INT 1
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28870
28288: POP
// begin if GetClass ( i ) = 1 then
28289: LD_VAR 0 6
28293: PPUSH
28294: CALL_OW 257
28298: PUSH
28299: LD_INT 1
28301: EQUAL
28302: IFFALSE 28323
// points := [ 10 , 5 , 3 ] ;
28304: LD_ADDR_VAR 0 9
28308: PUSH
28309: LD_INT 10
28311: PUSH
28312: LD_INT 5
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28323: LD_VAR 0 6
28327: PPUSH
28328: CALL_OW 257
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: LD_INT 4
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: IN
28347: IFFALSE 28368
// points := [ 3 , 2 , 1 ] ;
28349: LD_ADDR_VAR 0 9
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28368: LD_VAR 0 6
28372: PPUSH
28373: CALL_OW 257
28377: PUSH
28378: LD_INT 5
28380: EQUAL
28381: IFFALSE 28402
// points := [ 130 , 5 , 2 ] ;
28383: LD_ADDR_VAR 0 9
28387: PUSH
28388: LD_INT 130
28390: PUSH
28391: LD_INT 5
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: LIST
28401: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28402: LD_VAR 0 6
28406: PPUSH
28407: CALL_OW 257
28411: PUSH
28412: LD_INT 8
28414: EQUAL
28415: IFFALSE 28436
// points := [ 35 , 35 , 30 ] ;
28417: LD_ADDR_VAR 0 9
28421: PUSH
28422: LD_INT 35
28424: PUSH
28425: LD_INT 35
28427: PUSH
28428: LD_INT 30
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28436: LD_VAR 0 6
28440: PPUSH
28441: CALL_OW 257
28445: PUSH
28446: LD_INT 9
28448: EQUAL
28449: IFFALSE 28470
// points := [ 20 , 55 , 40 ] ;
28451: LD_ADDR_VAR 0 9
28455: PUSH
28456: LD_INT 20
28458: PUSH
28459: LD_INT 55
28461: PUSH
28462: LD_INT 40
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28470: LD_VAR 0 6
28474: PPUSH
28475: CALL_OW 257
28479: PUSH
28480: LD_INT 12
28482: PUSH
28483: LD_INT 16
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: IN
28490: IFFALSE 28511
// points := [ 5 , 3 , 2 ] ;
28492: LD_ADDR_VAR 0 9
28496: PUSH
28497: LD_INT 5
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28511: LD_VAR 0 6
28515: PPUSH
28516: CALL_OW 257
28520: PUSH
28521: LD_INT 17
28523: EQUAL
28524: IFFALSE 28545
// points := [ 100 , 50 , 75 ] ;
28526: LD_ADDR_VAR 0 9
28530: PUSH
28531: LD_INT 100
28533: PUSH
28534: LD_INT 50
28536: PUSH
28537: LD_INT 75
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28545: LD_VAR 0 6
28549: PPUSH
28550: CALL_OW 257
28554: PUSH
28555: LD_INT 15
28557: EQUAL
28558: IFFALSE 28579
// points := [ 10 , 5 , 3 ] ;
28560: LD_ADDR_VAR 0 9
28564: PUSH
28565: LD_INT 10
28567: PUSH
28568: LD_INT 5
28570: PUSH
28571: LD_INT 3
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28579: LD_VAR 0 6
28583: PPUSH
28584: CALL_OW 257
28588: PUSH
28589: LD_INT 14
28591: EQUAL
28592: IFFALSE 28613
// points := [ 10 , 0 , 0 ] ;
28594: LD_ADDR_VAR 0 9
28598: PUSH
28599: LD_INT 10
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28613: LD_VAR 0 6
28617: PPUSH
28618: CALL_OW 257
28622: PUSH
28623: LD_INT 11
28625: EQUAL
28626: IFFALSE 28647
// points := [ 30 , 10 , 5 ] ;
28628: LD_ADDR_VAR 0 9
28632: PUSH
28633: LD_INT 30
28635: PUSH
28636: LD_INT 10
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28647: LD_VAR 0 1
28651: PPUSH
28652: LD_INT 5
28654: PPUSH
28655: CALL_OW 321
28659: PUSH
28660: LD_INT 2
28662: EQUAL
28663: IFFALSE 28680
// bpoints := bpoints * 1.8 ;
28665: LD_ADDR_VAR 0 10
28669: PUSH
28670: LD_VAR 0 10
28674: PUSH
28675: LD_REAL  1.80000000000000E+0000
28678: MUL
28679: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28680: LD_VAR 0 6
28684: PPUSH
28685: CALL_OW 257
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: LD_INT 3
28698: PUSH
28699: LD_INT 4
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: IN
28708: IFFALSE 28728
28710: PUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: LD_INT 51
28718: PPUSH
28719: CALL_OW 321
28723: PUSH
28724: LD_INT 2
28726: EQUAL
28727: AND
28728: IFFALSE 28745
// bpoints := bpoints * 1.2 ;
28730: LD_ADDR_VAR 0 10
28734: PUSH
28735: LD_VAR 0 10
28739: PUSH
28740: LD_REAL  1.20000000000000E+0000
28743: MUL
28744: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28745: LD_VAR 0 6
28749: PPUSH
28750: CALL_OW 257
28754: PUSH
28755: LD_INT 5
28757: PUSH
28758: LD_INT 7
28760: PUSH
28761: LD_INT 9
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: IN
28769: IFFALSE 28789
28771: PUSH
28772: LD_VAR 0 1
28776: PPUSH
28777: LD_INT 52
28779: PPUSH
28780: CALL_OW 321
28784: PUSH
28785: LD_INT 2
28787: EQUAL
28788: AND
28789: IFFALSE 28806
// bpoints := bpoints * 1.5 ;
28791: LD_ADDR_VAR 0 10
28795: PUSH
28796: LD_VAR 0 10
28800: PUSH
28801: LD_REAL  1.50000000000000E+0000
28804: MUL
28805: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28806: LD_VAR 0 1
28810: PPUSH
28811: LD_INT 66
28813: PPUSH
28814: CALL_OW 321
28818: PUSH
28819: LD_INT 2
28821: EQUAL
28822: IFFALSE 28839
// bpoints := bpoints * 1.1 ;
28824: LD_ADDR_VAR 0 10
28828: PUSH
28829: LD_VAR 0 10
28833: PUSH
28834: LD_REAL  1.10000000000000E+0000
28837: MUL
28838: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28839: LD_ADDR_VAR 0 10
28843: PUSH
28844: LD_VAR 0 10
28848: PUSH
28849: LD_VAR 0 6
28853: PPUSH
28854: LD_INT 1
28856: PPUSH
28857: CALL_OW 259
28861: PUSH
28862: LD_REAL  1.15000000000000E+0000
28865: MUL
28866: MUL
28867: ST_TO_ADDR
// end ; unit_vehicle :
28868: GO 29698
28870: LD_INT 2
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 29686
28878: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28879: LD_VAR 0 6
28883: PPUSH
28884: CALL_OW 264
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 42
28894: PUSH
28895: LD_INT 24
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: IN
28903: IFFALSE 28924
// points := [ 25 , 5 , 3 ] ;
28905: LD_ADDR_VAR 0 9
28909: PUSH
28910: LD_INT 25
28912: PUSH
28913: LD_INT 5
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28924: LD_VAR 0 6
28928: PPUSH
28929: CALL_OW 264
28933: PUSH
28934: LD_INT 4
28936: PUSH
28937: LD_INT 43
28939: PUSH
28940: LD_INT 25
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: IN
28948: IFFALSE 28969
// points := [ 40 , 15 , 5 ] ;
28950: LD_ADDR_VAR 0 9
28954: PUSH
28955: LD_INT 40
28957: PUSH
28958: LD_INT 15
28960: PUSH
28961: LD_INT 5
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28969: LD_VAR 0 6
28973: PPUSH
28974: CALL_OW 264
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: LD_INT 23
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: IN
28989: IFFALSE 29010
// points := [ 7 , 25 , 8 ] ;
28991: LD_ADDR_VAR 0 9
28995: PUSH
28996: LD_INT 7
28998: PUSH
28999: LD_INT 25
29001: PUSH
29002: LD_INT 8
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29010: LD_VAR 0 6
29014: PPUSH
29015: CALL_OW 264
29019: PUSH
29020: LD_INT 5
29022: PUSH
29023: LD_INT 27
29025: PUSH
29026: LD_INT 44
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: IN
29034: IFFALSE 29055
// points := [ 14 , 50 , 16 ] ;
29036: LD_ADDR_VAR 0 9
29040: PUSH
29041: LD_INT 14
29043: PUSH
29044: LD_INT 50
29046: PUSH
29047: LD_INT 16
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29055: LD_VAR 0 6
29059: PPUSH
29060: CALL_OW 264
29064: PUSH
29065: LD_INT 6
29067: PUSH
29068: LD_INT 46
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: IN
29075: IFFALSE 29096
// points := [ 32 , 120 , 70 ] ;
29077: LD_ADDR_VAR 0 9
29081: PUSH
29082: LD_INT 32
29084: PUSH
29085: LD_INT 120
29087: PUSH
29088: LD_INT 70
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29096: LD_VAR 0 6
29100: PPUSH
29101: CALL_OW 264
29105: PUSH
29106: LD_INT 7
29108: PUSH
29109: LD_INT 28
29111: PUSH
29112: LD_INT 45
29114: PUSH
29115: LD_INT 92
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: IN
29124: IFFALSE 29145
// points := [ 35 , 20 , 45 ] ;
29126: LD_ADDR_VAR 0 9
29130: PUSH
29131: LD_INT 35
29133: PUSH
29134: LD_INT 20
29136: PUSH
29137: LD_INT 45
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29145: LD_VAR 0 6
29149: PPUSH
29150: CALL_OW 264
29154: PUSH
29155: LD_INT 47
29157: PUSH
29158: EMPTY
29159: LIST
29160: IN
29161: IFFALSE 29182
// points := [ 67 , 45 , 75 ] ;
29163: LD_ADDR_VAR 0 9
29167: PUSH
29168: LD_INT 67
29170: PUSH
29171: LD_INT 45
29173: PUSH
29174: LD_INT 75
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29182: LD_VAR 0 6
29186: PPUSH
29187: CALL_OW 264
29191: PUSH
29192: LD_INT 26
29194: PUSH
29195: EMPTY
29196: LIST
29197: IN
29198: IFFALSE 29219
// points := [ 120 , 30 , 80 ] ;
29200: LD_ADDR_VAR 0 9
29204: PUSH
29205: LD_INT 120
29207: PUSH
29208: LD_INT 30
29210: PUSH
29211: LD_INT 80
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29219: LD_VAR 0 6
29223: PPUSH
29224: CALL_OW 264
29228: PUSH
29229: LD_INT 22
29231: PUSH
29232: EMPTY
29233: LIST
29234: IN
29235: IFFALSE 29256
// points := [ 40 , 1 , 1 ] ;
29237: LD_ADDR_VAR 0 9
29241: PUSH
29242: LD_INT 40
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29256: LD_VAR 0 6
29260: PPUSH
29261: CALL_OW 264
29265: PUSH
29266: LD_INT 29
29268: PUSH
29269: EMPTY
29270: LIST
29271: IN
29272: IFFALSE 29293
// points := [ 70 , 200 , 400 ] ;
29274: LD_ADDR_VAR 0 9
29278: PUSH
29279: LD_INT 70
29281: PUSH
29282: LD_INT 200
29284: PUSH
29285: LD_INT 400
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29293: LD_VAR 0 6
29297: PPUSH
29298: CALL_OW 264
29302: PUSH
29303: LD_INT 14
29305: PUSH
29306: LD_INT 53
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: IN
29313: IFFALSE 29334
// points := [ 40 , 10 , 20 ] ;
29315: LD_ADDR_VAR 0 9
29319: PUSH
29320: LD_INT 40
29322: PUSH
29323: LD_INT 10
29325: PUSH
29326: LD_INT 20
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29334: LD_VAR 0 6
29338: PPUSH
29339: CALL_OW 264
29343: PUSH
29344: LD_INT 9
29346: PUSH
29347: EMPTY
29348: LIST
29349: IN
29350: IFFALSE 29371
// points := [ 5 , 70 , 20 ] ;
29352: LD_ADDR_VAR 0 9
29356: PUSH
29357: LD_INT 5
29359: PUSH
29360: LD_INT 70
29362: PUSH
29363: LD_INT 20
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29371: LD_VAR 0 6
29375: PPUSH
29376: CALL_OW 264
29380: PUSH
29381: LD_INT 10
29383: PUSH
29384: EMPTY
29385: LIST
29386: IN
29387: IFFALSE 29408
// points := [ 35 , 110 , 70 ] ;
29389: LD_ADDR_VAR 0 9
29393: PUSH
29394: LD_INT 35
29396: PUSH
29397: LD_INT 110
29399: PUSH
29400: LD_INT 70
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: LIST
29407: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29408: LD_VAR 0 6
29412: PPUSH
29413: CALL_OW 265
29417: PUSH
29418: LD_INT 25
29420: EQUAL
29421: IFFALSE 29442
// points := [ 80 , 65 , 100 ] ;
29423: LD_ADDR_VAR 0 9
29427: PUSH
29428: LD_INT 80
29430: PUSH
29431: LD_INT 65
29433: PUSH
29434: LD_INT 100
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29442: LD_VAR 0 6
29446: PPUSH
29447: CALL_OW 263
29451: PUSH
29452: LD_INT 1
29454: EQUAL
29455: IFFALSE 29490
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29457: LD_ADDR_VAR 0 10
29461: PUSH
29462: LD_VAR 0 10
29466: PUSH
29467: LD_VAR 0 6
29471: PPUSH
29472: CALL_OW 311
29476: PPUSH
29477: LD_INT 3
29479: PPUSH
29480: CALL_OW 259
29484: PUSH
29485: LD_INT 4
29487: MUL
29488: MUL
29489: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29490: LD_VAR 0 6
29494: PPUSH
29495: CALL_OW 263
29499: PUSH
29500: LD_INT 2
29502: EQUAL
29503: IFFALSE 29554
// begin j := IsControledBy ( i ) ;
29505: LD_ADDR_VAR 0 7
29509: PUSH
29510: LD_VAR 0 6
29514: PPUSH
29515: CALL_OW 312
29519: ST_TO_ADDR
// if j then
29520: LD_VAR 0 7
29524: IFFALSE 29554
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29526: LD_ADDR_VAR 0 10
29530: PUSH
29531: LD_VAR 0 10
29535: PUSH
29536: LD_VAR 0 7
29540: PPUSH
29541: LD_INT 3
29543: PPUSH
29544: CALL_OW 259
29548: PUSH
29549: LD_INT 3
29551: MUL
29552: MUL
29553: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 264
29563: PUSH
29564: LD_INT 5
29566: PUSH
29567: LD_INT 6
29569: PUSH
29570: LD_INT 46
29572: PUSH
29573: LD_INT 44
29575: PUSH
29576: LD_INT 47
29578: PUSH
29579: LD_INT 45
29581: PUSH
29582: LD_INT 28
29584: PUSH
29585: LD_INT 7
29587: PUSH
29588: LD_INT 27
29590: PUSH
29591: LD_INT 29
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: IN
29606: IFFALSE 29626
29608: PUSH
29609: LD_VAR 0 1
29613: PPUSH
29614: LD_INT 52
29616: PPUSH
29617: CALL_OW 321
29621: PUSH
29622: LD_INT 2
29624: EQUAL
29625: AND
29626: IFFALSE 29643
// bpoints := bpoints * 1.2 ;
29628: LD_ADDR_VAR 0 10
29632: PUSH
29633: LD_VAR 0 10
29637: PUSH
29638: LD_REAL  1.20000000000000E+0000
29641: MUL
29642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29643: LD_VAR 0 6
29647: PPUSH
29648: CALL_OW 264
29652: PUSH
29653: LD_INT 6
29655: PUSH
29656: LD_INT 46
29658: PUSH
29659: LD_INT 47
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: IN
29667: IFFALSE 29684
// bpoints := bpoints * 1.2 ;
29669: LD_ADDR_VAR 0 10
29673: PUSH
29674: LD_VAR 0 10
29678: PUSH
29679: LD_REAL  1.20000000000000E+0000
29682: MUL
29683: ST_TO_ADDR
// end ; unit_building :
29684: GO 29698
29686: LD_INT 3
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29697
29694: POP
// ; end ;
29695: GO 29698
29697: POP
// for j = 1 to 3 do
29698: LD_ADDR_VAR 0 7
29702: PUSH
29703: DOUBLE
29704: LD_INT 1
29706: DEC
29707: ST_TO_ADDR
29708: LD_INT 3
29710: PUSH
29711: FOR_TO
29712: IFFALSE 29765
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29714: LD_ADDR_VAR 0 5
29718: PUSH
29719: LD_VAR 0 5
29723: PPUSH
29724: LD_VAR 0 7
29728: PPUSH
29729: LD_VAR 0 5
29733: PUSH
29734: LD_VAR 0 7
29738: ARRAY
29739: PUSH
29740: LD_VAR 0 9
29744: PUSH
29745: LD_VAR 0 7
29749: ARRAY
29750: PUSH
29751: LD_VAR 0 10
29755: MUL
29756: PLUS
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
29763: GO 29711
29765: POP
29766: POP
// end ;
29767: GO 28240
29769: POP
29770: POP
// result := Replace ( result , 4 , tmp ) ;
29771: LD_ADDR_VAR 0 5
29775: PUSH
29776: LD_VAR 0 5
29780: PPUSH
29781: LD_INT 4
29783: PPUSH
29784: LD_VAR 0 8
29788: PPUSH
29789: CALL_OW 1
29793: ST_TO_ADDR
// end ;
29794: LD_VAR 0 5
29798: RET
// export function DangerAtRange ( unit , range ) ; begin
29799: LD_INT 0
29801: PPUSH
// if not unit then
29802: LD_VAR 0 1
29806: NOT
29807: IFFALSE 29811
// exit ;
29809: GO 29856
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29811: LD_ADDR_VAR 0 3
29815: PUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 255
29825: PPUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL_OW 250
29835: PPUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 251
29845: PPUSH
29846: LD_VAR 0 2
29850: PPUSH
29851: CALL 28090 0 4
29855: ST_TO_ADDR
// end ;
29856: LD_VAR 0 3
29860: RET
// export function DangerInArea ( side , area ) ; begin
29861: LD_INT 0
29863: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29864: LD_ADDR_VAR 0 3
29868: PUSH
29869: LD_VAR 0 2
29873: PPUSH
29874: LD_INT 81
29876: PUSH
29877: LD_VAR 0 1
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 70
29890: ST_TO_ADDR
// end ;
29891: LD_VAR 0 3
29895: RET
// export function IsExtension ( b ) ; begin
29896: LD_INT 0
29898: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29899: LD_ADDR_VAR 0 2
29903: PUSH
29904: LD_VAR 0 1
29908: PUSH
29909: LD_INT 23
29911: PUSH
29912: LD_INT 20
29914: PUSH
29915: LD_INT 22
29917: PUSH
29918: LD_INT 17
29920: PUSH
29921: LD_INT 24
29923: PUSH
29924: LD_INT 21
29926: PUSH
29927: LD_INT 19
29929: PUSH
29930: LD_INT 16
29932: PUSH
29933: LD_INT 25
29935: PUSH
29936: LD_INT 18
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: IN
29951: ST_TO_ADDR
// end ;
29952: LD_VAR 0 2
29956: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29957: LD_INT 0
29959: PPUSH
29960: PPUSH
29961: PPUSH
// result := [ ] ;
29962: LD_ADDR_VAR 0 4
29966: PUSH
29967: EMPTY
29968: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29969: LD_ADDR_VAR 0 5
29973: PUSH
29974: LD_VAR 0 2
29978: PPUSH
29979: LD_INT 21
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PPUSH
29989: CALL_OW 70
29993: ST_TO_ADDR
// if not tmp then
29994: LD_VAR 0 5
29998: NOT
29999: IFFALSE 30003
// exit ;
30001: GO 30067
// if checkLink then
30003: LD_VAR 0 3
30007: IFFALSE 30057
// begin for i in tmp do
30009: LD_ADDR_VAR 0 6
30013: PUSH
30014: LD_VAR 0 5
30018: PUSH
30019: FOR_IN
30020: IFFALSE 30055
// if GetBase ( i ) <> base then
30022: LD_VAR 0 6
30026: PPUSH
30027: CALL_OW 274
30031: PUSH
30032: LD_VAR 0 1
30036: NONEQUAL
30037: IFFALSE 30053
// ComLinkToBase ( base , i ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_VAR 0 6
30048: PPUSH
30049: CALL_OW 169
30053: GO 30019
30055: POP
30056: POP
// end ; result := tmp ;
30057: LD_ADDR_VAR 0 4
30061: PUSH
30062: LD_VAR 0 5
30066: ST_TO_ADDR
// end ;
30067: LD_VAR 0 4
30071: RET
// export function ComComplete ( units , b ) ; var i ; begin
30072: LD_INT 0
30074: PPUSH
30075: PPUSH
// if not units then
30076: LD_VAR 0 1
30080: NOT
30081: IFFALSE 30085
// exit ;
30083: GO 30175
// for i in units do
30085: LD_ADDR_VAR 0 4
30089: PUSH
30090: LD_VAR 0 1
30094: PUSH
30095: FOR_IN
30096: IFFALSE 30173
// if BuildingStatus ( b ) = bs_build then
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL_OW 461
30107: PUSH
30108: LD_INT 1
30110: EQUAL
30111: IFFALSE 30171
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30113: LD_VAR 0 4
30117: PPUSH
30118: LD_STRING h
30120: PUSH
30121: LD_VAR 0 2
30125: PPUSH
30126: CALL_OW 250
30130: PUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: CALL_OW 251
30140: PUSH
30141: LD_VAR 0 2
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: PPUSH
30167: CALL_OW 446
30171: GO 30095
30173: POP
30174: POP
// end ;
30175: LD_VAR 0 3
30179: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30180: LD_INT 0
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30188: LD_VAR 0 1
30192: NOT
30193: IFTRUE 30210
30195: PUSH
30196: LD_VAR 0 1
30200: PPUSH
30201: CALL_OW 263
30205: PUSH
30206: LD_INT 2
30208: NONEQUAL
30209: OR
30210: IFFALSE 30214
// exit ;
30212: GO 30530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30214: LD_ADDR_VAR 0 6
30218: PUSH
30219: LD_INT 22
30221: PUSH
30222: LD_VAR 0 1
30226: PPUSH
30227: CALL_OW 255
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 30
30241: PUSH
30242: LD_INT 36
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 34
30251: PUSH
30252: LD_INT 31
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PPUSH
30268: CALL_OW 69
30272: ST_TO_ADDR
// if not tmp then
30273: LD_VAR 0 6
30277: NOT
30278: IFFALSE 30282
// exit ;
30280: GO 30530
// result := [ ] ;
30282: LD_ADDR_VAR 0 2
30286: PUSH
30287: EMPTY
30288: ST_TO_ADDR
// for i in tmp do
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_VAR 0 6
30298: PUSH
30299: FOR_IN
30300: IFFALSE 30371
// begin t := UnitsInside ( i ) ;
30302: LD_ADDR_VAR 0 4
30306: PUSH
30307: LD_VAR 0 3
30311: PPUSH
30312: CALL_OW 313
30316: ST_TO_ADDR
// if t then
30317: LD_VAR 0 4
30321: IFFALSE 30369
// for j in t do
30323: LD_ADDR_VAR 0 7
30327: PUSH
30328: LD_VAR 0 4
30332: PUSH
30333: FOR_IN
30334: IFFALSE 30367
// result := Replace ( result , result + 1 , j ) ;
30336: LD_ADDR_VAR 0 2
30340: PUSH
30341: LD_VAR 0 2
30345: PPUSH
30346: LD_VAR 0 2
30350: PUSH
30351: LD_INT 1
30353: PLUS
30354: PPUSH
30355: LD_VAR 0 7
30359: PPUSH
30360: CALL_OW 1
30364: ST_TO_ADDR
30365: GO 30333
30367: POP
30368: POP
// end ;
30369: GO 30299
30371: POP
30372: POP
// if not result then
30373: LD_VAR 0 2
30377: NOT
30378: IFFALSE 30382
// exit ;
30380: GO 30530
// mech := result [ 1 ] ;
30382: LD_ADDR_VAR 0 5
30386: PUSH
30387: LD_VAR 0 2
30391: PUSH
30392: LD_INT 1
30394: ARRAY
30395: ST_TO_ADDR
// if result > 1 then
30396: LD_VAR 0 2
30400: PUSH
30401: LD_INT 1
30403: GREATER
30404: IFFALSE 30516
// begin for i = 2 to result do
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: DOUBLE
30412: LD_INT 2
30414: DEC
30415: ST_TO_ADDR
30416: LD_VAR 0 2
30420: PUSH
30421: FOR_TO
30422: IFFALSE 30514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30424: LD_ADDR_VAR 0 4
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: LD_VAR 0 3
30438: ARRAY
30439: PPUSH
30440: LD_INT 3
30442: PPUSH
30443: CALL_OW 259
30447: PUSH
30448: LD_VAR 0 2
30452: PUSH
30453: LD_VAR 0 3
30457: ARRAY
30458: PPUSH
30459: CALL_OW 432
30463: MINUS
30464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30465: LD_VAR 0 4
30469: PUSH
30470: LD_VAR 0 5
30474: PPUSH
30475: LD_INT 3
30477: PPUSH
30478: CALL_OW 259
30482: PUSH
30483: LD_VAR 0 5
30487: PPUSH
30488: CALL_OW 432
30492: MINUS
30493: GREATEREQUAL
30494: IFFALSE 30512
// mech := result [ i ] ;
30496: LD_ADDR_VAR 0 5
30500: PUSH
30501: LD_VAR 0 2
30505: PUSH
30506: LD_VAR 0 3
30510: ARRAY
30511: ST_TO_ADDR
// end ;
30512: GO 30421
30514: POP
30515: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30516: LD_VAR 0 1
30520: PPUSH
30521: LD_VAR 0 5
30525: PPUSH
30526: CALL_OW 135
// end ;
30530: LD_VAR 0 2
30534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
// result := [ ] ;
30550: LD_ADDR_VAR 0 7
30554: PUSH
30555: EMPTY
30556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL_OW 266
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: IN
30577: NOT
30578: IFFALSE 30582
// exit ;
30580: GO 32222
// if name then
30582: LD_VAR 0 3
30586: IFFALSE 30602
// SetBName ( base_dep , name ) ;
30588: LD_VAR 0 1
30592: PPUSH
30593: LD_VAR 0 3
30597: PPUSH
30598: CALL_OW 500
// base := GetBase ( base_dep ) ;
30602: LD_ADDR_VAR 0 15
30606: PUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 274
30616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30617: LD_ADDR_VAR 0 16
30621: PUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 255
30631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30632: LD_ADDR_VAR 0 17
30636: PUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 248
30646: ST_TO_ADDR
// if sources then
30647: LD_VAR 0 5
30651: IFFALSE 30698
// for i = 1 to 3 do
30653: LD_ADDR_VAR 0 8
30657: PUSH
30658: DOUBLE
30659: LD_INT 1
30661: DEC
30662: ST_TO_ADDR
30663: LD_INT 3
30665: PUSH
30666: FOR_TO
30667: IFFALSE 30696
// AddResourceType ( base , i , sources [ i ] ) ;
30669: LD_VAR 0 15
30673: PPUSH
30674: LD_VAR 0 8
30678: PPUSH
30679: LD_VAR 0 5
30683: PUSH
30684: LD_VAR 0 8
30688: ARRAY
30689: PPUSH
30690: CALL_OW 276
30694: GO 30666
30696: POP
30697: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30698: LD_ADDR_VAR 0 18
30702: PUSH
30703: LD_VAR 0 15
30707: PPUSH
30708: LD_VAR 0 2
30712: PPUSH
30713: LD_INT 1
30715: PPUSH
30716: CALL 29957 0 3
30720: ST_TO_ADDR
// InitHc ;
30721: CALL_OW 19
// InitUc ;
30725: CALL_OW 18
// uc_side := side ;
30729: LD_ADDR_OWVAR 20
30733: PUSH
30734: LD_VAR 0 16
30738: ST_TO_ADDR
// uc_nation := nation ;
30739: LD_ADDR_OWVAR 21
30743: PUSH
30744: LD_VAR 0 17
30748: ST_TO_ADDR
// if buildings then
30749: LD_VAR 0 18
30753: IFFALSE 32081
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30755: LD_ADDR_VAR 0 19
30759: PUSH
30760: LD_VAR 0 18
30764: PPUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 30
30770: PUSH
30771: LD_INT 29
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: PPUSH
30793: CALL_OW 72
30797: ST_TO_ADDR
// if tmp then
30798: LD_VAR 0 19
30802: IFFALSE 30850
// for i in tmp do
30804: LD_ADDR_VAR 0 8
30808: PUSH
30809: LD_VAR 0 19
30813: PUSH
30814: FOR_IN
30815: IFFALSE 30848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30817: LD_VAR 0 8
30821: PPUSH
30822: CALL_OW 250
30826: PPUSH
30827: LD_VAR 0 8
30831: PPUSH
30832: CALL_OW 251
30836: PPUSH
30837: LD_VAR 0 16
30841: PPUSH
30842: CALL_OW 441
30846: GO 30814
30848: POP
30849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30850: LD_VAR 0 18
30854: PPUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 30
30860: PUSH
30861: LD_INT 32
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 30
30870: PUSH
30871: LD_INT 33
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 72
30887: IFFALSE 30975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30889: LD_ADDR_VAR 0 8
30893: PUSH
30894: LD_VAR 0 18
30898: PPUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 30
30904: PUSH
30905: LD_INT 32
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 30
30914: PUSH
30915: LD_INT 33
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PPUSH
30927: CALL_OW 72
30931: PUSH
30932: FOR_IN
30933: IFFALSE 30973
// begin if not GetBWeapon ( i ) then
30935: LD_VAR 0 8
30939: PPUSH
30940: CALL_OW 269
30944: NOT
30945: IFFALSE 30971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30947: LD_VAR 0 8
30951: PPUSH
30952: LD_VAR 0 8
30956: PPUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL 32227 0 2
30966: PPUSH
30967: CALL_OW 431
// end ;
30971: GO 30932
30973: POP
30974: POP
// end ; for i = 1 to personel do
30975: LD_ADDR_VAR 0 8
30979: PUSH
30980: DOUBLE
30981: LD_INT 1
30983: DEC
30984: ST_TO_ADDR
30985: LD_VAR 0 6
30989: PUSH
30990: FOR_TO
30991: IFFALSE 32061
// begin if i > 4 then
30993: LD_VAR 0 8
30997: PUSH
30998: LD_INT 4
31000: GREATER
31001: IFFALSE 31005
// break ;
31003: GO 32061
// case i of 1 :
31005: LD_VAR 0 8
31009: PUSH
31010: LD_INT 1
31012: DOUBLE
31013: EQUAL
31014: IFTRUE 31018
31016: GO 31098
31018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31019: LD_ADDR_VAR 0 12
31023: PUSH
31024: LD_VAR 0 18
31028: PPUSH
31029: LD_INT 22
31031: PUSH
31032: LD_VAR 0 16
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 58
31043: PUSH
31044: EMPTY
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 30
31052: PUSH
31053: LD_INT 32
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 30
31072: PUSH
31073: LD_INT 5
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: PPUSH
31091: CALL_OW 72
31095: ST_TO_ADDR
31096: GO 31320
31098: LD_INT 2
31100: DOUBLE
31101: EQUAL
31102: IFTRUE 31106
31104: GO 31168
31106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31107: LD_ADDR_VAR 0 12
31111: PUSH
31112: LD_VAR 0 18
31116: PPUSH
31117: LD_INT 22
31119: PUSH
31120: LD_VAR 0 16
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 30
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 30
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PPUSH
31161: CALL_OW 72
31165: ST_TO_ADDR
31166: GO 31320
31168: LD_INT 3
31170: DOUBLE
31171: EQUAL
31172: IFTRUE 31176
31174: GO 31238
31176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31177: LD_ADDR_VAR 0 12
31181: PUSH
31182: LD_VAR 0 18
31186: PPUSH
31187: LD_INT 22
31189: PUSH
31190: LD_VAR 0 16
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: LD_INT 30
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 30
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PPUSH
31231: CALL_OW 72
31235: ST_TO_ADDR
31236: GO 31320
31238: LD_INT 4
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31319
31246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31247: LD_ADDR_VAR 0 12
31251: PUSH
31252: LD_VAR 0 18
31256: PPUSH
31257: LD_INT 22
31259: PUSH
31260: LD_VAR 0 16
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 6
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 30
31284: PUSH
31285: LD_INT 7
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 8
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PPUSH
31312: CALL_OW 72
31316: ST_TO_ADDR
31317: GO 31320
31319: POP
// if i = 1 then
31320: LD_VAR 0 8
31324: PUSH
31325: LD_INT 1
31327: EQUAL
31328: IFFALSE 31439
// begin tmp := [ ] ;
31330: LD_ADDR_VAR 0 19
31334: PUSH
31335: EMPTY
31336: ST_TO_ADDR
// for j in f do
31337: LD_ADDR_VAR 0 9
31341: PUSH
31342: LD_VAR 0 12
31346: PUSH
31347: FOR_IN
31348: IFFALSE 31421
// if GetBType ( j ) = b_bunker then
31350: LD_VAR 0 9
31354: PPUSH
31355: CALL_OW 266
31359: PUSH
31360: LD_INT 32
31362: EQUAL
31363: IFFALSE 31390
// tmp := Insert ( tmp , 1 , j ) else
31365: LD_ADDR_VAR 0 19
31369: PUSH
31370: LD_VAR 0 19
31374: PPUSH
31375: LD_INT 1
31377: PPUSH
31378: LD_VAR 0 9
31382: PPUSH
31383: CALL_OW 2
31387: ST_TO_ADDR
31388: GO 31419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31390: LD_ADDR_VAR 0 19
31394: PUSH
31395: LD_VAR 0 19
31399: PPUSH
31400: LD_VAR 0 19
31404: PUSH
31405: LD_INT 1
31407: PLUS
31408: PPUSH
31409: LD_VAR 0 9
31413: PPUSH
31414: CALL_OW 2
31418: ST_TO_ADDR
31419: GO 31347
31421: POP
31422: POP
// if tmp then
31423: LD_VAR 0 19
31427: IFFALSE 31439
// f := tmp ;
31429: LD_ADDR_VAR 0 12
31433: PUSH
31434: LD_VAR 0 19
31438: ST_TO_ADDR
// end ; x := personel [ i ] ;
31439: LD_ADDR_VAR 0 13
31443: PUSH
31444: LD_VAR 0 6
31448: PUSH
31449: LD_VAR 0 8
31453: ARRAY
31454: ST_TO_ADDR
// if x = - 1 then
31455: LD_VAR 0 13
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: EQUAL
31464: IFFALSE 31675
// begin for j in f do
31466: LD_ADDR_VAR 0 9
31470: PUSH
31471: LD_VAR 0 12
31475: PUSH
31476: FOR_IN
31477: IFFALSE 31671
// repeat InitHc ;
31479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31483: LD_VAR 0 9
31487: PPUSH
31488: CALL_OW 266
31492: PUSH
31493: LD_INT 5
31495: EQUAL
31496: IFFALSE 31566
// begin if UnitsInside ( j ) < 3 then
31498: LD_VAR 0 9
31502: PPUSH
31503: CALL_OW 313
31507: PUSH
31508: LD_INT 3
31510: LESS
31511: IFFALSE 31547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31513: LD_INT 0
31515: PPUSH
31516: LD_INT 5
31518: PUSH
31519: LD_INT 8
31521: PUSH
31522: LD_INT 9
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: PUSH
31530: LD_VAR 0 17
31534: ARRAY
31535: PPUSH
31536: LD_VAR 0 4
31540: PPUSH
31541: CALL_OW 380
31545: GO 31564
// PrepareHuman ( false , i , skill ) ;
31547: LD_INT 0
31549: PPUSH
31550: LD_VAR 0 8
31554: PPUSH
31555: LD_VAR 0 4
31559: PPUSH
31560: CALL_OW 380
// end else
31564: GO 31583
// PrepareHuman ( false , i , skill ) ;
31566: LD_INT 0
31568: PPUSH
31569: LD_VAR 0 8
31573: PPUSH
31574: LD_VAR 0 4
31578: PPUSH
31579: CALL_OW 380
// un := CreateHuman ;
31583: LD_ADDR_VAR 0 14
31587: PUSH
31588: CALL_OW 44
31592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31593: LD_ADDR_VAR 0 7
31597: PUSH
31598: LD_VAR 0 7
31602: PPUSH
31603: LD_INT 1
31605: PPUSH
31606: LD_VAR 0 14
31610: PPUSH
31611: CALL_OW 2
31615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31616: LD_VAR 0 14
31620: PPUSH
31621: LD_VAR 0 9
31625: PPUSH
31626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31630: LD_VAR 0 9
31634: PPUSH
31635: CALL_OW 313
31639: PUSH
31640: LD_INT 6
31642: EQUAL
31643: IFTRUE 31667
31645: PUSH
31646: LD_VAR 0 9
31650: PPUSH
31651: CALL_OW 266
31655: PUSH
31656: LD_INT 32
31658: PUSH
31659: LD_INT 31
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: IN
31666: OR
31667: IFFALSE 31479
31669: GO 31476
31671: POP
31672: POP
// end else
31673: GO 32059
// for j = 1 to x do
31675: LD_ADDR_VAR 0 9
31679: PUSH
31680: DOUBLE
31681: LD_INT 1
31683: DEC
31684: ST_TO_ADDR
31685: LD_VAR 0 13
31689: PUSH
31690: FOR_TO
31691: IFFALSE 32057
// begin InitHc ;
31693: CALL_OW 19
// if not f then
31697: LD_VAR 0 12
31701: NOT
31702: IFFALSE 31791
// begin PrepareHuman ( false , i , skill ) ;
31704: LD_INT 0
31706: PPUSH
31707: LD_VAR 0 8
31711: PPUSH
31712: LD_VAR 0 4
31716: PPUSH
31717: CALL_OW 380
// un := CreateHuman ;
31721: LD_ADDR_VAR 0 14
31725: PUSH
31726: CALL_OW 44
31730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31731: LD_ADDR_VAR 0 7
31735: PUSH
31736: LD_VAR 0 7
31740: PPUSH
31741: LD_INT 1
31743: PPUSH
31744: LD_VAR 0 14
31748: PPUSH
31749: CALL_OW 2
31753: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31754: LD_VAR 0 14
31758: PPUSH
31759: LD_VAR 0 1
31763: PPUSH
31764: CALL_OW 250
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 251
31778: PPUSH
31779: LD_INT 10
31781: PPUSH
31782: LD_INT 0
31784: PPUSH
31785: CALL_OW 50
// continue ;
31789: GO 31690
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31791: LD_VAR 0 12
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PPUSH
31800: CALL_OW 313
31804: IFFALSE 31832
31806: PUSH
31807: LD_VAR 0 12
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: PPUSH
31816: CALL_OW 266
31820: PUSH
31821: LD_INT 32
31823: PUSH
31824: LD_INT 31
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: IN
31831: AND
31832: IFTRUE 31853
31834: PUSH
31835: LD_VAR 0 12
31839: PUSH
31840: LD_INT 1
31842: ARRAY
31843: PPUSH
31844: CALL_OW 313
31848: PUSH
31849: LD_INT 6
31851: EQUAL
31852: OR
31853: IFFALSE 31873
// f := Delete ( f , 1 ) ;
31855: LD_ADDR_VAR 0 12
31859: PUSH
31860: LD_VAR 0 12
31864: PPUSH
31865: LD_INT 1
31867: PPUSH
31868: CALL_OW 3
31872: ST_TO_ADDR
// if not f then
31873: LD_VAR 0 12
31877: NOT
31878: IFFALSE 31896
// begin x := x + 2 ;
31880: LD_ADDR_VAR 0 13
31884: PUSH
31885: LD_VAR 0 13
31889: PUSH
31890: LD_INT 2
31892: PLUS
31893: ST_TO_ADDR
// continue ;
31894: GO 31690
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31896: LD_VAR 0 12
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: PPUSH
31905: CALL_OW 266
31909: PUSH
31910: LD_INT 5
31912: EQUAL
31913: IFFALSE 31987
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31915: LD_VAR 0 12
31919: PUSH
31920: LD_INT 1
31922: ARRAY
31923: PPUSH
31924: CALL_OW 313
31928: PUSH
31929: LD_INT 3
31931: LESS
31932: IFFALSE 31968
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31934: LD_INT 0
31936: PPUSH
31937: LD_INT 5
31939: PUSH
31940: LD_INT 8
31942: PUSH
31943: LD_INT 9
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PUSH
31951: LD_VAR 0 17
31955: ARRAY
31956: PPUSH
31957: LD_VAR 0 4
31961: PPUSH
31962: CALL_OW 380
31966: GO 31985
// PrepareHuman ( false , i , skill ) ;
31968: LD_INT 0
31970: PPUSH
31971: LD_VAR 0 8
31975: PPUSH
31976: LD_VAR 0 4
31980: PPUSH
31981: CALL_OW 380
// end else
31985: GO 32004
// PrepareHuman ( false , i , skill ) ;
31987: LD_INT 0
31989: PPUSH
31990: LD_VAR 0 8
31994: PPUSH
31995: LD_VAR 0 4
31999: PPUSH
32000: CALL_OW 380
// un := CreateHuman ;
32004: LD_ADDR_VAR 0 14
32008: PUSH
32009: CALL_OW 44
32013: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32014: LD_ADDR_VAR 0 7
32018: PUSH
32019: LD_VAR 0 7
32023: PPUSH
32024: LD_INT 1
32026: PPUSH
32027: LD_VAR 0 14
32031: PPUSH
32032: CALL_OW 2
32036: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32037: LD_VAR 0 14
32041: PPUSH
32042: LD_VAR 0 12
32046: PUSH
32047: LD_INT 1
32049: ARRAY
32050: PPUSH
32051: CALL_OW 52
// end ;
32055: GO 31690
32057: POP
32058: POP
// end ;
32059: GO 30990
32061: POP
32062: POP
// result := result ^ buildings ;
32063: LD_ADDR_VAR 0 7
32067: PUSH
32068: LD_VAR 0 7
32072: PUSH
32073: LD_VAR 0 18
32077: ADD
32078: ST_TO_ADDR
// end else
32079: GO 32222
// begin for i = 1 to personel do
32081: LD_ADDR_VAR 0 8
32085: PUSH
32086: DOUBLE
32087: LD_INT 1
32089: DEC
32090: ST_TO_ADDR
32091: LD_VAR 0 6
32095: PUSH
32096: FOR_TO
32097: IFFALSE 32220
// begin if i > 4 then
32099: LD_VAR 0 8
32103: PUSH
32104: LD_INT 4
32106: GREATER
32107: IFFALSE 32111
// break ;
32109: GO 32220
// x := personel [ i ] ;
32111: LD_ADDR_VAR 0 13
32115: PUSH
32116: LD_VAR 0 6
32120: PUSH
32121: LD_VAR 0 8
32125: ARRAY
32126: ST_TO_ADDR
// if x = - 1 then
32127: LD_VAR 0 13
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: EQUAL
32136: IFFALSE 32140
// continue ;
32138: GO 32096
// PrepareHuman ( false , i , skill ) ;
32140: LD_INT 0
32142: PPUSH
32143: LD_VAR 0 8
32147: PPUSH
32148: LD_VAR 0 4
32152: PPUSH
32153: CALL_OW 380
// un := CreateHuman ;
32157: LD_ADDR_VAR 0 14
32161: PUSH
32162: CALL_OW 44
32166: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32167: LD_VAR 0 14
32171: PPUSH
32172: LD_VAR 0 1
32176: PPUSH
32177: CALL_OW 250
32181: PPUSH
32182: LD_VAR 0 1
32186: PPUSH
32187: CALL_OW 251
32191: PPUSH
32192: LD_INT 10
32194: PPUSH
32195: LD_INT 0
32197: PPUSH
32198: CALL_OW 50
// result := result ^ un ;
32202: LD_ADDR_VAR 0 7
32206: PUSH
32207: LD_VAR 0 7
32211: PUSH
32212: LD_VAR 0 14
32216: ADD
32217: ST_TO_ADDR
// end ;
32218: GO 32096
32220: POP
32221: POP
// end ; end ;
32222: LD_VAR 0 7
32226: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32227: LD_INT 0
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
// result := false ;
32245: LD_ADDR_VAR 0 3
32249: PUSH
32250: LD_INT 0
32252: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32253: LD_VAR 0 1
32257: NOT
32258: IFTRUE 32283
32260: PUSH
32261: LD_VAR 0 1
32265: PPUSH
32266: CALL_OW 266
32270: PUSH
32271: LD_INT 32
32273: PUSH
32274: LD_INT 33
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: IN
32281: NOT
32282: OR
32283: IFFALSE 32287
// exit ;
32285: GO 33422
// nat := GetNation ( tower ) ;
32287: LD_ADDR_VAR 0 12
32291: PUSH
32292: LD_VAR 0 1
32296: PPUSH
32297: CALL_OW 248
32301: ST_TO_ADDR
// side := GetSide ( tower ) ;
32302: LD_ADDR_VAR 0 16
32306: PUSH
32307: LD_VAR 0 1
32311: PPUSH
32312: CALL_OW 255
32316: ST_TO_ADDR
// x := GetX ( tower ) ;
32317: LD_ADDR_VAR 0 10
32321: PUSH
32322: LD_VAR 0 1
32326: PPUSH
32327: CALL_OW 250
32331: ST_TO_ADDR
// y := GetY ( tower ) ;
32332: LD_ADDR_VAR 0 11
32336: PUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 251
32346: ST_TO_ADDR
// if not x or not y then
32347: LD_VAR 0 10
32351: NOT
32352: IFTRUE 32361
32354: PUSH
32355: LD_VAR 0 11
32359: NOT
32360: OR
32361: IFFALSE 32365
// exit ;
32363: GO 33422
// weapon := 0 ;
32365: LD_ADDR_VAR 0 18
32369: PUSH
32370: LD_INT 0
32372: ST_TO_ADDR
// fac_list := [ ] ;
32373: LD_ADDR_VAR 0 17
32377: PUSH
32378: EMPTY
32379: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32380: LD_ADDR_VAR 0 6
32384: PUSH
32385: LD_VAR 0 1
32389: PPUSH
32390: CALL_OW 274
32394: PPUSH
32395: LD_VAR 0 2
32399: PPUSH
32400: LD_INT 0
32402: PPUSH
32403: CALL 29957 0 3
32407: PPUSH
32408: LD_INT 30
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PPUSH
32418: CALL_OW 72
32422: ST_TO_ADDR
// if not factories then
32423: LD_VAR 0 6
32427: NOT
32428: IFFALSE 32432
// exit ;
32430: GO 33422
// for i in factories do
32432: LD_ADDR_VAR 0 8
32436: PUSH
32437: LD_VAR 0 6
32441: PUSH
32442: FOR_IN
32443: IFFALSE 32468
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32445: LD_ADDR_VAR 0 17
32449: PUSH
32450: LD_VAR 0 17
32454: PUSH
32455: LD_VAR 0 8
32459: PPUSH
32460: CALL_OW 478
32464: UNION
32465: ST_TO_ADDR
32466: GO 32442
32468: POP
32469: POP
// if not fac_list then
32470: LD_VAR 0 17
32474: NOT
32475: IFFALSE 32479
// exit ;
32477: GO 33422
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 9
32492: PUSH
32493: LD_INT 10
32495: PUSH
32496: LD_INT 6
32498: PUSH
32499: LD_INT 7
32501: PUSH
32502: LD_INT 11
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 27
32516: PUSH
32517: LD_INT 28
32519: PUSH
32520: LD_INT 26
32522: PUSH
32523: LD_INT 30
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 43
32534: PUSH
32535: LD_INT 44
32537: PUSH
32538: LD_INT 46
32540: PUSH
32541: LD_INT 45
32543: PUSH
32544: LD_INT 47
32546: PUSH
32547: LD_INT 49
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: PUSH
32563: LD_VAR 0 12
32567: ARRAY
32568: ST_TO_ADDR
// list := list isect fac_list ;
32569: LD_ADDR_VAR 0 5
32573: PUSH
32574: LD_VAR 0 5
32578: PUSH
32579: LD_VAR 0 17
32583: ISECT
32584: ST_TO_ADDR
// if not list then
32585: LD_VAR 0 5
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 33422
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32594: LD_VAR 0 12
32598: PUSH
32599: LD_INT 3
32601: EQUAL
32602: IFFALSE 32614
32604: PUSH
32605: LD_INT 49
32607: PUSH
32608: LD_VAR 0 5
32612: IN
32613: AND
32614: IFFALSE 32634
32616: PUSH
32617: LD_INT 31
32619: PPUSH
32620: LD_VAR 0 16
32624: PPUSH
32625: CALL_OW 321
32629: PUSH
32630: LD_INT 2
32632: EQUAL
32633: AND
32634: IFFALSE 32694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32636: LD_INT 22
32638: PUSH
32639: LD_VAR 0 16
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 35
32650: PUSH
32651: LD_INT 49
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 91
32660: PUSH
32661: LD_VAR 0 1
32665: PUSH
32666: LD_INT 10
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: PPUSH
32679: CALL_OW 69
32683: NOT
32684: IFFALSE 32694
// weapon := ru_time_lapser ;
32686: LD_ADDR_VAR 0 18
32690: PUSH
32691: LD_INT 49
32693: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32694: LD_VAR 0 12
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: IN
32709: IFFALSE 32733
32711: PUSH
32712: LD_INT 11
32714: PUSH
32715: LD_VAR 0 5
32719: IN
32720: IFTRUE 32732
32722: PUSH
32723: LD_INT 30
32725: PUSH
32726: LD_VAR 0 5
32730: IN
32731: OR
32732: AND
32733: IFFALSE 32753
32735: PUSH
32736: LD_INT 6
32738: PPUSH
32739: LD_VAR 0 16
32743: PPUSH
32744: CALL_OW 321
32748: PUSH
32749: LD_INT 2
32751: EQUAL
32752: AND
32753: IFFALSE 32920
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32755: LD_INT 22
32757: PUSH
32758: LD_VAR 0 16
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 35
32772: PUSH
32773: LD_INT 11
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 35
32782: PUSH
32783: LD_INT 30
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 91
32797: PUSH
32798: LD_VAR 0 1
32802: PUSH
32803: LD_INT 18
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: PPUSH
32816: CALL_OW 69
32820: NOT
32821: IFFALSE 32897
32823: PUSH
32824: LD_INT 22
32826: PUSH
32827: LD_VAR 0 16
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 30
32841: PUSH
32842: LD_INT 32
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 30
32851: PUSH
32852: LD_INT 33
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 91
32866: PUSH
32867: LD_VAR 0 1
32871: PUSH
32872: LD_INT 12
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: PUSH
32885: EMPTY
32886: LIST
32887: PPUSH
32888: CALL_OW 69
32892: PUSH
32893: LD_INT 2
32895: GREATER
32896: AND
32897: IFFALSE 32920
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32899: LD_ADDR_VAR 0 18
32903: PUSH
32904: LD_INT 11
32906: PUSH
32907: LD_INT 30
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_VAR 0 12
32918: ARRAY
32919: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32920: LD_VAR 0 18
32924: NOT
32925: IFFALSE 32945
32927: PUSH
32928: LD_INT 40
32930: PPUSH
32931: LD_VAR 0 16
32935: PPUSH
32936: CALL_OW 321
32940: PUSH
32941: LD_INT 2
32943: EQUAL
32944: AND
32945: IFFALSE 32981
32947: PUSH
32948: LD_INT 7
32950: PUSH
32951: LD_VAR 0 5
32955: IN
32956: IFTRUE 32968
32958: PUSH
32959: LD_INT 28
32961: PUSH
32962: LD_VAR 0 5
32966: IN
32967: OR
32968: IFTRUE 32980
32970: PUSH
32971: LD_INT 45
32973: PUSH
32974: LD_VAR 0 5
32978: IN
32979: OR
32980: AND
32981: IFFALSE 33235
// begin hex := GetHexInfo ( x , y ) ;
32983: LD_ADDR_VAR 0 4
32987: PUSH
32988: LD_VAR 0 10
32992: PPUSH
32993: LD_VAR 0 11
32997: PPUSH
32998: CALL_OW 546
33002: ST_TO_ADDR
// if hex [ 1 ] then
33003: LD_VAR 0 4
33007: PUSH
33008: LD_INT 1
33010: ARRAY
33011: IFFALSE 33015
// exit ;
33013: GO 33422
// height := hex [ 2 ] ;
33015: LD_ADDR_VAR 0 15
33019: PUSH
33020: LD_VAR 0 4
33024: PUSH
33025: LD_INT 2
33027: ARRAY
33028: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33029: LD_ADDR_VAR 0 14
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 5
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// for i in tmp do
33052: LD_ADDR_VAR 0 8
33056: PUSH
33057: LD_VAR 0 14
33061: PUSH
33062: FOR_IN
33063: IFFALSE 33233
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33065: LD_ADDR_VAR 0 9
33069: PUSH
33070: LD_VAR 0 10
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_INT 5
33082: PPUSH
33083: CALL_OW 272
33087: PUSH
33088: LD_VAR 0 11
33092: PPUSH
33093: LD_VAR 0 8
33097: PPUSH
33098: LD_INT 5
33100: PPUSH
33101: CALL_OW 273
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33110: LD_VAR 0 9
33114: PUSH
33115: LD_INT 1
33117: ARRAY
33118: PPUSH
33119: LD_VAR 0 9
33123: PUSH
33124: LD_INT 2
33126: ARRAY
33127: PPUSH
33128: CALL_OW 488
33132: IFFALSE 33231
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33134: LD_ADDR_VAR 0 4
33138: PUSH
33139: LD_VAR 0 9
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: PPUSH
33148: LD_VAR 0 9
33152: PUSH
33153: LD_INT 2
33155: ARRAY
33156: PPUSH
33157: CALL_OW 546
33161: ST_TO_ADDR
// if hex [ 1 ] then
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: IFFALSE 33174
// continue ;
33172: GO 33062
// h := hex [ 2 ] ;
33174: LD_ADDR_VAR 0 13
33178: PUSH
33179: LD_VAR 0 4
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: ST_TO_ADDR
// if h + 7 < height then
33188: LD_VAR 0 13
33192: PUSH
33193: LD_INT 7
33195: PLUS
33196: PUSH
33197: LD_VAR 0 15
33201: LESS
33202: IFFALSE 33231
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33204: LD_ADDR_VAR 0 18
33208: PUSH
33209: LD_INT 7
33211: PUSH
33212: LD_INT 28
33214: PUSH
33215: LD_INT 45
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: PUSH
33223: LD_VAR 0 12
33227: ARRAY
33228: ST_TO_ADDR
// break ;
33229: GO 33233
// end ; end ; end ;
33231: GO 33062
33233: POP
33234: POP
// end ; if not weapon then
33235: LD_VAR 0 18
33239: NOT
33240: IFFALSE 33300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33242: LD_ADDR_VAR 0 5
33246: PUSH
33247: LD_VAR 0 5
33251: PUSH
33252: LD_INT 11
33254: PUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 49
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: DIFF
33266: ST_TO_ADDR
// if not list then
33267: LD_VAR 0 5
33271: NOT
33272: IFFALSE 33276
// exit ;
33274: GO 33422
// weapon := list [ rand ( 1 , list ) ] ;
33276: LD_ADDR_VAR 0 18
33280: PUSH
33281: LD_VAR 0 5
33285: PUSH
33286: LD_INT 1
33288: PPUSH
33289: LD_VAR 0 5
33293: PPUSH
33294: CALL_OW 12
33298: ARRAY
33299: ST_TO_ADDR
// end ; if weapon then
33300: LD_VAR 0 18
33304: IFFALSE 33422
// begin tmp := CostOfWeapon ( weapon ) ;
33306: LD_ADDR_VAR 0 14
33310: PUSH
33311: LD_VAR 0 18
33315: PPUSH
33316: CALL_OW 451
33320: ST_TO_ADDR
// j := GetBase ( tower ) ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 274
33335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33336: LD_VAR 0 9
33340: PPUSH
33341: LD_INT 1
33343: PPUSH
33344: CALL_OW 275
33348: PUSH
33349: LD_VAR 0 14
33353: PUSH
33354: LD_INT 1
33356: ARRAY
33357: GREATEREQUAL
33358: IFFALSE 33384
33360: PUSH
33361: LD_VAR 0 9
33365: PPUSH
33366: LD_INT 2
33368: PPUSH
33369: CALL_OW 275
33373: PUSH
33374: LD_VAR 0 14
33378: PUSH
33379: LD_INT 2
33381: ARRAY
33382: GREATEREQUAL
33383: AND
33384: IFFALSE 33410
33386: PUSH
33387: LD_VAR 0 9
33391: PPUSH
33392: LD_INT 3
33394: PPUSH
33395: CALL_OW 275
33399: PUSH
33400: LD_VAR 0 14
33404: PUSH
33405: LD_INT 3
33407: ARRAY
33408: GREATEREQUAL
33409: AND
33410: IFFALSE 33422
// result := weapon ;
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_VAR 0 18
33421: ST_TO_ADDR
// end ; end ;
33422: LD_VAR 0 3
33426: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33427: LD_INT 0
33429: PPUSH
33430: PPUSH
// result := true ;
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 1
33438: ST_TO_ADDR
// if array1 = array2 then
33439: LD_VAR 0 1
33443: PUSH
33444: LD_VAR 0 2
33448: EQUAL
33449: IFFALSE 33509
// begin for i = 1 to array1 do
33451: LD_ADDR_VAR 0 4
33455: PUSH
33456: DOUBLE
33457: LD_INT 1
33459: DEC
33460: ST_TO_ADDR
33461: LD_VAR 0 1
33465: PUSH
33466: FOR_TO
33467: IFFALSE 33505
// if array1 [ i ] <> array2 [ i ] then
33469: LD_VAR 0 1
33473: PUSH
33474: LD_VAR 0 4
33478: ARRAY
33479: PUSH
33480: LD_VAR 0 2
33484: PUSH
33485: LD_VAR 0 4
33489: ARRAY
33490: NONEQUAL
33491: IFFALSE 33503
// begin result := false ;
33493: LD_ADDR_VAR 0 3
33497: PUSH
33498: LD_INT 0
33500: ST_TO_ADDR
// break ;
33501: GO 33505
// end ;
33503: GO 33466
33505: POP
33506: POP
// end else
33507: GO 33517
// result := false ;
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_INT 0
33516: ST_TO_ADDR
// end ;
33517: LD_VAR 0 3
33521: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33522: LD_INT 0
33524: PPUSH
33525: PPUSH
// if not array1 or not array2 then
33526: LD_VAR 0 1
33530: NOT
33531: IFTRUE 33540
33533: PUSH
33534: LD_VAR 0 2
33538: NOT
33539: OR
33540: IFFALSE 33544
// exit ;
33542: GO 33608
// result := true ;
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_INT 1
33551: ST_TO_ADDR
// for i = 1 to array1 do
33552: LD_ADDR_VAR 0 4
33556: PUSH
33557: DOUBLE
33558: LD_INT 1
33560: DEC
33561: ST_TO_ADDR
33562: LD_VAR 0 1
33566: PUSH
33567: FOR_TO
33568: IFFALSE 33606
// if array1 [ i ] <> array2 [ i ] then
33570: LD_VAR 0 1
33574: PUSH
33575: LD_VAR 0 4
33579: ARRAY
33580: PUSH
33581: LD_VAR 0 2
33585: PUSH
33586: LD_VAR 0 4
33590: ARRAY
33591: NONEQUAL
33592: IFFALSE 33604
// begin result := false ;
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 0
33601: ST_TO_ADDR
// break ;
33602: GO 33606
// end ;
33604: GO 33567
33606: POP
33607: POP
// end ;
33608: LD_VAR 0 3
33612: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33613: LD_INT 0
33615: PPUSH
33616: PPUSH
33617: PPUSH
// pom := GetBase ( fac ) ;
33618: LD_ADDR_VAR 0 5
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 274
33632: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33633: LD_ADDR_VAR 0 4
33637: PUSH
33638: LD_VAR 0 2
33642: PUSH
33643: LD_INT 1
33645: ARRAY
33646: PPUSH
33647: LD_VAR 0 2
33651: PUSH
33652: LD_INT 2
33654: ARRAY
33655: PPUSH
33656: LD_VAR 0 2
33660: PUSH
33661: LD_INT 3
33663: ARRAY
33664: PPUSH
33665: LD_VAR 0 2
33669: PUSH
33670: LD_INT 4
33672: ARRAY
33673: PPUSH
33674: CALL_OW 449
33678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_VAR 0 5
33688: PPUSH
33689: LD_INT 1
33691: PPUSH
33692: CALL_OW 275
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: LD_INT 1
33704: ARRAY
33705: GREATEREQUAL
33706: IFFALSE 33732
33708: PUSH
33709: LD_VAR 0 5
33713: PPUSH
33714: LD_INT 2
33716: PPUSH
33717: CALL_OW 275
33721: PUSH
33722: LD_VAR 0 4
33726: PUSH
33727: LD_INT 2
33729: ARRAY
33730: GREATEREQUAL
33731: AND
33732: IFFALSE 33758
33734: PUSH
33735: LD_VAR 0 5
33739: PPUSH
33740: LD_INT 3
33742: PPUSH
33743: CALL_OW 275
33747: PUSH
33748: LD_VAR 0 4
33752: PUSH
33753: LD_INT 3
33755: ARRAY
33756: GREATEREQUAL
33757: AND
33758: ST_TO_ADDR
// end ;
33759: LD_VAR 0 3
33763: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33764: LD_INT 0
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
// pom := GetBase ( building ) ;
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 274
33784: ST_TO_ADDR
// if not pom then
33785: LD_VAR 0 3
33789: NOT
33790: IFFALSE 33794
// exit ;
33792: GO 33968
// btype := GetBType ( building ) ;
33794: LD_ADDR_VAR 0 5
33798: PUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 266
33808: ST_TO_ADDR
// if btype = b_armoury then
33809: LD_VAR 0 5
33813: PUSH
33814: LD_INT 4
33816: EQUAL
33817: IFFALSE 33827
// btype := b_barracks ;
33819: LD_ADDR_VAR 0 5
33823: PUSH
33824: LD_INT 5
33826: ST_TO_ADDR
// if btype = b_depot then
33827: LD_VAR 0 5
33831: PUSH
33832: LD_INT 0
33834: EQUAL
33835: IFFALSE 33845
// btype := b_warehouse ;
33837: LD_ADDR_VAR 0 5
33841: PUSH
33842: LD_INT 1
33844: ST_TO_ADDR
// if btype = b_workshop then
33845: LD_VAR 0 5
33849: PUSH
33850: LD_INT 2
33852: EQUAL
33853: IFFALSE 33863
// btype := b_factory ;
33855: LD_ADDR_VAR 0 5
33859: PUSH
33860: LD_INT 3
33862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33863: LD_ADDR_VAR 0 4
33867: PUSH
33868: LD_VAR 0 5
33872: PPUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 248
33882: PPUSH
33883: CALL_OW 450
33887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33888: LD_ADDR_VAR 0 2
33892: PUSH
33893: LD_VAR 0 3
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: CALL_OW 275
33905: PUSH
33906: LD_VAR 0 4
33910: PUSH
33911: LD_INT 1
33913: ARRAY
33914: GREATEREQUAL
33915: IFFALSE 33941
33917: PUSH
33918: LD_VAR 0 3
33922: PPUSH
33923: LD_INT 2
33925: PPUSH
33926: CALL_OW 275
33930: PUSH
33931: LD_VAR 0 4
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: GREATEREQUAL
33940: AND
33941: IFFALSE 33967
33943: PUSH
33944: LD_VAR 0 3
33948: PPUSH
33949: LD_INT 3
33951: PPUSH
33952: CALL_OW 275
33956: PUSH
33957: LD_VAR 0 4
33961: PUSH
33962: LD_INT 3
33964: ARRAY
33965: GREATEREQUAL
33966: AND
33967: ST_TO_ADDR
// end ;
33968: LD_VAR 0 2
33972: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
33977: PPUSH
// pom := GetBase ( building ) ;
33978: LD_ADDR_VAR 0 4
33982: PUSH
33983: LD_VAR 0 1
33987: PPUSH
33988: CALL_OW 274
33992: ST_TO_ADDR
// if not pom then
33993: LD_VAR 0 4
33997: NOT
33998: IFFALSE 34002
// exit ;
34000: GO 34107
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34002: LD_ADDR_VAR 0 5
34006: PUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 248
34021: PPUSH
34022: CALL_OW 450
34026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_VAR 0 4
34036: PPUSH
34037: LD_INT 1
34039: PPUSH
34040: CALL_OW 275
34044: PUSH
34045: LD_VAR 0 5
34049: PUSH
34050: LD_INT 1
34052: ARRAY
34053: GREATEREQUAL
34054: IFFALSE 34080
34056: PUSH
34057: LD_VAR 0 4
34061: PPUSH
34062: LD_INT 2
34064: PPUSH
34065: CALL_OW 275
34069: PUSH
34070: LD_VAR 0 5
34074: PUSH
34075: LD_INT 2
34077: ARRAY
34078: GREATEREQUAL
34079: AND
34080: IFFALSE 34106
34082: PUSH
34083: LD_VAR 0 4
34087: PPUSH
34088: LD_INT 3
34090: PPUSH
34091: CALL_OW 275
34095: PUSH
34096: LD_VAR 0 5
34100: PUSH
34101: LD_INT 3
34103: ARRAY
34104: GREATEREQUAL
34105: AND
34106: ST_TO_ADDR
// end ;
34107: LD_VAR 0 3
34111: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
// result := false ;
34125: LD_ADDR_VAR 0 8
34129: PUSH
34130: LD_INT 0
34132: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34133: LD_VAR 0 5
34137: NOT
34138: IFTRUE 34147
34140: PUSH
34141: LD_VAR 0 1
34145: NOT
34146: OR
34147: IFTRUE 34156
34149: PUSH
34150: LD_VAR 0 2
34154: NOT
34155: OR
34156: IFTRUE 34165
34158: PUSH
34159: LD_VAR 0 3
34163: NOT
34164: OR
34165: IFFALSE 34169
// exit ;
34167: GO 34995
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34169: LD_ADDR_VAR 0 14
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: LD_VAR 0 4
34193: PPUSH
34194: LD_VAR 0 5
34198: PUSH
34199: LD_INT 1
34201: ARRAY
34202: PPUSH
34203: CALL_OW 248
34207: PPUSH
34208: LD_INT 0
34210: PPUSH
34211: CALL 36276 0 6
34215: ST_TO_ADDR
// if not hexes then
34216: LD_VAR 0 14
34220: NOT
34221: IFFALSE 34225
// exit ;
34223: GO 34995
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34225: LD_ADDR_VAR 0 17
34229: PUSH
34230: LD_VAR 0 5
34234: PPUSH
34235: LD_INT 22
34237: PUSH
34238: LD_VAR 0 13
34242: PPUSH
34243: CALL_OW 255
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 30
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 30
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PPUSH
34284: CALL_OW 72
34288: ST_TO_ADDR
// for i = 1 to hexes do
34289: LD_ADDR_VAR 0 9
34293: PUSH
34294: DOUBLE
34295: LD_INT 1
34297: DEC
34298: ST_TO_ADDR
34299: LD_VAR 0 14
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34993
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34307: LD_ADDR_VAR 0 13
34311: PUSH
34312: LD_VAR 0 14
34316: PUSH
34317: LD_VAR 0 9
34321: ARRAY
34322: PUSH
34323: LD_INT 1
34325: ARRAY
34326: PPUSH
34327: LD_VAR 0 14
34331: PUSH
34332: LD_VAR 0 9
34336: ARRAY
34337: PUSH
34338: LD_INT 2
34340: ARRAY
34341: PPUSH
34342: CALL_OW 428
34346: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34347: LD_VAR 0 14
34351: PUSH
34352: LD_VAR 0 9
34356: ARRAY
34357: PUSH
34358: LD_INT 1
34360: ARRAY
34361: PPUSH
34362: LD_VAR 0 14
34366: PUSH
34367: LD_VAR 0 9
34371: ARRAY
34372: PUSH
34373: LD_INT 2
34375: ARRAY
34376: PPUSH
34377: CALL_OW 351
34381: IFTRUE 34420
34383: PUSH
34384: LD_VAR 0 14
34388: PUSH
34389: LD_VAR 0 9
34393: ARRAY
34394: PUSH
34395: LD_INT 1
34397: ARRAY
34398: PPUSH
34399: LD_VAR 0 14
34403: PUSH
34404: LD_VAR 0 9
34408: ARRAY
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: PPUSH
34414: CALL_OW 488
34418: NOT
34419: OR
34420: IFTRUE 34437
34422: PUSH
34423: LD_VAR 0 13
34427: PPUSH
34428: CALL_OW 247
34432: PUSH
34433: LD_INT 3
34435: EQUAL
34436: OR
34437: IFFALSE 34443
// exit ;
34439: POP
34440: POP
34441: GO 34995
// if not tmp then
34443: LD_VAR 0 13
34447: NOT
34448: IFFALSE 34452
// continue ;
34450: GO 34304
// result := true ;
34452: LD_ADDR_VAR 0 8
34456: PUSH
34457: LD_INT 1
34459: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34460: LD_VAR 0 6
34464: IFFALSE 34481
34466: PUSH
34467: LD_VAR 0 13
34471: PPUSH
34472: CALL_OW 247
34476: PUSH
34477: LD_INT 2
34479: EQUAL
34480: AND
34481: IFFALSE 34498
34483: PUSH
34484: LD_VAR 0 13
34488: PPUSH
34489: CALL_OW 263
34493: PUSH
34494: LD_INT 1
34496: EQUAL
34497: AND
34498: IFFALSE 34662
// begin if IsDrivenBy ( tmp ) then
34500: LD_VAR 0 13
34504: PPUSH
34505: CALL_OW 311
34509: IFFALSE 34513
// continue ;
34511: GO 34304
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34513: LD_VAR 0 6
34517: PPUSH
34518: LD_INT 3
34520: PUSH
34521: LD_INT 60
34523: PUSH
34524: EMPTY
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 55
34536: PUSH
34537: EMPTY
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PPUSH
34548: CALL_OW 72
34552: IFFALSE 34660
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34554: LD_ADDR_VAR 0 18
34558: PUSH
34559: LD_VAR 0 6
34563: PPUSH
34564: LD_INT 3
34566: PUSH
34567: LD_INT 60
34569: PUSH
34570: EMPTY
34571: LIST
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: LD_INT 55
34582: PUSH
34583: EMPTY
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 72
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: ST_TO_ADDR
// if IsInUnit ( driver ) then
34603: LD_VAR 0 18
34607: PPUSH
34608: CALL_OW 310
34612: IFFALSE 34623
// ComExit ( driver ) ;
34614: LD_VAR 0 18
34618: PPUSH
34619: CALL 60266 0 1
// AddComEnterUnit ( driver , tmp ) ;
34623: LD_VAR 0 18
34627: PPUSH
34628: LD_VAR 0 13
34632: PPUSH
34633: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34637: LD_VAR 0 18
34641: PPUSH
34642: LD_VAR 0 7
34646: PPUSH
34647: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34651: LD_VAR 0 18
34655: PPUSH
34656: CALL_OW 181
// end ; continue ;
34660: GO 34304
// end ; if not cleaners or not tmp in cleaners then
34662: LD_VAR 0 6
34666: NOT
34667: IFTRUE 34682
34669: PUSH
34670: LD_VAR 0 13
34674: PUSH
34675: LD_VAR 0 6
34679: IN
34680: NOT
34681: OR
34682: IFFALSE 34991
// begin if dep then
34684: LD_VAR 0 17
34688: IFFALSE 34824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34690: LD_ADDR_VAR 0 16
34694: PUSH
34695: LD_VAR 0 17
34699: PUSH
34700: LD_INT 1
34702: ARRAY
34703: PPUSH
34704: CALL_OW 250
34708: PPUSH
34709: LD_VAR 0 17
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: PPUSH
34718: CALL_OW 254
34722: PPUSH
34723: LD_INT 5
34725: PPUSH
34726: CALL_OW 272
34730: PUSH
34731: LD_VAR 0 17
34735: PUSH
34736: LD_INT 1
34738: ARRAY
34739: PPUSH
34740: CALL_OW 251
34744: PPUSH
34745: LD_VAR 0 17
34749: PUSH
34750: LD_INT 1
34752: ARRAY
34753: PPUSH
34754: CALL_OW 254
34758: PPUSH
34759: LD_INT 5
34761: PPUSH
34762: CALL_OW 273
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34771: LD_VAR 0 16
34775: PUSH
34776: LD_INT 1
34778: ARRAY
34779: PPUSH
34780: LD_VAR 0 16
34784: PUSH
34785: LD_INT 2
34787: ARRAY
34788: PPUSH
34789: CALL_OW 488
34793: IFFALSE 34824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34795: LD_VAR 0 13
34799: PPUSH
34800: LD_VAR 0 16
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: PPUSH
34809: LD_VAR 0 16
34813: PUSH
34814: LD_INT 2
34816: ARRAY
34817: PPUSH
34818: CALL_OW 111
// continue ;
34822: GO 34304
// end ; end ; r := GetDir ( tmp ) ;
34824: LD_ADDR_VAR 0 15
34828: PUSH
34829: LD_VAR 0 13
34833: PPUSH
34834: CALL_OW 254
34838: ST_TO_ADDR
// if r = 5 then
34839: LD_VAR 0 15
34843: PUSH
34844: LD_INT 5
34846: EQUAL
34847: IFFALSE 34857
// r := 0 ;
34849: LD_ADDR_VAR 0 15
34853: PUSH
34854: LD_INT 0
34856: ST_TO_ADDR
// for j = r to 5 do
34857: LD_ADDR_VAR 0 10
34861: PUSH
34862: DOUBLE
34863: LD_VAR 0 15
34867: DEC
34868: ST_TO_ADDR
34869: LD_INT 5
34871: PUSH
34872: FOR_TO
34873: IFFALSE 34989
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34875: LD_ADDR_VAR 0 11
34879: PUSH
34880: LD_VAR 0 13
34884: PPUSH
34885: CALL_OW 250
34889: PPUSH
34890: LD_VAR 0 10
34894: PPUSH
34895: LD_INT 2
34897: PPUSH
34898: CALL_OW 272
34902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34903: LD_ADDR_VAR 0 12
34907: PUSH
34908: LD_VAR 0 13
34912: PPUSH
34913: CALL_OW 251
34917: PPUSH
34918: LD_VAR 0 10
34922: PPUSH
34923: LD_INT 2
34925: PPUSH
34926: CALL_OW 273
34930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34931: LD_VAR 0 11
34935: PPUSH
34936: LD_VAR 0 12
34940: PPUSH
34941: CALL_OW 488
34945: IFFALSE 34964
34947: PUSH
34948: LD_VAR 0 11
34952: PPUSH
34953: LD_VAR 0 12
34957: PPUSH
34958: CALL_OW 428
34962: NOT
34963: AND
34964: IFFALSE 34987
// begin ComMoveXY ( tmp , _x , _y ) ;
34966: LD_VAR 0 13
34970: PPUSH
34971: LD_VAR 0 11
34975: PPUSH
34976: LD_VAR 0 12
34980: PPUSH
34981: CALL_OW 111
// break ;
34985: GO 34989
// end ; end ;
34987: GO 34872
34989: POP
34990: POP
// end ; end ;
34991: GO 34304
34993: POP
34994: POP
// end ;
34995: LD_VAR 0 8
34999: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35000: LD_INT 0
35002: PPUSH
// result := true ;
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 1
35010: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35011: LD_VAR 0 2
35015: PUSH
35016: LD_INT 24
35018: DOUBLE
35019: EQUAL
35020: IFTRUE 35030
35022: LD_INT 33
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35055
35030: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35031: LD_ADDR_VAR 0 3
35035: PUSH
35036: LD_INT 32
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 321
35048: PUSH
35049: LD_INT 2
35051: EQUAL
35052: ST_TO_ADDR
35053: GO 35371
35055: LD_INT 20
35057: DOUBLE
35058: EQUAL
35059: IFTRUE 35063
35061: GO 35088
35063: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35064: LD_ADDR_VAR 0 3
35068: PUSH
35069: LD_INT 6
35071: PPUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 321
35081: PUSH
35082: LD_INT 2
35084: EQUAL
35085: ST_TO_ADDR
35086: GO 35371
35088: LD_INT 22
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35102
35094: LD_INT 36
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35102
35100: GO 35127
35102: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35103: LD_ADDR_VAR 0 3
35107: PUSH
35108: LD_INT 15
35110: PPUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 321
35120: PUSH
35121: LD_INT 2
35123: EQUAL
35124: ST_TO_ADDR
35125: GO 35371
35127: LD_INT 30
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35135
35133: GO 35160
35135: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: LD_INT 20
35143: PPUSH
35144: LD_VAR 0 1
35148: PPUSH
35149: CALL_OW 321
35153: PUSH
35154: LD_INT 2
35156: EQUAL
35157: ST_TO_ADDR
35158: GO 35371
35160: LD_INT 28
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35174
35166: LD_INT 21
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35199
35174: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: LD_INT 21
35182: PPUSH
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 321
35192: PUSH
35193: LD_INT 2
35195: EQUAL
35196: ST_TO_ADDR
35197: GO 35371
35199: LD_INT 16
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35207
35205: GO 35232
35207: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35208: LD_ADDR_VAR 0 3
35212: PUSH
35213: LD_INT 84
35215: PPUSH
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL_OW 321
35225: PUSH
35226: LD_INT 2
35228: EQUAL
35229: ST_TO_ADDR
35230: GO 35371
35232: LD_INT 19
35234: DOUBLE
35235: EQUAL
35236: IFTRUE 35246
35238: LD_INT 23
35240: DOUBLE
35241: EQUAL
35242: IFTRUE 35246
35244: GO 35271
35246: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35247: LD_ADDR_VAR 0 3
35251: PUSH
35252: LD_INT 83
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 321
35264: PUSH
35265: LD_INT 2
35267: EQUAL
35268: ST_TO_ADDR
35269: GO 35371
35271: LD_INT 17
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35304
35279: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_INT 39
35287: PPUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 321
35297: PUSH
35298: LD_INT 2
35300: EQUAL
35301: ST_TO_ADDR
35302: GO 35371
35304: LD_INT 18
35306: DOUBLE
35307: EQUAL
35308: IFTRUE 35312
35310: GO 35337
35312: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 40
35320: PPUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: CALL_OW 321
35330: PUSH
35331: LD_INT 2
35333: EQUAL
35334: ST_TO_ADDR
35335: GO 35371
35337: LD_INT 27
35339: DOUBLE
35340: EQUAL
35341: IFTRUE 35345
35343: GO 35370
35345: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35346: LD_ADDR_VAR 0 3
35350: PUSH
35351: LD_INT 35
35353: PPUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 321
35363: PUSH
35364: LD_INT 2
35366: EQUAL
35367: ST_TO_ADDR
35368: GO 35371
35370: POP
// end ;
35371: LD_VAR 0 3
35375: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35376: LD_INT 0
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
// result := false ;
35389: LD_ADDR_VAR 0 6
35393: PUSH
35394: LD_INT 0
35396: ST_TO_ADDR
// if btype = b_depot then
35397: LD_VAR 0 2
35401: PUSH
35402: LD_INT 0
35404: EQUAL
35405: IFFALSE 35417
// begin result := true ;
35407: LD_ADDR_VAR 0 6
35411: PUSH
35412: LD_INT 1
35414: ST_TO_ADDR
// exit ;
35415: GO 36271
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35417: LD_VAR 0 1
35421: NOT
35422: IFTRUE 35447
35424: PUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 266
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: IN
35445: NOT
35446: OR
35447: IFTRUE 35456
35449: PUSH
35450: LD_VAR 0 2
35454: NOT
35455: OR
35456: IFTRUE 35492
35458: PUSH
35459: LD_VAR 0 5
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: LD_INT 5
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: IN
35490: NOT
35491: OR
35492: IFTRUE 35511
35494: PUSH
35495: LD_VAR 0 3
35499: PPUSH
35500: LD_VAR 0 4
35504: PPUSH
35505: CALL_OW 488
35509: NOT
35510: OR
35511: IFFALSE 35515
// exit ;
35513: GO 36271
// side := GetSide ( depot ) ;
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 255
35529: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35530: LD_VAR 0 9
35534: PPUSH
35535: LD_VAR 0 2
35539: PPUSH
35540: CALL 35000 0 2
35544: NOT
35545: IFFALSE 35549
// exit ;
35547: GO 36271
// pom := GetBase ( depot ) ;
35549: LD_ADDR_VAR 0 10
35553: PUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: CALL_OW 274
35563: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35564: LD_ADDR_VAR 0 11
35568: PUSH
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL_OW 248
35583: PPUSH
35584: CALL_OW 450
35588: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35589: LD_VAR 0 10
35593: PPUSH
35594: LD_INT 1
35596: PPUSH
35597: CALL_OW 275
35601: PUSH
35602: LD_VAR 0 11
35606: PUSH
35607: LD_INT 1
35609: ARRAY
35610: GREATEREQUAL
35611: IFFALSE 35637
35613: PUSH
35614: LD_VAR 0 10
35618: PPUSH
35619: LD_INT 2
35621: PPUSH
35622: CALL_OW 275
35626: PUSH
35627: LD_VAR 0 11
35631: PUSH
35632: LD_INT 2
35634: ARRAY
35635: GREATEREQUAL
35636: AND
35637: IFFALSE 35663
35639: PUSH
35640: LD_VAR 0 10
35644: PPUSH
35645: LD_INT 3
35647: PPUSH
35648: CALL_OW 275
35652: PUSH
35653: LD_VAR 0 11
35657: PUSH
35658: LD_INT 3
35660: ARRAY
35661: GREATEREQUAL
35662: AND
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 36271
// if GetBType ( depot ) = b_depot then
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 266
35677: PUSH
35678: LD_INT 0
35680: EQUAL
35681: IFFALSE 35693
// dist := 28 else
35683: LD_ADDR_VAR 0 14
35687: PUSH
35688: LD_INT 28
35690: ST_TO_ADDR
35691: GO 35701
// dist := 36 ;
35693: LD_ADDR_VAR 0 14
35697: PUSH
35698: LD_INT 36
35700: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35701: LD_VAR 0 1
35705: PPUSH
35706: LD_VAR 0 3
35710: PPUSH
35711: LD_VAR 0 4
35715: PPUSH
35716: CALL_OW 297
35720: PUSH
35721: LD_VAR 0 14
35725: GREATER
35726: IFFALSE 35730
// exit ;
35728: GO 36271
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35730: LD_ADDR_VAR 0 12
35734: PUSH
35735: LD_VAR 0 2
35739: PPUSH
35740: LD_VAR 0 3
35744: PPUSH
35745: LD_VAR 0 4
35749: PPUSH
35750: LD_VAR 0 5
35754: PPUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 248
35764: PPUSH
35765: LD_INT 0
35767: PPUSH
35768: CALL 36276 0 6
35772: ST_TO_ADDR
// if not hexes then
35773: LD_VAR 0 12
35777: NOT
35778: IFFALSE 35782
// exit ;
35780: GO 36271
// hex := GetHexInfo ( x , y ) ;
35782: LD_ADDR_VAR 0 15
35786: PUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 4
35796: PPUSH
35797: CALL_OW 546
35801: ST_TO_ADDR
// if hex [ 1 ] then
35802: LD_VAR 0 15
35806: PUSH
35807: LD_INT 1
35809: ARRAY
35810: IFFALSE 35814
// exit ;
35812: GO 36271
// height := hex [ 2 ] ;
35814: LD_ADDR_VAR 0 13
35818: PUSH
35819: LD_VAR 0 15
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: ST_TO_ADDR
// for i = 1 to hexes do
35828: LD_ADDR_VAR 0 7
35832: PUSH
35833: DOUBLE
35834: LD_INT 1
35836: DEC
35837: ST_TO_ADDR
35838: LD_VAR 0 12
35842: PUSH
35843: FOR_TO
35844: IFFALSE 36188
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35846: LD_VAR 0 12
35850: PUSH
35851: LD_VAR 0 7
35855: ARRAY
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PPUSH
35861: LD_VAR 0 12
35865: PUSH
35866: LD_VAR 0 7
35870: ARRAY
35871: PUSH
35872: LD_INT 2
35874: ARRAY
35875: PPUSH
35876: CALL_OW 488
35880: NOT
35881: IFTRUE 35923
35883: PUSH
35884: LD_VAR 0 12
35888: PUSH
35889: LD_VAR 0 7
35893: ARRAY
35894: PUSH
35895: LD_INT 1
35897: ARRAY
35898: PPUSH
35899: LD_VAR 0 12
35903: PUSH
35904: LD_VAR 0 7
35908: ARRAY
35909: PUSH
35910: LD_INT 2
35912: ARRAY
35913: PPUSH
35914: CALL_OW 428
35918: PUSH
35919: LD_INT 0
35921: GREATER
35922: OR
35923: IFTRUE 35961
35925: PUSH
35926: LD_VAR 0 12
35930: PUSH
35931: LD_VAR 0 7
35935: ARRAY
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PPUSH
35941: LD_VAR 0 12
35945: PUSH
35946: LD_VAR 0 7
35950: ARRAY
35951: PUSH
35952: LD_INT 2
35954: ARRAY
35955: PPUSH
35956: CALL_OW 351
35960: OR
35961: IFFALSE 35967
// exit ;
35963: POP
35964: POP
35965: GO 36271
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35967: LD_ADDR_VAR 0 8
35971: PUSH
35972: LD_VAR 0 12
35976: PUSH
35977: LD_VAR 0 7
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: ARRAY
35986: PPUSH
35987: LD_VAR 0 12
35991: PUSH
35992: LD_VAR 0 7
35996: ARRAY
35997: PUSH
35998: LD_INT 2
36000: ARRAY
36001: PPUSH
36002: CALL_OW 546
36006: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36007: LD_VAR 0 8
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: IFTRUE 36037
36017: PUSH
36018: LD_VAR 0 8
36022: PUSH
36023: LD_INT 2
36025: ARRAY
36026: PUSH
36027: LD_VAR 0 13
36031: PUSH
36032: LD_INT 2
36034: PLUS
36035: GREATER
36036: OR
36037: IFTRUE 36059
36039: PUSH
36040: LD_VAR 0 8
36044: PUSH
36045: LD_INT 2
36047: ARRAY
36048: PUSH
36049: LD_VAR 0 13
36053: PUSH
36054: LD_INT 2
36056: MINUS
36057: LESS
36058: OR
36059: IFTRUE 36127
36061: PUSH
36062: LD_VAR 0 8
36066: PUSH
36067: LD_INT 3
36069: ARRAY
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 8
36076: PUSH
36077: LD_INT 9
36079: PUSH
36080: LD_INT 10
36082: PUSH
36083: LD_INT 11
36085: PUSH
36086: LD_INT 12
36088: PUSH
36089: LD_INT 13
36091: PUSH
36092: LD_INT 16
36094: PUSH
36095: LD_INT 17
36097: PUSH
36098: LD_INT 18
36100: PUSH
36101: LD_INT 19
36103: PUSH
36104: LD_INT 20
36106: PUSH
36107: LD_INT 21
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: IN
36125: NOT
36126: OR
36127: IFTRUE 36140
36129: PUSH
36130: LD_VAR 0 8
36134: PUSH
36135: LD_INT 5
36137: ARRAY
36138: NOT
36139: OR
36140: IFTRUE 36180
36142: PUSH
36143: LD_VAR 0 8
36147: PUSH
36148: LD_INT 6
36150: ARRAY
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 7
36160: PUSH
36161: LD_INT 9
36163: PUSH
36164: LD_INT 10
36166: PUSH
36167: LD_INT 11
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: IN
36178: NOT
36179: OR
36180: IFFALSE 36186
// exit ;
36182: POP
36183: POP
36184: GO 36271
// end ;
36186: GO 35843
36188: POP
36189: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36190: LD_VAR 0 9
36194: PPUSH
36195: LD_VAR 0 3
36199: PPUSH
36200: LD_VAR 0 4
36204: PPUSH
36205: LD_INT 20
36207: PPUSH
36208: CALL 28090 0 4
36212: PUSH
36213: LD_INT 4
36215: ARRAY
36216: IFFALSE 36220
// exit ;
36218: GO 36271
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36220: LD_VAR 0 2
36224: PUSH
36225: LD_INT 29
36227: PUSH
36228: LD_INT 30
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: IN
36235: IFFALSE 36259
36237: PUSH
36238: LD_VAR 0 3
36242: PPUSH
36243: LD_VAR 0 4
36247: PPUSH
36248: LD_VAR 0 9
36252: PPUSH
36253: CALL_OW 440
36257: NOT
36258: AND
36259: IFFALSE 36263
// exit ;
36261: GO 36271
// result := true ;
36263: LD_ADDR_VAR 0 6
36267: PUSH
36268: LD_INT 1
36270: ST_TO_ADDR
// end ;
36271: LD_VAR 0 6
36275: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36276: LD_INT 0
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
// result = [ ] ;
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: EMPTY
36342: ST_TO_ADDR
// temp_list = [ ] ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: EMPTY
36349: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36350: LD_VAR 0 4
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: LD_INT 3
36366: PUSH
36367: LD_INT 4
36369: PUSH
36370: LD_INT 5
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: IN
36381: NOT
36382: IFTRUE 36425
36384: PUSH
36385: LD_VAR 0 1
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: IN
36400: IFFALSE 36424
36402: PUSH
36403: LD_VAR 0 5
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 3
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: IN
36422: NOT
36423: AND
36424: OR
36425: IFFALSE 36429
// exit ;
36427: GO 54828
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36429: LD_VAR 0 1
36433: PUSH
36434: LD_INT 6
36436: PUSH
36437: LD_INT 7
36439: PUSH
36440: LD_INT 8
36442: PUSH
36443: LD_INT 13
36445: PUSH
36446: LD_INT 12
36448: PUSH
36449: LD_INT 15
36451: PUSH
36452: LD_INT 11
36454: PUSH
36455: LD_INT 14
36457: PUSH
36458: LD_INT 10
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: IN
36472: IFFALSE 36482
// btype = b_lab ;
36474: LD_ADDR_VAR 0 1
36478: PUSH
36479: LD_INT 6
36481: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36482: LD_VAR 0 6
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: IN
36501: NOT
36502: IFTRUE 36570
36504: PUSH
36505: LD_VAR 0 1
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 3
36521: PUSH
36522: LD_INT 6
36524: PUSH
36525: LD_INT 36
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: LD_INT 5
36533: PUSH
36534: LD_INT 31
36536: PUSH
36537: LD_INT 32
36539: PUSH
36540: LD_INT 33
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: IN
36556: NOT
36557: IFFALSE 36569
36559: PUSH
36560: LD_VAR 0 6
36564: PUSH
36565: LD_INT 1
36567: EQUAL
36568: AND
36569: OR
36570: IFTRUE 36602
36572: PUSH
36573: LD_VAR 0 1
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: IN
36588: NOT
36589: IFFALSE 36601
36591: PUSH
36592: LD_VAR 0 6
36596: PUSH
36597: LD_INT 2
36599: EQUAL
36600: AND
36601: OR
36602: IFFALSE 36612
// mode = 0 ;
36604: LD_ADDR_VAR 0 6
36608: PUSH
36609: LD_INT 0
36611: ST_TO_ADDR
// case mode of 0 :
36612: LD_VAR 0 6
36616: PUSH
36617: LD_INT 0
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36625
36623: GO 48078
36625: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36626: LD_ADDR_VAR 0 11
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: NEG
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 2
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 3
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36819: LD_ADDR_VAR 0 12
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 3
36976: NEG
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 3
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37015: LD_ADDR_VAR 0 13
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 3
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 3
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37214: LD_ADDR_VAR 0 14
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 3
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 3
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37410: LD_ADDR_VAR 0 15
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37603: LD_ADDR_VAR 0 16
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 2
37738: NEG
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: PUSH
37761: LD_INT 3
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37796: LD_ADDR_VAR 0 17
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38026: LD_ADDR_VAR 0 18
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38256: LD_ADDR_VAR 0 19
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38486: LD_ADDR_VAR 0 20
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38716: LD_ADDR_VAR 0 21
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38946: LD_ADDR_VAR 0 22
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39176: LD_ADDR_VAR 0 23
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 3
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39456: LD_ADDR_VAR 0 24
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 3
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39732: LD_ADDR_VAR 0 25
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40006: LD_ADDR_VAR 0 26
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40282: LD_ADDR_VAR 0 27
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40562: LD_ADDR_VAR 0 28
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 3
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 3
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40844: LD_ADDR_VAR 0 29
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41123: LD_ADDR_VAR 0 30
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41401: LD_ADDR_VAR 0 31
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41679: LD_ADDR_VAR 0 32
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 3
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 3
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41957: LD_ADDR_VAR 0 33
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42236: LD_ADDR_VAR 0 34
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42516: LD_ADDR_VAR 0 35
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42628: LD_ADDR_VAR 0 36
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42740: LD_ADDR_VAR 0 37
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 38
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42964: LD_ADDR_VAR 0 39
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43076: LD_ADDR_VAR 0 40
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43188: LD_ADDR_VAR 0 41
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 3
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 3
43497: NEG
43498: PUSH
43499: LD_INT 3
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43538: LD_ADDR_VAR 0 42
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 3
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: LD_INT 3
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43888: LD_ADDR_VAR 0 43
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 3
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 3
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44236: LD_ADDR_VAR 0 44
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 3
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 3
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44586: LD_ADDR_VAR 0 45
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 3
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: LD_INT 3
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44936: LD_ADDR_VAR 0 46
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 3
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 3
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45284: LD_ADDR_VAR 0 47
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45435: LD_ADDR_VAR 0 48
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45582: LD_ADDR_VAR 0 49
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45726: LD_ADDR_VAR 0 50
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45870: LD_ADDR_VAR 0 51
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46017: LD_ADDR_VAR 0 52
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46168: LD_ADDR_VAR 0 53
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46398: LD_ADDR_VAR 0 54
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46628: LD_ADDR_VAR 0 55
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46858: LD_ADDR_VAR 0 56
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47088: LD_ADDR_VAR 0 57
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47318: LD_ADDR_VAR 0 58
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47548: LD_ADDR_VAR 0 59
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47636: LD_ADDR_VAR 0 60
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47724: LD_ADDR_VAR 0 61
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47812: LD_ADDR_VAR 0 62
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47900: LD_ADDR_VAR 0 63
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47988: LD_ADDR_VAR 0 64
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// end ; 1 :
48076: GO 53973
48078: LD_INT 1
48080: DOUBLE
48081: EQUAL
48082: IFTRUE 48086
48084: GO 50709
48086: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48087: LD_ADDR_VAR 0 11
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 3
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 3
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48131: LD_ADDR_VAR 0 12
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48172: LD_ADDR_VAR 0 13
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48212: LD_ADDR_VAR 0 14
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48253: LD_ADDR_VAR 0 15
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48297: LD_ADDR_VAR 0 16
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48343: LD_ADDR_VAR 0 17
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 3
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48387: LD_ADDR_VAR 0 18
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48428: LD_ADDR_VAR 0 19
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48468: LD_ADDR_VAR 0 20
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48509: LD_ADDR_VAR 0 21
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48553: LD_ADDR_VAR 0 22
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: NEG
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48599: LD_ADDR_VAR 0 23
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 4
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48643: LD_ADDR_VAR 0 24
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 4
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48684: LD_ADDR_VAR 0 25
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 3
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 4
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: LD_INT 4
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48724: LD_ADDR_VAR 0 26
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 4
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48765: LD_ADDR_VAR 0 27
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 4
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: LIST
48808: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48809: LD_ADDR_VAR 0 28
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: LD_INT 4
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: NEG
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48855: LD_ADDR_VAR 0 29
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 3
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 4
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 4
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 5
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 5
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 4
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 6
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 6
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 5
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49010: LD_ADDR_VAR 0 30
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 4
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 4
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 4
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 5
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 5
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 6
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 6
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49153: LD_ADDR_VAR 0 31
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 4
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: PUSH
49201: LD_INT 4
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 4
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 5
49230: PUSH
49231: LD_INT 5
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 4
49240: PUSH
49241: LD_INT 5
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 6
49250: PUSH
49251: LD_INT 5
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 6
49260: PUSH
49261: LD_INT 6
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 5
49270: PUSH
49271: LD_INT 6
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49292: LD_ADDR_VAR 0 32
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 4
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 4
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 5
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 5
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 6
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 6
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 5
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49435: LD_ADDR_VAR 0 33
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 4
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 4
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 4
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 5
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 5
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 5
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 6
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 6
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49590: LD_ADDR_VAR 0 34
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: LD_INT 3
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 4
49657: NEG
49658: PUSH
49659: LD_INT 4
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 4
49669: NEG
49670: PUSH
49671: LD_INT 5
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 5
49681: NEG
49682: PUSH
49683: LD_INT 4
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 5
49693: NEG
49694: PUSH
49695: LD_INT 5
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 5
49705: NEG
49706: PUSH
49707: LD_INT 6
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 6
49717: NEG
49718: PUSH
49719: LD_INT 5
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 6
49729: NEG
49730: PUSH
49731: LD_INT 6
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49753: LD_ADDR_VAR 0 41
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49797: LD_ADDR_VAR 0 42
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49838: LD_ADDR_VAR 0 43
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49878: LD_ADDR_VAR 0 44
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49919: LD_ADDR_VAR 0 45
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49963: LD_ADDR_VAR 0 46
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50009: LD_ADDR_VAR 0 47
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50042: LD_ADDR_VAR 0 48
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50073: LD_ADDR_VAR 0 49
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50102: LD_ADDR_VAR 0 50
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 3
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50131: LD_ADDR_VAR 0 51
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50162: LD_ADDR_VAR 0 52
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50195: LD_ADDR_VAR 0 53
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50239: LD_ADDR_VAR 0 54
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50280: LD_ADDR_VAR 0 55
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50320: LD_ADDR_VAR 0 56
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50361: LD_ADDR_VAR 0 57
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50405: LD_ADDR_VAR 0 58
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50451: LD_ADDR_VAR 0 59
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50495: LD_ADDR_VAR 0 60
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50536: LD_ADDR_VAR 0 61
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50576: LD_ADDR_VAR 0 62
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50617: LD_ADDR_VAR 0 63
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50661: LD_ADDR_VAR 0 64
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// end ; 2 :
50707: GO 53973
50709: LD_INT 2
50711: DOUBLE
50712: EQUAL
50713: IFTRUE 50717
50715: GO 53972
50717: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50718: LD_ADDR_VAR 0 29
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 4
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 5
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 5
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 4
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 5
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 4
50848: PUSH
50849: LD_INT 4
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 4
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 4
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 4
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 5
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 5
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 4
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 5
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 4
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 4
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: LD_INT 5
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: LD_INT 4
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 4
51151: NEG
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 5
51163: NEG
51164: PUSH
51165: LD_INT 4
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 5
51175: NEG
51176: PUSH
51177: LD_INT 5
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: LD_INT 5
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 5
51199: NEG
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51256: LD_ADDR_VAR 0 30
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: LD_INT 4
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 4
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 4
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 5
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 5
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 5
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 4
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 4
51446: NEG
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 4
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 4
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 5
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 5
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 4
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 4
51608: NEG
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 4
51620: NEG
51621: PUSH
51622: LD_INT 4
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 4
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 4
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 5
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 4
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 4
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 5
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 5
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51803: LD_ADDR_VAR 0 31
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 4
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 5
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 4
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 3
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 4
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 4
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 4
52017: NEG
52018: PUSH
52019: LD_INT 5
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: LD_INT 4
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 4
52053: NEG
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 5
52065: NEG
52066: PUSH
52067: LD_INT 4
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 5
52077: NEG
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: LD_INT 5
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 5
52101: NEG
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 4
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 4
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: LD_INT 4
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 5
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 5
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 5
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52353: LD_ADDR_VAR 0 32
52357: PUSH
52358: LD_INT 4
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 4
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 5
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 5
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 5
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 4
52534: NEG
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 4
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 4
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 5
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 4
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 4
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 5
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 5
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 4
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 4
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: LD_INT 4
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 5
52795: PUSH
52796: LD_INT 5
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 4
52805: PUSH
52806: LD_INT 5
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 4
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 5
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52900: LD_ADDR_VAR 0 33
52904: PUSH
52905: LD_INT 4
52907: NEG
52908: PUSH
52909: LD_INT 4
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: NEG
52920: PUSH
52921: LD_INT 5
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: LD_INT 4
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: NEG
52956: PUSH
52957: LD_INT 3
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 5
52967: NEG
52968: PUSH
52969: LD_INT 4
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: NEG
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 5
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 5
53003: NEG
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: LD_INT 4
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 4
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 5
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 5
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 4
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 5
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 4
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 4
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 5
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 5
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 5
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53438: LD_ADDR_VAR 0 34
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 4
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 5
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 4
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 5
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 5
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 4
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 4
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 4
53640: PUSH
53641: LD_INT 4
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: PUSH
53661: LD_INT 4
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 5
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: LD_INT 5
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 5
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 4
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 4
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 4
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 4
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 4
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 5
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 5
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 5
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// end ; end ;
53970: GO 53973
53972: POP
// case btype of b_depot , b_warehouse :
53973: LD_VAR 0 1
53977: PUSH
53978: LD_INT 0
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53992
53984: LD_INT 1
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 53992
53990: GO 54193
53992: POP
// case nation of nation_american :
53993: LD_VAR 0 5
53997: PUSH
53998: LD_INT 1
54000: DOUBLE
54001: EQUAL
54002: IFTRUE 54006
54004: GO 54062
54006: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54007: LD_ADDR_VAR 0 9
54011: PUSH
54012: LD_VAR 0 11
54016: PUSH
54017: LD_VAR 0 12
54021: PUSH
54022: LD_VAR 0 13
54026: PUSH
54027: LD_VAR 0 14
54031: PUSH
54032: LD_VAR 0 15
54036: PUSH
54037: LD_VAR 0 16
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: PUSH
54050: LD_VAR 0 4
54054: PUSH
54055: LD_INT 1
54057: PLUS
54058: ARRAY
54059: ST_TO_ADDR
54060: GO 54191
54062: LD_INT 2
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54126
54070: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54071: LD_ADDR_VAR 0 9
54075: PUSH
54076: LD_VAR 0 17
54080: PUSH
54081: LD_VAR 0 18
54085: PUSH
54086: LD_VAR 0 19
54090: PUSH
54091: LD_VAR 0 20
54095: PUSH
54096: LD_VAR 0 21
54100: PUSH
54101: LD_VAR 0 22
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: PUSH
54114: LD_VAR 0 4
54118: PUSH
54119: LD_INT 1
54121: PLUS
54122: ARRAY
54123: ST_TO_ADDR
54124: GO 54191
54126: LD_INT 3
54128: DOUBLE
54129: EQUAL
54130: IFTRUE 54134
54132: GO 54190
54134: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54135: LD_ADDR_VAR 0 9
54139: PUSH
54140: LD_VAR 0 23
54144: PUSH
54145: LD_VAR 0 24
54149: PUSH
54150: LD_VAR 0 25
54154: PUSH
54155: LD_VAR 0 26
54159: PUSH
54160: LD_VAR 0 27
54164: PUSH
54165: LD_VAR 0 28
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: PUSH
54178: LD_VAR 0 4
54182: PUSH
54183: LD_INT 1
54185: PLUS
54186: ARRAY
54187: ST_TO_ADDR
54188: GO 54191
54190: POP
54191: GO 54746
54193: LD_INT 2
54195: DOUBLE
54196: EQUAL
54197: IFTRUE 54207
54199: LD_INT 3
54201: DOUBLE
54202: EQUAL
54203: IFTRUE 54207
54205: GO 54263
54207: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54208: LD_ADDR_VAR 0 9
54212: PUSH
54213: LD_VAR 0 29
54217: PUSH
54218: LD_VAR 0 30
54222: PUSH
54223: LD_VAR 0 31
54227: PUSH
54228: LD_VAR 0 32
54232: PUSH
54233: LD_VAR 0 33
54237: PUSH
54238: LD_VAR 0 34
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: PUSH
54251: LD_VAR 0 4
54255: PUSH
54256: LD_INT 1
54258: PLUS
54259: ARRAY
54260: ST_TO_ADDR
54261: GO 54746
54263: LD_INT 16
54265: DOUBLE
54266: EQUAL
54267: IFTRUE 54325
54269: LD_INT 17
54271: DOUBLE
54272: EQUAL
54273: IFTRUE 54325
54275: LD_INT 18
54277: DOUBLE
54278: EQUAL
54279: IFTRUE 54325
54281: LD_INT 19
54283: DOUBLE
54284: EQUAL
54285: IFTRUE 54325
54287: LD_INT 22
54289: DOUBLE
54290: EQUAL
54291: IFTRUE 54325
54293: LD_INT 20
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54325
54299: LD_INT 21
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54325
54305: LD_INT 23
54307: DOUBLE
54308: EQUAL
54309: IFTRUE 54325
54311: LD_INT 24
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54325
54317: LD_INT 25
54319: DOUBLE
54320: EQUAL
54321: IFTRUE 54325
54323: GO 54381
54325: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54326: LD_ADDR_VAR 0 9
54330: PUSH
54331: LD_VAR 0 35
54335: PUSH
54336: LD_VAR 0 36
54340: PUSH
54341: LD_VAR 0 37
54345: PUSH
54346: LD_VAR 0 38
54350: PUSH
54351: LD_VAR 0 39
54355: PUSH
54356: LD_VAR 0 40
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: PUSH
54369: LD_VAR 0 4
54373: PUSH
54374: LD_INT 1
54376: PLUS
54377: ARRAY
54378: ST_TO_ADDR
54379: GO 54746
54381: LD_INT 6
54383: DOUBLE
54384: EQUAL
54385: IFTRUE 54437
54387: LD_INT 7
54389: DOUBLE
54390: EQUAL
54391: IFTRUE 54437
54393: LD_INT 8
54395: DOUBLE
54396: EQUAL
54397: IFTRUE 54437
54399: LD_INT 13
54401: DOUBLE
54402: EQUAL
54403: IFTRUE 54437
54405: LD_INT 12
54407: DOUBLE
54408: EQUAL
54409: IFTRUE 54437
54411: LD_INT 15
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54437
54417: LD_INT 11
54419: DOUBLE
54420: EQUAL
54421: IFTRUE 54437
54423: LD_INT 14
54425: DOUBLE
54426: EQUAL
54427: IFTRUE 54437
54429: LD_INT 10
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54437
54435: GO 54493
54437: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54438: LD_ADDR_VAR 0 9
54442: PUSH
54443: LD_VAR 0 41
54447: PUSH
54448: LD_VAR 0 42
54452: PUSH
54453: LD_VAR 0 43
54457: PUSH
54458: LD_VAR 0 44
54462: PUSH
54463: LD_VAR 0 45
54467: PUSH
54468: LD_VAR 0 46
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: PUSH
54481: LD_VAR 0 4
54485: PUSH
54486: LD_INT 1
54488: PLUS
54489: ARRAY
54490: ST_TO_ADDR
54491: GO 54746
54493: LD_INT 36
54495: DOUBLE
54496: EQUAL
54497: IFTRUE 54501
54499: GO 54557
54501: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54502: LD_ADDR_VAR 0 9
54506: PUSH
54507: LD_VAR 0 47
54511: PUSH
54512: LD_VAR 0 48
54516: PUSH
54517: LD_VAR 0 49
54521: PUSH
54522: LD_VAR 0 50
54526: PUSH
54527: LD_VAR 0 51
54531: PUSH
54532: LD_VAR 0 52
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: PUSH
54545: LD_VAR 0 4
54549: PUSH
54550: LD_INT 1
54552: PLUS
54553: ARRAY
54554: ST_TO_ADDR
54555: GO 54746
54557: LD_INT 4
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54583
54563: LD_INT 5
54565: DOUBLE
54566: EQUAL
54567: IFTRUE 54583
54569: LD_INT 34
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54583
54575: LD_INT 37
54577: DOUBLE
54578: EQUAL
54579: IFTRUE 54583
54581: GO 54639
54583: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54584: LD_ADDR_VAR 0 9
54588: PUSH
54589: LD_VAR 0 53
54593: PUSH
54594: LD_VAR 0 54
54598: PUSH
54599: LD_VAR 0 55
54603: PUSH
54604: LD_VAR 0 56
54608: PUSH
54609: LD_VAR 0 57
54613: PUSH
54614: LD_VAR 0 58
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: PUSH
54627: LD_VAR 0 4
54631: PUSH
54632: LD_INT 1
54634: PLUS
54635: ARRAY
54636: ST_TO_ADDR
54637: GO 54746
54639: LD_INT 31
54641: DOUBLE
54642: EQUAL
54643: IFTRUE 54689
54645: LD_INT 32
54647: DOUBLE
54648: EQUAL
54649: IFTRUE 54689
54651: LD_INT 33
54653: DOUBLE
54654: EQUAL
54655: IFTRUE 54689
54657: LD_INT 27
54659: DOUBLE
54660: EQUAL
54661: IFTRUE 54689
54663: LD_INT 26
54665: DOUBLE
54666: EQUAL
54667: IFTRUE 54689
54669: LD_INT 28
54671: DOUBLE
54672: EQUAL
54673: IFTRUE 54689
54675: LD_INT 29
54677: DOUBLE
54678: EQUAL
54679: IFTRUE 54689
54681: LD_INT 30
54683: DOUBLE
54684: EQUAL
54685: IFTRUE 54689
54687: GO 54745
54689: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54690: LD_ADDR_VAR 0 9
54694: PUSH
54695: LD_VAR 0 59
54699: PUSH
54700: LD_VAR 0 60
54704: PUSH
54705: LD_VAR 0 61
54709: PUSH
54710: LD_VAR 0 62
54714: PUSH
54715: LD_VAR 0 63
54719: PUSH
54720: LD_VAR 0 64
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: PUSH
54733: LD_VAR 0 4
54737: PUSH
54738: LD_INT 1
54740: PLUS
54741: ARRAY
54742: ST_TO_ADDR
54743: GO 54746
54745: POP
// temp_list2 = [ ] ;
54746: LD_ADDR_VAR 0 10
54750: PUSH
54751: EMPTY
54752: ST_TO_ADDR
// for i in temp_list do
54753: LD_ADDR_VAR 0 8
54757: PUSH
54758: LD_VAR 0 9
54762: PUSH
54763: FOR_IN
54764: IFFALSE 54816
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54766: LD_ADDR_VAR 0 10
54770: PUSH
54771: LD_VAR 0 10
54775: PUSH
54776: LD_VAR 0 8
54780: PUSH
54781: LD_INT 1
54783: ARRAY
54784: PUSH
54785: LD_VAR 0 2
54789: PLUS
54790: PUSH
54791: LD_VAR 0 8
54795: PUSH
54796: LD_INT 2
54798: ARRAY
54799: PUSH
54800: LD_VAR 0 3
54804: PLUS
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: ADD
54813: ST_TO_ADDR
54814: GO 54763
54816: POP
54817: POP
// result = temp_list2 ;
54818: LD_ADDR_VAR 0 7
54822: PUSH
54823: LD_VAR 0 10
54827: ST_TO_ADDR
// end ;
54828: LD_VAR 0 7
54832: RET
// export function EnemyInRange ( unit , dist ) ; begin
54833: LD_INT 0
54835: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54836: LD_ADDR_VAR 0 3
54840: PUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 255
54850: PPUSH
54851: LD_VAR 0 1
54855: PPUSH
54856: CALL_OW 250
54860: PPUSH
54861: LD_VAR 0 1
54865: PPUSH
54866: CALL_OW 251
54870: PPUSH
54871: LD_VAR 0 2
54875: PPUSH
54876: CALL 28090 0 4
54880: PUSH
54881: LD_INT 4
54883: ARRAY
54884: ST_TO_ADDR
// end ;
54885: LD_VAR 0 3
54889: RET
// export function PlayerSeeMe ( unit ) ; begin
54890: LD_INT 0
54892: PPUSH
// result := See ( your_side , unit ) ;
54893: LD_ADDR_VAR 0 2
54897: PUSH
54898: LD_OWVAR 2
54902: PPUSH
54903: LD_VAR 0 1
54907: PPUSH
54908: CALL_OW 292
54912: ST_TO_ADDR
// end ;
54913: LD_VAR 0 2
54917: RET
// export function ReverseDir ( unit ) ; begin
54918: LD_INT 0
54920: PPUSH
// if not unit then
54921: LD_VAR 0 1
54925: NOT
54926: IFFALSE 54930
// exit ;
54928: GO 54953
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54930: LD_ADDR_VAR 0 2
54934: PUSH
54935: LD_VAR 0 1
54939: PPUSH
54940: CALL_OW 254
54944: PUSH
54945: LD_INT 3
54947: PLUS
54948: PUSH
54949: LD_INT 6
54951: MOD
54952: ST_TO_ADDR
// end ;
54953: LD_VAR 0 2
54957: RET
// export function ReverseArray ( array ) ; var i ; begin
54958: LD_INT 0
54960: PPUSH
54961: PPUSH
// if not array then
54962: LD_VAR 0 1
54966: NOT
54967: IFFALSE 54971
// exit ;
54969: GO 55026
// result := [ ] ;
54971: LD_ADDR_VAR 0 2
54975: PUSH
54976: EMPTY
54977: ST_TO_ADDR
// for i := array downto 1 do
54978: LD_ADDR_VAR 0 3
54982: PUSH
54983: DOUBLE
54984: LD_VAR 0 1
54988: INC
54989: ST_TO_ADDR
54990: LD_INT 1
54992: PUSH
54993: FOR_DOWNTO
54994: IFFALSE 55024
// result := Join ( result , array [ i ] ) ;
54996: LD_ADDR_VAR 0 2
55000: PUSH
55001: LD_VAR 0 2
55005: PPUSH
55006: LD_VAR 0 1
55010: PUSH
55011: LD_VAR 0 3
55015: ARRAY
55016: PPUSH
55017: CALL 59868 0 2
55021: ST_TO_ADDR
55022: GO 54993
55024: POP
55025: POP
// end ;
55026: LD_VAR 0 2
55030: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55031: LD_INT 0
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
// if not unit or not hexes then
55039: LD_VAR 0 1
55043: NOT
55044: IFTRUE 55053
55046: PUSH
55047: LD_VAR 0 2
55051: NOT
55052: OR
55053: IFFALSE 55057
// exit ;
55055: GO 55180
// dist := 9999 ;
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: LD_INT 9999
55064: ST_TO_ADDR
// for i = 1 to hexes do
55065: LD_ADDR_VAR 0 4
55069: PUSH
55070: DOUBLE
55071: LD_INT 1
55073: DEC
55074: ST_TO_ADDR
55075: LD_VAR 0 2
55079: PUSH
55080: FOR_TO
55081: IFFALSE 55168
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55083: LD_ADDR_VAR 0 6
55087: PUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: LD_VAR 0 2
55097: PUSH
55098: LD_VAR 0 4
55102: ARRAY
55103: PUSH
55104: LD_INT 1
55106: ARRAY
55107: PPUSH
55108: LD_VAR 0 2
55112: PUSH
55113: LD_VAR 0 4
55117: ARRAY
55118: PUSH
55119: LD_INT 2
55121: ARRAY
55122: PPUSH
55123: CALL_OW 297
55127: ST_TO_ADDR
// if tdist < dist then
55128: LD_VAR 0 6
55132: PUSH
55133: LD_VAR 0 5
55137: LESS
55138: IFFALSE 55166
// begin hex := hexes [ i ] ;
55140: LD_ADDR_VAR 0 8
55144: PUSH
55145: LD_VAR 0 2
55149: PUSH
55150: LD_VAR 0 4
55154: ARRAY
55155: ST_TO_ADDR
// dist := tdist ;
55156: LD_ADDR_VAR 0 5
55160: PUSH
55161: LD_VAR 0 6
55165: ST_TO_ADDR
// end ; end ;
55166: GO 55080
55168: POP
55169: POP
// result := hex ;
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_VAR 0 8
55179: ST_TO_ADDR
// end ;
55180: LD_VAR 0 3
55184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55185: LD_INT 0
55187: PPUSH
55188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55189: LD_VAR 0 1
55193: NOT
55194: IFTRUE 55233
55196: PUSH
55197: LD_VAR 0 1
55201: PUSH
55202: LD_INT 21
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 23
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: IN
55231: NOT
55232: OR
55233: IFFALSE 55237
// exit ;
55235: GO 55284
// for i = 1 to 3 do
55237: LD_ADDR_VAR 0 3
55241: PUSH
55242: DOUBLE
55243: LD_INT 1
55245: DEC
55246: ST_TO_ADDR
55247: LD_INT 3
55249: PUSH
55250: FOR_TO
55251: IFFALSE 55282
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55253: LD_VAR 0 1
55257: PPUSH
55258: CALL_OW 250
55262: PPUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL_OW 251
55272: PPUSH
55273: LD_INT 1
55275: PPUSH
55276: CALL_OW 453
55280: GO 55250
55282: POP
55283: POP
// end ;
55284: LD_VAR 0 2
55288: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55289: LD_INT 0
55291: PPUSH
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
// if not unit or not enemy_unit then
55297: LD_VAR 0 1
55301: NOT
55302: IFTRUE 55311
55304: PUSH
55305: LD_VAR 0 2
55309: NOT
55310: OR
55311: IFFALSE 55315
// exit ;
55313: GO 55786
// if GetLives ( i ) < 250 then
55315: LD_VAR 0 4
55319: PPUSH
55320: CALL_OW 256
55324: PUSH
55325: LD_INT 250
55327: LESS
55328: IFFALSE 55341
// begin ComAutodestruct ( i ) ;
55330: LD_VAR 0 4
55334: PPUSH
55335: CALL 55185 0 1
// exit ;
55339: GO 55786
// end ; x := GetX ( enemy_unit ) ;
55341: LD_ADDR_VAR 0 7
55345: PUSH
55346: LD_VAR 0 2
55350: PPUSH
55351: CALL_OW 250
55355: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55356: LD_ADDR_VAR 0 8
55360: PUSH
55361: LD_VAR 0 2
55365: PPUSH
55366: CALL_OW 251
55370: ST_TO_ADDR
// if not x or not y then
55371: LD_VAR 0 7
55375: NOT
55376: IFTRUE 55385
55378: PUSH
55379: LD_VAR 0 8
55383: NOT
55384: OR
55385: IFFALSE 55389
// exit ;
55387: GO 55786
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55389: LD_ADDR_VAR 0 6
55393: PUSH
55394: LD_VAR 0 7
55398: PPUSH
55399: LD_INT 0
55401: PPUSH
55402: LD_INT 4
55404: PPUSH
55405: CALL_OW 272
55409: PUSH
55410: LD_VAR 0 8
55414: PPUSH
55415: LD_INT 0
55417: PPUSH
55418: LD_INT 4
55420: PPUSH
55421: CALL_OW 273
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_VAR 0 7
55434: PPUSH
55435: LD_INT 1
55437: PPUSH
55438: LD_INT 4
55440: PPUSH
55441: CALL_OW 272
55445: PUSH
55446: LD_VAR 0 8
55450: PPUSH
55451: LD_INT 1
55453: PPUSH
55454: LD_INT 4
55456: PPUSH
55457: CALL_OW 273
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_VAR 0 7
55470: PPUSH
55471: LD_INT 2
55473: PPUSH
55474: LD_INT 4
55476: PPUSH
55477: CALL_OW 272
55481: PUSH
55482: LD_VAR 0 8
55486: PPUSH
55487: LD_INT 2
55489: PPUSH
55490: LD_INT 4
55492: PPUSH
55493: CALL_OW 273
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_VAR 0 7
55506: PPUSH
55507: LD_INT 3
55509: PPUSH
55510: LD_INT 4
55512: PPUSH
55513: CALL_OW 272
55517: PUSH
55518: LD_VAR 0 8
55522: PPUSH
55523: LD_INT 3
55525: PPUSH
55526: LD_INT 4
55528: PPUSH
55529: CALL_OW 273
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_VAR 0 7
55542: PPUSH
55543: LD_INT 4
55545: PPUSH
55546: LD_INT 4
55548: PPUSH
55549: CALL_OW 272
55553: PUSH
55554: LD_VAR 0 8
55558: PPUSH
55559: LD_INT 4
55561: PPUSH
55562: LD_INT 4
55564: PPUSH
55565: CALL_OW 273
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_VAR 0 7
55578: PPUSH
55579: LD_INT 5
55581: PPUSH
55582: LD_INT 4
55584: PPUSH
55585: CALL_OW 272
55589: PUSH
55590: LD_VAR 0 8
55594: PPUSH
55595: LD_INT 5
55597: PPUSH
55598: LD_INT 4
55600: PPUSH
55601: CALL_OW 273
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// for i = tmp downto 1 do
55618: LD_ADDR_VAR 0 4
55622: PUSH
55623: DOUBLE
55624: LD_VAR 0 6
55628: INC
55629: ST_TO_ADDR
55630: LD_INT 1
55632: PUSH
55633: FOR_DOWNTO
55634: IFFALSE 55737
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55636: LD_VAR 0 6
55640: PUSH
55641: LD_VAR 0 4
55645: ARRAY
55646: PUSH
55647: LD_INT 1
55649: ARRAY
55650: PPUSH
55651: LD_VAR 0 6
55655: PUSH
55656: LD_VAR 0 4
55660: ARRAY
55661: PUSH
55662: LD_INT 2
55664: ARRAY
55665: PPUSH
55666: CALL_OW 488
55670: NOT
55671: IFTRUE 55713
55673: PUSH
55674: LD_VAR 0 6
55678: PUSH
55679: LD_VAR 0 4
55683: ARRAY
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PPUSH
55689: LD_VAR 0 6
55693: PUSH
55694: LD_VAR 0 4
55698: ARRAY
55699: PUSH
55700: LD_INT 2
55702: ARRAY
55703: PPUSH
55704: CALL_OW 428
55708: PUSH
55709: LD_INT 0
55711: NONEQUAL
55712: OR
55713: IFFALSE 55735
// tmp := Delete ( tmp , i ) ;
55715: LD_ADDR_VAR 0 6
55719: PUSH
55720: LD_VAR 0 6
55724: PPUSH
55725: LD_VAR 0 4
55729: PPUSH
55730: CALL_OW 3
55734: ST_TO_ADDR
55735: GO 55633
55737: POP
55738: POP
// j := GetClosestHex ( unit , tmp ) ;
55739: LD_ADDR_VAR 0 5
55743: PUSH
55744: LD_VAR 0 1
55748: PPUSH
55749: LD_VAR 0 6
55753: PPUSH
55754: CALL 55031 0 2
55758: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55759: LD_VAR 0 1
55763: PPUSH
55764: LD_VAR 0 5
55768: PUSH
55769: LD_INT 1
55771: ARRAY
55772: PPUSH
55773: LD_VAR 0 5
55777: PUSH
55778: LD_INT 2
55780: ARRAY
55781: PPUSH
55782: CALL_OW 111
// end ;
55786: LD_VAR 0 3
55790: RET
// export function PrepareApemanSoldier ( ) ; begin
55791: LD_INT 0
55793: PPUSH
// uc_nation := 0 ;
55794: LD_ADDR_OWVAR 21
55798: PUSH
55799: LD_INT 0
55801: ST_TO_ADDR
// hc_sex := sex_male ;
55802: LD_ADDR_OWVAR 27
55806: PUSH
55807: LD_INT 1
55809: ST_TO_ADDR
// hc_name :=  ;
55810: LD_ADDR_OWVAR 26
55814: PUSH
55815: LD_STRING 
55817: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55818: LD_ADDR_OWVAR 28
55822: PUSH
55823: LD_INT 15
55825: ST_TO_ADDR
// hc_gallery :=  ;
55826: LD_ADDR_OWVAR 33
55830: PUSH
55831: LD_STRING 
55833: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55834: LD_ADDR_OWVAR 31
55838: PUSH
55839: LD_INT 0
55841: PPUSH
55842: LD_INT 3
55844: PPUSH
55845: CALL_OW 12
55849: PUSH
55850: LD_INT 0
55852: PPUSH
55853: LD_INT 3
55855: PPUSH
55856: CALL_OW 12
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55873: LD_ADDR_OWVAR 29
55877: PUSH
55878: LD_INT 12
55880: PUSH
55881: LD_INT 12
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: ST_TO_ADDR
// end ;
55888: LD_VAR 0 1
55892: RET
// export function PrepareApemanEngineer ( ) ; begin
55893: LD_INT 0
55895: PPUSH
// uc_nation := 0 ;
55896: LD_ADDR_OWVAR 21
55900: PUSH
55901: LD_INT 0
55903: ST_TO_ADDR
// hc_sex := sex_male ;
55904: LD_ADDR_OWVAR 27
55908: PUSH
55909: LD_INT 1
55911: ST_TO_ADDR
// hc_name :=  ;
55912: LD_ADDR_OWVAR 26
55916: PUSH
55917: LD_STRING 
55919: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55920: LD_ADDR_OWVAR 28
55924: PUSH
55925: LD_INT 16
55927: ST_TO_ADDR
// hc_gallery :=  ;
55928: LD_ADDR_OWVAR 33
55932: PUSH
55933: LD_STRING 
55935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55936: LD_ADDR_OWVAR 31
55940: PUSH
55941: LD_INT 0
55943: PPUSH
55944: LD_INT 3
55946: PPUSH
55947: CALL_OW 12
55951: PUSH
55952: LD_INT 0
55954: PPUSH
55955: LD_INT 3
55957: PPUSH
55958: CALL_OW 12
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55975: LD_ADDR_OWVAR 29
55979: PUSH
55980: LD_INT 12
55982: PUSH
55983: LD_INT 12
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// end ;
55990: LD_VAR 0 1
55994: RET
// export function PrepareApeman ( agressivity ) ; begin
55995: LD_INT 0
55997: PPUSH
// uc_side := 0 ;
55998: LD_ADDR_OWVAR 20
56002: PUSH
56003: LD_INT 0
56005: ST_TO_ADDR
// uc_nation := 0 ;
56006: LD_ADDR_OWVAR 21
56010: PUSH
56011: LD_INT 0
56013: ST_TO_ADDR
// hc_sex := sex_male ;
56014: LD_ADDR_OWVAR 27
56018: PUSH
56019: LD_INT 1
56021: ST_TO_ADDR
// hc_class := class_apeman ;
56022: LD_ADDR_OWVAR 28
56026: PUSH
56027: LD_INT 12
56029: ST_TO_ADDR
// hc_gallery :=  ;
56030: LD_ADDR_OWVAR 33
56034: PUSH
56035: LD_STRING 
56037: ST_TO_ADDR
// hc_name :=  ;
56038: LD_ADDR_OWVAR 26
56042: PUSH
56043: LD_STRING 
56045: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56046: LD_ADDR_OWVAR 29
56050: PUSH
56051: LD_INT 12
56053: PUSH
56054: LD_INT 12
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// if agressivity = 0 then
56061: LD_VAR 0 1
56065: PUSH
56066: LD_INT 0
56068: EQUAL
56069: IFFALSE 56081
// hc_agressivity := 0 else
56071: LD_ADDR_OWVAR 35
56075: PUSH
56076: LD_INT 0
56078: ST_TO_ADDR
56079: GO 56102
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56081: LD_ADDR_OWVAR 35
56085: PUSH
56086: LD_VAR 0 1
56090: NEG
56091: PPUSH
56092: LD_VAR 0 1
56096: PPUSH
56097: CALL_OW 12
56101: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56102: LD_ADDR_OWVAR 31
56106: PUSH
56107: LD_INT 0
56109: PPUSH
56110: LD_INT 3
56112: PPUSH
56113: CALL_OW 12
56117: PUSH
56118: LD_INT 0
56120: PPUSH
56121: LD_INT 3
56123: PPUSH
56124: CALL_OW 12
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// end ;
56141: LD_VAR 0 2
56145: RET
// export function PrepareTiger ( agressivity ) ; begin
56146: LD_INT 0
56148: PPUSH
// uc_side := 0 ;
56149: LD_ADDR_OWVAR 20
56153: PUSH
56154: LD_INT 0
56156: ST_TO_ADDR
// uc_nation := 0 ;
56157: LD_ADDR_OWVAR 21
56161: PUSH
56162: LD_INT 0
56164: ST_TO_ADDR
// InitHc ;
56165: CALL_OW 19
// hc_class := class_tiger ;
56169: LD_ADDR_OWVAR 28
56173: PUSH
56174: LD_INT 14
56176: ST_TO_ADDR
// hc_gallery :=  ;
56177: LD_ADDR_OWVAR 33
56181: PUSH
56182: LD_STRING 
56184: ST_TO_ADDR
// hc_name :=  ;
56185: LD_ADDR_OWVAR 26
56189: PUSH
56190: LD_STRING 
56192: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56193: LD_ADDR_OWVAR 35
56197: PUSH
56198: LD_VAR 0 1
56202: NEG
56203: PPUSH
56204: LD_VAR 0 1
56208: PPUSH
56209: CALL_OW 12
56213: ST_TO_ADDR
// end ;
56214: LD_VAR 0 2
56218: RET
// export function PrepareEnchidna ( ) ; begin
56219: LD_INT 0
56221: PPUSH
// uc_side := 0 ;
56222: LD_ADDR_OWVAR 20
56226: PUSH
56227: LD_INT 0
56229: ST_TO_ADDR
// uc_nation := 0 ;
56230: LD_ADDR_OWVAR 21
56234: PUSH
56235: LD_INT 0
56237: ST_TO_ADDR
// InitHc ;
56238: CALL_OW 19
// hc_class := class_baggie ;
56242: LD_ADDR_OWVAR 28
56246: PUSH
56247: LD_INT 13
56249: ST_TO_ADDR
// hc_gallery :=  ;
56250: LD_ADDR_OWVAR 33
56254: PUSH
56255: LD_STRING 
56257: ST_TO_ADDR
// hc_name :=  ;
56258: LD_ADDR_OWVAR 26
56262: PUSH
56263: LD_STRING 
56265: ST_TO_ADDR
// end ;
56266: LD_VAR 0 1
56270: RET
// export function PrepareFrog ( ) ; begin
56271: LD_INT 0
56273: PPUSH
// uc_side := 0 ;
56274: LD_ADDR_OWVAR 20
56278: PUSH
56279: LD_INT 0
56281: ST_TO_ADDR
// uc_nation := 0 ;
56282: LD_ADDR_OWVAR 21
56286: PUSH
56287: LD_INT 0
56289: ST_TO_ADDR
// InitHc ;
56290: CALL_OW 19
// hc_class := class_frog ;
56294: LD_ADDR_OWVAR 28
56298: PUSH
56299: LD_INT 19
56301: ST_TO_ADDR
// hc_gallery :=  ;
56302: LD_ADDR_OWVAR 33
56306: PUSH
56307: LD_STRING 
56309: ST_TO_ADDR
// hc_name :=  ;
56310: LD_ADDR_OWVAR 26
56314: PUSH
56315: LD_STRING 
56317: ST_TO_ADDR
// end ;
56318: LD_VAR 0 1
56322: RET
// export function PrepareFish ( ) ; begin
56323: LD_INT 0
56325: PPUSH
// uc_side := 0 ;
56326: LD_ADDR_OWVAR 20
56330: PUSH
56331: LD_INT 0
56333: ST_TO_ADDR
// uc_nation := 0 ;
56334: LD_ADDR_OWVAR 21
56338: PUSH
56339: LD_INT 0
56341: ST_TO_ADDR
// InitHc ;
56342: CALL_OW 19
// hc_class := class_fish ;
56346: LD_ADDR_OWVAR 28
56350: PUSH
56351: LD_INT 20
56353: ST_TO_ADDR
// hc_gallery :=  ;
56354: LD_ADDR_OWVAR 33
56358: PUSH
56359: LD_STRING 
56361: ST_TO_ADDR
// hc_name :=  ;
56362: LD_ADDR_OWVAR 26
56366: PUSH
56367: LD_STRING 
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 1
56374: RET
// export function PrepareBird ( ) ; begin
56375: LD_INT 0
56377: PPUSH
// uc_side := 0 ;
56378: LD_ADDR_OWVAR 20
56382: PUSH
56383: LD_INT 0
56385: ST_TO_ADDR
// uc_nation := 0 ;
56386: LD_ADDR_OWVAR 21
56390: PUSH
56391: LD_INT 0
56393: ST_TO_ADDR
// InitHc ;
56394: CALL_OW 19
// hc_class := class_phororhacos ;
56398: LD_ADDR_OWVAR 28
56402: PUSH
56403: LD_INT 18
56405: ST_TO_ADDR
// hc_gallery :=  ;
56406: LD_ADDR_OWVAR 33
56410: PUSH
56411: LD_STRING 
56413: ST_TO_ADDR
// hc_name :=  ;
56414: LD_ADDR_OWVAR 26
56418: PUSH
56419: LD_STRING 
56421: ST_TO_ADDR
// end ;
56422: LD_VAR 0 1
56426: RET
// export function PrepareHorse ( ) ; begin
56427: LD_INT 0
56429: PPUSH
// uc_side := 0 ;
56430: LD_ADDR_OWVAR 20
56434: PUSH
56435: LD_INT 0
56437: ST_TO_ADDR
// uc_nation := 0 ;
56438: LD_ADDR_OWVAR 21
56442: PUSH
56443: LD_INT 0
56445: ST_TO_ADDR
// InitHc ;
56446: CALL_OW 19
// hc_class := class_horse ;
56450: LD_ADDR_OWVAR 28
56454: PUSH
56455: LD_INT 21
56457: ST_TO_ADDR
// hc_gallery :=  ;
56458: LD_ADDR_OWVAR 33
56462: PUSH
56463: LD_STRING 
56465: ST_TO_ADDR
// hc_name :=  ;
56466: LD_ADDR_OWVAR 26
56470: PUSH
56471: LD_STRING 
56473: ST_TO_ADDR
// end ;
56474: LD_VAR 0 1
56478: RET
// export function PrepareMastodont ( ) ; begin
56479: LD_INT 0
56481: PPUSH
// uc_side := 0 ;
56482: LD_ADDR_OWVAR 20
56486: PUSH
56487: LD_INT 0
56489: ST_TO_ADDR
// uc_nation := 0 ;
56490: LD_ADDR_OWVAR 21
56494: PUSH
56495: LD_INT 0
56497: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56498: LD_ADDR_OWVAR 37
56502: PUSH
56503: LD_INT 31
56505: ST_TO_ADDR
// vc_control := control_rider ;
56506: LD_ADDR_OWVAR 38
56510: PUSH
56511: LD_INT 4
56513: ST_TO_ADDR
// end ;
56514: LD_VAR 0 1
56518: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56519: LD_INT 0
56521: PPUSH
56522: PPUSH
56523: PPUSH
// uc_side = 0 ;
56524: LD_ADDR_OWVAR 20
56528: PUSH
56529: LD_INT 0
56531: ST_TO_ADDR
// uc_nation = 0 ;
56532: LD_ADDR_OWVAR 21
56536: PUSH
56537: LD_INT 0
56539: ST_TO_ADDR
// InitHc_All ( ) ;
56540: CALL_OW 584
// InitVc ;
56544: CALL_OW 20
// if mastodonts then
56548: LD_VAR 0 6
56552: IFFALSE 56619
// for i = 1 to mastodonts do
56554: LD_ADDR_VAR 0 11
56558: PUSH
56559: DOUBLE
56560: LD_INT 1
56562: DEC
56563: ST_TO_ADDR
56564: LD_VAR 0 6
56568: PUSH
56569: FOR_TO
56570: IFFALSE 56617
// begin vc_chassis := 31 ;
56572: LD_ADDR_OWVAR 37
56576: PUSH
56577: LD_INT 31
56579: ST_TO_ADDR
// vc_control := control_rider ;
56580: LD_ADDR_OWVAR 38
56584: PUSH
56585: LD_INT 4
56587: ST_TO_ADDR
// animal := CreateVehicle ;
56588: LD_ADDR_VAR 0 12
56592: PUSH
56593: CALL_OW 45
56597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56598: LD_VAR 0 12
56602: PPUSH
56603: LD_VAR 0 8
56607: PPUSH
56608: LD_INT 0
56610: PPUSH
56611: CALL 58761 0 3
// end ;
56615: GO 56569
56617: POP
56618: POP
// if horses then
56619: LD_VAR 0 5
56623: IFFALSE 56690
// for i = 1 to horses do
56625: LD_ADDR_VAR 0 11
56629: PUSH
56630: DOUBLE
56631: LD_INT 1
56633: DEC
56634: ST_TO_ADDR
56635: LD_VAR 0 5
56639: PUSH
56640: FOR_TO
56641: IFFALSE 56688
// begin hc_class := 21 ;
56643: LD_ADDR_OWVAR 28
56647: PUSH
56648: LD_INT 21
56650: ST_TO_ADDR
// hc_gallery :=  ;
56651: LD_ADDR_OWVAR 33
56655: PUSH
56656: LD_STRING 
56658: ST_TO_ADDR
// animal := CreateHuman ;
56659: LD_ADDR_VAR 0 12
56663: PUSH
56664: CALL_OW 44
56668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56669: LD_VAR 0 12
56673: PPUSH
56674: LD_VAR 0 8
56678: PPUSH
56679: LD_INT 0
56681: PPUSH
56682: CALL 58761 0 3
// end ;
56686: GO 56640
56688: POP
56689: POP
// if birds then
56690: LD_VAR 0 1
56694: IFFALSE 56761
// for i = 1 to birds do
56696: LD_ADDR_VAR 0 11
56700: PUSH
56701: DOUBLE
56702: LD_INT 1
56704: DEC
56705: ST_TO_ADDR
56706: LD_VAR 0 1
56710: PUSH
56711: FOR_TO
56712: IFFALSE 56759
// begin hc_class := 18 ;
56714: LD_ADDR_OWVAR 28
56718: PUSH
56719: LD_INT 18
56721: ST_TO_ADDR
// hc_gallery =  ;
56722: LD_ADDR_OWVAR 33
56726: PUSH
56727: LD_STRING 
56729: ST_TO_ADDR
// animal := CreateHuman ;
56730: LD_ADDR_VAR 0 12
56734: PUSH
56735: CALL_OW 44
56739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56740: LD_VAR 0 12
56744: PPUSH
56745: LD_VAR 0 8
56749: PPUSH
56750: LD_INT 0
56752: PPUSH
56753: CALL 58761 0 3
// end ;
56757: GO 56711
56759: POP
56760: POP
// if tigers then
56761: LD_VAR 0 2
56765: IFFALSE 56849
// for i = 1 to tigers do
56767: LD_ADDR_VAR 0 11
56771: PUSH
56772: DOUBLE
56773: LD_INT 1
56775: DEC
56776: ST_TO_ADDR
56777: LD_VAR 0 2
56781: PUSH
56782: FOR_TO
56783: IFFALSE 56847
// begin hc_class = class_tiger ;
56785: LD_ADDR_OWVAR 28
56789: PUSH
56790: LD_INT 14
56792: ST_TO_ADDR
// hc_gallery =  ;
56793: LD_ADDR_OWVAR 33
56797: PUSH
56798: LD_STRING 
56800: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56801: LD_ADDR_OWVAR 35
56805: PUSH
56806: LD_INT 7
56808: NEG
56809: PPUSH
56810: LD_INT 7
56812: PPUSH
56813: CALL_OW 12
56817: ST_TO_ADDR
// animal := CreateHuman ;
56818: LD_ADDR_VAR 0 12
56822: PUSH
56823: CALL_OW 44
56827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56828: LD_VAR 0 12
56832: PPUSH
56833: LD_VAR 0 8
56837: PPUSH
56838: LD_INT 0
56840: PPUSH
56841: CALL 58761 0 3
// end ;
56845: GO 56782
56847: POP
56848: POP
// if apemans then
56849: LD_VAR 0 3
56853: IFFALSE 56976
// for i = 1 to apemans do
56855: LD_ADDR_VAR 0 11
56859: PUSH
56860: DOUBLE
56861: LD_INT 1
56863: DEC
56864: ST_TO_ADDR
56865: LD_VAR 0 3
56869: PUSH
56870: FOR_TO
56871: IFFALSE 56974
// begin hc_class = class_apeman ;
56873: LD_ADDR_OWVAR 28
56877: PUSH
56878: LD_INT 12
56880: ST_TO_ADDR
// hc_gallery =  ;
56881: LD_ADDR_OWVAR 33
56885: PUSH
56886: LD_STRING 
56888: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56889: LD_ADDR_OWVAR 35
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PPUSH
56898: LD_INT 2
56900: PPUSH
56901: CALL_OW 12
56905: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56906: LD_ADDR_OWVAR 31
56910: PUSH
56911: LD_INT 1
56913: PPUSH
56914: LD_INT 3
56916: PPUSH
56917: CALL_OW 12
56921: PUSH
56922: LD_INT 1
56924: PPUSH
56925: LD_INT 3
56927: PPUSH
56928: CALL_OW 12
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// animal := CreateHuman ;
56945: LD_ADDR_VAR 0 12
56949: PUSH
56950: CALL_OW 44
56954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56955: LD_VAR 0 12
56959: PPUSH
56960: LD_VAR 0 8
56964: PPUSH
56965: LD_INT 0
56967: PPUSH
56968: CALL 58761 0 3
// end ;
56972: GO 56870
56974: POP
56975: POP
// if enchidnas then
56976: LD_VAR 0 4
56980: IFFALSE 57047
// for i = 1 to enchidnas do
56982: LD_ADDR_VAR 0 11
56986: PUSH
56987: DOUBLE
56988: LD_INT 1
56990: DEC
56991: ST_TO_ADDR
56992: LD_VAR 0 4
56996: PUSH
56997: FOR_TO
56998: IFFALSE 57045
// begin hc_class = 13 ;
57000: LD_ADDR_OWVAR 28
57004: PUSH
57005: LD_INT 13
57007: ST_TO_ADDR
// hc_gallery =  ;
57008: LD_ADDR_OWVAR 33
57012: PUSH
57013: LD_STRING 
57015: ST_TO_ADDR
// animal := CreateHuman ;
57016: LD_ADDR_VAR 0 12
57020: PUSH
57021: CALL_OW 44
57025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57026: LD_VAR 0 12
57030: PPUSH
57031: LD_VAR 0 8
57035: PPUSH
57036: LD_INT 0
57038: PPUSH
57039: CALL 58761 0 3
// end ;
57043: GO 56997
57045: POP
57046: POP
// if fishes then
57047: LD_VAR 0 7
57051: IFFALSE 57118
// for i = 1 to fishes do
57053: LD_ADDR_VAR 0 11
57057: PUSH
57058: DOUBLE
57059: LD_INT 1
57061: DEC
57062: ST_TO_ADDR
57063: LD_VAR 0 7
57067: PUSH
57068: FOR_TO
57069: IFFALSE 57116
// begin hc_class = 20 ;
57071: LD_ADDR_OWVAR 28
57075: PUSH
57076: LD_INT 20
57078: ST_TO_ADDR
// hc_gallery =  ;
57079: LD_ADDR_OWVAR 33
57083: PUSH
57084: LD_STRING 
57086: ST_TO_ADDR
// animal := CreateHuman ;
57087: LD_ADDR_VAR 0 12
57091: PUSH
57092: CALL_OW 44
57096: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57097: LD_VAR 0 12
57101: PPUSH
57102: LD_VAR 0 9
57106: PPUSH
57107: LD_INT 0
57109: PPUSH
57110: CALL 58761 0 3
// end ;
57114: GO 57068
57116: POP
57117: POP
// end ;
57118: LD_VAR 0 10
57122: RET
// export function WantHeal ( sci , unit ) ; begin
57123: LD_INT 0
57125: PPUSH
// if GetTaskList ( sci ) > 0 then
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 437
57135: PUSH
57136: LD_INT 0
57138: GREATER
57139: IFFALSE 57211
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57141: LD_VAR 0 1
57145: PPUSH
57146: CALL_OW 437
57150: PUSH
57151: LD_INT 1
57153: ARRAY
57154: PUSH
57155: LD_INT 1
57157: ARRAY
57158: PUSH
57159: LD_STRING l
57161: EQUAL
57162: IFFALSE 57189
57164: PUSH
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 437
57174: PUSH
57175: LD_INT 1
57177: ARRAY
57178: PUSH
57179: LD_INT 4
57181: ARRAY
57182: PUSH
57183: LD_VAR 0 2
57187: EQUAL
57188: AND
57189: IFFALSE 57201
// result := true else
57191: LD_ADDR_VAR 0 3
57195: PUSH
57196: LD_INT 1
57198: ST_TO_ADDR
57199: GO 57209
// result := false ;
57201: LD_ADDR_VAR 0 3
57205: PUSH
57206: LD_INT 0
57208: ST_TO_ADDR
// end else
57209: GO 57219
// result := false ;
57211: LD_ADDR_VAR 0 3
57215: PUSH
57216: LD_INT 0
57218: ST_TO_ADDR
// end ;
57219: LD_VAR 0 3
57223: RET
// export function HealTarget ( sci ) ; begin
57224: LD_INT 0
57226: PPUSH
// if not sci then
57227: LD_VAR 0 1
57231: NOT
57232: IFFALSE 57236
// exit ;
57234: GO 57301
// result := 0 ;
57236: LD_ADDR_VAR 0 2
57240: PUSH
57241: LD_INT 0
57243: ST_TO_ADDR
// if GetTaskList ( sci ) then
57244: LD_VAR 0 1
57248: PPUSH
57249: CALL_OW 437
57253: IFFALSE 57301
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57255: LD_VAR 0 1
57259: PPUSH
57260: CALL_OW 437
57264: PUSH
57265: LD_INT 1
57267: ARRAY
57268: PUSH
57269: LD_INT 1
57271: ARRAY
57272: PUSH
57273: LD_STRING l
57275: EQUAL
57276: IFFALSE 57301
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57278: LD_ADDR_VAR 0 2
57282: PUSH
57283: LD_VAR 0 1
57287: PPUSH
57288: CALL_OW 437
57292: PUSH
57293: LD_INT 1
57295: ARRAY
57296: PUSH
57297: LD_INT 4
57299: ARRAY
57300: ST_TO_ADDR
// end ;
57301: LD_VAR 0 2
57305: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57306: LD_INT 0
57308: PPUSH
57309: PPUSH
57310: PPUSH
57311: PPUSH
// if not base_units then
57312: LD_VAR 0 1
57316: NOT
57317: IFFALSE 57321
// exit ;
57319: GO 57408
// result := false ;
57321: LD_ADDR_VAR 0 2
57325: PUSH
57326: LD_INT 0
57328: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57329: LD_ADDR_VAR 0 5
57333: PUSH
57334: LD_VAR 0 1
57338: PPUSH
57339: LD_INT 21
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PPUSH
57349: CALL_OW 72
57353: ST_TO_ADDR
// if not tmp then
57354: LD_VAR 0 5
57358: NOT
57359: IFFALSE 57363
// exit ;
57361: GO 57408
// for i in tmp do
57363: LD_ADDR_VAR 0 3
57367: PUSH
57368: LD_VAR 0 5
57372: PUSH
57373: FOR_IN
57374: IFFALSE 57406
// begin result := EnemyInRange ( i , 22 ) ;
57376: LD_ADDR_VAR 0 2
57380: PUSH
57381: LD_VAR 0 3
57385: PPUSH
57386: LD_INT 22
57388: PPUSH
57389: CALL 54833 0 2
57393: ST_TO_ADDR
// if result then
57394: LD_VAR 0 2
57398: IFFALSE 57404
// exit ;
57400: POP
57401: POP
57402: GO 57408
// end ;
57404: GO 57373
57406: POP
57407: POP
// end ;
57408: LD_VAR 0 2
57412: RET
// export function FilterByTag ( units , tag ) ; begin
57413: LD_INT 0
57415: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57416: LD_ADDR_VAR 0 3
57420: PUSH
57421: LD_VAR 0 1
57425: PPUSH
57426: LD_INT 120
57428: PUSH
57429: LD_VAR 0 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PPUSH
57438: CALL_OW 72
57442: ST_TO_ADDR
// end ;
57443: LD_VAR 0 3
57447: RET
// export function IsDriver ( un ) ; begin
57448: LD_INT 0
57450: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57451: LD_ADDR_VAR 0 2
57455: PUSH
57456: LD_VAR 0 1
57460: PUSH
57461: LD_INT 55
57463: PUSH
57464: EMPTY
57465: LIST
57466: PPUSH
57467: CALL_OW 69
57471: IN
57472: ST_TO_ADDR
// end ;
57473: LD_VAR 0 2
57477: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57478: LD_INT 0
57480: PPUSH
57481: PPUSH
// list := [ ] ;
57482: LD_ADDR_VAR 0 5
57486: PUSH
57487: EMPTY
57488: ST_TO_ADDR
// case d of 0 :
57489: LD_VAR 0 3
57493: PUSH
57494: LD_INT 0
57496: DOUBLE
57497: EQUAL
57498: IFTRUE 57502
57500: GO 57635
57502: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57503: LD_ADDR_VAR 0 5
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_INT 4
57515: MINUS
57516: PUSH
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 4
57524: MINUS
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: PUSH
57534: LD_VAR 0 1
57538: PUSH
57539: LD_INT 3
57541: MINUS
57542: PUSH
57543: LD_VAR 0 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_VAR 0 1
57560: PUSH
57561: LD_INT 4
57563: PLUS
57564: PUSH
57565: LD_VAR 0 2
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: PUSH
57578: LD_VAR 0 1
57582: PUSH
57583: LD_INT 3
57585: PLUS
57586: PUSH
57587: LD_VAR 0 2
57591: PUSH
57592: LD_INT 3
57594: PLUS
57595: PUSH
57596: LD_INT 5
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: PUSH
57604: LD_VAR 0 1
57608: PUSH
57609: LD_VAR 0 2
57613: PUSH
57614: LD_INT 4
57616: PLUS
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// end ; 1 :
57633: GO 58333
57635: LD_INT 1
57637: DOUBLE
57638: EQUAL
57639: IFTRUE 57643
57641: GO 57776
57643: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57644: LD_ADDR_VAR 0 5
57648: PUSH
57649: LD_VAR 0 1
57653: PUSH
57654: LD_VAR 0 2
57658: PUSH
57659: LD_INT 4
57661: MINUS
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 1
57675: PUSH
57676: LD_INT 3
57678: MINUS
57679: PUSH
57680: LD_VAR 0 2
57684: PUSH
57685: LD_INT 3
57687: MINUS
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: LD_VAR 0 1
57701: PUSH
57702: LD_INT 4
57704: MINUS
57705: PUSH
57706: LD_VAR 0 2
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: PUSH
57719: LD_VAR 0 1
57723: PUSH
57724: LD_VAR 0 2
57728: PUSH
57729: LD_INT 3
57731: PLUS
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 1
57745: PUSH
57746: LD_INT 4
57748: PLUS
57749: PUSH
57750: LD_VAR 0 2
57754: PUSH
57755: LD_INT 4
57757: PLUS
57758: PUSH
57759: LD_INT 5
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: ST_TO_ADDR
// end ; 2 :
57774: GO 58333
57776: LD_INT 2
57778: DOUBLE
57779: EQUAL
57780: IFTRUE 57784
57782: GO 57913
57784: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57785: LD_ADDR_VAR 0 5
57789: PUSH
57790: LD_VAR 0 1
57794: PUSH
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 3
57802: MINUS
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: PUSH
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 4
57819: PLUS
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: LD_INT 4
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: PUSH
57834: LD_VAR 0 1
57838: PUSH
57839: LD_VAR 0 2
57843: PUSH
57844: LD_INT 4
57846: PLUS
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: PUSH
57856: LD_VAR 0 1
57860: PUSH
57861: LD_INT 3
57863: MINUS
57864: PUSH
57865: LD_VAR 0 2
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: PUSH
57878: LD_VAR 0 1
57882: PUSH
57883: LD_INT 4
57885: MINUS
57886: PUSH
57887: LD_VAR 0 2
57891: PUSH
57892: LD_INT 4
57894: MINUS
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: ST_TO_ADDR
// end ; 3 :
57911: GO 58333
57913: LD_INT 3
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57921
57919: GO 58054
57921: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57922: LD_ADDR_VAR 0 5
57926: PUSH
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 3
57934: PLUS
57935: PUSH
57936: LD_VAR 0 2
57940: PUSH
57941: LD_INT 4
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: PUSH
57949: LD_VAR 0 1
57953: PUSH
57954: LD_INT 4
57956: PLUS
57957: PUSH
57958: LD_VAR 0 2
57962: PUSH
57963: LD_INT 4
57965: PLUS
57966: PUSH
57967: LD_INT 5
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: LD_VAR 0 1
57979: PUSH
57980: LD_INT 4
57982: MINUS
57983: PUSH
57984: LD_VAR 0 2
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: PUSH
57997: LD_VAR 0 1
58001: PUSH
58002: LD_VAR 0 2
58006: PUSH
58007: LD_INT 4
58009: MINUS
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: PUSH
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 3
58026: MINUS
58027: PUSH
58028: LD_VAR 0 2
58032: PUSH
58033: LD_INT 3
58035: MINUS
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// end ; 4 :
58052: GO 58333
58054: LD_INT 4
58056: DOUBLE
58057: EQUAL
58058: IFTRUE 58062
58060: GO 58195
58062: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58063: LD_ADDR_VAR 0 5
58067: PUSH
58068: LD_VAR 0 1
58072: PUSH
58073: LD_VAR 0 2
58077: PUSH
58078: LD_INT 4
58080: PLUS
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: PUSH
58090: LD_VAR 0 1
58094: PUSH
58095: LD_INT 3
58097: PLUS
58098: PUSH
58099: LD_VAR 0 2
58103: PUSH
58104: LD_INT 3
58106: PLUS
58107: PUSH
58108: LD_INT 5
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: PUSH
58116: LD_VAR 0 1
58120: PUSH
58121: LD_INT 4
58123: PLUS
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: PUSH
58138: LD_VAR 0 1
58142: PUSH
58143: LD_VAR 0 2
58147: PUSH
58148: LD_INT 3
58150: MINUS
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: PUSH
58160: LD_VAR 0 1
58164: PUSH
58165: LD_INT 4
58167: MINUS
58168: PUSH
58169: LD_VAR 0 2
58173: PUSH
58174: LD_INT 4
58176: MINUS
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// end ; 5 :
58193: GO 58333
58195: LD_INT 5
58197: DOUBLE
58198: EQUAL
58199: IFTRUE 58203
58201: GO 58332
58203: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58204: LD_ADDR_VAR 0 5
58208: PUSH
58209: LD_VAR 0 1
58213: PUSH
58214: LD_INT 4
58216: MINUS
58217: PUSH
58218: LD_VAR 0 2
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: PUSH
58231: LD_VAR 0 1
58235: PUSH
58236: LD_VAR 0 2
58240: PUSH
58241: LD_INT 4
58243: MINUS
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: PUSH
58253: LD_VAR 0 1
58257: PUSH
58258: LD_INT 4
58260: PLUS
58261: PUSH
58262: LD_VAR 0 2
58266: PUSH
58267: LD_INT 4
58269: PLUS
58270: PUSH
58271: LD_INT 5
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: PUSH
58279: LD_VAR 0 1
58283: PUSH
58284: LD_INT 3
58286: PLUS
58287: PUSH
58288: LD_VAR 0 2
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: PUSH
58301: LD_VAR 0 1
58305: PUSH
58306: LD_VAR 0 2
58310: PUSH
58311: LD_INT 3
58313: PLUS
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// end ; end ;
58330: GO 58333
58332: POP
// result := list ;
58333: LD_ADDR_VAR 0 4
58337: PUSH
58338: LD_VAR 0 5
58342: ST_TO_ADDR
// end ;
58343: LD_VAR 0 4
58347: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58348: LD_INT 0
58350: PPUSH
58351: PPUSH
58352: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58353: LD_VAR 0 1
58357: NOT
58358: IFTRUE 58386
58360: PUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 4
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: IN
58384: NOT
58385: OR
58386: IFFALSE 58390
// exit ;
58388: GO 58473
// tmp := [ ] ;
58390: LD_ADDR_VAR 0 5
58394: PUSH
58395: EMPTY
58396: ST_TO_ADDR
// for i in units do
58397: LD_ADDR_VAR 0 4
58401: PUSH
58402: LD_VAR 0 1
58406: PUSH
58407: FOR_IN
58408: IFFALSE 58442
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58410: LD_ADDR_VAR 0 5
58414: PUSH
58415: LD_VAR 0 5
58419: PPUSH
58420: LD_VAR 0 4
58424: PPUSH
58425: LD_VAR 0 2
58429: PPUSH
58430: CALL_OW 259
58434: PPUSH
58435: CALL 59868 0 2
58439: ST_TO_ADDR
58440: GO 58407
58442: POP
58443: POP
// if not tmp then
58444: LD_VAR 0 5
58448: NOT
58449: IFFALSE 58453
// exit ;
58451: GO 58473
// result := SortListByListDesc ( units , tmp ) ;
58453: LD_ADDR_VAR 0 3
58457: PUSH
58458: LD_VAR 0 1
58462: PPUSH
58463: LD_VAR 0 5
58467: PPUSH
58468: CALL_OW 77
58472: ST_TO_ADDR
// end ;
58473: LD_VAR 0 3
58477: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58478: LD_INT 0
58480: PPUSH
58481: PPUSH
58482: PPUSH
// result := false ;
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// if not building then
58491: LD_VAR 0 2
58495: NOT
58496: IFFALSE 58500
// exit ;
58498: GO 58644
// x := GetX ( building ) ;
58500: LD_ADDR_VAR 0 4
58504: PUSH
58505: LD_VAR 0 2
58509: PPUSH
58510: CALL_OW 250
58514: ST_TO_ADDR
// y := GetY ( building ) ;
58515: LD_ADDR_VAR 0 5
58519: PUSH
58520: LD_VAR 0 2
58524: PPUSH
58525: CALL_OW 251
58529: ST_TO_ADDR
// if not x or not y then
58530: LD_VAR 0 4
58534: NOT
58535: IFTRUE 58544
58537: PUSH
58538: LD_VAR 0 5
58542: NOT
58543: OR
58544: IFFALSE 58548
// exit ;
58546: GO 58644
// if GetTaskList ( unit ) then
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 437
58557: IFFALSE 58644
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58559: LD_STRING e
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: CALL_OW 437
58571: PUSH
58572: LD_INT 1
58574: ARRAY
58575: PUSH
58576: LD_INT 1
58578: ARRAY
58579: EQUAL
58580: IFFALSE 58607
58582: PUSH
58583: LD_VAR 0 4
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: CALL_OW 437
58597: PUSH
58598: LD_INT 1
58600: ARRAY
58601: PUSH
58602: LD_INT 2
58604: ARRAY
58605: EQUAL
58606: AND
58607: IFFALSE 58634
58609: PUSH
58610: LD_VAR 0 5
58614: PUSH
58615: LD_VAR 0 1
58619: PPUSH
58620: CALL_OW 437
58624: PUSH
58625: LD_INT 1
58627: ARRAY
58628: PUSH
58629: LD_INT 3
58631: ARRAY
58632: EQUAL
58633: AND
58634: IFFALSE 58644
// result := true end ;
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: LD_INT 1
58643: ST_TO_ADDR
// end ;
58644: LD_VAR 0 3
58648: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58649: LD_INT 0
58651: PPUSH
// result := false ;
58652: LD_ADDR_VAR 0 4
58656: PUSH
58657: LD_INT 0
58659: ST_TO_ADDR
// if GetTaskList ( unit ) then
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 437
58669: IFFALSE 58756
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58671: LD_STRING M
58673: PUSH
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 437
58683: PUSH
58684: LD_INT 1
58686: ARRAY
58687: PUSH
58688: LD_INT 1
58690: ARRAY
58691: EQUAL
58692: IFFALSE 58719
58694: PUSH
58695: LD_VAR 0 2
58699: PUSH
58700: LD_VAR 0 1
58704: PPUSH
58705: CALL_OW 437
58709: PUSH
58710: LD_INT 1
58712: ARRAY
58713: PUSH
58714: LD_INT 2
58716: ARRAY
58717: EQUAL
58718: AND
58719: IFFALSE 58746
58721: PUSH
58722: LD_VAR 0 3
58726: PUSH
58727: LD_VAR 0 1
58731: PPUSH
58732: CALL_OW 437
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: PUSH
58741: LD_INT 3
58743: ARRAY
58744: EQUAL
58745: AND
58746: IFFALSE 58756
// result := true ;
58748: LD_ADDR_VAR 0 4
58752: PUSH
58753: LD_INT 1
58755: ST_TO_ADDR
// end ; end ;
58756: LD_VAR 0 4
58760: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58761: LD_INT 0
58763: PPUSH
58764: PPUSH
58765: PPUSH
58766: PPUSH
// if not unit or not area then
58767: LD_VAR 0 1
58771: NOT
58772: IFTRUE 58781
58774: PUSH
58775: LD_VAR 0 2
58779: NOT
58780: OR
58781: IFFALSE 58785
// exit ;
58783: GO 58961
// tmp := AreaToList ( area , i ) ;
58785: LD_ADDR_VAR 0 6
58789: PUSH
58790: LD_VAR 0 2
58794: PPUSH
58795: LD_VAR 0 5
58799: PPUSH
58800: CALL_OW 517
58804: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58805: LD_ADDR_VAR 0 5
58809: PUSH
58810: DOUBLE
58811: LD_INT 1
58813: DEC
58814: ST_TO_ADDR
58815: LD_VAR 0 6
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: PUSH
58824: FOR_TO
58825: IFFALSE 58959
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58827: LD_ADDR_VAR 0 7
58831: PUSH
58832: LD_VAR 0 6
58836: PUSH
58837: LD_INT 1
58839: ARRAY
58840: PUSH
58841: LD_VAR 0 5
58845: ARRAY
58846: PUSH
58847: LD_VAR 0 6
58851: PUSH
58852: LD_INT 2
58854: ARRAY
58855: PUSH
58856: LD_VAR 0 5
58860: ARRAY
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58866: LD_INT 92
58868: PUSH
58869: LD_VAR 0 7
58873: PUSH
58874: LD_INT 1
58876: ARRAY
58877: PUSH
58878: LD_VAR 0 7
58882: PUSH
58883: LD_INT 2
58885: ARRAY
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: PPUSH
58896: CALL_OW 69
58900: PUSH
58901: LD_INT 0
58903: EQUAL
58904: IFFALSE 58957
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58906: LD_VAR 0 1
58910: PPUSH
58911: LD_VAR 0 7
58915: PUSH
58916: LD_INT 1
58918: ARRAY
58919: PPUSH
58920: LD_VAR 0 7
58924: PUSH
58925: LD_INT 2
58927: ARRAY
58928: PPUSH
58929: LD_VAR 0 3
58933: PPUSH
58934: CALL_OW 48
// result := IsPlaced ( unit ) ;
58938: LD_ADDR_VAR 0 4
58942: PUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: CALL_OW 305
58952: ST_TO_ADDR
// exit ;
58953: POP
58954: POP
58955: GO 58961
// end ; end ;
58957: GO 58824
58959: POP
58960: POP
// end ;
58961: LD_VAR 0 4
58965: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58966: LD_INT 0
58968: PPUSH
58969: PPUSH
58970: PPUSH
// if not side or side > 8 then
58971: LD_VAR 0 1
58975: NOT
58976: IFTRUE 58988
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_INT 8
58986: GREATER
58987: OR
58988: IFFALSE 58992
// exit ;
58990: GO 59179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58992: LD_ADDR_VAR 0 4
58996: PUSH
58997: LD_INT 22
58999: PUSH
59000: LD_VAR 0 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 21
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PPUSH
59023: CALL_OW 69
59027: ST_TO_ADDR
// if not tmp then
59028: LD_VAR 0 4
59032: NOT
59033: IFFALSE 59037
// exit ;
59035: GO 59179
// enable_addtolog := true ;
59037: LD_ADDR_OWVAR 81
59041: PUSH
59042: LD_INT 1
59044: ST_TO_ADDR
// AddToLog ( [ ) ;
59045: LD_STRING [
59047: PPUSH
59048: CALL_OW 561
// for i in tmp do
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_VAR 0 4
59061: PUSH
59062: FOR_IN
59063: IFFALSE 59170
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59065: LD_STRING [
59067: PUSH
59068: LD_VAR 0 3
59072: PPUSH
59073: CALL_OW 266
59077: STR
59078: PUSH
59079: LD_STRING , 
59081: STR
59082: PUSH
59083: LD_VAR 0 3
59087: PPUSH
59088: CALL_OW 250
59092: STR
59093: PUSH
59094: LD_STRING , 
59096: STR
59097: PUSH
59098: LD_VAR 0 3
59102: PPUSH
59103: CALL_OW 251
59107: STR
59108: PUSH
59109: LD_STRING , 
59111: STR
59112: PUSH
59113: LD_VAR 0 3
59117: PPUSH
59118: CALL_OW 254
59122: STR
59123: PUSH
59124: LD_STRING , 
59126: STR
59127: PUSH
59128: LD_VAR 0 3
59132: PPUSH
59133: LD_INT 1
59135: PPUSH
59136: CALL_OW 268
59140: STR
59141: PUSH
59142: LD_STRING , 
59144: STR
59145: PUSH
59146: LD_VAR 0 3
59150: PPUSH
59151: LD_INT 2
59153: PPUSH
59154: CALL_OW 268
59158: STR
59159: PUSH
59160: LD_STRING ],
59162: STR
59163: PPUSH
59164: CALL_OW 561
// end ;
59168: GO 59062
59170: POP
59171: POP
// AddToLog ( ]; ) ;
59172: LD_STRING ];
59174: PPUSH
59175: CALL_OW 561
// end ;
59179: LD_VAR 0 2
59183: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59184: LD_INT 0
59186: PPUSH
59187: PPUSH
59188: PPUSH
59189: PPUSH
59190: PPUSH
// if not area or not rate or not max then
59191: LD_VAR 0 1
59195: NOT
59196: IFTRUE 59205
59198: PUSH
59199: LD_VAR 0 2
59203: NOT
59204: OR
59205: IFTRUE 59214
59207: PUSH
59208: LD_VAR 0 4
59212: NOT
59213: OR
59214: IFFALSE 59218
// exit ;
59216: GO 59407
// while 1 do
59218: LD_INT 1
59220: IFFALSE 59407
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59222: LD_ADDR_VAR 0 9
59226: PUSH
59227: LD_VAR 0 1
59231: PPUSH
59232: LD_INT 1
59234: PPUSH
59235: CALL_OW 287
59239: PUSH
59240: LD_INT 10
59242: MUL
59243: ST_TO_ADDR
// r := rate / 10 ;
59244: LD_ADDR_VAR 0 7
59248: PUSH
59249: LD_VAR 0 2
59253: PUSH
59254: LD_INT 10
59256: DIVREAL
59257: ST_TO_ADDR
// time := 1 1$00 ;
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: LD_INT 2100
59265: ST_TO_ADDR
// if amount < min then
59266: LD_VAR 0 9
59270: PUSH
59271: LD_VAR 0 3
59275: LESS
59276: IFFALSE 59294
// r := r * 2 else
59278: LD_ADDR_VAR 0 7
59282: PUSH
59283: LD_VAR 0 7
59287: PUSH
59288: LD_INT 2
59290: MUL
59291: ST_TO_ADDR
59292: GO 59320
// if amount > max then
59294: LD_VAR 0 9
59298: PUSH
59299: LD_VAR 0 4
59303: GREATER
59304: IFFALSE 59320
// r := r / 2 ;
59306: LD_ADDR_VAR 0 7
59310: PUSH
59311: LD_VAR 0 7
59315: PUSH
59316: LD_INT 2
59318: DIVREAL
59319: ST_TO_ADDR
// time := time / r ;
59320: LD_ADDR_VAR 0 8
59324: PUSH
59325: LD_VAR 0 8
59329: PUSH
59330: LD_VAR 0 7
59334: DIVREAL
59335: ST_TO_ADDR
// if time < 0 then
59336: LD_VAR 0 8
59340: PUSH
59341: LD_INT 0
59343: LESS
59344: IFFALSE 59361
// time := time * - 1 ;
59346: LD_ADDR_VAR 0 8
59350: PUSH
59351: LD_VAR 0 8
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: MUL
59360: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59361: LD_VAR 0 8
59365: PUSH
59366: LD_INT 35
59368: PPUSH
59369: LD_INT 875
59371: PPUSH
59372: CALL_OW 12
59376: PLUS
59377: PPUSH
59378: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59382: LD_INT 1
59384: PPUSH
59385: LD_INT 5
59387: PPUSH
59388: CALL_OW 12
59392: PPUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: LD_INT 1
59400: PPUSH
59401: CALL_OW 55
// end ;
59405: GO 59218
// end ;
59407: LD_VAR 0 5
59411: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
59416: PPUSH
59417: PPUSH
59418: PPUSH
59419: PPUSH
59420: PPUSH
59421: PPUSH
// if not turrets or not factories then
59422: LD_VAR 0 1
59426: NOT
59427: IFTRUE 59436
59429: PUSH
59430: LD_VAR 0 2
59434: NOT
59435: OR
59436: IFFALSE 59440
// exit ;
59438: GO 59747
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59440: LD_ADDR_VAR 0 10
59444: PUSH
59445: LD_INT 5
59447: PUSH
59448: LD_INT 6
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 4
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: LD_INT 5
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 24
59482: PUSH
59483: LD_INT 25
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 23
59492: PUSH
59493: LD_INT 27
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 42
59506: PUSH
59507: LD_INT 43
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 44
59516: PUSH
59517: LD_INT 46
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 45
59526: PUSH
59527: LD_INT 47
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// result := [ ] ;
59544: LD_ADDR_VAR 0 3
59548: PUSH
59549: EMPTY
59550: ST_TO_ADDR
// for i in turrets do
59551: LD_ADDR_VAR 0 4
59555: PUSH
59556: LD_VAR 0 1
59560: PUSH
59561: FOR_IN
59562: IFFALSE 59745
// begin nat := GetNation ( i ) ;
59564: LD_ADDR_VAR 0 7
59568: PUSH
59569: LD_VAR 0 4
59573: PPUSH
59574: CALL_OW 248
59578: ST_TO_ADDR
// weapon := 0 ;
59579: LD_ADDR_VAR 0 8
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// if not nat then
59587: LD_VAR 0 7
59591: NOT
59592: IFFALSE 59596
// continue ;
59594: GO 59561
// for j in list [ nat ] do
59596: LD_ADDR_VAR 0 5
59600: PUSH
59601: LD_VAR 0 10
59605: PUSH
59606: LD_VAR 0 7
59610: ARRAY
59611: PUSH
59612: FOR_IN
59613: IFFALSE 59654
// if GetBWeapon ( i ) = j [ 1 ] then
59615: LD_VAR 0 4
59619: PPUSH
59620: CALL_OW 269
59624: PUSH
59625: LD_VAR 0 5
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: EQUAL
59634: IFFALSE 59652
// begin weapon := j [ 2 ] ;
59636: LD_ADDR_VAR 0 8
59640: PUSH
59641: LD_VAR 0 5
59645: PUSH
59646: LD_INT 2
59648: ARRAY
59649: ST_TO_ADDR
// break ;
59650: GO 59654
// end ;
59652: GO 59612
59654: POP
59655: POP
// if not weapon then
59656: LD_VAR 0 8
59660: NOT
59661: IFFALSE 59665
// continue ;
59663: GO 59561
// for k in factories do
59665: LD_ADDR_VAR 0 6
59669: PUSH
59670: LD_VAR 0 2
59674: PUSH
59675: FOR_IN
59676: IFFALSE 59741
// begin weapons := AvailableWeaponList ( k ) ;
59678: LD_ADDR_VAR 0 9
59682: PUSH
59683: LD_VAR 0 6
59687: PPUSH
59688: CALL_OW 478
59692: ST_TO_ADDR
// if not weapons then
59693: LD_VAR 0 9
59697: NOT
59698: IFFALSE 59702
// continue ;
59700: GO 59675
// if weapon in weapons then
59702: LD_VAR 0 8
59706: PUSH
59707: LD_VAR 0 9
59711: IN
59712: IFFALSE 59739
// begin result := [ i , weapon ] ;
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_VAR 0 4
59723: PUSH
59724: LD_VAR 0 8
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: ST_TO_ADDR
// exit ;
59733: POP
59734: POP
59735: POP
59736: POP
59737: GO 59747
// end ; end ;
59739: GO 59675
59741: POP
59742: POP
// end ;
59743: GO 59561
59745: POP
59746: POP
// end ;
59747: LD_VAR 0 3
59751: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59752: LD_INT 0
59754: PPUSH
// if not side or side > 8 then
59755: LD_VAR 0 3
59759: NOT
59760: IFTRUE 59772
59762: PUSH
59763: LD_VAR 0 3
59767: PUSH
59768: LD_INT 8
59770: GREATER
59771: OR
59772: IFFALSE 59776
// exit ;
59774: GO 59835
// if not range then
59776: LD_VAR 0 4
59780: NOT
59781: IFFALSE 59792
// range := - 12 ;
59783: LD_ADDR_VAR 0 4
59787: PUSH
59788: LD_INT 12
59790: NEG
59791: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59792: LD_VAR 0 1
59796: PPUSH
59797: LD_VAR 0 2
59801: PPUSH
59802: LD_VAR 0 3
59806: PPUSH
59807: LD_VAR 0 4
59811: PPUSH
59812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59816: LD_VAR 0 1
59820: PPUSH
59821: LD_VAR 0 2
59825: PPUSH
59826: LD_VAR 0 3
59830: PPUSH
59831: CALL_OW 331
// end ;
59835: LD_VAR 0 5
59839: RET
// export function Video ( mode ) ; begin
59840: LD_INT 0
59842: PPUSH
// ingame_video = mode ;
59843: LD_ADDR_OWVAR 52
59847: PUSH
59848: LD_VAR 0 1
59852: ST_TO_ADDR
// interface_hidden = mode ;
59853: LD_ADDR_OWVAR 54
59857: PUSH
59858: LD_VAR 0 1
59862: ST_TO_ADDR
// end ;
59863: LD_VAR 0 2
59867: RET
// export function Join ( array , element ) ; begin
59868: LD_INT 0
59870: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59871: LD_ADDR_VAR 0 3
59875: PUSH
59876: LD_VAR 0 1
59880: PPUSH
59881: LD_VAR 0 1
59885: PUSH
59886: LD_INT 1
59888: PLUS
59889: PPUSH
59890: LD_VAR 0 2
59894: PPUSH
59895: CALL_OW 1
59899: ST_TO_ADDR
// end ;
59900: LD_VAR 0 3
59904: RET
// export function JoinUnion ( array , element ) ; begin
59905: LD_INT 0
59907: PPUSH
// result := array union element ;
59908: LD_ADDR_VAR 0 3
59912: PUSH
59913: LD_VAR 0 1
59917: PUSH
59918: LD_VAR 0 2
59922: UNION
59923: ST_TO_ADDR
// end ;
59924: LD_VAR 0 3
59928: RET
// export function GetBehemoths ( side ) ; begin
59929: LD_INT 0
59931: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: LD_INT 22
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 31
59951: PUSH
59952: LD_INT 25
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PPUSH
59963: CALL_OW 69
59967: ST_TO_ADDR
// end ;
59968: LD_VAR 0 2
59972: RET
// export function Shuffle ( array ) ; var i , index ; begin
59973: LD_INT 0
59975: PPUSH
59976: PPUSH
59977: PPUSH
// result := [ ] ;
59978: LD_ADDR_VAR 0 2
59982: PUSH
59983: EMPTY
59984: ST_TO_ADDR
// if not array then
59985: LD_VAR 0 1
59989: NOT
59990: IFFALSE 59994
// exit ;
59992: GO 60093
// Randomize ;
59994: CALL_OW 10
// for i = array downto 1 do
59998: LD_ADDR_VAR 0 3
60002: PUSH
60003: DOUBLE
60004: LD_VAR 0 1
60008: INC
60009: ST_TO_ADDR
60010: LD_INT 1
60012: PUSH
60013: FOR_DOWNTO
60014: IFFALSE 60091
// begin index := rand ( 1 , array ) ;
60016: LD_ADDR_VAR 0 4
60020: PUSH
60021: LD_INT 1
60023: PPUSH
60024: LD_VAR 0 1
60028: PPUSH
60029: CALL_OW 12
60033: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60034: LD_ADDR_VAR 0 2
60038: PUSH
60039: LD_VAR 0 2
60043: PPUSH
60044: LD_VAR 0 2
60048: PUSH
60049: LD_INT 1
60051: PLUS
60052: PPUSH
60053: LD_VAR 0 1
60057: PUSH
60058: LD_VAR 0 4
60062: ARRAY
60063: PPUSH
60064: CALL_OW 2
60068: ST_TO_ADDR
// array := Delete ( array , index ) ;
60069: LD_ADDR_VAR 0 1
60073: PUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: LD_VAR 0 4
60083: PPUSH
60084: CALL_OW 3
60088: ST_TO_ADDR
// end ;
60089: GO 60013
60091: POP
60092: POP
// end ;
60093: LD_VAR 0 2
60097: RET
// export function GetBaseMaterials ( base ) ; begin
60098: LD_INT 0
60100: PPUSH
// result := [ 0 , 0 , 0 ] ;
60101: LD_ADDR_VAR 0 2
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// if not base then
60120: LD_VAR 0 1
60124: NOT
60125: IFFALSE 60129
// exit ;
60127: GO 60178
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60129: LD_ADDR_VAR 0 2
60133: PUSH
60134: LD_VAR 0 1
60138: PPUSH
60139: LD_INT 1
60141: PPUSH
60142: CALL_OW 275
60146: PUSH
60147: LD_VAR 0 1
60151: PPUSH
60152: LD_INT 2
60154: PPUSH
60155: CALL_OW 275
60159: PUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: LD_INT 3
60167: PPUSH
60168: CALL_OW 275
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// end ;
60178: LD_VAR 0 2
60182: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60183: LD_INT 0
60185: PPUSH
60186: PPUSH
// result := array ;
60187: LD_ADDR_VAR 0 3
60191: PUSH
60192: LD_VAR 0 1
60196: ST_TO_ADDR
// if size >= result then
60197: LD_VAR 0 2
60201: PUSH
60202: LD_VAR 0 3
60206: GREATEREQUAL
60207: IFFALSE 60211
// exit ;
60209: GO 60261
// if size then
60211: LD_VAR 0 2
60215: IFFALSE 60261
// for i := array downto size do
60217: LD_ADDR_VAR 0 4
60221: PUSH
60222: DOUBLE
60223: LD_VAR 0 1
60227: INC
60228: ST_TO_ADDR
60229: LD_VAR 0 2
60233: PUSH
60234: FOR_DOWNTO
60235: IFFALSE 60259
// result := Delete ( result , result ) ;
60237: LD_ADDR_VAR 0 3
60241: PUSH
60242: LD_VAR 0 3
60246: PPUSH
60247: LD_VAR 0 3
60251: PPUSH
60252: CALL_OW 3
60256: ST_TO_ADDR
60257: GO 60234
60259: POP
60260: POP
// end ;
60261: LD_VAR 0 3
60265: RET
// export function ComExit ( unit ) ; var tmp ; begin
60266: LD_INT 0
60268: PPUSH
60269: PPUSH
// if not IsInUnit ( unit ) then
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL_OW 310
60279: NOT
60280: IFFALSE 60284
// exit ;
60282: GO 60344
// tmp := IsInUnit ( unit ) ;
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: LD_VAR 0 1
60293: PPUSH
60294: CALL_OW 310
60298: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60299: LD_VAR 0 3
60303: PPUSH
60304: CALL_OW 247
60308: PUSH
60309: LD_INT 2
60311: EQUAL
60312: IFFALSE 60325
// ComExitVehicle ( unit ) else
60314: LD_VAR 0 1
60318: PPUSH
60319: CALL_OW 121
60323: GO 60334
// ComExitBuilding ( unit ) ;
60325: LD_VAR 0 1
60329: PPUSH
60330: CALL_OW 122
// result := tmp ;
60334: LD_ADDR_VAR 0 2
60338: PUSH
60339: LD_VAR 0 3
60343: ST_TO_ADDR
// end ;
60344: LD_VAR 0 2
60348: RET
// export function ComExitAll ( units ) ; var i ; begin
60349: LD_INT 0
60351: PPUSH
60352: PPUSH
// if not units then
60353: LD_VAR 0 1
60357: NOT
60358: IFFALSE 60362
// exit ;
60360: GO 60388
// for i in units do
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: FOR_IN
60373: IFFALSE 60386
// ComExit ( i ) ;
60375: LD_VAR 0 3
60379: PPUSH
60380: CALL 60266 0 1
60384: GO 60372
60386: POP
60387: POP
// end ;
60388: LD_VAR 0 2
60392: RET
// export function ResetHc ; begin
60393: LD_INT 0
60395: PPUSH
// InitHc ;
60396: CALL_OW 19
// hc_importance := 0 ;
60400: LD_ADDR_OWVAR 32
60404: PUSH
60405: LD_INT 0
60407: ST_TO_ADDR
// end ;
60408: LD_VAR 0 1
60412: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60413: LD_INT 0
60415: PPUSH
60416: PPUSH
60417: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60418: LD_ADDR_VAR 0 6
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_VAR 0 3
60432: PLUS
60433: PUSH
60434: LD_INT 2
60436: DIV
60437: ST_TO_ADDR
// if _x < 0 then
60438: LD_VAR 0 6
60442: PUSH
60443: LD_INT 0
60445: LESS
60446: IFFALSE 60463
// _x := _x * - 1 ;
60448: LD_ADDR_VAR 0 6
60452: PUSH
60453: LD_VAR 0 6
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: MUL
60462: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60463: LD_ADDR_VAR 0 7
60467: PUSH
60468: LD_VAR 0 2
60472: PUSH
60473: LD_VAR 0 4
60477: PLUS
60478: PUSH
60479: LD_INT 2
60481: DIV
60482: ST_TO_ADDR
// if _y < 0 then
60483: LD_VAR 0 7
60487: PUSH
60488: LD_INT 0
60490: LESS
60491: IFFALSE 60508
// _y := _y * - 1 ;
60493: LD_ADDR_VAR 0 7
60497: PUSH
60498: LD_VAR 0 7
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: MUL
60507: ST_TO_ADDR
// result := [ _x , _y ] ;
60508: LD_ADDR_VAR 0 5
60512: PUSH
60513: LD_VAR 0 6
60517: PUSH
60518: LD_VAR 0 7
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// end ;
60527: LD_VAR 0 5
60531: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60532: LD_INT 0
60534: PPUSH
60535: PPUSH
60536: PPUSH
60537: PPUSH
// task := GetTaskList ( unit ) ;
60538: LD_ADDR_VAR 0 7
60542: PUSH
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 437
60552: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60553: LD_VAR 0 7
60557: NOT
60558: IFFALSE 60577
60560: PUSH
60561: LD_VAR 0 1
60565: PPUSH
60566: LD_VAR 0 2
60570: PPUSH
60571: CALL_OW 308
60575: NOT
60576: AND
60577: IFFALSE 60581
// exit ;
60579: GO 60699
// if IsInArea ( unit , area ) then
60581: LD_VAR 0 1
60585: PPUSH
60586: LD_VAR 0 2
60590: PPUSH
60591: CALL_OW 308
60595: IFFALSE 60613
// begin ComMoveToArea ( unit , goAway ) ;
60597: LD_VAR 0 1
60601: PPUSH
60602: LD_VAR 0 3
60606: PPUSH
60607: CALL_OW 113
// exit ;
60611: GO 60699
// end ; if task [ 1 ] [ 1 ] <> M then
60613: LD_VAR 0 7
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: PUSH
60626: LD_STRING M
60628: NONEQUAL
60629: IFFALSE 60633
// exit ;
60631: GO 60699
// x := task [ 1 ] [ 2 ] ;
60633: LD_ADDR_VAR 0 5
60637: PUSH
60638: LD_VAR 0 7
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PUSH
60647: LD_INT 2
60649: ARRAY
60650: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60651: LD_ADDR_VAR 0 6
60655: PUSH
60656: LD_VAR 0 7
60660: PUSH
60661: LD_INT 1
60663: ARRAY
60664: PUSH
60665: LD_INT 3
60667: ARRAY
60668: ST_TO_ADDR
// if InArea ( x , y , area ) then
60669: LD_VAR 0 5
60673: PPUSH
60674: LD_VAR 0 6
60678: PPUSH
60679: LD_VAR 0 2
60683: PPUSH
60684: CALL_OW 309
60688: IFFALSE 60699
// ComStop ( unit ) ;
60690: LD_VAR 0 1
60694: PPUSH
60695: CALL_OW 141
// end ;
60699: LD_VAR 0 4
60703: RET
// export function Abs ( value ) ; begin
60704: LD_INT 0
60706: PPUSH
// result := value ;
60707: LD_ADDR_VAR 0 2
60711: PUSH
60712: LD_VAR 0 1
60716: ST_TO_ADDR
// if value < 0 then
60717: LD_VAR 0 1
60721: PUSH
60722: LD_INT 0
60724: LESS
60725: IFFALSE 60742
// result := value * - 1 ;
60727: LD_ADDR_VAR 0 2
60731: PUSH
60732: LD_VAR 0 1
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: MUL
60741: ST_TO_ADDR
// end ;
60742: LD_VAR 0 2
60746: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60747: LD_INT 0
60749: PPUSH
60750: PPUSH
60751: PPUSH
60752: PPUSH
60753: PPUSH
60754: PPUSH
60755: PPUSH
60756: PPUSH
// if not unit or not building then
60757: LD_VAR 0 1
60761: NOT
60762: IFTRUE 60771
60764: PUSH
60765: LD_VAR 0 2
60769: NOT
60770: OR
60771: IFFALSE 60775
// exit ;
60773: GO 61003
// x := GetX ( building ) ;
60775: LD_ADDR_VAR 0 4
60779: PUSH
60780: LD_VAR 0 2
60784: PPUSH
60785: CALL_OW 250
60789: ST_TO_ADDR
// y := GetY ( building ) ;
60790: LD_ADDR_VAR 0 6
60794: PUSH
60795: LD_VAR 0 2
60799: PPUSH
60800: CALL_OW 251
60804: ST_TO_ADDR
// d := GetDir ( building ) ;
60805: LD_ADDR_VAR 0 8
60809: PUSH
60810: LD_VAR 0 2
60814: PPUSH
60815: CALL_OW 254
60819: ST_TO_ADDR
// r := 4 ;
60820: LD_ADDR_VAR 0 9
60824: PUSH
60825: LD_INT 4
60827: ST_TO_ADDR
// for i := 1 to 5 do
60828: LD_ADDR_VAR 0 10
60832: PUSH
60833: DOUBLE
60834: LD_INT 1
60836: DEC
60837: ST_TO_ADDR
60838: LD_INT 5
60840: PUSH
60841: FOR_TO
60842: IFFALSE 61001
// begin _x := ShiftX ( x , d , r + i ) ;
60844: LD_ADDR_VAR 0 5
60848: PUSH
60849: LD_VAR 0 4
60853: PPUSH
60854: LD_VAR 0 8
60858: PPUSH
60859: LD_VAR 0 9
60863: PUSH
60864: LD_VAR 0 10
60868: PLUS
60869: PPUSH
60870: CALL_OW 272
60874: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60875: LD_ADDR_VAR 0 7
60879: PUSH
60880: LD_VAR 0 6
60884: PPUSH
60885: LD_VAR 0 8
60889: PPUSH
60890: LD_VAR 0 9
60894: PUSH
60895: LD_VAR 0 10
60899: PLUS
60900: PPUSH
60901: CALL_OW 273
60905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60906: LD_VAR 0 5
60910: PPUSH
60911: LD_VAR 0 7
60915: PPUSH
60916: CALL_OW 488
60920: IFFALSE 60955
60922: PUSH
60923: LD_VAR 0 5
60927: PPUSH
60928: LD_VAR 0 7
60932: PPUSH
60933: CALL_OW 428
60937: PPUSH
60938: CALL_OW 247
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: IN
60953: NOT
60954: AND
60955: IFFALSE 60999
// begin ComMoveXY ( unit , _x , _y ) ;
60957: LD_VAR 0 1
60961: PPUSH
60962: LD_VAR 0 5
60966: PPUSH
60967: LD_VAR 0 7
60971: PPUSH
60972: CALL_OW 111
// result := [ _x , _y ] ;
60976: LD_ADDR_VAR 0 3
60980: PUSH
60981: LD_VAR 0 5
60985: PUSH
60986: LD_VAR 0 7
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// exit ;
60995: POP
60996: POP
60997: GO 61003
// end ; end ;
60999: GO 60841
61001: POP
61002: POP
// end ;
61003: LD_VAR 0 3
61007: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61008: LD_INT 0
61010: PPUSH
61011: PPUSH
61012: PPUSH
// result := 0 ;
61013: LD_ADDR_VAR 0 3
61017: PUSH
61018: LD_INT 0
61020: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61021: LD_VAR 0 1
61025: PUSH
61026: LD_INT 0
61028: LESS
61029: IFTRUE 61041
61031: PUSH
61032: LD_VAR 0 1
61036: PUSH
61037: LD_INT 8
61039: GREATER
61040: OR
61041: IFTRUE 61053
61043: PUSH
61044: LD_VAR 0 2
61048: PUSH
61049: LD_INT 0
61051: LESS
61052: OR
61053: IFTRUE 61065
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_INT 8
61063: GREATER
61064: OR
61065: IFFALSE 61069
// exit ;
61067: GO 61144
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61069: LD_ADDR_VAR 0 4
61073: PUSH
61074: LD_INT 22
61076: PUSH
61077: LD_VAR 0 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PPUSH
61086: CALL_OW 69
61090: PUSH
61091: FOR_IN
61092: IFFALSE 61142
// begin un := UnitShoot ( i ) ;
61094: LD_ADDR_VAR 0 5
61098: PUSH
61099: LD_VAR 0 4
61103: PPUSH
61104: CALL_OW 504
61108: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61109: LD_VAR 0 5
61113: PPUSH
61114: CALL_OW 255
61118: PUSH
61119: LD_VAR 0 1
61123: EQUAL
61124: IFFALSE 61140
// begin result := un ;
61126: LD_ADDR_VAR 0 3
61130: PUSH
61131: LD_VAR 0 5
61135: ST_TO_ADDR
// exit ;
61136: POP
61137: POP
61138: GO 61144
// end ; end ;
61140: GO 61091
61142: POP
61143: POP
// end ;
61144: LD_VAR 0 3
61148: RET
// export function GetCargoBay ( units ) ; begin
61149: LD_INT 0
61151: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61152: LD_ADDR_VAR 0 2
61156: PUSH
61157: LD_VAR 0 1
61161: PPUSH
61162: LD_INT 2
61164: PUSH
61165: LD_INT 34
61167: PUSH
61168: LD_INT 12
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 34
61177: PUSH
61178: LD_INT 51
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 34
61187: PUSH
61188: LD_INT 32
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 34
61197: PUSH
61198: LD_INT 89
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: PPUSH
61212: CALL_OW 72
61216: ST_TO_ADDR
// end ;
61217: LD_VAR 0 2
61221: RET
// export function Negate ( value ) ; begin
61222: LD_INT 0
61224: PPUSH
// result := not value ;
61225: LD_ADDR_VAR 0 2
61229: PUSH
61230: LD_VAR 0 1
61234: NOT
61235: ST_TO_ADDR
// end ;
61236: LD_VAR 0 2
61240: RET
// export function Inc ( value ) ; begin
61241: LD_INT 0
61243: PPUSH
// result := value + 1 ;
61244: LD_ADDR_VAR 0 2
61248: PUSH
61249: LD_VAR 0 1
61253: PUSH
61254: LD_INT 1
61256: PLUS
61257: ST_TO_ADDR
// end ;
61258: LD_VAR 0 2
61262: RET
// export function Dec ( value ) ; begin
61263: LD_INT 0
61265: PPUSH
// result := value - 1 ;
61266: LD_ADDR_VAR 0 2
61270: PUSH
61271: LD_VAR 0 1
61275: PUSH
61276: LD_INT 1
61278: MINUS
61279: ST_TO_ADDR
// end ;
61280: LD_VAR 0 2
61284: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61285: LD_INT 0
61287: PPUSH
61288: PPUSH
61289: PPUSH
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61295: LD_VAR 0 1
61299: PPUSH
61300: LD_VAR 0 2
61304: PPUSH
61305: CALL_OW 488
61309: NOT
61310: IFTRUE 61329
61312: PUSH
61313: LD_VAR 0 3
61317: PPUSH
61318: LD_VAR 0 4
61322: PPUSH
61323: CALL_OW 488
61327: NOT
61328: OR
61329: IFFALSE 61342
// begin result := - 1 ;
61331: LD_ADDR_VAR 0 5
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: ST_TO_ADDR
// exit ;
61340: GO 61577
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61342: LD_ADDR_VAR 0 12
61346: PUSH
61347: LD_VAR 0 1
61351: PPUSH
61352: LD_VAR 0 2
61356: PPUSH
61357: LD_VAR 0 3
61361: PPUSH
61362: LD_VAR 0 4
61366: PPUSH
61367: CALL 60413 0 4
61371: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61372: LD_ADDR_VAR 0 11
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_VAR 0 2
61386: PPUSH
61387: LD_VAR 0 12
61391: PUSH
61392: LD_INT 1
61394: ARRAY
61395: PPUSH
61396: LD_VAR 0 12
61400: PUSH
61401: LD_INT 2
61403: ARRAY
61404: PPUSH
61405: CALL_OW 298
61409: ST_TO_ADDR
// distance := 9999 ;
61410: LD_ADDR_VAR 0 10
61414: PUSH
61415: LD_INT 9999
61417: ST_TO_ADDR
// for i := 0 to 5 do
61418: LD_ADDR_VAR 0 6
61422: PUSH
61423: DOUBLE
61424: LD_INT 0
61426: DEC
61427: ST_TO_ADDR
61428: LD_INT 5
61430: PUSH
61431: FOR_TO
61432: IFFALSE 61575
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61434: LD_ADDR_VAR 0 7
61438: PUSH
61439: LD_VAR 0 1
61443: PPUSH
61444: LD_VAR 0 6
61448: PPUSH
61449: LD_VAR 0 11
61453: PPUSH
61454: CALL_OW 272
61458: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61459: LD_ADDR_VAR 0 8
61463: PUSH
61464: LD_VAR 0 2
61468: PPUSH
61469: LD_VAR 0 6
61473: PPUSH
61474: LD_VAR 0 11
61478: PPUSH
61479: CALL_OW 273
61483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61484: LD_VAR 0 7
61488: PPUSH
61489: LD_VAR 0 8
61493: PPUSH
61494: CALL_OW 488
61498: NOT
61499: IFFALSE 61503
// continue ;
61501: GO 61431
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61503: LD_ADDR_VAR 0 9
61507: PUSH
61508: LD_VAR 0 12
61512: PUSH
61513: LD_INT 1
61515: ARRAY
61516: PPUSH
61517: LD_VAR 0 12
61521: PUSH
61522: LD_INT 2
61524: ARRAY
61525: PPUSH
61526: LD_VAR 0 7
61530: PPUSH
61531: LD_VAR 0 8
61535: PPUSH
61536: CALL_OW 298
61540: ST_TO_ADDR
// if tmp < distance then
61541: LD_VAR 0 9
61545: PUSH
61546: LD_VAR 0 10
61550: LESS
61551: IFFALSE 61573
// begin result := i ;
61553: LD_ADDR_VAR 0 5
61557: PUSH
61558: LD_VAR 0 6
61562: ST_TO_ADDR
// distance := tmp ;
61563: LD_ADDR_VAR 0 10
61567: PUSH
61568: LD_VAR 0 9
61572: ST_TO_ADDR
// end ; end ;
61573: GO 61431
61575: POP
61576: POP
// end ;
61577: LD_VAR 0 5
61581: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61582: LD_INT 0
61584: PPUSH
61585: PPUSH
// if not driver or not IsInUnit ( driver ) then
61586: LD_VAR 0 1
61590: NOT
61591: IFTRUE 61605
61593: PUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: CALL_OW 310
61603: NOT
61604: OR
61605: IFFALSE 61609
// exit ;
61607: GO 61699
// vehicle := IsInUnit ( driver ) ;
61609: LD_ADDR_VAR 0 3
61613: PUSH
61614: LD_VAR 0 1
61618: PPUSH
61619: CALL_OW 310
61623: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61624: LD_VAR 0 1
61628: PPUSH
61629: LD_STRING \
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: PUSH
61659: LD_STRING E
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_VAR 0 3
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PPUSH
61695: CALL_OW 446
// end ;
61699: LD_VAR 0 2
61703: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61704: LD_INT 0
61706: PPUSH
61707: PPUSH
// if not driver or not IsInUnit ( driver ) then
61708: LD_VAR 0 1
61712: NOT
61713: IFTRUE 61727
61715: PUSH
61716: LD_VAR 0 1
61720: PPUSH
61721: CALL_OW 310
61725: NOT
61726: OR
61727: IFFALSE 61731
// exit ;
61729: GO 61821
// vehicle := IsInUnit ( driver ) ;
61731: LD_ADDR_VAR 0 3
61735: PUSH
61736: LD_VAR 0 1
61740: PPUSH
61741: CALL_OW 310
61745: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61746: LD_VAR 0 1
61750: PPUSH
61751: LD_STRING \
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: LD_STRING E
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_VAR 0 3
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PPUSH
61817: CALL_OW 447
// end ;
61821: LD_VAR 0 2
61825: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61826: LD_INT 0
61828: PPUSH
61829: PPUSH
61830: PPUSH
// tmp := [ ] ;
61831: LD_ADDR_VAR 0 5
61835: PUSH
61836: EMPTY
61837: ST_TO_ADDR
// for i in units do
61838: LD_ADDR_VAR 0 4
61842: PUSH
61843: LD_VAR 0 1
61847: PUSH
61848: FOR_IN
61849: IFFALSE 61887
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61851: LD_ADDR_VAR 0 5
61855: PUSH
61856: LD_VAR 0 5
61860: PPUSH
61861: LD_VAR 0 5
61865: PUSH
61866: LD_INT 1
61868: PLUS
61869: PPUSH
61870: LD_VAR 0 4
61874: PPUSH
61875: CALL_OW 256
61879: PPUSH
61880: CALL_OW 2
61884: ST_TO_ADDR
61885: GO 61848
61887: POP
61888: POP
// if not tmp then
61889: LD_VAR 0 5
61893: NOT
61894: IFFALSE 61898
// exit ;
61896: GO 61946
// if asc then
61898: LD_VAR 0 2
61902: IFFALSE 61926
// result := SortListByListAsc ( units , tmp ) else
61904: LD_ADDR_VAR 0 3
61908: PUSH
61909: LD_VAR 0 1
61913: PPUSH
61914: LD_VAR 0 5
61918: PPUSH
61919: CALL_OW 76
61923: ST_TO_ADDR
61924: GO 61946
// result := SortListByListDesc ( units , tmp ) ;
61926: LD_ADDR_VAR 0 3
61930: PUSH
61931: LD_VAR 0 1
61935: PPUSH
61936: LD_VAR 0 5
61940: PPUSH
61941: CALL_OW 77
61945: ST_TO_ADDR
// end ;
61946: LD_VAR 0 3
61950: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61951: LD_INT 0
61953: PPUSH
61954: PPUSH
// task := GetTaskList ( mech ) ;
61955: LD_ADDR_VAR 0 4
61959: PUSH
61960: LD_VAR 0 1
61964: PPUSH
61965: CALL_OW 437
61969: ST_TO_ADDR
// if not task then
61970: LD_VAR 0 4
61974: NOT
61975: IFFALSE 61979
// exit ;
61977: GO 62023
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61979: LD_ADDR_VAR 0 3
61983: PUSH
61984: LD_VAR 0 4
61988: PUSH
61989: LD_INT 1
61991: ARRAY
61992: PUSH
61993: LD_INT 1
61995: ARRAY
61996: PUSH
61997: LD_STRING r
61999: EQUAL
62000: IFFALSE 62022
62002: PUSH
62003: LD_VAR 0 4
62007: PUSH
62008: LD_INT 1
62010: ARRAY
62011: PUSH
62012: LD_INT 4
62014: ARRAY
62015: PUSH
62016: LD_VAR 0 2
62020: EQUAL
62021: AND
62022: ST_TO_ADDR
// end ;
62023: LD_VAR 0 3
62027: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62028: LD_INT 0
62030: PPUSH
// SetDir ( unit , d ) ;
62031: LD_VAR 0 1
62035: PPUSH
62036: LD_VAR 0 4
62040: PPUSH
62041: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62045: LD_ADDR_VAR 0 6
62049: PUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: LD_VAR 0 2
62059: PPUSH
62060: LD_VAR 0 3
62064: PPUSH
62065: LD_VAR 0 5
62069: PPUSH
62070: CALL_OW 48
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 6
62079: RET
// export function ToNaturalNumber ( number ) ; begin
62080: LD_INT 0
62082: PPUSH
// result := number div 1 ;
62083: LD_ADDR_VAR 0 2
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 1
62095: DIV
62096: ST_TO_ADDR
// if number < 0 then
62097: LD_VAR 0 1
62101: PUSH
62102: LD_INT 0
62104: LESS
62105: IFFALSE 62115
// result := 0 ;
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: LD_INT 0
62114: ST_TO_ADDR
// end ;
62115: LD_VAR 0 2
62119: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
62120: LD_INT 0
62122: PPUSH
62123: PPUSH
62124: PPUSH
// if not buildings then
62125: LD_VAR 0 1
62129: NOT
62130: IFFALSE 62134
// exit ;
62132: GO 62249
// tmp := [ ] ;
62134: LD_ADDR_VAR 0 5
62138: PUSH
62139: EMPTY
62140: ST_TO_ADDR
// for b in buildings do
62141: LD_ADDR_VAR 0 4
62145: PUSH
62146: LD_VAR 0 1
62150: PUSH
62151: FOR_IN
62152: IFFALSE 62190
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
62154: LD_ADDR_VAR 0 5
62158: PUSH
62159: LD_VAR 0 5
62163: PPUSH
62164: LD_VAR 0 5
62168: PUSH
62169: LD_INT 1
62171: PLUS
62172: PPUSH
62173: LD_VAR 0 4
62177: PPUSH
62178: CALL_OW 266
62182: PPUSH
62183: CALL_OW 1
62187: ST_TO_ADDR
62188: GO 62151
62190: POP
62191: POP
// if not tmp then
62192: LD_VAR 0 5
62196: NOT
62197: IFFALSE 62201
// exit ;
62199: GO 62249
// if asc then
62201: LD_VAR 0 2
62205: IFFALSE 62229
// result := SortListByListAsc ( buildings , tmp ) else
62207: LD_ADDR_VAR 0 3
62211: PUSH
62212: LD_VAR 0 1
62216: PPUSH
62217: LD_VAR 0 5
62221: PPUSH
62222: CALL_OW 76
62226: ST_TO_ADDR
62227: GO 62249
// result := SortListByListDesc ( buildings , tmp ) ;
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_VAR 0 1
62238: PPUSH
62239: LD_VAR 0 5
62243: PPUSH
62244: CALL_OW 77
62248: ST_TO_ADDR
// end ;
62249: LD_VAR 0 3
62253: RET
// export function SortByClass ( units , class ) ; var un ; begin
62254: LD_INT 0
62256: PPUSH
62257: PPUSH
// if not units or not class then
62258: LD_VAR 0 1
62262: NOT
62263: IFTRUE 62272
62265: PUSH
62266: LD_VAR 0 2
62270: NOT
62271: OR
62272: IFFALSE 62276
// exit ;
62274: GO 62371
// result := [ ] ;
62276: LD_ADDR_VAR 0 3
62280: PUSH
62281: EMPTY
62282: ST_TO_ADDR
// for un in units do
62283: LD_ADDR_VAR 0 4
62287: PUSH
62288: LD_VAR 0 1
62292: PUSH
62293: FOR_IN
62294: IFFALSE 62369
// if GetClass ( un ) = class then
62296: LD_VAR 0 4
62300: PPUSH
62301: CALL_OW 257
62305: PUSH
62306: LD_VAR 0 2
62310: EQUAL
62311: IFFALSE 62338
// result := Insert ( result , 1 , un ) else
62313: LD_ADDR_VAR 0 3
62317: PUSH
62318: LD_VAR 0 3
62322: PPUSH
62323: LD_INT 1
62325: PPUSH
62326: LD_VAR 0 4
62330: PPUSH
62331: CALL_OW 2
62335: ST_TO_ADDR
62336: GO 62367
// result := Replace ( result , result + 1 , un ) ;
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: LD_VAR 0 3
62347: PPUSH
62348: LD_VAR 0 3
62352: PUSH
62353: LD_INT 1
62355: PLUS
62356: PPUSH
62357: LD_VAR 0 4
62361: PPUSH
62362: CALL_OW 1
62366: ST_TO_ADDR
62367: GO 62293
62369: POP
62370: POP
// end ;
62371: LD_VAR 0 3
62375: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62376: LD_INT 0
62378: PPUSH
62379: PPUSH
62380: PPUSH
62381: PPUSH
62382: PPUSH
62383: PPUSH
62384: PPUSH
// result := [ ] ;
62385: LD_ADDR_VAR 0 4
62389: PUSH
62390: EMPTY
62391: ST_TO_ADDR
// if x - r < 0 then
62392: LD_VAR 0 1
62396: PUSH
62397: LD_VAR 0 3
62401: MINUS
62402: PUSH
62403: LD_INT 0
62405: LESS
62406: IFFALSE 62418
// min_x := 0 else
62408: LD_ADDR_VAR 0 8
62412: PUSH
62413: LD_INT 0
62415: ST_TO_ADDR
62416: GO 62434
// min_x := x - r ;
62418: LD_ADDR_VAR 0 8
62422: PUSH
62423: LD_VAR 0 1
62427: PUSH
62428: LD_VAR 0 3
62432: MINUS
62433: ST_TO_ADDR
// if y - r < 0 then
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 3
62443: MINUS
62444: PUSH
62445: LD_INT 0
62447: LESS
62448: IFFALSE 62460
// min_y := 0 else
62450: LD_ADDR_VAR 0 7
62454: PUSH
62455: LD_INT 0
62457: ST_TO_ADDR
62458: GO 62476
// min_y := y - r ;
62460: LD_ADDR_VAR 0 7
62464: PUSH
62465: LD_VAR 0 2
62469: PUSH
62470: LD_VAR 0 3
62474: MINUS
62475: ST_TO_ADDR
// max_x := x + r ;
62476: LD_ADDR_VAR 0 9
62480: PUSH
62481: LD_VAR 0 1
62485: PUSH
62486: LD_VAR 0 3
62490: PLUS
62491: ST_TO_ADDR
// max_y := y + r ;
62492: LD_ADDR_VAR 0 10
62496: PUSH
62497: LD_VAR 0 2
62501: PUSH
62502: LD_VAR 0 3
62506: PLUS
62507: ST_TO_ADDR
// for _x = min_x to max_x do
62508: LD_ADDR_VAR 0 5
62512: PUSH
62513: DOUBLE
62514: LD_VAR 0 8
62518: DEC
62519: ST_TO_ADDR
62520: LD_VAR 0 9
62524: PUSH
62525: FOR_TO
62526: IFFALSE 62627
// for _y = min_y to max_y do
62528: LD_ADDR_VAR 0 6
62532: PUSH
62533: DOUBLE
62534: LD_VAR 0 7
62538: DEC
62539: ST_TO_ADDR
62540: LD_VAR 0 10
62544: PUSH
62545: FOR_TO
62546: IFFALSE 62623
// begin if not ValidHex ( _x , _y ) then
62548: LD_VAR 0 5
62552: PPUSH
62553: LD_VAR 0 6
62557: PPUSH
62558: CALL_OW 488
62562: NOT
62563: IFFALSE 62567
// continue ;
62565: GO 62545
// if GetResourceTypeXY ( _x , _y ) then
62567: LD_VAR 0 5
62571: PPUSH
62572: LD_VAR 0 6
62576: PPUSH
62577: CALL_OW 283
62581: IFFALSE 62621
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62583: LD_ADDR_VAR 0 4
62587: PUSH
62588: LD_VAR 0 4
62592: PPUSH
62593: LD_VAR 0 4
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: PPUSH
62602: LD_VAR 0 5
62606: PUSH
62607: LD_VAR 0 6
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PPUSH
62616: CALL_OW 1
62620: ST_TO_ADDR
// end ;
62621: GO 62545
62623: POP
62624: POP
62625: GO 62525
62627: POP
62628: POP
// end ;
62629: LD_VAR 0 4
62633: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62634: LD_INT 0
62636: PPUSH
62637: PPUSH
62638: PPUSH
62639: PPUSH
62640: PPUSH
62641: PPUSH
62642: PPUSH
62643: PPUSH
// if not units then
62644: LD_VAR 0 1
62648: NOT
62649: IFFALSE 62653
// exit ;
62651: GO 63185
// result := UnitFilter ( units , [ f_ok ] ) ;
62653: LD_ADDR_VAR 0 3
62657: PUSH
62658: LD_VAR 0 1
62662: PPUSH
62663: LD_INT 50
62665: PUSH
62666: EMPTY
62667: LIST
62668: PPUSH
62669: CALL_OW 72
62673: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62674: LD_ADDR_VAR 0 8
62678: PUSH
62679: LD_VAR 0 1
62683: PUSH
62684: LD_INT 1
62686: ARRAY
62687: PPUSH
62688: CALL_OW 255
62692: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62693: LD_ADDR_VAR 0 10
62697: PUSH
62698: LD_INT 29
62700: PUSH
62701: LD_INT 91
62703: PUSH
62704: LD_INT 49
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// if not result then
62712: LD_VAR 0 3
62716: NOT
62717: IFFALSE 62721
// exit ;
62719: GO 63185
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62721: LD_ADDR_VAR 0 5
62725: PUSH
62726: LD_INT 81
62728: PUSH
62729: LD_VAR 0 8
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PPUSH
62738: CALL_OW 69
62742: ST_TO_ADDR
// for i in result do
62743: LD_ADDR_VAR 0 4
62747: PUSH
62748: LD_VAR 0 3
62752: PUSH
62753: FOR_IN
62754: IFFALSE 63183
// begin tag := GetTag ( i ) + 1 ;
62756: LD_ADDR_VAR 0 9
62760: PUSH
62761: LD_VAR 0 4
62765: PPUSH
62766: CALL_OW 110
62770: PUSH
62771: LD_INT 1
62773: PLUS
62774: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62775: LD_ADDR_VAR 0 7
62779: PUSH
62780: LD_VAR 0 4
62784: PPUSH
62785: CALL_OW 250
62789: PPUSH
62790: LD_VAR 0 4
62794: PPUSH
62795: CALL_OW 251
62799: PPUSH
62800: LD_INT 4
62802: PPUSH
62803: CALL 62376 0 3
62807: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL_OW 247
62817: PUSH
62818: LD_INT 2
62820: EQUAL
62821: IFFALSE 62833
62823: PUSH
62824: LD_VAR 0 7
62828: PUSH
62829: LD_INT 2
62831: GREATER
62832: AND
62833: IFFALSE 62853
62835: PUSH
62836: LD_VAR 0 4
62840: PPUSH
62841: CALL_OW 264
62845: PUSH
62846: LD_VAR 0 10
62850: IN
62851: NOT
62852: AND
62853: IFFALSE 62892
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62855: LD_VAR 0 4
62859: PPUSH
62860: LD_VAR 0 7
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PUSH
62869: LD_INT 1
62871: ARRAY
62872: PPUSH
62873: LD_VAR 0 7
62877: PUSH
62878: LD_INT 1
62880: ARRAY
62881: PUSH
62882: LD_INT 2
62884: ARRAY
62885: PPUSH
62886: CALL_OW 116
62890: GO 63181
// if path > tag then
62892: LD_VAR 0 2
62896: PUSH
62897: LD_VAR 0 9
62901: GREATER
62902: IFFALSE 63110
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62904: LD_ADDR_VAR 0 6
62908: PUSH
62909: LD_VAR 0 5
62913: PPUSH
62914: LD_INT 91
62916: PUSH
62917: LD_VAR 0 4
62921: PUSH
62922: LD_INT 8
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: PPUSH
62930: CALL_OW 72
62934: ST_TO_ADDR
// if nearEnemy then
62935: LD_VAR 0 6
62939: IFFALSE 63008
// begin if GetWeapon ( i ) = ru_time_lapser then
62941: LD_VAR 0 4
62945: PPUSH
62946: CALL_OW 264
62950: PUSH
62951: LD_INT 49
62953: EQUAL
62954: IFFALSE 62982
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62956: LD_VAR 0 4
62960: PPUSH
62961: LD_VAR 0 6
62965: PPUSH
62966: LD_VAR 0 4
62970: PPUSH
62971: CALL_OW 74
62975: PPUSH
62976: CALL_OW 112
62980: GO 63006
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62982: LD_VAR 0 4
62986: PPUSH
62987: LD_VAR 0 6
62991: PPUSH
62992: LD_VAR 0 4
62996: PPUSH
62997: CALL_OW 74
63001: PPUSH
63002: CALL 64266 0 2
// end else
63006: GO 63108
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63008: LD_VAR 0 4
63012: PPUSH
63013: LD_VAR 0 2
63017: PUSH
63018: LD_VAR 0 9
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_VAR 0 9
63037: ARRAY
63038: PUSH
63039: LD_INT 2
63041: ARRAY
63042: PPUSH
63043: CALL_OW 297
63047: PUSH
63048: LD_INT 6
63050: GREATER
63051: IFFALSE 63094
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63053: LD_VAR 0 4
63057: PPUSH
63058: LD_VAR 0 2
63062: PUSH
63063: LD_VAR 0 9
63067: ARRAY
63068: PUSH
63069: LD_INT 1
63071: ARRAY
63072: PPUSH
63073: LD_VAR 0 2
63077: PUSH
63078: LD_VAR 0 9
63082: ARRAY
63083: PUSH
63084: LD_INT 2
63086: ARRAY
63087: PPUSH
63088: CALL_OW 114
63092: GO 63108
// SetTag ( i , tag ) ;
63094: LD_VAR 0 4
63098: PPUSH
63099: LD_VAR 0 9
63103: PPUSH
63104: CALL_OW 109
// end else
63108: GO 63181
// if enemy then
63110: LD_VAR 0 5
63114: IFFALSE 63181
// begin if GetWeapon ( i ) = ru_time_lapser then
63116: LD_VAR 0 4
63120: PPUSH
63121: CALL_OW 264
63125: PUSH
63126: LD_INT 49
63128: EQUAL
63129: IFFALSE 63157
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63131: LD_VAR 0 4
63135: PPUSH
63136: LD_VAR 0 5
63140: PPUSH
63141: LD_VAR 0 4
63145: PPUSH
63146: CALL_OW 74
63150: PPUSH
63151: CALL_OW 112
63155: GO 63181
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63157: LD_VAR 0 4
63161: PPUSH
63162: LD_VAR 0 5
63166: PPUSH
63167: LD_VAR 0 4
63171: PPUSH
63172: CALL_OW 74
63176: PPUSH
63177: CALL 64266 0 2
// end ; end ;
63181: GO 62753
63183: POP
63184: POP
// end ;
63185: LD_VAR 0 3
63189: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63190: LD_INT 0
63192: PPUSH
63193: PPUSH
63194: PPUSH
// if not unit or IsInUnit ( unit ) then
63195: LD_VAR 0 1
63199: NOT
63200: IFTRUE 63213
63202: PUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 310
63212: OR
63213: IFFALSE 63217
// exit ;
63215: GO 63308
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63217: LD_ADDR_VAR 0 4
63221: PUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: CALL_OW 250
63231: PPUSH
63232: LD_VAR 0 2
63236: PPUSH
63237: LD_INT 1
63239: PPUSH
63240: CALL_OW 272
63244: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63245: LD_ADDR_VAR 0 5
63249: PUSH
63250: LD_VAR 0 1
63254: PPUSH
63255: CALL_OW 251
63259: PPUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_INT 1
63267: PPUSH
63268: CALL_OW 273
63272: ST_TO_ADDR
// if ValidHex ( x , y ) then
63273: LD_VAR 0 4
63277: PPUSH
63278: LD_VAR 0 5
63282: PPUSH
63283: CALL_OW 488
63287: IFFALSE 63308
// ComTurnXY ( unit , x , y ) ;
63289: LD_VAR 0 1
63293: PPUSH
63294: LD_VAR 0 4
63298: PPUSH
63299: LD_VAR 0 5
63303: PPUSH
63304: CALL_OW 118
// end ;
63308: LD_VAR 0 3
63312: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63313: LD_INT 0
63315: PPUSH
63316: PPUSH
// result := false ;
63317: LD_ADDR_VAR 0 3
63321: PUSH
63322: LD_INT 0
63324: ST_TO_ADDR
// if not units then
63325: LD_VAR 0 2
63329: NOT
63330: IFFALSE 63334
// exit ;
63332: GO 63379
// for i in units do
63334: LD_ADDR_VAR 0 4
63338: PUSH
63339: LD_VAR 0 2
63343: PUSH
63344: FOR_IN
63345: IFFALSE 63377
// if See ( side , i ) then
63347: LD_VAR 0 1
63351: PPUSH
63352: LD_VAR 0 4
63356: PPUSH
63357: CALL_OW 292
63361: IFFALSE 63375
// begin result := true ;
63363: LD_ADDR_VAR 0 3
63367: PUSH
63368: LD_INT 1
63370: ST_TO_ADDR
// exit ;
63371: POP
63372: POP
63373: GO 63379
// end ;
63375: GO 63344
63377: POP
63378: POP
// end ;
63379: LD_VAR 0 3
63383: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63384: LD_INT 0
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
// if not unit or not points then
63390: LD_VAR 0 1
63394: NOT
63395: IFTRUE 63404
63397: PUSH
63398: LD_VAR 0 2
63402: NOT
63403: OR
63404: IFFALSE 63408
// exit ;
63406: GO 63498
// dist := 99999 ;
63408: LD_ADDR_VAR 0 5
63412: PUSH
63413: LD_INT 99999
63415: ST_TO_ADDR
// for i in points do
63416: LD_ADDR_VAR 0 4
63420: PUSH
63421: LD_VAR 0 2
63425: PUSH
63426: FOR_IN
63427: IFFALSE 63496
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63429: LD_ADDR_VAR 0 6
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: LD_VAR 0 4
63443: PUSH
63444: LD_INT 1
63446: ARRAY
63447: PPUSH
63448: LD_VAR 0 4
63452: PUSH
63453: LD_INT 2
63455: ARRAY
63456: PPUSH
63457: CALL_OW 297
63461: ST_TO_ADDR
// if tmpDist < dist then
63462: LD_VAR 0 6
63466: PUSH
63467: LD_VAR 0 5
63471: LESS
63472: IFFALSE 63494
// begin result := i ;
63474: LD_ADDR_VAR 0 3
63478: PUSH
63479: LD_VAR 0 4
63483: ST_TO_ADDR
// dist := tmpDist ;
63484: LD_ADDR_VAR 0 5
63488: PUSH
63489: LD_VAR 0 6
63493: ST_TO_ADDR
// end ; end ;
63494: GO 63426
63496: POP
63497: POP
// end ;
63498: LD_VAR 0 3
63502: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63503: LD_INT 0
63505: PPUSH
// uc_side := side ;
63506: LD_ADDR_OWVAR 20
63510: PUSH
63511: LD_VAR 0 1
63515: ST_TO_ADDR
// uc_nation := 3 ;
63516: LD_ADDR_OWVAR 21
63520: PUSH
63521: LD_INT 3
63523: ST_TO_ADDR
// vc_chassis := 25 ;
63524: LD_ADDR_OWVAR 37
63528: PUSH
63529: LD_INT 25
63531: ST_TO_ADDR
// vc_engine := engine_siberite ;
63532: LD_ADDR_OWVAR 39
63536: PUSH
63537: LD_INT 3
63539: ST_TO_ADDR
// vc_control := control_computer ;
63540: LD_ADDR_OWVAR 38
63544: PUSH
63545: LD_INT 3
63547: ST_TO_ADDR
// vc_weapon := 59 ;
63548: LD_ADDR_OWVAR 40
63552: PUSH
63553: LD_INT 59
63555: ST_TO_ADDR
// result := CreateVehicle ;
63556: LD_ADDR_VAR 0 5
63560: PUSH
63561: CALL_OW 45
63565: ST_TO_ADDR
// SetDir ( result , d ) ;
63566: LD_VAR 0 5
63570: PPUSH
63571: LD_VAR 0 4
63575: PPUSH
63576: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63580: LD_VAR 0 5
63584: PPUSH
63585: LD_VAR 0 2
63589: PPUSH
63590: LD_VAR 0 3
63594: PPUSH
63595: LD_INT 0
63597: PPUSH
63598: CALL_OW 48
// end ;
63602: LD_VAR 0 5
63606: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63607: LD_INT 0
63609: PPUSH
63610: PPUSH
63611: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63612: LD_ADDR_VAR 0 2
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63635: LD_VAR 0 1
63639: NOT
63640: IFTRUE 63673
63642: PUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL_OW 264
63652: PUSH
63653: LD_INT 12
63655: PUSH
63656: LD_INT 51
63658: PUSH
63659: LD_INT 32
63661: PUSH
63662: LD_INT 89
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: IN
63671: NOT
63672: OR
63673: IFFALSE 63677
// exit ;
63675: GO 63775
// for i := 1 to 3 do
63677: LD_ADDR_VAR 0 3
63681: PUSH
63682: DOUBLE
63683: LD_INT 1
63685: DEC
63686: ST_TO_ADDR
63687: LD_INT 3
63689: PUSH
63690: FOR_TO
63691: IFFALSE 63773
// begin tmp := GetCargo ( cargo , i ) ;
63693: LD_ADDR_VAR 0 4
63697: PUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: LD_VAR 0 3
63707: PPUSH
63708: CALL_OW 289
63712: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63713: LD_ADDR_VAR 0 2
63717: PUSH
63718: LD_VAR 0 2
63722: PPUSH
63723: LD_VAR 0 3
63727: PPUSH
63728: LD_VAR 0 4
63732: PPUSH
63733: CALL_OW 1
63737: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63738: LD_ADDR_VAR 0 2
63742: PUSH
63743: LD_VAR 0 2
63747: PPUSH
63748: LD_INT 4
63750: PPUSH
63751: LD_VAR 0 2
63755: PUSH
63756: LD_INT 4
63758: ARRAY
63759: PUSH
63760: LD_VAR 0 4
63764: PLUS
63765: PPUSH
63766: CALL_OW 1
63770: ST_TO_ADDR
// end ;
63771: GO 63690
63773: POP
63774: POP
// end ;
63775: LD_VAR 0 2
63779: RET
// export function Length ( array ) ; begin
63780: LD_INT 0
63782: PPUSH
// result := array + 0 ;
63783: LD_ADDR_VAR 0 2
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: LD_INT 0
63795: PLUS
63796: ST_TO_ADDR
// end ;
63797: LD_VAR 0 2
63801: RET
// export function PrepareArray ( array ) ; begin
63802: LD_INT 0
63804: PPUSH
// result := array diff 0 ;
63805: LD_ADDR_VAR 0 2
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_INT 0
63817: DIFF
63818: ST_TO_ADDR
// if not result [ 1 ] then
63819: LD_VAR 0 2
63823: PUSH
63824: LD_INT 1
63826: ARRAY
63827: NOT
63828: IFFALSE 63848
// result := Delete ( result , 1 ) ;
63830: LD_ADDR_VAR 0 2
63834: PUSH
63835: LD_VAR 0 2
63839: PPUSH
63840: LD_INT 1
63842: PPUSH
63843: CALL_OW 3
63847: ST_TO_ADDR
// end ;
63848: LD_VAR 0 2
63852: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63853: LD_INT 0
63855: PPUSH
63856: PPUSH
63857: PPUSH
63858: PPUSH
// sibRocketRange := 25 ;
63859: LD_ADDR_VAR 0 6
63863: PUSH
63864: LD_INT 25
63866: ST_TO_ADDR
// result := false ;
63867: LD_ADDR_VAR 0 4
63871: PUSH
63872: LD_INT 0
63874: ST_TO_ADDR
// for i := 0 to 5 do
63875: LD_ADDR_VAR 0 5
63879: PUSH
63880: DOUBLE
63881: LD_INT 0
63883: DEC
63884: ST_TO_ADDR
63885: LD_INT 5
63887: PUSH
63888: FOR_TO
63889: IFFALSE 63956
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63891: LD_VAR 0 1
63895: PPUSH
63896: LD_VAR 0 5
63900: PPUSH
63901: LD_VAR 0 6
63905: PPUSH
63906: CALL_OW 272
63910: PPUSH
63911: LD_VAR 0 2
63915: PPUSH
63916: LD_VAR 0 5
63920: PPUSH
63921: LD_VAR 0 6
63925: PPUSH
63926: CALL_OW 273
63930: PPUSH
63931: LD_VAR 0 3
63935: PPUSH
63936: CALL_OW 309
63940: IFFALSE 63954
// begin result := true ;
63942: LD_ADDR_VAR 0 4
63946: PUSH
63947: LD_INT 1
63949: ST_TO_ADDR
// exit ;
63950: POP
63951: POP
63952: GO 63958
// end ;
63954: GO 63888
63956: POP
63957: POP
// end ;
63958: LD_VAR 0 4
63962: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63963: LD_INT 0
63965: PPUSH
63966: PPUSH
63967: PPUSH
// if btype = b_depot then
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 0
63975: EQUAL
63976: IFFALSE 63988
// begin result := true ;
63978: LD_ADDR_VAR 0 3
63982: PUSH
63983: LD_INT 1
63985: ST_TO_ADDR
// exit ;
63986: GO 64108
// end ; pom := GetBase ( depot ) ;
63988: LD_ADDR_VAR 0 4
63992: PUSH
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 274
64002: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64003: LD_ADDR_VAR 0 5
64007: PUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 248
64022: PPUSH
64023: CALL_OW 450
64027: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64028: LD_ADDR_VAR 0 3
64032: PUSH
64033: LD_VAR 0 4
64037: PPUSH
64038: LD_INT 1
64040: PPUSH
64041: CALL_OW 275
64045: PUSH
64046: LD_VAR 0 5
64050: PUSH
64051: LD_INT 1
64053: ARRAY
64054: GREATEREQUAL
64055: IFFALSE 64081
64057: PUSH
64058: LD_VAR 0 4
64062: PPUSH
64063: LD_INT 2
64065: PPUSH
64066: CALL_OW 275
64070: PUSH
64071: LD_VAR 0 5
64075: PUSH
64076: LD_INT 2
64078: ARRAY
64079: GREATEREQUAL
64080: AND
64081: IFFALSE 64107
64083: PUSH
64084: LD_VAR 0 4
64088: PPUSH
64089: LD_INT 3
64091: PPUSH
64092: CALL_OW 275
64096: PUSH
64097: LD_VAR 0 5
64101: PUSH
64102: LD_INT 3
64104: ARRAY
64105: GREATEREQUAL
64106: AND
64107: ST_TO_ADDR
// end ;
64108: LD_VAR 0 3
64112: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64113: LD_INT 0
64115: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64116: LD_VAR 0 1
64120: PPUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_INT 0
64128: PPUSH
64129: LD_INT 0
64131: PPUSH
64132: LD_INT 1
64134: PPUSH
64135: LD_INT 0
64137: PPUSH
64138: CALL_OW 587
// end ;
64142: LD_VAR 0 3
64146: RET
// export function CenterOnNow ( unit ) ; begin
64147: LD_INT 0
64149: PPUSH
// result := IsInUnit ( unit ) ;
64150: LD_ADDR_VAR 0 2
64154: PUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: CALL_OW 310
64164: ST_TO_ADDR
// if not result then
64165: LD_VAR 0 2
64169: NOT
64170: IFFALSE 64182
// result := unit ;
64172: LD_ADDR_VAR 0 2
64176: PUSH
64177: LD_VAR 0 1
64181: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64182: LD_VAR 0 1
64186: PPUSH
64187: CALL_OW 87
// end ;
64191: LD_VAR 0 2
64195: RET
// export function ComMoveHex ( unit , hex ) ; begin
64196: LD_INT 0
64198: PPUSH
// if not hex then
64199: LD_VAR 0 2
64203: NOT
64204: IFFALSE 64208
// exit ;
64206: GO 64261
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64208: LD_VAR 0 2
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PPUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 2
64224: ARRAY
64225: PPUSH
64226: CALL_OW 428
64230: IFFALSE 64234
// exit ;
64232: GO 64261
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_VAR 0 2
64243: PUSH
64244: LD_INT 1
64246: ARRAY
64247: PPUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_INT 2
64255: ARRAY
64256: PPUSH
64257: CALL_OW 111
// end ;
64261: LD_VAR 0 3
64265: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64266: LD_INT 0
64268: PPUSH
64269: PPUSH
64270: PPUSH
// if not unit or not enemy then
64271: LD_VAR 0 1
64275: NOT
64276: IFTRUE 64285
64278: PUSH
64279: LD_VAR 0 2
64283: NOT
64284: OR
64285: IFFALSE 64289
// exit ;
64287: GO 64415
// x := GetX ( enemy ) ;
64289: LD_ADDR_VAR 0 4
64293: PUSH
64294: LD_VAR 0 2
64298: PPUSH
64299: CALL_OW 250
64303: ST_TO_ADDR
// y := GetY ( enemy ) ;
64304: LD_ADDR_VAR 0 5
64308: PUSH
64309: LD_VAR 0 2
64313: PPUSH
64314: CALL_OW 251
64318: ST_TO_ADDR
// if ValidHex ( x , y ) then
64319: LD_VAR 0 4
64323: PPUSH
64324: LD_VAR 0 5
64328: PPUSH
64329: CALL_OW 488
64333: IFFALSE 64415
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64335: LD_VAR 0 2
64339: PPUSH
64340: CALL_OW 247
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: LD_INT 2
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: IN
64355: IFTRUE 64378
64357: PUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: CALL_OW 255
64367: PPUSH
64368: LD_VAR 0 2
64372: PPUSH
64373: CALL_OW 292
64377: OR
64378: IFFALSE 64396
// ComAttackUnit ( unit , enemy ) else
64380: LD_VAR 0 1
64384: PPUSH
64385: LD_VAR 0 2
64389: PPUSH
64390: CALL_OW 115
64394: GO 64415
// ComAgressiveMove ( unit , x , y ) ;
64396: LD_VAR 0 1
64400: PPUSH
64401: LD_VAR 0 4
64405: PPUSH
64406: LD_VAR 0 5
64410: PPUSH
64411: CALL_OW 114
// end ;
64415: LD_VAR 0 3
64419: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64420: LD_INT 0
64422: PPUSH
64423: PPUSH
64424: PPUSH
// list := AreaToList ( area , 0 ) ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: LD_INT 0
64437: PPUSH
64438: CALL_OW 517
64442: ST_TO_ADDR
// if not list then
64443: LD_VAR 0 5
64447: NOT
64448: IFFALSE 64452
// exit ;
64450: GO 64582
// if all then
64452: LD_VAR 0 2
64456: IFFALSE 64544
// begin for i := 1 to list [ 1 ] do
64458: LD_ADDR_VAR 0 4
64462: PUSH
64463: DOUBLE
64464: LD_INT 1
64466: DEC
64467: ST_TO_ADDR
64468: LD_VAR 0 5
64472: PUSH
64473: LD_INT 1
64475: ARRAY
64476: PUSH
64477: FOR_TO
64478: IFFALSE 64540
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64480: LD_ADDR_VAR 0 3
64484: PUSH
64485: LD_VAR 0 3
64489: PPUSH
64490: LD_VAR 0 3
64494: PUSH
64495: LD_INT 1
64497: PLUS
64498: PPUSH
64499: LD_VAR 0 5
64503: PUSH
64504: LD_INT 1
64506: ARRAY
64507: PUSH
64508: LD_VAR 0 4
64512: ARRAY
64513: PUSH
64514: LD_VAR 0 5
64518: PUSH
64519: LD_INT 2
64521: ARRAY
64522: PUSH
64523: LD_VAR 0 4
64527: ARRAY
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PPUSH
64533: CALL_OW 1
64537: ST_TO_ADDR
64538: GO 64477
64540: POP
64541: POP
// exit ;
64542: GO 64582
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64544: LD_ADDR_VAR 0 3
64548: PUSH
64549: LD_VAR 0 5
64553: PUSH
64554: LD_INT 1
64556: ARRAY
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PUSH
64562: LD_VAR 0 5
64566: PUSH
64567: LD_INT 2
64569: ARRAY
64570: PUSH
64571: LD_INT 1
64573: ARRAY
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: ST_TO_ADDR
// end ;
64582: LD_VAR 0 3
64586: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64587: LD_INT 0
64589: PPUSH
64590: PPUSH
// list := AreaToList ( area , 0 ) ;
64591: LD_ADDR_VAR 0 4
64595: PUSH
64596: LD_VAR 0 1
64600: PPUSH
64601: LD_INT 0
64603: PPUSH
64604: CALL_OW 517
64608: ST_TO_ADDR
// if not list then
64609: LD_VAR 0 4
64613: NOT
64614: IFFALSE 64618
// exit ;
64616: GO 64659
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: LD_VAR 0 4
64627: PUSH
64628: LD_INT 1
64630: ARRAY
64631: PUSH
64632: LD_INT 1
64634: ARRAY
64635: PUSH
64636: LD_VAR 0 4
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PUSH
64645: LD_INT 1
64647: ARRAY
64648: PUSH
64649: LD_VAR 0 2
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 3
64663: RET
// export function First ( array ) ; begin
64664: LD_INT 0
64666: PPUSH
// if not array then
64667: LD_VAR 0 1
64671: NOT
64672: IFFALSE 64676
// exit ;
64674: GO 64690
// result := array [ 1 ] ;
64676: LD_ADDR_VAR 0 2
64680: PUSH
64681: LD_VAR 0 1
64685: PUSH
64686: LD_INT 1
64688: ARRAY
64689: ST_TO_ADDR
// end ;
64690: LD_VAR 0 2
64694: RET
// export function Last ( array ) ; begin
64695: LD_INT 0
64697: PPUSH
// if not array then
64698: LD_VAR 0 1
64702: NOT
64703: IFFALSE 64707
// exit ;
64705: GO 64723
// result := array [ array ] ;
64707: LD_ADDR_VAR 0 2
64711: PUSH
64712: LD_VAR 0 1
64716: PUSH
64717: LD_VAR 0 1
64721: ARRAY
64722: ST_TO_ADDR
// end ;
64723: LD_VAR 0 2
64727: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64728: LD_INT 0
64730: PPUSH
64731: PPUSH
// result := [ ] ;
64732: LD_ADDR_VAR 0 5
64736: PUSH
64737: EMPTY
64738: ST_TO_ADDR
// if not array then
64739: LD_VAR 0 1
64743: NOT
64744: IFFALSE 64748
// exit ;
64746: GO 64860
// for i := 1 to array do
64748: LD_ADDR_VAR 0 6
64752: PUSH
64753: DOUBLE
64754: LD_INT 1
64756: DEC
64757: ST_TO_ADDR
64758: LD_VAR 0 1
64762: PUSH
64763: FOR_TO
64764: IFFALSE 64858
// if array [ i ] [ index ] = value then
64766: LD_VAR 0 1
64770: PUSH
64771: LD_VAR 0 6
64775: ARRAY
64776: PUSH
64777: LD_VAR 0 2
64781: ARRAY
64782: PUSH
64783: LD_VAR 0 3
64787: EQUAL
64788: IFFALSE 64856
// begin if indexColumn then
64790: LD_VAR 0 4
64794: IFFALSE 64830
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64796: LD_ADDR_VAR 0 5
64800: PUSH
64801: LD_VAR 0 5
64805: PPUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_VAR 0 6
64815: ARRAY
64816: PUSH
64817: LD_VAR 0 4
64821: ARRAY
64822: PPUSH
64823: CALL 59868 0 2
64827: ST_TO_ADDR
64828: GO 64856
// result := Join ( result , array [ i ] ) ;
64830: LD_ADDR_VAR 0 5
64834: PUSH
64835: LD_VAR 0 5
64839: PPUSH
64840: LD_VAR 0 1
64844: PUSH
64845: LD_VAR 0 6
64849: ARRAY
64850: PPUSH
64851: CALL 59868 0 2
64855: ST_TO_ADDR
// end ;
64856: GO 64763
64858: POP
64859: POP
// end ;
64860: LD_VAR 0 5
64864: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64865: LD_INT 0
64867: PPUSH
// if not vehicles or not parkingPoint then
64868: LD_VAR 0 1
64872: NOT
64873: IFTRUE 64882
64875: PUSH
64876: LD_VAR 0 2
64880: NOT
64881: OR
64882: IFFALSE 64886
// exit ;
64884: GO 64984
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64886: LD_ADDR_VAR 0 1
64890: PUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: LD_INT 50
64898: PUSH
64899: EMPTY
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: LD_INT 92
64907: PUSH
64908: LD_VAR 0 2
64912: PUSH
64913: LD_INT 1
64915: ARRAY
64916: PUSH
64917: LD_VAR 0 2
64921: PUSH
64922: LD_INT 2
64924: ARRAY
64925: PUSH
64926: LD_INT 8
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PPUSH
64943: CALL_OW 72
64947: ST_TO_ADDR
// if not vehicles then
64948: LD_VAR 0 1
64952: NOT
64953: IFFALSE 64957
// exit ;
64955: GO 64984
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64957: LD_VAR 0 1
64961: PPUSH
64962: LD_VAR 0 2
64966: PUSH
64967: LD_INT 1
64969: ARRAY
64970: PPUSH
64971: LD_VAR 0 2
64975: PUSH
64976: LD_INT 2
64978: ARRAY
64979: PPUSH
64980: CALL_OW 111
// end ;
64984: LD_VAR 0 3
64988: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64989: LD_INT 0
64991: PPUSH
64992: PPUSH
64993: PPUSH
// if not side or not area then
64994: LD_VAR 0 1
64998: NOT
64999: IFTRUE 65008
65001: PUSH
65002: LD_VAR 0 2
65006: NOT
65007: OR
65008: IFFALSE 65012
// exit ;
65010: GO 65131
// tmp := AreaToList ( area , 0 ) ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_INT 0
65024: PPUSH
65025: CALL_OW 517
65029: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65030: LD_ADDR_VAR 0 4
65034: PUSH
65035: DOUBLE
65036: LD_INT 1
65038: DEC
65039: ST_TO_ADDR
65040: LD_VAR 0 5
65044: PUSH
65045: LD_INT 1
65047: ARRAY
65048: PUSH
65049: FOR_TO
65050: IFFALSE 65129
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65052: LD_VAR 0 5
65056: PUSH
65057: LD_INT 1
65059: ARRAY
65060: PUSH
65061: LD_VAR 0 4
65065: ARRAY
65066: PPUSH
65067: LD_VAR 0 5
65071: PUSH
65072: LD_INT 2
65074: ARRAY
65075: PUSH
65076: LD_VAR 0 4
65080: ARRAY
65081: PPUSH
65082: CALL_OW 351
65086: IFFALSE 65127
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65088: LD_VAR 0 5
65092: PUSH
65093: LD_INT 1
65095: ARRAY
65096: PUSH
65097: LD_VAR 0 4
65101: ARRAY
65102: PPUSH
65103: LD_VAR 0 5
65107: PUSH
65108: LD_INT 2
65110: ARRAY
65111: PUSH
65112: LD_VAR 0 4
65116: ARRAY
65117: PPUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: CALL_OW 244
// end ;
65127: GO 65049
65129: POP
65130: POP
// end ;
65131: LD_VAR 0 3
65135: RET
