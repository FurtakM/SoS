// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// every 0 0$1 trigger GetLives ( JMM ) < 500 and Test1 ( JMM ) do
   5: LD_INT 84
   7: PPUSH
   8: CALL_OW 256
  12: PUSH
  13: LD_INT 500
  15: LESS
  16: IFFALSE 27
  18: PUSH
  19: LD_INT 84
  21: PPUSH
  22: CALL 34 0 1
  26: AND
  27: IFFALSE 33
  29: GO 31
  31: DISABLE
// begin enable ;
  32: ENABLE
// end ;
  33: END
// export function Test1 ( unit ) ; begin
  34: LD_INT 0
  36: PPUSH
// display_strings := Test ;
  37: LD_ADDR_OWVAR 47
  41: PUSH
  42: LD_STRING Test
  44: ST_TO_ADDR
// result := See ( 1 , unit ) ;
  45: LD_ADDR_VAR 0 2
  49: PUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_VAR 0 1
  57: PPUSH
  58: CALL_OW 292
  62: ST_TO_ADDR
// end ; end_of_file
  63: LD_VAR 0 2
  67: RET
// export globalGameSaveCounter ; every 0 0$1 do
  68: GO 70
  70: DISABLE
// begin enable ;
  71: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  72: LD_STRING updateTimer(
  74: PUSH
  75: LD_OWVAR 1
  79: STR
  80: PUSH
  81: LD_STRING );
  83: STR
  84: PPUSH
  85: CALL_OW 559
// end ;
  89: END
// every 0 0$1 do
  90: GO 92
  92: DISABLE
// begin globalGameSaveCounter := 0 ;
  93: LD_ADDR_EXP 1
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 101: LD_STRING setGameSaveCounter(0)
 103: PPUSH
 104: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 108: LD_STRING initStreamRollete();
 110: PPUSH
 111: CALL_OW 559
// InitStreamMode ;
 115: CALL 1460 0 0
// DefineStreamItems ( false ) ;
 119: LD_INT 0
 121: PPUSH
 122: CALL 1924 0 1
// end ;
 126: END
// export function SOS_MapStart ( ) ; begin
 127: LD_INT 0
 129: PPUSH
// if streamModeActive then
 130: LD_EXP 2
 134: IFFALSE 143
// DefineStreamItems ( true ) ;
 136: LD_INT 1
 138: PPUSH
 139: CALL 1924 0 1
// UpdateLuaVariables ( ) ;
 143: CALL 160 0 0
// UpdateFactoryWaypoints ( ) ;
 147: CALL 15046 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 151: CALL 15298 0 0
// end ;
 155: LD_VAR 0 1
 159: RET
// function UpdateLuaVariables ( ) ; begin
 160: LD_INT 0
 162: PPUSH
// if globalGameSaveCounter then
 163: LD_EXP 1
 167: IFFALSE 201
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 169: LD_ADDR_EXP 1
 173: PUSH
 174: LD_EXP 1
 178: PPUSH
 179: CALL 62042 0 1
 183: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 184: LD_STRING setGameSaveCounter(
 186: PUSH
 187: LD_EXP 1
 191: STR
 192: PUSH
 193: LD_STRING )
 195: STR
 196: PPUSH
 197: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 201: LD_STRING setGameDifficulty(
 203: PUSH
 204: LD_OWVAR 67
 208: STR
 209: PUSH
 210: LD_STRING )
 212: STR
 213: PPUSH
 214: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 218: LD_STRING displayDifficulty(
 220: PUSH
 221: LD_OWVAR 67
 225: STR
 226: PUSH
 227: LD_STRING )
 229: STR
 230: PPUSH
 231: CALL_OW 559
// end ;
 235: LD_VAR 0 1
 239: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 240: LD_INT 0
 242: PPUSH
// if p2 = stream_mode then
 243: LD_VAR 0 2
 247: PUSH
 248: LD_INT 100
 250: EQUAL
 251: IFFALSE 1254
// begin if not StreamModeActive then
 253: LD_EXP 2
 257: NOT
 258: IFFALSE 268
// StreamModeActive := true ;
 260: LD_ADDR_EXP 2
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 0 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 0
 275: EQUAL
 276: IFFALSE 282
// InitStreamMode ;
 278: CALL 1460 0 0
// if p3 = 1 then
 282: LD_VAR 0 3
 286: PUSH
 287: LD_INT 1
 289: EQUAL
 290: IFFALSE 300
// sRocket := true ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 1
 299: ST_TO_ADDR
// if p3 = 2 then
 300: LD_VAR 0 3
 304: PUSH
 305: LD_INT 2
 307: EQUAL
 308: IFFALSE 318
// sSpeed := true ;
 310: LD_ADDR_EXP 6
 314: PUSH
 315: LD_INT 1
 317: ST_TO_ADDR
// if p3 = 3 then
 318: LD_VAR 0 3
 322: PUSH
 323: LD_INT 3
 325: EQUAL
 326: IFFALSE 336
// sEngine := true ;
 328: LD_ADDR_EXP 8
 332: PUSH
 333: LD_INT 1
 335: ST_TO_ADDR
// if p3 = 4 then
 336: LD_VAR 0 3
 340: PUSH
 341: LD_INT 4
 343: EQUAL
 344: IFFALSE 354
// sSpec := true ;
 346: LD_ADDR_EXP 5
 350: PUSH
 351: LD_INT 1
 353: ST_TO_ADDR
// if p3 = 5 then
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 5
 361: EQUAL
 362: IFFALSE 372
// sLevel := true ;
 364: LD_ADDR_EXP 9
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// if p3 = 6 then
 372: LD_VAR 0 3
 376: PUSH
 377: LD_INT 6
 379: EQUAL
 380: IFFALSE 390
// sArmoury := true ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// if p3 = 7 then
 390: LD_VAR 0 3
 394: PUSH
 395: LD_INT 7
 397: EQUAL
 398: IFFALSE 408
// sRadar := true ;
 400: LD_ADDR_EXP 11
 404: PUSH
 405: LD_INT 1
 407: ST_TO_ADDR
// if p3 = 8 then
 408: LD_VAR 0 3
 412: PUSH
 413: LD_INT 8
 415: EQUAL
 416: IFFALSE 426
// sBunker := true ;
 418: LD_ADDR_EXP 12
 422: PUSH
 423: LD_INT 1
 425: ST_TO_ADDR
// if p3 = 9 then
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 9
 433: EQUAL
 434: IFFALSE 444
// sHack := true ;
 436: LD_ADDR_EXP 13
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// if p3 = 10 then
 444: LD_VAR 0 3
 448: PUSH
 449: LD_INT 10
 451: EQUAL
 452: IFFALSE 462
// sFire := true ;
 454: LD_ADDR_EXP 14
 458: PUSH
 459: LD_INT 1
 461: ST_TO_ADDR
// if p3 = 11 then
 462: LD_VAR 0 3
 466: PUSH
 467: LD_INT 11
 469: EQUAL
 470: IFFALSE 480
// sRefresh := true ;
 472: LD_ADDR_EXP 15
 476: PUSH
 477: LD_INT 1
 479: ST_TO_ADDR
// if p3 = 12 then
 480: LD_VAR 0 3
 484: PUSH
 485: LD_INT 12
 487: EQUAL
 488: IFFALSE 498
// sExp := true ;
 490: LD_ADDR_EXP 16
 494: PUSH
 495: LD_INT 1
 497: ST_TO_ADDR
// if p3 = 13 then
 498: LD_VAR 0 3
 502: PUSH
 503: LD_INT 13
 505: EQUAL
 506: IFFALSE 516
// sDepot := true ;
 508: LD_ADDR_EXP 17
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// if p3 = 14 then
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 14
 523: EQUAL
 524: IFFALSE 534
// sFlag := true ;
 526: LD_ADDR_EXP 18
 530: PUSH
 531: LD_INT 1
 533: ST_TO_ADDR
// if p3 = 15 then
 534: LD_VAR 0 3
 538: PUSH
 539: LD_INT 15
 541: EQUAL
 542: IFFALSE 552
// sKamikadze := true ;
 544: LD_ADDR_EXP 26
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if p3 = 16 then
 552: LD_VAR 0 3
 556: PUSH
 557: LD_INT 16
 559: EQUAL
 560: IFFALSE 570
// sTroll := true ;
 562: LD_ADDR_EXP 27
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// if p3 = 17 then
 570: LD_VAR 0 3
 574: PUSH
 575: LD_INT 17
 577: EQUAL
 578: IFFALSE 588
// sSlow := true ;
 580: LD_ADDR_EXP 28
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// if p3 = 18 then
 588: LD_VAR 0 3
 592: PUSH
 593: LD_INT 18
 595: EQUAL
 596: IFFALSE 606
// sLack := true ;
 598: LD_ADDR_EXP 29
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// if p3 = 19 then
 606: LD_VAR 0 3
 610: PUSH
 611: LD_INT 19
 613: EQUAL
 614: IFFALSE 624
// sTank := true ;
 616: LD_ADDR_EXP 31
 620: PUSH
 621: LD_INT 1
 623: ST_TO_ADDR
// if p3 = 20 then
 624: LD_VAR 0 3
 628: PUSH
 629: LD_INT 20
 631: EQUAL
 632: IFFALSE 642
// sRemote := true ;
 634: LD_ADDR_EXP 32
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// if p3 = 21 then
 642: LD_VAR 0 3
 646: PUSH
 647: LD_INT 21
 649: EQUAL
 650: IFFALSE 660
// sPowell := true ;
 652: LD_ADDR_EXP 33
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// if p3 = 22 then
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 22
 667: EQUAL
 668: IFFALSE 678
// sTeleport := true ;
 670: LD_ADDR_EXP 36
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// if p3 = 23 then
 678: LD_VAR 0 3
 682: PUSH
 683: LD_INT 23
 685: EQUAL
 686: IFFALSE 696
// sOilTower := true ;
 688: LD_ADDR_EXP 38
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// if p3 = 24 then
 696: LD_VAR 0 3
 700: PUSH
 701: LD_INT 24
 703: EQUAL
 704: IFFALSE 714
// sShovel := true ;
 706: LD_ADDR_EXP 39
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// if p3 = 25 then
 714: LD_VAR 0 3
 718: PUSH
 719: LD_INT 25
 721: EQUAL
 722: IFFALSE 732
// sSheik := true ;
 724: LD_ADDR_EXP 40
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// if p3 = 26 then
 732: LD_VAR 0 3
 736: PUSH
 737: LD_INT 26
 739: EQUAL
 740: IFFALSE 750
// sEarthquake := true ;
 742: LD_ADDR_EXP 42
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// if p3 = 27 then
 750: LD_VAR 0 3
 754: PUSH
 755: LD_INT 27
 757: EQUAL
 758: IFFALSE 768
// sAI := true ;
 760: LD_ADDR_EXP 43
 764: PUSH
 765: LD_INT 1
 767: ST_TO_ADDR
// if p3 = 28 then
 768: LD_VAR 0 3
 772: PUSH
 773: LD_INT 28
 775: EQUAL
 776: IFFALSE 786
// sCargo := true ;
 778: LD_ADDR_EXP 46
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// if p3 = 29 then
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 29
 793: EQUAL
 794: IFFALSE 804
// sDLaser := true ;
 796: LD_ADDR_EXP 47
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// if p3 = 30 then
 804: LD_VAR 0 3
 808: PUSH
 809: LD_INT 30
 811: EQUAL
 812: IFFALSE 822
// sExchange := true ;
 814: LD_ADDR_EXP 48
 818: PUSH
 819: LD_INT 1
 821: ST_TO_ADDR
// if p3 = 31 then
 822: LD_VAR 0 3
 826: PUSH
 827: LD_INT 31
 829: EQUAL
 830: IFFALSE 840
// sFac := true ;
 832: LD_ADDR_EXP 49
 836: PUSH
 837: LD_INT 1
 839: ST_TO_ADDR
// if p3 = 32 then
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 32
 847: EQUAL
 848: IFFALSE 858
// sPower := true ;
 850: LD_ADDR_EXP 50
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// if p3 = 33 then
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 33
 865: EQUAL
 866: IFFALSE 876
// sRandom := true ;
 868: LD_ADDR_EXP 51
 872: PUSH
 873: LD_INT 1
 875: ST_TO_ADDR
// if p3 = 34 then
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 34
 883: EQUAL
 884: IFFALSE 894
// sShield := true ;
 886: LD_ADDR_EXP 52
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// if p3 = 35 then
 894: LD_VAR 0 3
 898: PUSH
 899: LD_INT 35
 901: EQUAL
 902: IFFALSE 912
// sTime := true ;
 904: LD_ADDR_EXP 53
 908: PUSH
 909: LD_INT 1
 911: ST_TO_ADDR
// if p3 = 36 then
 912: LD_VAR 0 3
 916: PUSH
 917: LD_INT 36
 919: EQUAL
 920: IFFALSE 930
// sTools := true ;
 922: LD_ADDR_EXP 54
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// if p3 = 101 then
 930: LD_VAR 0 3
 934: PUSH
 935: LD_INT 101
 937: EQUAL
 938: IFFALSE 948
// sSold := true ;
 940: LD_ADDR_EXP 19
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// if p3 = 102 then
 948: LD_VAR 0 3
 952: PUSH
 953: LD_INT 102
 955: EQUAL
 956: IFFALSE 966
// sDiff := true ;
 958: LD_ADDR_EXP 20
 962: PUSH
 963: LD_INT 1
 965: ST_TO_ADDR
// if p3 = 103 then
 966: LD_VAR 0 3
 970: PUSH
 971: LD_INT 103
 973: EQUAL
 974: IFFALSE 984
// sFog := true ;
 976: LD_ADDR_EXP 23
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// if p3 = 104 then
 984: LD_VAR 0 3
 988: PUSH
 989: LD_INT 104
 991: EQUAL
 992: IFFALSE 1002
// sReset := true ;
 994: LD_ADDR_EXP 24
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// if p3 = 105 then
1002: LD_VAR 0 3
1006: PUSH
1007: LD_INT 105
1009: EQUAL
1010: IFFALSE 1020
// sSun := true ;
1012: LD_ADDR_EXP 25
1016: PUSH
1017: LD_INT 1
1019: ST_TO_ADDR
// if p3 = 106 then
1020: LD_VAR 0 3
1024: PUSH
1025: LD_INT 106
1027: EQUAL
1028: IFFALSE 1038
// sTiger := true ;
1030: LD_ADDR_EXP 21
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// if p3 = 107 then
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 107
1045: EQUAL
1046: IFFALSE 1056
// sBomb := true ;
1048: LD_ADDR_EXP 22
1052: PUSH
1053: LD_INT 1
1055: ST_TO_ADDR
// if p3 = 108 then
1056: LD_VAR 0 3
1060: PUSH
1061: LD_INT 108
1063: EQUAL
1064: IFFALSE 1074
// sWound := true ;
1066: LD_ADDR_EXP 30
1070: PUSH
1071: LD_INT 1
1073: ST_TO_ADDR
// if p3 = 109 then
1074: LD_VAR 0 3
1078: PUSH
1079: LD_INT 109
1081: EQUAL
1082: IFFALSE 1092
// sBetray := true ;
1084: LD_ADDR_EXP 34
1088: PUSH
1089: LD_INT 1
1091: ST_TO_ADDR
// if p3 = 110 then
1092: LD_VAR 0 3
1096: PUSH
1097: LD_INT 110
1099: EQUAL
1100: IFFALSE 1110
// sContamin := true ;
1102: LD_ADDR_EXP 35
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// if p3 = 111 then
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 111
1117: EQUAL
1118: IFFALSE 1128
// sOil := true ;
1120: LD_ADDR_EXP 37
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if p3 = 112 then
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 112
1135: EQUAL
1136: IFFALSE 1146
// sStu := true ;
1138: LD_ADDR_EXP 41
1142: PUSH
1143: LD_INT 1
1145: ST_TO_ADDR
// if p3 = 113 then
1146: LD_VAR 0 3
1150: PUSH
1151: LD_INT 113
1153: EQUAL
1154: IFFALSE 1164
// sBazooka := true ;
1156: LD_ADDR_EXP 44
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// if p3 = 114 then
1164: LD_VAR 0 3
1168: PUSH
1169: LD_INT 114
1171: EQUAL
1172: IFFALSE 1182
// sMortar := true ;
1174: LD_ADDR_EXP 45
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// if p3 = 115 then
1182: LD_VAR 0 3
1186: PUSH
1187: LD_INT 115
1189: EQUAL
1190: IFFALSE 1200
// sRanger := true ;
1192: LD_ADDR_EXP 55
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// if p3 = 116 then
1200: LD_VAR 0 3
1204: PUSH
1205: LD_INT 116
1207: EQUAL
1208: IFFALSE 1218
// sComputer := true ;
1210: LD_ADDR_EXP 56
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if p3 = 117 then
1218: LD_VAR 0 3
1222: PUSH
1223: LD_INT 117
1225: EQUAL
1226: IFFALSE 1236
// s30 := true ;
1228: LD_ADDR_EXP 57
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// if p3 = 118 then
1236: LD_VAR 0 3
1240: PUSH
1241: LD_INT 118
1243: EQUAL
1244: IFFALSE 1254
// s60 := true ;
1246: LD_ADDR_EXP 58
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; if p2 = hack_mode then
1254: LD_VAR 0 2
1258: PUSH
1259: LD_INT 101
1261: EQUAL
1262: IFFALSE 1390
// begin case p3 of 1 :
1264: LD_VAR 0 3
1268: PUSH
1269: LD_INT 1
1271: DOUBLE
1272: EQUAL
1273: IFTRUE 1277
1275: GO 1284
1277: POP
// hHackUnlimitedResources ; 2 :
1278: CALL 13653 0 0
1282: GO 1390
1284: LD_INT 2
1286: DOUBLE
1287: EQUAL
1288: IFTRUE 1292
1290: GO 1299
1292: POP
// hHackSetLevel10 ; 3 :
1293: CALL 13786 0 0
1297: GO 1390
1299: LD_INT 3
1301: DOUBLE
1302: EQUAL
1303: IFTRUE 1307
1305: GO 1314
1307: POP
// hHackSetLevel10YourUnits ; 4 :
1308: CALL 13871 0 0
1312: GO 1390
1314: LD_INT 4
1316: DOUBLE
1317: EQUAL
1318: IFTRUE 1322
1320: GO 1329
1322: POP
// hHackInvincible ; 5 :
1323: CALL 14319 0 0
1327: GO 1390
1329: LD_INT 5
1331: DOUBLE
1332: EQUAL
1333: IFTRUE 1337
1335: GO 1344
1337: POP
// hHackInvisible ; 6 :
1338: CALL 14430 0 0
1342: GO 1390
1344: LD_INT 6
1346: DOUBLE
1347: EQUAL
1348: IFTRUE 1352
1350: GO 1359
1352: POP
// hHackChangeYourSide ; 7 :
1353: CALL 14487 0 0
1357: GO 1390
1359: LD_INT 7
1361: DOUBLE
1362: EQUAL
1363: IFTRUE 1367
1365: GO 1374
1367: POP
// hHackChangeUnitSide ; 8 :
1368: CALL 14529 0 0
1372: GO 1390
1374: LD_INT 8
1376: DOUBLE
1377: EQUAL
1378: IFTRUE 1382
1380: GO 1389
1382: POP
// hHackFog ; end ;
1383: CALL 14630 0 0
1387: GO 1390
1389: POP
// end ; if p2 = game_save_mode then
1390: LD_VAR 0 2
1394: PUSH
1395: LD_INT 102
1397: EQUAL
1398: IFFALSE 1455
// begin if p3 = 1 then
1400: LD_VAR 0 3
1404: PUSH
1405: LD_INT 1
1407: EQUAL
1408: IFFALSE 1420
// globalGameSaveCounter := p4 ;
1410: LD_ADDR_EXP 1
1414: PUSH
1415: LD_VAR 0 4
1419: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1420: LD_VAR 0 3
1424: PUSH
1425: LD_INT 2
1427: EQUAL
1428: IFFALSE 1436
1430: PUSH
1431: LD_EXP 1
1435: AND
1436: IFFALSE 1455
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1438: LD_STRING setGameSaveCounter(
1440: PUSH
1441: LD_EXP 1
1445: STR
1446: PUSH
1447: LD_STRING )
1449: STR
1450: PPUSH
1451: CALL_OW 559
// end ; end ;
1455: LD_VAR 0 7
1459: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1460: LD_INT 0
1462: PPUSH
// streamModeActive := false ;
1463: LD_ADDR_EXP 2
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// normalCounter := 36 ;
1471: LD_ADDR_EXP 3
1475: PUSH
1476: LD_INT 36
1478: ST_TO_ADDR
// hardcoreCounter := 18 ;
1479: LD_ADDR_EXP 4
1483: PUSH
1484: LD_INT 18
1486: ST_TO_ADDR
// sRocket := false ;
1487: LD_ADDR_EXP 7
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// sSpeed := false ;
1495: LD_ADDR_EXP 6
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// sEngine := false ;
1503: LD_ADDR_EXP 8
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// sSpec := false ;
1511: LD_ADDR_EXP 5
1515: PUSH
1516: LD_INT 0
1518: ST_TO_ADDR
// sLevel := false ;
1519: LD_ADDR_EXP 9
1523: PUSH
1524: LD_INT 0
1526: ST_TO_ADDR
// sArmoury := false ;
1527: LD_ADDR_EXP 10
1531: PUSH
1532: LD_INT 0
1534: ST_TO_ADDR
// sRadar := false ;
1535: LD_ADDR_EXP 11
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// sBunker := false ;
1543: LD_ADDR_EXP 12
1547: PUSH
1548: LD_INT 0
1550: ST_TO_ADDR
// sHack := false ;
1551: LD_ADDR_EXP 13
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
// sFire := false ;
1559: LD_ADDR_EXP 14
1563: PUSH
1564: LD_INT 0
1566: ST_TO_ADDR
// sRefresh := false ;
1567: LD_ADDR_EXP 15
1571: PUSH
1572: LD_INT 0
1574: ST_TO_ADDR
// sExp := false ;
1575: LD_ADDR_EXP 16
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// sDepot := false ;
1583: LD_ADDR_EXP 17
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// sFlag := false ;
1591: LD_ADDR_EXP 18
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// sKamikadze := false ;
1599: LD_ADDR_EXP 26
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// sTroll := false ;
1607: LD_ADDR_EXP 27
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// sSlow := false ;
1615: LD_ADDR_EXP 28
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// sLack := false ;
1623: LD_ADDR_EXP 29
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// sTank := false ;
1631: LD_ADDR_EXP 31
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// sRemote := false ;
1639: LD_ADDR_EXP 32
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// sPowell := false ;
1647: LD_ADDR_EXP 33
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// sTeleport := false ;
1655: LD_ADDR_EXP 36
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// sOilTower := false ;
1663: LD_ADDR_EXP 38
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// sShovel := false ;
1671: LD_ADDR_EXP 39
1675: PUSH
1676: LD_INT 0
1678: ST_TO_ADDR
// sSheik := false ;
1679: LD_ADDR_EXP 40
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// sEarthquake := false ;
1687: LD_ADDR_EXP 42
1691: PUSH
1692: LD_INT 0
1694: ST_TO_ADDR
// sAI := false ;
1695: LD_ADDR_EXP 43
1699: PUSH
1700: LD_INT 0
1702: ST_TO_ADDR
// sCargo := false ;
1703: LD_ADDR_EXP 46
1707: PUSH
1708: LD_INT 0
1710: ST_TO_ADDR
// sDLaser := false ;
1711: LD_ADDR_EXP 47
1715: PUSH
1716: LD_INT 0
1718: ST_TO_ADDR
// sExchange := false ;
1719: LD_ADDR_EXP 48
1723: PUSH
1724: LD_INT 0
1726: ST_TO_ADDR
// sFac := false ;
1727: LD_ADDR_EXP 49
1731: PUSH
1732: LD_INT 0
1734: ST_TO_ADDR
// sPower := false ;
1735: LD_ADDR_EXP 50
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// sRandom := false ;
1743: LD_ADDR_EXP 51
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// sShield := false ;
1751: LD_ADDR_EXP 52
1755: PUSH
1756: LD_INT 0
1758: ST_TO_ADDR
// sTime := false ;
1759: LD_ADDR_EXP 53
1763: PUSH
1764: LD_INT 0
1766: ST_TO_ADDR
// sTools := false ;
1767: LD_ADDR_EXP 54
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// sSold := false ;
1775: LD_ADDR_EXP 19
1779: PUSH
1780: LD_INT 0
1782: ST_TO_ADDR
// sDiff := false ;
1783: LD_ADDR_EXP 20
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// sFog := false ;
1791: LD_ADDR_EXP 23
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// sReset := false ;
1799: LD_ADDR_EXP 24
1803: PUSH
1804: LD_INT 0
1806: ST_TO_ADDR
// sSun := false ;
1807: LD_ADDR_EXP 25
1811: PUSH
1812: LD_INT 0
1814: ST_TO_ADDR
// sTiger := false ;
1815: LD_ADDR_EXP 21
1819: PUSH
1820: LD_INT 0
1822: ST_TO_ADDR
// sBomb := false ;
1823: LD_ADDR_EXP 22
1827: PUSH
1828: LD_INT 0
1830: ST_TO_ADDR
// sWound := false ;
1831: LD_ADDR_EXP 30
1835: PUSH
1836: LD_INT 0
1838: ST_TO_ADDR
// sBetray := false ;
1839: LD_ADDR_EXP 34
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
// sContamin := false ;
1847: LD_ADDR_EXP 35
1851: PUSH
1852: LD_INT 0
1854: ST_TO_ADDR
// sOil := false ;
1855: LD_ADDR_EXP 37
1859: PUSH
1860: LD_INT 0
1862: ST_TO_ADDR
// sStu := false ;
1863: LD_ADDR_EXP 41
1867: PUSH
1868: LD_INT 0
1870: ST_TO_ADDR
// sBazooka := false ;
1871: LD_ADDR_EXP 44
1875: PUSH
1876: LD_INT 0
1878: ST_TO_ADDR
// sMortar := false ;
1879: LD_ADDR_EXP 45
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// sRanger := false ;
1887: LD_ADDR_EXP 55
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
// sComputer := false ;
1895: LD_ADDR_EXP 56
1899: PUSH
1900: LD_INT 0
1902: ST_TO_ADDR
// s30 := false ;
1903: LD_ADDR_EXP 57
1907: PUSH
1908: LD_INT 0
1910: ST_TO_ADDR
// s60 := false ;
1911: LD_ADDR_EXP 58
1915: PUSH
1916: LD_INT 0
1918: ST_TO_ADDR
// end ;
1919: LD_VAR 0 1
1923: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
1931: PPUSH
1932: PPUSH
// result := [ ] ;
1933: LD_ADDR_VAR 0 2
1937: PUSH
1938: EMPTY
1939: ST_TO_ADDR
// if campaign_id = 1 then
1940: LD_OWVAR 69
1944: PUSH
1945: LD_INT 1
1947: EQUAL
1948: IFFALSE 5114
// begin case mission_number of 1 :
1950: LD_OWVAR 70
1954: PUSH
1955: LD_INT 1
1957: DOUBLE
1958: EQUAL
1959: IFTRUE 1963
1961: GO 2039
1963: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_INT 2
1971: PUSH
1972: LD_INT 4
1974: PUSH
1975: LD_INT 11
1977: PUSH
1978: LD_INT 12
1980: PUSH
1981: LD_INT 15
1983: PUSH
1984: LD_INT 16
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 23
1992: PUSH
1993: LD_INT 26
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 101
2009: PUSH
2010: LD_INT 102
2012: PUSH
2013: LD_INT 106
2015: PUSH
2016: LD_INT 116
2018: PUSH
2019: LD_INT 117
2021: PUSH
2022: LD_INT 118
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: ST_TO_ADDR
2037: GO 5112
2039: LD_INT 2
2041: DOUBLE
2042: EQUAL
2043: IFTRUE 2047
2045: GO 2131
2047: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: LD_INT 2
2055: PUSH
2056: LD_INT 4
2058: PUSH
2059: LD_INT 11
2061: PUSH
2062: LD_INT 12
2064: PUSH
2065: LD_INT 15
2067: PUSH
2068: LD_INT 16
2070: PUSH
2071: LD_INT 22
2073: PUSH
2074: LD_INT 23
2076: PUSH
2077: LD_INT 26
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 101
2093: PUSH
2094: LD_INT 102
2096: PUSH
2097: LD_INT 105
2099: PUSH
2100: LD_INT 106
2102: PUSH
2103: LD_INT 108
2105: PUSH
2106: LD_INT 116
2108: PUSH
2109: LD_INT 117
2111: PUSH
2112: LD_INT 118
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: ST_TO_ADDR
2129: GO 5112
2131: LD_INT 3
2133: DOUBLE
2134: EQUAL
2135: IFTRUE 2139
2137: GO 2227
2139: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: LD_INT 2
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: LD_INT 5
2153: PUSH
2154: LD_INT 11
2156: PUSH
2157: LD_INT 12
2159: PUSH
2160: LD_INT 15
2162: PUSH
2163: LD_INT 16
2165: PUSH
2166: LD_INT 22
2168: PUSH
2169: LD_INT 26
2171: PUSH
2172: LD_INT 36
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 101
2189: PUSH
2190: LD_INT 102
2192: PUSH
2193: LD_INT 105
2195: PUSH
2196: LD_INT 106
2198: PUSH
2199: LD_INT 108
2201: PUSH
2202: LD_INT 116
2204: PUSH
2205: LD_INT 117
2207: PUSH
2208: LD_INT 118
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: ST_TO_ADDR
2225: GO 5112
2227: LD_INT 4
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2331
2235: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2236: LD_ADDR_VAR 0 2
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: LD_INT 4
2246: PUSH
2247: LD_INT 5
2249: PUSH
2250: LD_INT 8
2252: PUSH
2253: LD_INT 11
2255: PUSH
2256: LD_INT 12
2258: PUSH
2259: LD_INT 15
2261: PUSH
2262: LD_INT 16
2264: PUSH
2265: LD_INT 22
2267: PUSH
2268: LD_INT 23
2270: PUSH
2271: LD_INT 26
2273: PUSH
2274: LD_INT 36
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 101
2293: PUSH
2294: LD_INT 102
2296: PUSH
2297: LD_INT 105
2299: PUSH
2300: LD_INT 106
2302: PUSH
2303: LD_INT 108
2305: PUSH
2306: LD_INT 116
2308: PUSH
2309: LD_INT 117
2311: PUSH
2312: LD_INT 118
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: ST_TO_ADDR
2329: GO 5112
2331: LD_INT 5
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2451
2339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2340: LD_ADDR_VAR 0 2
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: LD_INT 4
2350: PUSH
2351: LD_INT 5
2353: PUSH
2354: LD_INT 6
2356: PUSH
2357: LD_INT 8
2359: PUSH
2360: LD_INT 11
2362: PUSH
2363: LD_INT 12
2365: PUSH
2366: LD_INT 15
2368: PUSH
2369: LD_INT 16
2371: PUSH
2372: LD_INT 22
2374: PUSH
2375: LD_INT 23
2377: PUSH
2378: LD_INT 25
2380: PUSH
2381: LD_INT 26
2383: PUSH
2384: LD_INT 36
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 101
2405: PUSH
2406: LD_INT 102
2408: PUSH
2409: LD_INT 105
2411: PUSH
2412: LD_INT 106
2414: PUSH
2415: LD_INT 108
2417: PUSH
2418: LD_INT 109
2420: PUSH
2421: LD_INT 112
2423: PUSH
2424: LD_INT 116
2426: PUSH
2427: LD_INT 117
2429: PUSH
2430: LD_INT 118
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: ST_TO_ADDR
2449: GO 5112
2451: LD_INT 6
2453: DOUBLE
2454: EQUAL
2455: IFTRUE 2459
2457: GO 2591
2459: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2460: LD_ADDR_VAR 0 2
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: LD_INT 4
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: LD_INT 8
2479: PUSH
2480: LD_INT 11
2482: PUSH
2483: LD_INT 12
2485: PUSH
2486: LD_INT 15
2488: PUSH
2489: LD_INT 16
2491: PUSH
2492: LD_INT 20
2494: PUSH
2495: LD_INT 21
2497: PUSH
2498: LD_INT 22
2500: PUSH
2501: LD_INT 23
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 26
2509: PUSH
2510: LD_INT 30
2512: PUSH
2513: LD_INT 31
2515: PUSH
2516: LD_INT 32
2518: PUSH
2519: LD_INT 36
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 101
2545: PUSH
2546: LD_INT 102
2548: PUSH
2549: LD_INT 105
2551: PUSH
2552: LD_INT 106
2554: PUSH
2555: LD_INT 108
2557: PUSH
2558: LD_INT 109
2560: PUSH
2561: LD_INT 112
2563: PUSH
2564: LD_INT 116
2566: PUSH
2567: LD_INT 117
2569: PUSH
2570: LD_INT 118
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: ST_TO_ADDR
2589: GO 5112
2591: LD_INT 7
2593: DOUBLE
2594: EQUAL
2595: IFTRUE 2599
2597: GO 2711
2599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2600: LD_ADDR_VAR 0 2
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: LD_INT 4
2610: PUSH
2611: LD_INT 5
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: LD_INT 11
2619: PUSH
2620: LD_INT 12
2622: PUSH
2623: LD_INT 15
2625: PUSH
2626: LD_INT 16
2628: PUSH
2629: LD_INT 20
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 22
2637: PUSH
2638: LD_INT 23
2640: PUSH
2641: LD_INT 25
2643: PUSH
2644: LD_INT 26
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 101
2665: PUSH
2666: LD_INT 102
2668: PUSH
2669: LD_INT 103
2671: PUSH
2672: LD_INT 105
2674: PUSH
2675: LD_INT 106
2677: PUSH
2678: LD_INT 108
2680: PUSH
2681: LD_INT 112
2683: PUSH
2684: LD_INT 116
2686: PUSH
2687: LD_INT 117
2689: PUSH
2690: LD_INT 118
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: ST_TO_ADDR
2709: GO 5112
2711: LD_INT 8
2713: DOUBLE
2714: EQUAL
2715: IFTRUE 2719
2717: GO 2859
2719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: LD_INT 2
2727: PUSH
2728: LD_INT 4
2730: PUSH
2731: LD_INT 5
2733: PUSH
2734: LD_INT 6
2736: PUSH
2737: LD_INT 7
2739: PUSH
2740: LD_INT 8
2742: PUSH
2743: LD_INT 11
2745: PUSH
2746: LD_INT 12
2748: PUSH
2749: LD_INT 15
2751: PUSH
2752: LD_INT 16
2754: PUSH
2755: LD_INT 20
2757: PUSH
2758: LD_INT 21
2760: PUSH
2761: LD_INT 22
2763: PUSH
2764: LD_INT 23
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 26
2772: PUSH
2773: LD_INT 30
2775: PUSH
2776: LD_INT 31
2778: PUSH
2779: LD_INT 32
2781: PUSH
2782: LD_INT 36
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 101
2809: PUSH
2810: LD_INT 102
2812: PUSH
2813: LD_INT 103
2815: PUSH
2816: LD_INT 105
2818: PUSH
2819: LD_INT 106
2821: PUSH
2822: LD_INT 108
2824: PUSH
2825: LD_INT 109
2827: PUSH
2828: LD_INT 112
2830: PUSH
2831: LD_INT 116
2833: PUSH
2834: LD_INT 117
2836: PUSH
2837: LD_INT 118
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: ST_TO_ADDR
2857: GO 5112
2859: LD_INT 9
2861: DOUBLE
2862: EQUAL
2863: IFTRUE 2867
2865: GO 3015
2867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2868: LD_ADDR_VAR 0 2
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: LD_INT 4
2878: PUSH
2879: LD_INT 5
2881: PUSH
2882: LD_INT 6
2884: PUSH
2885: LD_INT 7
2887: PUSH
2888: LD_INT 8
2890: PUSH
2891: LD_INT 11
2893: PUSH
2894: LD_INT 12
2896: PUSH
2897: LD_INT 15
2899: PUSH
2900: LD_INT 16
2902: PUSH
2903: LD_INT 20
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 23
2914: PUSH
2915: LD_INT 25
2917: PUSH
2918: LD_INT 26
2920: PUSH
2921: LD_INT 28
2923: PUSH
2924: LD_INT 30
2926: PUSH
2927: LD_INT 31
2929: PUSH
2930: LD_INT 32
2932: PUSH
2933: LD_INT 36
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 101
2961: PUSH
2962: LD_INT 102
2964: PUSH
2965: LD_INT 103
2967: PUSH
2968: LD_INT 105
2970: PUSH
2971: LD_INT 106
2973: PUSH
2974: LD_INT 108
2976: PUSH
2977: LD_INT 109
2979: PUSH
2980: LD_INT 112
2982: PUSH
2983: LD_INT 114
2985: PUSH
2986: LD_INT 116
2988: PUSH
2989: LD_INT 117
2991: PUSH
2992: LD_INT 118
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: ST_TO_ADDR
3013: GO 5112
3015: LD_INT 10
3017: DOUBLE
3018: EQUAL
3019: IFTRUE 3023
3021: GO 3219
3023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: LD_INT 2
3031: PUSH
3032: LD_INT 4
3034: PUSH
3035: LD_INT 5
3037: PUSH
3038: LD_INT 6
3040: PUSH
3041: LD_INT 7
3043: PUSH
3044: LD_INT 8
3046: PUSH
3047: LD_INT 9
3049: PUSH
3050: LD_INT 10
3052: PUSH
3053: LD_INT 11
3055: PUSH
3056: LD_INT 12
3058: PUSH
3059: LD_INT 13
3061: PUSH
3062: LD_INT 14
3064: PUSH
3065: LD_INT 15
3067: PUSH
3068: LD_INT 16
3070: PUSH
3071: LD_INT 17
3073: PUSH
3074: LD_INT 18
3076: PUSH
3077: LD_INT 19
3079: PUSH
3080: LD_INT 20
3082: PUSH
3083: LD_INT 21
3085: PUSH
3086: LD_INT 22
3088: PUSH
3089: LD_INT 23
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 25
3097: PUSH
3098: LD_INT 26
3100: PUSH
3101: LD_INT 28
3103: PUSH
3104: LD_INT 30
3106: PUSH
3107: LD_INT 31
3109: PUSH
3110: LD_INT 32
3112: PUSH
3113: LD_INT 36
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 101
3149: PUSH
3150: LD_INT 102
3152: PUSH
3153: LD_INT 103
3155: PUSH
3156: LD_INT 104
3158: PUSH
3159: LD_INT 105
3161: PUSH
3162: LD_INT 106
3164: PUSH
3165: LD_INT 107
3167: PUSH
3168: LD_INT 108
3170: PUSH
3171: LD_INT 109
3173: PUSH
3174: LD_INT 110
3176: PUSH
3177: LD_INT 111
3179: PUSH
3180: LD_INT 112
3182: PUSH
3183: LD_INT 114
3185: PUSH
3186: LD_INT 116
3188: PUSH
3189: LD_INT 117
3191: PUSH
3192: LD_INT 118
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
3217: GO 5112
3219: LD_INT 11
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3431
3227: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 4
3241: PUSH
3242: LD_INT 5
3244: PUSH
3245: LD_INT 6
3247: PUSH
3248: LD_INT 7
3250: PUSH
3251: LD_INT 8
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: LD_INT 10
3259: PUSH
3260: LD_INT 11
3262: PUSH
3263: LD_INT 12
3265: PUSH
3266: LD_INT 13
3268: PUSH
3269: LD_INT 14
3271: PUSH
3272: LD_INT 15
3274: PUSH
3275: LD_INT 16
3277: PUSH
3278: LD_INT 17
3280: PUSH
3281: LD_INT 18
3283: PUSH
3284: LD_INT 19
3286: PUSH
3287: LD_INT 20
3289: PUSH
3290: LD_INT 21
3292: PUSH
3293: LD_INT 22
3295: PUSH
3296: LD_INT 23
3298: PUSH
3299: LD_INT 24
3301: PUSH
3302: LD_INT 25
3304: PUSH
3305: LD_INT 26
3307: PUSH
3308: LD_INT 28
3310: PUSH
3311: LD_INT 30
3313: PUSH
3314: LD_INT 31
3316: PUSH
3317: LD_INT 32
3319: PUSH
3320: LD_INT 34
3322: PUSH
3323: LD_INT 36
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 101
3361: PUSH
3362: LD_INT 102
3364: PUSH
3365: LD_INT 103
3367: PUSH
3368: LD_INT 104
3370: PUSH
3371: LD_INT 105
3373: PUSH
3374: LD_INT 106
3376: PUSH
3377: LD_INT 107
3379: PUSH
3380: LD_INT 108
3382: PUSH
3383: LD_INT 109
3385: PUSH
3386: LD_INT 110
3388: PUSH
3389: LD_INT 111
3391: PUSH
3392: LD_INT 112
3394: PUSH
3395: LD_INT 114
3397: PUSH
3398: LD_INT 116
3400: PUSH
3401: LD_INT 117
3403: PUSH
3404: LD_INT 118
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: ST_TO_ADDR
3429: GO 5112
3431: LD_INT 12
3433: DOUBLE
3434: EQUAL
3435: IFTRUE 3439
3437: GO 3659
3439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3440: LD_ADDR_VAR 0 2
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 3
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: LD_INT 8
3468: PUSH
3469: LD_INT 9
3471: PUSH
3472: LD_INT 10
3474: PUSH
3475: LD_INT 11
3477: PUSH
3478: LD_INT 12
3480: PUSH
3481: LD_INT 13
3483: PUSH
3484: LD_INT 14
3486: PUSH
3487: LD_INT 15
3489: PUSH
3490: LD_INT 16
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 18
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 20
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 23
3513: PUSH
3514: LD_INT 24
3516: PUSH
3517: LD_INT 25
3519: PUSH
3520: LD_INT 26
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 28
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 34
3543: PUSH
3544: LD_INT 36
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 101
3585: PUSH
3586: LD_INT 102
3588: PUSH
3589: LD_INT 103
3591: PUSH
3592: LD_INT 104
3594: PUSH
3595: LD_INT 105
3597: PUSH
3598: LD_INT 106
3600: PUSH
3601: LD_INT 107
3603: PUSH
3604: LD_INT 108
3606: PUSH
3607: LD_INT 109
3609: PUSH
3610: LD_INT 110
3612: PUSH
3613: LD_INT 111
3615: PUSH
3616: LD_INT 112
3618: PUSH
3619: LD_INT 113
3621: PUSH
3622: LD_INT 114
3624: PUSH
3625: LD_INT 116
3627: PUSH
3628: LD_INT 117
3630: PUSH
3631: LD_INT 118
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: ST_TO_ADDR
3657: GO 5112
3659: LD_INT 13
3661: DOUBLE
3662: EQUAL
3663: IFTRUE 3667
3665: GO 3875
3667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3668: LD_ADDR_VAR 0 2
3672: PUSH
3673: LD_INT 1
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: LD_INT 8
3690: PUSH
3691: LD_INT 9
3693: PUSH
3694: LD_INT 10
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 14
3705: PUSH
3706: LD_INT 15
3708: PUSH
3709: LD_INT 16
3711: PUSH
3712: LD_INT 17
3714: PUSH
3715: LD_INT 18
3717: PUSH
3718: LD_INT 19
3720: PUSH
3721: LD_INT 20
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 22
3729: PUSH
3730: LD_INT 23
3732: PUSH
3733: LD_INT 24
3735: PUSH
3736: LD_INT 25
3738: PUSH
3739: LD_INT 26
3741: PUSH
3742: LD_INT 27
3744: PUSH
3745: LD_INT 28
3747: PUSH
3748: LD_INT 30
3750: PUSH
3751: LD_INT 31
3753: PUSH
3754: LD_INT 32
3756: PUSH
3757: LD_INT 33
3759: PUSH
3760: LD_INT 34
3762: PUSH
3763: LD_INT 36
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 101
3801: PUSH
3802: LD_INT 102
3804: PUSH
3805: LD_INT 103
3807: PUSH
3808: LD_INT 104
3810: PUSH
3811: LD_INT 105
3813: PUSH
3814: LD_INT 106
3816: PUSH
3817: LD_INT 107
3819: PUSH
3820: LD_INT 108
3822: PUSH
3823: LD_INT 109
3825: PUSH
3826: LD_INT 110
3828: PUSH
3829: LD_INT 111
3831: PUSH
3832: LD_INT 112
3834: PUSH
3835: LD_INT 113
3837: PUSH
3838: LD_INT 114
3840: PUSH
3841: LD_INT 116
3843: PUSH
3844: LD_INT 117
3846: PUSH
3847: LD_INT 118
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: ST_TO_ADDR
3873: GO 5112
3875: LD_INT 14
3877: DOUBLE
3878: EQUAL
3879: IFTRUE 3883
3881: GO 4107
3883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 1
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 4
3900: PUSH
3901: LD_INT 5
3903: PUSH
3904: LD_INT 6
3906: PUSH
3907: LD_INT 7
3909: PUSH
3910: LD_INT 8
3912: PUSH
3913: LD_INT 9
3915: PUSH
3916: LD_INT 10
3918: PUSH
3919: LD_INT 11
3921: PUSH
3922: LD_INT 12
3924: PUSH
3925: LD_INT 13
3927: PUSH
3928: LD_INT 14
3930: PUSH
3931: LD_INT 15
3933: PUSH
3934: LD_INT 16
3936: PUSH
3937: LD_INT 17
3939: PUSH
3940: LD_INT 18
3942: PUSH
3943: LD_INT 19
3945: PUSH
3946: LD_INT 20
3948: PUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 22
3954: PUSH
3955: LD_INT 23
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 25
3963: PUSH
3964: LD_INT 26
3966: PUSH
3967: LD_INT 27
3969: PUSH
3970: LD_INT 28
3972: PUSH
3973: LD_INT 29
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 31
3981: PUSH
3982: LD_INT 32
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: LD_INT 34
3990: PUSH
3991: LD_INT 36
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 101
4033: PUSH
4034: LD_INT 102
4036: PUSH
4037: LD_INT 103
4039: PUSH
4040: LD_INT 104
4042: PUSH
4043: LD_INT 105
4045: PUSH
4046: LD_INT 106
4048: PUSH
4049: LD_INT 107
4051: PUSH
4052: LD_INT 108
4054: PUSH
4055: LD_INT 109
4057: PUSH
4058: LD_INT 110
4060: PUSH
4061: LD_INT 111
4063: PUSH
4064: LD_INT 112
4066: PUSH
4067: LD_INT 113
4069: PUSH
4070: LD_INT 114
4072: PUSH
4073: LD_INT 116
4075: PUSH
4076: LD_INT 117
4078: PUSH
4079: LD_INT 118
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 5112
4107: LD_INT 15
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4339
4115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4116: LD_ADDR_VAR 0 2
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: LD_INT 2
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: LD_INT 4
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: LD_INT 6
4138: PUSH
4139: LD_INT 7
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 9
4147: PUSH
4148: LD_INT 10
4150: PUSH
4151: LD_INT 11
4153: PUSH
4154: LD_INT 12
4156: PUSH
4157: LD_INT 13
4159: PUSH
4160: LD_INT 14
4162: PUSH
4163: LD_INT 15
4165: PUSH
4166: LD_INT 16
4168: PUSH
4169: LD_INT 17
4171: PUSH
4172: LD_INT 18
4174: PUSH
4175: LD_INT 19
4177: PUSH
4178: LD_INT 20
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 22
4186: PUSH
4187: LD_INT 23
4189: PUSH
4190: LD_INT 24
4192: PUSH
4193: LD_INT 25
4195: PUSH
4196: LD_INT 26
4198: PUSH
4199: LD_INT 27
4201: PUSH
4202: LD_INT 28
4204: PUSH
4205: LD_INT 29
4207: PUSH
4208: LD_INT 30
4210: PUSH
4211: LD_INT 31
4213: PUSH
4214: LD_INT 32
4216: PUSH
4217: LD_INT 33
4219: PUSH
4220: LD_INT 34
4222: PUSH
4223: LD_INT 36
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 101
4265: PUSH
4266: LD_INT 102
4268: PUSH
4269: LD_INT 103
4271: PUSH
4272: LD_INT 104
4274: PUSH
4275: LD_INT 105
4277: PUSH
4278: LD_INT 106
4280: PUSH
4281: LD_INT 107
4283: PUSH
4284: LD_INT 108
4286: PUSH
4287: LD_INT 109
4289: PUSH
4290: LD_INT 110
4292: PUSH
4293: LD_INT 111
4295: PUSH
4296: LD_INT 112
4298: PUSH
4299: LD_INT 113
4301: PUSH
4302: LD_INT 114
4304: PUSH
4305: LD_INT 116
4307: PUSH
4308: LD_INT 117
4310: PUSH
4311: LD_INT 118
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: ST_TO_ADDR
4337: GO 5112
4339: LD_INT 16
4341: DOUBLE
4342: EQUAL
4343: IFTRUE 4347
4345: GO 4483
4347: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4348: LD_ADDR_VAR 0 2
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: LD_INT 4
4358: PUSH
4359: LD_INT 5
4361: PUSH
4362: LD_INT 7
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 15
4373: PUSH
4374: LD_INT 16
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 31
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 33
4406: PUSH
4407: LD_INT 34
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 101
4433: PUSH
4434: LD_INT 102
4436: PUSH
4437: LD_INT 103
4439: PUSH
4440: LD_INT 106
4442: PUSH
4443: LD_INT 108
4445: PUSH
4446: LD_INT 112
4448: PUSH
4449: LD_INT 113
4451: PUSH
4452: LD_INT 114
4454: PUSH
4455: LD_INT 116
4457: PUSH
4458: LD_INT 117
4460: PUSH
4461: LD_INT 118
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: ST_TO_ADDR
4481: GO 5112
4483: LD_INT 17
4485: DOUBLE
4486: EQUAL
4487: IFTRUE 4491
4489: GO 4715
4491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 2
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 5
4511: PUSH
4512: LD_INT 6
4514: PUSH
4515: LD_INT 7
4517: PUSH
4518: LD_INT 8
4520: PUSH
4521: LD_INT 9
4523: PUSH
4524: LD_INT 10
4526: PUSH
4527: LD_INT 11
4529: PUSH
4530: LD_INT 12
4532: PUSH
4533: LD_INT 13
4535: PUSH
4536: LD_INT 14
4538: PUSH
4539: LD_INT 15
4541: PUSH
4542: LD_INT 16
4544: PUSH
4545: LD_INT 17
4547: PUSH
4548: LD_INT 18
4550: PUSH
4551: LD_INT 19
4553: PUSH
4554: LD_INT 20
4556: PUSH
4557: LD_INT 21
4559: PUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 23
4565: PUSH
4566: LD_INT 24
4568: PUSH
4569: LD_INT 25
4571: PUSH
4572: LD_INT 26
4574: PUSH
4575: LD_INT 27
4577: PUSH
4578: LD_INT 28
4580: PUSH
4581: LD_INT 29
4583: PUSH
4584: LD_INT 30
4586: PUSH
4587: LD_INT 31
4589: PUSH
4590: LD_INT 32
4592: PUSH
4593: LD_INT 33
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 36
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 113
4677: PUSH
4678: LD_INT 114
4680: PUSH
4681: LD_INT 116
4683: PUSH
4684: LD_INT 117
4686: PUSH
4687: LD_INT 118
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 5112
4715: LD_INT 18
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4871
4723: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: LD_INT 2
4731: PUSH
4732: LD_INT 4
4734: PUSH
4735: LD_INT 5
4737: PUSH
4738: LD_INT 7
4740: PUSH
4741: LD_INT 11
4743: PUSH
4744: LD_INT 12
4746: PUSH
4747: LD_INT 15
4749: PUSH
4750: LD_INT 16
4752: PUSH
4753: LD_INT 20
4755: PUSH
4756: LD_INT 21
4758: PUSH
4759: LD_INT 22
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 26
4770: PUSH
4771: LD_INT 30
4773: PUSH
4774: LD_INT 31
4776: PUSH
4777: LD_INT 32
4779: PUSH
4780: LD_INT 33
4782: PUSH
4783: LD_INT 34
4785: PUSH
4786: LD_INT 35
4788: PUSH
4789: LD_INT 36
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 101
4817: PUSH
4818: LD_INT 102
4820: PUSH
4821: LD_INT 103
4823: PUSH
4824: LD_INT 106
4826: PUSH
4827: LD_INT 108
4829: PUSH
4830: LD_INT 112
4832: PUSH
4833: LD_INT 113
4835: PUSH
4836: LD_INT 114
4838: PUSH
4839: LD_INT 115
4841: PUSH
4842: LD_INT 116
4844: PUSH
4845: LD_INT 117
4847: PUSH
4848: LD_INT 118
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5112
4871: LD_INT 19
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 5111
4879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4880: LD_ADDR_VAR 0 2
4884: PUSH
4885: LD_INT 1
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 4
4896: PUSH
4897: LD_INT 5
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 8
4908: PUSH
4909: LD_INT 9
4911: PUSH
4912: LD_INT 10
4914: PUSH
4915: LD_INT 11
4917: PUSH
4918: LD_INT 12
4920: PUSH
4921: LD_INT 13
4923: PUSH
4924: LD_INT 14
4926: PUSH
4927: LD_INT 15
4929: PUSH
4930: LD_INT 16
4932: PUSH
4933: LD_INT 17
4935: PUSH
4936: LD_INT 18
4938: PUSH
4939: LD_INT 19
4941: PUSH
4942: LD_INT 20
4944: PUSH
4945: LD_INT 21
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 23
4953: PUSH
4954: LD_INT 24
4956: PUSH
4957: LD_INT 25
4959: PUSH
4960: LD_INT 26
4962: PUSH
4963: LD_INT 27
4965: PUSH
4966: LD_INT 28
4968: PUSH
4969: LD_INT 29
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 33
4983: PUSH
4984: LD_INT 34
4986: PUSH
4987: LD_INT 35
4989: PUSH
4990: LD_INT 36
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: LD_INT 101
5033: PUSH
5034: LD_INT 102
5036: PUSH
5037: LD_INT 103
5039: PUSH
5040: LD_INT 104
5042: PUSH
5043: LD_INT 105
5045: PUSH
5046: LD_INT 106
5048: PUSH
5049: LD_INT 107
5051: PUSH
5052: LD_INT 108
5054: PUSH
5055: LD_INT 109
5057: PUSH
5058: LD_INT 110
5060: PUSH
5061: LD_INT 111
5063: PUSH
5064: LD_INT 112
5066: PUSH
5067: LD_INT 113
5069: PUSH
5070: LD_INT 114
5072: PUSH
5073: LD_INT 115
5075: PUSH
5076: LD_INT 116
5078: PUSH
5079: LD_INT 117
5081: PUSH
5082: LD_INT 118
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: ST_TO_ADDR
5109: GO 5112
5111: POP
// end else
5112: GO 5343
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: LD_INT 2
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 5
5133: PUSH
5134: LD_INT 6
5136: PUSH
5137: LD_INT 7
5139: PUSH
5140: LD_INT 8
5142: PUSH
5143: LD_INT 9
5145: PUSH
5146: LD_INT 10
5148: PUSH
5149: LD_INT 11
5151: PUSH
5152: LD_INT 12
5154: PUSH
5155: LD_INT 13
5157: PUSH
5158: LD_INT 14
5160: PUSH
5161: LD_INT 15
5163: PUSH
5164: LD_INT 16
5166: PUSH
5167: LD_INT 17
5169: PUSH
5170: LD_INT 18
5172: PUSH
5173: LD_INT 19
5175: PUSH
5176: LD_INT 20
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_INT 23
5187: PUSH
5188: LD_INT 24
5190: PUSH
5191: LD_INT 25
5193: PUSH
5194: LD_INT 26
5196: PUSH
5197: LD_INT 27
5199: PUSH
5200: LD_INT 28
5202: PUSH
5203: LD_INT 29
5205: PUSH
5206: LD_INT 30
5208: PUSH
5209: LD_INT 31
5211: PUSH
5212: LD_INT 32
5214: PUSH
5215: LD_INT 33
5217: PUSH
5218: LD_INT 34
5220: PUSH
5221: LD_INT 35
5223: PUSH
5224: LD_INT 36
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 101
5267: PUSH
5268: LD_INT 102
5270: PUSH
5271: LD_INT 103
5273: PUSH
5274: LD_INT 104
5276: PUSH
5277: LD_INT 105
5279: PUSH
5280: LD_INT 106
5282: PUSH
5283: LD_INT 107
5285: PUSH
5286: LD_INT 108
5288: PUSH
5289: LD_INT 109
5291: PUSH
5292: LD_INT 110
5294: PUSH
5295: LD_INT 111
5297: PUSH
5298: LD_INT 112
5300: PUSH
5301: LD_INT 113
5303: PUSH
5304: LD_INT 114
5306: PUSH
5307: LD_INT 115
5309: PUSH
5310: LD_INT 116
5312: PUSH
5313: LD_INT 117
5315: PUSH
5316: LD_INT 118
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: ST_TO_ADDR
// if result then
5343: LD_VAR 0 2
5347: IFFALSE 6133
// begin normal :=  ;
5349: LD_ADDR_VAR 0 5
5353: PUSH
5354: LD_STRING 
5356: ST_TO_ADDR
// hardcore :=  ;
5357: LD_ADDR_VAR 0 6
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// active :=  ;
5365: LD_ADDR_VAR 0 7
5369: PUSH
5370: LD_STRING 
5372: ST_TO_ADDR
// for i = 1 to normalCounter do
5373: LD_ADDR_VAR 0 8
5377: PUSH
5378: DOUBLE
5379: LD_INT 1
5381: DEC
5382: ST_TO_ADDR
5383: LD_EXP 3
5387: PUSH
5388: FOR_TO
5389: IFFALSE 5490
// begin tmp := 0 ;
5391: LD_ADDR_VAR 0 3
5395: PUSH
5396: LD_STRING 0
5398: ST_TO_ADDR
// if result [ 1 ] then
5399: LD_VAR 0 2
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: IFFALSE 5472
// if result [ 1 ] [ 1 ] = i then
5409: LD_VAR 0 2
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PUSH
5422: LD_VAR 0 8
5426: EQUAL
5427: IFFALSE 5472
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5429: LD_ADDR_VAR 0 2
5433: PUSH
5434: LD_VAR 0 2
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: LD_VAR 0 2
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 3
5458: PPUSH
5459: CALL_OW 1
5463: ST_TO_ADDR
// tmp := 1 ;
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_STRING 1
5471: ST_TO_ADDR
// end ; normal := normal & tmp ;
5472: LD_ADDR_VAR 0 5
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 3
5486: STR
5487: ST_TO_ADDR
// end ;
5488: GO 5388
5490: POP
5491: POP
// for i = 1 to hardcoreCounter do
5492: LD_ADDR_VAR 0 8
5496: PUSH
5497: DOUBLE
5498: LD_INT 1
5500: DEC
5501: ST_TO_ADDR
5502: LD_EXP 4
5506: PUSH
5507: FOR_TO
5508: IFFALSE 5613
// begin tmp := 0 ;
5510: LD_ADDR_VAR 0 3
5514: PUSH
5515: LD_STRING 0
5517: ST_TO_ADDR
// if result [ 2 ] then
5518: LD_VAR 0 2
5522: PUSH
5523: LD_INT 2
5525: ARRAY
5526: IFFALSE 5595
// if result [ 2 ] [ 1 ] = 100 + i then
5528: LD_VAR 0 2
5532: PUSH
5533: LD_INT 2
5535: ARRAY
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PUSH
5541: LD_INT 100
5543: PUSH
5544: LD_VAR 0 8
5548: PLUS
5549: EQUAL
5550: IFFALSE 5595
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5552: LD_ADDR_VAR 0 2
5556: PUSH
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_INT 2
5564: PPUSH
5565: LD_VAR 0 2
5569: PUSH
5570: LD_INT 2
5572: ARRAY
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 3
5581: PPUSH
5582: CALL_OW 1
5586: ST_TO_ADDR
// tmp := 1 ;
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: LD_STRING 1
5594: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5595: LD_ADDR_VAR 0 6
5599: PUSH
5600: LD_VAR 0 6
5604: PUSH
5605: LD_VAR 0 3
5609: STR
5610: ST_TO_ADDR
// end ;
5611: GO 5507
5613: POP
5614: POP
// if isGameLoad then
5615: LD_VAR 0 1
5619: IFFALSE 6094
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5621: LD_ADDR_VAR 0 4
5625: PUSH
5626: LD_EXP 7
5630: PUSH
5631: LD_EXP 6
5635: PUSH
5636: LD_EXP 8
5640: PUSH
5641: LD_EXP 5
5645: PUSH
5646: LD_EXP 9
5650: PUSH
5651: LD_EXP 10
5655: PUSH
5656: LD_EXP 11
5660: PUSH
5661: LD_EXP 12
5665: PUSH
5666: LD_EXP 13
5670: PUSH
5671: LD_EXP 14
5675: PUSH
5676: LD_EXP 15
5680: PUSH
5681: LD_EXP 16
5685: PUSH
5686: LD_EXP 17
5690: PUSH
5691: LD_EXP 18
5695: PUSH
5696: LD_EXP 26
5700: PUSH
5701: LD_EXP 27
5705: PUSH
5706: LD_EXP 28
5710: PUSH
5711: LD_EXP 29
5715: PUSH
5716: LD_EXP 31
5720: PUSH
5721: LD_EXP 32
5725: PUSH
5726: LD_EXP 33
5730: PUSH
5731: LD_EXP 36
5735: PUSH
5736: LD_EXP 38
5740: PUSH
5741: LD_EXP 39
5745: PUSH
5746: LD_EXP 40
5750: PUSH
5751: LD_EXP 42
5755: PUSH
5756: LD_EXP 43
5760: PUSH
5761: LD_EXP 46
5765: PUSH
5766: LD_EXP 47
5770: PUSH
5771: LD_EXP 48
5775: PUSH
5776: LD_EXP 49
5780: PUSH
5781: LD_EXP 50
5785: PUSH
5786: LD_EXP 51
5790: PUSH
5791: LD_EXP 52
5795: PUSH
5796: LD_EXP 53
5800: PUSH
5801: LD_EXP 54
5805: PUSH
5806: LD_EXP 19
5810: PUSH
5811: LD_EXP 20
5815: PUSH
5816: LD_EXP 23
5820: PUSH
5821: LD_EXP 24
5825: PUSH
5826: LD_EXP 25
5830: PUSH
5831: LD_EXP 21
5835: PUSH
5836: LD_EXP 22
5840: PUSH
5841: LD_EXP 30
5845: PUSH
5846: LD_EXP 34
5850: PUSH
5851: LD_EXP 35
5855: PUSH
5856: LD_EXP 37
5860: PUSH
5861: LD_EXP 41
5865: PUSH
5866: LD_EXP 44
5870: PUSH
5871: LD_EXP 45
5875: PUSH
5876: LD_EXP 55
5880: PUSH
5881: LD_EXP 56
5885: PUSH
5886: LD_EXP 57
5890: PUSH
5891: LD_EXP 58
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// tmp :=  ;
5952: LD_ADDR_VAR 0 3
5956: PUSH
5957: LD_STRING 
5959: ST_TO_ADDR
// for i = 1 to normalCounter do
5960: LD_ADDR_VAR 0 8
5964: PUSH
5965: DOUBLE
5966: LD_INT 1
5968: DEC
5969: ST_TO_ADDR
5970: LD_EXP 3
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6012
// begin if flags [ i ] then
5978: LD_VAR 0 4
5982: PUSH
5983: LD_VAR 0 8
5987: ARRAY
5988: IFFALSE 6010
// tmp := tmp & i & ; ;
5990: LD_ADDR_VAR 0 3
5994: PUSH
5995: LD_VAR 0 3
5999: PUSH
6000: LD_VAR 0 8
6004: STR
6005: PUSH
6006: LD_STRING ;
6008: STR
6009: ST_TO_ADDR
// end ;
6010: GO 5975
6012: POP
6013: POP
// for i = 1 to hardcoreCounter do
6014: LD_ADDR_VAR 0 8
6018: PUSH
6019: DOUBLE
6020: LD_INT 1
6022: DEC
6023: ST_TO_ADDR
6024: LD_EXP 4
6028: PUSH
6029: FOR_TO
6030: IFFALSE 6076
// begin if flags [ normalCounter + i ] then
6032: LD_VAR 0 4
6036: PUSH
6037: LD_EXP 3
6041: PUSH
6042: LD_VAR 0 8
6046: PLUS
6047: ARRAY
6048: IFFALSE 6074
// tmp := tmp & ( 100 + i ) & ; ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 100
6062: PUSH
6063: LD_VAR 0 8
6067: PLUS
6068: STR
6069: PUSH
6070: LD_STRING ;
6072: STR
6073: ST_TO_ADDR
// end ;
6074: GO 6029
6076: POP
6077: POP
// if tmp then
6078: LD_VAR 0 3
6082: IFFALSE 6094
// active := tmp ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 3
6093: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6094: LD_STRING getStreamItemsFromMission("
6096: PUSH
6097: LD_VAR 0 5
6101: STR
6102: PUSH
6103: LD_STRING ","
6105: STR
6106: PUSH
6107: LD_VAR 0 6
6111: STR
6112: PUSH
6113: LD_STRING ","
6115: STR
6116: PUSH
6117: LD_VAR 0 7
6121: STR
6122: PUSH
6123: LD_STRING ")
6125: STR
6126: PPUSH
6127: CALL_OW 559
// end else
6131: GO 6140
// ToLua ( getStreamItemsFromMission("","","") ) ;
6133: LD_STRING getStreamItemsFromMission("","","")
6135: PPUSH
6136: CALL_OW 559
// end ;
6140: LD_VAR 0 2
6144: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6145: LD_EXP 2
6149: IFFALSE 6157
6151: PUSH
6152: LD_EXP 7
6156: AND
6157: IFFALSE 6281
6159: GO 6161
6161: DISABLE
6162: LD_INT 0
6164: PPUSH
6165: PPUSH
// begin enable ;
6166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_OWVAR 2
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: LD_INT 34
6189: PUSH
6190: LD_INT 7
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 34
6199: PUSH
6200: LD_INT 45
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 34
6209: PUSH
6210: LD_INT 28
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 34
6219: PUSH
6220: LD_INT 47
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: ST_TO_ADDR
// if not tmp then
6243: LD_VAR 0 2
6247: NOT
6248: IFFALSE 6252
// exit ;
6250: GO 6281
// for i in tmp do
6252: LD_ADDR_VAR 0 1
6256: PUSH
6257: LD_VAR 0 2
6261: PUSH
6262: FOR_IN
6263: IFFALSE 6279
// begin SetLives ( i , 0 ) ;
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 234
// end ;
6277: GO 6262
6279: POP
6280: POP
// end ;
6281: PPOPN 2
6283: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6284: LD_EXP 2
6288: IFFALSE 6296
6290: PUSH
6291: LD_EXP 8
6295: AND
6296: IFFALSE 6380
6298: GO 6300
6300: DISABLE
6301: LD_INT 0
6303: PPUSH
6304: PPUSH
// begin enable ;
6305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 22
6313: PUSH
6314: LD_OWVAR 2
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 32
6325: PUSH
6326: LD_INT 3
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 69
6341: ST_TO_ADDR
// if not tmp then
6342: LD_VAR 0 2
6346: NOT
6347: IFFALSE 6351
// exit ;
6349: GO 6380
// for i in tmp do
6351: LD_ADDR_VAR 0 1
6355: PUSH
6356: LD_VAR 0 2
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6378
// begin SetLives ( i , 0 ) ;
6364: LD_VAR 0 1
6368: PPUSH
6369: LD_INT 0
6371: PPUSH
6372: CALL_OW 234
// end ;
6376: GO 6361
6378: POP
6379: POP
// end ;
6380: PPOPN 2
6382: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6383: LD_EXP 2
6387: IFFALSE 6395
6389: PUSH
6390: LD_EXP 5
6394: AND
6395: IFFALSE 6488
6397: GO 6399
6399: DISABLE
6400: LD_INT 0
6402: PPUSH
// begin enable ;
6403: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6404: LD_ADDR_VAR 0 1
6408: PUSH
6409: LD_INT 22
6411: PUSH
6412: LD_OWVAR 2
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 5
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 9
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 8
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 69
6468: PUSH
6469: FOR_IN
6470: IFFALSE 6486
// begin SetClass ( i , 1 ) ;
6472: LD_VAR 0 1
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 336
// end ;
6484: GO 6469
6486: POP
6487: POP
// end ;
6488: PPOPN 1
6490: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6491: LD_EXP 2
6495: IFFALSE 6503
6497: PUSH
6498: LD_EXP 6
6502: AND
6503: IFFALSE 6515
6505: PUSH
6506: LD_OWVAR 65
6510: PUSH
6511: LD_INT 7
6513: LESS
6514: AND
6515: IFFALSE 6529
6517: GO 6519
6519: DISABLE
// begin enable ;
6520: ENABLE
// game_speed := 7 ;
6521: LD_ADDR_OWVAR 65
6525: PUSH
6526: LD_INT 7
6528: ST_TO_ADDR
// end ;
6529: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6530: LD_EXP 2
6534: IFFALSE 6542
6536: PUSH
6537: LD_EXP 9
6541: AND
6542: IFFALSE 6744
6544: GO 6546
6546: DISABLE
6547: LD_INT 0
6549: PPUSH
6550: PPUSH
6551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_INT 81
6559: PUSH
6560: LD_OWVAR 2
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 21
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 69
6587: ST_TO_ADDR
// if not tmp then
6588: LD_VAR 0 3
6592: NOT
6593: IFFALSE 6597
// exit ;
6595: GO 6744
// if tmp > 5 then
6597: LD_VAR 0 3
6601: PUSH
6602: LD_INT 5
6604: GREATER
6605: IFFALSE 6617
// k := 5 else
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 5
6614: ST_TO_ADDR
6615: GO 6627
// k := tmp ;
6617: LD_ADDR_VAR 0 2
6621: PUSH
6622: LD_VAR 0 3
6626: ST_TO_ADDR
// for i := 1 to k do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_VAR 0 2
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6742
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6645: LD_VAR 0 3
6649: PUSH
6650: LD_VAR 0 1
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_INT 4
6663: MOD
6664: PUSH
6665: LD_INT 1
6667: PLUS
6668: PPUSH
6669: CALL_OW 259
6673: PUSH
6674: LD_INT 10
6676: LESS
6677: IFFALSE 6740
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6679: LD_VAR 0 3
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PUSH
6695: LD_INT 4
6697: MOD
6698: PUSH
6699: LD_INT 1
6701: PLUS
6702: PPUSH
6703: LD_VAR 0 3
6707: PUSH
6708: LD_VAR 0 1
6712: ARRAY
6713: PPUSH
6714: LD_VAR 0 1
6718: PUSH
6719: LD_INT 4
6721: MOD
6722: PUSH
6723: LD_INT 1
6725: PLUS
6726: PPUSH
6727: CALL_OW 259
6731: PUSH
6732: LD_INT 1
6734: PLUS
6735: PPUSH
6736: CALL_OW 237
6740: GO 6642
6742: POP
6743: POP
// end ;
6744: PPOPN 3
6746: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6747: LD_EXP 2
6751: IFFALSE 6759
6753: PUSH
6754: LD_EXP 10
6758: AND
6759: IFFALSE 6779
6761: GO 6763
6763: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6764: LD_INT 4
6766: PPUSH
6767: LD_OWVAR 2
6771: PPUSH
6772: LD_INT 0
6774: PPUSH
6775: CALL_OW 324
6779: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6780: LD_EXP 2
6784: IFFALSE 6792
6786: PUSH
6787: LD_EXP 39
6791: AND
6792: IFFALSE 6812
6794: GO 6796
6796: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6797: LD_INT 19
6799: PPUSH
6800: LD_OWVAR 2
6804: PPUSH
6805: LD_INT 0
6807: PPUSH
6808: CALL_OW 324
6812: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6813: LD_EXP 2
6817: IFFALSE 6825
6819: PUSH
6820: LD_EXP 11
6824: AND
6825: IFFALSE 6927
6827: GO 6829
6829: DISABLE
6830: LD_INT 0
6832: PPUSH
6833: PPUSH
// begin enable ;
6834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6835: LD_ADDR_VAR 0 2
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_OWVAR 2
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 2
6854: PUSH
6855: LD_INT 34
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 34
6867: PUSH
6868: LD_INT 30
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 69
6888: ST_TO_ADDR
// if not tmp then
6889: LD_VAR 0 2
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 6927
// for i in tmp do
6898: LD_ADDR_VAR 0 1
6902: PUSH
6903: LD_VAR 0 2
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6925
// begin SetLives ( i , 0 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 0
6918: PPUSH
6919: CALL_OW 234
// end ;
6923: GO 6908
6925: POP
6926: POP
// end ;
6927: PPOPN 2
6929: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6930: LD_EXP 2
6934: IFFALSE 6942
6936: PUSH
6937: LD_EXP 12
6941: AND
6942: IFFALSE 6962
6944: GO 6946
6946: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6947: LD_INT 32
6949: PPUSH
6950: LD_OWVAR 2
6954: PPUSH
6955: LD_INT 0
6957: PPUSH
6958: CALL_OW 324
6962: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6963: LD_EXP 2
6967: IFFALSE 6975
6969: PUSH
6970: LD_EXP 13
6974: AND
6975: IFFALSE 7158
6977: GO 6979
6979: DISABLE
6980: LD_INT 0
6982: PPUSH
6983: PPUSH
6984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_OWVAR 2
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 33
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: ST_TO_ADDR
// if not tmp then
7021: LD_VAR 0 2
7025: NOT
7026: IFFALSE 7030
// exit ;
7028: GO 7158
// side := 0 ;
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// for i := 1 to 8 do
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: DOUBLE
7044: LD_INT 1
7046: DEC
7047: ST_TO_ADDR
7048: LD_INT 8
7050: PUSH
7051: FOR_TO
7052: IFFALSE 7102
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7054: LD_OWVAR 2
7058: PUSH
7059: LD_VAR 0 1
7063: NONEQUAL
7064: IFFALSE 7086
7066: PUSH
7067: LD_OWVAR 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 81
7081: PUSH
7082: LD_INT 2
7084: EQUAL
7085: AND
7086: IFFALSE 7100
// begin side := i ;
7088: LD_ADDR_VAR 0 3
7092: PUSH
7093: LD_VAR 0 1
7097: ST_TO_ADDR
// break ;
7098: GO 7102
// end ;
7100: GO 7051
7102: POP
7103: POP
// if not side then
7104: LD_VAR 0 3
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 7158
// for i := 1 to tmp do
7113: LD_ADDR_VAR 0 1
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_VAR 0 2
7127: PUSH
7128: FOR_TO
7129: IFFALSE 7156
// if Prob ( 60 ) then
7131: LD_INT 60
7133: PPUSH
7134: CALL_OW 13
7138: IFFALSE 7154
// SetSide ( i , side ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: LD_VAR 0 3
7149: PPUSH
7150: CALL_OW 235
7154: GO 7128
7156: POP
7157: POP
// end ;
7158: PPOPN 3
7160: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7161: LD_EXP 2
7165: IFFALSE 7173
7167: PUSH
7168: LD_EXP 15
7172: AND
7173: IFFALSE 7292
7175: GO 7177
7177: DISABLE
7178: LD_INT 0
7180: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7181: LD_ADDR_VAR 0 1
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_OWVAR 2
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 21
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 3
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: PPUSH
7230: CALL_OW 69
7234: PUSH
7235: FOR_IN
7236: IFFALSE 7290
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7238: LD_VAR 0 1
7242: PPUSH
7243: CALL_OW 257
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: IN
7266: IFFALSE 7288
// SetClass ( un , rand ( 1 , 4 ) ) ;
7268: LD_VAR 0 1
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: LD_INT 4
7278: PPUSH
7279: CALL_OW 12
7283: PPUSH
7284: CALL_OW 336
7288: GO 7235
7290: POP
7291: POP
// end ;
7292: PPOPN 1
7294: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7295: LD_EXP 2
7299: IFFALSE 7307
7301: PUSH
7302: LD_EXP 14
7306: AND
7307: IFFALSE 7386
7309: GO 7311
7311: DISABLE
7312: LD_INT 0
7314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 22
7322: PUSH
7323: LD_OWVAR 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 21
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 69
7350: ST_TO_ADDR
// if not tmp then
7351: LD_VAR 0 1
7355: NOT
7356: IFFALSE 7360
// exit ;
7358: GO 7386
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7360: LD_VAR 0 1
7364: PUSH
7365: LD_INT 1
7367: PPUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 12
7377: ARRAY
7378: PPUSH
7379: LD_INT 100
7381: PPUSH
7382: CALL_OW 234
// end ;
7386: PPOPN 1
7388: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7389: LD_EXP 2
7393: IFFALSE 7401
7395: PUSH
7396: LD_EXP 16
7400: AND
7401: IFFALSE 7499
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_OWVAR 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 21
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: ST_TO_ADDR
// if not tmp then
7445: LD_VAR 0 1
7449: NOT
7450: IFFALSE 7454
// exit ;
7452: GO 7499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7454: LD_VAR 0 1
7458: PUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 12
7471: ARRAY
7472: PPUSH
7473: LD_INT 1
7475: PPUSH
7476: LD_INT 4
7478: PPUSH
7479: CALL_OW 12
7483: PPUSH
7484: LD_INT 3000
7486: PPUSH
7487: LD_INT 9000
7489: PPUSH
7490: CALL_OW 12
7494: PPUSH
7495: CALL_OW 492
// end ;
7499: PPOPN 1
7501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7502: LD_EXP 2
7506: IFFALSE 7514
7508: PUSH
7509: LD_EXP 17
7513: AND
7514: IFFALSE 7534
7516: GO 7518
7518: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7519: LD_INT 1
7521: PPUSH
7522: LD_OWVAR 2
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 324
7534: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7535: LD_EXP 2
7539: IFFALSE 7547
7541: PUSH
7542: LD_EXP 18
7546: AND
7547: IFFALSE 7630
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7556: LD_ADDR_VAR 0 2
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_OWVAR 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 21
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PPUSH
7587: CALL_OW 69
7591: ST_TO_ADDR
// if not tmp then
7592: LD_VAR 0 2
7596: NOT
7597: IFFALSE 7601
// exit ;
7599: GO 7630
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 7628
// SetBLevel ( i , 10 ) ;
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 10
7621: PPUSH
7622: CALL_OW 241
7626: GO 7611
7628: POP
7629: POP
// end ;
7630: PPOPN 2
7632: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7633: LD_EXP 2
7637: IFFALSE 7645
7639: PUSH
7640: LD_EXP 19
7644: AND
7645: IFFALSE 7756
7647: GO 7649
7649: DISABLE
7650: LD_INT 0
7652: PPUSH
7653: PPUSH
7654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7655: LD_ADDR_VAR 0 3
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_OWVAR 2
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 1
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 69
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 3
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7756
// un := tmp [ rand ( 1 , tmp ) ] ;
7700: LD_ADDR_VAR 0 2
7704: PUSH
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: PPUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 12
7722: ARRAY
7723: ST_TO_ADDR
// if Crawls ( un ) then
7724: LD_VAR 0 2
7728: PPUSH
7729: CALL_OW 318
7733: IFFALSE 7744
// ComWalk ( un ) ;
7735: LD_VAR 0 2
7739: PPUSH
7740: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_INT 5
7751: PPUSH
7752: CALL_OW 336
// end ;
7756: PPOPN 3
7758: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7759: LD_EXP 2
7763: IFFALSE 7771
7765: PUSH
7766: LD_EXP 20
7770: AND
7771: IFFALSE 7783
7773: PUSH
7774: LD_OWVAR 67
7778: PUSH
7779: LD_INT 4
7781: LESS
7782: AND
7783: IFFALSE 7802
7785: GO 7787
7787: DISABLE
// begin Difficulty := Difficulty + 1 ;
7788: LD_ADDR_OWVAR 67
7792: PUSH
7793: LD_OWVAR 67
7797: PUSH
7798: LD_INT 1
7800: PLUS
7801: ST_TO_ADDR
// end ;
7802: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7803: LD_EXP 2
7807: IFFALSE 7815
7809: PUSH
7810: LD_EXP 21
7814: AND
7815: IFFALSE 7918
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
// begin for i := 1 to 5 do
7823: LD_ADDR_VAR 0 1
7827: PUSH
7828: DOUBLE
7829: LD_INT 1
7831: DEC
7832: ST_TO_ADDR
7833: LD_INT 5
7835: PUSH
7836: FOR_TO
7837: IFFALSE 7916
// begin uc_nation := nation_nature ;
7839: LD_ADDR_OWVAR 21
7843: PUSH
7844: LD_INT 0
7846: ST_TO_ADDR
// uc_side := 0 ;
7847: LD_ADDR_OWVAR 20
7851: PUSH
7852: LD_INT 0
7854: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7855: LD_ADDR_OWVAR 29
7859: PUSH
7860: LD_INT 12
7862: PUSH
7863: LD_INT 12
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: ST_TO_ADDR
// hc_agressivity := 20 ;
7870: LD_ADDR_OWVAR 35
7874: PUSH
7875: LD_INT 20
7877: ST_TO_ADDR
// hc_class := class_tiger ;
7878: LD_ADDR_OWVAR 28
7882: PUSH
7883: LD_INT 14
7885: ST_TO_ADDR
// hc_gallery :=  ;
7886: LD_ADDR_OWVAR 33
7890: PUSH
7891: LD_STRING 
7893: ST_TO_ADDR
// hc_name :=  ;
7894: LD_ADDR_OWVAR 26
7898: PUSH
7899: LD_STRING 
7901: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7902: CALL_OW 44
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 51
// end ;
7914: GO 7836
7916: POP
7917: POP
// end ;
7918: PPOPN 1
7920: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7921: LD_EXP 2
7925: IFFALSE 7933
7927: PUSH
7928: LD_EXP 22
7932: AND
7933: IFFALSE 7942
7935: GO 7937
7937: DISABLE
// StreamSibBomb ;
7938: CALL 7943 0 0
7942: END
// export function StreamSibBomb ; var i , x , y ; begin
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// result := false ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// for i := 1 to 16 do
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: DOUBLE
7963: LD_INT 1
7965: DEC
7966: ST_TO_ADDR
7967: LD_INT 16
7969: PUSH
7970: FOR_TO
7971: IFFALSE 8170
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_INT 10
7980: PUSH
7981: LD_INT 20
7983: PUSH
7984: LD_INT 30
7986: PUSH
7987: LD_INT 40
7989: PUSH
7990: LD_INT 50
7992: PUSH
7993: LD_INT 60
7995: PUSH
7996: LD_INT 70
7998: PUSH
7999: LD_INT 80
8001: PUSH
8002: LD_INT 90
8004: PUSH
8005: LD_INT 100
8007: PUSH
8008: LD_INT 110
8010: PUSH
8011: LD_INT 120
8013: PUSH
8014: LD_INT 130
8016: PUSH
8017: LD_INT 140
8019: PUSH
8020: LD_INT 150
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 1
8042: PPUSH
8043: LD_INT 15
8045: PPUSH
8046: CALL_OW 12
8050: ARRAY
8051: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 10
8059: PUSH
8060: LD_INT 20
8062: PUSH
8063: LD_INT 30
8065: PUSH
8066: LD_INT 40
8068: PUSH
8069: LD_INT 50
8071: PUSH
8072: LD_INT 60
8074: PUSH
8075: LD_INT 70
8077: PUSH
8078: LD_INT 80
8080: PUSH
8081: LD_INT 90
8083: PUSH
8084: LD_INT 100
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 120
8092: PUSH
8093: LD_INT 130
8095: PUSH
8096: LD_INT 140
8098: PUSH
8099: LD_INT 150
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 15
8124: PPUSH
8125: CALL_OW 12
8129: ARRAY
8130: ST_TO_ADDR
// if ValidHex ( x , y ) then
8131: LD_VAR 0 3
8135: PPUSH
8136: LD_VAR 0 4
8140: PPUSH
8141: CALL_OW 488
8145: IFFALSE 8168
// begin result := [ x , y ] ;
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_VAR 0 3
8156: PUSH
8157: LD_VAR 0 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: ST_TO_ADDR
// break ;
8166: GO 8170
// end ; end ;
8168: GO 7970
8170: POP
8171: POP
// if result then
8172: LD_VAR 0 1
8176: IFFALSE 8236
// begin ToLua ( playSibBomb() ) ;
8178: LD_STRING playSibBomb()
8180: PPUSH
8181: CALL_OW 559
// wait ( 0 0$14 ) ;
8185: LD_INT 490
8187: PPUSH
8188: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8192: LD_VAR 0 1
8196: PUSH
8197: LD_INT 1
8199: ARRAY
8200: PPUSH
8201: LD_VAR 0 1
8205: PUSH
8206: LD_INT 2
8208: ARRAY
8209: PPUSH
8210: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8214: LD_VAR 0 1
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: LD_VAR 0 1
8227: PUSH
8228: LD_INT 2
8230: ARRAY
8231: PPUSH
8232: CALL_OW 429
// end ; end ;
8236: LD_VAR 0 1
8240: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8241: LD_EXP 2
8245: IFFALSE 8253
8247: PUSH
8248: LD_EXP 24
8252: AND
8253: IFFALSE 8265
8255: GO 8257
8257: DISABLE
// YouLost (  ) ;
8258: LD_STRING 
8260: PPUSH
8261: CALL_OW 104
8265: END
// every 0 0$1 trigger StreamModeActive and sFog do
8266: LD_EXP 2
8270: IFFALSE 8278
8272: PUSH
8273: LD_EXP 23
8277: AND
8278: IFFALSE 8292
8280: GO 8282
8282: DISABLE
// FogOff ( your_side ) ;
8283: LD_OWVAR 2
8287: PPUSH
8288: CALL_OW 344
8292: END
// every 0 0$1 trigger StreamModeActive and sSun do
8293: LD_EXP 2
8297: IFFALSE 8305
8299: PUSH
8300: LD_EXP 25
8304: AND
8305: IFFALSE 8333
8307: GO 8309
8309: DISABLE
// begin solar_recharge_percent := 0 ;
8310: LD_ADDR_OWVAR 79
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8318: LD_INT 10500
8320: PPUSH
8321: CALL_OW 67
// solar_recharge_percent := 100 ;
8325: LD_ADDR_OWVAR 79
8329: PUSH
8330: LD_INT 100
8332: ST_TO_ADDR
// end ;
8333: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8334: LD_EXP 2
8338: IFFALSE 8346
8340: PUSH
8341: LD_EXP 26
8345: AND
8346: IFFALSE 8585
8348: GO 8350
8350: DISABLE
8351: LD_INT 0
8353: PPUSH
8354: PPUSH
8355: PPUSH
// begin tmp := [ ] ;
8356: LD_ADDR_VAR 0 3
8360: PUSH
8361: EMPTY
8362: ST_TO_ADDR
// for i := 1 to 6 do
8363: LD_ADDR_VAR 0 1
8367: PUSH
8368: DOUBLE
8369: LD_INT 1
8371: DEC
8372: ST_TO_ADDR
8373: LD_INT 6
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8482
// begin uc_nation := nation_nature ;
8379: LD_ADDR_OWVAR 21
8383: PUSH
8384: LD_INT 0
8386: ST_TO_ADDR
// uc_side := 0 ;
8387: LD_ADDR_OWVAR 20
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8395: LD_ADDR_OWVAR 29
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: LD_INT 12
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: ST_TO_ADDR
// hc_agressivity := 20 ;
8410: LD_ADDR_OWVAR 35
8414: PUSH
8415: LD_INT 20
8417: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8418: LD_ADDR_OWVAR 28
8422: PUSH
8423: LD_INT 17
8425: ST_TO_ADDR
// hc_gallery :=  ;
8426: LD_ADDR_OWVAR 33
8430: PUSH
8431: LD_STRING 
8433: ST_TO_ADDR
// hc_name :=  ;
8434: LD_ADDR_OWVAR 26
8438: PUSH
8439: LD_STRING 
8441: ST_TO_ADDR
// un := CreateHuman ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8452: LD_VAR 0 2
8456: PPUSH
8457: LD_INT 1
8459: PPUSH
8460: CALL_OW 51
// tmp := tmp ^ un ;
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_VAR 0 3
8473: PUSH
8474: LD_VAR 0 2
8478: ADD
8479: ST_TO_ADDR
// end ;
8480: GO 8376
8482: POP
8483: POP
// repeat wait ( 0 0$1 ) ;
8484: LD_INT 35
8486: PPUSH
8487: CALL_OW 67
// for un in tmp do
8491: LD_ADDR_VAR 0 2
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: FOR_IN
8502: IFFALSE 8576
// begin if IsDead ( un ) then
8504: LD_VAR 0 2
8508: PPUSH
8509: CALL_OW 301
8513: IFFALSE 8533
// begin tmp := tmp diff un ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_VAR 0 3
8524: PUSH
8525: LD_VAR 0 2
8529: DIFF
8530: ST_TO_ADDR
// continue ;
8531: GO 8501
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8533: LD_VAR 0 2
8537: PPUSH
8538: LD_INT 3
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 0
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 69
8559: PPUSH
8560: LD_VAR 0 2
8564: PPUSH
8565: CALL_OW 74
8569: PPUSH
8570: CALL_OW 115
// end ;
8574: GO 8501
8576: POP
8577: POP
// until not tmp ;
8578: LD_VAR 0 3
8582: NOT
8583: IFFALSE 8484
// end ;
8585: PPOPN 3
8587: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8588: LD_EXP 2
8592: IFFALSE 8600
8594: PUSH
8595: LD_EXP 27
8599: AND
8600: IFFALSE 8654
8602: GO 8604
8604: DISABLE
// begin ToLua ( displayTroll(); ) ;
8605: LD_STRING displayTroll();
8607: PPUSH
8608: CALL_OW 559
// wait ( 3 3$00 ) ;
8612: LD_INT 6300
8614: PPUSH
8615: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8619: LD_STRING hideTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 1 1$00 ) ;
8626: LD_INT 2100
8628: PPUSH
8629: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8633: LD_STRING displayTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8647: LD_STRING hideTroll();
8649: PPUSH
8650: CALL_OW 559
// end ;
8654: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8655: LD_EXP 2
8659: IFFALSE 8667
8661: PUSH
8662: LD_EXP 28
8666: AND
8667: IFFALSE 8730
8669: GO 8671
8671: DISABLE
8672: LD_INT 0
8674: PPUSH
// begin p := 0 ;
8675: LD_ADDR_VAR 0 1
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// repeat game_speed := 1 ;
8683: LD_ADDR_OWVAR 65
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// p := p + 1 ;
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 1
8707: PUSH
8708: LD_INT 1
8710: PLUS
8711: ST_TO_ADDR
// until p >= 60 ;
8712: LD_VAR 0 1
8716: PUSH
8717: LD_INT 60
8719: GREATEREQUAL
8720: IFFALSE 8683
// game_speed := 4 ;
8722: LD_ADDR_OWVAR 65
8726: PUSH
8727: LD_INT 4
8729: ST_TO_ADDR
// end ;
8730: PPOPN 1
8732: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8733: LD_EXP 2
8737: IFFALSE 8745
8739: PUSH
8740: LD_EXP 29
8744: AND
8745: IFFALSE 8891
8747: GO 8749
8749: DISABLE
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8754: LD_ADDR_VAR 0 1
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_OWVAR 2
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: LD_INT 30
8776: PUSH
8777: LD_INT 0
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 69
8807: ST_TO_ADDR
// if not depot then
8808: LD_VAR 0 1
8812: NOT
8813: IFFALSE 8817
// exit ;
8815: GO 8891
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: LD_INT 1
8829: PPUSH
8830: LD_VAR 0 1
8834: PPUSH
8835: CALL_OW 12
8839: ARRAY
8840: PPUSH
8841: CALL_OW 274
8845: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8846: LD_VAR 0 2
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 0
8856: PPUSH
8857: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: LD_INT 0
8871: PPUSH
8872: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8876: LD_VAR 0 2
8880: PPUSH
8881: LD_INT 3
8883: PPUSH
8884: LD_INT 0
8886: PPUSH
8887: CALL_OW 277
// end ;
8891: PPOPN 2
8893: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8894: LD_EXP 2
8898: IFFALSE 8906
8900: PUSH
8901: LD_EXP 30
8905: AND
8906: IFFALSE 9003
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_OWVAR 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 21
8933: PUSH
8934: LD_INT 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 3
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PPUSH
8963: CALL_OW 69
8967: ST_TO_ADDR
// if not tmp then
8968: LD_VAR 0 1
8972: NOT
8973: IFFALSE 8977
// exit ;
8975: GO 9003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8977: LD_VAR 0 1
8981: PUSH
8982: LD_INT 1
8984: PPUSH
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 12
8994: ARRAY
8995: PPUSH
8996: LD_INT 200
8998: PPUSH
8999: CALL_OW 234
// end ;
9003: PPOPN 1
9005: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9006: LD_EXP 2
9010: IFFALSE 9018
9012: PUSH
9013: LD_EXP 31
9017: AND
9018: IFFALSE 9097
9020: GO 9022
9022: DISABLE
9023: LD_INT 0
9025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: LD_INT 22
9033: PUSH
9034: LD_OWVAR 2
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 2
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: ST_TO_ADDR
// if not tmp then
9062: LD_VAR 0 1
9066: NOT
9067: IFFALSE 9071
// exit ;
9069: GO 9097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9071: LD_VAR 0 1
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: PPUSH
9090: LD_INT 60
9092: PPUSH
9093: CALL_OW 234
// end ;
9097: PPOPN 1
9099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9100: LD_EXP 2
9104: IFFALSE 9112
9106: PUSH
9107: LD_EXP 32
9111: AND
9112: IFFALSE 9211
9114: GO 9116
9116: DISABLE
9117: LD_INT 0
9119: PPUSH
9120: PPUSH
// begin enable ;
9121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9122: LD_ADDR_VAR 0 1
9126: PUSH
9127: LD_INT 22
9129: PUSH
9130: LD_OWVAR 2
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 61
9141: PUSH
9142: EMPTY
9143: LIST
9144: PUSH
9145: LD_INT 33
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 69
9164: ST_TO_ADDR
// if not tmp then
9165: LD_VAR 0 1
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9211
// for i in tmp do
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: LD_VAR 0 1
9183: PUSH
9184: FOR_IN
9185: IFFALSE 9209
// if IsControledBy ( i ) then
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 312
9196: IFFALSE 9207
// ComUnlink ( i ) ;
9198: LD_VAR 0 2
9202: PPUSH
9203: CALL_OW 136
9207: GO 9184
9209: POP
9210: POP
// end ;
9211: PPOPN 2
9213: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9214: LD_EXP 2
9218: IFFALSE 9226
9220: PUSH
9221: LD_EXP 33
9225: AND
9226: IFFALSE 9366
9228: GO 9230
9230: DISABLE
9231: LD_INT 0
9233: PPUSH
9234: PPUSH
// begin ToLua ( displayPowell(); ) ;
9235: LD_STRING displayPowell();
9237: PPUSH
9238: CALL_OW 559
// uc_side := 0 ;
9242: LD_ADDR_OWVAR 20
9246: PUSH
9247: LD_INT 0
9249: ST_TO_ADDR
// uc_nation := 2 ;
9250: LD_ADDR_OWVAR 21
9254: PUSH
9255: LD_INT 2
9257: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9258: LD_ADDR_OWVAR 37
9262: PUSH
9263: LD_INT 14
9265: ST_TO_ADDR
// vc_engine := engine_siberite ;
9266: LD_ADDR_OWVAR 39
9270: PUSH
9271: LD_INT 3
9273: ST_TO_ADDR
// vc_control := control_apeman ;
9274: LD_ADDR_OWVAR 38
9278: PUSH
9279: LD_INT 5
9281: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9282: LD_ADDR_OWVAR 40
9286: PUSH
9287: LD_INT 29
9289: ST_TO_ADDR
// un := CreateVehicle ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: CALL_OW 45
9299: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9300: LD_VAR 0 2
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9312: LD_INT 35
9314: PPUSH
9315: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 22
9326: PUSH
9327: LD_OWVAR 2
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PPUSH
9336: CALL_OW 69
9340: PPUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL_OW 74
9350: PPUSH
9351: CALL_OW 115
// until IsDead ( un ) ;
9355: LD_VAR 0 2
9359: PPUSH
9360: CALL_OW 301
9364: IFFALSE 9312
// end ;
9366: PPOPN 2
9368: END
// every 0 0$1 trigger StreamModeActive and sStu do
9369: LD_EXP 2
9373: IFFALSE 9381
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: IFFALSE 9410
9404: PUSH
9405: LD_EXP 34
9409: AND
9410: IFFALSE 9551
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9419: LD_ADDR_VAR 0 2
9423: PUSH
9424: LD_INT 22
9426: PUSH
9427: LD_OWVAR 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 69
9454: ST_TO_ADDR
// if not tmp then
9455: LD_VAR 0 2
9459: NOT
9460: IFFALSE 9464
// exit ;
9462: GO 9551
// un := tmp [ rand ( 1 , tmp ) ] ;
9464: LD_ADDR_VAR 0 1
9468: PUSH
9469: LD_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: PPUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 12
9486: ARRAY
9487: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9488: LD_VAR 0 1
9492: PPUSH
9493: LD_INT 0
9495: PPUSH
9496: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9500: LD_VAR 0 1
9504: PPUSH
9505: LD_OWVAR 3
9509: PUSH
9510: LD_VAR 0 1
9514: DIFF
9515: PPUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: CALL_OW 74
9525: PPUSH
9526: CALL_OW 115
// wait ( 0 0$20 ) ;
9530: LD_INT 700
9532: PPUSH
9533: CALL_OW 67
// SetSide ( un , your_side ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_OWVAR 2
9546: PPUSH
9547: CALL_OW 235
// end ;
9551: PPOPN 2
9553: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9554: LD_EXP 2
9558: IFFALSE 9566
9560: PUSH
9561: LD_EXP 35
9565: AND
9566: IFFALSE 9672
9568: GO 9570
9570: DISABLE
9571: LD_INT 0
9573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9574: LD_ADDR_VAR 0 1
9578: PUSH
9579: LD_INT 22
9581: PUSH
9582: LD_OWVAR 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: LD_INT 30
9596: PUSH
9597: LD_INT 0
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 30
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PPUSH
9623: CALL_OW 69
9627: ST_TO_ADDR
// if not depot then
9628: LD_VAR 0 1
9632: NOT
9633: IFFALSE 9637
// exit ;
9635: GO 9672
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: CALL_OW 250
9650: PPUSH
9651: LD_VAR 0 1
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: PPUSH
9660: CALL_OW 251
9664: PPUSH
9665: LD_INT 70
9667: PPUSH
9668: CALL_OW 495
// end ;
9672: PPOPN 1
9674: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9675: LD_EXP 2
9679: IFFALSE 9687
9681: PUSH
9682: LD_EXP 36
9686: AND
9687: IFFALSE 9898
9689: GO 9691
9691: DISABLE
9692: LD_INT 0
9694: PPUSH
9695: PPUSH
9696: PPUSH
9697: PPUSH
9698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9699: LD_ADDR_VAR 0 5
9703: PUSH
9704: LD_INT 22
9706: PUSH
9707: LD_OWVAR 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 5
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9898
// for i in tmp do
9744: LD_ADDR_VAR 0 1
9748: PUSH
9749: LD_VAR 0 5
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9896
// begin d := rand ( 0 , 5 ) ;
9757: LD_ADDR_VAR 0 4
9761: PUSH
9762: LD_INT 0
9764: PPUSH
9765: LD_INT 5
9767: PPUSH
9768: CALL_OW 12
9772: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 250
9787: PPUSH
9788: LD_VAR 0 4
9792: PPUSH
9793: LD_INT 3
9795: PPUSH
9796: LD_INT 12
9798: PPUSH
9799: CALL_OW 12
9803: PPUSH
9804: CALL_OW 272
9808: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_VAR 0 1
9818: PPUSH
9819: CALL_OW 251
9823: PPUSH
9824: LD_VAR 0 4
9828: PPUSH
9829: LD_INT 3
9831: PPUSH
9832: LD_INT 12
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL_OW 273
9844: ST_TO_ADDR
// if ValidHex ( x , y ) then
9845: LD_VAR 0 2
9849: PPUSH
9850: LD_VAR 0 3
9854: PPUSH
9855: CALL_OW 488
9859: IFFALSE 9894
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: LD_INT 3
9878: PPUSH
9879: LD_INT 6
9881: PPUSH
9882: CALL_OW 12
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 483
// end ;
9894: GO 9754
9896: POP
9897: POP
// end ;
9898: PPOPN 5
9900: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9901: LD_EXP 2
9905: IFFALSE 9913
9907: PUSH
9908: LD_EXP 37
9912: AND
9913: IFFALSE 10007
9915: GO 9917
9917: DISABLE
9918: LD_INT 0
9920: PPUSH
9921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 22
9929: PUSH
9930: LD_OWVAR 2
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 32
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: ST_TO_ADDR
// if not tmp then
9969: LD_VAR 0 2
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10007
// for i in tmp do
9978: LD_ADDR_VAR 0 1
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: FOR_IN
9989: IFFALSE 10005
// SetFuel ( i , 0 ) ;
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_INT 0
9998: PPUSH
9999: CALL_OW 240
10003: GO 9988
10005: POP
10006: POP
// end ;
10007: PPOPN 2
10009: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10010: LD_EXP 2
10014: IFFALSE 10022
10016: PUSH
10017: LD_EXP 38
10021: AND
10022: IFFALSE 10088
10024: GO 10026
10026: DISABLE
10027: LD_INT 0
10029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10030: LD_ADDR_VAR 0 1
10034: PUSH
10035: LD_INT 22
10037: PUSH
10038: LD_OWVAR 2
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 30
10049: PUSH
10050: LD_INT 29
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: CALL_OW 69
10065: ST_TO_ADDR
// if not tmp then
10066: LD_VAR 0 1
10070: NOT
10071: IFFALSE 10075
// exit ;
10073: GO 10088
// DestroyUnit ( tmp [ 1 ] ) ;
10075: LD_VAR 0 1
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: PPUSH
10084: CALL_OW 65
// end ;
10088: PPOPN 1
10090: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10091: LD_EXP 2
10095: IFFALSE 10103
10097: PUSH
10098: LD_EXP 40
10102: AND
10103: IFFALSE 10232
10105: GO 10107
10107: DISABLE
10108: LD_INT 0
10110: PPUSH
// begin uc_side := 0 ;
10111: LD_ADDR_OWVAR 20
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// uc_nation := nation_arabian ;
10119: LD_ADDR_OWVAR 21
10123: PUSH
10124: LD_INT 2
10126: ST_TO_ADDR
// hc_gallery :=  ;
10127: LD_ADDR_OWVAR 33
10131: PUSH
10132: LD_STRING 
10134: ST_TO_ADDR
// hc_name :=  ;
10135: LD_ADDR_OWVAR 26
10139: PUSH
10140: LD_STRING 
10142: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10143: LD_INT 1
10145: PPUSH
10146: LD_INT 11
10148: PPUSH
10149: LD_INT 10
10151: PPUSH
10152: CALL_OW 380
// un := CreateHuman ;
10156: LD_ADDR_VAR 0 1
10160: PUSH
10161: CALL_OW 44
10165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10178: LD_INT 35
10180: PPUSH
10181: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10185: LD_VAR 0 1
10189: PPUSH
10190: LD_INT 22
10192: PUSH
10193: LD_OWVAR 2
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 74
10216: PPUSH
10217: CALL_OW 115
// until IsDead ( un ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 301
10230: IFFALSE 10178
// end ;
10232: PPOPN 1
10234: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10235: LD_EXP 2
10239: IFFALSE 10247
10241: PUSH
10242: LD_EXP 42
10246: AND
10247: IFFALSE 10259
10249: GO 10251
10251: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10252: LD_STRING earthquake(getX(game), 0, 32)
10254: PPUSH
10255: CALL_OW 559
10259: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10260: LD_EXP 2
10264: IFFALSE 10272
10266: PUSH
10267: LD_EXP 43
10271: AND
10272: IFFALSE 10363
10274: GO 10276
10276: DISABLE
10277: LD_INT 0
10279: PPUSH
// begin enable ;
10280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10281: LD_ADDR_VAR 0 1
10285: PUSH
10286: LD_INT 22
10288: PUSH
10289: LD_OWVAR 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 33
10310: PUSH
10311: LD_INT 3
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: ST_TO_ADDR
// if not tmp then
10328: LD_VAR 0 1
10332: NOT
10333: IFFALSE 10337
// exit ;
10335: GO 10363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10337: LD_VAR 0 1
10341: PUSH
10342: LD_INT 1
10344: PPUSH
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 234
// end ;
10363: PPOPN 1
10365: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10366: LD_EXP 2
10370: IFFALSE 10378
10372: PUSH
10373: LD_EXP 44
10377: AND
10378: IFFALSE 10519
10380: GO 10382
10382: DISABLE
10383: LD_INT 0
10385: PPUSH
10386: PPUSH
10387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10388: LD_ADDR_VAR 0 3
10392: PUSH
10393: LD_INT 22
10395: PUSH
10396: LD_OWVAR 2
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 25
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PPUSH
10419: CALL_OW 69
10423: ST_TO_ADDR
// if not tmp then
10424: LD_VAR 0 3
10428: NOT
10429: IFFALSE 10433
// exit ;
10431: GO 10519
// un := tmp [ rand ( 1 , tmp ) ] ;
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 1
10445: PPUSH
10446: LD_VAR 0 3
10450: PPUSH
10451: CALL_OW 12
10455: ARRAY
10456: ST_TO_ADDR
// if Crawls ( un ) then
10457: LD_VAR 0 2
10461: PPUSH
10462: CALL_OW 318
10466: IFFALSE 10477
// ComWalk ( un ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10477: LD_VAR 0 2
10481: PPUSH
10482: LD_INT 9
10484: PPUSH
10485: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10489: LD_INT 28
10491: PPUSH
10492: LD_OWVAR 2
10496: PPUSH
10497: LD_INT 2
10499: PPUSH
10500: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10504: LD_INT 29
10506: PPUSH
10507: LD_OWVAR 2
10511: PPUSH
10512: LD_INT 2
10514: PPUSH
10515: CALL_OW 322
// end ;
10519: PPOPN 3
10521: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10522: LD_EXP 2
10526: IFFALSE 10534
10528: PUSH
10529: LD_EXP 45
10533: AND
10534: IFFALSE 10645
10536: GO 10538
10538: DISABLE
10539: LD_INT 0
10541: PPUSH
10542: PPUSH
10543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10544: LD_ADDR_VAR 0 3
10548: PUSH
10549: LD_INT 22
10551: PUSH
10552: LD_OWVAR 2
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: ST_TO_ADDR
// if not tmp then
10580: LD_VAR 0 3
10584: NOT
10585: IFFALSE 10589
// exit ;
10587: GO 10645
// un := tmp [ rand ( 1 , tmp ) ] ;
10589: LD_ADDR_VAR 0 2
10593: PUSH
10594: LD_VAR 0 3
10598: PUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: CALL_OW 12
10611: ARRAY
10612: ST_TO_ADDR
// if Crawls ( un ) then
10613: LD_VAR 0 2
10617: PPUSH
10618: CALL_OW 318
10622: IFFALSE 10633
// ComWalk ( un ) ;
10624: LD_VAR 0 2
10628: PPUSH
10629: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10633: LD_VAR 0 2
10637: PPUSH
10638: LD_INT 8
10640: PPUSH
10641: CALL_OW 336
// end ;
10645: PPOPN 3
10647: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10648: LD_EXP 2
10652: IFFALSE 10660
10654: PUSH
10655: LD_EXP 46
10659: AND
10660: IFFALSE 10804
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_OWVAR 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 21
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 34
10711: PUSH
10712: LD_INT 51
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10804
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10802
// if GetCargo ( i , mat_artifact ) = 0 then
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 4
10774: PPUSH
10775: CALL_OW 289
10779: PUSH
10780: LD_INT 0
10782: EQUAL
10783: IFFALSE 10800
// SetCargo ( i , mat_siberit , 100 ) ;
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 3
10792: PPUSH
10793: LD_INT 100
10795: PPUSH
10796: CALL_OW 290
10800: GO 10764
10802: POP
10803: POP
// end ;
10804: PPOPN 2
10806: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10807: LD_EXP 2
10811: IFFALSE 10819
10813: PUSH
10814: LD_EXP 47
10818: AND
10819: IFFALSE 11002
10821: GO 10823
10823: DISABLE
10824: LD_INT 0
10826: PPUSH
10827: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_OWVAR 2
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: ST_TO_ADDR
// if not tmp then
10850: LD_VAR 0 2
10854: NOT
10855: IFFALSE 10859
// exit ;
10857: GO 11002
// for i := 1 to 2 do
10859: LD_ADDR_VAR 0 1
10863: PUSH
10864: DOUBLE
10865: LD_INT 1
10867: DEC
10868: ST_TO_ADDR
10869: LD_INT 2
10871: PUSH
10872: FOR_TO
10873: IFFALSE 11000
// begin uc_side := your_side ;
10875: LD_ADDR_OWVAR 20
10879: PUSH
10880: LD_OWVAR 2
10884: ST_TO_ADDR
// uc_nation := nation_american ;
10885: LD_ADDR_OWVAR 21
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// vc_chassis := us_morphling ;
10893: LD_ADDR_OWVAR 37
10897: PUSH
10898: LD_INT 5
10900: ST_TO_ADDR
// vc_engine := engine_siberite ;
10901: LD_ADDR_OWVAR 39
10905: PUSH
10906: LD_INT 3
10908: ST_TO_ADDR
// vc_control := control_computer ;
10909: LD_ADDR_OWVAR 38
10913: PUSH
10914: LD_INT 3
10916: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10917: LD_ADDR_OWVAR 40
10921: PUSH
10922: LD_INT 10
10924: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10925: LD_VAR 0 2
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: PPUSH
10934: CALL_OW 310
10938: NOT
10939: IFFALSE 10986
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10941: CALL_OW 45
10945: PPUSH
10946: LD_VAR 0 2
10950: PUSH
10951: LD_INT 1
10953: ARRAY
10954: PPUSH
10955: CALL_OW 250
10959: PPUSH
10960: LD_VAR 0 2
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PPUSH
10969: CALL_OW 251
10973: PPUSH
10974: LD_INT 12
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 50
10984: GO 10998
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10986: CALL_OW 45
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 51
// end ;
10998: GO 10872
11000: POP
11001: POP
// end ;
11002: PPOPN 2
11004: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11005: LD_EXP 2
11009: IFFALSE 11017
11011: PUSH
11012: LD_EXP 48
11016: AND
11017: IFFALSE 11239
11019: GO 11021
11021: DISABLE
11022: LD_INT 0
11024: PPUSH
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_INT 22
11037: PUSH
11038: LD_OWVAR 2
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: LD_INT 23
11062: PUSH
11063: LD_INT 0
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 69
11083: ST_TO_ADDR
// if not tmp then
11084: LD_VAR 0 6
11088: NOT
11089: IFFALSE 11093
// exit ;
11091: GO 11239
// s1 := rand ( 1 , 4 ) ;
11093: LD_ADDR_VAR 0 2
11097: PUSH
11098: LD_INT 1
11100: PPUSH
11101: LD_INT 4
11103: PPUSH
11104: CALL_OW 12
11108: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11109: LD_ADDR_VAR 0 4
11113: PUSH
11114: LD_VAR 0 6
11118: PUSH
11119: LD_INT 1
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 2
11127: PPUSH
11128: CALL_OW 259
11132: ST_TO_ADDR
// if s1 = 1 then
11133: LD_VAR 0 2
11137: PUSH
11138: LD_INT 1
11140: EQUAL
11141: IFFALSE 11161
// s2 := rand ( 2 , 4 ) else
11143: LD_ADDR_VAR 0 3
11147: PUSH
11148: LD_INT 2
11150: PPUSH
11151: LD_INT 4
11153: PPUSH
11154: CALL_OW 12
11158: ST_TO_ADDR
11159: GO 11169
// s2 := 1 ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11169: LD_ADDR_VAR 0 5
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: CALL_OW 259
11192: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11193: LD_VAR 0 6
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PPUSH
11202: LD_VAR 0 2
11206: PPUSH
11207: LD_VAR 0 5
11211: PPUSH
11212: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11216: LD_VAR 0 6
11220: PUSH
11221: LD_INT 1
11223: ARRAY
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_VAR 0 4
11234: PPUSH
11235: CALL_OW 237
// end ;
11239: PPOPN 6
11241: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11242: LD_EXP 2
11246: IFFALSE 11254
11248: PUSH
11249: LD_EXP 49
11253: AND
11254: IFFALSE 11333
11256: GO 11258
11258: DISABLE
11259: LD_INT 0
11261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_INT 22
11269: PUSH
11270: LD_OWVAR 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: LD_INT 3
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: ST_TO_ADDR
// if not tmp then
11298: LD_VAR 0 1
11302: NOT
11303: IFFALSE 11307
// exit ;
11305: GO 11333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11307: LD_VAR 0 1
11311: PUSH
11312: LD_INT 1
11314: PPUSH
11315: LD_VAR 0 1
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 234
// end ;
11333: PPOPN 1
11335: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11336: LD_EXP 2
11340: IFFALSE 11348
11342: PUSH
11343: LD_EXP 50
11347: AND
11348: IFFALSE 11460
11350: GO 11352
11352: DISABLE
11353: LD_INT 0
11355: PPUSH
11356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11357: LD_ADDR_VAR 0 2
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_OWVAR 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 30
11379: PUSH
11380: LD_INT 27
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 26
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 28
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 69
11421: ST_TO_ADDR
// if not tmp then
11422: LD_VAR 0 2
11426: NOT
11427: IFFALSE 11431
// exit ;
11429: GO 11460
// for i in tmp do
11431: LD_ADDR_VAR 0 1
11435: PUSH
11436: LD_VAR 0 2
11440: PUSH
11441: FOR_IN
11442: IFFALSE 11458
// SetLives ( i , 1 ) ;
11444: LD_VAR 0 1
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 234
11456: GO 11441
11458: POP
11459: POP
// end ;
11460: PPOPN 2
11462: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11463: LD_EXP 2
11467: IFFALSE 11475
11469: PUSH
11470: LD_EXP 51
11474: AND
11475: IFFALSE 11762
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
11483: PPUSH
11484: PPUSH
// begin i := rand ( 1 , 7 ) ;
11485: LD_ADDR_VAR 0 1
11489: PUSH
11490: LD_INT 1
11492: PPUSH
11493: LD_INT 7
11495: PPUSH
11496: CALL_OW 12
11500: ST_TO_ADDR
// case i of 1 :
11501: LD_VAR 0 1
11505: PUSH
11506: LD_INT 1
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11524
11514: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11515: LD_STRING earthquake(getX(game), 0, 32)
11517: PPUSH
11518: CALL_OW 559
11522: GO 11762
11524: LD_INT 2
11526: DOUBLE
11527: EQUAL
11528: IFTRUE 11532
11530: GO 11546
11532: POP
// begin ToLua ( displayStucuk(); ) ;
11533: LD_STRING displayStucuk();
11535: PPUSH
11536: CALL_OW 559
// ResetFog ;
11540: CALL_OW 335
// end ; 3 :
11544: GO 11762
11546: LD_INT 3
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11658
11554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11555: LD_ADDR_VAR 0 2
11559: PUSH
11560: LD_INT 22
11562: PUSH
11563: LD_OWVAR 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 25
11574: PUSH
11575: LD_INT 1
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: ST_TO_ADDR
// if not tmp then
11591: LD_VAR 0 2
11595: NOT
11596: IFFALSE 11600
// exit ;
11598: GO 11762
// un := tmp [ rand ( 1 , tmp ) ] ;
11600: LD_ADDR_VAR 0 3
11604: PUSH
11605: LD_VAR 0 2
11609: PUSH
11610: LD_INT 1
11612: PPUSH
11613: LD_VAR 0 2
11617: PPUSH
11618: CALL_OW 12
11622: ARRAY
11623: ST_TO_ADDR
// if Crawls ( un ) then
11624: LD_VAR 0 3
11628: PPUSH
11629: CALL_OW 318
11633: IFFALSE 11644
// ComWalk ( un ) ;
11635: LD_VAR 0 3
11639: PPUSH
11640: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 8
11651: PPUSH
11652: CALL_OW 336
// end ; 4 :
11656: GO 11762
11658: LD_INT 4
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11740
11666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_INT 22
11674: PUSH
11675: LD_OWVAR 2
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 30
11686: PUSH
11687: LD_INT 29
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// if not tmp then
11703: LD_VAR 0 2
11707: NOT
11708: IFFALSE 11712
// exit ;
11710: GO 11762
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11712: LD_VAR 0 2
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: PPUSH
11721: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11725: LD_VAR 0 2
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PPUSH
11734: CALL_OW 65
// end ; 5 .. 7 :
11738: GO 11762
11740: LD_INT 5
11742: DOUBLE
11743: GREATEREQUAL
11744: IFFALSE 11752
11746: LD_INT 7
11748: DOUBLE
11749: LESSEQUAL
11750: IFTRUE 11754
11752: GO 11761
11754: POP
// StreamSibBomb ; end ;
11755: CALL 7943 0 0
11759: GO 11762
11761: POP
// end ;
11762: PPOPN 3
11764: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11765: LD_EXP 2
11769: IFFALSE 11777
11771: PUSH
11772: LD_EXP 52
11776: AND
11777: IFFALSE 11933
11779: GO 11781
11781: DISABLE
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11787: LD_ADDR_VAR 0 2
11791: PUSH
11792: LD_INT 81
11794: PUSH
11795: LD_OWVAR 2
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 21
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 21
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: ST_TO_ADDR
// if not tmp then
11841: LD_VAR 0 2
11845: NOT
11846: IFFALSE 11850
// exit ;
11848: GO 11933
// p := 0 ;
11850: LD_ADDR_VAR 0 3
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11858: LD_INT 35
11860: PPUSH
11861: CALL_OW 67
// p := p + 1 ;
11865: LD_ADDR_VAR 0 3
11869: PUSH
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 1
11877: PLUS
11878: ST_TO_ADDR
// for i in tmp do
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_VAR 0 2
11888: PUSH
11889: FOR_IN
11890: IFFALSE 11921
// if GetLives ( i ) < 1000 then
11892: LD_VAR 0 1
11896: PPUSH
11897: CALL_OW 256
11901: PUSH
11902: LD_INT 1000
11904: LESS
11905: IFFALSE 11919
// SetLives ( i , 1000 ) ;
11907: LD_VAR 0 1
11911: PPUSH
11912: LD_INT 1000
11914: PPUSH
11915: CALL_OW 234
11919: GO 11889
11921: POP
11922: POP
// until p > 20 ;
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 20
11930: GREATER
11931: IFFALSE 11858
// end ;
11933: PPOPN 3
11935: END
// every 0 0$1 trigger StreamModeActive and sTime do
11936: LD_EXP 2
11940: IFFALSE 11948
11942: PUSH
11943: LD_EXP 53
11947: AND
11948: IFFALSE 11983
11950: GO 11952
11952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11953: LD_INT 28
11955: PPUSH
11956: LD_OWVAR 2
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11968: LD_INT 30
11970: PPUSH
11971: LD_OWVAR 2
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 322
// end ;
11983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11984: LD_EXP 2
11988: IFFALSE 11996
11990: PUSH
11991: LD_EXP 54
11995: AND
11996: IFFALSE 12117
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12005: LD_ADDR_VAR 0 2
12009: PUSH
12010: LD_INT 22
12012: PUSH
12013: LD_OWVAR 2
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 3
12034: PUSH
12035: LD_INT 23
12037: PUSH
12038: LD_INT 0
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: ST_TO_ADDR
// if not tmp then
12059: LD_VAR 0 2
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 12117
// for i in tmp do
12068: LD_ADDR_VAR 0 1
12072: PUSH
12073: LD_VAR 0 2
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12115
// begin if Crawls ( i ) then
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 318
12090: IFFALSE 12101
// ComWalk ( i ) ;
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 138
// SetClass ( i , 2 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_INT 2
12108: PPUSH
12109: CALL_OW 336
// end ;
12113: GO 12078
12115: POP
12116: POP
// end ;
12117: PPOPN 2
12119: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12120: LD_EXP 2
12124: IFFALSE 12132
12126: PUSH
12127: LD_EXP 55
12131: AND
12132: IFFALSE 12422
12134: GO 12136
12136: DISABLE
12137: LD_INT 0
12139: PPUSH
12140: PPUSH
12141: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12142: LD_OWVAR 2
12146: PPUSH
12147: LD_INT 9
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12160: LD_INT 9
12162: PPUSH
12163: LD_OWVAR 2
12167: PPUSH
12168: CALL_OW 343
// uc_side := 9 ;
12172: LD_ADDR_OWVAR 20
12176: PUSH
12177: LD_INT 9
12179: ST_TO_ADDR
// uc_nation := 2 ;
12180: LD_ADDR_OWVAR 21
12184: PUSH
12185: LD_INT 2
12187: ST_TO_ADDR
// hc_name := Dark Warrior ;
12188: LD_ADDR_OWVAR 26
12192: PUSH
12193: LD_STRING Dark Warrior
12195: ST_TO_ADDR
// hc_gallery :=  ;
12196: LD_ADDR_OWVAR 33
12200: PUSH
12201: LD_STRING 
12203: ST_TO_ADDR
// hc_noskilllimit := true ;
12204: LD_ADDR_OWVAR 76
12208: PUSH
12209: LD_INT 1
12211: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12212: LD_ADDR_OWVAR 31
12216: PUSH
12217: LD_INT 30
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 30
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: ST_TO_ADDR
// un := CreateHuman ;
12235: LD_ADDR_VAR 0 3
12239: PUSH
12240: CALL_OW 44
12244: ST_TO_ADDR
// hc_noskilllimit := false ;
12245: LD_ADDR_OWVAR 76
12249: PUSH
12250: LD_INT 0
12252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 51
// ToLua ( playRanger() ) ;
12265: LD_STRING playRanger()
12267: PPUSH
12268: CALL_OW 559
// p := 0 ;
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12280: LD_INT 35
12282: PPUSH
12283: CALL_OW 67
// p := p + 1 ;
12287: LD_ADDR_VAR 0 2
12291: PUSH
12292: LD_VAR 0 2
12296: PUSH
12297: LD_INT 1
12299: PLUS
12300: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12301: LD_VAR 0 3
12305: PPUSH
12306: CALL_OW 256
12310: PUSH
12311: LD_INT 1000
12313: LESS
12314: IFFALSE 12328
// SetLives ( un , 1000 ) ;
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1000
12323: PPUSH
12324: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 81
12335: PUSH
12336: LD_OWVAR 2
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 91
12347: PUSH
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: CALL_OW 74
12379: PPUSH
12380: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12384: LD_VAR 0 2
12388: PUSH
12389: LD_INT 80
12391: GREATER
12392: IFTRUE 12405
12394: PUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: CALL_OW 301
12404: OR
12405: IFFALSE 12280
// if un then
12407: LD_VAR 0 3
12411: IFFALSE 12422
// RemoveUnit ( un ) ;
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL_OW 64
// end ;
12422: PPOPN 3
12424: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12425: LD_EXP 56
12429: IFFALSE 12545
12431: GO 12433
12433: DISABLE
12434: LD_INT 0
12436: PPUSH
12437: PPUSH
12438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: LD_INT 81
12446: PUSH
12447: LD_OWVAR 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 21
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12475: LD_STRING playComputer()
12477: PPUSH
12478: CALL_OW 559
// if not tmp then
12482: LD_VAR 0 2
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12545
// for i in tmp do
12491: LD_ADDR_VAR 0 1
12495: PUSH
12496: LD_VAR 0 2
12500: PUSH
12501: FOR_IN
12502: IFFALSE 12543
// for j := 1 to 4 do
12504: LD_ADDR_VAR 0 3
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_INT 4
12516: PUSH
12517: FOR_TO
12518: IFFALSE 12539
// SetSkill ( i , j , 10 ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 10
12532: PPUSH
12533: CALL_OW 237
12537: GO 12517
12539: POP
12540: POP
12541: GO 12501
12543: POP
12544: POP
// end ;
12545: PPOPN 3
12547: END
// every 0 0$1 trigger s30 do var i , tmp ;
12548: LD_EXP 57
12552: IFFALSE 12621
12554: GO 12556
12556: DISABLE
12557: LD_INT 0
12559: PPUSH
12560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_OWVAR 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 69
12582: ST_TO_ADDR
// if not tmp then
12583: LD_VAR 0 2
12587: NOT
12588: IFFALSE 12592
// exit ;
12590: GO 12621
// for i in tmp do
12592: LD_ADDR_VAR 0 1
12596: PUSH
12597: LD_VAR 0 2
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12619
// SetLives ( i , 300 ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: LD_INT 300
12612: PPUSH
12613: CALL_OW 234
12617: GO 12602
12619: POP
12620: POP
// end ;
12621: PPOPN 2
12623: END
// every 0 0$1 trigger s60 do var i , tmp ;
12624: LD_EXP 58
12628: IFFALSE 12697
12630: GO 12632
12632: DISABLE
12633: LD_INT 0
12635: PPUSH
12636: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12637: LD_ADDR_VAR 0 2
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_OWVAR 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: ST_TO_ADDR
// if not tmp then
12659: LD_VAR 0 2
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12697
// for i in tmp do
12668: LD_ADDR_VAR 0 1
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12695
// SetLives ( i , 600 ) ;
12681: LD_VAR 0 1
12685: PPUSH
12686: LD_INT 600
12688: PPUSH
12689: CALL_OW 234
12693: GO 12678
12695: POP
12696: POP
// end ;
12697: PPOPN 2
12699: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12700: LD_INT 0
12702: PPUSH
// case cmd of 301 :
12703: LD_VAR 0 1
12707: PUSH
12708: LD_INT 301
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12748
12716: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12717: LD_VAR 0 6
12721: PPUSH
12722: LD_VAR 0 7
12726: PPUSH
12727: LD_VAR 0 8
12731: PPUSH
12732: LD_VAR 0 4
12736: PPUSH
12737: LD_VAR 0 5
12741: PPUSH
12742: CALL 13961 0 5
12746: GO 12869
12748: LD_INT 302
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12793
12756: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12757: LD_VAR 0 6
12761: PPUSH
12762: LD_VAR 0 7
12766: PPUSH
12767: LD_VAR 0 8
12771: PPUSH
12772: LD_VAR 0 9
12776: PPUSH
12777: LD_VAR 0 4
12781: PPUSH
12782: LD_VAR 0 5
12786: PPUSH
12787: CALL 14052 0 6
12791: GO 12869
12793: LD_INT 303
12795: DOUBLE
12796: EQUAL
12797: IFTRUE 12801
12799: GO 12838
12801: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12802: LD_VAR 0 6
12806: PPUSH
12807: LD_VAR 0 7
12811: PPUSH
12812: LD_VAR 0 8
12816: PPUSH
12817: LD_VAR 0 9
12821: PPUSH
12822: LD_VAR 0 4
12826: PPUSH
12827: LD_VAR 0 5
12831: PPUSH
12832: CALL 12874 0 6
12836: GO 12869
12838: LD_INT 304
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12868
12846: POP
// hHackTeleport ( unit , x , y ) ; end ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_VAR 0 4
12856: PPUSH
12857: LD_VAR 0 5
12861: PPUSH
12862: CALL 14645 0 3
12866: GO 12869
12868: POP
// end ;
12869: LD_VAR 0 12
12873: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12874: LD_INT 0
12876: PPUSH
12877: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12878: LD_VAR 0 1
12882: PUSH
12883: LD_INT 1
12885: LESS
12886: IFTRUE 12898
12888: PUSH
12889: LD_VAR 0 1
12893: PUSH
12894: LD_INT 3
12896: GREATER
12897: OR
12898: IFTRUE 12916
12900: PUSH
12901: LD_VAR 0 5
12905: PPUSH
12906: LD_VAR 0 6
12910: PPUSH
12911: CALL_OW 428
12915: OR
12916: IFFALSE 12920
// exit ;
12918: GO 13648
// uc_side := your_side ;
12920: LD_ADDR_OWVAR 20
12924: PUSH
12925: LD_OWVAR 2
12929: ST_TO_ADDR
// uc_nation := nation ;
12930: LD_ADDR_OWVAR 21
12934: PUSH
12935: LD_VAR 0 1
12939: ST_TO_ADDR
// bc_level = 1 ;
12940: LD_ADDR_OWVAR 43
12944: PUSH
12945: LD_INT 1
12947: ST_TO_ADDR
// case btype of 1 :
12948: LD_VAR 0 2
12952: PUSH
12953: LD_INT 1
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 12972
12961: POP
// bc_type := b_depot ; 2 :
12962: LD_ADDR_OWVAR 42
12966: PUSH
12967: LD_INT 0
12969: ST_TO_ADDR
12970: GO 13592
12972: LD_INT 2
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 12991
12980: POP
// bc_type := b_warehouse ; 3 :
12981: LD_ADDR_OWVAR 42
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
12989: GO 13592
12991: LD_INT 3
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 12999
12997: GO 13010
12999: POP
// bc_type := b_lab ; 4 .. 9 :
13000: LD_ADDR_OWVAR 42
13004: PUSH
13005: LD_INT 6
13007: ST_TO_ADDR
13008: GO 13592
13010: LD_INT 4
13012: DOUBLE
13013: GREATEREQUAL
13014: IFFALSE 13022
13016: LD_INT 9
13018: DOUBLE
13019: LESSEQUAL
13020: IFTRUE 13024
13022: GO 13084
13024: POP
// begin bc_type := b_lab_half ;
13025: LD_ADDR_OWVAR 42
13029: PUSH
13030: LD_INT 7
13032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13033: LD_ADDR_OWVAR 44
13037: PUSH
13038: LD_INT 10
13040: PUSH
13041: LD_INT 11
13043: PUSH
13044: LD_INT 12
13046: PUSH
13047: LD_INT 15
13049: PUSH
13050: LD_INT 14
13052: PUSH
13053: LD_INT 13
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: LD_VAR 0 2
13068: PUSH
13069: LD_INT 3
13071: MINUS
13072: ARRAY
13073: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13074: LD_ADDR_OWVAR 45
13078: PUSH
13079: LD_INT 9
13081: ST_TO_ADDR
// end ; 10 .. 13 :
13082: GO 13592
13084: LD_INT 10
13086: DOUBLE
13087: GREATEREQUAL
13088: IFFALSE 13096
13090: LD_INT 13
13092: DOUBLE
13093: LESSEQUAL
13094: IFTRUE 13098
13096: GO 13175
13098: POP
// begin bc_type := b_lab_full ;
13099: LD_ADDR_OWVAR 42
13103: PUSH
13104: LD_INT 8
13106: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13107: LD_ADDR_OWVAR 44
13111: PUSH
13112: LD_INT 10
13114: PUSH
13115: LD_INT 12
13117: PUSH
13118: LD_INT 14
13120: PUSH
13121: LD_INT 13
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: LD_VAR 0 2
13134: PUSH
13135: LD_INT 9
13137: MINUS
13138: ARRAY
13139: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13140: LD_ADDR_OWVAR 45
13144: PUSH
13145: LD_INT 11
13147: PUSH
13148: LD_INT 15
13150: PUSH
13151: LD_INT 12
13153: PUSH
13154: LD_INT 15
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_VAR 0 2
13167: PUSH
13168: LD_INT 9
13170: MINUS
13171: ARRAY
13172: ST_TO_ADDR
// end ; 14 :
13173: GO 13592
13175: LD_INT 14
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13194
13183: POP
// bc_type := b_workshop ; 15 :
13184: LD_ADDR_OWVAR 42
13188: PUSH
13189: LD_INT 2
13191: ST_TO_ADDR
13192: GO 13592
13194: LD_INT 15
13196: DOUBLE
13197: EQUAL
13198: IFTRUE 13202
13200: GO 13213
13202: POP
// bc_type := b_factory ; 16 :
13203: LD_ADDR_OWVAR 42
13207: PUSH
13208: LD_INT 3
13210: ST_TO_ADDR
13211: GO 13592
13213: LD_INT 16
13215: DOUBLE
13216: EQUAL
13217: IFTRUE 13221
13219: GO 13232
13221: POP
// bc_type := b_ext_gun ; 17 :
13222: LD_ADDR_OWVAR 42
13226: PUSH
13227: LD_INT 17
13229: ST_TO_ADDR
13230: GO 13592
13232: LD_INT 17
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13268
13240: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13241: LD_ADDR_OWVAR 42
13245: PUSH
13246: LD_INT 19
13248: PUSH
13249: LD_INT 23
13251: PUSH
13252: LD_INT 19
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_VAR 0 1
13264: ARRAY
13265: ST_TO_ADDR
13266: GO 13592
13268: LD_INT 18
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 13287
13276: POP
// bc_type := b_ext_radar ; 19 :
13277: LD_ADDR_OWVAR 42
13281: PUSH
13282: LD_INT 20
13284: ST_TO_ADDR
13285: GO 13592
13287: LD_INT 19
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13306
13295: POP
// bc_type := b_ext_radio ; 20 :
13296: LD_ADDR_OWVAR 42
13300: PUSH
13301: LD_INT 22
13303: ST_TO_ADDR
13304: GO 13592
13306: LD_INT 20
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13325
13314: POP
// bc_type := b_ext_siberium ; 21 :
13315: LD_ADDR_OWVAR 42
13319: PUSH
13320: LD_INT 21
13322: ST_TO_ADDR
13323: GO 13592
13325: LD_INT 21
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13344
13333: POP
// bc_type := b_ext_computer ; 22 :
13334: LD_ADDR_OWVAR 42
13338: PUSH
13339: LD_INT 24
13341: ST_TO_ADDR
13342: GO 13592
13344: LD_INT 22
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13363
13352: POP
// bc_type := b_ext_track ; 23 :
13353: LD_ADDR_OWVAR 42
13357: PUSH
13358: LD_INT 16
13360: ST_TO_ADDR
13361: GO 13592
13363: LD_INT 23
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13382
13371: POP
// bc_type := b_ext_laser ; 24 :
13372: LD_ADDR_OWVAR 42
13376: PUSH
13377: LD_INT 25
13379: ST_TO_ADDR
13380: GO 13592
13382: LD_INT 24
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13401
13390: POP
// bc_type := b_control_tower ; 25 :
13391: LD_ADDR_OWVAR 42
13395: PUSH
13396: LD_INT 36
13398: ST_TO_ADDR
13399: GO 13592
13401: LD_INT 25
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13420
13409: POP
// bc_type := b_breastwork ; 26 :
13410: LD_ADDR_OWVAR 42
13414: PUSH
13415: LD_INT 31
13417: ST_TO_ADDR
13418: GO 13592
13420: LD_INT 26
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13439
13428: POP
// bc_type := b_bunker ; 27 :
13429: LD_ADDR_OWVAR 42
13433: PUSH
13434: LD_INT 32
13436: ST_TO_ADDR
13437: GO 13592
13439: LD_INT 27
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13458
13447: POP
// bc_type := b_turret ; 28 :
13448: LD_ADDR_OWVAR 42
13452: PUSH
13453: LD_INT 33
13455: ST_TO_ADDR
13456: GO 13592
13458: LD_INT 28
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13477
13466: POP
// bc_type := b_armoury ; 29 :
13467: LD_ADDR_OWVAR 42
13471: PUSH
13472: LD_INT 4
13474: ST_TO_ADDR
13475: GO 13592
13477: LD_INT 29
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13496
13485: POP
// bc_type := b_barracks ; 30 :
13486: LD_ADDR_OWVAR 42
13490: PUSH
13491: LD_INT 5
13493: ST_TO_ADDR
13494: GO 13592
13496: LD_INT 30
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13515
13504: POP
// bc_type := b_solar_power ; 31 :
13505: LD_ADDR_OWVAR 42
13509: PUSH
13510: LD_INT 27
13512: ST_TO_ADDR
13513: GO 13592
13515: LD_INT 31
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13534
13523: POP
// bc_type := b_oil_power ; 32 :
13524: LD_ADDR_OWVAR 42
13528: PUSH
13529: LD_INT 26
13531: ST_TO_ADDR
13532: GO 13592
13534: LD_INT 32
13536: DOUBLE
13537: EQUAL
13538: IFTRUE 13542
13540: GO 13553
13542: POP
// bc_type := b_siberite_power ; 33 :
13543: LD_ADDR_OWVAR 42
13547: PUSH
13548: LD_INT 28
13550: ST_TO_ADDR
13551: GO 13592
13553: LD_INT 33
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13561
13559: GO 13572
13561: POP
// bc_type := b_oil_mine ; 34 :
13562: LD_ADDR_OWVAR 42
13566: PUSH
13567: LD_INT 29
13569: ST_TO_ADDR
13570: GO 13592
13572: LD_INT 34
13574: DOUBLE
13575: EQUAL
13576: IFTRUE 13580
13578: GO 13591
13580: POP
// bc_type := b_siberite_mine ; end ;
13581: LD_ADDR_OWVAR 42
13585: PUSH
13586: LD_INT 30
13588: ST_TO_ADDR
13589: GO 13592
13591: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13592: LD_ADDR_VAR 0 8
13596: PUSH
13597: LD_VAR 0 5
13601: PPUSH
13602: LD_VAR 0 6
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: CALL_OW 47
13616: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13617: LD_OWVAR 42
13621: PUSH
13622: LD_INT 32
13624: PUSH
13625: LD_INT 33
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: IN
13632: IFFALSE 13648
// PlaceWeaponTurret ( b , weapon ) ;
13634: LD_VAR 0 8
13638: PPUSH
13639: LD_VAR 0 4
13643: PPUSH
13644: CALL_OW 431
// end ;
13648: LD_VAR 0 7
13652: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13653: LD_INT 0
13655: PPUSH
13656: PPUSH
13657: PPUSH
13658: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13659: LD_ADDR_VAR 0 4
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_OWVAR 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 30
13681: PUSH
13682: LD_INT 0
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 30
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PPUSH
13708: CALL_OW 69
13712: ST_TO_ADDR
// if not tmp then
13713: LD_VAR 0 4
13717: NOT
13718: IFFALSE 13722
// exit ;
13720: GO 13781
// for i in tmp do
13722: LD_ADDR_VAR 0 2
13726: PUSH
13727: LD_VAR 0 4
13731: PUSH
13732: FOR_IN
13733: IFFALSE 13779
// for j = 1 to 3 do
13735: LD_ADDR_VAR 0 3
13739: PUSH
13740: DOUBLE
13741: LD_INT 1
13743: DEC
13744: ST_TO_ADDR
13745: LD_INT 3
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13775
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13751: LD_VAR 0 2
13755: PPUSH
13756: CALL_OW 274
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 99999
13768: PPUSH
13769: CALL_OW 277
13773: GO 13748
13775: POP
13776: POP
13777: GO 13732
13779: POP
13780: POP
// end ;
13781: LD_VAR 0 1
13785: RET
// export function hHackSetLevel10 ; var i , j ; begin
13786: LD_INT 0
13788: PPUSH
13789: PPUSH
13790: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_INT 21
13798: PUSH
13799: LD_INT 1
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: FOR_IN
13812: IFFALSE 13864
// if IsSelected ( i ) then
13814: LD_VAR 0 2
13818: PPUSH
13819: CALL_OW 306
13823: IFFALSE 13862
// begin for j := 1 to 4 do
13825: LD_ADDR_VAR 0 3
13829: PUSH
13830: DOUBLE
13831: LD_INT 1
13833: DEC
13834: ST_TO_ADDR
13835: LD_INT 4
13837: PUSH
13838: FOR_TO
13839: IFFALSE 13860
// SetSkill ( i , j , 10 ) ;
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 237
13858: GO 13838
13860: POP
13861: POP
// end ;
13862: GO 13811
13864: POP
13865: POP
// end ;
13866: LD_VAR 0 1
13870: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
13875: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13876: LD_ADDR_VAR 0 2
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_OWVAR 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PPUSH
13907: CALL_OW 69
13911: PUSH
13912: FOR_IN
13913: IFFALSE 13954
// begin for j := 1 to 4 do
13915: LD_ADDR_VAR 0 3
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_INT 4
13927: PUSH
13928: FOR_TO
13929: IFFALSE 13950
// SetSkill ( i , j , 10 ) ;
13931: LD_VAR 0 2
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: LD_INT 10
13943: PPUSH
13944: CALL_OW 237
13948: GO 13928
13950: POP
13951: POP
// end ;
13952: GO 13912
13954: POP
13955: POP
// end ;
13956: LD_VAR 0 1
13960: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13961: LD_INT 0
13963: PPUSH
// uc_side := your_side ;
13964: LD_ADDR_OWVAR 20
13968: PUSH
13969: LD_OWVAR 2
13973: ST_TO_ADDR
// uc_nation := nation ;
13974: LD_ADDR_OWVAR 21
13978: PUSH
13979: LD_VAR 0 1
13983: ST_TO_ADDR
// InitHc ;
13984: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13988: LD_INT 0
13990: PPUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14005: LD_VAR 0 4
14009: PPUSH
14010: LD_VAR 0 5
14014: PPUSH
14015: CALL_OW 428
14019: PUSH
14020: LD_INT 0
14022: EQUAL
14023: IFFALSE 14047
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14025: CALL_OW 44
14029: PPUSH
14030: LD_VAR 0 4
14034: PPUSH
14035: LD_VAR 0 5
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 48
// end ;
14047: LD_VAR 0 6
14051: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14052: LD_INT 0
14054: PPUSH
14055: PPUSH
// uc_side := your_side ;
14056: LD_ADDR_OWVAR 20
14060: PUSH
14061: LD_OWVAR 2
14065: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14066: LD_VAR 0 1
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: LD_INT 5
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: IN
14093: IFFALSE 14105
// uc_nation := nation_american else
14095: LD_ADDR_OWVAR 21
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
14103: GO 14148
// if chassis in [ 11 , 12 , 13 , 14 ] then
14105: LD_VAR 0 1
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 13
14118: PUSH
14119: LD_INT 14
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: IN
14128: IFFALSE 14140
// uc_nation := nation_arabian else
14130: LD_ADDR_OWVAR 21
14134: PUSH
14135: LD_INT 2
14137: ST_TO_ADDR
14138: GO 14148
// uc_nation := nation_russian ;
14140: LD_ADDR_OWVAR 21
14144: PUSH
14145: LD_INT 3
14147: ST_TO_ADDR
// vc_chassis := chassis ;
14148: LD_ADDR_OWVAR 37
14152: PUSH
14153: LD_VAR 0 1
14157: ST_TO_ADDR
// vc_engine := engine ;
14158: LD_ADDR_OWVAR 39
14162: PUSH
14163: LD_VAR 0 2
14167: ST_TO_ADDR
// vc_control := control ;
14168: LD_ADDR_OWVAR 38
14172: PUSH
14173: LD_VAR 0 3
14177: ST_TO_ADDR
// vc_weapon := weapon ;
14178: LD_ADDR_OWVAR 40
14182: PUSH
14183: LD_VAR 0 4
14187: ST_TO_ADDR
// un := CreateVehicle ;
14188: LD_ADDR_VAR 0 8
14192: PUSH
14193: CALL_OW 45
14197: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14198: LD_VAR 0 8
14202: PPUSH
14203: LD_INT 0
14205: PPUSH
14206: LD_INT 5
14208: PPUSH
14209: CALL_OW 12
14213: PPUSH
14214: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14218: LD_VAR 0 8
14222: PPUSH
14223: LD_VAR 0 5
14227: PPUSH
14228: LD_VAR 0 6
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 48
// end ;
14240: LD_VAR 0 7
14244: RET
// export hInvincible ; every 1 do
14245: GO 14247
14247: DISABLE
// hInvincible := [ ] ;
14248: LD_ADDR_EXP 59
14252: PUSH
14253: EMPTY
14254: ST_TO_ADDR
14255: END
// every 10 do var i ;
14256: GO 14258
14258: DISABLE
14259: LD_INT 0
14261: PPUSH
// begin enable ;
14262: ENABLE
// if not hInvincible then
14263: LD_EXP 59
14267: NOT
14268: IFFALSE 14272
// exit ;
14270: GO 14316
// for i in hInvincible do
14272: LD_ADDR_VAR 0 1
14276: PUSH
14277: LD_EXP 59
14281: PUSH
14282: FOR_IN
14283: IFFALSE 14314
// if GetLives ( i ) < 1000 then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 256
14294: PUSH
14295: LD_INT 1000
14297: LESS
14298: IFFALSE 14312
// SetLives ( i , 1000 ) ;
14300: LD_VAR 0 1
14304: PPUSH
14305: LD_INT 1000
14307: PPUSH
14308: CALL_OW 234
14312: GO 14282
14314: POP
14315: POP
// end ;
14316: PPOPN 1
14318: END
// export function hHackInvincible ; var i ; begin
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: LD_INT 21
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PUSH
14361: FOR_IN
14362: IFFALSE 14423
// if IsSelected ( i ) then
14364: LD_VAR 0 2
14368: PPUSH
14369: CALL_OW 306
14373: IFFALSE 14421
// begin if i in hInvincible then
14375: LD_VAR 0 2
14379: PUSH
14380: LD_EXP 59
14384: IN
14385: IFFALSE 14405
// hInvincible := hInvincible diff i else
14387: LD_ADDR_EXP 59
14391: PUSH
14392: LD_EXP 59
14396: PUSH
14397: LD_VAR 0 2
14401: DIFF
14402: ST_TO_ADDR
14403: GO 14421
// hInvincible := hInvincible union i ;
14405: LD_ADDR_EXP 59
14409: PUSH
14410: LD_EXP 59
14414: PUSH
14415: LD_VAR 0 2
14419: UNION
14420: ST_TO_ADDR
// end ;
14421: GO 14361
14423: POP
14424: POP
// end ;
14425: LD_VAR 0 1
14429: RET
// export function hHackInvisible ; var i , j ; begin
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
14434: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 1
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: PUSH
14455: FOR_IN
14456: IFFALSE 14480
// if IsSelected ( i ) then
14458: LD_VAR 0 2
14462: PPUSH
14463: CALL_OW 306
14467: IFFALSE 14478
// ComForceInvisible ( i ) ;
14469: LD_VAR 0 2
14473: PPUSH
14474: CALL_OW 496
14478: GO 14455
14480: POP
14481: POP
// end ;
14482: LD_VAR 0 1
14486: RET
// export function hHackChangeYourSide ; begin
14487: LD_INT 0
14489: PPUSH
// if your_side = 8 then
14490: LD_OWVAR 2
14494: PUSH
14495: LD_INT 8
14497: EQUAL
14498: IFFALSE 14510
// your_side := 0 else
14500: LD_ADDR_OWVAR 2
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
14508: GO 14524
// your_side := your_side + 1 ;
14510: LD_ADDR_OWVAR 2
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: LD_INT 1
14522: PLUS
14523: ST_TO_ADDR
// end ;
14524: LD_VAR 0 1
14528: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
// for i in all_units do
14534: LD_ADDR_VAR 0 2
14538: PUSH
14539: LD_OWVAR 3
14543: PUSH
14544: FOR_IN
14545: IFFALSE 14623
// if IsSelected ( i ) then
14547: LD_VAR 0 2
14551: PPUSH
14552: CALL_OW 306
14556: IFFALSE 14621
// begin j := GetSide ( i ) ;
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: CALL_OW 255
14572: ST_TO_ADDR
// if j = 8 then
14573: LD_VAR 0 3
14577: PUSH
14578: LD_INT 8
14580: EQUAL
14581: IFFALSE 14593
// j := 0 else
14583: LD_ADDR_VAR 0 3
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
14591: GO 14607
// j := j + 1 ;
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_VAR 0 3
14602: PUSH
14603: LD_INT 1
14605: PLUS
14606: ST_TO_ADDR
// SetSide ( i , j ) ;
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: CALL_OW 235
// end ;
14621: GO 14544
14623: POP
14624: POP
// end ;
14625: LD_VAR 0 1
14629: RET
// export function hHackFog ; begin
14630: LD_INT 0
14632: PPUSH
// FogOff ( true ) ;
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 344
// end ;
14640: LD_VAR 0 1
14644: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14645: LD_INT 0
14647: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 483
// CenterOnXY ( x , y ) ;
14673: LD_VAR 0 2
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: CALL_OW 84
// end ;
14687: LD_VAR 0 4
14691: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14696: LD_VAR 0 1
14700: NOT
14701: IFTRUE 14720
14703: PUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: CALL_OW 488
14718: NOT
14719: OR
14720: IFTRUE 14755
14722: PUSH
14723: LD_VAR 0 1
14727: PPUSH
14728: CALL_OW 266
14732: PUSH
14733: LD_INT 3
14735: NONEQUAL
14736: IFFALSE 14754
14738: PUSH
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 247
14748: PUSH
14749: LD_INT 1
14751: EQUAL
14752: NOT
14753: AND
14754: OR
14755: IFFALSE 14759
// exit ;
14757: GO 15041
// if GetType ( factory ) = unit_human then
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 247
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: IFFALSE 14789
// factory := IsInUnit ( factory ) ;
14774: LD_ADDR_VAR 0 1
14778: PUSH
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 310
14788: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 266
14798: PUSH
14799: LD_INT 3
14801: NONEQUAL
14802: IFFALSE 14806
// exit ;
14804: GO 15041
// for i := 1 to Count ( factoryWaypoints ) do
14806: LD_ADDR_VAR 0 5
14810: PUSH
14811: DOUBLE
14812: LD_INT 1
14814: DEC
14815: ST_TO_ADDR
14816: LD_EXP 60
14820: PPUSH
14821: CALL 24737 0 1
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14989
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14829: LD_VAR 0 2
14833: PPUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: CALL_OW 428
14843: PUSH
14844: LD_EXP 60
14848: PUSH
14849: LD_VAR 0 5
14853: ARRAY
14854: PUSH
14855: LD_INT 2
14857: ARRAY
14858: EQUAL
14859: IFFALSE 14891
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14861: LD_ADDR_EXP 60
14865: PUSH
14866: LD_EXP 60
14870: PPUSH
14871: LD_VAR 0 5
14875: PPUSH
14876: CALL_OW 3
14880: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14881: CALL 15046 0 0
// exit ;
14885: POP
14886: POP
14887: GO 15041
// end else
14889: GO 14987
// if factory = factoryWaypoints [ i ] [ 2 ] then
14891: LD_VAR 0 1
14895: PUSH
14896: LD_EXP 60
14900: PUSH
14901: LD_VAR 0 5
14905: ARRAY
14906: PUSH
14907: LD_INT 2
14909: ARRAY
14910: EQUAL
14911: IFFALSE 14987
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14913: LD_ADDR_EXP 60
14917: PUSH
14918: LD_EXP 60
14922: PPUSH
14923: LD_VAR 0 5
14927: PPUSH
14928: CALL_OW 3
14932: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14933: LD_ADDR_EXP 60
14937: PUSH
14938: LD_EXP 60
14942: PPUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_VAR 0 1
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: LD_VAR 0 3
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL 60669 0 2
14978: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14979: CALL 15046 0 0
// exit ;
14983: POP
14984: POP
14985: GO 15041
// end ; end ;
14987: GO 14826
14989: POP
14990: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14991: LD_ADDR_EXP 60
14995: PUSH
14996: LD_EXP 60
15000: PPUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 255
15010: PUSH
15011: LD_VAR 0 1
15015: PUSH
15016: LD_VAR 0 2
15020: PUSH
15021: LD_VAR 0 3
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL 60669 0 2
15036: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15037: CALL 15046 0 0
// end ;
15041: LD_VAR 0 4
15045: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15046: LD_INT 0
15048: PPUSH
15049: PPUSH
15050: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15051: LD_STRING resetFactoryWaypoint();
15053: PPUSH
15054: CALL_OW 559
// if factoryWaypoints then
15058: LD_EXP 60
15062: IFFALSE 15183
// begin list := factoryWaypoints ;
15064: LD_ADDR_VAR 0 3
15068: PUSH
15069: LD_EXP 60
15073: ST_TO_ADDR
// for i := 1 to list do
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: DOUBLE
15080: LD_INT 1
15082: DEC
15083: ST_TO_ADDR
15084: LD_VAR 0 3
15088: PUSH
15089: FOR_TO
15090: IFFALSE 15181
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15092: LD_STRING setFactoryWaypointXY(
15094: PUSH
15095: LD_VAR 0 3
15099: PUSH
15100: LD_VAR 0 2
15104: ARRAY
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: STR
15110: PUSH
15111: LD_STRING ,
15113: STR
15114: PUSH
15115: LD_VAR 0 3
15119: PUSH
15120: LD_VAR 0 2
15124: ARRAY
15125: PUSH
15126: LD_INT 2
15128: ARRAY
15129: STR
15130: PUSH
15131: LD_STRING ,
15133: STR
15134: PUSH
15135: LD_VAR 0 3
15139: PUSH
15140: LD_VAR 0 2
15144: ARRAY
15145: PUSH
15146: LD_INT 3
15148: ARRAY
15149: STR
15150: PUSH
15151: LD_STRING ,
15153: STR
15154: PUSH
15155: LD_VAR 0 3
15159: PUSH
15160: LD_VAR 0 2
15164: ARRAY
15165: PUSH
15166: LD_INT 4
15168: ARRAY
15169: STR
15170: PUSH
15171: LD_STRING )
15173: STR
15174: PPUSH
15175: CALL_OW 559
15179: GO 15089
15181: POP
15182: POP
// end ; end ;
15183: LD_VAR 0 1
15187: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15188: LD_INT 0
15190: PPUSH
// if HexInfo ( x , y ) = warehouse then
15191: LD_VAR 0 2
15195: PPUSH
15196: LD_VAR 0 3
15200: PPUSH
15201: CALL_OW 428
15205: PUSH
15206: LD_VAR 0 1
15210: EQUAL
15211: IFFALSE 15238
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15213: LD_ADDR_EXP 62
15217: PUSH
15218: LD_EXP 62
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: LD_INT 0
15230: PPUSH
15231: CALL_OW 1
15235: ST_TO_ADDR
15236: GO 15289
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15238: LD_ADDR_EXP 62
15242: PUSH
15243: LD_EXP 62
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 255
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: LD_VAR 0 2
15272: PUSH
15273: LD_VAR 0 3
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 1
15288: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15289: CALL 15298 0 0
// end ;
15293: LD_VAR 0 4
15297: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
15302: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15303: LD_STRING resetWarehouseGatheringPoints();
15305: PPUSH
15306: CALL_OW 559
// if warehouseGatheringPoints then
15310: LD_EXP 62
15314: IFFALSE 15440
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_EXP 62
15325: PPUSH
15326: CALL 64603 0 1
15330: ST_TO_ADDR
// for i := 1 to list do
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: DOUBLE
15337: LD_INT 1
15339: DEC
15340: ST_TO_ADDR
15341: LD_VAR 0 3
15345: PUSH
15346: FOR_TO
15347: IFFALSE 15438
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15349: LD_STRING setWarehouseGatheringPointXY(
15351: PUSH
15352: LD_VAR 0 3
15356: PUSH
15357: LD_VAR 0 2
15361: ARRAY
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: STR
15367: PUSH
15368: LD_STRING ,
15370: STR
15371: PUSH
15372: LD_VAR 0 3
15376: PUSH
15377: LD_VAR 0 2
15381: ARRAY
15382: PUSH
15383: LD_INT 2
15385: ARRAY
15386: STR
15387: PUSH
15388: LD_STRING ,
15390: STR
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_VAR 0 2
15401: ARRAY
15402: PUSH
15403: LD_INT 3
15405: ARRAY
15406: STR
15407: PUSH
15408: LD_STRING ,
15410: STR
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: LD_VAR 0 2
15421: ARRAY
15422: PUSH
15423: LD_INT 4
15425: ARRAY
15426: STR
15427: PUSH
15428: LD_STRING )
15430: STR
15431: PPUSH
15432: CALL_OW 559
15436: GO 15346
15438: POP
15439: POP
// end ; end ;
15440: LD_VAR 0 1
15444: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15445: LD_EXP 62
15449: IFFALSE 16144
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// begin enable ;
15465: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: LD_EXP 62
15475: PPUSH
15476: CALL 64603 0 1
15480: ST_TO_ADDR
// if not list then
15481: LD_VAR 0 3
15485: NOT
15486: IFFALSE 15490
// exit ;
15488: GO 16144
// for i := 1 to list do
15490: LD_ADDR_VAR 0 1
15494: PUSH
15495: DOUBLE
15496: LD_INT 1
15498: DEC
15499: ST_TO_ADDR
15500: LD_VAR 0 3
15504: PUSH
15505: FOR_TO
15506: IFFALSE 16142
// begin depot := list [ i ] [ 2 ] ;
15508: LD_ADDR_VAR 0 8
15512: PUSH
15513: LD_VAR 0 3
15517: PUSH
15518: LD_VAR 0 1
15522: ARRAY
15523: PUSH
15524: LD_INT 2
15526: ARRAY
15527: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 3
15537: PUSH
15538: LD_VAR 0 1
15542: ARRAY
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15548: LD_VAR 0 8
15552: PPUSH
15553: CALL_OW 301
15557: IFTRUE 15576
15559: PUSH
15560: LD_VAR 0 5
15564: PUSH
15565: LD_VAR 0 8
15569: PPUSH
15570: CALL_OW 255
15574: NONEQUAL
15575: OR
15576: IFFALSE 15605
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15578: LD_ADDR_EXP 62
15582: PUSH
15583: LD_EXP 62
15587: PPUSH
15588: LD_VAR 0 8
15592: PPUSH
15593: LD_INT 0
15595: PPUSH
15596: CALL_OW 1
15600: ST_TO_ADDR
// exit ;
15601: POP
15602: POP
15603: GO 16144
// end ; x := list [ i ] [ 3 ] ;
15605: LD_ADDR_VAR 0 6
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: ARRAY
15620: PUSH
15621: LD_INT 3
15623: ARRAY
15624: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15625: LD_ADDR_VAR 0 7
15629: PUSH
15630: LD_VAR 0 3
15634: PUSH
15635: LD_VAR 0 1
15639: ARRAY
15640: PUSH
15641: LD_INT 4
15643: ARRAY
15644: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15645: LD_ADDR_VAR 0 9
15649: PUSH
15650: LD_VAR 0 6
15654: PPUSH
15655: LD_VAR 0 7
15659: PPUSH
15660: LD_INT 16
15662: PPUSH
15663: CALL 63177 0 3
15667: ST_TO_ADDR
// if not cratesNearbyPoint then
15668: LD_VAR 0 9
15672: NOT
15673: IFFALSE 15679
// exit ;
15675: POP
15676: POP
15677: GO 16144
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15679: LD_ADDR_VAR 0 4
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_VAR 0 5
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 3
15698: PUSH
15699: LD_INT 60
15701: PUSH
15702: EMPTY
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 91
15711: PUSH
15712: LD_VAR 0 8
15716: PUSH
15717: LD_INT 6
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: PUSH
15764: LD_VAR 0 8
15768: PPUSH
15769: CALL_OW 313
15773: PPUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 60
15779: PUSH
15780: EMPTY
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 25
15792: PUSH
15793: LD_INT 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 16
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 72
15823: UNION
15824: ST_TO_ADDR
// if tmp then
15825: LD_VAR 0 4
15829: IFFALSE 15909
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15831: LD_ADDR_VAR 0 4
15835: PUSH
15836: LD_VAR 0 4
15840: PPUSH
15841: LD_INT 3
15843: PPUSH
15844: CALL 60984 0 2
15848: ST_TO_ADDR
// for j in tmp do
15849: LD_ADDR_VAR 0 2
15853: PUSH
15854: LD_VAR 0 4
15858: PUSH
15859: FOR_IN
15860: IFFALSE 15903
// begin if IsInUnit ( j ) then
15862: LD_VAR 0 2
15866: PPUSH
15867: CALL_OW 310
15871: IFFALSE 15882
// ComExit ( j ) ;
15873: LD_VAR 0 2
15877: PPUSH
15878: CALL 61067 0 1
// AddComCollect ( j , x , y ) ;
15882: LD_VAR 0 2
15886: PPUSH
15887: LD_VAR 0 6
15891: PPUSH
15892: LD_VAR 0 7
15896: PPUSH
15897: CALL_OW 177
// end ;
15901: GO 15859
15903: POP
15904: POP
// exit ;
15905: POP
15906: POP
15907: GO 16144
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15909: LD_ADDR_VAR 0 4
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_VAR 0 5
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 91
15928: PUSH
15929: LD_VAR 0 8
15933: PUSH
15934: LD_INT 8
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 34
15947: PUSH
15948: LD_INT 12
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 34
15957: PUSH
15958: LD_INT 51
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 34
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 34
15977: PUSH
15978: LD_INT 89
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if tmp then
16002: LD_VAR 0 4
16006: IFFALSE 16140
// begin for j in tmp do
16008: LD_ADDR_VAR 0 2
16012: PUSH
16013: LD_VAR 0 4
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16138
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16021: LD_VAR 0 2
16025: PPUSH
16026: CALL_OW 262
16030: PUSH
16031: LD_INT 3
16033: EQUAL
16034: IFTRUE 16051
16036: PUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: CALL_OW 261
16046: PUSH
16047: LD_INT 20
16049: GREATER
16050: OR
16051: IFFALSE 16065
16053: PUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 314
16063: NOT
16064: AND
16065: IFFALSE 16095
16067: PUSH
16068: LD_VAR 0 2
16072: PPUSH
16073: CALL_OW 263
16077: PUSH
16078: LD_INT 1
16080: NONEQUAL
16081: IFTRUE 16094
16083: PUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 311
16093: OR
16094: AND
16095: IFFALSE 16136
// begin ComCollect ( j , x , y ) ;
16097: LD_VAR 0 2
16101: PPUSH
16102: LD_VAR 0 6
16106: PPUSH
16107: LD_VAR 0 7
16111: PPUSH
16112: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16116: LD_VAR 0 2
16120: PPUSH
16121: LD_VAR 0 8
16125: PPUSH
16126: CALL_OW 172
// exit ;
16130: POP
16131: POP
16132: POP
16133: POP
16134: GO 16144
// end ;
16136: GO 16018
16138: POP
16139: POP
// end ; end ;
16140: GO 15505
16142: POP
16143: POP
// end ; end_of_file
16144: PPOPN 9
16146: END
// export function SOS_UnitDestroyed ( un ) ; begin
16147: LD_INT 0
16149: PPUSH
// ComRadiation ( un ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: CALL 17236 0 1
// end ;
16159: LD_VAR 0 2
16163: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16164: LD_INT 0
16166: PPUSH
// ComRadiation ( un ) ;
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL 17236 0 1
// end ;
16176: LD_VAR 0 2
16180: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16181: LD_INT 0
16183: PPUSH
// end ;
16184: LD_VAR 0 4
16188: RET
// export function SOS_Command ( cmd ) ; begin
16189: LD_INT 0
16191: PPUSH
// end ;
16192: LD_VAR 0 2
16196: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16197: LD_INT 0
16199: PPUSH
// end ;
16200: LD_VAR 0 6
16204: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16205: LD_INT 0
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
// if not vehicle or not factory then
16211: LD_VAR 0 1
16215: NOT
16216: IFTRUE 16225
16218: PUSH
16219: LD_VAR 0 2
16223: NOT
16224: OR
16225: IFFALSE 16229
// exit ;
16227: GO 16811
// if not factoryWaypoints then
16229: LD_EXP 60
16233: NOT
16234: IFFALSE 16238
// exit ;
16236: GO 16811
// for i := 1 to Count ( factoryWaypoints ) do
16238: LD_ADDR_VAR 0 4
16242: PUSH
16243: DOUBLE
16244: LD_INT 1
16246: DEC
16247: ST_TO_ADDR
16248: LD_EXP 60
16252: PPUSH
16253: CALL 24737 0 1
16257: PUSH
16258: FOR_TO
16259: IFFALSE 16809
// if factoryWaypoints [ i ] [ 2 ] = factory then
16261: LD_EXP 60
16265: PUSH
16266: LD_VAR 0 4
16270: ARRAY
16271: PUSH
16272: LD_INT 2
16274: ARRAY
16275: PUSH
16276: LD_VAR 0 2
16280: EQUAL
16281: IFFALSE 16807
// begin if GetControl ( vehicle ) = control_manual then
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 263
16292: PUSH
16293: LD_INT 1
16295: EQUAL
16296: IFFALSE 16660
// begin driver := IsDrivenBy ( vehicle ) ;
16298: LD_ADDR_VAR 0 5
16302: PUSH
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 311
16312: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16313: LD_VAR 0 5
16317: PUSH
16318: LD_EXP 61
16322: IN
16323: IFTRUE 16337
16325: PUSH
16326: LD_VAR 0 1
16330: PUSH
16331: LD_EXP 61
16335: IN
16336: OR
16337: IFFALSE 16343
// exit ;
16339: POP
16340: POP
16341: GO 16811
// if not HasTask ( driver ) then
16343: LD_VAR 0 5
16347: PPUSH
16348: CALL_OW 314
16352: NOT
16353: IFFALSE 16658
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16355: LD_ADDR_EXP 61
16359: PUSH
16360: LD_EXP 61
16364: PPUSH
16365: LD_VAR 0 5
16369: PPUSH
16370: CALL 60669 0 2
16374: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16375: LD_ADDR_EXP 61
16379: PUSH
16380: LD_EXP 61
16384: PPUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL 60669 0 2
16394: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16395: LD_ADDR_VAR 0 6
16399: PUSH
16400: LD_EXP 60
16404: PUSH
16405: LD_VAR 0 4
16409: ARRAY
16410: PUSH
16411: LD_INT 3
16413: ARRAY
16414: PPUSH
16415: LD_EXP 60
16419: PUSH
16420: LD_VAR 0 4
16424: ARRAY
16425: PUSH
16426: LD_INT 4
16428: ARRAY
16429: PPUSH
16430: CALL_OW 428
16434: ST_TO_ADDR
// if hex then
16435: LD_VAR 0 6
16439: IFFALSE 16457
// ComMoveUnit ( driver , hex ) else
16441: LD_VAR 0 5
16445: PPUSH
16446: LD_VAR 0 6
16450: PPUSH
16451: CALL_OW 112
16455: GO 16541
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_EXP 60
16466: PUSH
16467: LD_VAR 0 4
16471: ARRAY
16472: PUSH
16473: LD_INT 3
16475: ARRAY
16476: PPUSH
16477: LD_EXP 60
16481: PUSH
16482: LD_VAR 0 4
16486: ARRAY
16487: PUSH
16488: LD_INT 4
16490: ARRAY
16491: PPUSH
16492: CALL_OW 297
16496: PUSH
16497: LD_INT 0
16499: GREATER
16500: IFFALSE 16541
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16502: LD_VAR 0 5
16506: PPUSH
16507: LD_EXP 60
16511: PUSH
16512: LD_VAR 0 4
16516: ARRAY
16517: PUSH
16518: LD_INT 3
16520: ARRAY
16521: PPUSH
16522: LD_EXP 60
16526: PUSH
16527: LD_VAR 0 4
16531: ARRAY
16532: PUSH
16533: LD_INT 4
16535: ARRAY
16536: PPUSH
16537: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16541: LD_VAR 0 5
16545: PPUSH
16546: CALL_OW 181
// if Multiplayer then
16550: LD_OWVAR 4
16554: IFFALSE 16603
// begin repeat wait ( 10 ) ;
16556: LD_INT 10
16558: PPUSH
16559: CALL_OW 67
// until not IsInUnit ( driver ) ;
16563: LD_VAR 0 5
16567: PPUSH
16568: CALL_OW 310
16572: NOT
16573: IFFALSE 16556
// if not HasTask ( driver ) then
16575: LD_VAR 0 5
16579: PPUSH
16580: CALL_OW 314
16584: NOT
16585: IFFALSE 16601
// ComEnterUnit ( driver , factory ) ;
16587: LD_VAR 0 5
16591: PPUSH
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL_OW 120
// end else
16601: GO 16617
// AddComEnterUnit ( driver , factory ) ;
16603: LD_VAR 0 5
16607: PPUSH
16608: LD_VAR 0 2
16612: PPUSH
16613: CALL_OW 180
// wait ( 0 0$1 ) ;
16617: LD_INT 35
16619: PPUSH
16620: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16624: LD_ADDR_EXP 61
16628: PUSH
16629: LD_EXP 61
16633: PUSH
16634: LD_VAR 0 5
16638: DIFF
16639: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16640: LD_ADDR_EXP 61
16644: PUSH
16645: LD_EXP 61
16649: PUSH
16650: LD_VAR 0 1
16654: DIFF
16655: ST_TO_ADDR
// break ;
16656: GO 16809
// end ; end else
16658: GO 16807
// if GetControl ( vehicle ) = control_remote then
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 263
16669: PUSH
16670: LD_INT 2
16672: EQUAL
16673: IFFALSE 16759
// begin wait ( 0 0$2 ) ;
16675: LD_INT 70
16677: PPUSH
16678: CALL_OW 67
// repeat wait ( 10 ) ;
16682: LD_INT 10
16684: PPUSH
16685: CALL_OW 67
// Connect ( vehicle ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL 30981 0 1
// until IsControledBy ( vehicle ) ;
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 312
16707: IFFALSE 16682
// wait ( 10 ) ;
16709: LD_INT 10
16711: PPUSH
16712: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16716: LD_VAR 0 1
16720: PPUSH
16721: LD_EXP 60
16725: PUSH
16726: LD_VAR 0 4
16730: ARRAY
16731: PUSH
16732: LD_INT 3
16734: ARRAY
16735: PPUSH
16736: LD_EXP 60
16740: PUSH
16741: LD_VAR 0 4
16745: ARRAY
16746: PUSH
16747: LD_INT 4
16749: ARRAY
16750: PPUSH
16751: CALL_OW 111
// break ;
16755: GO 16809
// end else
16757: GO 16807
// begin wait ( 0 0$3 ) ;
16759: LD_INT 105
16761: PPUSH
16762: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16766: LD_VAR 0 1
16770: PPUSH
16771: LD_EXP 60
16775: PUSH
16776: LD_VAR 0 4
16780: ARRAY
16781: PUSH
16782: LD_INT 3
16784: ARRAY
16785: PPUSH
16786: LD_EXP 60
16790: PUSH
16791: LD_VAR 0 4
16795: ARRAY
16796: PUSH
16797: LD_INT 4
16799: ARRAY
16800: PPUSH
16801: CALL_OW 111
// break ;
16805: GO 16809
// end ; end ;
16807: GO 16258
16809: POP
16810: POP
// end ;
16811: LD_VAR 0 3
16815: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16816: LD_INT 0
16818: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 250
16826: EQUAL
16827: IFFALSE 16844
16829: PUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 264
16839: PUSH
16840: LD_INT 81
16842: EQUAL
16843: AND
16844: IFFALSE 16865
// MinerPlaceMine ( unit , x , y ) ;
16846: LD_VAR 0 2
16850: PPUSH
16851: LD_VAR 0 4
16855: PPUSH
16856: LD_VAR 0 5
16860: PPUSH
16861: CALL 19997 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16865: LD_VAR 0 1
16869: PUSH
16870: LD_INT 251
16872: EQUAL
16873: IFFALSE 16890
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: CALL_OW 264
16885: PUSH
16886: LD_INT 81
16888: EQUAL
16889: AND
16890: IFFALSE 16911
// MinerDetonateMine ( unit , x , y ) ;
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 4
16901: PPUSH
16902: LD_VAR 0 5
16906: PPUSH
16907: CALL 20276 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16911: LD_VAR 0 1
16915: PUSH
16916: LD_INT 252
16918: EQUAL
16919: IFFALSE 16936
16921: PUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: CALL_OW 264
16931: PUSH
16932: LD_INT 81
16934: EQUAL
16935: AND
16936: IFFALSE 16957
// MinerCreateMinefield ( unit , x , y ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: LD_VAR 0 4
16947: PPUSH
16948: LD_VAR 0 5
16952: PPUSH
16953: CALL 20695 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16957: LD_VAR 0 1
16961: PUSH
16962: LD_INT 253
16964: EQUAL
16965: IFFALSE 16982
16967: PUSH
16968: LD_VAR 0 2
16972: PPUSH
16973: CALL_OW 257
16977: PUSH
16978: LD_INT 5
16980: EQUAL
16981: AND
16982: IFFALSE 17003
// ComBinocular ( unit , x , y ) ;
16984: LD_VAR 0 2
16988: PPUSH
16989: LD_VAR 0 4
16993: PPUSH
16994: LD_VAR 0 5
16998: PPUSH
16999: CALL 21070 0 3
// if selectedUnit then
17003: LD_VAR 0 3
17007: IFFALSE 17067
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17009: LD_VAR 0 1
17013: PUSH
17014: LD_INT 254
17016: EQUAL
17017: IFFALSE 17034
17019: PUSH
17020: LD_VAR 0 2
17024: PPUSH
17025: CALL_OW 264
17029: PUSH
17030: LD_INT 99
17032: EQUAL
17033: AND
17034: IFFALSE 17051
17036: PUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: CALL_OW 263
17046: PUSH
17047: LD_INT 3
17049: EQUAL
17050: AND
17051: IFFALSE 17067
// HackDestroyVehicle ( unit , selectedUnit ) ;
17053: LD_VAR 0 2
17057: PPUSH
17058: LD_VAR 0 3
17062: PPUSH
17063: CALL 19357 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17067: LD_VAR 0 1
17071: PUSH
17072: LD_INT 255
17074: EQUAL
17075: IFFALSE 17099
17077: PUSH
17078: LD_VAR 0 2
17082: PPUSH
17083: CALL_OW 264
17087: PUSH
17088: LD_INT 14
17090: PUSH
17091: LD_INT 53
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: IN
17098: AND
17099: IFFALSE 17117
17101: PUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_VAR 0 5
17111: PPUSH
17112: CALL_OW 488
17116: AND
17117: IFFALSE 17141
// CutTreeXYR ( unit , x , y , 12 ) ;
17119: LD_VAR 0 2
17123: PPUSH
17124: LD_VAR 0 4
17128: PPUSH
17129: LD_VAR 0 5
17133: PPUSH
17134: LD_INT 12
17136: PPUSH
17137: CALL 17332 0 4
// if cmd = 256 then
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 256
17148: EQUAL
17149: IFFALSE 17170
// SetFactoryWaypoint ( unit , x , y ) ;
17151: LD_VAR 0 2
17155: PPUSH
17156: LD_VAR 0 4
17160: PPUSH
17161: LD_VAR 0 5
17165: PPUSH
17166: CALL 14692 0 3
// if cmd = 257 then
17170: LD_VAR 0 1
17174: PUSH
17175: LD_INT 257
17177: EQUAL
17178: IFFALSE 17199
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17180: LD_VAR 0 2
17184: PPUSH
17185: LD_VAR 0 4
17189: PPUSH
17190: LD_VAR 0 5
17194: PPUSH
17195: CALL 15188 0 3
// if cmd = 258 then
17199: LD_VAR 0 1
17203: PUSH
17204: LD_INT 258
17206: EQUAL
17207: IFFALSE 17231
// BurnTreeXYR ( unit , x , y , 8 ) ;
17209: LD_VAR 0 2
17213: PPUSH
17214: LD_VAR 0 4
17218: PPUSH
17219: LD_VAR 0 5
17223: PPUSH
17224: LD_INT 8
17226: PPUSH
17227: CALL 17732 0 4
// end ;
17231: LD_VAR 0 6
17235: RET
// export function ComRadiation ( un ) ; var eff ; begin
17236: LD_INT 0
17238: PPUSH
17239: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 264
17249: PUSH
17250: LD_INT 91
17252: NONEQUAL
17253: IFFALSE 17257
// exit ;
17255: GO 17327
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17257: LD_INT 68
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 255
17269: PPUSH
17270: CALL_OW 321
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: IFFALSE 17290
// eff := 50 else
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 50
17287: ST_TO_ADDR
17288: GO 17298
// eff := 25 ;
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 25
17297: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 250
17307: PPUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 251
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: CALL_OW 495
// end ;
17327: LD_VAR 0 2
17331: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17332: LD_INT 0
17334: PPUSH
17335: PPUSH
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 302
17352: NOT
17353: IFTRUE 17372
17355: PUSH
17356: LD_VAR 0 2
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: CALL_OW 488
17370: NOT
17371: OR
17372: IFTRUE 17381
17374: PUSH
17375: LD_VAR 0 4
17379: NOT
17380: OR
17381: IFFALSE 17385
// exit ;
17383: GO 17727
// list := [ ] ;
17385: LD_ADDR_VAR 0 13
17389: PUSH
17390: EMPTY
17391: ST_TO_ADDR
// if x - r < 0 then
17392: LD_VAR 0 2
17396: PUSH
17397: LD_VAR 0 4
17401: MINUS
17402: PUSH
17403: LD_INT 0
17405: LESS
17406: IFFALSE 17418
// min_x := 0 else
17408: LD_ADDR_VAR 0 7
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
17416: GO 17434
// min_x := x - r ;
17418: LD_ADDR_VAR 0 7
17422: PUSH
17423: LD_VAR 0 2
17427: PUSH
17428: LD_VAR 0 4
17432: MINUS
17433: ST_TO_ADDR
// if y - r < 0 then
17434: LD_VAR 0 3
17438: PUSH
17439: LD_VAR 0 4
17443: MINUS
17444: PUSH
17445: LD_INT 0
17447: LESS
17448: IFFALSE 17460
// min_y := 0 else
17450: LD_ADDR_VAR 0 8
17454: PUSH
17455: LD_INT 0
17457: ST_TO_ADDR
17458: GO 17476
// min_y := y - r ;
17460: LD_ADDR_VAR 0 8
17464: PUSH
17465: LD_VAR 0 3
17469: PUSH
17470: LD_VAR 0 4
17474: MINUS
17475: ST_TO_ADDR
// max_x := x + r ;
17476: LD_ADDR_VAR 0 9
17480: PUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_VAR 0 4
17490: PLUS
17491: ST_TO_ADDR
// max_y := y + r ;
17492: LD_ADDR_VAR 0 10
17496: PUSH
17497: LD_VAR 0 3
17501: PUSH
17502: LD_VAR 0 4
17506: PLUS
17507: ST_TO_ADDR
// for _x = min_x to max_x do
17508: LD_ADDR_VAR 0 11
17512: PUSH
17513: DOUBLE
17514: LD_VAR 0 7
17518: DEC
17519: ST_TO_ADDR
17520: LD_VAR 0 9
17524: PUSH
17525: FOR_TO
17526: IFFALSE 17645
// for _y = min_y to max_y do
17528: LD_ADDR_VAR 0 12
17532: PUSH
17533: DOUBLE
17534: LD_VAR 0 8
17538: DEC
17539: ST_TO_ADDR
17540: LD_VAR 0 10
17544: PUSH
17545: FOR_TO
17546: IFFALSE 17641
// begin if not ValidHex ( _x , _y ) then
17548: LD_VAR 0 11
17552: PPUSH
17553: LD_VAR 0 12
17557: PPUSH
17558: CALL_OW 488
17562: NOT
17563: IFFALSE 17567
// continue ;
17565: GO 17545
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17567: LD_VAR 0 11
17571: PPUSH
17572: LD_VAR 0 12
17576: PPUSH
17577: CALL_OW 351
17581: IFFALSE 17599
17583: PUSH
17584: LD_VAR 0 11
17588: PPUSH
17589: LD_VAR 0 12
17593: PPUSH
17594: CALL_OW 554
17598: AND
17599: IFFALSE 17639
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17601: LD_ADDR_VAR 0 13
17605: PUSH
17606: LD_VAR 0 13
17610: PPUSH
17611: LD_VAR 0 13
17615: PUSH
17616: LD_INT 1
17618: PLUS
17619: PPUSH
17620: LD_VAR 0 11
17624: PUSH
17625: LD_VAR 0 12
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 2
17638: ST_TO_ADDR
// end ;
17639: GO 17545
17641: POP
17642: POP
17643: GO 17525
17645: POP
17646: POP
// if not list then
17647: LD_VAR 0 13
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17727
// for i in list do
17656: LD_ADDR_VAR 0 6
17660: PUSH
17661: LD_VAR 0 13
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17725
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17669: LD_VAR 0 1
17673: PPUSH
17674: LD_STRING M
17676: PUSH
17677: LD_VAR 0 6
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PUSH
17686: LD_VAR 0 6
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 0
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: PPUSH
17719: CALL_OW 447
17723: GO 17666
17725: POP
17726: POP
// end ;
17727: LD_VAR 0 5
17731: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17732: LD_INT 0
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17744: LD_VAR 0 1
17748: PPUSH
17749: CALL_OW 302
17753: NOT
17754: IFTRUE 17773
17756: PUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: LD_VAR 0 3
17766: PPUSH
17767: CALL_OW 488
17771: NOT
17772: OR
17773: IFTRUE 17782
17775: PUSH
17776: LD_VAR 0 4
17780: NOT
17781: OR
17782: IFFALSE 17786
// exit ;
17784: GO 18303
// list := [ ] ;
17786: LD_ADDR_VAR 0 13
17790: PUSH
17791: EMPTY
17792: ST_TO_ADDR
// if x - r < 0 then
17793: LD_VAR 0 2
17797: PUSH
17798: LD_VAR 0 4
17802: MINUS
17803: PUSH
17804: LD_INT 0
17806: LESS
17807: IFFALSE 17819
// min_x := 0 else
17809: LD_ADDR_VAR 0 7
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
17817: GO 17835
// min_x := x - r ;
17819: LD_ADDR_VAR 0 7
17823: PUSH
17824: LD_VAR 0 2
17828: PUSH
17829: LD_VAR 0 4
17833: MINUS
17834: ST_TO_ADDR
// if y - r < 0 then
17835: LD_VAR 0 3
17839: PUSH
17840: LD_VAR 0 4
17844: MINUS
17845: PUSH
17846: LD_INT 0
17848: LESS
17849: IFFALSE 17861
// min_y := 0 else
17851: LD_ADDR_VAR 0 8
17855: PUSH
17856: LD_INT 0
17858: ST_TO_ADDR
17859: GO 17877
// min_y := y - r ;
17861: LD_ADDR_VAR 0 8
17865: PUSH
17866: LD_VAR 0 3
17870: PUSH
17871: LD_VAR 0 4
17875: MINUS
17876: ST_TO_ADDR
// max_x := x + r ;
17877: LD_ADDR_VAR 0 9
17881: PUSH
17882: LD_VAR 0 2
17886: PUSH
17887: LD_VAR 0 4
17891: PLUS
17892: ST_TO_ADDR
// max_y := y + r ;
17893: LD_ADDR_VAR 0 10
17897: PUSH
17898: LD_VAR 0 3
17902: PUSH
17903: LD_VAR 0 4
17907: PLUS
17908: ST_TO_ADDR
// for _x = min_x to max_x do
17909: LD_ADDR_VAR 0 11
17913: PUSH
17914: DOUBLE
17915: LD_VAR 0 7
17919: DEC
17920: ST_TO_ADDR
17921: LD_VAR 0 9
17925: PUSH
17926: FOR_TO
17927: IFFALSE 18046
// for _y = min_y to max_y do
17929: LD_ADDR_VAR 0 12
17933: PUSH
17934: DOUBLE
17935: LD_VAR 0 8
17939: DEC
17940: ST_TO_ADDR
17941: LD_VAR 0 10
17945: PUSH
17946: FOR_TO
17947: IFFALSE 18042
// begin if not ValidHex ( _x , _y ) then
17949: LD_VAR 0 11
17953: PPUSH
17954: LD_VAR 0 12
17958: PPUSH
17959: CALL_OW 488
17963: NOT
17964: IFFALSE 17968
// continue ;
17966: GO 17946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17968: LD_VAR 0 11
17972: PPUSH
17973: LD_VAR 0 12
17977: PPUSH
17978: CALL_OW 351
17982: IFFALSE 18000
17984: PUSH
17985: LD_VAR 0 11
17989: PPUSH
17990: LD_VAR 0 12
17994: PPUSH
17995: CALL_OW 554
17999: AND
18000: IFFALSE 18040
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18002: LD_ADDR_VAR 0 13
18006: PUSH
18007: LD_VAR 0 13
18011: PPUSH
18012: LD_VAR 0 13
18016: PUSH
18017: LD_INT 1
18019: PLUS
18020: PPUSH
18021: LD_VAR 0 11
18025: PUSH
18026: LD_VAR 0 12
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 2
18039: ST_TO_ADDR
// end ;
18040: GO 17946
18042: POP
18043: POP
18044: GO 17926
18046: POP
18047: POP
// if not list then
18048: LD_VAR 0 13
18052: NOT
18053: IFFALSE 18057
// exit ;
18055: GO 18303
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18057: LD_ADDR_VAR 0 13
18061: PUSH
18062: LD_VAR 0 1
18066: PPUSH
18067: LD_VAR 0 13
18071: PPUSH
18072: LD_INT 1
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL 28109 0 4
18082: ST_TO_ADDR
// ComStop ( flame ) ;
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 141
// for i in list do
18092: LD_ADDR_VAR 0 6
18096: PUSH
18097: LD_VAR 0 13
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18134
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 6
18114: PUSH
18115: LD_INT 1
18117: ARRAY
18118: PPUSH
18119: LD_VAR 0 6
18123: PUSH
18124: LD_INT 2
18126: ARRAY
18127: PPUSH
18128: CALL_OW 176
18132: GO 18102
18134: POP
18135: POP
// repeat wait ( 0 0$1 ) ;
18136: LD_INT 35
18138: PPUSH
18139: CALL_OW 67
// task := GetTaskList ( flame ) ;
18143: LD_ADDR_VAR 0 14
18147: PUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 437
18157: ST_TO_ADDR
// if not task then
18158: LD_VAR 0 14
18162: NOT
18163: IFFALSE 18167
// exit ;
18165: GO 18303
// if task [ 1 ] [ 1 ] <> | then
18167: LD_VAR 0 14
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PUSH
18180: LD_STRING |
18182: NONEQUAL
18183: IFFALSE 18187
// exit ;
18185: GO 18303
// _x := task [ 1 ] [ 2 ] ;
18187: LD_ADDR_VAR 0 11
18191: PUSH
18192: LD_VAR 0 14
18196: PUSH
18197: LD_INT 1
18199: ARRAY
18200: PUSH
18201: LD_INT 2
18203: ARRAY
18204: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18205: LD_ADDR_VAR 0 12
18209: PUSH
18210: LD_VAR 0 14
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PUSH
18219: LD_INT 3
18221: ARRAY
18222: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18223: LD_VAR 0 11
18227: PPUSH
18228: LD_VAR 0 12
18232: PPUSH
18233: CALL_OW 351
18237: NOT
18238: IFTRUE 18257
18240: PUSH
18241: LD_VAR 0 11
18245: PPUSH
18246: LD_VAR 0 12
18250: PPUSH
18251: CALL_OW 554
18255: NOT
18256: OR
18257: IFFALSE 18291
// begin task := Delete ( task , 1 ) ;
18259: LD_ADDR_VAR 0 14
18263: PUSH
18264: LD_VAR 0 14
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 3
18276: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_VAR 0 14
18286: PPUSH
18287: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: CALL_OW 314
18300: NOT
18301: IFFALSE 18136
// end ;
18303: LD_VAR 0 5
18307: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18308: LD_EXP 64
18312: NOT
18313: IFFALSE 18363
18315: GO 18317
18317: DISABLE
// begin initHack := true ;
18318: LD_ADDR_EXP 64
18322: PUSH
18323: LD_INT 1
18325: ST_TO_ADDR
// hackTanks := [ ] ;
18326: LD_ADDR_EXP 65
18330: PUSH
18331: EMPTY
18332: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18333: LD_ADDR_EXP 66
18337: PUSH
18338: EMPTY
18339: ST_TO_ADDR
// hackLimit := 3 ;
18340: LD_ADDR_EXP 67
18344: PUSH
18345: LD_INT 3
18347: ST_TO_ADDR
// hackDist := 12 ;
18348: LD_ADDR_EXP 68
18352: PUSH
18353: LD_INT 12
18355: ST_TO_ADDR
// hackCounter := [ ] ;
18356: LD_ADDR_EXP 69
18360: PUSH
18361: EMPTY
18362: ST_TO_ADDR
// end ;
18363: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18364: LD_EXP 64
18368: IFFALSE 18386
18370: PUSH
18371: LD_INT 34
18373: PUSH
18374: LD_INT 99
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: AND
18386: IFFALSE 18639
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
// begin enable ;
18395: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: LD_INT 34
18403: PUSH
18404: LD_INT 99
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: PUSH
18416: FOR_IN
18417: IFFALSE 18637
// begin if not i in hackTanks then
18419: LD_VAR 0 1
18423: PUSH
18424: LD_EXP 65
18428: IN
18429: NOT
18430: IFFALSE 18513
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18432: LD_ADDR_EXP 65
18436: PUSH
18437: LD_EXP 65
18441: PPUSH
18442: LD_EXP 65
18446: PUSH
18447: LD_INT 1
18449: PLUS
18450: PPUSH
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL_OW 1
18460: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18461: LD_ADDR_EXP 66
18465: PUSH
18466: LD_EXP 66
18470: PPUSH
18471: LD_EXP 66
18475: PUSH
18476: LD_INT 1
18478: PLUS
18479: PPUSH
18480: EMPTY
18481: PPUSH
18482: CALL_OW 1
18486: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18487: LD_ADDR_EXP 69
18491: PUSH
18492: LD_EXP 69
18496: PPUSH
18497: LD_EXP 69
18501: PUSH
18502: LD_INT 1
18504: PLUS
18505: PPUSH
18506: EMPTY
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18513: LD_VAR 0 1
18517: PPUSH
18518: CALL_OW 302
18522: NOT
18523: IFFALSE 18536
// begin HackUnlinkAll ( i ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL 18642 0 1
// continue ;
18534: GO 18416
// end ; HackCheckCapturedStatus ( i ) ;
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL 19087 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 81
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 33
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 91
18579: PUSH
18580: LD_VAR 0 1
18584: PUSH
18585: LD_EXP 68
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 50
18597: PUSH
18598: EMPTY
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: ST_TO_ADDR
// if not tmp then
18612: LD_VAR 0 2
18616: NOT
18617: IFFALSE 18621
// continue ;
18619: GO 18416
// HackLink ( i , tmp ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL 18778 0 2
// end ;
18635: GO 18416
18637: POP
18638: POP
// end ;
18639: PPOPN 2
18641: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
18646: PPUSH
// if not hack in hackTanks then
18647: LD_VAR 0 1
18651: PUSH
18652: LD_EXP 65
18656: IN
18657: NOT
18658: IFFALSE 18662
// exit ;
18660: GO 18773
// index := GetElementIndex ( hackTanks , hack ) ;
18662: LD_ADDR_VAR 0 4
18666: PUSH
18667: LD_EXP 65
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL 27404 0 2
18681: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18682: LD_EXP 66
18686: PUSH
18687: LD_VAR 0 4
18691: ARRAY
18692: IFFALSE 18773
// begin for i in hackTanksCaptured [ index ] do
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_EXP 66
18703: PUSH
18704: LD_VAR 0 4
18708: ARRAY
18709: PUSH
18710: FOR_IN
18711: IFFALSE 18737
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18713: LD_VAR 0 3
18717: PUSH
18718: LD_INT 1
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 3
18726: PUSH
18727: LD_INT 2
18729: ARRAY
18730: PPUSH
18731: CALL_OW 235
18735: GO 18710
18737: POP
18738: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18739: LD_ADDR_EXP 66
18743: PUSH
18744: LD_EXP 66
18748: PPUSH
18749: LD_VAR 0 4
18753: PPUSH
18754: EMPTY
18755: PPUSH
18756: CALL_OW 1
18760: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18761: LD_VAR 0 1
18765: PPUSH
18766: LD_INT 0
18768: PPUSH
18769: CALL_OW 505
// end ; end ;
18773: LD_VAR 0 2
18777: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18778: LD_INT 0
18780: PPUSH
18781: PPUSH
18782: PPUSH
// if not hack in hackTanks or not vehicles then
18783: LD_VAR 0 1
18787: PUSH
18788: LD_EXP 65
18792: IN
18793: NOT
18794: IFTRUE 18803
18796: PUSH
18797: LD_VAR 0 2
18801: NOT
18802: OR
18803: IFFALSE 18807
// exit ;
18805: GO 19082
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 2
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL 28056 0 4
18832: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18833: LD_ADDR_VAR 0 5
18837: PUSH
18838: LD_EXP 65
18842: PPUSH
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL 27404 0 2
18852: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18853: LD_EXP 66
18857: PUSH
18858: LD_VAR 0 5
18862: ARRAY
18863: PUSH
18864: LD_EXP 67
18868: LESS
18869: IFFALSE 19058
// begin for i := 1 to vehicles do
18871: LD_ADDR_VAR 0 4
18875: PUSH
18876: DOUBLE
18877: LD_INT 1
18879: DEC
18880: ST_TO_ADDR
18881: LD_VAR 0 2
18885: PUSH
18886: FOR_TO
18887: IFFALSE 19056
// begin if hackTanksCaptured [ index ] = hackLimit then
18889: LD_EXP 66
18893: PUSH
18894: LD_VAR 0 5
18898: ARRAY
18899: PUSH
18900: LD_EXP 67
18904: EQUAL
18905: IFFALSE 18909
// break ;
18907: GO 19056
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18909: LD_ADDR_EXP 69
18913: PUSH
18914: LD_EXP 69
18918: PPUSH
18919: LD_VAR 0 5
18923: PPUSH
18924: LD_EXP 69
18928: PUSH
18929: LD_VAR 0 5
18933: ARRAY
18934: PUSH
18935: LD_INT 1
18937: PLUS
18938: PPUSH
18939: CALL_OW 1
18943: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18944: LD_ADDR_EXP 66
18948: PUSH
18949: LD_EXP 66
18953: PPUSH
18954: LD_VAR 0 5
18958: PUSH
18959: LD_EXP 66
18963: PUSH
18964: LD_VAR 0 5
18968: ARRAY
18969: PUSH
18970: LD_INT 1
18972: PLUS
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: LD_VAR 0 2
18982: PUSH
18983: LD_VAR 0 4
18987: ARRAY
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: LD_VAR 0 4
18998: ARRAY
18999: PPUSH
19000: CALL_OW 255
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL 27621 0 3
19013: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19014: LD_VAR 0 2
19018: PUSH
19019: LD_VAR 0 4
19023: ARRAY
19024: PPUSH
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 255
19034: PPUSH
19035: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19039: LD_VAR 0 2
19043: PUSH
19044: LD_VAR 0 4
19048: ARRAY
19049: PPUSH
19050: CALL_OW 141
// end ;
19054: GO 18886
19056: POP
19057: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19058: LD_VAR 0 1
19062: PPUSH
19063: LD_EXP 66
19067: PUSH
19068: LD_VAR 0 5
19072: ARRAY
19073: PUSH
19074: LD_INT 0
19076: PLUS
19077: PPUSH
19078: CALL_OW 505
// end ;
19082: LD_VAR 0 3
19086: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// if not hack in hackTanks then
19093: LD_VAR 0 1
19097: PUSH
19098: LD_EXP 65
19102: IN
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19352
// index := GetElementIndex ( hackTanks , hack ) ;
19108: LD_ADDR_VAR 0 4
19112: PUSH
19113: LD_EXP 65
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL 27404 0 2
19127: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: DOUBLE
19134: LD_EXP 66
19138: PUSH
19139: LD_VAR 0 4
19143: ARRAY
19144: INC
19145: ST_TO_ADDR
19146: LD_INT 1
19148: PUSH
19149: FOR_DOWNTO
19150: IFFALSE 19326
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19152: LD_ADDR_VAR 0 5
19156: PUSH
19157: LD_EXP 66
19161: PUSH
19162: LD_VAR 0 4
19166: ARRAY
19167: PUSH
19168: LD_VAR 0 3
19172: ARRAY
19173: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19174: LD_VAR 0 5
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: CALL_OW 302
19187: NOT
19188: IFTRUE 19216
19190: PUSH
19191: LD_VAR 0 5
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 255
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: CALL_OW 255
19214: NONEQUAL
19215: OR
19216: IFFALSE 19324
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19218: LD_VAR 0 5
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: CALL_OW 305
19231: IFFALSE 19259
19233: PUSH
19234: LD_VAR 0 5
19238: PUSH
19239: LD_INT 1
19241: ARRAY
19242: PPUSH
19243: CALL_OW 255
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 255
19257: EQUAL
19258: AND
19259: IFFALSE 19283
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19261: LD_VAR 0 5
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 5
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19283: LD_ADDR_EXP 66
19287: PUSH
19288: LD_EXP 66
19292: PPUSH
19293: LD_VAR 0 4
19297: PPUSH
19298: LD_EXP 66
19302: PUSH
19303: LD_VAR 0 4
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 3
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// end ; end ;
19324: GO 19149
19326: POP
19327: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_EXP 66
19337: PUSH
19338: LD_VAR 0 4
19342: ARRAY
19343: PUSH
19344: LD_INT 0
19346: PLUS
19347: PPUSH
19348: CALL_OW 505
// end ;
19352: LD_VAR 0 2
19356: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
// if not hack in hackTanks then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 65
19372: IN
19373: NOT
19374: IFFALSE 19378
// exit ;
19376: GO 19463
// index := GetElementIndex ( hackTanks , hack ) ;
19378: LD_ADDR_VAR 0 5
19382: PUSH
19383: LD_EXP 65
19387: PPUSH
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL 27404 0 2
19397: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_EXP 66
19412: PUSH
19413: LD_VAR 0 5
19417: ARRAY
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19461
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19422: LD_EXP 66
19426: PUSH
19427: LD_VAR 0 5
19431: ARRAY
19432: PUSH
19433: LD_VAR 0 4
19437: ARRAY
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: PUSH
19443: LD_VAR 0 2
19447: EQUAL
19448: IFFALSE 19459
// KillUnit ( vehicle ) ;
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 66
19459: GO 19419
19461: POP
19462: POP
// end ;
19463: LD_VAR 0 3
19467: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19468: LD_EXP 70
19472: NOT
19473: IFFALSE 19508
19475: GO 19477
19477: DISABLE
// begin initMiner := true ;
19478: LD_ADDR_EXP 70
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// minersList := [ ] ;
19486: LD_ADDR_EXP 71
19490: PUSH
19491: EMPTY
19492: ST_TO_ADDR
// minerMinesList := [ ] ;
19493: LD_ADDR_EXP 72
19497: PUSH
19498: EMPTY
19499: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19500: LD_ADDR_EXP 73
19504: PUSH
19505: LD_INT 5
19507: ST_TO_ADDR
// end ;
19508: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19509: LD_EXP 70
19513: IFFALSE 19531
19515: PUSH
19516: LD_INT 34
19518: PUSH
19519: LD_INT 81
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: AND
19531: IFFALSE 19994
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
// begin enable ;
19542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_INT 34
19550: PUSH
19551: LD_INT 81
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: FOR_IN
19564: IFFALSE 19636
// begin if not i in minersList then
19566: LD_VAR 0 1
19570: PUSH
19571: LD_EXP 71
19575: IN
19576: NOT
19577: IFFALSE 19634
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19579: LD_ADDR_EXP 71
19583: PUSH
19584: LD_EXP 71
19588: PPUSH
19589: LD_EXP 71
19593: PUSH
19594: LD_INT 1
19596: PLUS
19597: PPUSH
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 1
19607: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19608: LD_ADDR_EXP 72
19612: PUSH
19613: LD_EXP 72
19617: PPUSH
19618: LD_EXP 72
19622: PUSH
19623: LD_INT 1
19625: PLUS
19626: PPUSH
19627: EMPTY
19628: PPUSH
19629: CALL_OW 1
19633: ST_TO_ADDR
// end end ;
19634: GO 19563
19636: POP
19637: POP
// for i := minerMinesList downto 1 do
19638: LD_ADDR_VAR 0 1
19642: PUSH
19643: DOUBLE
19644: LD_EXP 72
19648: INC
19649: ST_TO_ADDR
19650: LD_INT 1
19652: PUSH
19653: FOR_DOWNTO
19654: IFFALSE 19992
// begin if IsLive ( minersList [ i ] ) then
19656: LD_EXP 71
19660: PUSH
19661: LD_VAR 0 1
19665: ARRAY
19666: PPUSH
19667: CALL_OW 300
19671: IFFALSE 19699
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19673: LD_EXP 71
19677: PUSH
19678: LD_VAR 0 1
19682: ARRAY
19683: PPUSH
19684: LD_EXP 72
19688: PUSH
19689: LD_VAR 0 1
19693: ARRAY
19694: PPUSH
19695: CALL_OW 505
// if not minerMinesList [ i ] then
19699: LD_EXP 72
19703: PUSH
19704: LD_VAR 0 1
19708: ARRAY
19709: NOT
19710: IFFALSE 19714
// continue ;
19712: GO 19653
// for j := minerMinesList [ i ] downto 1 do
19714: LD_ADDR_VAR 0 2
19718: PUSH
19719: DOUBLE
19720: LD_EXP 72
19724: PUSH
19725: LD_VAR 0 1
19729: ARRAY
19730: INC
19731: ST_TO_ADDR
19732: LD_INT 1
19734: PUSH
19735: FOR_DOWNTO
19736: IFFALSE 19988
// begin side := GetSide ( minersList [ i ] ) ;
19738: LD_ADDR_VAR 0 3
19742: PUSH
19743: LD_EXP 71
19747: PUSH
19748: LD_VAR 0 1
19752: ARRAY
19753: PPUSH
19754: CALL_OW 255
19758: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19759: LD_ADDR_VAR 0 4
19763: PUSH
19764: LD_EXP 72
19768: PUSH
19769: LD_VAR 0 1
19773: ARRAY
19774: PUSH
19775: LD_VAR 0 2
19779: ARRAY
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PPUSH
19785: LD_EXP 72
19789: PUSH
19790: LD_VAR 0 1
19794: ARRAY
19795: PUSH
19796: LD_VAR 0 2
19800: ARRAY
19801: PUSH
19802: LD_INT 2
19804: ARRAY
19805: PPUSH
19806: CALL_OW 428
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 4
19815: NOT
19816: IFFALSE 19820
// continue ;
19818: GO 19735
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19820: LD_VAR 0 4
19824: PUSH
19825: LD_INT 81
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: IN
19842: IFFALSE 19892
19844: PUSH
19845: LD_EXP 72
19849: PUSH
19850: LD_VAR 0 1
19854: ARRAY
19855: PUSH
19856: LD_VAR 0 2
19860: ARRAY
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PPUSH
19866: LD_EXP 72
19870: PUSH
19871: LD_VAR 0 1
19875: ARRAY
19876: PUSH
19877: LD_VAR 0 2
19881: ARRAY
19882: PUSH
19883: LD_INT 2
19885: ARRAY
19886: PPUSH
19887: CALL_OW 458
19891: AND
19892: IFFALSE 19986
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19894: LD_EXP 72
19898: PUSH
19899: LD_VAR 0 1
19903: ARRAY
19904: PUSH
19905: LD_VAR 0 2
19909: ARRAY
19910: PUSH
19911: LD_INT 1
19913: ARRAY
19914: PPUSH
19915: LD_EXP 72
19919: PUSH
19920: LD_VAR 0 1
19924: ARRAY
19925: PUSH
19926: LD_VAR 0 2
19930: ARRAY
19931: PUSH
19932: LD_INT 2
19934: ARRAY
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19945: LD_ADDR_EXP 72
19949: PUSH
19950: LD_EXP 72
19954: PPUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: LD_EXP 72
19964: PUSH
19965: LD_VAR 0 1
19969: ARRAY
19970: PPUSH
19971: LD_VAR 0 2
19975: PPUSH
19976: CALL_OW 3
19980: PPUSH
19981: CALL_OW 1
19985: ST_TO_ADDR
// end ; end ;
19986: GO 19735
19988: POP
19989: POP
// end ;
19990: GO 19653
19992: POP
19993: POP
// end ;
19994: PPOPN 4
19996: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
// result := false ;
20001: LD_ADDR_VAR 0 4
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL_OW 264
20018: PUSH
20019: LD_INT 81
20021: EQUAL
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20271
// index := GetElementIndex ( minersList , unit ) ;
20027: LD_ADDR_VAR 0 5
20031: PUSH
20032: LD_EXP 71
20036: PPUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL 27404 0 2
20046: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20047: LD_EXP 72
20051: PUSH
20052: LD_VAR 0 5
20056: ARRAY
20057: PUSH
20058: LD_EXP 73
20062: GREATEREQUAL
20063: IFFALSE 20067
// exit ;
20065: GO 20271
// ComMoveXY ( unit , x , y ) ;
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_VAR 0 2
20076: PPUSH
20077: LD_VAR 0 3
20081: PPUSH
20082: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20086: LD_INT 35
20088: PPUSH
20089: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20093: LD_VAR 0 1
20097: PPUSH
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: CALL 59450 0 3
20112: NOT
20113: IFFALSE 20126
20115: PUSH
20116: LD_VAR 0 1
20120: PPUSH
20121: CALL_OW 314
20125: AND
20126: IFFALSE 20130
// exit ;
20128: GO 20271
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20130: LD_VAR 0 2
20134: PPUSH
20135: LD_VAR 0 3
20139: PPUSH
20140: CALL_OW 428
20144: PUSH
20145: LD_VAR 0 1
20149: EQUAL
20150: IFFALSE 20164
20152: PUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 314
20162: NOT
20163: AND
20164: IFFALSE 20086
// PlaySoundXY ( x , y , PlantMine ) ;
20166: LD_VAR 0 2
20170: PPUSH
20171: LD_VAR 0 3
20175: PPUSH
20176: LD_STRING PlantMine
20178: PPUSH
20179: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20183: LD_VAR 0 2
20187: PPUSH
20188: LD_VAR 0 3
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 255
20202: PPUSH
20203: LD_INT 0
20205: PPUSH
20206: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20210: LD_ADDR_EXP 72
20214: PUSH
20215: LD_EXP 72
20219: PPUSH
20220: LD_VAR 0 5
20224: PUSH
20225: LD_EXP 72
20229: PUSH
20230: LD_VAR 0 5
20234: ARRAY
20235: PUSH
20236: LD_INT 1
20238: PLUS
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: LD_VAR 0 2
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL 27621 0 3
20262: ST_TO_ADDR
// result := true ;
20263: LD_ADDR_VAR 0 4
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// end ;
20271: LD_VAR 0 4
20275: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20276: LD_INT 0
20278: PPUSH
20279: PPUSH
20280: PPUSH
// if not unit in minersList then
20281: LD_VAR 0 1
20285: PUSH
20286: LD_EXP 71
20290: IN
20291: NOT
20292: IFFALSE 20296
// exit ;
20294: GO 20690
// index := GetElementIndex ( minersList , unit ) ;
20296: LD_ADDR_VAR 0 6
20300: PUSH
20301: LD_EXP 71
20305: PPUSH
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL 27404 0 2
20315: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20316: LD_ADDR_VAR 0 5
20320: PUSH
20321: DOUBLE
20322: LD_EXP 72
20326: PUSH
20327: LD_VAR 0 6
20331: ARRAY
20332: INC
20333: ST_TO_ADDR
20334: LD_INT 1
20336: PUSH
20337: FOR_DOWNTO
20338: IFFALSE 20501
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20340: LD_EXP 72
20344: PUSH
20345: LD_VAR 0 6
20349: ARRAY
20350: PUSH
20351: LD_VAR 0 5
20355: ARRAY
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 2
20365: EQUAL
20366: IFFALSE 20396
20368: PUSH
20369: LD_EXP 72
20373: PUSH
20374: LD_VAR 0 6
20378: ARRAY
20379: PUSH
20380: LD_VAR 0 5
20384: ARRAY
20385: PUSH
20386: LD_INT 2
20388: ARRAY
20389: PUSH
20390: LD_VAR 0 3
20394: EQUAL
20395: AND
20396: IFFALSE 20499
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20398: LD_EXP 72
20402: PUSH
20403: LD_VAR 0 6
20407: ARRAY
20408: PUSH
20409: LD_VAR 0 5
20413: ARRAY
20414: PUSH
20415: LD_INT 1
20417: ARRAY
20418: PPUSH
20419: LD_EXP 72
20423: PUSH
20424: LD_VAR 0 6
20428: ARRAY
20429: PUSH
20430: LD_VAR 0 5
20434: ARRAY
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: PPUSH
20440: LD_VAR 0 1
20444: PPUSH
20445: CALL_OW 255
20449: PPUSH
20450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20454: LD_ADDR_EXP 72
20458: PUSH
20459: LD_EXP 72
20463: PPUSH
20464: LD_VAR 0 6
20468: PPUSH
20469: LD_EXP 72
20473: PUSH
20474: LD_VAR 0 6
20478: ARRAY
20479: PPUSH
20480: LD_VAR 0 5
20484: PPUSH
20485: CALL_OW 3
20489: PPUSH
20490: CALL_OW 1
20494: ST_TO_ADDR
// exit ;
20495: POP
20496: POP
20497: GO 20690
// end ; end ;
20499: GO 20337
20501: POP
20502: POP
// for i := minerMinesList [ index ] downto 1 do
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: DOUBLE
20509: LD_EXP 72
20513: PUSH
20514: LD_VAR 0 6
20518: ARRAY
20519: INC
20520: ST_TO_ADDR
20521: LD_INT 1
20523: PUSH
20524: FOR_DOWNTO
20525: IFFALSE 20688
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20527: LD_EXP 72
20531: PUSH
20532: LD_VAR 0 6
20536: ARRAY
20537: PUSH
20538: LD_VAR 0 5
20542: ARRAY
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PPUSH
20548: LD_EXP 72
20552: PUSH
20553: LD_VAR 0 6
20557: ARRAY
20558: PUSH
20559: LD_VAR 0 5
20563: ARRAY
20564: PUSH
20565: LD_INT 2
20567: ARRAY
20568: PPUSH
20569: LD_VAR 0 2
20573: PPUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: CALL_OW 298
20583: PUSH
20584: LD_INT 6
20586: LESS
20587: IFFALSE 20686
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20589: LD_EXP 72
20593: PUSH
20594: LD_VAR 0 6
20598: ARRAY
20599: PUSH
20600: LD_VAR 0 5
20604: ARRAY
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PPUSH
20610: LD_EXP 72
20614: PUSH
20615: LD_VAR 0 6
20619: ARRAY
20620: PUSH
20621: LD_VAR 0 5
20625: ARRAY
20626: PUSH
20627: LD_INT 2
20629: ARRAY
20630: PPUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 255
20640: PPUSH
20641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20645: LD_ADDR_EXP 72
20649: PUSH
20650: LD_EXP 72
20654: PPUSH
20655: LD_VAR 0 6
20659: PPUSH
20660: LD_EXP 72
20664: PUSH
20665: LD_VAR 0 6
20669: ARRAY
20670: PPUSH
20671: LD_VAR 0 5
20675: PPUSH
20676: CALL_OW 3
20680: PPUSH
20681: CALL_OW 1
20685: ST_TO_ADDR
// end ; end ;
20686: GO 20524
20688: POP
20689: POP
// end ;
20690: LD_VAR 0 4
20694: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 264
20715: PUSH
20716: LD_INT 81
20718: EQUAL
20719: NOT
20720: IFTRUE 20735
20722: PUSH
20723: LD_VAR 0 1
20727: PUSH
20728: LD_EXP 71
20732: IN
20733: NOT
20734: OR
20735: IFFALSE 20739
// exit ;
20737: GO 21065
// index := GetElementIndex ( minersList , unit ) ;
20739: LD_ADDR_VAR 0 6
20743: PUSH
20744: LD_EXP 71
20748: PPUSH
20749: LD_VAR 0 1
20753: PPUSH
20754: CALL 27404 0 2
20758: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20759: LD_ADDR_VAR 0 8
20763: PUSH
20764: LD_EXP 73
20768: PUSH
20769: LD_EXP 72
20773: PUSH
20774: LD_VAR 0 6
20778: ARRAY
20779: MINUS
20780: ST_TO_ADDR
// if not minesFreeAmount then
20781: LD_VAR 0 8
20785: NOT
20786: IFFALSE 20790
// exit ;
20788: GO 21065
// tmp := [ ] ;
20790: LD_ADDR_VAR 0 7
20794: PUSH
20795: EMPTY
20796: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20797: LD_ADDR_VAR 0 5
20801: PUSH
20802: DOUBLE
20803: LD_INT 1
20805: DEC
20806: ST_TO_ADDR
20807: LD_VAR 0 8
20811: PUSH
20812: FOR_TO
20813: IFFALSE 21012
// begin _d := rand ( 0 , 5 ) ;
20815: LD_ADDR_VAR 0 11
20819: PUSH
20820: LD_INT 0
20822: PPUSH
20823: LD_INT 5
20825: PPUSH
20826: CALL_OW 12
20830: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20831: LD_ADDR_VAR 0 12
20835: PUSH
20836: LD_INT 2
20838: PPUSH
20839: LD_INT 6
20841: PPUSH
20842: CALL_OW 12
20846: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20847: LD_ADDR_VAR 0 9
20851: PUSH
20852: LD_VAR 0 2
20856: PPUSH
20857: LD_VAR 0 11
20861: PPUSH
20862: LD_VAR 0 12
20866: PPUSH
20867: CALL_OW 272
20871: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20872: LD_ADDR_VAR 0 10
20876: PUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: LD_VAR 0 11
20886: PPUSH
20887: LD_VAR 0 12
20891: PPUSH
20892: CALL_OW 273
20896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20897: LD_VAR 0 9
20901: PPUSH
20902: LD_VAR 0 10
20906: PPUSH
20907: CALL_OW 488
20911: IFFALSE 20935
20913: PUSH
20914: LD_VAR 0 9
20918: PUSH
20919: LD_VAR 0 10
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_VAR 0 7
20932: IN
20933: NOT
20934: AND
20935: IFFALSE 20954
20937: PUSH
20938: LD_VAR 0 9
20942: PPUSH
20943: LD_VAR 0 10
20947: PPUSH
20948: CALL_OW 458
20952: NOT
20953: AND
20954: IFFALSE 20996
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20956: LD_ADDR_VAR 0 7
20960: PUSH
20961: LD_VAR 0 7
20965: PPUSH
20966: LD_VAR 0 7
20970: PUSH
20971: LD_INT 1
20973: PLUS
20974: PPUSH
20975: LD_VAR 0 9
20979: PUSH
20980: LD_VAR 0 10
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PPUSH
20989: CALL_OW 1
20993: ST_TO_ADDR
20994: GO 21010
// i := i - 1 ;
20996: LD_ADDR_VAR 0 5
21000: PUSH
21001: LD_VAR 0 5
21005: PUSH
21006: LD_INT 1
21008: MINUS
21009: ST_TO_ADDR
// end ;
21010: GO 20812
21012: POP
21013: POP
// for i in tmp do
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: LD_VAR 0 7
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21063
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21027: LD_VAR 0 1
21031: PPUSH
21032: LD_VAR 0 5
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: LD_VAR 0 5
21045: PUSH
21046: LD_INT 2
21048: ARRAY
21049: PPUSH
21050: CALL 19997 0 3
21054: NOT
21055: IFFALSE 21061
// exit ;
21057: POP
21058: POP
21059: GO 21065
21061: GO 21024
21063: POP
21064: POP
// end ;
21065: LD_VAR 0 4
21069: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21070: LD_INT 0
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
// if GetClass ( unit ) <> class_sniper then
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 257
21090: PUSH
21091: LD_INT 5
21093: NONEQUAL
21094: IFFALSE 21098
// exit ;
21096: GO 21568
// dist := 8 ;
21098: LD_ADDR_VAR 0 5
21102: PUSH
21103: LD_INT 8
21105: ST_TO_ADDR
// viewRange := 12 ;
21106: LD_ADDR_VAR 0 8
21110: PUSH
21111: LD_INT 12
21113: ST_TO_ADDR
// side := GetSide ( unit ) ;
21114: LD_ADDR_VAR 0 6
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 255
21128: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21129: LD_INT 61
21131: PPUSH
21132: LD_VAR 0 6
21136: PPUSH
21137: CALL_OW 321
21141: PUSH
21142: LD_INT 2
21144: EQUAL
21145: IFFALSE 21155
// viewRange := 16 ;
21147: LD_ADDR_VAR 0 8
21151: PUSH
21152: LD_INT 16
21154: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21155: LD_VAR 0 1
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: CALL_OW 297
21174: PUSH
21175: LD_VAR 0 5
21179: GREATER
21180: IFFALSE 21259
// begin ComMoveXY ( unit , x , y ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: LD_VAR 0 2
21191: PPUSH
21192: LD_VAR 0 3
21196: PPUSH
21197: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21201: LD_INT 35
21203: PPUSH
21204: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21208: LD_VAR 0 1
21212: PPUSH
21213: LD_VAR 0 2
21217: PPUSH
21218: LD_VAR 0 3
21222: PPUSH
21223: CALL 59450 0 3
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 21568
// until GetDistUnitXY ( unit , x , y ) < dist ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_VAR 0 2
21241: PPUSH
21242: LD_VAR 0 3
21246: PPUSH
21247: CALL_OW 297
21251: PUSH
21252: LD_VAR 0 5
21256: LESS
21257: IFFALSE 21201
// end ; ComTurnXY ( unit , x , y ) ;
21259: LD_VAR 0 1
21263: PPUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_VAR 0 3
21273: PPUSH
21274: CALL_OW 118
// repeat if Multiplayer then
21278: LD_OWVAR 4
21282: IFFALSE 21293
// wait ( 35 ) else
21284: LD_INT 35
21286: PPUSH
21287: CALL_OW 67
21291: GO 21300
// wait ( 5 ) ;
21293: LD_INT 5
21295: PPUSH
21296: CALL_OW 67
// _d := GetDir ( unit ) ;
21300: LD_ADDR_VAR 0 11
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 254
21314: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21315: LD_ADDR_VAR 0 7
21319: PUSH
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 250
21329: PPUSH
21330: LD_VAR 0 1
21334: PPUSH
21335: CALL_OW 251
21339: PPUSH
21340: LD_VAR 0 2
21344: PPUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: CALL 62086 0 4
21354: ST_TO_ADDR
// until dir = _d ;
21355: LD_VAR 0 7
21359: PUSH
21360: LD_VAR 0 11
21364: EQUAL
21365: IFFALSE 21278
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21367: LD_ADDR_VAR 0 9
21371: PUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 250
21381: PPUSH
21382: LD_VAR 0 7
21386: PPUSH
21387: LD_VAR 0 5
21391: PPUSH
21392: CALL_OW 272
21396: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21397: LD_ADDR_VAR 0 10
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 251
21411: PPUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_VAR 0 5
21421: PPUSH
21422: CALL_OW 273
21426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21427: LD_VAR 0 9
21431: PPUSH
21432: LD_VAR 0 10
21436: PPUSH
21437: CALL_OW 488
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21568
// ComAnimCustom ( unit , 1 ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 592
// p := 0 ;
21458: LD_ADDR_VAR 0 12
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21466: LD_VAR 0 9
21470: PPUSH
21471: LD_VAR 0 10
21475: PPUSH
21476: LD_VAR 0 6
21480: PPUSH
21481: LD_VAR 0 8
21485: PPUSH
21486: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21490: LD_INT 35
21492: PPUSH
21493: CALL_OW 67
// p := Inc ( p ) ;
21497: LD_ADDR_VAR 0 12
21501: PUSH
21502: LD_VAR 0 12
21506: PPUSH
21507: CALL 62042 0 1
21511: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21512: LD_VAR 0 12
21516: PUSH
21517: LD_INT 3
21519: EQUAL
21520: IFTRUE 21534
21522: PUSH
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 302
21532: NOT
21533: OR
21534: IFTRUE 21547
21536: PUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 301
21546: OR
21547: IFFALSE 21490
// RemoveSeeing ( _x , _y , side ) ;
21549: LD_VAR 0 9
21553: PPUSH
21554: LD_VAR 0 10
21558: PPUSH
21559: LD_VAR 0 6
21563: PPUSH
21564: CALL_OW 331
// end ;
21568: LD_VAR 0 4
21572: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
21573: LD_INT 0
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
// if not unit then
21586: LD_VAR 0 1
21590: NOT
21591: IFFALSE 21595
// exit ;
21593: GO 21866
// side := GetSide ( unit ) ;
21595: LD_ADDR_VAR 0 3
21599: PUSH
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 255
21609: ST_TO_ADDR
// x := GetX ( unit ) ;
21610: LD_ADDR_VAR 0 5
21614: PUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 250
21624: ST_TO_ADDR
// y := GetY ( unit ) ;
21625: LD_ADDR_VAR 0 6
21629: PUSH
21630: LD_VAR 0 1
21634: PPUSH
21635: CALL_OW 251
21639: ST_TO_ADDR
// r := 8 ;
21640: LD_ADDR_VAR 0 4
21644: PUSH
21645: LD_INT 8
21647: ST_TO_ADDR
// if x - r < 0 then
21648: LD_VAR 0 5
21652: PUSH
21653: LD_VAR 0 4
21657: MINUS
21658: PUSH
21659: LD_INT 0
21661: LESS
21662: IFFALSE 21674
// min_x := 0 else
21664: LD_ADDR_VAR 0 7
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
21672: GO 21690
// min_x := x - r ;
21674: LD_ADDR_VAR 0 7
21678: PUSH
21679: LD_VAR 0 5
21683: PUSH
21684: LD_VAR 0 4
21688: MINUS
21689: ST_TO_ADDR
// if y - r < 0 then
21690: LD_VAR 0 6
21694: PUSH
21695: LD_VAR 0 4
21699: MINUS
21700: PUSH
21701: LD_INT 0
21703: LESS
21704: IFFALSE 21716
// min_y := 0 else
21706: LD_ADDR_VAR 0 8
21710: PUSH
21711: LD_INT 0
21713: ST_TO_ADDR
21714: GO 21732
// min_y := y - r ;
21716: LD_ADDR_VAR 0 8
21720: PUSH
21721: LD_VAR 0 6
21725: PUSH
21726: LD_VAR 0 4
21730: MINUS
21731: ST_TO_ADDR
// max_x := x + r ;
21732: LD_ADDR_VAR 0 9
21736: PUSH
21737: LD_VAR 0 5
21741: PUSH
21742: LD_VAR 0 4
21746: PLUS
21747: ST_TO_ADDR
// max_y := y + r ;
21748: LD_ADDR_VAR 0 10
21752: PUSH
21753: LD_VAR 0 6
21757: PUSH
21758: LD_VAR 0 4
21762: PLUS
21763: ST_TO_ADDR
// for _x = min_x to max_x do
21764: LD_ADDR_VAR 0 11
21768: PUSH
21769: DOUBLE
21770: LD_VAR 0 7
21774: DEC
21775: ST_TO_ADDR
21776: LD_VAR 0 9
21780: PUSH
21781: FOR_TO
21782: IFFALSE 21864
// for _y = min_y to max_y do
21784: LD_ADDR_VAR 0 12
21788: PUSH
21789: DOUBLE
21790: LD_VAR 0 8
21794: DEC
21795: ST_TO_ADDR
21796: LD_VAR 0 10
21800: PUSH
21801: FOR_TO
21802: IFFALSE 21860
// begin if not ValidHex ( _x , _y ) then
21804: LD_VAR 0 11
21808: PPUSH
21809: LD_VAR 0 12
21813: PPUSH
21814: CALL_OW 488
21818: NOT
21819: IFFALSE 21823
// continue ;
21821: GO 21801
// if MineAtPos ( _x , _y ) then
21823: LD_VAR 0 11
21827: PPUSH
21828: LD_VAR 0 12
21832: PPUSH
21833: CALL_OW 458
21837: IFFALSE 21858
// ViewMineAtPos ( _x , _y , side ) ;
21839: LD_VAR 0 11
21843: PPUSH
21844: LD_VAR 0 12
21848: PPUSH
21849: LD_VAR 0 3
21853: PPUSH
21854: CALL_OW 457
// end ;
21858: GO 21801
21860: POP
21861: POP
21862: GO 21781
21864: POP
21865: POP
// end ;
21866: LD_VAR 0 2
21870: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
21871: LD_INT 0
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
// if not units then
21879: LD_VAR 0 1
21883: NOT
21884: IFFALSE 21888
// exit ;
21886: GO 22318
// scaners := [ ] ;
21888: LD_ADDR_VAR 0 6
21892: PUSH
21893: EMPTY
21894: ST_TO_ADDR
// for i in units do
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_VAR 0 1
21904: PUSH
21905: FOR_IN
21906: IFFALSE 22063
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
21908: LD_VAR 0 3
21912: PPUSH
21913: CALL_OW 264
21917: PUSH
21918: LD_INT 11
21920: NONEQUAL
21921: IFTRUE 21935
21923: PUSH
21924: LD_VAR 0 3
21928: PPUSH
21929: CALL_OW 302
21933: NOT
21934: OR
21935: IFTRUE 21952
21937: PUSH
21938: LD_VAR 0 3
21942: PPUSH
21943: CALL_OW 110
21947: PUSH
21948: LD_INT 502
21950: EQUAL
21951: OR
21952: IFFALSE 21956
// continue ;
21954: GO 21905
// ComStop ( i ) ;
21956: LD_VAR 0 3
21960: PPUSH
21961: CALL_OW 141
// x := GetX ( i ) ;
21965: LD_ADDR_VAR 0 4
21969: PUSH
21970: LD_VAR 0 3
21974: PPUSH
21975: CALL_OW 250
21979: ST_TO_ADDR
// y := GetY ( i ) ;
21980: LD_ADDR_VAR 0 5
21984: PUSH
21985: LD_VAR 0 3
21989: PPUSH
21990: CALL_OW 251
21994: ST_TO_ADDR
// if GetSide ( i ) = your_side then
21995: LD_VAR 0 3
21999: PPUSH
22000: CALL_OW 255
22004: PUSH
22005: LD_OWVAR 2
22009: EQUAL
22010: IFFALSE 22029
// PlaySoundXY ( x , y , mineDetector ) ;
22012: LD_VAR 0 4
22016: PPUSH
22017: LD_VAR 0 5
22021: PPUSH
22022: LD_STRING mineDetector
22024: PPUSH
22025: CALL_OW 366
// scaners := Join ( scaners , i ) ;
22029: LD_ADDR_VAR 0 6
22033: PUSH
22034: LD_VAR 0 6
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: CALL 60669 0 2
22048: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
22049: LD_VAR 0 3
22053: PPUSH
22054: LD_INT 502
22056: PPUSH
22057: CALL_OW 109
// end ;
22061: GO 21905
22063: POP
22064: POP
// if not scaners then
22065: LD_VAR 0 6
22069: NOT
22070: IFFALSE 22074
// exit ;
22072: GO 22318
// wait ( 3 ) ;
22074: LD_INT 3
22076: PPUSH
22077: CALL_OW 67
// timer := 6 ;
22081: LD_ADDR_VAR 0 7
22085: PUSH
22086: LD_INT 6
22088: ST_TO_ADDR
// repeat for i in scaners do
22089: LD_ADDR_VAR 0 3
22093: PUSH
22094: LD_VAR 0 6
22098: PUSH
22099: FOR_IN
22100: IFFALSE 22216
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
22102: LD_VAR 0 3
22106: PPUSH
22107: CALL_OW 302
22111: NOT
22112: IFTRUE 22125
22114: PUSH
22115: LD_VAR 0 3
22119: PPUSH
22120: CALL_OW 314
22124: OR
22125: IFTRUE 22156
22127: PUSH
22128: LD_VAR 0 3
22132: PPUSH
22133: CALL_OW 263
22137: PUSH
22138: LD_INT 1
22140: EQUAL
22141: IFFALSE 22155
22143: PUSH
22144: LD_VAR 0 3
22148: PPUSH
22149: CALL_OW 311
22153: NOT
22154: AND
22155: OR
22156: IFFALSE 22200
// begin SetUnitDisplayNumber ( i , 0 ) ;
22158: LD_VAR 0 3
22162: PPUSH
22163: LD_INT 0
22165: PPUSH
22166: CALL_OW 505
// SetTag ( i , 0 ) ;
22170: LD_VAR 0 3
22174: PPUSH
22175: LD_INT 0
22177: PPUSH
22178: CALL_OW 109
// scaners := scaners diff i ;
22182: LD_ADDR_VAR 0 6
22186: PUSH
22187: LD_VAR 0 6
22191: PUSH
22192: LD_VAR 0 3
22196: DIFF
22197: ST_TO_ADDR
// continue ;
22198: GO 22099
// end ; SetUnitDisplayNumber ( i , timer ) ;
22200: LD_VAR 0 3
22204: PPUSH
22205: LD_VAR 0 7
22209: PPUSH
22210: CALL_OW 505
// end ;
22214: GO 22099
22216: POP
22217: POP
// if not scaners then
22218: LD_VAR 0 6
22222: NOT
22223: IFFALSE 22227
// exit ;
22225: GO 22318
// timer := Dec ( timer ) ;
22227: LD_ADDR_VAR 0 7
22231: PUSH
22232: LD_VAR 0 7
22236: PPUSH
22237: CALL 62064 0 1
22241: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22242: LD_INT 35
22244: PPUSH
22245: CALL_OW 67
// until timer = 0 ;
22249: LD_VAR 0 7
22253: PUSH
22254: LD_INT 0
22256: EQUAL
22257: IFFALSE 22089
// if not scaners then
22259: LD_VAR 0 6
22263: NOT
22264: IFFALSE 22268
// exit ;
22266: GO 22318
// for i in scaners do
22268: LD_ADDR_VAR 0 3
22272: PUSH
22273: LD_VAR 0 6
22277: PUSH
22278: FOR_IN
22279: IFFALSE 22316
// begin SetUnitDisplayNumber ( i , 0 ) ;
22281: LD_VAR 0 3
22285: PPUSH
22286: LD_INT 0
22288: PPUSH
22289: CALL_OW 505
// SetTag ( i , 0 ) ;
22293: LD_VAR 0 3
22297: PPUSH
22298: LD_INT 0
22300: PPUSH
22301: CALL_OW 109
// RevealDetectorMine ( i ) ;
22305: LD_VAR 0 3
22309: PPUSH
22310: CALL 21573 0 1
// end ;
22314: GO 22278
22316: POP
22317: POP
// end ;
22318: LD_VAR 0 2
22322: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
22323: LD_INT 0
22325: PPUSH
// if p1 = mine_detector_mode then
22326: LD_VAR 0 2
22330: PUSH
22331: LD_INT 103
22333: EQUAL
22334: IFFALSE 22345
// DetectMine ( units ) ;
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL 21871 0 1
// end ; end_of_file
22345: LD_VAR 0 7
22349: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22350: LD_VAR 0 1
22354: PUSH
22355: LD_INT 200
22357: DOUBLE
22358: GREATEREQUAL
22359: IFFALSE 22367
22361: LD_INT 299
22363: DOUBLE
22364: LESSEQUAL
22365: IFTRUE 22369
22367: GO 22401
22369: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22370: LD_VAR 0 1
22374: PPUSH
22375: LD_VAR 0 2
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_VAR 0 4
22389: PPUSH
22390: LD_VAR 0 5
22394: PPUSH
22395: CALL 16816 0 5
22399: GO 22478
22401: LD_INT 300
22403: DOUBLE
22404: GREATEREQUAL
22405: IFFALSE 22413
22407: LD_INT 399
22409: DOUBLE
22410: LESSEQUAL
22411: IFTRUE 22415
22413: GO 22477
22415: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 3
22430: PPUSH
22431: LD_VAR 0 4
22435: PPUSH
22436: LD_VAR 0 5
22440: PPUSH
22441: LD_VAR 0 6
22445: PPUSH
22446: LD_VAR 0 7
22450: PPUSH
22451: LD_VAR 0 8
22455: PPUSH
22456: LD_VAR 0 9
22460: PPUSH
22461: LD_VAR 0 10
22465: PPUSH
22466: LD_VAR 0 11
22470: PPUSH
22471: CALL 12700 0 11
22475: GO 22478
22477: POP
// end ;
22478: PPOPN 11
22480: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22481: LD_VAR 0 1
22485: PPUSH
22486: LD_VAR 0 2
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: LD_VAR 0 4
22500: PPUSH
22501: LD_VAR 0 5
22505: PPUSH
22506: CALL 16197 0 5
// end ; end_of_file
22510: PPOPN 5
22512: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22513: LD_INT 0
22515: PPUSH
22516: PPUSH
// if exist_mode then
22517: LD_VAR 0 2
22521: IFFALSE 22567
// begin unit := CreateCharacter ( prefix & ident ) ;
22523: LD_ADDR_VAR 0 5
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_VAR 0 1
22537: STR
22538: PPUSH
22539: CALL_OW 34
22543: ST_TO_ADDR
// if unit then
22544: LD_VAR 0 5
22548: IFFALSE 22565
// DeleteCharacters ( prefix & ident ) ;
22550: LD_VAR 0 3
22554: PUSH
22555: LD_VAR 0 1
22559: STR
22560: PPUSH
22561: CALL_OW 40
// end else
22565: GO 22582
// unit := NewCharacter ( ident ) ;
22567: LD_ADDR_VAR 0 5
22571: PUSH
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 25
22581: ST_TO_ADDR
// result := unit ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_VAR 0 5
22591: ST_TO_ADDR
// end ;
22592: LD_VAR 0 4
22596: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
// if exist_mode then
22601: LD_VAR 0 2
22605: IFFALSE 22630
// unit := CreateCharacter ( prefix & ident ) else
22607: LD_ADDR_VAR 0 5
22611: PUSH
22612: LD_VAR 0 3
22616: PUSH
22617: LD_VAR 0 1
22621: STR
22622: PPUSH
22623: CALL_OW 34
22627: ST_TO_ADDR
22628: GO 22645
// unit := NewCharacter ( ident ) ;
22630: LD_ADDR_VAR 0 5
22634: PUSH
22635: LD_VAR 0 1
22639: PPUSH
22640: CALL_OW 25
22644: ST_TO_ADDR
// result := unit ;
22645: LD_ADDR_VAR 0 4
22649: PUSH
22650: LD_VAR 0 5
22654: ST_TO_ADDR
// end ;
22655: LD_VAR 0 4
22659: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22660: LD_INT 0
22662: PPUSH
22663: PPUSH
// if not side or not nation then
22664: LD_VAR 0 1
22668: NOT
22669: IFTRUE 22678
22671: PUSH
22672: LD_VAR 0 2
22676: NOT
22677: OR
22678: IFFALSE 22682
// exit ;
22680: GO 23476
// case nation of nation_american :
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 1
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22917
22695: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
22696: LD_ADDR_VAR 0 4
22700: PUSH
22701: LD_INT 35
22703: PUSH
22704: LD_INT 45
22706: PUSH
22707: LD_INT 46
22709: PUSH
22710: LD_INT 47
22712: PUSH
22713: LD_INT 82
22715: PUSH
22716: LD_INT 83
22718: PUSH
22719: LD_INT 84
22721: PUSH
22722: LD_INT 85
22724: PUSH
22725: LD_INT 86
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 6
22736: PUSH
22737: LD_INT 15
22739: PUSH
22740: LD_INT 16
22742: PUSH
22743: LD_INT 7
22745: PUSH
22746: LD_INT 12
22748: PUSH
22749: LD_INT 13
22751: PUSH
22752: LD_INT 10
22754: PUSH
22755: LD_INT 14
22757: PUSH
22758: LD_INT 20
22760: PUSH
22761: LD_INT 21
22763: PUSH
22764: LD_INT 22
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 32
22772: PUSH
22773: LD_INT 27
22775: PUSH
22776: LD_INT 36
22778: PUSH
22779: LD_INT 69
22781: PUSH
22782: LD_INT 39
22784: PUSH
22785: LD_INT 34
22787: PUSH
22788: LD_INT 40
22790: PUSH
22791: LD_INT 48
22793: PUSH
22794: LD_INT 49
22796: PUSH
22797: LD_INT 50
22799: PUSH
22800: LD_INT 51
22802: PUSH
22803: LD_INT 52
22805: PUSH
22806: LD_INT 53
22808: PUSH
22809: LD_INT 54
22811: PUSH
22812: LD_INT 55
22814: PUSH
22815: LD_INT 56
22817: PUSH
22818: LD_INT 57
22820: PUSH
22821: LD_INT 58
22823: PUSH
22824: LD_INT 59
22826: PUSH
22827: LD_INT 60
22829: PUSH
22830: LD_INT 61
22832: PUSH
22833: LD_INT 62
22835: PUSH
22836: LD_INT 80
22838: PUSH
22839: LD_INT 82
22841: PUSH
22842: LD_INT 83
22844: PUSH
22845: LD_INT 84
22847: PUSH
22848: LD_INT 85
22850: PUSH
22851: LD_INT 86
22853: PUSH
22854: LD_INT 90
22856: PUSH
22857: LD_INT 93
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
22915: GO 23398
22917: LD_INT 2
22919: DOUBLE
22920: EQUAL
22921: IFTRUE 22925
22923: GO 23159
22925: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
22926: LD_ADDR_VAR 0 4
22930: PUSH
22931: LD_INT 35
22933: PUSH
22934: LD_INT 45
22936: PUSH
22937: LD_INT 46
22939: PUSH
22940: LD_INT 47
22942: PUSH
22943: LD_INT 82
22945: PUSH
22946: LD_INT 83
22948: PUSH
22949: LD_INT 84
22951: PUSH
22952: LD_INT 85
22954: PUSH
22955: LD_INT 87
22957: PUSH
22958: LD_INT 70
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: LD_INT 11
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: LD_INT 4
22972: PUSH
22973: LD_INT 5
22975: PUSH
22976: LD_INT 6
22978: PUSH
22979: LD_INT 15
22981: PUSH
22982: LD_INT 18
22984: PUSH
22985: LD_INT 7
22987: PUSH
22988: LD_INT 17
22990: PUSH
22991: LD_INT 8
22993: PUSH
22994: LD_INT 20
22996: PUSH
22997: LD_INT 21
22999: PUSH
23000: LD_INT 22
23002: PUSH
23003: LD_INT 72
23005: PUSH
23006: LD_INT 26
23008: PUSH
23009: LD_INT 69
23011: PUSH
23012: LD_INT 39
23014: PUSH
23015: LD_INT 40
23017: PUSH
23018: LD_INT 41
23020: PUSH
23021: LD_INT 42
23023: PUSH
23024: LD_INT 43
23026: PUSH
23027: LD_INT 48
23029: PUSH
23030: LD_INT 49
23032: PUSH
23033: LD_INT 50
23035: PUSH
23036: LD_INT 51
23038: PUSH
23039: LD_INT 52
23041: PUSH
23042: LD_INT 53
23044: PUSH
23045: LD_INT 54
23047: PUSH
23048: LD_INT 55
23050: PUSH
23051: LD_INT 56
23053: PUSH
23054: LD_INT 60
23056: PUSH
23057: LD_INT 61
23059: PUSH
23060: LD_INT 62
23062: PUSH
23063: LD_INT 66
23065: PUSH
23066: LD_INT 67
23068: PUSH
23069: LD_INT 68
23071: PUSH
23072: LD_INT 81
23074: PUSH
23075: LD_INT 82
23077: PUSH
23078: LD_INT 83
23080: PUSH
23081: LD_INT 84
23083: PUSH
23084: LD_INT 85
23086: PUSH
23087: LD_INT 87
23089: PUSH
23090: LD_INT 88
23092: PUSH
23093: LD_INT 92
23095: PUSH
23096: LD_INT 94
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: ST_TO_ADDR
23157: GO 23398
23159: LD_INT 3
23161: DOUBLE
23162: EQUAL
23163: IFTRUE 23167
23165: GO 23397
23167: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
23168: LD_ADDR_VAR 0 4
23172: PUSH
23173: LD_INT 46
23175: PUSH
23176: LD_INT 47
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 82
23187: PUSH
23188: LD_INT 83
23190: PUSH
23191: LD_INT 84
23193: PUSH
23194: LD_INT 85
23196: PUSH
23197: LD_INT 86
23199: PUSH
23200: LD_INT 11
23202: PUSH
23203: LD_INT 9
23205: PUSH
23206: LD_INT 20
23208: PUSH
23209: LD_INT 19
23211: PUSH
23212: LD_INT 21
23214: PUSH
23215: LD_INT 24
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 25
23223: PUSH
23224: LD_INT 28
23226: PUSH
23227: LD_INT 29
23229: PUSH
23230: LD_INT 30
23232: PUSH
23233: LD_INT 31
23235: PUSH
23236: LD_INT 37
23238: PUSH
23239: LD_INT 38
23241: PUSH
23242: LD_INT 32
23244: PUSH
23245: LD_INT 27
23247: PUSH
23248: LD_INT 33
23250: PUSH
23251: LD_INT 69
23253: PUSH
23254: LD_INT 39
23256: PUSH
23257: LD_INT 34
23259: PUSH
23260: LD_INT 40
23262: PUSH
23263: LD_INT 71
23265: PUSH
23266: LD_INT 23
23268: PUSH
23269: LD_INT 44
23271: PUSH
23272: LD_INT 48
23274: PUSH
23275: LD_INT 49
23277: PUSH
23278: LD_INT 50
23280: PUSH
23281: LD_INT 51
23283: PUSH
23284: LD_INT 52
23286: PUSH
23287: LD_INT 53
23289: PUSH
23290: LD_INT 54
23292: PUSH
23293: LD_INT 55
23295: PUSH
23296: LD_INT 56
23298: PUSH
23299: LD_INT 57
23301: PUSH
23302: LD_INT 58
23304: PUSH
23305: LD_INT 59
23307: PUSH
23308: LD_INT 63
23310: PUSH
23311: LD_INT 64
23313: PUSH
23314: LD_INT 65
23316: PUSH
23317: LD_INT 82
23319: PUSH
23320: LD_INT 83
23322: PUSH
23323: LD_INT 84
23325: PUSH
23326: LD_INT 85
23328: PUSH
23329: LD_INT 86
23331: PUSH
23332: LD_INT 89
23334: PUSH
23335: LD_INT 91
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: ST_TO_ADDR
23395: GO 23398
23397: POP
// if state > - 1 and state < 3 then
23398: LD_VAR 0 3
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: GREATER
23407: IFFALSE 23419
23409: PUSH
23410: LD_VAR 0 3
23414: PUSH
23415: LD_INT 3
23417: LESS
23418: AND
23419: IFFALSE 23476
// for i in result do
23421: LD_ADDR_VAR 0 5
23425: PUSH
23426: LD_VAR 0 4
23430: PUSH
23431: FOR_IN
23432: IFFALSE 23474
// if GetTech ( i , side ) <> state then
23434: LD_VAR 0 5
23438: PPUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 321
23448: PUSH
23449: LD_VAR 0 3
23453: NONEQUAL
23454: IFFALSE 23472
// result := result diff i ;
23456: LD_ADDR_VAR 0 4
23460: PUSH
23461: LD_VAR 0 4
23465: PUSH
23466: LD_VAR 0 5
23470: DIFF
23471: ST_TO_ADDR
23472: GO 23431
23474: POP
23475: POP
// end ;
23476: LD_VAR 0 4
23480: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23481: LD_INT 0
23483: PPUSH
23484: PPUSH
23485: PPUSH
// result := true ;
23486: LD_ADDR_VAR 0 3
23490: PUSH
23491: LD_INT 1
23493: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23494: LD_ADDR_VAR 0 5
23498: PUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: CALL_OW 480
23508: ST_TO_ADDR
// if not tmp then
23509: LD_VAR 0 5
23513: NOT
23514: IFFALSE 23518
// exit ;
23516: GO 23567
// for i in tmp do
23518: LD_ADDR_VAR 0 4
23522: PUSH
23523: LD_VAR 0 5
23527: PUSH
23528: FOR_IN
23529: IFFALSE 23565
// if GetTech ( i , side ) <> state_researched then
23531: LD_VAR 0 4
23535: PPUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 321
23545: PUSH
23546: LD_INT 2
23548: NONEQUAL
23549: IFFALSE 23563
// begin result := false ;
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 0
23558: ST_TO_ADDR
// exit ;
23559: POP
23560: POP
23561: GO 23567
// end ;
23563: GO 23528
23565: POP
23566: POP
// end ;
23567: LD_VAR 0 3
23571: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23572: LD_INT 0
23574: PPUSH
23575: PPUSH
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23587: LD_VAR 0 1
23591: NOT
23592: IFTRUE 23609
23594: PUSH
23595: LD_VAR 0 1
23599: PPUSH
23600: CALL_OW 257
23604: PUSH
23605: LD_INT 9
23607: NONEQUAL
23608: OR
23609: IFFALSE 23613
// exit ;
23611: GO 24192
// side := GetSide ( unit ) ;
23613: LD_ADDR_VAR 0 9
23617: PUSH
23618: LD_VAR 0 1
23622: PPUSH
23623: CALL_OW 255
23627: ST_TO_ADDR
// tech_space := tech_spacanom ;
23628: LD_ADDR_VAR 0 12
23632: PUSH
23633: LD_INT 29
23635: ST_TO_ADDR
// tech_time := tech_taurad ;
23636: LD_ADDR_VAR 0 13
23640: PUSH
23641: LD_INT 28
23643: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23644: LD_ADDR_VAR 0 11
23648: PUSH
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 310
23658: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23659: LD_VAR 0 11
23663: PPUSH
23664: CALL_OW 247
23668: PUSH
23669: LD_INT 2
23671: EQUAL
23672: IFFALSE 23676
// exit ;
23674: GO 24192
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23676: LD_ADDR_VAR 0 8
23680: PUSH
23681: LD_INT 81
23683: PUSH
23684: LD_VAR 0 9
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: LD_INT 21
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PPUSH
23714: CALL_OW 69
23718: ST_TO_ADDR
// if not tmp then
23719: LD_VAR 0 8
23723: NOT
23724: IFFALSE 23728
// exit ;
23726: GO 24192
// if in_unit then
23728: LD_VAR 0 11
23732: IFFALSE 23756
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23734: LD_ADDR_VAR 0 10
23738: PUSH
23739: LD_VAR 0 8
23743: PPUSH
23744: LD_VAR 0 11
23748: PPUSH
23749: CALL_OW 74
23753: ST_TO_ADDR
23754: GO 23776
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23756: LD_ADDR_VAR 0 10
23760: PUSH
23761: LD_VAR 0 8
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 74
23775: ST_TO_ADDR
// if not enemy then
23776: LD_VAR 0 10
23780: NOT
23781: IFFALSE 23785
// exit ;
23783: GO 24192
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23785: LD_VAR 0 11
23789: IFFALSE 23811
23791: PUSH
23792: LD_VAR 0 11
23796: PPUSH
23797: LD_VAR 0 10
23801: PPUSH
23802: CALL_OW 296
23806: PUSH
23807: LD_INT 13
23809: GREATER
23810: AND
23811: IFTRUE 23833
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_VAR 0 10
23823: PPUSH
23824: CALL_OW 296
23828: PUSH
23829: LD_INT 12
23831: GREATER
23832: OR
23833: IFFALSE 23837
// exit ;
23835: GO 24192
// missile := [ 1 ] ;
23837: LD_ADDR_VAR 0 14
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23848: LD_VAR 0 9
23852: PPUSH
23853: LD_VAR 0 12
23857: PPUSH
23858: CALL_OW 325
23862: IFFALSE 23891
// missile := Replace ( missile , missile + 1 , 2 ) ;
23864: LD_ADDR_VAR 0 14
23868: PUSH
23869: LD_VAR 0 14
23873: PPUSH
23874: LD_VAR 0 14
23878: PUSH
23879: LD_INT 1
23881: PLUS
23882: PPUSH
23883: LD_INT 2
23885: PPUSH
23886: CALL_OW 1
23890: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23891: LD_VAR 0 9
23895: PPUSH
23896: LD_VAR 0 13
23900: PPUSH
23901: CALL_OW 325
23905: IFFALSE 23929
23907: PUSH
23908: LD_VAR 0 10
23912: PPUSH
23913: CALL_OW 255
23917: PPUSH
23918: LD_VAR 0 13
23922: PPUSH
23923: CALL_OW 325
23927: NOT
23928: AND
23929: IFFALSE 23958
// missile := Replace ( missile , missile + 1 , 3 ) ;
23931: LD_ADDR_VAR 0 14
23935: PUSH
23936: LD_VAR 0 14
23940: PPUSH
23941: LD_VAR 0 14
23945: PUSH
23946: LD_INT 1
23948: PLUS
23949: PPUSH
23950: LD_INT 3
23952: PPUSH
23953: CALL_OW 1
23957: ST_TO_ADDR
// if missile < 2 then
23958: LD_VAR 0 14
23962: PUSH
23963: LD_INT 2
23965: LESS
23966: IFFALSE 23970
// exit ;
23968: GO 24192
// x := GetX ( enemy ) ;
23970: LD_ADDR_VAR 0 4
23974: PUSH
23975: LD_VAR 0 10
23979: PPUSH
23980: CALL_OW 250
23984: ST_TO_ADDR
// y := GetY ( enemy ) ;
23985: LD_ADDR_VAR 0 5
23989: PUSH
23990: LD_VAR 0 10
23994: PPUSH
23995: CALL_OW 251
23999: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24000: LD_ADDR_VAR 0 6
24004: PUSH
24005: LD_VAR 0 4
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PPUSH
24014: LD_INT 1
24016: PPUSH
24017: CALL_OW 12
24021: PLUS
24022: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_VAR 0 5
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL_OW 12
24044: PLUS
24045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24046: LD_VAR 0 6
24050: PPUSH
24051: LD_VAR 0 7
24055: PPUSH
24056: CALL_OW 488
24060: NOT
24061: IFFALSE 24083
// begin _x := x ;
24063: LD_ADDR_VAR 0 6
24067: PUSH
24068: LD_VAR 0 4
24072: ST_TO_ADDR
// _y := y ;
24073: LD_ADDR_VAR 0 7
24077: PUSH
24078: LD_VAR 0 5
24082: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 1
24090: PPUSH
24091: LD_VAR 0 14
24095: PPUSH
24096: CALL_OW 12
24100: ST_TO_ADDR
// case i of 1 :
24101: LD_VAR 0 3
24105: PUSH
24106: LD_INT 1
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24131
24114: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_VAR 0 10
24124: PPUSH
24125: CALL_OW 115
24129: GO 24192
24131: LD_INT 2
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24161
24139: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24140: LD_VAR 0 1
24144: PPUSH
24145: LD_VAR 0 6
24149: PPUSH
24150: LD_VAR 0 7
24154: PPUSH
24155: CALL_OW 153
24159: GO 24192
24161: LD_INT 3
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24191
24169: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24170: LD_VAR 0 1
24174: PPUSH
24175: LD_VAR 0 6
24179: PPUSH
24180: LD_VAR 0 7
24184: PPUSH
24185: CALL_OW 154
24189: GO 24192
24191: POP
// end ;
24192: LD_VAR 0 2
24196: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24197: LD_INT 0
24199: PPUSH
24200: PPUSH
24201: PPUSH
24202: PPUSH
24203: PPUSH
24204: PPUSH
// if not unit or not building then
24205: LD_VAR 0 1
24209: NOT
24210: IFTRUE 24219
24212: PUSH
24213: LD_VAR 0 2
24217: NOT
24218: OR
24219: IFFALSE 24223
// exit ;
24221: GO 24381
// x := GetX ( building ) ;
24223: LD_ADDR_VAR 0 5
24227: PUSH
24228: LD_VAR 0 2
24232: PPUSH
24233: CALL_OW 250
24237: ST_TO_ADDR
// y := GetY ( building ) ;
24238: LD_ADDR_VAR 0 6
24242: PUSH
24243: LD_VAR 0 2
24247: PPUSH
24248: CALL_OW 251
24252: ST_TO_ADDR
// for i := 0 to 5 do
24253: LD_ADDR_VAR 0 4
24257: PUSH
24258: DOUBLE
24259: LD_INT 0
24261: DEC
24262: ST_TO_ADDR
24263: LD_INT 5
24265: PUSH
24266: FOR_TO
24267: IFFALSE 24379
// begin _x := ShiftX ( x , i , 3 ) ;
24269: LD_ADDR_VAR 0 7
24273: PUSH
24274: LD_VAR 0 5
24278: PPUSH
24279: LD_VAR 0 4
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 272
24291: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24292: LD_ADDR_VAR 0 8
24296: PUSH
24297: LD_VAR 0 6
24301: PPUSH
24302: LD_VAR 0 4
24306: PPUSH
24307: LD_INT 3
24309: PPUSH
24310: CALL_OW 273
24314: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24315: LD_VAR 0 7
24319: PPUSH
24320: LD_VAR 0 8
24324: PPUSH
24325: CALL_OW 488
24329: NOT
24330: IFFALSE 24334
// continue ;
24332: GO 24266
// if HexInfo ( _x , _y ) = 0 then
24334: LD_VAR 0 7
24338: PPUSH
24339: LD_VAR 0 8
24343: PPUSH
24344: CALL_OW 428
24348: PUSH
24349: LD_INT 0
24351: EQUAL
24352: IFFALSE 24377
// begin ComMoveXY ( unit , _x , _y ) ;
24354: LD_VAR 0 1
24358: PPUSH
24359: LD_VAR 0 7
24363: PPUSH
24364: LD_VAR 0 8
24368: PPUSH
24369: CALL_OW 111
// exit ;
24373: POP
24374: POP
24375: GO 24381
// end ; end ;
24377: GO 24266
24379: POP
24380: POP
// end ;
24381: LD_VAR 0 3
24385: RET
// export function ScanBase ( side , base_area ) ; begin
24386: LD_INT 0
24388: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: LD_VAR 0 2
24398: PPUSH
24399: LD_INT 81
24401: PUSH
24402: LD_VAR 0 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PPUSH
24411: CALL_OW 70
24415: ST_TO_ADDR
// end ;
24416: LD_VAR 0 3
24420: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24421: LD_INT 0
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
// result := false ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_INT 0
24434: ST_TO_ADDR
// side := GetSide ( unit ) ;
24435: LD_ADDR_VAR 0 3
24439: PUSH
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 255
24449: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24450: LD_ADDR_VAR 0 4
24454: PUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 248
24464: ST_TO_ADDR
// case nat of 1 :
24465: LD_VAR 0 4
24469: PUSH
24470: LD_INT 1
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24489
24478: POP
// tech := tech_lassight ; 2 :
24479: LD_ADDR_VAR 0 5
24483: PUSH
24484: LD_INT 12
24486: ST_TO_ADDR
24487: GO 24528
24489: LD_INT 2
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24508
24497: POP
// tech := tech_mortar ; 3 :
24498: LD_ADDR_VAR 0 5
24502: PUSH
24503: LD_INT 41
24505: ST_TO_ADDR
24506: GO 24528
24508: LD_INT 3
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24527
24516: POP
// tech := tech_bazooka ; end ;
24517: LD_ADDR_VAR 0 5
24521: PUSH
24522: LD_INT 44
24524: ST_TO_ADDR
24525: GO 24528
24527: POP
// if Researched ( side , tech ) then
24528: LD_VAR 0 3
24532: PPUSH
24533: LD_VAR 0 5
24537: PPUSH
24538: CALL_OW 325
24542: IFFALSE 24569
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: LD_INT 8
24554: PUSH
24555: LD_INT 9
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: LIST
24562: PUSH
24563: LD_VAR 0 4
24567: ARRAY
24568: ST_TO_ADDR
// end ;
24569: LD_VAR 0 2
24573: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24574: LD_INT 0
24576: PPUSH
24577: PPUSH
24578: PPUSH
// if not mines then
24579: LD_VAR 0 2
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 24732
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24588: LD_ADDR_VAR 0 5
24592: PUSH
24593: LD_INT 81
24595: PUSH
24596: LD_VAR 0 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: LD_INT 21
24610: PUSH
24611: LD_INT 3
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: ST_TO_ADDR
// for i in mines do
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: LD_VAR 0 2
24640: PUSH
24641: FOR_IN
24642: IFFALSE 24730
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24644: LD_VAR 0 4
24648: PUSH
24649: LD_INT 1
24651: ARRAY
24652: PPUSH
24653: LD_VAR 0 4
24657: PUSH
24658: LD_INT 2
24660: ARRAY
24661: PPUSH
24662: CALL_OW 458
24666: NOT
24667: IFFALSE 24671
// continue ;
24669: GO 24641
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24671: LD_VAR 0 4
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 4
24684: PUSH
24685: LD_INT 2
24687: ARRAY
24688: PPUSH
24689: CALL_OW 428
24693: PUSH
24694: LD_VAR 0 5
24698: IN
24699: IFFALSE 24728
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24701: LD_VAR 0 4
24705: PUSH
24706: LD_INT 1
24708: ARRAY
24709: PPUSH
24710: LD_VAR 0 4
24714: PUSH
24715: LD_INT 2
24717: ARRAY
24718: PPUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 456
// end ;
24728: GO 24641
24730: POP
24731: POP
// end ;
24732: LD_VAR 0 3
24736: RET
// export function Count ( array ) ; begin
24737: LD_INT 0
24739: PPUSH
// result := array + 0 ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_VAR 0 1
24749: PUSH
24750: LD_INT 0
24752: PLUS
24753: ST_TO_ADDR
// end ;
24754: LD_VAR 0 2
24758: RET
// export function IsEmpty ( building ) ; begin
24759: LD_INT 0
24761: PPUSH
// if not building then
24762: LD_VAR 0 1
24766: NOT
24767: IFFALSE 24771
// exit ;
24769: GO 24814
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24771: LD_ADDR_VAR 0 2
24775: PUSH
24776: LD_VAR 0 1
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL_OW 255
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 58
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PPUSH
24808: CALL_OW 69
24812: IN
24813: ST_TO_ADDR
// end ;
24814: LD_VAR 0 2
24818: RET
// export function IsNotFull ( building ) ; var places ; begin
24819: LD_INT 0
24821: PPUSH
24822: PPUSH
// if not building then
24823: LD_VAR 0 1
24827: NOT
24828: IFFALSE 24832
// exit ;
24830: GO 24860
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24832: LD_ADDR_VAR 0 2
24836: PUSH
24837: LD_VAR 0 1
24841: PPUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 62
24847: PUSH
24848: EMPTY
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PPUSH
24855: CALL_OW 72
24859: ST_TO_ADDR
// end ;
24860: LD_VAR 0 2
24864: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24865: LD_INT 0
24867: PPUSH
24868: PPUSH
24869: PPUSH
24870: PPUSH
// tmp := [ ] ;
24871: LD_ADDR_VAR 0 3
24875: PUSH
24876: EMPTY
24877: ST_TO_ADDR
// list := [ ] ;
24878: LD_ADDR_VAR 0 5
24882: PUSH
24883: EMPTY
24884: ST_TO_ADDR
// for i = 16 to 25 do
24885: LD_ADDR_VAR 0 4
24889: PUSH
24890: DOUBLE
24891: LD_INT 16
24893: DEC
24894: ST_TO_ADDR
24895: LD_INT 25
24897: PUSH
24898: FOR_TO
24899: IFFALSE 24972
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: LD_VAR 0 3
24910: PUSH
24911: LD_INT 22
24913: PUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 255
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 91
24930: PUSH
24931: LD_VAR 0 1
24935: PUSH
24936: LD_INT 6
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 30
24946: PUSH
24947: LD_VAR 0 4
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: PPUSH
24964: CALL_OW 69
24968: ADD
24969: ST_TO_ADDR
24970: GO 24898
24972: POP
24973: POP
// for i = 1 to tmp do
24974: LD_ADDR_VAR 0 4
24978: PUSH
24979: DOUBLE
24980: LD_INT 1
24982: DEC
24983: ST_TO_ADDR
24984: LD_VAR 0 3
24988: PUSH
24989: FOR_TO
24990: IFFALSE 25078
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24992: LD_ADDR_VAR 0 5
24996: PUSH
24997: LD_VAR 0 5
25001: PUSH
25002: LD_VAR 0 3
25006: PUSH
25007: LD_VAR 0 4
25011: ARRAY
25012: PPUSH
25013: CALL_OW 266
25017: PUSH
25018: LD_VAR 0 3
25022: PUSH
25023: LD_VAR 0 4
25027: ARRAY
25028: PPUSH
25029: CALL_OW 250
25033: PUSH
25034: LD_VAR 0 3
25038: PUSH
25039: LD_VAR 0 4
25043: ARRAY
25044: PPUSH
25045: CALL_OW 251
25049: PUSH
25050: LD_VAR 0 3
25054: PUSH
25055: LD_VAR 0 4
25059: ARRAY
25060: PPUSH
25061: CALL_OW 254
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: ADD
25075: ST_TO_ADDR
25076: GO 24989
25078: POP
25079: POP
// result := list ;
25080: LD_ADDR_VAR 0 2
25084: PUSH
25085: LD_VAR 0 5
25089: ST_TO_ADDR
// end ;
25090: LD_VAR 0 2
25094: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
// if not factory then
25104: LD_VAR 0 1
25108: NOT
25109: IFFALSE 25113
// exit ;
25111: GO 25716
// if control = control_apeman then
25113: LD_VAR 0 4
25117: PUSH
25118: LD_INT 5
25120: EQUAL
25121: IFFALSE 25230
// begin tmp := UnitsInside ( factory ) ;
25123: LD_ADDR_VAR 0 8
25127: PUSH
25128: LD_VAR 0 1
25132: PPUSH
25133: CALL_OW 313
25137: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25138: LD_VAR 0 8
25142: PPUSH
25143: LD_INT 25
25145: PUSH
25146: LD_INT 12
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 72
25157: NOT
25158: IFFALSE 25168
// control := control_manual ;
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: LD_INT 1
25167: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25168: LD_ADDR_VAR 0 8
25172: PUSH
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL 24865 0 1
25182: ST_TO_ADDR
// if tmp then
25183: LD_VAR 0 8
25187: IFFALSE 25230
// begin for i in tmp do
25189: LD_ADDR_VAR 0 7
25193: PUSH
25194: LD_VAR 0 8
25198: PUSH
25199: FOR_IN
25200: IFFALSE 25228
// if i [ 1 ] = b_ext_radio then
25202: LD_VAR 0 7
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: PUSH
25211: LD_INT 22
25213: EQUAL
25214: IFFALSE 25226
// begin control := control_remote ;
25216: LD_ADDR_VAR 0 4
25220: PUSH
25221: LD_INT 2
25223: ST_TO_ADDR
// break ;
25224: GO 25228
// end ;
25226: GO 25199
25228: POP
25229: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25230: LD_VAR 0 1
25234: PPUSH
25235: LD_VAR 0 2
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: LD_VAR 0 4
25249: PPUSH
25250: LD_VAR 0 5
25254: PPUSH
25255: CALL_OW 448
25259: IFFALSE 25294
// begin result := [ chassis , engine , control , weapon ] ;
25261: LD_ADDR_VAR 0 6
25265: PUSH
25266: LD_VAR 0 2
25270: PUSH
25271: LD_VAR 0 3
25275: PUSH
25276: LD_VAR 0 4
25280: PUSH
25281: LD_VAR 0 5
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
// exit ;
25292: GO 25716
// end ; _chassis := AvailableChassisList ( factory ) ;
25294: LD_ADDR_VAR 0 9
25298: PUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: CALL_OW 475
25308: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25309: LD_ADDR_VAR 0 11
25313: PUSH
25314: LD_VAR 0 1
25318: PPUSH
25319: CALL_OW 476
25323: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25324: LD_ADDR_VAR 0 12
25328: PUSH
25329: LD_VAR 0 1
25333: PPUSH
25334: CALL_OW 477
25338: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25339: LD_ADDR_VAR 0 10
25343: PUSH
25344: LD_VAR 0 1
25348: PPUSH
25349: CALL_OW 478
25353: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25354: LD_VAR 0 9
25358: NOT
25359: IFTRUE 25368
25361: PUSH
25362: LD_VAR 0 11
25366: NOT
25367: OR
25368: IFTRUE 25377
25370: PUSH
25371: LD_VAR 0 12
25375: NOT
25376: OR
25377: IFTRUE 25386
25379: PUSH
25380: LD_VAR 0 10
25384: NOT
25385: OR
25386: IFFALSE 25421
// begin result := [ chassis , engine , control , weapon ] ;
25388: LD_ADDR_VAR 0 6
25392: PUSH
25393: LD_VAR 0 2
25397: PUSH
25398: LD_VAR 0 3
25402: PUSH
25403: LD_VAR 0 4
25407: PUSH
25408: LD_VAR 0 5
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: ST_TO_ADDR
// exit ;
25419: GO 25716
// end ; if not chassis in _chassis then
25421: LD_VAR 0 2
25425: PUSH
25426: LD_VAR 0 9
25430: IN
25431: NOT
25432: IFFALSE 25458
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25434: LD_ADDR_VAR 0 2
25438: PUSH
25439: LD_VAR 0 9
25443: PUSH
25444: LD_INT 1
25446: PPUSH
25447: LD_VAR 0 9
25451: PPUSH
25452: CALL_OW 12
25456: ARRAY
25457: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL 25721 0 2
25472: NOT
25473: IFFALSE 25534
// repeat engine := _engine [ 1 ] ;
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_VAR 0 11
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25489: LD_ADDR_VAR 0 11
25493: PUSH
25494: LD_VAR 0 11
25498: PPUSH
25499: LD_INT 1
25501: PPUSH
25502: CALL_OW 3
25506: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25507: LD_VAR 0 2
25511: PPUSH
25512: LD_VAR 0 3
25516: PPUSH
25517: CALL 25721 0 2
25521: IFTRUE 25532
25523: PUSH
25524: LD_VAR 0 11
25528: PUSH
25529: EMPTY
25530: EQUAL
25531: OR
25532: IFFALSE 25475
// if not control in _control then
25534: LD_VAR 0 4
25538: PUSH
25539: LD_VAR 0 12
25543: IN
25544: NOT
25545: IFFALSE 25571
// control := _control [ rand ( 1 , _control ) ] ;
25547: LD_ADDR_VAR 0 4
25551: PUSH
25552: LD_VAR 0 12
25556: PUSH
25557: LD_INT 1
25559: PPUSH
25560: LD_VAR 0 12
25564: PPUSH
25565: CALL_OW 12
25569: ARRAY
25570: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 5
25580: PPUSH
25581: CALL 25943 0 2
25585: NOT
25586: IFFALSE 25647
// repeat weapon := _weapon [ 1 ] ;
25588: LD_ADDR_VAR 0 5
25592: PUSH
25593: LD_VAR 0 10
25597: PUSH
25598: LD_INT 1
25600: ARRAY
25601: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25602: LD_ADDR_VAR 0 10
25606: PUSH
25607: LD_VAR 0 10
25611: PPUSH
25612: LD_INT 1
25614: PPUSH
25615: CALL_OW 3
25619: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25620: LD_VAR 0 2
25624: PPUSH
25625: LD_VAR 0 5
25629: PPUSH
25630: CALL 25943 0 2
25634: IFTRUE 25645
25636: PUSH
25637: LD_VAR 0 10
25641: PUSH
25642: EMPTY
25643: EQUAL
25644: OR
25645: IFFALSE 25588
// result := [ ] ;
25647: LD_ADDR_VAR 0 6
25651: PUSH
25652: EMPTY
25653: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25654: LD_VAR 0 1
25658: PPUSH
25659: LD_VAR 0 2
25663: PPUSH
25664: LD_VAR 0 3
25668: PPUSH
25669: LD_VAR 0 4
25673: PPUSH
25674: LD_VAR 0 5
25678: PPUSH
25679: CALL_OW 448
25683: IFFALSE 25716
// result := [ chassis , engine , control , weapon ] ;
25685: LD_ADDR_VAR 0 6
25689: PUSH
25690: LD_VAR 0 2
25694: PUSH
25695: LD_VAR 0 3
25699: PUSH
25700: LD_VAR 0 4
25704: PUSH
25705: LD_VAR 0 5
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: ST_TO_ADDR
// end ;
25716: LD_VAR 0 6
25720: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25721: LD_INT 0
25723: PPUSH
// if not chassis or not engine then
25724: LD_VAR 0 1
25728: NOT
25729: IFTRUE 25738
25731: PUSH
25732: LD_VAR 0 2
25736: NOT
25737: OR
25738: IFFALSE 25742
// exit ;
25740: GO 25938
// case engine of engine_solar :
25742: LD_VAR 0 2
25746: PUSH
25747: LD_INT 2
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25793
25755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_INT 11
25763: PUSH
25764: LD_INT 12
25766: PUSH
25767: LD_INT 13
25769: PUSH
25770: LD_INT 14
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: ST_TO_ADDR
25791: GO 25922
25793: LD_INT 1
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25801
25799: GO 25863
25801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: LD_INT 11
25809: PUSH
25810: LD_INT 12
25812: PUSH
25813: LD_INT 13
25815: PUSH
25816: LD_INT 14
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: LD_INT 4
25830: PUSH
25831: LD_INT 5
25833: PUSH
25834: LD_INT 21
25836: PUSH
25837: LD_INT 23
25839: PUSH
25840: LD_INT 22
25842: PUSH
25843: LD_INT 24
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: ST_TO_ADDR
25861: GO 25922
25863: LD_INT 3
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25921
25871: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25872: LD_ADDR_VAR 0 3
25876: PUSH
25877: LD_INT 13
25879: PUSH
25880: LD_INT 14
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: LD_INT 5
25894: PUSH
25895: LD_INT 21
25897: PUSH
25898: LD_INT 22
25900: PUSH
25901: LD_INT 23
25903: PUSH
25904: LD_INT 24
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: ST_TO_ADDR
25919: GO 25922
25921: POP
// result := ( chassis in result ) ;
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_VAR 0 3
25936: IN
25937: ST_TO_ADDR
// end ;
25938: LD_VAR 0 3
25942: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25943: LD_INT 0
25945: PPUSH
// if not chassis or not weapon then
25946: LD_VAR 0 1
25950: NOT
25951: IFTRUE 25960
25953: PUSH
25954: LD_VAR 0 2
25958: NOT
25959: OR
25960: IFFALSE 25964
// exit ;
25962: GO 27024
// case weapon of us_machine_gun :
25964: LD_VAR 0 2
25968: PUSH
25969: LD_INT 2
25971: DOUBLE
25972: EQUAL
25973: IFTRUE 25977
25975: GO 26007
25977: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25978: LD_ADDR_VAR 0 3
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 3
25991: PUSH
25992: LD_INT 4
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: ST_TO_ADDR
26005: GO 27008
26007: LD_INT 3
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26045
26015: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 4
26032: PUSH
26033: LD_INT 5
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: ST_TO_ADDR
26043: GO 27008
26045: LD_INT 11
26047: DOUBLE
26048: EQUAL
26049: IFTRUE 26053
26051: GO 26083
26053: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: LD_INT 4
26070: PUSH
26071: LD_INT 5
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: ST_TO_ADDR
26081: GO 27008
26083: LD_INT 4
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26117
26091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 4
26105: PUSH
26106: LD_INT 5
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: ST_TO_ADDR
26115: GO 27008
26117: LD_INT 5
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26151
26125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: LD_INT 4
26139: PUSH
26140: LD_INT 5
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
26149: GO 27008
26151: LD_INT 9
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26185
26159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 4
26173: PUSH
26174: LD_INT 5
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 27008
26185: LD_INT 7
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: LD_INT 4
26207: PUSH
26208: LD_INT 5
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 27008
26219: LD_INT 12
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: LD_INT 4
26241: PUSH
26242: LD_INT 5
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 27008
26253: LD_INT 13
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26287
26261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: LD_INT 4
26275: PUSH
26276: LD_INT 5
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 27008
26287: LD_INT 14
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26313
26295: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 4
26303: PUSH
26304: LD_INT 5
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: ST_TO_ADDR
26311: GO 27008
26313: LD_INT 6
26315: DOUBLE
26316: EQUAL
26317: IFTRUE 26321
26319: GO 26339
26321: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26322: LD_ADDR_VAR 0 3
26326: PUSH
26327: LD_INT 4
26329: PUSH
26330: LD_INT 5
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: ST_TO_ADDR
26337: GO 27008
26339: LD_INT 10
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26365
26347: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_INT 4
26355: PUSH
26356: LD_INT 5
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: ST_TO_ADDR
26363: GO 27008
26365: LD_INT 22
26367: DOUBLE
26368: EQUAL
26369: IFTRUE 26373
26371: GO 26399
26373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26374: LD_ADDR_VAR 0 3
26378: PUSH
26379: LD_INT 11
26381: PUSH
26382: LD_INT 12
26384: PUSH
26385: LD_INT 13
26387: PUSH
26388: LD_INT 14
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
26397: GO 27008
26399: LD_INT 23
26401: DOUBLE
26402: EQUAL
26403: IFTRUE 26407
26405: GO 26433
26407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_INT 11
26415: PUSH
26416: LD_INT 12
26418: PUSH
26419: LD_INT 13
26421: PUSH
26422: LD_INT 14
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
26431: GO 27008
26433: LD_INT 24
26435: DOUBLE
26436: EQUAL
26437: IFTRUE 26441
26439: GO 26467
26441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: LD_INT 11
26449: PUSH
26450: LD_INT 12
26452: PUSH
26453: LD_INT 13
26455: PUSH
26456: LD_INT 14
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
26465: GO 27008
26467: LD_INT 30
26469: DOUBLE
26470: EQUAL
26471: IFTRUE 26475
26473: GO 26501
26475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 11
26483: PUSH
26484: LD_INT 12
26486: PUSH
26487: LD_INT 13
26489: PUSH
26490: LD_INT 14
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
26499: GO 27008
26501: LD_INT 25
26503: DOUBLE
26504: EQUAL
26505: IFTRUE 26509
26507: GO 26527
26509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26510: LD_ADDR_VAR 0 3
26514: PUSH
26515: LD_INT 13
26517: PUSH
26518: LD_INT 14
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: ST_TO_ADDR
26525: GO 27008
26527: LD_INT 27
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26535
26533: GO 26553
26535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_INT 13
26543: PUSH
26544: LD_INT 14
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: ST_TO_ADDR
26551: GO 27008
26553: LD_INT 92
26555: DOUBLE
26556: EQUAL
26557: IFTRUE 26561
26559: GO 26587
26561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_INT 11
26569: PUSH
26570: LD_INT 12
26572: PUSH
26573: LD_INT 13
26575: PUSH
26576: LD_INT 14
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
26585: GO 27008
26587: LD_INT 28
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26613
26595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26596: LD_ADDR_VAR 0 3
26600: PUSH
26601: LD_INT 13
26603: PUSH
26604: LD_INT 14
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 27008
26613: LD_INT 29
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26639
26621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 13
26629: PUSH
26630: LD_INT 14
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: ST_TO_ADDR
26637: GO 27008
26639: LD_INT 31
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 26665
26647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_INT 13
26655: PUSH
26656: LD_INT 14
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: ST_TO_ADDR
26663: GO 27008
26665: LD_INT 26
26667: DOUBLE
26668: EQUAL
26669: IFTRUE 26673
26671: GO 26691
26673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26674: LD_ADDR_VAR 0 3
26678: PUSH
26679: LD_INT 13
26681: PUSH
26682: LD_INT 14
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: ST_TO_ADDR
26689: GO 27008
26691: LD_INT 42
26693: DOUBLE
26694: EQUAL
26695: IFTRUE 26699
26697: GO 26725
26699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 21
26707: PUSH
26708: LD_INT 22
26710: PUSH
26711: LD_INT 23
26713: PUSH
26714: LD_INT 24
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: ST_TO_ADDR
26723: GO 27008
26725: LD_INT 43
26727: DOUBLE
26728: EQUAL
26729: IFTRUE 26733
26731: GO 26759
26733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 21
26741: PUSH
26742: LD_INT 22
26744: PUSH
26745: LD_INT 23
26747: PUSH
26748: LD_INT 24
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: ST_TO_ADDR
26757: GO 27008
26759: LD_INT 44
26761: DOUBLE
26762: EQUAL
26763: IFTRUE 26767
26765: GO 26793
26767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_INT 23
26781: PUSH
26782: LD_INT 24
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: ST_TO_ADDR
26791: GO 27008
26793: LD_INT 45
26795: DOUBLE
26796: EQUAL
26797: IFTRUE 26801
26799: GO 26827
26801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_INT 21
26809: PUSH
26810: LD_INT 22
26812: PUSH
26813: LD_INT 23
26815: PUSH
26816: LD_INT 24
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: ST_TO_ADDR
26825: GO 27008
26827: LD_INT 49
26829: DOUBLE
26830: EQUAL
26831: IFTRUE 26835
26833: GO 26861
26835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_INT 21
26843: PUSH
26844: LD_INT 22
26846: PUSH
26847: LD_INT 23
26849: PUSH
26850: LD_INT 24
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: ST_TO_ADDR
26859: GO 27008
26861: LD_INT 51
26863: DOUBLE
26864: EQUAL
26865: IFTRUE 26869
26867: GO 26895
26869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 21
26877: PUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 23
26883: PUSH
26884: LD_INT 24
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
26893: GO 27008
26895: LD_INT 52
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 26929
26903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26904: LD_ADDR_VAR 0 3
26908: PUSH
26909: LD_INT 21
26911: PUSH
26912: LD_INT 22
26914: PUSH
26915: LD_INT 23
26917: PUSH
26918: LD_INT 24
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: ST_TO_ADDR
26927: GO 27008
26929: LD_INT 53
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26937
26935: GO 26955
26937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: LD_INT 23
26945: PUSH
26946: LD_INT 24
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: ST_TO_ADDR
26953: GO 27008
26955: LD_INT 46
26957: DOUBLE
26958: EQUAL
26959: IFTRUE 26963
26961: GO 26981
26963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_INT 23
26971: PUSH
26972: LD_INT 24
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: ST_TO_ADDR
26979: GO 27008
26981: LD_INT 47
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27007
26989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 24
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: ST_TO_ADDR
27005: GO 27008
27007: POP
// result := ( chassis in result ) ;
27008: LD_ADDR_VAR 0 3
27012: PUSH
27013: LD_VAR 0 1
27017: PUSH
27018: LD_VAR 0 3
27022: IN
27023: ST_TO_ADDR
// end ;
27024: LD_VAR 0 3
27028: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
27035: PPUSH
27036: PPUSH
27037: PPUSH
// result := array ;
27038: LD_ADDR_VAR 0 5
27042: PUSH
27043: LD_VAR 0 1
27047: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27048: LD_VAR 0 1
27052: NOT
27053: IFTRUE 27062
27055: PUSH
27056: LD_VAR 0 2
27060: NOT
27061: OR
27062: IFTRUE 27071
27064: PUSH
27065: LD_VAR 0 3
27069: NOT
27070: OR
27071: IFTRUE 27085
27073: PUSH
27074: LD_VAR 0 2
27078: PUSH
27079: LD_VAR 0 1
27083: GREATER
27084: OR
27085: IFTRUE 27099
27087: PUSH
27088: LD_VAR 0 3
27092: PUSH
27093: LD_VAR 0 1
27097: GREATER
27098: OR
27099: IFFALSE 27103
// exit ;
27101: GO 27399
// if direction then
27103: LD_VAR 0 4
27107: IFFALSE 27171
// begin d := 1 ;
27109: LD_ADDR_VAR 0 9
27113: PUSH
27114: LD_INT 1
27116: ST_TO_ADDR
// if i_from > i_to then
27117: LD_VAR 0 2
27121: PUSH
27122: LD_VAR 0 3
27126: GREATER
27127: IFFALSE 27153
// length := ( array - i_from ) + i_to else
27129: LD_ADDR_VAR 0 11
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: LD_VAR 0 2
27143: MINUS
27144: PUSH
27145: LD_VAR 0 3
27149: PLUS
27150: ST_TO_ADDR
27151: GO 27169
// length := i_to - i_from ;
27153: LD_ADDR_VAR 0 11
27157: PUSH
27158: LD_VAR 0 3
27162: PUSH
27163: LD_VAR 0 2
27167: MINUS
27168: ST_TO_ADDR
// end else
27169: GO 27232
// begin d := - 1 ;
27171: LD_ADDR_VAR 0 9
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: ST_TO_ADDR
// if i_from > i_to then
27180: LD_VAR 0 2
27184: PUSH
27185: LD_VAR 0 3
27189: GREATER
27190: IFFALSE 27210
// length := i_from - i_to else
27192: LD_ADDR_VAR 0 11
27196: PUSH
27197: LD_VAR 0 2
27201: PUSH
27202: LD_VAR 0 3
27206: MINUS
27207: ST_TO_ADDR
27208: GO 27232
// length := ( array - i_to ) + i_from ;
27210: LD_ADDR_VAR 0 11
27214: PUSH
27215: LD_VAR 0 1
27219: PUSH
27220: LD_VAR 0 3
27224: MINUS
27225: PUSH
27226: LD_VAR 0 2
27230: PLUS
27231: ST_TO_ADDR
// end ; if not length then
27232: LD_VAR 0 11
27236: NOT
27237: IFFALSE 27241
// exit ;
27239: GO 27399
// tmp := array ;
27241: LD_ADDR_VAR 0 10
27245: PUSH
27246: LD_VAR 0 1
27250: ST_TO_ADDR
// for i = 1 to length do
27251: LD_ADDR_VAR 0 6
27255: PUSH
27256: DOUBLE
27257: LD_INT 1
27259: DEC
27260: ST_TO_ADDR
27261: LD_VAR 0 11
27265: PUSH
27266: FOR_TO
27267: IFFALSE 27387
// begin for j = 1 to array do
27269: LD_ADDR_VAR 0 7
27273: PUSH
27274: DOUBLE
27275: LD_INT 1
27277: DEC
27278: ST_TO_ADDR
27279: LD_VAR 0 1
27283: PUSH
27284: FOR_TO
27285: IFFALSE 27373
// begin k := j + d ;
27287: LD_ADDR_VAR 0 8
27291: PUSH
27292: LD_VAR 0 7
27296: PUSH
27297: LD_VAR 0 9
27301: PLUS
27302: ST_TO_ADDR
// if k > array then
27303: LD_VAR 0 8
27307: PUSH
27308: LD_VAR 0 1
27312: GREATER
27313: IFFALSE 27323
// k := 1 ;
27315: LD_ADDR_VAR 0 8
27319: PUSH
27320: LD_INT 1
27322: ST_TO_ADDR
// if not k then
27323: LD_VAR 0 8
27327: NOT
27328: IFFALSE 27340
// k := array ;
27330: LD_ADDR_VAR 0 8
27334: PUSH
27335: LD_VAR 0 1
27339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27340: LD_ADDR_VAR 0 10
27344: PUSH
27345: LD_VAR 0 10
27349: PPUSH
27350: LD_VAR 0 8
27354: PPUSH
27355: LD_VAR 0 1
27359: PUSH
27360: LD_VAR 0 7
27364: ARRAY
27365: PPUSH
27366: CALL_OW 1
27370: ST_TO_ADDR
// end ;
27371: GO 27284
27373: POP
27374: POP
// array := tmp ;
27375: LD_ADDR_VAR 0 1
27379: PUSH
27380: LD_VAR 0 10
27384: ST_TO_ADDR
// end ;
27385: GO 27266
27387: POP
27388: POP
// result := array ;
27389: LD_ADDR_VAR 0 5
27393: PUSH
27394: LD_VAR 0 1
27398: ST_TO_ADDR
// end ;
27399: LD_VAR 0 5
27403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27404: LD_INT 0
27406: PPUSH
27407: PPUSH
// result := 0 ;
27408: LD_ADDR_VAR 0 3
27412: PUSH
27413: LD_INT 0
27415: ST_TO_ADDR
// if not array or not value in array then
27416: LD_VAR 0 1
27420: NOT
27421: IFTRUE 27436
27423: PUSH
27424: LD_VAR 0 2
27428: PUSH
27429: LD_VAR 0 1
27433: IN
27434: NOT
27435: OR
27436: IFFALSE 27440
// exit ;
27438: GO 27494
// for i = 1 to array do
27440: LD_ADDR_VAR 0 4
27444: PUSH
27445: DOUBLE
27446: LD_INT 1
27448: DEC
27449: ST_TO_ADDR
27450: LD_VAR 0 1
27454: PUSH
27455: FOR_TO
27456: IFFALSE 27492
// if value = array [ i ] then
27458: LD_VAR 0 2
27462: PUSH
27463: LD_VAR 0 1
27467: PUSH
27468: LD_VAR 0 4
27472: ARRAY
27473: EQUAL
27474: IFFALSE 27490
// begin result := i ;
27476: LD_ADDR_VAR 0 3
27480: PUSH
27481: LD_VAR 0 4
27485: ST_TO_ADDR
// exit ;
27486: POP
27487: POP
27488: GO 27494
// end ;
27490: GO 27455
27492: POP
27493: POP
// end ;
27494: LD_VAR 0 3
27498: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27499: LD_INT 0
27501: PPUSH
// vc_chassis := chassis ;
27502: LD_ADDR_OWVAR 37
27506: PUSH
27507: LD_VAR 0 1
27511: ST_TO_ADDR
// vc_engine := engine ;
27512: LD_ADDR_OWVAR 39
27516: PUSH
27517: LD_VAR 0 2
27521: ST_TO_ADDR
// vc_control := control ;
27522: LD_ADDR_OWVAR 38
27526: PUSH
27527: LD_VAR 0 3
27531: ST_TO_ADDR
// vc_weapon := weapon ;
27532: LD_ADDR_OWVAR 40
27536: PUSH
27537: LD_VAR 0 4
27541: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27542: LD_ADDR_OWVAR 41
27546: PUSH
27547: LD_VAR 0 5
27551: ST_TO_ADDR
// end ;
27552: LD_VAR 0 6
27556: RET
// export function WantPlant ( unit ) ; var task ; begin
27557: LD_INT 0
27559: PPUSH
27560: PPUSH
// result := false ;
27561: LD_ADDR_VAR 0 2
27565: PUSH
27566: LD_INT 0
27568: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27569: LD_ADDR_VAR 0 3
27573: PUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: CALL_OW 437
27583: ST_TO_ADDR
// if task then
27584: LD_VAR 0 3
27588: IFFALSE 27616
// if task [ 1 ] [ 1 ] = p then
27590: LD_VAR 0 3
27594: PUSH
27595: LD_INT 1
27597: ARRAY
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: PUSH
27603: LD_STRING p
27605: EQUAL
27606: IFFALSE 27616
// result := true ;
27608: LD_ADDR_VAR 0 2
27612: PUSH
27613: LD_INT 1
27615: ST_TO_ADDR
// end ;
27616: LD_VAR 0 2
27620: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27621: LD_INT 0
27623: PPUSH
27624: PPUSH
27625: PPUSH
27626: PPUSH
// if pos < 1 then
27627: LD_VAR 0 2
27631: PUSH
27632: LD_INT 1
27634: LESS
27635: IFFALSE 27639
// exit ;
27637: GO 27942
// if pos = 1 then
27639: LD_VAR 0 2
27643: PUSH
27644: LD_INT 1
27646: EQUAL
27647: IFFALSE 27680
// result := Replace ( arr , pos [ 1 ] , value ) else
27649: LD_ADDR_VAR 0 4
27653: PUSH
27654: LD_VAR 0 1
27658: PPUSH
27659: LD_VAR 0 2
27663: PUSH
27664: LD_INT 1
27666: ARRAY
27667: PPUSH
27668: LD_VAR 0 3
27672: PPUSH
27673: CALL_OW 1
27677: ST_TO_ADDR
27678: GO 27942
// begin tmp := arr ;
27680: LD_ADDR_VAR 0 6
27684: PUSH
27685: LD_VAR 0 1
27689: ST_TO_ADDR
// s_arr := [ tmp ] ;
27690: LD_ADDR_VAR 0 7
27694: PUSH
27695: LD_VAR 0 6
27699: PUSH
27700: EMPTY
27701: LIST
27702: ST_TO_ADDR
// for i = 1 to pos - 1 do
27703: LD_ADDR_VAR 0 5
27707: PUSH
27708: DOUBLE
27709: LD_INT 1
27711: DEC
27712: ST_TO_ADDR
27713: LD_VAR 0 2
27717: PUSH
27718: LD_INT 1
27720: MINUS
27721: PUSH
27722: FOR_TO
27723: IFFALSE 27768
// begin tmp := tmp [ pos [ i ] ] ;
27725: LD_ADDR_VAR 0 6
27729: PUSH
27730: LD_VAR 0 6
27734: PUSH
27735: LD_VAR 0 2
27739: PUSH
27740: LD_VAR 0 5
27744: ARRAY
27745: ARRAY
27746: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27747: LD_ADDR_VAR 0 7
27751: PUSH
27752: LD_VAR 0 7
27756: PUSH
27757: LD_VAR 0 6
27761: PUSH
27762: EMPTY
27763: LIST
27764: ADD
27765: ST_TO_ADDR
// end ;
27766: GO 27722
27768: POP
27769: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27770: LD_ADDR_VAR 0 6
27774: PUSH
27775: LD_VAR 0 6
27779: PPUSH
27780: LD_VAR 0 2
27784: PUSH
27785: LD_VAR 0 2
27789: ARRAY
27790: PPUSH
27791: LD_VAR 0 3
27795: PPUSH
27796: CALL_OW 1
27800: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27801: LD_ADDR_VAR 0 7
27805: PUSH
27806: LD_VAR 0 7
27810: PPUSH
27811: LD_VAR 0 7
27815: PPUSH
27816: LD_VAR 0 6
27820: PPUSH
27821: CALL_OW 1
27825: ST_TO_ADDR
// for i = s_arr downto 2 do
27826: LD_ADDR_VAR 0 5
27830: PUSH
27831: DOUBLE
27832: LD_VAR 0 7
27836: INC
27837: ST_TO_ADDR
27838: LD_INT 2
27840: PUSH
27841: FOR_DOWNTO
27842: IFFALSE 27926
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27844: LD_ADDR_VAR 0 6
27848: PUSH
27849: LD_VAR 0 7
27853: PUSH
27854: LD_VAR 0 5
27858: PUSH
27859: LD_INT 1
27861: MINUS
27862: ARRAY
27863: PPUSH
27864: LD_VAR 0 2
27868: PUSH
27869: LD_VAR 0 5
27873: PUSH
27874: LD_INT 1
27876: MINUS
27877: ARRAY
27878: PPUSH
27879: LD_VAR 0 7
27883: PUSH
27884: LD_VAR 0 5
27888: ARRAY
27889: PPUSH
27890: CALL_OW 1
27894: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27895: LD_ADDR_VAR 0 7
27899: PUSH
27900: LD_VAR 0 7
27904: PPUSH
27905: LD_VAR 0 5
27909: PUSH
27910: LD_INT 1
27912: MINUS
27913: PPUSH
27914: LD_VAR 0 6
27918: PPUSH
27919: CALL_OW 1
27923: ST_TO_ADDR
// end ;
27924: GO 27841
27926: POP
27927: POP
// result := s_arr [ 1 ] ;
27928: LD_ADDR_VAR 0 4
27932: PUSH
27933: LD_VAR 0 7
27937: PUSH
27938: LD_INT 1
27940: ARRAY
27941: ST_TO_ADDR
// end ; end ;
27942: LD_VAR 0 4
27946: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
// if not list then
27951: LD_VAR 0 1
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 28051
// i := list [ pos1 ] ;
27960: LD_ADDR_VAR 0 5
27964: PUSH
27965: LD_VAR 0 1
27969: PUSH
27970: LD_VAR 0 2
27974: ARRAY
27975: ST_TO_ADDR
// if not i then
27976: LD_VAR 0 5
27980: NOT
27981: IFFALSE 27985
// exit ;
27983: GO 28051
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27985: LD_ADDR_VAR 0 1
27989: PUSH
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_VAR 0 1
28004: PUSH
28005: LD_VAR 0 3
28009: ARRAY
28010: PPUSH
28011: CALL_OW 1
28015: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28016: LD_ADDR_VAR 0 1
28020: PUSH
28021: LD_VAR 0 1
28025: PPUSH
28026: LD_VAR 0 3
28030: PPUSH
28031: LD_VAR 0 5
28035: PPUSH
28036: CALL_OW 1
28040: ST_TO_ADDR
// result := list ;
28041: LD_ADDR_VAR 0 4
28045: PUSH
28046: LD_VAR 0 1
28050: ST_TO_ADDR
// end ;
28051: LD_VAR 0 4
28055: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28056: LD_INT 0
28058: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28059: LD_ADDR_VAR 0 5
28063: PUSH
28064: LD_VAR 0 1
28068: PPUSH
28069: CALL_OW 250
28073: PPUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 251
28083: PPUSH
28084: LD_VAR 0 2
28088: PPUSH
28089: LD_VAR 0 3
28093: PPUSH
28094: LD_VAR 0 4
28098: PPUSH
28099: CALL 28481 0 5
28103: ST_TO_ADDR
// end ;
28104: LD_VAR 0 5
28108: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
28113: PPUSH
28114: PPUSH
// if not list or not unit then
28115: LD_VAR 0 2
28119: NOT
28120: IFTRUE 28129
28122: PUSH
28123: LD_VAR 0 1
28127: NOT
28128: OR
28129: IFFALSE 28133
// exit ;
28131: GO 28476
// result := [ ] ;
28133: LD_ADDR_VAR 0 5
28137: PUSH
28138: EMPTY
28139: ST_TO_ADDR
// for i in list do
28140: LD_ADDR_VAR 0 6
28144: PUSH
28145: LD_VAR 0 2
28149: PUSH
28150: FOR_IN
28151: IFFALSE 28369
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28153: LD_ADDR_VAR 0 8
28157: PUSH
28158: LD_VAR 0 1
28162: PPUSH
28163: LD_VAR 0 6
28167: PUSH
28168: LD_INT 1
28170: ARRAY
28171: PPUSH
28172: LD_VAR 0 6
28176: PUSH
28177: LD_INT 2
28179: ARRAY
28180: PPUSH
28181: CALL_OW 297
28185: ST_TO_ADDR
// if not Count ( result ) then
28186: LD_VAR 0 5
28190: PPUSH
28191: CALL 24737 0 1
28195: NOT
28196: IFFALSE 28229
// begin result := Join ( result , [ i , tmp ] ) ;
28198: LD_ADDR_VAR 0 5
28202: PUSH
28203: LD_VAR 0 5
28207: PPUSH
28208: LD_VAR 0 6
28212: PUSH
28213: LD_VAR 0 8
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL 60669 0 2
28226: ST_TO_ADDR
// continue ;
28227: GO 28150
// end ; if result [ result ] [ 2 ] <= tmp then
28229: LD_VAR 0 5
28233: PUSH
28234: LD_VAR 0 5
28238: ARRAY
28239: PUSH
28240: LD_INT 2
28242: ARRAY
28243: PUSH
28244: LD_VAR 0 8
28248: LESSEQUAL
28249: IFFALSE 28282
// result := Join ( result , [ i , tmp ] ) else
28251: LD_ADDR_VAR 0 5
28255: PUSH
28256: LD_VAR 0 5
28260: PPUSH
28261: LD_VAR 0 6
28265: PUSH
28266: LD_VAR 0 8
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL 60669 0 2
28279: ST_TO_ADDR
28280: GO 28367
// begin for j := 1 to Count ( result ) do
28282: LD_ADDR_VAR 0 7
28286: PUSH
28287: DOUBLE
28288: LD_INT 1
28290: DEC
28291: ST_TO_ADDR
28292: LD_VAR 0 5
28296: PPUSH
28297: CALL 24737 0 1
28301: PUSH
28302: FOR_TO
28303: IFFALSE 28365
// begin if tmp < result [ j ] [ 2 ] then
28305: LD_VAR 0 8
28309: PUSH
28310: LD_VAR 0 5
28314: PUSH
28315: LD_VAR 0 7
28319: ARRAY
28320: PUSH
28321: LD_INT 2
28323: ARRAY
28324: LESS
28325: IFFALSE 28363
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 5
28336: PPUSH
28337: LD_VAR 0 7
28341: PPUSH
28342: LD_VAR 0 6
28346: PUSH
28347: LD_VAR 0 8
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PPUSH
28356: CALL_OW 2
28360: ST_TO_ADDR
// break ;
28361: GO 28365
// end ; end ;
28363: GO 28302
28365: POP
28366: POP
// end ; end ;
28367: GO 28150
28369: POP
28370: POP
// if result and not asc then
28371: LD_VAR 0 5
28375: IFFALSE 28384
28377: PUSH
28378: LD_VAR 0 3
28382: NOT
28383: AND
28384: IFFALSE 28401
// result := ReverseArray ( result ) ;
28386: LD_ADDR_VAR 0 5
28390: PUSH
28391: LD_VAR 0 5
28395: PPUSH
28396: CALL 55759 0 1
28400: ST_TO_ADDR
// tmp := [ ] ;
28401: LD_ADDR_VAR 0 8
28405: PUSH
28406: EMPTY
28407: ST_TO_ADDR
// if mode then
28408: LD_VAR 0 4
28412: IFFALSE 28476
// begin for i := 1 to result do
28414: LD_ADDR_VAR 0 6
28418: PUSH
28419: DOUBLE
28420: LD_INT 1
28422: DEC
28423: ST_TO_ADDR
28424: LD_VAR 0 5
28428: PUSH
28429: FOR_TO
28430: IFFALSE 28464
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28432: LD_ADDR_VAR 0 8
28436: PUSH
28437: LD_VAR 0 8
28441: PPUSH
28442: LD_VAR 0 5
28446: PUSH
28447: LD_VAR 0 6
28451: ARRAY
28452: PUSH
28453: LD_INT 1
28455: ARRAY
28456: PPUSH
28457: CALL 60669 0 2
28461: ST_TO_ADDR
28462: GO 28429
28464: POP
28465: POP
// result := tmp ;
28466: LD_ADDR_VAR 0 5
28470: PUSH
28471: LD_VAR 0 8
28475: ST_TO_ADDR
// end ; end ;
28476: LD_VAR 0 5
28480: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28481: LD_INT 0
28483: PPUSH
28484: PPUSH
28485: PPUSH
28486: PPUSH
// if not list then
28487: LD_VAR 0 3
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28886
// result := [ ] ;
28496: LD_ADDR_VAR 0 6
28500: PUSH
28501: EMPTY
28502: ST_TO_ADDR
// for i in list do
28503: LD_ADDR_VAR 0 7
28507: PUSH
28508: LD_VAR 0 3
28512: PUSH
28513: FOR_IN
28514: IFFALSE 28716
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_VAR 0 7
28525: PPUSH
28526: LD_VAR 0 1
28530: PPUSH
28531: LD_VAR 0 2
28535: PPUSH
28536: CALL_OW 297
28540: ST_TO_ADDR
// if not result then
28541: LD_VAR 0 6
28545: NOT
28546: IFFALSE 28572
// result := [ [ i , tmp ] ] else
28548: LD_ADDR_VAR 0 6
28552: PUSH
28553: LD_VAR 0 7
28557: PUSH
28558: LD_VAR 0 9
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: ST_TO_ADDR
28570: GO 28714
// begin if result [ result ] [ 2 ] <= tmp then
28572: LD_VAR 0 6
28576: PUSH
28577: LD_VAR 0 6
28581: ARRAY
28582: PUSH
28583: LD_INT 2
28585: ARRAY
28586: PUSH
28587: LD_VAR 0 9
28591: LESSEQUAL
28592: IFFALSE 28634
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28594: LD_ADDR_VAR 0 6
28598: PUSH
28599: LD_VAR 0 6
28603: PPUSH
28604: LD_VAR 0 6
28608: PUSH
28609: LD_INT 1
28611: PLUS
28612: PPUSH
28613: LD_VAR 0 7
28617: PUSH
28618: LD_VAR 0 9
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PPUSH
28627: CALL_OW 2
28631: ST_TO_ADDR
28632: GO 28714
// for j := 1 to result do
28634: LD_ADDR_VAR 0 8
28638: PUSH
28639: DOUBLE
28640: LD_INT 1
28642: DEC
28643: ST_TO_ADDR
28644: LD_VAR 0 6
28648: PUSH
28649: FOR_TO
28650: IFFALSE 28712
// begin if tmp < result [ j ] [ 2 ] then
28652: LD_VAR 0 9
28656: PUSH
28657: LD_VAR 0 6
28661: PUSH
28662: LD_VAR 0 8
28666: ARRAY
28667: PUSH
28668: LD_INT 2
28670: ARRAY
28671: LESS
28672: IFFALSE 28710
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28674: LD_ADDR_VAR 0 6
28678: PUSH
28679: LD_VAR 0 6
28683: PPUSH
28684: LD_VAR 0 8
28688: PPUSH
28689: LD_VAR 0 7
28693: PUSH
28694: LD_VAR 0 9
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PPUSH
28703: CALL_OW 2
28707: ST_TO_ADDR
// break ;
28708: GO 28712
// end ; end ;
28710: GO 28649
28712: POP
28713: POP
// end ; end ;
28714: GO 28513
28716: POP
28717: POP
// if result and not asc then
28718: LD_VAR 0 6
28722: IFFALSE 28731
28724: PUSH
28725: LD_VAR 0 4
28729: NOT
28730: AND
28731: IFFALSE 28806
// begin tmp := result ;
28733: LD_ADDR_VAR 0 9
28737: PUSH
28738: LD_VAR 0 6
28742: ST_TO_ADDR
// for i = tmp downto 1 do
28743: LD_ADDR_VAR 0 7
28747: PUSH
28748: DOUBLE
28749: LD_VAR 0 9
28753: INC
28754: ST_TO_ADDR
28755: LD_INT 1
28757: PUSH
28758: FOR_DOWNTO
28759: IFFALSE 28804
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28761: LD_ADDR_VAR 0 6
28765: PUSH
28766: LD_VAR 0 6
28770: PPUSH
28771: LD_VAR 0 9
28775: PUSH
28776: LD_VAR 0 7
28780: MINUS
28781: PUSH
28782: LD_INT 1
28784: PLUS
28785: PPUSH
28786: LD_VAR 0 9
28790: PUSH
28791: LD_VAR 0 7
28795: ARRAY
28796: PPUSH
28797: CALL_OW 1
28801: ST_TO_ADDR
28802: GO 28758
28804: POP
28805: POP
// end ; tmp := [ ] ;
28806: LD_ADDR_VAR 0 9
28810: PUSH
28811: EMPTY
28812: ST_TO_ADDR
// if mode then
28813: LD_VAR 0 5
28817: IFFALSE 28886
// begin for i = 1 to result do
28819: LD_ADDR_VAR 0 7
28823: PUSH
28824: DOUBLE
28825: LD_INT 1
28827: DEC
28828: ST_TO_ADDR
28829: LD_VAR 0 6
28833: PUSH
28834: FOR_TO
28835: IFFALSE 28874
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28837: LD_ADDR_VAR 0 9
28841: PUSH
28842: LD_VAR 0 9
28846: PPUSH
28847: LD_VAR 0 7
28851: PPUSH
28852: LD_VAR 0 6
28856: PUSH
28857: LD_VAR 0 7
28861: ARRAY
28862: PUSH
28863: LD_INT 1
28865: ARRAY
28866: PPUSH
28867: CALL_OW 1
28871: ST_TO_ADDR
28872: GO 28834
28874: POP
28875: POP
// result := tmp ;
28876: LD_ADDR_VAR 0 6
28880: PUSH
28881: LD_VAR 0 9
28885: ST_TO_ADDR
// end ; end ;
28886: LD_VAR 0 6
28890: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28891: LD_INT 0
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
28897: PPUSH
28898: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28899: LD_ADDR_VAR 0 5
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// if not x or not y then
28921: LD_VAR 0 2
28925: NOT
28926: IFTRUE 28935
28928: PUSH
28929: LD_VAR 0 3
28933: NOT
28934: OR
28935: IFFALSE 28939
// exit ;
28937: GO 30595
// if not range then
28939: LD_VAR 0 4
28943: NOT
28944: IFFALSE 28954
// range := 10 ;
28946: LD_ADDR_VAR 0 4
28950: PUSH
28951: LD_INT 10
28953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28954: LD_ADDR_VAR 0 8
28958: PUSH
28959: LD_INT 81
28961: PUSH
28962: LD_VAR 0 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 92
28973: PUSH
28974: LD_VAR 0 2
28978: PUSH
28979: LD_VAR 0 3
28983: PUSH
28984: LD_VAR 0 4
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 3
28997: PUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: ST_TO_ADDR
// if not tmp then
29022: LD_VAR 0 8
29026: NOT
29027: IFFALSE 29031
// exit ;
29029: GO 30595
// for i in tmp do
29031: LD_ADDR_VAR 0 6
29035: PUSH
29036: LD_VAR 0 8
29040: PUSH
29041: FOR_IN
29042: IFFALSE 30570
// begin points := [ 0 , 0 , 0 ] ;
29044: LD_ADDR_VAR 0 9
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: ST_TO_ADDR
// bpoints := 1 ;
29063: LD_ADDR_VAR 0 10
29067: PUSH
29068: LD_INT 1
29070: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29071: LD_VAR 0 6
29075: PPUSH
29076: CALL_OW 247
29080: PUSH
29081: LD_INT 1
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29671
29089: POP
// begin if GetClass ( i ) = 1 then
29090: LD_VAR 0 6
29094: PPUSH
29095: CALL_OW 257
29099: PUSH
29100: LD_INT 1
29102: EQUAL
29103: IFFALSE 29124
// points := [ 10 , 5 , 3 ] ;
29105: LD_ADDR_VAR 0 9
29109: PUSH
29110: LD_INT 10
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29124: LD_VAR 0 6
29128: PPUSH
29129: CALL_OW 257
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: LD_INT 4
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: IN
29148: IFFALSE 29169
// points := [ 3 , 2 , 1 ] ;
29150: LD_ADDR_VAR 0 9
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29169: LD_VAR 0 6
29173: PPUSH
29174: CALL_OW 257
29178: PUSH
29179: LD_INT 5
29181: EQUAL
29182: IFFALSE 29203
// points := [ 130 , 5 , 2 ] ;
29184: LD_ADDR_VAR 0 9
29188: PUSH
29189: LD_INT 130
29191: PUSH
29192: LD_INT 5
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29203: LD_VAR 0 6
29207: PPUSH
29208: CALL_OW 257
29212: PUSH
29213: LD_INT 8
29215: EQUAL
29216: IFFALSE 29237
// points := [ 35 , 35 , 30 ] ;
29218: LD_ADDR_VAR 0 9
29222: PUSH
29223: LD_INT 35
29225: PUSH
29226: LD_INT 35
29228: PUSH
29229: LD_INT 30
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29237: LD_VAR 0 6
29241: PPUSH
29242: CALL_OW 257
29246: PUSH
29247: LD_INT 9
29249: EQUAL
29250: IFFALSE 29271
// points := [ 20 , 55 , 40 ] ;
29252: LD_ADDR_VAR 0 9
29256: PUSH
29257: LD_INT 20
29259: PUSH
29260: LD_INT 55
29262: PUSH
29263: LD_INT 40
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29271: LD_VAR 0 6
29275: PPUSH
29276: CALL_OW 257
29280: PUSH
29281: LD_INT 12
29283: PUSH
29284: LD_INT 16
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: IN
29291: IFFALSE 29312
// points := [ 5 , 3 , 2 ] ;
29293: LD_ADDR_VAR 0 9
29297: PUSH
29298: LD_INT 5
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29312: LD_VAR 0 6
29316: PPUSH
29317: CALL_OW 257
29321: PUSH
29322: LD_INT 17
29324: EQUAL
29325: IFFALSE 29346
// points := [ 100 , 50 , 75 ] ;
29327: LD_ADDR_VAR 0 9
29331: PUSH
29332: LD_INT 100
29334: PUSH
29335: LD_INT 50
29337: PUSH
29338: LD_INT 75
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29346: LD_VAR 0 6
29350: PPUSH
29351: CALL_OW 257
29355: PUSH
29356: LD_INT 15
29358: EQUAL
29359: IFFALSE 29380
// points := [ 10 , 5 , 3 ] ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_INT 10
29368: PUSH
29369: LD_INT 5
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29380: LD_VAR 0 6
29384: PPUSH
29385: CALL_OW 257
29389: PUSH
29390: LD_INT 14
29392: EQUAL
29393: IFFALSE 29414
// points := [ 10 , 0 , 0 ] ;
29395: LD_ADDR_VAR 0 9
29399: PUSH
29400: LD_INT 10
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29414: LD_VAR 0 6
29418: PPUSH
29419: CALL_OW 257
29423: PUSH
29424: LD_INT 11
29426: EQUAL
29427: IFFALSE 29448
// points := [ 30 , 10 , 5 ] ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_INT 30
29436: PUSH
29437: LD_INT 10
29439: PUSH
29440: LD_INT 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29448: LD_VAR 0 1
29452: PPUSH
29453: LD_INT 5
29455: PPUSH
29456: CALL_OW 321
29460: PUSH
29461: LD_INT 2
29463: EQUAL
29464: IFFALSE 29481
// bpoints := bpoints * 1.8 ;
29466: LD_ADDR_VAR 0 10
29470: PUSH
29471: LD_VAR 0 10
29475: PUSH
29476: LD_REAL  1.80000000000000E+0000
29479: MUL
29480: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29481: LD_VAR 0 6
29485: PPUSH
29486: CALL_OW 257
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 4
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: IN
29509: IFFALSE 29529
29511: PUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_INT 51
29519: PPUSH
29520: CALL_OW 321
29524: PUSH
29525: LD_INT 2
29527: EQUAL
29528: AND
29529: IFFALSE 29546
// bpoints := bpoints * 1.2 ;
29531: LD_ADDR_VAR 0 10
29535: PUSH
29536: LD_VAR 0 10
29540: PUSH
29541: LD_REAL  1.20000000000000E+0000
29544: MUL
29545: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29546: LD_VAR 0 6
29550: PPUSH
29551: CALL_OW 257
29555: PUSH
29556: LD_INT 5
29558: PUSH
29559: LD_INT 7
29561: PUSH
29562: LD_INT 9
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: IN
29570: IFFALSE 29590
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: LD_INT 52
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: EQUAL
29589: AND
29590: IFFALSE 29607
// bpoints := bpoints * 1.5 ;
29592: LD_ADDR_VAR 0 10
29596: PUSH
29597: LD_VAR 0 10
29601: PUSH
29602: LD_REAL  1.50000000000000E+0000
29605: MUL
29606: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_INT 66
29614: PPUSH
29615: CALL_OW 321
29619: PUSH
29620: LD_INT 2
29622: EQUAL
29623: IFFALSE 29640
// bpoints := bpoints * 1.1 ;
29625: LD_ADDR_VAR 0 10
29629: PUSH
29630: LD_VAR 0 10
29634: PUSH
29635: LD_REAL  1.10000000000000E+0000
29638: MUL
29639: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29640: LD_ADDR_VAR 0 10
29644: PUSH
29645: LD_VAR 0 10
29649: PUSH
29650: LD_VAR 0 6
29654: PPUSH
29655: LD_INT 1
29657: PPUSH
29658: CALL_OW 259
29662: PUSH
29663: LD_REAL  1.15000000000000E+0000
29666: MUL
29667: MUL
29668: ST_TO_ADDR
// end ; unit_vehicle :
29669: GO 30499
29671: LD_INT 2
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 30487
29679: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29680: LD_VAR 0 6
29684: PPUSH
29685: CALL_OW 264
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 42
29695: PUSH
29696: LD_INT 24
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: IN
29704: IFFALSE 29725
// points := [ 25 , 5 , 3 ] ;
29706: LD_ADDR_VAR 0 9
29710: PUSH
29711: LD_INT 25
29713: PUSH
29714: LD_INT 5
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 264
29734: PUSH
29735: LD_INT 4
29737: PUSH
29738: LD_INT 43
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: IN
29749: IFFALSE 29770
// points := [ 40 , 15 , 5 ] ;
29751: LD_ADDR_VAR 0 9
29755: PUSH
29756: LD_INT 40
29758: PUSH
29759: LD_INT 15
29761: PUSH
29762: LD_INT 5
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29770: LD_VAR 0 6
29774: PPUSH
29775: CALL_OW 264
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: LD_INT 23
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: IN
29790: IFFALSE 29811
// points := [ 7 , 25 , 8 ] ;
29792: LD_ADDR_VAR 0 9
29796: PUSH
29797: LD_INT 7
29799: PUSH
29800: LD_INT 25
29802: PUSH
29803: LD_INT 8
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29811: LD_VAR 0 6
29815: PPUSH
29816: CALL_OW 264
29820: PUSH
29821: LD_INT 5
29823: PUSH
29824: LD_INT 27
29826: PUSH
29827: LD_INT 44
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: IN
29835: IFFALSE 29856
// points := [ 14 , 50 , 16 ] ;
29837: LD_ADDR_VAR 0 9
29841: PUSH
29842: LD_INT 14
29844: PUSH
29845: LD_INT 50
29847: PUSH
29848: LD_INT 16
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29856: LD_VAR 0 6
29860: PPUSH
29861: CALL_OW 264
29865: PUSH
29866: LD_INT 6
29868: PUSH
29869: LD_INT 46
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: IN
29876: IFFALSE 29897
// points := [ 32 , 120 , 70 ] ;
29878: LD_ADDR_VAR 0 9
29882: PUSH
29883: LD_INT 32
29885: PUSH
29886: LD_INT 120
29888: PUSH
29889: LD_INT 70
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29897: LD_VAR 0 6
29901: PPUSH
29902: CALL_OW 264
29906: PUSH
29907: LD_INT 7
29909: PUSH
29910: LD_INT 28
29912: PUSH
29913: LD_INT 45
29915: PUSH
29916: LD_INT 92
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: IN
29925: IFFALSE 29946
// points := [ 35 , 20 , 45 ] ;
29927: LD_ADDR_VAR 0 9
29931: PUSH
29932: LD_INT 35
29934: PUSH
29935: LD_INT 20
29937: PUSH
29938: LD_INT 45
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29946: LD_VAR 0 6
29950: PPUSH
29951: CALL_OW 264
29955: PUSH
29956: LD_INT 47
29958: PUSH
29959: EMPTY
29960: LIST
29961: IN
29962: IFFALSE 29983
// points := [ 67 , 45 , 75 ] ;
29964: LD_ADDR_VAR 0 9
29968: PUSH
29969: LD_INT 67
29971: PUSH
29972: LD_INT 45
29974: PUSH
29975: LD_INT 75
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29983: LD_VAR 0 6
29987: PPUSH
29988: CALL_OW 264
29992: PUSH
29993: LD_INT 26
29995: PUSH
29996: EMPTY
29997: LIST
29998: IN
29999: IFFALSE 30020
// points := [ 120 , 30 , 80 ] ;
30001: LD_ADDR_VAR 0 9
30005: PUSH
30006: LD_INT 120
30008: PUSH
30009: LD_INT 30
30011: PUSH
30012: LD_INT 80
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30020: LD_VAR 0 6
30024: PPUSH
30025: CALL_OW 264
30029: PUSH
30030: LD_INT 22
30032: PUSH
30033: EMPTY
30034: LIST
30035: IN
30036: IFFALSE 30057
// points := [ 40 , 1 , 1 ] ;
30038: LD_ADDR_VAR 0 9
30042: PUSH
30043: LD_INT 40
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30057: LD_VAR 0 6
30061: PPUSH
30062: CALL_OW 264
30066: PUSH
30067: LD_INT 29
30069: PUSH
30070: EMPTY
30071: LIST
30072: IN
30073: IFFALSE 30094
// points := [ 70 , 200 , 400 ] ;
30075: LD_ADDR_VAR 0 9
30079: PUSH
30080: LD_INT 70
30082: PUSH
30083: LD_INT 200
30085: PUSH
30086: LD_INT 400
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30094: LD_VAR 0 6
30098: PPUSH
30099: CALL_OW 264
30103: PUSH
30104: LD_INT 14
30106: PUSH
30107: LD_INT 53
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: IN
30114: IFFALSE 30135
// points := [ 40 , 10 , 20 ] ;
30116: LD_ADDR_VAR 0 9
30120: PUSH
30121: LD_INT 40
30123: PUSH
30124: LD_INT 10
30126: PUSH
30127: LD_INT 20
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30135: LD_VAR 0 6
30139: PPUSH
30140: CALL_OW 264
30144: PUSH
30145: LD_INT 9
30147: PUSH
30148: EMPTY
30149: LIST
30150: IN
30151: IFFALSE 30172
// points := [ 5 , 70 , 20 ] ;
30153: LD_ADDR_VAR 0 9
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: LD_INT 70
30163: PUSH
30164: LD_INT 20
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30172: LD_VAR 0 6
30176: PPUSH
30177: CALL_OW 264
30181: PUSH
30182: LD_INT 10
30184: PUSH
30185: EMPTY
30186: LIST
30187: IN
30188: IFFALSE 30209
// points := [ 35 , 110 , 70 ] ;
30190: LD_ADDR_VAR 0 9
30194: PUSH
30195: LD_INT 35
30197: PUSH
30198: LD_INT 110
30200: PUSH
30201: LD_INT 70
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30209: LD_VAR 0 6
30213: PPUSH
30214: CALL_OW 265
30218: PUSH
30219: LD_INT 25
30221: EQUAL
30222: IFFALSE 30243
// points := [ 80 , 65 , 100 ] ;
30224: LD_ADDR_VAR 0 9
30228: PUSH
30229: LD_INT 80
30231: PUSH
30232: LD_INT 65
30234: PUSH
30235: LD_INT 100
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30243: LD_VAR 0 6
30247: PPUSH
30248: CALL_OW 263
30252: PUSH
30253: LD_INT 1
30255: EQUAL
30256: IFFALSE 30291
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30258: LD_ADDR_VAR 0 10
30262: PUSH
30263: LD_VAR 0 10
30267: PUSH
30268: LD_VAR 0 6
30272: PPUSH
30273: CALL_OW 311
30277: PPUSH
30278: LD_INT 3
30280: PPUSH
30281: CALL_OW 259
30285: PUSH
30286: LD_INT 4
30288: MUL
30289: MUL
30290: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30291: LD_VAR 0 6
30295: PPUSH
30296: CALL_OW 263
30300: PUSH
30301: LD_INT 2
30303: EQUAL
30304: IFFALSE 30355
// begin j := IsControledBy ( i ) ;
30306: LD_ADDR_VAR 0 7
30310: PUSH
30311: LD_VAR 0 6
30315: PPUSH
30316: CALL_OW 312
30320: ST_TO_ADDR
// if j then
30321: LD_VAR 0 7
30325: IFFALSE 30355
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30327: LD_ADDR_VAR 0 10
30331: PUSH
30332: LD_VAR 0 10
30336: PUSH
30337: LD_VAR 0 7
30341: PPUSH
30342: LD_INT 3
30344: PPUSH
30345: CALL_OW 259
30349: PUSH
30350: LD_INT 3
30352: MUL
30353: MUL
30354: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30355: LD_VAR 0 6
30359: PPUSH
30360: CALL_OW 264
30364: PUSH
30365: LD_INT 5
30367: PUSH
30368: LD_INT 6
30370: PUSH
30371: LD_INT 46
30373: PUSH
30374: LD_INT 44
30376: PUSH
30377: LD_INT 47
30379: PUSH
30380: LD_INT 45
30382: PUSH
30383: LD_INT 28
30385: PUSH
30386: LD_INT 7
30388: PUSH
30389: LD_INT 27
30391: PUSH
30392: LD_INT 29
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: IN
30407: IFFALSE 30427
30409: PUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: LD_INT 52
30417: PPUSH
30418: CALL_OW 321
30422: PUSH
30423: LD_INT 2
30425: EQUAL
30426: AND
30427: IFFALSE 30444
// bpoints := bpoints * 1.2 ;
30429: LD_ADDR_VAR 0 10
30433: PUSH
30434: LD_VAR 0 10
30438: PUSH
30439: LD_REAL  1.20000000000000E+0000
30442: MUL
30443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30444: LD_VAR 0 6
30448: PPUSH
30449: CALL_OW 264
30453: PUSH
30454: LD_INT 6
30456: PUSH
30457: LD_INT 46
30459: PUSH
30460: LD_INT 47
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: IN
30468: IFFALSE 30485
// bpoints := bpoints * 1.2 ;
30470: LD_ADDR_VAR 0 10
30474: PUSH
30475: LD_VAR 0 10
30479: PUSH
30480: LD_REAL  1.20000000000000E+0000
30483: MUL
30484: ST_TO_ADDR
// end ; unit_building :
30485: GO 30499
30487: LD_INT 3
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30498
30495: POP
// ; end ;
30496: GO 30499
30498: POP
// for j = 1 to 3 do
30499: LD_ADDR_VAR 0 7
30503: PUSH
30504: DOUBLE
30505: LD_INT 1
30507: DEC
30508: ST_TO_ADDR
30509: LD_INT 3
30511: PUSH
30512: FOR_TO
30513: IFFALSE 30566
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30515: LD_ADDR_VAR 0 5
30519: PUSH
30520: LD_VAR 0 5
30524: PPUSH
30525: LD_VAR 0 7
30529: PPUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 7
30539: ARRAY
30540: PUSH
30541: LD_VAR 0 9
30545: PUSH
30546: LD_VAR 0 7
30550: ARRAY
30551: PUSH
30552: LD_VAR 0 10
30556: MUL
30557: PLUS
30558: PPUSH
30559: CALL_OW 1
30563: ST_TO_ADDR
30564: GO 30512
30566: POP
30567: POP
// end ;
30568: GO 29041
30570: POP
30571: POP
// result := Replace ( result , 4 , tmp ) ;
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_VAR 0 5
30581: PPUSH
30582: LD_INT 4
30584: PPUSH
30585: LD_VAR 0 8
30589: PPUSH
30590: CALL_OW 1
30594: ST_TO_ADDR
// end ;
30595: LD_VAR 0 5
30599: RET
// export function DangerAtRange ( unit , range ) ; begin
30600: LD_INT 0
30602: PPUSH
// if not unit then
30603: LD_VAR 0 1
30607: NOT
30608: IFFALSE 30612
// exit ;
30610: GO 30657
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 255
30626: PPUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL_OW 250
30636: PPUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 251
30646: PPUSH
30647: LD_VAR 0 2
30651: PPUSH
30652: CALL 28891 0 4
30656: ST_TO_ADDR
// end ;
30657: LD_VAR 0 3
30661: RET
// export function DangerInArea ( side , area ) ; begin
30662: LD_INT 0
30664: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_VAR 0 2
30674: PPUSH
30675: LD_INT 81
30677: PUSH
30678: LD_VAR 0 1
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 70
30691: ST_TO_ADDR
// end ;
30692: LD_VAR 0 3
30696: RET
// export function IsExtension ( b ) ; begin
30697: LD_INT 0
30699: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_VAR 0 1
30709: PUSH
30710: LD_INT 23
30712: PUSH
30713: LD_INT 20
30715: PUSH
30716: LD_INT 22
30718: PUSH
30719: LD_INT 17
30721: PUSH
30722: LD_INT 24
30724: PUSH
30725: LD_INT 21
30727: PUSH
30728: LD_INT 19
30730: PUSH
30731: LD_INT 16
30733: PUSH
30734: LD_INT 25
30736: PUSH
30737: LD_INT 18
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: IN
30752: ST_TO_ADDR
// end ;
30753: LD_VAR 0 2
30757: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
30762: PPUSH
// result := [ ] ;
30763: LD_ADDR_VAR 0 4
30767: PUSH
30768: EMPTY
30769: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30770: LD_ADDR_VAR 0 5
30774: PUSH
30775: LD_VAR 0 2
30779: PPUSH
30780: LD_INT 21
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PPUSH
30790: CALL_OW 70
30794: ST_TO_ADDR
// if not tmp then
30795: LD_VAR 0 5
30799: NOT
30800: IFFALSE 30804
// exit ;
30802: GO 30868
// if checkLink then
30804: LD_VAR 0 3
30808: IFFALSE 30858
// begin for i in tmp do
30810: LD_ADDR_VAR 0 6
30814: PUSH
30815: LD_VAR 0 5
30819: PUSH
30820: FOR_IN
30821: IFFALSE 30856
// if GetBase ( i ) <> base then
30823: LD_VAR 0 6
30827: PPUSH
30828: CALL_OW 274
30832: PUSH
30833: LD_VAR 0 1
30837: NONEQUAL
30838: IFFALSE 30854
// ComLinkToBase ( base , i ) ;
30840: LD_VAR 0 1
30844: PPUSH
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 169
30854: GO 30820
30856: POP
30857: POP
// end ; result := tmp ;
30858: LD_ADDR_VAR 0 4
30862: PUSH
30863: LD_VAR 0 5
30867: ST_TO_ADDR
// end ;
30868: LD_VAR 0 4
30872: RET
// export function ComComplete ( units , b ) ; var i ; begin
30873: LD_INT 0
30875: PPUSH
30876: PPUSH
// if not units then
30877: LD_VAR 0 1
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 30976
// for i in units do
30886: LD_ADDR_VAR 0 4
30890: PUSH
30891: LD_VAR 0 1
30895: PUSH
30896: FOR_IN
30897: IFFALSE 30974
// if BuildingStatus ( b ) = bs_build then
30899: LD_VAR 0 2
30903: PPUSH
30904: CALL_OW 461
30908: PUSH
30909: LD_INT 1
30911: EQUAL
30912: IFFALSE 30972
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30914: LD_VAR 0 4
30918: PPUSH
30919: LD_STRING h
30921: PUSH
30922: LD_VAR 0 2
30926: PPUSH
30927: CALL_OW 250
30931: PUSH
30932: LD_VAR 0 2
30936: PPUSH
30937: CALL_OW 251
30941: PUSH
30942: LD_VAR 0 2
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: PUSH
30965: EMPTY
30966: LIST
30967: PPUSH
30968: CALL_OW 446
30972: GO 30896
30974: POP
30975: POP
// end ;
30976: LD_VAR 0 3
30980: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30989: LD_VAR 0 1
30993: NOT
30994: IFTRUE 31011
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 263
31006: PUSH
31007: LD_INT 2
31009: NONEQUAL
31010: OR
31011: IFFALSE 31015
// exit ;
31013: GO 31331
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31015: LD_ADDR_VAR 0 6
31019: PUSH
31020: LD_INT 22
31022: PUSH
31023: LD_VAR 0 1
31027: PPUSH
31028: CALL_OW 255
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: LD_INT 30
31042: PUSH
31043: LD_INT 36
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 34
31052: PUSH
31053: LD_INT 31
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL_OW 69
31073: ST_TO_ADDR
// if not tmp then
31074: LD_VAR 0 6
31078: NOT
31079: IFFALSE 31083
// exit ;
31081: GO 31331
// result := [ ] ;
31083: LD_ADDR_VAR 0 2
31087: PUSH
31088: EMPTY
31089: ST_TO_ADDR
// for i in tmp do
31090: LD_ADDR_VAR 0 3
31094: PUSH
31095: LD_VAR 0 6
31099: PUSH
31100: FOR_IN
31101: IFFALSE 31172
// begin t := UnitsInside ( i ) ;
31103: LD_ADDR_VAR 0 4
31107: PUSH
31108: LD_VAR 0 3
31112: PPUSH
31113: CALL_OW 313
31117: ST_TO_ADDR
// if t then
31118: LD_VAR 0 4
31122: IFFALSE 31170
// for j in t do
31124: LD_ADDR_VAR 0 7
31128: PUSH
31129: LD_VAR 0 4
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31168
// result := Replace ( result , result + 1 , j ) ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_VAR 0 2
31146: PPUSH
31147: LD_VAR 0 2
31151: PUSH
31152: LD_INT 1
31154: PLUS
31155: PPUSH
31156: LD_VAR 0 7
31160: PPUSH
31161: CALL_OW 1
31165: ST_TO_ADDR
31166: GO 31134
31168: POP
31169: POP
// end ;
31170: GO 31100
31172: POP
31173: POP
// if not result then
31174: LD_VAR 0 2
31178: NOT
31179: IFFALSE 31183
// exit ;
31181: GO 31331
// mech := result [ 1 ] ;
31183: LD_ADDR_VAR 0 5
31187: PUSH
31188: LD_VAR 0 2
31192: PUSH
31193: LD_INT 1
31195: ARRAY
31196: ST_TO_ADDR
// if result > 1 then
31197: LD_VAR 0 2
31201: PUSH
31202: LD_INT 1
31204: GREATER
31205: IFFALSE 31317
// begin for i = 2 to result do
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: DOUBLE
31213: LD_INT 2
31215: DEC
31216: ST_TO_ADDR
31217: LD_VAR 0 2
31221: PUSH
31222: FOR_TO
31223: IFFALSE 31315
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31225: LD_ADDR_VAR 0 4
31229: PUSH
31230: LD_VAR 0 2
31234: PUSH
31235: LD_VAR 0 3
31239: ARRAY
31240: PPUSH
31241: LD_INT 3
31243: PPUSH
31244: CALL_OW 259
31248: PUSH
31249: LD_VAR 0 2
31253: PUSH
31254: LD_VAR 0 3
31258: ARRAY
31259: PPUSH
31260: CALL_OW 432
31264: MINUS
31265: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31266: LD_VAR 0 4
31270: PUSH
31271: LD_VAR 0 5
31275: PPUSH
31276: LD_INT 3
31278: PPUSH
31279: CALL_OW 259
31283: PUSH
31284: LD_VAR 0 5
31288: PPUSH
31289: CALL_OW 432
31293: MINUS
31294: GREATEREQUAL
31295: IFFALSE 31313
// mech := result [ i ] ;
31297: LD_ADDR_VAR 0 5
31301: PUSH
31302: LD_VAR 0 2
31306: PUSH
31307: LD_VAR 0 3
31311: ARRAY
31312: ST_TO_ADDR
// end ;
31313: GO 31222
31315: POP
31316: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31317: LD_VAR 0 1
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: CALL_OW 135
// end ;
31331: LD_VAR 0 2
31335: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31336: LD_INT 0
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
// result := [ ] ;
31351: LD_ADDR_VAR 0 7
31355: PUSH
31356: EMPTY
31357: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31358: LD_VAR 0 1
31362: PPUSH
31363: CALL_OW 266
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: IN
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 33023
// if name then
31383: LD_VAR 0 3
31387: IFFALSE 31403
// SetBName ( base_dep , name ) ;
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_VAR 0 3
31398: PPUSH
31399: CALL_OW 500
// base := GetBase ( base_dep ) ;
31403: LD_ADDR_VAR 0 15
31407: PUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 274
31417: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31418: LD_ADDR_VAR 0 16
31422: PUSH
31423: LD_VAR 0 1
31427: PPUSH
31428: CALL_OW 255
31432: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31433: LD_ADDR_VAR 0 17
31437: PUSH
31438: LD_VAR 0 1
31442: PPUSH
31443: CALL_OW 248
31447: ST_TO_ADDR
// if sources then
31448: LD_VAR 0 5
31452: IFFALSE 31499
// for i = 1 to 3 do
31454: LD_ADDR_VAR 0 8
31458: PUSH
31459: DOUBLE
31460: LD_INT 1
31462: DEC
31463: ST_TO_ADDR
31464: LD_INT 3
31466: PUSH
31467: FOR_TO
31468: IFFALSE 31497
// AddResourceType ( base , i , sources [ i ] ) ;
31470: LD_VAR 0 15
31474: PPUSH
31475: LD_VAR 0 8
31479: PPUSH
31480: LD_VAR 0 5
31484: PUSH
31485: LD_VAR 0 8
31489: ARRAY
31490: PPUSH
31491: CALL_OW 276
31495: GO 31467
31497: POP
31498: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31499: LD_ADDR_VAR 0 18
31503: PUSH
31504: LD_VAR 0 15
31508: PPUSH
31509: LD_VAR 0 2
31513: PPUSH
31514: LD_INT 1
31516: PPUSH
31517: CALL 30758 0 3
31521: ST_TO_ADDR
// InitHc ;
31522: CALL_OW 19
// InitUc ;
31526: CALL_OW 18
// uc_side := side ;
31530: LD_ADDR_OWVAR 20
31534: PUSH
31535: LD_VAR 0 16
31539: ST_TO_ADDR
// uc_nation := nation ;
31540: LD_ADDR_OWVAR 21
31544: PUSH
31545: LD_VAR 0 17
31549: ST_TO_ADDR
// if buildings then
31550: LD_VAR 0 18
31554: IFFALSE 32882
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31556: LD_ADDR_VAR 0 19
31560: PUSH
31561: LD_VAR 0 18
31565: PPUSH
31566: LD_INT 2
31568: PUSH
31569: LD_INT 30
31571: PUSH
31572: LD_INT 29
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 30
31581: PUSH
31582: LD_INT 30
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 72
31598: ST_TO_ADDR
// if tmp then
31599: LD_VAR 0 19
31603: IFFALSE 31651
// for i in tmp do
31605: LD_ADDR_VAR 0 8
31609: PUSH
31610: LD_VAR 0 19
31614: PUSH
31615: FOR_IN
31616: IFFALSE 31649
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31618: LD_VAR 0 8
31622: PPUSH
31623: CALL_OW 250
31627: PPUSH
31628: LD_VAR 0 8
31632: PPUSH
31633: CALL_OW 251
31637: PPUSH
31638: LD_VAR 0 16
31642: PPUSH
31643: CALL_OW 441
31647: GO 31615
31649: POP
31650: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31651: LD_VAR 0 18
31655: PPUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 30
31661: PUSH
31662: LD_INT 32
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 30
31671: PUSH
31672: LD_INT 33
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 72
31688: IFFALSE 31776
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31690: LD_ADDR_VAR 0 8
31694: PUSH
31695: LD_VAR 0 18
31699: PPUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 32
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 30
31715: PUSH
31716: LD_INT 33
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: PPUSH
31728: CALL_OW 72
31732: PUSH
31733: FOR_IN
31734: IFFALSE 31774
// begin if not GetBWeapon ( i ) then
31736: LD_VAR 0 8
31740: PPUSH
31741: CALL_OW 269
31745: NOT
31746: IFFALSE 31772
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31748: LD_VAR 0 8
31752: PPUSH
31753: LD_VAR 0 8
31757: PPUSH
31758: LD_VAR 0 2
31762: PPUSH
31763: CALL 33028 0 2
31767: PPUSH
31768: CALL_OW 431
// end ;
31772: GO 31733
31774: POP
31775: POP
// end ; for i = 1 to personel do
31776: LD_ADDR_VAR 0 8
31780: PUSH
31781: DOUBLE
31782: LD_INT 1
31784: DEC
31785: ST_TO_ADDR
31786: LD_VAR 0 6
31790: PUSH
31791: FOR_TO
31792: IFFALSE 32862
// begin if i > 4 then
31794: LD_VAR 0 8
31798: PUSH
31799: LD_INT 4
31801: GREATER
31802: IFFALSE 31806
// break ;
31804: GO 32862
// case i of 1 :
31806: LD_VAR 0 8
31810: PUSH
31811: LD_INT 1
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31899
31819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31820: LD_ADDR_VAR 0 12
31824: PUSH
31825: LD_VAR 0 18
31829: PPUSH
31830: LD_INT 22
31832: PUSH
31833: LD_VAR 0 16
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 58
31844: PUSH
31845: EMPTY
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 30
31853: PUSH
31854: LD_INT 32
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 30
31863: PUSH
31864: LD_INT 4
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 5
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: PPUSH
31892: CALL_OW 72
31896: ST_TO_ADDR
31897: GO 32121
31899: LD_INT 2
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31969
31907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31908: LD_ADDR_VAR 0 12
31912: PUSH
31913: LD_VAR 0 18
31917: PPUSH
31918: LD_INT 22
31920: PUSH
31921: LD_VAR 0 16
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: LD_INT 30
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 30
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PPUSH
31962: CALL_OW 72
31966: ST_TO_ADDR
31967: GO 32121
31969: LD_INT 3
31971: DOUBLE
31972: EQUAL
31973: IFTRUE 31977
31975: GO 32039
31977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31978: LD_ADDR_VAR 0 12
31982: PUSH
31983: LD_VAR 0 18
31987: PPUSH
31988: LD_INT 22
31990: PUSH
31991: LD_VAR 0 16
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: LD_INT 30
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 30
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 72
32036: ST_TO_ADDR
32037: GO 32121
32039: LD_INT 4
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32120
32047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32048: LD_ADDR_VAR 0 12
32052: PUSH
32053: LD_VAR 0 18
32057: PPUSH
32058: LD_INT 22
32060: PUSH
32061: LD_VAR 0 16
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 30
32075: PUSH
32076: LD_INT 6
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 30
32085: PUSH
32086: LD_INT 7
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 30
32095: PUSH
32096: LD_INT 8
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: CALL_OW 72
32117: ST_TO_ADDR
32118: GO 32121
32120: POP
// if i = 1 then
32121: LD_VAR 0 8
32125: PUSH
32126: LD_INT 1
32128: EQUAL
32129: IFFALSE 32240
// begin tmp := [ ] ;
32131: LD_ADDR_VAR 0 19
32135: PUSH
32136: EMPTY
32137: ST_TO_ADDR
// for j in f do
32138: LD_ADDR_VAR 0 9
32142: PUSH
32143: LD_VAR 0 12
32147: PUSH
32148: FOR_IN
32149: IFFALSE 32222
// if GetBType ( j ) = b_bunker then
32151: LD_VAR 0 9
32155: PPUSH
32156: CALL_OW 266
32160: PUSH
32161: LD_INT 32
32163: EQUAL
32164: IFFALSE 32191
// tmp := Insert ( tmp , 1 , j ) else
32166: LD_ADDR_VAR 0 19
32170: PUSH
32171: LD_VAR 0 19
32175: PPUSH
32176: LD_INT 1
32178: PPUSH
32179: LD_VAR 0 9
32183: PPUSH
32184: CALL_OW 2
32188: ST_TO_ADDR
32189: GO 32220
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32191: LD_ADDR_VAR 0 19
32195: PUSH
32196: LD_VAR 0 19
32200: PPUSH
32201: LD_VAR 0 19
32205: PUSH
32206: LD_INT 1
32208: PLUS
32209: PPUSH
32210: LD_VAR 0 9
32214: PPUSH
32215: CALL_OW 2
32219: ST_TO_ADDR
32220: GO 32148
32222: POP
32223: POP
// if tmp then
32224: LD_VAR 0 19
32228: IFFALSE 32240
// f := tmp ;
32230: LD_ADDR_VAR 0 12
32234: PUSH
32235: LD_VAR 0 19
32239: ST_TO_ADDR
// end ; x := personel [ i ] ;
32240: LD_ADDR_VAR 0 13
32244: PUSH
32245: LD_VAR 0 6
32249: PUSH
32250: LD_VAR 0 8
32254: ARRAY
32255: ST_TO_ADDR
// if x = - 1 then
32256: LD_VAR 0 13
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: EQUAL
32265: IFFALSE 32476
// begin for j in f do
32267: LD_ADDR_VAR 0 9
32271: PUSH
32272: LD_VAR 0 12
32276: PUSH
32277: FOR_IN
32278: IFFALSE 32472
// repeat InitHc ;
32280: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32284: LD_VAR 0 9
32288: PPUSH
32289: CALL_OW 266
32293: PUSH
32294: LD_INT 5
32296: EQUAL
32297: IFFALSE 32367
// begin if UnitsInside ( j ) < 3 then
32299: LD_VAR 0 9
32303: PPUSH
32304: CALL_OW 313
32308: PUSH
32309: LD_INT 3
32311: LESS
32312: IFFALSE 32348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32314: LD_INT 0
32316: PPUSH
32317: LD_INT 5
32319: PUSH
32320: LD_INT 8
32322: PUSH
32323: LD_INT 9
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: PUSH
32331: LD_VAR 0 17
32335: ARRAY
32336: PPUSH
32337: LD_VAR 0 4
32341: PPUSH
32342: CALL_OW 380
32346: GO 32365
// PrepareHuman ( false , i , skill ) ;
32348: LD_INT 0
32350: PPUSH
32351: LD_VAR 0 8
32355: PPUSH
32356: LD_VAR 0 4
32360: PPUSH
32361: CALL_OW 380
// end else
32365: GO 32384
// PrepareHuman ( false , i , skill ) ;
32367: LD_INT 0
32369: PPUSH
32370: LD_VAR 0 8
32374: PPUSH
32375: LD_VAR 0 4
32379: PPUSH
32380: CALL_OW 380
// un := CreateHuman ;
32384: LD_ADDR_VAR 0 14
32388: PUSH
32389: CALL_OW 44
32393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32394: LD_ADDR_VAR 0 7
32398: PUSH
32399: LD_VAR 0 7
32403: PPUSH
32404: LD_INT 1
32406: PPUSH
32407: LD_VAR 0 14
32411: PPUSH
32412: CALL_OW 2
32416: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32417: LD_VAR 0 14
32421: PPUSH
32422: LD_VAR 0 9
32426: PPUSH
32427: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32431: LD_VAR 0 9
32435: PPUSH
32436: CALL_OW 313
32440: PUSH
32441: LD_INT 6
32443: EQUAL
32444: IFTRUE 32468
32446: PUSH
32447: LD_VAR 0 9
32451: PPUSH
32452: CALL_OW 266
32456: PUSH
32457: LD_INT 32
32459: PUSH
32460: LD_INT 31
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: IN
32467: OR
32468: IFFALSE 32280
32470: GO 32277
32472: POP
32473: POP
// end else
32474: GO 32860
// for j = 1 to x do
32476: LD_ADDR_VAR 0 9
32480: PUSH
32481: DOUBLE
32482: LD_INT 1
32484: DEC
32485: ST_TO_ADDR
32486: LD_VAR 0 13
32490: PUSH
32491: FOR_TO
32492: IFFALSE 32858
// begin InitHc ;
32494: CALL_OW 19
// if not f then
32498: LD_VAR 0 12
32502: NOT
32503: IFFALSE 32592
// begin PrepareHuman ( false , i , skill ) ;
32505: LD_INT 0
32507: PPUSH
32508: LD_VAR 0 8
32512: PPUSH
32513: LD_VAR 0 4
32517: PPUSH
32518: CALL_OW 380
// un := CreateHuman ;
32522: LD_ADDR_VAR 0 14
32526: PUSH
32527: CALL_OW 44
32531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32532: LD_ADDR_VAR 0 7
32536: PUSH
32537: LD_VAR 0 7
32541: PPUSH
32542: LD_INT 1
32544: PPUSH
32545: LD_VAR 0 14
32549: PPUSH
32550: CALL_OW 2
32554: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32555: LD_VAR 0 14
32559: PPUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 250
32569: PPUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 251
32579: PPUSH
32580: LD_INT 10
32582: PPUSH
32583: LD_INT 0
32585: PPUSH
32586: CALL_OW 50
// continue ;
32590: GO 32491
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32592: LD_VAR 0 12
32596: PUSH
32597: LD_INT 1
32599: ARRAY
32600: PPUSH
32601: CALL_OW 313
32605: IFFALSE 32633
32607: PUSH
32608: LD_VAR 0 12
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PPUSH
32617: CALL_OW 266
32621: PUSH
32622: LD_INT 32
32624: PUSH
32625: LD_INT 31
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: IN
32632: AND
32633: IFTRUE 32654
32635: PUSH
32636: LD_VAR 0 12
32640: PUSH
32641: LD_INT 1
32643: ARRAY
32644: PPUSH
32645: CALL_OW 313
32649: PUSH
32650: LD_INT 6
32652: EQUAL
32653: OR
32654: IFFALSE 32674
// f := Delete ( f , 1 ) ;
32656: LD_ADDR_VAR 0 12
32660: PUSH
32661: LD_VAR 0 12
32665: PPUSH
32666: LD_INT 1
32668: PPUSH
32669: CALL_OW 3
32673: ST_TO_ADDR
// if not f then
32674: LD_VAR 0 12
32678: NOT
32679: IFFALSE 32697
// begin x := x + 2 ;
32681: LD_ADDR_VAR 0 13
32685: PUSH
32686: LD_VAR 0 13
32690: PUSH
32691: LD_INT 2
32693: PLUS
32694: ST_TO_ADDR
// continue ;
32695: GO 32491
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32697: LD_VAR 0 12
32701: PUSH
32702: LD_INT 1
32704: ARRAY
32705: PPUSH
32706: CALL_OW 266
32710: PUSH
32711: LD_INT 5
32713: EQUAL
32714: IFFALSE 32788
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32716: LD_VAR 0 12
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: PPUSH
32725: CALL_OW 313
32729: PUSH
32730: LD_INT 3
32732: LESS
32733: IFFALSE 32769
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32735: LD_INT 0
32737: PPUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 8
32743: PUSH
32744: LD_INT 9
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: PUSH
32752: LD_VAR 0 17
32756: ARRAY
32757: PPUSH
32758: LD_VAR 0 4
32762: PPUSH
32763: CALL_OW 380
32767: GO 32786
// PrepareHuman ( false , i , skill ) ;
32769: LD_INT 0
32771: PPUSH
32772: LD_VAR 0 8
32776: PPUSH
32777: LD_VAR 0 4
32781: PPUSH
32782: CALL_OW 380
// end else
32786: GO 32805
// PrepareHuman ( false , i , skill ) ;
32788: LD_INT 0
32790: PPUSH
32791: LD_VAR 0 8
32795: PPUSH
32796: LD_VAR 0 4
32800: PPUSH
32801: CALL_OW 380
// un := CreateHuman ;
32805: LD_ADDR_VAR 0 14
32809: PUSH
32810: CALL_OW 44
32814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32815: LD_ADDR_VAR 0 7
32819: PUSH
32820: LD_VAR 0 7
32824: PPUSH
32825: LD_INT 1
32827: PPUSH
32828: LD_VAR 0 14
32832: PPUSH
32833: CALL_OW 2
32837: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32838: LD_VAR 0 14
32842: PPUSH
32843: LD_VAR 0 12
32847: PUSH
32848: LD_INT 1
32850: ARRAY
32851: PPUSH
32852: CALL_OW 52
// end ;
32856: GO 32491
32858: POP
32859: POP
// end ;
32860: GO 31791
32862: POP
32863: POP
// result := result ^ buildings ;
32864: LD_ADDR_VAR 0 7
32868: PUSH
32869: LD_VAR 0 7
32873: PUSH
32874: LD_VAR 0 18
32878: ADD
32879: ST_TO_ADDR
// end else
32880: GO 33023
// begin for i = 1 to personel do
32882: LD_ADDR_VAR 0 8
32886: PUSH
32887: DOUBLE
32888: LD_INT 1
32890: DEC
32891: ST_TO_ADDR
32892: LD_VAR 0 6
32896: PUSH
32897: FOR_TO
32898: IFFALSE 33021
// begin if i > 4 then
32900: LD_VAR 0 8
32904: PUSH
32905: LD_INT 4
32907: GREATER
32908: IFFALSE 32912
// break ;
32910: GO 33021
// x := personel [ i ] ;
32912: LD_ADDR_VAR 0 13
32916: PUSH
32917: LD_VAR 0 6
32921: PUSH
32922: LD_VAR 0 8
32926: ARRAY
32927: ST_TO_ADDR
// if x = - 1 then
32928: LD_VAR 0 13
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: EQUAL
32937: IFFALSE 32941
// continue ;
32939: GO 32897
// PrepareHuman ( false , i , skill ) ;
32941: LD_INT 0
32943: PPUSH
32944: LD_VAR 0 8
32948: PPUSH
32949: LD_VAR 0 4
32953: PPUSH
32954: CALL_OW 380
// un := CreateHuman ;
32958: LD_ADDR_VAR 0 14
32962: PUSH
32963: CALL_OW 44
32967: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32968: LD_VAR 0 14
32972: PPUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 250
32982: PPUSH
32983: LD_VAR 0 1
32987: PPUSH
32988: CALL_OW 251
32992: PPUSH
32993: LD_INT 10
32995: PPUSH
32996: LD_INT 0
32998: PPUSH
32999: CALL_OW 50
// result := result ^ un ;
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: LD_VAR 0 7
33012: PUSH
33013: LD_VAR 0 14
33017: ADD
33018: ST_TO_ADDR
// end ;
33019: GO 32897
33021: POP
33022: POP
// end ; end ;
33023: LD_VAR 0 7
33027: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
// result := false ;
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: LD_INT 0
33053: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33054: LD_VAR 0 1
33058: NOT
33059: IFTRUE 33084
33061: PUSH
33062: LD_VAR 0 1
33066: PPUSH
33067: CALL_OW 266
33071: PUSH
33072: LD_INT 32
33074: PUSH
33075: LD_INT 33
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: IN
33082: NOT
33083: OR
33084: IFFALSE 33088
// exit ;
33086: GO 34223
// nat := GetNation ( tower ) ;
33088: LD_ADDR_VAR 0 12
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL_OW 248
33102: ST_TO_ADDR
// side := GetSide ( tower ) ;
33103: LD_ADDR_VAR 0 16
33107: PUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 255
33117: ST_TO_ADDR
// x := GetX ( tower ) ;
33118: LD_ADDR_VAR 0 10
33122: PUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 250
33132: ST_TO_ADDR
// y := GetY ( tower ) ;
33133: LD_ADDR_VAR 0 11
33137: PUSH
33138: LD_VAR 0 1
33142: PPUSH
33143: CALL_OW 251
33147: ST_TO_ADDR
// if not x or not y then
33148: LD_VAR 0 10
33152: NOT
33153: IFTRUE 33162
33155: PUSH
33156: LD_VAR 0 11
33160: NOT
33161: OR
33162: IFFALSE 33166
// exit ;
33164: GO 34223
// weapon := 0 ;
33166: LD_ADDR_VAR 0 18
33170: PUSH
33171: LD_INT 0
33173: ST_TO_ADDR
// fac_list := [ ] ;
33174: LD_ADDR_VAR 0 17
33178: PUSH
33179: EMPTY
33180: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33181: LD_ADDR_VAR 0 6
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 274
33195: PPUSH
33196: LD_VAR 0 2
33200: PPUSH
33201: LD_INT 0
33203: PPUSH
33204: CALL 30758 0 3
33208: PPUSH
33209: LD_INT 30
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 72
33223: ST_TO_ADDR
// if not factories then
33224: LD_VAR 0 6
33228: NOT
33229: IFFALSE 33233
// exit ;
33231: GO 34223
// for i in factories do
33233: LD_ADDR_VAR 0 8
33237: PUSH
33238: LD_VAR 0 6
33242: PUSH
33243: FOR_IN
33244: IFFALSE 33269
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33246: LD_ADDR_VAR 0 17
33250: PUSH
33251: LD_VAR 0 17
33255: PUSH
33256: LD_VAR 0 8
33260: PPUSH
33261: CALL_OW 478
33265: UNION
33266: ST_TO_ADDR
33267: GO 33243
33269: POP
33270: POP
// if not fac_list then
33271: LD_VAR 0 17
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 34223
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33280: LD_ADDR_VAR 0 5
33284: PUSH
33285: LD_INT 4
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: LD_INT 9
33293: PUSH
33294: LD_INT 10
33296: PUSH
33297: LD_INT 6
33299: PUSH
33300: LD_INT 7
33302: PUSH
33303: LD_INT 11
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 27
33317: PUSH
33318: LD_INT 28
33320: PUSH
33321: LD_INT 26
33323: PUSH
33324: LD_INT 30
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 43
33335: PUSH
33336: LD_INT 44
33338: PUSH
33339: LD_INT 46
33341: PUSH
33342: LD_INT 45
33344: PUSH
33345: LD_INT 47
33347: PUSH
33348: LD_INT 49
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: PUSH
33364: LD_VAR 0 12
33368: ARRAY
33369: ST_TO_ADDR
// list := list isect fac_list ;
33370: LD_ADDR_VAR 0 5
33374: PUSH
33375: LD_VAR 0 5
33379: PUSH
33380: LD_VAR 0 17
33384: ISECT
33385: ST_TO_ADDR
// if not list then
33386: LD_VAR 0 5
33390: NOT
33391: IFFALSE 33395
// exit ;
33393: GO 34223
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33395: LD_VAR 0 12
33399: PUSH
33400: LD_INT 3
33402: EQUAL
33403: IFFALSE 33415
33405: PUSH
33406: LD_INT 49
33408: PUSH
33409: LD_VAR 0 5
33413: IN
33414: AND
33415: IFFALSE 33435
33417: PUSH
33418: LD_INT 31
33420: PPUSH
33421: LD_VAR 0 16
33425: PPUSH
33426: CALL_OW 321
33430: PUSH
33431: LD_INT 2
33433: EQUAL
33434: AND
33435: IFFALSE 33495
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33437: LD_INT 22
33439: PUSH
33440: LD_VAR 0 16
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 35
33451: PUSH
33452: LD_INT 49
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 91
33461: PUSH
33462: LD_VAR 0 1
33466: PUSH
33467: LD_INT 10
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: PPUSH
33480: CALL_OW 69
33484: NOT
33485: IFFALSE 33495
// weapon := ru_time_lapser ;
33487: LD_ADDR_VAR 0 18
33491: PUSH
33492: LD_INT 49
33494: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33495: LD_VAR 0 12
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33534
33512: PUSH
33513: LD_INT 11
33515: PUSH
33516: LD_VAR 0 5
33520: IN
33521: IFTRUE 33533
33523: PUSH
33524: LD_INT 30
33526: PUSH
33527: LD_VAR 0 5
33531: IN
33532: OR
33533: AND
33534: IFFALSE 33554
33536: PUSH
33537: LD_INT 6
33539: PPUSH
33540: LD_VAR 0 16
33544: PPUSH
33545: CALL_OW 321
33549: PUSH
33550: LD_INT 2
33552: EQUAL
33553: AND
33554: IFFALSE 33721
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33556: LD_INT 22
33558: PUSH
33559: LD_VAR 0 16
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 35
33573: PUSH
33574: LD_INT 11
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 35
33583: PUSH
33584: LD_INT 30
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 91
33598: PUSH
33599: LD_VAR 0 1
33603: PUSH
33604: LD_INT 18
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: PPUSH
33617: CALL_OW 69
33621: NOT
33622: IFFALSE 33698
33624: PUSH
33625: LD_INT 22
33627: PUSH
33628: LD_VAR 0 16
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 30
33642: PUSH
33643: LD_INT 32
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 30
33652: PUSH
33653: LD_INT 33
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 91
33667: PUSH
33668: LD_VAR 0 1
33672: PUSH
33673: LD_INT 12
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: PPUSH
33689: CALL_OW 69
33693: PUSH
33694: LD_INT 2
33696: GREATER
33697: AND
33698: IFFALSE 33721
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33700: LD_ADDR_VAR 0 18
33704: PUSH
33705: LD_INT 11
33707: PUSH
33708: LD_INT 30
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_VAR 0 12
33719: ARRAY
33720: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33721: LD_VAR 0 18
33725: NOT
33726: IFFALSE 33746
33728: PUSH
33729: LD_INT 40
33731: PPUSH
33732: LD_VAR 0 16
33736: PPUSH
33737: CALL_OW 321
33741: PUSH
33742: LD_INT 2
33744: EQUAL
33745: AND
33746: IFFALSE 33782
33748: PUSH
33749: LD_INT 7
33751: PUSH
33752: LD_VAR 0 5
33756: IN
33757: IFTRUE 33769
33759: PUSH
33760: LD_INT 28
33762: PUSH
33763: LD_VAR 0 5
33767: IN
33768: OR
33769: IFTRUE 33781
33771: PUSH
33772: LD_INT 45
33774: PUSH
33775: LD_VAR 0 5
33779: IN
33780: OR
33781: AND
33782: IFFALSE 34036
// begin hex := GetHexInfo ( x , y ) ;
33784: LD_ADDR_VAR 0 4
33788: PUSH
33789: LD_VAR 0 10
33793: PPUSH
33794: LD_VAR 0 11
33798: PPUSH
33799: CALL_OW 546
33803: ST_TO_ADDR
// if hex [ 1 ] then
33804: LD_VAR 0 4
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: IFFALSE 33816
// exit ;
33814: GO 34223
// height := hex [ 2 ] ;
33816: LD_ADDR_VAR 0 15
33820: PUSH
33821: LD_VAR 0 4
33825: PUSH
33826: LD_INT 2
33828: ARRAY
33829: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33830: LD_ADDR_VAR 0 14
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: ST_TO_ADDR
// for i in tmp do
33853: LD_ADDR_VAR 0 8
33857: PUSH
33858: LD_VAR 0 14
33862: PUSH
33863: FOR_IN
33864: IFFALSE 34034
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33866: LD_ADDR_VAR 0 9
33870: PUSH
33871: LD_VAR 0 10
33875: PPUSH
33876: LD_VAR 0 8
33880: PPUSH
33881: LD_INT 5
33883: PPUSH
33884: CALL_OW 272
33888: PUSH
33889: LD_VAR 0 11
33893: PPUSH
33894: LD_VAR 0 8
33898: PPUSH
33899: LD_INT 5
33901: PPUSH
33902: CALL_OW 273
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33911: LD_VAR 0 9
33915: PUSH
33916: LD_INT 1
33918: ARRAY
33919: PPUSH
33920: LD_VAR 0 9
33924: PUSH
33925: LD_INT 2
33927: ARRAY
33928: PPUSH
33929: CALL_OW 488
33933: IFFALSE 34032
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33935: LD_ADDR_VAR 0 4
33939: PUSH
33940: LD_VAR 0 9
33944: PUSH
33945: LD_INT 1
33947: ARRAY
33948: PPUSH
33949: LD_VAR 0 9
33953: PUSH
33954: LD_INT 2
33956: ARRAY
33957: PPUSH
33958: CALL_OW 546
33962: ST_TO_ADDR
// if hex [ 1 ] then
33963: LD_VAR 0 4
33967: PUSH
33968: LD_INT 1
33970: ARRAY
33971: IFFALSE 33975
// continue ;
33973: GO 33863
// h := hex [ 2 ] ;
33975: LD_ADDR_VAR 0 13
33979: PUSH
33980: LD_VAR 0 4
33984: PUSH
33985: LD_INT 2
33987: ARRAY
33988: ST_TO_ADDR
// if h + 7 < height then
33989: LD_VAR 0 13
33993: PUSH
33994: LD_INT 7
33996: PLUS
33997: PUSH
33998: LD_VAR 0 15
34002: LESS
34003: IFFALSE 34032
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34005: LD_ADDR_VAR 0 18
34009: PUSH
34010: LD_INT 7
34012: PUSH
34013: LD_INT 28
34015: PUSH
34016: LD_INT 45
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: PUSH
34024: LD_VAR 0 12
34028: ARRAY
34029: ST_TO_ADDR
// break ;
34030: GO 34034
// end ; end ; end ;
34032: GO 33863
34034: POP
34035: POP
// end ; if not weapon then
34036: LD_VAR 0 18
34040: NOT
34041: IFFALSE 34101
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34043: LD_ADDR_VAR 0 5
34047: PUSH
34048: LD_VAR 0 5
34052: PUSH
34053: LD_INT 11
34055: PUSH
34056: LD_INT 30
34058: PUSH
34059: LD_INT 49
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: DIFF
34067: ST_TO_ADDR
// if not list then
34068: LD_VAR 0 5
34072: NOT
34073: IFFALSE 34077
// exit ;
34075: GO 34223
// weapon := list [ rand ( 1 , list ) ] ;
34077: LD_ADDR_VAR 0 18
34081: PUSH
34082: LD_VAR 0 5
34086: PUSH
34087: LD_INT 1
34089: PPUSH
34090: LD_VAR 0 5
34094: PPUSH
34095: CALL_OW 12
34099: ARRAY
34100: ST_TO_ADDR
// end ; if weapon then
34101: LD_VAR 0 18
34105: IFFALSE 34223
// begin tmp := CostOfWeapon ( weapon ) ;
34107: LD_ADDR_VAR 0 14
34111: PUSH
34112: LD_VAR 0 18
34116: PPUSH
34117: CALL_OW 451
34121: ST_TO_ADDR
// j := GetBase ( tower ) ;
34122: LD_ADDR_VAR 0 9
34126: PUSH
34127: LD_VAR 0 1
34131: PPUSH
34132: CALL_OW 274
34136: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34137: LD_VAR 0 9
34141: PPUSH
34142: LD_INT 1
34144: PPUSH
34145: CALL_OW 275
34149: PUSH
34150: LD_VAR 0 14
34154: PUSH
34155: LD_INT 1
34157: ARRAY
34158: GREATEREQUAL
34159: IFFALSE 34185
34161: PUSH
34162: LD_VAR 0 9
34166: PPUSH
34167: LD_INT 2
34169: PPUSH
34170: CALL_OW 275
34174: PUSH
34175: LD_VAR 0 14
34179: PUSH
34180: LD_INT 2
34182: ARRAY
34183: GREATEREQUAL
34184: AND
34185: IFFALSE 34211
34187: PUSH
34188: LD_VAR 0 9
34192: PPUSH
34193: LD_INT 3
34195: PPUSH
34196: CALL_OW 275
34200: PUSH
34201: LD_VAR 0 14
34205: PUSH
34206: LD_INT 3
34208: ARRAY
34209: GREATEREQUAL
34210: AND
34211: IFFALSE 34223
// result := weapon ;
34213: LD_ADDR_VAR 0 3
34217: PUSH
34218: LD_VAR 0 18
34222: ST_TO_ADDR
// end ; end ;
34223: LD_VAR 0 3
34227: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34228: LD_INT 0
34230: PPUSH
34231: PPUSH
// result := true ;
34232: LD_ADDR_VAR 0 3
34236: PUSH
34237: LD_INT 1
34239: ST_TO_ADDR
// if array1 = array2 then
34240: LD_VAR 0 1
34244: PUSH
34245: LD_VAR 0 2
34249: EQUAL
34250: IFFALSE 34310
// begin for i = 1 to array1 do
34252: LD_ADDR_VAR 0 4
34256: PUSH
34257: DOUBLE
34258: LD_INT 1
34260: DEC
34261: ST_TO_ADDR
34262: LD_VAR 0 1
34266: PUSH
34267: FOR_TO
34268: IFFALSE 34306
// if array1 [ i ] <> array2 [ i ] then
34270: LD_VAR 0 1
34274: PUSH
34275: LD_VAR 0 4
34279: ARRAY
34280: PUSH
34281: LD_VAR 0 2
34285: PUSH
34286: LD_VAR 0 4
34290: ARRAY
34291: NONEQUAL
34292: IFFALSE 34304
// begin result := false ;
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 0
34301: ST_TO_ADDR
// break ;
34302: GO 34306
// end ;
34304: GO 34267
34306: POP
34307: POP
// end else
34308: GO 34318
// result := false ;
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_INT 0
34317: ST_TO_ADDR
// end ;
34318: LD_VAR 0 3
34322: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34323: LD_INT 0
34325: PPUSH
34326: PPUSH
// if not array1 or not array2 then
34327: LD_VAR 0 1
34331: NOT
34332: IFTRUE 34341
34334: PUSH
34335: LD_VAR 0 2
34339: NOT
34340: OR
34341: IFFALSE 34345
// exit ;
34343: GO 34409
// result := true ;
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: LD_INT 1
34352: ST_TO_ADDR
// for i = 1 to array1 do
34353: LD_ADDR_VAR 0 4
34357: PUSH
34358: DOUBLE
34359: LD_INT 1
34361: DEC
34362: ST_TO_ADDR
34363: LD_VAR 0 1
34367: PUSH
34368: FOR_TO
34369: IFFALSE 34407
// if array1 [ i ] <> array2 [ i ] then
34371: LD_VAR 0 1
34375: PUSH
34376: LD_VAR 0 4
34380: ARRAY
34381: PUSH
34382: LD_VAR 0 2
34386: PUSH
34387: LD_VAR 0 4
34391: ARRAY
34392: NONEQUAL
34393: IFFALSE 34405
// begin result := false ;
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_INT 0
34402: ST_TO_ADDR
// break ;
34403: GO 34407
// end ;
34405: GO 34368
34407: POP
34408: POP
// end ;
34409: LD_VAR 0 3
34413: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34414: LD_INT 0
34416: PPUSH
34417: PPUSH
34418: PPUSH
// pom := GetBase ( fac ) ;
34419: LD_ADDR_VAR 0 5
34423: PUSH
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 274
34433: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34434: LD_ADDR_VAR 0 4
34438: PUSH
34439: LD_VAR 0 2
34443: PUSH
34444: LD_INT 1
34446: ARRAY
34447: PPUSH
34448: LD_VAR 0 2
34452: PUSH
34453: LD_INT 2
34455: ARRAY
34456: PPUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_INT 3
34464: ARRAY
34465: PPUSH
34466: LD_VAR 0 2
34470: PUSH
34471: LD_INT 4
34473: ARRAY
34474: PPUSH
34475: CALL_OW 449
34479: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_VAR 0 5
34489: PPUSH
34490: LD_INT 1
34492: PPUSH
34493: CALL_OW 275
34497: PUSH
34498: LD_VAR 0 4
34502: PUSH
34503: LD_INT 1
34505: ARRAY
34506: GREATEREQUAL
34507: IFFALSE 34533
34509: PUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: LD_INT 2
34517: PPUSH
34518: CALL_OW 275
34522: PUSH
34523: LD_VAR 0 4
34527: PUSH
34528: LD_INT 2
34530: ARRAY
34531: GREATEREQUAL
34532: AND
34533: IFFALSE 34559
34535: PUSH
34536: LD_VAR 0 5
34540: PPUSH
34541: LD_INT 3
34543: PPUSH
34544: CALL_OW 275
34548: PUSH
34549: LD_VAR 0 4
34553: PUSH
34554: LD_INT 3
34556: ARRAY
34557: GREATEREQUAL
34558: AND
34559: ST_TO_ADDR
// end ;
34560: LD_VAR 0 3
34564: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
// pom := GetBase ( building ) ;
34571: LD_ADDR_VAR 0 3
34575: PUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 274
34585: ST_TO_ADDR
// if not pom then
34586: LD_VAR 0 3
34590: NOT
34591: IFFALSE 34595
// exit ;
34593: GO 34769
// btype := GetBType ( building ) ;
34595: LD_ADDR_VAR 0 5
34599: PUSH
34600: LD_VAR 0 1
34604: PPUSH
34605: CALL_OW 266
34609: ST_TO_ADDR
// if btype = b_armoury then
34610: LD_VAR 0 5
34614: PUSH
34615: LD_INT 4
34617: EQUAL
34618: IFFALSE 34628
// btype := b_barracks ;
34620: LD_ADDR_VAR 0 5
34624: PUSH
34625: LD_INT 5
34627: ST_TO_ADDR
// if btype = b_depot then
34628: LD_VAR 0 5
34632: PUSH
34633: LD_INT 0
34635: EQUAL
34636: IFFALSE 34646
// btype := b_warehouse ;
34638: LD_ADDR_VAR 0 5
34642: PUSH
34643: LD_INT 1
34645: ST_TO_ADDR
// if btype = b_workshop then
34646: LD_VAR 0 5
34650: PUSH
34651: LD_INT 2
34653: EQUAL
34654: IFFALSE 34664
// btype := b_factory ;
34656: LD_ADDR_VAR 0 5
34660: PUSH
34661: LD_INT 3
34663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34664: LD_ADDR_VAR 0 4
34668: PUSH
34669: LD_VAR 0 5
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 248
34683: PPUSH
34684: CALL_OW 450
34688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34689: LD_ADDR_VAR 0 2
34693: PUSH
34694: LD_VAR 0 3
34698: PPUSH
34699: LD_INT 1
34701: PPUSH
34702: CALL_OW 275
34706: PUSH
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 1
34714: ARRAY
34715: GREATEREQUAL
34716: IFFALSE 34742
34718: PUSH
34719: LD_VAR 0 3
34723: PPUSH
34724: LD_INT 2
34726: PPUSH
34727: CALL_OW 275
34731: PUSH
34732: LD_VAR 0 4
34736: PUSH
34737: LD_INT 2
34739: ARRAY
34740: GREATEREQUAL
34741: AND
34742: IFFALSE 34768
34744: PUSH
34745: LD_VAR 0 3
34749: PPUSH
34750: LD_INT 3
34752: PPUSH
34753: CALL_OW 275
34757: PUSH
34758: LD_VAR 0 4
34762: PUSH
34763: LD_INT 3
34765: ARRAY
34766: GREATEREQUAL
34767: AND
34768: ST_TO_ADDR
// end ;
34769: LD_VAR 0 2
34773: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
34778: PPUSH
// pom := GetBase ( building ) ;
34779: LD_ADDR_VAR 0 4
34783: PUSH
34784: LD_VAR 0 1
34788: PPUSH
34789: CALL_OW 274
34793: ST_TO_ADDR
// if not pom then
34794: LD_VAR 0 4
34798: NOT
34799: IFFALSE 34803
// exit ;
34801: GO 34908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34803: LD_ADDR_VAR 0 5
34807: PUSH
34808: LD_VAR 0 2
34812: PPUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 248
34822: PPUSH
34823: CALL_OW 450
34827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_VAR 0 4
34837: PPUSH
34838: LD_INT 1
34840: PPUSH
34841: CALL_OW 275
34845: PUSH
34846: LD_VAR 0 5
34850: PUSH
34851: LD_INT 1
34853: ARRAY
34854: GREATEREQUAL
34855: IFFALSE 34881
34857: PUSH
34858: LD_VAR 0 4
34862: PPUSH
34863: LD_INT 2
34865: PPUSH
34866: CALL_OW 275
34870: PUSH
34871: LD_VAR 0 5
34875: PUSH
34876: LD_INT 2
34878: ARRAY
34879: GREATEREQUAL
34880: AND
34881: IFFALSE 34907
34883: PUSH
34884: LD_VAR 0 4
34888: PPUSH
34889: LD_INT 3
34891: PPUSH
34892: CALL_OW 275
34896: PUSH
34897: LD_VAR 0 5
34901: PUSH
34902: LD_INT 3
34904: ARRAY
34905: GREATEREQUAL
34906: AND
34907: ST_TO_ADDR
// end ;
34908: LD_VAR 0 3
34912: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34913: LD_INT 0
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
// result := false ;
34926: LD_ADDR_VAR 0 8
34930: PUSH
34931: LD_INT 0
34933: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34934: LD_VAR 0 5
34938: NOT
34939: IFTRUE 34948
34941: PUSH
34942: LD_VAR 0 1
34946: NOT
34947: OR
34948: IFTRUE 34957
34950: PUSH
34951: LD_VAR 0 2
34955: NOT
34956: OR
34957: IFTRUE 34966
34959: PUSH
34960: LD_VAR 0 3
34964: NOT
34965: OR
34966: IFFALSE 34970
// exit ;
34968: GO 35796
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34970: LD_ADDR_VAR 0 14
34974: PUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: LD_VAR 0 2
34984: PPUSH
34985: LD_VAR 0 3
34989: PPUSH
34990: LD_VAR 0 4
34994: PPUSH
34995: LD_VAR 0 5
34999: PUSH
35000: LD_INT 1
35002: ARRAY
35003: PPUSH
35004: CALL_OW 248
35008: PPUSH
35009: LD_INT 0
35011: PPUSH
35012: CALL 37077 0 6
35016: ST_TO_ADDR
// if not hexes then
35017: LD_VAR 0 14
35021: NOT
35022: IFFALSE 35026
// exit ;
35024: GO 35796
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35026: LD_ADDR_VAR 0 17
35030: PUSH
35031: LD_VAR 0 5
35035: PPUSH
35036: LD_INT 22
35038: PUSH
35039: LD_VAR 0 13
35043: PPUSH
35044: CALL_OW 255
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: LD_INT 30
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 30
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PPUSH
35085: CALL_OW 72
35089: ST_TO_ADDR
// for i = 1 to hexes do
35090: LD_ADDR_VAR 0 9
35094: PUSH
35095: DOUBLE
35096: LD_INT 1
35098: DEC
35099: ST_TO_ADDR
35100: LD_VAR 0 14
35104: PUSH
35105: FOR_TO
35106: IFFALSE 35794
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35108: LD_ADDR_VAR 0 13
35112: PUSH
35113: LD_VAR 0 14
35117: PUSH
35118: LD_VAR 0 9
35122: ARRAY
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: PPUSH
35128: LD_VAR 0 14
35132: PUSH
35133: LD_VAR 0 9
35137: ARRAY
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: PPUSH
35143: CALL_OW 428
35147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35148: LD_VAR 0 14
35152: PUSH
35153: LD_VAR 0 9
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: LD_VAR 0 14
35167: PUSH
35168: LD_VAR 0 9
35172: ARRAY
35173: PUSH
35174: LD_INT 2
35176: ARRAY
35177: PPUSH
35178: CALL_OW 351
35182: IFTRUE 35221
35184: PUSH
35185: LD_VAR 0 14
35189: PUSH
35190: LD_VAR 0 9
35194: ARRAY
35195: PUSH
35196: LD_INT 1
35198: ARRAY
35199: PPUSH
35200: LD_VAR 0 14
35204: PUSH
35205: LD_VAR 0 9
35209: ARRAY
35210: PUSH
35211: LD_INT 2
35213: ARRAY
35214: PPUSH
35215: CALL_OW 488
35219: NOT
35220: OR
35221: IFTRUE 35238
35223: PUSH
35224: LD_VAR 0 13
35228: PPUSH
35229: CALL_OW 247
35233: PUSH
35234: LD_INT 3
35236: EQUAL
35237: OR
35238: IFFALSE 35244
// exit ;
35240: POP
35241: POP
35242: GO 35796
// if not tmp then
35244: LD_VAR 0 13
35248: NOT
35249: IFFALSE 35253
// continue ;
35251: GO 35105
// result := true ;
35253: LD_ADDR_VAR 0 8
35257: PUSH
35258: LD_INT 1
35260: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35261: LD_VAR 0 6
35265: IFFALSE 35282
35267: PUSH
35268: LD_VAR 0 13
35272: PPUSH
35273: CALL_OW 247
35277: PUSH
35278: LD_INT 2
35280: EQUAL
35281: AND
35282: IFFALSE 35299
35284: PUSH
35285: LD_VAR 0 13
35289: PPUSH
35290: CALL_OW 263
35294: PUSH
35295: LD_INT 1
35297: EQUAL
35298: AND
35299: IFFALSE 35463
// begin if IsDrivenBy ( tmp ) then
35301: LD_VAR 0 13
35305: PPUSH
35306: CALL_OW 311
35310: IFFALSE 35314
// continue ;
35312: GO 35105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35314: LD_VAR 0 6
35318: PPUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 60
35324: PUSH
35325: EMPTY
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: LD_INT 55
35337: PUSH
35338: EMPTY
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PPUSH
35349: CALL_OW 72
35353: IFFALSE 35461
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35355: LD_ADDR_VAR 0 18
35359: PUSH
35360: LD_VAR 0 6
35364: PPUSH
35365: LD_INT 3
35367: PUSH
35368: LD_INT 60
35370: PUSH
35371: EMPTY
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: LD_INT 55
35383: PUSH
35384: EMPTY
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PPUSH
35395: CALL_OW 72
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: ST_TO_ADDR
// if IsInUnit ( driver ) then
35404: LD_VAR 0 18
35408: PPUSH
35409: CALL_OW 310
35413: IFFALSE 35424
// ComExit ( driver ) ;
35415: LD_VAR 0 18
35419: PPUSH
35420: CALL 61067 0 1
// AddComEnterUnit ( driver , tmp ) ;
35424: LD_VAR 0 18
35428: PPUSH
35429: LD_VAR 0 13
35433: PPUSH
35434: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35438: LD_VAR 0 18
35442: PPUSH
35443: LD_VAR 0 7
35447: PPUSH
35448: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35452: LD_VAR 0 18
35456: PPUSH
35457: CALL_OW 181
// end ; continue ;
35461: GO 35105
// end ; if not cleaners or not tmp in cleaners then
35463: LD_VAR 0 6
35467: NOT
35468: IFTRUE 35483
35470: PUSH
35471: LD_VAR 0 13
35475: PUSH
35476: LD_VAR 0 6
35480: IN
35481: NOT
35482: OR
35483: IFFALSE 35792
// begin if dep then
35485: LD_VAR 0 17
35489: IFFALSE 35625
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35491: LD_ADDR_VAR 0 16
35495: PUSH
35496: LD_VAR 0 17
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: PPUSH
35505: CALL_OW 250
35509: PPUSH
35510: LD_VAR 0 17
35514: PUSH
35515: LD_INT 1
35517: ARRAY
35518: PPUSH
35519: CALL_OW 254
35523: PPUSH
35524: LD_INT 5
35526: PPUSH
35527: CALL_OW 272
35531: PUSH
35532: LD_VAR 0 17
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: PPUSH
35541: CALL_OW 251
35545: PPUSH
35546: LD_VAR 0 17
35550: PUSH
35551: LD_INT 1
35553: ARRAY
35554: PPUSH
35555: CALL_OW 254
35559: PPUSH
35560: LD_INT 5
35562: PPUSH
35563: CALL_OW 273
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35572: LD_VAR 0 16
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: PPUSH
35581: LD_VAR 0 16
35585: PUSH
35586: LD_INT 2
35588: ARRAY
35589: PPUSH
35590: CALL_OW 488
35594: IFFALSE 35625
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35596: LD_VAR 0 13
35600: PPUSH
35601: LD_VAR 0 16
35605: PUSH
35606: LD_INT 1
35608: ARRAY
35609: PPUSH
35610: LD_VAR 0 16
35614: PUSH
35615: LD_INT 2
35617: ARRAY
35618: PPUSH
35619: CALL_OW 111
// continue ;
35623: GO 35105
// end ; end ; r := GetDir ( tmp ) ;
35625: LD_ADDR_VAR 0 15
35629: PUSH
35630: LD_VAR 0 13
35634: PPUSH
35635: CALL_OW 254
35639: ST_TO_ADDR
// if r = 5 then
35640: LD_VAR 0 15
35644: PUSH
35645: LD_INT 5
35647: EQUAL
35648: IFFALSE 35658
// r := 0 ;
35650: LD_ADDR_VAR 0 15
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// for j = r to 5 do
35658: LD_ADDR_VAR 0 10
35662: PUSH
35663: DOUBLE
35664: LD_VAR 0 15
35668: DEC
35669: ST_TO_ADDR
35670: LD_INT 5
35672: PUSH
35673: FOR_TO
35674: IFFALSE 35790
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35676: LD_ADDR_VAR 0 11
35680: PUSH
35681: LD_VAR 0 13
35685: PPUSH
35686: CALL_OW 250
35690: PPUSH
35691: LD_VAR 0 10
35695: PPUSH
35696: LD_INT 2
35698: PPUSH
35699: CALL_OW 272
35703: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35704: LD_ADDR_VAR 0 12
35708: PUSH
35709: LD_VAR 0 13
35713: PPUSH
35714: CALL_OW 251
35718: PPUSH
35719: LD_VAR 0 10
35723: PPUSH
35724: LD_INT 2
35726: PPUSH
35727: CALL_OW 273
35731: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35732: LD_VAR 0 11
35736: PPUSH
35737: LD_VAR 0 12
35741: PPUSH
35742: CALL_OW 488
35746: IFFALSE 35765
35748: PUSH
35749: LD_VAR 0 11
35753: PPUSH
35754: LD_VAR 0 12
35758: PPUSH
35759: CALL_OW 428
35763: NOT
35764: AND
35765: IFFALSE 35788
// begin ComMoveXY ( tmp , _x , _y ) ;
35767: LD_VAR 0 13
35771: PPUSH
35772: LD_VAR 0 11
35776: PPUSH
35777: LD_VAR 0 12
35781: PPUSH
35782: CALL_OW 111
// break ;
35786: GO 35790
// end ; end ;
35788: GO 35673
35790: POP
35791: POP
// end ; end ;
35792: GO 35105
35794: POP
35795: POP
// end ;
35796: LD_VAR 0 8
35800: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35801: LD_INT 0
35803: PPUSH
// result := true ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 1
35811: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35812: LD_VAR 0 2
35816: PUSH
35817: LD_INT 24
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35831
35823: LD_INT 33
35825: DOUBLE
35826: EQUAL
35827: IFTRUE 35831
35829: GO 35856
35831: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35832: LD_ADDR_VAR 0 3
35836: PUSH
35837: LD_INT 32
35839: PPUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 321
35849: PUSH
35850: LD_INT 2
35852: EQUAL
35853: ST_TO_ADDR
35854: GO 36172
35856: LD_INT 20
35858: DOUBLE
35859: EQUAL
35860: IFTRUE 35864
35862: GO 35889
35864: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_INT 6
35872: PPUSH
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 321
35882: PUSH
35883: LD_INT 2
35885: EQUAL
35886: ST_TO_ADDR
35887: GO 36172
35889: LD_INT 22
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35903
35895: LD_INT 36
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35903
35901: GO 35928
35903: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_INT 15
35911: PPUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 321
35921: PUSH
35922: LD_INT 2
35924: EQUAL
35925: ST_TO_ADDR
35926: GO 36172
35928: LD_INT 30
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35936
35934: GO 35961
35936: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35937: LD_ADDR_VAR 0 3
35941: PUSH
35942: LD_INT 20
35944: PPUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 321
35954: PUSH
35955: LD_INT 2
35957: EQUAL
35958: ST_TO_ADDR
35959: GO 36172
35961: LD_INT 28
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35975
35967: LD_INT 21
35969: DOUBLE
35970: EQUAL
35971: IFTRUE 35975
35973: GO 36000
35975: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: LD_INT 21
35983: PPUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: CALL_OW 321
35993: PUSH
35994: LD_INT 2
35996: EQUAL
35997: ST_TO_ADDR
35998: GO 36172
36000: LD_INT 16
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36033
36008: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_INT 84
36016: PPUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 321
36026: PUSH
36027: LD_INT 2
36029: EQUAL
36030: ST_TO_ADDR
36031: GO 36172
36033: LD_INT 19
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36047
36039: LD_INT 23
36041: DOUBLE
36042: EQUAL
36043: IFTRUE 36047
36045: GO 36072
36047: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36048: LD_ADDR_VAR 0 3
36052: PUSH
36053: LD_INT 83
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 321
36065: PUSH
36066: LD_INT 2
36068: EQUAL
36069: ST_TO_ADDR
36070: GO 36172
36072: LD_INT 17
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36105
36080: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_INT 39
36088: PPUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 321
36098: PUSH
36099: LD_INT 2
36101: EQUAL
36102: ST_TO_ADDR
36103: GO 36172
36105: LD_INT 18
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36138
36113: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 40
36121: PPUSH
36122: LD_VAR 0 1
36126: PPUSH
36127: CALL_OW 321
36131: PUSH
36132: LD_INT 2
36134: EQUAL
36135: ST_TO_ADDR
36136: GO 36172
36138: LD_INT 27
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36171
36146: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36147: LD_ADDR_VAR 0 3
36151: PUSH
36152: LD_INT 35
36154: PPUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 321
36164: PUSH
36165: LD_INT 2
36167: EQUAL
36168: ST_TO_ADDR
36169: GO 36172
36171: POP
// end ;
36172: LD_VAR 0 3
36176: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36177: LD_INT 0
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
// result := false ;
36190: LD_ADDR_VAR 0 6
36194: PUSH
36195: LD_INT 0
36197: ST_TO_ADDR
// if btype = b_depot then
36198: LD_VAR 0 2
36202: PUSH
36203: LD_INT 0
36205: EQUAL
36206: IFFALSE 36218
// begin result := true ;
36208: LD_ADDR_VAR 0 6
36212: PUSH
36213: LD_INT 1
36215: ST_TO_ADDR
// exit ;
36216: GO 37072
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36218: LD_VAR 0 1
36222: NOT
36223: IFTRUE 36248
36225: PUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 266
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: IN
36246: NOT
36247: OR
36248: IFTRUE 36257
36250: PUSH
36251: LD_VAR 0 2
36255: NOT
36256: OR
36257: IFTRUE 36293
36259: PUSH
36260: LD_VAR 0 5
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: LD_INT 4
36279: PUSH
36280: LD_INT 5
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: IN
36291: NOT
36292: OR
36293: IFTRUE 36312
36295: PUSH
36296: LD_VAR 0 3
36300: PPUSH
36301: LD_VAR 0 4
36305: PPUSH
36306: CALL_OW 488
36310: NOT
36311: OR
36312: IFFALSE 36316
// exit ;
36314: GO 37072
// side := GetSide ( depot ) ;
36316: LD_ADDR_VAR 0 9
36320: PUSH
36321: LD_VAR 0 1
36325: PPUSH
36326: CALL_OW 255
36330: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36331: LD_VAR 0 9
36335: PPUSH
36336: LD_VAR 0 2
36340: PPUSH
36341: CALL 35801 0 2
36345: NOT
36346: IFFALSE 36350
// exit ;
36348: GO 37072
// pom := GetBase ( depot ) ;
36350: LD_ADDR_VAR 0 10
36354: PUSH
36355: LD_VAR 0 1
36359: PPUSH
36360: CALL_OW 274
36364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36365: LD_ADDR_VAR 0 11
36369: PUSH
36370: LD_VAR 0 2
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: CALL_OW 248
36384: PPUSH
36385: CALL_OW 450
36389: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36390: LD_VAR 0 10
36394: PPUSH
36395: LD_INT 1
36397: PPUSH
36398: CALL_OW 275
36402: PUSH
36403: LD_VAR 0 11
36407: PUSH
36408: LD_INT 1
36410: ARRAY
36411: GREATEREQUAL
36412: IFFALSE 36438
36414: PUSH
36415: LD_VAR 0 10
36419: PPUSH
36420: LD_INT 2
36422: PPUSH
36423: CALL_OW 275
36427: PUSH
36428: LD_VAR 0 11
36432: PUSH
36433: LD_INT 2
36435: ARRAY
36436: GREATEREQUAL
36437: AND
36438: IFFALSE 36464
36440: PUSH
36441: LD_VAR 0 10
36445: PPUSH
36446: LD_INT 3
36448: PPUSH
36449: CALL_OW 275
36453: PUSH
36454: LD_VAR 0 11
36458: PUSH
36459: LD_INT 3
36461: ARRAY
36462: GREATEREQUAL
36463: AND
36464: NOT
36465: IFFALSE 36469
// exit ;
36467: GO 37072
// if GetBType ( depot ) = b_depot then
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 266
36478: PUSH
36479: LD_INT 0
36481: EQUAL
36482: IFFALSE 36494
// dist := 28 else
36484: LD_ADDR_VAR 0 14
36488: PUSH
36489: LD_INT 28
36491: ST_TO_ADDR
36492: GO 36502
// dist := 36 ;
36494: LD_ADDR_VAR 0 14
36498: PUSH
36499: LD_INT 36
36501: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_VAR 0 3
36511: PPUSH
36512: LD_VAR 0 4
36516: PPUSH
36517: CALL_OW 297
36521: PUSH
36522: LD_VAR 0 14
36526: GREATER
36527: IFFALSE 36531
// exit ;
36529: GO 37072
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36531: LD_ADDR_VAR 0 12
36535: PUSH
36536: LD_VAR 0 2
36540: PPUSH
36541: LD_VAR 0 3
36545: PPUSH
36546: LD_VAR 0 4
36550: PPUSH
36551: LD_VAR 0 5
36555: PPUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 248
36565: PPUSH
36566: LD_INT 0
36568: PPUSH
36569: CALL 37077 0 6
36573: ST_TO_ADDR
// if not hexes then
36574: LD_VAR 0 12
36578: NOT
36579: IFFALSE 36583
// exit ;
36581: GO 37072
// hex := GetHexInfo ( x , y ) ;
36583: LD_ADDR_VAR 0 15
36587: PUSH
36588: LD_VAR 0 3
36592: PPUSH
36593: LD_VAR 0 4
36597: PPUSH
36598: CALL_OW 546
36602: ST_TO_ADDR
// if hex [ 1 ] then
36603: LD_VAR 0 15
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: IFFALSE 36615
// exit ;
36613: GO 37072
// height := hex [ 2 ] ;
36615: LD_ADDR_VAR 0 13
36619: PUSH
36620: LD_VAR 0 15
36624: PUSH
36625: LD_INT 2
36627: ARRAY
36628: ST_TO_ADDR
// for i = 1 to hexes do
36629: LD_ADDR_VAR 0 7
36633: PUSH
36634: DOUBLE
36635: LD_INT 1
36637: DEC
36638: ST_TO_ADDR
36639: LD_VAR 0 12
36643: PUSH
36644: FOR_TO
36645: IFFALSE 36989
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36647: LD_VAR 0 12
36651: PUSH
36652: LD_VAR 0 7
36656: ARRAY
36657: PUSH
36658: LD_INT 1
36660: ARRAY
36661: PPUSH
36662: LD_VAR 0 12
36666: PUSH
36667: LD_VAR 0 7
36671: ARRAY
36672: PUSH
36673: LD_INT 2
36675: ARRAY
36676: PPUSH
36677: CALL_OW 488
36681: NOT
36682: IFTRUE 36724
36684: PUSH
36685: LD_VAR 0 12
36689: PUSH
36690: LD_VAR 0 7
36694: ARRAY
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PPUSH
36700: LD_VAR 0 12
36704: PUSH
36705: LD_VAR 0 7
36709: ARRAY
36710: PUSH
36711: LD_INT 2
36713: ARRAY
36714: PPUSH
36715: CALL_OW 428
36719: PUSH
36720: LD_INT 0
36722: GREATER
36723: OR
36724: IFTRUE 36762
36726: PUSH
36727: LD_VAR 0 12
36731: PUSH
36732: LD_VAR 0 7
36736: ARRAY
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: PPUSH
36742: LD_VAR 0 12
36746: PUSH
36747: LD_VAR 0 7
36751: ARRAY
36752: PUSH
36753: LD_INT 2
36755: ARRAY
36756: PPUSH
36757: CALL_OW 351
36761: OR
36762: IFFALSE 36768
// exit ;
36764: POP
36765: POP
36766: GO 37072
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36768: LD_ADDR_VAR 0 8
36772: PUSH
36773: LD_VAR 0 12
36777: PUSH
36778: LD_VAR 0 7
36782: ARRAY
36783: PUSH
36784: LD_INT 1
36786: ARRAY
36787: PPUSH
36788: LD_VAR 0 12
36792: PUSH
36793: LD_VAR 0 7
36797: ARRAY
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PPUSH
36803: CALL_OW 546
36807: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36808: LD_VAR 0 8
36812: PUSH
36813: LD_INT 1
36815: ARRAY
36816: IFTRUE 36838
36818: PUSH
36819: LD_VAR 0 8
36823: PUSH
36824: LD_INT 2
36826: ARRAY
36827: PUSH
36828: LD_VAR 0 13
36832: PUSH
36833: LD_INT 2
36835: PLUS
36836: GREATER
36837: OR
36838: IFTRUE 36860
36840: PUSH
36841: LD_VAR 0 8
36845: PUSH
36846: LD_INT 2
36848: ARRAY
36849: PUSH
36850: LD_VAR 0 13
36854: PUSH
36855: LD_INT 2
36857: MINUS
36858: LESS
36859: OR
36860: IFTRUE 36928
36862: PUSH
36863: LD_VAR 0 8
36867: PUSH
36868: LD_INT 3
36870: ARRAY
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 8
36877: PUSH
36878: LD_INT 9
36880: PUSH
36881: LD_INT 10
36883: PUSH
36884: LD_INT 11
36886: PUSH
36887: LD_INT 12
36889: PUSH
36890: LD_INT 13
36892: PUSH
36893: LD_INT 16
36895: PUSH
36896: LD_INT 17
36898: PUSH
36899: LD_INT 18
36901: PUSH
36902: LD_INT 19
36904: PUSH
36905: LD_INT 20
36907: PUSH
36908: LD_INT 21
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: IN
36926: NOT
36927: OR
36928: IFTRUE 36941
36930: PUSH
36931: LD_VAR 0 8
36935: PUSH
36936: LD_INT 5
36938: ARRAY
36939: NOT
36940: OR
36941: IFTRUE 36981
36943: PUSH
36944: LD_VAR 0 8
36948: PUSH
36949: LD_INT 6
36951: ARRAY
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 7
36961: PUSH
36962: LD_INT 9
36964: PUSH
36965: LD_INT 10
36967: PUSH
36968: LD_INT 11
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: IN
36979: NOT
36980: OR
36981: IFFALSE 36987
// exit ;
36983: POP
36984: POP
36985: GO 37072
// end ;
36987: GO 36644
36989: POP
36990: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36991: LD_VAR 0 9
36995: PPUSH
36996: LD_VAR 0 3
37000: PPUSH
37001: LD_VAR 0 4
37005: PPUSH
37006: LD_INT 20
37008: PPUSH
37009: CALL 28891 0 4
37013: PUSH
37014: LD_INT 4
37016: ARRAY
37017: IFFALSE 37021
// exit ;
37019: GO 37072
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37021: LD_VAR 0 2
37025: PUSH
37026: LD_INT 29
37028: PUSH
37029: LD_INT 30
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: IN
37036: IFFALSE 37060
37038: PUSH
37039: LD_VAR 0 3
37043: PPUSH
37044: LD_VAR 0 4
37048: PPUSH
37049: LD_VAR 0 9
37053: PPUSH
37054: CALL_OW 440
37058: NOT
37059: AND
37060: IFFALSE 37064
// exit ;
37062: GO 37072
// result := true ;
37064: LD_ADDR_VAR 0 6
37068: PUSH
37069: LD_INT 1
37071: ST_TO_ADDR
// end ;
37072: LD_VAR 0 6
37076: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37077: LD_INT 0
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
37088: PPUSH
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
37093: PPUSH
37094: PPUSH
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
// result = [ ] ;
37137: LD_ADDR_VAR 0 7
37141: PUSH
37142: EMPTY
37143: ST_TO_ADDR
// temp_list = [ ] ;
37144: LD_ADDR_VAR 0 9
37148: PUSH
37149: EMPTY
37150: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37151: LD_VAR 0 4
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: LD_INT 4
37170: PUSH
37171: LD_INT 5
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: IN
37182: NOT
37183: IFTRUE 37226
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: IN
37201: IFFALSE 37225
37203: PUSH
37204: LD_VAR 0 5
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: IN
37223: NOT
37224: AND
37225: OR
37226: IFFALSE 37230
// exit ;
37228: GO 55629
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37230: LD_VAR 0 1
37234: PUSH
37235: LD_INT 6
37237: PUSH
37238: LD_INT 7
37240: PUSH
37241: LD_INT 8
37243: PUSH
37244: LD_INT 13
37246: PUSH
37247: LD_INT 12
37249: PUSH
37250: LD_INT 15
37252: PUSH
37253: LD_INT 11
37255: PUSH
37256: LD_INT 14
37258: PUSH
37259: LD_INT 10
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: IN
37273: IFFALSE 37283
// btype = b_lab ;
37275: LD_ADDR_VAR 0 1
37279: PUSH
37280: LD_INT 6
37282: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37283: LD_VAR 0 6
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: IN
37302: NOT
37303: IFTRUE 37371
37305: PUSH
37306: LD_VAR 0 1
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 1
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 3
37322: PUSH
37323: LD_INT 6
37325: PUSH
37326: LD_INT 36
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: LD_INT 5
37334: PUSH
37335: LD_INT 31
37337: PUSH
37338: LD_INT 32
37340: PUSH
37341: LD_INT 33
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: IN
37357: NOT
37358: IFFALSE 37370
37360: PUSH
37361: LD_VAR 0 6
37365: PUSH
37366: LD_INT 1
37368: EQUAL
37369: AND
37370: OR
37371: IFTRUE 37403
37373: PUSH
37374: LD_VAR 0 1
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 3
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: IN
37389: NOT
37390: IFFALSE 37402
37392: PUSH
37393: LD_VAR 0 6
37397: PUSH
37398: LD_INT 2
37400: EQUAL
37401: AND
37402: OR
37403: IFFALSE 37413
// mode = 0 ;
37405: LD_ADDR_VAR 0 6
37409: PUSH
37410: LD_INT 0
37412: ST_TO_ADDR
// case mode of 0 :
37413: LD_VAR 0 6
37417: PUSH
37418: LD_INT 0
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 48879
37426: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37427: LD_ADDR_VAR 0 11
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37620: LD_ADDR_VAR 0 12
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37816: LD_ADDR_VAR 0 13
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 3
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: LD_INT 3
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38015: LD_ADDR_VAR 0 14
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: LD_INT 3
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 3
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38211: LD_ADDR_VAR 0 15
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: NEG
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38404: LD_ADDR_VAR 0 16
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 3
38561: PUSH
38562: LD_INT 3
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38597: LD_ADDR_VAR 0 17
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38827: LD_ADDR_VAR 0 18
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39057: LD_ADDR_VAR 0 19
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39287: LD_ADDR_VAR 0 20
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39517: LD_ADDR_VAR 0 21
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39747: LD_ADDR_VAR 0 22
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39977: LD_ADDR_VAR 0 23
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40257: LD_ADDR_VAR 0 24
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40533: LD_ADDR_VAR 0 25
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 3
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 3
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 3
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40807: LD_ADDR_VAR 0 26
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 3
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41083: LD_ADDR_VAR 0 27
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41363: LD_ADDR_VAR 0 28
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 3
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 3
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41645: LD_ADDR_VAR 0 29
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 3
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: NEG
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41924: LD_ADDR_VAR 0 30
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 3
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42202: LD_ADDR_VAR 0 31
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42480: LD_ADDR_VAR 0 32
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42758: LD_ADDR_VAR 0 33
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 2
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43037: LD_ADDR_VAR 0 34
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 3
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43317: LD_ADDR_VAR 0 35
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43429: LD_ADDR_VAR 0 36
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43541: LD_ADDR_VAR 0 37
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43653: LD_ADDR_VAR 0 38
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43765: LD_ADDR_VAR 0 39
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43877: LD_ADDR_VAR 0 40
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43989: LD_ADDR_VAR 0 41
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 3
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: NEG
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 3
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: NEG
44299: PUSH
44300: LD_INT 3
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44339: LD_ADDR_VAR 0 42
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 3
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 3
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 3
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 3
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44689: LD_ADDR_VAR 0 43
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 3
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 3
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45037: LD_ADDR_VAR 0 44
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 3
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 3
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: NEG
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45387: LD_ADDR_VAR 0 45
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 3
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45737: LD_ADDR_VAR 0 46
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: NEG
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 3
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46085: LD_ADDR_VAR 0 47
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46236: LD_ADDR_VAR 0 48
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46383: LD_ADDR_VAR 0 49
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46527: LD_ADDR_VAR 0 50
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46671: LD_ADDR_VAR 0 51
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46818: LD_ADDR_VAR 0 52
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46969: LD_ADDR_VAR 0 53
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47199: LD_ADDR_VAR 0 54
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47429: LD_ADDR_VAR 0 55
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47659: LD_ADDR_VAR 0 56
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47889: LD_ADDR_VAR 0 57
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48119: LD_ADDR_VAR 0 58
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48349: LD_ADDR_VAR 0 59
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48437: LD_ADDR_VAR 0 60
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48525: LD_ADDR_VAR 0 61
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48613: LD_ADDR_VAR 0 62
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48701: LD_ADDR_VAR 0 63
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48789: LD_ADDR_VAR 0 64
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// end ; 1 :
48877: GO 54774
48879: LD_INT 1
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48887
48885: GO 51510
48887: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48888: LD_ADDR_VAR 0 11
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48932: LD_ADDR_VAR 0 12
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48973: LD_ADDR_VAR 0 13
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49013: LD_ADDR_VAR 0 14
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49054: LD_ADDR_VAR 0 15
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49098: LD_ADDR_VAR 0 16
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49144: LD_ADDR_VAR 0 17
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49188: LD_ADDR_VAR 0 18
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49229: LD_ADDR_VAR 0 19
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49269: LD_ADDR_VAR 0 20
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49310: LD_ADDR_VAR 0 21
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49354: LD_ADDR_VAR 0 22
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 3
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49400: LD_ADDR_VAR 0 23
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 4
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 3
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49444: LD_ADDR_VAR 0 24
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 4
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49485: LD_ADDR_VAR 0 25
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: LD_INT 4
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49525: LD_ADDR_VAR 0 26
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 4
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49566: LD_ADDR_VAR 0 27
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49610: LD_ADDR_VAR 0 28
49614: PUSH
49615: LD_INT 3
49617: NEG
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: LD_INT 4
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 4
49641: NEG
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49656: LD_ADDR_VAR 0 29
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 5
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 5
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 6
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 6
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 5
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49811: LD_ADDR_VAR 0 30
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 4
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 4
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 4
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 5
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 5
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 5
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 6
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 6
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49954: LD_ADDR_VAR 0 31
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 4
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 5
50021: PUSH
50022: LD_INT 4
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 5
50031: PUSH
50032: LD_INT 5
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: LD_INT 5
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 6
50051: PUSH
50052: LD_INT 5
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 6
50061: PUSH
50062: LD_INT 6
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: LD_INT 6
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50093: LD_ADDR_VAR 0 32
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 4
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 5
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 5
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 6
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 6
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 5
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50236: LD_ADDR_VAR 0 33
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 4
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 5
50322: NEG
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 5
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 5
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 6
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 6
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50391: LD_ADDR_VAR 0 34
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: LD_INT 4
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 4
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: LD_INT 4
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 4
50470: NEG
50471: PUSH
50472: LD_INT 5
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 5
50482: NEG
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 5
50494: NEG
50495: PUSH
50496: LD_INT 5
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 5
50506: NEG
50507: PUSH
50508: LD_INT 6
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 6
50518: NEG
50519: PUSH
50520: LD_INT 5
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 6
50530: NEG
50531: PUSH
50532: LD_INT 6
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50554: LD_ADDR_VAR 0 41
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50598: LD_ADDR_VAR 0 42
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50639: LD_ADDR_VAR 0 43
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50679: LD_ADDR_VAR 0 44
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50720: LD_ADDR_VAR 0 45
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50764: LD_ADDR_VAR 0 46
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50810: LD_ADDR_VAR 0 47
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 3
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50843: LD_ADDR_VAR 0 48
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50874: LD_ADDR_VAR 0 49
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50903: LD_ADDR_VAR 0 50
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50932: LD_ADDR_VAR 0 51
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50963: LD_ADDR_VAR 0 52
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50996: LD_ADDR_VAR 0 53
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51040: LD_ADDR_VAR 0 54
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51081: LD_ADDR_VAR 0 55
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51121: LD_ADDR_VAR 0 56
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51162: LD_ADDR_VAR 0 57
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51206: LD_ADDR_VAR 0 58
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51252: LD_ADDR_VAR 0 59
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51296: LD_ADDR_VAR 0 60
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51337: LD_ADDR_VAR 0 61
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51377: LD_ADDR_VAR 0 62
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51418: LD_ADDR_VAR 0 63
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51462: LD_ADDR_VAR 0 64
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: ST_TO_ADDR
// end ; 2 :
51508: GO 54774
51510: LD_INT 2
51512: DOUBLE
51513: EQUAL
51514: IFTRUE 51518
51516: GO 54773
51518: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51519: LD_ADDR_VAR 0 29
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 5
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 4
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 5
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: LD_INT 4
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 4
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 5
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 5
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 4
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 4
51916: NEG
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: LD_INT 4
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: NEG
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 5
51964: NEG
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 5
51976: NEG
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 5
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 5
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52057: LD_ADDR_VAR 0 30
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: LD_INT 4
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 5
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 4
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: LD_INT 4
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 4
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 3
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 5
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 5
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 3
52338: NEG
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 4
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 4
52409: NEG
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 4
52421: NEG
52422: PUSH
52423: LD_INT 4
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 4
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 4
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 5
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 4
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 4
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 5
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 5
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52604: LD_ADDR_VAR 0 31
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 4
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 5
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 5
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 5
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 4
52760: NEG
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 4
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: NEG
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 4
52818: NEG
52819: PUSH
52820: LD_INT 5
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 5
52866: NEG
52867: PUSH
52868: LD_INT 4
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 5
52878: NEG
52879: PUSH
52880: LD_INT 5
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 4
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 4
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 5
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 5
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 4
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 5
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53154: LD_ADDR_VAR 0 32
53158: PUSH
53159: LD_INT 4
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 5
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: NEG
53264: PUSH
53265: LD_INT 3
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: NEG
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 4
53323: NEG
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 4
53335: NEG
53336: PUSH
53337: LD_INT 4
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 4
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 5
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 4
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 5
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 5
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 4
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: LD_INT 4
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 5
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 5
53596: PUSH
53597: LD_INT 5
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 4
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: LD_INT 4
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 5
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53701: LD_ADDR_VAR 0 33
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 4
53720: NEG
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 4
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 5
53768: NEG
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 5
53780: NEG
53781: PUSH
53782: LD_INT 5
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: LD_INT 5
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 5
53804: NEG
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 4
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 4
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: LD_INT 4
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 5
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 5
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 4
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: LD_INT 4
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 4
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 4
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 5
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 3
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 3
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54239: LD_ADDR_VAR 0 34
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 4
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 5
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 4
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 3
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 5
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 4
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 4
54441: PUSH
54442: LD_INT 4
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 5
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 5
54471: PUSH
54472: LD_INT 5
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: PUSH
54482: LD_INT 5
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 4
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 4
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 3
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 4
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 4
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 4
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 5
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 5
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// end ; end ;
54771: GO 54774
54773: POP
// case btype of b_depot , b_warehouse :
54774: LD_VAR 0 1
54778: PUSH
54779: LD_INT 0
54781: DOUBLE
54782: EQUAL
54783: IFTRUE 54793
54785: LD_INT 1
54787: DOUBLE
54788: EQUAL
54789: IFTRUE 54793
54791: GO 54994
54793: POP
// case nation of nation_american :
54794: LD_VAR 0 5
54798: PUSH
54799: LD_INT 1
54801: DOUBLE
54802: EQUAL
54803: IFTRUE 54807
54805: GO 54863
54807: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54808: LD_ADDR_VAR 0 9
54812: PUSH
54813: LD_VAR 0 11
54817: PUSH
54818: LD_VAR 0 12
54822: PUSH
54823: LD_VAR 0 13
54827: PUSH
54828: LD_VAR 0 14
54832: PUSH
54833: LD_VAR 0 15
54837: PUSH
54838: LD_VAR 0 16
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: PUSH
54851: LD_VAR 0 4
54855: PUSH
54856: LD_INT 1
54858: PLUS
54859: ARRAY
54860: ST_TO_ADDR
54861: GO 54992
54863: LD_INT 2
54865: DOUBLE
54866: EQUAL
54867: IFTRUE 54871
54869: GO 54927
54871: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54872: LD_ADDR_VAR 0 9
54876: PUSH
54877: LD_VAR 0 17
54881: PUSH
54882: LD_VAR 0 18
54886: PUSH
54887: LD_VAR 0 19
54891: PUSH
54892: LD_VAR 0 20
54896: PUSH
54897: LD_VAR 0 21
54901: PUSH
54902: LD_VAR 0 22
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: PUSH
54915: LD_VAR 0 4
54919: PUSH
54920: LD_INT 1
54922: PLUS
54923: ARRAY
54924: ST_TO_ADDR
54925: GO 54992
54927: LD_INT 3
54929: DOUBLE
54930: EQUAL
54931: IFTRUE 54935
54933: GO 54991
54935: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54936: LD_ADDR_VAR 0 9
54940: PUSH
54941: LD_VAR 0 23
54945: PUSH
54946: LD_VAR 0 24
54950: PUSH
54951: LD_VAR 0 25
54955: PUSH
54956: LD_VAR 0 26
54960: PUSH
54961: LD_VAR 0 27
54965: PUSH
54966: LD_VAR 0 28
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: PUSH
54979: LD_VAR 0 4
54983: PUSH
54984: LD_INT 1
54986: PLUS
54987: ARRAY
54988: ST_TO_ADDR
54989: GO 54992
54991: POP
54992: GO 55547
54994: LD_INT 2
54996: DOUBLE
54997: EQUAL
54998: IFTRUE 55008
55000: LD_INT 3
55002: DOUBLE
55003: EQUAL
55004: IFTRUE 55008
55006: GO 55064
55008: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55009: LD_ADDR_VAR 0 9
55013: PUSH
55014: LD_VAR 0 29
55018: PUSH
55019: LD_VAR 0 30
55023: PUSH
55024: LD_VAR 0 31
55028: PUSH
55029: LD_VAR 0 32
55033: PUSH
55034: LD_VAR 0 33
55038: PUSH
55039: LD_VAR 0 34
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: PUSH
55052: LD_VAR 0 4
55056: PUSH
55057: LD_INT 1
55059: PLUS
55060: ARRAY
55061: ST_TO_ADDR
55062: GO 55547
55064: LD_INT 16
55066: DOUBLE
55067: EQUAL
55068: IFTRUE 55126
55070: LD_INT 17
55072: DOUBLE
55073: EQUAL
55074: IFTRUE 55126
55076: LD_INT 18
55078: DOUBLE
55079: EQUAL
55080: IFTRUE 55126
55082: LD_INT 19
55084: DOUBLE
55085: EQUAL
55086: IFTRUE 55126
55088: LD_INT 22
55090: DOUBLE
55091: EQUAL
55092: IFTRUE 55126
55094: LD_INT 20
55096: DOUBLE
55097: EQUAL
55098: IFTRUE 55126
55100: LD_INT 21
55102: DOUBLE
55103: EQUAL
55104: IFTRUE 55126
55106: LD_INT 23
55108: DOUBLE
55109: EQUAL
55110: IFTRUE 55126
55112: LD_INT 24
55114: DOUBLE
55115: EQUAL
55116: IFTRUE 55126
55118: LD_INT 25
55120: DOUBLE
55121: EQUAL
55122: IFTRUE 55126
55124: GO 55182
55126: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55127: LD_ADDR_VAR 0 9
55131: PUSH
55132: LD_VAR 0 35
55136: PUSH
55137: LD_VAR 0 36
55141: PUSH
55142: LD_VAR 0 37
55146: PUSH
55147: LD_VAR 0 38
55151: PUSH
55152: LD_VAR 0 39
55156: PUSH
55157: LD_VAR 0 40
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: PUSH
55170: LD_VAR 0 4
55174: PUSH
55175: LD_INT 1
55177: PLUS
55178: ARRAY
55179: ST_TO_ADDR
55180: GO 55547
55182: LD_INT 6
55184: DOUBLE
55185: EQUAL
55186: IFTRUE 55238
55188: LD_INT 7
55190: DOUBLE
55191: EQUAL
55192: IFTRUE 55238
55194: LD_INT 8
55196: DOUBLE
55197: EQUAL
55198: IFTRUE 55238
55200: LD_INT 13
55202: DOUBLE
55203: EQUAL
55204: IFTRUE 55238
55206: LD_INT 12
55208: DOUBLE
55209: EQUAL
55210: IFTRUE 55238
55212: LD_INT 15
55214: DOUBLE
55215: EQUAL
55216: IFTRUE 55238
55218: LD_INT 11
55220: DOUBLE
55221: EQUAL
55222: IFTRUE 55238
55224: LD_INT 14
55226: DOUBLE
55227: EQUAL
55228: IFTRUE 55238
55230: LD_INT 10
55232: DOUBLE
55233: EQUAL
55234: IFTRUE 55238
55236: GO 55294
55238: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55239: LD_ADDR_VAR 0 9
55243: PUSH
55244: LD_VAR 0 41
55248: PUSH
55249: LD_VAR 0 42
55253: PUSH
55254: LD_VAR 0 43
55258: PUSH
55259: LD_VAR 0 44
55263: PUSH
55264: LD_VAR 0 45
55268: PUSH
55269: LD_VAR 0 46
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: PUSH
55282: LD_VAR 0 4
55286: PUSH
55287: LD_INT 1
55289: PLUS
55290: ARRAY
55291: ST_TO_ADDR
55292: GO 55547
55294: LD_INT 36
55296: DOUBLE
55297: EQUAL
55298: IFTRUE 55302
55300: GO 55358
55302: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55303: LD_ADDR_VAR 0 9
55307: PUSH
55308: LD_VAR 0 47
55312: PUSH
55313: LD_VAR 0 48
55317: PUSH
55318: LD_VAR 0 49
55322: PUSH
55323: LD_VAR 0 50
55327: PUSH
55328: LD_VAR 0 51
55332: PUSH
55333: LD_VAR 0 52
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: PUSH
55346: LD_VAR 0 4
55350: PUSH
55351: LD_INT 1
55353: PLUS
55354: ARRAY
55355: ST_TO_ADDR
55356: GO 55547
55358: LD_INT 4
55360: DOUBLE
55361: EQUAL
55362: IFTRUE 55384
55364: LD_INT 5
55366: DOUBLE
55367: EQUAL
55368: IFTRUE 55384
55370: LD_INT 34
55372: DOUBLE
55373: EQUAL
55374: IFTRUE 55384
55376: LD_INT 37
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55384
55382: GO 55440
55384: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55385: LD_ADDR_VAR 0 9
55389: PUSH
55390: LD_VAR 0 53
55394: PUSH
55395: LD_VAR 0 54
55399: PUSH
55400: LD_VAR 0 55
55404: PUSH
55405: LD_VAR 0 56
55409: PUSH
55410: LD_VAR 0 57
55414: PUSH
55415: LD_VAR 0 58
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: PUSH
55428: LD_VAR 0 4
55432: PUSH
55433: LD_INT 1
55435: PLUS
55436: ARRAY
55437: ST_TO_ADDR
55438: GO 55547
55440: LD_INT 31
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55490
55446: LD_INT 32
55448: DOUBLE
55449: EQUAL
55450: IFTRUE 55490
55452: LD_INT 33
55454: DOUBLE
55455: EQUAL
55456: IFTRUE 55490
55458: LD_INT 27
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55490
55464: LD_INT 26
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55490
55470: LD_INT 28
55472: DOUBLE
55473: EQUAL
55474: IFTRUE 55490
55476: LD_INT 29
55478: DOUBLE
55479: EQUAL
55480: IFTRUE 55490
55482: LD_INT 30
55484: DOUBLE
55485: EQUAL
55486: IFTRUE 55490
55488: GO 55546
55490: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55491: LD_ADDR_VAR 0 9
55495: PUSH
55496: LD_VAR 0 59
55500: PUSH
55501: LD_VAR 0 60
55505: PUSH
55506: LD_VAR 0 61
55510: PUSH
55511: LD_VAR 0 62
55515: PUSH
55516: LD_VAR 0 63
55520: PUSH
55521: LD_VAR 0 64
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: PUSH
55534: LD_VAR 0 4
55538: PUSH
55539: LD_INT 1
55541: PLUS
55542: ARRAY
55543: ST_TO_ADDR
55544: GO 55547
55546: POP
// temp_list2 = [ ] ;
55547: LD_ADDR_VAR 0 10
55551: PUSH
55552: EMPTY
55553: ST_TO_ADDR
// for i in temp_list do
55554: LD_ADDR_VAR 0 8
55558: PUSH
55559: LD_VAR 0 9
55563: PUSH
55564: FOR_IN
55565: IFFALSE 55617
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55567: LD_ADDR_VAR 0 10
55571: PUSH
55572: LD_VAR 0 10
55576: PUSH
55577: LD_VAR 0 8
55581: PUSH
55582: LD_INT 1
55584: ARRAY
55585: PUSH
55586: LD_VAR 0 2
55590: PLUS
55591: PUSH
55592: LD_VAR 0 8
55596: PUSH
55597: LD_INT 2
55599: ARRAY
55600: PUSH
55601: LD_VAR 0 3
55605: PLUS
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: EMPTY
55612: LIST
55613: ADD
55614: ST_TO_ADDR
55615: GO 55564
55617: POP
55618: POP
// result = temp_list2 ;
55619: LD_ADDR_VAR 0 7
55623: PUSH
55624: LD_VAR 0 10
55628: ST_TO_ADDR
// end ;
55629: LD_VAR 0 7
55633: RET
// export function EnemyInRange ( unit , dist ) ; begin
55634: LD_INT 0
55636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55637: LD_ADDR_VAR 0 3
55641: PUSH
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 255
55651: PPUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 250
55661: PPUSH
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 251
55671: PPUSH
55672: LD_VAR 0 2
55676: PPUSH
55677: CALL 28891 0 4
55681: PUSH
55682: LD_INT 4
55684: ARRAY
55685: ST_TO_ADDR
// end ;
55686: LD_VAR 0 3
55690: RET
// export function PlayerSeeMe ( unit ) ; begin
55691: LD_INT 0
55693: PPUSH
// result := See ( your_side , unit ) ;
55694: LD_ADDR_VAR 0 2
55698: PUSH
55699: LD_OWVAR 2
55703: PPUSH
55704: LD_VAR 0 1
55708: PPUSH
55709: CALL_OW 292
55713: ST_TO_ADDR
// end ;
55714: LD_VAR 0 2
55718: RET
// export function ReverseDir ( unit ) ; begin
55719: LD_INT 0
55721: PPUSH
// if not unit then
55722: LD_VAR 0 1
55726: NOT
55727: IFFALSE 55731
// exit ;
55729: GO 55754
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55731: LD_ADDR_VAR 0 2
55735: PUSH
55736: LD_VAR 0 1
55740: PPUSH
55741: CALL_OW 254
55745: PUSH
55746: LD_INT 3
55748: PLUS
55749: PUSH
55750: LD_INT 6
55752: MOD
55753: ST_TO_ADDR
// end ;
55754: LD_VAR 0 2
55758: RET
// export function ReverseArray ( array ) ; var i ; begin
55759: LD_INT 0
55761: PPUSH
55762: PPUSH
// if not array then
55763: LD_VAR 0 1
55767: NOT
55768: IFFALSE 55772
// exit ;
55770: GO 55827
// result := [ ] ;
55772: LD_ADDR_VAR 0 2
55776: PUSH
55777: EMPTY
55778: ST_TO_ADDR
// for i := array downto 1 do
55779: LD_ADDR_VAR 0 3
55783: PUSH
55784: DOUBLE
55785: LD_VAR 0 1
55789: INC
55790: ST_TO_ADDR
55791: LD_INT 1
55793: PUSH
55794: FOR_DOWNTO
55795: IFFALSE 55825
// result := Join ( result , array [ i ] ) ;
55797: LD_ADDR_VAR 0 2
55801: PUSH
55802: LD_VAR 0 2
55806: PPUSH
55807: LD_VAR 0 1
55811: PUSH
55812: LD_VAR 0 3
55816: ARRAY
55817: PPUSH
55818: CALL 60669 0 2
55822: ST_TO_ADDR
55823: GO 55794
55825: POP
55826: POP
// end ;
55827: LD_VAR 0 2
55831: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
55836: PPUSH
55837: PPUSH
55838: PPUSH
55839: PPUSH
// if not unit or not hexes then
55840: LD_VAR 0 1
55844: NOT
55845: IFTRUE 55854
55847: PUSH
55848: LD_VAR 0 2
55852: NOT
55853: OR
55854: IFFALSE 55858
// exit ;
55856: GO 55981
// dist := 9999 ;
55858: LD_ADDR_VAR 0 5
55862: PUSH
55863: LD_INT 9999
55865: ST_TO_ADDR
// for i = 1 to hexes do
55866: LD_ADDR_VAR 0 4
55870: PUSH
55871: DOUBLE
55872: LD_INT 1
55874: DEC
55875: ST_TO_ADDR
55876: LD_VAR 0 2
55880: PUSH
55881: FOR_TO
55882: IFFALSE 55969
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55884: LD_ADDR_VAR 0 6
55888: PUSH
55889: LD_VAR 0 1
55893: PPUSH
55894: LD_VAR 0 2
55898: PUSH
55899: LD_VAR 0 4
55903: ARRAY
55904: PUSH
55905: LD_INT 1
55907: ARRAY
55908: PPUSH
55909: LD_VAR 0 2
55913: PUSH
55914: LD_VAR 0 4
55918: ARRAY
55919: PUSH
55920: LD_INT 2
55922: ARRAY
55923: PPUSH
55924: CALL_OW 297
55928: ST_TO_ADDR
// if tdist < dist then
55929: LD_VAR 0 6
55933: PUSH
55934: LD_VAR 0 5
55938: LESS
55939: IFFALSE 55967
// begin hex := hexes [ i ] ;
55941: LD_ADDR_VAR 0 8
55945: PUSH
55946: LD_VAR 0 2
55950: PUSH
55951: LD_VAR 0 4
55955: ARRAY
55956: ST_TO_ADDR
// dist := tdist ;
55957: LD_ADDR_VAR 0 5
55961: PUSH
55962: LD_VAR 0 6
55966: ST_TO_ADDR
// end ; end ;
55967: GO 55881
55969: POP
55970: POP
// result := hex ;
55971: LD_ADDR_VAR 0 3
55975: PUSH
55976: LD_VAR 0 8
55980: ST_TO_ADDR
// end ;
55981: LD_VAR 0 3
55985: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55986: LD_INT 0
55988: PPUSH
55989: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55990: LD_VAR 0 1
55994: NOT
55995: IFTRUE 56034
55997: PUSH
55998: LD_VAR 0 1
56002: PUSH
56003: LD_INT 21
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 23
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PPUSH
56027: CALL_OW 69
56031: IN
56032: NOT
56033: OR
56034: IFFALSE 56038
// exit ;
56036: GO 56085
// for i = 1 to 3 do
56038: LD_ADDR_VAR 0 3
56042: PUSH
56043: DOUBLE
56044: LD_INT 1
56046: DEC
56047: ST_TO_ADDR
56048: LD_INT 3
56050: PUSH
56051: FOR_TO
56052: IFFALSE 56083
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56054: LD_VAR 0 1
56058: PPUSH
56059: CALL_OW 250
56063: PPUSH
56064: LD_VAR 0 1
56068: PPUSH
56069: CALL_OW 251
56073: PPUSH
56074: LD_INT 1
56076: PPUSH
56077: CALL_OW 453
56081: GO 56051
56083: POP
56084: POP
// end ;
56085: LD_VAR 0 2
56089: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56090: LD_INT 0
56092: PPUSH
56093: PPUSH
56094: PPUSH
56095: PPUSH
56096: PPUSH
56097: PPUSH
// if not unit or not enemy_unit then
56098: LD_VAR 0 1
56102: NOT
56103: IFTRUE 56112
56105: PUSH
56106: LD_VAR 0 2
56110: NOT
56111: OR
56112: IFFALSE 56116
// exit ;
56114: GO 56587
// if GetLives ( i ) < 250 then
56116: LD_VAR 0 4
56120: PPUSH
56121: CALL_OW 256
56125: PUSH
56126: LD_INT 250
56128: LESS
56129: IFFALSE 56142
// begin ComAutodestruct ( i ) ;
56131: LD_VAR 0 4
56135: PPUSH
56136: CALL 55986 0 1
// exit ;
56140: GO 56587
// end ; x := GetX ( enemy_unit ) ;
56142: LD_ADDR_VAR 0 7
56146: PUSH
56147: LD_VAR 0 2
56151: PPUSH
56152: CALL_OW 250
56156: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56157: LD_ADDR_VAR 0 8
56161: PUSH
56162: LD_VAR 0 2
56166: PPUSH
56167: CALL_OW 251
56171: ST_TO_ADDR
// if not x or not y then
56172: LD_VAR 0 7
56176: NOT
56177: IFTRUE 56186
56179: PUSH
56180: LD_VAR 0 8
56184: NOT
56185: OR
56186: IFFALSE 56190
// exit ;
56188: GO 56587
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56190: LD_ADDR_VAR 0 6
56194: PUSH
56195: LD_VAR 0 7
56199: PPUSH
56200: LD_INT 0
56202: PPUSH
56203: LD_INT 4
56205: PPUSH
56206: CALL_OW 272
56210: PUSH
56211: LD_VAR 0 8
56215: PPUSH
56216: LD_INT 0
56218: PPUSH
56219: LD_INT 4
56221: PPUSH
56222: CALL_OW 273
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_VAR 0 7
56235: PPUSH
56236: LD_INT 1
56238: PPUSH
56239: LD_INT 4
56241: PPUSH
56242: CALL_OW 272
56246: PUSH
56247: LD_VAR 0 8
56251: PPUSH
56252: LD_INT 1
56254: PPUSH
56255: LD_INT 4
56257: PPUSH
56258: CALL_OW 273
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_VAR 0 7
56271: PPUSH
56272: LD_INT 2
56274: PPUSH
56275: LD_INT 4
56277: PPUSH
56278: CALL_OW 272
56282: PUSH
56283: LD_VAR 0 8
56287: PPUSH
56288: LD_INT 2
56290: PPUSH
56291: LD_INT 4
56293: PPUSH
56294: CALL_OW 273
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_VAR 0 7
56307: PPUSH
56308: LD_INT 3
56310: PPUSH
56311: LD_INT 4
56313: PPUSH
56314: CALL_OW 272
56318: PUSH
56319: LD_VAR 0 8
56323: PPUSH
56324: LD_INT 3
56326: PPUSH
56327: LD_INT 4
56329: PPUSH
56330: CALL_OW 273
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_VAR 0 7
56343: PPUSH
56344: LD_INT 4
56346: PPUSH
56347: LD_INT 4
56349: PPUSH
56350: CALL_OW 272
56354: PUSH
56355: LD_VAR 0 8
56359: PPUSH
56360: LD_INT 4
56362: PPUSH
56363: LD_INT 4
56365: PPUSH
56366: CALL_OW 273
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_VAR 0 7
56379: PPUSH
56380: LD_INT 5
56382: PPUSH
56383: LD_INT 4
56385: PPUSH
56386: CALL_OW 272
56390: PUSH
56391: LD_VAR 0 8
56395: PPUSH
56396: LD_INT 5
56398: PPUSH
56399: LD_INT 4
56401: PPUSH
56402: CALL_OW 273
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// for i = tmp downto 1 do
56419: LD_ADDR_VAR 0 4
56423: PUSH
56424: DOUBLE
56425: LD_VAR 0 6
56429: INC
56430: ST_TO_ADDR
56431: LD_INT 1
56433: PUSH
56434: FOR_DOWNTO
56435: IFFALSE 56538
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56437: LD_VAR 0 6
56441: PUSH
56442: LD_VAR 0 4
56446: ARRAY
56447: PUSH
56448: LD_INT 1
56450: ARRAY
56451: PPUSH
56452: LD_VAR 0 6
56456: PUSH
56457: LD_VAR 0 4
56461: ARRAY
56462: PUSH
56463: LD_INT 2
56465: ARRAY
56466: PPUSH
56467: CALL_OW 488
56471: NOT
56472: IFTRUE 56514
56474: PUSH
56475: LD_VAR 0 6
56479: PUSH
56480: LD_VAR 0 4
56484: ARRAY
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: PPUSH
56490: LD_VAR 0 6
56494: PUSH
56495: LD_VAR 0 4
56499: ARRAY
56500: PUSH
56501: LD_INT 2
56503: ARRAY
56504: PPUSH
56505: CALL_OW 428
56509: PUSH
56510: LD_INT 0
56512: NONEQUAL
56513: OR
56514: IFFALSE 56536
// tmp := Delete ( tmp , i ) ;
56516: LD_ADDR_VAR 0 6
56520: PUSH
56521: LD_VAR 0 6
56525: PPUSH
56526: LD_VAR 0 4
56530: PPUSH
56531: CALL_OW 3
56535: ST_TO_ADDR
56536: GO 56434
56538: POP
56539: POP
// j := GetClosestHex ( unit , tmp ) ;
56540: LD_ADDR_VAR 0 5
56544: PUSH
56545: LD_VAR 0 1
56549: PPUSH
56550: LD_VAR 0 6
56554: PPUSH
56555: CALL 55832 0 2
56559: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56560: LD_VAR 0 1
56564: PPUSH
56565: LD_VAR 0 5
56569: PUSH
56570: LD_INT 1
56572: ARRAY
56573: PPUSH
56574: LD_VAR 0 5
56578: PUSH
56579: LD_INT 2
56581: ARRAY
56582: PPUSH
56583: CALL_OW 111
// end ;
56587: LD_VAR 0 3
56591: RET
// export function PrepareApemanSoldier ( ) ; begin
56592: LD_INT 0
56594: PPUSH
// uc_nation := 0 ;
56595: LD_ADDR_OWVAR 21
56599: PUSH
56600: LD_INT 0
56602: ST_TO_ADDR
// hc_sex := sex_male ;
56603: LD_ADDR_OWVAR 27
56607: PUSH
56608: LD_INT 1
56610: ST_TO_ADDR
// hc_name :=  ;
56611: LD_ADDR_OWVAR 26
56615: PUSH
56616: LD_STRING 
56618: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56619: LD_ADDR_OWVAR 28
56623: PUSH
56624: LD_INT 15
56626: ST_TO_ADDR
// hc_gallery :=  ;
56627: LD_ADDR_OWVAR 33
56631: PUSH
56632: LD_STRING 
56634: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56635: LD_ADDR_OWVAR 31
56639: PUSH
56640: LD_INT 0
56642: PPUSH
56643: LD_INT 3
56645: PPUSH
56646: CALL_OW 12
56650: PUSH
56651: LD_INT 0
56653: PPUSH
56654: LD_INT 3
56656: PPUSH
56657: CALL_OW 12
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56674: LD_ADDR_OWVAR 29
56678: PUSH
56679: LD_INT 12
56681: PUSH
56682: LD_INT 12
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: ST_TO_ADDR
// end ;
56689: LD_VAR 0 1
56693: RET
// export function PrepareApemanEngineer ( ) ; begin
56694: LD_INT 0
56696: PPUSH
// uc_nation := 0 ;
56697: LD_ADDR_OWVAR 21
56701: PUSH
56702: LD_INT 0
56704: ST_TO_ADDR
// hc_sex := sex_male ;
56705: LD_ADDR_OWVAR 27
56709: PUSH
56710: LD_INT 1
56712: ST_TO_ADDR
// hc_name :=  ;
56713: LD_ADDR_OWVAR 26
56717: PUSH
56718: LD_STRING 
56720: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56721: LD_ADDR_OWVAR 28
56725: PUSH
56726: LD_INT 16
56728: ST_TO_ADDR
// hc_gallery :=  ;
56729: LD_ADDR_OWVAR 33
56733: PUSH
56734: LD_STRING 
56736: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56737: LD_ADDR_OWVAR 31
56741: PUSH
56742: LD_INT 0
56744: PPUSH
56745: LD_INT 3
56747: PPUSH
56748: CALL_OW 12
56752: PUSH
56753: LD_INT 0
56755: PPUSH
56756: LD_INT 3
56758: PPUSH
56759: CALL_OW 12
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56776: LD_ADDR_OWVAR 29
56780: PUSH
56781: LD_INT 12
56783: PUSH
56784: LD_INT 12
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// end ;
56791: LD_VAR 0 1
56795: RET
// export function PrepareApeman ( agressivity ) ; begin
56796: LD_INT 0
56798: PPUSH
// uc_side := 0 ;
56799: LD_ADDR_OWVAR 20
56803: PUSH
56804: LD_INT 0
56806: ST_TO_ADDR
// uc_nation := 0 ;
56807: LD_ADDR_OWVAR 21
56811: PUSH
56812: LD_INT 0
56814: ST_TO_ADDR
// hc_sex := sex_male ;
56815: LD_ADDR_OWVAR 27
56819: PUSH
56820: LD_INT 1
56822: ST_TO_ADDR
// hc_class := class_apeman ;
56823: LD_ADDR_OWVAR 28
56827: PUSH
56828: LD_INT 12
56830: ST_TO_ADDR
// hc_gallery :=  ;
56831: LD_ADDR_OWVAR 33
56835: PUSH
56836: LD_STRING 
56838: ST_TO_ADDR
// hc_name :=  ;
56839: LD_ADDR_OWVAR 26
56843: PUSH
56844: LD_STRING 
56846: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56847: LD_ADDR_OWVAR 29
56851: PUSH
56852: LD_INT 12
56854: PUSH
56855: LD_INT 12
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// if agressivity = 0 then
56862: LD_VAR 0 1
56866: PUSH
56867: LD_INT 0
56869: EQUAL
56870: IFFALSE 56882
// hc_agressivity := 0 else
56872: LD_ADDR_OWVAR 35
56876: PUSH
56877: LD_INT 0
56879: ST_TO_ADDR
56880: GO 56903
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56882: LD_ADDR_OWVAR 35
56886: PUSH
56887: LD_VAR 0 1
56891: NEG
56892: PPUSH
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 12
56902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56903: LD_ADDR_OWVAR 31
56907: PUSH
56908: LD_INT 0
56910: PPUSH
56911: LD_INT 3
56913: PPUSH
56914: CALL_OW 12
56918: PUSH
56919: LD_INT 0
56921: PPUSH
56922: LD_INT 3
56924: PPUSH
56925: CALL_OW 12
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// end ;
56942: LD_VAR 0 2
56946: RET
// export function PrepareTiger ( agressivity ) ; begin
56947: LD_INT 0
56949: PPUSH
// uc_side := 0 ;
56950: LD_ADDR_OWVAR 20
56954: PUSH
56955: LD_INT 0
56957: ST_TO_ADDR
// uc_nation := 0 ;
56958: LD_ADDR_OWVAR 21
56962: PUSH
56963: LD_INT 0
56965: ST_TO_ADDR
// InitHc ;
56966: CALL_OW 19
// hc_class := class_tiger ;
56970: LD_ADDR_OWVAR 28
56974: PUSH
56975: LD_INT 14
56977: ST_TO_ADDR
// hc_gallery :=  ;
56978: LD_ADDR_OWVAR 33
56982: PUSH
56983: LD_STRING 
56985: ST_TO_ADDR
// hc_name :=  ;
56986: LD_ADDR_OWVAR 26
56990: PUSH
56991: LD_STRING 
56993: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56994: LD_ADDR_OWVAR 35
56998: PUSH
56999: LD_VAR 0 1
57003: NEG
57004: PPUSH
57005: LD_VAR 0 1
57009: PPUSH
57010: CALL_OW 12
57014: ST_TO_ADDR
// end ;
57015: LD_VAR 0 2
57019: RET
// export function PrepareEnchidna ( ) ; begin
57020: LD_INT 0
57022: PPUSH
// uc_side := 0 ;
57023: LD_ADDR_OWVAR 20
57027: PUSH
57028: LD_INT 0
57030: ST_TO_ADDR
// uc_nation := 0 ;
57031: LD_ADDR_OWVAR 21
57035: PUSH
57036: LD_INT 0
57038: ST_TO_ADDR
// InitHc ;
57039: CALL_OW 19
// hc_class := class_baggie ;
57043: LD_ADDR_OWVAR 28
57047: PUSH
57048: LD_INT 13
57050: ST_TO_ADDR
// hc_gallery :=  ;
57051: LD_ADDR_OWVAR 33
57055: PUSH
57056: LD_STRING 
57058: ST_TO_ADDR
// hc_name :=  ;
57059: LD_ADDR_OWVAR 26
57063: PUSH
57064: LD_STRING 
57066: ST_TO_ADDR
// end ;
57067: LD_VAR 0 1
57071: RET
// export function PrepareFrog ( ) ; begin
57072: LD_INT 0
57074: PPUSH
// uc_side := 0 ;
57075: LD_ADDR_OWVAR 20
57079: PUSH
57080: LD_INT 0
57082: ST_TO_ADDR
// uc_nation := 0 ;
57083: LD_ADDR_OWVAR 21
57087: PUSH
57088: LD_INT 0
57090: ST_TO_ADDR
// InitHc ;
57091: CALL_OW 19
// hc_class := class_frog ;
57095: LD_ADDR_OWVAR 28
57099: PUSH
57100: LD_INT 19
57102: ST_TO_ADDR
// hc_gallery :=  ;
57103: LD_ADDR_OWVAR 33
57107: PUSH
57108: LD_STRING 
57110: ST_TO_ADDR
// hc_name :=  ;
57111: LD_ADDR_OWVAR 26
57115: PUSH
57116: LD_STRING 
57118: ST_TO_ADDR
// end ;
57119: LD_VAR 0 1
57123: RET
// export function PrepareFish ( ) ; begin
57124: LD_INT 0
57126: PPUSH
// uc_side := 0 ;
57127: LD_ADDR_OWVAR 20
57131: PUSH
57132: LD_INT 0
57134: ST_TO_ADDR
// uc_nation := 0 ;
57135: LD_ADDR_OWVAR 21
57139: PUSH
57140: LD_INT 0
57142: ST_TO_ADDR
// InitHc ;
57143: CALL_OW 19
// hc_class := class_fish ;
57147: LD_ADDR_OWVAR 28
57151: PUSH
57152: LD_INT 20
57154: ST_TO_ADDR
// hc_gallery :=  ;
57155: LD_ADDR_OWVAR 33
57159: PUSH
57160: LD_STRING 
57162: ST_TO_ADDR
// hc_name :=  ;
57163: LD_ADDR_OWVAR 26
57167: PUSH
57168: LD_STRING 
57170: ST_TO_ADDR
// end ;
57171: LD_VAR 0 1
57175: RET
// export function PrepareBird ( ) ; begin
57176: LD_INT 0
57178: PPUSH
// uc_side := 0 ;
57179: LD_ADDR_OWVAR 20
57183: PUSH
57184: LD_INT 0
57186: ST_TO_ADDR
// uc_nation := 0 ;
57187: LD_ADDR_OWVAR 21
57191: PUSH
57192: LD_INT 0
57194: ST_TO_ADDR
// InitHc ;
57195: CALL_OW 19
// hc_class := class_phororhacos ;
57199: LD_ADDR_OWVAR 28
57203: PUSH
57204: LD_INT 18
57206: ST_TO_ADDR
// hc_gallery :=  ;
57207: LD_ADDR_OWVAR 33
57211: PUSH
57212: LD_STRING 
57214: ST_TO_ADDR
// hc_name :=  ;
57215: LD_ADDR_OWVAR 26
57219: PUSH
57220: LD_STRING 
57222: ST_TO_ADDR
// end ;
57223: LD_VAR 0 1
57227: RET
// export function PrepareHorse ( ) ; begin
57228: LD_INT 0
57230: PPUSH
// uc_side := 0 ;
57231: LD_ADDR_OWVAR 20
57235: PUSH
57236: LD_INT 0
57238: ST_TO_ADDR
// uc_nation := 0 ;
57239: LD_ADDR_OWVAR 21
57243: PUSH
57244: LD_INT 0
57246: ST_TO_ADDR
// InitHc ;
57247: CALL_OW 19
// hc_class := class_horse ;
57251: LD_ADDR_OWVAR 28
57255: PUSH
57256: LD_INT 21
57258: ST_TO_ADDR
// hc_gallery :=  ;
57259: LD_ADDR_OWVAR 33
57263: PUSH
57264: LD_STRING 
57266: ST_TO_ADDR
// hc_name :=  ;
57267: LD_ADDR_OWVAR 26
57271: PUSH
57272: LD_STRING 
57274: ST_TO_ADDR
// end ;
57275: LD_VAR 0 1
57279: RET
// export function PrepareMastodont ( ) ; begin
57280: LD_INT 0
57282: PPUSH
// uc_side := 0 ;
57283: LD_ADDR_OWVAR 20
57287: PUSH
57288: LD_INT 0
57290: ST_TO_ADDR
// uc_nation := 0 ;
57291: LD_ADDR_OWVAR 21
57295: PUSH
57296: LD_INT 0
57298: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57299: LD_ADDR_OWVAR 37
57303: PUSH
57304: LD_INT 31
57306: ST_TO_ADDR
// vc_control := control_rider ;
57307: LD_ADDR_OWVAR 38
57311: PUSH
57312: LD_INT 4
57314: ST_TO_ADDR
// end ;
57315: LD_VAR 0 1
57319: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57320: LD_INT 0
57322: PPUSH
57323: PPUSH
57324: PPUSH
// uc_side = 0 ;
57325: LD_ADDR_OWVAR 20
57329: PUSH
57330: LD_INT 0
57332: ST_TO_ADDR
// uc_nation = 0 ;
57333: LD_ADDR_OWVAR 21
57337: PUSH
57338: LD_INT 0
57340: ST_TO_ADDR
// InitHc_All ( ) ;
57341: CALL_OW 584
// InitVc ;
57345: CALL_OW 20
// if mastodonts then
57349: LD_VAR 0 6
57353: IFFALSE 57420
// for i = 1 to mastodonts do
57355: LD_ADDR_VAR 0 11
57359: PUSH
57360: DOUBLE
57361: LD_INT 1
57363: DEC
57364: ST_TO_ADDR
57365: LD_VAR 0 6
57369: PUSH
57370: FOR_TO
57371: IFFALSE 57418
// begin vc_chassis := 31 ;
57373: LD_ADDR_OWVAR 37
57377: PUSH
57378: LD_INT 31
57380: ST_TO_ADDR
// vc_control := control_rider ;
57381: LD_ADDR_OWVAR 38
57385: PUSH
57386: LD_INT 4
57388: ST_TO_ADDR
// animal := CreateVehicle ;
57389: LD_ADDR_VAR 0 12
57393: PUSH
57394: CALL_OW 45
57398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57399: LD_VAR 0 12
57403: PPUSH
57404: LD_VAR 0 8
57408: PPUSH
57409: LD_INT 0
57411: PPUSH
57412: CALL 59562 0 3
// end ;
57416: GO 57370
57418: POP
57419: POP
// if horses then
57420: LD_VAR 0 5
57424: IFFALSE 57491
// for i = 1 to horses do
57426: LD_ADDR_VAR 0 11
57430: PUSH
57431: DOUBLE
57432: LD_INT 1
57434: DEC
57435: ST_TO_ADDR
57436: LD_VAR 0 5
57440: PUSH
57441: FOR_TO
57442: IFFALSE 57489
// begin hc_class := 21 ;
57444: LD_ADDR_OWVAR 28
57448: PUSH
57449: LD_INT 21
57451: ST_TO_ADDR
// hc_gallery :=  ;
57452: LD_ADDR_OWVAR 33
57456: PUSH
57457: LD_STRING 
57459: ST_TO_ADDR
// animal := CreateHuman ;
57460: LD_ADDR_VAR 0 12
57464: PUSH
57465: CALL_OW 44
57469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57470: LD_VAR 0 12
57474: PPUSH
57475: LD_VAR 0 8
57479: PPUSH
57480: LD_INT 0
57482: PPUSH
57483: CALL 59562 0 3
// end ;
57487: GO 57441
57489: POP
57490: POP
// if birds then
57491: LD_VAR 0 1
57495: IFFALSE 57562
// for i = 1 to birds do
57497: LD_ADDR_VAR 0 11
57501: PUSH
57502: DOUBLE
57503: LD_INT 1
57505: DEC
57506: ST_TO_ADDR
57507: LD_VAR 0 1
57511: PUSH
57512: FOR_TO
57513: IFFALSE 57560
// begin hc_class := 18 ;
57515: LD_ADDR_OWVAR 28
57519: PUSH
57520: LD_INT 18
57522: ST_TO_ADDR
// hc_gallery =  ;
57523: LD_ADDR_OWVAR 33
57527: PUSH
57528: LD_STRING 
57530: ST_TO_ADDR
// animal := CreateHuman ;
57531: LD_ADDR_VAR 0 12
57535: PUSH
57536: CALL_OW 44
57540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57541: LD_VAR 0 12
57545: PPUSH
57546: LD_VAR 0 8
57550: PPUSH
57551: LD_INT 0
57553: PPUSH
57554: CALL 59562 0 3
// end ;
57558: GO 57512
57560: POP
57561: POP
// if tigers then
57562: LD_VAR 0 2
57566: IFFALSE 57650
// for i = 1 to tigers do
57568: LD_ADDR_VAR 0 11
57572: PUSH
57573: DOUBLE
57574: LD_INT 1
57576: DEC
57577: ST_TO_ADDR
57578: LD_VAR 0 2
57582: PUSH
57583: FOR_TO
57584: IFFALSE 57648
// begin hc_class = class_tiger ;
57586: LD_ADDR_OWVAR 28
57590: PUSH
57591: LD_INT 14
57593: ST_TO_ADDR
// hc_gallery =  ;
57594: LD_ADDR_OWVAR 33
57598: PUSH
57599: LD_STRING 
57601: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57602: LD_ADDR_OWVAR 35
57606: PUSH
57607: LD_INT 7
57609: NEG
57610: PPUSH
57611: LD_INT 7
57613: PPUSH
57614: CALL_OW 12
57618: ST_TO_ADDR
// animal := CreateHuman ;
57619: LD_ADDR_VAR 0 12
57623: PUSH
57624: CALL_OW 44
57628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57629: LD_VAR 0 12
57633: PPUSH
57634: LD_VAR 0 8
57638: PPUSH
57639: LD_INT 0
57641: PPUSH
57642: CALL 59562 0 3
// end ;
57646: GO 57583
57648: POP
57649: POP
// if apemans then
57650: LD_VAR 0 3
57654: IFFALSE 57777
// for i = 1 to apemans do
57656: LD_ADDR_VAR 0 11
57660: PUSH
57661: DOUBLE
57662: LD_INT 1
57664: DEC
57665: ST_TO_ADDR
57666: LD_VAR 0 3
57670: PUSH
57671: FOR_TO
57672: IFFALSE 57775
// begin hc_class = class_apeman ;
57674: LD_ADDR_OWVAR 28
57678: PUSH
57679: LD_INT 12
57681: ST_TO_ADDR
// hc_gallery =  ;
57682: LD_ADDR_OWVAR 33
57686: PUSH
57687: LD_STRING 
57689: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57690: LD_ADDR_OWVAR 35
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PPUSH
57699: LD_INT 2
57701: PPUSH
57702: CALL_OW 12
57706: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57707: LD_ADDR_OWVAR 31
57711: PUSH
57712: LD_INT 1
57714: PPUSH
57715: LD_INT 3
57717: PPUSH
57718: CALL_OW 12
57722: PUSH
57723: LD_INT 1
57725: PPUSH
57726: LD_INT 3
57728: PPUSH
57729: CALL_OW 12
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// animal := CreateHuman ;
57746: LD_ADDR_VAR 0 12
57750: PUSH
57751: CALL_OW 44
57755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57756: LD_VAR 0 12
57760: PPUSH
57761: LD_VAR 0 8
57765: PPUSH
57766: LD_INT 0
57768: PPUSH
57769: CALL 59562 0 3
// end ;
57773: GO 57671
57775: POP
57776: POP
// if enchidnas then
57777: LD_VAR 0 4
57781: IFFALSE 57848
// for i = 1 to enchidnas do
57783: LD_ADDR_VAR 0 11
57787: PUSH
57788: DOUBLE
57789: LD_INT 1
57791: DEC
57792: ST_TO_ADDR
57793: LD_VAR 0 4
57797: PUSH
57798: FOR_TO
57799: IFFALSE 57846
// begin hc_class = 13 ;
57801: LD_ADDR_OWVAR 28
57805: PUSH
57806: LD_INT 13
57808: ST_TO_ADDR
// hc_gallery =  ;
57809: LD_ADDR_OWVAR 33
57813: PUSH
57814: LD_STRING 
57816: ST_TO_ADDR
// animal := CreateHuman ;
57817: LD_ADDR_VAR 0 12
57821: PUSH
57822: CALL_OW 44
57826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57827: LD_VAR 0 12
57831: PPUSH
57832: LD_VAR 0 8
57836: PPUSH
57837: LD_INT 0
57839: PPUSH
57840: CALL 59562 0 3
// end ;
57844: GO 57798
57846: POP
57847: POP
// if fishes then
57848: LD_VAR 0 7
57852: IFFALSE 57919
// for i = 1 to fishes do
57854: LD_ADDR_VAR 0 11
57858: PUSH
57859: DOUBLE
57860: LD_INT 1
57862: DEC
57863: ST_TO_ADDR
57864: LD_VAR 0 7
57868: PUSH
57869: FOR_TO
57870: IFFALSE 57917
// begin hc_class = 20 ;
57872: LD_ADDR_OWVAR 28
57876: PUSH
57877: LD_INT 20
57879: ST_TO_ADDR
// hc_gallery =  ;
57880: LD_ADDR_OWVAR 33
57884: PUSH
57885: LD_STRING 
57887: ST_TO_ADDR
// animal := CreateHuman ;
57888: LD_ADDR_VAR 0 12
57892: PUSH
57893: CALL_OW 44
57897: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57898: LD_VAR 0 12
57902: PPUSH
57903: LD_VAR 0 9
57907: PPUSH
57908: LD_INT 0
57910: PPUSH
57911: CALL 59562 0 3
// end ;
57915: GO 57869
57917: POP
57918: POP
// end ;
57919: LD_VAR 0 10
57923: RET
// export function WantHeal ( sci , unit ) ; begin
57924: LD_INT 0
57926: PPUSH
// if GetTaskList ( sci ) > 0 then
57927: LD_VAR 0 1
57931: PPUSH
57932: CALL_OW 437
57936: PUSH
57937: LD_INT 0
57939: GREATER
57940: IFFALSE 58012
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57942: LD_VAR 0 1
57946: PPUSH
57947: CALL_OW 437
57951: PUSH
57952: LD_INT 1
57954: ARRAY
57955: PUSH
57956: LD_INT 1
57958: ARRAY
57959: PUSH
57960: LD_STRING l
57962: EQUAL
57963: IFFALSE 57990
57965: PUSH
57966: LD_VAR 0 1
57970: PPUSH
57971: CALL_OW 437
57975: PUSH
57976: LD_INT 1
57978: ARRAY
57979: PUSH
57980: LD_INT 4
57982: ARRAY
57983: PUSH
57984: LD_VAR 0 2
57988: EQUAL
57989: AND
57990: IFFALSE 58002
// result := true else
57992: LD_ADDR_VAR 0 3
57996: PUSH
57997: LD_INT 1
57999: ST_TO_ADDR
58000: GO 58010
// result := false ;
58002: LD_ADDR_VAR 0 3
58006: PUSH
58007: LD_INT 0
58009: ST_TO_ADDR
// end else
58010: GO 58020
// result := false ;
58012: LD_ADDR_VAR 0 3
58016: PUSH
58017: LD_INT 0
58019: ST_TO_ADDR
// end ;
58020: LD_VAR 0 3
58024: RET
// export function HealTarget ( sci ) ; begin
58025: LD_INT 0
58027: PPUSH
// if not sci then
58028: LD_VAR 0 1
58032: NOT
58033: IFFALSE 58037
// exit ;
58035: GO 58102
// result := 0 ;
58037: LD_ADDR_VAR 0 2
58041: PUSH
58042: LD_INT 0
58044: ST_TO_ADDR
// if GetTaskList ( sci ) then
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL_OW 437
58054: IFFALSE 58102
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58056: LD_VAR 0 1
58060: PPUSH
58061: CALL_OW 437
58065: PUSH
58066: LD_INT 1
58068: ARRAY
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PUSH
58074: LD_STRING l
58076: EQUAL
58077: IFFALSE 58102
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58079: LD_ADDR_VAR 0 2
58083: PUSH
58084: LD_VAR 0 1
58088: PPUSH
58089: CALL_OW 437
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PUSH
58098: LD_INT 4
58100: ARRAY
58101: ST_TO_ADDR
// end ;
58102: LD_VAR 0 2
58106: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58107: LD_INT 0
58109: PPUSH
58110: PPUSH
58111: PPUSH
58112: PPUSH
// if not base_units then
58113: LD_VAR 0 1
58117: NOT
58118: IFFALSE 58122
// exit ;
58120: GO 58209
// result := false ;
58122: LD_ADDR_VAR 0 2
58126: PUSH
58127: LD_INT 0
58129: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58130: LD_ADDR_VAR 0 5
58134: PUSH
58135: LD_VAR 0 1
58139: PPUSH
58140: LD_INT 21
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PPUSH
58150: CALL_OW 72
58154: ST_TO_ADDR
// if not tmp then
58155: LD_VAR 0 5
58159: NOT
58160: IFFALSE 58164
// exit ;
58162: GO 58209
// for i in tmp do
58164: LD_ADDR_VAR 0 3
58168: PUSH
58169: LD_VAR 0 5
58173: PUSH
58174: FOR_IN
58175: IFFALSE 58207
// begin result := EnemyInRange ( i , 22 ) ;
58177: LD_ADDR_VAR 0 2
58181: PUSH
58182: LD_VAR 0 3
58186: PPUSH
58187: LD_INT 22
58189: PPUSH
58190: CALL 55634 0 2
58194: ST_TO_ADDR
// if result then
58195: LD_VAR 0 2
58199: IFFALSE 58205
// exit ;
58201: POP
58202: POP
58203: GO 58209
// end ;
58205: GO 58174
58207: POP
58208: POP
// end ;
58209: LD_VAR 0 2
58213: RET
// export function FilterByTag ( units , tag ) ; begin
58214: LD_INT 0
58216: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58217: LD_ADDR_VAR 0 3
58221: PUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: LD_INT 120
58229: PUSH
58230: LD_VAR 0 2
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PPUSH
58239: CALL_OW 72
58243: ST_TO_ADDR
// end ;
58244: LD_VAR 0 3
58248: RET
// export function IsDriver ( un ) ; begin
58249: LD_INT 0
58251: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58252: LD_ADDR_VAR 0 2
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_INT 55
58264: PUSH
58265: EMPTY
58266: LIST
58267: PPUSH
58268: CALL_OW 69
58272: IN
58273: ST_TO_ADDR
// end ;
58274: LD_VAR 0 2
58278: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58279: LD_INT 0
58281: PPUSH
58282: PPUSH
// list := [ ] ;
58283: LD_ADDR_VAR 0 5
58287: PUSH
58288: EMPTY
58289: ST_TO_ADDR
// case d of 0 :
58290: LD_VAR 0 3
58294: PUSH
58295: LD_INT 0
58297: DOUBLE
58298: EQUAL
58299: IFTRUE 58303
58301: GO 58436
58303: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58304: LD_ADDR_VAR 0 5
58308: PUSH
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 4
58316: MINUS
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: LD_INT 4
58325: MINUS
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PUSH
58335: LD_VAR 0 1
58339: PUSH
58340: LD_INT 3
58342: MINUS
58343: PUSH
58344: LD_VAR 0 2
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: LD_INT 4
58364: PLUS
58365: PUSH
58366: LD_VAR 0 2
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: PUSH
58379: LD_VAR 0 1
58383: PUSH
58384: LD_INT 3
58386: PLUS
58387: PUSH
58388: LD_VAR 0 2
58392: PUSH
58393: LD_INT 3
58395: PLUS
58396: PUSH
58397: LD_INT 5
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: PUSH
58405: LD_VAR 0 1
58409: PUSH
58410: LD_VAR 0 2
58414: PUSH
58415: LD_INT 4
58417: PLUS
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// end ; 1 :
58434: GO 59134
58436: LD_INT 1
58438: DOUBLE
58439: EQUAL
58440: IFTRUE 58444
58442: GO 58577
58444: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58445: LD_ADDR_VAR 0 5
58449: PUSH
58450: LD_VAR 0 1
58454: PUSH
58455: LD_VAR 0 2
58459: PUSH
58460: LD_INT 4
58462: MINUS
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: PUSH
58472: LD_VAR 0 1
58476: PUSH
58477: LD_INT 3
58479: MINUS
58480: PUSH
58481: LD_VAR 0 2
58485: PUSH
58486: LD_INT 3
58488: MINUS
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_INT 4
58505: MINUS
58506: PUSH
58507: LD_VAR 0 2
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 3
58532: PLUS
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_INT 4
58549: PLUS
58550: PUSH
58551: LD_VAR 0 2
58555: PUSH
58556: LD_INT 4
58558: PLUS
58559: PUSH
58560: LD_INT 5
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: ST_TO_ADDR
// end ; 2 :
58575: GO 59134
58577: LD_INT 2
58579: DOUBLE
58580: EQUAL
58581: IFTRUE 58585
58583: GO 58714
58585: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58586: LD_ADDR_VAR 0 5
58590: PUSH
58591: LD_VAR 0 1
58595: PUSH
58596: LD_VAR 0 2
58600: PUSH
58601: LD_INT 3
58603: MINUS
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: PUSH
58613: LD_VAR 0 1
58617: PUSH
58618: LD_INT 4
58620: PLUS
58621: PUSH
58622: LD_VAR 0 2
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: PUSH
58635: LD_VAR 0 1
58639: PUSH
58640: LD_VAR 0 2
58644: PUSH
58645: LD_INT 4
58647: PLUS
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: LD_VAR 0 1
58661: PUSH
58662: LD_INT 3
58664: MINUS
58665: PUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: PUSH
58679: LD_VAR 0 1
58683: PUSH
58684: LD_INT 4
58686: MINUS
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 4
58695: MINUS
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// end ; 3 :
58712: GO 59134
58714: LD_INT 3
58716: DOUBLE
58717: EQUAL
58718: IFTRUE 58722
58720: GO 58855
58722: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58723: LD_ADDR_VAR 0 5
58727: PUSH
58728: LD_VAR 0 1
58732: PUSH
58733: LD_INT 3
58735: PLUS
58736: PUSH
58737: LD_VAR 0 2
58741: PUSH
58742: LD_INT 4
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: PUSH
58750: LD_VAR 0 1
58754: PUSH
58755: LD_INT 4
58757: PLUS
58758: PUSH
58759: LD_VAR 0 2
58763: PUSH
58764: LD_INT 4
58766: PLUS
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: PUSH
58776: LD_VAR 0 1
58780: PUSH
58781: LD_INT 4
58783: MINUS
58784: PUSH
58785: LD_VAR 0 2
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: PUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 4
58810: MINUS
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: PUSH
58820: LD_VAR 0 1
58824: PUSH
58825: LD_INT 3
58827: MINUS
58828: PUSH
58829: LD_VAR 0 2
58833: PUSH
58834: LD_INT 3
58836: MINUS
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// end ; 4 :
58853: GO 59134
58855: LD_INT 4
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58863
58861: GO 58996
58863: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58864: LD_ADDR_VAR 0 5
58868: PUSH
58869: LD_VAR 0 1
58873: PUSH
58874: LD_VAR 0 2
58878: PUSH
58879: LD_INT 4
58881: PLUS
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: PUSH
58891: LD_VAR 0 1
58895: PUSH
58896: LD_INT 3
58898: PLUS
58899: PUSH
58900: LD_VAR 0 2
58904: PUSH
58905: LD_INT 3
58907: PLUS
58908: PUSH
58909: LD_INT 5
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: PUSH
58917: LD_VAR 0 1
58921: PUSH
58922: LD_INT 4
58924: PLUS
58925: PUSH
58926: LD_VAR 0 2
58930: PUSH
58931: LD_INT 4
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: PUSH
58939: LD_VAR 0 1
58943: PUSH
58944: LD_VAR 0 2
58948: PUSH
58949: LD_INT 3
58951: MINUS
58952: PUSH
58953: LD_INT 3
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: PUSH
58961: LD_VAR 0 1
58965: PUSH
58966: LD_INT 4
58968: MINUS
58969: PUSH
58970: LD_VAR 0 2
58974: PUSH
58975: LD_INT 4
58977: MINUS
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: ST_TO_ADDR
// end ; 5 :
58994: GO 59134
58996: LD_INT 5
58998: DOUBLE
58999: EQUAL
59000: IFTRUE 59004
59002: GO 59133
59004: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59005: LD_ADDR_VAR 0 5
59009: PUSH
59010: LD_VAR 0 1
59014: PUSH
59015: LD_INT 4
59017: MINUS
59018: PUSH
59019: LD_VAR 0 2
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: PUSH
59032: LD_VAR 0 1
59036: PUSH
59037: LD_VAR 0 2
59041: PUSH
59042: LD_INT 4
59044: MINUS
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: PUSH
59054: LD_VAR 0 1
59058: PUSH
59059: LD_INT 4
59061: PLUS
59062: PUSH
59063: LD_VAR 0 2
59067: PUSH
59068: LD_INT 4
59070: PLUS
59071: PUSH
59072: LD_INT 5
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: LIST
59079: PUSH
59080: LD_VAR 0 1
59084: PUSH
59085: LD_INT 3
59087: PLUS
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: LD_INT 3
59114: PLUS
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// end ; end ;
59131: GO 59134
59133: POP
// result := list ;
59134: LD_ADDR_VAR 0 4
59138: PUSH
59139: LD_VAR 0 5
59143: ST_TO_ADDR
// end ;
59144: LD_VAR 0 4
59148: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59149: LD_INT 0
59151: PPUSH
59152: PPUSH
59153: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59154: LD_VAR 0 1
59158: NOT
59159: IFTRUE 59187
59161: PUSH
59162: LD_VAR 0 2
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: IN
59185: NOT
59186: OR
59187: IFFALSE 59191
// exit ;
59189: GO 59274
// tmp := [ ] ;
59191: LD_ADDR_VAR 0 5
59195: PUSH
59196: EMPTY
59197: ST_TO_ADDR
// for i in units do
59198: LD_ADDR_VAR 0 4
59202: PUSH
59203: LD_VAR 0 1
59207: PUSH
59208: FOR_IN
59209: IFFALSE 59243
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59211: LD_ADDR_VAR 0 5
59215: PUSH
59216: LD_VAR 0 5
59220: PPUSH
59221: LD_VAR 0 4
59225: PPUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: CALL_OW 259
59235: PPUSH
59236: CALL 60669 0 2
59240: ST_TO_ADDR
59241: GO 59208
59243: POP
59244: POP
// if not tmp then
59245: LD_VAR 0 5
59249: NOT
59250: IFFALSE 59254
// exit ;
59252: GO 59274
// result := SortListByListDesc ( units , tmp ) ;
59254: LD_ADDR_VAR 0 3
59258: PUSH
59259: LD_VAR 0 1
59263: PPUSH
59264: LD_VAR 0 5
59268: PPUSH
59269: CALL_OW 77
59273: ST_TO_ADDR
// end ;
59274: LD_VAR 0 3
59278: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59279: LD_INT 0
59281: PPUSH
59282: PPUSH
59283: PPUSH
// result := false ;
59284: LD_ADDR_VAR 0 3
59288: PUSH
59289: LD_INT 0
59291: ST_TO_ADDR
// if not building then
59292: LD_VAR 0 2
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59445
// x := GetX ( building ) ;
59301: LD_ADDR_VAR 0 4
59305: PUSH
59306: LD_VAR 0 2
59310: PPUSH
59311: CALL_OW 250
59315: ST_TO_ADDR
// y := GetY ( building ) ;
59316: LD_ADDR_VAR 0 5
59320: PUSH
59321: LD_VAR 0 2
59325: PPUSH
59326: CALL_OW 251
59330: ST_TO_ADDR
// if not x or not y then
59331: LD_VAR 0 4
59335: NOT
59336: IFTRUE 59345
59338: PUSH
59339: LD_VAR 0 5
59343: NOT
59344: OR
59345: IFFALSE 59349
// exit ;
59347: GO 59445
// if GetTaskList ( unit ) then
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 437
59358: IFFALSE 59445
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59360: LD_STRING e
59362: PUSH
59363: LD_VAR 0 1
59367: PPUSH
59368: CALL_OW 437
59372: PUSH
59373: LD_INT 1
59375: ARRAY
59376: PUSH
59377: LD_INT 1
59379: ARRAY
59380: EQUAL
59381: IFFALSE 59408
59383: PUSH
59384: LD_VAR 0 4
59388: PUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: CALL_OW 437
59398: PUSH
59399: LD_INT 1
59401: ARRAY
59402: PUSH
59403: LD_INT 2
59405: ARRAY
59406: EQUAL
59407: AND
59408: IFFALSE 59435
59410: PUSH
59411: LD_VAR 0 5
59415: PUSH
59416: LD_VAR 0 1
59420: PPUSH
59421: CALL_OW 437
59425: PUSH
59426: LD_INT 1
59428: ARRAY
59429: PUSH
59430: LD_INT 3
59432: ARRAY
59433: EQUAL
59434: AND
59435: IFFALSE 59445
// result := true end ;
59437: LD_ADDR_VAR 0 3
59441: PUSH
59442: LD_INT 1
59444: ST_TO_ADDR
// end ;
59445: LD_VAR 0 3
59449: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59450: LD_INT 0
59452: PPUSH
// result := false ;
59453: LD_ADDR_VAR 0 4
59457: PUSH
59458: LD_INT 0
59460: ST_TO_ADDR
// if GetTaskList ( unit ) then
59461: LD_VAR 0 1
59465: PPUSH
59466: CALL_OW 437
59470: IFFALSE 59557
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59472: LD_STRING M
59474: PUSH
59475: LD_VAR 0 1
59479: PPUSH
59480: CALL_OW 437
59484: PUSH
59485: LD_INT 1
59487: ARRAY
59488: PUSH
59489: LD_INT 1
59491: ARRAY
59492: EQUAL
59493: IFFALSE 59520
59495: PUSH
59496: LD_VAR 0 2
59500: PUSH
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL_OW 437
59510: PUSH
59511: LD_INT 1
59513: ARRAY
59514: PUSH
59515: LD_INT 2
59517: ARRAY
59518: EQUAL
59519: AND
59520: IFFALSE 59547
59522: PUSH
59523: LD_VAR 0 3
59527: PUSH
59528: LD_VAR 0 1
59532: PPUSH
59533: CALL_OW 437
59537: PUSH
59538: LD_INT 1
59540: ARRAY
59541: PUSH
59542: LD_INT 3
59544: ARRAY
59545: EQUAL
59546: AND
59547: IFFALSE 59557
// result := true ;
59549: LD_ADDR_VAR 0 4
59553: PUSH
59554: LD_INT 1
59556: ST_TO_ADDR
// end ; end ;
59557: LD_VAR 0 4
59561: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59562: LD_INT 0
59564: PPUSH
59565: PPUSH
59566: PPUSH
59567: PPUSH
// if not unit or not area then
59568: LD_VAR 0 1
59572: NOT
59573: IFTRUE 59582
59575: PUSH
59576: LD_VAR 0 2
59580: NOT
59581: OR
59582: IFFALSE 59586
// exit ;
59584: GO 59762
// tmp := AreaToList ( area , i ) ;
59586: LD_ADDR_VAR 0 6
59590: PUSH
59591: LD_VAR 0 2
59595: PPUSH
59596: LD_VAR 0 5
59600: PPUSH
59601: CALL_OW 517
59605: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: DOUBLE
59612: LD_INT 1
59614: DEC
59615: ST_TO_ADDR
59616: LD_VAR 0 6
59620: PUSH
59621: LD_INT 1
59623: ARRAY
59624: PUSH
59625: FOR_TO
59626: IFFALSE 59760
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59628: LD_ADDR_VAR 0 7
59632: PUSH
59633: LD_VAR 0 6
59637: PUSH
59638: LD_INT 1
59640: ARRAY
59641: PUSH
59642: LD_VAR 0 5
59646: ARRAY
59647: PUSH
59648: LD_VAR 0 6
59652: PUSH
59653: LD_INT 2
59655: ARRAY
59656: PUSH
59657: LD_VAR 0 5
59661: ARRAY
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59667: LD_INT 92
59669: PUSH
59670: LD_VAR 0 7
59674: PUSH
59675: LD_INT 1
59677: ARRAY
59678: PUSH
59679: LD_VAR 0 7
59683: PUSH
59684: LD_INT 2
59686: ARRAY
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: PPUSH
59697: CALL_OW 69
59701: PUSH
59702: LD_INT 0
59704: EQUAL
59705: IFFALSE 59758
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59707: LD_VAR 0 1
59711: PPUSH
59712: LD_VAR 0 7
59716: PUSH
59717: LD_INT 1
59719: ARRAY
59720: PPUSH
59721: LD_VAR 0 7
59725: PUSH
59726: LD_INT 2
59728: ARRAY
59729: PPUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 48
// result := IsPlaced ( unit ) ;
59739: LD_ADDR_VAR 0 4
59743: PUSH
59744: LD_VAR 0 1
59748: PPUSH
59749: CALL_OW 305
59753: ST_TO_ADDR
// exit ;
59754: POP
59755: POP
59756: GO 59762
// end ; end ;
59758: GO 59625
59760: POP
59761: POP
// end ;
59762: LD_VAR 0 4
59766: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59767: LD_INT 0
59769: PPUSH
59770: PPUSH
59771: PPUSH
// if not side or side > 8 then
59772: LD_VAR 0 1
59776: NOT
59777: IFTRUE 59789
59779: PUSH
59780: LD_VAR 0 1
59784: PUSH
59785: LD_INT 8
59787: GREATER
59788: OR
59789: IFFALSE 59793
// exit ;
59791: GO 59980
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59793: LD_ADDR_VAR 0 4
59797: PUSH
59798: LD_INT 22
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 21
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PPUSH
59824: CALL_OW 69
59828: ST_TO_ADDR
// if not tmp then
59829: LD_VAR 0 4
59833: NOT
59834: IFFALSE 59838
// exit ;
59836: GO 59980
// enable_addtolog := true ;
59838: LD_ADDR_OWVAR 81
59842: PUSH
59843: LD_INT 1
59845: ST_TO_ADDR
// AddToLog ( [ ) ;
59846: LD_STRING [
59848: PPUSH
59849: CALL_OW 561
// for i in tmp do
59853: LD_ADDR_VAR 0 3
59857: PUSH
59858: LD_VAR 0 4
59862: PUSH
59863: FOR_IN
59864: IFFALSE 59971
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59866: LD_STRING [
59868: PUSH
59869: LD_VAR 0 3
59873: PPUSH
59874: CALL_OW 266
59878: STR
59879: PUSH
59880: LD_STRING , 
59882: STR
59883: PUSH
59884: LD_VAR 0 3
59888: PPUSH
59889: CALL_OW 250
59893: STR
59894: PUSH
59895: LD_STRING , 
59897: STR
59898: PUSH
59899: LD_VAR 0 3
59903: PPUSH
59904: CALL_OW 251
59908: STR
59909: PUSH
59910: LD_STRING , 
59912: STR
59913: PUSH
59914: LD_VAR 0 3
59918: PPUSH
59919: CALL_OW 254
59923: STR
59924: PUSH
59925: LD_STRING , 
59927: STR
59928: PUSH
59929: LD_VAR 0 3
59933: PPUSH
59934: LD_INT 1
59936: PPUSH
59937: CALL_OW 268
59941: STR
59942: PUSH
59943: LD_STRING , 
59945: STR
59946: PUSH
59947: LD_VAR 0 3
59951: PPUSH
59952: LD_INT 2
59954: PPUSH
59955: CALL_OW 268
59959: STR
59960: PUSH
59961: LD_STRING ],
59963: STR
59964: PPUSH
59965: CALL_OW 561
// end ;
59969: GO 59863
59971: POP
59972: POP
// AddToLog ( ]; ) ;
59973: LD_STRING ];
59975: PPUSH
59976: CALL_OW 561
// end ;
59980: LD_VAR 0 2
59984: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59985: LD_INT 0
59987: PPUSH
59988: PPUSH
59989: PPUSH
59990: PPUSH
59991: PPUSH
// if not area or not rate or not max then
59992: LD_VAR 0 1
59996: NOT
59997: IFTRUE 60006
59999: PUSH
60000: LD_VAR 0 2
60004: NOT
60005: OR
60006: IFTRUE 60015
60008: PUSH
60009: LD_VAR 0 4
60013: NOT
60014: OR
60015: IFFALSE 60019
// exit ;
60017: GO 60208
// while 1 do
60019: LD_INT 1
60021: IFFALSE 60208
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60023: LD_ADDR_VAR 0 9
60027: PUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: LD_INT 1
60035: PPUSH
60036: CALL_OW 287
60040: PUSH
60041: LD_INT 10
60043: MUL
60044: ST_TO_ADDR
// r := rate / 10 ;
60045: LD_ADDR_VAR 0 7
60049: PUSH
60050: LD_VAR 0 2
60054: PUSH
60055: LD_INT 10
60057: DIVREAL
60058: ST_TO_ADDR
// time := 1 1$00 ;
60059: LD_ADDR_VAR 0 8
60063: PUSH
60064: LD_INT 2100
60066: ST_TO_ADDR
// if amount < min then
60067: LD_VAR 0 9
60071: PUSH
60072: LD_VAR 0 3
60076: LESS
60077: IFFALSE 60095
// r := r * 2 else
60079: LD_ADDR_VAR 0 7
60083: PUSH
60084: LD_VAR 0 7
60088: PUSH
60089: LD_INT 2
60091: MUL
60092: ST_TO_ADDR
60093: GO 60121
// if amount > max then
60095: LD_VAR 0 9
60099: PUSH
60100: LD_VAR 0 4
60104: GREATER
60105: IFFALSE 60121
// r := r / 2 ;
60107: LD_ADDR_VAR 0 7
60111: PUSH
60112: LD_VAR 0 7
60116: PUSH
60117: LD_INT 2
60119: DIVREAL
60120: ST_TO_ADDR
// time := time / r ;
60121: LD_ADDR_VAR 0 8
60125: PUSH
60126: LD_VAR 0 8
60130: PUSH
60131: LD_VAR 0 7
60135: DIVREAL
60136: ST_TO_ADDR
// if time < 0 then
60137: LD_VAR 0 8
60141: PUSH
60142: LD_INT 0
60144: LESS
60145: IFFALSE 60162
// time := time * - 1 ;
60147: LD_ADDR_VAR 0 8
60151: PUSH
60152: LD_VAR 0 8
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: MUL
60161: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60162: LD_VAR 0 8
60166: PUSH
60167: LD_INT 35
60169: PPUSH
60170: LD_INT 875
60172: PPUSH
60173: CALL_OW 12
60177: PLUS
60178: PPUSH
60179: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60183: LD_INT 1
60185: PPUSH
60186: LD_INT 5
60188: PPUSH
60189: CALL_OW 12
60193: PPUSH
60194: LD_VAR 0 1
60198: PPUSH
60199: LD_INT 1
60201: PPUSH
60202: CALL_OW 55
// end ;
60206: GO 60019
// end ;
60208: LD_VAR 0 5
60212: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60213: LD_INT 0
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
// if not turrets or not factories then
60223: LD_VAR 0 1
60227: NOT
60228: IFTRUE 60237
60230: PUSH
60231: LD_VAR 0 2
60235: NOT
60236: OR
60237: IFFALSE 60241
// exit ;
60239: GO 60548
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60241: LD_ADDR_VAR 0 10
60245: PUSH
60246: LD_INT 5
60248: PUSH
60249: LD_INT 6
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 24
60283: PUSH
60284: LD_INT 25
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 23
60293: PUSH
60294: LD_INT 27
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 42
60307: PUSH
60308: LD_INT 43
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 44
60317: PUSH
60318: LD_INT 46
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 45
60327: PUSH
60328: LD_INT 47
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: ST_TO_ADDR
// result := [ ] ;
60345: LD_ADDR_VAR 0 3
60349: PUSH
60350: EMPTY
60351: ST_TO_ADDR
// for i in turrets do
60352: LD_ADDR_VAR 0 4
60356: PUSH
60357: LD_VAR 0 1
60361: PUSH
60362: FOR_IN
60363: IFFALSE 60546
// begin nat := GetNation ( i ) ;
60365: LD_ADDR_VAR 0 7
60369: PUSH
60370: LD_VAR 0 4
60374: PPUSH
60375: CALL_OW 248
60379: ST_TO_ADDR
// weapon := 0 ;
60380: LD_ADDR_VAR 0 8
60384: PUSH
60385: LD_INT 0
60387: ST_TO_ADDR
// if not nat then
60388: LD_VAR 0 7
60392: NOT
60393: IFFALSE 60397
// continue ;
60395: GO 60362
// for j in list [ nat ] do
60397: LD_ADDR_VAR 0 5
60401: PUSH
60402: LD_VAR 0 10
60406: PUSH
60407: LD_VAR 0 7
60411: ARRAY
60412: PUSH
60413: FOR_IN
60414: IFFALSE 60455
// if GetBWeapon ( i ) = j [ 1 ] then
60416: LD_VAR 0 4
60420: PPUSH
60421: CALL_OW 269
60425: PUSH
60426: LD_VAR 0 5
60430: PUSH
60431: LD_INT 1
60433: ARRAY
60434: EQUAL
60435: IFFALSE 60453
// begin weapon := j [ 2 ] ;
60437: LD_ADDR_VAR 0 8
60441: PUSH
60442: LD_VAR 0 5
60446: PUSH
60447: LD_INT 2
60449: ARRAY
60450: ST_TO_ADDR
// break ;
60451: GO 60455
// end ;
60453: GO 60413
60455: POP
60456: POP
// if not weapon then
60457: LD_VAR 0 8
60461: NOT
60462: IFFALSE 60466
// continue ;
60464: GO 60362
// for k in factories do
60466: LD_ADDR_VAR 0 6
60470: PUSH
60471: LD_VAR 0 2
60475: PUSH
60476: FOR_IN
60477: IFFALSE 60542
// begin weapons := AvailableWeaponList ( k ) ;
60479: LD_ADDR_VAR 0 9
60483: PUSH
60484: LD_VAR 0 6
60488: PPUSH
60489: CALL_OW 478
60493: ST_TO_ADDR
// if not weapons then
60494: LD_VAR 0 9
60498: NOT
60499: IFFALSE 60503
// continue ;
60501: GO 60476
// if weapon in weapons then
60503: LD_VAR 0 8
60507: PUSH
60508: LD_VAR 0 9
60512: IN
60513: IFFALSE 60540
// begin result := [ i , weapon ] ;
60515: LD_ADDR_VAR 0 3
60519: PUSH
60520: LD_VAR 0 4
60524: PUSH
60525: LD_VAR 0 8
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// exit ;
60534: POP
60535: POP
60536: POP
60537: POP
60538: GO 60548
// end ; end ;
60540: GO 60476
60542: POP
60543: POP
// end ;
60544: GO 60362
60546: POP
60547: POP
// end ;
60548: LD_VAR 0 3
60552: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60553: LD_INT 0
60555: PPUSH
// if not side or side > 8 then
60556: LD_VAR 0 3
60560: NOT
60561: IFTRUE 60573
60563: PUSH
60564: LD_VAR 0 3
60568: PUSH
60569: LD_INT 8
60571: GREATER
60572: OR
60573: IFFALSE 60577
// exit ;
60575: GO 60636
// if not range then
60577: LD_VAR 0 4
60581: NOT
60582: IFFALSE 60593
// range := - 12 ;
60584: LD_ADDR_VAR 0 4
60588: PUSH
60589: LD_INT 12
60591: NEG
60592: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60593: LD_VAR 0 1
60597: PPUSH
60598: LD_VAR 0 2
60602: PPUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: LD_VAR 0 4
60612: PPUSH
60613: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60617: LD_VAR 0 1
60621: PPUSH
60622: LD_VAR 0 2
60626: PPUSH
60627: LD_VAR 0 3
60631: PPUSH
60632: CALL_OW 331
// end ;
60636: LD_VAR 0 5
60640: RET
// export function Video ( mode ) ; begin
60641: LD_INT 0
60643: PPUSH
// ingame_video = mode ;
60644: LD_ADDR_OWVAR 52
60648: PUSH
60649: LD_VAR 0 1
60653: ST_TO_ADDR
// interface_hidden = mode ;
60654: LD_ADDR_OWVAR 54
60658: PUSH
60659: LD_VAR 0 1
60663: ST_TO_ADDR
// end ;
60664: LD_VAR 0 2
60668: RET
// export function Join ( array , element ) ; begin
60669: LD_INT 0
60671: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60672: LD_ADDR_VAR 0 3
60676: PUSH
60677: LD_VAR 0 1
60681: PPUSH
60682: LD_VAR 0 1
60686: PUSH
60687: LD_INT 1
60689: PLUS
60690: PPUSH
60691: LD_VAR 0 2
60695: PPUSH
60696: CALL_OW 1
60700: ST_TO_ADDR
// end ;
60701: LD_VAR 0 3
60705: RET
// export function JoinUnion ( array , element ) ; begin
60706: LD_INT 0
60708: PPUSH
// result := array union element ;
60709: LD_ADDR_VAR 0 3
60713: PUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_VAR 0 2
60723: UNION
60724: ST_TO_ADDR
// end ;
60725: LD_VAR 0 3
60729: RET
// export function GetBehemoths ( side ) ; begin
60730: LD_INT 0
60732: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60733: LD_ADDR_VAR 0 2
60737: PUSH
60738: LD_INT 22
60740: PUSH
60741: LD_VAR 0 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 31
60752: PUSH
60753: LD_INT 25
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PPUSH
60764: CALL_OW 69
60768: ST_TO_ADDR
// end ;
60769: LD_VAR 0 2
60773: RET
// export function Shuffle ( array ) ; var i , index ; begin
60774: LD_INT 0
60776: PPUSH
60777: PPUSH
60778: PPUSH
// result := [ ] ;
60779: LD_ADDR_VAR 0 2
60783: PUSH
60784: EMPTY
60785: ST_TO_ADDR
// if not array then
60786: LD_VAR 0 1
60790: NOT
60791: IFFALSE 60795
// exit ;
60793: GO 60894
// Randomize ;
60795: CALL_OW 10
// for i = array downto 1 do
60799: LD_ADDR_VAR 0 3
60803: PUSH
60804: DOUBLE
60805: LD_VAR 0 1
60809: INC
60810: ST_TO_ADDR
60811: LD_INT 1
60813: PUSH
60814: FOR_DOWNTO
60815: IFFALSE 60892
// begin index := rand ( 1 , array ) ;
60817: LD_ADDR_VAR 0 4
60821: PUSH
60822: LD_INT 1
60824: PPUSH
60825: LD_VAR 0 1
60829: PPUSH
60830: CALL_OW 12
60834: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60835: LD_ADDR_VAR 0 2
60839: PUSH
60840: LD_VAR 0 2
60844: PPUSH
60845: LD_VAR 0 2
60849: PUSH
60850: LD_INT 1
60852: PLUS
60853: PPUSH
60854: LD_VAR 0 1
60858: PUSH
60859: LD_VAR 0 4
60863: ARRAY
60864: PPUSH
60865: CALL_OW 2
60869: ST_TO_ADDR
// array := Delete ( array , index ) ;
60870: LD_ADDR_VAR 0 1
60874: PUSH
60875: LD_VAR 0 1
60879: PPUSH
60880: LD_VAR 0 4
60884: PPUSH
60885: CALL_OW 3
60889: ST_TO_ADDR
// end ;
60890: GO 60814
60892: POP
60893: POP
// end ;
60894: LD_VAR 0 2
60898: RET
// export function GetBaseMaterials ( base ) ; begin
60899: LD_INT 0
60901: PPUSH
// result := [ 0 , 0 , 0 ] ;
60902: LD_ADDR_VAR 0 2
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: ST_TO_ADDR
// if not base then
60921: LD_VAR 0 1
60925: NOT
60926: IFFALSE 60930
// exit ;
60928: GO 60979
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60930: LD_ADDR_VAR 0 2
60934: PUSH
60935: LD_VAR 0 1
60939: PPUSH
60940: LD_INT 1
60942: PPUSH
60943: CALL_OW 275
60947: PUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_INT 2
60955: PPUSH
60956: CALL_OW 275
60960: PUSH
60961: LD_VAR 0 1
60965: PPUSH
60966: LD_INT 3
60968: PPUSH
60969: CALL_OW 275
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// end ;
60979: LD_VAR 0 2
60983: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60984: LD_INT 0
60986: PPUSH
60987: PPUSH
// result := array ;
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_VAR 0 1
60997: ST_TO_ADDR
// if size >= result then
60998: LD_VAR 0 2
61002: PUSH
61003: LD_VAR 0 3
61007: GREATEREQUAL
61008: IFFALSE 61012
// exit ;
61010: GO 61062
// if size then
61012: LD_VAR 0 2
61016: IFFALSE 61062
// for i := array downto size do
61018: LD_ADDR_VAR 0 4
61022: PUSH
61023: DOUBLE
61024: LD_VAR 0 1
61028: INC
61029: ST_TO_ADDR
61030: LD_VAR 0 2
61034: PUSH
61035: FOR_DOWNTO
61036: IFFALSE 61060
// result := Delete ( result , result ) ;
61038: LD_ADDR_VAR 0 3
61042: PUSH
61043: LD_VAR 0 3
61047: PPUSH
61048: LD_VAR 0 3
61052: PPUSH
61053: CALL_OW 3
61057: ST_TO_ADDR
61058: GO 61035
61060: POP
61061: POP
// end ;
61062: LD_VAR 0 3
61066: RET
// export function ComExit ( unit ) ; var tmp ; begin
61067: LD_INT 0
61069: PPUSH
61070: PPUSH
// if not IsInUnit ( unit ) then
61071: LD_VAR 0 1
61075: PPUSH
61076: CALL_OW 310
61080: NOT
61081: IFFALSE 61085
// exit ;
61083: GO 61145
// tmp := IsInUnit ( unit ) ;
61085: LD_ADDR_VAR 0 3
61089: PUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: CALL_OW 310
61099: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61100: LD_VAR 0 3
61104: PPUSH
61105: CALL_OW 247
61109: PUSH
61110: LD_INT 2
61112: EQUAL
61113: IFFALSE 61126
// ComExitVehicle ( unit ) else
61115: LD_VAR 0 1
61119: PPUSH
61120: CALL_OW 121
61124: GO 61135
// ComExitBuilding ( unit ) ;
61126: LD_VAR 0 1
61130: PPUSH
61131: CALL_OW 122
// result := tmp ;
61135: LD_ADDR_VAR 0 2
61139: PUSH
61140: LD_VAR 0 3
61144: ST_TO_ADDR
// end ;
61145: LD_VAR 0 2
61149: RET
// export function ComExitAll ( units ) ; var i ; begin
61150: LD_INT 0
61152: PPUSH
61153: PPUSH
// if not units then
61154: LD_VAR 0 1
61158: NOT
61159: IFFALSE 61163
// exit ;
61161: GO 61189
// for i in units do
61163: LD_ADDR_VAR 0 3
61167: PUSH
61168: LD_VAR 0 1
61172: PUSH
61173: FOR_IN
61174: IFFALSE 61187
// ComExit ( i ) ;
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL 61067 0 1
61185: GO 61173
61187: POP
61188: POP
// end ;
61189: LD_VAR 0 2
61193: RET
// export function ResetHc ; begin
61194: LD_INT 0
61196: PPUSH
// InitHc ;
61197: CALL_OW 19
// hc_importance := 0 ;
61201: LD_ADDR_OWVAR 32
61205: PUSH
61206: LD_INT 0
61208: ST_TO_ADDR
// end ;
61209: LD_VAR 0 1
61213: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61214: LD_INT 0
61216: PPUSH
61217: PPUSH
61218: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61219: LD_ADDR_VAR 0 6
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: LD_VAR 0 3
61233: PLUS
61234: PUSH
61235: LD_INT 2
61237: DIV
61238: ST_TO_ADDR
// if _x < 0 then
61239: LD_VAR 0 6
61243: PUSH
61244: LD_INT 0
61246: LESS
61247: IFFALSE 61264
// _x := _x * - 1 ;
61249: LD_ADDR_VAR 0 6
61253: PUSH
61254: LD_VAR 0 6
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: MUL
61263: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61264: LD_ADDR_VAR 0 7
61268: PUSH
61269: LD_VAR 0 2
61273: PUSH
61274: LD_VAR 0 4
61278: PLUS
61279: PUSH
61280: LD_INT 2
61282: DIV
61283: ST_TO_ADDR
// if _y < 0 then
61284: LD_VAR 0 7
61288: PUSH
61289: LD_INT 0
61291: LESS
61292: IFFALSE 61309
// _y := _y * - 1 ;
61294: LD_ADDR_VAR 0 7
61298: PUSH
61299: LD_VAR 0 7
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: MUL
61308: ST_TO_ADDR
// result := [ _x , _y ] ;
61309: LD_ADDR_VAR 0 5
61313: PUSH
61314: LD_VAR 0 6
61318: PUSH
61319: LD_VAR 0 7
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// end ;
61328: LD_VAR 0 5
61332: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61333: LD_INT 0
61335: PPUSH
61336: PPUSH
61337: PPUSH
61338: PPUSH
// task := GetTaskList ( unit ) ;
61339: LD_ADDR_VAR 0 7
61343: PUSH
61344: LD_VAR 0 1
61348: PPUSH
61349: CALL_OW 437
61353: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61354: LD_VAR 0 7
61358: NOT
61359: IFFALSE 61378
61361: PUSH
61362: LD_VAR 0 1
61366: PPUSH
61367: LD_VAR 0 2
61371: PPUSH
61372: CALL_OW 308
61376: NOT
61377: AND
61378: IFFALSE 61382
// exit ;
61380: GO 61500
// if IsInArea ( unit , area ) then
61382: LD_VAR 0 1
61386: PPUSH
61387: LD_VAR 0 2
61391: PPUSH
61392: CALL_OW 308
61396: IFFALSE 61414
// begin ComMoveToArea ( unit , goAway ) ;
61398: LD_VAR 0 1
61402: PPUSH
61403: LD_VAR 0 3
61407: PPUSH
61408: CALL_OW 113
// exit ;
61412: GO 61500
// end ; if task [ 1 ] [ 1 ] <> M then
61414: LD_VAR 0 7
61418: PUSH
61419: LD_INT 1
61421: ARRAY
61422: PUSH
61423: LD_INT 1
61425: ARRAY
61426: PUSH
61427: LD_STRING M
61429: NONEQUAL
61430: IFFALSE 61434
// exit ;
61432: GO 61500
// x := task [ 1 ] [ 2 ] ;
61434: LD_ADDR_VAR 0 5
61438: PUSH
61439: LD_VAR 0 7
61443: PUSH
61444: LD_INT 1
61446: ARRAY
61447: PUSH
61448: LD_INT 2
61450: ARRAY
61451: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61452: LD_ADDR_VAR 0 6
61456: PUSH
61457: LD_VAR 0 7
61461: PUSH
61462: LD_INT 1
61464: ARRAY
61465: PUSH
61466: LD_INT 3
61468: ARRAY
61469: ST_TO_ADDR
// if InArea ( x , y , area ) then
61470: LD_VAR 0 5
61474: PPUSH
61475: LD_VAR 0 6
61479: PPUSH
61480: LD_VAR 0 2
61484: PPUSH
61485: CALL_OW 309
61489: IFFALSE 61500
// ComStop ( unit ) ;
61491: LD_VAR 0 1
61495: PPUSH
61496: CALL_OW 141
// end ;
61500: LD_VAR 0 4
61504: RET
// export function Abs ( value ) ; begin
61505: LD_INT 0
61507: PPUSH
// result := value ;
61508: LD_ADDR_VAR 0 2
61512: PUSH
61513: LD_VAR 0 1
61517: ST_TO_ADDR
// if value < 0 then
61518: LD_VAR 0 1
61522: PUSH
61523: LD_INT 0
61525: LESS
61526: IFFALSE 61543
// result := value * - 1 ;
61528: LD_ADDR_VAR 0 2
61532: PUSH
61533: LD_VAR 0 1
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: MUL
61542: ST_TO_ADDR
// end ;
61543: LD_VAR 0 2
61547: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61548: LD_INT 0
61550: PPUSH
61551: PPUSH
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
61557: PPUSH
// if not unit or not building then
61558: LD_VAR 0 1
61562: NOT
61563: IFTRUE 61572
61565: PUSH
61566: LD_VAR 0 2
61570: NOT
61571: OR
61572: IFFALSE 61576
// exit ;
61574: GO 61804
// x := GetX ( building ) ;
61576: LD_ADDR_VAR 0 4
61580: PUSH
61581: LD_VAR 0 2
61585: PPUSH
61586: CALL_OW 250
61590: ST_TO_ADDR
// y := GetY ( building ) ;
61591: LD_ADDR_VAR 0 6
61595: PUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: CALL_OW 251
61605: ST_TO_ADDR
// d := GetDir ( building ) ;
61606: LD_ADDR_VAR 0 8
61610: PUSH
61611: LD_VAR 0 2
61615: PPUSH
61616: CALL_OW 254
61620: ST_TO_ADDR
// r := 4 ;
61621: LD_ADDR_VAR 0 9
61625: PUSH
61626: LD_INT 4
61628: ST_TO_ADDR
// for i := 1 to 5 do
61629: LD_ADDR_VAR 0 10
61633: PUSH
61634: DOUBLE
61635: LD_INT 1
61637: DEC
61638: ST_TO_ADDR
61639: LD_INT 5
61641: PUSH
61642: FOR_TO
61643: IFFALSE 61802
// begin _x := ShiftX ( x , d , r + i ) ;
61645: LD_ADDR_VAR 0 5
61649: PUSH
61650: LD_VAR 0 4
61654: PPUSH
61655: LD_VAR 0 8
61659: PPUSH
61660: LD_VAR 0 9
61664: PUSH
61665: LD_VAR 0 10
61669: PLUS
61670: PPUSH
61671: CALL_OW 272
61675: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61676: LD_ADDR_VAR 0 7
61680: PUSH
61681: LD_VAR 0 6
61685: PPUSH
61686: LD_VAR 0 8
61690: PPUSH
61691: LD_VAR 0 9
61695: PUSH
61696: LD_VAR 0 10
61700: PLUS
61701: PPUSH
61702: CALL_OW 273
61706: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61707: LD_VAR 0 5
61711: PPUSH
61712: LD_VAR 0 7
61716: PPUSH
61717: CALL_OW 488
61721: IFFALSE 61756
61723: PUSH
61724: LD_VAR 0 5
61728: PPUSH
61729: LD_VAR 0 7
61733: PPUSH
61734: CALL_OW 428
61738: PPUSH
61739: CALL_OW 247
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: IN
61754: NOT
61755: AND
61756: IFFALSE 61800
// begin ComMoveXY ( unit , _x , _y ) ;
61758: LD_VAR 0 1
61762: PPUSH
61763: LD_VAR 0 5
61767: PPUSH
61768: LD_VAR 0 7
61772: PPUSH
61773: CALL_OW 111
// result := [ _x , _y ] ;
61777: LD_ADDR_VAR 0 3
61781: PUSH
61782: LD_VAR 0 5
61786: PUSH
61787: LD_VAR 0 7
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: ST_TO_ADDR
// exit ;
61796: POP
61797: POP
61798: GO 61804
// end ; end ;
61800: GO 61642
61802: POP
61803: POP
// end ;
61804: LD_VAR 0 3
61808: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61809: LD_INT 0
61811: PPUSH
61812: PPUSH
61813: PPUSH
// result := 0 ;
61814: LD_ADDR_VAR 0 3
61818: PUSH
61819: LD_INT 0
61821: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61822: LD_VAR 0 1
61826: PUSH
61827: LD_INT 0
61829: LESS
61830: IFTRUE 61842
61832: PUSH
61833: LD_VAR 0 1
61837: PUSH
61838: LD_INT 8
61840: GREATER
61841: OR
61842: IFTRUE 61854
61844: PUSH
61845: LD_VAR 0 2
61849: PUSH
61850: LD_INT 0
61852: LESS
61853: OR
61854: IFTRUE 61866
61856: PUSH
61857: LD_VAR 0 2
61861: PUSH
61862: LD_INT 8
61864: GREATER
61865: OR
61866: IFFALSE 61870
// exit ;
61868: GO 61945
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61870: LD_ADDR_VAR 0 4
61874: PUSH
61875: LD_INT 22
61877: PUSH
61878: LD_VAR 0 2
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PPUSH
61887: CALL_OW 69
61891: PUSH
61892: FOR_IN
61893: IFFALSE 61943
// begin un := UnitShoot ( i ) ;
61895: LD_ADDR_VAR 0 5
61899: PUSH
61900: LD_VAR 0 4
61904: PPUSH
61905: CALL_OW 504
61909: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61910: LD_VAR 0 5
61914: PPUSH
61915: CALL_OW 255
61919: PUSH
61920: LD_VAR 0 1
61924: EQUAL
61925: IFFALSE 61941
// begin result := un ;
61927: LD_ADDR_VAR 0 3
61931: PUSH
61932: LD_VAR 0 5
61936: ST_TO_ADDR
// exit ;
61937: POP
61938: POP
61939: GO 61945
// end ; end ;
61941: GO 61892
61943: POP
61944: POP
// end ;
61945: LD_VAR 0 3
61949: RET
// export function GetCargoBay ( units ) ; begin
61950: LD_INT 0
61952: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61953: LD_ADDR_VAR 0 2
61957: PUSH
61958: LD_VAR 0 1
61962: PPUSH
61963: LD_INT 2
61965: PUSH
61966: LD_INT 34
61968: PUSH
61969: LD_INT 12
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 34
61978: PUSH
61979: LD_INT 51
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 34
61988: PUSH
61989: LD_INT 32
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 34
61998: PUSH
61999: LD_INT 89
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: PPUSH
62013: CALL_OW 72
62017: ST_TO_ADDR
// end ;
62018: LD_VAR 0 2
62022: RET
// export function Negate ( value ) ; begin
62023: LD_INT 0
62025: PPUSH
// result := not value ;
62026: LD_ADDR_VAR 0 2
62030: PUSH
62031: LD_VAR 0 1
62035: NOT
62036: ST_TO_ADDR
// end ;
62037: LD_VAR 0 2
62041: RET
// export function Inc ( value ) ; begin
62042: LD_INT 0
62044: PPUSH
// result := value + 1 ;
62045: LD_ADDR_VAR 0 2
62049: PUSH
62050: LD_VAR 0 1
62054: PUSH
62055: LD_INT 1
62057: PLUS
62058: ST_TO_ADDR
// end ;
62059: LD_VAR 0 2
62063: RET
// export function Dec ( value ) ; begin
62064: LD_INT 0
62066: PPUSH
// result := value - 1 ;
62067: LD_ADDR_VAR 0 2
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 1
62079: MINUS
62080: ST_TO_ADDR
// end ;
62081: LD_VAR 0 2
62085: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62086: LD_INT 0
62088: PPUSH
62089: PPUSH
62090: PPUSH
62091: PPUSH
62092: PPUSH
62093: PPUSH
62094: PPUSH
62095: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62096: LD_VAR 0 1
62100: PPUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: CALL_OW 488
62110: NOT
62111: IFTRUE 62130
62113: PUSH
62114: LD_VAR 0 3
62118: PPUSH
62119: LD_VAR 0 4
62123: PPUSH
62124: CALL_OW 488
62128: NOT
62129: OR
62130: IFFALSE 62143
// begin result := - 1 ;
62132: LD_ADDR_VAR 0 5
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: ST_TO_ADDR
// exit ;
62141: GO 62378
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62143: LD_ADDR_VAR 0 12
62147: PUSH
62148: LD_VAR 0 1
62152: PPUSH
62153: LD_VAR 0 2
62157: PPUSH
62158: LD_VAR 0 3
62162: PPUSH
62163: LD_VAR 0 4
62167: PPUSH
62168: CALL 61214 0 4
62172: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62173: LD_ADDR_VAR 0 11
62177: PUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: LD_VAR 0 2
62187: PPUSH
62188: LD_VAR 0 12
62192: PUSH
62193: LD_INT 1
62195: ARRAY
62196: PPUSH
62197: LD_VAR 0 12
62201: PUSH
62202: LD_INT 2
62204: ARRAY
62205: PPUSH
62206: CALL_OW 298
62210: ST_TO_ADDR
// distance := 9999 ;
62211: LD_ADDR_VAR 0 10
62215: PUSH
62216: LD_INT 9999
62218: ST_TO_ADDR
// for i := 0 to 5 do
62219: LD_ADDR_VAR 0 6
62223: PUSH
62224: DOUBLE
62225: LD_INT 0
62227: DEC
62228: ST_TO_ADDR
62229: LD_INT 5
62231: PUSH
62232: FOR_TO
62233: IFFALSE 62376
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62235: LD_ADDR_VAR 0 7
62239: PUSH
62240: LD_VAR 0 1
62244: PPUSH
62245: LD_VAR 0 6
62249: PPUSH
62250: LD_VAR 0 11
62254: PPUSH
62255: CALL_OW 272
62259: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62260: LD_ADDR_VAR 0 8
62264: PUSH
62265: LD_VAR 0 2
62269: PPUSH
62270: LD_VAR 0 6
62274: PPUSH
62275: LD_VAR 0 11
62279: PPUSH
62280: CALL_OW 273
62284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62285: LD_VAR 0 7
62289: PPUSH
62290: LD_VAR 0 8
62294: PPUSH
62295: CALL_OW 488
62299: NOT
62300: IFFALSE 62304
// continue ;
62302: GO 62232
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62304: LD_ADDR_VAR 0 9
62308: PUSH
62309: LD_VAR 0 12
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: LD_VAR 0 12
62322: PUSH
62323: LD_INT 2
62325: ARRAY
62326: PPUSH
62327: LD_VAR 0 7
62331: PPUSH
62332: LD_VAR 0 8
62336: PPUSH
62337: CALL_OW 298
62341: ST_TO_ADDR
// if tmp < distance then
62342: LD_VAR 0 9
62346: PUSH
62347: LD_VAR 0 10
62351: LESS
62352: IFFALSE 62374
// begin result := i ;
62354: LD_ADDR_VAR 0 5
62358: PUSH
62359: LD_VAR 0 6
62363: ST_TO_ADDR
// distance := tmp ;
62364: LD_ADDR_VAR 0 10
62368: PUSH
62369: LD_VAR 0 9
62373: ST_TO_ADDR
// end ; end ;
62374: GO 62232
62376: POP
62377: POP
// end ;
62378: LD_VAR 0 5
62382: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62383: LD_INT 0
62385: PPUSH
62386: PPUSH
// if not driver or not IsInUnit ( driver ) then
62387: LD_VAR 0 1
62391: NOT
62392: IFTRUE 62406
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: CALL_OW 310
62404: NOT
62405: OR
62406: IFFALSE 62410
// exit ;
62408: GO 62500
// vehicle := IsInUnit ( driver ) ;
62410: LD_ADDR_VAR 0 3
62414: PUSH
62415: LD_VAR 0 1
62419: PPUSH
62420: CALL_OW 310
62424: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_STRING \
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: PUSH
62460: LD_STRING E
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_VAR 0 3
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PPUSH
62496: CALL_OW 446
// end ;
62500: LD_VAR 0 2
62504: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62505: LD_INT 0
62507: PPUSH
62508: PPUSH
// if not driver or not IsInUnit ( driver ) then
62509: LD_VAR 0 1
62513: NOT
62514: IFTRUE 62528
62516: PUSH
62517: LD_VAR 0 1
62521: PPUSH
62522: CALL_OW 310
62526: NOT
62527: OR
62528: IFFALSE 62532
// exit ;
62530: GO 62622
// vehicle := IsInUnit ( driver ) ;
62532: LD_ADDR_VAR 0 3
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 310
62546: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62547: LD_VAR 0 1
62551: PPUSH
62552: LD_STRING \
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: PUSH
62582: LD_STRING E
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_VAR 0 3
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PPUSH
62618: CALL_OW 447
// end ;
62622: LD_VAR 0 2
62626: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62627: LD_INT 0
62629: PPUSH
62630: PPUSH
62631: PPUSH
// tmp := [ ] ;
62632: LD_ADDR_VAR 0 5
62636: PUSH
62637: EMPTY
62638: ST_TO_ADDR
// for i in units do
62639: LD_ADDR_VAR 0 4
62643: PUSH
62644: LD_VAR 0 1
62648: PUSH
62649: FOR_IN
62650: IFFALSE 62688
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62652: LD_ADDR_VAR 0 5
62656: PUSH
62657: LD_VAR 0 5
62661: PPUSH
62662: LD_VAR 0 5
62666: PUSH
62667: LD_INT 1
62669: PLUS
62670: PPUSH
62671: LD_VAR 0 4
62675: PPUSH
62676: CALL_OW 256
62680: PPUSH
62681: CALL_OW 2
62685: ST_TO_ADDR
62686: GO 62649
62688: POP
62689: POP
// if not tmp then
62690: LD_VAR 0 5
62694: NOT
62695: IFFALSE 62699
// exit ;
62697: GO 62747
// if asc then
62699: LD_VAR 0 2
62703: IFFALSE 62727
// result := SortListByListAsc ( units , tmp ) else
62705: LD_ADDR_VAR 0 3
62709: PUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: LD_VAR 0 5
62719: PPUSH
62720: CALL_OW 76
62724: ST_TO_ADDR
62725: GO 62747
// result := SortListByListDesc ( units , tmp ) ;
62727: LD_ADDR_VAR 0 3
62731: PUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: LD_VAR 0 5
62741: PPUSH
62742: CALL_OW 77
62746: ST_TO_ADDR
// end ;
62747: LD_VAR 0 3
62751: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62752: LD_INT 0
62754: PPUSH
62755: PPUSH
// task := GetTaskList ( mech ) ;
62756: LD_ADDR_VAR 0 4
62760: PUSH
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 437
62770: ST_TO_ADDR
// if not task then
62771: LD_VAR 0 4
62775: NOT
62776: IFFALSE 62780
// exit ;
62778: GO 62824
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62780: LD_ADDR_VAR 0 3
62784: PUSH
62785: LD_VAR 0 4
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PUSH
62798: LD_STRING r
62800: EQUAL
62801: IFFALSE 62823
62803: PUSH
62804: LD_VAR 0 4
62808: PUSH
62809: LD_INT 1
62811: ARRAY
62812: PUSH
62813: LD_INT 4
62815: ARRAY
62816: PUSH
62817: LD_VAR 0 2
62821: EQUAL
62822: AND
62823: ST_TO_ADDR
// end ;
62824: LD_VAR 0 3
62828: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62829: LD_INT 0
62831: PPUSH
// SetDir ( unit , d ) ;
62832: LD_VAR 0 1
62836: PPUSH
62837: LD_VAR 0 4
62841: PPUSH
62842: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62846: LD_ADDR_VAR 0 6
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_VAR 0 2
62860: PPUSH
62861: LD_VAR 0 3
62865: PPUSH
62866: LD_VAR 0 5
62870: PPUSH
62871: CALL_OW 48
62875: ST_TO_ADDR
// end ;
62876: LD_VAR 0 6
62880: RET
// export function ToNaturalNumber ( number ) ; begin
62881: LD_INT 0
62883: PPUSH
// result := number div 1 ;
62884: LD_ADDR_VAR 0 2
62888: PUSH
62889: LD_VAR 0 1
62893: PUSH
62894: LD_INT 1
62896: DIV
62897: ST_TO_ADDR
// if number < 0 then
62898: LD_VAR 0 1
62902: PUSH
62903: LD_INT 0
62905: LESS
62906: IFFALSE 62916
// result := 0 ;
62908: LD_ADDR_VAR 0 2
62912: PUSH
62913: LD_INT 0
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 2
62920: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
62925: PPUSH
// if not buildings then
62926: LD_VAR 0 1
62930: NOT
62931: IFFALSE 62935
// exit ;
62933: GO 63050
// tmp := [ ] ;
62935: LD_ADDR_VAR 0 5
62939: PUSH
62940: EMPTY
62941: ST_TO_ADDR
// for b in buildings do
62942: LD_ADDR_VAR 0 4
62946: PUSH
62947: LD_VAR 0 1
62951: PUSH
62952: FOR_IN
62953: IFFALSE 62991
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
62955: LD_ADDR_VAR 0 5
62959: PUSH
62960: LD_VAR 0 5
62964: PPUSH
62965: LD_VAR 0 5
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: PPUSH
62974: LD_VAR 0 4
62978: PPUSH
62979: CALL_OW 266
62983: PPUSH
62984: CALL_OW 1
62988: ST_TO_ADDR
62989: GO 62952
62991: POP
62992: POP
// if not tmp then
62993: LD_VAR 0 5
62997: NOT
62998: IFFALSE 63002
// exit ;
63000: GO 63050
// if asc then
63002: LD_VAR 0 2
63006: IFFALSE 63030
// result := SortListByListAsc ( buildings , tmp ) else
63008: LD_ADDR_VAR 0 3
63012: PUSH
63013: LD_VAR 0 1
63017: PPUSH
63018: LD_VAR 0 5
63022: PPUSH
63023: CALL_OW 76
63027: ST_TO_ADDR
63028: GO 63050
// result := SortListByListDesc ( buildings , tmp ) ;
63030: LD_ADDR_VAR 0 3
63034: PUSH
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_VAR 0 5
63044: PPUSH
63045: CALL_OW 77
63049: ST_TO_ADDR
// end ;
63050: LD_VAR 0 3
63054: RET
// export function SortByClass ( units , class ) ; var un ; begin
63055: LD_INT 0
63057: PPUSH
63058: PPUSH
// if not units or not class then
63059: LD_VAR 0 1
63063: NOT
63064: IFTRUE 63073
63066: PUSH
63067: LD_VAR 0 2
63071: NOT
63072: OR
63073: IFFALSE 63077
// exit ;
63075: GO 63172
// result := [ ] ;
63077: LD_ADDR_VAR 0 3
63081: PUSH
63082: EMPTY
63083: ST_TO_ADDR
// for un in units do
63084: LD_ADDR_VAR 0 4
63088: PUSH
63089: LD_VAR 0 1
63093: PUSH
63094: FOR_IN
63095: IFFALSE 63170
// if GetClass ( un ) = class then
63097: LD_VAR 0 4
63101: PPUSH
63102: CALL_OW 257
63106: PUSH
63107: LD_VAR 0 2
63111: EQUAL
63112: IFFALSE 63139
// result := Insert ( result , 1 , un ) else
63114: LD_ADDR_VAR 0 3
63118: PUSH
63119: LD_VAR 0 3
63123: PPUSH
63124: LD_INT 1
63126: PPUSH
63127: LD_VAR 0 4
63131: PPUSH
63132: CALL_OW 2
63136: ST_TO_ADDR
63137: GO 63168
// result := Replace ( result , result + 1 , un ) ;
63139: LD_ADDR_VAR 0 3
63143: PUSH
63144: LD_VAR 0 3
63148: PPUSH
63149: LD_VAR 0 3
63153: PUSH
63154: LD_INT 1
63156: PLUS
63157: PPUSH
63158: LD_VAR 0 4
63162: PPUSH
63163: CALL_OW 1
63167: ST_TO_ADDR
63168: GO 63094
63170: POP
63171: POP
// end ;
63172: LD_VAR 0 3
63176: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63177: LD_INT 0
63179: PPUSH
63180: PPUSH
63181: PPUSH
63182: PPUSH
63183: PPUSH
63184: PPUSH
63185: PPUSH
// result := [ ] ;
63186: LD_ADDR_VAR 0 4
63190: PUSH
63191: EMPTY
63192: ST_TO_ADDR
// if x - r < 0 then
63193: LD_VAR 0 1
63197: PUSH
63198: LD_VAR 0 3
63202: MINUS
63203: PUSH
63204: LD_INT 0
63206: LESS
63207: IFFALSE 63219
// min_x := 0 else
63209: LD_ADDR_VAR 0 8
63213: PUSH
63214: LD_INT 0
63216: ST_TO_ADDR
63217: GO 63235
// min_x := x - r ;
63219: LD_ADDR_VAR 0 8
63223: PUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_VAR 0 3
63233: MINUS
63234: ST_TO_ADDR
// if y - r < 0 then
63235: LD_VAR 0 2
63239: PUSH
63240: LD_VAR 0 3
63244: MINUS
63245: PUSH
63246: LD_INT 0
63248: LESS
63249: IFFALSE 63261
// min_y := 0 else
63251: LD_ADDR_VAR 0 7
63255: PUSH
63256: LD_INT 0
63258: ST_TO_ADDR
63259: GO 63277
// min_y := y - r ;
63261: LD_ADDR_VAR 0 7
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_VAR 0 3
63275: MINUS
63276: ST_TO_ADDR
// max_x := x + r ;
63277: LD_ADDR_VAR 0 9
63281: PUSH
63282: LD_VAR 0 1
63286: PUSH
63287: LD_VAR 0 3
63291: PLUS
63292: ST_TO_ADDR
// max_y := y + r ;
63293: LD_ADDR_VAR 0 10
63297: PUSH
63298: LD_VAR 0 2
63302: PUSH
63303: LD_VAR 0 3
63307: PLUS
63308: ST_TO_ADDR
// for _x = min_x to max_x do
63309: LD_ADDR_VAR 0 5
63313: PUSH
63314: DOUBLE
63315: LD_VAR 0 8
63319: DEC
63320: ST_TO_ADDR
63321: LD_VAR 0 9
63325: PUSH
63326: FOR_TO
63327: IFFALSE 63428
// for _y = min_y to max_y do
63329: LD_ADDR_VAR 0 6
63333: PUSH
63334: DOUBLE
63335: LD_VAR 0 7
63339: DEC
63340: ST_TO_ADDR
63341: LD_VAR 0 10
63345: PUSH
63346: FOR_TO
63347: IFFALSE 63424
// begin if not ValidHex ( _x , _y ) then
63349: LD_VAR 0 5
63353: PPUSH
63354: LD_VAR 0 6
63358: PPUSH
63359: CALL_OW 488
63363: NOT
63364: IFFALSE 63368
// continue ;
63366: GO 63346
// if GetResourceTypeXY ( _x , _y ) then
63368: LD_VAR 0 5
63372: PPUSH
63373: LD_VAR 0 6
63377: PPUSH
63378: CALL_OW 283
63382: IFFALSE 63422
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63384: LD_ADDR_VAR 0 4
63388: PUSH
63389: LD_VAR 0 4
63393: PPUSH
63394: LD_VAR 0 4
63398: PUSH
63399: LD_INT 1
63401: PLUS
63402: PPUSH
63403: LD_VAR 0 5
63407: PUSH
63408: LD_VAR 0 6
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PPUSH
63417: CALL_OW 1
63421: ST_TO_ADDR
// end ;
63422: GO 63346
63424: POP
63425: POP
63426: GO 63326
63428: POP
63429: POP
// end ;
63430: LD_VAR 0 4
63434: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63435: LD_INT 0
63437: PPUSH
63438: PPUSH
63439: PPUSH
63440: PPUSH
63441: PPUSH
63442: PPUSH
63443: PPUSH
63444: PPUSH
// if not units then
63445: LD_VAR 0 1
63449: NOT
63450: IFFALSE 63454
// exit ;
63452: GO 63986
// result := UnitFilter ( units , [ f_ok ] ) ;
63454: LD_ADDR_VAR 0 3
63458: PUSH
63459: LD_VAR 0 1
63463: PPUSH
63464: LD_INT 50
63466: PUSH
63467: EMPTY
63468: LIST
63469: PPUSH
63470: CALL_OW 72
63474: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63475: LD_ADDR_VAR 0 8
63479: PUSH
63480: LD_VAR 0 1
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PPUSH
63489: CALL_OW 255
63493: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63494: LD_ADDR_VAR 0 10
63498: PUSH
63499: LD_INT 29
63501: PUSH
63502: LD_INT 91
63504: PUSH
63505: LD_INT 49
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// if not result then
63513: LD_VAR 0 3
63517: NOT
63518: IFFALSE 63522
// exit ;
63520: GO 63986
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63522: LD_ADDR_VAR 0 5
63526: PUSH
63527: LD_INT 81
63529: PUSH
63530: LD_VAR 0 8
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PPUSH
63539: CALL_OW 69
63543: ST_TO_ADDR
// for i in result do
63544: LD_ADDR_VAR 0 4
63548: PUSH
63549: LD_VAR 0 3
63553: PUSH
63554: FOR_IN
63555: IFFALSE 63984
// begin tag := GetTag ( i ) + 1 ;
63557: LD_ADDR_VAR 0 9
63561: PUSH
63562: LD_VAR 0 4
63566: PPUSH
63567: CALL_OW 110
63571: PUSH
63572: LD_INT 1
63574: PLUS
63575: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63576: LD_ADDR_VAR 0 7
63580: PUSH
63581: LD_VAR 0 4
63585: PPUSH
63586: CALL_OW 250
63590: PPUSH
63591: LD_VAR 0 4
63595: PPUSH
63596: CALL_OW 251
63600: PPUSH
63601: LD_INT 4
63603: PPUSH
63604: CALL 63177 0 3
63608: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63609: LD_VAR 0 4
63613: PPUSH
63614: CALL_OW 247
63618: PUSH
63619: LD_INT 2
63621: EQUAL
63622: IFFALSE 63634
63624: PUSH
63625: LD_VAR 0 7
63629: PUSH
63630: LD_INT 2
63632: GREATER
63633: AND
63634: IFFALSE 63654
63636: PUSH
63637: LD_VAR 0 4
63641: PPUSH
63642: CALL_OW 264
63646: PUSH
63647: LD_VAR 0 10
63651: IN
63652: NOT
63653: AND
63654: IFFALSE 63693
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63656: LD_VAR 0 4
63660: PPUSH
63661: LD_VAR 0 7
63665: PUSH
63666: LD_INT 1
63668: ARRAY
63669: PUSH
63670: LD_INT 1
63672: ARRAY
63673: PPUSH
63674: LD_VAR 0 7
63678: PUSH
63679: LD_INT 1
63681: ARRAY
63682: PUSH
63683: LD_INT 2
63685: ARRAY
63686: PPUSH
63687: CALL_OW 116
63691: GO 63982
// if path > tag then
63693: LD_VAR 0 2
63697: PUSH
63698: LD_VAR 0 9
63702: GREATER
63703: IFFALSE 63911
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63705: LD_ADDR_VAR 0 6
63709: PUSH
63710: LD_VAR 0 5
63714: PPUSH
63715: LD_INT 91
63717: PUSH
63718: LD_VAR 0 4
63722: PUSH
63723: LD_INT 8
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PPUSH
63731: CALL_OW 72
63735: ST_TO_ADDR
// if nearEnemy then
63736: LD_VAR 0 6
63740: IFFALSE 63809
// begin if GetWeapon ( i ) = ru_time_lapser then
63742: LD_VAR 0 4
63746: PPUSH
63747: CALL_OW 264
63751: PUSH
63752: LD_INT 49
63754: EQUAL
63755: IFFALSE 63783
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63757: LD_VAR 0 4
63761: PPUSH
63762: LD_VAR 0 6
63766: PPUSH
63767: LD_VAR 0 4
63771: PPUSH
63772: CALL_OW 74
63776: PPUSH
63777: CALL_OW 112
63781: GO 63807
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63783: LD_VAR 0 4
63787: PPUSH
63788: LD_VAR 0 6
63792: PPUSH
63793: LD_VAR 0 4
63797: PPUSH
63798: CALL_OW 74
63802: PPUSH
63803: CALL 65067 0 2
// end else
63807: GO 63909
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63809: LD_VAR 0 4
63813: PPUSH
63814: LD_VAR 0 2
63818: PUSH
63819: LD_VAR 0 9
63823: ARRAY
63824: PUSH
63825: LD_INT 1
63827: ARRAY
63828: PPUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_VAR 0 9
63838: ARRAY
63839: PUSH
63840: LD_INT 2
63842: ARRAY
63843: PPUSH
63844: CALL_OW 297
63848: PUSH
63849: LD_INT 6
63851: GREATER
63852: IFFALSE 63895
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63854: LD_VAR 0 4
63858: PPUSH
63859: LD_VAR 0 2
63863: PUSH
63864: LD_VAR 0 9
63868: ARRAY
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PPUSH
63874: LD_VAR 0 2
63878: PUSH
63879: LD_VAR 0 9
63883: ARRAY
63884: PUSH
63885: LD_INT 2
63887: ARRAY
63888: PPUSH
63889: CALL_OW 114
63893: GO 63909
// SetTag ( i , tag ) ;
63895: LD_VAR 0 4
63899: PPUSH
63900: LD_VAR 0 9
63904: PPUSH
63905: CALL_OW 109
// end else
63909: GO 63982
// if enemy then
63911: LD_VAR 0 5
63915: IFFALSE 63982
// begin if GetWeapon ( i ) = ru_time_lapser then
63917: LD_VAR 0 4
63921: PPUSH
63922: CALL_OW 264
63926: PUSH
63927: LD_INT 49
63929: EQUAL
63930: IFFALSE 63958
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63932: LD_VAR 0 4
63936: PPUSH
63937: LD_VAR 0 5
63941: PPUSH
63942: LD_VAR 0 4
63946: PPUSH
63947: CALL_OW 74
63951: PPUSH
63952: CALL_OW 112
63956: GO 63982
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63958: LD_VAR 0 4
63962: PPUSH
63963: LD_VAR 0 5
63967: PPUSH
63968: LD_VAR 0 4
63972: PPUSH
63973: CALL_OW 74
63977: PPUSH
63978: CALL 65067 0 2
// end ; end ;
63982: GO 63554
63984: POP
63985: POP
// end ;
63986: LD_VAR 0 3
63990: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63991: LD_INT 0
63993: PPUSH
63994: PPUSH
63995: PPUSH
// if not unit or IsInUnit ( unit ) then
63996: LD_VAR 0 1
64000: NOT
64001: IFTRUE 64014
64003: PUSH
64004: LD_VAR 0 1
64008: PPUSH
64009: CALL_OW 310
64013: OR
64014: IFFALSE 64018
// exit ;
64016: GO 64109
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64018: LD_ADDR_VAR 0 4
64022: PUSH
64023: LD_VAR 0 1
64027: PPUSH
64028: CALL_OW 250
64032: PPUSH
64033: LD_VAR 0 2
64037: PPUSH
64038: LD_INT 1
64040: PPUSH
64041: CALL_OW 272
64045: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64046: LD_ADDR_VAR 0 5
64050: PUSH
64051: LD_VAR 0 1
64055: PPUSH
64056: CALL_OW 251
64060: PPUSH
64061: LD_VAR 0 2
64065: PPUSH
64066: LD_INT 1
64068: PPUSH
64069: CALL_OW 273
64073: ST_TO_ADDR
// if ValidHex ( x , y ) then
64074: LD_VAR 0 4
64078: PPUSH
64079: LD_VAR 0 5
64083: PPUSH
64084: CALL_OW 488
64088: IFFALSE 64109
// ComTurnXY ( unit , x , y ) ;
64090: LD_VAR 0 1
64094: PPUSH
64095: LD_VAR 0 4
64099: PPUSH
64100: LD_VAR 0 5
64104: PPUSH
64105: CALL_OW 118
// end ;
64109: LD_VAR 0 3
64113: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64114: LD_INT 0
64116: PPUSH
64117: PPUSH
// result := false ;
64118: LD_ADDR_VAR 0 3
64122: PUSH
64123: LD_INT 0
64125: ST_TO_ADDR
// if not units then
64126: LD_VAR 0 2
64130: NOT
64131: IFFALSE 64135
// exit ;
64133: GO 64180
// for i in units do
64135: LD_ADDR_VAR 0 4
64139: PUSH
64140: LD_VAR 0 2
64144: PUSH
64145: FOR_IN
64146: IFFALSE 64178
// if See ( side , i ) then
64148: LD_VAR 0 1
64152: PPUSH
64153: LD_VAR 0 4
64157: PPUSH
64158: CALL_OW 292
64162: IFFALSE 64176
// begin result := true ;
64164: LD_ADDR_VAR 0 3
64168: PUSH
64169: LD_INT 1
64171: ST_TO_ADDR
// exit ;
64172: POP
64173: POP
64174: GO 64180
// end ;
64176: GO 64145
64178: POP
64179: POP
// end ;
64180: LD_VAR 0 3
64184: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64185: LD_INT 0
64187: PPUSH
64188: PPUSH
64189: PPUSH
64190: PPUSH
// if not unit or not points then
64191: LD_VAR 0 1
64195: NOT
64196: IFTRUE 64205
64198: PUSH
64199: LD_VAR 0 2
64203: NOT
64204: OR
64205: IFFALSE 64209
// exit ;
64207: GO 64299
// dist := 99999 ;
64209: LD_ADDR_VAR 0 5
64213: PUSH
64214: LD_INT 99999
64216: ST_TO_ADDR
// for i in points do
64217: LD_ADDR_VAR 0 4
64221: PUSH
64222: LD_VAR 0 2
64226: PUSH
64227: FOR_IN
64228: IFFALSE 64297
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64230: LD_ADDR_VAR 0 6
64234: PUSH
64235: LD_VAR 0 1
64239: PPUSH
64240: LD_VAR 0 4
64244: PUSH
64245: LD_INT 1
64247: ARRAY
64248: PPUSH
64249: LD_VAR 0 4
64253: PUSH
64254: LD_INT 2
64256: ARRAY
64257: PPUSH
64258: CALL_OW 297
64262: ST_TO_ADDR
// if tmpDist < dist then
64263: LD_VAR 0 6
64267: PUSH
64268: LD_VAR 0 5
64272: LESS
64273: IFFALSE 64295
// begin result := i ;
64275: LD_ADDR_VAR 0 3
64279: PUSH
64280: LD_VAR 0 4
64284: ST_TO_ADDR
// dist := tmpDist ;
64285: LD_ADDR_VAR 0 5
64289: PUSH
64290: LD_VAR 0 6
64294: ST_TO_ADDR
// end ; end ;
64295: GO 64227
64297: POP
64298: POP
// end ;
64299: LD_VAR 0 3
64303: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64304: LD_INT 0
64306: PPUSH
// uc_side := side ;
64307: LD_ADDR_OWVAR 20
64311: PUSH
64312: LD_VAR 0 1
64316: ST_TO_ADDR
// uc_nation := 3 ;
64317: LD_ADDR_OWVAR 21
64321: PUSH
64322: LD_INT 3
64324: ST_TO_ADDR
// vc_chassis := 25 ;
64325: LD_ADDR_OWVAR 37
64329: PUSH
64330: LD_INT 25
64332: ST_TO_ADDR
// vc_engine := engine_siberite ;
64333: LD_ADDR_OWVAR 39
64337: PUSH
64338: LD_INT 3
64340: ST_TO_ADDR
// vc_control := control_computer ;
64341: LD_ADDR_OWVAR 38
64345: PUSH
64346: LD_INT 3
64348: ST_TO_ADDR
// vc_weapon := 59 ;
64349: LD_ADDR_OWVAR 40
64353: PUSH
64354: LD_INT 59
64356: ST_TO_ADDR
// result := CreateVehicle ;
64357: LD_ADDR_VAR 0 5
64361: PUSH
64362: CALL_OW 45
64366: ST_TO_ADDR
// SetDir ( result , d ) ;
64367: LD_VAR 0 5
64371: PPUSH
64372: LD_VAR 0 4
64376: PPUSH
64377: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64381: LD_VAR 0 5
64385: PPUSH
64386: LD_VAR 0 2
64390: PPUSH
64391: LD_VAR 0 3
64395: PPUSH
64396: LD_INT 0
64398: PPUSH
64399: CALL_OW 48
// end ;
64403: LD_VAR 0 5
64407: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
64412: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64413: LD_ADDR_VAR 0 2
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64436: LD_VAR 0 1
64440: NOT
64441: IFTRUE 64474
64443: PUSH
64444: LD_VAR 0 1
64448: PPUSH
64449: CALL_OW 264
64453: PUSH
64454: LD_INT 12
64456: PUSH
64457: LD_INT 51
64459: PUSH
64460: LD_INT 32
64462: PUSH
64463: LD_INT 89
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: IN
64472: NOT
64473: OR
64474: IFFALSE 64478
// exit ;
64476: GO 64576
// for i := 1 to 3 do
64478: LD_ADDR_VAR 0 3
64482: PUSH
64483: DOUBLE
64484: LD_INT 1
64486: DEC
64487: ST_TO_ADDR
64488: LD_INT 3
64490: PUSH
64491: FOR_TO
64492: IFFALSE 64574
// begin tmp := GetCargo ( cargo , i ) ;
64494: LD_ADDR_VAR 0 4
64498: PUSH
64499: LD_VAR 0 1
64503: PPUSH
64504: LD_VAR 0 3
64508: PPUSH
64509: CALL_OW 289
64513: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64514: LD_ADDR_VAR 0 2
64518: PUSH
64519: LD_VAR 0 2
64523: PPUSH
64524: LD_VAR 0 3
64528: PPUSH
64529: LD_VAR 0 4
64533: PPUSH
64534: CALL_OW 1
64538: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64539: LD_ADDR_VAR 0 2
64543: PUSH
64544: LD_VAR 0 2
64548: PPUSH
64549: LD_INT 4
64551: PPUSH
64552: LD_VAR 0 2
64556: PUSH
64557: LD_INT 4
64559: ARRAY
64560: PUSH
64561: LD_VAR 0 4
64565: PLUS
64566: PPUSH
64567: CALL_OW 1
64571: ST_TO_ADDR
// end ;
64572: GO 64491
64574: POP
64575: POP
// end ;
64576: LD_VAR 0 2
64580: RET
// export function Length ( array ) ; begin
64581: LD_INT 0
64583: PPUSH
// result := array + 0 ;
64584: LD_ADDR_VAR 0 2
64588: PUSH
64589: LD_VAR 0 1
64593: PUSH
64594: LD_INT 0
64596: PLUS
64597: ST_TO_ADDR
// end ;
64598: LD_VAR 0 2
64602: RET
// export function PrepareArray ( array ) ; begin
64603: LD_INT 0
64605: PPUSH
// result := array diff 0 ;
64606: LD_ADDR_VAR 0 2
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_INT 0
64618: DIFF
64619: ST_TO_ADDR
// if not result [ 1 ] then
64620: LD_VAR 0 2
64624: PUSH
64625: LD_INT 1
64627: ARRAY
64628: NOT
64629: IFFALSE 64649
// result := Delete ( result , 1 ) ;
64631: LD_ADDR_VAR 0 2
64635: PUSH
64636: LD_VAR 0 2
64640: PPUSH
64641: LD_INT 1
64643: PPUSH
64644: CALL_OW 3
64648: ST_TO_ADDR
// end ;
64649: LD_VAR 0 2
64653: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
64658: PPUSH
64659: PPUSH
// sibRocketRange := 25 ;
64660: LD_ADDR_VAR 0 6
64664: PUSH
64665: LD_INT 25
64667: ST_TO_ADDR
// result := false ;
64668: LD_ADDR_VAR 0 4
64672: PUSH
64673: LD_INT 0
64675: ST_TO_ADDR
// for i := 0 to 5 do
64676: LD_ADDR_VAR 0 5
64680: PUSH
64681: DOUBLE
64682: LD_INT 0
64684: DEC
64685: ST_TO_ADDR
64686: LD_INT 5
64688: PUSH
64689: FOR_TO
64690: IFFALSE 64757
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64692: LD_VAR 0 1
64696: PPUSH
64697: LD_VAR 0 5
64701: PPUSH
64702: LD_VAR 0 6
64706: PPUSH
64707: CALL_OW 272
64711: PPUSH
64712: LD_VAR 0 2
64716: PPUSH
64717: LD_VAR 0 5
64721: PPUSH
64722: LD_VAR 0 6
64726: PPUSH
64727: CALL_OW 273
64731: PPUSH
64732: LD_VAR 0 3
64736: PPUSH
64737: CALL_OW 309
64741: IFFALSE 64755
// begin result := true ;
64743: LD_ADDR_VAR 0 4
64747: PUSH
64748: LD_INT 1
64750: ST_TO_ADDR
// exit ;
64751: POP
64752: POP
64753: GO 64759
// end ;
64755: GO 64689
64757: POP
64758: POP
// end ;
64759: LD_VAR 0 4
64763: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64764: LD_INT 0
64766: PPUSH
64767: PPUSH
64768: PPUSH
// if btype = b_depot then
64769: LD_VAR 0 2
64773: PUSH
64774: LD_INT 0
64776: EQUAL
64777: IFFALSE 64789
// begin result := true ;
64779: LD_ADDR_VAR 0 3
64783: PUSH
64784: LD_INT 1
64786: ST_TO_ADDR
// exit ;
64787: GO 64909
// end ; pom := GetBase ( depot ) ;
64789: LD_ADDR_VAR 0 4
64793: PUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: CALL_OW 274
64803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64804: LD_ADDR_VAR 0 5
64808: PUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 248
64823: PPUSH
64824: CALL_OW 450
64828: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64829: LD_ADDR_VAR 0 3
64833: PUSH
64834: LD_VAR 0 4
64838: PPUSH
64839: LD_INT 1
64841: PPUSH
64842: CALL_OW 275
64846: PUSH
64847: LD_VAR 0 5
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: GREATEREQUAL
64856: IFFALSE 64882
64858: PUSH
64859: LD_VAR 0 4
64863: PPUSH
64864: LD_INT 2
64866: PPUSH
64867: CALL_OW 275
64871: PUSH
64872: LD_VAR 0 5
64876: PUSH
64877: LD_INT 2
64879: ARRAY
64880: GREATEREQUAL
64881: AND
64882: IFFALSE 64908
64884: PUSH
64885: LD_VAR 0 4
64889: PPUSH
64890: LD_INT 3
64892: PPUSH
64893: CALL_OW 275
64897: PUSH
64898: LD_VAR 0 5
64902: PUSH
64903: LD_INT 3
64905: ARRAY
64906: GREATEREQUAL
64907: AND
64908: ST_TO_ADDR
// end ;
64909: LD_VAR 0 3
64913: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64914: LD_INT 0
64916: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64917: LD_VAR 0 1
64921: PPUSH
64922: LD_VAR 0 2
64926: PPUSH
64927: LD_INT 0
64929: PPUSH
64930: LD_INT 0
64932: PPUSH
64933: LD_INT 1
64935: PPUSH
64936: LD_INT 0
64938: PPUSH
64939: CALL_OW 587
// end ;
64943: LD_VAR 0 3
64947: RET
// export function CenterOnNow ( unit ) ; begin
64948: LD_INT 0
64950: PPUSH
// result := IsInUnit ( unit ) ;
64951: LD_ADDR_VAR 0 2
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 310
64965: ST_TO_ADDR
// if not result then
64966: LD_VAR 0 2
64970: NOT
64971: IFFALSE 64983
// result := unit ;
64973: LD_ADDR_VAR 0 2
64977: PUSH
64978: LD_VAR 0 1
64982: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 87
// end ;
64992: LD_VAR 0 2
64996: RET
// export function ComMoveHex ( unit , hex ) ; begin
64997: LD_INT 0
64999: PPUSH
// if not hex then
65000: LD_VAR 0 2
65004: NOT
65005: IFFALSE 65009
// exit ;
65007: GO 65062
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65009: LD_VAR 0 2
65013: PUSH
65014: LD_INT 1
65016: ARRAY
65017: PPUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_INT 2
65025: ARRAY
65026: PPUSH
65027: CALL_OW 428
65031: IFFALSE 65035
// exit ;
65033: GO 65062
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65035: LD_VAR 0 1
65039: PPUSH
65040: LD_VAR 0 2
65044: PUSH
65045: LD_INT 1
65047: ARRAY
65048: PPUSH
65049: LD_VAR 0 2
65053: PUSH
65054: LD_INT 2
65056: ARRAY
65057: PPUSH
65058: CALL_OW 111
// end ;
65062: LD_VAR 0 3
65066: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65067: LD_INT 0
65069: PPUSH
65070: PPUSH
65071: PPUSH
// if not unit or not enemy then
65072: LD_VAR 0 1
65076: NOT
65077: IFTRUE 65086
65079: PUSH
65080: LD_VAR 0 2
65084: NOT
65085: OR
65086: IFFALSE 65090
// exit ;
65088: GO 65216
// x := GetX ( enemy ) ;
65090: LD_ADDR_VAR 0 4
65094: PUSH
65095: LD_VAR 0 2
65099: PPUSH
65100: CALL_OW 250
65104: ST_TO_ADDR
// y := GetY ( enemy ) ;
65105: LD_ADDR_VAR 0 5
65109: PUSH
65110: LD_VAR 0 2
65114: PPUSH
65115: CALL_OW 251
65119: ST_TO_ADDR
// if ValidHex ( x , y ) then
65120: LD_VAR 0 4
65124: PPUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: CALL_OW 488
65134: IFFALSE 65216
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
65136: LD_VAR 0 2
65140: PPUSH
65141: CALL_OW 247
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: IN
65156: IFTRUE 65179
65158: PUSH
65159: LD_VAR 0 1
65163: PPUSH
65164: CALL_OW 255
65168: PPUSH
65169: LD_VAR 0 2
65173: PPUSH
65174: CALL_OW 292
65178: OR
65179: IFFALSE 65197
// ComAttackUnit ( unit , enemy ) else
65181: LD_VAR 0 1
65185: PPUSH
65186: LD_VAR 0 2
65190: PPUSH
65191: CALL_OW 115
65195: GO 65216
// ComAgressiveMove ( unit , x , y ) ;
65197: LD_VAR 0 1
65201: PPUSH
65202: LD_VAR 0 4
65206: PPUSH
65207: LD_VAR 0 5
65211: PPUSH
65212: CALL_OW 114
// end ;
65216: LD_VAR 0 3
65220: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
65221: LD_INT 0
65223: PPUSH
65224: PPUSH
65225: PPUSH
// list := AreaToList ( area , 0 ) ;
65226: LD_ADDR_VAR 0 5
65230: PUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: LD_INT 0
65238: PPUSH
65239: CALL_OW 517
65243: ST_TO_ADDR
// if not list then
65244: LD_VAR 0 5
65248: NOT
65249: IFFALSE 65253
// exit ;
65251: GO 65383
// if all then
65253: LD_VAR 0 2
65257: IFFALSE 65345
// begin for i := 1 to list [ 1 ] do
65259: LD_ADDR_VAR 0 4
65263: PUSH
65264: DOUBLE
65265: LD_INT 1
65267: DEC
65268: ST_TO_ADDR
65269: LD_VAR 0 5
65273: PUSH
65274: LD_INT 1
65276: ARRAY
65277: PUSH
65278: FOR_TO
65279: IFFALSE 65341
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
65281: LD_ADDR_VAR 0 3
65285: PUSH
65286: LD_VAR 0 3
65290: PPUSH
65291: LD_VAR 0 3
65295: PUSH
65296: LD_INT 1
65298: PLUS
65299: PPUSH
65300: LD_VAR 0 5
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PUSH
65309: LD_VAR 0 4
65313: ARRAY
65314: PUSH
65315: LD_VAR 0 5
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: PUSH
65324: LD_VAR 0 4
65328: ARRAY
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PPUSH
65334: CALL_OW 1
65338: ST_TO_ADDR
65339: GO 65278
65341: POP
65342: POP
// exit ;
65343: GO 65383
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
65345: LD_ADDR_VAR 0 3
65349: PUSH
65350: LD_VAR 0 5
65354: PUSH
65355: LD_INT 1
65357: ARRAY
65358: PUSH
65359: LD_INT 1
65361: ARRAY
65362: PUSH
65363: LD_VAR 0 5
65367: PUSH
65368: LD_INT 2
65370: ARRAY
65371: PUSH
65372: LD_INT 1
65374: ARRAY
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: ST_TO_ADDR
// end ;
65383: LD_VAR 0 3
65387: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
65388: LD_INT 0
65390: PPUSH
65391: PPUSH
// list := AreaToList ( area , 0 ) ;
65392: LD_ADDR_VAR 0 4
65396: PUSH
65397: LD_VAR 0 1
65401: PPUSH
65402: LD_INT 0
65404: PPUSH
65405: CALL_OW 517
65409: ST_TO_ADDR
// if not list then
65410: LD_VAR 0 4
65414: NOT
65415: IFFALSE 65419
// exit ;
65417: GO 65460
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65419: LD_ADDR_VAR 0 3
65423: PUSH
65424: LD_VAR 0 4
65428: PUSH
65429: LD_INT 1
65431: ARRAY
65432: PUSH
65433: LD_INT 1
65435: ARRAY
65436: PUSH
65437: LD_VAR 0 4
65441: PUSH
65442: LD_INT 2
65444: ARRAY
65445: PUSH
65446: LD_INT 1
65448: ARRAY
65449: PUSH
65450: LD_VAR 0 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// end ;
65460: LD_VAR 0 3
65464: RET
// export function First ( array ) ; begin
65465: LD_INT 0
65467: PPUSH
// if not array then
65468: LD_VAR 0 1
65472: NOT
65473: IFFALSE 65477
// exit ;
65475: GO 65491
// result := array [ 1 ] ;
65477: LD_ADDR_VAR 0 2
65481: PUSH
65482: LD_VAR 0 1
65486: PUSH
65487: LD_INT 1
65489: ARRAY
65490: ST_TO_ADDR
// end ;
65491: LD_VAR 0 2
65495: RET
// export function Last ( array ) ; begin
65496: LD_INT 0
65498: PPUSH
// if not array then
65499: LD_VAR 0 1
65503: NOT
65504: IFFALSE 65508
// exit ;
65506: GO 65524
// result := array [ array ] ;
65508: LD_ADDR_VAR 0 2
65512: PUSH
65513: LD_VAR 0 1
65517: PUSH
65518: LD_VAR 0 1
65522: ARRAY
65523: ST_TO_ADDR
// end ;
65524: LD_VAR 0 2
65528: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65529: LD_INT 0
65531: PPUSH
65532: PPUSH
// result := [ ] ;
65533: LD_ADDR_VAR 0 5
65537: PUSH
65538: EMPTY
65539: ST_TO_ADDR
// if not array then
65540: LD_VAR 0 1
65544: NOT
65545: IFFALSE 65549
// exit ;
65547: GO 65661
// for i := 1 to array do
65549: LD_ADDR_VAR 0 6
65553: PUSH
65554: DOUBLE
65555: LD_INT 1
65557: DEC
65558: ST_TO_ADDR
65559: LD_VAR 0 1
65563: PUSH
65564: FOR_TO
65565: IFFALSE 65659
// if array [ i ] [ index ] = value then
65567: LD_VAR 0 1
65571: PUSH
65572: LD_VAR 0 6
65576: ARRAY
65577: PUSH
65578: LD_VAR 0 2
65582: ARRAY
65583: PUSH
65584: LD_VAR 0 3
65588: EQUAL
65589: IFFALSE 65657
// begin if indexColumn then
65591: LD_VAR 0 4
65595: IFFALSE 65631
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65597: LD_ADDR_VAR 0 5
65601: PUSH
65602: LD_VAR 0 5
65606: PPUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_VAR 0 6
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 4
65622: ARRAY
65623: PPUSH
65624: CALL 60669 0 2
65628: ST_TO_ADDR
65629: GO 65657
// result := Join ( result , array [ i ] ) ;
65631: LD_ADDR_VAR 0 5
65635: PUSH
65636: LD_VAR 0 5
65640: PPUSH
65641: LD_VAR 0 1
65645: PUSH
65646: LD_VAR 0 6
65650: ARRAY
65651: PPUSH
65652: CALL 60669 0 2
65656: ST_TO_ADDR
// end ;
65657: GO 65564
65659: POP
65660: POP
// end ;
65661: LD_VAR 0 5
65665: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65666: LD_INT 0
65668: PPUSH
// if not vehicles or not parkingPoint then
65669: LD_VAR 0 1
65673: NOT
65674: IFTRUE 65683
65676: PUSH
65677: LD_VAR 0 2
65681: NOT
65682: OR
65683: IFFALSE 65687
// exit ;
65685: GO 65785
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65687: LD_ADDR_VAR 0 1
65691: PUSH
65692: LD_VAR 0 1
65696: PPUSH
65697: LD_INT 50
65699: PUSH
65700: EMPTY
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: LD_INT 92
65708: PUSH
65709: LD_VAR 0 2
65713: PUSH
65714: LD_INT 1
65716: ARRAY
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 2
65725: ARRAY
65726: PUSH
65727: LD_INT 8
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PPUSH
65744: CALL_OW 72
65748: ST_TO_ADDR
// if not vehicles then
65749: LD_VAR 0 1
65753: NOT
65754: IFFALSE 65758
// exit ;
65756: GO 65785
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65758: LD_VAR 0 1
65762: PPUSH
65763: LD_VAR 0 2
65767: PUSH
65768: LD_INT 1
65770: ARRAY
65771: PPUSH
65772: LD_VAR 0 2
65776: PUSH
65777: LD_INT 2
65779: ARRAY
65780: PPUSH
65781: CALL_OW 111
// end ;
65785: LD_VAR 0 3
65789: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65790: LD_INT 0
65792: PPUSH
65793: PPUSH
65794: PPUSH
// if not side or not area then
65795: LD_VAR 0 1
65799: NOT
65800: IFTRUE 65809
65802: PUSH
65803: LD_VAR 0 2
65807: NOT
65808: OR
65809: IFFALSE 65813
// exit ;
65811: GO 65932
// tmp := AreaToList ( area , 0 ) ;
65813: LD_ADDR_VAR 0 5
65817: PUSH
65818: LD_VAR 0 2
65822: PPUSH
65823: LD_INT 0
65825: PPUSH
65826: CALL_OW 517
65830: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65831: LD_ADDR_VAR 0 4
65835: PUSH
65836: DOUBLE
65837: LD_INT 1
65839: DEC
65840: ST_TO_ADDR
65841: LD_VAR 0 5
65845: PUSH
65846: LD_INT 1
65848: ARRAY
65849: PUSH
65850: FOR_TO
65851: IFFALSE 65930
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65853: LD_VAR 0 5
65857: PUSH
65858: LD_INT 1
65860: ARRAY
65861: PUSH
65862: LD_VAR 0 4
65866: ARRAY
65867: PPUSH
65868: LD_VAR 0 5
65872: PUSH
65873: LD_INT 2
65875: ARRAY
65876: PUSH
65877: LD_VAR 0 4
65881: ARRAY
65882: PPUSH
65883: CALL_OW 351
65887: IFFALSE 65928
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65889: LD_VAR 0 5
65893: PUSH
65894: LD_INT 1
65896: ARRAY
65897: PUSH
65898: LD_VAR 0 4
65902: ARRAY
65903: PPUSH
65904: LD_VAR 0 5
65908: PUSH
65909: LD_INT 2
65911: ARRAY
65912: PUSH
65913: LD_VAR 0 4
65917: ARRAY
65918: PPUSH
65919: LD_VAR 0 1
65923: PPUSH
65924: CALL_OW 244
// end ;
65928: GO 65850
65930: POP
65931: POP
// end ;
65932: LD_VAR 0 3
65936: RET
// export function UniqueArray ( array ) ; var i ; begin
65937: LD_INT 0
65939: PPUSH
65940: PPUSH
// result := [ ] ;
65941: LD_ADDR_VAR 0 2
65945: PUSH
65946: EMPTY
65947: ST_TO_ADDR
// if not array then
65948: LD_VAR 0 1
65952: NOT
65953: IFFALSE 65957
// exit ;
65955: GO 66018
// for i := 1 to array do
65957: LD_ADDR_VAR 0 3
65961: PUSH
65962: DOUBLE
65963: LD_INT 1
65965: DEC
65966: ST_TO_ADDR
65967: LD_VAR 0 1
65971: PUSH
65972: FOR_TO
65973: IFFALSE 66016
// if not array [ i ] in result then
65975: LD_VAR 0 1
65979: PUSH
65980: LD_VAR 0 3
65984: ARRAY
65985: PUSH
65986: LD_VAR 0 2
65990: IN
65991: NOT
65992: IFFALSE 66014
// result := Join ( result , i ) ;
65994: LD_ADDR_VAR 0 2
65998: PUSH
65999: LD_VAR 0 2
66003: PPUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: CALL 60669 0 2
66013: ST_TO_ADDR
66014: GO 65972
66016: POP
66017: POP
// end ;
66018: LD_VAR 0 2
66022: RET
