// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ;
  14: END
// every 0 0$1 do var un , x , i ;
  15: GO 17
  17: DISABLE
  18: LD_INT 0
  20: PPUSH
  21: PPUSH
  22: PPUSH
// begin uc_side := 2 ;
  23: LD_ADDR_OWVAR 20
  27: PUSH
  28: LD_INT 2
  30: ST_TO_ADDR
// uc_nation := 2 ;
  31: LD_ADDR_OWVAR 21
  35: PUSH
  36: LD_INT 2
  38: ST_TO_ADDR
// i := 0 ;
  39: LD_ADDR_VAR 0 3
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_gun , 100 ) ;
  47: LD_INT 14
  49: PPUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 27
  58: PPUSH
  59: LD_INT 100
  61: PPUSH
  62: CALL 26393 0 5
// un := CreateVehicle ;
  66: LD_ADDR_VAR 0 1
  70: PUSH
  71: CALL_OW 45
  75: ST_TO_ADDR
// repeat wait ( 3 ) ;
  76: LD_INT 3
  78: PPUSH
  79: CALL_OW 67
// i := Inc ( i ) ;
  83: LD_ADDR_VAR 0 3
  87: PUSH
  88: LD_VAR 0 3
  92: PPUSH
  93: CALL 60625 0 1
  97: ST_TO_ADDR
// display_strings := i ;
  98: LD_ADDR_OWVAR 47
 102: PUSH
 103: LD_VAR 0 3
 107: ST_TO_ADDR
// x := PlaceUnitArea ( un , area130 , false ) ;
 108: LD_ADDR_VAR 0 2
 112: PUSH
 113: LD_VAR 0 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: CALL_OW 49
 128: ST_TO_ADDR
// until x ;
 129: LD_VAR 0 2
 133: IFFALSE 76
// end ; end_of_file
 135: PPOPN 3
 137: END
// export globalGameSaveCounter ; every 0 0$1 do
 138: GO 140
 140: DISABLE
// begin enable ;
 141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 142: LD_STRING updateTimer(
 144: PUSH
 145: LD_OWVAR 1
 149: STR
 150: PUSH
 151: LD_STRING );
 153: STR
 154: PPUSH
 155: CALL_OW 559
// end ;
 159: END
// every 0 0$1 do
 160: GO 162
 162: DISABLE
// begin globalGameSaveCounter := 0 ;
 163: LD_ADDR_EXP 1
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 171: LD_STRING setGameSaveCounter(0)
 173: PPUSH
 174: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 178: LD_STRING initStreamRollete();
 180: PPUSH
 181: CALL_OW 559
// InitStreamMode ;
 185: CALL 1528 0 0
// DefineStreamItems ( false ) ;
 189: LD_INT 0
 191: PPUSH
 192: CALL 1992 0 1
// end ;
 196: END
// export function SOS_MapStart ( ) ; begin
 197: LD_INT 0
 199: PPUSH
// if streamModeActive then
 200: LD_EXP 2
 204: IFFALSE 213
// DefineStreamItems ( true ) ;
 206: LD_INT 1
 208: PPUSH
 209: CALL 1992 0 1
// UpdateLuaVariables ( ) ;
 213: CALL 230 0 0
// UpdateFactoryWaypoints ( ) ;
 217: CALL 14994 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 221: CALL 15246 0 0
// end ;
 225: LD_VAR 0 1
 229: RET
// function UpdateLuaVariables ( ) ; begin
 230: LD_INT 0
 232: PPUSH
// if globalGameSaveCounter then
 233: LD_EXP 1
 237: IFFALSE 271
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 239: LD_ADDR_EXP 1
 243: PUSH
 244: LD_EXP 1
 248: PPUSH
 249: CALL 60625 0 1
 253: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 254: LD_STRING setGameSaveCounter(
 256: PUSH
 257: LD_EXP 1
 261: STR
 262: PUSH
 263: LD_STRING )
 265: STR
 266: PPUSH
 267: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 271: LD_STRING setGameDifficulty(
 273: PUSH
 274: LD_OWVAR 67
 278: STR
 279: PUSH
 280: LD_STRING )
 282: STR
 283: PPUSH
 284: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 288: LD_STRING displayDifficulty(
 290: PUSH
 291: LD_OWVAR 67
 295: STR
 296: PUSH
 297: LD_STRING )
 299: STR
 300: PPUSH
 301: CALL_OW 559
// end ;
 305: LD_VAR 0 1
 309: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 310: LD_INT 0
 312: PPUSH
// if p2 = stream_mode then
 313: LD_VAR 0 2
 317: PUSH
 318: LD_INT 100
 320: EQUAL
 321: IFFALSE 1324
// begin if not StreamModeActive then
 323: LD_EXP 2
 327: NOT
 328: IFFALSE 338
// StreamModeActive := true ;
 330: LD_ADDR_EXP 2
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// if p3 = 0 then
 338: LD_VAR 0 3
 342: PUSH
 343: LD_INT 0
 345: EQUAL
 346: IFFALSE 352
// InitStreamMode ;
 348: CALL 1528 0 0
// if p3 = 1 then
 352: LD_VAR 0 3
 356: PUSH
 357: LD_INT 1
 359: EQUAL
 360: IFFALSE 370
// sRocket := true ;
 362: LD_ADDR_EXP 7
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// if p3 = 2 then
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: IFFALSE 388
// sSpeed := true ;
 380: LD_ADDR_EXP 6
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// if p3 = 3 then
 388: LD_VAR 0 3
 392: PUSH
 393: LD_INT 3
 395: EQUAL
 396: IFFALSE 406
// sEngine := true ;
 398: LD_ADDR_EXP 8
 402: PUSH
 403: LD_INT 1
 405: ST_TO_ADDR
// if p3 = 4 then
 406: LD_VAR 0 3
 410: PUSH
 411: LD_INT 4
 413: EQUAL
 414: IFFALSE 424
// sSpec := true ;
 416: LD_ADDR_EXP 5
 420: PUSH
 421: LD_INT 1
 423: ST_TO_ADDR
// if p3 = 5 then
 424: LD_VAR 0 3
 428: PUSH
 429: LD_INT 5
 431: EQUAL
 432: IFFALSE 442
// sLevel := true ;
 434: LD_ADDR_EXP 9
 438: PUSH
 439: LD_INT 1
 441: ST_TO_ADDR
// if p3 = 6 then
 442: LD_VAR 0 3
 446: PUSH
 447: LD_INT 6
 449: EQUAL
 450: IFFALSE 460
// sArmoury := true ;
 452: LD_ADDR_EXP 10
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// if p3 = 7 then
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 7
 467: EQUAL
 468: IFFALSE 478
// sRadar := true ;
 470: LD_ADDR_EXP 11
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// if p3 = 8 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_INT 8
 485: EQUAL
 486: IFFALSE 496
// sBunker := true ;
 488: LD_ADDR_EXP 12
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// if p3 = 9 then
 496: LD_VAR 0 3
 500: PUSH
 501: LD_INT 9
 503: EQUAL
 504: IFFALSE 514
// sHack := true ;
 506: LD_ADDR_EXP 13
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// if p3 = 10 then
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 10
 521: EQUAL
 522: IFFALSE 532
// sFire := true ;
 524: LD_ADDR_EXP 14
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// if p3 = 11 then
 532: LD_VAR 0 3
 536: PUSH
 537: LD_INT 11
 539: EQUAL
 540: IFFALSE 550
// sRefresh := true ;
 542: LD_ADDR_EXP 15
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// if p3 = 12 then
 550: LD_VAR 0 3
 554: PUSH
 555: LD_INT 12
 557: EQUAL
 558: IFFALSE 568
// sExp := true ;
 560: LD_ADDR_EXP 16
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// if p3 = 13 then
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 13
 575: EQUAL
 576: IFFALSE 586
// sDepot := true ;
 578: LD_ADDR_EXP 17
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// if p3 = 14 then
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 14
 593: EQUAL
 594: IFFALSE 604
// sFlag := true ;
 596: LD_ADDR_EXP 18
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if p3 = 15 then
 604: LD_VAR 0 3
 608: PUSH
 609: LD_INT 15
 611: EQUAL
 612: IFFALSE 622
// sKamikadze := true ;
 614: LD_ADDR_EXP 26
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
// if p3 = 16 then
 622: LD_VAR 0 3
 626: PUSH
 627: LD_INT 16
 629: EQUAL
 630: IFFALSE 640
// sTroll := true ;
 632: LD_ADDR_EXP 27
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// if p3 = 17 then
 640: LD_VAR 0 3
 644: PUSH
 645: LD_INT 17
 647: EQUAL
 648: IFFALSE 658
// sSlow := true ;
 650: LD_ADDR_EXP 28
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// if p3 = 18 then
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 18
 665: EQUAL
 666: IFFALSE 676
// sLack := true ;
 668: LD_ADDR_EXP 29
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// if p3 = 19 then
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 19
 683: EQUAL
 684: IFFALSE 694
// sTank := true ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// if p3 = 20 then
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 20
 701: EQUAL
 702: IFFALSE 712
// sRemote := true ;
 704: LD_ADDR_EXP 32
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// if p3 = 21 then
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 21
 719: EQUAL
 720: IFFALSE 730
// sPowell := true ;
 722: LD_ADDR_EXP 33
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// if p3 = 22 then
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 22
 737: EQUAL
 738: IFFALSE 748
// sTeleport := true ;
 740: LD_ADDR_EXP 36
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// if p3 = 23 then
 748: LD_VAR 0 3
 752: PUSH
 753: LD_INT 23
 755: EQUAL
 756: IFFALSE 766
// sOilTower := true ;
 758: LD_ADDR_EXP 38
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// if p3 = 24 then
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 24
 773: EQUAL
 774: IFFALSE 784
// sShovel := true ;
 776: LD_ADDR_EXP 39
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// if p3 = 25 then
 784: LD_VAR 0 3
 788: PUSH
 789: LD_INT 25
 791: EQUAL
 792: IFFALSE 802
// sSheik := true ;
 794: LD_ADDR_EXP 40
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// if p3 = 26 then
 802: LD_VAR 0 3
 806: PUSH
 807: LD_INT 26
 809: EQUAL
 810: IFFALSE 820
// sEarthquake := true ;
 812: LD_ADDR_EXP 42
 816: PUSH
 817: LD_INT 1
 819: ST_TO_ADDR
// if p3 = 27 then
 820: LD_VAR 0 3
 824: PUSH
 825: LD_INT 27
 827: EQUAL
 828: IFFALSE 838
// sAI := true ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// if p3 = 28 then
 838: LD_VAR 0 3
 842: PUSH
 843: LD_INT 28
 845: EQUAL
 846: IFFALSE 856
// sCargo := true ;
 848: LD_ADDR_EXP 46
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// if p3 = 29 then
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 29
 863: EQUAL
 864: IFFALSE 874
// sDLaser := true ;
 866: LD_ADDR_EXP 47
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// if p3 = 30 then
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 30
 881: EQUAL
 882: IFFALSE 892
// sExchange := true ;
 884: LD_ADDR_EXP 48
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
// if p3 = 31 then
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 31
 899: EQUAL
 900: IFFALSE 910
// sFac := true ;
 902: LD_ADDR_EXP 49
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// if p3 = 32 then
 910: LD_VAR 0 3
 914: PUSH
 915: LD_INT 32
 917: EQUAL
 918: IFFALSE 928
// sPower := true ;
 920: LD_ADDR_EXP 50
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// if p3 = 33 then
 928: LD_VAR 0 3
 932: PUSH
 933: LD_INT 33
 935: EQUAL
 936: IFFALSE 946
// sRandom := true ;
 938: LD_ADDR_EXP 51
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// if p3 = 34 then
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 34
 953: EQUAL
 954: IFFALSE 964
// sShield := true ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_INT 1
 963: ST_TO_ADDR
// if p3 = 35 then
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 35
 971: EQUAL
 972: IFFALSE 982
// sTime := true ;
 974: LD_ADDR_EXP 53
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// if p3 = 36 then
 982: LD_VAR 0 3
 986: PUSH
 987: LD_INT 36
 989: EQUAL
 990: IFFALSE 1000
// sTools := true ;
 992: LD_ADDR_EXP 54
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// if p3 = 101 then
1000: LD_VAR 0 3
1004: PUSH
1005: LD_INT 101
1007: EQUAL
1008: IFFALSE 1018
// sSold := true ;
1010: LD_ADDR_EXP 19
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if p3 = 102 then
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 102
1025: EQUAL
1026: IFFALSE 1036
// sDiff := true ;
1028: LD_ADDR_EXP 20
1032: PUSH
1033: LD_INT 1
1035: ST_TO_ADDR
// if p3 = 103 then
1036: LD_VAR 0 3
1040: PUSH
1041: LD_INT 103
1043: EQUAL
1044: IFFALSE 1054
// sFog := true ;
1046: LD_ADDR_EXP 23
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// if p3 = 104 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 104
1061: EQUAL
1062: IFFALSE 1072
// sReset := true ;
1064: LD_ADDR_EXP 24
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// if p3 = 105 then
1072: LD_VAR 0 3
1076: PUSH
1077: LD_INT 105
1079: EQUAL
1080: IFFALSE 1090
// sSun := true ;
1082: LD_ADDR_EXP 25
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// if p3 = 106 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 106
1097: EQUAL
1098: IFFALSE 1108
// sTiger := true ;
1100: LD_ADDR_EXP 21
1104: PUSH
1105: LD_INT 1
1107: ST_TO_ADDR
// if p3 = 107 then
1108: LD_VAR 0 3
1112: PUSH
1113: LD_INT 107
1115: EQUAL
1116: IFFALSE 1126
// sBomb := true ;
1118: LD_ADDR_EXP 22
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// if p3 = 108 then
1126: LD_VAR 0 3
1130: PUSH
1131: LD_INT 108
1133: EQUAL
1134: IFFALSE 1144
// sWound := true ;
1136: LD_ADDR_EXP 30
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// if p3 = 109 then
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 109
1151: EQUAL
1152: IFFALSE 1162
// sBetray := true ;
1154: LD_ADDR_EXP 34
1158: PUSH
1159: LD_INT 1
1161: ST_TO_ADDR
// if p3 = 110 then
1162: LD_VAR 0 3
1166: PUSH
1167: LD_INT 110
1169: EQUAL
1170: IFFALSE 1180
// sContamin := true ;
1172: LD_ADDR_EXP 35
1176: PUSH
1177: LD_INT 1
1179: ST_TO_ADDR
// if p3 = 111 then
1180: LD_VAR 0 3
1184: PUSH
1185: LD_INT 111
1187: EQUAL
1188: IFFALSE 1198
// sOil := true ;
1190: LD_ADDR_EXP 37
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if p3 = 112 then
1198: LD_VAR 0 3
1202: PUSH
1203: LD_INT 112
1205: EQUAL
1206: IFFALSE 1216
// sStu := true ;
1208: LD_ADDR_EXP 41
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if p3 = 113 then
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 113
1223: EQUAL
1224: IFFALSE 1234
// sBazooka := true ;
1226: LD_ADDR_EXP 44
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// if p3 = 114 then
1234: LD_VAR 0 3
1238: PUSH
1239: LD_INT 114
1241: EQUAL
1242: IFFALSE 1252
// sMortar := true ;
1244: LD_ADDR_EXP 45
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// if p3 = 115 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 115
1259: EQUAL
1260: IFFALSE 1270
// sRanger := true ;
1262: LD_ADDR_EXP 55
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// if p3 = 116 then
1270: LD_VAR 0 3
1274: PUSH
1275: LD_INT 116
1277: EQUAL
1278: IFFALSE 1288
// sComputer := true ;
1280: LD_ADDR_EXP 56
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// if p3 = 117 then
1288: LD_VAR 0 3
1292: PUSH
1293: LD_INT 117
1295: EQUAL
1296: IFFALSE 1306
// s30 := true ;
1298: LD_ADDR_EXP 57
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// if p3 = 118 then
1306: LD_VAR 0 3
1310: PUSH
1311: LD_INT 118
1313: EQUAL
1314: IFFALSE 1324
// s60 := true ;
1316: LD_ADDR_EXP 58
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// end ; if p2 = hack_mode then
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 101
1331: EQUAL
1332: IFFALSE 1460
// begin case p3 of 1 :
1334: LD_VAR 0 3
1338: PUSH
1339: LD_INT 1
1341: DOUBLE
1342: EQUAL
1343: IFTRUE 1347
1345: GO 1354
1347: POP
// hHackUnlimitedResources ; 2 :
1348: CALL 13607 0 0
1352: GO 1460
1354: LD_INT 2
1356: DOUBLE
1357: EQUAL
1358: IFTRUE 1362
1360: GO 1369
1362: POP
// hHackSetLevel10 ; 3 :
1363: CALL 13740 0 0
1367: GO 1460
1369: LD_INT 3
1371: DOUBLE
1372: EQUAL
1373: IFTRUE 1377
1375: GO 1384
1377: POP
// hHackSetLevel10YourUnits ; 4 :
1378: CALL 13825 0 0
1382: GO 1460
1384: LD_INT 4
1386: DOUBLE
1387: EQUAL
1388: IFTRUE 1392
1390: GO 1399
1392: POP
// hHackInvincible ; 5 :
1393: CALL 14273 0 0
1397: GO 1460
1399: LD_INT 5
1401: DOUBLE
1402: EQUAL
1403: IFTRUE 1407
1405: GO 1414
1407: POP
// hHackInvisible ; 6 :
1408: CALL 14384 0 0
1412: GO 1460
1414: LD_INT 6
1416: DOUBLE
1417: EQUAL
1418: IFTRUE 1422
1420: GO 1429
1422: POP
// hHackChangeYourSide ; 7 :
1423: CALL 14441 0 0
1427: GO 1460
1429: LD_INT 7
1431: DOUBLE
1432: EQUAL
1433: IFTRUE 1437
1435: GO 1444
1437: POP
// hHackChangeUnitSide ; 8 :
1438: CALL 14483 0 0
1442: GO 1460
1444: LD_INT 8
1446: DOUBLE
1447: EQUAL
1448: IFTRUE 1452
1450: GO 1459
1452: POP
// hHackFog ; end ;
1453: CALL 14584 0 0
1457: GO 1460
1459: POP
// end ; if p2 = game_save_mode then
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 102
1467: EQUAL
1468: IFFALSE 1523
// begin if p3 = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1490
// globalGameSaveCounter := p4 ;
1480: LD_ADDR_EXP 1
1484: PUSH
1485: LD_VAR 0 4
1489: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1490: LD_VAR 0 3
1494: PUSH
1495: LD_INT 2
1497: EQUAL
1498: PUSH
1499: LD_EXP 1
1503: AND
1504: IFFALSE 1523
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1506: LD_STRING setGameSaveCounter(
1508: PUSH
1509: LD_EXP 1
1513: STR
1514: PUSH
1515: LD_STRING )
1517: STR
1518: PPUSH
1519: CALL_OW 559
// end ; end ;
1523: LD_VAR 0 7
1527: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1528: LD_INT 0
1530: PPUSH
// streamModeActive := false ;
1531: LD_ADDR_EXP 2
1535: PUSH
1536: LD_INT 0
1538: ST_TO_ADDR
// normalCounter := 36 ;
1539: LD_ADDR_EXP 3
1543: PUSH
1544: LD_INT 36
1546: ST_TO_ADDR
// hardcoreCounter := 18 ;
1547: LD_ADDR_EXP 4
1551: PUSH
1552: LD_INT 18
1554: ST_TO_ADDR
// sRocket := false ;
1555: LD_ADDR_EXP 7
1559: PUSH
1560: LD_INT 0
1562: ST_TO_ADDR
// sSpeed := false ;
1563: LD_ADDR_EXP 6
1567: PUSH
1568: LD_INT 0
1570: ST_TO_ADDR
// sEngine := false ;
1571: LD_ADDR_EXP 8
1575: PUSH
1576: LD_INT 0
1578: ST_TO_ADDR
// sSpec := false ;
1579: LD_ADDR_EXP 5
1583: PUSH
1584: LD_INT 0
1586: ST_TO_ADDR
// sLevel := false ;
1587: LD_ADDR_EXP 9
1591: PUSH
1592: LD_INT 0
1594: ST_TO_ADDR
// sArmoury := false ;
1595: LD_ADDR_EXP 10
1599: PUSH
1600: LD_INT 0
1602: ST_TO_ADDR
// sRadar := false ;
1603: LD_ADDR_EXP 11
1607: PUSH
1608: LD_INT 0
1610: ST_TO_ADDR
// sBunker := false ;
1611: LD_ADDR_EXP 12
1615: PUSH
1616: LD_INT 0
1618: ST_TO_ADDR
// sHack := false ;
1619: LD_ADDR_EXP 13
1623: PUSH
1624: LD_INT 0
1626: ST_TO_ADDR
// sFire := false ;
1627: LD_ADDR_EXP 14
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// sRefresh := false ;
1635: LD_ADDR_EXP 15
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// sExp := false ;
1643: LD_ADDR_EXP 16
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// sDepot := false ;
1651: LD_ADDR_EXP 17
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// sFlag := false ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// sKamikadze := false ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 0
1674: ST_TO_ADDR
// sTroll := false ;
1675: LD_ADDR_EXP 27
1679: PUSH
1680: LD_INT 0
1682: ST_TO_ADDR
// sSlow := false ;
1683: LD_ADDR_EXP 28
1687: PUSH
1688: LD_INT 0
1690: ST_TO_ADDR
// sLack := false ;
1691: LD_ADDR_EXP 29
1695: PUSH
1696: LD_INT 0
1698: ST_TO_ADDR
// sTank := false ;
1699: LD_ADDR_EXP 31
1703: PUSH
1704: LD_INT 0
1706: ST_TO_ADDR
// sRemote := false ;
1707: LD_ADDR_EXP 32
1711: PUSH
1712: LD_INT 0
1714: ST_TO_ADDR
// sPowell := false ;
1715: LD_ADDR_EXP 33
1719: PUSH
1720: LD_INT 0
1722: ST_TO_ADDR
// sTeleport := false ;
1723: LD_ADDR_EXP 36
1727: PUSH
1728: LD_INT 0
1730: ST_TO_ADDR
// sOilTower := false ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: LD_INT 0
1738: ST_TO_ADDR
// sShovel := false ;
1739: LD_ADDR_EXP 39
1743: PUSH
1744: LD_INT 0
1746: ST_TO_ADDR
// sSheik := false ;
1747: LD_ADDR_EXP 40
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// sEarthquake := false ;
1755: LD_ADDR_EXP 42
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// sAI := false ;
1763: LD_ADDR_EXP 43
1767: PUSH
1768: LD_INT 0
1770: ST_TO_ADDR
// sCargo := false ;
1771: LD_ADDR_EXP 46
1775: PUSH
1776: LD_INT 0
1778: ST_TO_ADDR
// sDLaser := false ;
1779: LD_ADDR_EXP 47
1783: PUSH
1784: LD_INT 0
1786: ST_TO_ADDR
// sExchange := false ;
1787: LD_ADDR_EXP 48
1791: PUSH
1792: LD_INT 0
1794: ST_TO_ADDR
// sFac := false ;
1795: LD_ADDR_EXP 49
1799: PUSH
1800: LD_INT 0
1802: ST_TO_ADDR
// sPower := false ;
1803: LD_ADDR_EXP 50
1807: PUSH
1808: LD_INT 0
1810: ST_TO_ADDR
// sRandom := false ;
1811: LD_ADDR_EXP 51
1815: PUSH
1816: LD_INT 0
1818: ST_TO_ADDR
// sShield := false ;
1819: LD_ADDR_EXP 52
1823: PUSH
1824: LD_INT 0
1826: ST_TO_ADDR
// sTime := false ;
1827: LD_ADDR_EXP 53
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// sTools := false ;
1835: LD_ADDR_EXP 54
1839: PUSH
1840: LD_INT 0
1842: ST_TO_ADDR
// sSold := false ;
1843: LD_ADDR_EXP 19
1847: PUSH
1848: LD_INT 0
1850: ST_TO_ADDR
// sDiff := false ;
1851: LD_ADDR_EXP 20
1855: PUSH
1856: LD_INT 0
1858: ST_TO_ADDR
// sFog := false ;
1859: LD_ADDR_EXP 23
1863: PUSH
1864: LD_INT 0
1866: ST_TO_ADDR
// sReset := false ;
1867: LD_ADDR_EXP 24
1871: PUSH
1872: LD_INT 0
1874: ST_TO_ADDR
// sSun := false ;
1875: LD_ADDR_EXP 25
1879: PUSH
1880: LD_INT 0
1882: ST_TO_ADDR
// sTiger := false ;
1883: LD_ADDR_EXP 21
1887: PUSH
1888: LD_INT 0
1890: ST_TO_ADDR
// sBomb := false ;
1891: LD_ADDR_EXP 22
1895: PUSH
1896: LD_INT 0
1898: ST_TO_ADDR
// sWound := false ;
1899: LD_ADDR_EXP 30
1903: PUSH
1904: LD_INT 0
1906: ST_TO_ADDR
// sBetray := false ;
1907: LD_ADDR_EXP 34
1911: PUSH
1912: LD_INT 0
1914: ST_TO_ADDR
// sContamin := false ;
1915: LD_ADDR_EXP 35
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// sOil := false ;
1923: LD_ADDR_EXP 37
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// sStu := false ;
1931: LD_ADDR_EXP 41
1935: PUSH
1936: LD_INT 0
1938: ST_TO_ADDR
// sBazooka := false ;
1939: LD_ADDR_EXP 44
1943: PUSH
1944: LD_INT 0
1946: ST_TO_ADDR
// sMortar := false ;
1947: LD_ADDR_EXP 45
1951: PUSH
1952: LD_INT 0
1954: ST_TO_ADDR
// sRanger := false ;
1955: LD_ADDR_EXP 55
1959: PUSH
1960: LD_INT 0
1962: ST_TO_ADDR
// sComputer := false ;
1963: LD_ADDR_EXP 56
1967: PUSH
1968: LD_INT 0
1970: ST_TO_ADDR
// s30 := false ;
1971: LD_ADDR_EXP 57
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// s60 := false ;
1979: LD_ADDR_EXP 58
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// end ;
1987: LD_VAR 0 1
1991: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := [ ] ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: EMPTY
2007: ST_TO_ADDR
// if campaign_id = 1 then
2008: LD_OWVAR 69
2012: PUSH
2013: LD_INT 1
2015: EQUAL
2016: IFFALSE 5182
// begin case mission_number of 1 :
2018: LD_OWVAR 70
2022: PUSH
2023: LD_INT 1
2025: DOUBLE
2026: EQUAL
2027: IFTRUE 2031
2029: GO 2107
2031: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: LD_INT 11
2045: PUSH
2046: LD_INT 12
2048: PUSH
2049: LD_INT 15
2051: PUSH
2052: LD_INT 16
2054: PUSH
2055: LD_INT 22
2057: PUSH
2058: LD_INT 23
2060: PUSH
2061: LD_INT 26
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 101
2077: PUSH
2078: LD_INT 102
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 116
2086: PUSH
2087: LD_INT 117
2089: PUSH
2090: LD_INT 118
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
2105: GO 5180
2107: LD_INT 2
2109: DOUBLE
2110: EQUAL
2111: IFTRUE 2115
2113: GO 2199
2115: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: LD_INT 4
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 12
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 16
2138: PUSH
2139: LD_INT 22
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 26
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 101
2161: PUSH
2162: LD_INT 102
2164: PUSH
2165: LD_INT 105
2167: PUSH
2168: LD_INT 106
2170: PUSH
2171: LD_INT 108
2173: PUSH
2174: LD_INT 116
2176: PUSH
2177: LD_INT 117
2179: PUSH
2180: LD_INT 118
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: ST_TO_ADDR
2197: GO 5180
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2295
2207: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: LD_INT 5
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 15
2230: PUSH
2231: LD_INT 16
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 26
2239: PUSH
2240: LD_INT 36
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 101
2257: PUSH
2258: LD_INT 102
2260: PUSH
2261: LD_INT 105
2263: PUSH
2264: LD_INT 106
2266: PUSH
2267: LD_INT 108
2269: PUSH
2270: LD_INT 116
2272: PUSH
2273: LD_INT 117
2275: PUSH
2276: LD_INT 118
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: ST_TO_ADDR
2293: GO 5180
2295: LD_INT 4
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2399
2303: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 5
2317: PUSH
2318: LD_INT 8
2320: PUSH
2321: LD_INT 11
2323: PUSH
2324: LD_INT 12
2326: PUSH
2327: LD_INT 15
2329: PUSH
2330: LD_INT 16
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 23
2338: PUSH
2339: LD_INT 26
2341: PUSH
2342: LD_INT 36
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 101
2361: PUSH
2362: LD_INT 102
2364: PUSH
2365: LD_INT 105
2367: PUSH
2368: LD_INT 106
2370: PUSH
2371: LD_INT 108
2373: PUSH
2374: LD_INT 116
2376: PUSH
2377: LD_INT 117
2379: PUSH
2380: LD_INT 118
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: ST_TO_ADDR
2397: GO 5180
2399: LD_INT 5
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2519
2407: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_INT 2
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: LD_INT 8
2427: PUSH
2428: LD_INT 11
2430: PUSH
2431: LD_INT 12
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 16
2439: PUSH
2440: LD_INT 22
2442: PUSH
2443: LD_INT 23
2445: PUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 26
2451: PUSH
2452: LD_INT 36
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 101
2473: PUSH
2474: LD_INT 102
2476: PUSH
2477: LD_INT 105
2479: PUSH
2480: LD_INT 106
2482: PUSH
2483: LD_INT 108
2485: PUSH
2486: LD_INT 109
2488: PUSH
2489: LD_INT 112
2491: PUSH
2492: LD_INT 116
2494: PUSH
2495: LD_INT 117
2497: PUSH
2498: LD_INT 118
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: ST_TO_ADDR
2517: GO 5180
2519: LD_INT 6
2521: DOUBLE
2522: EQUAL
2523: IFTRUE 2527
2525: GO 2659
2527: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: LD_INT 4
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 6
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 11
2550: PUSH
2551: LD_INT 12
2553: PUSH
2554: LD_INT 15
2556: PUSH
2557: LD_INT 16
2559: PUSH
2560: LD_INT 20
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: LD_INT 25
2574: PUSH
2575: LD_INT 26
2577: PUSH
2578: LD_INT 30
2580: PUSH
2581: LD_INT 31
2583: PUSH
2584: LD_INT 32
2586: PUSH
2587: LD_INT 36
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 101
2613: PUSH
2614: LD_INT 102
2616: PUSH
2617: LD_INT 105
2619: PUSH
2620: LD_INT 106
2622: PUSH
2623: LD_INT 108
2625: PUSH
2626: LD_INT 109
2628: PUSH
2629: LD_INT 112
2631: PUSH
2632: LD_INT 116
2634: PUSH
2635: LD_INT 117
2637: PUSH
2638: LD_INT 118
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: ST_TO_ADDR
2657: GO 5180
2659: LD_INT 7
2661: DOUBLE
2662: EQUAL
2663: IFTRUE 2667
2665: GO 2779
2667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_INT 2
2675: PUSH
2676: LD_INT 4
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 11
2687: PUSH
2688: LD_INT 12
2690: PUSH
2691: LD_INT 15
2693: PUSH
2694: LD_INT 16
2696: PUSH
2697: LD_INT 20
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 22
2705: PUSH
2706: LD_INT 23
2708: PUSH
2709: LD_INT 25
2711: PUSH
2712: LD_INT 26
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 101
2733: PUSH
2734: LD_INT 102
2736: PUSH
2737: LD_INT 103
2739: PUSH
2740: LD_INT 105
2742: PUSH
2743: LD_INT 106
2745: PUSH
2746: LD_INT 108
2748: PUSH
2749: LD_INT 112
2751: PUSH
2752: LD_INT 116
2754: PUSH
2755: LD_INT 117
2757: PUSH
2758: LD_INT 118
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
2777: GO 5180
2779: LD_INT 8
2781: DOUBLE
2782: EQUAL
2783: IFTRUE 2787
2785: GO 2927
2787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 4
2798: PUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: LD_INT 11
2813: PUSH
2814: LD_INT 12
2816: PUSH
2817: LD_INT 15
2819: PUSH
2820: LD_INT 16
2822: PUSH
2823: LD_INT 20
2825: PUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 23
2834: PUSH
2835: LD_INT 25
2837: PUSH
2838: LD_INT 26
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: LD_INT 32
2849: PUSH
2850: LD_INT 36
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 101
2877: PUSH
2878: LD_INT 102
2880: PUSH
2881: LD_INT 103
2883: PUSH
2884: LD_INT 105
2886: PUSH
2887: LD_INT 106
2889: PUSH
2890: LD_INT 108
2892: PUSH
2893: LD_INT 109
2895: PUSH
2896: LD_INT 112
2898: PUSH
2899: LD_INT 116
2901: PUSH
2902: LD_INT 117
2904: PUSH
2905: LD_INT 118
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: ST_TO_ADDR
2925: GO 5180
2927: LD_INT 9
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 3083
2935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 4
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: LD_INT 11
2961: PUSH
2962: LD_INT 12
2964: PUSH
2965: LD_INT 15
2967: PUSH
2968: LD_INT 16
2970: PUSH
2971: LD_INT 20
2973: PUSH
2974: LD_INT 21
2976: PUSH
2977: LD_INT 22
2979: PUSH
2980: LD_INT 23
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 26
2988: PUSH
2989: LD_INT 28
2991: PUSH
2992: LD_INT 30
2994: PUSH
2995: LD_INT 31
2997: PUSH
2998: LD_INT 32
3000: PUSH
3001: LD_INT 36
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 101
3029: PUSH
3030: LD_INT 102
3032: PUSH
3033: LD_INT 103
3035: PUSH
3036: LD_INT 105
3038: PUSH
3039: LD_INT 106
3041: PUSH
3042: LD_INT 108
3044: PUSH
3045: LD_INT 109
3047: PUSH
3048: LD_INT 112
3050: PUSH
3051: LD_INT 114
3053: PUSH
3054: LD_INT 116
3056: PUSH
3057: LD_INT 117
3059: PUSH
3060: LD_INT 118
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: ST_TO_ADDR
3081: GO 5180
3083: LD_INT 10
3085: DOUBLE
3086: EQUAL
3087: IFTRUE 3091
3089: GO 3287
3091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: LD_INT 5
3105: PUSH
3106: LD_INT 6
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: LD_INT 8
3114: PUSH
3115: LD_INT 9
3117: PUSH
3118: LD_INT 10
3120: PUSH
3121: LD_INT 11
3123: PUSH
3124: LD_INT 12
3126: PUSH
3127: LD_INT 13
3129: PUSH
3130: LD_INT 14
3132: PUSH
3133: LD_INT 15
3135: PUSH
3136: LD_INT 16
3138: PUSH
3139: LD_INT 17
3141: PUSH
3142: LD_INT 18
3144: PUSH
3145: LD_INT 19
3147: PUSH
3148: LD_INT 20
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 23
3159: PUSH
3160: LD_INT 24
3162: PUSH
3163: LD_INT 25
3165: PUSH
3166: LD_INT 26
3168: PUSH
3169: LD_INT 28
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 31
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: LD_INT 36
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 101
3217: PUSH
3218: LD_INT 102
3220: PUSH
3221: LD_INT 103
3223: PUSH
3224: LD_INT 104
3226: PUSH
3227: LD_INT 105
3229: PUSH
3230: LD_INT 106
3232: PUSH
3233: LD_INT 107
3235: PUSH
3236: LD_INT 108
3238: PUSH
3239: LD_INT 109
3241: PUSH
3242: LD_INT 110
3244: PUSH
3245: LD_INT 111
3247: PUSH
3248: LD_INT 112
3250: PUSH
3251: LD_INT 114
3253: PUSH
3254: LD_INT 116
3256: PUSH
3257: LD_INT 117
3259: PUSH
3260: LD_INT 118
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: ST_TO_ADDR
3285: GO 5180
3287: LD_INT 11
3289: DOUBLE
3290: EQUAL
3291: IFTRUE 3295
3293: GO 3499
3295: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 6
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 8
3321: PUSH
3322: LD_INT 9
3324: PUSH
3325: LD_INT 10
3327: PUSH
3328: LD_INT 11
3330: PUSH
3331: LD_INT 12
3333: PUSH
3334: LD_INT 13
3336: PUSH
3337: LD_INT 14
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 16
3345: PUSH
3346: LD_INT 17
3348: PUSH
3349: LD_INT 18
3351: PUSH
3352: LD_INT 19
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 23
3366: PUSH
3367: LD_INT 24
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 28
3378: PUSH
3379: LD_INT 30
3381: PUSH
3382: LD_INT 31
3384: PUSH
3385: LD_INT 32
3387: PUSH
3388: LD_INT 34
3390: PUSH
3391: LD_INT 36
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 101
3429: PUSH
3430: LD_INT 102
3432: PUSH
3433: LD_INT 103
3435: PUSH
3436: LD_INT 104
3438: PUSH
3439: LD_INT 105
3441: PUSH
3442: LD_INT 106
3444: PUSH
3445: LD_INT 107
3447: PUSH
3448: LD_INT 108
3450: PUSH
3451: LD_INT 109
3453: PUSH
3454: LD_INT 110
3456: PUSH
3457: LD_INT 111
3459: PUSH
3460: LD_INT 112
3462: PUSH
3463: LD_INT 114
3465: PUSH
3466: LD_INT 116
3468: PUSH
3469: LD_INT 117
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: ST_TO_ADDR
3497: GO 5180
3499: LD_INT 12
3501: DOUBLE
3502: EQUAL
3503: IFTRUE 3507
3505: GO 3727
3507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: LD_INT 5
3527: PUSH
3528: LD_INT 6
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: LD_INT 9
3539: PUSH
3540: LD_INT 10
3542: PUSH
3543: LD_INT 11
3545: PUSH
3546: LD_INT 12
3548: PUSH
3549: LD_INT 13
3551: PUSH
3552: LD_INT 14
3554: PUSH
3555: LD_INT 15
3557: PUSH
3558: LD_INT 16
3560: PUSH
3561: LD_INT 17
3563: PUSH
3564: LD_INT 18
3566: PUSH
3567: LD_INT 19
3569: PUSH
3570: LD_INT 20
3572: PUSH
3573: LD_INT 21
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 24
3584: PUSH
3585: LD_INT 25
3587: PUSH
3588: LD_INT 26
3590: PUSH
3591: LD_INT 27
3593: PUSH
3594: LD_INT 28
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 31
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 33
3608: PUSH
3609: LD_INT 34
3611: PUSH
3612: LD_INT 36
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 101
3653: PUSH
3654: LD_INT 102
3656: PUSH
3657: LD_INT 103
3659: PUSH
3660: LD_INT 104
3662: PUSH
3663: LD_INT 105
3665: PUSH
3666: LD_INT 106
3668: PUSH
3669: LD_INT 107
3671: PUSH
3672: LD_INT 108
3674: PUSH
3675: LD_INT 109
3677: PUSH
3678: LD_INT 110
3680: PUSH
3681: LD_INT 111
3683: PUSH
3684: LD_INT 112
3686: PUSH
3687: LD_INT 113
3689: PUSH
3690: LD_INT 114
3692: PUSH
3693: LD_INT 116
3695: PUSH
3696: LD_INT 117
3698: PUSH
3699: LD_INT 118
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
3725: GO 5180
3727: LD_INT 13
3729: DOUBLE
3730: EQUAL
3731: IFTRUE 3735
3733: GO 3943
3735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: LD_INT 8
3758: PUSH
3759: LD_INT 9
3761: PUSH
3762: LD_INT 10
3764: PUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: LD_INT 14
3773: PUSH
3774: LD_INT 15
3776: PUSH
3777: LD_INT 16
3779: PUSH
3780: LD_INT 17
3782: PUSH
3783: LD_INT 18
3785: PUSH
3786: LD_INT 19
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 25
3806: PUSH
3807: LD_INT 26
3809: PUSH
3810: LD_INT 27
3812: PUSH
3813: LD_INT 28
3815: PUSH
3816: LD_INT 30
3818: PUSH
3819: LD_INT 31
3821: PUSH
3822: LD_INT 32
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 34
3830: PUSH
3831: LD_INT 36
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 101
3869: PUSH
3870: LD_INT 102
3872: PUSH
3873: LD_INT 103
3875: PUSH
3876: LD_INT 104
3878: PUSH
3879: LD_INT 105
3881: PUSH
3882: LD_INT 106
3884: PUSH
3885: LD_INT 107
3887: PUSH
3888: LD_INT 108
3890: PUSH
3891: LD_INT 109
3893: PUSH
3894: LD_INT 110
3896: PUSH
3897: LD_INT 111
3899: PUSH
3900: LD_INT 112
3902: PUSH
3903: LD_INT 113
3905: PUSH
3906: LD_INT 114
3908: PUSH
3909: LD_INT 116
3911: PUSH
3912: LD_INT 117
3914: PUSH
3915: LD_INT 118
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: ST_TO_ADDR
3941: GO 5180
3943: LD_INT 14
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 4175
3951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: LD_INT 6
3974: PUSH
3975: LD_INT 7
3977: PUSH
3978: LD_INT 8
3980: PUSH
3981: LD_INT 9
3983: PUSH
3984: LD_INT 10
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 12
3992: PUSH
3993: LD_INT 13
3995: PUSH
3996: LD_INT 14
3998: PUSH
3999: LD_INT 15
4001: PUSH
4002: LD_INT 16
4004: PUSH
4005: LD_INT 17
4007: PUSH
4008: LD_INT 18
4010: PUSH
4011: LD_INT 19
4013: PUSH
4014: LD_INT 20
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 23
4025: PUSH
4026: LD_INT 24
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 26
4034: PUSH
4035: LD_INT 27
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 29
4043: PUSH
4044: LD_INT 30
4046: PUSH
4047: LD_INT 31
4049: PUSH
4050: LD_INT 32
4052: PUSH
4053: LD_INT 33
4055: PUSH
4056: LD_INT 34
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 101
4101: PUSH
4102: LD_INT 102
4104: PUSH
4105: LD_INT 103
4107: PUSH
4108: LD_INT 104
4110: PUSH
4111: LD_INT 105
4113: PUSH
4114: LD_INT 106
4116: PUSH
4117: LD_INT 107
4119: PUSH
4120: LD_INT 108
4122: PUSH
4123: LD_INT 109
4125: PUSH
4126: LD_INT 110
4128: PUSH
4129: LD_INT 111
4131: PUSH
4132: LD_INT 112
4134: PUSH
4135: LD_INT 113
4137: PUSH
4138: LD_INT 114
4140: PUSH
4141: LD_INT 116
4143: PUSH
4144: LD_INT 117
4146: PUSH
4147: LD_INT 118
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5180
4175: LD_INT 15
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4407
4183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: LD_INT 6
4206: PUSH
4207: LD_INT 7
4209: PUSH
4210: LD_INT 8
4212: PUSH
4213: LD_INT 9
4215: PUSH
4216: LD_INT 10
4218: PUSH
4219: LD_INT 11
4221: PUSH
4222: LD_INT 12
4224: PUSH
4225: LD_INT 13
4227: PUSH
4228: LD_INT 14
4230: PUSH
4231: LD_INT 15
4233: PUSH
4234: LD_INT 16
4236: PUSH
4237: LD_INT 17
4239: PUSH
4240: LD_INT 18
4242: PUSH
4243: LD_INT 19
4245: PUSH
4246: LD_INT 20
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 23
4257: PUSH
4258: LD_INT 24
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 27
4269: PUSH
4270: LD_INT 28
4272: PUSH
4273: LD_INT 29
4275: PUSH
4276: LD_INT 30
4278: PUSH
4279: LD_INT 31
4281: PUSH
4282: LD_INT 32
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 34
4290: PUSH
4291: LD_INT 36
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 101
4333: PUSH
4334: LD_INT 102
4336: PUSH
4337: LD_INT 103
4339: PUSH
4340: LD_INT 104
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 106
4348: PUSH
4349: LD_INT 107
4351: PUSH
4352: LD_INT 108
4354: PUSH
4355: LD_INT 109
4357: PUSH
4358: LD_INT 110
4360: PUSH
4361: LD_INT 111
4363: PUSH
4364: LD_INT 112
4366: PUSH
4367: LD_INT 113
4369: PUSH
4370: LD_INT 114
4372: PUSH
4373: LD_INT 116
4375: PUSH
4376: LD_INT 117
4378: PUSH
4379: LD_INT 118
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 5180
4407: LD_INT 16
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4551
4415: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: LD_INT 7
4432: PUSH
4433: LD_INT 11
4435: PUSH
4436: LD_INT 12
4438: PUSH
4439: LD_INT 15
4441: PUSH
4442: LD_INT 16
4444: PUSH
4445: LD_INT 20
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 23
4456: PUSH
4457: LD_INT 25
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 31
4468: PUSH
4469: LD_INT 32
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 34
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 101
4501: PUSH
4502: LD_INT 102
4504: PUSH
4505: LD_INT 103
4507: PUSH
4508: LD_INT 106
4510: PUSH
4511: LD_INT 108
4513: PUSH
4514: LD_INT 112
4516: PUSH
4517: LD_INT 113
4519: PUSH
4520: LD_INT 114
4522: PUSH
4523: LD_INT 116
4525: PUSH
4526: LD_INT 117
4528: PUSH
4529: LD_INT 118
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5180
4551: LD_INT 17
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4783
4559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: LD_INT 5
4579: PUSH
4580: LD_INT 6
4582: PUSH
4583: LD_INT 7
4585: PUSH
4586: LD_INT 8
4588: PUSH
4589: LD_INT 9
4591: PUSH
4592: LD_INT 10
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 12
4600: PUSH
4601: LD_INT 13
4603: PUSH
4604: LD_INT 14
4606: PUSH
4607: LD_INT 15
4609: PUSH
4610: LD_INT 16
4612: PUSH
4613: LD_INT 17
4615: PUSH
4616: LD_INT 18
4618: PUSH
4619: LD_INT 19
4621: PUSH
4622: LD_INT 20
4624: PUSH
4625: LD_INT 21
4627: PUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 23
4633: PUSH
4634: LD_INT 24
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 26
4642: PUSH
4643: LD_INT 27
4645: PUSH
4646: LD_INT 28
4648: PUSH
4649: LD_INT 29
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 33
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 36
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 101
4709: PUSH
4710: LD_INT 102
4712: PUSH
4713: LD_INT 103
4715: PUSH
4716: LD_INT 104
4718: PUSH
4719: LD_INT 105
4721: PUSH
4722: LD_INT 106
4724: PUSH
4725: LD_INT 107
4727: PUSH
4728: LD_INT 108
4730: PUSH
4731: LD_INT 109
4733: PUSH
4734: LD_INT 110
4736: PUSH
4737: LD_INT 111
4739: PUSH
4740: LD_INT 112
4742: PUSH
4743: LD_INT 113
4745: PUSH
4746: LD_INT 114
4748: PUSH
4749: LD_INT 116
4751: PUSH
4752: LD_INT 117
4754: PUSH
4755: LD_INT 118
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5180
4783: LD_INT 18
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4939
4791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 7
4808: PUSH
4809: LD_INT 11
4811: PUSH
4812: LD_INT 12
4814: PUSH
4815: LD_INT 15
4817: PUSH
4818: LD_INT 16
4820: PUSH
4821: LD_INT 20
4823: PUSH
4824: LD_INT 21
4826: PUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 23
4832: PUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 26
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 31
4844: PUSH
4845: LD_INT 32
4847: PUSH
4848: LD_INT 33
4850: PUSH
4851: LD_INT 34
4853: PUSH
4854: LD_INT 35
4856: PUSH
4857: LD_INT 36
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PUSH
4883: LD_INT 101
4885: PUSH
4886: LD_INT 102
4888: PUSH
4889: LD_INT 103
4891: PUSH
4892: LD_INT 106
4894: PUSH
4895: LD_INT 108
4897: PUSH
4898: LD_INT 112
4900: PUSH
4901: LD_INT 113
4903: PUSH
4904: LD_INT 114
4906: PUSH
4907: LD_INT 115
4909: PUSH
4910: LD_INT 116
4912: PUSH
4913: LD_INT 117
4915: PUSH
4916: LD_INT 118
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5180
4939: LD_INT 19
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5179
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 6
4970: PUSH
4971: LD_INT 7
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: LD_INT 9
4979: PUSH
4980: LD_INT 10
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: LD_INT 15
4997: PUSH
4998: LD_INT 16
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: LD_INT 18
5006: PUSH
5007: LD_INT 19
5009: PUSH
5010: LD_INT 20
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: LD_INT 25
5027: PUSH
5028: LD_INT 26
5030: PUSH
5031: LD_INT 27
5033: PUSH
5034: LD_INT 28
5036: PUSH
5037: LD_INT 29
5039: PUSH
5040: LD_INT 30
5042: PUSH
5043: LD_INT 31
5045: PUSH
5046: LD_INT 32
5048: PUSH
5049: LD_INT 33
5051: PUSH
5052: LD_INT 34
5054: PUSH
5055: LD_INT 35
5057: PUSH
5058: LD_INT 36
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 101
5101: PUSH
5102: LD_INT 102
5104: PUSH
5105: LD_INT 103
5107: PUSH
5108: LD_INT 104
5110: PUSH
5111: LD_INT 105
5113: PUSH
5114: LD_INT 106
5116: PUSH
5117: LD_INT 107
5119: PUSH
5120: LD_INT 108
5122: PUSH
5123: LD_INT 109
5125: PUSH
5126: LD_INT 110
5128: PUSH
5129: LD_INT 111
5131: PUSH
5132: LD_INT 112
5134: PUSH
5135: LD_INT 113
5137: PUSH
5138: LD_INT 114
5140: PUSH
5141: LD_INT 115
5143: PUSH
5144: LD_INT 116
5146: PUSH
5147: LD_INT 117
5149: PUSH
5150: LD_INT 118
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5180
5179: POP
// end else
5180: GO 5411
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: LD_INT 2
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 5
5201: PUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: LD_INT 9
5213: PUSH
5214: LD_INT 10
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: LD_INT 12
5222: PUSH
5223: LD_INT 13
5225: PUSH
5226: LD_INT 14
5228: PUSH
5229: LD_INT 15
5231: PUSH
5232: LD_INT 16
5234: PUSH
5235: LD_INT 17
5237: PUSH
5238: LD_INT 18
5240: PUSH
5241: LD_INT 19
5243: PUSH
5244: LD_INT 20
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_INT 23
5255: PUSH
5256: LD_INT 24
5258: PUSH
5259: LD_INT 25
5261: PUSH
5262: LD_INT 26
5264: PUSH
5265: LD_INT 27
5267: PUSH
5268: LD_INT 28
5270: PUSH
5271: LD_INT 29
5273: PUSH
5274: LD_INT 30
5276: PUSH
5277: LD_INT 31
5279: PUSH
5280: LD_INT 32
5282: PUSH
5283: LD_INT 33
5285: PUSH
5286: LD_INT 34
5288: PUSH
5289: LD_INT 35
5291: PUSH
5292: LD_INT 36
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 101
5335: PUSH
5336: LD_INT 102
5338: PUSH
5339: LD_INT 103
5341: PUSH
5342: LD_INT 104
5344: PUSH
5345: LD_INT 105
5347: PUSH
5348: LD_INT 106
5350: PUSH
5351: LD_INT 107
5353: PUSH
5354: LD_INT 108
5356: PUSH
5357: LD_INT 109
5359: PUSH
5360: LD_INT 110
5362: PUSH
5363: LD_INT 111
5365: PUSH
5366: LD_INT 112
5368: PUSH
5369: LD_INT 113
5371: PUSH
5372: LD_INT 114
5374: PUSH
5375: LD_INT 115
5377: PUSH
5378: LD_INT 116
5380: PUSH
5381: LD_INT 117
5383: PUSH
5384: LD_INT 118
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: ST_TO_ADDR
// if result then
5411: LD_VAR 0 2
5415: IFFALSE 6201
// begin normal :=  ;
5417: LD_ADDR_VAR 0 5
5421: PUSH
5422: LD_STRING 
5424: ST_TO_ADDR
// hardcore :=  ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_STRING 
5432: ST_TO_ADDR
// active :=  ;
5433: LD_ADDR_VAR 0 7
5437: PUSH
5438: LD_STRING 
5440: ST_TO_ADDR
// for i = 1 to normalCounter do
5441: LD_ADDR_VAR 0 8
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 3
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5558
// begin tmp := 0 ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_STRING 0
5466: ST_TO_ADDR
// if result [ 1 ] then
5467: LD_VAR 0 2
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: IFFALSE 5540
// if result [ 1 ] [ 1 ] = i then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PUSH
5490: LD_VAR 0 8
5494: EQUAL
5495: IFFALSE 5540
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 3
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// tmp := 1 ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_STRING 1
5539: ST_TO_ADDR
// end ; normal := normal & tmp ;
5540: LD_ADDR_VAR 0 5
5544: PUSH
5545: LD_VAR 0 5
5549: PUSH
5550: LD_VAR 0 3
5554: STR
5555: ST_TO_ADDR
// end ;
5556: GO 5456
5558: POP
5559: POP
// for i = 1 to hardcoreCounter do
5560: LD_ADDR_VAR 0 8
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_EXP 4
5574: PUSH
5575: FOR_TO
5576: IFFALSE 5681
// begin tmp := 0 ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_STRING 0
5585: ST_TO_ADDR
// if result [ 2 ] then
5586: LD_VAR 0 2
5590: PUSH
5591: LD_INT 2
5593: ARRAY
5594: IFFALSE 5663
// if result [ 2 ] [ 1 ] = 100 + i then
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 2
5603: ARRAY
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PUSH
5609: LD_INT 100
5611: PUSH
5612: LD_VAR 0 8
5616: PLUS
5617: EQUAL
5618: IFFALSE 5663
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_VAR 0 2
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: CALL_OW 3
5649: PPUSH
5650: CALL_OW 1
5654: ST_TO_ADDR
// tmp := 1 ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_STRING 1
5662: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5663: LD_ADDR_VAR 0 6
5667: PUSH
5668: LD_VAR 0 6
5672: PUSH
5673: LD_VAR 0 3
5677: STR
5678: ST_TO_ADDR
// end ;
5679: GO 5575
5681: POP
5682: POP
// if isGameLoad then
5683: LD_VAR 0 1
5687: IFFALSE 6162
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5689: LD_ADDR_VAR 0 4
5693: PUSH
5694: LD_EXP 7
5698: PUSH
5699: LD_EXP 6
5703: PUSH
5704: LD_EXP 8
5708: PUSH
5709: LD_EXP 5
5713: PUSH
5714: LD_EXP 9
5718: PUSH
5719: LD_EXP 10
5723: PUSH
5724: LD_EXP 11
5728: PUSH
5729: LD_EXP 12
5733: PUSH
5734: LD_EXP 13
5738: PUSH
5739: LD_EXP 14
5743: PUSH
5744: LD_EXP 15
5748: PUSH
5749: LD_EXP 16
5753: PUSH
5754: LD_EXP 17
5758: PUSH
5759: LD_EXP 18
5763: PUSH
5764: LD_EXP 26
5768: PUSH
5769: LD_EXP 27
5773: PUSH
5774: LD_EXP 28
5778: PUSH
5779: LD_EXP 29
5783: PUSH
5784: LD_EXP 31
5788: PUSH
5789: LD_EXP 32
5793: PUSH
5794: LD_EXP 33
5798: PUSH
5799: LD_EXP 36
5803: PUSH
5804: LD_EXP 38
5808: PUSH
5809: LD_EXP 39
5813: PUSH
5814: LD_EXP 40
5818: PUSH
5819: LD_EXP 42
5823: PUSH
5824: LD_EXP 43
5828: PUSH
5829: LD_EXP 46
5833: PUSH
5834: LD_EXP 47
5838: PUSH
5839: LD_EXP 48
5843: PUSH
5844: LD_EXP 49
5848: PUSH
5849: LD_EXP 50
5853: PUSH
5854: LD_EXP 51
5858: PUSH
5859: LD_EXP 52
5863: PUSH
5864: LD_EXP 53
5868: PUSH
5869: LD_EXP 54
5873: PUSH
5874: LD_EXP 19
5878: PUSH
5879: LD_EXP 20
5883: PUSH
5884: LD_EXP 23
5888: PUSH
5889: LD_EXP 24
5893: PUSH
5894: LD_EXP 25
5898: PUSH
5899: LD_EXP 21
5903: PUSH
5904: LD_EXP 22
5908: PUSH
5909: LD_EXP 30
5913: PUSH
5914: LD_EXP 34
5918: PUSH
5919: LD_EXP 35
5923: PUSH
5924: LD_EXP 37
5928: PUSH
5929: LD_EXP 41
5933: PUSH
5934: LD_EXP 44
5938: PUSH
5939: LD_EXP 45
5943: PUSH
5944: LD_EXP 55
5948: PUSH
5949: LD_EXP 56
5953: PUSH
5954: LD_EXP 57
5958: PUSH
5959: LD_EXP 58
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: ST_TO_ADDR
// tmp :=  ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_STRING 
6027: ST_TO_ADDR
// for i = 1 to normalCounter do
6028: LD_ADDR_VAR 0 8
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 3
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6080
// begin if flags [ i ] then
6046: LD_VAR 0 4
6050: PUSH
6051: LD_VAR 0 8
6055: ARRAY
6056: IFFALSE 6078
// tmp := tmp & i & ; ;
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 3
6067: PUSH
6068: LD_VAR 0 8
6072: STR
6073: PUSH
6074: LD_STRING ;
6076: STR
6077: ST_TO_ADDR
// end ;
6078: GO 6043
6080: POP
6081: POP
// for i = 1 to hardcoreCounter do
6082: LD_ADDR_VAR 0 8
6086: PUSH
6087: DOUBLE
6088: LD_INT 1
6090: DEC
6091: ST_TO_ADDR
6092: LD_EXP 4
6096: PUSH
6097: FOR_TO
6098: IFFALSE 6144
// begin if flags [ normalCounter + i ] then
6100: LD_VAR 0 4
6104: PUSH
6105: LD_EXP 3
6109: PUSH
6110: LD_VAR 0 8
6114: PLUS
6115: ARRAY
6116: IFFALSE 6142
// tmp := tmp & ( 100 + i ) & ; ;
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 100
6130: PUSH
6131: LD_VAR 0 8
6135: PLUS
6136: STR
6137: PUSH
6138: LD_STRING ;
6140: STR
6141: ST_TO_ADDR
// end ;
6142: GO 6097
6144: POP
6145: POP
// if tmp then
6146: LD_VAR 0 3
6150: IFFALSE 6162
// active := tmp ;
6152: LD_ADDR_VAR 0 7
6156: PUSH
6157: LD_VAR 0 3
6161: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6162: LD_STRING getStreamItemsFromMission("
6164: PUSH
6165: LD_VAR 0 5
6169: STR
6170: PUSH
6171: LD_STRING ","
6173: STR
6174: PUSH
6175: LD_VAR 0 6
6179: STR
6180: PUSH
6181: LD_STRING ","
6183: STR
6184: PUSH
6185: LD_VAR 0 7
6189: STR
6190: PUSH
6191: LD_STRING ")
6193: STR
6194: PPUSH
6195: CALL_OW 559
// end else
6199: GO 6208
// ToLua ( getStreamItemsFromMission("","","") ) ;
6201: LD_STRING getStreamItemsFromMission("","","")
6203: PPUSH
6204: CALL_OW 559
// end ;
6208: LD_VAR 0 2
6212: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6213: LD_EXP 2
6217: PUSH
6218: LD_EXP 7
6222: AND
6223: IFFALSE 6347
6225: GO 6227
6227: DISABLE
6228: LD_INT 0
6230: PPUSH
6231: PPUSH
// begin enable ;
6232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_OWVAR 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 34
6255: PUSH
6256: LD_INT 7
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 34
6265: PUSH
6266: LD_INT 45
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 34
6275: PUSH
6276: LD_INT 28
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 34
6285: PUSH
6286: LD_INT 47
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not tmp then
6309: LD_VAR 0 2
6313: NOT
6314: IFFALSE 6318
// exit ;
6316: GO 6347
// for i in tmp do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 2
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6345
// begin SetLives ( i , 0 ) ;
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 234
// end ;
6343: GO 6328
6345: POP
6346: POP
// end ;
6347: PPOPN 2
6349: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6350: LD_EXP 2
6354: PUSH
6355: LD_EXP 8
6359: AND
6360: IFFALSE 6444
6362: GO 6364
6364: DISABLE
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
// begin enable ;
6369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_INT 22
6377: PUSH
6378: LD_OWVAR 2
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 69
6405: ST_TO_ADDR
// if not tmp then
6406: LD_VAR 0 2
6410: NOT
6411: IFFALSE 6415
// exit ;
6413: GO 6444
// for i in tmp do
6415: LD_ADDR_VAR 0 1
6419: PUSH
6420: LD_VAR 0 2
6424: PUSH
6425: FOR_IN
6426: IFFALSE 6442
// begin SetLives ( i , 0 ) ;
6428: LD_VAR 0 1
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 234
// end ;
6440: GO 6425
6442: POP
6443: POP
// end ;
6444: PPOPN 2
6446: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6447: LD_EXP 2
6451: PUSH
6452: LD_EXP 5
6456: AND
6457: IFFALSE 6550
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
// begin enable ;
6465: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 22
6473: PUSH
6474: LD_OWVAR 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 25
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 25
6508: PUSH
6509: LD_INT 8
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 69
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6548
// begin SetClass ( i , 1 ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 336
// end ;
6546: GO 6531
6548: POP
6549: POP
// end ;
6550: PPOPN 1
6552: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6553: LD_EXP 2
6557: PUSH
6558: LD_EXP 6
6562: AND
6563: PUSH
6564: LD_OWVAR 65
6568: PUSH
6569: LD_INT 7
6571: LESS
6572: AND
6573: IFFALSE 6587
6575: GO 6577
6577: DISABLE
// begin enable ;
6578: ENABLE
// game_speed := 7 ;
6579: LD_ADDR_OWVAR 65
6583: PUSH
6584: LD_INT 7
6586: ST_TO_ADDR
// end ;
6587: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6588: LD_EXP 2
6592: PUSH
6593: LD_EXP 9
6597: AND
6598: IFFALSE 6800
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
6607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 81
6615: PUSH
6616: LD_OWVAR 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// if not tmp then
6644: LD_VAR 0 3
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6800
// if tmp > 5 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 5
6660: GREATER
6661: IFFALSE 6673
// k := 5 else
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 5
6670: ST_TO_ADDR
6671: GO 6683
// k := tmp ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ST_TO_ADDR
// for i := 1 to k do
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: DOUBLE
6689: LD_INT 1
6691: DEC
6692: ST_TO_ADDR
6693: LD_VAR 0 2
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6798
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: PPUSH
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 4
6719: MOD
6720: PUSH
6721: LD_INT 1
6723: PLUS
6724: PPUSH
6725: CALL_OW 259
6729: PUSH
6730: LD_INT 10
6732: LESS
6733: IFFALSE 6796
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6735: LD_VAR 0 3
6739: PUSH
6740: LD_VAR 0 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 4
6753: MOD
6754: PUSH
6755: LD_INT 1
6757: PLUS
6758: PPUSH
6759: LD_VAR 0 3
6763: PUSH
6764: LD_VAR 0 1
6768: ARRAY
6769: PPUSH
6770: LD_VAR 0 1
6774: PUSH
6775: LD_INT 4
6777: MOD
6778: PUSH
6779: LD_INT 1
6781: PLUS
6782: PPUSH
6783: CALL_OW 259
6787: PUSH
6788: LD_INT 1
6790: PLUS
6791: PPUSH
6792: CALL_OW 237
6796: GO 6698
6798: POP
6799: POP
// end ;
6800: PPOPN 3
6802: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6803: LD_EXP 2
6807: PUSH
6808: LD_EXP 10
6812: AND
6813: IFFALSE 6833
6815: GO 6817
6817: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6818: LD_INT 4
6820: PPUSH
6821: LD_OWVAR 2
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 324
6833: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6834: LD_EXP 2
6838: PUSH
6839: LD_EXP 39
6843: AND
6844: IFFALSE 6864
6846: GO 6848
6848: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6849: LD_INT 19
6851: PPUSH
6852: LD_OWVAR 2
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 324
6864: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6865: LD_EXP 2
6869: PUSH
6870: LD_EXP 11
6874: AND
6875: IFFALSE 6977
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
// begin enable ;
6884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_OWVAR 2
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 11
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: LD_INT 30
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: ST_TO_ADDR
// if not tmp then
6939: LD_VAR 0 2
6943: NOT
6944: IFFALSE 6948
// exit ;
6946: GO 6977
// for i in tmp do
6948: LD_ADDR_VAR 0 1
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: FOR_IN
6959: IFFALSE 6975
// begin SetLives ( i , 0 ) ;
6961: LD_VAR 0 1
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 234
// end ;
6973: GO 6958
6975: POP
6976: POP
// end ;
6977: PPOPN 2
6979: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6980: LD_EXP 2
6984: PUSH
6985: LD_EXP 12
6989: AND
6990: IFFALSE 7010
6992: GO 6994
6994: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6995: LD_INT 32
6997: PPUSH
6998: LD_OWVAR 2
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 324
7010: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7011: LD_EXP 2
7015: PUSH
7016: LD_EXP 13
7020: AND
7021: IFFALSE 7202
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_OWVAR 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 33
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: ST_TO_ADDR
// if not tmp then
7067: LD_VAR 0 2
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7202
// side := 0 ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// for i := 1 to 8 do
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: DOUBLE
7090: LD_INT 1
7092: DEC
7093: ST_TO_ADDR
7094: LD_INT 8
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7146
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7100: LD_OWVAR 2
7104: PUSH
7105: LD_VAR 0 1
7109: NONEQUAL
7110: PUSH
7111: LD_OWVAR 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 81
7125: PUSH
7126: LD_INT 2
7128: EQUAL
7129: AND
7130: IFFALSE 7144
// begin side := i ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// break ;
7142: GO 7146
// end ;
7144: GO 7097
7146: POP
7147: POP
// if not side then
7148: LD_VAR 0 3
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7202
// for i := 1 to tmp do
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 2
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7200
// if Prob ( 60 ) then
7175: LD_INT 60
7177: PPUSH
7178: CALL_OW 13
7182: IFFALSE 7198
// SetSide ( i , side ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 235
7198: GO 7172
7200: POP
7201: POP
// end ;
7202: PPOPN 3
7204: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7205: LD_EXP 2
7209: PUSH
7210: LD_EXP 15
7214: AND
7215: IFFALSE 7334
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7223: LD_ADDR_VAR 0 1
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_OWVAR 2
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: LD_INT 23
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PPUSH
7272: CALL_OW 69
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7332
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 257
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: IN
7308: IFFALSE 7330
// SetClass ( un , rand ( 1 , 4 ) ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 4
7320: PPUSH
7321: CALL_OW 12
7325: PPUSH
7326: CALL_OW 336
7330: GO 7277
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7337: LD_EXP 2
7341: PUSH
7342: LD_EXP 14
7346: AND
7347: IFFALSE 7426
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_OWVAR 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: ST_TO_ADDR
// if not tmp then
7391: LD_VAR 0 1
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 7426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7400: LD_VAR 0 1
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 100
7421: PPUSH
7422: CALL_OW 234
// end ;
7426: PPOPN 1
7428: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7429: LD_EXP 2
7433: PUSH
7434: LD_EXP 16
7438: AND
7439: IFFALSE 7537
7441: GO 7443
7443: DISABLE
7444: LD_INT 0
7446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_OWVAR 2
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if not tmp then
7483: LD_VAR 0 1
7487: NOT
7488: IFFALSE 7492
// exit ;
7490: GO 7537
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7492: LD_VAR 0 1
7496: PUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 12
7509: ARRAY
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_INT 4
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: LD_INT 3000
7524: PPUSH
7525: LD_INT 9000
7527: PPUSH
7528: CALL_OW 12
7532: PPUSH
7533: CALL_OW 492
// end ;
7537: PPOPN 1
7539: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7540: LD_EXP 2
7544: PUSH
7545: LD_EXP 17
7549: AND
7550: IFFALSE 7570
7552: GO 7554
7554: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7555: LD_INT 1
7557: PPUSH
7558: LD_OWVAR 2
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL_OW 324
7570: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7571: LD_EXP 2
7575: PUSH
7576: LD_EXP 18
7580: AND
7581: IFFALSE 7664
7583: GO 7585
7585: DISABLE
7586: LD_INT 0
7588: PPUSH
7589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_OWVAR 2
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 21
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if not tmp then
7626: LD_VAR 0 2
7630: NOT
7631: IFFALSE 7635
// exit ;
7633: GO 7664
// for i in tmp do
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: FOR_IN
7646: IFFALSE 7662
// SetBLevel ( i , 10 ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_INT 10
7655: PPUSH
7656: CALL_OW 241
7660: GO 7645
7662: POP
7663: POP
// end ;
7664: PPOPN 2
7666: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7667: LD_EXP 2
7671: PUSH
7672: LD_EXP 19
7676: AND
7677: IFFALSE 7788
7679: GO 7681
7681: DISABLE
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 3
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7788
// un := tmp [ rand ( 1 , tmp ) ] ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: PPUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 12
7754: ARRAY
7755: ST_TO_ADDR
// if Crawls ( un ) then
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 318
7765: IFFALSE 7776
// ComWalk ( un ) ;
7767: LD_VAR 0 2
7771: PPUSH
7772: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 5
7783: PPUSH
7784: CALL_OW 336
// end ;
7788: PPOPN 3
7790: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7791: LD_EXP 2
7795: PUSH
7796: LD_EXP 20
7800: AND
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 4
7809: LESS
7810: AND
7811: IFFALSE 7830
7813: GO 7815
7815: DISABLE
// begin Difficulty := Difficulty + 1 ;
7816: LD_ADDR_OWVAR 67
7820: PUSH
7821: LD_OWVAR 67
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ST_TO_ADDR
// end ;
7830: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7831: LD_EXP 2
7835: PUSH
7836: LD_EXP 21
7840: AND
7841: IFFALSE 7944
7843: GO 7845
7845: DISABLE
7846: LD_INT 0
7848: PPUSH
// begin for i := 1 to 5 do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_INT 5
7861: PUSH
7862: FOR_TO
7863: IFFALSE 7942
// begin uc_nation := nation_nature ;
7865: LD_ADDR_OWVAR 21
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// uc_side := 0 ;
7873: LD_ADDR_OWVAR 20
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7881: LD_ADDR_OWVAR 29
7885: PUSH
7886: LD_INT 12
7888: PUSH
7889: LD_INT 12
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// hc_agressivity := 20 ;
7896: LD_ADDR_OWVAR 35
7900: PUSH
7901: LD_INT 20
7903: ST_TO_ADDR
// hc_class := class_tiger ;
7904: LD_ADDR_OWVAR 28
7908: PUSH
7909: LD_INT 14
7911: ST_TO_ADDR
// hc_gallery :=  ;
7912: LD_ADDR_OWVAR 33
7916: PUSH
7917: LD_STRING 
7919: ST_TO_ADDR
// hc_name :=  ;
7920: LD_ADDR_OWVAR 26
7924: PUSH
7925: LD_STRING 
7927: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7928: CALL_OW 44
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 51
// end ;
7940: GO 7862
7942: POP
7943: POP
// end ;
7944: PPOPN 1
7946: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7947: LD_EXP 2
7951: PUSH
7952: LD_EXP 22
7956: AND
7957: IFFALSE 7966
7959: GO 7961
7961: DISABLE
// StreamSibBomb ;
7962: CALL 7967 0 0
7966: END
// export function StreamSibBomb ; var i , x , y ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// result := false ;
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// for i := 1 to 16 do
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: DOUBLE
7987: LD_INT 1
7989: DEC
7990: ST_TO_ADDR
7991: LD_INT 16
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8194
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 10
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 40
8013: PUSH
8014: LD_INT 50
8016: PUSH
8017: LD_INT 60
8019: PUSH
8020: LD_INT 70
8022: PUSH
8023: LD_INT 80
8025: PUSH
8026: LD_INT 90
8028: PUSH
8029: LD_INT 100
8031: PUSH
8032: LD_INT 110
8034: PUSH
8035: LD_INT 120
8037: PUSH
8038: LD_INT 130
8040: PUSH
8041: LD_INT 140
8043: PUSH
8044: LD_INT 150
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 1
8066: PPUSH
8067: LD_INT 15
8069: PPUSH
8070: CALL_OW 12
8074: ARRAY
8075: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: LD_INT 20
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 40
8092: PUSH
8093: LD_INT 50
8095: PUSH
8096: LD_INT 60
8098: PUSH
8099: LD_INT 70
8101: PUSH
8102: LD_INT 80
8104: PUSH
8105: LD_INT 90
8107: PUSH
8108: LD_INT 100
8110: PUSH
8111: LD_INT 110
8113: PUSH
8114: LD_INT 120
8116: PUSH
8117: LD_INT 130
8119: PUSH
8120: LD_INT 140
8122: PUSH
8123: LD_INT 150
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 1
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 12
8153: ARRAY
8154: ST_TO_ADDR
// if ValidHex ( x , y ) then
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_VAR 0 4
8164: PPUSH
8165: CALL_OW 488
8169: IFFALSE 8192
// begin result := [ x , y ] ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 3
8180: PUSH
8181: LD_VAR 0 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// break ;
8190: GO 8194
// end ; end ;
8192: GO 7994
8194: POP
8195: POP
// if result then
8196: LD_VAR 0 1
8200: IFFALSE 8260
// begin ToLua ( playSibBomb() ) ;
8202: LD_STRING playSibBomb()
8204: PPUSH
8205: CALL_OW 559
// wait ( 0 0$14 ) ;
8209: LD_INT 490
8211: PPUSH
8212: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8216: LD_VAR 0 1
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_VAR 0 1
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PPUSH
8234: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8238: LD_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_INT 2
8254: ARRAY
8255: PPUSH
8256: CALL_OW 429
// end ; end ;
8260: LD_VAR 0 1
8264: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8265: LD_EXP 2
8269: PUSH
8270: LD_EXP 24
8274: AND
8275: IFFALSE 8287
8277: GO 8279
8279: DISABLE
// YouLost (  ) ;
8280: LD_STRING 
8282: PPUSH
8283: CALL_OW 104
8287: END
// every 0 0$1 trigger StreamModeActive and sFog do
8288: LD_EXP 2
8292: PUSH
8293: LD_EXP 23
8297: AND
8298: IFFALSE 8312
8300: GO 8302
8302: DISABLE
// FogOff ( your_side ) ;
8303: LD_OWVAR 2
8307: PPUSH
8308: CALL_OW 344
8312: END
// every 0 0$1 trigger StreamModeActive and sSun do
8313: LD_EXP 2
8317: PUSH
8318: LD_EXP 25
8322: AND
8323: IFFALSE 8351
8325: GO 8327
8327: DISABLE
// begin solar_recharge_percent := 0 ;
8328: LD_ADDR_OWVAR 79
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8336: LD_INT 10500
8338: PPUSH
8339: CALL_OW 67
// solar_recharge_percent := 100 ;
8343: LD_ADDR_OWVAR 79
8347: PUSH
8348: LD_INT 100
8350: ST_TO_ADDR
// end ;
8351: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8352: LD_EXP 2
8356: PUSH
8357: LD_EXP 26
8361: AND
8362: IFFALSE 8601
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
// begin tmp := [ ] ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: EMPTY
8378: ST_TO_ADDR
// for i := 1 to 6 do
8379: LD_ADDR_VAR 0 1
8383: PUSH
8384: DOUBLE
8385: LD_INT 1
8387: DEC
8388: ST_TO_ADDR
8389: LD_INT 6
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8498
// begin uc_nation := nation_nature ;
8395: LD_ADDR_OWVAR 21
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// uc_side := 0 ;
8403: LD_ADDR_OWVAR 20
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8411: LD_ADDR_OWVAR 29
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 12
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// hc_agressivity := 20 ;
8426: LD_ADDR_OWVAR 35
8430: PUSH
8431: LD_INT 20
8433: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 17
8441: ST_TO_ADDR
// hc_gallery :=  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name :=  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// un := CreateHuman ;
8458: LD_ADDR_VAR 0 2
8462: PUSH
8463: CALL_OW 44
8467: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: CALL_OW 51
// tmp := tmp ^ un ;
8480: LD_ADDR_VAR 0 3
8484: PUSH
8485: LD_VAR 0 3
8489: PUSH
8490: LD_VAR 0 2
8494: ADD
8495: ST_TO_ADDR
// end ;
8496: GO 8392
8498: POP
8499: POP
// repeat wait ( 0 0$1 ) ;
8500: LD_INT 35
8502: PPUSH
8503: CALL_OW 67
// for un in tmp do
8507: LD_ADDR_VAR 0 2
8511: PUSH
8512: LD_VAR 0 3
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8592
// begin if IsDead ( un ) then
8520: LD_VAR 0 2
8524: PPUSH
8525: CALL_OW 301
8529: IFFALSE 8549
// begin tmp := tmp diff un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 2
8545: DIFF
8546: ST_TO_ADDR
// continue ;
8547: GO 8517
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8549: LD_VAR 0 2
8553: PPUSH
8554: LD_INT 3
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PPUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 74
8585: PPUSH
8586: CALL_OW 115
// end ;
8590: GO 8517
8592: POP
8593: POP
// until not tmp ;
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8500
// end ;
8601: PPOPN 3
8603: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8604: LD_EXP 2
8608: PUSH
8609: LD_EXP 27
8613: AND
8614: IFFALSE 8668
8616: GO 8618
8618: DISABLE
// begin ToLua ( displayTroll(); ) ;
8619: LD_STRING displayTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 3 3$00 ) ;
8626: LD_INT 6300
8628: PPUSH
8629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8633: LD_STRING hideTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8647: LD_STRING displayTroll();
8649: PPUSH
8650: CALL_OW 559
// wait ( 1 1$00 ) ;
8654: LD_INT 2100
8656: PPUSH
8657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8661: LD_STRING hideTroll();
8663: PPUSH
8664: CALL_OW 559
// end ;
8668: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8669: LD_EXP 2
8673: PUSH
8674: LD_EXP 28
8678: AND
8679: IFFALSE 8742
8681: GO 8683
8683: DISABLE
8684: LD_INT 0
8686: PPUSH
// begin p := 0 ;
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// repeat game_speed := 1 ;
8695: LD_ADDR_OWVAR 65
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// p := p + 1 ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: PLUS
8723: ST_TO_ADDR
// until p >= 60 ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 60
8731: GREATEREQUAL
8732: IFFALSE 8695
// game_speed := 4 ;
8734: LD_ADDR_OWVAR 65
8738: PUSH
8739: LD_INT 4
8741: ST_TO_ADDR
// end ;
8742: PPOPN 1
8744: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8745: LD_EXP 2
8749: PUSH
8750: LD_EXP 29
8754: AND
8755: IFFALSE 8901
8757: GO 8759
8759: DISABLE
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_OWVAR 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 0
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 30
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// if not depot then
8818: LD_VAR 0 1
8822: NOT
8823: IFFALSE 8827
// exit ;
8825: GO 8901
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 12
8849: ARRAY
8850: PPUSH
8851: CALL_OW 274
8855: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_INT 2
8878: PPUSH
8879: LD_INT 0
8881: PPUSH
8882: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_INT 3
8893: PPUSH
8894: LD_INT 0
8896: PPUSH
8897: CALL_OW 277
// end ;
8901: PPOPN 2
8903: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8904: LD_EXP 2
8908: PUSH
8909: LD_EXP 30
8913: AND
8914: IFFALSE 9011
8916: GO 8918
8918: DISABLE
8919: LD_INT 0
8921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_OWVAR 2
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: ST_TO_ADDR
// if not tmp then
8976: LD_VAR 0 1
8980: NOT
8981: IFFALSE 8985
// exit ;
8983: GO 9011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 1
8992: PPUSH
8993: LD_VAR 0 1
8997: PPUSH
8998: CALL_OW 12
9002: ARRAY
9003: PPUSH
9004: LD_INT 200
9006: PPUSH
9007: CALL_OW 234
// end ;
9011: PPOPN 1
9013: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9014: LD_EXP 2
9018: PUSH
9019: LD_EXP 31
9023: AND
9024: IFFALSE 9103
9026: GO 9028
9028: DISABLE
9029: LD_INT 0
9031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_OWVAR 2
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 2
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: ST_TO_ADDR
// if not tmp then
9068: LD_VAR 0 1
9072: NOT
9073: IFFALSE 9077
// exit ;
9075: GO 9103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9077: LD_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 12
9094: ARRAY
9095: PPUSH
9096: LD_INT 60
9098: PPUSH
9099: CALL_OW 234
// end ;
9103: PPOPN 1
9105: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9106: LD_EXP 2
9110: PUSH
9111: LD_EXP 32
9115: AND
9116: IFFALSE 9215
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin enable ;
9125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9126: LD_ADDR_VAR 0 1
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_OWVAR 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 61
9145: PUSH
9146: EMPTY
9147: LIST
9148: PUSH
9149: LD_INT 33
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if not tmp then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9215
// for i in tmp do
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9213
// if IsControledBy ( i ) then
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 312
9200: IFFALSE 9211
// ComUnlink ( i ) ;
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 136
9211: GO 9188
9213: POP
9214: POP
// end ;
9215: PPOPN 2
9217: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9218: LD_EXP 2
9222: PUSH
9223: LD_EXP 33
9227: AND
9228: IFFALSE 9368
9230: GO 9232
9232: DISABLE
9233: LD_INT 0
9235: PPUSH
9236: PPUSH
// begin ToLua ( displayPowell(); ) ;
9237: LD_STRING displayPowell();
9239: PPUSH
9240: CALL_OW 559
// uc_side := 0 ;
9244: LD_ADDR_OWVAR 20
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// uc_nation := 2 ;
9252: LD_ADDR_OWVAR 21
9256: PUSH
9257: LD_INT 2
9259: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9260: LD_ADDR_OWVAR 37
9264: PUSH
9265: LD_INT 14
9267: ST_TO_ADDR
// vc_engine := engine_siberite ;
9268: LD_ADDR_OWVAR 39
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// vc_control := control_apeman ;
9276: LD_ADDR_OWVAR 38
9280: PUSH
9281: LD_INT 5
9283: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9284: LD_ADDR_OWVAR 40
9288: PUSH
9289: LD_INT 29
9291: ST_TO_ADDR
// un := CreateVehicle ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: CALL_OW 45
9301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9314: LD_INT 35
9316: PPUSH
9317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 22
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: PPUSH
9343: LD_VAR 0 2
9347: PPUSH
9348: CALL_OW 74
9352: PPUSH
9353: CALL_OW 115
// until IsDead ( un ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: CALL_OW 301
9366: IFFALSE 9314
// end ;
9368: PPOPN 2
9370: END
// every 0 0$1 trigger StreamModeActive and sStu do
9371: LD_EXP 2
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: PUSH
9403: LD_EXP 34
9407: AND
9408: IFFALSE 9549
9410: GO 9412
9412: DISABLE
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_OWVAR 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: ST_TO_ADDR
// if not tmp then
9453: LD_VAR 0 2
9457: NOT
9458: IFFALSE 9462
// exit ;
9460: GO 9549
// un := tmp [ rand ( 1 , tmp ) ] ;
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: CALL_OW 12
9484: ARRAY
9485: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9498: LD_VAR 0 1
9502: PPUSH
9503: LD_OWVAR 3
9507: PUSH
9508: LD_VAR 0 1
9512: DIFF
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 74
9523: PPUSH
9524: CALL_OW 115
// wait ( 0 0$20 ) ;
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 67
// SetSide ( un , your_side ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_OWVAR 2
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 2
9551: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9552: LD_EXP 2
9556: PUSH
9557: LD_EXP 35
9561: AND
9562: IFFALSE 9668
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9570: LD_ADDR_VAR 0 1
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: ST_TO_ADDR
// if not depot then
9624: LD_VAR 0 1
9628: NOT
9629: IFFALSE 9633
// exit ;
9631: GO 9668
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: CALL_OW 250
9646: PPUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 495
// end ;
9668: PPOPN 1
9670: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9671: LD_EXP 2
9675: PUSH
9676: LD_EXP 36
9680: AND
9681: IFFALSE 9892
9683: GO 9685
9685: DISABLE
9686: LD_INT 0
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
9692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9693: LD_ADDR_VAR 0 5
9697: PUSH
9698: LD_INT 22
9700: PUSH
9701: LD_OWVAR 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 21
9712: PUSH
9713: LD_INT 1
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 69
9728: ST_TO_ADDR
// if not tmp then
9729: LD_VAR 0 5
9733: NOT
9734: IFFALSE 9738
// exit ;
9736: GO 9892
// for i in tmp do
9738: LD_ADDR_VAR 0 1
9742: PUSH
9743: LD_VAR 0 5
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9890
// begin d := rand ( 0 , 5 ) ;
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_INT 0
9758: PPUSH
9759: LD_INT 5
9761: PPUSH
9762: CALL_OW 12
9766: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 250
9781: PPUSH
9782: LD_VAR 0 4
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 12
9792: PPUSH
9793: CALL_OW 12
9797: PPUSH
9798: CALL_OW 272
9802: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 4
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: LD_INT 12
9828: PPUSH
9829: CALL_OW 12
9833: PPUSH
9834: CALL_OW 273
9838: ST_TO_ADDR
// if ValidHex ( x , y ) then
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: CALL_OW 488
9853: IFFALSE 9888
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_VAR 0 2
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 6
9875: PPUSH
9876: CALL_OW 12
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 483
// end ;
9888: GO 9748
9890: POP
9891: POP
// end ;
9892: PPOPN 5
9894: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9895: LD_EXP 2
9899: PUSH
9900: LD_EXP 37
9904: AND
9905: IFFALSE 9999
9907: GO 9909
9909: DISABLE
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_OWVAR 2
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 2
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 9999
// for i in tmp do
9970: LD_ADDR_VAR 0 1
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: FOR_IN
9981: IFFALSE 9997
// SetFuel ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 240
9995: GO 9980
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10002: LD_EXP 2
10006: PUSH
10007: LD_EXP 38
10011: AND
10012: IFFALSE 10078
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10020: LD_ADDR_VAR 0 1
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 29
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if not tmp then
10056: LD_VAR 0 1
10060: NOT
10061: IFFALSE 10065
// exit ;
10063: GO 10078
// DestroyUnit ( tmp [ 1 ] ) ;
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: ARRAY
10073: PPUSH
10074: CALL_OW 65
// end ;
10078: PPOPN 1
10080: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10081: LD_EXP 2
10085: PUSH
10086: LD_EXP 40
10090: AND
10091: IFFALSE 10220
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin uc_side := 0 ;
10099: LD_ADDR_OWVAR 20
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// uc_nation := nation_arabian ;
10107: LD_ADDR_OWVAR 21
10111: PUSH
10112: LD_INT 2
10114: ST_TO_ADDR
// hc_gallery :=  ;
10115: LD_ADDR_OWVAR 33
10119: PUSH
10120: LD_STRING 
10122: ST_TO_ADDR
// hc_name :=  ;
10123: LD_ADDR_OWVAR 26
10127: PUSH
10128: LD_STRING 
10130: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_INT 11
10136: PPUSH
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 380
// un := CreateHuman ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10166: LD_INT 35
10168: PPUSH
10169: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 22
10180: PUSH
10181: LD_OWVAR 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 74
10204: PPUSH
10205: CALL_OW 115
// until IsDead ( un ) ;
10209: LD_VAR 0 1
10213: PPUSH
10214: CALL_OW 301
10218: IFFALSE 10166
// end ;
10220: PPOPN 1
10222: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10223: LD_EXP 2
10227: PUSH
10228: LD_EXP 42
10232: AND
10233: IFFALSE 10245
10235: GO 10237
10237: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10238: LD_STRING earthquake(getX(game), 0, 32)
10240: PPUSH
10241: CALL_OW 559
10245: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10246: LD_EXP 2
10250: PUSH
10251: LD_EXP 43
10255: AND
10256: IFFALSE 10347
10258: GO 10260
10260: DISABLE
10261: LD_INT 0
10263: PPUSH
// begin enable ;
10264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_OWVAR 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 33
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: ST_TO_ADDR
// if not tmp then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10321: LD_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: PPUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 12
10338: ARRAY
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: PPOPN 1
10349: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10350: LD_EXP 2
10354: PUSH
10355: LD_EXP 44
10359: AND
10360: IFFALSE 10501
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10370: LD_ADDR_VAR 0 3
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_OWVAR 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: ST_TO_ADDR
// if not tmp then
10406: LD_VAR 0 3
10410: NOT
10411: IFFALSE 10415
// exit ;
10413: GO 10501
// un := tmp [ rand ( 1 , tmp ) ] ;
10415: LD_ADDR_VAR 0 2
10419: PUSH
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: CALL_OW 12
10437: ARRAY
10438: ST_TO_ADDR
// if Crawls ( un ) then
10439: LD_VAR 0 2
10443: PPUSH
10444: CALL_OW 318
10448: IFFALSE 10459
// ComWalk ( un ) ;
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: LD_INT 9
10466: PPUSH
10467: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10471: LD_INT 28
10473: PPUSH
10474: LD_OWVAR 2
10478: PPUSH
10479: LD_INT 2
10481: PPUSH
10482: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10486: LD_INT 29
10488: PPUSH
10489: LD_OWVAR 2
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 322
// end ;
10501: PPOPN 3
10503: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10504: LD_EXP 2
10508: PUSH
10509: LD_EXP 45
10513: AND
10514: IFFALSE 10625
10516: GO 10518
10518: DISABLE
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: ST_TO_ADDR
// if not tmp then
10560: LD_VAR 0 3
10564: NOT
10565: IFFALSE 10569
// exit ;
10567: GO 10625
// un := tmp [ rand ( 1 , tmp ) ] ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: CALL_OW 12
10591: ARRAY
10592: ST_TO_ADDR
// if Crawls ( un ) then
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 318
10602: IFFALSE 10613
// ComWalk ( un ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10613: LD_VAR 0 2
10617: PPUSH
10618: LD_INT 8
10620: PPUSH
10621: CALL_OW 336
// end ;
10625: PPOPN 3
10627: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10628: LD_EXP 2
10632: PUSH
10633: LD_EXP 46
10637: AND
10638: IFFALSE 10782
10640: GO 10642
10642: DISABLE
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_OWVAR 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 34
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 34
10689: PUSH
10690: LD_INT 51
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 32
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 2
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10782
// for i in tmp do
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_VAR 0 2
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10780
// if GetCargo ( i , mat_artifact ) = 0 then
10745: LD_VAR 0 1
10749: PPUSH
10750: LD_INT 4
10752: PPUSH
10753: CALL_OW 289
10757: PUSH
10758: LD_INT 0
10760: EQUAL
10761: IFFALSE 10778
// SetCargo ( i , mat_siberit , 100 ) ;
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 3
10770: PPUSH
10771: LD_INT 100
10773: PPUSH
10774: CALL_OW 290
10778: GO 10742
10780: POP
10781: POP
// end ;
10782: PPOPN 2
10784: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10785: LD_EXP 2
10789: PUSH
10790: LD_EXP 47
10794: AND
10795: IFFALSE 10978
10797: GO 10799
10799: DISABLE
10800: LD_INT 0
10802: PPUSH
10803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: ST_TO_ADDR
// if not tmp then
10826: LD_VAR 0 2
10830: NOT
10831: IFFALSE 10835
// exit ;
10833: GO 10978
// for i := 1 to 2 do
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_INT 2
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10976
// begin uc_side := your_side ;
10851: LD_ADDR_OWVAR 20
10855: PUSH
10856: LD_OWVAR 2
10860: ST_TO_ADDR
// uc_nation := nation_american ;
10861: LD_ADDR_OWVAR 21
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// vc_chassis := us_morphling ;
10869: LD_ADDR_OWVAR 37
10873: PUSH
10874: LD_INT 5
10876: ST_TO_ADDR
// vc_engine := engine_siberite ;
10877: LD_ADDR_OWVAR 39
10881: PUSH
10882: LD_INT 3
10884: ST_TO_ADDR
// vc_control := control_computer ;
10885: LD_ADDR_OWVAR 38
10889: PUSH
10890: LD_INT 3
10892: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10893: LD_ADDR_OWVAR 40
10897: PUSH
10898: LD_INT 10
10900: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 310
10914: NOT
10915: IFFALSE 10962
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10917: CALL_OW 45
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 250
10935: PPUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: CALL_OW 251
10949: PPUSH
10950: LD_INT 12
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 50
10960: GO 10974
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10962: CALL_OW 45
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 51
// end ;
10974: GO 10848
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10981: LD_EXP 2
10985: PUSH
10986: LD_EXP 48
10990: AND
10991: IFFALSE 11213
10993: GO 10995
10995: DISABLE
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11004: LD_ADDR_VAR 0 6
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_OWVAR 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 23
11036: PUSH
11037: LD_INT 0
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 6
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11213
// s1 := rand ( 1 , 4 ) ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 4
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_VAR 0 6
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 2
11101: PPUSH
11102: CALL_OW 259
11106: ST_TO_ADDR
// if s1 = 1 then
11107: LD_VAR 0 2
11111: PUSH
11112: LD_INT 1
11114: EQUAL
11115: IFFALSE 11135
// s2 := rand ( 2 , 4 ) else
11117: LD_ADDR_VAR 0 3
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 12
11132: ST_TO_ADDR
11133: GO 11143
// s2 := 1 ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11143: LD_ADDR_VAR 0 5
11147: PUSH
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: CALL_OW 259
11166: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11167: LD_VAR 0 6
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_VAR 0 5
11185: PPUSH
11186: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11190: LD_VAR 0 6
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_VAR 0 4
11208: PPUSH
11209: CALL_OW 237
// end ;
11213: PPOPN 6
11215: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11216: LD_EXP 2
11220: PUSH
11221: LD_EXP 49
11225: AND
11226: IFFALSE 11305
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 234
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11308: LD_EXP 2
11312: PUSH
11313: LD_EXP 50
11317: AND
11318: IFFALSE 11430
11320: GO 11322
11322: DISABLE
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_OWVAR 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 30
11369: PUSH
11370: LD_INT 28
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// if not tmp then
11392: LD_VAR 0 2
11396: NOT
11397: IFFALSE 11401
// exit ;
11399: GO 11430
// for i in tmp do
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_VAR 0 2
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11428
// SetLives ( i , 1 ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 234
11426: GO 11411
11428: POP
11429: POP
// end ;
11430: PPOPN 2
11432: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11433: LD_EXP 2
11437: PUSH
11438: LD_EXP 51
11442: AND
11443: IFFALSE 11730
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin i := rand ( 1 , 7 ) ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 7
11463: PPUSH
11464: CALL_OW 12
11468: ST_TO_ADDR
// case i of 1 :
11469: LD_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11492
11482: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11483: LD_STRING earthquake(getX(game), 0, 32)
11485: PPUSH
11486: CALL_OW 559
11490: GO 11730
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11514
11500: POP
// begin ToLua ( displayStucuk(); ) ;
11501: LD_STRING displayStucuk();
11503: PPUSH
11504: CALL_OW 559
// ResetFog ;
11508: CALL_OW 335
// end ; 3 :
11512: GO 11730
11514: LD_INT 3
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11626
11522: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_OWVAR 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 2
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: CALL_OW 12
11590: ARRAY
11591: ST_TO_ADDR
// if Crawls ( un ) then
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 318
11601: IFFALSE 11612
// ComWalk ( un ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 8
11619: PPUSH
11620: CALL_OW 336
// end ; 4 :
11624: GO 11730
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11708
11634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 2
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11730
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 65
// end ; 5 .. 7 :
11706: GO 11730
11708: LD_INT 5
11710: DOUBLE
11711: GREATEREQUAL
11712: IFFALSE 11720
11714: LD_INT 7
11716: DOUBLE
11717: LESSEQUAL
11718: IFTRUE 11722
11720: GO 11729
11722: POP
// StreamSibBomb ; end ;
11723: CALL 7967 0 0
11727: GO 11730
11729: POP
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11733: LD_EXP 2
11737: PUSH
11738: LD_EXP 52
11742: AND
11743: IFFALSE 11899
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11753: LD_ADDR_VAR 0 2
11757: PUSH
11758: LD_INT 81
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 69
11806: ST_TO_ADDR
// if not tmp then
11807: LD_VAR 0 2
11811: NOT
11812: IFFALSE 11816
// exit ;
11814: GO 11899
// p := 0 ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// p := p + 1 ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 1
11843: PLUS
11844: ST_TO_ADDR
// for i in tmp do
11845: LD_ADDR_VAR 0 1
11849: PUSH
11850: LD_VAR 0 2
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11887
// if GetLives ( i ) < 1000 then
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 256
11867: PUSH
11868: LD_INT 1000
11870: LESS
11871: IFFALSE 11885
// SetLives ( i , 1000 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 1000
11880: PPUSH
11881: CALL_OW 234
11885: GO 11855
11887: POP
11888: POP
// until p > 20 ;
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 20
11896: GREATER
11897: IFFALSE 11824
// end ;
11899: PPOPN 3
11901: END
// every 0 0$1 trigger StreamModeActive and sTime do
11902: LD_EXP 2
11906: PUSH
11907: LD_EXP 53
11911: AND
11912: IFFALSE 11947
11914: GO 11916
11916: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11917: LD_INT 28
11919: PPUSH
11920: LD_OWVAR 2
11924: PPUSH
11925: LD_INT 2
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11932: LD_INT 30
11934: PPUSH
11935: LD_OWVAR 2
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: CALL_OW 322
// end ;
11947: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11948: LD_EXP 2
11952: PUSH
11953: LD_EXP 54
11957: AND
11958: IFFALSE 12079
11960: GO 11962
11962: DISABLE
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_OWVAR 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 23
11999: PUSH
12000: LD_INT 0
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: ST_TO_ADDR
// if not tmp then
12021: LD_VAR 0 2
12025: NOT
12026: IFFALSE 12030
// exit ;
12028: GO 12079
// for i in tmp do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: LD_VAR 0 2
12039: PUSH
12040: FOR_IN
12041: IFFALSE 12077
// begin if Crawls ( i ) then
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 318
12052: IFFALSE 12063
// ComWalk ( i ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 138
// SetClass ( i , 2 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 336
// end ;
12075: GO 12040
12077: POP
12078: POP
// end ;
12079: PPOPN 2
12081: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12082: LD_EXP 2
12086: PUSH
12087: LD_EXP 55
12091: AND
12092: IFFALSE 12380
12094: GO 12096
12096: DISABLE
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12102: LD_OWVAR 2
12106: PPUSH
12107: LD_INT 9
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12120: LD_INT 9
12122: PPUSH
12123: LD_OWVAR 2
12127: PPUSH
12128: CALL_OW 343
// uc_side := 9 ;
12132: LD_ADDR_OWVAR 20
12136: PUSH
12137: LD_INT 9
12139: ST_TO_ADDR
// uc_nation := 2 ;
12140: LD_ADDR_OWVAR 21
12144: PUSH
12145: LD_INT 2
12147: ST_TO_ADDR
// hc_name := Dark Warrior ;
12148: LD_ADDR_OWVAR 26
12152: PUSH
12153: LD_STRING Dark Warrior
12155: ST_TO_ADDR
// hc_gallery :=  ;
12156: LD_ADDR_OWVAR 33
12160: PUSH
12161: LD_STRING 
12163: ST_TO_ADDR
// hc_noskilllimit := true ;
12164: LD_ADDR_OWVAR 76
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12172: LD_ADDR_OWVAR 31
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: ST_TO_ADDR
// un := CreateHuman ;
12195: LD_ADDR_VAR 0 3
12199: PUSH
12200: CALL_OW 44
12204: ST_TO_ADDR
// hc_noskilllimit := false ;
12205: LD_ADDR_OWVAR 76
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 51
// ToLua ( playRanger() ) ;
12225: LD_STRING playRanger()
12227: PPUSH
12228: CALL_OW 559
// p := 0 ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12240: LD_INT 35
12242: PPUSH
12243: CALL_OW 67
// p := p + 1 ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: LD_VAR 0 2
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 256
12270: PUSH
12271: LD_INT 1000
12273: LESS
12274: IFFALSE 12288
// SetLives ( un , 1000 ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1000
12283: PPUSH
12284: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 81
12295: PUSH
12296: LD_OWVAR 2
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 91
12307: PUSH
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: CALL_OW 74
12339: PPUSH
12340: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12344: LD_VAR 0 2
12348: PUSH
12349: LD_INT 80
12351: GREATER
12352: PUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: CALL_OW 301
12362: OR
12363: IFFALSE 12240
// if un then
12365: LD_VAR 0 3
12369: IFFALSE 12380
// RemoveUnit ( un ) ;
12371: LD_VAR 0 3
12375: PPUSH
12376: CALL_OW 64
// end ;
12380: PPOPN 3
12382: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12383: LD_EXP 56
12387: IFFALSE 12503
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 81
12404: PUSH
12405: LD_OWVAR 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 21
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12433: LD_STRING playComputer()
12435: PPUSH
12436: CALL_OW 559
// if not tmp then
12440: LD_VAR 0 2
12444: NOT
12445: IFFALSE 12449
// exit ;
12447: GO 12503
// for i in tmp do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12501
// for j := 1 to 4 do
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: DOUBLE
12468: LD_INT 1
12470: DEC
12471: ST_TO_ADDR
12472: LD_INT 4
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12497
// SetSkill ( i , j , 10 ) ;
12478: LD_VAR 0 1
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 10
12490: PPUSH
12491: CALL_OW 237
12495: GO 12475
12497: POP
12498: POP
12499: GO 12459
12501: POP
12502: POP
// end ;
12503: PPOPN 3
12505: END
// every 0 0$1 trigger s30 do var i , tmp ;
12506: LD_EXP 57
12510: IFFALSE 12579
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
12518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_OWVAR 2
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 2
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12579
// for i in tmp do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 2
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12577
// SetLives ( i , 300 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 300
12570: PPUSH
12571: CALL_OW 234
12575: GO 12560
12577: POP
12578: POP
// end ;
12579: PPOPN 2
12581: END
// every 0 0$1 trigger s60 do var i , tmp ;
12582: LD_EXP 58
12586: IFFALSE 12655
12588: GO 12590
12590: DISABLE
12591: LD_INT 0
12593: PPUSH
12594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_OWVAR 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 2
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12655
// for i in tmp do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: FOR_IN
12637: IFFALSE 12653
// SetLives ( i , 600 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 600
12646: PPUSH
12647: CALL_OW 234
12651: GO 12636
12653: POP
12654: POP
// end ;
12655: PPOPN 2
12657: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12658: LD_INT 0
12660: PPUSH
// case cmd of 301 :
12661: LD_VAR 0 1
12665: PUSH
12666: LD_INT 301
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12706
12674: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12675: LD_VAR 0 6
12679: PPUSH
12680: LD_VAR 0 7
12684: PPUSH
12685: LD_VAR 0 8
12689: PPUSH
12690: LD_VAR 0 4
12694: PPUSH
12695: LD_VAR 0 5
12699: PPUSH
12700: CALL 13915 0 5
12704: GO 12827
12706: LD_INT 302
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12751
12714: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12715: LD_VAR 0 6
12719: PPUSH
12720: LD_VAR 0 7
12724: PPUSH
12725: LD_VAR 0 8
12729: PPUSH
12730: LD_VAR 0 9
12734: PPUSH
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL 14006 0 6
12749: GO 12827
12751: LD_INT 303
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12796
12759: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12760: LD_VAR 0 6
12764: PPUSH
12765: LD_VAR 0 7
12769: PPUSH
12770: LD_VAR 0 8
12774: PPUSH
12775: LD_VAR 0 9
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: LD_VAR 0 5
12789: PPUSH
12790: CALL 12832 0 6
12794: GO 12827
12796: LD_INT 304
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12826
12804: POP
// hHackTeleport ( unit , x , y ) ; end ;
12805: LD_VAR 0 2
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: LD_VAR 0 5
12819: PPUSH
12820: CALL 14599 0 3
12824: GO 12827
12826: POP
// end ;
12827: LD_VAR 0 12
12831: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: LESS
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 3
12852: GREATER
12853: OR
12854: PUSH
12855: LD_VAR 0 5
12859: PPUSH
12860: LD_VAR 0 6
12864: PPUSH
12865: CALL_OW 428
12869: OR
12870: IFFALSE 12874
// exit ;
12872: GO 13602
// uc_side := your_side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_OWVAR 2
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 1
12893: ST_TO_ADDR
// bc_level = 1 ;
12894: LD_ADDR_OWVAR 43
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// case btype of 1 :
12902: LD_VAR 0 2
12906: PUSH
12907: LD_INT 1
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_depot ; 2 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
12924: GO 13546
12926: LD_INT 2
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_warehouse ; 3 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
12943: GO 13546
12945: LD_INT 3
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12964
12953: POP
// bc_type := b_lab ; 4 .. 9 :
12954: LD_ADDR_OWVAR 42
12958: PUSH
12959: LD_INT 6
12961: ST_TO_ADDR
12962: GO 13546
12964: LD_INT 4
12966: DOUBLE
12967: GREATEREQUAL
12968: IFFALSE 12976
12970: LD_INT 9
12972: DOUBLE
12973: LESSEQUAL
12974: IFTRUE 12978
12976: GO 13038
12978: POP
// begin bc_type := b_lab_half ;
12979: LD_ADDR_OWVAR 42
12983: PUSH
12984: LD_INT 7
12986: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12987: LD_ADDR_OWVAR 44
12991: PUSH
12992: LD_INT 10
12994: PUSH
12995: LD_INT 11
12997: PUSH
12998: LD_INT 12
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: LD_INT 13
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 3
13025: MINUS
13026: ARRAY
13027: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13028: LD_ADDR_OWVAR 45
13032: PUSH
13033: LD_INT 9
13035: ST_TO_ADDR
// end ; 10 .. 13 :
13036: GO 13546
13038: LD_INT 10
13040: DOUBLE
13041: GREATEREQUAL
13042: IFFALSE 13050
13044: LD_INT 13
13046: DOUBLE
13047: LESSEQUAL
13048: IFTRUE 13052
13050: GO 13129
13052: POP
// begin bc_type := b_lab_full ;
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 8
13060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13061: LD_ADDR_OWVAR 44
13065: PUSH
13066: LD_INT 10
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 14
13074: PUSH
13075: LD_INT 13
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 9
13091: MINUS
13092: ARRAY
13093: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13094: LD_ADDR_OWVAR 45
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 15
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 15
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: LD_INT 9
13124: MINUS
13125: ARRAY
13126: ST_TO_ADDR
// end ; 14 :
13127: GO 13546
13129: LD_INT 14
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13148
13137: POP
// bc_type := b_workshop ; 15 :
13138: LD_ADDR_OWVAR 42
13142: PUSH
13143: LD_INT 2
13145: ST_TO_ADDR
13146: GO 13546
13148: LD_INT 15
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13167
13156: POP
// bc_type := b_factory ; 16 :
13157: LD_ADDR_OWVAR 42
13161: PUSH
13162: LD_INT 3
13164: ST_TO_ADDR
13165: GO 13546
13167: LD_INT 16
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13186
13175: POP
// bc_type := b_ext_gun ; 17 :
13176: LD_ADDR_OWVAR 42
13180: PUSH
13181: LD_INT 17
13183: ST_TO_ADDR
13184: GO 13546
13186: LD_INT 17
13188: DOUBLE
13189: EQUAL
13190: IFTRUE 13194
13192: GO 13222
13194: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13195: LD_ADDR_OWVAR 42
13199: PUSH
13200: LD_INT 19
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 19
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_VAR 0 1
13218: ARRAY
13219: ST_TO_ADDR
13220: GO 13546
13222: LD_INT 18
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13241
13230: POP
// bc_type := b_ext_radar ; 19 :
13231: LD_ADDR_OWVAR 42
13235: PUSH
13236: LD_INT 20
13238: ST_TO_ADDR
13239: GO 13546
13241: LD_INT 19
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13260
13249: POP
// bc_type := b_ext_radio ; 20 :
13250: LD_ADDR_OWVAR 42
13254: PUSH
13255: LD_INT 22
13257: ST_TO_ADDR
13258: GO 13546
13260: LD_INT 20
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13279
13268: POP
// bc_type := b_ext_siberium ; 21 :
13269: LD_ADDR_OWVAR 42
13273: PUSH
13274: LD_INT 21
13276: ST_TO_ADDR
13277: GO 13546
13279: LD_INT 21
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13298
13287: POP
// bc_type := b_ext_computer ; 22 :
13288: LD_ADDR_OWVAR 42
13292: PUSH
13293: LD_INT 24
13295: ST_TO_ADDR
13296: GO 13546
13298: LD_INT 22
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13317
13306: POP
// bc_type := b_ext_track ; 23 :
13307: LD_ADDR_OWVAR 42
13311: PUSH
13312: LD_INT 16
13314: ST_TO_ADDR
13315: GO 13546
13317: LD_INT 23
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13336
13325: POP
// bc_type := b_ext_laser ; 24 :
13326: LD_ADDR_OWVAR 42
13330: PUSH
13331: LD_INT 25
13333: ST_TO_ADDR
13334: GO 13546
13336: LD_INT 24
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13355
13344: POP
// bc_type := b_control_tower ; 25 :
13345: LD_ADDR_OWVAR 42
13349: PUSH
13350: LD_INT 36
13352: ST_TO_ADDR
13353: GO 13546
13355: LD_INT 25
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13374
13363: POP
// bc_type := b_breastwork ; 26 :
13364: LD_ADDR_OWVAR 42
13368: PUSH
13369: LD_INT 31
13371: ST_TO_ADDR
13372: GO 13546
13374: LD_INT 26
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13393
13382: POP
// bc_type := b_bunker ; 27 :
13383: LD_ADDR_OWVAR 42
13387: PUSH
13388: LD_INT 32
13390: ST_TO_ADDR
13391: GO 13546
13393: LD_INT 27
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13412
13401: POP
// bc_type := b_turret ; 28 :
13402: LD_ADDR_OWVAR 42
13406: PUSH
13407: LD_INT 33
13409: ST_TO_ADDR
13410: GO 13546
13412: LD_INT 28
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13431
13420: POP
// bc_type := b_armoury ; 29 :
13421: LD_ADDR_OWVAR 42
13425: PUSH
13426: LD_INT 4
13428: ST_TO_ADDR
13429: GO 13546
13431: LD_INT 29
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13450
13439: POP
// bc_type := b_barracks ; 30 :
13440: LD_ADDR_OWVAR 42
13444: PUSH
13445: LD_INT 5
13447: ST_TO_ADDR
13448: GO 13546
13450: LD_INT 30
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13469
13458: POP
// bc_type := b_solar_power ; 31 :
13459: LD_ADDR_OWVAR 42
13463: PUSH
13464: LD_INT 27
13466: ST_TO_ADDR
13467: GO 13546
13469: LD_INT 31
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13488
13477: POP
// bc_type := b_oil_power ; 32 :
13478: LD_ADDR_OWVAR 42
13482: PUSH
13483: LD_INT 26
13485: ST_TO_ADDR
13486: GO 13546
13488: LD_INT 32
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13507
13496: POP
// bc_type := b_siberite_power ; 33 :
13497: LD_ADDR_OWVAR 42
13501: PUSH
13502: LD_INT 28
13504: ST_TO_ADDR
13505: GO 13546
13507: LD_INT 33
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13526
13515: POP
// bc_type := b_oil_mine ; 34 :
13516: LD_ADDR_OWVAR 42
13520: PUSH
13521: LD_INT 29
13523: ST_TO_ADDR
13524: GO 13546
13526: LD_INT 34
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13545
13534: POP
// bc_type := b_siberite_mine ; end ;
13535: LD_ADDR_OWVAR 42
13539: PUSH
13540: LD_INT 30
13542: ST_TO_ADDR
13543: GO 13546
13545: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13546: LD_ADDR_VAR 0 8
13550: PUSH
13551: LD_VAR 0 5
13555: PPUSH
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 47
13570: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13571: LD_OWVAR 42
13575: PUSH
13576: LD_INT 32
13578: PUSH
13579: LD_INT 33
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: IN
13586: IFFALSE 13602
// PlaceWeaponTurret ( b , weapon ) ;
13588: LD_VAR 0 8
13592: PPUSH
13593: LD_VAR 0 4
13597: PPUSH
13598: CALL_OW 431
// end ;
13602: LD_VAR 0 7
13606: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_OWVAR 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: ST_TO_ADDR
// if not tmp then
13667: LD_VAR 0 4
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13735
// for i in tmp do
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_VAR 0 4
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13733
// for j = 1 to 3 do
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 3
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13705: LD_VAR 0 2
13709: PPUSH
13710: CALL_OW 274
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 99999
13722: PPUSH
13723: CALL_OW 277
13727: GO 13702
13729: POP
13730: POP
13731: GO 13686
13733: POP
13734: POP
// end ;
13735: LD_VAR 0 1
13739: RET
// export function hHackSetLevel10 ; var i , j ; begin
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
13744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13818
// if IsSelected ( i ) then
13768: LD_VAR 0 2
13772: PPUSH
13773: CALL_OW 306
13777: IFFALSE 13816
// begin for j := 1 to 4 do
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: DOUBLE
13785: LD_INT 1
13787: DEC
13788: ST_TO_ADDR
13789: LD_INT 4
13791: PUSH
13792: FOR_TO
13793: IFFALSE 13814
// SetSkill ( i , j , 10 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 10
13807: PPUSH
13808: CALL_OW 237
13812: GO 13792
13814: POP
13815: POP
// end ;
13816: GO 13765
13818: POP
13819: POP
// end ;
13820: LD_VAR 0 1
13824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PUSH
13866: FOR_IN
13867: IFFALSE 13908
// begin for j := 1 to 4 do
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: DOUBLE
13875: LD_INT 1
13877: DEC
13878: ST_TO_ADDR
13879: LD_INT 4
13881: PUSH
13882: FOR_TO
13883: IFFALSE 13904
// SetSkill ( i , j , 10 ) ;
13885: LD_VAR 0 2
13889: PPUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 10
13897: PPUSH
13898: CALL_OW 237
13902: GO 13882
13904: POP
13905: POP
// end ;
13906: GO 13866
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 1
13914: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13915: LD_INT 0
13917: PPUSH
// uc_side := your_side ;
13918: LD_ADDR_OWVAR 20
13922: PUSH
13923: LD_OWVAR 2
13927: ST_TO_ADDR
// uc_nation := nation ;
13928: LD_ADDR_OWVAR 21
13932: PUSH
13933: LD_VAR 0 1
13937: ST_TO_ADDR
// InitHc ;
13938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13942: LD_INT 0
13944: PPUSH
13945: LD_VAR 0 2
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13959: LD_VAR 0 4
13963: PPUSH
13964: LD_VAR 0 5
13968: PPUSH
13969: CALL_OW 428
13973: PUSH
13974: LD_INT 0
13976: EQUAL
13977: IFFALSE 14001
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13979: CALL_OW 44
13983: PPUSH
13984: LD_VAR 0 4
13988: PPUSH
13989: LD_VAR 0 5
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 48
// end ;
14001: LD_VAR 0 6
14005: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// uc_side := your_side ;
14010: LD_ADDR_OWVAR 20
14014: PUSH
14015: LD_OWVAR 2
14019: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14020: LD_VAR 0 1
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: IN
14047: IFFALSE 14059
// uc_nation := nation_american else
14049: LD_ADDR_OWVAR 21
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
14057: GO 14102
// if chassis in [ 11 , 12 , 13 , 14 ] then
14059: LD_VAR 0 1
14063: PUSH
14064: LD_INT 11
14066: PUSH
14067: LD_INT 12
14069: PUSH
14070: LD_INT 13
14072: PUSH
14073: LD_INT 14
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: IN
14082: IFFALSE 14094
// uc_nation := nation_arabian else
14084: LD_ADDR_OWVAR 21
14088: PUSH
14089: LD_INT 2
14091: ST_TO_ADDR
14092: GO 14102
// uc_nation := nation_russian ;
14094: LD_ADDR_OWVAR 21
14098: PUSH
14099: LD_INT 3
14101: ST_TO_ADDR
// vc_chassis := chassis ;
14102: LD_ADDR_OWVAR 37
14106: PUSH
14107: LD_VAR 0 1
14111: ST_TO_ADDR
// vc_engine := engine ;
14112: LD_ADDR_OWVAR 39
14116: PUSH
14117: LD_VAR 0 2
14121: ST_TO_ADDR
// vc_control := control ;
14122: LD_ADDR_OWVAR 38
14126: PUSH
14127: LD_VAR 0 3
14131: ST_TO_ADDR
// vc_weapon := weapon ;
14132: LD_ADDR_OWVAR 40
14136: PUSH
14137: LD_VAR 0 4
14141: ST_TO_ADDR
// un := CreateVehicle ;
14142: LD_ADDR_VAR 0 8
14146: PUSH
14147: CALL_OW 45
14151: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14152: LD_VAR 0 8
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: LD_INT 5
14162: PPUSH
14163: CALL_OW 12
14167: PPUSH
14168: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14172: LD_VAR 0 8
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: LD_VAR 0 6
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 48
// end ;
14194: LD_VAR 0 7
14198: RET
// export hInvincible ; every 1 do
14199: GO 14201
14201: DISABLE
// hInvincible := [ ] ;
14202: LD_ADDR_EXP 59
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
14209: END
// every 10 do var i ;
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin enable ;
14216: ENABLE
// if not hInvincible then
14217: LD_EXP 59
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14270
// for i in hInvincible do
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_EXP 59
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14268
// if GetLives ( i ) < 1000 then
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 256
14248: PUSH
14249: LD_INT 1000
14251: LESS
14252: IFFALSE 14266
// SetLives ( i , 1000 ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 1000
14261: PPUSH
14262: CALL_OW 234
14266: GO 14236
14268: POP
14269: POP
// end ;
14270: PPOPN 1
14272: END
// export function hHackInvincible ; var i ; begin
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: FOR_IN
14316: IFFALSE 14377
// if IsSelected ( i ) then
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 306
14327: IFFALSE 14375
// begin if i in hInvincible then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_EXP 59
14338: IN
14339: IFFALSE 14359
// hInvincible := hInvincible diff i else
14341: LD_ADDR_EXP 59
14345: PUSH
14346: LD_EXP 59
14350: PUSH
14351: LD_VAR 0 2
14355: DIFF
14356: ST_TO_ADDR
14357: GO 14375
// hInvincible := hInvincible union i ;
14359: LD_ADDR_EXP 59
14363: PUSH
14364: LD_EXP 59
14368: PUSH
14369: LD_VAR 0 2
14373: UNION
14374: ST_TO_ADDR
// end ;
14375: GO 14315
14377: POP
14378: POP
// end ;
14379: LD_VAR 0 1
14383: RET
// export function hHackInvisible ; var i , j ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
14388: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14434
// if IsSelected ( i ) then
14412: LD_VAR 0 2
14416: PPUSH
14417: CALL_OW 306
14421: IFFALSE 14432
// ComForceInvisible ( i ) ;
14423: LD_VAR 0 2
14427: PPUSH
14428: CALL_OW 496
14432: GO 14409
14434: POP
14435: POP
// end ;
14436: LD_VAR 0 1
14440: RET
// export function hHackChangeYourSide ; begin
14441: LD_INT 0
14443: PPUSH
// if your_side = 8 then
14444: LD_OWVAR 2
14448: PUSH
14449: LD_INT 8
14451: EQUAL
14452: IFFALSE 14464
// your_side := 0 else
14454: LD_ADDR_OWVAR 2
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
14462: GO 14478
// your_side := your_side + 1 ;
14464: LD_ADDR_OWVAR 2
14468: PUSH
14469: LD_OWVAR 2
14473: PUSH
14474: LD_INT 1
14476: PLUS
14477: ST_TO_ADDR
// end ;
14478: LD_VAR 0 1
14482: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
14487: PPUSH
// for i in all_units do
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_OWVAR 3
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14577
// if IsSelected ( i ) then
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 306
14510: IFFALSE 14575
// begin j := GetSide ( i ) ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: PPUSH
14522: CALL_OW 255
14526: ST_TO_ADDR
// if j = 8 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 8
14534: EQUAL
14535: IFFALSE 14547
// j := 0 else
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
14545: GO 14561
// j := j + 1 ;
14547: LD_ADDR_VAR 0 3
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PLUS
14560: ST_TO_ADDR
// SetSide ( i , j ) ;
14561: LD_VAR 0 2
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: CALL_OW 235
// end ;
14575: GO 14498
14577: POP
14578: POP
// end ;
14579: LD_VAR 0 1
14583: RET
// export function hHackFog ; begin
14584: LD_INT 0
14586: PPUSH
// FogOff ( true ) ;
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 344
// end ;
14594: LD_VAR 0 1
14598: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14599: LD_INT 0
14601: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 483
// CenterOnXY ( x , y ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 84
// end ;
14641: LD_VAR 0 4
14645: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14650: LD_VAR 0 1
14654: NOT
14655: PUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: CALL_OW 488
14670: NOT
14671: OR
14672: PUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 266
14682: PUSH
14683: LD_INT 3
14685: NONEQUAL
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 247
14696: PUSH
14697: LD_INT 1
14699: EQUAL
14700: NOT
14701: AND
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 14989
// if GetType ( factory ) = unit_human then
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 247
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14737
// factory := IsInUnit ( factory ) ;
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 310
14736: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 266
14746: PUSH
14747: LD_INT 3
14749: NONEQUAL
14750: IFFALSE 14754
// exit ;
14752: GO 14989
// for i := 1 to Count ( factoryWaypoints ) do
14754: LD_ADDR_VAR 0 5
14758: PUSH
14759: DOUBLE
14760: LD_INT 1
14762: DEC
14763: ST_TO_ADDR
14764: LD_EXP 60
14768: PPUSH
14769: CALL 23655 0 1
14773: PUSH
14774: FOR_TO
14775: IFFALSE 14937
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14777: LD_VAR 0 2
14781: PPUSH
14782: LD_VAR 0 3
14786: PPUSH
14787: CALL_OW 428
14791: PUSH
14792: LD_EXP 60
14796: PUSH
14797: LD_VAR 0 5
14801: ARRAY
14802: PUSH
14803: LD_INT 2
14805: ARRAY
14806: EQUAL
14807: IFFALSE 14839
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14809: LD_ADDR_EXP 60
14813: PUSH
14814: LD_EXP 60
14818: PPUSH
14819: LD_VAR 0 5
14823: PPUSH
14824: CALL_OW 3
14828: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14829: CALL 14994 0 0
// exit ;
14833: POP
14834: POP
14835: GO 14989
// end else
14837: GO 14935
// if factory = factoryWaypoints [ i ] [ 2 ] then
14839: LD_VAR 0 1
14843: PUSH
14844: LD_EXP 60
14848: PUSH
14849: LD_VAR 0 5
14853: ARRAY
14854: PUSH
14855: LD_INT 2
14857: ARRAY
14858: EQUAL
14859: IFFALSE 14935
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14861: LD_ADDR_EXP 60
14865: PUSH
14866: LD_EXP 60
14870: PPUSH
14871: LD_VAR 0 5
14875: PPUSH
14876: CALL_OW 3
14880: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14881: LD_ADDR_EXP 60
14885: PUSH
14886: LD_EXP 60
14890: PPUSH
14891: LD_VAR 0 1
14895: PPUSH
14896: CALL_OW 255
14900: PUSH
14901: LD_VAR 0 1
14905: PUSH
14906: LD_VAR 0 2
14910: PUSH
14911: LD_VAR 0 3
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL 59264 0 2
14926: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14927: CALL 14994 0 0
// exit ;
14931: POP
14932: POP
14933: GO 14989
// end ; end ;
14935: GO 14774
14937: POP
14938: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14939: LD_ADDR_EXP 60
14943: PUSH
14944: LD_EXP 60
14948: PPUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 255
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: LD_VAR 0 2
14968: PUSH
14969: LD_VAR 0 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL 59264 0 2
14984: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14985: CALL 14994 0 0
// end ;
14989: LD_VAR 0 4
14993: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14994: LD_INT 0
14996: PPUSH
14997: PPUSH
14998: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14999: LD_STRING resetFactoryWaypoint();
15001: PPUSH
15002: CALL_OW 559
// if factoryWaypoints then
15006: LD_EXP 60
15010: IFFALSE 15131
// begin list := factoryWaypoints ;
15012: LD_ADDR_VAR 0 3
15016: PUSH
15017: LD_EXP 60
15021: ST_TO_ADDR
// for i := 1 to list do
15022: LD_ADDR_VAR 0 2
15026: PUSH
15027: DOUBLE
15028: LD_INT 1
15030: DEC
15031: ST_TO_ADDR
15032: LD_VAR 0 3
15036: PUSH
15037: FOR_TO
15038: IFFALSE 15129
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15040: LD_STRING setFactoryWaypointXY(
15042: PUSH
15043: LD_VAR 0 3
15047: PUSH
15048: LD_VAR 0 2
15052: ARRAY
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: STR
15058: PUSH
15059: LD_STRING ,
15061: STR
15062: PUSH
15063: LD_VAR 0 3
15067: PUSH
15068: LD_VAR 0 2
15072: ARRAY
15073: PUSH
15074: LD_INT 2
15076: ARRAY
15077: STR
15078: PUSH
15079: LD_STRING ,
15081: STR
15082: PUSH
15083: LD_VAR 0 3
15087: PUSH
15088: LD_VAR 0 2
15092: ARRAY
15093: PUSH
15094: LD_INT 3
15096: ARRAY
15097: STR
15098: PUSH
15099: LD_STRING ,
15101: STR
15102: PUSH
15103: LD_VAR 0 3
15107: PUSH
15108: LD_VAR 0 2
15112: ARRAY
15113: PUSH
15114: LD_INT 4
15116: ARRAY
15117: STR
15118: PUSH
15119: LD_STRING )
15121: STR
15122: PPUSH
15123: CALL_OW 559
15127: GO 15037
15129: POP
15130: POP
// end ; end ;
15131: LD_VAR 0 1
15135: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15136: LD_INT 0
15138: PPUSH
// if HexInfo ( x , y ) = warehouse then
15139: LD_VAR 0 2
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: CALL_OW 428
15153: PUSH
15154: LD_VAR 0 1
15158: EQUAL
15159: IFFALSE 15186
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15161: LD_ADDR_EXP 61
15165: PUSH
15166: LD_EXP 61
15170: PPUSH
15171: LD_VAR 0 1
15175: PPUSH
15176: LD_INT 0
15178: PPUSH
15179: CALL_OW 1
15183: ST_TO_ADDR
15184: GO 15237
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15186: LD_ADDR_EXP 61
15190: PUSH
15191: LD_EXP 61
15195: PPUSH
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 255
15210: PUSH
15211: LD_VAR 0 1
15215: PUSH
15216: LD_VAR 0 2
15220: PUSH
15221: LD_VAR 0 3
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: PPUSH
15232: CALL_OW 1
15236: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15237: CALL 15246 0 0
// end ;
15241: LD_VAR 0 4
15245: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15246: LD_INT 0
15248: PPUSH
15249: PPUSH
15250: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15251: LD_STRING resetWarehouseGatheringPoints();
15253: PPUSH
15254: CALL_OW 559
// if warehouseGatheringPoints then
15258: LD_EXP 61
15262: IFFALSE 15388
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_EXP 61
15273: PPUSH
15274: CALL 63026 0 1
15278: ST_TO_ADDR
// for i := 1 to list do
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_VAR 0 3
15293: PUSH
15294: FOR_TO
15295: IFFALSE 15386
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15297: LD_STRING setWarehouseGatheringPointXY(
15299: PUSH
15300: LD_VAR 0 3
15304: PUSH
15305: LD_VAR 0 2
15309: ARRAY
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: STR
15315: PUSH
15316: LD_STRING ,
15318: STR
15319: PUSH
15320: LD_VAR 0 3
15324: PUSH
15325: LD_VAR 0 2
15329: ARRAY
15330: PUSH
15331: LD_INT 2
15333: ARRAY
15334: STR
15335: PUSH
15336: LD_STRING ,
15338: STR
15339: PUSH
15340: LD_VAR 0 3
15344: PUSH
15345: LD_VAR 0 2
15349: ARRAY
15350: PUSH
15351: LD_INT 3
15353: ARRAY
15354: STR
15355: PUSH
15356: LD_STRING ,
15358: STR
15359: PUSH
15360: LD_VAR 0 3
15364: PUSH
15365: LD_VAR 0 2
15369: ARRAY
15370: PUSH
15371: LD_INT 4
15373: ARRAY
15374: STR
15375: PUSH
15376: LD_STRING )
15378: STR
15379: PPUSH
15380: CALL_OW 559
15384: GO 15294
15386: POP
15387: POP
// end ; end ;
15388: LD_VAR 0 1
15392: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15393: LD_EXP 61
15397: IFFALSE 16082
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
// begin enable ;
15413: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15414: LD_ADDR_VAR 0 3
15418: PUSH
15419: LD_EXP 61
15423: PPUSH
15424: CALL 63026 0 1
15428: ST_TO_ADDR
// if not list then
15429: LD_VAR 0 3
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 16082
// for i := 1 to list do
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: DOUBLE
15444: LD_INT 1
15446: DEC
15447: ST_TO_ADDR
15448: LD_VAR 0 3
15452: PUSH
15453: FOR_TO
15454: IFFALSE 16080
// begin depot := list [ i ] [ 2 ] ;
15456: LD_ADDR_VAR 0 8
15460: PUSH
15461: LD_VAR 0 3
15465: PUSH
15466: LD_VAR 0 1
15470: ARRAY
15471: PUSH
15472: LD_INT 2
15474: ARRAY
15475: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15476: LD_ADDR_VAR 0 5
15480: PUSH
15481: LD_VAR 0 3
15485: PUSH
15486: LD_VAR 0 1
15490: ARRAY
15491: PUSH
15492: LD_INT 1
15494: ARRAY
15495: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15496: LD_VAR 0 8
15500: PPUSH
15501: CALL_OW 301
15505: PUSH
15506: LD_VAR 0 5
15510: PUSH
15511: LD_VAR 0 8
15515: PPUSH
15516: CALL_OW 255
15520: NONEQUAL
15521: OR
15522: IFFALSE 15551
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15524: LD_ADDR_EXP 61
15528: PUSH
15529: LD_EXP 61
15533: PPUSH
15534: LD_VAR 0 8
15538: PPUSH
15539: LD_INT 0
15541: PPUSH
15542: CALL_OW 1
15546: ST_TO_ADDR
// exit ;
15547: POP
15548: POP
15549: GO 16082
// end ; x := list [ i ] [ 3 ] ;
15551: LD_ADDR_VAR 0 6
15555: PUSH
15556: LD_VAR 0 3
15560: PUSH
15561: LD_VAR 0 1
15565: ARRAY
15566: PUSH
15567: LD_INT 3
15569: ARRAY
15570: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15571: LD_ADDR_VAR 0 7
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_VAR 0 1
15585: ARRAY
15586: PUSH
15587: LD_INT 4
15589: ARRAY
15590: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15591: LD_ADDR_VAR 0 9
15595: PUSH
15596: LD_VAR 0 6
15600: PPUSH
15601: LD_VAR 0 7
15605: PPUSH
15606: LD_INT 16
15608: PPUSH
15609: CALL 61610 0 3
15613: ST_TO_ADDR
// if not cratesNearbyPoint then
15614: LD_VAR 0 9
15618: NOT
15619: IFFALSE 15625
// exit ;
15621: POP
15622: POP
15623: GO 16082
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15625: LD_ADDR_VAR 0 4
15629: PUSH
15630: LD_INT 22
15632: PUSH
15633: LD_VAR 0 5
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: LD_INT 60
15647: PUSH
15648: EMPTY
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 91
15657: PUSH
15658: LD_VAR 0 8
15662: PUSH
15663: LD_INT 6
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 2
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 16
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: PPUSH
15705: CALL_OW 69
15709: PUSH
15710: LD_VAR 0 8
15714: PPUSH
15715: CALL_OW 313
15719: PPUSH
15720: LD_INT 3
15722: PUSH
15723: LD_INT 60
15725: PUSH
15726: EMPTY
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 25
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 25
15748: PUSH
15749: LD_INT 16
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 72
15769: UNION
15770: ST_TO_ADDR
// if tmp then
15771: LD_VAR 0 4
15775: IFFALSE 15855
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15777: LD_ADDR_VAR 0 4
15781: PUSH
15782: LD_VAR 0 4
15786: PPUSH
15787: LD_INT 3
15789: PPUSH
15790: CALL 59579 0 2
15794: ST_TO_ADDR
// for j in tmp do
15795: LD_ADDR_VAR 0 2
15799: PUSH
15800: LD_VAR 0 4
15804: PUSH
15805: FOR_IN
15806: IFFALSE 15849
// begin if IsInUnit ( j ) then
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 310
15817: IFFALSE 15828
// ComExit ( j ) ;
15819: LD_VAR 0 2
15823: PPUSH
15824: CALL 59662 0 1
// AddComCollect ( j , x , y ) ;
15828: LD_VAR 0 2
15832: PPUSH
15833: LD_VAR 0 6
15837: PPUSH
15838: LD_VAR 0 7
15842: PPUSH
15843: CALL_OW 177
// end ;
15847: GO 15805
15849: POP
15850: POP
// exit ;
15851: POP
15852: POP
15853: GO 16082
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: LD_VAR 0 5
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 91
15874: PUSH
15875: LD_VAR 0 8
15879: PUSH
15880: LD_INT 8
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 34
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 34
15903: PUSH
15904: LD_INT 51
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 34
15913: PUSH
15914: LD_INT 32
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 34
15923: PUSH
15924: LD_INT 89
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: PPUSH
15943: CALL_OW 69
15947: ST_TO_ADDR
// if tmp then
15948: LD_VAR 0 4
15952: IFFALSE 16078
// begin for j in tmp do
15954: LD_ADDR_VAR 0 2
15958: PUSH
15959: LD_VAR 0 4
15963: PUSH
15964: FOR_IN
15965: IFFALSE 16076
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15967: LD_VAR 0 2
15971: PPUSH
15972: CALL_OW 262
15976: PUSH
15977: LD_INT 3
15979: EQUAL
15980: PUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 261
15990: PUSH
15991: LD_INT 20
15993: GREATER
15994: OR
15995: PUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 314
16005: NOT
16006: AND
16007: PUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: CALL_OW 263
16017: PUSH
16018: LD_INT 1
16020: NONEQUAL
16021: PUSH
16022: LD_VAR 0 2
16026: PPUSH
16027: CALL_OW 311
16031: OR
16032: AND
16033: IFFALSE 16074
// begin ComCollect ( j , x , y ) ;
16035: LD_VAR 0 2
16039: PPUSH
16040: LD_VAR 0 6
16044: PPUSH
16045: LD_VAR 0 7
16049: PPUSH
16050: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16054: LD_VAR 0 2
16058: PPUSH
16059: LD_VAR 0 8
16063: PPUSH
16064: CALL_OW 172
// exit ;
16068: POP
16069: POP
16070: POP
16071: POP
16072: GO 16082
// end ;
16074: GO 15964
16076: POP
16077: POP
// end ; end ;
16078: GO 15453
16080: POP
16081: POP
// end ; end_of_file
16082: PPOPN 9
16084: END
// export function SOS_UnitDestroyed ( un ) ; begin
16085: LD_INT 0
16087: PPUSH
// ComRadiation ( un ) ;
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL 17074 0 1
// end ;
16097: LD_VAR 0 2
16101: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16102: LD_INT 0
16104: PPUSH
// ComRadiation ( un ) ;
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL 17074 0 1
// end ;
16114: LD_VAR 0 2
16118: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16119: LD_INT 0
16121: PPUSH
// end ;
16122: LD_VAR 0 4
16126: RET
// export function SOS_Command ( cmd ) ; begin
16127: LD_INT 0
16129: PPUSH
// end ;
16130: LD_VAR 0 2
16134: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16135: LD_INT 0
16137: PPUSH
// end ;
16138: LD_VAR 0 6
16142: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// if not vehicle or not factory then
16150: LD_VAR 0 1
16154: NOT
16155: PUSH
16156: LD_VAR 0 2
16160: NOT
16161: OR
16162: IFFALSE 16166
// exit ;
16164: GO 16665
// if not factoryWaypoints then
16166: LD_EXP 60
16170: NOT
16171: IFFALSE 16175
// exit ;
16173: GO 16665
// for i := 1 to Count ( factoryWaypoints ) do
16175: LD_ADDR_VAR 0 4
16179: PUSH
16180: DOUBLE
16181: LD_INT 1
16183: DEC
16184: ST_TO_ADDR
16185: LD_EXP 60
16189: PPUSH
16190: CALL 23655 0 1
16194: PUSH
16195: FOR_TO
16196: IFFALSE 16663
// if factoryWaypoints [ i ] [ 2 ] = factory then
16198: LD_EXP 60
16202: PUSH
16203: LD_VAR 0 4
16207: ARRAY
16208: PUSH
16209: LD_INT 2
16211: ARRAY
16212: PUSH
16213: LD_VAR 0 2
16217: EQUAL
16218: IFFALSE 16661
// begin if GetControl ( vehicle ) = control_manual then
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 263
16229: PUSH
16230: LD_INT 1
16232: EQUAL
16233: IFFALSE 16544
// begin driver := IsDrivenBy ( vehicle ) ;
16235: LD_ADDR_VAR 0 6
16239: PUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 311
16249: ST_TO_ADDR
// tag := GetTag ( driver ) ;
16250: LD_ADDR_VAR 0 5
16254: PUSH
16255: LD_VAR 0 6
16259: PPUSH
16260: CALL_OW 110
16264: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
16265: LD_VAR 0 5
16269: PUSH
16270: LD_INT 501
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 110
16283: PUSH
16284: LD_INT 501
16286: EQUAL
16287: OR
16288: IFFALSE 16294
// exit ;
16290: POP
16291: POP
16292: GO 16665
// if not HasTask ( driver ) then
16294: LD_VAR 0 6
16298: PPUSH
16299: CALL_OW 314
16303: NOT
16304: IFFALSE 16542
// begin SetTag ( driver , tDriver ) ;
16306: LD_VAR 0 6
16310: PPUSH
16311: LD_INT 501
16313: PPUSH
16314: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
16318: LD_VAR 0 1
16322: PPUSH
16323: LD_INT 501
16325: PPUSH
16326: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16330: LD_ADDR_VAR 0 7
16334: PUSH
16335: LD_EXP 60
16339: PUSH
16340: LD_VAR 0 4
16344: ARRAY
16345: PUSH
16346: LD_INT 3
16348: ARRAY
16349: PPUSH
16350: LD_EXP 60
16354: PUSH
16355: LD_VAR 0 4
16359: ARRAY
16360: PUSH
16361: LD_INT 4
16363: ARRAY
16364: PPUSH
16365: CALL_OW 428
16369: ST_TO_ADDR
// if hex then
16370: LD_VAR 0 7
16374: IFFALSE 16392
// ComMoveUnit ( driver , hex ) else
16376: LD_VAR 0 6
16380: PPUSH
16381: LD_VAR 0 7
16385: PPUSH
16386: CALL_OW 112
16390: GO 16431
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16392: LD_VAR 0 6
16396: PPUSH
16397: LD_EXP 60
16401: PUSH
16402: LD_VAR 0 4
16406: ARRAY
16407: PUSH
16408: LD_INT 3
16410: ARRAY
16411: PPUSH
16412: LD_EXP 60
16416: PUSH
16417: LD_VAR 0 4
16421: ARRAY
16422: PUSH
16423: LD_INT 4
16425: ARRAY
16426: PPUSH
16427: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16431: LD_VAR 0 6
16435: PPUSH
16436: CALL_OW 181
// if Multiplayer then
16440: LD_OWVAR 4
16444: IFFALSE 16493
// begin repeat wait ( 10 ) ;
16446: LD_INT 10
16448: PPUSH
16449: CALL_OW 67
// until not IsInUnit ( driver ) ;
16453: LD_VAR 0 6
16457: PPUSH
16458: CALL_OW 310
16462: NOT
16463: IFFALSE 16446
// if not HasTask ( driver ) then
16465: LD_VAR 0 6
16469: PPUSH
16470: CALL_OW 314
16474: NOT
16475: IFFALSE 16491
// ComEnterUnit ( driver , factory ) ;
16477: LD_VAR 0 6
16481: PPUSH
16482: LD_VAR 0 2
16486: PPUSH
16487: CALL_OW 120
// end else
16491: GO 16507
// AddComEnterUnit ( driver , factory ) ;
16493: LD_VAR 0 6
16497: PPUSH
16498: LD_VAR 0 2
16502: PPUSH
16503: CALL_OW 180
// wait ( 0 0$1 ) ;
16507: LD_INT 35
16509: PPUSH
16510: CALL_OW 67
// SetTag ( driver , tag ) ;
16514: LD_VAR 0 6
16518: PPUSH
16519: LD_VAR 0 5
16523: PPUSH
16524: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_INT 0
16535: PPUSH
16536: CALL_OW 109
// break ;
16540: GO 16663
// end ; end else
16542: GO 16661
// if GetControl ( vehicle ) = control_remote then
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 263
16553: PUSH
16554: LD_INT 2
16556: EQUAL
16557: IFFALSE 16620
// begin wait ( 0 0$2 ) ;
16559: LD_INT 70
16561: PPUSH
16562: CALL_OW 67
// if Connect ( vehicle ) then
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL 29861 0 1
16575: IFFALSE 16616
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16577: LD_VAR 0 1
16581: PPUSH
16582: LD_EXP 60
16586: PUSH
16587: LD_VAR 0 4
16591: ARRAY
16592: PUSH
16593: LD_INT 3
16595: ARRAY
16596: PPUSH
16597: LD_EXP 60
16601: PUSH
16602: LD_VAR 0 4
16606: ARRAY
16607: PUSH
16608: LD_INT 4
16610: ARRAY
16611: PPUSH
16612: CALL_OW 171
// break ;
16616: GO 16663
// end else
16618: GO 16661
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: LD_EXP 60
16629: PUSH
16630: LD_VAR 0 4
16634: ARRAY
16635: PUSH
16636: LD_INT 3
16638: ARRAY
16639: PPUSH
16640: LD_EXP 60
16644: PUSH
16645: LD_VAR 0 4
16649: ARRAY
16650: PUSH
16651: LD_INT 4
16653: ARRAY
16654: PPUSH
16655: CALL_OW 171
// break ;
16659: GO 16663
// end ; end ;
16661: GO 16195
16663: POP
16664: POP
// end ;
16665: LD_VAR 0 3
16669: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16670: LD_INT 0
16672: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16673: LD_VAR 0 1
16677: PUSH
16678: LD_INT 250
16680: EQUAL
16681: PUSH
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 264
16691: PUSH
16692: LD_INT 81
16694: EQUAL
16695: AND
16696: IFFALSE 16717
// MinerPlaceMine ( unit , x , y ) ;
16698: LD_VAR 0 2
16702: PPUSH
16703: LD_VAR 0 4
16707: PPUSH
16708: LD_VAR 0 5
16712: PPUSH
16713: CALL 19809 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16717: LD_VAR 0 1
16721: PUSH
16722: LD_INT 251
16724: EQUAL
16725: PUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: CALL_OW 264
16735: PUSH
16736: LD_INT 81
16738: EQUAL
16739: AND
16740: IFFALSE 16761
// MinerDetonateMine ( unit , x , y ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: LD_VAR 0 5
16756: PPUSH
16757: CALL 20084 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16761: LD_VAR 0 1
16765: PUSH
16766: LD_INT 252
16768: EQUAL
16769: PUSH
16770: LD_VAR 0 2
16774: PPUSH
16775: CALL_OW 264
16779: PUSH
16780: LD_INT 81
16782: EQUAL
16783: AND
16784: IFFALSE 16805
// MinerCreateMinefield ( unit , x , y ) ;
16786: LD_VAR 0 2
16790: PPUSH
16791: LD_VAR 0 4
16795: PPUSH
16796: LD_VAR 0 5
16800: PPUSH
16801: CALL 20501 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16805: LD_VAR 0 1
16809: PUSH
16810: LD_INT 253
16812: EQUAL
16813: PUSH
16814: LD_VAR 0 2
16818: PPUSH
16819: CALL_OW 257
16823: PUSH
16824: LD_INT 5
16826: EQUAL
16827: AND
16828: IFFALSE 16849
// ComBinocular ( unit , x , y ) ;
16830: LD_VAR 0 2
16834: PPUSH
16835: LD_VAR 0 4
16839: PPUSH
16840: LD_VAR 0 5
16844: PPUSH
16845: CALL 20870 0 3
// if selectedUnit then
16849: LD_VAR 0 3
16853: IFFALSE 16909
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16855: LD_VAR 0 1
16859: PUSH
16860: LD_INT 254
16862: EQUAL
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: CALL_OW 264
16873: PUSH
16874: LD_INT 99
16876: EQUAL
16877: AND
16878: PUSH
16879: LD_VAR 0 3
16883: PPUSH
16884: CALL_OW 263
16888: PUSH
16889: LD_INT 3
16891: EQUAL
16892: AND
16893: IFFALSE 16909
// HackDestroyVehicle ( unit , selectedUnit ) ;
16895: LD_VAR 0 2
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: CALL 19173 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16909: LD_VAR 0 1
16913: PUSH
16914: LD_INT 255
16916: EQUAL
16917: PUSH
16918: LD_VAR 0 2
16922: PPUSH
16923: CALL_OW 264
16927: PUSH
16928: LD_INT 14
16930: PUSH
16931: LD_INT 53
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: IN
16938: AND
16939: PUSH
16940: LD_VAR 0 4
16944: PPUSH
16945: LD_VAR 0 5
16949: PPUSH
16950: CALL_OW 488
16954: AND
16955: IFFALSE 16979
// CutTreeXYR ( unit , x , y , 12 ) ;
16957: LD_VAR 0 2
16961: PPUSH
16962: LD_VAR 0 4
16966: PPUSH
16967: LD_VAR 0 5
16971: PPUSH
16972: LD_INT 12
16974: PPUSH
16975: CALL 17170 0 4
// if cmd = 256 then
16979: LD_VAR 0 1
16983: PUSH
16984: LD_INT 256
16986: EQUAL
16987: IFFALSE 17008
// SetFactoryWaypoint ( unit , x , y ) ;
16989: LD_VAR 0 2
16993: PPUSH
16994: LD_VAR 0 4
16998: PPUSH
16999: LD_VAR 0 5
17003: PPUSH
17004: CALL 14646 0 3
// if cmd = 257 then
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 257
17015: EQUAL
17016: IFFALSE 17037
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17018: LD_VAR 0 2
17022: PPUSH
17023: LD_VAR 0 4
17027: PPUSH
17028: LD_VAR 0 5
17032: PPUSH
17033: CALL 15136 0 3
// if cmd = 258 then
17037: LD_VAR 0 1
17041: PUSH
17042: LD_INT 258
17044: EQUAL
17045: IFFALSE 17069
// BurnTreeXYR ( unit , x , y , 8 ) ;
17047: LD_VAR 0 2
17051: PPUSH
17052: LD_VAR 0 4
17056: PPUSH
17057: LD_VAR 0 5
17061: PPUSH
17062: LD_INT 8
17064: PPUSH
17065: CALL 17564 0 4
// end ;
17069: LD_VAR 0 6
17073: RET
// export function ComRadiation ( un ) ; var eff ; begin
17074: LD_INT 0
17076: PPUSH
17077: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 264
17087: PUSH
17088: LD_INT 91
17090: NONEQUAL
17091: IFFALSE 17095
// exit ;
17093: GO 17165
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17095: LD_INT 68
17097: PPUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 255
17107: PPUSH
17108: CALL_OW 321
17112: PUSH
17113: LD_INT 2
17115: EQUAL
17116: IFFALSE 17128
// eff := 70 else
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_INT 70
17125: ST_TO_ADDR
17126: GO 17136
// eff := 30 ;
17128: LD_ADDR_VAR 0 3
17132: PUSH
17133: LD_INT 30
17135: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 250
17145: PPUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 251
17155: PPUSH
17156: LD_VAR 0 3
17160: PPUSH
17161: CALL_OW 495
// end ;
17165: LD_VAR 0 2
17169: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17170: LD_INT 0
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 302
17190: NOT
17191: PUSH
17192: LD_VAR 0 2
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: CALL_OW 488
17206: NOT
17207: OR
17208: PUSH
17209: LD_VAR 0 4
17213: NOT
17214: OR
17215: IFFALSE 17219
// exit ;
17217: GO 17559
// list := [ ] ;
17219: LD_ADDR_VAR 0 13
17223: PUSH
17224: EMPTY
17225: ST_TO_ADDR
// if x - r < 0 then
17226: LD_VAR 0 2
17230: PUSH
17231: LD_VAR 0 4
17235: MINUS
17236: PUSH
17237: LD_INT 0
17239: LESS
17240: IFFALSE 17252
// min_x := 0 else
17242: LD_ADDR_VAR 0 7
17246: PUSH
17247: LD_INT 0
17249: ST_TO_ADDR
17250: GO 17268
// min_x := x - r ;
17252: LD_ADDR_VAR 0 7
17256: PUSH
17257: LD_VAR 0 2
17261: PUSH
17262: LD_VAR 0 4
17266: MINUS
17267: ST_TO_ADDR
// if y - r < 0 then
17268: LD_VAR 0 3
17272: PUSH
17273: LD_VAR 0 4
17277: MINUS
17278: PUSH
17279: LD_INT 0
17281: LESS
17282: IFFALSE 17294
// min_y := 0 else
17284: LD_ADDR_VAR 0 8
17288: PUSH
17289: LD_INT 0
17291: ST_TO_ADDR
17292: GO 17310
// min_y := y - r ;
17294: LD_ADDR_VAR 0 8
17298: PUSH
17299: LD_VAR 0 3
17303: PUSH
17304: LD_VAR 0 4
17308: MINUS
17309: ST_TO_ADDR
// max_x := x + r ;
17310: LD_ADDR_VAR 0 9
17314: PUSH
17315: LD_VAR 0 2
17319: PUSH
17320: LD_VAR 0 4
17324: PLUS
17325: ST_TO_ADDR
// max_y := y + r ;
17326: LD_ADDR_VAR 0 10
17330: PUSH
17331: LD_VAR 0 3
17335: PUSH
17336: LD_VAR 0 4
17340: PLUS
17341: ST_TO_ADDR
// for _x = min_x to max_x do
17342: LD_ADDR_VAR 0 11
17346: PUSH
17347: DOUBLE
17348: LD_VAR 0 7
17352: DEC
17353: ST_TO_ADDR
17354: LD_VAR 0 9
17358: PUSH
17359: FOR_TO
17360: IFFALSE 17477
// for _y = min_y to max_y do
17362: LD_ADDR_VAR 0 12
17366: PUSH
17367: DOUBLE
17368: LD_VAR 0 8
17372: DEC
17373: ST_TO_ADDR
17374: LD_VAR 0 10
17378: PUSH
17379: FOR_TO
17380: IFFALSE 17473
// begin if not ValidHex ( _x , _y ) then
17382: LD_VAR 0 11
17386: PPUSH
17387: LD_VAR 0 12
17391: PPUSH
17392: CALL_OW 488
17396: NOT
17397: IFFALSE 17401
// continue ;
17399: GO 17379
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17401: LD_VAR 0 11
17405: PPUSH
17406: LD_VAR 0 12
17410: PPUSH
17411: CALL_OW 351
17415: PUSH
17416: LD_VAR 0 11
17420: PPUSH
17421: LD_VAR 0 12
17425: PPUSH
17426: CALL_OW 554
17430: AND
17431: IFFALSE 17471
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17433: LD_ADDR_VAR 0 13
17437: PUSH
17438: LD_VAR 0 13
17442: PPUSH
17443: LD_VAR 0 13
17447: PUSH
17448: LD_INT 1
17450: PLUS
17451: PPUSH
17452: LD_VAR 0 11
17456: PUSH
17457: LD_VAR 0 12
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 2
17470: ST_TO_ADDR
// end ;
17471: GO 17379
17473: POP
17474: POP
17475: GO 17359
17477: POP
17478: POP
// if not list then
17479: LD_VAR 0 13
17483: NOT
17484: IFFALSE 17488
// exit ;
17486: GO 17559
// for i in list do
17488: LD_ADDR_VAR 0 6
17492: PUSH
17493: LD_VAR 0 13
17497: PUSH
17498: FOR_IN
17499: IFFALSE 17557
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_STRING M
17508: PUSH
17509: LD_VAR 0 6
17513: PUSH
17514: LD_INT 1
17516: ARRAY
17517: PUSH
17518: LD_VAR 0 6
17522: PUSH
17523: LD_INT 2
17525: ARRAY
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: PPUSH
17551: CALL_OW 447
17555: GO 17498
17557: POP
17558: POP
// end ;
17559: LD_VAR 0 5
17563: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17576: LD_VAR 0 1
17580: PPUSH
17581: CALL_OW 302
17585: NOT
17586: PUSH
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: CALL_OW 488
17601: NOT
17602: OR
17603: PUSH
17604: LD_VAR 0 4
17608: NOT
17609: OR
17610: IFFALSE 17614
// exit ;
17612: GO 18127
// list := [ ] ;
17614: LD_ADDR_VAR 0 13
17618: PUSH
17619: EMPTY
17620: ST_TO_ADDR
// if x - r < 0 then
17621: LD_VAR 0 2
17625: PUSH
17626: LD_VAR 0 4
17630: MINUS
17631: PUSH
17632: LD_INT 0
17634: LESS
17635: IFFALSE 17647
// min_x := 0 else
17637: LD_ADDR_VAR 0 7
17641: PUSH
17642: LD_INT 0
17644: ST_TO_ADDR
17645: GO 17663
// min_x := x - r ;
17647: LD_ADDR_VAR 0 7
17651: PUSH
17652: LD_VAR 0 2
17656: PUSH
17657: LD_VAR 0 4
17661: MINUS
17662: ST_TO_ADDR
// if y - r < 0 then
17663: LD_VAR 0 3
17667: PUSH
17668: LD_VAR 0 4
17672: MINUS
17673: PUSH
17674: LD_INT 0
17676: LESS
17677: IFFALSE 17689
// min_y := 0 else
17679: LD_ADDR_VAR 0 8
17683: PUSH
17684: LD_INT 0
17686: ST_TO_ADDR
17687: GO 17705
// min_y := y - r ;
17689: LD_ADDR_VAR 0 8
17693: PUSH
17694: LD_VAR 0 3
17698: PUSH
17699: LD_VAR 0 4
17703: MINUS
17704: ST_TO_ADDR
// max_x := x + r ;
17705: LD_ADDR_VAR 0 9
17709: PUSH
17710: LD_VAR 0 2
17714: PUSH
17715: LD_VAR 0 4
17719: PLUS
17720: ST_TO_ADDR
// max_y := y + r ;
17721: LD_ADDR_VAR 0 10
17725: PUSH
17726: LD_VAR 0 3
17730: PUSH
17731: LD_VAR 0 4
17735: PLUS
17736: ST_TO_ADDR
// for _x = min_x to max_x do
17737: LD_ADDR_VAR 0 11
17741: PUSH
17742: DOUBLE
17743: LD_VAR 0 7
17747: DEC
17748: ST_TO_ADDR
17749: LD_VAR 0 9
17753: PUSH
17754: FOR_TO
17755: IFFALSE 17872
// for _y = min_y to max_y do
17757: LD_ADDR_VAR 0 12
17761: PUSH
17762: DOUBLE
17763: LD_VAR 0 8
17767: DEC
17768: ST_TO_ADDR
17769: LD_VAR 0 10
17773: PUSH
17774: FOR_TO
17775: IFFALSE 17868
// begin if not ValidHex ( _x , _y ) then
17777: LD_VAR 0 11
17781: PPUSH
17782: LD_VAR 0 12
17786: PPUSH
17787: CALL_OW 488
17791: NOT
17792: IFFALSE 17796
// continue ;
17794: GO 17774
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17796: LD_VAR 0 11
17800: PPUSH
17801: LD_VAR 0 12
17805: PPUSH
17806: CALL_OW 351
17810: PUSH
17811: LD_VAR 0 11
17815: PPUSH
17816: LD_VAR 0 12
17820: PPUSH
17821: CALL_OW 554
17825: AND
17826: IFFALSE 17866
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17828: LD_ADDR_VAR 0 13
17832: PUSH
17833: LD_VAR 0 13
17837: PPUSH
17838: LD_VAR 0 13
17842: PUSH
17843: LD_INT 1
17845: PLUS
17846: PPUSH
17847: LD_VAR 0 11
17851: PUSH
17852: LD_VAR 0 12
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 2
17865: ST_TO_ADDR
// end ;
17866: GO 17774
17868: POP
17869: POP
17870: GO 17754
17872: POP
17873: POP
// if not list then
17874: LD_VAR 0 13
17878: NOT
17879: IFFALSE 17883
// exit ;
17881: GO 18127
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17883: LD_ADDR_VAR 0 13
17887: PUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: LD_VAR 0 13
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL 27003 0 4
17908: ST_TO_ADDR
// ComStop ( flame ) ;
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 141
// for i in list do
17918: LD_ADDR_VAR 0 6
17922: PUSH
17923: LD_VAR 0 13
17927: PUSH
17928: FOR_IN
17929: IFFALSE 17960
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17931: LD_VAR 0 1
17935: PPUSH
17936: LD_VAR 0 6
17940: PUSH
17941: LD_INT 1
17943: ARRAY
17944: PPUSH
17945: LD_VAR 0 6
17949: PUSH
17950: LD_INT 2
17952: ARRAY
17953: PPUSH
17954: CALL_OW 176
17958: GO 17928
17960: POP
17961: POP
// repeat wait ( 0 0$1 ) ;
17962: LD_INT 35
17964: PPUSH
17965: CALL_OW 67
// task := GetTaskList ( flame ) ;
17969: LD_ADDR_VAR 0 14
17973: PUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 437
17983: ST_TO_ADDR
// if not task then
17984: LD_VAR 0 14
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18127
// if task [ 1 ] [ 1 ] <> | then
17993: LD_VAR 0 14
17997: PUSH
17998: LD_INT 1
18000: ARRAY
18001: PUSH
18002: LD_INT 1
18004: ARRAY
18005: PUSH
18006: LD_STRING |
18008: NONEQUAL
18009: IFFALSE 18013
// exit ;
18011: GO 18127
// _x := task [ 1 ] [ 2 ] ;
18013: LD_ADDR_VAR 0 11
18017: PUSH
18018: LD_VAR 0 14
18022: PUSH
18023: LD_INT 1
18025: ARRAY
18026: PUSH
18027: LD_INT 2
18029: ARRAY
18030: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18031: LD_ADDR_VAR 0 12
18035: PUSH
18036: LD_VAR 0 14
18040: PUSH
18041: LD_INT 1
18043: ARRAY
18044: PUSH
18045: LD_INT 3
18047: ARRAY
18048: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18049: LD_VAR 0 11
18053: PPUSH
18054: LD_VAR 0 12
18058: PPUSH
18059: CALL_OW 351
18063: NOT
18064: PUSH
18065: LD_VAR 0 11
18069: PPUSH
18070: LD_VAR 0 12
18074: PPUSH
18075: CALL_OW 554
18079: NOT
18080: OR
18081: IFFALSE 18115
// begin task := Delete ( task , 1 ) ;
18083: LD_ADDR_VAR 0 14
18087: PUSH
18088: LD_VAR 0 14
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 3
18100: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18101: LD_VAR 0 1
18105: PPUSH
18106: LD_VAR 0 14
18110: PPUSH
18111: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 314
18124: NOT
18125: IFFALSE 17962
// end ;
18127: LD_VAR 0 5
18131: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18132: LD_EXP 63
18136: NOT
18137: IFFALSE 18187
18139: GO 18141
18141: DISABLE
// begin initHack := true ;
18142: LD_ADDR_EXP 63
18146: PUSH
18147: LD_INT 1
18149: ST_TO_ADDR
// hackTanks := [ ] ;
18150: LD_ADDR_EXP 64
18154: PUSH
18155: EMPTY
18156: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18157: LD_ADDR_EXP 65
18161: PUSH
18162: EMPTY
18163: ST_TO_ADDR
// hackLimit := 3 ;
18164: LD_ADDR_EXP 66
18168: PUSH
18169: LD_INT 3
18171: ST_TO_ADDR
// hackDist := 12 ;
18172: LD_ADDR_EXP 67
18176: PUSH
18177: LD_INT 12
18179: ST_TO_ADDR
// hackCounter := [ ] ;
18180: LD_ADDR_EXP 68
18184: PUSH
18185: EMPTY
18186: ST_TO_ADDR
// end ;
18187: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18188: LD_EXP 63
18192: PUSH
18193: LD_INT 34
18195: PUSH
18196: LD_INT 99
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: AND
18208: IFFALSE 18461
18210: GO 18212
18212: DISABLE
18213: LD_INT 0
18215: PPUSH
18216: PPUSH
// begin enable ;
18217: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18218: LD_ADDR_VAR 0 1
18222: PUSH
18223: LD_INT 34
18225: PUSH
18226: LD_INT 99
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: PUSH
18238: FOR_IN
18239: IFFALSE 18459
// begin if not i in hackTanks then
18241: LD_VAR 0 1
18245: PUSH
18246: LD_EXP 64
18250: IN
18251: NOT
18252: IFFALSE 18335
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18254: LD_ADDR_EXP 64
18258: PUSH
18259: LD_EXP 64
18263: PPUSH
18264: LD_EXP 64
18268: PUSH
18269: LD_INT 1
18271: PLUS
18272: PPUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 1
18282: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18283: LD_ADDR_EXP 65
18287: PUSH
18288: LD_EXP 65
18292: PPUSH
18293: LD_EXP 65
18297: PUSH
18298: LD_INT 1
18300: PLUS
18301: PPUSH
18302: EMPTY
18303: PPUSH
18304: CALL_OW 1
18308: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18309: LD_ADDR_EXP 68
18313: PUSH
18314: LD_EXP 68
18318: PPUSH
18319: LD_EXP 68
18323: PUSH
18324: LD_INT 1
18326: PLUS
18327: PPUSH
18328: EMPTY
18329: PPUSH
18330: CALL_OW 1
18334: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 302
18344: NOT
18345: IFFALSE 18358
// begin HackUnlinkAll ( i ) ;
18347: LD_VAR 0 1
18351: PPUSH
18352: CALL 18464 0 1
// continue ;
18356: GO 18238
// end ; HackCheckCapturedStatus ( i ) ;
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL 18907 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18367: LD_ADDR_VAR 0 2
18371: PUSH
18372: LD_INT 81
18374: PUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 255
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 33
18391: PUSH
18392: LD_INT 3
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 91
18401: PUSH
18402: LD_VAR 0 1
18406: PUSH
18407: LD_EXP 67
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 50
18419: PUSH
18420: EMPTY
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if not tmp then
18434: LD_VAR 0 2
18438: NOT
18439: IFFALSE 18443
// continue ;
18441: GO 18238
// HackLink ( i , tmp ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: LD_VAR 0 2
18452: PPUSH
18453: CALL 18600 0 2
// end ;
18457: GO 18238
18459: POP
18460: POP
// end ;
18461: PPOPN 2
18463: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
18468: PPUSH
// if not hack in hackTanks then
18469: LD_VAR 0 1
18473: PUSH
18474: LD_EXP 64
18478: IN
18479: NOT
18480: IFFALSE 18484
// exit ;
18482: GO 18595
// index := GetElementIndex ( hackTanks , hack ) ;
18484: LD_ADDR_VAR 0 4
18488: PUSH
18489: LD_EXP 64
18493: PPUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL 26300 0 2
18503: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18504: LD_EXP 65
18508: PUSH
18509: LD_VAR 0 4
18513: ARRAY
18514: IFFALSE 18595
// begin for i in hackTanksCaptured [ index ] do
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_EXP 65
18525: PUSH
18526: LD_VAR 0 4
18530: ARRAY
18531: PUSH
18532: FOR_IN
18533: IFFALSE 18559
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18535: LD_VAR 0 3
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: LD_VAR 0 3
18548: PUSH
18549: LD_INT 2
18551: ARRAY
18552: PPUSH
18553: CALL_OW 235
18557: GO 18532
18559: POP
18560: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18561: LD_ADDR_EXP 65
18565: PUSH
18566: LD_EXP 65
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: EMPTY
18577: PPUSH
18578: CALL_OW 1
18582: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18583: LD_VAR 0 1
18587: PPUSH
18588: LD_INT 0
18590: PPUSH
18591: CALL_OW 505
// end ; end ;
18595: LD_VAR 0 2
18599: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18600: LD_INT 0
18602: PPUSH
18603: PPUSH
18604: PPUSH
// if not hack in hackTanks or not vehicles then
18605: LD_VAR 0 1
18609: PUSH
18610: LD_EXP 64
18614: IN
18615: NOT
18616: PUSH
18617: LD_VAR 0 2
18621: NOT
18622: OR
18623: IFFALSE 18627
// exit ;
18625: GO 18902
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: LD_VAR 0 2
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_INT 1
18647: PPUSH
18648: CALL 26950 0 4
18652: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18653: LD_ADDR_VAR 0 5
18657: PUSH
18658: LD_EXP 64
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL 26300 0 2
18672: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18673: LD_EXP 65
18677: PUSH
18678: LD_VAR 0 5
18682: ARRAY
18683: PUSH
18684: LD_EXP 66
18688: LESS
18689: IFFALSE 18878
// begin for i := 1 to vehicles do
18691: LD_ADDR_VAR 0 4
18695: PUSH
18696: DOUBLE
18697: LD_INT 1
18699: DEC
18700: ST_TO_ADDR
18701: LD_VAR 0 2
18705: PUSH
18706: FOR_TO
18707: IFFALSE 18876
// begin if hackTanksCaptured [ index ] = hackLimit then
18709: LD_EXP 65
18713: PUSH
18714: LD_VAR 0 5
18718: ARRAY
18719: PUSH
18720: LD_EXP 66
18724: EQUAL
18725: IFFALSE 18729
// break ;
18727: GO 18876
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18729: LD_ADDR_EXP 68
18733: PUSH
18734: LD_EXP 68
18738: PPUSH
18739: LD_VAR 0 5
18743: PPUSH
18744: LD_EXP 68
18748: PUSH
18749: LD_VAR 0 5
18753: ARRAY
18754: PUSH
18755: LD_INT 1
18757: PLUS
18758: PPUSH
18759: CALL_OW 1
18763: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18764: LD_ADDR_EXP 65
18768: PUSH
18769: LD_EXP 65
18773: PPUSH
18774: LD_VAR 0 5
18778: PUSH
18779: LD_EXP 65
18783: PUSH
18784: LD_VAR 0 5
18788: ARRAY
18789: PUSH
18790: LD_INT 1
18792: PLUS
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PPUSH
18798: LD_VAR 0 2
18802: PUSH
18803: LD_VAR 0 4
18807: ARRAY
18808: PUSH
18809: LD_VAR 0 2
18813: PUSH
18814: LD_VAR 0 4
18818: ARRAY
18819: PPUSH
18820: CALL_OW 255
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PPUSH
18829: CALL 26515 0 3
18833: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18834: LD_VAR 0 2
18838: PUSH
18839: LD_VAR 0 4
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 255
18854: PPUSH
18855: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18859: LD_VAR 0 2
18863: PUSH
18864: LD_VAR 0 4
18868: ARRAY
18869: PPUSH
18870: CALL_OW 141
// end ;
18874: GO 18706
18876: POP
18877: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18878: LD_VAR 0 1
18882: PPUSH
18883: LD_EXP 65
18887: PUSH
18888: LD_VAR 0 5
18892: ARRAY
18893: PUSH
18894: LD_INT 0
18896: PLUS
18897: PPUSH
18898: CALL_OW 505
// end ;
18902: LD_VAR 0 3
18906: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
18912: PPUSH
// if not hack in hackTanks then
18913: LD_VAR 0 1
18917: PUSH
18918: LD_EXP 64
18922: IN
18923: NOT
18924: IFFALSE 18928
// exit ;
18926: GO 19168
// index := GetElementIndex ( hackTanks , hack ) ;
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_EXP 64
18937: PPUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL 26300 0 2
18947: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18948: LD_ADDR_VAR 0 3
18952: PUSH
18953: DOUBLE
18954: LD_EXP 65
18958: PUSH
18959: LD_VAR 0 4
18963: ARRAY
18964: INC
18965: ST_TO_ADDR
18966: LD_INT 1
18968: PUSH
18969: FOR_DOWNTO
18970: IFFALSE 19142
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18972: LD_ADDR_VAR 0 5
18976: PUSH
18977: LD_EXP 65
18981: PUSH
18982: LD_VAR 0 4
18986: ARRAY
18987: PUSH
18988: LD_VAR 0 3
18992: ARRAY
18993: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18994: LD_VAR 0 5
18998: PUSH
18999: LD_INT 1
19001: ARRAY
19002: PPUSH
19003: CALL_OW 302
19007: NOT
19008: PUSH
19009: LD_VAR 0 5
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: PPUSH
19018: CALL_OW 255
19022: PUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 255
19032: NONEQUAL
19033: OR
19034: IFFALSE 19140
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19036: LD_VAR 0 5
19040: PUSH
19041: LD_INT 1
19043: ARRAY
19044: PPUSH
19045: CALL_OW 305
19049: PUSH
19050: LD_VAR 0 5
19054: PUSH
19055: LD_INT 1
19057: ARRAY
19058: PPUSH
19059: CALL_OW 255
19063: PUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 255
19073: EQUAL
19074: AND
19075: IFFALSE 19099
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19077: LD_VAR 0 5
19081: PUSH
19082: LD_INT 1
19084: ARRAY
19085: PPUSH
19086: LD_VAR 0 5
19090: PUSH
19091: LD_INT 2
19093: ARRAY
19094: PPUSH
19095: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19099: LD_ADDR_EXP 65
19103: PUSH
19104: LD_EXP 65
19108: PPUSH
19109: LD_VAR 0 4
19113: PPUSH
19114: LD_EXP 65
19118: PUSH
19119: LD_VAR 0 4
19123: ARRAY
19124: PPUSH
19125: LD_VAR 0 3
19129: PPUSH
19130: CALL_OW 3
19134: PPUSH
19135: CALL_OW 1
19139: ST_TO_ADDR
// end ; end ;
19140: GO 18969
19142: POP
19143: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19144: LD_VAR 0 1
19148: PPUSH
19149: LD_EXP 65
19153: PUSH
19154: LD_VAR 0 4
19158: ARRAY
19159: PUSH
19160: LD_INT 0
19162: PLUS
19163: PPUSH
19164: CALL_OW 505
// end ;
19168: LD_VAR 0 2
19172: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
// if not hack in hackTanks then
19179: LD_VAR 0 1
19183: PUSH
19184: LD_EXP 64
19188: IN
19189: NOT
19190: IFFALSE 19194
// exit ;
19192: GO 19279
// index := GetElementIndex ( hackTanks , hack ) ;
19194: LD_ADDR_VAR 0 5
19198: PUSH
19199: LD_EXP 64
19203: PPUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL 26300 0 2
19213: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19214: LD_ADDR_VAR 0 4
19218: PUSH
19219: DOUBLE
19220: LD_INT 1
19222: DEC
19223: ST_TO_ADDR
19224: LD_EXP 65
19228: PUSH
19229: LD_VAR 0 5
19233: ARRAY
19234: PUSH
19235: FOR_TO
19236: IFFALSE 19277
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19238: LD_EXP 65
19242: PUSH
19243: LD_VAR 0 5
19247: ARRAY
19248: PUSH
19249: LD_VAR 0 4
19253: ARRAY
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: PUSH
19259: LD_VAR 0 2
19263: EQUAL
19264: IFFALSE 19275
// KillUnit ( vehicle ) ;
19266: LD_VAR 0 2
19270: PPUSH
19271: CALL_OW 66
19275: GO 19235
19277: POP
19278: POP
// end ;
19279: LD_VAR 0 3
19283: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19284: LD_EXP 69
19288: NOT
19289: IFFALSE 19324
19291: GO 19293
19293: DISABLE
// begin initMiner := true ;
19294: LD_ADDR_EXP 69
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// minersList := [ ] ;
19302: LD_ADDR_EXP 70
19306: PUSH
19307: EMPTY
19308: ST_TO_ADDR
// minerMinesList := [ ] ;
19309: LD_ADDR_EXP 71
19313: PUSH
19314: EMPTY
19315: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19316: LD_ADDR_EXP 72
19320: PUSH
19321: LD_INT 5
19323: ST_TO_ADDR
// end ;
19324: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19325: LD_EXP 69
19329: PUSH
19330: LD_INT 34
19332: PUSH
19333: LD_INT 81
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 69
19344: AND
19345: IFFALSE 19806
19347: GO 19349
19349: DISABLE
19350: LD_INT 0
19352: PPUSH
19353: PPUSH
19354: PPUSH
19355: PPUSH
// begin enable ;
19356: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19357: LD_ADDR_VAR 0 1
19361: PUSH
19362: LD_INT 34
19364: PUSH
19365: LD_INT 81
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PPUSH
19372: CALL_OW 69
19376: PUSH
19377: FOR_IN
19378: IFFALSE 19450
// begin if not i in minersList then
19380: LD_VAR 0 1
19384: PUSH
19385: LD_EXP 70
19389: IN
19390: NOT
19391: IFFALSE 19448
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19393: LD_ADDR_EXP 70
19397: PUSH
19398: LD_EXP 70
19402: PPUSH
19403: LD_EXP 70
19407: PUSH
19408: LD_INT 1
19410: PLUS
19411: PPUSH
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 1
19421: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19422: LD_ADDR_EXP 71
19426: PUSH
19427: LD_EXP 71
19431: PPUSH
19432: LD_EXP 71
19436: PUSH
19437: LD_INT 1
19439: PLUS
19440: PPUSH
19441: EMPTY
19442: PPUSH
19443: CALL_OW 1
19447: ST_TO_ADDR
// end end ;
19448: GO 19377
19450: POP
19451: POP
// for i := minerMinesList downto 1 do
19452: LD_ADDR_VAR 0 1
19456: PUSH
19457: DOUBLE
19458: LD_EXP 71
19462: INC
19463: ST_TO_ADDR
19464: LD_INT 1
19466: PUSH
19467: FOR_DOWNTO
19468: IFFALSE 19804
// begin if IsLive ( minersList [ i ] ) then
19470: LD_EXP 70
19474: PUSH
19475: LD_VAR 0 1
19479: ARRAY
19480: PPUSH
19481: CALL_OW 300
19485: IFFALSE 19513
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19487: LD_EXP 70
19491: PUSH
19492: LD_VAR 0 1
19496: ARRAY
19497: PPUSH
19498: LD_EXP 71
19502: PUSH
19503: LD_VAR 0 1
19507: ARRAY
19508: PPUSH
19509: CALL_OW 505
// if not minerMinesList [ i ] then
19513: LD_EXP 71
19517: PUSH
19518: LD_VAR 0 1
19522: ARRAY
19523: NOT
19524: IFFALSE 19528
// continue ;
19526: GO 19467
// for j := minerMinesList [ i ] downto 1 do
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: DOUBLE
19534: LD_EXP 71
19538: PUSH
19539: LD_VAR 0 1
19543: ARRAY
19544: INC
19545: ST_TO_ADDR
19546: LD_INT 1
19548: PUSH
19549: FOR_DOWNTO
19550: IFFALSE 19800
// begin side := GetSide ( minersList [ i ] ) ;
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_EXP 70
19561: PUSH
19562: LD_VAR 0 1
19566: ARRAY
19567: PPUSH
19568: CALL_OW 255
19572: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19573: LD_ADDR_VAR 0 4
19577: PUSH
19578: LD_EXP 71
19582: PUSH
19583: LD_VAR 0 1
19587: ARRAY
19588: PUSH
19589: LD_VAR 0 2
19593: ARRAY
19594: PUSH
19595: LD_INT 1
19597: ARRAY
19598: PPUSH
19599: LD_EXP 71
19603: PUSH
19604: LD_VAR 0 1
19608: ARRAY
19609: PUSH
19610: LD_VAR 0 2
19614: ARRAY
19615: PUSH
19616: LD_INT 2
19618: ARRAY
19619: PPUSH
19620: CALL_OW 428
19624: ST_TO_ADDR
// if not tmp then
19625: LD_VAR 0 4
19629: NOT
19630: IFFALSE 19634
// continue ;
19632: GO 19549
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19634: LD_VAR 0 4
19638: PUSH
19639: LD_INT 81
19641: PUSH
19642: LD_VAR 0 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PPUSH
19651: CALL_OW 69
19655: IN
19656: PUSH
19657: LD_EXP 71
19661: PUSH
19662: LD_VAR 0 1
19666: ARRAY
19667: PUSH
19668: LD_VAR 0 2
19672: ARRAY
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PPUSH
19678: LD_EXP 71
19682: PUSH
19683: LD_VAR 0 1
19687: ARRAY
19688: PUSH
19689: LD_VAR 0 2
19693: ARRAY
19694: PUSH
19695: LD_INT 2
19697: ARRAY
19698: PPUSH
19699: CALL_OW 458
19703: AND
19704: IFFALSE 19798
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19706: LD_EXP 71
19710: PUSH
19711: LD_VAR 0 1
19715: ARRAY
19716: PUSH
19717: LD_VAR 0 2
19721: ARRAY
19722: PUSH
19723: LD_INT 1
19725: ARRAY
19726: PPUSH
19727: LD_EXP 71
19731: PUSH
19732: LD_VAR 0 1
19736: ARRAY
19737: PUSH
19738: LD_VAR 0 2
19742: ARRAY
19743: PUSH
19744: LD_INT 2
19746: ARRAY
19747: PPUSH
19748: LD_VAR 0 3
19752: PPUSH
19753: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19757: LD_ADDR_EXP 71
19761: PUSH
19762: LD_EXP 71
19766: PPUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: LD_EXP 71
19776: PUSH
19777: LD_VAR 0 1
19781: ARRAY
19782: PPUSH
19783: LD_VAR 0 2
19787: PPUSH
19788: CALL_OW 3
19792: PPUSH
19793: CALL_OW 1
19797: ST_TO_ADDR
// end ; end ;
19798: GO 19549
19800: POP
19801: POP
// end ;
19802: GO 19467
19804: POP
19805: POP
// end ;
19806: PPOPN 4
19808: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19809: LD_INT 0
19811: PPUSH
19812: PPUSH
// result := false ;
19813: LD_ADDR_VAR 0 4
19817: PUSH
19818: LD_INT 0
19820: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 264
19830: PUSH
19831: LD_INT 81
19833: EQUAL
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 20079
// index := GetElementIndex ( minersList , unit ) ;
19839: LD_ADDR_VAR 0 5
19843: PUSH
19844: LD_EXP 70
19848: PPUSH
19849: LD_VAR 0 1
19853: PPUSH
19854: CALL 26300 0 2
19858: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19859: LD_EXP 71
19863: PUSH
19864: LD_VAR 0 5
19868: ARRAY
19869: PUSH
19870: LD_EXP 72
19874: GREATEREQUAL
19875: IFFALSE 19879
// exit ;
19877: GO 20079
// ComMoveXY ( unit , x , y ) ;
19879: LD_VAR 0 1
19883: PPUSH
19884: LD_VAR 0 2
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19898: LD_INT 35
19900: PPUSH
19901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19905: LD_VAR 0 1
19909: PPUSH
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL 58061 0 3
19924: NOT
19925: PUSH
19926: LD_VAR 0 1
19930: PPUSH
19931: CALL_OW 314
19935: AND
19936: IFFALSE 19940
// exit ;
19938: GO 20079
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19940: LD_VAR 0 2
19944: PPUSH
19945: LD_VAR 0 3
19949: PPUSH
19950: CALL_OW 428
19954: PUSH
19955: LD_VAR 0 1
19959: EQUAL
19960: PUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 314
19970: NOT
19971: AND
19972: IFFALSE 19898
// PlaySoundXY ( x , y , PlantMine ) ;
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: LD_STRING PlantMine
19986: PPUSH
19987: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19991: LD_VAR 0 2
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 255
20010: PPUSH
20011: LD_INT 0
20013: PPUSH
20014: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20018: LD_ADDR_EXP 71
20022: PUSH
20023: LD_EXP 71
20027: PPUSH
20028: LD_VAR 0 5
20032: PUSH
20033: LD_EXP 71
20037: PUSH
20038: LD_VAR 0 5
20042: ARRAY
20043: PUSH
20044: LD_INT 1
20046: PLUS
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: LD_VAR 0 2
20056: PUSH
20057: LD_VAR 0 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL 26515 0 3
20070: ST_TO_ADDR
// result := true ;
20071: LD_ADDR_VAR 0 4
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// end ;
20079: LD_VAR 0 4
20083: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20084: LD_INT 0
20086: PPUSH
20087: PPUSH
20088: PPUSH
// if not unit in minersList then
20089: LD_VAR 0 1
20093: PUSH
20094: LD_EXP 70
20098: IN
20099: NOT
20100: IFFALSE 20104
// exit ;
20102: GO 20496
// index := GetElementIndex ( minersList , unit ) ;
20104: LD_ADDR_VAR 0 6
20108: PUSH
20109: LD_EXP 70
20113: PPUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: CALL 26300 0 2
20123: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20124: LD_ADDR_VAR 0 5
20128: PUSH
20129: DOUBLE
20130: LD_EXP 71
20134: PUSH
20135: LD_VAR 0 6
20139: ARRAY
20140: INC
20141: ST_TO_ADDR
20142: LD_INT 1
20144: PUSH
20145: FOR_DOWNTO
20146: IFFALSE 20307
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20148: LD_EXP 71
20152: PUSH
20153: LD_VAR 0 6
20157: ARRAY
20158: PUSH
20159: LD_VAR 0 5
20163: ARRAY
20164: PUSH
20165: LD_INT 1
20167: ARRAY
20168: PUSH
20169: LD_VAR 0 2
20173: EQUAL
20174: PUSH
20175: LD_EXP 71
20179: PUSH
20180: LD_VAR 0 6
20184: ARRAY
20185: PUSH
20186: LD_VAR 0 5
20190: ARRAY
20191: PUSH
20192: LD_INT 2
20194: ARRAY
20195: PUSH
20196: LD_VAR 0 3
20200: EQUAL
20201: AND
20202: IFFALSE 20305
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20204: LD_EXP 71
20208: PUSH
20209: LD_VAR 0 6
20213: ARRAY
20214: PUSH
20215: LD_VAR 0 5
20219: ARRAY
20220: PUSH
20221: LD_INT 1
20223: ARRAY
20224: PPUSH
20225: LD_EXP 71
20229: PUSH
20230: LD_VAR 0 6
20234: ARRAY
20235: PUSH
20236: LD_VAR 0 5
20240: ARRAY
20241: PUSH
20242: LD_INT 2
20244: ARRAY
20245: PPUSH
20246: LD_VAR 0 1
20250: PPUSH
20251: CALL_OW 255
20255: PPUSH
20256: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20260: LD_ADDR_EXP 71
20264: PUSH
20265: LD_EXP 71
20269: PPUSH
20270: LD_VAR 0 6
20274: PPUSH
20275: LD_EXP 71
20279: PUSH
20280: LD_VAR 0 6
20284: ARRAY
20285: PPUSH
20286: LD_VAR 0 5
20290: PPUSH
20291: CALL_OW 3
20295: PPUSH
20296: CALL_OW 1
20300: ST_TO_ADDR
// exit ;
20301: POP
20302: POP
20303: GO 20496
// end ; end ;
20305: GO 20145
20307: POP
20308: POP
// for i := minerMinesList [ index ] downto 1 do
20309: LD_ADDR_VAR 0 5
20313: PUSH
20314: DOUBLE
20315: LD_EXP 71
20319: PUSH
20320: LD_VAR 0 6
20324: ARRAY
20325: INC
20326: ST_TO_ADDR
20327: LD_INT 1
20329: PUSH
20330: FOR_DOWNTO
20331: IFFALSE 20494
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20333: LD_EXP 71
20337: PUSH
20338: LD_VAR 0 6
20342: ARRAY
20343: PUSH
20344: LD_VAR 0 5
20348: ARRAY
20349: PUSH
20350: LD_INT 1
20352: ARRAY
20353: PPUSH
20354: LD_EXP 71
20358: PUSH
20359: LD_VAR 0 6
20363: ARRAY
20364: PUSH
20365: LD_VAR 0 5
20369: ARRAY
20370: PUSH
20371: LD_INT 2
20373: ARRAY
20374: PPUSH
20375: LD_VAR 0 2
20379: PPUSH
20380: LD_VAR 0 3
20384: PPUSH
20385: CALL_OW 298
20389: PUSH
20390: LD_INT 6
20392: LESS
20393: IFFALSE 20492
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20395: LD_EXP 71
20399: PUSH
20400: LD_VAR 0 6
20404: ARRAY
20405: PUSH
20406: LD_VAR 0 5
20410: ARRAY
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: PPUSH
20416: LD_EXP 71
20420: PUSH
20421: LD_VAR 0 6
20425: ARRAY
20426: PUSH
20427: LD_VAR 0 5
20431: ARRAY
20432: PUSH
20433: LD_INT 2
20435: ARRAY
20436: PPUSH
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 255
20446: PPUSH
20447: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20451: LD_ADDR_EXP 71
20455: PUSH
20456: LD_EXP 71
20460: PPUSH
20461: LD_VAR 0 6
20465: PPUSH
20466: LD_EXP 71
20470: PUSH
20471: LD_VAR 0 6
20475: ARRAY
20476: PPUSH
20477: LD_VAR 0 5
20481: PPUSH
20482: CALL_OW 3
20486: PPUSH
20487: CALL_OW 1
20491: ST_TO_ADDR
// end ; end ;
20492: GO 20330
20494: POP
20495: POP
// end ;
20496: LD_VAR 0 4
20500: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20501: LD_INT 0
20503: PPUSH
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL_OW 264
20521: PUSH
20522: LD_INT 81
20524: EQUAL
20525: NOT
20526: PUSH
20527: LD_VAR 0 1
20531: PUSH
20532: LD_EXP 70
20536: IN
20537: NOT
20538: OR
20539: IFFALSE 20543
// exit ;
20541: GO 20865
// index := GetElementIndex ( minersList , unit ) ;
20543: LD_ADDR_VAR 0 6
20547: PUSH
20548: LD_EXP 70
20552: PPUSH
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL 26300 0 2
20562: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20563: LD_ADDR_VAR 0 8
20567: PUSH
20568: LD_EXP 72
20572: PUSH
20573: LD_EXP 71
20577: PUSH
20578: LD_VAR 0 6
20582: ARRAY
20583: MINUS
20584: ST_TO_ADDR
// if not minesFreeAmount then
20585: LD_VAR 0 8
20589: NOT
20590: IFFALSE 20594
// exit ;
20592: GO 20865
// tmp := [ ] ;
20594: LD_ADDR_VAR 0 7
20598: PUSH
20599: EMPTY
20600: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20601: LD_ADDR_VAR 0 5
20605: PUSH
20606: DOUBLE
20607: LD_INT 1
20609: DEC
20610: ST_TO_ADDR
20611: LD_VAR 0 8
20615: PUSH
20616: FOR_TO
20617: IFFALSE 20812
// begin _d := rand ( 0 , 5 ) ;
20619: LD_ADDR_VAR 0 11
20623: PUSH
20624: LD_INT 0
20626: PPUSH
20627: LD_INT 5
20629: PPUSH
20630: CALL_OW 12
20634: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20635: LD_ADDR_VAR 0 12
20639: PUSH
20640: LD_INT 2
20642: PPUSH
20643: LD_INT 6
20645: PPUSH
20646: CALL_OW 12
20650: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20651: LD_ADDR_VAR 0 9
20655: PUSH
20656: LD_VAR 0 2
20660: PPUSH
20661: LD_VAR 0 11
20665: PPUSH
20666: LD_VAR 0 12
20670: PPUSH
20671: CALL_OW 272
20675: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20676: LD_ADDR_VAR 0 10
20680: PUSH
20681: LD_VAR 0 3
20685: PPUSH
20686: LD_VAR 0 11
20690: PPUSH
20691: LD_VAR 0 12
20695: PPUSH
20696: CALL_OW 273
20700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20701: LD_VAR 0 9
20705: PPUSH
20706: LD_VAR 0 10
20710: PPUSH
20711: CALL_OW 488
20715: PUSH
20716: LD_VAR 0 9
20720: PUSH
20721: LD_VAR 0 10
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_VAR 0 7
20734: IN
20735: NOT
20736: AND
20737: PUSH
20738: LD_VAR 0 9
20742: PPUSH
20743: LD_VAR 0 10
20747: PPUSH
20748: CALL_OW 458
20752: NOT
20753: AND
20754: IFFALSE 20796
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20756: LD_ADDR_VAR 0 7
20760: PUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: LD_VAR 0 7
20770: PUSH
20771: LD_INT 1
20773: PLUS
20774: PPUSH
20775: LD_VAR 0 9
20779: PUSH
20780: LD_VAR 0 10
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PPUSH
20789: CALL_OW 1
20793: ST_TO_ADDR
20794: GO 20810
// i := i - 1 ;
20796: LD_ADDR_VAR 0 5
20800: PUSH
20801: LD_VAR 0 5
20805: PUSH
20806: LD_INT 1
20808: MINUS
20809: ST_TO_ADDR
// end ;
20810: GO 20616
20812: POP
20813: POP
// for i in tmp do
20814: LD_ADDR_VAR 0 5
20818: PUSH
20819: LD_VAR 0 7
20823: PUSH
20824: FOR_IN
20825: IFFALSE 20863
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_VAR 0 5
20836: PUSH
20837: LD_INT 1
20839: ARRAY
20840: PPUSH
20841: LD_VAR 0 5
20845: PUSH
20846: LD_INT 2
20848: ARRAY
20849: PPUSH
20850: CALL 19809 0 3
20854: NOT
20855: IFFALSE 20861
// exit ;
20857: POP
20858: POP
20859: GO 20865
20861: GO 20824
20863: POP
20864: POP
// end ;
20865: LD_VAR 0 4
20869: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
20876: PPUSH
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
// if GetClass ( unit ) <> class_sniper then
20881: LD_VAR 0 1
20885: PPUSH
20886: CALL_OW 257
20890: PUSH
20891: LD_INT 5
20893: NONEQUAL
20894: IFFALSE 20898
// exit ;
20896: GO 21364
// dist := 8 ;
20898: LD_ADDR_VAR 0 5
20902: PUSH
20903: LD_INT 8
20905: ST_TO_ADDR
// viewRange := 12 ;
20906: LD_ADDR_VAR 0 8
20910: PUSH
20911: LD_INT 12
20913: ST_TO_ADDR
// side := GetSide ( unit ) ;
20914: LD_ADDR_VAR 0 6
20918: PUSH
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 255
20928: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20929: LD_INT 61
20931: PPUSH
20932: LD_VAR 0 6
20936: PPUSH
20937: CALL_OW 321
20941: PUSH
20942: LD_INT 2
20944: EQUAL
20945: IFFALSE 20955
// viewRange := 16 ;
20947: LD_ADDR_VAR 0 8
20951: PUSH
20952: LD_INT 16
20954: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20955: LD_VAR 0 1
20959: PPUSH
20960: LD_VAR 0 2
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: CALL_OW 297
20974: PUSH
20975: LD_VAR 0 5
20979: GREATER
20980: IFFALSE 21059
// begin ComMoveXY ( unit , x , y ) ;
20982: LD_VAR 0 1
20986: PPUSH
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21001: LD_INT 35
21003: PPUSH
21004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21008: LD_VAR 0 1
21012: PPUSH
21013: LD_VAR 0 2
21017: PPUSH
21018: LD_VAR 0 3
21022: PPUSH
21023: CALL 58061 0 3
21027: NOT
21028: IFFALSE 21032
// exit ;
21030: GO 21364
// until GetDistUnitXY ( unit , x , y ) < dist ;
21032: LD_VAR 0 1
21036: PPUSH
21037: LD_VAR 0 2
21041: PPUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: CALL_OW 297
21051: PUSH
21052: LD_VAR 0 5
21056: LESS
21057: IFFALSE 21001
// end ; ComTurnXY ( unit , x , y ) ;
21059: LD_VAR 0 1
21063: PPUSH
21064: LD_VAR 0 2
21068: PPUSH
21069: LD_VAR 0 3
21073: PPUSH
21074: CALL_OW 118
// repeat if Multiplayer then
21078: LD_OWVAR 4
21082: IFFALSE 21093
// wait ( 35 ) else
21084: LD_INT 35
21086: PPUSH
21087: CALL_OW 67
21091: GO 21100
// wait ( 5 ) ;
21093: LD_INT 5
21095: PPUSH
21096: CALL_OW 67
// _d := GetDir ( unit ) ;
21100: LD_ADDR_VAR 0 11
21104: PUSH
21105: LD_VAR 0 1
21109: PPUSH
21110: CALL_OW 254
21114: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21115: LD_ADDR_VAR 0 7
21119: PUSH
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 250
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 251
21139: PPUSH
21140: LD_VAR 0 2
21144: PPUSH
21145: LD_VAR 0 3
21149: PPUSH
21150: CALL 60669 0 4
21154: ST_TO_ADDR
// until dir = _d ;
21155: LD_VAR 0 7
21159: PUSH
21160: LD_VAR 0 11
21164: EQUAL
21165: IFFALSE 21078
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21167: LD_ADDR_VAR 0 9
21171: PUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 250
21181: PPUSH
21182: LD_VAR 0 7
21186: PPUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: CALL_OW 272
21196: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21197: LD_ADDR_VAR 0 10
21201: PUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 251
21211: PPUSH
21212: LD_VAR 0 7
21216: PPUSH
21217: LD_VAR 0 5
21221: PPUSH
21222: CALL_OW 273
21226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21227: LD_VAR 0 9
21231: PPUSH
21232: LD_VAR 0 10
21236: PPUSH
21237: CALL_OW 488
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21364
// ComAnimCustom ( unit , 1 ) ;
21246: LD_VAR 0 1
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: CALL_OW 592
// p := 0 ;
21258: LD_ADDR_VAR 0 12
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21266: LD_VAR 0 9
21270: PPUSH
21271: LD_VAR 0 10
21275: PPUSH
21276: LD_VAR 0 6
21280: PPUSH
21281: LD_VAR 0 8
21285: PPUSH
21286: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21290: LD_INT 35
21292: PPUSH
21293: CALL_OW 67
// p := Inc ( p ) ;
21297: LD_ADDR_VAR 0 12
21301: PUSH
21302: LD_VAR 0 12
21306: PPUSH
21307: CALL 60625 0 1
21311: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21312: LD_VAR 0 12
21316: PUSH
21317: LD_INT 3
21319: EQUAL
21320: PUSH
21321: LD_VAR 0 1
21325: PPUSH
21326: CALL_OW 302
21330: NOT
21331: OR
21332: PUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 301
21342: OR
21343: IFFALSE 21290
// RemoveSeeing ( _x , _y , side ) ;
21345: LD_VAR 0 9
21349: PPUSH
21350: LD_VAR 0 10
21354: PPUSH
21355: LD_VAR 0 6
21359: PPUSH
21360: CALL_OW 331
// end ; end_of_file
21364: LD_VAR 0 4
21368: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21369: LD_VAR 0 1
21373: PUSH
21374: LD_INT 200
21376: DOUBLE
21377: GREATEREQUAL
21378: IFFALSE 21386
21380: LD_INT 299
21382: DOUBLE
21383: LESSEQUAL
21384: IFTRUE 21388
21386: GO 21420
21388: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21389: LD_VAR 0 1
21393: PPUSH
21394: LD_VAR 0 2
21398: PPUSH
21399: LD_VAR 0 3
21403: PPUSH
21404: LD_VAR 0 4
21408: PPUSH
21409: LD_VAR 0 5
21413: PPUSH
21414: CALL 16670 0 5
21418: GO 21497
21420: LD_INT 300
21422: DOUBLE
21423: GREATEREQUAL
21424: IFFALSE 21432
21426: LD_INT 399
21428: DOUBLE
21429: LESSEQUAL
21430: IFTRUE 21434
21432: GO 21496
21434: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_VAR 0 2
21444: PPUSH
21445: LD_VAR 0 3
21449: PPUSH
21450: LD_VAR 0 4
21454: PPUSH
21455: LD_VAR 0 5
21459: PPUSH
21460: LD_VAR 0 6
21464: PPUSH
21465: LD_VAR 0 7
21469: PPUSH
21470: LD_VAR 0 8
21474: PPUSH
21475: LD_VAR 0 9
21479: PPUSH
21480: LD_VAR 0 10
21484: PPUSH
21485: LD_VAR 0 11
21489: PPUSH
21490: CALL 12658 0 11
21494: GO 21497
21496: POP
// end ;
21497: PPOPN 11
21499: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21500: LD_VAR 0 1
21504: PPUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_VAR 0 3
21514: PPUSH
21515: LD_VAR 0 4
21519: PPUSH
21520: LD_VAR 0 5
21524: PPUSH
21525: CALL 16135 0 5
// end ; end_of_file
21529: PPOPN 5
21531: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21532: LD_INT 0
21534: PPUSH
21535: PPUSH
// if exist_mode then
21536: LD_VAR 0 2
21540: IFFALSE 21586
// begin unit := CreateCharacter ( prefix & ident ) ;
21542: LD_ADDR_VAR 0 5
21546: PUSH
21547: LD_VAR 0 3
21551: PUSH
21552: LD_VAR 0 1
21556: STR
21557: PPUSH
21558: CALL_OW 34
21562: ST_TO_ADDR
// if unit then
21563: LD_VAR 0 5
21567: IFFALSE 21584
// DeleteCharacters ( prefix & ident ) ;
21569: LD_VAR 0 3
21573: PUSH
21574: LD_VAR 0 1
21578: STR
21579: PPUSH
21580: CALL_OW 40
// end else
21584: GO 21601
// unit := NewCharacter ( ident ) ;
21586: LD_ADDR_VAR 0 5
21590: PUSH
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 25
21600: ST_TO_ADDR
// result := unit ;
21601: LD_ADDR_VAR 0 4
21605: PUSH
21606: LD_VAR 0 5
21610: ST_TO_ADDR
// end ;
21611: LD_VAR 0 4
21615: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21616: LD_INT 0
21618: PPUSH
21619: PPUSH
// if not side or not nation then
21620: LD_VAR 0 1
21624: NOT
21625: PUSH
21626: LD_VAR 0 2
21630: NOT
21631: OR
21632: IFFALSE 21636
// exit ;
21634: GO 22404
// case nation of nation_american :
21636: LD_VAR 0 2
21640: PUSH
21641: LD_INT 1
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21863
21649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_INT 35
21657: PUSH
21658: LD_INT 45
21660: PUSH
21661: LD_INT 46
21663: PUSH
21664: LD_INT 47
21666: PUSH
21667: LD_INT 82
21669: PUSH
21670: LD_INT 83
21672: PUSH
21673: LD_INT 84
21675: PUSH
21676: LD_INT 85
21678: PUSH
21679: LD_INT 86
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 6
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 7
21699: PUSH
21700: LD_INT 12
21702: PUSH
21703: LD_INT 13
21705: PUSH
21706: LD_INT 10
21708: PUSH
21709: LD_INT 14
21711: PUSH
21712: LD_INT 20
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_INT 25
21723: PUSH
21724: LD_INT 32
21726: PUSH
21727: LD_INT 27
21729: PUSH
21730: LD_INT 36
21732: PUSH
21733: LD_INT 69
21735: PUSH
21736: LD_INT 39
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 40
21744: PUSH
21745: LD_INT 48
21747: PUSH
21748: LD_INT 49
21750: PUSH
21751: LD_INT 50
21753: PUSH
21754: LD_INT 51
21756: PUSH
21757: LD_INT 52
21759: PUSH
21760: LD_INT 53
21762: PUSH
21763: LD_INT 54
21765: PUSH
21766: LD_INT 55
21768: PUSH
21769: LD_INT 56
21771: PUSH
21772: LD_INT 57
21774: PUSH
21775: LD_INT 58
21777: PUSH
21778: LD_INT 59
21780: PUSH
21781: LD_INT 60
21783: PUSH
21784: LD_INT 61
21786: PUSH
21787: LD_INT 62
21789: PUSH
21790: LD_INT 80
21792: PUSH
21793: LD_INT 82
21795: PUSH
21796: LD_INT 83
21798: PUSH
21799: LD_INT 84
21801: PUSH
21802: LD_INT 85
21804: PUSH
21805: LD_INT 86
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: ST_TO_ADDR
21861: GO 22328
21863: LD_INT 2
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 22097
21871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21872: LD_ADDR_VAR 0 4
21876: PUSH
21877: LD_INT 35
21879: PUSH
21880: LD_INT 45
21882: PUSH
21883: LD_INT 46
21885: PUSH
21886: LD_INT 47
21888: PUSH
21889: LD_INT 82
21891: PUSH
21892: LD_INT 83
21894: PUSH
21895: LD_INT 84
21897: PUSH
21898: LD_INT 85
21900: PUSH
21901: LD_INT 87
21903: PUSH
21904: LD_INT 70
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 6
21924: PUSH
21925: LD_INT 15
21927: PUSH
21928: LD_INT 18
21930: PUSH
21931: LD_INT 7
21933: PUSH
21934: LD_INT 17
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 20
21942: PUSH
21943: LD_INT 21
21945: PUSH
21946: LD_INT 22
21948: PUSH
21949: LD_INT 72
21951: PUSH
21952: LD_INT 26
21954: PUSH
21955: LD_INT 69
21957: PUSH
21958: LD_INT 39
21960: PUSH
21961: LD_INT 40
21963: PUSH
21964: LD_INT 41
21966: PUSH
21967: LD_INT 42
21969: PUSH
21970: LD_INT 43
21972: PUSH
21973: LD_INT 48
21975: PUSH
21976: LD_INT 49
21978: PUSH
21979: LD_INT 50
21981: PUSH
21982: LD_INT 51
21984: PUSH
21985: LD_INT 52
21987: PUSH
21988: LD_INT 53
21990: PUSH
21991: LD_INT 54
21993: PUSH
21994: LD_INT 55
21996: PUSH
21997: LD_INT 56
21999: PUSH
22000: LD_INT 60
22002: PUSH
22003: LD_INT 61
22005: PUSH
22006: LD_INT 62
22008: PUSH
22009: LD_INT 66
22011: PUSH
22012: LD_INT 67
22014: PUSH
22015: LD_INT 68
22017: PUSH
22018: LD_INT 81
22020: PUSH
22021: LD_INT 82
22023: PUSH
22024: LD_INT 83
22026: PUSH
22027: LD_INT 84
22029: PUSH
22030: LD_INT 85
22032: PUSH
22033: LD_INT 87
22035: PUSH
22036: LD_INT 88
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
22095: GO 22328
22097: LD_INT 3
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22327
22105: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22106: LD_ADDR_VAR 0 4
22110: PUSH
22111: LD_INT 46
22113: PUSH
22114: LD_INT 47
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 82
22125: PUSH
22126: LD_INT 83
22128: PUSH
22129: LD_INT 84
22131: PUSH
22132: LD_INT 85
22134: PUSH
22135: LD_INT 86
22137: PUSH
22138: LD_INT 11
22140: PUSH
22141: LD_INT 9
22143: PUSH
22144: LD_INT 20
22146: PUSH
22147: LD_INT 19
22149: PUSH
22150: LD_INT 21
22152: PUSH
22153: LD_INT 24
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_INT 25
22161: PUSH
22162: LD_INT 28
22164: PUSH
22165: LD_INT 29
22167: PUSH
22168: LD_INT 30
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 37
22176: PUSH
22177: LD_INT 38
22179: PUSH
22180: LD_INT 32
22182: PUSH
22183: LD_INT 27
22185: PUSH
22186: LD_INT 33
22188: PUSH
22189: LD_INT 69
22191: PUSH
22192: LD_INT 39
22194: PUSH
22195: LD_INT 34
22197: PUSH
22198: LD_INT 40
22200: PUSH
22201: LD_INT 71
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 44
22209: PUSH
22210: LD_INT 48
22212: PUSH
22213: LD_INT 49
22215: PUSH
22216: LD_INT 50
22218: PUSH
22219: LD_INT 51
22221: PUSH
22222: LD_INT 52
22224: PUSH
22225: LD_INT 53
22227: PUSH
22228: LD_INT 54
22230: PUSH
22231: LD_INT 55
22233: PUSH
22234: LD_INT 56
22236: PUSH
22237: LD_INT 57
22239: PUSH
22240: LD_INT 58
22242: PUSH
22243: LD_INT 59
22245: PUSH
22246: LD_INT 63
22248: PUSH
22249: LD_INT 64
22251: PUSH
22252: LD_INT 65
22254: PUSH
22255: LD_INT 82
22257: PUSH
22258: LD_INT 83
22260: PUSH
22261: LD_INT 84
22263: PUSH
22264: LD_INT 85
22266: PUSH
22267: LD_INT 86
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: ST_TO_ADDR
22325: GO 22328
22327: POP
// if state > - 1 and state < 3 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: GREATER
22337: PUSH
22338: LD_VAR 0 3
22342: PUSH
22343: LD_INT 3
22345: LESS
22346: AND
22347: IFFALSE 22404
// for i in result do
22349: LD_ADDR_VAR 0 5
22353: PUSH
22354: LD_VAR 0 4
22358: PUSH
22359: FOR_IN
22360: IFFALSE 22402
// if GetTech ( i , side ) <> state then
22362: LD_VAR 0 5
22366: PPUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 321
22376: PUSH
22377: LD_VAR 0 3
22381: NONEQUAL
22382: IFFALSE 22400
// result := result diff i ;
22384: LD_ADDR_VAR 0 4
22388: PUSH
22389: LD_VAR 0 4
22393: PUSH
22394: LD_VAR 0 5
22398: DIFF
22399: ST_TO_ADDR
22400: GO 22359
22402: POP
22403: POP
// end ;
22404: LD_VAR 0 4
22408: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22409: LD_INT 0
22411: PPUSH
22412: PPUSH
22413: PPUSH
// result := true ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_INT 1
22421: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22422: LD_ADDR_VAR 0 5
22426: PUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 480
22436: ST_TO_ADDR
// if not tmp then
22437: LD_VAR 0 5
22441: NOT
22442: IFFALSE 22446
// exit ;
22444: GO 22495
// for i in tmp do
22446: LD_ADDR_VAR 0 4
22450: PUSH
22451: LD_VAR 0 5
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22493
// if GetTech ( i , side ) <> state_researched then
22459: LD_VAR 0 4
22463: PPUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 321
22473: PUSH
22474: LD_INT 2
22476: NONEQUAL
22477: IFFALSE 22491
// begin result := false ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_INT 0
22486: ST_TO_ADDR
// exit ;
22487: POP
22488: POP
22489: GO 22495
// end ;
22491: GO 22456
22493: POP
22494: POP
// end ;
22495: LD_VAR 0 3
22499: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22500: LD_INT 0
22502: PPUSH
22503: PPUSH
22504: PPUSH
22505: PPUSH
22506: PPUSH
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22515: LD_VAR 0 1
22519: NOT
22520: PUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 257
22530: PUSH
22531: LD_INT 9
22533: NONEQUAL
22534: OR
22535: IFFALSE 22539
// exit ;
22537: GO 23112
// side := GetSide ( unit ) ;
22539: LD_ADDR_VAR 0 9
22543: PUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL_OW 255
22553: ST_TO_ADDR
// tech_space := tech_spacanom ;
22554: LD_ADDR_VAR 0 12
22558: PUSH
22559: LD_INT 29
22561: ST_TO_ADDR
// tech_time := tech_taurad ;
22562: LD_ADDR_VAR 0 13
22566: PUSH
22567: LD_INT 28
22569: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22570: LD_ADDR_VAR 0 11
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 310
22584: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22585: LD_VAR 0 11
22589: PPUSH
22590: CALL_OW 247
22594: PUSH
22595: LD_INT 2
22597: EQUAL
22598: IFFALSE 22602
// exit ;
22600: GO 23112
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22602: LD_ADDR_VAR 0 8
22606: PUSH
22607: LD_INT 81
22609: PUSH
22610: LD_VAR 0 9
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 21
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PPUSH
22640: CALL_OW 69
22644: ST_TO_ADDR
// if not tmp then
22645: LD_VAR 0 8
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 23112
// if in_unit then
22654: LD_VAR 0 11
22658: IFFALSE 22682
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22660: LD_ADDR_VAR 0 10
22664: PUSH
22665: LD_VAR 0 8
22669: PPUSH
22670: LD_VAR 0 11
22674: PPUSH
22675: CALL_OW 74
22679: ST_TO_ADDR
22680: GO 22702
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22682: LD_ADDR_VAR 0 10
22686: PUSH
22687: LD_VAR 0 8
22691: PPUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 74
22701: ST_TO_ADDR
// if not enemy then
22702: LD_VAR 0 10
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 23112
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22711: LD_VAR 0 11
22715: PUSH
22716: LD_VAR 0 11
22720: PPUSH
22721: LD_VAR 0 10
22725: PPUSH
22726: CALL_OW 296
22730: PUSH
22731: LD_INT 13
22733: GREATER
22734: AND
22735: PUSH
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_VAR 0 10
22745: PPUSH
22746: CALL_OW 296
22750: PUSH
22751: LD_INT 12
22753: GREATER
22754: OR
22755: IFFALSE 22759
// exit ;
22757: GO 23112
// missile := [ 1 ] ;
22759: LD_ADDR_VAR 0 14
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22770: LD_VAR 0 9
22774: PPUSH
22775: LD_VAR 0 12
22779: PPUSH
22780: CALL_OW 325
22784: IFFALSE 22813
// missile := Replace ( missile , missile + 1 , 2 ) ;
22786: LD_ADDR_VAR 0 14
22790: PUSH
22791: LD_VAR 0 14
22795: PPUSH
22796: LD_VAR 0 14
22800: PUSH
22801: LD_INT 1
22803: PLUS
22804: PPUSH
22805: LD_INT 2
22807: PPUSH
22808: CALL_OW 1
22812: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22813: LD_VAR 0 9
22817: PPUSH
22818: LD_VAR 0 13
22822: PPUSH
22823: CALL_OW 325
22827: PUSH
22828: LD_VAR 0 10
22832: PPUSH
22833: CALL_OW 255
22837: PPUSH
22838: LD_VAR 0 13
22842: PPUSH
22843: CALL_OW 325
22847: NOT
22848: AND
22849: IFFALSE 22878
// missile := Replace ( missile , missile + 1 , 3 ) ;
22851: LD_ADDR_VAR 0 14
22855: PUSH
22856: LD_VAR 0 14
22860: PPUSH
22861: LD_VAR 0 14
22865: PUSH
22866: LD_INT 1
22868: PLUS
22869: PPUSH
22870: LD_INT 3
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// if missile < 2 then
22878: LD_VAR 0 14
22882: PUSH
22883: LD_INT 2
22885: LESS
22886: IFFALSE 22890
// exit ;
22888: GO 23112
// x := GetX ( enemy ) ;
22890: LD_ADDR_VAR 0 4
22894: PUSH
22895: LD_VAR 0 10
22899: PPUSH
22900: CALL_OW 250
22904: ST_TO_ADDR
// y := GetY ( enemy ) ;
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 10
22914: PPUSH
22915: CALL_OW 251
22919: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22920: LD_ADDR_VAR 0 6
22924: PUSH
22925: LD_VAR 0 4
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PPUSH
22934: LD_INT 1
22936: PPUSH
22937: CALL_OW 12
22941: PLUS
22942: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22943: LD_ADDR_VAR 0 7
22947: PUSH
22948: LD_VAR 0 5
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PPUSH
22957: LD_INT 1
22959: PPUSH
22960: CALL_OW 12
22964: PLUS
22965: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22966: LD_VAR 0 6
22970: PPUSH
22971: LD_VAR 0 7
22975: PPUSH
22976: CALL_OW 488
22980: NOT
22981: IFFALSE 23003
// begin _x := x ;
22983: LD_ADDR_VAR 0 6
22987: PUSH
22988: LD_VAR 0 4
22992: ST_TO_ADDR
// _y := y ;
22993: LD_ADDR_VAR 0 7
22997: PUSH
22998: LD_VAR 0 5
23002: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_INT 1
23010: PPUSH
23011: LD_VAR 0 14
23015: PPUSH
23016: CALL_OW 12
23020: ST_TO_ADDR
// case i of 1 :
23021: LD_VAR 0 3
23025: PUSH
23026: LD_INT 1
23028: DOUBLE
23029: EQUAL
23030: IFTRUE 23034
23032: GO 23051
23034: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23035: LD_VAR 0 1
23039: PPUSH
23040: LD_VAR 0 10
23044: PPUSH
23045: CALL_OW 115
23049: GO 23112
23051: LD_INT 2
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23081
23059: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_VAR 0 6
23069: PPUSH
23070: LD_VAR 0 7
23074: PPUSH
23075: CALL_OW 153
23079: GO 23112
23081: LD_INT 3
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23111
23089: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23090: LD_VAR 0 1
23094: PPUSH
23095: LD_VAR 0 6
23099: PPUSH
23100: LD_VAR 0 7
23104: PPUSH
23105: CALL_OW 154
23109: GO 23112
23111: POP
// end ;
23112: LD_VAR 0 2
23116: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
// if not unit or not building then
23125: LD_VAR 0 1
23129: NOT
23130: PUSH
23131: LD_VAR 0 2
23135: NOT
23136: OR
23137: IFFALSE 23141
// exit ;
23139: GO 23299
// x := GetX ( building ) ;
23141: LD_ADDR_VAR 0 5
23145: PUSH
23146: LD_VAR 0 2
23150: PPUSH
23151: CALL_OW 250
23155: ST_TO_ADDR
// y := GetY ( building ) ;
23156: LD_ADDR_VAR 0 6
23160: PUSH
23161: LD_VAR 0 2
23165: PPUSH
23166: CALL_OW 251
23170: ST_TO_ADDR
// for i = 0 to 5 do
23171: LD_ADDR_VAR 0 4
23175: PUSH
23176: DOUBLE
23177: LD_INT 0
23179: DEC
23180: ST_TO_ADDR
23181: LD_INT 5
23183: PUSH
23184: FOR_TO
23185: IFFALSE 23297
// begin _x := ShiftX ( x , i , 3 ) ;
23187: LD_ADDR_VAR 0 7
23191: PUSH
23192: LD_VAR 0 5
23196: PPUSH
23197: LD_VAR 0 4
23201: PPUSH
23202: LD_INT 3
23204: PPUSH
23205: CALL_OW 272
23209: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23210: LD_ADDR_VAR 0 8
23214: PUSH
23215: LD_VAR 0 6
23219: PPUSH
23220: LD_VAR 0 4
23224: PPUSH
23225: LD_INT 3
23227: PPUSH
23228: CALL_OW 273
23232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23233: LD_VAR 0 7
23237: PPUSH
23238: LD_VAR 0 8
23242: PPUSH
23243: CALL_OW 488
23247: NOT
23248: IFFALSE 23252
// continue ;
23250: GO 23184
// if HexInfo ( _x , _y ) = 0 then
23252: LD_VAR 0 7
23256: PPUSH
23257: LD_VAR 0 8
23261: PPUSH
23262: CALL_OW 428
23266: PUSH
23267: LD_INT 0
23269: EQUAL
23270: IFFALSE 23295
// begin ComMoveXY ( unit , _x , _y ) ;
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 7
23281: PPUSH
23282: LD_VAR 0 8
23286: PPUSH
23287: CALL_OW 111
// exit ;
23291: POP
23292: POP
23293: GO 23299
// end ; end ;
23295: GO 23184
23297: POP
23298: POP
// end ;
23299: LD_VAR 0 3
23303: RET
// export function ScanBase ( side , base_area ) ; begin
23304: LD_INT 0
23306: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_INT 81
23319: PUSH
23320: LD_VAR 0 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 70
23333: ST_TO_ADDR
// end ;
23334: LD_VAR 0 3
23338: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
// result := false ;
23345: LD_ADDR_VAR 0 2
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// side := GetSide ( unit ) ;
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 255
23367: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23368: LD_ADDR_VAR 0 4
23372: PUSH
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL_OW 248
23382: ST_TO_ADDR
// case nat of 1 :
23383: LD_VAR 0 4
23387: PUSH
23388: LD_INT 1
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// tech := tech_lassight ; 2 :
23397: LD_ADDR_VAR 0 5
23401: PUSH
23402: LD_INT 12
23404: ST_TO_ADDR
23405: GO 23446
23407: LD_INT 2
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// tech := tech_mortar ; 3 :
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_INT 41
23423: ST_TO_ADDR
23424: GO 23446
23426: LD_INT 3
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// tech := tech_bazooka ; end ;
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_INT 44
23442: ST_TO_ADDR
23443: GO 23446
23445: POP
// if Researched ( side , tech ) then
23446: LD_VAR 0 3
23450: PPUSH
23451: LD_VAR 0 5
23455: PPUSH
23456: CALL_OW 325
23460: IFFALSE 23487
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23462: LD_ADDR_VAR 0 2
23466: PUSH
23467: LD_INT 5
23469: PUSH
23470: LD_INT 8
23472: PUSH
23473: LD_INT 9
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: LD_VAR 0 4
23485: ARRAY
23486: ST_TO_ADDR
// end ;
23487: LD_VAR 0 2
23491: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23492: LD_INT 0
23494: PPUSH
23495: PPUSH
23496: PPUSH
// if not mines then
23497: LD_VAR 0 2
23501: NOT
23502: IFFALSE 23506
// exit ;
23504: GO 23650
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23506: LD_ADDR_VAR 0 5
23510: PUSH
23511: LD_INT 81
23513: PUSH
23514: LD_VAR 0 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PPUSH
23544: CALL_OW 69
23548: ST_TO_ADDR
// for i in mines do
23549: LD_ADDR_VAR 0 4
23553: PUSH
23554: LD_VAR 0 2
23558: PUSH
23559: FOR_IN
23560: IFFALSE 23648
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23562: LD_VAR 0 4
23566: PUSH
23567: LD_INT 1
23569: ARRAY
23570: PPUSH
23571: LD_VAR 0 4
23575: PUSH
23576: LD_INT 2
23578: ARRAY
23579: PPUSH
23580: CALL_OW 458
23584: NOT
23585: IFFALSE 23589
// continue ;
23587: GO 23559
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23589: LD_VAR 0 4
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 4
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 428
23611: PUSH
23612: LD_VAR 0 5
23616: IN
23617: IFFALSE 23646
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23619: LD_VAR 0 4
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: PPUSH
23628: LD_VAR 0 4
23632: PUSH
23633: LD_INT 2
23635: ARRAY
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 456
// end ;
23646: GO 23559
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 3
23654: RET
// export function Count ( array ) ; begin
23655: LD_INT 0
23657: PPUSH
// result := array + 0 ;
23658: LD_ADDR_VAR 0 2
23662: PUSH
23663: LD_VAR 0 1
23667: PUSH
23668: LD_INT 0
23670: PLUS
23671: ST_TO_ADDR
// end ;
23672: LD_VAR 0 2
23676: RET
// export function IsEmpty ( building ) ; begin
23677: LD_INT 0
23679: PPUSH
// if not building then
23680: LD_VAR 0 1
23684: NOT
23685: IFFALSE 23689
// exit ;
23687: GO 23732
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 22
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 255
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 58
23718: PUSH
23719: EMPTY
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: IN
23731: ST_TO_ADDR
// end ;
23732: LD_VAR 0 2
23736: RET
// export function IsNotFull ( building ) ; var places ; begin
23737: LD_INT 0
23739: PPUSH
23740: PPUSH
// if not building then
23741: LD_VAR 0 1
23745: NOT
23746: IFFALSE 23750
// exit ;
23748: GO 23778
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23750: LD_ADDR_VAR 0 2
23754: PUSH
23755: LD_VAR 0 1
23759: PPUSH
23760: LD_INT 3
23762: PUSH
23763: LD_INT 62
23765: PUSH
23766: EMPTY
23767: LIST
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PPUSH
23773: CALL_OW 72
23777: ST_TO_ADDR
// end ;
23778: LD_VAR 0 2
23782: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
// tmp := [ ] ;
23789: LD_ADDR_VAR 0 3
23793: PUSH
23794: EMPTY
23795: ST_TO_ADDR
// list := [ ] ;
23796: LD_ADDR_VAR 0 5
23800: PUSH
23801: EMPTY
23802: ST_TO_ADDR
// for i = 16 to 25 do
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: DOUBLE
23809: LD_INT 16
23811: DEC
23812: ST_TO_ADDR
23813: LD_INT 25
23815: PUSH
23816: FOR_TO
23817: IFFALSE 23890
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23819: LD_ADDR_VAR 0 3
23823: PUSH
23824: LD_VAR 0 3
23828: PUSH
23829: LD_INT 22
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 255
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 91
23848: PUSH
23849: LD_VAR 0 1
23853: PUSH
23854: LD_INT 6
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 30
23864: PUSH
23865: LD_VAR 0 4
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: ADD
23887: ST_TO_ADDR
23888: GO 23816
23890: POP
23891: POP
// for i = 1 to tmp do
23892: LD_ADDR_VAR 0 4
23896: PUSH
23897: DOUBLE
23898: LD_INT 1
23900: DEC
23901: ST_TO_ADDR
23902: LD_VAR 0 3
23906: PUSH
23907: FOR_TO
23908: IFFALSE 23996
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23910: LD_ADDR_VAR 0 5
23914: PUSH
23915: LD_VAR 0 5
23919: PUSH
23920: LD_VAR 0 3
23924: PUSH
23925: LD_VAR 0 4
23929: ARRAY
23930: PPUSH
23931: CALL_OW 266
23935: PUSH
23936: LD_VAR 0 3
23940: PUSH
23941: LD_VAR 0 4
23945: ARRAY
23946: PPUSH
23947: CALL_OW 250
23951: PUSH
23952: LD_VAR 0 3
23956: PUSH
23957: LD_VAR 0 4
23961: ARRAY
23962: PPUSH
23963: CALL_OW 251
23967: PUSH
23968: LD_VAR 0 3
23972: PUSH
23973: LD_VAR 0 4
23977: ARRAY
23978: PPUSH
23979: CALL_OW 254
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: ADD
23993: ST_TO_ADDR
23994: GO 23907
23996: POP
23997: POP
// result := list ;
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_VAR 0 5
24007: ST_TO_ADDR
// end ;
24008: LD_VAR 0 2
24012: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24013: LD_INT 0
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
24019: PPUSH
24020: PPUSH
24021: PPUSH
// if not factory then
24022: LD_VAR 0 1
24026: NOT
24027: IFFALSE 24031
// exit ;
24029: GO 24624
// if control = control_apeman then
24031: LD_VAR 0 4
24035: PUSH
24036: LD_INT 5
24038: EQUAL
24039: IFFALSE 24148
// begin tmp := UnitsInside ( factory ) ;
24041: LD_ADDR_VAR 0 8
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 313
24055: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24056: LD_VAR 0 8
24060: PPUSH
24061: LD_INT 25
24063: PUSH
24064: LD_INT 12
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PPUSH
24071: CALL_OW 72
24075: NOT
24076: IFFALSE 24086
// control := control_manual ;
24078: LD_ADDR_VAR 0 4
24082: PUSH
24083: LD_INT 1
24085: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24086: LD_ADDR_VAR 0 8
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL 23783 0 1
24100: ST_TO_ADDR
// if tmp then
24101: LD_VAR 0 8
24105: IFFALSE 24148
// begin for i in tmp do
24107: LD_ADDR_VAR 0 7
24111: PUSH
24112: LD_VAR 0 8
24116: PUSH
24117: FOR_IN
24118: IFFALSE 24146
// if i [ 1 ] = b_ext_radio then
24120: LD_VAR 0 7
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PUSH
24129: LD_INT 22
24131: EQUAL
24132: IFFALSE 24144
// begin control := control_remote ;
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_INT 2
24141: ST_TO_ADDR
// break ;
24142: GO 24146
// end ;
24144: GO 24117
24146: POP
24147: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24148: LD_VAR 0 1
24152: PPUSH
24153: LD_VAR 0 2
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: LD_VAR 0 4
24167: PPUSH
24168: LD_VAR 0 5
24172: PPUSH
24173: CALL_OW 448
24177: IFFALSE 24212
// begin result := [ chassis , engine , control , weapon ] ;
24179: LD_ADDR_VAR 0 6
24183: PUSH
24184: LD_VAR 0 2
24188: PUSH
24189: LD_VAR 0 3
24193: PUSH
24194: LD_VAR 0 4
24198: PUSH
24199: LD_VAR 0 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
// exit ;
24210: GO 24624
// end ; _chassis := AvailableChassisList ( factory ) ;
24212: LD_ADDR_VAR 0 9
24216: PUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 475
24226: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24227: LD_ADDR_VAR 0 11
24231: PUSH
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL_OW 476
24241: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24242: LD_ADDR_VAR 0 12
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 477
24256: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24257: LD_ADDR_VAR 0 10
24261: PUSH
24262: LD_VAR 0 1
24266: PPUSH
24267: CALL_OW 478
24271: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24272: LD_VAR 0 9
24276: NOT
24277: PUSH
24278: LD_VAR 0 11
24282: NOT
24283: OR
24284: PUSH
24285: LD_VAR 0 12
24289: NOT
24290: OR
24291: PUSH
24292: LD_VAR 0 10
24296: NOT
24297: OR
24298: IFFALSE 24333
// begin result := [ chassis , engine , control , weapon ] ;
24300: LD_ADDR_VAR 0 6
24304: PUSH
24305: LD_VAR 0 2
24309: PUSH
24310: LD_VAR 0 3
24314: PUSH
24315: LD_VAR 0 4
24319: PUSH
24320: LD_VAR 0 5
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
// exit ;
24331: GO 24624
// end ; if not chassis in _chassis then
24333: LD_VAR 0 2
24337: PUSH
24338: LD_VAR 0 9
24342: IN
24343: NOT
24344: IFFALSE 24370
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 9
24355: PUSH
24356: LD_INT 1
24358: PPUSH
24359: LD_VAR 0 9
24363: PPUSH
24364: CALL_OW 12
24368: ARRAY
24369: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24370: LD_VAR 0 2
24374: PPUSH
24375: LD_VAR 0 3
24379: PPUSH
24380: CALL 24629 0 2
24384: NOT
24385: IFFALSE 24444
// repeat engine := _engine [ 1 ] ;
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_VAR 0 11
24396: PUSH
24397: LD_INT 1
24399: ARRAY
24400: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24401: LD_ADDR_VAR 0 11
24405: PUSH
24406: LD_VAR 0 11
24410: PPUSH
24411: LD_INT 1
24413: PPUSH
24414: CALL_OW 3
24418: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24419: LD_VAR 0 2
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL 24629 0 2
24433: PUSH
24434: LD_VAR 0 11
24438: PUSH
24439: EMPTY
24440: EQUAL
24441: OR
24442: IFFALSE 24387
// if not control in _control then
24444: LD_VAR 0 4
24448: PUSH
24449: LD_VAR 0 12
24453: IN
24454: NOT
24455: IFFALSE 24481
// control := _control [ rand ( 1 , _control ) ] ;
24457: LD_ADDR_VAR 0 4
24461: PUSH
24462: LD_VAR 0 12
24466: PUSH
24467: LD_INT 1
24469: PPUSH
24470: LD_VAR 0 12
24474: PPUSH
24475: CALL_OW 12
24479: ARRAY
24480: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24481: LD_VAR 0 2
24485: PPUSH
24486: LD_VAR 0 5
24490: PPUSH
24491: CALL 24849 0 2
24495: NOT
24496: IFFALSE 24555
// repeat weapon := _weapon [ 1 ] ;
24498: LD_ADDR_VAR 0 5
24502: PUSH
24503: LD_VAR 0 10
24507: PUSH
24508: LD_INT 1
24510: ARRAY
24511: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24512: LD_ADDR_VAR 0 10
24516: PUSH
24517: LD_VAR 0 10
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 3
24529: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_VAR 0 5
24539: PPUSH
24540: CALL 24849 0 2
24544: PUSH
24545: LD_VAR 0 10
24549: PUSH
24550: EMPTY
24551: EQUAL
24552: OR
24553: IFFALSE 24498
// result := [ ] ;
24555: LD_ADDR_VAR 0 6
24559: PUSH
24560: EMPTY
24561: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24562: LD_VAR 0 1
24566: PPUSH
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_VAR 0 3
24576: PPUSH
24577: LD_VAR 0 4
24581: PPUSH
24582: LD_VAR 0 5
24586: PPUSH
24587: CALL_OW 448
24591: IFFALSE 24624
// result := [ chassis , engine , control , weapon ] ;
24593: LD_ADDR_VAR 0 6
24597: PUSH
24598: LD_VAR 0 2
24602: PUSH
24603: LD_VAR 0 3
24607: PUSH
24608: LD_VAR 0 4
24612: PUSH
24613: LD_VAR 0 5
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: ST_TO_ADDR
// end ;
24624: LD_VAR 0 6
24628: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24629: LD_INT 0
24631: PPUSH
// if not chassis or not engine then
24632: LD_VAR 0 1
24636: NOT
24637: PUSH
24638: LD_VAR 0 2
24642: NOT
24643: OR
24644: IFFALSE 24648
// exit ;
24646: GO 24844
// case engine of engine_solar :
24648: LD_VAR 0 2
24652: PUSH
24653: LD_INT 2
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24699
24661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24662: LD_ADDR_VAR 0 3
24666: PUSH
24667: LD_INT 11
24669: PUSH
24670: LD_INT 12
24672: PUSH
24673: LD_INT 13
24675: PUSH
24676: LD_INT 14
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: LD_INT 2
24684: PUSH
24685: LD_INT 3
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: ST_TO_ADDR
24697: GO 24828
24699: LD_INT 1
24701: DOUBLE
24702: EQUAL
24703: IFTRUE 24707
24705: GO 24769
24707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_INT 11
24715: PUSH
24716: LD_INT 12
24718: PUSH
24719: LD_INT 13
24721: PUSH
24722: LD_INT 14
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: LD_INT 4
24736: PUSH
24737: LD_INT 5
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 23
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_INT 24
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: ST_TO_ADDR
24767: GO 24828
24769: LD_INT 3
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24827
24777: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24778: LD_ADDR_VAR 0 3
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 14
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: LD_INT 3
24794: PUSH
24795: LD_INT 4
24797: PUSH
24798: LD_INT 5
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 22
24806: PUSH
24807: LD_INT 23
24809: PUSH
24810: LD_INT 24
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: ST_TO_ADDR
24825: GO 24828
24827: POP
// result := ( chassis in result ) ;
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_VAR 0 1
24837: PUSH
24838: LD_VAR 0 3
24842: IN
24843: ST_TO_ADDR
// end ;
24844: LD_VAR 0 3
24848: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24849: LD_INT 0
24851: PPUSH
// if not chassis or not weapon then
24852: LD_VAR 0 1
24856: NOT
24857: PUSH
24858: LD_VAR 0 2
24862: NOT
24863: OR
24864: IFFALSE 24868
// exit ;
24866: GO 25928
// case weapon of us_machine_gun :
24868: LD_VAR 0 2
24872: PUSH
24873: LD_INT 2
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24881
24879: GO 24911
24881: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: LD_INT 4
24898: PUSH
24899: LD_INT 5
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: ST_TO_ADDR
24909: GO 25912
24911: LD_INT 3
24913: DOUBLE
24914: EQUAL
24915: IFTRUE 24919
24917: GO 24949
24919: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: LD_INT 4
24936: PUSH
24937: LD_INT 5
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25912
24949: LD_INT 11
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 24987
24957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24958: LD_ADDR_VAR 0 3
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 4
24974: PUSH
24975: LD_INT 5
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: ST_TO_ADDR
24985: GO 25912
24987: LD_INT 4
24989: DOUBLE
24990: EQUAL
24991: IFTRUE 24995
24993: GO 25021
24995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24996: LD_ADDR_VAR 0 3
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: LD_INT 4
25009: PUSH
25010: LD_INT 5
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25912
25021: LD_INT 5
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25055
25029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: LD_INT 3
25040: PUSH
25041: LD_INT 4
25043: PUSH
25044: LD_INT 5
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: ST_TO_ADDR
25053: GO 25912
25055: LD_INT 9
25057: DOUBLE
25058: EQUAL
25059: IFTRUE 25063
25061: GO 25089
25063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25064: LD_ADDR_VAR 0 3
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 3
25074: PUSH
25075: LD_INT 4
25077: PUSH
25078: LD_INT 5
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: ST_TO_ADDR
25087: GO 25912
25089: LD_INT 7
25091: DOUBLE
25092: EQUAL
25093: IFTRUE 25097
25095: GO 25123
25097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 4
25111: PUSH
25112: LD_INT 5
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: ST_TO_ADDR
25121: GO 25912
25123: LD_INT 12
25125: DOUBLE
25126: EQUAL
25127: IFTRUE 25131
25129: GO 25157
25131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 4
25145: PUSH
25146: LD_INT 5
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: ST_TO_ADDR
25155: GO 25912
25157: LD_INT 13
25159: DOUBLE
25160: EQUAL
25161: IFTRUE 25165
25163: GO 25191
25165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25166: LD_ADDR_VAR 0 3
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: LD_INT 4
25179: PUSH
25180: LD_INT 5
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
25189: GO 25912
25191: LD_INT 14
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25217
25199: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 4
25207: PUSH
25208: LD_INT 5
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: ST_TO_ADDR
25215: GO 25912
25217: LD_INT 6
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 25243
25225: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_INT 4
25233: PUSH
25234: LD_INT 5
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: ST_TO_ADDR
25241: GO 25912
25243: LD_INT 10
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 25269
25251: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25252: LD_ADDR_VAR 0 3
25256: PUSH
25257: LD_INT 4
25259: PUSH
25260: LD_INT 5
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: ST_TO_ADDR
25267: GO 25912
25269: LD_INT 22
25271: DOUBLE
25272: EQUAL
25273: IFTRUE 25277
25275: GO 25303
25277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25278: LD_ADDR_VAR 0 3
25282: PUSH
25283: LD_INT 11
25285: PUSH
25286: LD_INT 12
25288: PUSH
25289: LD_INT 13
25291: PUSH
25292: LD_INT 14
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: ST_TO_ADDR
25301: GO 25912
25303: LD_INT 23
25305: DOUBLE
25306: EQUAL
25307: IFTRUE 25311
25309: GO 25337
25311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25312: LD_ADDR_VAR 0 3
25316: PUSH
25317: LD_INT 11
25319: PUSH
25320: LD_INT 12
25322: PUSH
25323: LD_INT 13
25325: PUSH
25326: LD_INT 14
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: ST_TO_ADDR
25335: GO 25912
25337: LD_INT 24
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25371
25345: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_INT 11
25353: PUSH
25354: LD_INT 12
25356: PUSH
25357: LD_INT 13
25359: PUSH
25360: LD_INT 14
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: ST_TO_ADDR
25369: GO 25912
25371: LD_INT 30
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25405
25379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25380: LD_ADDR_VAR 0 3
25384: PUSH
25385: LD_INT 11
25387: PUSH
25388: LD_INT 12
25390: PUSH
25391: LD_INT 13
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25912
25405: LD_INT 25
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25431
25413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 13
25421: PUSH
25422: LD_INT 14
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: ST_TO_ADDR
25429: GO 25912
25431: LD_INT 27
25433: DOUBLE
25434: EQUAL
25435: IFTRUE 25439
25437: GO 25457
25439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25440: LD_ADDR_VAR 0 3
25444: PUSH
25445: LD_INT 13
25447: PUSH
25448: LD_INT 14
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: ST_TO_ADDR
25455: GO 25912
25457: LD_INT 92
25459: DOUBLE
25460: EQUAL
25461: IFTRUE 25465
25463: GO 25491
25465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25466: LD_ADDR_VAR 0 3
25470: PUSH
25471: LD_INT 11
25473: PUSH
25474: LD_INT 12
25476: PUSH
25477: LD_INT 13
25479: PUSH
25480: LD_INT 14
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
25489: GO 25912
25491: LD_INT 28
25493: DOUBLE
25494: EQUAL
25495: IFTRUE 25499
25497: GO 25517
25499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25500: LD_ADDR_VAR 0 3
25504: PUSH
25505: LD_INT 13
25507: PUSH
25508: LD_INT 14
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: ST_TO_ADDR
25515: GO 25912
25517: LD_INT 29
25519: DOUBLE
25520: EQUAL
25521: IFTRUE 25525
25523: GO 25543
25525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25526: LD_ADDR_VAR 0 3
25530: PUSH
25531: LD_INT 13
25533: PUSH
25534: LD_INT 14
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: ST_TO_ADDR
25541: GO 25912
25543: LD_INT 31
25545: DOUBLE
25546: EQUAL
25547: IFTRUE 25551
25549: GO 25569
25551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25552: LD_ADDR_VAR 0 3
25556: PUSH
25557: LD_INT 13
25559: PUSH
25560: LD_INT 14
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: ST_TO_ADDR
25567: GO 25912
25569: LD_INT 26
25571: DOUBLE
25572: EQUAL
25573: IFTRUE 25577
25575: GO 25595
25577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_INT 13
25585: PUSH
25586: LD_INT 14
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: ST_TO_ADDR
25593: GO 25912
25595: LD_INT 42
25597: DOUBLE
25598: EQUAL
25599: IFTRUE 25603
25601: GO 25629
25603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_INT 21
25611: PUSH
25612: LD_INT 22
25614: PUSH
25615: LD_INT 23
25617: PUSH
25618: LD_INT 24
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: ST_TO_ADDR
25627: GO 25912
25629: LD_INT 43
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25663
25637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_INT 21
25645: PUSH
25646: LD_INT 22
25648: PUSH
25649: LD_INT 23
25651: PUSH
25652: LD_INT 24
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 25912
25663: LD_INT 44
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25697
25671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 21
25679: PUSH
25680: LD_INT 22
25682: PUSH
25683: LD_INT 23
25685: PUSH
25686: LD_INT 24
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
25695: GO 25912
25697: LD_INT 45
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25731
25705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 22
25716: PUSH
25717: LD_INT 23
25719: PUSH
25720: LD_INT 24
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
25729: GO 25912
25731: LD_INT 49
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25765
25739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 21
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_INT 23
25753: PUSH
25754: LD_INT 24
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 25912
25765: LD_INT 51
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25799
25773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 23
25787: PUSH
25788: LD_INT 24
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 25912
25799: LD_INT 52
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25833
25807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 21
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_INT 23
25821: PUSH
25822: LD_INT 24
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
25831: GO 25912
25833: LD_INT 53
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25859
25841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25842: LD_ADDR_VAR 0 3
25846: PUSH
25847: LD_INT 23
25849: PUSH
25850: LD_INT 24
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: ST_TO_ADDR
25857: GO 25912
25859: LD_INT 46
25861: DOUBLE
25862: EQUAL
25863: IFTRUE 25867
25865: GO 25885
25867: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25868: LD_ADDR_VAR 0 3
25872: PUSH
25873: LD_INT 23
25875: PUSH
25876: LD_INT 24
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: ST_TO_ADDR
25883: GO 25912
25885: LD_INT 47
25887: DOUBLE
25888: EQUAL
25889: IFTRUE 25893
25891: GO 25911
25893: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_INT 23
25901: PUSH
25902: LD_INT 24
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: ST_TO_ADDR
25909: GO 25912
25911: POP
// result := ( chassis in result ) ;
25912: LD_ADDR_VAR 0 3
25916: PUSH
25917: LD_VAR 0 1
25921: PUSH
25922: LD_VAR 0 3
25926: IN
25927: ST_TO_ADDR
// end ;
25928: LD_VAR 0 3
25932: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25933: LD_INT 0
25935: PPUSH
25936: PPUSH
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
25941: PPUSH
// result := array ;
25942: LD_ADDR_VAR 0 5
25946: PUSH
25947: LD_VAR 0 1
25951: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25952: LD_VAR 0 1
25956: NOT
25957: PUSH
25958: LD_VAR 0 2
25962: NOT
25963: OR
25964: PUSH
25965: LD_VAR 0 3
25969: NOT
25970: OR
25971: PUSH
25972: LD_VAR 0 2
25976: PUSH
25977: LD_VAR 0 1
25981: GREATER
25982: OR
25983: PUSH
25984: LD_VAR 0 3
25988: PUSH
25989: LD_VAR 0 1
25993: GREATER
25994: OR
25995: IFFALSE 25999
// exit ;
25997: GO 26295
// if direction then
25999: LD_VAR 0 4
26003: IFFALSE 26067
// begin d := 1 ;
26005: LD_ADDR_VAR 0 9
26009: PUSH
26010: LD_INT 1
26012: ST_TO_ADDR
// if i_from > i_to then
26013: LD_VAR 0 2
26017: PUSH
26018: LD_VAR 0 3
26022: GREATER
26023: IFFALSE 26049
// length := ( array - i_from ) + i_to else
26025: LD_ADDR_VAR 0 11
26029: PUSH
26030: LD_VAR 0 1
26034: PUSH
26035: LD_VAR 0 2
26039: MINUS
26040: PUSH
26041: LD_VAR 0 3
26045: PLUS
26046: ST_TO_ADDR
26047: GO 26065
// length := i_to - i_from ;
26049: LD_ADDR_VAR 0 11
26053: PUSH
26054: LD_VAR 0 3
26058: PUSH
26059: LD_VAR 0 2
26063: MINUS
26064: ST_TO_ADDR
// end else
26065: GO 26128
// begin d := - 1 ;
26067: LD_ADDR_VAR 0 9
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: ST_TO_ADDR
// if i_from > i_to then
26076: LD_VAR 0 2
26080: PUSH
26081: LD_VAR 0 3
26085: GREATER
26086: IFFALSE 26106
// length := i_from - i_to else
26088: LD_ADDR_VAR 0 11
26092: PUSH
26093: LD_VAR 0 2
26097: PUSH
26098: LD_VAR 0 3
26102: MINUS
26103: ST_TO_ADDR
26104: GO 26128
// length := ( array - i_to ) + i_from ;
26106: LD_ADDR_VAR 0 11
26110: PUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_VAR 0 3
26120: MINUS
26121: PUSH
26122: LD_VAR 0 2
26126: PLUS
26127: ST_TO_ADDR
// end ; if not length then
26128: LD_VAR 0 11
26132: NOT
26133: IFFALSE 26137
// exit ;
26135: GO 26295
// tmp := array ;
26137: LD_ADDR_VAR 0 10
26141: PUSH
26142: LD_VAR 0 1
26146: ST_TO_ADDR
// for i = 1 to length do
26147: LD_ADDR_VAR 0 6
26151: PUSH
26152: DOUBLE
26153: LD_INT 1
26155: DEC
26156: ST_TO_ADDR
26157: LD_VAR 0 11
26161: PUSH
26162: FOR_TO
26163: IFFALSE 26283
// begin for j = 1 to array do
26165: LD_ADDR_VAR 0 7
26169: PUSH
26170: DOUBLE
26171: LD_INT 1
26173: DEC
26174: ST_TO_ADDR
26175: LD_VAR 0 1
26179: PUSH
26180: FOR_TO
26181: IFFALSE 26269
// begin k := j + d ;
26183: LD_ADDR_VAR 0 8
26187: PUSH
26188: LD_VAR 0 7
26192: PUSH
26193: LD_VAR 0 9
26197: PLUS
26198: ST_TO_ADDR
// if k > array then
26199: LD_VAR 0 8
26203: PUSH
26204: LD_VAR 0 1
26208: GREATER
26209: IFFALSE 26219
// k := 1 ;
26211: LD_ADDR_VAR 0 8
26215: PUSH
26216: LD_INT 1
26218: ST_TO_ADDR
// if not k then
26219: LD_VAR 0 8
26223: NOT
26224: IFFALSE 26236
// k := array ;
26226: LD_ADDR_VAR 0 8
26230: PUSH
26231: LD_VAR 0 1
26235: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26236: LD_ADDR_VAR 0 10
26240: PUSH
26241: LD_VAR 0 10
26245: PPUSH
26246: LD_VAR 0 8
26250: PPUSH
26251: LD_VAR 0 1
26255: PUSH
26256: LD_VAR 0 7
26260: ARRAY
26261: PPUSH
26262: CALL_OW 1
26266: ST_TO_ADDR
// end ;
26267: GO 26180
26269: POP
26270: POP
// array := tmp ;
26271: LD_ADDR_VAR 0 1
26275: PUSH
26276: LD_VAR 0 10
26280: ST_TO_ADDR
// end ;
26281: GO 26162
26283: POP
26284: POP
// result := array ;
26285: LD_ADDR_VAR 0 5
26289: PUSH
26290: LD_VAR 0 1
26294: ST_TO_ADDR
// end ;
26295: LD_VAR 0 5
26299: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26300: LD_INT 0
26302: PPUSH
26303: PPUSH
// result := 0 ;
26304: LD_ADDR_VAR 0 3
26308: PUSH
26309: LD_INT 0
26311: ST_TO_ADDR
// if not array or not value in array then
26312: LD_VAR 0 1
26316: NOT
26317: PUSH
26318: LD_VAR 0 2
26322: PUSH
26323: LD_VAR 0 1
26327: IN
26328: NOT
26329: OR
26330: IFFALSE 26334
// exit ;
26332: GO 26388
// for i = 1 to array do
26334: LD_ADDR_VAR 0 4
26338: PUSH
26339: DOUBLE
26340: LD_INT 1
26342: DEC
26343: ST_TO_ADDR
26344: LD_VAR 0 1
26348: PUSH
26349: FOR_TO
26350: IFFALSE 26386
// if value = array [ i ] then
26352: LD_VAR 0 2
26356: PUSH
26357: LD_VAR 0 1
26361: PUSH
26362: LD_VAR 0 4
26366: ARRAY
26367: EQUAL
26368: IFFALSE 26384
// begin result := i ;
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_VAR 0 4
26379: ST_TO_ADDR
// exit ;
26380: POP
26381: POP
26382: GO 26388
// end ;
26384: GO 26349
26386: POP
26387: POP
// end ;
26388: LD_VAR 0 3
26392: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26393: LD_INT 0
26395: PPUSH
// vc_chassis := chassis ;
26396: LD_ADDR_OWVAR 37
26400: PUSH
26401: LD_VAR 0 1
26405: ST_TO_ADDR
// vc_engine := engine ;
26406: LD_ADDR_OWVAR 39
26410: PUSH
26411: LD_VAR 0 2
26415: ST_TO_ADDR
// vc_control := control ;
26416: LD_ADDR_OWVAR 38
26420: PUSH
26421: LD_VAR 0 3
26425: ST_TO_ADDR
// vc_weapon := weapon ;
26426: LD_ADDR_OWVAR 40
26430: PUSH
26431: LD_VAR 0 4
26435: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26436: LD_ADDR_OWVAR 41
26440: PUSH
26441: LD_VAR 0 5
26445: ST_TO_ADDR
// end ;
26446: LD_VAR 0 6
26450: RET
// export function WantPlant ( unit ) ; var task ; begin
26451: LD_INT 0
26453: PPUSH
26454: PPUSH
// result := false ;
26455: LD_ADDR_VAR 0 2
26459: PUSH
26460: LD_INT 0
26462: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26463: LD_ADDR_VAR 0 3
26467: PUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL_OW 437
26477: ST_TO_ADDR
// if task then
26478: LD_VAR 0 3
26482: IFFALSE 26510
// if task [ 1 ] [ 1 ] = p then
26484: LD_VAR 0 3
26488: PUSH
26489: LD_INT 1
26491: ARRAY
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PUSH
26497: LD_STRING p
26499: EQUAL
26500: IFFALSE 26510
// result := true ;
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_INT 1
26509: ST_TO_ADDR
// end ;
26510: LD_VAR 0 2
26514: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
26519: PPUSH
26520: PPUSH
// if pos < 1 then
26521: LD_VAR 0 2
26525: PUSH
26526: LD_INT 1
26528: LESS
26529: IFFALSE 26533
// exit ;
26531: GO 26836
// if pos = 1 then
26533: LD_VAR 0 2
26537: PUSH
26538: LD_INT 1
26540: EQUAL
26541: IFFALSE 26574
// result := Replace ( arr , pos [ 1 ] , value ) else
26543: LD_ADDR_VAR 0 4
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_VAR 0 2
26557: PUSH
26558: LD_INT 1
26560: ARRAY
26561: PPUSH
26562: LD_VAR 0 3
26566: PPUSH
26567: CALL_OW 1
26571: ST_TO_ADDR
26572: GO 26836
// begin tmp := arr ;
26574: LD_ADDR_VAR 0 6
26578: PUSH
26579: LD_VAR 0 1
26583: ST_TO_ADDR
// s_arr := [ tmp ] ;
26584: LD_ADDR_VAR 0 7
26588: PUSH
26589: LD_VAR 0 6
26593: PUSH
26594: EMPTY
26595: LIST
26596: ST_TO_ADDR
// for i = 1 to pos - 1 do
26597: LD_ADDR_VAR 0 5
26601: PUSH
26602: DOUBLE
26603: LD_INT 1
26605: DEC
26606: ST_TO_ADDR
26607: LD_VAR 0 2
26611: PUSH
26612: LD_INT 1
26614: MINUS
26615: PUSH
26616: FOR_TO
26617: IFFALSE 26662
// begin tmp := tmp [ pos [ i ] ] ;
26619: LD_ADDR_VAR 0 6
26623: PUSH
26624: LD_VAR 0 6
26628: PUSH
26629: LD_VAR 0 2
26633: PUSH
26634: LD_VAR 0 5
26638: ARRAY
26639: ARRAY
26640: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26641: LD_ADDR_VAR 0 7
26645: PUSH
26646: LD_VAR 0 7
26650: PUSH
26651: LD_VAR 0 6
26655: PUSH
26656: EMPTY
26657: LIST
26658: ADD
26659: ST_TO_ADDR
// end ;
26660: GO 26616
26662: POP
26663: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_VAR 0 6
26673: PPUSH
26674: LD_VAR 0 2
26678: PUSH
26679: LD_VAR 0 2
26683: ARRAY
26684: PPUSH
26685: LD_VAR 0 3
26689: PPUSH
26690: CALL_OW 1
26694: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26695: LD_ADDR_VAR 0 7
26699: PUSH
26700: LD_VAR 0 7
26704: PPUSH
26705: LD_VAR 0 7
26709: PPUSH
26710: LD_VAR 0 6
26714: PPUSH
26715: CALL_OW 1
26719: ST_TO_ADDR
// for i = s_arr downto 2 do
26720: LD_ADDR_VAR 0 5
26724: PUSH
26725: DOUBLE
26726: LD_VAR 0 7
26730: INC
26731: ST_TO_ADDR
26732: LD_INT 2
26734: PUSH
26735: FOR_DOWNTO
26736: IFFALSE 26820
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26738: LD_ADDR_VAR 0 6
26742: PUSH
26743: LD_VAR 0 7
26747: PUSH
26748: LD_VAR 0 5
26752: PUSH
26753: LD_INT 1
26755: MINUS
26756: ARRAY
26757: PPUSH
26758: LD_VAR 0 2
26762: PUSH
26763: LD_VAR 0 5
26767: PUSH
26768: LD_INT 1
26770: MINUS
26771: ARRAY
26772: PPUSH
26773: LD_VAR 0 7
26777: PUSH
26778: LD_VAR 0 5
26782: ARRAY
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26789: LD_ADDR_VAR 0 7
26793: PUSH
26794: LD_VAR 0 7
26798: PPUSH
26799: LD_VAR 0 5
26803: PUSH
26804: LD_INT 1
26806: MINUS
26807: PPUSH
26808: LD_VAR 0 6
26812: PPUSH
26813: CALL_OW 1
26817: ST_TO_ADDR
// end ;
26818: GO 26735
26820: POP
26821: POP
// result := s_arr [ 1 ] ;
26822: LD_ADDR_VAR 0 4
26826: PUSH
26827: LD_VAR 0 7
26831: PUSH
26832: LD_INT 1
26834: ARRAY
26835: ST_TO_ADDR
// end ; end ;
26836: LD_VAR 0 4
26840: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26841: LD_INT 0
26843: PPUSH
26844: PPUSH
// if not list then
26845: LD_VAR 0 1
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26945
// i := list [ pos1 ] ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 1
26863: PUSH
26864: LD_VAR 0 2
26868: ARRAY
26869: ST_TO_ADDR
// if not i then
26870: LD_VAR 0 5
26874: NOT
26875: IFFALSE 26879
// exit ;
26877: GO 26945
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26879: LD_ADDR_VAR 0 1
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: LD_VAR 0 2
26893: PPUSH
26894: LD_VAR 0 1
26898: PUSH
26899: LD_VAR 0 3
26903: ARRAY
26904: PPUSH
26905: CALL_OW 1
26909: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26910: LD_ADDR_VAR 0 1
26914: PUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_VAR 0 3
26924: PPUSH
26925: LD_VAR 0 5
26929: PPUSH
26930: CALL_OW 1
26934: ST_TO_ADDR
// result := list ;
26935: LD_ADDR_VAR 0 4
26939: PUSH
26940: LD_VAR 0 1
26944: ST_TO_ADDR
// end ;
26945: LD_VAR 0 4
26949: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26950: LD_INT 0
26952: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26953: LD_ADDR_VAR 0 5
26957: PUSH
26958: LD_VAR 0 1
26962: PPUSH
26963: CALL_OW 250
26967: PPUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 251
26977: PPUSH
26978: LD_VAR 0 2
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: LD_VAR 0 4
26992: PPUSH
26993: CALL 27371 0 5
26997: ST_TO_ADDR
// end ;
26998: LD_VAR 0 5
27002: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27003: LD_INT 0
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
// if not list or not unit then
27009: LD_VAR 0 2
27013: NOT
27014: PUSH
27015: LD_VAR 0 1
27019: NOT
27020: OR
27021: IFFALSE 27025
// exit ;
27023: GO 27366
// result := [ ] ;
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: EMPTY
27031: ST_TO_ADDR
// for i in list do
27032: LD_ADDR_VAR 0 6
27036: PUSH
27037: LD_VAR 0 2
27041: PUSH
27042: FOR_IN
27043: IFFALSE 27261
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27045: LD_ADDR_VAR 0 8
27049: PUSH
27050: LD_VAR 0 1
27054: PPUSH
27055: LD_VAR 0 6
27059: PUSH
27060: LD_INT 1
27062: ARRAY
27063: PPUSH
27064: LD_VAR 0 6
27068: PUSH
27069: LD_INT 2
27071: ARRAY
27072: PPUSH
27073: CALL_OW 297
27077: ST_TO_ADDR
// if not Count ( result ) then
27078: LD_VAR 0 5
27082: PPUSH
27083: CALL 23655 0 1
27087: NOT
27088: IFFALSE 27121
// begin result := Join ( result , [ i , tmp ] ) ;
27090: LD_ADDR_VAR 0 5
27094: PUSH
27095: LD_VAR 0 5
27099: PPUSH
27100: LD_VAR 0 6
27104: PUSH
27105: LD_VAR 0 8
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL 59264 0 2
27118: ST_TO_ADDR
// continue ;
27119: GO 27042
// end ; if result [ result ] [ 2 ] <= tmp then
27121: LD_VAR 0 5
27125: PUSH
27126: LD_VAR 0 5
27130: ARRAY
27131: PUSH
27132: LD_INT 2
27134: ARRAY
27135: PUSH
27136: LD_VAR 0 8
27140: LESSEQUAL
27141: IFFALSE 27174
// result := Join ( result , [ i , tmp ] ) else
27143: LD_ADDR_VAR 0 5
27147: PUSH
27148: LD_VAR 0 5
27152: PPUSH
27153: LD_VAR 0 6
27157: PUSH
27158: LD_VAR 0 8
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL 59264 0 2
27171: ST_TO_ADDR
27172: GO 27259
// begin for j := 1 to Count ( result ) do
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: DOUBLE
27180: LD_INT 1
27182: DEC
27183: ST_TO_ADDR
27184: LD_VAR 0 5
27188: PPUSH
27189: CALL 23655 0 1
27193: PUSH
27194: FOR_TO
27195: IFFALSE 27257
// begin if tmp < result [ j ] [ 2 ] then
27197: LD_VAR 0 8
27201: PUSH
27202: LD_VAR 0 5
27206: PUSH
27207: LD_VAR 0 7
27211: ARRAY
27212: PUSH
27213: LD_INT 2
27215: ARRAY
27216: LESS
27217: IFFALSE 27255
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27219: LD_ADDR_VAR 0 5
27223: PUSH
27224: LD_VAR 0 5
27228: PPUSH
27229: LD_VAR 0 7
27233: PPUSH
27234: LD_VAR 0 6
27238: PUSH
27239: LD_VAR 0 8
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PPUSH
27248: CALL_OW 2
27252: ST_TO_ADDR
// break ;
27253: GO 27257
// end ; end ;
27255: GO 27194
27257: POP
27258: POP
// end ; end ;
27259: GO 27042
27261: POP
27262: POP
// if result and not asc then
27263: LD_VAR 0 5
27267: PUSH
27268: LD_VAR 0 3
27272: NOT
27273: AND
27274: IFFALSE 27291
// result := ReverseArray ( result ) ;
27276: LD_ADDR_VAR 0 5
27280: PUSH
27281: LD_VAR 0 5
27285: PPUSH
27286: CALL 54531 0 1
27290: ST_TO_ADDR
// tmp := [ ] ;
27291: LD_ADDR_VAR 0 8
27295: PUSH
27296: EMPTY
27297: ST_TO_ADDR
// if mode then
27298: LD_VAR 0 4
27302: IFFALSE 27366
// begin for i := 1 to result do
27304: LD_ADDR_VAR 0 6
27308: PUSH
27309: DOUBLE
27310: LD_INT 1
27312: DEC
27313: ST_TO_ADDR
27314: LD_VAR 0 5
27318: PUSH
27319: FOR_TO
27320: IFFALSE 27354
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27322: LD_ADDR_VAR 0 8
27326: PUSH
27327: LD_VAR 0 8
27331: PPUSH
27332: LD_VAR 0 5
27336: PUSH
27337: LD_VAR 0 6
27341: ARRAY
27342: PUSH
27343: LD_INT 1
27345: ARRAY
27346: PPUSH
27347: CALL 59264 0 2
27351: ST_TO_ADDR
27352: GO 27319
27354: POP
27355: POP
// result := tmp ;
27356: LD_ADDR_VAR 0 5
27360: PUSH
27361: LD_VAR 0 8
27365: ST_TO_ADDR
// end ; end ;
27366: LD_VAR 0 5
27370: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
// if not list then
27377: LD_VAR 0 3
27381: NOT
27382: IFFALSE 27386
// exit ;
27384: GO 27774
// result := [ ] ;
27386: LD_ADDR_VAR 0 6
27390: PUSH
27391: EMPTY
27392: ST_TO_ADDR
// for i in list do
27393: LD_ADDR_VAR 0 7
27397: PUSH
27398: LD_VAR 0 3
27402: PUSH
27403: FOR_IN
27404: IFFALSE 27606
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27406: LD_ADDR_VAR 0 9
27410: PUSH
27411: LD_VAR 0 7
27415: PPUSH
27416: LD_VAR 0 1
27420: PPUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: CALL_OW 297
27430: ST_TO_ADDR
// if not result then
27431: LD_VAR 0 6
27435: NOT
27436: IFFALSE 27462
// result := [ [ i , tmp ] ] else
27438: LD_ADDR_VAR 0 6
27442: PUSH
27443: LD_VAR 0 7
27447: PUSH
27448: LD_VAR 0 9
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: ST_TO_ADDR
27460: GO 27604
// begin if result [ result ] [ 2 ] <= tmp then
27462: LD_VAR 0 6
27466: PUSH
27467: LD_VAR 0 6
27471: ARRAY
27472: PUSH
27473: LD_INT 2
27475: ARRAY
27476: PUSH
27477: LD_VAR 0 9
27481: LESSEQUAL
27482: IFFALSE 27524
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27484: LD_ADDR_VAR 0 6
27488: PUSH
27489: LD_VAR 0 6
27493: PPUSH
27494: LD_VAR 0 6
27498: PUSH
27499: LD_INT 1
27501: PLUS
27502: PPUSH
27503: LD_VAR 0 7
27507: PUSH
27508: LD_VAR 0 9
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PPUSH
27517: CALL_OW 2
27521: ST_TO_ADDR
27522: GO 27604
// for j := 1 to result do
27524: LD_ADDR_VAR 0 8
27528: PUSH
27529: DOUBLE
27530: LD_INT 1
27532: DEC
27533: ST_TO_ADDR
27534: LD_VAR 0 6
27538: PUSH
27539: FOR_TO
27540: IFFALSE 27602
// begin if tmp < result [ j ] [ 2 ] then
27542: LD_VAR 0 9
27546: PUSH
27547: LD_VAR 0 6
27551: PUSH
27552: LD_VAR 0 8
27556: ARRAY
27557: PUSH
27558: LD_INT 2
27560: ARRAY
27561: LESS
27562: IFFALSE 27600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27564: LD_ADDR_VAR 0 6
27568: PUSH
27569: LD_VAR 0 6
27573: PPUSH
27574: LD_VAR 0 8
27578: PPUSH
27579: LD_VAR 0 7
27583: PUSH
27584: LD_VAR 0 9
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PPUSH
27593: CALL_OW 2
27597: ST_TO_ADDR
// break ;
27598: GO 27602
// end ; end ;
27600: GO 27539
27602: POP
27603: POP
// end ; end ;
27604: GO 27403
27606: POP
27607: POP
// if result and not asc then
27608: LD_VAR 0 6
27612: PUSH
27613: LD_VAR 0 4
27617: NOT
27618: AND
27619: IFFALSE 27694
// begin tmp := result ;
27621: LD_ADDR_VAR 0 9
27625: PUSH
27626: LD_VAR 0 6
27630: ST_TO_ADDR
// for i = tmp downto 1 do
27631: LD_ADDR_VAR 0 7
27635: PUSH
27636: DOUBLE
27637: LD_VAR 0 9
27641: INC
27642: ST_TO_ADDR
27643: LD_INT 1
27645: PUSH
27646: FOR_DOWNTO
27647: IFFALSE 27692
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27649: LD_ADDR_VAR 0 6
27653: PUSH
27654: LD_VAR 0 6
27658: PPUSH
27659: LD_VAR 0 9
27663: PUSH
27664: LD_VAR 0 7
27668: MINUS
27669: PUSH
27670: LD_INT 1
27672: PLUS
27673: PPUSH
27674: LD_VAR 0 9
27678: PUSH
27679: LD_VAR 0 7
27683: ARRAY
27684: PPUSH
27685: CALL_OW 1
27689: ST_TO_ADDR
27690: GO 27646
27692: POP
27693: POP
// end ; tmp := [ ] ;
27694: LD_ADDR_VAR 0 9
27698: PUSH
27699: EMPTY
27700: ST_TO_ADDR
// if mode then
27701: LD_VAR 0 5
27705: IFFALSE 27774
// begin for i = 1 to result do
27707: LD_ADDR_VAR 0 7
27711: PUSH
27712: DOUBLE
27713: LD_INT 1
27715: DEC
27716: ST_TO_ADDR
27717: LD_VAR 0 6
27721: PUSH
27722: FOR_TO
27723: IFFALSE 27762
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27725: LD_ADDR_VAR 0 9
27729: PUSH
27730: LD_VAR 0 9
27734: PPUSH
27735: LD_VAR 0 7
27739: PPUSH
27740: LD_VAR 0 6
27744: PUSH
27745: LD_VAR 0 7
27749: ARRAY
27750: PUSH
27751: LD_INT 1
27753: ARRAY
27754: PPUSH
27755: CALL_OW 1
27759: ST_TO_ADDR
27760: GO 27722
27762: POP
27763: POP
// result := tmp ;
27764: LD_ADDR_VAR 0 6
27768: PUSH
27769: LD_VAR 0 9
27773: ST_TO_ADDR
// end ; end ;
27774: LD_VAR 0 6
27778: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27779: LD_INT 0
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
27785: PPUSH
27786: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27787: LD_ADDR_VAR 0 5
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// if not x or not y then
27809: LD_VAR 0 2
27813: NOT
27814: PUSH
27815: LD_VAR 0 3
27819: NOT
27820: OR
27821: IFFALSE 27825
// exit ;
27823: GO 29475
// if not range then
27825: LD_VAR 0 4
27829: NOT
27830: IFFALSE 27840
// range := 10 ;
27832: LD_ADDR_VAR 0 4
27836: PUSH
27837: LD_INT 10
27839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27840: LD_ADDR_VAR 0 8
27844: PUSH
27845: LD_INT 81
27847: PUSH
27848: LD_VAR 0 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 92
27859: PUSH
27860: LD_VAR 0 2
27864: PUSH
27865: LD_VAR 0 3
27869: PUSH
27870: LD_VAR 0 4
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: LD_INT 21
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: PPUSH
27903: CALL_OW 69
27907: ST_TO_ADDR
// if not tmp then
27908: LD_VAR 0 8
27912: NOT
27913: IFFALSE 27917
// exit ;
27915: GO 29475
// for i in tmp do
27917: LD_ADDR_VAR 0 6
27921: PUSH
27922: LD_VAR 0 8
27926: PUSH
27927: FOR_IN
27928: IFFALSE 29450
// begin points := [ 0 , 0 , 0 ] ;
27930: LD_ADDR_VAR 0 9
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// bpoints := 1 ;
27949: LD_ADDR_VAR 0 10
27953: PUSH
27954: LD_INT 1
27956: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27957: LD_VAR 0 6
27961: PPUSH
27962: CALL_OW 247
27966: PUSH
27967: LD_INT 1
27969: DOUBLE
27970: EQUAL
27971: IFTRUE 27975
27973: GO 28553
27975: POP
// begin if GetClass ( i ) = 1 then
27976: LD_VAR 0 6
27980: PPUSH
27981: CALL_OW 257
27985: PUSH
27986: LD_INT 1
27988: EQUAL
27989: IFFALSE 28010
// points := [ 10 , 5 , 3 ] ;
27991: LD_ADDR_VAR 0 9
27995: PUSH
27996: LD_INT 10
27998: PUSH
27999: LD_INT 5
28001: PUSH
28002: LD_INT 3
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28010: LD_VAR 0 6
28014: PPUSH
28015: CALL_OW 257
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: LD_INT 3
28025: PUSH
28026: LD_INT 4
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: IN
28034: IFFALSE 28055
// points := [ 3 , 2 , 1 ] ;
28036: LD_ADDR_VAR 0 9
28040: PUSH
28041: LD_INT 3
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28055: LD_VAR 0 6
28059: PPUSH
28060: CALL_OW 257
28064: PUSH
28065: LD_INT 5
28067: EQUAL
28068: IFFALSE 28089
// points := [ 130 , 5 , 2 ] ;
28070: LD_ADDR_VAR 0 9
28074: PUSH
28075: LD_INT 130
28077: PUSH
28078: LD_INT 5
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28089: LD_VAR 0 6
28093: PPUSH
28094: CALL_OW 257
28098: PUSH
28099: LD_INT 8
28101: EQUAL
28102: IFFALSE 28123
// points := [ 35 , 35 , 30 ] ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: LD_INT 35
28111: PUSH
28112: LD_INT 35
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28123: LD_VAR 0 6
28127: PPUSH
28128: CALL_OW 257
28132: PUSH
28133: LD_INT 9
28135: EQUAL
28136: IFFALSE 28157
// points := [ 20 , 55 , 40 ] ;
28138: LD_ADDR_VAR 0 9
28142: PUSH
28143: LD_INT 20
28145: PUSH
28146: LD_INT 55
28148: PUSH
28149: LD_INT 40
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28157: LD_VAR 0 6
28161: PPUSH
28162: CALL_OW 257
28166: PUSH
28167: LD_INT 12
28169: PUSH
28170: LD_INT 16
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: IN
28177: IFFALSE 28198
// points := [ 5 , 3 , 2 ] ;
28179: LD_ADDR_VAR 0 9
28183: PUSH
28184: LD_INT 5
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28198: LD_VAR 0 6
28202: PPUSH
28203: CALL_OW 257
28207: PUSH
28208: LD_INT 17
28210: EQUAL
28211: IFFALSE 28232
// points := [ 100 , 50 , 75 ] ;
28213: LD_ADDR_VAR 0 9
28217: PUSH
28218: LD_INT 100
28220: PUSH
28221: LD_INT 50
28223: PUSH
28224: LD_INT 75
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28232: LD_VAR 0 6
28236: PPUSH
28237: CALL_OW 257
28241: PUSH
28242: LD_INT 15
28244: EQUAL
28245: IFFALSE 28266
// points := [ 10 , 5 , 3 ] ;
28247: LD_ADDR_VAR 0 9
28251: PUSH
28252: LD_INT 10
28254: PUSH
28255: LD_INT 5
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28266: LD_VAR 0 6
28270: PPUSH
28271: CALL_OW 257
28275: PUSH
28276: LD_INT 14
28278: EQUAL
28279: IFFALSE 28300
// points := [ 10 , 0 , 0 ] ;
28281: LD_ADDR_VAR 0 9
28285: PUSH
28286: LD_INT 10
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28300: LD_VAR 0 6
28304: PPUSH
28305: CALL_OW 257
28309: PUSH
28310: LD_INT 11
28312: EQUAL
28313: IFFALSE 28334
// points := [ 30 , 10 , 5 ] ;
28315: LD_ADDR_VAR 0 9
28319: PUSH
28320: LD_INT 30
28322: PUSH
28323: LD_INT 10
28325: PUSH
28326: LD_INT 5
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28334: LD_VAR 0 1
28338: PPUSH
28339: LD_INT 5
28341: PPUSH
28342: CALL_OW 321
28346: PUSH
28347: LD_INT 2
28349: EQUAL
28350: IFFALSE 28367
// bpoints := bpoints * 1.8 ;
28352: LD_ADDR_VAR 0 10
28356: PUSH
28357: LD_VAR 0 10
28361: PUSH
28362: LD_REAL  1.80000000000000E+0000
28365: MUL
28366: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28367: LD_VAR 0 6
28371: PPUSH
28372: CALL_OW 257
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: IN
28395: PUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_INT 51
28403: PPUSH
28404: CALL_OW 321
28408: PUSH
28409: LD_INT 2
28411: EQUAL
28412: AND
28413: IFFALSE 28430
// bpoints := bpoints * 1.2 ;
28415: LD_ADDR_VAR 0 10
28419: PUSH
28420: LD_VAR 0 10
28424: PUSH
28425: LD_REAL  1.20000000000000E+0000
28428: MUL
28429: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28430: LD_VAR 0 6
28434: PPUSH
28435: CALL_OW 257
28439: PUSH
28440: LD_INT 5
28442: PUSH
28443: LD_INT 7
28445: PUSH
28446: LD_INT 9
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: IN
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: LD_INT 52
28462: PPUSH
28463: CALL_OW 321
28467: PUSH
28468: LD_INT 2
28470: EQUAL
28471: AND
28472: IFFALSE 28489
// bpoints := bpoints * 1.5 ;
28474: LD_ADDR_VAR 0 10
28478: PUSH
28479: LD_VAR 0 10
28483: PUSH
28484: LD_REAL  1.50000000000000E+0000
28487: MUL
28488: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_INT 66
28496: PPUSH
28497: CALL_OW 321
28501: PUSH
28502: LD_INT 2
28504: EQUAL
28505: IFFALSE 28522
// bpoints := bpoints * 1.1 ;
28507: LD_ADDR_VAR 0 10
28511: PUSH
28512: LD_VAR 0 10
28516: PUSH
28517: LD_REAL  1.10000000000000E+0000
28520: MUL
28521: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28522: LD_ADDR_VAR 0 10
28526: PUSH
28527: LD_VAR 0 10
28531: PUSH
28532: LD_VAR 0 6
28536: PPUSH
28537: LD_INT 1
28539: PPUSH
28540: CALL_OW 259
28544: PUSH
28545: LD_REAL  1.15000000000000E+0000
28548: MUL
28549: MUL
28550: ST_TO_ADDR
// end ; unit_vehicle :
28551: GO 29379
28553: LD_INT 2
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 29367
28561: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28562: LD_VAR 0 6
28566: PPUSH
28567: CALL_OW 264
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 42
28577: PUSH
28578: LD_INT 24
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: IN
28586: IFFALSE 28607
// points := [ 25 , 5 , 3 ] ;
28588: LD_ADDR_VAR 0 9
28592: PUSH
28593: LD_INT 25
28595: PUSH
28596: LD_INT 5
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28607: LD_VAR 0 6
28611: PPUSH
28612: CALL_OW 264
28616: PUSH
28617: LD_INT 4
28619: PUSH
28620: LD_INT 43
28622: PUSH
28623: LD_INT 25
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: IN
28631: IFFALSE 28652
// points := [ 40 , 15 , 5 ] ;
28633: LD_ADDR_VAR 0 9
28637: PUSH
28638: LD_INT 40
28640: PUSH
28641: LD_INT 15
28643: PUSH
28644: LD_INT 5
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28652: LD_VAR 0 6
28656: PPUSH
28657: CALL_OW 264
28661: PUSH
28662: LD_INT 3
28664: PUSH
28665: LD_INT 23
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: IN
28672: IFFALSE 28693
// points := [ 7 , 25 , 8 ] ;
28674: LD_ADDR_VAR 0 9
28678: PUSH
28679: LD_INT 7
28681: PUSH
28682: LD_INT 25
28684: PUSH
28685: LD_INT 8
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28693: LD_VAR 0 6
28697: PPUSH
28698: CALL_OW 264
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: LD_INT 27
28708: PUSH
28709: LD_INT 44
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: IN
28717: IFFALSE 28738
// points := [ 14 , 50 , 16 ] ;
28719: LD_ADDR_VAR 0 9
28723: PUSH
28724: LD_INT 14
28726: PUSH
28727: LD_INT 50
28729: PUSH
28730: LD_INT 16
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28738: LD_VAR 0 6
28742: PPUSH
28743: CALL_OW 264
28747: PUSH
28748: LD_INT 6
28750: PUSH
28751: LD_INT 46
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: IN
28758: IFFALSE 28779
// points := [ 32 , 120 , 70 ] ;
28760: LD_ADDR_VAR 0 9
28764: PUSH
28765: LD_INT 32
28767: PUSH
28768: LD_INT 120
28770: PUSH
28771: LD_INT 70
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28779: LD_VAR 0 6
28783: PPUSH
28784: CALL_OW 264
28788: PUSH
28789: LD_INT 7
28791: PUSH
28792: LD_INT 28
28794: PUSH
28795: LD_INT 45
28797: PUSH
28798: LD_INT 92
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: IN
28807: IFFALSE 28828
// points := [ 35 , 20 , 45 ] ;
28809: LD_ADDR_VAR 0 9
28813: PUSH
28814: LD_INT 35
28816: PUSH
28817: LD_INT 20
28819: PUSH
28820: LD_INT 45
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28828: LD_VAR 0 6
28832: PPUSH
28833: CALL_OW 264
28837: PUSH
28838: LD_INT 47
28840: PUSH
28841: EMPTY
28842: LIST
28843: IN
28844: IFFALSE 28865
// points := [ 67 , 45 , 75 ] ;
28846: LD_ADDR_VAR 0 9
28850: PUSH
28851: LD_INT 67
28853: PUSH
28854: LD_INT 45
28856: PUSH
28857: LD_INT 75
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28865: LD_VAR 0 6
28869: PPUSH
28870: CALL_OW 264
28874: PUSH
28875: LD_INT 26
28877: PUSH
28878: EMPTY
28879: LIST
28880: IN
28881: IFFALSE 28902
// points := [ 120 , 30 , 80 ] ;
28883: LD_ADDR_VAR 0 9
28887: PUSH
28888: LD_INT 120
28890: PUSH
28891: LD_INT 30
28893: PUSH
28894: LD_INT 80
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28902: LD_VAR 0 6
28906: PPUSH
28907: CALL_OW 264
28911: PUSH
28912: LD_INT 22
28914: PUSH
28915: EMPTY
28916: LIST
28917: IN
28918: IFFALSE 28939
// points := [ 40 , 1 , 1 ] ;
28920: LD_ADDR_VAR 0 9
28924: PUSH
28925: LD_INT 40
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28939: LD_VAR 0 6
28943: PPUSH
28944: CALL_OW 264
28948: PUSH
28949: LD_INT 29
28951: PUSH
28952: EMPTY
28953: LIST
28954: IN
28955: IFFALSE 28976
// points := [ 70 , 200 , 400 ] ;
28957: LD_ADDR_VAR 0 9
28961: PUSH
28962: LD_INT 70
28964: PUSH
28965: LD_INT 200
28967: PUSH
28968: LD_INT 400
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28976: LD_VAR 0 6
28980: PPUSH
28981: CALL_OW 264
28985: PUSH
28986: LD_INT 14
28988: PUSH
28989: LD_INT 53
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: IN
28996: IFFALSE 29017
// points := [ 40 , 10 , 20 ] ;
28998: LD_ADDR_VAR 0 9
29002: PUSH
29003: LD_INT 40
29005: PUSH
29006: LD_INT 10
29008: PUSH
29009: LD_INT 20
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29017: LD_VAR 0 6
29021: PPUSH
29022: CALL_OW 264
29026: PUSH
29027: LD_INT 9
29029: PUSH
29030: EMPTY
29031: LIST
29032: IN
29033: IFFALSE 29054
// points := [ 5 , 70 , 20 ] ;
29035: LD_ADDR_VAR 0 9
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: LD_INT 70
29045: PUSH
29046: LD_INT 20
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29054: LD_VAR 0 6
29058: PPUSH
29059: CALL_OW 264
29063: PUSH
29064: LD_INT 10
29066: PUSH
29067: EMPTY
29068: LIST
29069: IN
29070: IFFALSE 29091
// points := [ 35 , 110 , 70 ] ;
29072: LD_ADDR_VAR 0 9
29076: PUSH
29077: LD_INT 35
29079: PUSH
29080: LD_INT 110
29082: PUSH
29083: LD_INT 70
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29091: LD_VAR 0 6
29095: PPUSH
29096: CALL_OW 265
29100: PUSH
29101: LD_INT 25
29103: EQUAL
29104: IFFALSE 29125
// points := [ 80 , 65 , 100 ] ;
29106: LD_ADDR_VAR 0 9
29110: PUSH
29111: LD_INT 80
29113: PUSH
29114: LD_INT 65
29116: PUSH
29117: LD_INT 100
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29125: LD_VAR 0 6
29129: PPUSH
29130: CALL_OW 263
29134: PUSH
29135: LD_INT 1
29137: EQUAL
29138: IFFALSE 29173
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29140: LD_ADDR_VAR 0 10
29144: PUSH
29145: LD_VAR 0 10
29149: PUSH
29150: LD_VAR 0 6
29154: PPUSH
29155: CALL_OW 311
29159: PPUSH
29160: LD_INT 3
29162: PPUSH
29163: CALL_OW 259
29167: PUSH
29168: LD_INT 4
29170: MUL
29171: MUL
29172: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29173: LD_VAR 0 6
29177: PPUSH
29178: CALL_OW 263
29182: PUSH
29183: LD_INT 2
29185: EQUAL
29186: IFFALSE 29237
// begin j := IsControledBy ( i ) ;
29188: LD_ADDR_VAR 0 7
29192: PUSH
29193: LD_VAR 0 6
29197: PPUSH
29198: CALL_OW 312
29202: ST_TO_ADDR
// if j then
29203: LD_VAR 0 7
29207: IFFALSE 29237
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29209: LD_ADDR_VAR 0 10
29213: PUSH
29214: LD_VAR 0 10
29218: PUSH
29219: LD_VAR 0 7
29223: PPUSH
29224: LD_INT 3
29226: PPUSH
29227: CALL_OW 259
29231: PUSH
29232: LD_INT 3
29234: MUL
29235: MUL
29236: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29237: LD_VAR 0 6
29241: PPUSH
29242: CALL_OW 264
29246: PUSH
29247: LD_INT 5
29249: PUSH
29250: LD_INT 6
29252: PUSH
29253: LD_INT 46
29255: PUSH
29256: LD_INT 44
29258: PUSH
29259: LD_INT 47
29261: PUSH
29262: LD_INT 45
29264: PUSH
29265: LD_INT 28
29267: PUSH
29268: LD_INT 7
29270: PUSH
29271: LD_INT 27
29273: PUSH
29274: LD_INT 29
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: IN
29289: PUSH
29290: LD_VAR 0 1
29294: PPUSH
29295: LD_INT 52
29297: PPUSH
29298: CALL_OW 321
29302: PUSH
29303: LD_INT 2
29305: EQUAL
29306: AND
29307: IFFALSE 29324
// bpoints := bpoints * 1.2 ;
29309: LD_ADDR_VAR 0 10
29313: PUSH
29314: LD_VAR 0 10
29318: PUSH
29319: LD_REAL  1.20000000000000E+0000
29322: MUL
29323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29324: LD_VAR 0 6
29328: PPUSH
29329: CALL_OW 264
29333: PUSH
29334: LD_INT 6
29336: PUSH
29337: LD_INT 46
29339: PUSH
29340: LD_INT 47
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: IN
29348: IFFALSE 29365
// bpoints := bpoints * 1.2 ;
29350: LD_ADDR_VAR 0 10
29354: PUSH
29355: LD_VAR 0 10
29359: PUSH
29360: LD_REAL  1.20000000000000E+0000
29363: MUL
29364: ST_TO_ADDR
// end ; unit_building :
29365: GO 29379
29367: LD_INT 3
29369: DOUBLE
29370: EQUAL
29371: IFTRUE 29375
29373: GO 29378
29375: POP
// ; end ;
29376: GO 29379
29378: POP
// for j = 1 to 3 do
29379: LD_ADDR_VAR 0 7
29383: PUSH
29384: DOUBLE
29385: LD_INT 1
29387: DEC
29388: ST_TO_ADDR
29389: LD_INT 3
29391: PUSH
29392: FOR_TO
29393: IFFALSE 29446
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29395: LD_ADDR_VAR 0 5
29399: PUSH
29400: LD_VAR 0 5
29404: PPUSH
29405: LD_VAR 0 7
29409: PPUSH
29410: LD_VAR 0 5
29414: PUSH
29415: LD_VAR 0 7
29419: ARRAY
29420: PUSH
29421: LD_VAR 0 9
29425: PUSH
29426: LD_VAR 0 7
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 10
29436: MUL
29437: PLUS
29438: PPUSH
29439: CALL_OW 1
29443: ST_TO_ADDR
29444: GO 29392
29446: POP
29447: POP
// end ;
29448: GO 27927
29450: POP
29451: POP
// result := Replace ( result , 4 , tmp ) ;
29452: LD_ADDR_VAR 0 5
29456: PUSH
29457: LD_VAR 0 5
29461: PPUSH
29462: LD_INT 4
29464: PPUSH
29465: LD_VAR 0 8
29469: PPUSH
29470: CALL_OW 1
29474: ST_TO_ADDR
// end ;
29475: LD_VAR 0 5
29479: RET
// export function DangerAtRange ( unit , range ) ; begin
29480: LD_INT 0
29482: PPUSH
// if not unit then
29483: LD_VAR 0 1
29487: NOT
29488: IFFALSE 29492
// exit ;
29490: GO 29537
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29492: LD_ADDR_VAR 0 3
29496: PUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 255
29506: PPUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 250
29516: PPUSH
29517: LD_VAR 0 1
29521: PPUSH
29522: CALL_OW 251
29526: PPUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: CALL 27779 0 4
29536: ST_TO_ADDR
// end ;
29537: LD_VAR 0 3
29541: RET
// export function DangerInArea ( side , area ) ; begin
29542: LD_INT 0
29544: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: LD_VAR 0 2
29554: PPUSH
29555: LD_INT 81
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 70
29571: ST_TO_ADDR
// end ;
29572: LD_VAR 0 3
29576: RET
// export function IsExtension ( b ) ; begin
29577: LD_INT 0
29579: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29580: LD_ADDR_VAR 0 2
29584: PUSH
29585: LD_VAR 0 1
29589: PUSH
29590: LD_INT 23
29592: PUSH
29593: LD_INT 20
29595: PUSH
29596: LD_INT 22
29598: PUSH
29599: LD_INT 17
29601: PUSH
29602: LD_INT 24
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 19
29610: PUSH
29611: LD_INT 16
29613: PUSH
29614: LD_INT 25
29616: PUSH
29617: LD_INT 18
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: IN
29632: ST_TO_ADDR
// end ;
29633: LD_VAR 0 2
29637: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29638: LD_INT 0
29640: PPUSH
29641: PPUSH
29642: PPUSH
// result := [ ] ;
29643: LD_ADDR_VAR 0 4
29647: PUSH
29648: EMPTY
29649: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29650: LD_ADDR_VAR 0 5
29654: PUSH
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_INT 21
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PPUSH
29670: CALL_OW 70
29674: ST_TO_ADDR
// if not tmp then
29675: LD_VAR 0 5
29679: NOT
29680: IFFALSE 29684
// exit ;
29682: GO 29748
// if checkLink then
29684: LD_VAR 0 3
29688: IFFALSE 29738
// begin for i in tmp do
29690: LD_ADDR_VAR 0 6
29694: PUSH
29695: LD_VAR 0 5
29699: PUSH
29700: FOR_IN
29701: IFFALSE 29736
// if GetBase ( i ) <> base then
29703: LD_VAR 0 6
29707: PPUSH
29708: CALL_OW 274
29712: PUSH
29713: LD_VAR 0 1
29717: NONEQUAL
29718: IFFALSE 29734
// ComLinkToBase ( base , i ) ;
29720: LD_VAR 0 1
29724: PPUSH
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 169
29734: GO 29700
29736: POP
29737: POP
// end ; result := tmp ;
29738: LD_ADDR_VAR 0 4
29742: PUSH
29743: LD_VAR 0 5
29747: ST_TO_ADDR
// end ;
29748: LD_VAR 0 4
29752: RET
// export function ComComplete ( units , b ) ; var i ; begin
29753: LD_INT 0
29755: PPUSH
29756: PPUSH
// if not units then
29757: LD_VAR 0 1
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29856
// for i in units do
29766: LD_ADDR_VAR 0 4
29770: PUSH
29771: LD_VAR 0 1
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29854
// if BuildingStatus ( b ) = bs_build then
29779: LD_VAR 0 2
29783: PPUSH
29784: CALL_OW 461
29788: PUSH
29789: LD_INT 1
29791: EQUAL
29792: IFFALSE 29852
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29794: LD_VAR 0 4
29798: PPUSH
29799: LD_STRING h
29801: PUSH
29802: LD_VAR 0 2
29806: PPUSH
29807: CALL_OW 250
29811: PUSH
29812: LD_VAR 0 2
29816: PPUSH
29817: CALL_OW 251
29821: PUSH
29822: LD_VAR 0 2
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: PPUSH
29848: CALL_OW 446
29852: GO 29776
29854: POP
29855: POP
// end ;
29856: LD_VAR 0 3
29860: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29861: LD_INT 0
29863: PPUSH
29864: PPUSH
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29869: LD_VAR 0 1
29873: NOT
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 263
29884: PUSH
29885: LD_INT 2
29887: NONEQUAL
29888: OR
29889: IFFALSE 29893
// exit ;
29891: GO 30209
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29893: LD_ADDR_VAR 0 6
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_VAR 0 1
29905: PPUSH
29906: CALL_OW 255
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 30
29920: PUSH
29921: LD_INT 36
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 34
29930: PUSH
29931: LD_INT 31
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PPUSH
29947: CALL_OW 69
29951: ST_TO_ADDR
// if not tmp then
29952: LD_VAR 0 6
29956: NOT
29957: IFFALSE 29961
// exit ;
29959: GO 30209
// result := [ ] ;
29961: LD_ADDR_VAR 0 2
29965: PUSH
29966: EMPTY
29967: ST_TO_ADDR
// for i in tmp do
29968: LD_ADDR_VAR 0 3
29972: PUSH
29973: LD_VAR 0 6
29977: PUSH
29978: FOR_IN
29979: IFFALSE 30050
// begin t := UnitsInside ( i ) ;
29981: LD_ADDR_VAR 0 4
29985: PUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 313
29995: ST_TO_ADDR
// if t then
29996: LD_VAR 0 4
30000: IFFALSE 30048
// for j in t do
30002: LD_ADDR_VAR 0 7
30006: PUSH
30007: LD_VAR 0 4
30011: PUSH
30012: FOR_IN
30013: IFFALSE 30046
// result := Replace ( result , result + 1 , j ) ;
30015: LD_ADDR_VAR 0 2
30019: PUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_VAR 0 2
30029: PUSH
30030: LD_INT 1
30032: PLUS
30033: PPUSH
30034: LD_VAR 0 7
30038: PPUSH
30039: CALL_OW 1
30043: ST_TO_ADDR
30044: GO 30012
30046: POP
30047: POP
// end ;
30048: GO 29978
30050: POP
30051: POP
// if not result then
30052: LD_VAR 0 2
30056: NOT
30057: IFFALSE 30061
// exit ;
30059: GO 30209
// mech := result [ 1 ] ;
30061: LD_ADDR_VAR 0 5
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_INT 1
30073: ARRAY
30074: ST_TO_ADDR
// if result > 1 then
30075: LD_VAR 0 2
30079: PUSH
30080: LD_INT 1
30082: GREATER
30083: IFFALSE 30195
// begin for i = 2 to result do
30085: LD_ADDR_VAR 0 3
30089: PUSH
30090: DOUBLE
30091: LD_INT 2
30093: DEC
30094: ST_TO_ADDR
30095: LD_VAR 0 2
30099: PUSH
30100: FOR_TO
30101: IFFALSE 30193
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30103: LD_ADDR_VAR 0 4
30107: PUSH
30108: LD_VAR 0 2
30112: PUSH
30113: LD_VAR 0 3
30117: ARRAY
30118: PPUSH
30119: LD_INT 3
30121: PPUSH
30122: CALL_OW 259
30126: PUSH
30127: LD_VAR 0 2
30131: PUSH
30132: LD_VAR 0 3
30136: ARRAY
30137: PPUSH
30138: CALL_OW 432
30142: MINUS
30143: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30144: LD_VAR 0 4
30148: PUSH
30149: LD_VAR 0 5
30153: PPUSH
30154: LD_INT 3
30156: PPUSH
30157: CALL_OW 259
30161: PUSH
30162: LD_VAR 0 5
30166: PPUSH
30167: CALL_OW 432
30171: MINUS
30172: GREATEREQUAL
30173: IFFALSE 30191
// mech := result [ i ] ;
30175: LD_ADDR_VAR 0 5
30179: PUSH
30180: LD_VAR 0 2
30184: PUSH
30185: LD_VAR 0 3
30189: ARRAY
30190: ST_TO_ADDR
// end ;
30191: GO 30100
30193: POP
30194: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30195: LD_VAR 0 1
30199: PPUSH
30200: LD_VAR 0 5
30204: PPUSH
30205: CALL_OW 135
// end ;
30209: LD_VAR 0 2
30213: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30214: LD_INT 0
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
// result := [ ] ;
30229: LD_ADDR_VAR 0 7
30233: PUSH
30234: EMPTY
30235: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 266
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: IN
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 31895
// if name then
30261: LD_VAR 0 3
30265: IFFALSE 30281
// SetBName ( base_dep , name ) ;
30267: LD_VAR 0 1
30271: PPUSH
30272: LD_VAR 0 3
30276: PPUSH
30277: CALL_OW 500
// base := GetBase ( base_dep ) ;
30281: LD_ADDR_VAR 0 15
30285: PUSH
30286: LD_VAR 0 1
30290: PPUSH
30291: CALL_OW 274
30295: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30296: LD_ADDR_VAR 0 16
30300: PUSH
30301: LD_VAR 0 1
30305: PPUSH
30306: CALL_OW 255
30310: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30311: LD_ADDR_VAR 0 17
30315: PUSH
30316: LD_VAR 0 1
30320: PPUSH
30321: CALL_OW 248
30325: ST_TO_ADDR
// if sources then
30326: LD_VAR 0 5
30330: IFFALSE 30377
// for i = 1 to 3 do
30332: LD_ADDR_VAR 0 8
30336: PUSH
30337: DOUBLE
30338: LD_INT 1
30340: DEC
30341: ST_TO_ADDR
30342: LD_INT 3
30344: PUSH
30345: FOR_TO
30346: IFFALSE 30375
// AddResourceType ( base , i , sources [ i ] ) ;
30348: LD_VAR 0 15
30352: PPUSH
30353: LD_VAR 0 8
30357: PPUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_VAR 0 8
30367: ARRAY
30368: PPUSH
30369: CALL_OW 276
30373: GO 30345
30375: POP
30376: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30377: LD_ADDR_VAR 0 18
30381: PUSH
30382: LD_VAR 0 15
30386: PPUSH
30387: LD_VAR 0 2
30391: PPUSH
30392: LD_INT 1
30394: PPUSH
30395: CALL 29638 0 3
30399: ST_TO_ADDR
// InitHc ;
30400: CALL_OW 19
// InitUc ;
30404: CALL_OW 18
// uc_side := side ;
30408: LD_ADDR_OWVAR 20
30412: PUSH
30413: LD_VAR 0 16
30417: ST_TO_ADDR
// uc_nation := nation ;
30418: LD_ADDR_OWVAR 21
30422: PUSH
30423: LD_VAR 0 17
30427: ST_TO_ADDR
// if buildings then
30428: LD_VAR 0 18
30432: IFFALSE 31754
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30434: LD_ADDR_VAR 0 19
30438: PUSH
30439: LD_VAR 0 18
30443: PPUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 30
30449: PUSH
30450: LD_INT 29
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 30
30459: PUSH
30460: LD_INT 30
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: PPUSH
30472: CALL_OW 72
30476: ST_TO_ADDR
// if tmp then
30477: LD_VAR 0 19
30481: IFFALSE 30529
// for i in tmp do
30483: LD_ADDR_VAR 0 8
30487: PUSH
30488: LD_VAR 0 19
30492: PUSH
30493: FOR_IN
30494: IFFALSE 30527
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30496: LD_VAR 0 8
30500: PPUSH
30501: CALL_OW 250
30505: PPUSH
30506: LD_VAR 0 8
30510: PPUSH
30511: CALL_OW 251
30515: PPUSH
30516: LD_VAR 0 16
30520: PPUSH
30521: CALL_OW 441
30525: GO 30493
30527: POP
30528: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30529: LD_VAR 0 18
30533: PPUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 30
30539: PUSH
30540: LD_INT 32
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 30
30549: PUSH
30550: LD_INT 33
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: PPUSH
30562: CALL_OW 72
30566: IFFALSE 30654
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30568: LD_ADDR_VAR 0 8
30572: PUSH
30573: LD_VAR 0 18
30577: PPUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 30
30583: PUSH
30584: LD_INT 32
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 30
30593: PUSH
30594: LD_INT 33
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 72
30610: PUSH
30611: FOR_IN
30612: IFFALSE 30652
// begin if not GetBWeapon ( i ) then
30614: LD_VAR 0 8
30618: PPUSH
30619: CALL_OW 269
30623: NOT
30624: IFFALSE 30650
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30626: LD_VAR 0 8
30630: PPUSH
30631: LD_VAR 0 8
30635: PPUSH
30636: LD_VAR 0 2
30640: PPUSH
30641: CALL 31900 0 2
30645: PPUSH
30646: CALL_OW 431
// end ;
30650: GO 30611
30652: POP
30653: POP
// end ; for i = 1 to personel do
30654: LD_ADDR_VAR 0 8
30658: PUSH
30659: DOUBLE
30660: LD_INT 1
30662: DEC
30663: ST_TO_ADDR
30664: LD_VAR 0 6
30668: PUSH
30669: FOR_TO
30670: IFFALSE 31734
// begin if i > 4 then
30672: LD_VAR 0 8
30676: PUSH
30677: LD_INT 4
30679: GREATER
30680: IFFALSE 30684
// break ;
30682: GO 31734
// case i of 1 :
30684: LD_VAR 0 8
30688: PUSH
30689: LD_INT 1
30691: DOUBLE
30692: EQUAL
30693: IFTRUE 30697
30695: GO 30777
30697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30698: LD_ADDR_VAR 0 12
30702: PUSH
30703: LD_VAR 0 18
30707: PPUSH
30708: LD_INT 22
30710: PUSH
30711: LD_VAR 0 16
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 58
30722: PUSH
30723: EMPTY
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 30
30731: PUSH
30732: LD_INT 32
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 30
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 30
30751: PUSH
30752: LD_INT 5
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 72
30774: ST_TO_ADDR
30775: GO 30999
30777: LD_INT 2
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30847
30785: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30786: LD_ADDR_VAR 0 12
30790: PUSH
30791: LD_VAR 0 18
30795: PPUSH
30796: LD_INT 22
30798: PUSH
30799: LD_VAR 0 16
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 30
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 30
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 72
30844: ST_TO_ADDR
30845: GO 30999
30847: LD_INT 3
30849: DOUBLE
30850: EQUAL
30851: IFTRUE 30855
30853: GO 30917
30855: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30856: LD_ADDR_VAR 0 12
30860: PUSH
30861: LD_VAR 0 18
30865: PPUSH
30866: LD_INT 22
30868: PUSH
30869: LD_VAR 0 16
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 30
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 30
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PPUSH
30910: CALL_OW 72
30914: ST_TO_ADDR
30915: GO 30999
30917: LD_INT 4
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30998
30925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30926: LD_ADDR_VAR 0 12
30930: PUSH
30931: LD_VAR 0 18
30935: PPUSH
30936: LD_INT 22
30938: PUSH
30939: LD_VAR 0 16
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: LD_INT 30
30953: PUSH
30954: LD_INT 6
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 30
30963: PUSH
30964: LD_INT 7
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 30
30973: PUSH
30974: LD_INT 8
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PPUSH
30991: CALL_OW 72
30995: ST_TO_ADDR
30996: GO 30999
30998: POP
// if i = 1 then
30999: LD_VAR 0 8
31003: PUSH
31004: LD_INT 1
31006: EQUAL
31007: IFFALSE 31118
// begin tmp := [ ] ;
31009: LD_ADDR_VAR 0 19
31013: PUSH
31014: EMPTY
31015: ST_TO_ADDR
// for j in f do
31016: LD_ADDR_VAR 0 9
31020: PUSH
31021: LD_VAR 0 12
31025: PUSH
31026: FOR_IN
31027: IFFALSE 31100
// if GetBType ( j ) = b_bunker then
31029: LD_VAR 0 9
31033: PPUSH
31034: CALL_OW 266
31038: PUSH
31039: LD_INT 32
31041: EQUAL
31042: IFFALSE 31069
// tmp := Insert ( tmp , 1 , j ) else
31044: LD_ADDR_VAR 0 19
31048: PUSH
31049: LD_VAR 0 19
31053: PPUSH
31054: LD_INT 1
31056: PPUSH
31057: LD_VAR 0 9
31061: PPUSH
31062: CALL_OW 2
31066: ST_TO_ADDR
31067: GO 31098
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31069: LD_ADDR_VAR 0 19
31073: PUSH
31074: LD_VAR 0 19
31078: PPUSH
31079: LD_VAR 0 19
31083: PUSH
31084: LD_INT 1
31086: PLUS
31087: PPUSH
31088: LD_VAR 0 9
31092: PPUSH
31093: CALL_OW 2
31097: ST_TO_ADDR
31098: GO 31026
31100: POP
31101: POP
// if tmp then
31102: LD_VAR 0 19
31106: IFFALSE 31118
// f := tmp ;
31108: LD_ADDR_VAR 0 12
31112: PUSH
31113: LD_VAR 0 19
31117: ST_TO_ADDR
// end ; x := personel [ i ] ;
31118: LD_ADDR_VAR 0 13
31122: PUSH
31123: LD_VAR 0 6
31127: PUSH
31128: LD_VAR 0 8
31132: ARRAY
31133: ST_TO_ADDR
// if x = - 1 then
31134: LD_VAR 0 13
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: EQUAL
31143: IFFALSE 31352
// begin for j in f do
31145: LD_ADDR_VAR 0 9
31149: PUSH
31150: LD_VAR 0 12
31154: PUSH
31155: FOR_IN
31156: IFFALSE 31348
// repeat InitHc ;
31158: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31162: LD_VAR 0 9
31166: PPUSH
31167: CALL_OW 266
31171: PUSH
31172: LD_INT 5
31174: EQUAL
31175: IFFALSE 31245
// begin if UnitsInside ( j ) < 3 then
31177: LD_VAR 0 9
31181: PPUSH
31182: CALL_OW 313
31186: PUSH
31187: LD_INT 3
31189: LESS
31190: IFFALSE 31226
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31192: LD_INT 0
31194: PPUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 8
31200: PUSH
31201: LD_INT 9
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: PUSH
31209: LD_VAR 0 17
31213: ARRAY
31214: PPUSH
31215: LD_VAR 0 4
31219: PPUSH
31220: CALL_OW 380
31224: GO 31243
// PrepareHuman ( false , i , skill ) ;
31226: LD_INT 0
31228: PPUSH
31229: LD_VAR 0 8
31233: PPUSH
31234: LD_VAR 0 4
31238: PPUSH
31239: CALL_OW 380
// end else
31243: GO 31262
// PrepareHuman ( false , i , skill ) ;
31245: LD_INT 0
31247: PPUSH
31248: LD_VAR 0 8
31252: PPUSH
31253: LD_VAR 0 4
31257: PPUSH
31258: CALL_OW 380
// un := CreateHuman ;
31262: LD_ADDR_VAR 0 14
31266: PUSH
31267: CALL_OW 44
31271: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31272: LD_ADDR_VAR 0 7
31276: PUSH
31277: LD_VAR 0 7
31281: PPUSH
31282: LD_INT 1
31284: PPUSH
31285: LD_VAR 0 14
31289: PPUSH
31290: CALL_OW 2
31294: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31295: LD_VAR 0 14
31299: PPUSH
31300: LD_VAR 0 9
31304: PPUSH
31305: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31309: LD_VAR 0 9
31313: PPUSH
31314: CALL_OW 313
31318: PUSH
31319: LD_INT 6
31321: EQUAL
31322: PUSH
31323: LD_VAR 0 9
31327: PPUSH
31328: CALL_OW 266
31332: PUSH
31333: LD_INT 32
31335: PUSH
31336: LD_INT 31
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: IN
31343: OR
31344: IFFALSE 31158
31346: GO 31155
31348: POP
31349: POP
// end else
31350: GO 31732
// for j = 1 to x do
31352: LD_ADDR_VAR 0 9
31356: PUSH
31357: DOUBLE
31358: LD_INT 1
31360: DEC
31361: ST_TO_ADDR
31362: LD_VAR 0 13
31366: PUSH
31367: FOR_TO
31368: IFFALSE 31730
// begin InitHc ;
31370: CALL_OW 19
// if not f then
31374: LD_VAR 0 12
31378: NOT
31379: IFFALSE 31468
// begin PrepareHuman ( false , i , skill ) ;
31381: LD_INT 0
31383: PPUSH
31384: LD_VAR 0 8
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: CALL_OW 380
// un := CreateHuman ;
31398: LD_ADDR_VAR 0 14
31402: PUSH
31403: CALL_OW 44
31407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31408: LD_ADDR_VAR 0 7
31412: PUSH
31413: LD_VAR 0 7
31417: PPUSH
31418: LD_INT 1
31420: PPUSH
31421: LD_VAR 0 14
31425: PPUSH
31426: CALL_OW 2
31430: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31431: LD_VAR 0 14
31435: PPUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 250
31445: PPUSH
31446: LD_VAR 0 1
31450: PPUSH
31451: CALL_OW 251
31455: PPUSH
31456: LD_INT 10
31458: PPUSH
31459: LD_INT 0
31461: PPUSH
31462: CALL_OW 50
// continue ;
31466: GO 31367
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31468: LD_VAR 0 12
31472: PUSH
31473: LD_INT 1
31475: ARRAY
31476: PPUSH
31477: CALL_OW 313
31481: PUSH
31482: LD_VAR 0 12
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: CALL_OW 266
31495: PUSH
31496: LD_INT 32
31498: PUSH
31499: LD_INT 31
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: IN
31506: AND
31507: PUSH
31508: LD_VAR 0 12
31512: PUSH
31513: LD_INT 1
31515: ARRAY
31516: PPUSH
31517: CALL_OW 313
31521: PUSH
31522: LD_INT 6
31524: EQUAL
31525: OR
31526: IFFALSE 31546
// f := Delete ( f , 1 ) ;
31528: LD_ADDR_VAR 0 12
31532: PUSH
31533: LD_VAR 0 12
31537: PPUSH
31538: LD_INT 1
31540: PPUSH
31541: CALL_OW 3
31545: ST_TO_ADDR
// if not f then
31546: LD_VAR 0 12
31550: NOT
31551: IFFALSE 31569
// begin x := x + 2 ;
31553: LD_ADDR_VAR 0 13
31557: PUSH
31558: LD_VAR 0 13
31562: PUSH
31563: LD_INT 2
31565: PLUS
31566: ST_TO_ADDR
// continue ;
31567: GO 31367
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31569: LD_VAR 0 12
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PPUSH
31578: CALL_OW 266
31582: PUSH
31583: LD_INT 5
31585: EQUAL
31586: IFFALSE 31660
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31588: LD_VAR 0 12
31592: PUSH
31593: LD_INT 1
31595: ARRAY
31596: PPUSH
31597: CALL_OW 313
31601: PUSH
31602: LD_INT 3
31604: LESS
31605: IFFALSE 31641
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31607: LD_INT 0
31609: PPUSH
31610: LD_INT 5
31612: PUSH
31613: LD_INT 8
31615: PUSH
31616: LD_INT 9
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: PUSH
31624: LD_VAR 0 17
31628: ARRAY
31629: PPUSH
31630: LD_VAR 0 4
31634: PPUSH
31635: CALL_OW 380
31639: GO 31658
// PrepareHuman ( false , i , skill ) ;
31641: LD_INT 0
31643: PPUSH
31644: LD_VAR 0 8
31648: PPUSH
31649: LD_VAR 0 4
31653: PPUSH
31654: CALL_OW 380
// end else
31658: GO 31677
// PrepareHuman ( false , i , skill ) ;
31660: LD_INT 0
31662: PPUSH
31663: LD_VAR 0 8
31667: PPUSH
31668: LD_VAR 0 4
31672: PPUSH
31673: CALL_OW 380
// un := CreateHuman ;
31677: LD_ADDR_VAR 0 14
31681: PUSH
31682: CALL_OW 44
31686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31687: LD_ADDR_VAR 0 7
31691: PUSH
31692: LD_VAR 0 7
31696: PPUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_VAR 0 14
31704: PPUSH
31705: CALL_OW 2
31709: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31710: LD_VAR 0 14
31714: PPUSH
31715: LD_VAR 0 12
31719: PUSH
31720: LD_INT 1
31722: ARRAY
31723: PPUSH
31724: CALL_OW 52
// end ;
31728: GO 31367
31730: POP
31731: POP
// end ;
31732: GO 30669
31734: POP
31735: POP
// result := result ^ buildings ;
31736: LD_ADDR_VAR 0 7
31740: PUSH
31741: LD_VAR 0 7
31745: PUSH
31746: LD_VAR 0 18
31750: ADD
31751: ST_TO_ADDR
// end else
31752: GO 31895
// begin for i = 1 to personel do
31754: LD_ADDR_VAR 0 8
31758: PUSH
31759: DOUBLE
31760: LD_INT 1
31762: DEC
31763: ST_TO_ADDR
31764: LD_VAR 0 6
31768: PUSH
31769: FOR_TO
31770: IFFALSE 31893
// begin if i > 4 then
31772: LD_VAR 0 8
31776: PUSH
31777: LD_INT 4
31779: GREATER
31780: IFFALSE 31784
// break ;
31782: GO 31893
// x := personel [ i ] ;
31784: LD_ADDR_VAR 0 13
31788: PUSH
31789: LD_VAR 0 6
31793: PUSH
31794: LD_VAR 0 8
31798: ARRAY
31799: ST_TO_ADDR
// if x = - 1 then
31800: LD_VAR 0 13
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: EQUAL
31809: IFFALSE 31813
// continue ;
31811: GO 31769
// PrepareHuman ( false , i , skill ) ;
31813: LD_INT 0
31815: PPUSH
31816: LD_VAR 0 8
31820: PPUSH
31821: LD_VAR 0 4
31825: PPUSH
31826: CALL_OW 380
// un := CreateHuman ;
31830: LD_ADDR_VAR 0 14
31834: PUSH
31835: CALL_OW 44
31839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31840: LD_VAR 0 14
31844: PPUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 250
31854: PPUSH
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 251
31864: PPUSH
31865: LD_INT 10
31867: PPUSH
31868: LD_INT 0
31870: PPUSH
31871: CALL_OW 50
// result := result ^ un ;
31875: LD_ADDR_VAR 0 7
31879: PUSH
31880: LD_VAR 0 7
31884: PUSH
31885: LD_VAR 0 14
31889: ADD
31890: ST_TO_ADDR
// end ;
31891: GO 31769
31893: POP
31894: POP
// end ; end ;
31895: LD_VAR 0 7
31899: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31900: LD_INT 0
31902: PPUSH
31903: PPUSH
31904: PPUSH
31905: PPUSH
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
// result := false ;
31918: LD_ADDR_VAR 0 3
31922: PUSH
31923: LD_INT 0
31925: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31926: LD_VAR 0 1
31930: NOT
31931: PUSH
31932: LD_VAR 0 1
31936: PPUSH
31937: CALL_OW 266
31941: PUSH
31942: LD_INT 32
31944: PUSH
31945: LD_INT 33
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: IN
31952: NOT
31953: OR
31954: IFFALSE 31958
// exit ;
31956: GO 33067
// nat := GetNation ( tower ) ;
31958: LD_ADDR_VAR 0 12
31962: PUSH
31963: LD_VAR 0 1
31967: PPUSH
31968: CALL_OW 248
31972: ST_TO_ADDR
// side := GetSide ( tower ) ;
31973: LD_ADDR_VAR 0 16
31977: PUSH
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 255
31987: ST_TO_ADDR
// x := GetX ( tower ) ;
31988: LD_ADDR_VAR 0 10
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 250
32002: ST_TO_ADDR
// y := GetY ( tower ) ;
32003: LD_ADDR_VAR 0 11
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 251
32017: ST_TO_ADDR
// if not x or not y then
32018: LD_VAR 0 10
32022: NOT
32023: PUSH
32024: LD_VAR 0 11
32028: NOT
32029: OR
32030: IFFALSE 32034
// exit ;
32032: GO 33067
// weapon := 0 ;
32034: LD_ADDR_VAR 0 18
32038: PUSH
32039: LD_INT 0
32041: ST_TO_ADDR
// fac_list := [ ] ;
32042: LD_ADDR_VAR 0 17
32046: PUSH
32047: EMPTY
32048: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32049: LD_ADDR_VAR 0 6
32053: PUSH
32054: LD_VAR 0 1
32058: PPUSH
32059: CALL_OW 274
32063: PPUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_INT 0
32071: PPUSH
32072: CALL 29638 0 3
32076: PPUSH
32077: LD_INT 30
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 72
32091: ST_TO_ADDR
// if not factories then
32092: LD_VAR 0 6
32096: NOT
32097: IFFALSE 32101
// exit ;
32099: GO 33067
// for i in factories do
32101: LD_ADDR_VAR 0 8
32105: PUSH
32106: LD_VAR 0 6
32110: PUSH
32111: FOR_IN
32112: IFFALSE 32137
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32114: LD_ADDR_VAR 0 17
32118: PUSH
32119: LD_VAR 0 17
32123: PUSH
32124: LD_VAR 0 8
32128: PPUSH
32129: CALL_OW 478
32133: UNION
32134: ST_TO_ADDR
32135: GO 32111
32137: POP
32138: POP
// if not fac_list then
32139: LD_VAR 0 17
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 33067
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32148: LD_ADDR_VAR 0 5
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: LD_INT 9
32161: PUSH
32162: LD_INT 10
32164: PUSH
32165: LD_INT 6
32167: PUSH
32168: LD_INT 7
32170: PUSH
32171: LD_INT 11
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 27
32185: PUSH
32186: LD_INT 28
32188: PUSH
32189: LD_INT 26
32191: PUSH
32192: LD_INT 30
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 43
32203: PUSH
32204: LD_INT 44
32206: PUSH
32207: LD_INT 46
32209: PUSH
32210: LD_INT 45
32212: PUSH
32213: LD_INT 47
32215: PUSH
32216: LD_INT 49
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: PUSH
32232: LD_VAR 0 12
32236: ARRAY
32237: ST_TO_ADDR
// list := list isect fac_list ;
32238: LD_ADDR_VAR 0 5
32242: PUSH
32243: LD_VAR 0 5
32247: PUSH
32248: LD_VAR 0 17
32252: ISECT
32253: ST_TO_ADDR
// if not list then
32254: LD_VAR 0 5
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 33067
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32263: LD_VAR 0 12
32267: PUSH
32268: LD_INT 3
32270: EQUAL
32271: PUSH
32272: LD_INT 49
32274: PUSH
32275: LD_VAR 0 5
32279: IN
32280: AND
32281: PUSH
32282: LD_INT 31
32284: PPUSH
32285: LD_VAR 0 16
32289: PPUSH
32290: CALL_OW 321
32294: PUSH
32295: LD_INT 2
32297: EQUAL
32298: AND
32299: IFFALSE 32359
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32301: LD_INT 22
32303: PUSH
32304: LD_VAR 0 16
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 35
32315: PUSH
32316: LD_INT 49
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 91
32325: PUSH
32326: LD_VAR 0 1
32330: PUSH
32331: LD_INT 10
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PPUSH
32344: CALL_OW 69
32348: NOT
32349: IFFALSE 32359
// weapon := ru_time_lapser ;
32351: LD_ADDR_VAR 0 18
32355: PUSH
32356: LD_INT 49
32358: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32359: LD_VAR 0 12
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: IN
32374: PUSH
32375: LD_INT 11
32377: PUSH
32378: LD_VAR 0 5
32382: IN
32383: PUSH
32384: LD_INT 30
32386: PUSH
32387: LD_VAR 0 5
32391: IN
32392: OR
32393: AND
32394: PUSH
32395: LD_INT 6
32397: PPUSH
32398: LD_VAR 0 16
32402: PPUSH
32403: CALL_OW 321
32407: PUSH
32408: LD_INT 2
32410: EQUAL
32411: AND
32412: IFFALSE 32577
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32414: LD_INT 22
32416: PUSH
32417: LD_VAR 0 16
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 35
32431: PUSH
32432: LD_INT 11
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 35
32441: PUSH
32442: LD_INT 30
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 91
32456: PUSH
32457: LD_VAR 0 1
32461: PUSH
32462: LD_INT 18
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: PPUSH
32475: CALL_OW 69
32479: NOT
32480: PUSH
32481: LD_INT 22
32483: PUSH
32484: LD_VAR 0 16
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 30
32498: PUSH
32499: LD_INT 32
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 30
32508: PUSH
32509: LD_INT 33
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 91
32523: PUSH
32524: LD_VAR 0 1
32528: PUSH
32529: LD_INT 12
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: PPUSH
32545: CALL_OW 69
32549: PUSH
32550: LD_INT 2
32552: GREATER
32553: AND
32554: IFFALSE 32577
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32556: LD_ADDR_VAR 0 18
32560: PUSH
32561: LD_INT 11
32563: PUSH
32564: LD_INT 30
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_VAR 0 12
32575: ARRAY
32576: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32577: LD_VAR 0 18
32581: NOT
32582: PUSH
32583: LD_INT 40
32585: PPUSH
32586: LD_VAR 0 16
32590: PPUSH
32591: CALL_OW 321
32595: PUSH
32596: LD_INT 2
32598: EQUAL
32599: AND
32600: PUSH
32601: LD_INT 7
32603: PUSH
32604: LD_VAR 0 5
32608: IN
32609: PUSH
32610: LD_INT 28
32612: PUSH
32613: LD_VAR 0 5
32617: IN
32618: OR
32619: PUSH
32620: LD_INT 45
32622: PUSH
32623: LD_VAR 0 5
32627: IN
32628: OR
32629: AND
32630: IFFALSE 32884
// begin hex := GetHexInfo ( x , y ) ;
32632: LD_ADDR_VAR 0 4
32636: PUSH
32637: LD_VAR 0 10
32641: PPUSH
32642: LD_VAR 0 11
32646: PPUSH
32647: CALL_OW 546
32651: ST_TO_ADDR
// if hex [ 1 ] then
32652: LD_VAR 0 4
32656: PUSH
32657: LD_INT 1
32659: ARRAY
32660: IFFALSE 32664
// exit ;
32662: GO 33067
// height := hex [ 2 ] ;
32664: LD_ADDR_VAR 0 15
32668: PUSH
32669: LD_VAR 0 4
32673: PUSH
32674: LD_INT 2
32676: ARRAY
32677: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32678: LD_ADDR_VAR 0 14
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
// for i in tmp do
32701: LD_ADDR_VAR 0 8
32705: PUSH
32706: LD_VAR 0 14
32710: PUSH
32711: FOR_IN
32712: IFFALSE 32882
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32714: LD_ADDR_VAR 0 9
32718: PUSH
32719: LD_VAR 0 10
32723: PPUSH
32724: LD_VAR 0 8
32728: PPUSH
32729: LD_INT 5
32731: PPUSH
32732: CALL_OW 272
32736: PUSH
32737: LD_VAR 0 11
32741: PPUSH
32742: LD_VAR 0 8
32746: PPUSH
32747: LD_INT 5
32749: PPUSH
32750: CALL_OW 273
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32759: LD_VAR 0 9
32763: PUSH
32764: LD_INT 1
32766: ARRAY
32767: PPUSH
32768: LD_VAR 0 9
32772: PUSH
32773: LD_INT 2
32775: ARRAY
32776: PPUSH
32777: CALL_OW 488
32781: IFFALSE 32880
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32783: LD_ADDR_VAR 0 4
32787: PUSH
32788: LD_VAR 0 9
32792: PUSH
32793: LD_INT 1
32795: ARRAY
32796: PPUSH
32797: LD_VAR 0 9
32801: PUSH
32802: LD_INT 2
32804: ARRAY
32805: PPUSH
32806: CALL_OW 546
32810: ST_TO_ADDR
// if hex [ 1 ] then
32811: LD_VAR 0 4
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: IFFALSE 32823
// continue ;
32821: GO 32711
// h := hex [ 2 ] ;
32823: LD_ADDR_VAR 0 13
32827: PUSH
32828: LD_VAR 0 4
32832: PUSH
32833: LD_INT 2
32835: ARRAY
32836: ST_TO_ADDR
// if h + 7 < height then
32837: LD_VAR 0 13
32841: PUSH
32842: LD_INT 7
32844: PLUS
32845: PUSH
32846: LD_VAR 0 15
32850: LESS
32851: IFFALSE 32880
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32853: LD_ADDR_VAR 0 18
32857: PUSH
32858: LD_INT 7
32860: PUSH
32861: LD_INT 28
32863: PUSH
32864: LD_INT 45
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: PUSH
32872: LD_VAR 0 12
32876: ARRAY
32877: ST_TO_ADDR
// break ;
32878: GO 32882
// end ; end ; end ;
32880: GO 32711
32882: POP
32883: POP
// end ; if not weapon then
32884: LD_VAR 0 18
32888: NOT
32889: IFFALSE 32949
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32891: LD_ADDR_VAR 0 5
32895: PUSH
32896: LD_VAR 0 5
32900: PUSH
32901: LD_INT 11
32903: PUSH
32904: LD_INT 30
32906: PUSH
32907: LD_INT 49
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: DIFF
32915: ST_TO_ADDR
// if not list then
32916: LD_VAR 0 5
32920: NOT
32921: IFFALSE 32925
// exit ;
32923: GO 33067
// weapon := list [ rand ( 1 , list ) ] ;
32925: LD_ADDR_VAR 0 18
32929: PUSH
32930: LD_VAR 0 5
32934: PUSH
32935: LD_INT 1
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL_OW 12
32947: ARRAY
32948: ST_TO_ADDR
// end ; if weapon then
32949: LD_VAR 0 18
32953: IFFALSE 33067
// begin tmp := CostOfWeapon ( weapon ) ;
32955: LD_ADDR_VAR 0 14
32959: PUSH
32960: LD_VAR 0 18
32964: PPUSH
32965: CALL_OW 451
32969: ST_TO_ADDR
// j := GetBase ( tower ) ;
32970: LD_ADDR_VAR 0 9
32974: PUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 274
32984: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32985: LD_VAR 0 9
32989: PPUSH
32990: LD_INT 1
32992: PPUSH
32993: CALL_OW 275
32997: PUSH
32998: LD_VAR 0 14
33002: PUSH
33003: LD_INT 1
33005: ARRAY
33006: GREATEREQUAL
33007: PUSH
33008: LD_VAR 0 9
33012: PPUSH
33013: LD_INT 2
33015: PPUSH
33016: CALL_OW 275
33020: PUSH
33021: LD_VAR 0 14
33025: PUSH
33026: LD_INT 2
33028: ARRAY
33029: GREATEREQUAL
33030: AND
33031: PUSH
33032: LD_VAR 0 9
33036: PPUSH
33037: LD_INT 3
33039: PPUSH
33040: CALL_OW 275
33044: PUSH
33045: LD_VAR 0 14
33049: PUSH
33050: LD_INT 3
33052: ARRAY
33053: GREATEREQUAL
33054: AND
33055: IFFALSE 33067
// result := weapon ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_VAR 0 18
33066: ST_TO_ADDR
// end ; end ;
33067: LD_VAR 0 3
33071: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33072: LD_INT 0
33074: PPUSH
33075: PPUSH
// result := true ;
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_INT 1
33083: ST_TO_ADDR
// if array1 = array2 then
33084: LD_VAR 0 1
33088: PUSH
33089: LD_VAR 0 2
33093: EQUAL
33094: IFFALSE 33154
// begin for i = 1 to array1 do
33096: LD_ADDR_VAR 0 4
33100: PUSH
33101: DOUBLE
33102: LD_INT 1
33104: DEC
33105: ST_TO_ADDR
33106: LD_VAR 0 1
33110: PUSH
33111: FOR_TO
33112: IFFALSE 33150
// if array1 [ i ] <> array2 [ i ] then
33114: LD_VAR 0 1
33118: PUSH
33119: LD_VAR 0 4
33123: ARRAY
33124: PUSH
33125: LD_VAR 0 2
33129: PUSH
33130: LD_VAR 0 4
33134: ARRAY
33135: NONEQUAL
33136: IFFALSE 33148
// begin result := false ;
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 0
33145: ST_TO_ADDR
// break ;
33146: GO 33150
// end ;
33148: GO 33111
33150: POP
33151: POP
// end else
33152: GO 33162
// result := false ;
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_INT 0
33161: ST_TO_ADDR
// end ;
33162: LD_VAR 0 3
33166: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33167: LD_INT 0
33169: PPUSH
33170: PPUSH
// if not array1 or not array2 then
33171: LD_VAR 0 1
33175: NOT
33176: PUSH
33177: LD_VAR 0 2
33181: NOT
33182: OR
33183: IFFALSE 33187
// exit ;
33185: GO 33251
// result := true ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 1
33194: ST_TO_ADDR
// for i = 1 to array1 do
33195: LD_ADDR_VAR 0 4
33199: PUSH
33200: DOUBLE
33201: LD_INT 1
33203: DEC
33204: ST_TO_ADDR
33205: LD_VAR 0 1
33209: PUSH
33210: FOR_TO
33211: IFFALSE 33249
// if array1 [ i ] <> array2 [ i ] then
33213: LD_VAR 0 1
33217: PUSH
33218: LD_VAR 0 4
33222: ARRAY
33223: PUSH
33224: LD_VAR 0 2
33228: PUSH
33229: LD_VAR 0 4
33233: ARRAY
33234: NONEQUAL
33235: IFFALSE 33247
// begin result := false ;
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: LD_INT 0
33244: ST_TO_ADDR
// break ;
33245: GO 33249
// end ;
33247: GO 33210
33249: POP
33250: POP
// end ;
33251: LD_VAR 0 3
33255: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33256: LD_INT 0
33258: PPUSH
33259: PPUSH
33260: PPUSH
// pom := GetBase ( fac ) ;
33261: LD_ADDR_VAR 0 5
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 274
33275: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33276: LD_ADDR_VAR 0 4
33280: PUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_INT 1
33288: ARRAY
33289: PPUSH
33290: LD_VAR 0 2
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: PPUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_INT 3
33306: ARRAY
33307: PPUSH
33308: LD_VAR 0 2
33312: PUSH
33313: LD_INT 4
33315: ARRAY
33316: PPUSH
33317: CALL_OW 449
33321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_VAR 0 5
33331: PPUSH
33332: LD_INT 1
33334: PPUSH
33335: CALL_OW 275
33339: PUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 1
33347: ARRAY
33348: GREATEREQUAL
33349: PUSH
33350: LD_VAR 0 5
33354: PPUSH
33355: LD_INT 2
33357: PPUSH
33358: CALL_OW 275
33362: PUSH
33363: LD_VAR 0 4
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: GREATEREQUAL
33372: AND
33373: PUSH
33374: LD_VAR 0 5
33378: PPUSH
33379: LD_INT 3
33381: PPUSH
33382: CALL_OW 275
33386: PUSH
33387: LD_VAR 0 4
33391: PUSH
33392: LD_INT 3
33394: ARRAY
33395: GREATEREQUAL
33396: AND
33397: ST_TO_ADDR
// end ;
33398: LD_VAR 0 3
33402: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
// pom := GetBase ( building ) ;
33409: LD_ADDR_VAR 0 3
33413: PUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: CALL_OW 274
33423: ST_TO_ADDR
// if not pom then
33424: LD_VAR 0 3
33428: NOT
33429: IFFALSE 33433
// exit ;
33431: GO 33603
// btype := GetBType ( building ) ;
33433: LD_ADDR_VAR 0 5
33437: PUSH
33438: LD_VAR 0 1
33442: PPUSH
33443: CALL_OW 266
33447: ST_TO_ADDR
// if btype = b_armoury then
33448: LD_VAR 0 5
33452: PUSH
33453: LD_INT 4
33455: EQUAL
33456: IFFALSE 33466
// btype := b_barracks ;
33458: LD_ADDR_VAR 0 5
33462: PUSH
33463: LD_INT 5
33465: ST_TO_ADDR
// if btype = b_depot then
33466: LD_VAR 0 5
33470: PUSH
33471: LD_INT 0
33473: EQUAL
33474: IFFALSE 33484
// btype := b_warehouse ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_INT 1
33483: ST_TO_ADDR
// if btype = b_workshop then
33484: LD_VAR 0 5
33488: PUSH
33489: LD_INT 2
33491: EQUAL
33492: IFFALSE 33502
// btype := b_factory ;
33494: LD_ADDR_VAR 0 5
33498: PUSH
33499: LD_INT 3
33501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33502: LD_ADDR_VAR 0 4
33506: PUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 248
33521: PPUSH
33522: CALL_OW 450
33526: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33527: LD_ADDR_VAR 0 2
33531: PUSH
33532: LD_VAR 0 3
33536: PPUSH
33537: LD_INT 1
33539: PPUSH
33540: CALL_OW 275
33544: PUSH
33545: LD_VAR 0 4
33549: PUSH
33550: LD_INT 1
33552: ARRAY
33553: GREATEREQUAL
33554: PUSH
33555: LD_VAR 0 3
33559: PPUSH
33560: LD_INT 2
33562: PPUSH
33563: CALL_OW 275
33567: PUSH
33568: LD_VAR 0 4
33572: PUSH
33573: LD_INT 2
33575: ARRAY
33576: GREATEREQUAL
33577: AND
33578: PUSH
33579: LD_VAR 0 3
33583: PPUSH
33584: LD_INT 3
33586: PPUSH
33587: CALL_OW 275
33591: PUSH
33592: LD_VAR 0 4
33596: PUSH
33597: LD_INT 3
33599: ARRAY
33600: GREATEREQUAL
33601: AND
33602: ST_TO_ADDR
// end ;
33603: LD_VAR 0 2
33607: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// pom := GetBase ( building ) ;
33613: LD_ADDR_VAR 0 4
33617: PUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 274
33627: ST_TO_ADDR
// if not pom then
33628: LD_VAR 0 4
33632: NOT
33633: IFFALSE 33637
// exit ;
33635: GO 33738
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33637: LD_ADDR_VAR 0 5
33641: PUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 1
33651: PPUSH
33652: CALL_OW 248
33656: PPUSH
33657: CALL_OW 450
33661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: LD_VAR 0 4
33671: PPUSH
33672: LD_INT 1
33674: PPUSH
33675: CALL_OW 275
33679: PUSH
33680: LD_VAR 0 5
33684: PUSH
33685: LD_INT 1
33687: ARRAY
33688: GREATEREQUAL
33689: PUSH
33690: LD_VAR 0 4
33694: PPUSH
33695: LD_INT 2
33697: PPUSH
33698: CALL_OW 275
33702: PUSH
33703: LD_VAR 0 5
33707: PUSH
33708: LD_INT 2
33710: ARRAY
33711: GREATEREQUAL
33712: AND
33713: PUSH
33714: LD_VAR 0 4
33718: PPUSH
33719: LD_INT 3
33721: PPUSH
33722: CALL_OW 275
33726: PUSH
33727: LD_VAR 0 5
33731: PUSH
33732: LD_INT 3
33734: ARRAY
33735: GREATEREQUAL
33736: AND
33737: ST_TO_ADDR
// end ;
33738: LD_VAR 0 3
33742: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33743: LD_INT 0
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
33751: PPUSH
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
// result := false ;
33756: LD_ADDR_VAR 0 8
33760: PUSH
33761: LD_INT 0
33763: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33764: LD_VAR 0 5
33768: NOT
33769: PUSH
33770: LD_VAR 0 1
33774: NOT
33775: OR
33776: PUSH
33777: LD_VAR 0 2
33781: NOT
33782: OR
33783: PUSH
33784: LD_VAR 0 3
33788: NOT
33789: OR
33790: IFFALSE 33794
// exit ;
33792: GO 34608
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33794: LD_ADDR_VAR 0 14
33798: PUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_VAR 0 2
33808: PPUSH
33809: LD_VAR 0 3
33813: PPUSH
33814: LD_VAR 0 4
33818: PPUSH
33819: LD_VAR 0 5
33823: PUSH
33824: LD_INT 1
33826: ARRAY
33827: PPUSH
33828: CALL_OW 248
33832: PPUSH
33833: LD_INT 0
33835: PPUSH
33836: CALL 35861 0 6
33840: ST_TO_ADDR
// if not hexes then
33841: LD_VAR 0 14
33845: NOT
33846: IFFALSE 33850
// exit ;
33848: GO 34608
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33850: LD_ADDR_VAR 0 17
33854: PUSH
33855: LD_VAR 0 5
33859: PPUSH
33860: LD_INT 22
33862: PUSH
33863: LD_VAR 0 13
33867: PPUSH
33868: CALL_OW 255
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 30
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 30
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PPUSH
33909: CALL_OW 72
33913: ST_TO_ADDR
// for i = 1 to hexes do
33914: LD_ADDR_VAR 0 9
33918: PUSH
33919: DOUBLE
33920: LD_INT 1
33922: DEC
33923: ST_TO_ADDR
33924: LD_VAR 0 14
33928: PUSH
33929: FOR_TO
33930: IFFALSE 34606
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33932: LD_ADDR_VAR 0 13
33936: PUSH
33937: LD_VAR 0 14
33941: PUSH
33942: LD_VAR 0 9
33946: ARRAY
33947: PUSH
33948: LD_INT 1
33950: ARRAY
33951: PPUSH
33952: LD_VAR 0 14
33956: PUSH
33957: LD_VAR 0 9
33961: ARRAY
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PPUSH
33967: CALL_OW 428
33971: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33972: LD_VAR 0 14
33976: PUSH
33977: LD_VAR 0 9
33981: ARRAY
33982: PUSH
33983: LD_INT 1
33985: ARRAY
33986: PPUSH
33987: LD_VAR 0 14
33991: PUSH
33992: LD_VAR 0 9
33996: ARRAY
33997: PUSH
33998: LD_INT 2
34000: ARRAY
34001: PPUSH
34002: CALL_OW 351
34006: PUSH
34007: LD_VAR 0 14
34011: PUSH
34012: LD_VAR 0 9
34016: ARRAY
34017: PUSH
34018: LD_INT 1
34020: ARRAY
34021: PPUSH
34022: LD_VAR 0 14
34026: PUSH
34027: LD_VAR 0 9
34031: ARRAY
34032: PUSH
34033: LD_INT 2
34035: ARRAY
34036: PPUSH
34037: CALL_OW 488
34041: NOT
34042: OR
34043: PUSH
34044: LD_VAR 0 13
34048: PPUSH
34049: CALL_OW 247
34053: PUSH
34054: LD_INT 3
34056: EQUAL
34057: OR
34058: IFFALSE 34064
// exit ;
34060: POP
34061: POP
34062: GO 34608
// if not tmp then
34064: LD_VAR 0 13
34068: NOT
34069: IFFALSE 34073
// continue ;
34071: GO 33929
// result := true ;
34073: LD_ADDR_VAR 0 8
34077: PUSH
34078: LD_INT 1
34080: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34081: LD_VAR 0 6
34085: PUSH
34086: LD_VAR 0 13
34090: PPUSH
34091: CALL_OW 247
34095: PUSH
34096: LD_INT 2
34098: EQUAL
34099: AND
34100: PUSH
34101: LD_VAR 0 13
34105: PPUSH
34106: CALL_OW 263
34110: PUSH
34111: LD_INT 1
34113: EQUAL
34114: AND
34115: IFFALSE 34279
// begin if IsDrivenBy ( tmp ) then
34117: LD_VAR 0 13
34121: PPUSH
34122: CALL_OW 311
34126: IFFALSE 34130
// continue ;
34128: GO 33929
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34130: LD_VAR 0 6
34134: PPUSH
34135: LD_INT 3
34137: PUSH
34138: LD_INT 60
34140: PUSH
34141: EMPTY
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 3
34150: PUSH
34151: LD_INT 55
34153: PUSH
34154: EMPTY
34155: LIST
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PPUSH
34165: CALL_OW 72
34169: IFFALSE 34277
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34171: LD_ADDR_VAR 0 18
34175: PUSH
34176: LD_VAR 0 6
34180: PPUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 60
34186: PUSH
34187: EMPTY
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 55
34199: PUSH
34200: EMPTY
34201: LIST
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PPUSH
34211: CALL_OW 72
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: ST_TO_ADDR
// if IsInUnit ( driver ) then
34220: LD_VAR 0 18
34224: PPUSH
34225: CALL_OW 310
34229: IFFALSE 34240
// ComExit ( driver ) ;
34231: LD_VAR 0 18
34235: PPUSH
34236: CALL 59662 0 1
// AddComEnterUnit ( driver , tmp ) ;
34240: LD_VAR 0 18
34244: PPUSH
34245: LD_VAR 0 13
34249: PPUSH
34250: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34254: LD_VAR 0 18
34258: PPUSH
34259: LD_VAR 0 7
34263: PPUSH
34264: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34268: LD_VAR 0 18
34272: PPUSH
34273: CALL_OW 181
// end ; continue ;
34277: GO 33929
// end ; if not cleaners or not tmp in cleaners then
34279: LD_VAR 0 6
34283: NOT
34284: PUSH
34285: LD_VAR 0 13
34289: PUSH
34290: LD_VAR 0 6
34294: IN
34295: NOT
34296: OR
34297: IFFALSE 34604
// begin if dep then
34299: LD_VAR 0 17
34303: IFFALSE 34439
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34305: LD_ADDR_VAR 0 16
34309: PUSH
34310: LD_VAR 0 17
34314: PUSH
34315: LD_INT 1
34317: ARRAY
34318: PPUSH
34319: CALL_OW 250
34323: PPUSH
34324: LD_VAR 0 17
34328: PUSH
34329: LD_INT 1
34331: ARRAY
34332: PPUSH
34333: CALL_OW 254
34337: PPUSH
34338: LD_INT 5
34340: PPUSH
34341: CALL_OW 272
34345: PUSH
34346: LD_VAR 0 17
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: CALL_OW 251
34359: PPUSH
34360: LD_VAR 0 17
34364: PUSH
34365: LD_INT 1
34367: ARRAY
34368: PPUSH
34369: CALL_OW 254
34373: PPUSH
34374: LD_INT 5
34376: PPUSH
34377: CALL_OW 273
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34386: LD_VAR 0 16
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PPUSH
34395: LD_VAR 0 16
34399: PUSH
34400: LD_INT 2
34402: ARRAY
34403: PPUSH
34404: CALL_OW 488
34408: IFFALSE 34439
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34410: LD_VAR 0 13
34414: PPUSH
34415: LD_VAR 0 16
34419: PUSH
34420: LD_INT 1
34422: ARRAY
34423: PPUSH
34424: LD_VAR 0 16
34428: PUSH
34429: LD_INT 2
34431: ARRAY
34432: PPUSH
34433: CALL_OW 111
// continue ;
34437: GO 33929
// end ; end ; r := GetDir ( tmp ) ;
34439: LD_ADDR_VAR 0 15
34443: PUSH
34444: LD_VAR 0 13
34448: PPUSH
34449: CALL_OW 254
34453: ST_TO_ADDR
// if r = 5 then
34454: LD_VAR 0 15
34458: PUSH
34459: LD_INT 5
34461: EQUAL
34462: IFFALSE 34472
// r := 0 ;
34464: LD_ADDR_VAR 0 15
34468: PUSH
34469: LD_INT 0
34471: ST_TO_ADDR
// for j = r to 5 do
34472: LD_ADDR_VAR 0 10
34476: PUSH
34477: DOUBLE
34478: LD_VAR 0 15
34482: DEC
34483: ST_TO_ADDR
34484: LD_INT 5
34486: PUSH
34487: FOR_TO
34488: IFFALSE 34602
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34490: LD_ADDR_VAR 0 11
34494: PUSH
34495: LD_VAR 0 13
34499: PPUSH
34500: CALL_OW 250
34504: PPUSH
34505: LD_VAR 0 10
34509: PPUSH
34510: LD_INT 2
34512: PPUSH
34513: CALL_OW 272
34517: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34518: LD_ADDR_VAR 0 12
34522: PUSH
34523: LD_VAR 0 13
34527: PPUSH
34528: CALL_OW 251
34532: PPUSH
34533: LD_VAR 0 10
34537: PPUSH
34538: LD_INT 2
34540: PPUSH
34541: CALL_OW 273
34545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34546: LD_VAR 0 11
34550: PPUSH
34551: LD_VAR 0 12
34555: PPUSH
34556: CALL_OW 488
34560: PUSH
34561: LD_VAR 0 11
34565: PPUSH
34566: LD_VAR 0 12
34570: PPUSH
34571: CALL_OW 428
34575: NOT
34576: AND
34577: IFFALSE 34600
// begin ComMoveXY ( tmp , _x , _y ) ;
34579: LD_VAR 0 13
34583: PPUSH
34584: LD_VAR 0 11
34588: PPUSH
34589: LD_VAR 0 12
34593: PPUSH
34594: CALL_OW 111
// break ;
34598: GO 34602
// end ; end ;
34600: GO 34487
34602: POP
34603: POP
// end ; end ;
34604: GO 33929
34606: POP
34607: POP
// end ;
34608: LD_VAR 0 8
34612: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34613: LD_INT 0
34615: PPUSH
// result := true ;
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 1
34623: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34624: LD_VAR 0 2
34628: PUSH
34629: LD_INT 24
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34643
34635: LD_INT 33
34637: DOUBLE
34638: EQUAL
34639: IFTRUE 34643
34641: GO 34668
34643: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34644: LD_ADDR_VAR 0 3
34648: PUSH
34649: LD_INT 32
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 321
34661: PUSH
34662: LD_INT 2
34664: EQUAL
34665: ST_TO_ADDR
34666: GO 34984
34668: LD_INT 20
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34676
34674: GO 34701
34676: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_INT 6
34684: PPUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 321
34694: PUSH
34695: LD_INT 2
34697: EQUAL
34698: ST_TO_ADDR
34699: GO 34984
34701: LD_INT 22
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34715
34707: LD_INT 36
34709: DOUBLE
34710: EQUAL
34711: IFTRUE 34715
34713: GO 34740
34715: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_INT 15
34723: PPUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 321
34733: PUSH
34734: LD_INT 2
34736: EQUAL
34737: ST_TO_ADDR
34738: GO 34984
34740: LD_INT 30
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34773
34748: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34749: LD_ADDR_VAR 0 3
34753: PUSH
34754: LD_INT 20
34756: PPUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 321
34766: PUSH
34767: LD_INT 2
34769: EQUAL
34770: ST_TO_ADDR
34771: GO 34984
34773: LD_INT 28
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34787
34779: LD_INT 21
34781: DOUBLE
34782: EQUAL
34783: IFTRUE 34787
34785: GO 34812
34787: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34788: LD_ADDR_VAR 0 3
34792: PUSH
34793: LD_INT 21
34795: PPUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 321
34805: PUSH
34806: LD_INT 2
34808: EQUAL
34809: ST_TO_ADDR
34810: GO 34984
34812: LD_INT 16
34814: DOUBLE
34815: EQUAL
34816: IFTRUE 34820
34818: GO 34845
34820: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_INT 84
34828: PPUSH
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL_OW 321
34838: PUSH
34839: LD_INT 2
34841: EQUAL
34842: ST_TO_ADDR
34843: GO 34984
34845: LD_INT 19
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34859
34851: LD_INT 23
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34884
34859: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34860: LD_ADDR_VAR 0 3
34864: PUSH
34865: LD_INT 83
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 321
34877: PUSH
34878: LD_INT 2
34880: EQUAL
34881: ST_TO_ADDR
34882: GO 34984
34884: LD_INT 17
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34917
34892: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 39
34900: PPUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 321
34910: PUSH
34911: LD_INT 2
34913: EQUAL
34914: ST_TO_ADDR
34915: GO 34984
34917: LD_INT 18
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34950
34925: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 40
34933: PPUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 321
34943: PUSH
34944: LD_INT 2
34946: EQUAL
34947: ST_TO_ADDR
34948: GO 34984
34950: LD_INT 27
34952: DOUBLE
34953: EQUAL
34954: IFTRUE 34958
34956: GO 34983
34958: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34959: LD_ADDR_VAR 0 3
34963: PUSH
34964: LD_INT 35
34966: PPUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: CALL_OW 321
34976: PUSH
34977: LD_INT 2
34979: EQUAL
34980: ST_TO_ADDR
34981: GO 34984
34983: POP
// end ;
34984: LD_VAR 0 3
34988: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34989: LD_INT 0
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
// result := false ;
35002: LD_ADDR_VAR 0 6
35006: PUSH
35007: LD_INT 0
35009: ST_TO_ADDR
// if btype = b_depot then
35010: LD_VAR 0 2
35014: PUSH
35015: LD_INT 0
35017: EQUAL
35018: IFFALSE 35030
// begin result := true ;
35020: LD_ADDR_VAR 0 6
35024: PUSH
35025: LD_INT 1
35027: ST_TO_ADDR
// exit ;
35028: GO 35856
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35030: LD_VAR 0 1
35034: NOT
35035: PUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 266
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: IN
35056: NOT
35057: OR
35058: PUSH
35059: LD_VAR 0 2
35063: NOT
35064: OR
35065: PUSH
35066: LD_VAR 0 5
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: LD_INT 4
35085: PUSH
35086: LD_INT 5
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: IN
35097: NOT
35098: OR
35099: PUSH
35100: LD_VAR 0 3
35104: PPUSH
35105: LD_VAR 0 4
35109: PPUSH
35110: CALL_OW 488
35114: NOT
35115: OR
35116: IFFALSE 35120
// exit ;
35118: GO 35856
// side := GetSide ( depot ) ;
35120: LD_ADDR_VAR 0 9
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 255
35134: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35135: LD_VAR 0 9
35139: PPUSH
35140: LD_VAR 0 2
35144: PPUSH
35145: CALL 34613 0 2
35149: NOT
35150: IFFALSE 35154
// exit ;
35152: GO 35856
// pom := GetBase ( depot ) ;
35154: LD_ADDR_VAR 0 10
35158: PUSH
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 274
35168: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35169: LD_ADDR_VAR 0 11
35173: PUSH
35174: LD_VAR 0 2
35178: PPUSH
35179: LD_VAR 0 1
35183: PPUSH
35184: CALL_OW 248
35188: PPUSH
35189: CALL_OW 450
35193: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35194: LD_VAR 0 10
35198: PPUSH
35199: LD_INT 1
35201: PPUSH
35202: CALL_OW 275
35206: PUSH
35207: LD_VAR 0 11
35211: PUSH
35212: LD_INT 1
35214: ARRAY
35215: GREATEREQUAL
35216: PUSH
35217: LD_VAR 0 10
35221: PPUSH
35222: LD_INT 2
35224: PPUSH
35225: CALL_OW 275
35229: PUSH
35230: LD_VAR 0 11
35234: PUSH
35235: LD_INT 2
35237: ARRAY
35238: GREATEREQUAL
35239: AND
35240: PUSH
35241: LD_VAR 0 10
35245: PPUSH
35246: LD_INT 3
35248: PPUSH
35249: CALL_OW 275
35253: PUSH
35254: LD_VAR 0 11
35258: PUSH
35259: LD_INT 3
35261: ARRAY
35262: GREATEREQUAL
35263: AND
35264: NOT
35265: IFFALSE 35269
// exit ;
35267: GO 35856
// if GetBType ( depot ) = b_depot then
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 266
35278: PUSH
35279: LD_INT 0
35281: EQUAL
35282: IFFALSE 35294
// dist := 28 else
35284: LD_ADDR_VAR 0 14
35288: PUSH
35289: LD_INT 28
35291: ST_TO_ADDR
35292: GO 35302
// dist := 36 ;
35294: LD_ADDR_VAR 0 14
35298: PUSH
35299: LD_INT 36
35301: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_VAR 0 3
35311: PPUSH
35312: LD_VAR 0 4
35316: PPUSH
35317: CALL_OW 297
35321: PUSH
35322: LD_VAR 0 14
35326: GREATER
35327: IFFALSE 35331
// exit ;
35329: GO 35856
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35331: LD_ADDR_VAR 0 12
35335: PUSH
35336: LD_VAR 0 2
35340: PPUSH
35341: LD_VAR 0 3
35345: PPUSH
35346: LD_VAR 0 4
35350: PPUSH
35351: LD_VAR 0 5
35355: PPUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: CALL_OW 248
35365: PPUSH
35366: LD_INT 0
35368: PPUSH
35369: CALL 35861 0 6
35373: ST_TO_ADDR
// if not hexes then
35374: LD_VAR 0 12
35378: NOT
35379: IFFALSE 35383
// exit ;
35381: GO 35856
// hex := GetHexInfo ( x , y ) ;
35383: LD_ADDR_VAR 0 15
35387: PUSH
35388: LD_VAR 0 3
35392: PPUSH
35393: LD_VAR 0 4
35397: PPUSH
35398: CALL_OW 546
35402: ST_TO_ADDR
// if hex [ 1 ] then
35403: LD_VAR 0 15
35407: PUSH
35408: LD_INT 1
35410: ARRAY
35411: IFFALSE 35415
// exit ;
35413: GO 35856
// height := hex [ 2 ] ;
35415: LD_ADDR_VAR 0 13
35419: PUSH
35420: LD_VAR 0 15
35424: PUSH
35425: LD_INT 2
35427: ARRAY
35428: ST_TO_ADDR
// for i = 1 to hexes do
35429: LD_ADDR_VAR 0 7
35433: PUSH
35434: DOUBLE
35435: LD_INT 1
35437: DEC
35438: ST_TO_ADDR
35439: LD_VAR 0 12
35443: PUSH
35444: FOR_TO
35445: IFFALSE 35775
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35447: LD_VAR 0 12
35451: PUSH
35452: LD_VAR 0 7
35456: ARRAY
35457: PUSH
35458: LD_INT 1
35460: ARRAY
35461: PPUSH
35462: LD_VAR 0 12
35466: PUSH
35467: LD_VAR 0 7
35471: ARRAY
35472: PUSH
35473: LD_INT 2
35475: ARRAY
35476: PPUSH
35477: CALL_OW 488
35481: NOT
35482: PUSH
35483: LD_VAR 0 12
35487: PUSH
35488: LD_VAR 0 7
35492: ARRAY
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: PPUSH
35498: LD_VAR 0 12
35502: PUSH
35503: LD_VAR 0 7
35507: ARRAY
35508: PUSH
35509: LD_INT 2
35511: ARRAY
35512: PPUSH
35513: CALL_OW 428
35517: PUSH
35518: LD_INT 0
35520: GREATER
35521: OR
35522: PUSH
35523: LD_VAR 0 12
35527: PUSH
35528: LD_VAR 0 7
35532: ARRAY
35533: PUSH
35534: LD_INT 1
35536: ARRAY
35537: PPUSH
35538: LD_VAR 0 12
35542: PUSH
35543: LD_VAR 0 7
35547: ARRAY
35548: PUSH
35549: LD_INT 2
35551: ARRAY
35552: PPUSH
35553: CALL_OW 351
35557: OR
35558: IFFALSE 35564
// exit ;
35560: POP
35561: POP
35562: GO 35856
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35564: LD_ADDR_VAR 0 8
35568: PUSH
35569: LD_VAR 0 12
35573: PUSH
35574: LD_VAR 0 7
35578: ARRAY
35579: PUSH
35580: LD_INT 1
35582: ARRAY
35583: PPUSH
35584: LD_VAR 0 12
35588: PUSH
35589: LD_VAR 0 7
35593: ARRAY
35594: PUSH
35595: LD_INT 2
35597: ARRAY
35598: PPUSH
35599: CALL_OW 546
35603: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35604: LD_VAR 0 8
35608: PUSH
35609: LD_INT 1
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 8
35617: PUSH
35618: LD_INT 2
35620: ARRAY
35621: PUSH
35622: LD_VAR 0 13
35626: PUSH
35627: LD_INT 2
35629: PLUS
35630: GREATER
35631: OR
35632: PUSH
35633: LD_VAR 0 8
35637: PUSH
35638: LD_INT 2
35640: ARRAY
35641: PUSH
35642: LD_VAR 0 13
35646: PUSH
35647: LD_INT 2
35649: MINUS
35650: LESS
35651: OR
35652: PUSH
35653: LD_VAR 0 8
35657: PUSH
35658: LD_INT 3
35660: ARRAY
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 8
35667: PUSH
35668: LD_INT 9
35670: PUSH
35671: LD_INT 10
35673: PUSH
35674: LD_INT 11
35676: PUSH
35677: LD_INT 12
35679: PUSH
35680: LD_INT 13
35682: PUSH
35683: LD_INT 16
35685: PUSH
35686: LD_INT 17
35688: PUSH
35689: LD_INT 18
35691: PUSH
35692: LD_INT 19
35694: PUSH
35695: LD_INT 20
35697: PUSH
35698: LD_INT 21
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: IN
35716: NOT
35717: OR
35718: PUSH
35719: LD_VAR 0 8
35723: PUSH
35724: LD_INT 5
35726: ARRAY
35727: NOT
35728: OR
35729: PUSH
35730: LD_VAR 0 8
35734: PUSH
35735: LD_INT 6
35737: ARRAY
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 7
35747: PUSH
35748: LD_INT 9
35750: PUSH
35751: LD_INT 10
35753: PUSH
35754: LD_INT 11
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: IN
35765: NOT
35766: OR
35767: IFFALSE 35773
// exit ;
35769: POP
35770: POP
35771: GO 35856
// end ;
35773: GO 35444
35775: POP
35776: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35777: LD_VAR 0 9
35781: PPUSH
35782: LD_VAR 0 3
35786: PPUSH
35787: LD_VAR 0 4
35791: PPUSH
35792: LD_INT 20
35794: PPUSH
35795: CALL 27779 0 4
35799: PUSH
35800: LD_INT 4
35802: ARRAY
35803: IFFALSE 35807
// exit ;
35805: GO 35856
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35807: LD_VAR 0 2
35811: PUSH
35812: LD_INT 29
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: IN
35822: PUSH
35823: LD_VAR 0 3
35827: PPUSH
35828: LD_VAR 0 4
35832: PPUSH
35833: LD_VAR 0 9
35837: PPUSH
35838: CALL_OW 440
35842: NOT
35843: AND
35844: IFFALSE 35848
// exit ;
35846: GO 35856
// result := true ;
35848: LD_ADDR_VAR 0 6
35852: PUSH
35853: LD_INT 1
35855: ST_TO_ADDR
// end ;
35856: LD_VAR 0 6
35860: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35861: LD_INT 0
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
35906: PPUSH
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
35920: PPUSH
// result = [ ] ;
35921: LD_ADDR_VAR 0 7
35925: PUSH
35926: EMPTY
35927: ST_TO_ADDR
// temp_list = [ ] ;
35928: LD_ADDR_VAR 0 9
35932: PUSH
35933: EMPTY
35934: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35935: LD_VAR 0 4
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: LD_INT 4
35954: PUSH
35955: LD_INT 5
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: IN
35966: NOT
35967: PUSH
35968: LD_VAR 0 1
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: IN
35983: PUSH
35984: LD_VAR 0 5
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: IN
36003: NOT
36004: AND
36005: OR
36006: IFFALSE 36010
// exit ;
36008: GO 54401
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36010: LD_VAR 0 1
36014: PUSH
36015: LD_INT 6
36017: PUSH
36018: LD_INT 7
36020: PUSH
36021: LD_INT 8
36023: PUSH
36024: LD_INT 13
36026: PUSH
36027: LD_INT 12
36029: PUSH
36030: LD_INT 15
36032: PUSH
36033: LD_INT 11
36035: PUSH
36036: LD_INT 14
36038: PUSH
36039: LD_INT 10
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: IN
36053: IFFALSE 36063
// btype = b_lab ;
36055: LD_ADDR_VAR 0 1
36059: PUSH
36060: LD_INT 6
36062: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36063: LD_VAR 0 6
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: IN
36082: NOT
36083: PUSH
36084: LD_VAR 0 1
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: LD_INT 6
36103: PUSH
36104: LD_INT 36
36106: PUSH
36107: LD_INT 4
36109: PUSH
36110: LD_INT 5
36112: PUSH
36113: LD_INT 31
36115: PUSH
36116: LD_INT 32
36118: PUSH
36119: LD_INT 33
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: IN
36135: NOT
36136: PUSH
36137: LD_VAR 0 6
36141: PUSH
36142: LD_INT 1
36144: EQUAL
36145: AND
36146: OR
36147: PUSH
36148: LD_VAR 0 1
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: IN
36163: NOT
36164: PUSH
36165: LD_VAR 0 6
36169: PUSH
36170: LD_INT 2
36172: EQUAL
36173: AND
36174: OR
36175: IFFALSE 36185
// mode = 0 ;
36177: LD_ADDR_VAR 0 6
36181: PUSH
36182: LD_INT 0
36184: ST_TO_ADDR
// case mode of 0 :
36185: LD_VAR 0 6
36189: PUSH
36190: LD_INT 0
36192: DOUBLE
36193: EQUAL
36194: IFTRUE 36198
36196: GO 47651
36198: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36199: LD_ADDR_VAR 0 11
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36392: LD_ADDR_VAR 0 12
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36588: LD_ADDR_VAR 0 13
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: LD_INT 3
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: LD_INT 2
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 3
36759: NEG
36760: PUSH
36761: LD_INT 3
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36787: LD_ADDR_VAR 0 14
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: LD_INT 3
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 3
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36983: LD_ADDR_VAR 0 15
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: NEG
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 3
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 3
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37176: LD_ADDR_VAR 0 16
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 3
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 3
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37369: LD_ADDR_VAR 0 17
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37599: LD_ADDR_VAR 0 18
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37829: LD_ADDR_VAR 0 19
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 2
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38059: LD_ADDR_VAR 0 20
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38289: LD_ADDR_VAR 0 21
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 2
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38519: LD_ADDR_VAR 0 22
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 2
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38749: LD_ADDR_VAR 0 23
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 3
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 3
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39029: LD_ADDR_VAR 0 24
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: NEG
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39305: LD_ADDR_VAR 0 25
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 3
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39579: LD_ADDR_VAR 0 26
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39855: LD_ADDR_VAR 0 27
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40135: LD_ADDR_VAR 0 28
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 3
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: NEG
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40417: LD_ADDR_VAR 0 29
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 3
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40696: LD_ADDR_VAR 0 30
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: NEG
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 3
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 3
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40974: LD_ADDR_VAR 0 31
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 3
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41252: LD_ADDR_VAR 0 32
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41530: LD_ADDR_VAR 0 33
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: LD_INT 3
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41809: LD_ADDR_VAR 0 34
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42089: LD_ADDR_VAR 0 35
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42201: LD_ADDR_VAR 0 36
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42313: LD_ADDR_VAR 0 37
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42425: LD_ADDR_VAR 0 38
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42537: LD_ADDR_VAR 0 39
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42649: LD_ADDR_VAR 0 40
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42761: LD_ADDR_VAR 0 41
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 3
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 3
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43111: LD_ADDR_VAR 0 42
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 3
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 3
43420: NEG
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43461: LD_ADDR_VAR 0 43
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 3
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 3
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 3
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43809: LD_ADDR_VAR 0 44
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 3
44118: NEG
44119: PUSH
44120: LD_INT 3
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44159: LD_ADDR_VAR 0 45
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 3
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 3
44468: NEG
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44509: LD_ADDR_VAR 0 46
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44857: LD_ADDR_VAR 0 47
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45008: LD_ADDR_VAR 0 48
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45155: LD_ADDR_VAR 0 49
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45299: LD_ADDR_VAR 0 50
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45443: LD_ADDR_VAR 0 51
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45590: LD_ADDR_VAR 0 52
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45741: LD_ADDR_VAR 0 53
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45971: LD_ADDR_VAR 0 54
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46201: LD_ADDR_VAR 0 55
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46431: LD_ADDR_VAR 0 56
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46661: LD_ADDR_VAR 0 57
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46891: LD_ADDR_VAR 0 58
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47121: LD_ADDR_VAR 0 59
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47209: LD_ADDR_VAR 0 60
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47297: LD_ADDR_VAR 0 61
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47385: LD_ADDR_VAR 0 62
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47473: LD_ADDR_VAR 0 63
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47561: LD_ADDR_VAR 0 64
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// end ; 1 :
47649: GO 53546
47651: LD_INT 1
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47659
47657: GO 50282
47659: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47660: LD_ADDR_VAR 0 11
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47704: LD_ADDR_VAR 0 12
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47745: LD_ADDR_VAR 0 13
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47785: LD_ADDR_VAR 0 14
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47826: LD_ADDR_VAR 0 15
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47870: LD_ADDR_VAR 0 16
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47916: LD_ADDR_VAR 0 17
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47960: LD_ADDR_VAR 0 18
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48001: LD_ADDR_VAR 0 19
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48041: LD_ADDR_VAR 0 20
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48082: LD_ADDR_VAR 0 21
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48126: LD_ADDR_VAR 0 22
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48172: LD_ADDR_VAR 0 23
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48216: LD_ADDR_VAR 0 24
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 4
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48257: LD_ADDR_VAR 0 25
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 4
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 4
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48297: LD_ADDR_VAR 0 26
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 4
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48338: LD_ADDR_VAR 0 27
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48382: LD_ADDR_VAR 0 28
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: LD_INT 4
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: NEG
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48428: LD_ADDR_VAR 0 29
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 4
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 4
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 3
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 5
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 5
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 4
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 6
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 6
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 5
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48583: LD_ADDR_VAR 0 30
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 3
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 4
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 5
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 5
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 5
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 6
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 6
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48726: LD_ADDR_VAR 0 31
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 4
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 4
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: LD_INT 4
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 5
48793: PUSH
48794: LD_INT 4
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 5
48803: PUSH
48804: LD_INT 5
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 4
48813: PUSH
48814: LD_INT 5
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 6
48823: PUSH
48824: LD_INT 5
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 6
48833: PUSH
48834: LD_INT 6
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: LD_INT 6
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48865: LD_ADDR_VAR 0 32
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 4
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 4
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 5
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 5
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 6
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 6
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 5
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49008: LD_ADDR_VAR 0 33
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 3
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 4
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 4
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 5
49094: NEG
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 5
49105: NEG
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 5
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 6
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 6
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49163: LD_ADDR_VAR 0 34
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: LD_INT 4
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 4
49218: NEG
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 4
49230: NEG
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 4
49242: NEG
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 5
49254: NEG
49255: PUSH
49256: LD_INT 4
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 5
49266: NEG
49267: PUSH
49268: LD_INT 5
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 5
49278: NEG
49279: PUSH
49280: LD_INT 6
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 6
49290: NEG
49291: PUSH
49292: LD_INT 5
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 6
49302: NEG
49303: PUSH
49304: LD_INT 6
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49326: LD_ADDR_VAR 0 41
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49370: LD_ADDR_VAR 0 42
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49411: LD_ADDR_VAR 0 43
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49451: LD_ADDR_VAR 0 44
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49492: LD_ADDR_VAR 0 45
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49536: LD_ADDR_VAR 0 46
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49582: LD_ADDR_VAR 0 47
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 48
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49646: LD_ADDR_VAR 0 49
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49675: LD_ADDR_VAR 0 50
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49704: LD_ADDR_VAR 0 51
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49735: LD_ADDR_VAR 0 52
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49768: LD_ADDR_VAR 0 53
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 3
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49812: LD_ADDR_VAR 0 54
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49853: LD_ADDR_VAR 0 55
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49893: LD_ADDR_VAR 0 56
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49934: LD_ADDR_VAR 0 57
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49978: LD_ADDR_VAR 0 58
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: NEG
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50024: LD_ADDR_VAR 0 59
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50068: LD_ADDR_VAR 0 60
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50109: LD_ADDR_VAR 0 61
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50149: LD_ADDR_VAR 0 62
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50190: LD_ADDR_VAR 0 63
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50234: LD_ADDR_VAR 0 64
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// end ; 2 :
50280: GO 53546
50282: LD_INT 2
50284: DOUBLE
50285: EQUAL
50286: IFTRUE 50290
50288: GO 53545
50290: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50291: LD_ADDR_VAR 0 29
50295: PUSH
50296: LD_INT 4
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 4
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 5
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 5
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 4
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: PUSH
50422: LD_INT 4
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 4
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 4
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 5
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 5
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 4
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 4
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 4
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: LD_INT 4
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: LD_INT 5
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: LD_INT 5
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 5
50772: NEG
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50829: LD_ADDR_VAR 0 30
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 4
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 4
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 5
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 5
50866: PUSH
50867: LD_INT 5
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: PUSH
50877: LD_INT 5
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 5
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 4
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 4
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 4
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 4
51019: NEG
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: NEG
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 4
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 5
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 5
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 4
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 4
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 4
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 5
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 4
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 4
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 5
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 3
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 5
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51376: LD_ADDR_VAR 0 31
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 4
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 5
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 5
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 4
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 5
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 4
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 4
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 4
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 5
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 4
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 4
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 4
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 5
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51926: LD_ADDR_VAR 0 32
51930: PUSH
51931: LD_INT 4
51933: NEG
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 4
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 4
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 5
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 5
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 5
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: LD_INT 4
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: NEG
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 4
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 4
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 5
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 4
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 5
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 5
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 4
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 4
52338: PUSH
52339: LD_INT 4
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 5
52358: PUSH
52359: LD_INT 4
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: LD_INT 5
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 4
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: LD_INT 4
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 5
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52473: LD_ADDR_VAR 0 33
52477: PUSH
52478: LD_INT 4
52480: NEG
52481: PUSH
52482: LD_INT 4
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 4
52492: NEG
52493: PUSH
52494: LD_INT 5
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 4
52528: NEG
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 5
52540: NEG
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 5
52552: NEG
52553: PUSH
52554: LD_INT 5
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 5
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 5
52576: NEG
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 4
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 4
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 4
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 5
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 5
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 4
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 4
52813: PUSH
52814: LD_INT 4
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: LD_INT 4
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 4
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 4
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 4
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 4
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 5
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53011: LD_ADDR_VAR 0 34
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 4
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 5
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 4
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 4
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 5
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: LD_INT 3
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 5
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 4
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: LD_INT 4
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 4
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 5
53243: PUSH
53244: LD_INT 5
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 5
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 4
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 4
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 4
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 5
53452: NEG
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 5
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// end ; end ;
53543: GO 53546
53545: POP
// case btype of b_depot , b_warehouse :
53546: LD_VAR 0 1
53550: PUSH
53551: LD_INT 0
53553: DOUBLE
53554: EQUAL
53555: IFTRUE 53565
53557: LD_INT 1
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53565
53563: GO 53766
53565: POP
// case nation of nation_american :
53566: LD_VAR 0 5
53570: PUSH
53571: LD_INT 1
53573: DOUBLE
53574: EQUAL
53575: IFTRUE 53579
53577: GO 53635
53579: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53580: LD_ADDR_VAR 0 9
53584: PUSH
53585: LD_VAR 0 11
53589: PUSH
53590: LD_VAR 0 12
53594: PUSH
53595: LD_VAR 0 13
53599: PUSH
53600: LD_VAR 0 14
53604: PUSH
53605: LD_VAR 0 15
53609: PUSH
53610: LD_VAR 0 16
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: PUSH
53623: LD_VAR 0 4
53627: PUSH
53628: LD_INT 1
53630: PLUS
53631: ARRAY
53632: ST_TO_ADDR
53633: GO 53764
53635: LD_INT 2
53637: DOUBLE
53638: EQUAL
53639: IFTRUE 53643
53641: GO 53699
53643: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53644: LD_ADDR_VAR 0 9
53648: PUSH
53649: LD_VAR 0 17
53653: PUSH
53654: LD_VAR 0 18
53658: PUSH
53659: LD_VAR 0 19
53663: PUSH
53664: LD_VAR 0 20
53668: PUSH
53669: LD_VAR 0 21
53673: PUSH
53674: LD_VAR 0 22
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 4
53691: PUSH
53692: LD_INT 1
53694: PLUS
53695: ARRAY
53696: ST_TO_ADDR
53697: GO 53764
53699: LD_INT 3
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53707
53705: GO 53763
53707: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53708: LD_ADDR_VAR 0 9
53712: PUSH
53713: LD_VAR 0 23
53717: PUSH
53718: LD_VAR 0 24
53722: PUSH
53723: LD_VAR 0 25
53727: PUSH
53728: LD_VAR 0 26
53732: PUSH
53733: LD_VAR 0 27
53737: PUSH
53738: LD_VAR 0 28
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: PUSH
53751: LD_VAR 0 4
53755: PUSH
53756: LD_INT 1
53758: PLUS
53759: ARRAY
53760: ST_TO_ADDR
53761: GO 53764
53763: POP
53764: GO 54319
53766: LD_INT 2
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53780
53772: LD_INT 3
53774: DOUBLE
53775: EQUAL
53776: IFTRUE 53780
53778: GO 53836
53780: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53781: LD_ADDR_VAR 0 9
53785: PUSH
53786: LD_VAR 0 29
53790: PUSH
53791: LD_VAR 0 30
53795: PUSH
53796: LD_VAR 0 31
53800: PUSH
53801: LD_VAR 0 32
53805: PUSH
53806: LD_VAR 0 33
53810: PUSH
53811: LD_VAR 0 34
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: LD_VAR 0 4
53828: PUSH
53829: LD_INT 1
53831: PLUS
53832: ARRAY
53833: ST_TO_ADDR
53834: GO 54319
53836: LD_INT 16
53838: DOUBLE
53839: EQUAL
53840: IFTRUE 53898
53842: LD_INT 17
53844: DOUBLE
53845: EQUAL
53846: IFTRUE 53898
53848: LD_INT 18
53850: DOUBLE
53851: EQUAL
53852: IFTRUE 53898
53854: LD_INT 19
53856: DOUBLE
53857: EQUAL
53858: IFTRUE 53898
53860: LD_INT 22
53862: DOUBLE
53863: EQUAL
53864: IFTRUE 53898
53866: LD_INT 20
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53898
53872: LD_INT 21
53874: DOUBLE
53875: EQUAL
53876: IFTRUE 53898
53878: LD_INT 23
53880: DOUBLE
53881: EQUAL
53882: IFTRUE 53898
53884: LD_INT 24
53886: DOUBLE
53887: EQUAL
53888: IFTRUE 53898
53890: LD_INT 25
53892: DOUBLE
53893: EQUAL
53894: IFTRUE 53898
53896: GO 53954
53898: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53899: LD_ADDR_VAR 0 9
53903: PUSH
53904: LD_VAR 0 35
53908: PUSH
53909: LD_VAR 0 36
53913: PUSH
53914: LD_VAR 0 37
53918: PUSH
53919: LD_VAR 0 38
53923: PUSH
53924: LD_VAR 0 39
53928: PUSH
53929: LD_VAR 0 40
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: PUSH
53942: LD_VAR 0 4
53946: PUSH
53947: LD_INT 1
53949: PLUS
53950: ARRAY
53951: ST_TO_ADDR
53952: GO 54319
53954: LD_INT 6
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 54010
53960: LD_INT 7
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 54010
53966: LD_INT 8
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 54010
53972: LD_INT 13
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 54010
53978: LD_INT 12
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 54010
53984: LD_INT 15
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 54010
53990: LD_INT 11
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 54010
53996: LD_INT 14
53998: DOUBLE
53999: EQUAL
54000: IFTRUE 54010
54002: LD_INT 10
54004: DOUBLE
54005: EQUAL
54006: IFTRUE 54010
54008: GO 54066
54010: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54011: LD_ADDR_VAR 0 9
54015: PUSH
54016: LD_VAR 0 41
54020: PUSH
54021: LD_VAR 0 42
54025: PUSH
54026: LD_VAR 0 43
54030: PUSH
54031: LD_VAR 0 44
54035: PUSH
54036: LD_VAR 0 45
54040: PUSH
54041: LD_VAR 0 46
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: PUSH
54054: LD_VAR 0 4
54058: PUSH
54059: LD_INT 1
54061: PLUS
54062: ARRAY
54063: ST_TO_ADDR
54064: GO 54319
54066: LD_INT 36
54068: DOUBLE
54069: EQUAL
54070: IFTRUE 54074
54072: GO 54130
54074: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54075: LD_ADDR_VAR 0 9
54079: PUSH
54080: LD_VAR 0 47
54084: PUSH
54085: LD_VAR 0 48
54089: PUSH
54090: LD_VAR 0 49
54094: PUSH
54095: LD_VAR 0 50
54099: PUSH
54100: LD_VAR 0 51
54104: PUSH
54105: LD_VAR 0 52
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: PUSH
54118: LD_VAR 0 4
54122: PUSH
54123: LD_INT 1
54125: PLUS
54126: ARRAY
54127: ST_TO_ADDR
54128: GO 54319
54130: LD_INT 4
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54156
54136: LD_INT 5
54138: DOUBLE
54139: EQUAL
54140: IFTRUE 54156
54142: LD_INT 34
54144: DOUBLE
54145: EQUAL
54146: IFTRUE 54156
54148: LD_INT 37
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54212
54156: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54157: LD_ADDR_VAR 0 9
54161: PUSH
54162: LD_VAR 0 53
54166: PUSH
54167: LD_VAR 0 54
54171: PUSH
54172: LD_VAR 0 55
54176: PUSH
54177: LD_VAR 0 56
54181: PUSH
54182: LD_VAR 0 57
54186: PUSH
54187: LD_VAR 0 58
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: PUSH
54200: LD_VAR 0 4
54204: PUSH
54205: LD_INT 1
54207: PLUS
54208: ARRAY
54209: ST_TO_ADDR
54210: GO 54319
54212: LD_INT 31
54214: DOUBLE
54215: EQUAL
54216: IFTRUE 54262
54218: LD_INT 32
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54262
54224: LD_INT 33
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54262
54230: LD_INT 27
54232: DOUBLE
54233: EQUAL
54234: IFTRUE 54262
54236: LD_INT 26
54238: DOUBLE
54239: EQUAL
54240: IFTRUE 54262
54242: LD_INT 28
54244: DOUBLE
54245: EQUAL
54246: IFTRUE 54262
54248: LD_INT 29
54250: DOUBLE
54251: EQUAL
54252: IFTRUE 54262
54254: LD_INT 30
54256: DOUBLE
54257: EQUAL
54258: IFTRUE 54262
54260: GO 54318
54262: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54263: LD_ADDR_VAR 0 9
54267: PUSH
54268: LD_VAR 0 59
54272: PUSH
54273: LD_VAR 0 60
54277: PUSH
54278: LD_VAR 0 61
54282: PUSH
54283: LD_VAR 0 62
54287: PUSH
54288: LD_VAR 0 63
54292: PUSH
54293: LD_VAR 0 64
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: LD_VAR 0 4
54310: PUSH
54311: LD_INT 1
54313: PLUS
54314: ARRAY
54315: ST_TO_ADDR
54316: GO 54319
54318: POP
// temp_list2 = [ ] ;
54319: LD_ADDR_VAR 0 10
54323: PUSH
54324: EMPTY
54325: ST_TO_ADDR
// for i in temp_list do
54326: LD_ADDR_VAR 0 8
54330: PUSH
54331: LD_VAR 0 9
54335: PUSH
54336: FOR_IN
54337: IFFALSE 54389
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54339: LD_ADDR_VAR 0 10
54343: PUSH
54344: LD_VAR 0 10
54348: PUSH
54349: LD_VAR 0 8
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PUSH
54358: LD_VAR 0 2
54362: PLUS
54363: PUSH
54364: LD_VAR 0 8
54368: PUSH
54369: LD_INT 2
54371: ARRAY
54372: PUSH
54373: LD_VAR 0 3
54377: PLUS
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: ADD
54386: ST_TO_ADDR
54387: GO 54336
54389: POP
54390: POP
// result = temp_list2 ;
54391: LD_ADDR_VAR 0 7
54395: PUSH
54396: LD_VAR 0 10
54400: ST_TO_ADDR
// end ;
54401: LD_VAR 0 7
54405: RET
// export function EnemyInRange ( unit , dist ) ; begin
54406: LD_INT 0
54408: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54409: LD_ADDR_VAR 0 3
54413: PUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: CALL_OW 255
54423: PPUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 250
54433: PPUSH
54434: LD_VAR 0 1
54438: PPUSH
54439: CALL_OW 251
54443: PPUSH
54444: LD_VAR 0 2
54448: PPUSH
54449: CALL 27779 0 4
54453: PUSH
54454: LD_INT 4
54456: ARRAY
54457: ST_TO_ADDR
// end ;
54458: LD_VAR 0 3
54462: RET
// export function PlayerSeeMe ( unit ) ; begin
54463: LD_INT 0
54465: PPUSH
// result := See ( your_side , unit ) ;
54466: LD_ADDR_VAR 0 2
54470: PUSH
54471: LD_OWVAR 2
54475: PPUSH
54476: LD_VAR 0 1
54480: PPUSH
54481: CALL_OW 292
54485: ST_TO_ADDR
// end ;
54486: LD_VAR 0 2
54490: RET
// export function ReverseDir ( unit ) ; begin
54491: LD_INT 0
54493: PPUSH
// if not unit then
54494: LD_VAR 0 1
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54526
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54503: LD_ADDR_VAR 0 2
54507: PUSH
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 254
54517: PUSH
54518: LD_INT 3
54520: PLUS
54521: PUSH
54522: LD_INT 6
54524: MOD
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 2
54530: RET
// export function ReverseArray ( array ) ; var i ; begin
54531: LD_INT 0
54533: PPUSH
54534: PPUSH
// if not array then
54535: LD_VAR 0 1
54539: NOT
54540: IFFALSE 54544
// exit ;
54542: GO 54599
// result := [ ] ;
54544: LD_ADDR_VAR 0 2
54548: PUSH
54549: EMPTY
54550: ST_TO_ADDR
// for i := array downto 1 do
54551: LD_ADDR_VAR 0 3
54555: PUSH
54556: DOUBLE
54557: LD_VAR 0 1
54561: INC
54562: ST_TO_ADDR
54563: LD_INT 1
54565: PUSH
54566: FOR_DOWNTO
54567: IFFALSE 54597
// result := Join ( result , array [ i ] ) ;
54569: LD_ADDR_VAR 0 2
54573: PUSH
54574: LD_VAR 0 2
54578: PPUSH
54579: LD_VAR 0 1
54583: PUSH
54584: LD_VAR 0 3
54588: ARRAY
54589: PPUSH
54590: CALL 59264 0 2
54594: ST_TO_ADDR
54595: GO 54566
54597: POP
54598: POP
// end ;
54599: LD_VAR 0 2
54603: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54604: LD_INT 0
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
54611: PPUSH
// if not unit or not hexes then
54612: LD_VAR 0 1
54616: NOT
54617: PUSH
54618: LD_VAR 0 2
54622: NOT
54623: OR
54624: IFFALSE 54628
// exit ;
54626: GO 54751
// dist := 9999 ;
54628: LD_ADDR_VAR 0 5
54632: PUSH
54633: LD_INT 9999
54635: ST_TO_ADDR
// for i = 1 to hexes do
54636: LD_ADDR_VAR 0 4
54640: PUSH
54641: DOUBLE
54642: LD_INT 1
54644: DEC
54645: ST_TO_ADDR
54646: LD_VAR 0 2
54650: PUSH
54651: FOR_TO
54652: IFFALSE 54739
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54654: LD_ADDR_VAR 0 6
54658: PUSH
54659: LD_VAR 0 1
54663: PPUSH
54664: LD_VAR 0 2
54668: PUSH
54669: LD_VAR 0 4
54673: ARRAY
54674: PUSH
54675: LD_INT 1
54677: ARRAY
54678: PPUSH
54679: LD_VAR 0 2
54683: PUSH
54684: LD_VAR 0 4
54688: ARRAY
54689: PUSH
54690: LD_INT 2
54692: ARRAY
54693: PPUSH
54694: CALL_OW 297
54698: ST_TO_ADDR
// if tdist < dist then
54699: LD_VAR 0 6
54703: PUSH
54704: LD_VAR 0 5
54708: LESS
54709: IFFALSE 54737
// begin hex := hexes [ i ] ;
54711: LD_ADDR_VAR 0 8
54715: PUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_VAR 0 4
54725: ARRAY
54726: ST_TO_ADDR
// dist := tdist ;
54727: LD_ADDR_VAR 0 5
54731: PUSH
54732: LD_VAR 0 6
54736: ST_TO_ADDR
// end ; end ;
54737: GO 54651
54739: POP
54740: POP
// result := hex ;
54741: LD_ADDR_VAR 0 3
54745: PUSH
54746: LD_VAR 0 8
54750: ST_TO_ADDR
// end ;
54751: LD_VAR 0 3
54755: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54756: LD_INT 0
54758: PPUSH
54759: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54760: LD_VAR 0 1
54764: NOT
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 21
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 23
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PPUSH
54795: CALL_OW 69
54799: IN
54800: NOT
54801: OR
54802: IFFALSE 54806
// exit ;
54804: GO 54853
// for i = 1 to 3 do
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: DOUBLE
54812: LD_INT 1
54814: DEC
54815: ST_TO_ADDR
54816: LD_INT 3
54818: PUSH
54819: FOR_TO
54820: IFFALSE 54851
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 250
54831: PPUSH
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 251
54841: PPUSH
54842: LD_INT 1
54844: PPUSH
54845: CALL_OW 453
54849: GO 54819
54851: POP
54852: POP
// end ;
54853: LD_VAR 0 2
54857: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54858: LD_INT 0
54860: PPUSH
54861: PPUSH
54862: PPUSH
54863: PPUSH
54864: PPUSH
54865: PPUSH
// if not unit or not enemy_unit then
54866: LD_VAR 0 1
54870: NOT
54871: PUSH
54872: LD_VAR 0 2
54876: NOT
54877: OR
54878: IFFALSE 54882
// exit ;
54880: GO 55349
// if GetLives ( i ) < 250 then
54882: LD_VAR 0 4
54886: PPUSH
54887: CALL_OW 256
54891: PUSH
54892: LD_INT 250
54894: LESS
54895: IFFALSE 54908
// begin ComAutodestruct ( i ) ;
54897: LD_VAR 0 4
54901: PPUSH
54902: CALL 54756 0 1
// exit ;
54906: GO 55349
// end ; x := GetX ( enemy_unit ) ;
54908: LD_ADDR_VAR 0 7
54912: PUSH
54913: LD_VAR 0 2
54917: PPUSH
54918: CALL_OW 250
54922: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54923: LD_ADDR_VAR 0 8
54927: PUSH
54928: LD_VAR 0 2
54932: PPUSH
54933: CALL_OW 251
54937: ST_TO_ADDR
// if not x or not y then
54938: LD_VAR 0 7
54942: NOT
54943: PUSH
54944: LD_VAR 0 8
54948: NOT
54949: OR
54950: IFFALSE 54954
// exit ;
54952: GO 55349
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54954: LD_ADDR_VAR 0 6
54958: PUSH
54959: LD_VAR 0 7
54963: PPUSH
54964: LD_INT 0
54966: PPUSH
54967: LD_INT 4
54969: PPUSH
54970: CALL_OW 272
54974: PUSH
54975: LD_VAR 0 8
54979: PPUSH
54980: LD_INT 0
54982: PPUSH
54983: LD_INT 4
54985: PPUSH
54986: CALL_OW 273
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_VAR 0 7
54999: PPUSH
55000: LD_INT 1
55002: PPUSH
55003: LD_INT 4
55005: PPUSH
55006: CALL_OW 272
55010: PUSH
55011: LD_VAR 0 8
55015: PPUSH
55016: LD_INT 1
55018: PPUSH
55019: LD_INT 4
55021: PPUSH
55022: CALL_OW 273
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_VAR 0 7
55035: PPUSH
55036: LD_INT 2
55038: PPUSH
55039: LD_INT 4
55041: PPUSH
55042: CALL_OW 272
55046: PUSH
55047: LD_VAR 0 8
55051: PPUSH
55052: LD_INT 2
55054: PPUSH
55055: LD_INT 4
55057: PPUSH
55058: CALL_OW 273
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_VAR 0 7
55071: PPUSH
55072: LD_INT 3
55074: PPUSH
55075: LD_INT 4
55077: PPUSH
55078: CALL_OW 272
55082: PUSH
55083: LD_VAR 0 8
55087: PPUSH
55088: LD_INT 3
55090: PPUSH
55091: LD_INT 4
55093: PPUSH
55094: CALL_OW 273
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_VAR 0 7
55107: PPUSH
55108: LD_INT 4
55110: PPUSH
55111: LD_INT 4
55113: PPUSH
55114: CALL_OW 272
55118: PUSH
55119: LD_VAR 0 8
55123: PPUSH
55124: LD_INT 4
55126: PPUSH
55127: LD_INT 4
55129: PPUSH
55130: CALL_OW 273
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_VAR 0 7
55143: PPUSH
55144: LD_INT 5
55146: PPUSH
55147: LD_INT 4
55149: PPUSH
55150: CALL_OW 272
55154: PUSH
55155: LD_VAR 0 8
55159: PPUSH
55160: LD_INT 5
55162: PPUSH
55163: LD_INT 4
55165: PPUSH
55166: CALL_OW 273
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// for i = tmp downto 1 do
55183: LD_ADDR_VAR 0 4
55187: PUSH
55188: DOUBLE
55189: LD_VAR 0 6
55193: INC
55194: ST_TO_ADDR
55195: LD_INT 1
55197: PUSH
55198: FOR_DOWNTO
55199: IFFALSE 55300
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55201: LD_VAR 0 6
55205: PUSH
55206: LD_VAR 0 4
55210: ARRAY
55211: PUSH
55212: LD_INT 1
55214: ARRAY
55215: PPUSH
55216: LD_VAR 0 6
55220: PUSH
55221: LD_VAR 0 4
55225: ARRAY
55226: PUSH
55227: LD_INT 2
55229: ARRAY
55230: PPUSH
55231: CALL_OW 488
55235: NOT
55236: PUSH
55237: LD_VAR 0 6
55241: PUSH
55242: LD_VAR 0 4
55246: ARRAY
55247: PUSH
55248: LD_INT 1
55250: ARRAY
55251: PPUSH
55252: LD_VAR 0 6
55256: PUSH
55257: LD_VAR 0 4
55261: ARRAY
55262: PUSH
55263: LD_INT 2
55265: ARRAY
55266: PPUSH
55267: CALL_OW 428
55271: PUSH
55272: LD_INT 0
55274: NONEQUAL
55275: OR
55276: IFFALSE 55298
// tmp := Delete ( tmp , i ) ;
55278: LD_ADDR_VAR 0 6
55282: PUSH
55283: LD_VAR 0 6
55287: PPUSH
55288: LD_VAR 0 4
55292: PPUSH
55293: CALL_OW 3
55297: ST_TO_ADDR
55298: GO 55198
55300: POP
55301: POP
// j := GetClosestHex ( unit , tmp ) ;
55302: LD_ADDR_VAR 0 5
55306: PUSH
55307: LD_VAR 0 1
55311: PPUSH
55312: LD_VAR 0 6
55316: PPUSH
55317: CALL 54604 0 2
55321: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55322: LD_VAR 0 1
55326: PPUSH
55327: LD_VAR 0 5
55331: PUSH
55332: LD_INT 1
55334: ARRAY
55335: PPUSH
55336: LD_VAR 0 5
55340: PUSH
55341: LD_INT 2
55343: ARRAY
55344: PPUSH
55345: CALL_OW 111
// end ;
55349: LD_VAR 0 3
55353: RET
// export function PrepareApemanSoldier ( ) ; begin
55354: LD_INT 0
55356: PPUSH
// uc_nation := 0 ;
55357: LD_ADDR_OWVAR 21
55361: PUSH
55362: LD_INT 0
55364: ST_TO_ADDR
// hc_sex := sex_male ;
55365: LD_ADDR_OWVAR 27
55369: PUSH
55370: LD_INT 1
55372: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55373: LD_ADDR_OWVAR 28
55377: PUSH
55378: LD_INT 15
55380: ST_TO_ADDR
// hc_gallery :=  ;
55381: LD_ADDR_OWVAR 33
55385: PUSH
55386: LD_STRING 
55388: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55389: LD_ADDR_OWVAR 31
55393: PUSH
55394: LD_INT 0
55396: PPUSH
55397: LD_INT 3
55399: PPUSH
55400: CALL_OW 12
55404: PUSH
55405: LD_INT 0
55407: PPUSH
55408: LD_INT 3
55410: PPUSH
55411: CALL_OW 12
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// end ;
55428: LD_VAR 0 1
55432: RET
// export function PrepareApemanEngineer ( ) ; begin
55433: LD_INT 0
55435: PPUSH
// uc_nation := 0 ;
55436: LD_ADDR_OWVAR 21
55440: PUSH
55441: LD_INT 0
55443: ST_TO_ADDR
// hc_sex := sex_male ;
55444: LD_ADDR_OWVAR 27
55448: PUSH
55449: LD_INT 1
55451: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55452: LD_ADDR_OWVAR 28
55456: PUSH
55457: LD_INT 16
55459: ST_TO_ADDR
// hc_gallery :=  ;
55460: LD_ADDR_OWVAR 33
55464: PUSH
55465: LD_STRING 
55467: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55468: LD_ADDR_OWVAR 31
55472: PUSH
55473: LD_INT 0
55475: PPUSH
55476: LD_INT 3
55478: PPUSH
55479: CALL_OW 12
55483: PUSH
55484: LD_INT 0
55486: PPUSH
55487: LD_INT 3
55489: PPUSH
55490: CALL_OW 12
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// end ;
55507: LD_VAR 0 1
55511: RET
// export function PrepareApeman ( agressivity ) ; begin
55512: LD_INT 0
55514: PPUSH
// uc_side := 0 ;
55515: LD_ADDR_OWVAR 20
55519: PUSH
55520: LD_INT 0
55522: ST_TO_ADDR
// uc_nation := 0 ;
55523: LD_ADDR_OWVAR 21
55527: PUSH
55528: LD_INT 0
55530: ST_TO_ADDR
// hc_sex := sex_male ;
55531: LD_ADDR_OWVAR 27
55535: PUSH
55536: LD_INT 1
55538: ST_TO_ADDR
// hc_class := class_apeman ;
55539: LD_ADDR_OWVAR 28
55543: PUSH
55544: LD_INT 12
55546: ST_TO_ADDR
// hc_gallery :=  ;
55547: LD_ADDR_OWVAR 33
55551: PUSH
55552: LD_STRING 
55554: ST_TO_ADDR
// if agressivity = 0 then
55555: LD_VAR 0 1
55559: PUSH
55560: LD_INT 0
55562: EQUAL
55563: IFFALSE 55575
// hc_agressivity := 0 else
55565: LD_ADDR_OWVAR 35
55569: PUSH
55570: LD_INT 0
55572: ST_TO_ADDR
55573: GO 55596
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55575: LD_ADDR_OWVAR 35
55579: PUSH
55580: LD_VAR 0 1
55584: NEG
55585: PPUSH
55586: LD_VAR 0 1
55590: PPUSH
55591: CALL_OW 12
55595: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55596: LD_ADDR_OWVAR 31
55600: PUSH
55601: LD_INT 0
55603: PPUSH
55604: LD_INT 3
55606: PPUSH
55607: CALL_OW 12
55611: PUSH
55612: LD_INT 0
55614: PPUSH
55615: LD_INT 3
55617: PPUSH
55618: CALL_OW 12
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// end ;
55635: LD_VAR 0 2
55639: RET
// export function PrepareTiger ( agressivity ) ; begin
55640: LD_INT 0
55642: PPUSH
// uc_side := 0 ;
55643: LD_ADDR_OWVAR 20
55647: PUSH
55648: LD_INT 0
55650: ST_TO_ADDR
// uc_nation := 0 ;
55651: LD_ADDR_OWVAR 21
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// hc_class := class_tiger ;
55659: LD_ADDR_OWVAR 28
55663: PUSH
55664: LD_INT 14
55666: ST_TO_ADDR
// hc_gallery :=  ;
55667: LD_ADDR_OWVAR 33
55671: PUSH
55672: LD_STRING 
55674: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55675: LD_ADDR_OWVAR 35
55679: PUSH
55680: LD_VAR 0 1
55684: NEG
55685: PPUSH
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 12
55695: ST_TO_ADDR
// end ;
55696: LD_VAR 0 2
55700: RET
// export function PrepareEnchidna ( ) ; begin
55701: LD_INT 0
55703: PPUSH
// uc_side := 0 ;
55704: LD_ADDR_OWVAR 20
55708: PUSH
55709: LD_INT 0
55711: ST_TO_ADDR
// uc_nation := 0 ;
55712: LD_ADDR_OWVAR 21
55716: PUSH
55717: LD_INT 0
55719: ST_TO_ADDR
// hc_class := class_baggie ;
55720: LD_ADDR_OWVAR 28
55724: PUSH
55725: LD_INT 13
55727: ST_TO_ADDR
// hc_gallery :=  ;
55728: LD_ADDR_OWVAR 33
55732: PUSH
55733: LD_STRING 
55735: ST_TO_ADDR
// end ;
55736: LD_VAR 0 1
55740: RET
// export function PrepareFrog ( ) ; begin
55741: LD_INT 0
55743: PPUSH
// uc_side := 0 ;
55744: LD_ADDR_OWVAR 20
55748: PUSH
55749: LD_INT 0
55751: ST_TO_ADDR
// uc_nation := 0 ;
55752: LD_ADDR_OWVAR 21
55756: PUSH
55757: LD_INT 0
55759: ST_TO_ADDR
// hc_class := class_frog ;
55760: LD_ADDR_OWVAR 28
55764: PUSH
55765: LD_INT 19
55767: ST_TO_ADDR
// hc_gallery :=  ;
55768: LD_ADDR_OWVAR 33
55772: PUSH
55773: LD_STRING 
55775: ST_TO_ADDR
// end ;
55776: LD_VAR 0 1
55780: RET
// export function PrepareFish ( ) ; begin
55781: LD_INT 0
55783: PPUSH
// uc_side := 0 ;
55784: LD_ADDR_OWVAR 20
55788: PUSH
55789: LD_INT 0
55791: ST_TO_ADDR
// uc_nation := 0 ;
55792: LD_ADDR_OWVAR 21
55796: PUSH
55797: LD_INT 0
55799: ST_TO_ADDR
// hc_class := class_fish ;
55800: LD_ADDR_OWVAR 28
55804: PUSH
55805: LD_INT 20
55807: ST_TO_ADDR
// hc_gallery :=  ;
55808: LD_ADDR_OWVAR 33
55812: PUSH
55813: LD_STRING 
55815: ST_TO_ADDR
// end ;
55816: LD_VAR 0 1
55820: RET
// export function PrepareBird ( ) ; begin
55821: LD_INT 0
55823: PPUSH
// uc_side := 0 ;
55824: LD_ADDR_OWVAR 20
55828: PUSH
55829: LD_INT 0
55831: ST_TO_ADDR
// uc_nation := 0 ;
55832: LD_ADDR_OWVAR 21
55836: PUSH
55837: LD_INT 0
55839: ST_TO_ADDR
// hc_class := class_phororhacos ;
55840: LD_ADDR_OWVAR 28
55844: PUSH
55845: LD_INT 18
55847: ST_TO_ADDR
// hc_gallery :=  ;
55848: LD_ADDR_OWVAR 33
55852: PUSH
55853: LD_STRING 
55855: ST_TO_ADDR
// end ;
55856: LD_VAR 0 1
55860: RET
// export function PrepareHorse ( ) ; begin
55861: LD_INT 0
55863: PPUSH
// uc_side := 0 ;
55864: LD_ADDR_OWVAR 20
55868: PUSH
55869: LD_INT 0
55871: ST_TO_ADDR
// uc_nation := 0 ;
55872: LD_ADDR_OWVAR 21
55876: PUSH
55877: LD_INT 0
55879: ST_TO_ADDR
// hc_class := class_horse ;
55880: LD_ADDR_OWVAR 28
55884: PUSH
55885: LD_INT 21
55887: ST_TO_ADDR
// hc_gallery :=  ;
55888: LD_ADDR_OWVAR 33
55892: PUSH
55893: LD_STRING 
55895: ST_TO_ADDR
// end ;
55896: LD_VAR 0 1
55900: RET
// export function PrepareMastodont ( ) ; begin
55901: LD_INT 0
55903: PPUSH
// uc_side := 0 ;
55904: LD_ADDR_OWVAR 20
55908: PUSH
55909: LD_INT 0
55911: ST_TO_ADDR
// uc_nation := 0 ;
55912: LD_ADDR_OWVAR 21
55916: PUSH
55917: LD_INT 0
55919: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55920: LD_ADDR_OWVAR 37
55924: PUSH
55925: LD_INT 31
55927: ST_TO_ADDR
// vc_control := control_rider ;
55928: LD_ADDR_OWVAR 38
55932: PUSH
55933: LD_INT 4
55935: ST_TO_ADDR
// end ;
55936: LD_VAR 0 1
55940: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55941: LD_INT 0
55943: PPUSH
55944: PPUSH
55945: PPUSH
// uc_side = 0 ;
55946: LD_ADDR_OWVAR 20
55950: PUSH
55951: LD_INT 0
55953: ST_TO_ADDR
// uc_nation = 0 ;
55954: LD_ADDR_OWVAR 21
55958: PUSH
55959: LD_INT 0
55961: ST_TO_ADDR
// InitHc_All ( ) ;
55962: CALL_OW 584
// InitVc ;
55966: CALL_OW 20
// if mastodonts then
55970: LD_VAR 0 6
55974: IFFALSE 56041
// for i = 1 to mastodonts do
55976: LD_ADDR_VAR 0 11
55980: PUSH
55981: DOUBLE
55982: LD_INT 1
55984: DEC
55985: ST_TO_ADDR
55986: LD_VAR 0 6
55990: PUSH
55991: FOR_TO
55992: IFFALSE 56039
// begin vc_chassis := 31 ;
55994: LD_ADDR_OWVAR 37
55998: PUSH
55999: LD_INT 31
56001: ST_TO_ADDR
// vc_control := control_rider ;
56002: LD_ADDR_OWVAR 38
56006: PUSH
56007: LD_INT 4
56009: ST_TO_ADDR
// animal := CreateVehicle ;
56010: LD_ADDR_VAR 0 12
56014: PUSH
56015: CALL_OW 45
56019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56020: LD_VAR 0 12
56024: PPUSH
56025: LD_VAR 0 8
56029: PPUSH
56030: LD_INT 0
56032: PPUSH
56033: CALL 58169 0 3
// end ;
56037: GO 55991
56039: POP
56040: POP
// if horses then
56041: LD_VAR 0 5
56045: IFFALSE 56112
// for i = 1 to horses do
56047: LD_ADDR_VAR 0 11
56051: PUSH
56052: DOUBLE
56053: LD_INT 1
56055: DEC
56056: ST_TO_ADDR
56057: LD_VAR 0 5
56061: PUSH
56062: FOR_TO
56063: IFFALSE 56110
// begin hc_class := 21 ;
56065: LD_ADDR_OWVAR 28
56069: PUSH
56070: LD_INT 21
56072: ST_TO_ADDR
// hc_gallery :=  ;
56073: LD_ADDR_OWVAR 33
56077: PUSH
56078: LD_STRING 
56080: ST_TO_ADDR
// animal := CreateHuman ;
56081: LD_ADDR_VAR 0 12
56085: PUSH
56086: CALL_OW 44
56090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56091: LD_VAR 0 12
56095: PPUSH
56096: LD_VAR 0 8
56100: PPUSH
56101: LD_INT 0
56103: PPUSH
56104: CALL 58169 0 3
// end ;
56108: GO 56062
56110: POP
56111: POP
// if birds then
56112: LD_VAR 0 1
56116: IFFALSE 56183
// for i = 1 to birds do
56118: LD_ADDR_VAR 0 11
56122: PUSH
56123: DOUBLE
56124: LD_INT 1
56126: DEC
56127: ST_TO_ADDR
56128: LD_VAR 0 1
56132: PUSH
56133: FOR_TO
56134: IFFALSE 56181
// begin hc_class := 18 ;
56136: LD_ADDR_OWVAR 28
56140: PUSH
56141: LD_INT 18
56143: ST_TO_ADDR
// hc_gallery =  ;
56144: LD_ADDR_OWVAR 33
56148: PUSH
56149: LD_STRING 
56151: ST_TO_ADDR
// animal := CreateHuman ;
56152: LD_ADDR_VAR 0 12
56156: PUSH
56157: CALL_OW 44
56161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56162: LD_VAR 0 12
56166: PPUSH
56167: LD_VAR 0 8
56171: PPUSH
56172: LD_INT 0
56174: PPUSH
56175: CALL 58169 0 3
// end ;
56179: GO 56133
56181: POP
56182: POP
// if tigers then
56183: LD_VAR 0 2
56187: IFFALSE 56271
// for i = 1 to tigers do
56189: LD_ADDR_VAR 0 11
56193: PUSH
56194: DOUBLE
56195: LD_INT 1
56197: DEC
56198: ST_TO_ADDR
56199: LD_VAR 0 2
56203: PUSH
56204: FOR_TO
56205: IFFALSE 56269
// begin hc_class = class_tiger ;
56207: LD_ADDR_OWVAR 28
56211: PUSH
56212: LD_INT 14
56214: ST_TO_ADDR
// hc_gallery =  ;
56215: LD_ADDR_OWVAR 33
56219: PUSH
56220: LD_STRING 
56222: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56223: LD_ADDR_OWVAR 35
56227: PUSH
56228: LD_INT 7
56230: NEG
56231: PPUSH
56232: LD_INT 7
56234: PPUSH
56235: CALL_OW 12
56239: ST_TO_ADDR
// animal := CreateHuman ;
56240: LD_ADDR_VAR 0 12
56244: PUSH
56245: CALL_OW 44
56249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56250: LD_VAR 0 12
56254: PPUSH
56255: LD_VAR 0 8
56259: PPUSH
56260: LD_INT 0
56262: PPUSH
56263: CALL 58169 0 3
// end ;
56267: GO 56204
56269: POP
56270: POP
// if apemans then
56271: LD_VAR 0 3
56275: IFFALSE 56398
// for i = 1 to apemans do
56277: LD_ADDR_VAR 0 11
56281: PUSH
56282: DOUBLE
56283: LD_INT 1
56285: DEC
56286: ST_TO_ADDR
56287: LD_VAR 0 3
56291: PUSH
56292: FOR_TO
56293: IFFALSE 56396
// begin hc_class = class_apeman ;
56295: LD_ADDR_OWVAR 28
56299: PUSH
56300: LD_INT 12
56302: ST_TO_ADDR
// hc_gallery =  ;
56303: LD_ADDR_OWVAR 33
56307: PUSH
56308: LD_STRING 
56310: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56311: LD_ADDR_OWVAR 35
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PPUSH
56320: LD_INT 2
56322: PPUSH
56323: CALL_OW 12
56327: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56328: LD_ADDR_OWVAR 31
56332: PUSH
56333: LD_INT 1
56335: PPUSH
56336: LD_INT 3
56338: PPUSH
56339: CALL_OW 12
56343: PUSH
56344: LD_INT 1
56346: PPUSH
56347: LD_INT 3
56349: PPUSH
56350: CALL_OW 12
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// animal := CreateHuman ;
56367: LD_ADDR_VAR 0 12
56371: PUSH
56372: CALL_OW 44
56376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56377: LD_VAR 0 12
56381: PPUSH
56382: LD_VAR 0 8
56386: PPUSH
56387: LD_INT 0
56389: PPUSH
56390: CALL 58169 0 3
// end ;
56394: GO 56292
56396: POP
56397: POP
// if enchidnas then
56398: LD_VAR 0 4
56402: IFFALSE 56469
// for i = 1 to enchidnas do
56404: LD_ADDR_VAR 0 11
56408: PUSH
56409: DOUBLE
56410: LD_INT 1
56412: DEC
56413: ST_TO_ADDR
56414: LD_VAR 0 4
56418: PUSH
56419: FOR_TO
56420: IFFALSE 56467
// begin hc_class = 13 ;
56422: LD_ADDR_OWVAR 28
56426: PUSH
56427: LD_INT 13
56429: ST_TO_ADDR
// hc_gallery =  ;
56430: LD_ADDR_OWVAR 33
56434: PUSH
56435: LD_STRING 
56437: ST_TO_ADDR
// animal := CreateHuman ;
56438: LD_ADDR_VAR 0 12
56442: PUSH
56443: CALL_OW 44
56447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56448: LD_VAR 0 12
56452: PPUSH
56453: LD_VAR 0 8
56457: PPUSH
56458: LD_INT 0
56460: PPUSH
56461: CALL 58169 0 3
// end ;
56465: GO 56419
56467: POP
56468: POP
// if fishes then
56469: LD_VAR 0 7
56473: IFFALSE 56540
// for i = 1 to fishes do
56475: LD_ADDR_VAR 0 11
56479: PUSH
56480: DOUBLE
56481: LD_INT 1
56483: DEC
56484: ST_TO_ADDR
56485: LD_VAR 0 7
56489: PUSH
56490: FOR_TO
56491: IFFALSE 56538
// begin hc_class = 20 ;
56493: LD_ADDR_OWVAR 28
56497: PUSH
56498: LD_INT 20
56500: ST_TO_ADDR
// hc_gallery =  ;
56501: LD_ADDR_OWVAR 33
56505: PUSH
56506: LD_STRING 
56508: ST_TO_ADDR
// animal := CreateHuman ;
56509: LD_ADDR_VAR 0 12
56513: PUSH
56514: CALL_OW 44
56518: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56519: LD_VAR 0 12
56523: PPUSH
56524: LD_VAR 0 9
56528: PPUSH
56529: LD_INT 0
56531: PPUSH
56532: CALL 58169 0 3
// end ;
56536: GO 56490
56538: POP
56539: POP
// end ;
56540: LD_VAR 0 10
56544: RET
// export function WantHeal ( sci , unit ) ; begin
56545: LD_INT 0
56547: PPUSH
// if GetTaskList ( sci ) > 0 then
56548: LD_VAR 0 1
56552: PPUSH
56553: CALL_OW 437
56557: PUSH
56558: LD_INT 0
56560: GREATER
56561: IFFALSE 56631
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56563: LD_VAR 0 1
56567: PPUSH
56568: CALL_OW 437
56572: PUSH
56573: LD_INT 1
56575: ARRAY
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PUSH
56581: LD_STRING l
56583: EQUAL
56584: PUSH
56585: LD_VAR 0 1
56589: PPUSH
56590: CALL_OW 437
56594: PUSH
56595: LD_INT 1
56597: ARRAY
56598: PUSH
56599: LD_INT 4
56601: ARRAY
56602: PUSH
56603: LD_VAR 0 2
56607: EQUAL
56608: AND
56609: IFFALSE 56621
// result := true else
56611: LD_ADDR_VAR 0 3
56615: PUSH
56616: LD_INT 1
56618: ST_TO_ADDR
56619: GO 56629
// result := false ;
56621: LD_ADDR_VAR 0 3
56625: PUSH
56626: LD_INT 0
56628: ST_TO_ADDR
// end else
56629: GO 56639
// result := false ;
56631: LD_ADDR_VAR 0 3
56635: PUSH
56636: LD_INT 0
56638: ST_TO_ADDR
// end ;
56639: LD_VAR 0 3
56643: RET
// export function HealTarget ( sci ) ; begin
56644: LD_INT 0
56646: PPUSH
// if not sci then
56647: LD_VAR 0 1
56651: NOT
56652: IFFALSE 56656
// exit ;
56654: GO 56721
// result := 0 ;
56656: LD_ADDR_VAR 0 2
56660: PUSH
56661: LD_INT 0
56663: ST_TO_ADDR
// if GetTaskList ( sci ) then
56664: LD_VAR 0 1
56668: PPUSH
56669: CALL_OW 437
56673: IFFALSE 56721
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56675: LD_VAR 0 1
56679: PPUSH
56680: CALL_OW 437
56684: PUSH
56685: LD_INT 1
56687: ARRAY
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: PUSH
56693: LD_STRING l
56695: EQUAL
56696: IFFALSE 56721
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56698: LD_ADDR_VAR 0 2
56702: PUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 437
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: PUSH
56717: LD_INT 4
56719: ARRAY
56720: ST_TO_ADDR
// end ;
56721: LD_VAR 0 2
56725: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
// if not base_units then
56732: LD_VAR 0 1
56736: NOT
56737: IFFALSE 56741
// exit ;
56739: GO 56828
// result := false ;
56741: LD_ADDR_VAR 0 2
56745: PUSH
56746: LD_INT 0
56748: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56749: LD_ADDR_VAR 0 5
56753: PUSH
56754: LD_VAR 0 1
56758: PPUSH
56759: LD_INT 21
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PPUSH
56769: CALL_OW 72
56773: ST_TO_ADDR
// if not tmp then
56774: LD_VAR 0 5
56778: NOT
56779: IFFALSE 56783
// exit ;
56781: GO 56828
// for i in tmp do
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_VAR 0 5
56792: PUSH
56793: FOR_IN
56794: IFFALSE 56826
// begin result := EnemyInRange ( i , 22 ) ;
56796: LD_ADDR_VAR 0 2
56800: PUSH
56801: LD_VAR 0 3
56805: PPUSH
56806: LD_INT 22
56808: PPUSH
56809: CALL 54406 0 2
56813: ST_TO_ADDR
// if result then
56814: LD_VAR 0 2
56818: IFFALSE 56824
// exit ;
56820: POP
56821: POP
56822: GO 56828
// end ;
56824: GO 56793
56826: POP
56827: POP
// end ;
56828: LD_VAR 0 2
56832: RET
// export function FilterByTag ( units , tag ) ; begin
56833: LD_INT 0
56835: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56836: LD_ADDR_VAR 0 3
56840: PUSH
56841: LD_VAR 0 1
56845: PPUSH
56846: LD_INT 120
56848: PUSH
56849: LD_VAR 0 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PPUSH
56858: CALL_OW 72
56862: ST_TO_ADDR
// end ;
56863: LD_VAR 0 3
56867: RET
// export function IsDriver ( un ) ; begin
56868: LD_INT 0
56870: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56871: LD_ADDR_VAR 0 2
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 55
56883: PUSH
56884: EMPTY
56885: LIST
56886: PPUSH
56887: CALL_OW 69
56891: IN
56892: ST_TO_ADDR
// end ;
56893: LD_VAR 0 2
56897: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56898: LD_INT 0
56900: PPUSH
56901: PPUSH
// list := [ ] ;
56902: LD_ADDR_VAR 0 5
56906: PUSH
56907: EMPTY
56908: ST_TO_ADDR
// case d of 0 :
56909: LD_VAR 0 3
56913: PUSH
56914: LD_INT 0
56916: DOUBLE
56917: EQUAL
56918: IFTRUE 56922
56920: GO 57055
56922: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56923: LD_ADDR_VAR 0 5
56927: PUSH
56928: LD_VAR 0 1
56932: PUSH
56933: LD_INT 4
56935: MINUS
56936: PUSH
56937: LD_VAR 0 2
56941: PUSH
56942: LD_INT 4
56944: MINUS
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: PUSH
56954: LD_VAR 0 1
56958: PUSH
56959: LD_INT 3
56961: MINUS
56962: PUSH
56963: LD_VAR 0 2
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: PUSH
56976: LD_VAR 0 1
56980: PUSH
56981: LD_INT 4
56983: PLUS
56984: PUSH
56985: LD_VAR 0 2
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: PUSH
56998: LD_VAR 0 1
57002: PUSH
57003: LD_INT 3
57005: PLUS
57006: PUSH
57007: LD_VAR 0 2
57011: PUSH
57012: LD_INT 3
57014: PLUS
57015: PUSH
57016: LD_INT 5
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: PUSH
57024: LD_VAR 0 1
57028: PUSH
57029: LD_VAR 0 2
57033: PUSH
57034: LD_INT 4
57036: PLUS
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// end ; 1 :
57053: GO 57753
57055: LD_INT 1
57057: DOUBLE
57058: EQUAL
57059: IFTRUE 57063
57061: GO 57196
57063: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57064: LD_ADDR_VAR 0 5
57068: PUSH
57069: LD_VAR 0 1
57073: PUSH
57074: LD_VAR 0 2
57078: PUSH
57079: LD_INT 4
57081: MINUS
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: PUSH
57091: LD_VAR 0 1
57095: PUSH
57096: LD_INT 3
57098: MINUS
57099: PUSH
57100: LD_VAR 0 2
57104: PUSH
57105: LD_INT 3
57107: MINUS
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: PUSH
57117: LD_VAR 0 1
57121: PUSH
57122: LD_INT 4
57124: MINUS
57125: PUSH
57126: LD_VAR 0 2
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: LD_VAR 0 1
57143: PUSH
57144: LD_VAR 0 2
57148: PUSH
57149: LD_INT 3
57151: PLUS
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: PUSH
57161: LD_VAR 0 1
57165: PUSH
57166: LD_INT 4
57168: PLUS
57169: PUSH
57170: LD_VAR 0 2
57174: PUSH
57175: LD_INT 4
57177: PLUS
57178: PUSH
57179: LD_INT 5
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// end ; 2 :
57194: GO 57753
57196: LD_INT 2
57198: DOUBLE
57199: EQUAL
57200: IFTRUE 57204
57202: GO 57333
57204: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57205: LD_ADDR_VAR 0 5
57209: PUSH
57210: LD_VAR 0 1
57214: PUSH
57215: LD_VAR 0 2
57219: PUSH
57220: LD_INT 3
57222: MINUS
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: PUSH
57232: LD_VAR 0 1
57236: PUSH
57237: LD_INT 4
57239: PLUS
57240: PUSH
57241: LD_VAR 0 2
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: PUSH
57254: LD_VAR 0 1
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_INT 4
57266: PLUS
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: PUSH
57276: LD_VAR 0 1
57280: PUSH
57281: LD_INT 3
57283: MINUS
57284: PUSH
57285: LD_VAR 0 2
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 4
57305: MINUS
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_INT 4
57314: MINUS
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// end ; 3 :
57331: GO 57753
57333: LD_INT 3
57335: DOUBLE
57336: EQUAL
57337: IFTRUE 57341
57339: GO 57474
57341: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57342: LD_ADDR_VAR 0 5
57346: PUSH
57347: LD_VAR 0 1
57351: PUSH
57352: LD_INT 3
57354: PLUS
57355: PUSH
57356: LD_VAR 0 2
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: PUSH
57369: LD_VAR 0 1
57373: PUSH
57374: LD_INT 4
57376: PLUS
57377: PUSH
57378: LD_VAR 0 2
57382: PUSH
57383: LD_INT 4
57385: PLUS
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: LD_INT 4
57402: MINUS
57403: PUSH
57404: LD_VAR 0 2
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: PUSH
57417: LD_VAR 0 1
57421: PUSH
57422: LD_VAR 0 2
57426: PUSH
57427: LD_INT 4
57429: MINUS
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: PUSH
57439: LD_VAR 0 1
57443: PUSH
57444: LD_INT 3
57446: MINUS
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: LD_INT 3
57455: MINUS
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: ST_TO_ADDR
// end ; 4 :
57472: GO 57753
57474: LD_INT 4
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57482
57480: GO 57615
57482: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57483: LD_ADDR_VAR 0 5
57487: PUSH
57488: LD_VAR 0 1
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 4
57500: PLUS
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: PUSH
57510: LD_VAR 0 1
57514: PUSH
57515: LD_INT 3
57517: PLUS
57518: PUSH
57519: LD_VAR 0 2
57523: PUSH
57524: LD_INT 3
57526: PLUS
57527: PUSH
57528: LD_INT 5
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: PUSH
57536: LD_VAR 0 1
57540: PUSH
57541: LD_INT 4
57543: PLUS
57544: PUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_INT 4
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: PUSH
57558: LD_VAR 0 1
57562: PUSH
57563: LD_VAR 0 2
57567: PUSH
57568: LD_INT 3
57570: MINUS
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: LIST
57579: PUSH
57580: LD_VAR 0 1
57584: PUSH
57585: LD_INT 4
57587: MINUS
57588: PUSH
57589: LD_VAR 0 2
57593: PUSH
57594: LD_INT 4
57596: MINUS
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// end ; 5 :
57613: GO 57753
57615: LD_INT 5
57617: DOUBLE
57618: EQUAL
57619: IFTRUE 57623
57621: GO 57752
57623: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57624: LD_ADDR_VAR 0 5
57628: PUSH
57629: LD_VAR 0 1
57633: PUSH
57634: LD_INT 4
57636: MINUS
57637: PUSH
57638: LD_VAR 0 2
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: PUSH
57651: LD_VAR 0 1
57655: PUSH
57656: LD_VAR 0 2
57660: PUSH
57661: LD_INT 4
57663: MINUS
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: PUSH
57673: LD_VAR 0 1
57677: PUSH
57678: LD_INT 4
57680: PLUS
57681: PUSH
57682: LD_VAR 0 2
57686: PUSH
57687: LD_INT 4
57689: PLUS
57690: PUSH
57691: LD_INT 5
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: LD_VAR 0 1
57703: PUSH
57704: LD_INT 3
57706: PLUS
57707: PUSH
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: PUSH
57721: LD_VAR 0 1
57725: PUSH
57726: LD_VAR 0 2
57730: PUSH
57731: LD_INT 3
57733: PLUS
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// end ; end ;
57750: GO 57753
57752: POP
// result := list ;
57753: LD_ADDR_VAR 0 4
57757: PUSH
57758: LD_VAR 0 5
57762: ST_TO_ADDR
// end ;
57763: LD_VAR 0 4
57767: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57768: LD_INT 0
57770: PPUSH
57771: PPUSH
57772: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57773: LD_VAR 0 1
57777: NOT
57778: PUSH
57779: LD_VAR 0 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: IN
57802: NOT
57803: OR
57804: IFFALSE 57808
// exit ;
57806: GO 57891
// tmp := [ ] ;
57808: LD_ADDR_VAR 0 5
57812: PUSH
57813: EMPTY
57814: ST_TO_ADDR
// for i in units do
57815: LD_ADDR_VAR 0 4
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: FOR_IN
57826: IFFALSE 57860
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57828: LD_ADDR_VAR 0 5
57832: PUSH
57833: LD_VAR 0 5
57837: PPUSH
57838: LD_VAR 0 4
57842: PPUSH
57843: LD_VAR 0 2
57847: PPUSH
57848: CALL_OW 259
57852: PPUSH
57853: CALL 59264 0 2
57857: ST_TO_ADDR
57858: GO 57825
57860: POP
57861: POP
// if not tmp then
57862: LD_VAR 0 5
57866: NOT
57867: IFFALSE 57871
// exit ;
57869: GO 57891
// result := SortListByListDesc ( units , tmp ) ;
57871: LD_ADDR_VAR 0 3
57875: PUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_VAR 0 5
57885: PPUSH
57886: CALL_OW 77
57890: ST_TO_ADDR
// end ;
57891: LD_VAR 0 3
57895: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57896: LD_INT 0
57898: PPUSH
57899: PPUSH
57900: PPUSH
// result := false ;
57901: LD_ADDR_VAR 0 3
57905: PUSH
57906: LD_INT 0
57908: ST_TO_ADDR
// if not building then
57909: LD_VAR 0 2
57913: NOT
57914: IFFALSE 57918
// exit ;
57916: GO 58056
// x := GetX ( building ) ;
57918: LD_ADDR_VAR 0 4
57922: PUSH
57923: LD_VAR 0 2
57927: PPUSH
57928: CALL_OW 250
57932: ST_TO_ADDR
// y := GetY ( building ) ;
57933: LD_ADDR_VAR 0 5
57937: PUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: CALL_OW 251
57947: ST_TO_ADDR
// if not x or not y then
57948: LD_VAR 0 4
57952: NOT
57953: PUSH
57954: LD_VAR 0 5
57958: NOT
57959: OR
57960: IFFALSE 57964
// exit ;
57962: GO 58056
// if GetTaskList ( unit ) then
57964: LD_VAR 0 1
57968: PPUSH
57969: CALL_OW 437
57973: IFFALSE 58056
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57975: LD_STRING e
57977: PUSH
57978: LD_VAR 0 1
57982: PPUSH
57983: CALL_OW 437
57987: PUSH
57988: LD_INT 1
57990: ARRAY
57991: PUSH
57992: LD_INT 1
57994: ARRAY
57995: EQUAL
57996: PUSH
57997: LD_VAR 0 4
58001: PUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 437
58011: PUSH
58012: LD_INT 1
58014: ARRAY
58015: PUSH
58016: LD_INT 2
58018: ARRAY
58019: EQUAL
58020: AND
58021: PUSH
58022: LD_VAR 0 5
58026: PUSH
58027: LD_VAR 0 1
58031: PPUSH
58032: CALL_OW 437
58036: PUSH
58037: LD_INT 1
58039: ARRAY
58040: PUSH
58041: LD_INT 3
58043: ARRAY
58044: EQUAL
58045: AND
58046: IFFALSE 58056
// result := true end ;
58048: LD_ADDR_VAR 0 3
58052: PUSH
58053: LD_INT 1
58055: ST_TO_ADDR
// end ;
58056: LD_VAR 0 3
58060: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58061: LD_INT 0
58063: PPUSH
// result := false ;
58064: LD_ADDR_VAR 0 4
58068: PUSH
58069: LD_INT 0
58071: ST_TO_ADDR
// if GetTaskList ( unit ) then
58072: LD_VAR 0 1
58076: PPUSH
58077: CALL_OW 437
58081: IFFALSE 58164
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58083: LD_STRING M
58085: PUSH
58086: LD_VAR 0 1
58090: PPUSH
58091: CALL_OW 437
58095: PUSH
58096: LD_INT 1
58098: ARRAY
58099: PUSH
58100: LD_INT 1
58102: ARRAY
58103: EQUAL
58104: PUSH
58105: LD_VAR 0 2
58109: PUSH
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 437
58119: PUSH
58120: LD_INT 1
58122: ARRAY
58123: PUSH
58124: LD_INT 2
58126: ARRAY
58127: EQUAL
58128: AND
58129: PUSH
58130: LD_VAR 0 3
58134: PUSH
58135: LD_VAR 0 1
58139: PPUSH
58140: CALL_OW 437
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: PUSH
58149: LD_INT 3
58151: ARRAY
58152: EQUAL
58153: AND
58154: IFFALSE 58164
// result := true ;
58156: LD_ADDR_VAR 0 4
58160: PUSH
58161: LD_INT 1
58163: ST_TO_ADDR
// end ; end ;
58164: LD_VAR 0 4
58168: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58169: LD_INT 0
58171: PPUSH
58172: PPUSH
58173: PPUSH
58174: PPUSH
// if not unit or not area then
58175: LD_VAR 0 1
58179: NOT
58180: PUSH
58181: LD_VAR 0 2
58185: NOT
58186: OR
58187: IFFALSE 58191
// exit ;
58189: GO 58367
// tmp := AreaToList ( area , i ) ;
58191: LD_ADDR_VAR 0 6
58195: PUSH
58196: LD_VAR 0 2
58200: PPUSH
58201: LD_VAR 0 5
58205: PPUSH
58206: CALL_OW 517
58210: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58211: LD_ADDR_VAR 0 5
58215: PUSH
58216: DOUBLE
58217: LD_INT 1
58219: DEC
58220: ST_TO_ADDR
58221: LD_VAR 0 6
58225: PUSH
58226: LD_INT 1
58228: ARRAY
58229: PUSH
58230: FOR_TO
58231: IFFALSE 58365
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58233: LD_ADDR_VAR 0 7
58237: PUSH
58238: LD_VAR 0 6
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PUSH
58247: LD_VAR 0 5
58251: ARRAY
58252: PUSH
58253: LD_VAR 0 6
58257: PUSH
58258: LD_INT 2
58260: ARRAY
58261: PUSH
58262: LD_VAR 0 5
58266: ARRAY
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58272: LD_INT 92
58274: PUSH
58275: LD_VAR 0 7
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PUSH
58284: LD_VAR 0 7
58288: PUSH
58289: LD_INT 2
58291: ARRAY
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: PPUSH
58302: CALL_OW 69
58306: PUSH
58307: LD_INT 0
58309: EQUAL
58310: IFFALSE 58363
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58312: LD_VAR 0 1
58316: PPUSH
58317: LD_VAR 0 7
58321: PUSH
58322: LD_INT 1
58324: ARRAY
58325: PPUSH
58326: LD_VAR 0 7
58330: PUSH
58331: LD_INT 2
58333: ARRAY
58334: PPUSH
58335: LD_VAR 0 3
58339: PPUSH
58340: CALL_OW 48
// result := IsPlaced ( unit ) ;
58344: LD_ADDR_VAR 0 4
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 305
58358: ST_TO_ADDR
// exit ;
58359: POP
58360: POP
58361: GO 58367
// end ; end ;
58363: GO 58230
58365: POP
58366: POP
// end ;
58367: LD_VAR 0 4
58371: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58372: LD_INT 0
58374: PPUSH
58375: PPUSH
58376: PPUSH
// if not side or side > 8 then
58377: LD_VAR 0 1
58381: NOT
58382: PUSH
58383: LD_VAR 0 1
58387: PUSH
58388: LD_INT 8
58390: GREATER
58391: OR
58392: IFFALSE 58396
// exit ;
58394: GO 58583
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58396: LD_ADDR_VAR 0 4
58400: PUSH
58401: LD_INT 22
58403: PUSH
58404: LD_VAR 0 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 21
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PPUSH
58427: CALL_OW 69
58431: ST_TO_ADDR
// if not tmp then
58432: LD_VAR 0 4
58436: NOT
58437: IFFALSE 58441
// exit ;
58439: GO 58583
// enable_addtolog := true ;
58441: LD_ADDR_OWVAR 81
58445: PUSH
58446: LD_INT 1
58448: ST_TO_ADDR
// AddToLog ( [ ) ;
58449: LD_STRING [
58451: PPUSH
58452: CALL_OW 561
// for i in tmp do
58456: LD_ADDR_VAR 0 3
58460: PUSH
58461: LD_VAR 0 4
58465: PUSH
58466: FOR_IN
58467: IFFALSE 58574
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58469: LD_STRING [
58471: PUSH
58472: LD_VAR 0 3
58476: PPUSH
58477: CALL_OW 266
58481: STR
58482: PUSH
58483: LD_STRING , 
58485: STR
58486: PUSH
58487: LD_VAR 0 3
58491: PPUSH
58492: CALL_OW 250
58496: STR
58497: PUSH
58498: LD_STRING , 
58500: STR
58501: PUSH
58502: LD_VAR 0 3
58506: PPUSH
58507: CALL_OW 251
58511: STR
58512: PUSH
58513: LD_STRING , 
58515: STR
58516: PUSH
58517: LD_VAR 0 3
58521: PPUSH
58522: CALL_OW 254
58526: STR
58527: PUSH
58528: LD_STRING , 
58530: STR
58531: PUSH
58532: LD_VAR 0 3
58536: PPUSH
58537: LD_INT 1
58539: PPUSH
58540: CALL_OW 268
58544: STR
58545: PUSH
58546: LD_STRING , 
58548: STR
58549: PUSH
58550: LD_VAR 0 3
58554: PPUSH
58555: LD_INT 2
58557: PPUSH
58558: CALL_OW 268
58562: STR
58563: PUSH
58564: LD_STRING ],
58566: STR
58567: PPUSH
58568: CALL_OW 561
// end ;
58572: GO 58466
58574: POP
58575: POP
// AddToLog ( ]; ) ;
58576: LD_STRING ];
58578: PPUSH
58579: CALL_OW 561
// end ;
58583: LD_VAR 0 2
58587: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58588: LD_INT 0
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
// if not area or not rate or not max then
58595: LD_VAR 0 1
58599: NOT
58600: PUSH
58601: LD_VAR 0 2
58605: NOT
58606: OR
58607: PUSH
58608: LD_VAR 0 4
58612: NOT
58613: OR
58614: IFFALSE 58618
// exit ;
58616: GO 58807
// while 1 do
58618: LD_INT 1
58620: IFFALSE 58807
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58622: LD_ADDR_VAR 0 9
58626: PUSH
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_INT 1
58634: PPUSH
58635: CALL_OW 287
58639: PUSH
58640: LD_INT 10
58642: MUL
58643: ST_TO_ADDR
// r := rate / 10 ;
58644: LD_ADDR_VAR 0 7
58648: PUSH
58649: LD_VAR 0 2
58653: PUSH
58654: LD_INT 10
58656: DIVREAL
58657: ST_TO_ADDR
// time := 1 1$00 ;
58658: LD_ADDR_VAR 0 8
58662: PUSH
58663: LD_INT 2100
58665: ST_TO_ADDR
// if amount < min then
58666: LD_VAR 0 9
58670: PUSH
58671: LD_VAR 0 3
58675: LESS
58676: IFFALSE 58694
// r := r * 2 else
58678: LD_ADDR_VAR 0 7
58682: PUSH
58683: LD_VAR 0 7
58687: PUSH
58688: LD_INT 2
58690: MUL
58691: ST_TO_ADDR
58692: GO 58720
// if amount > max then
58694: LD_VAR 0 9
58698: PUSH
58699: LD_VAR 0 4
58703: GREATER
58704: IFFALSE 58720
// r := r / 2 ;
58706: LD_ADDR_VAR 0 7
58710: PUSH
58711: LD_VAR 0 7
58715: PUSH
58716: LD_INT 2
58718: DIVREAL
58719: ST_TO_ADDR
// time := time / r ;
58720: LD_ADDR_VAR 0 8
58724: PUSH
58725: LD_VAR 0 8
58729: PUSH
58730: LD_VAR 0 7
58734: DIVREAL
58735: ST_TO_ADDR
// if time < 0 then
58736: LD_VAR 0 8
58740: PUSH
58741: LD_INT 0
58743: LESS
58744: IFFALSE 58761
// time := time * - 1 ;
58746: LD_ADDR_VAR 0 8
58750: PUSH
58751: LD_VAR 0 8
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: MUL
58760: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58761: LD_VAR 0 8
58765: PUSH
58766: LD_INT 35
58768: PPUSH
58769: LD_INT 875
58771: PPUSH
58772: CALL_OW 12
58776: PLUS
58777: PPUSH
58778: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58782: LD_INT 1
58784: PPUSH
58785: LD_INT 5
58787: PPUSH
58788: CALL_OW 12
58792: PPUSH
58793: LD_VAR 0 1
58797: PPUSH
58798: LD_INT 1
58800: PPUSH
58801: CALL_OW 55
// end ;
58805: GO 58618
// end ;
58807: LD_VAR 0 5
58811: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58812: LD_INT 0
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
// if not turrets or not factories then
58822: LD_VAR 0 1
58826: NOT
58827: PUSH
58828: LD_VAR 0 2
58832: NOT
58833: OR
58834: IFFALSE 58838
// exit ;
58836: GO 59145
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58838: LD_ADDR_VAR 0 10
58842: PUSH
58843: LD_INT 5
58845: PUSH
58846: LD_INT 6
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 5
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 24
58880: PUSH
58881: LD_INT 25
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 23
58890: PUSH
58891: LD_INT 27
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 42
58904: PUSH
58905: LD_INT 43
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 44
58914: PUSH
58915: LD_INT 46
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 45
58924: PUSH
58925: LD_INT 47
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// result := [ ] ;
58942: LD_ADDR_VAR 0 3
58946: PUSH
58947: EMPTY
58948: ST_TO_ADDR
// for i in turrets do
58949: LD_ADDR_VAR 0 4
58953: PUSH
58954: LD_VAR 0 1
58958: PUSH
58959: FOR_IN
58960: IFFALSE 59143
// begin nat := GetNation ( i ) ;
58962: LD_ADDR_VAR 0 7
58966: PUSH
58967: LD_VAR 0 4
58971: PPUSH
58972: CALL_OW 248
58976: ST_TO_ADDR
// weapon := 0 ;
58977: LD_ADDR_VAR 0 8
58981: PUSH
58982: LD_INT 0
58984: ST_TO_ADDR
// if not nat then
58985: LD_VAR 0 7
58989: NOT
58990: IFFALSE 58994
// continue ;
58992: GO 58959
// for j in list [ nat ] do
58994: LD_ADDR_VAR 0 5
58998: PUSH
58999: LD_VAR 0 10
59003: PUSH
59004: LD_VAR 0 7
59008: ARRAY
59009: PUSH
59010: FOR_IN
59011: IFFALSE 59052
// if GetBWeapon ( i ) = j [ 1 ] then
59013: LD_VAR 0 4
59017: PPUSH
59018: CALL_OW 269
59022: PUSH
59023: LD_VAR 0 5
59027: PUSH
59028: LD_INT 1
59030: ARRAY
59031: EQUAL
59032: IFFALSE 59050
// begin weapon := j [ 2 ] ;
59034: LD_ADDR_VAR 0 8
59038: PUSH
59039: LD_VAR 0 5
59043: PUSH
59044: LD_INT 2
59046: ARRAY
59047: ST_TO_ADDR
// break ;
59048: GO 59052
// end ;
59050: GO 59010
59052: POP
59053: POP
// if not weapon then
59054: LD_VAR 0 8
59058: NOT
59059: IFFALSE 59063
// continue ;
59061: GO 58959
// for k in factories do
59063: LD_ADDR_VAR 0 6
59067: PUSH
59068: LD_VAR 0 2
59072: PUSH
59073: FOR_IN
59074: IFFALSE 59139
// begin weapons := AvailableWeaponList ( k ) ;
59076: LD_ADDR_VAR 0 9
59080: PUSH
59081: LD_VAR 0 6
59085: PPUSH
59086: CALL_OW 478
59090: ST_TO_ADDR
// if not weapons then
59091: LD_VAR 0 9
59095: NOT
59096: IFFALSE 59100
// continue ;
59098: GO 59073
// if weapon in weapons then
59100: LD_VAR 0 8
59104: PUSH
59105: LD_VAR 0 9
59109: IN
59110: IFFALSE 59137
// begin result := [ i , weapon ] ;
59112: LD_ADDR_VAR 0 3
59116: PUSH
59117: LD_VAR 0 4
59121: PUSH
59122: LD_VAR 0 8
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// exit ;
59131: POP
59132: POP
59133: POP
59134: POP
59135: GO 59145
// end ; end ;
59137: GO 59073
59139: POP
59140: POP
// end ;
59141: GO 58959
59143: POP
59144: POP
// end ;
59145: LD_VAR 0 3
59149: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59150: LD_INT 0
59152: PPUSH
// if not side or side > 8 then
59153: LD_VAR 0 3
59157: NOT
59158: PUSH
59159: LD_VAR 0 3
59163: PUSH
59164: LD_INT 8
59166: GREATER
59167: OR
59168: IFFALSE 59172
// exit ;
59170: GO 59231
// if not range then
59172: LD_VAR 0 4
59176: NOT
59177: IFFALSE 59188
// range := - 12 ;
59179: LD_ADDR_VAR 0 4
59183: PUSH
59184: LD_INT 12
59186: NEG
59187: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59188: LD_VAR 0 1
59192: PPUSH
59193: LD_VAR 0 2
59197: PPUSH
59198: LD_VAR 0 3
59202: PPUSH
59203: LD_VAR 0 4
59207: PPUSH
59208: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59212: LD_VAR 0 1
59216: PPUSH
59217: LD_VAR 0 2
59221: PPUSH
59222: LD_VAR 0 3
59226: PPUSH
59227: CALL_OW 331
// end ;
59231: LD_VAR 0 5
59235: RET
// export function Video ( mode ) ; begin
59236: LD_INT 0
59238: PPUSH
// ingame_video = mode ;
59239: LD_ADDR_OWVAR 52
59243: PUSH
59244: LD_VAR 0 1
59248: ST_TO_ADDR
// interface_hidden = mode ;
59249: LD_ADDR_OWVAR 54
59253: PUSH
59254: LD_VAR 0 1
59258: ST_TO_ADDR
// end ;
59259: LD_VAR 0 2
59263: RET
// export function Join ( array , element ) ; begin
59264: LD_INT 0
59266: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59267: LD_ADDR_VAR 0 3
59271: PUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_INT 1
59284: PLUS
59285: PPUSH
59286: LD_VAR 0 2
59290: PPUSH
59291: CALL_OW 1
59295: ST_TO_ADDR
// end ;
59296: LD_VAR 0 3
59300: RET
// export function JoinUnion ( array , element ) ; begin
59301: LD_INT 0
59303: PPUSH
// result := array union element ;
59304: LD_ADDR_VAR 0 3
59308: PUSH
59309: LD_VAR 0 1
59313: PUSH
59314: LD_VAR 0 2
59318: UNION
59319: ST_TO_ADDR
// end ;
59320: LD_VAR 0 3
59324: RET
// export function GetBehemoths ( side ) ; begin
59325: LD_INT 0
59327: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59328: LD_ADDR_VAR 0 2
59332: PUSH
59333: LD_INT 22
59335: PUSH
59336: LD_VAR 0 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 31
59347: PUSH
59348: LD_INT 25
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PPUSH
59359: CALL_OW 69
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 2
59368: RET
// export function Shuffle ( array ) ; var i , index ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
// result := [ ] ;
59374: LD_ADDR_VAR 0 2
59378: PUSH
59379: EMPTY
59380: ST_TO_ADDR
// if not array then
59381: LD_VAR 0 1
59385: NOT
59386: IFFALSE 59390
// exit ;
59388: GO 59489
// Randomize ;
59390: CALL_OW 10
// for i = array downto 1 do
59394: LD_ADDR_VAR 0 3
59398: PUSH
59399: DOUBLE
59400: LD_VAR 0 1
59404: INC
59405: ST_TO_ADDR
59406: LD_INT 1
59408: PUSH
59409: FOR_DOWNTO
59410: IFFALSE 59487
// begin index := rand ( 1 , array ) ;
59412: LD_ADDR_VAR 0 4
59416: PUSH
59417: LD_INT 1
59419: PPUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL_OW 12
59429: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59430: LD_ADDR_VAR 0 2
59434: PUSH
59435: LD_VAR 0 2
59439: PPUSH
59440: LD_VAR 0 2
59444: PUSH
59445: LD_INT 1
59447: PLUS
59448: PPUSH
59449: LD_VAR 0 1
59453: PUSH
59454: LD_VAR 0 4
59458: ARRAY
59459: PPUSH
59460: CALL_OW 2
59464: ST_TO_ADDR
// array := Delete ( array , index ) ;
59465: LD_ADDR_VAR 0 1
59469: PUSH
59470: LD_VAR 0 1
59474: PPUSH
59475: LD_VAR 0 4
59479: PPUSH
59480: CALL_OW 3
59484: ST_TO_ADDR
// end ;
59485: GO 59409
59487: POP
59488: POP
// end ;
59489: LD_VAR 0 2
59493: RET
// export function GetBaseMaterials ( base ) ; begin
59494: LD_INT 0
59496: PPUSH
// result := [ 0 , 0 , 0 ] ;
59497: LD_ADDR_VAR 0 2
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: ST_TO_ADDR
// if not base then
59516: LD_VAR 0 1
59520: NOT
59521: IFFALSE 59525
// exit ;
59523: GO 59574
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59525: LD_ADDR_VAR 0 2
59529: PUSH
59530: LD_VAR 0 1
59534: PPUSH
59535: LD_INT 1
59537: PPUSH
59538: CALL_OW 275
59542: PUSH
59543: LD_VAR 0 1
59547: PPUSH
59548: LD_INT 2
59550: PPUSH
59551: CALL_OW 275
59555: PUSH
59556: LD_VAR 0 1
59560: PPUSH
59561: LD_INT 3
59563: PPUSH
59564: CALL_OW 275
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: ST_TO_ADDR
// end ;
59574: LD_VAR 0 2
59578: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59579: LD_INT 0
59581: PPUSH
59582: PPUSH
// result := array ;
59583: LD_ADDR_VAR 0 3
59587: PUSH
59588: LD_VAR 0 1
59592: ST_TO_ADDR
// if size >= result then
59593: LD_VAR 0 2
59597: PUSH
59598: LD_VAR 0 3
59602: GREATEREQUAL
59603: IFFALSE 59607
// exit ;
59605: GO 59657
// if size then
59607: LD_VAR 0 2
59611: IFFALSE 59657
// for i := array downto size do
59613: LD_ADDR_VAR 0 4
59617: PUSH
59618: DOUBLE
59619: LD_VAR 0 1
59623: INC
59624: ST_TO_ADDR
59625: LD_VAR 0 2
59629: PUSH
59630: FOR_DOWNTO
59631: IFFALSE 59655
// result := Delete ( result , result ) ;
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_VAR 0 3
59642: PPUSH
59643: LD_VAR 0 3
59647: PPUSH
59648: CALL_OW 3
59652: ST_TO_ADDR
59653: GO 59630
59655: POP
59656: POP
// end ;
59657: LD_VAR 0 3
59661: RET
// export function ComExit ( unit ) ; var tmp ; begin
59662: LD_INT 0
59664: PPUSH
59665: PPUSH
// if not IsInUnit ( unit ) then
59666: LD_VAR 0 1
59670: PPUSH
59671: CALL_OW 310
59675: NOT
59676: IFFALSE 59680
// exit ;
59678: GO 59740
// tmp := IsInUnit ( unit ) ;
59680: LD_ADDR_VAR 0 3
59684: PUSH
59685: LD_VAR 0 1
59689: PPUSH
59690: CALL_OW 310
59694: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59695: LD_VAR 0 3
59699: PPUSH
59700: CALL_OW 247
59704: PUSH
59705: LD_INT 2
59707: EQUAL
59708: IFFALSE 59721
// ComExitVehicle ( unit ) else
59710: LD_VAR 0 1
59714: PPUSH
59715: CALL_OW 121
59719: GO 59730
// ComExitBuilding ( unit ) ;
59721: LD_VAR 0 1
59725: PPUSH
59726: CALL_OW 122
// result := tmp ;
59730: LD_ADDR_VAR 0 2
59734: PUSH
59735: LD_VAR 0 3
59739: ST_TO_ADDR
// end ;
59740: LD_VAR 0 2
59744: RET
// export function ComExitAll ( units ) ; var i ; begin
59745: LD_INT 0
59747: PPUSH
59748: PPUSH
// if not units then
59749: LD_VAR 0 1
59753: NOT
59754: IFFALSE 59758
// exit ;
59756: GO 59784
// for i in units do
59758: LD_ADDR_VAR 0 3
59762: PUSH
59763: LD_VAR 0 1
59767: PUSH
59768: FOR_IN
59769: IFFALSE 59782
// ComExit ( i ) ;
59771: LD_VAR 0 3
59775: PPUSH
59776: CALL 59662 0 1
59780: GO 59768
59782: POP
59783: POP
// end ;
59784: LD_VAR 0 2
59788: RET
// export function ResetHc ; begin
59789: LD_INT 0
59791: PPUSH
// InitHc ;
59792: CALL_OW 19
// hc_importance := 0 ;
59796: LD_ADDR_OWVAR 32
59800: PUSH
59801: LD_INT 0
59803: ST_TO_ADDR
// end ;
59804: LD_VAR 0 1
59808: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
59813: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59814: LD_ADDR_VAR 0 6
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: LD_VAR 0 3
59828: PLUS
59829: PUSH
59830: LD_INT 2
59832: DIV
59833: ST_TO_ADDR
// if _x < 0 then
59834: LD_VAR 0 6
59838: PUSH
59839: LD_INT 0
59841: LESS
59842: IFFALSE 59859
// _x := _x * - 1 ;
59844: LD_ADDR_VAR 0 6
59848: PUSH
59849: LD_VAR 0 6
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: MUL
59858: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59859: LD_ADDR_VAR 0 7
59863: PUSH
59864: LD_VAR 0 2
59868: PUSH
59869: LD_VAR 0 4
59873: PLUS
59874: PUSH
59875: LD_INT 2
59877: DIV
59878: ST_TO_ADDR
// if _y < 0 then
59879: LD_VAR 0 7
59883: PUSH
59884: LD_INT 0
59886: LESS
59887: IFFALSE 59904
// _y := _y * - 1 ;
59889: LD_ADDR_VAR 0 7
59893: PUSH
59894: LD_VAR 0 7
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: MUL
59903: ST_TO_ADDR
// result := [ _x , _y ] ;
59904: LD_ADDR_VAR 0 5
59908: PUSH
59909: LD_VAR 0 6
59913: PUSH
59914: LD_VAR 0 7
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// end ;
59923: LD_VAR 0 5
59927: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59928: LD_INT 0
59930: PPUSH
59931: PPUSH
59932: PPUSH
59933: PPUSH
// task := GetTaskList ( unit ) ;
59934: LD_ADDR_VAR 0 7
59938: PUSH
59939: LD_VAR 0 1
59943: PPUSH
59944: CALL_OW 437
59948: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59949: LD_VAR 0 7
59953: NOT
59954: PUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: LD_VAR 0 2
59964: PPUSH
59965: CALL_OW 308
59969: NOT
59970: AND
59971: IFFALSE 59975
// exit ;
59973: GO 60093
// if IsInArea ( unit , area ) then
59975: LD_VAR 0 1
59979: PPUSH
59980: LD_VAR 0 2
59984: PPUSH
59985: CALL_OW 308
59989: IFFALSE 60007
// begin ComMoveToArea ( unit , goAway ) ;
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_VAR 0 3
60000: PPUSH
60001: CALL_OW 113
// exit ;
60005: GO 60093
// end ; if task [ 1 ] [ 1 ] <> M then
60007: LD_VAR 0 7
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: PUSH
60016: LD_INT 1
60018: ARRAY
60019: PUSH
60020: LD_STRING M
60022: NONEQUAL
60023: IFFALSE 60027
// exit ;
60025: GO 60093
// x := task [ 1 ] [ 2 ] ;
60027: LD_ADDR_VAR 0 5
60031: PUSH
60032: LD_VAR 0 7
60036: PUSH
60037: LD_INT 1
60039: ARRAY
60040: PUSH
60041: LD_INT 2
60043: ARRAY
60044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60045: LD_ADDR_VAR 0 6
60049: PUSH
60050: LD_VAR 0 7
60054: PUSH
60055: LD_INT 1
60057: ARRAY
60058: PUSH
60059: LD_INT 3
60061: ARRAY
60062: ST_TO_ADDR
// if InArea ( x , y , area ) then
60063: LD_VAR 0 5
60067: PPUSH
60068: LD_VAR 0 6
60072: PPUSH
60073: LD_VAR 0 2
60077: PPUSH
60078: CALL_OW 309
60082: IFFALSE 60093
// ComStop ( unit ) ;
60084: LD_VAR 0 1
60088: PPUSH
60089: CALL_OW 141
// end ;
60093: LD_VAR 0 4
60097: RET
// export function Abs ( value ) ; begin
60098: LD_INT 0
60100: PPUSH
// result := value ;
60101: LD_ADDR_VAR 0 2
60105: PUSH
60106: LD_VAR 0 1
60110: ST_TO_ADDR
// if value < 0 then
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 0
60118: LESS
60119: IFFALSE 60136
// result := value * - 1 ;
60121: LD_ADDR_VAR 0 2
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: MUL
60135: ST_TO_ADDR
// end ;
60136: LD_VAR 0 2
60140: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60141: LD_INT 0
60143: PPUSH
60144: PPUSH
60145: PPUSH
60146: PPUSH
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
// if not unit or not building then
60151: LD_VAR 0 1
60155: NOT
60156: PUSH
60157: LD_VAR 0 2
60161: NOT
60162: OR
60163: IFFALSE 60167
// exit ;
60165: GO 60393
// x := GetX ( building ) ;
60167: LD_ADDR_VAR 0 4
60171: PUSH
60172: LD_VAR 0 2
60176: PPUSH
60177: CALL_OW 250
60181: ST_TO_ADDR
// y := GetY ( building ) ;
60182: LD_ADDR_VAR 0 6
60186: PUSH
60187: LD_VAR 0 2
60191: PPUSH
60192: CALL_OW 251
60196: ST_TO_ADDR
// d := GetDir ( building ) ;
60197: LD_ADDR_VAR 0 8
60201: PUSH
60202: LD_VAR 0 2
60206: PPUSH
60207: CALL_OW 254
60211: ST_TO_ADDR
// r := 4 ;
60212: LD_ADDR_VAR 0 9
60216: PUSH
60217: LD_INT 4
60219: ST_TO_ADDR
// for i := 1 to 5 do
60220: LD_ADDR_VAR 0 10
60224: PUSH
60225: DOUBLE
60226: LD_INT 1
60228: DEC
60229: ST_TO_ADDR
60230: LD_INT 5
60232: PUSH
60233: FOR_TO
60234: IFFALSE 60391
// begin _x := ShiftX ( x , d , r + i ) ;
60236: LD_ADDR_VAR 0 5
60240: PUSH
60241: LD_VAR 0 4
60245: PPUSH
60246: LD_VAR 0 8
60250: PPUSH
60251: LD_VAR 0 9
60255: PUSH
60256: LD_VAR 0 10
60260: PLUS
60261: PPUSH
60262: CALL_OW 272
60266: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60267: LD_ADDR_VAR 0 7
60271: PUSH
60272: LD_VAR 0 6
60276: PPUSH
60277: LD_VAR 0 8
60281: PPUSH
60282: LD_VAR 0 9
60286: PUSH
60287: LD_VAR 0 10
60291: PLUS
60292: PPUSH
60293: CALL_OW 273
60297: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60298: LD_VAR 0 5
60302: PPUSH
60303: LD_VAR 0 7
60307: PPUSH
60308: CALL_OW 488
60312: PUSH
60313: LD_VAR 0 5
60317: PPUSH
60318: LD_VAR 0 7
60322: PPUSH
60323: CALL_OW 428
60327: PPUSH
60328: CALL_OW 247
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: IN
60343: NOT
60344: AND
60345: IFFALSE 60389
// begin ComMoveXY ( unit , _x , _y ) ;
60347: LD_VAR 0 1
60351: PPUSH
60352: LD_VAR 0 5
60356: PPUSH
60357: LD_VAR 0 7
60361: PPUSH
60362: CALL_OW 111
// result := [ _x , _y ] ;
60366: LD_ADDR_VAR 0 3
60370: PUSH
60371: LD_VAR 0 5
60375: PUSH
60376: LD_VAR 0 7
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// exit ;
60385: POP
60386: POP
60387: GO 60393
// end ; end ;
60389: GO 60233
60391: POP
60392: POP
// end ;
60393: LD_VAR 0 3
60397: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60398: LD_INT 0
60400: PPUSH
60401: PPUSH
60402: PPUSH
// result := 0 ;
60403: LD_ADDR_VAR 0 3
60407: PUSH
60408: LD_INT 0
60410: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60411: LD_VAR 0 1
60415: PUSH
60416: LD_INT 0
60418: LESS
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: LD_INT 8
60427: GREATER
60428: OR
60429: PUSH
60430: LD_VAR 0 2
60434: PUSH
60435: LD_INT 0
60437: LESS
60438: OR
60439: PUSH
60440: LD_VAR 0 2
60444: PUSH
60445: LD_INT 8
60447: GREATER
60448: OR
60449: IFFALSE 60453
// exit ;
60451: GO 60528
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60453: LD_ADDR_VAR 0 4
60457: PUSH
60458: LD_INT 22
60460: PUSH
60461: LD_VAR 0 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PPUSH
60470: CALL_OW 69
60474: PUSH
60475: FOR_IN
60476: IFFALSE 60526
// begin un := UnitShoot ( i ) ;
60478: LD_ADDR_VAR 0 5
60482: PUSH
60483: LD_VAR 0 4
60487: PPUSH
60488: CALL_OW 504
60492: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60493: LD_VAR 0 5
60497: PPUSH
60498: CALL_OW 255
60502: PUSH
60503: LD_VAR 0 1
60507: EQUAL
60508: IFFALSE 60524
// begin result := un ;
60510: LD_ADDR_VAR 0 3
60514: PUSH
60515: LD_VAR 0 5
60519: ST_TO_ADDR
// exit ;
60520: POP
60521: POP
60522: GO 60528
// end ; end ;
60524: GO 60475
60526: POP
60527: POP
// end ;
60528: LD_VAR 0 3
60532: RET
// export function GetCargoBay ( units ) ; begin
60533: LD_INT 0
60535: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60536: LD_ADDR_VAR 0 2
60540: PUSH
60541: LD_VAR 0 1
60545: PPUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 34
60551: PUSH
60552: LD_INT 12
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 34
60561: PUSH
60562: LD_INT 51
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 34
60571: PUSH
60572: LD_INT 32
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 34
60581: PUSH
60582: LD_INT 89
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: PPUSH
60596: CALL_OW 72
60600: ST_TO_ADDR
// end ;
60601: LD_VAR 0 2
60605: RET
// export function Negate ( value ) ; begin
60606: LD_INT 0
60608: PPUSH
// result := not value ;
60609: LD_ADDR_VAR 0 2
60613: PUSH
60614: LD_VAR 0 1
60618: NOT
60619: ST_TO_ADDR
// end ;
60620: LD_VAR 0 2
60624: RET
// export function Inc ( value ) ; begin
60625: LD_INT 0
60627: PPUSH
// result := value + 1 ;
60628: LD_ADDR_VAR 0 2
60632: PUSH
60633: LD_VAR 0 1
60637: PUSH
60638: LD_INT 1
60640: PLUS
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 2
60646: RET
// export function Dec ( value ) ; begin
60647: LD_INT 0
60649: PPUSH
// result := value - 1 ;
60650: LD_ADDR_VAR 0 2
60654: PUSH
60655: LD_VAR 0 1
60659: PUSH
60660: LD_INT 1
60662: MINUS
60663: ST_TO_ADDR
// end ;
60664: LD_VAR 0 2
60668: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60669: LD_INT 0
60671: PPUSH
60672: PPUSH
60673: PPUSH
60674: PPUSH
60675: PPUSH
60676: PPUSH
60677: PPUSH
60678: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60679: LD_VAR 0 1
60683: PPUSH
60684: LD_VAR 0 2
60688: PPUSH
60689: CALL_OW 488
60693: NOT
60694: PUSH
60695: LD_VAR 0 3
60699: PPUSH
60700: LD_VAR 0 4
60704: PPUSH
60705: CALL_OW 488
60709: NOT
60710: OR
60711: IFFALSE 60724
// begin result := - 1 ;
60713: LD_ADDR_VAR 0 5
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: ST_TO_ADDR
// exit ;
60722: GO 60959
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60724: LD_ADDR_VAR 0 12
60728: PUSH
60729: LD_VAR 0 1
60733: PPUSH
60734: LD_VAR 0 2
60738: PPUSH
60739: LD_VAR 0 3
60743: PPUSH
60744: LD_VAR 0 4
60748: PPUSH
60749: CALL 59809 0 4
60753: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60754: LD_ADDR_VAR 0 11
60758: PUSH
60759: LD_VAR 0 1
60763: PPUSH
60764: LD_VAR 0 2
60768: PPUSH
60769: LD_VAR 0 12
60773: PUSH
60774: LD_INT 1
60776: ARRAY
60777: PPUSH
60778: LD_VAR 0 12
60782: PUSH
60783: LD_INT 2
60785: ARRAY
60786: PPUSH
60787: CALL_OW 298
60791: ST_TO_ADDR
// distance := 9999 ;
60792: LD_ADDR_VAR 0 10
60796: PUSH
60797: LD_INT 9999
60799: ST_TO_ADDR
// for i := 0 to 5 do
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: DOUBLE
60806: LD_INT 0
60808: DEC
60809: ST_TO_ADDR
60810: LD_INT 5
60812: PUSH
60813: FOR_TO
60814: IFFALSE 60957
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60816: LD_ADDR_VAR 0 7
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: LD_VAR 0 6
60830: PPUSH
60831: LD_VAR 0 11
60835: PPUSH
60836: CALL_OW 272
60840: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60841: LD_ADDR_VAR 0 8
60845: PUSH
60846: LD_VAR 0 2
60850: PPUSH
60851: LD_VAR 0 6
60855: PPUSH
60856: LD_VAR 0 11
60860: PPUSH
60861: CALL_OW 273
60865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60866: LD_VAR 0 7
60870: PPUSH
60871: LD_VAR 0 8
60875: PPUSH
60876: CALL_OW 488
60880: NOT
60881: IFFALSE 60885
// continue ;
60883: GO 60813
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60885: LD_ADDR_VAR 0 9
60889: PUSH
60890: LD_VAR 0 12
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: PPUSH
60899: LD_VAR 0 12
60903: PUSH
60904: LD_INT 2
60906: ARRAY
60907: PPUSH
60908: LD_VAR 0 7
60912: PPUSH
60913: LD_VAR 0 8
60917: PPUSH
60918: CALL_OW 298
60922: ST_TO_ADDR
// if tmp < distance then
60923: LD_VAR 0 9
60927: PUSH
60928: LD_VAR 0 10
60932: LESS
60933: IFFALSE 60955
// begin result := i ;
60935: LD_ADDR_VAR 0 5
60939: PUSH
60940: LD_VAR 0 6
60944: ST_TO_ADDR
// distance := tmp ;
60945: LD_ADDR_VAR 0 10
60949: PUSH
60950: LD_VAR 0 9
60954: ST_TO_ADDR
// end ; end ;
60955: GO 60813
60957: POP
60958: POP
// end ;
60959: LD_VAR 0 5
60963: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60964: LD_INT 0
60966: PPUSH
60967: PPUSH
// if not driver or not IsInUnit ( driver ) then
60968: LD_VAR 0 1
60972: NOT
60973: PUSH
60974: LD_VAR 0 1
60978: PPUSH
60979: CALL_OW 310
60983: NOT
60984: OR
60985: IFFALSE 60989
// exit ;
60987: GO 61079
// vehicle := IsInUnit ( driver ) ;
60989: LD_ADDR_VAR 0 3
60993: PUSH
60994: LD_VAR 0 1
60998: PPUSH
60999: CALL_OW 310
61003: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61004: LD_VAR 0 1
61008: PPUSH
61009: LD_STRING \
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: PUSH
61039: LD_STRING E
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_VAR 0 3
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PPUSH
61075: CALL_OW 446
// end ;
61079: LD_VAR 0 2
61083: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
// if not driver or not IsInUnit ( driver ) then
61088: LD_VAR 0 1
61092: NOT
61093: PUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: CALL_OW 310
61103: NOT
61104: OR
61105: IFFALSE 61109
// exit ;
61107: GO 61199
// vehicle := IsInUnit ( driver ) ;
61109: LD_ADDR_VAR 0 3
61113: PUSH
61114: LD_VAR 0 1
61118: PPUSH
61119: CALL_OW 310
61123: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61124: LD_VAR 0 1
61128: PPUSH
61129: LD_STRING \
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_STRING E
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_VAR 0 3
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PPUSH
61195: CALL_OW 447
// end ;
61199: LD_VAR 0 2
61203: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61204: LD_INT 0
61206: PPUSH
61207: PPUSH
61208: PPUSH
// tmp := [ ] ;
61209: LD_ADDR_VAR 0 5
61213: PUSH
61214: EMPTY
61215: ST_TO_ADDR
// for i in units do
61216: LD_ADDR_VAR 0 4
61220: PUSH
61221: LD_VAR 0 1
61225: PUSH
61226: FOR_IN
61227: IFFALSE 61265
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61229: LD_ADDR_VAR 0 5
61233: PUSH
61234: LD_VAR 0 5
61238: PPUSH
61239: LD_VAR 0 5
61243: PUSH
61244: LD_INT 1
61246: PLUS
61247: PPUSH
61248: LD_VAR 0 4
61252: PPUSH
61253: CALL_OW 256
61257: PPUSH
61258: CALL_OW 2
61262: ST_TO_ADDR
61263: GO 61226
61265: POP
61266: POP
// if not tmp then
61267: LD_VAR 0 5
61271: NOT
61272: IFFALSE 61276
// exit ;
61274: GO 61324
// if asc then
61276: LD_VAR 0 2
61280: IFFALSE 61304
// result := SortListByListAsc ( units , tmp ) else
61282: LD_ADDR_VAR 0 3
61286: PUSH
61287: LD_VAR 0 1
61291: PPUSH
61292: LD_VAR 0 5
61296: PPUSH
61297: CALL_OW 76
61301: ST_TO_ADDR
61302: GO 61324
// result := SortListByListDesc ( units , tmp ) ;
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_VAR 0 1
61313: PPUSH
61314: LD_VAR 0 5
61318: PPUSH
61319: CALL_OW 77
61323: ST_TO_ADDR
// end ;
61324: LD_VAR 0 3
61328: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61329: LD_INT 0
61331: PPUSH
61332: PPUSH
// task := GetTaskList ( mech ) ;
61333: LD_ADDR_VAR 0 4
61337: PUSH
61338: LD_VAR 0 1
61342: PPUSH
61343: CALL_OW 437
61347: ST_TO_ADDR
// if not task then
61348: LD_VAR 0 4
61352: NOT
61353: IFFALSE 61357
// exit ;
61355: GO 61399
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61357: LD_ADDR_VAR 0 3
61361: PUSH
61362: LD_VAR 0 4
61366: PUSH
61367: LD_INT 1
61369: ARRAY
61370: PUSH
61371: LD_INT 1
61373: ARRAY
61374: PUSH
61375: LD_STRING r
61377: EQUAL
61378: PUSH
61379: LD_VAR 0 4
61383: PUSH
61384: LD_INT 1
61386: ARRAY
61387: PUSH
61388: LD_INT 4
61390: ARRAY
61391: PUSH
61392: LD_VAR 0 2
61396: EQUAL
61397: AND
61398: ST_TO_ADDR
// end ;
61399: LD_VAR 0 3
61403: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61404: LD_INT 0
61406: PPUSH
// SetDir ( unit , d ) ;
61407: LD_VAR 0 1
61411: PPUSH
61412: LD_VAR 0 4
61416: PPUSH
61417: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61421: LD_VAR 0 1
61425: PPUSH
61426: LD_VAR 0 2
61430: PPUSH
61431: LD_VAR 0 3
61435: PPUSH
61436: LD_VAR 0 5
61440: PPUSH
61441: CALL_OW 48
// end ;
61445: LD_VAR 0 6
61449: RET
// export function ToNaturalNumber ( number ) ; begin
61450: LD_INT 0
61452: PPUSH
// result := number div 1 ;
61453: LD_ADDR_VAR 0 2
61457: PUSH
61458: LD_VAR 0 1
61462: PUSH
61463: LD_INT 1
61465: DIV
61466: ST_TO_ADDR
// if number < 0 then
61467: LD_VAR 0 1
61471: PUSH
61472: LD_INT 0
61474: LESS
61475: IFFALSE 61485
// result := 0 ;
61477: LD_ADDR_VAR 0 2
61481: PUSH
61482: LD_INT 0
61484: ST_TO_ADDR
// end ;
61485: LD_VAR 0 2
61489: RET
// export function SortByClass ( units , class ) ; var un ; begin
61490: LD_INT 0
61492: PPUSH
61493: PPUSH
// if not units or not class then
61494: LD_VAR 0 1
61498: NOT
61499: PUSH
61500: LD_VAR 0 2
61504: NOT
61505: OR
61506: IFFALSE 61510
// exit ;
61508: GO 61605
// result := [ ] ;
61510: LD_ADDR_VAR 0 3
61514: PUSH
61515: EMPTY
61516: ST_TO_ADDR
// for un in units do
61517: LD_ADDR_VAR 0 4
61521: PUSH
61522: LD_VAR 0 1
61526: PUSH
61527: FOR_IN
61528: IFFALSE 61603
// if GetClass ( un ) = class then
61530: LD_VAR 0 4
61534: PPUSH
61535: CALL_OW 257
61539: PUSH
61540: LD_VAR 0 2
61544: EQUAL
61545: IFFALSE 61572
// result := Insert ( result , 1 , un ) else
61547: LD_ADDR_VAR 0 3
61551: PUSH
61552: LD_VAR 0 3
61556: PPUSH
61557: LD_INT 1
61559: PPUSH
61560: LD_VAR 0 4
61564: PPUSH
61565: CALL_OW 2
61569: ST_TO_ADDR
61570: GO 61601
// result := Replace ( result , result + 1 , un ) ;
61572: LD_ADDR_VAR 0 3
61576: PUSH
61577: LD_VAR 0 3
61581: PPUSH
61582: LD_VAR 0 3
61586: PUSH
61587: LD_INT 1
61589: PLUS
61590: PPUSH
61591: LD_VAR 0 4
61595: PPUSH
61596: CALL_OW 1
61600: ST_TO_ADDR
61601: GO 61527
61603: POP
61604: POP
// end ;
61605: LD_VAR 0 3
61609: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61610: LD_INT 0
61612: PPUSH
61613: PPUSH
61614: PPUSH
61615: PPUSH
61616: PPUSH
61617: PPUSH
61618: PPUSH
// result := [ ] ;
61619: LD_ADDR_VAR 0 4
61623: PUSH
61624: EMPTY
61625: ST_TO_ADDR
// if x - r < 0 then
61626: LD_VAR 0 1
61630: PUSH
61631: LD_VAR 0 3
61635: MINUS
61636: PUSH
61637: LD_INT 0
61639: LESS
61640: IFFALSE 61652
// min_x := 0 else
61642: LD_ADDR_VAR 0 8
61646: PUSH
61647: LD_INT 0
61649: ST_TO_ADDR
61650: GO 61668
// min_x := x - r ;
61652: LD_ADDR_VAR 0 8
61656: PUSH
61657: LD_VAR 0 1
61661: PUSH
61662: LD_VAR 0 3
61666: MINUS
61667: ST_TO_ADDR
// if y - r < 0 then
61668: LD_VAR 0 2
61672: PUSH
61673: LD_VAR 0 3
61677: MINUS
61678: PUSH
61679: LD_INT 0
61681: LESS
61682: IFFALSE 61694
// min_y := 0 else
61684: LD_ADDR_VAR 0 7
61688: PUSH
61689: LD_INT 0
61691: ST_TO_ADDR
61692: GO 61710
// min_y := y - r ;
61694: LD_ADDR_VAR 0 7
61698: PUSH
61699: LD_VAR 0 2
61703: PUSH
61704: LD_VAR 0 3
61708: MINUS
61709: ST_TO_ADDR
// max_x := x + r ;
61710: LD_ADDR_VAR 0 9
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: LD_VAR 0 3
61724: PLUS
61725: ST_TO_ADDR
// max_y := y + r ;
61726: LD_ADDR_VAR 0 10
61730: PUSH
61731: LD_VAR 0 2
61735: PUSH
61736: LD_VAR 0 3
61740: PLUS
61741: ST_TO_ADDR
// for _x = min_x to max_x do
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: DOUBLE
61748: LD_VAR 0 8
61752: DEC
61753: ST_TO_ADDR
61754: LD_VAR 0 9
61758: PUSH
61759: FOR_TO
61760: IFFALSE 61861
// for _y = min_y to max_y do
61762: LD_ADDR_VAR 0 6
61766: PUSH
61767: DOUBLE
61768: LD_VAR 0 7
61772: DEC
61773: ST_TO_ADDR
61774: LD_VAR 0 10
61778: PUSH
61779: FOR_TO
61780: IFFALSE 61857
// begin if not ValidHex ( _x , _y ) then
61782: LD_VAR 0 5
61786: PPUSH
61787: LD_VAR 0 6
61791: PPUSH
61792: CALL_OW 488
61796: NOT
61797: IFFALSE 61801
// continue ;
61799: GO 61779
// if GetResourceTypeXY ( _x , _y ) then
61801: LD_VAR 0 5
61805: PPUSH
61806: LD_VAR 0 6
61810: PPUSH
61811: CALL_OW 283
61815: IFFALSE 61855
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61817: LD_ADDR_VAR 0 4
61821: PUSH
61822: LD_VAR 0 4
61826: PPUSH
61827: LD_VAR 0 4
61831: PUSH
61832: LD_INT 1
61834: PLUS
61835: PPUSH
61836: LD_VAR 0 5
61840: PUSH
61841: LD_VAR 0 6
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PPUSH
61850: CALL_OW 1
61854: ST_TO_ADDR
// end ;
61855: GO 61779
61857: POP
61858: POP
61859: GO 61759
61861: POP
61862: POP
// end ;
61863: LD_VAR 0 4
61867: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
61876: PPUSH
61877: PPUSH
// if not units then
61878: LD_VAR 0 1
61882: NOT
61883: IFFALSE 61887
// exit ;
61885: GO 62415
// result := UnitFilter ( units , [ f_ok ] ) ;
61887: LD_ADDR_VAR 0 3
61891: PUSH
61892: LD_VAR 0 1
61896: PPUSH
61897: LD_INT 50
61899: PUSH
61900: EMPTY
61901: LIST
61902: PPUSH
61903: CALL_OW 72
61907: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61908: LD_ADDR_VAR 0 8
61912: PUSH
61913: LD_VAR 0 1
61917: PUSH
61918: LD_INT 1
61920: ARRAY
61921: PPUSH
61922: CALL_OW 255
61926: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61927: LD_ADDR_VAR 0 10
61931: PUSH
61932: LD_INT 29
61934: PUSH
61935: LD_INT 91
61937: PUSH
61938: LD_INT 49
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: ST_TO_ADDR
// if not result then
61946: LD_VAR 0 3
61950: NOT
61951: IFFALSE 61955
// exit ;
61953: GO 62415
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61955: LD_ADDR_VAR 0 5
61959: PUSH
61960: LD_INT 81
61962: PUSH
61963: LD_VAR 0 8
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PPUSH
61972: CALL_OW 69
61976: ST_TO_ADDR
// for i in result do
61977: LD_ADDR_VAR 0 4
61981: PUSH
61982: LD_VAR 0 3
61986: PUSH
61987: FOR_IN
61988: IFFALSE 62413
// begin tag := GetTag ( i ) + 1 ;
61990: LD_ADDR_VAR 0 9
61994: PUSH
61995: LD_VAR 0 4
61999: PPUSH
62000: CALL_OW 110
62004: PUSH
62005: LD_INT 1
62007: PLUS
62008: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62009: LD_ADDR_VAR 0 7
62013: PUSH
62014: LD_VAR 0 4
62018: PPUSH
62019: CALL_OW 250
62023: PPUSH
62024: LD_VAR 0 4
62028: PPUSH
62029: CALL_OW 251
62033: PPUSH
62034: LD_INT 4
62036: PPUSH
62037: CALL 61610 0 3
62041: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62042: LD_VAR 0 4
62046: PPUSH
62047: CALL_OW 247
62051: PUSH
62052: LD_INT 2
62054: EQUAL
62055: PUSH
62056: LD_VAR 0 7
62060: PUSH
62061: LD_INT 2
62063: GREATER
62064: AND
62065: PUSH
62066: LD_VAR 0 4
62070: PPUSH
62071: CALL_OW 264
62075: PUSH
62076: LD_VAR 0 10
62080: IN
62081: NOT
62082: AND
62083: IFFALSE 62122
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62085: LD_VAR 0 4
62089: PPUSH
62090: LD_VAR 0 7
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: LD_INT 1
62101: ARRAY
62102: PPUSH
62103: LD_VAR 0 7
62107: PUSH
62108: LD_INT 1
62110: ARRAY
62111: PUSH
62112: LD_INT 2
62114: ARRAY
62115: PPUSH
62116: CALL_OW 116
62120: GO 62411
// if path > tag then
62122: LD_VAR 0 2
62126: PUSH
62127: LD_VAR 0 9
62131: GREATER
62132: IFFALSE 62340
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62134: LD_ADDR_VAR 0 6
62138: PUSH
62139: LD_VAR 0 5
62143: PPUSH
62144: LD_INT 91
62146: PUSH
62147: LD_VAR 0 4
62151: PUSH
62152: LD_INT 8
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: PPUSH
62160: CALL_OW 72
62164: ST_TO_ADDR
// if nearEnemy then
62165: LD_VAR 0 6
62169: IFFALSE 62238
// begin if GetWeapon ( i ) = ru_time_lapser then
62171: LD_VAR 0 4
62175: PPUSH
62176: CALL_OW 264
62180: PUSH
62181: LD_INT 49
62183: EQUAL
62184: IFFALSE 62212
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62186: LD_VAR 0 4
62190: PPUSH
62191: LD_VAR 0 6
62195: PPUSH
62196: LD_VAR 0 4
62200: PPUSH
62201: CALL_OW 74
62205: PPUSH
62206: CALL_OW 112
62210: GO 62236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62212: LD_VAR 0 4
62216: PPUSH
62217: LD_VAR 0 6
62221: PPUSH
62222: LD_VAR 0 4
62226: PPUSH
62227: CALL_OW 74
62231: PPUSH
62232: CALL 63486 0 2
// end else
62236: GO 62338
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62238: LD_VAR 0 4
62242: PPUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_VAR 0 9
62252: ARRAY
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PPUSH
62258: LD_VAR 0 2
62262: PUSH
62263: LD_VAR 0 9
62267: ARRAY
62268: PUSH
62269: LD_INT 2
62271: ARRAY
62272: PPUSH
62273: CALL_OW 297
62277: PUSH
62278: LD_INT 6
62280: GREATER
62281: IFFALSE 62324
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62283: LD_VAR 0 4
62287: PPUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_VAR 0 9
62297: ARRAY
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 2
62307: PUSH
62308: LD_VAR 0 9
62312: ARRAY
62313: PUSH
62314: LD_INT 2
62316: ARRAY
62317: PPUSH
62318: CALL_OW 114
62322: GO 62338
// SetTag ( i , tag ) ;
62324: LD_VAR 0 4
62328: PPUSH
62329: LD_VAR 0 9
62333: PPUSH
62334: CALL_OW 109
// end else
62338: GO 62411
// if enemy then
62340: LD_VAR 0 5
62344: IFFALSE 62411
// begin if GetWeapon ( i ) = ru_time_lapser then
62346: LD_VAR 0 4
62350: PPUSH
62351: CALL_OW 264
62355: PUSH
62356: LD_INT 49
62358: EQUAL
62359: IFFALSE 62387
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62361: LD_VAR 0 4
62365: PPUSH
62366: LD_VAR 0 5
62370: PPUSH
62371: LD_VAR 0 4
62375: PPUSH
62376: CALL_OW 74
62380: PPUSH
62381: CALL_OW 112
62385: GO 62411
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62387: LD_VAR 0 4
62391: PPUSH
62392: LD_VAR 0 5
62396: PPUSH
62397: LD_VAR 0 4
62401: PPUSH
62402: CALL_OW 74
62406: PPUSH
62407: CALL 63486 0 2
// end ; end ;
62411: GO 61987
62413: POP
62414: POP
// end ;
62415: LD_VAR 0 3
62419: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62420: LD_INT 0
62422: PPUSH
62423: PPUSH
62424: PPUSH
// if not unit or IsInUnit ( unit ) then
62425: LD_VAR 0 1
62429: NOT
62430: PUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: CALL_OW 310
62440: OR
62441: IFFALSE 62445
// exit ;
62443: GO 62536
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62445: LD_ADDR_VAR 0 4
62449: PUSH
62450: LD_VAR 0 1
62454: PPUSH
62455: CALL_OW 250
62459: PPUSH
62460: LD_VAR 0 2
62464: PPUSH
62465: LD_INT 1
62467: PPUSH
62468: CALL_OW 272
62472: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62473: LD_ADDR_VAR 0 5
62477: PUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 251
62487: PPUSH
62488: LD_VAR 0 2
62492: PPUSH
62493: LD_INT 1
62495: PPUSH
62496: CALL_OW 273
62500: ST_TO_ADDR
// if ValidHex ( x , y ) then
62501: LD_VAR 0 4
62505: PPUSH
62506: LD_VAR 0 5
62510: PPUSH
62511: CALL_OW 488
62515: IFFALSE 62536
// ComTurnXY ( unit , x , y ) ;
62517: LD_VAR 0 1
62521: PPUSH
62522: LD_VAR 0 4
62526: PPUSH
62527: LD_VAR 0 5
62531: PPUSH
62532: CALL_OW 118
// end ;
62536: LD_VAR 0 3
62540: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62541: LD_INT 0
62543: PPUSH
62544: PPUSH
// result := false ;
62545: LD_ADDR_VAR 0 3
62549: PUSH
62550: LD_INT 0
62552: ST_TO_ADDR
// if not units then
62553: LD_VAR 0 2
62557: NOT
62558: IFFALSE 62562
// exit ;
62560: GO 62607
// for i in units do
62562: LD_ADDR_VAR 0 4
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: FOR_IN
62573: IFFALSE 62605
// if See ( side , i ) then
62575: LD_VAR 0 1
62579: PPUSH
62580: LD_VAR 0 4
62584: PPUSH
62585: CALL_OW 292
62589: IFFALSE 62603
// begin result := true ;
62591: LD_ADDR_VAR 0 3
62595: PUSH
62596: LD_INT 1
62598: ST_TO_ADDR
// exit ;
62599: POP
62600: POP
62601: GO 62607
// end ;
62603: GO 62572
62605: POP
62606: POP
// end ;
62607: LD_VAR 0 3
62611: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62612: LD_INT 0
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
// if not unit or not points then
62618: LD_VAR 0 1
62622: NOT
62623: PUSH
62624: LD_VAR 0 2
62628: NOT
62629: OR
62630: IFFALSE 62634
// exit ;
62632: GO 62724
// dist := 99999 ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_INT 99999
62641: ST_TO_ADDR
// for i in points do
62642: LD_ADDR_VAR 0 4
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: FOR_IN
62653: IFFALSE 62722
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62655: LD_ADDR_VAR 0 6
62659: PUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_VAR 0 4
62669: PUSH
62670: LD_INT 1
62672: ARRAY
62673: PPUSH
62674: LD_VAR 0 4
62678: PUSH
62679: LD_INT 2
62681: ARRAY
62682: PPUSH
62683: CALL_OW 297
62687: ST_TO_ADDR
// if tmpDist < dist then
62688: LD_VAR 0 6
62692: PUSH
62693: LD_VAR 0 5
62697: LESS
62698: IFFALSE 62720
// begin result := i ;
62700: LD_ADDR_VAR 0 3
62704: PUSH
62705: LD_VAR 0 4
62709: ST_TO_ADDR
// dist := tmpDist ;
62710: LD_ADDR_VAR 0 5
62714: PUSH
62715: LD_VAR 0 6
62719: ST_TO_ADDR
// end ; end ;
62720: GO 62652
62722: POP
62723: POP
// end ;
62724: LD_VAR 0 3
62728: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62729: LD_INT 0
62731: PPUSH
// uc_side := side ;
62732: LD_ADDR_OWVAR 20
62736: PUSH
62737: LD_VAR 0 1
62741: ST_TO_ADDR
// uc_nation := 3 ;
62742: LD_ADDR_OWVAR 21
62746: PUSH
62747: LD_INT 3
62749: ST_TO_ADDR
// vc_chassis := 25 ;
62750: LD_ADDR_OWVAR 37
62754: PUSH
62755: LD_INT 25
62757: ST_TO_ADDR
// vc_engine := engine_siberite ;
62758: LD_ADDR_OWVAR 39
62762: PUSH
62763: LD_INT 3
62765: ST_TO_ADDR
// vc_control := control_computer ;
62766: LD_ADDR_OWVAR 38
62770: PUSH
62771: LD_INT 3
62773: ST_TO_ADDR
// vc_weapon := 59 ;
62774: LD_ADDR_OWVAR 40
62778: PUSH
62779: LD_INT 59
62781: ST_TO_ADDR
// result := CreateVehicle ;
62782: LD_ADDR_VAR 0 5
62786: PUSH
62787: CALL_OW 45
62791: ST_TO_ADDR
// SetDir ( result , d ) ;
62792: LD_VAR 0 5
62796: PPUSH
62797: LD_VAR 0 4
62801: PPUSH
62802: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62806: LD_VAR 0 5
62810: PPUSH
62811: LD_VAR 0 2
62815: PPUSH
62816: LD_VAR 0 3
62820: PPUSH
62821: LD_INT 0
62823: PPUSH
62824: CALL_OW 48
// end ;
62828: LD_VAR 0 5
62832: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62833: LD_INT 0
62835: PPUSH
62836: PPUSH
62837: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62838: LD_ADDR_VAR 0 2
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62861: LD_VAR 0 1
62865: NOT
62866: PUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 264
62876: PUSH
62877: LD_INT 12
62879: PUSH
62880: LD_INT 51
62882: PUSH
62883: LD_INT 32
62885: PUSH
62886: LD_INT 89
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: IN
62895: NOT
62896: OR
62897: IFFALSE 62901
// exit ;
62899: GO 62999
// for i := 1 to 3 do
62901: LD_ADDR_VAR 0 3
62905: PUSH
62906: DOUBLE
62907: LD_INT 1
62909: DEC
62910: ST_TO_ADDR
62911: LD_INT 3
62913: PUSH
62914: FOR_TO
62915: IFFALSE 62997
// begin tmp := GetCargo ( cargo , i ) ;
62917: LD_ADDR_VAR 0 4
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_VAR 0 3
62931: PPUSH
62932: CALL_OW 289
62936: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62937: LD_ADDR_VAR 0 2
62941: PUSH
62942: LD_VAR 0 2
62946: PPUSH
62947: LD_VAR 0 3
62951: PPUSH
62952: LD_VAR 0 4
62956: PPUSH
62957: CALL_OW 1
62961: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62962: LD_ADDR_VAR 0 2
62966: PUSH
62967: LD_VAR 0 2
62971: PPUSH
62972: LD_INT 4
62974: PPUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 4
62982: ARRAY
62983: PUSH
62984: LD_VAR 0 4
62988: PLUS
62989: PPUSH
62990: CALL_OW 1
62994: ST_TO_ADDR
// end ;
62995: GO 62914
62997: POP
62998: POP
// end ;
62999: LD_VAR 0 2
63003: RET
// export function Length ( array ) ; begin
63004: LD_INT 0
63006: PPUSH
// result := array + 0 ;
63007: LD_ADDR_VAR 0 2
63011: PUSH
63012: LD_VAR 0 1
63016: PUSH
63017: LD_INT 0
63019: PLUS
63020: ST_TO_ADDR
// end ;
63021: LD_VAR 0 2
63025: RET
// export function PrepareArray ( array ) ; begin
63026: LD_INT 0
63028: PPUSH
// result := array diff 0 ;
63029: LD_ADDR_VAR 0 2
63033: PUSH
63034: LD_VAR 0 1
63038: PUSH
63039: LD_INT 0
63041: DIFF
63042: ST_TO_ADDR
// if not result [ 1 ] then
63043: LD_VAR 0 2
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: NOT
63052: IFFALSE 63072
// result := Delete ( result , 1 ) ;
63054: LD_ADDR_VAR 0 2
63058: PUSH
63059: LD_VAR 0 2
63063: PPUSH
63064: LD_INT 1
63066: PPUSH
63067: CALL_OW 3
63071: ST_TO_ADDR
// end ;
63072: LD_VAR 0 2
63076: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63077: LD_INT 0
63079: PPUSH
63080: PPUSH
63081: PPUSH
63082: PPUSH
// sibRocketRange := 25 ;
63083: LD_ADDR_VAR 0 6
63087: PUSH
63088: LD_INT 25
63090: ST_TO_ADDR
// result := false ;
63091: LD_ADDR_VAR 0 4
63095: PUSH
63096: LD_INT 0
63098: ST_TO_ADDR
// for i := 0 to 5 do
63099: LD_ADDR_VAR 0 5
63103: PUSH
63104: DOUBLE
63105: LD_INT 0
63107: DEC
63108: ST_TO_ADDR
63109: LD_INT 5
63111: PUSH
63112: FOR_TO
63113: IFFALSE 63180
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63115: LD_VAR 0 1
63119: PPUSH
63120: LD_VAR 0 5
63124: PPUSH
63125: LD_VAR 0 6
63129: PPUSH
63130: CALL_OW 272
63134: PPUSH
63135: LD_VAR 0 2
63139: PPUSH
63140: LD_VAR 0 5
63144: PPUSH
63145: LD_VAR 0 6
63149: PPUSH
63150: CALL_OW 273
63154: PPUSH
63155: LD_VAR 0 3
63159: PPUSH
63160: CALL_OW 309
63164: IFFALSE 63178
// begin result := true ;
63166: LD_ADDR_VAR 0 4
63170: PUSH
63171: LD_INT 1
63173: ST_TO_ADDR
// exit ;
63174: POP
63175: POP
63176: GO 63182
// end ;
63178: GO 63112
63180: POP
63181: POP
// end ;
63182: LD_VAR 0 4
63186: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63187: LD_INT 0
63189: PPUSH
63190: PPUSH
63191: PPUSH
// if btype = b_depot then
63192: LD_VAR 0 2
63196: PUSH
63197: LD_INT 0
63199: EQUAL
63200: IFFALSE 63212
// begin result := true ;
63202: LD_ADDR_VAR 0 3
63206: PUSH
63207: LD_INT 1
63209: ST_TO_ADDR
// exit ;
63210: GO 63328
// end ; pom := GetBase ( depot ) ;
63212: LD_ADDR_VAR 0 4
63216: PUSH
63217: LD_VAR 0 1
63221: PPUSH
63222: CALL_OW 274
63226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63227: LD_ADDR_VAR 0 5
63231: PUSH
63232: LD_VAR 0 2
63236: PPUSH
63237: LD_VAR 0 1
63241: PPUSH
63242: CALL_OW 248
63246: PPUSH
63247: CALL_OW 450
63251: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63252: LD_ADDR_VAR 0 3
63256: PUSH
63257: LD_VAR 0 4
63261: PPUSH
63262: LD_INT 1
63264: PPUSH
63265: CALL_OW 275
63269: PUSH
63270: LD_VAR 0 5
63274: PUSH
63275: LD_INT 1
63277: ARRAY
63278: GREATEREQUAL
63279: PUSH
63280: LD_VAR 0 4
63284: PPUSH
63285: LD_INT 2
63287: PPUSH
63288: CALL_OW 275
63292: PUSH
63293: LD_VAR 0 5
63297: PUSH
63298: LD_INT 2
63300: ARRAY
63301: GREATEREQUAL
63302: AND
63303: PUSH
63304: LD_VAR 0 4
63308: PPUSH
63309: LD_INT 3
63311: PPUSH
63312: CALL_OW 275
63316: PUSH
63317: LD_VAR 0 5
63321: PUSH
63322: LD_INT 3
63324: ARRAY
63325: GREATEREQUAL
63326: AND
63327: ST_TO_ADDR
// end ;
63328: LD_VAR 0 3
63332: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63333: LD_INT 0
63335: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63336: LD_VAR 0 1
63340: PPUSH
63341: LD_VAR 0 2
63345: PPUSH
63346: LD_INT 0
63348: PPUSH
63349: LD_INT 0
63351: PPUSH
63352: LD_INT 1
63354: PPUSH
63355: LD_INT 0
63357: PPUSH
63358: CALL_OW 587
// end ;
63362: LD_VAR 0 3
63366: RET
// export function CenterOnNow ( unit ) ; begin
63367: LD_INT 0
63369: PPUSH
// result := IsInUnit ( unit ) ;
63370: LD_ADDR_VAR 0 2
63374: PUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL_OW 310
63384: ST_TO_ADDR
// if not result then
63385: LD_VAR 0 2
63389: NOT
63390: IFFALSE 63402
// result := unit ;
63392: LD_ADDR_VAR 0 2
63396: PUSH
63397: LD_VAR 0 1
63401: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 87
// end ;
63411: LD_VAR 0 2
63415: RET
// export function ComMoveHex ( unit , hex ) ; begin
63416: LD_INT 0
63418: PPUSH
// if not hex then
63419: LD_VAR 0 2
63423: NOT
63424: IFFALSE 63428
// exit ;
63426: GO 63481
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63428: LD_VAR 0 2
63432: PUSH
63433: LD_INT 1
63435: ARRAY
63436: PPUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 2
63444: ARRAY
63445: PPUSH
63446: CALL_OW 428
63450: IFFALSE 63454
// exit ;
63452: GO 63481
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63454: LD_VAR 0 1
63458: PPUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_INT 1
63466: ARRAY
63467: PPUSH
63468: LD_VAR 0 2
63472: PUSH
63473: LD_INT 2
63475: ARRAY
63476: PPUSH
63477: CALL_OW 111
// end ;
63481: LD_VAR 0 3
63485: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63486: LD_INT 0
63488: PPUSH
63489: PPUSH
63490: PPUSH
// if not unit or not enemy then
63491: LD_VAR 0 1
63495: NOT
63496: PUSH
63497: LD_VAR 0 2
63501: NOT
63502: OR
63503: IFFALSE 63507
// exit ;
63505: GO 63631
// x := GetX ( enemy ) ;
63507: LD_ADDR_VAR 0 4
63511: PUSH
63512: LD_VAR 0 2
63516: PPUSH
63517: CALL_OW 250
63521: ST_TO_ADDR
// y := GetY ( enemy ) ;
63522: LD_ADDR_VAR 0 5
63526: PUSH
63527: LD_VAR 0 2
63531: PPUSH
63532: CALL_OW 251
63536: ST_TO_ADDR
// if ValidHex ( x , y ) then
63537: LD_VAR 0 4
63541: PPUSH
63542: LD_VAR 0 5
63546: PPUSH
63547: CALL_OW 488
63551: IFFALSE 63631
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63553: LD_VAR 0 2
63557: PPUSH
63558: CALL_OW 247
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: IN
63573: PUSH
63574: LD_VAR 0 1
63578: PPUSH
63579: CALL_OW 255
63583: PPUSH
63584: LD_VAR 0 2
63588: PPUSH
63589: CALL_OW 292
63593: OR
63594: IFFALSE 63612
// ComAttackUnit ( unit , enemy ) else
63596: LD_VAR 0 1
63600: PPUSH
63601: LD_VAR 0 2
63605: PPUSH
63606: CALL_OW 115
63610: GO 63631
// ComAgressiveMove ( unit , x , y ) ;
63612: LD_VAR 0 1
63616: PPUSH
63617: LD_VAR 0 4
63621: PPUSH
63622: LD_VAR 0 5
63626: PPUSH
63627: CALL_OW 114
// end ;
63631: LD_VAR 0 3
63635: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
63640: PPUSH
// list := AreaToList ( area , 0 ) ;
63641: LD_ADDR_VAR 0 5
63645: PUSH
63646: LD_VAR 0 1
63650: PPUSH
63651: LD_INT 0
63653: PPUSH
63654: CALL_OW 517
63658: ST_TO_ADDR
// if not list then
63659: LD_VAR 0 5
63663: NOT
63664: IFFALSE 63668
// exit ;
63666: GO 63798
// if all then
63668: LD_VAR 0 2
63672: IFFALSE 63760
// begin for i := 1 to list [ 1 ] do
63674: LD_ADDR_VAR 0 4
63678: PUSH
63679: DOUBLE
63680: LD_INT 1
63682: DEC
63683: ST_TO_ADDR
63684: LD_VAR 0 5
63688: PUSH
63689: LD_INT 1
63691: ARRAY
63692: PUSH
63693: FOR_TO
63694: IFFALSE 63756
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63696: LD_ADDR_VAR 0 3
63700: PUSH
63701: LD_VAR 0 3
63705: PPUSH
63706: LD_VAR 0 3
63710: PUSH
63711: LD_INT 1
63713: PLUS
63714: PPUSH
63715: LD_VAR 0 5
63719: PUSH
63720: LD_INT 1
63722: ARRAY
63723: PUSH
63724: LD_VAR 0 4
63728: ARRAY
63729: PUSH
63730: LD_VAR 0 5
63734: PUSH
63735: LD_INT 2
63737: ARRAY
63738: PUSH
63739: LD_VAR 0 4
63743: ARRAY
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PPUSH
63749: CALL_OW 1
63753: ST_TO_ADDR
63754: GO 63693
63756: POP
63757: POP
// exit ;
63758: GO 63798
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63760: LD_ADDR_VAR 0 3
63764: PUSH
63765: LD_VAR 0 5
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PUSH
63778: LD_VAR 0 5
63782: PUSH
63783: LD_INT 2
63785: ARRAY
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: ST_TO_ADDR
// end ;
63798: LD_VAR 0 3
63802: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63803: LD_INT 0
63805: PPUSH
63806: PPUSH
// list := AreaToList ( area , 0 ) ;
63807: LD_ADDR_VAR 0 4
63811: PUSH
63812: LD_VAR 0 1
63816: PPUSH
63817: LD_INT 0
63819: PPUSH
63820: CALL_OW 517
63824: ST_TO_ADDR
// if not list then
63825: LD_VAR 0 4
63829: NOT
63830: IFFALSE 63834
// exit ;
63832: GO 63875
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63834: LD_ADDR_VAR 0 3
63838: PUSH
63839: LD_VAR 0 4
63843: PUSH
63844: LD_INT 1
63846: ARRAY
63847: PUSH
63848: LD_INT 1
63850: ARRAY
63851: PUSH
63852: LD_VAR 0 4
63856: PUSH
63857: LD_INT 2
63859: ARRAY
63860: PUSH
63861: LD_INT 1
63863: ARRAY
63864: PUSH
63865: LD_VAR 0 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// end ;
63875: LD_VAR 0 3
63879: RET
// export function First ( array ) ; begin
63880: LD_INT 0
63882: PPUSH
// if not array then
63883: LD_VAR 0 1
63887: NOT
63888: IFFALSE 63892
// exit ;
63890: GO 63906
// result := array [ 1 ] ;
63892: LD_ADDR_VAR 0 2
63896: PUSH
63897: LD_VAR 0 1
63901: PUSH
63902: LD_INT 1
63904: ARRAY
63905: ST_TO_ADDR
// end ;
63906: LD_VAR 0 2
63910: RET
// export function Last ( array ) ; begin
63911: LD_INT 0
63913: PPUSH
// if not array then
63914: LD_VAR 0 1
63918: NOT
63919: IFFALSE 63923
// exit ;
63921: GO 63939
// result := array [ array ] ;
63923: LD_ADDR_VAR 0 2
63927: PUSH
63928: LD_VAR 0 1
63932: PUSH
63933: LD_VAR 0 1
63937: ARRAY
63938: ST_TO_ADDR
// end ;
63939: LD_VAR 0 2
63943: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63944: LD_INT 0
63946: PPUSH
63947: PPUSH
// result := [ ] ;
63948: LD_ADDR_VAR 0 5
63952: PUSH
63953: EMPTY
63954: ST_TO_ADDR
// if not array then
63955: LD_VAR 0 1
63959: NOT
63960: IFFALSE 63964
// exit ;
63962: GO 64076
// for i := 1 to array do
63964: LD_ADDR_VAR 0 6
63968: PUSH
63969: DOUBLE
63970: LD_INT 1
63972: DEC
63973: ST_TO_ADDR
63974: LD_VAR 0 1
63978: PUSH
63979: FOR_TO
63980: IFFALSE 64074
// if array [ i ] [ index ] = value then
63982: LD_VAR 0 1
63986: PUSH
63987: LD_VAR 0 6
63991: ARRAY
63992: PUSH
63993: LD_VAR 0 2
63997: ARRAY
63998: PUSH
63999: LD_VAR 0 3
64003: EQUAL
64004: IFFALSE 64072
// begin if indexColumn then
64006: LD_VAR 0 4
64010: IFFALSE 64046
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64012: LD_ADDR_VAR 0 5
64016: PUSH
64017: LD_VAR 0 5
64021: PPUSH
64022: LD_VAR 0 1
64026: PUSH
64027: LD_VAR 0 6
64031: ARRAY
64032: PUSH
64033: LD_VAR 0 4
64037: ARRAY
64038: PPUSH
64039: CALL 59264 0 2
64043: ST_TO_ADDR
64044: GO 64072
// result := Join ( result , array [ i ] ) ;
64046: LD_ADDR_VAR 0 5
64050: PUSH
64051: LD_VAR 0 5
64055: PPUSH
64056: LD_VAR 0 1
64060: PUSH
64061: LD_VAR 0 6
64065: ARRAY
64066: PPUSH
64067: CALL 59264 0 2
64071: ST_TO_ADDR
// end ;
64072: GO 63979
64074: POP
64075: POP
// end ;
64076: LD_VAR 0 5
64080: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64081: LD_INT 0
64083: PPUSH
// if not vehicles or not parkingPoint then
64084: LD_VAR 0 1
64088: NOT
64089: PUSH
64090: LD_VAR 0 2
64094: NOT
64095: OR
64096: IFFALSE 64100
// exit ;
64098: GO 64198
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64100: LD_ADDR_VAR 0 1
64104: PUSH
64105: LD_VAR 0 1
64109: PPUSH
64110: LD_INT 50
64112: PUSH
64113: EMPTY
64114: LIST
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: LD_INT 92
64121: PUSH
64122: LD_VAR 0 2
64126: PUSH
64127: LD_INT 1
64129: ARRAY
64130: PUSH
64131: LD_VAR 0 2
64135: PUSH
64136: LD_INT 2
64138: ARRAY
64139: PUSH
64140: LD_INT 8
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PPUSH
64157: CALL_OW 72
64161: ST_TO_ADDR
// if not vehicles then
64162: LD_VAR 0 1
64166: NOT
64167: IFFALSE 64171
// exit ;
64169: GO 64198
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64171: LD_VAR 0 1
64175: PPUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_INT 1
64183: ARRAY
64184: PPUSH
64185: LD_VAR 0 2
64189: PUSH
64190: LD_INT 2
64192: ARRAY
64193: PPUSH
64194: CALL_OW 111
// end ;
64198: LD_VAR 0 3
64202: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
64207: PPUSH
// if not side or not area then
64208: LD_VAR 0 1
64212: NOT
64213: PUSH
64214: LD_VAR 0 2
64218: NOT
64219: OR
64220: IFFALSE 64224
// exit ;
64222: GO 64343
// tmp := AreaToList ( area , 0 ) ;
64224: LD_ADDR_VAR 0 5
64228: PUSH
64229: LD_VAR 0 2
64233: PPUSH
64234: LD_INT 0
64236: PPUSH
64237: CALL_OW 517
64241: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64242: LD_ADDR_VAR 0 4
64246: PUSH
64247: DOUBLE
64248: LD_INT 1
64250: DEC
64251: ST_TO_ADDR
64252: LD_VAR 0 5
64256: PUSH
64257: LD_INT 1
64259: ARRAY
64260: PUSH
64261: FOR_TO
64262: IFFALSE 64341
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64264: LD_VAR 0 5
64268: PUSH
64269: LD_INT 1
64271: ARRAY
64272: PUSH
64273: LD_VAR 0 4
64277: ARRAY
64278: PPUSH
64279: LD_VAR 0 5
64283: PUSH
64284: LD_INT 2
64286: ARRAY
64287: PUSH
64288: LD_VAR 0 4
64292: ARRAY
64293: PPUSH
64294: CALL_OW 351
64298: IFFALSE 64339
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64300: LD_VAR 0 5
64304: PUSH
64305: LD_INT 1
64307: ARRAY
64308: PUSH
64309: LD_VAR 0 4
64313: ARRAY
64314: PPUSH
64315: LD_VAR 0 5
64319: PUSH
64320: LD_INT 2
64322: ARRAY
64323: PUSH
64324: LD_VAR 0 4
64328: ARRAY
64329: PPUSH
64330: LD_VAR 0 1
64334: PPUSH
64335: CALL_OW 244
// end ;
64339: GO 64261
64341: POP
64342: POP
// end ;
64343: LD_VAR 0 3
64347: RET
