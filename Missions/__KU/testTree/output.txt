// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ; end_of_file
  14: END
// export globalGameSaveCounter ; every 0 0$1 do
  15: GO 17
  17: DISABLE
// begin enable ;
  18: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  19: LD_STRING updateTimer(
  21: PUSH
  22: LD_OWVAR 1
  26: STR
  27: PUSH
  28: LD_STRING );
  30: STR
  31: PPUSH
  32: CALL_OW 559
// end ;
  36: END
// every 0 0$1 do
  37: GO 39
  39: DISABLE
// begin globalGameSaveCounter := 0 ;
  40: LD_ADDR_EXP 1
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
  48: LD_STRING setGameSaveCounter(0)
  50: PPUSH
  51: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
  55: LD_STRING initStreamRollete();
  57: PPUSH
  58: CALL_OW 559
// InitStreamMode ;
  62: CALL 1388 0 0
// DefineStreamItems ( false ) ;
  66: LD_INT 0
  68: PPUSH
  69: CALL 1852 0 1
// end ;
  73: END
// export function SOS_MapStart ( ) ; begin
  74: LD_INT 0
  76: PPUSH
// if streamModeActive then
  77: LD_EXP 2
  81: IFFALSE 90
// DefineStreamItems ( true ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL 1852 0 1
// UpdateLuaVariables ( ) ;
  90: CALL 107 0 0
// UpdateFactoryWaypoints ( ) ;
  94: CALL 14721 0 0
// UpdateWarehouseGatheringPoints ( ) ;
  98: CALL 14978 0 0
// end ;
 102: LD_VAR 0 1
 106: RET
// function UpdateLuaVariables ( ) ; begin
 107: LD_INT 0
 109: PPUSH
// if globalGameSaveCounter then
 110: LD_EXP 1
 114: IFFALSE 148
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 116: LD_ADDR_EXP 1
 120: PUSH
 121: LD_EXP 1
 125: PPUSH
 126: CALL 59937 0 1
 130: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 131: LD_STRING setGameSaveCounter(
 133: PUSH
 134: LD_EXP 1
 138: STR
 139: PUSH
 140: LD_STRING )
 142: STR
 143: PPUSH
 144: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 148: LD_STRING setGameDifficulty(
 150: PUSH
 151: LD_OWVAR 67
 155: STR
 156: PUSH
 157: LD_STRING )
 159: STR
 160: PPUSH
 161: CALL_OW 559
// end ;
 165: LD_VAR 0 1
 169: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 170: LD_INT 0
 172: PPUSH
// if p2 = stream_mode then
 173: LD_VAR 0 2
 177: PUSH
 178: LD_INT 100
 180: EQUAL
 181: IFFALSE 1184
// begin if not StreamModeActive then
 183: LD_EXP 2
 187: NOT
 188: IFFALSE 198
// StreamModeActive := true ;
 190: LD_ADDR_EXP 2
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// if p3 = 0 then
 198: LD_VAR 0 3
 202: PUSH
 203: LD_INT 0
 205: EQUAL
 206: IFFALSE 212
// InitStreamMode ;
 208: CALL 1388 0 0
// if p3 = 1 then
 212: LD_VAR 0 3
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 230
// sRocket := true ;
 222: LD_ADDR_EXP 7
 226: PUSH
 227: LD_INT 1
 229: ST_TO_ADDR
// if p3 = 2 then
 230: LD_VAR 0 3
 234: PUSH
 235: LD_INT 2
 237: EQUAL
 238: IFFALSE 248
// sSpeed := true ;
 240: LD_ADDR_EXP 6
 244: PUSH
 245: LD_INT 1
 247: ST_TO_ADDR
// if p3 = 3 then
 248: LD_VAR 0 3
 252: PUSH
 253: LD_INT 3
 255: EQUAL
 256: IFFALSE 266
// sEngine := true ;
 258: LD_ADDR_EXP 8
 262: PUSH
 263: LD_INT 1
 265: ST_TO_ADDR
// if p3 = 4 then
 266: LD_VAR 0 3
 270: PUSH
 271: LD_INT 4
 273: EQUAL
 274: IFFALSE 284
// sSpec := true ;
 276: LD_ADDR_EXP 5
 280: PUSH
 281: LD_INT 1
 283: ST_TO_ADDR
// if p3 = 5 then
 284: LD_VAR 0 3
 288: PUSH
 289: LD_INT 5
 291: EQUAL
 292: IFFALSE 302
// sLevel := true ;
 294: LD_ADDR_EXP 9
 298: PUSH
 299: LD_INT 1
 301: ST_TO_ADDR
// if p3 = 6 then
 302: LD_VAR 0 3
 306: PUSH
 307: LD_INT 6
 309: EQUAL
 310: IFFALSE 320
// sArmoury := true ;
 312: LD_ADDR_EXP 10
 316: PUSH
 317: LD_INT 1
 319: ST_TO_ADDR
// if p3 = 7 then
 320: LD_VAR 0 3
 324: PUSH
 325: LD_INT 7
 327: EQUAL
 328: IFFALSE 338
// sRadar := true ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// if p3 = 8 then
 338: LD_VAR 0 3
 342: PUSH
 343: LD_INT 8
 345: EQUAL
 346: IFFALSE 356
// sBunker := true ;
 348: LD_ADDR_EXP 12
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// if p3 = 9 then
 356: LD_VAR 0 3
 360: PUSH
 361: LD_INT 9
 363: EQUAL
 364: IFFALSE 374
// sHack := true ;
 366: LD_ADDR_EXP 13
 370: PUSH
 371: LD_INT 1
 373: ST_TO_ADDR
// if p3 = 10 then
 374: LD_VAR 0 3
 378: PUSH
 379: LD_INT 10
 381: EQUAL
 382: IFFALSE 392
// sFire := true ;
 384: LD_ADDR_EXP 14
 388: PUSH
 389: LD_INT 1
 391: ST_TO_ADDR
// if p3 = 11 then
 392: LD_VAR 0 3
 396: PUSH
 397: LD_INT 11
 399: EQUAL
 400: IFFALSE 410
// sRefresh := true ;
 402: LD_ADDR_EXP 15
 406: PUSH
 407: LD_INT 1
 409: ST_TO_ADDR
// if p3 = 12 then
 410: LD_VAR 0 3
 414: PUSH
 415: LD_INT 12
 417: EQUAL
 418: IFFALSE 428
// sExp := true ;
 420: LD_ADDR_EXP 16
 424: PUSH
 425: LD_INT 1
 427: ST_TO_ADDR
// if p3 = 13 then
 428: LD_VAR 0 3
 432: PUSH
 433: LD_INT 13
 435: EQUAL
 436: IFFALSE 446
// sDepot := true ;
 438: LD_ADDR_EXP 17
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// if p3 = 14 then
 446: LD_VAR 0 3
 450: PUSH
 451: LD_INT 14
 453: EQUAL
 454: IFFALSE 464
// sFlag := true ;
 456: LD_ADDR_EXP 18
 460: PUSH
 461: LD_INT 1
 463: ST_TO_ADDR
// if p3 = 15 then
 464: LD_VAR 0 3
 468: PUSH
 469: LD_INT 15
 471: EQUAL
 472: IFFALSE 482
// sKamikadze := true ;
 474: LD_ADDR_EXP 26
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// if p3 = 16 then
 482: LD_VAR 0 3
 486: PUSH
 487: LD_INT 16
 489: EQUAL
 490: IFFALSE 500
// sTroll := true ;
 492: LD_ADDR_EXP 27
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// if p3 = 17 then
 500: LD_VAR 0 3
 504: PUSH
 505: LD_INT 17
 507: EQUAL
 508: IFFALSE 518
// sSlow := true ;
 510: LD_ADDR_EXP 28
 514: PUSH
 515: LD_INT 1
 517: ST_TO_ADDR
// if p3 = 18 then
 518: LD_VAR 0 3
 522: PUSH
 523: LD_INT 18
 525: EQUAL
 526: IFFALSE 536
// sLack := true ;
 528: LD_ADDR_EXP 29
 532: PUSH
 533: LD_INT 1
 535: ST_TO_ADDR
// if p3 = 19 then
 536: LD_VAR 0 3
 540: PUSH
 541: LD_INT 19
 543: EQUAL
 544: IFFALSE 554
// sTank := true ;
 546: LD_ADDR_EXP 31
 550: PUSH
 551: LD_INT 1
 553: ST_TO_ADDR
// if p3 = 20 then
 554: LD_VAR 0 3
 558: PUSH
 559: LD_INT 20
 561: EQUAL
 562: IFFALSE 572
// sRemote := true ;
 564: LD_ADDR_EXP 32
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// if p3 = 21 then
 572: LD_VAR 0 3
 576: PUSH
 577: LD_INT 21
 579: EQUAL
 580: IFFALSE 590
// sPowell := true ;
 582: LD_ADDR_EXP 33
 586: PUSH
 587: LD_INT 1
 589: ST_TO_ADDR
// if p3 = 22 then
 590: LD_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: EQUAL
 598: IFFALSE 608
// sTeleport := true ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// if p3 = 23 then
 608: LD_VAR 0 3
 612: PUSH
 613: LD_INT 23
 615: EQUAL
 616: IFFALSE 626
// sOilTower := true ;
 618: LD_ADDR_EXP 38
 622: PUSH
 623: LD_INT 1
 625: ST_TO_ADDR
// if p3 = 24 then
 626: LD_VAR 0 3
 630: PUSH
 631: LD_INT 24
 633: EQUAL
 634: IFFALSE 644
// sShovel := true ;
 636: LD_ADDR_EXP 39
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// if p3 = 25 then
 644: LD_VAR 0 3
 648: PUSH
 649: LD_INT 25
 651: EQUAL
 652: IFFALSE 662
// sSheik := true ;
 654: LD_ADDR_EXP 40
 658: PUSH
 659: LD_INT 1
 661: ST_TO_ADDR
// if p3 = 26 then
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 26
 669: EQUAL
 670: IFFALSE 680
// sEarthquake := true ;
 672: LD_ADDR_EXP 42
 676: PUSH
 677: LD_INT 1
 679: ST_TO_ADDR
// if p3 = 27 then
 680: LD_VAR 0 3
 684: PUSH
 685: LD_INT 27
 687: EQUAL
 688: IFFALSE 698
// sAI := true ;
 690: LD_ADDR_EXP 43
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// if p3 = 28 then
 698: LD_VAR 0 3
 702: PUSH
 703: LD_INT 28
 705: EQUAL
 706: IFFALSE 716
// sCargo := true ;
 708: LD_ADDR_EXP 46
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// if p3 = 29 then
 716: LD_VAR 0 3
 720: PUSH
 721: LD_INT 29
 723: EQUAL
 724: IFFALSE 734
// sDLaser := true ;
 726: LD_ADDR_EXP 47
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// if p3 = 30 then
 734: LD_VAR 0 3
 738: PUSH
 739: LD_INT 30
 741: EQUAL
 742: IFFALSE 752
// sExchange := true ;
 744: LD_ADDR_EXP 48
 748: PUSH
 749: LD_INT 1
 751: ST_TO_ADDR
// if p3 = 31 then
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 31
 759: EQUAL
 760: IFFALSE 770
// sFac := true ;
 762: LD_ADDR_EXP 49
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// if p3 = 32 then
 770: LD_VAR 0 3
 774: PUSH
 775: LD_INT 32
 777: EQUAL
 778: IFFALSE 788
// sPower := true ;
 780: LD_ADDR_EXP 50
 784: PUSH
 785: LD_INT 1
 787: ST_TO_ADDR
// if p3 = 33 then
 788: LD_VAR 0 3
 792: PUSH
 793: LD_INT 33
 795: EQUAL
 796: IFFALSE 806
// sRandom := true ;
 798: LD_ADDR_EXP 51
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// if p3 = 34 then
 806: LD_VAR 0 3
 810: PUSH
 811: LD_INT 34
 813: EQUAL
 814: IFFALSE 824
// sShield := true ;
 816: LD_ADDR_EXP 52
 820: PUSH
 821: LD_INT 1
 823: ST_TO_ADDR
// if p3 = 35 then
 824: LD_VAR 0 3
 828: PUSH
 829: LD_INT 35
 831: EQUAL
 832: IFFALSE 842
// sTime := true ;
 834: LD_ADDR_EXP 53
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// if p3 = 36 then
 842: LD_VAR 0 3
 846: PUSH
 847: LD_INT 36
 849: EQUAL
 850: IFFALSE 860
// sTools := true ;
 852: LD_ADDR_EXP 54
 856: PUSH
 857: LD_INT 1
 859: ST_TO_ADDR
// if p3 = 101 then
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 101
 867: EQUAL
 868: IFFALSE 878
// sSold := true ;
 870: LD_ADDR_EXP 19
 874: PUSH
 875: LD_INT 1
 877: ST_TO_ADDR
// if p3 = 102 then
 878: LD_VAR 0 3
 882: PUSH
 883: LD_INT 102
 885: EQUAL
 886: IFFALSE 896
// sDiff := true ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_INT 1
 895: ST_TO_ADDR
// if p3 = 103 then
 896: LD_VAR 0 3
 900: PUSH
 901: LD_INT 103
 903: EQUAL
 904: IFFALSE 914
// sFog := true ;
 906: LD_ADDR_EXP 23
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// if p3 = 104 then
 914: LD_VAR 0 3
 918: PUSH
 919: LD_INT 104
 921: EQUAL
 922: IFFALSE 932
// sReset := true ;
 924: LD_ADDR_EXP 24
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// if p3 = 105 then
 932: LD_VAR 0 3
 936: PUSH
 937: LD_INT 105
 939: EQUAL
 940: IFFALSE 950
// sSun := true ;
 942: LD_ADDR_EXP 25
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// if p3 = 106 then
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 106
 957: EQUAL
 958: IFFALSE 968
// sTiger := true ;
 960: LD_ADDR_EXP 21
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// if p3 = 107 then
 968: LD_VAR 0 3
 972: PUSH
 973: LD_INT 107
 975: EQUAL
 976: IFFALSE 986
// sBomb := true ;
 978: LD_ADDR_EXP 22
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// if p3 = 108 then
 986: LD_VAR 0 3
 990: PUSH
 991: LD_INT 108
 993: EQUAL
 994: IFFALSE 1004
// sWound := true ;
 996: LD_ADDR_EXP 30
1000: PUSH
1001: LD_INT 1
1003: ST_TO_ADDR
// if p3 = 109 then
1004: LD_VAR 0 3
1008: PUSH
1009: LD_INT 109
1011: EQUAL
1012: IFFALSE 1022
// sBetray := true ;
1014: LD_ADDR_EXP 34
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// if p3 = 110 then
1022: LD_VAR 0 3
1026: PUSH
1027: LD_INT 110
1029: EQUAL
1030: IFFALSE 1040
// sContamin := true ;
1032: LD_ADDR_EXP 35
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// if p3 = 111 then
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 111
1047: EQUAL
1048: IFFALSE 1058
// sOil := true ;
1050: LD_ADDR_EXP 37
1054: PUSH
1055: LD_INT 1
1057: ST_TO_ADDR
// if p3 = 112 then
1058: LD_VAR 0 3
1062: PUSH
1063: LD_INT 112
1065: EQUAL
1066: IFFALSE 1076
// sStu := true ;
1068: LD_ADDR_EXP 41
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// if p3 = 113 then
1076: LD_VAR 0 3
1080: PUSH
1081: LD_INT 113
1083: EQUAL
1084: IFFALSE 1094
// sBazooka := true ;
1086: LD_ADDR_EXP 44
1090: PUSH
1091: LD_INT 1
1093: ST_TO_ADDR
// if p3 = 114 then
1094: LD_VAR 0 3
1098: PUSH
1099: LD_INT 114
1101: EQUAL
1102: IFFALSE 1112
// sMortar := true ;
1104: LD_ADDR_EXP 45
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// if p3 = 115 then
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 115
1119: EQUAL
1120: IFFALSE 1130
// sRanger := true ;
1122: LD_ADDR_EXP 55
1126: PUSH
1127: LD_INT 1
1129: ST_TO_ADDR
// if p3 = 116 then
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 116
1137: EQUAL
1138: IFFALSE 1148
// sComputer := true ;
1140: LD_ADDR_EXP 56
1144: PUSH
1145: LD_INT 1
1147: ST_TO_ADDR
// if p3 = 117 then
1148: LD_VAR 0 3
1152: PUSH
1153: LD_INT 117
1155: EQUAL
1156: IFFALSE 1166
// s30 := true ;
1158: LD_ADDR_EXP 57
1162: PUSH
1163: LD_INT 1
1165: ST_TO_ADDR
// if p3 = 118 then
1166: LD_VAR 0 3
1170: PUSH
1171: LD_INT 118
1173: EQUAL
1174: IFFALSE 1184
// s60 := true ;
1176: LD_ADDR_EXP 58
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// end ; if p2 = hack_mode then
1184: LD_VAR 0 2
1188: PUSH
1189: LD_INT 101
1191: EQUAL
1192: IFFALSE 1320
// begin case p3 of 1 :
1194: LD_VAR 0 3
1198: PUSH
1199: LD_INT 1
1201: DOUBLE
1202: EQUAL
1203: IFTRUE 1207
1205: GO 1214
1207: POP
// hHackUnlimitedResources ; 2 :
1208: CALL 13467 0 0
1212: GO 1320
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1229
1222: POP
// hHackSetLevel10 ; 3 :
1223: CALL 13600 0 0
1227: GO 1320
1229: LD_INT 3
1231: DOUBLE
1232: EQUAL
1233: IFTRUE 1237
1235: GO 1244
1237: POP
// hHackSetLevel10YourUnits ; 4 :
1238: CALL 13685 0 0
1242: GO 1320
1244: LD_INT 4
1246: DOUBLE
1247: EQUAL
1248: IFTRUE 1252
1250: GO 1259
1252: POP
// hHackInvincible ; 5 :
1253: CALL 14133 0 0
1257: GO 1320
1259: LD_INT 5
1261: DOUBLE
1262: EQUAL
1263: IFTRUE 1267
1265: GO 1274
1267: POP
// hHackInvisible ; 6 :
1268: CALL 14244 0 0
1272: GO 1320
1274: LD_INT 6
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1289
1282: POP
// hHackChangeYourSide ; 7 :
1283: CALL 14301 0 0
1287: GO 1320
1289: LD_INT 7
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1304
1297: POP
// hHackChangeUnitSide ; 8 :
1298: CALL 14343 0 0
1302: GO 1320
1304: LD_INT 8
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1319
1312: POP
// hHackFog ; end ;
1313: CALL 14444 0 0
1317: GO 1320
1319: POP
// end ; if p2 = game_save_mode then
1320: LD_VAR 0 2
1324: PUSH
1325: LD_INT 102
1327: EQUAL
1328: IFFALSE 1383
// begin if p3 = 1 then
1330: LD_VAR 0 3
1334: PUSH
1335: LD_INT 1
1337: EQUAL
1338: IFFALSE 1350
// globalGameSaveCounter := p4 ;
1340: LD_ADDR_EXP 1
1344: PUSH
1345: LD_VAR 0 4
1349: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1350: LD_VAR 0 3
1354: PUSH
1355: LD_INT 2
1357: EQUAL
1358: PUSH
1359: LD_EXP 1
1363: AND
1364: IFFALSE 1383
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1366: LD_STRING setGameSaveCounter(
1368: PUSH
1369: LD_EXP 1
1373: STR
1374: PUSH
1375: LD_STRING )
1377: STR
1378: PPUSH
1379: CALL_OW 559
// end ; end ;
1383: LD_VAR 0 7
1387: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1388: LD_INT 0
1390: PPUSH
// streamModeActive := false ;
1391: LD_ADDR_EXP 2
1395: PUSH
1396: LD_INT 0
1398: ST_TO_ADDR
// normalCounter := 36 ;
1399: LD_ADDR_EXP 3
1403: PUSH
1404: LD_INT 36
1406: ST_TO_ADDR
// hardcoreCounter := 18 ;
1407: LD_ADDR_EXP 4
1411: PUSH
1412: LD_INT 18
1414: ST_TO_ADDR
// sRocket := false ;
1415: LD_ADDR_EXP 7
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// sSpeed := false ;
1423: LD_ADDR_EXP 6
1427: PUSH
1428: LD_INT 0
1430: ST_TO_ADDR
// sEngine := false ;
1431: LD_ADDR_EXP 8
1435: PUSH
1436: LD_INT 0
1438: ST_TO_ADDR
// sSpec := false ;
1439: LD_ADDR_EXP 5
1443: PUSH
1444: LD_INT 0
1446: ST_TO_ADDR
// sLevel := false ;
1447: LD_ADDR_EXP 9
1451: PUSH
1452: LD_INT 0
1454: ST_TO_ADDR
// sArmoury := false ;
1455: LD_ADDR_EXP 10
1459: PUSH
1460: LD_INT 0
1462: ST_TO_ADDR
// sRadar := false ;
1463: LD_ADDR_EXP 11
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// sBunker := false ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_INT 0
1478: ST_TO_ADDR
// sHack := false ;
1479: LD_ADDR_EXP 13
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// sFire := false ;
1487: LD_ADDR_EXP 14
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// sRefresh := false ;
1495: LD_ADDR_EXP 15
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// sExp := false ;
1503: LD_ADDR_EXP 16
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// sDepot := false ;
1511: LD_ADDR_EXP 17
1515: PUSH
1516: LD_INT 0
1518: ST_TO_ADDR
// sFlag := false ;
1519: LD_ADDR_EXP 18
1523: PUSH
1524: LD_INT 0
1526: ST_TO_ADDR
// sKamikadze := false ;
1527: LD_ADDR_EXP 26
1531: PUSH
1532: LD_INT 0
1534: ST_TO_ADDR
// sTroll := false ;
1535: LD_ADDR_EXP 27
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// sSlow := false ;
1543: LD_ADDR_EXP 28
1547: PUSH
1548: LD_INT 0
1550: ST_TO_ADDR
// sLack := false ;
1551: LD_ADDR_EXP 29
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
// sTank := false ;
1559: LD_ADDR_EXP 31
1563: PUSH
1564: LD_INT 0
1566: ST_TO_ADDR
// sRemote := false ;
1567: LD_ADDR_EXP 32
1571: PUSH
1572: LD_INT 0
1574: ST_TO_ADDR
// sPowell := false ;
1575: LD_ADDR_EXP 33
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// sTeleport := false ;
1583: LD_ADDR_EXP 36
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// sOilTower := false ;
1591: LD_ADDR_EXP 38
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// sShovel := false ;
1599: LD_ADDR_EXP 39
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// sSheik := false ;
1607: LD_ADDR_EXP 40
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// sEarthquake := false ;
1615: LD_ADDR_EXP 42
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// sAI := false ;
1623: LD_ADDR_EXP 43
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// sCargo := false ;
1631: LD_ADDR_EXP 46
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// sDLaser := false ;
1639: LD_ADDR_EXP 47
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// sExchange := false ;
1647: LD_ADDR_EXP 48
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// sFac := false ;
1655: LD_ADDR_EXP 49
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// sPower := false ;
1663: LD_ADDR_EXP 50
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// sRandom := false ;
1671: LD_ADDR_EXP 51
1675: PUSH
1676: LD_INT 0
1678: ST_TO_ADDR
// sShield := false ;
1679: LD_ADDR_EXP 52
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// sTime := false ;
1687: LD_ADDR_EXP 53
1691: PUSH
1692: LD_INT 0
1694: ST_TO_ADDR
// sTools := false ;
1695: LD_ADDR_EXP 54
1699: PUSH
1700: LD_INT 0
1702: ST_TO_ADDR
// sSold := false ;
1703: LD_ADDR_EXP 19
1707: PUSH
1708: LD_INT 0
1710: ST_TO_ADDR
// sDiff := false ;
1711: LD_ADDR_EXP 20
1715: PUSH
1716: LD_INT 0
1718: ST_TO_ADDR
// sFog := false ;
1719: LD_ADDR_EXP 23
1723: PUSH
1724: LD_INT 0
1726: ST_TO_ADDR
// sReset := false ;
1727: LD_ADDR_EXP 24
1731: PUSH
1732: LD_INT 0
1734: ST_TO_ADDR
// sSun := false ;
1735: LD_ADDR_EXP 25
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// sTiger := false ;
1743: LD_ADDR_EXP 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// sBomb := false ;
1751: LD_ADDR_EXP 22
1755: PUSH
1756: LD_INT 0
1758: ST_TO_ADDR
// sWound := false ;
1759: LD_ADDR_EXP 30
1763: PUSH
1764: LD_INT 0
1766: ST_TO_ADDR
// sBetray := false ;
1767: LD_ADDR_EXP 34
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// sContamin := false ;
1775: LD_ADDR_EXP 35
1779: PUSH
1780: LD_INT 0
1782: ST_TO_ADDR
// sOil := false ;
1783: LD_ADDR_EXP 37
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// sStu := false ;
1791: LD_ADDR_EXP 41
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// sBazooka := false ;
1799: LD_ADDR_EXP 44
1803: PUSH
1804: LD_INT 0
1806: ST_TO_ADDR
// sMortar := false ;
1807: LD_ADDR_EXP 45
1811: PUSH
1812: LD_INT 0
1814: ST_TO_ADDR
// sRanger := false ;
1815: LD_ADDR_EXP 55
1819: PUSH
1820: LD_INT 0
1822: ST_TO_ADDR
// sComputer := false ;
1823: LD_ADDR_EXP 56
1827: PUSH
1828: LD_INT 0
1830: ST_TO_ADDR
// s30 := false ;
1831: LD_ADDR_EXP 57
1835: PUSH
1836: LD_INT 0
1838: ST_TO_ADDR
// s60 := false ;
1839: LD_ADDR_EXP 58
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
// end ;
1847: LD_VAR 0 1
1851: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
1856: PPUSH
1857: PPUSH
1858: PPUSH
1859: PPUSH
1860: PPUSH
// result := [ ] ;
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: EMPTY
1867: ST_TO_ADDR
// if campaign_id = 1 then
1868: LD_OWVAR 69
1872: PUSH
1873: LD_INT 1
1875: EQUAL
1876: IFFALSE 5042
// begin case mission_number of 1 :
1878: LD_OWVAR 70
1882: PUSH
1883: LD_INT 1
1885: DOUBLE
1886: EQUAL
1887: IFTRUE 1891
1889: GO 1967
1891: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: LD_INT 11
1905: PUSH
1906: LD_INT 12
1908: PUSH
1909: LD_INT 15
1911: PUSH
1912: LD_INT 16
1914: PUSH
1915: LD_INT 22
1917: PUSH
1918: LD_INT 23
1920: PUSH
1921: LD_INT 26
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 101
1937: PUSH
1938: LD_INT 102
1940: PUSH
1941: LD_INT 106
1943: PUSH
1944: LD_INT 116
1946: PUSH
1947: LD_INT 117
1949: PUSH
1950: LD_INT 118
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: ST_TO_ADDR
1965: GO 5040
1967: LD_INT 2
1969: DOUBLE
1970: EQUAL
1971: IFTRUE 1975
1973: GO 2059
1975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1976: LD_ADDR_VAR 0 2
1980: PUSH
1981: LD_INT 2
1983: PUSH
1984: LD_INT 4
1986: PUSH
1987: LD_INT 11
1989: PUSH
1990: LD_INT 12
1992: PUSH
1993: LD_INT 15
1995: PUSH
1996: LD_INT 16
1998: PUSH
1999: LD_INT 22
2001: PUSH
2002: LD_INT 23
2004: PUSH
2005: LD_INT 26
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 101
2021: PUSH
2022: LD_INT 102
2024: PUSH
2025: LD_INT 105
2027: PUSH
2028: LD_INT 106
2030: PUSH
2031: LD_INT 108
2033: PUSH
2034: LD_INT 116
2036: PUSH
2037: LD_INT 117
2039: PUSH
2040: LD_INT 118
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: ST_TO_ADDR
2057: GO 5040
2059: LD_INT 3
2061: DOUBLE
2062: EQUAL
2063: IFTRUE 2067
2065: GO 2155
2067: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_INT 2
2075: PUSH
2076: LD_INT 4
2078: PUSH
2079: LD_INT 5
2081: PUSH
2082: LD_INT 11
2084: PUSH
2085: LD_INT 12
2087: PUSH
2088: LD_INT 15
2090: PUSH
2091: LD_INT 16
2093: PUSH
2094: LD_INT 22
2096: PUSH
2097: LD_INT 26
2099: PUSH
2100: LD_INT 36
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 101
2117: PUSH
2118: LD_INT 102
2120: PUSH
2121: LD_INT 105
2123: PUSH
2124: LD_INT 106
2126: PUSH
2127: LD_INT 108
2129: PUSH
2130: LD_INT 116
2132: PUSH
2133: LD_INT 117
2135: PUSH
2136: LD_INT 118
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: ST_TO_ADDR
2153: GO 5040
2155: LD_INT 4
2157: DOUBLE
2158: EQUAL
2159: IFTRUE 2163
2161: GO 2259
2163: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2164: LD_ADDR_VAR 0 2
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: LD_INT 4
2174: PUSH
2175: LD_INT 5
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: LD_INT 11
2183: PUSH
2184: LD_INT 12
2186: PUSH
2187: LD_INT 15
2189: PUSH
2190: LD_INT 16
2192: PUSH
2193: LD_INT 22
2195: PUSH
2196: LD_INT 23
2198: PUSH
2199: LD_INT 26
2201: PUSH
2202: LD_INT 36
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 101
2221: PUSH
2222: LD_INT 102
2224: PUSH
2225: LD_INT 105
2227: PUSH
2228: LD_INT 106
2230: PUSH
2231: LD_INT 108
2233: PUSH
2234: LD_INT 116
2236: PUSH
2237: LD_INT 117
2239: PUSH
2240: LD_INT 118
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: ST_TO_ADDR
2257: GO 5040
2259: LD_INT 5
2261: DOUBLE
2262: EQUAL
2263: IFTRUE 2267
2265: GO 2379
2267: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2268: LD_ADDR_VAR 0 2
2272: PUSH
2273: LD_INT 2
2275: PUSH
2276: LD_INT 4
2278: PUSH
2279: LD_INT 5
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: LD_INT 8
2287: PUSH
2288: LD_INT 11
2290: PUSH
2291: LD_INT 12
2293: PUSH
2294: LD_INT 15
2296: PUSH
2297: LD_INT 16
2299: PUSH
2300: LD_INT 22
2302: PUSH
2303: LD_INT 23
2305: PUSH
2306: LD_INT 25
2308: PUSH
2309: LD_INT 26
2311: PUSH
2312: LD_INT 36
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 101
2333: PUSH
2334: LD_INT 102
2336: PUSH
2337: LD_INT 105
2339: PUSH
2340: LD_INT 106
2342: PUSH
2343: LD_INT 108
2345: PUSH
2346: LD_INT 109
2348: PUSH
2349: LD_INT 112
2351: PUSH
2352: LD_INT 116
2354: PUSH
2355: LD_INT 117
2357: PUSH
2358: LD_INT 118
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: ST_TO_ADDR
2377: GO 5040
2379: LD_INT 6
2381: DOUBLE
2382: EQUAL
2383: IFTRUE 2387
2385: GO 2519
2387: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2388: LD_ADDR_VAR 0 2
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: LD_INT 4
2398: PUSH
2399: LD_INT 5
2401: PUSH
2402: LD_INT 6
2404: PUSH
2405: LD_INT 8
2407: PUSH
2408: LD_INT 11
2410: PUSH
2411: LD_INT 12
2413: PUSH
2414: LD_INT 15
2416: PUSH
2417: LD_INT 16
2419: PUSH
2420: LD_INT 20
2422: PUSH
2423: LD_INT 21
2425: PUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 23
2431: PUSH
2432: LD_INT 25
2434: PUSH
2435: LD_INT 26
2437: PUSH
2438: LD_INT 30
2440: PUSH
2441: LD_INT 31
2443: PUSH
2444: LD_INT 32
2446: PUSH
2447: LD_INT 36
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 101
2473: PUSH
2474: LD_INT 102
2476: PUSH
2477: LD_INT 105
2479: PUSH
2480: LD_INT 106
2482: PUSH
2483: LD_INT 108
2485: PUSH
2486: LD_INT 109
2488: PUSH
2489: LD_INT 112
2491: PUSH
2492: LD_INT 116
2494: PUSH
2495: LD_INT 117
2497: PUSH
2498: LD_INT 118
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: ST_TO_ADDR
2517: GO 5040
2519: LD_INT 7
2521: DOUBLE
2522: EQUAL
2523: IFTRUE 2527
2525: GO 2639
2527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: LD_INT 4
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 7
2544: PUSH
2545: LD_INT 11
2547: PUSH
2548: LD_INT 12
2550: PUSH
2551: LD_INT 15
2553: PUSH
2554: LD_INT 16
2556: PUSH
2557: LD_INT 20
2559: PUSH
2560: LD_INT 21
2562: PUSH
2563: LD_INT 22
2565: PUSH
2566: LD_INT 23
2568: PUSH
2569: LD_INT 25
2571: PUSH
2572: LD_INT 26
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 101
2593: PUSH
2594: LD_INT 102
2596: PUSH
2597: LD_INT 103
2599: PUSH
2600: LD_INT 105
2602: PUSH
2603: LD_INT 106
2605: PUSH
2606: LD_INT 108
2608: PUSH
2609: LD_INT 112
2611: PUSH
2612: LD_INT 116
2614: PUSH
2615: LD_INT 117
2617: PUSH
2618: LD_INT 118
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: ST_TO_ADDR
2637: GO 5040
2639: LD_INT 8
2641: DOUBLE
2642: EQUAL
2643: IFTRUE 2647
2645: GO 2787
2647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: LD_INT 2
2655: PUSH
2656: LD_INT 4
2658: PUSH
2659: LD_INT 5
2661: PUSH
2662: LD_INT 6
2664: PUSH
2665: LD_INT 7
2667: PUSH
2668: LD_INT 8
2670: PUSH
2671: LD_INT 11
2673: PUSH
2674: LD_INT 12
2676: PUSH
2677: LD_INT 15
2679: PUSH
2680: LD_INT 16
2682: PUSH
2683: LD_INT 20
2685: PUSH
2686: LD_INT 21
2688: PUSH
2689: LD_INT 22
2691: PUSH
2692: LD_INT 23
2694: PUSH
2695: LD_INT 25
2697: PUSH
2698: LD_INT 26
2700: PUSH
2701: LD_INT 30
2703: PUSH
2704: LD_INT 31
2706: PUSH
2707: LD_INT 32
2709: PUSH
2710: LD_INT 36
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 101
2737: PUSH
2738: LD_INT 102
2740: PUSH
2741: LD_INT 103
2743: PUSH
2744: LD_INT 105
2746: PUSH
2747: LD_INT 106
2749: PUSH
2750: LD_INT 108
2752: PUSH
2753: LD_INT 109
2755: PUSH
2756: LD_INT 112
2758: PUSH
2759: LD_INT 116
2761: PUSH
2762: LD_INT 117
2764: PUSH
2765: LD_INT 118
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
2785: GO 5040
2787: LD_INT 9
2789: DOUBLE
2790: EQUAL
2791: IFTRUE 2795
2793: GO 2943
2795: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: LD_INT 2
2803: PUSH
2804: LD_INT 4
2806: PUSH
2807: LD_INT 5
2809: PUSH
2810: LD_INT 6
2812: PUSH
2813: LD_INT 7
2815: PUSH
2816: LD_INT 8
2818: PUSH
2819: LD_INT 11
2821: PUSH
2822: LD_INT 12
2824: PUSH
2825: LD_INT 15
2827: PUSH
2828: LD_INT 16
2830: PUSH
2831: LD_INT 20
2833: PUSH
2834: LD_INT 21
2836: PUSH
2837: LD_INT 22
2839: PUSH
2840: LD_INT 23
2842: PUSH
2843: LD_INT 25
2845: PUSH
2846: LD_INT 26
2848: PUSH
2849: LD_INT 28
2851: PUSH
2852: LD_INT 30
2854: PUSH
2855: LD_INT 31
2857: PUSH
2858: LD_INT 32
2860: PUSH
2861: LD_INT 36
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 101
2889: PUSH
2890: LD_INT 102
2892: PUSH
2893: LD_INT 103
2895: PUSH
2896: LD_INT 105
2898: PUSH
2899: LD_INT 106
2901: PUSH
2902: LD_INT 108
2904: PUSH
2905: LD_INT 109
2907: PUSH
2908: LD_INT 112
2910: PUSH
2911: LD_INT 114
2913: PUSH
2914: LD_INT 116
2916: PUSH
2917: LD_INT 117
2919: PUSH
2920: LD_INT 118
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: ST_TO_ADDR
2941: GO 5040
2943: LD_INT 10
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 3147
2951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2952: LD_ADDR_VAR 0 2
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: LD_INT 4
2962: PUSH
2963: LD_INT 5
2965: PUSH
2966: LD_INT 6
2968: PUSH
2969: LD_INT 7
2971: PUSH
2972: LD_INT 8
2974: PUSH
2975: LD_INT 9
2977: PUSH
2978: LD_INT 10
2980: PUSH
2981: LD_INT 11
2983: PUSH
2984: LD_INT 12
2986: PUSH
2987: LD_INT 13
2989: PUSH
2990: LD_INT 14
2992: PUSH
2993: LD_INT 15
2995: PUSH
2996: LD_INT 16
2998: PUSH
2999: LD_INT 17
3001: PUSH
3002: LD_INT 18
3004: PUSH
3005: LD_INT 19
3007: PUSH
3008: LD_INT 20
3010: PUSH
3011: LD_INT 21
3013: PUSH
3014: LD_INT 22
3016: PUSH
3017: LD_INT 23
3019: PUSH
3020: LD_INT 24
3022: PUSH
3023: LD_INT 25
3025: PUSH
3026: LD_INT 26
3028: PUSH
3029: LD_INT 28
3031: PUSH
3032: LD_INT 30
3034: PUSH
3035: LD_INT 31
3037: PUSH
3038: LD_INT 32
3040: PUSH
3041: LD_INT 36
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 101
3077: PUSH
3078: LD_INT 102
3080: PUSH
3081: LD_INT 103
3083: PUSH
3084: LD_INT 104
3086: PUSH
3087: LD_INT 105
3089: PUSH
3090: LD_INT 106
3092: PUSH
3093: LD_INT 107
3095: PUSH
3096: LD_INT 108
3098: PUSH
3099: LD_INT 109
3101: PUSH
3102: LD_INT 110
3104: PUSH
3105: LD_INT 111
3107: PUSH
3108: LD_INT 112
3110: PUSH
3111: LD_INT 114
3113: PUSH
3114: LD_INT 116
3116: PUSH
3117: LD_INT 117
3119: PUSH
3120: LD_INT 118
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: ST_TO_ADDR
3145: GO 5040
3147: LD_INT 11
3149: DOUBLE
3150: EQUAL
3151: IFTRUE 3155
3153: GO 3359
3155: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3156: LD_ADDR_VAR 0 2
3160: PUSH
3161: LD_INT 2
3163: PUSH
3164: LD_INT 3
3166: PUSH
3167: LD_INT 4
3169: PUSH
3170: LD_INT 5
3172: PUSH
3173: LD_INT 6
3175: PUSH
3176: LD_INT 7
3178: PUSH
3179: LD_INT 8
3181: PUSH
3182: LD_INT 9
3184: PUSH
3185: LD_INT 10
3187: PUSH
3188: LD_INT 11
3190: PUSH
3191: LD_INT 12
3193: PUSH
3194: LD_INT 13
3196: PUSH
3197: LD_INT 14
3199: PUSH
3200: LD_INT 15
3202: PUSH
3203: LD_INT 16
3205: PUSH
3206: LD_INT 17
3208: PUSH
3209: LD_INT 18
3211: PUSH
3212: LD_INT 19
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: LD_INT 21
3220: PUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 23
3226: PUSH
3227: LD_INT 24
3229: PUSH
3230: LD_INT 25
3232: PUSH
3233: LD_INT 26
3235: PUSH
3236: LD_INT 28
3238: PUSH
3239: LD_INT 30
3241: PUSH
3242: LD_INT 31
3244: PUSH
3245: LD_INT 32
3247: PUSH
3248: LD_INT 34
3250: PUSH
3251: LD_INT 36
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 103
3295: PUSH
3296: LD_INT 104
3298: PUSH
3299: LD_INT 105
3301: PUSH
3302: LD_INT 106
3304: PUSH
3305: LD_INT 107
3307: PUSH
3308: LD_INT 108
3310: PUSH
3311: LD_INT 109
3313: PUSH
3314: LD_INT 110
3316: PUSH
3317: LD_INT 111
3319: PUSH
3320: LD_INT 112
3322: PUSH
3323: LD_INT 114
3325: PUSH
3326: LD_INT 116
3328: PUSH
3329: LD_INT 117
3331: PUSH
3332: LD_INT 118
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: ST_TO_ADDR
3357: GO 5040
3359: LD_INT 12
3361: DOUBLE
3362: EQUAL
3363: IFTRUE 3367
3365: GO 3587
3367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: LD_INT 1
3375: PUSH
3376: LD_INT 2
3378: PUSH
3379: LD_INT 3
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 5
3387: PUSH
3388: LD_INT 6
3390: PUSH
3391: LD_INT 7
3393: PUSH
3394: LD_INT 8
3396: PUSH
3397: LD_INT 9
3399: PUSH
3400: LD_INT 10
3402: PUSH
3403: LD_INT 11
3405: PUSH
3406: LD_INT 12
3408: PUSH
3409: LD_INT 13
3411: PUSH
3412: LD_INT 14
3414: PUSH
3415: LD_INT 15
3417: PUSH
3418: LD_INT 16
3420: PUSH
3421: LD_INT 17
3423: PUSH
3424: LD_INT 18
3426: PUSH
3427: LD_INT 19
3429: PUSH
3430: LD_INT 20
3432: PUSH
3433: LD_INT 21
3435: PUSH
3436: LD_INT 22
3438: PUSH
3439: LD_INT 23
3441: PUSH
3442: LD_INT 24
3444: PUSH
3445: LD_INT 25
3447: PUSH
3448: LD_INT 26
3450: PUSH
3451: LD_INT 27
3453: PUSH
3454: LD_INT 28
3456: PUSH
3457: LD_INT 30
3459: PUSH
3460: LD_INT 31
3462: PUSH
3463: LD_INT 32
3465: PUSH
3466: LD_INT 33
3468: PUSH
3469: LD_INT 34
3471: PUSH
3472: LD_INT 36
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 101
3513: PUSH
3514: LD_INT 102
3516: PUSH
3517: LD_INT 103
3519: PUSH
3520: LD_INT 104
3522: PUSH
3523: LD_INT 105
3525: PUSH
3526: LD_INT 106
3528: PUSH
3529: LD_INT 107
3531: PUSH
3532: LD_INT 108
3534: PUSH
3535: LD_INT 109
3537: PUSH
3538: LD_INT 110
3540: PUSH
3541: LD_INT 111
3543: PUSH
3544: LD_INT 112
3546: PUSH
3547: LD_INT 113
3549: PUSH
3550: LD_INT 114
3552: PUSH
3553: LD_INT 116
3555: PUSH
3556: LD_INT 117
3558: PUSH
3559: LD_INT 118
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: ST_TO_ADDR
3585: GO 5040
3587: LD_INT 13
3589: DOUBLE
3590: EQUAL
3591: IFTRUE 3595
3593: GO 3803
3595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3596: LD_ADDR_VAR 0 2
3600: PUSH
3601: LD_INT 1
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: LD_INT 4
3612: PUSH
3613: LD_INT 5
3615: PUSH
3616: LD_INT 8
3618: PUSH
3619: LD_INT 9
3621: PUSH
3622: LD_INT 10
3624: PUSH
3625: LD_INT 11
3627: PUSH
3628: LD_INT 12
3630: PUSH
3631: LD_INT 14
3633: PUSH
3634: LD_INT 15
3636: PUSH
3637: LD_INT 16
3639: PUSH
3640: LD_INT 17
3642: PUSH
3643: LD_INT 18
3645: PUSH
3646: LD_INT 19
3648: PUSH
3649: LD_INT 20
3651: PUSH
3652: LD_INT 21
3654: PUSH
3655: LD_INT 22
3657: PUSH
3658: LD_INT 23
3660: PUSH
3661: LD_INT 24
3663: PUSH
3664: LD_INT 25
3666: PUSH
3667: LD_INT 26
3669: PUSH
3670: LD_INT 27
3672: PUSH
3673: LD_INT 28
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 31
3681: PUSH
3682: LD_INT 32
3684: PUSH
3685: LD_INT 33
3687: PUSH
3688: LD_INT 34
3690: PUSH
3691: LD_INT 36
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: LD_INT 101
3729: PUSH
3730: LD_INT 102
3732: PUSH
3733: LD_INT 103
3735: PUSH
3736: LD_INT 104
3738: PUSH
3739: LD_INT 105
3741: PUSH
3742: LD_INT 106
3744: PUSH
3745: LD_INT 107
3747: PUSH
3748: LD_INT 108
3750: PUSH
3751: LD_INT 109
3753: PUSH
3754: LD_INT 110
3756: PUSH
3757: LD_INT 111
3759: PUSH
3760: LD_INT 112
3762: PUSH
3763: LD_INT 113
3765: PUSH
3766: LD_INT 114
3768: PUSH
3769: LD_INT 116
3771: PUSH
3772: LD_INT 117
3774: PUSH
3775: LD_INT 118
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: ST_TO_ADDR
3801: GO 5040
3803: LD_INT 14
3805: DOUBLE
3806: EQUAL
3807: IFTRUE 3811
3809: GO 4035
3811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3812: LD_ADDR_VAR 0 2
3816: PUSH
3817: LD_INT 1
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: LD_INT 5
3831: PUSH
3832: LD_INT 6
3834: PUSH
3835: LD_INT 7
3837: PUSH
3838: LD_INT 8
3840: PUSH
3841: LD_INT 9
3843: PUSH
3844: LD_INT 10
3846: PUSH
3847: LD_INT 11
3849: PUSH
3850: LD_INT 12
3852: PUSH
3853: LD_INT 13
3855: PUSH
3856: LD_INT 14
3858: PUSH
3859: LD_INT 15
3861: PUSH
3862: LD_INT 16
3864: PUSH
3865: LD_INT 17
3867: PUSH
3868: LD_INT 18
3870: PUSH
3871: LD_INT 19
3873: PUSH
3874: LD_INT 20
3876: PUSH
3877: LD_INT 21
3879: PUSH
3880: LD_INT 22
3882: PUSH
3883: LD_INT 23
3885: PUSH
3886: LD_INT 24
3888: PUSH
3889: LD_INT 25
3891: PUSH
3892: LD_INT 26
3894: PUSH
3895: LD_INT 27
3897: PUSH
3898: LD_INT 28
3900: PUSH
3901: LD_INT 29
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 31
3909: PUSH
3910: LD_INT 32
3912: PUSH
3913: LD_INT 33
3915: PUSH
3916: LD_INT 34
3918: PUSH
3919: LD_INT 36
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: PUSH
3959: LD_INT 101
3961: PUSH
3962: LD_INT 102
3964: PUSH
3965: LD_INT 103
3967: PUSH
3968: LD_INT 104
3970: PUSH
3971: LD_INT 105
3973: PUSH
3974: LD_INT 106
3976: PUSH
3977: LD_INT 107
3979: PUSH
3980: LD_INT 108
3982: PUSH
3983: LD_INT 109
3985: PUSH
3986: LD_INT 110
3988: PUSH
3989: LD_INT 111
3991: PUSH
3992: LD_INT 112
3994: PUSH
3995: LD_INT 113
3997: PUSH
3998: LD_INT 114
4000: PUSH
4001: LD_INT 116
4003: PUSH
4004: LD_INT 117
4006: PUSH
4007: LD_INT 118
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: ST_TO_ADDR
4033: GO 5040
4035: LD_INT 15
4037: DOUBLE
4038: EQUAL
4039: IFTRUE 4043
4041: GO 4267
4043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: LD_INT 3
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: LD_INT 5
4063: PUSH
4064: LD_INT 6
4066: PUSH
4067: LD_INT 7
4069: PUSH
4070: LD_INT 8
4072: PUSH
4073: LD_INT 9
4075: PUSH
4076: LD_INT 10
4078: PUSH
4079: LD_INT 11
4081: PUSH
4082: LD_INT 12
4084: PUSH
4085: LD_INT 13
4087: PUSH
4088: LD_INT 14
4090: PUSH
4091: LD_INT 15
4093: PUSH
4094: LD_INT 16
4096: PUSH
4097: LD_INT 17
4099: PUSH
4100: LD_INT 18
4102: PUSH
4103: LD_INT 19
4105: PUSH
4106: LD_INT 20
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 22
4114: PUSH
4115: LD_INT 23
4117: PUSH
4118: LD_INT 24
4120: PUSH
4121: LD_INT 25
4123: PUSH
4124: LD_INT 26
4126: PUSH
4127: LD_INT 27
4129: PUSH
4130: LD_INT 28
4132: PUSH
4133: LD_INT 29
4135: PUSH
4136: LD_INT 30
4138: PUSH
4139: LD_INT 31
4141: PUSH
4142: LD_INT 32
4144: PUSH
4145: LD_INT 33
4147: PUSH
4148: LD_INT 34
4150: PUSH
4151: LD_INT 36
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 101
4193: PUSH
4194: LD_INT 102
4196: PUSH
4197: LD_INT 103
4199: PUSH
4200: LD_INT 104
4202: PUSH
4203: LD_INT 105
4205: PUSH
4206: LD_INT 106
4208: PUSH
4209: LD_INT 107
4211: PUSH
4212: LD_INT 108
4214: PUSH
4215: LD_INT 109
4217: PUSH
4218: LD_INT 110
4220: PUSH
4221: LD_INT 111
4223: PUSH
4224: LD_INT 112
4226: PUSH
4227: LD_INT 113
4229: PUSH
4230: LD_INT 114
4232: PUSH
4233: LD_INT 116
4235: PUSH
4236: LD_INT 117
4238: PUSH
4239: LD_INT 118
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: ST_TO_ADDR
4265: GO 5040
4267: LD_INT 16
4269: DOUBLE
4270: EQUAL
4271: IFTRUE 4275
4273: GO 4411
4275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4276: LD_ADDR_VAR 0 2
4280: PUSH
4281: LD_INT 2
4283: PUSH
4284: LD_INT 4
4286: PUSH
4287: LD_INT 5
4289: PUSH
4290: LD_INT 7
4292: PUSH
4293: LD_INT 11
4295: PUSH
4296: LD_INT 12
4298: PUSH
4299: LD_INT 15
4301: PUSH
4302: LD_INT 16
4304: PUSH
4305: LD_INT 20
4307: PUSH
4308: LD_INT 21
4310: PUSH
4311: LD_INT 22
4313: PUSH
4314: LD_INT 23
4316: PUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 26
4322: PUSH
4323: LD_INT 30
4325: PUSH
4326: LD_INT 31
4328: PUSH
4329: LD_INT 32
4331: PUSH
4332: LD_INT 33
4334: PUSH
4335: LD_INT 34
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 101
4361: PUSH
4362: LD_INT 102
4364: PUSH
4365: LD_INT 103
4367: PUSH
4368: LD_INT 106
4370: PUSH
4371: LD_INT 108
4373: PUSH
4374: LD_INT 112
4376: PUSH
4377: LD_INT 113
4379: PUSH
4380: LD_INT 114
4382: PUSH
4383: LD_INT 116
4385: PUSH
4386: LD_INT 117
4388: PUSH
4389: LD_INT 118
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: ST_TO_ADDR
4409: GO 5040
4411: LD_INT 17
4413: DOUBLE
4414: EQUAL
4415: IFTRUE 4419
4417: GO 4643
4419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_INT 1
4427: PUSH
4428: LD_INT 2
4430: PUSH
4431: LD_INT 3
4433: PUSH
4434: LD_INT 4
4436: PUSH
4437: LD_INT 5
4439: PUSH
4440: LD_INT 6
4442: PUSH
4443: LD_INT 7
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 9
4451: PUSH
4452: LD_INT 10
4454: PUSH
4455: LD_INT 11
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: LD_INT 14
4466: PUSH
4467: LD_INT 15
4469: PUSH
4470: LD_INT 16
4472: PUSH
4473: LD_INT 17
4475: PUSH
4476: LD_INT 18
4478: PUSH
4479: LD_INT 19
4481: PUSH
4482: LD_INT 20
4484: PUSH
4485: LD_INT 21
4487: PUSH
4488: LD_INT 22
4490: PUSH
4491: LD_INT 23
4493: PUSH
4494: LD_INT 24
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 26
4502: PUSH
4503: LD_INT 27
4505: PUSH
4506: LD_INT 28
4508: PUSH
4509: LD_INT 29
4511: PUSH
4512: LD_INT 30
4514: PUSH
4515: LD_INT 31
4517: PUSH
4518: LD_INT 32
4520: PUSH
4521: LD_INT 33
4523: PUSH
4524: LD_INT 34
4526: PUSH
4527: LD_INT 36
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 101
4569: PUSH
4570: LD_INT 102
4572: PUSH
4573: LD_INT 103
4575: PUSH
4576: LD_INT 104
4578: PUSH
4579: LD_INT 105
4581: PUSH
4582: LD_INT 106
4584: PUSH
4585: LD_INT 107
4587: PUSH
4588: LD_INT 108
4590: PUSH
4591: LD_INT 109
4593: PUSH
4594: LD_INT 110
4596: PUSH
4597: LD_INT 111
4599: PUSH
4600: LD_INT 112
4602: PUSH
4603: LD_INT 113
4605: PUSH
4606: LD_INT 114
4608: PUSH
4609: LD_INT 116
4611: PUSH
4612: LD_INT 117
4614: PUSH
4615: LD_INT 118
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: ST_TO_ADDR
4641: GO 5040
4643: LD_INT 18
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4799
4651: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4652: LD_ADDR_VAR 0 2
4656: PUSH
4657: LD_INT 2
4659: PUSH
4660: LD_INT 4
4662: PUSH
4663: LD_INT 5
4665: PUSH
4666: LD_INT 7
4668: PUSH
4669: LD_INT 11
4671: PUSH
4672: LD_INT 12
4674: PUSH
4675: LD_INT 15
4677: PUSH
4678: LD_INT 16
4680: PUSH
4681: LD_INT 20
4683: PUSH
4684: LD_INT 21
4686: PUSH
4687: LD_INT 22
4689: PUSH
4690: LD_INT 23
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 26
4698: PUSH
4699: LD_INT 30
4701: PUSH
4702: LD_INT 31
4704: PUSH
4705: LD_INT 32
4707: PUSH
4708: LD_INT 33
4710: PUSH
4711: LD_INT 34
4713: PUSH
4714: LD_INT 35
4716: PUSH
4717: LD_INT 36
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 101
4745: PUSH
4746: LD_INT 102
4748: PUSH
4749: LD_INT 103
4751: PUSH
4752: LD_INT 106
4754: PUSH
4755: LD_INT 108
4757: PUSH
4758: LD_INT 112
4760: PUSH
4761: LD_INT 113
4763: PUSH
4764: LD_INT 114
4766: PUSH
4767: LD_INT 115
4769: PUSH
4770: LD_INT 116
4772: PUSH
4773: LD_INT 117
4775: PUSH
4776: LD_INT 118
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: ST_TO_ADDR
4797: GO 5040
4799: LD_INT 19
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 5039
4807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4808: LD_ADDR_VAR 0 2
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: LD_INT 2
4818: PUSH
4819: LD_INT 3
4821: PUSH
4822: LD_INT 4
4824: PUSH
4825: LD_INT 5
4827: PUSH
4828: LD_INT 6
4830: PUSH
4831: LD_INT 7
4833: PUSH
4834: LD_INT 8
4836: PUSH
4837: LD_INT 9
4839: PUSH
4840: LD_INT 10
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: LD_INT 12
4848: PUSH
4849: LD_INT 13
4851: PUSH
4852: LD_INT 14
4854: PUSH
4855: LD_INT 15
4857: PUSH
4858: LD_INT 16
4860: PUSH
4861: LD_INT 17
4863: PUSH
4864: LD_INT 18
4866: PUSH
4867: LD_INT 19
4869: PUSH
4870: LD_INT 20
4872: PUSH
4873: LD_INT 21
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 23
4881: PUSH
4882: LD_INT 24
4884: PUSH
4885: LD_INT 25
4887: PUSH
4888: LD_INT 26
4890: PUSH
4891: LD_INT 27
4893: PUSH
4894: LD_INT 28
4896: PUSH
4897: LD_INT 29
4899: PUSH
4900: LD_INT 30
4902: PUSH
4903: LD_INT 31
4905: PUSH
4906: LD_INT 32
4908: PUSH
4909: LD_INT 33
4911: PUSH
4912: LD_INT 34
4914: PUSH
4915: LD_INT 35
4917: PUSH
4918: LD_INT 36
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 101
4961: PUSH
4962: LD_INT 102
4964: PUSH
4965: LD_INT 103
4967: PUSH
4968: LD_INT 104
4970: PUSH
4971: LD_INT 105
4973: PUSH
4974: LD_INT 106
4976: PUSH
4977: LD_INT 107
4979: PUSH
4980: LD_INT 108
4982: PUSH
4983: LD_INT 109
4985: PUSH
4986: LD_INT 110
4988: PUSH
4989: LD_INT 111
4991: PUSH
4992: LD_INT 112
4994: PUSH
4995: LD_INT 113
4997: PUSH
4998: LD_INT 114
5000: PUSH
5001: LD_INT 115
5003: PUSH
5004: LD_INT 116
5006: PUSH
5007: LD_INT 117
5009: PUSH
5010: LD_INT 118
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: ST_TO_ADDR
5037: GO 5040
5039: POP
// end else
5040: GO 5271
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_INT 1
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 5
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: LD_INT 7
5067: PUSH
5068: LD_INT 8
5070: PUSH
5071: LD_INT 9
5073: PUSH
5074: LD_INT 10
5076: PUSH
5077: LD_INT 11
5079: PUSH
5080: LD_INT 12
5082: PUSH
5083: LD_INT 13
5085: PUSH
5086: LD_INT 14
5088: PUSH
5089: LD_INT 15
5091: PUSH
5092: LD_INT 16
5094: PUSH
5095: LD_INT 17
5097: PUSH
5098: LD_INT 18
5100: PUSH
5101: LD_INT 19
5103: PUSH
5104: LD_INT 20
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 22
5112: PUSH
5113: LD_INT 23
5115: PUSH
5116: LD_INT 24
5118: PUSH
5119: LD_INT 25
5121: PUSH
5122: LD_INT 26
5124: PUSH
5125: LD_INT 27
5127: PUSH
5128: LD_INT 28
5130: PUSH
5131: LD_INT 29
5133: PUSH
5134: LD_INT 30
5136: PUSH
5137: LD_INT 31
5139: PUSH
5140: LD_INT 32
5142: PUSH
5143: LD_INT 33
5145: PUSH
5146: LD_INT 34
5148: PUSH
5149: LD_INT 35
5151: PUSH
5152: LD_INT 36
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 101
5195: PUSH
5196: LD_INT 102
5198: PUSH
5199: LD_INT 103
5201: PUSH
5202: LD_INT 104
5204: PUSH
5205: LD_INT 105
5207: PUSH
5208: LD_INT 106
5210: PUSH
5211: LD_INT 107
5213: PUSH
5214: LD_INT 108
5216: PUSH
5217: LD_INT 109
5219: PUSH
5220: LD_INT 110
5222: PUSH
5223: LD_INT 111
5225: PUSH
5226: LD_INT 112
5228: PUSH
5229: LD_INT 113
5231: PUSH
5232: LD_INT 114
5234: PUSH
5235: LD_INT 115
5237: PUSH
5238: LD_INT 116
5240: PUSH
5241: LD_INT 117
5243: PUSH
5244: LD_INT 118
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: ST_TO_ADDR
// if result then
5271: LD_VAR 0 2
5275: IFFALSE 6061
// begin normal :=  ;
5277: LD_ADDR_VAR 0 5
5281: PUSH
5282: LD_STRING 
5284: ST_TO_ADDR
// hardcore :=  ;
5285: LD_ADDR_VAR 0 6
5289: PUSH
5290: LD_STRING 
5292: ST_TO_ADDR
// active :=  ;
5293: LD_ADDR_VAR 0 7
5297: PUSH
5298: LD_STRING 
5300: ST_TO_ADDR
// for i = 1 to normalCounter do
5301: LD_ADDR_VAR 0 8
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_EXP 3
5315: PUSH
5316: FOR_TO
5317: IFFALSE 5418
// begin tmp := 0 ;
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_STRING 0
5326: ST_TO_ADDR
// if result [ 1 ] then
5327: LD_VAR 0 2
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: IFFALSE 5400
// if result [ 1 ] [ 1 ] = i then
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 1
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PUSH
5350: LD_VAR 0 8
5354: EQUAL
5355: IFFALSE 5400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5357: LD_ADDR_VAR 0 2
5361: PUSH
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 1
5369: PPUSH
5370: LD_VAR 0 2
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: CALL_OW 3
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// tmp := 1 ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_STRING 1
5399: ST_TO_ADDR
// end ; normal := normal & tmp ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_VAR 0 5
5409: PUSH
5410: LD_VAR 0 3
5414: STR
5415: ST_TO_ADDR
// end ;
5416: GO 5316
5418: POP
5419: POP
// for i = 1 to hardcoreCounter do
5420: LD_ADDR_VAR 0 8
5424: PUSH
5425: DOUBLE
5426: LD_INT 1
5428: DEC
5429: ST_TO_ADDR
5430: LD_EXP 4
5434: PUSH
5435: FOR_TO
5436: IFFALSE 5541
// begin tmp := 0 ;
5438: LD_ADDR_VAR 0 3
5442: PUSH
5443: LD_STRING 0
5445: ST_TO_ADDR
// if result [ 2 ] then
5446: LD_VAR 0 2
5450: PUSH
5451: LD_INT 2
5453: ARRAY
5454: IFFALSE 5523
// if result [ 2 ] [ 1 ] = 100 + i then
5456: LD_VAR 0 2
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_INT 100
5471: PUSH
5472: LD_VAR 0 8
5476: PLUS
5477: EQUAL
5478: IFFALSE 5523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_VAR 0 2
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: LD_VAR 0 2
5497: PUSH
5498: LD_INT 2
5500: ARRAY
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 3
5509: PPUSH
5510: CALL_OW 1
5514: ST_TO_ADDR
// tmp := 1 ;
5515: LD_ADDR_VAR 0 3
5519: PUSH
5520: LD_STRING 1
5522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5523: LD_ADDR_VAR 0 6
5527: PUSH
5528: LD_VAR 0 6
5532: PUSH
5533: LD_VAR 0 3
5537: STR
5538: ST_TO_ADDR
// end ;
5539: GO 5435
5541: POP
5542: POP
// if isGameLoad then
5543: LD_VAR 0 1
5547: IFFALSE 6022
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5549: LD_ADDR_VAR 0 4
5553: PUSH
5554: LD_EXP 7
5558: PUSH
5559: LD_EXP 6
5563: PUSH
5564: LD_EXP 8
5568: PUSH
5569: LD_EXP 5
5573: PUSH
5574: LD_EXP 9
5578: PUSH
5579: LD_EXP 10
5583: PUSH
5584: LD_EXP 11
5588: PUSH
5589: LD_EXP 12
5593: PUSH
5594: LD_EXP 13
5598: PUSH
5599: LD_EXP 14
5603: PUSH
5604: LD_EXP 15
5608: PUSH
5609: LD_EXP 16
5613: PUSH
5614: LD_EXP 17
5618: PUSH
5619: LD_EXP 18
5623: PUSH
5624: LD_EXP 26
5628: PUSH
5629: LD_EXP 27
5633: PUSH
5634: LD_EXP 28
5638: PUSH
5639: LD_EXP 29
5643: PUSH
5644: LD_EXP 31
5648: PUSH
5649: LD_EXP 32
5653: PUSH
5654: LD_EXP 33
5658: PUSH
5659: LD_EXP 36
5663: PUSH
5664: LD_EXP 38
5668: PUSH
5669: LD_EXP 39
5673: PUSH
5674: LD_EXP 40
5678: PUSH
5679: LD_EXP 42
5683: PUSH
5684: LD_EXP 43
5688: PUSH
5689: LD_EXP 46
5693: PUSH
5694: LD_EXP 47
5698: PUSH
5699: LD_EXP 48
5703: PUSH
5704: LD_EXP 49
5708: PUSH
5709: LD_EXP 50
5713: PUSH
5714: LD_EXP 51
5718: PUSH
5719: LD_EXP 52
5723: PUSH
5724: LD_EXP 53
5728: PUSH
5729: LD_EXP 54
5733: PUSH
5734: LD_EXP 19
5738: PUSH
5739: LD_EXP 20
5743: PUSH
5744: LD_EXP 23
5748: PUSH
5749: LD_EXP 24
5753: PUSH
5754: LD_EXP 25
5758: PUSH
5759: LD_EXP 21
5763: PUSH
5764: LD_EXP 22
5768: PUSH
5769: LD_EXP 30
5773: PUSH
5774: LD_EXP 34
5778: PUSH
5779: LD_EXP 35
5783: PUSH
5784: LD_EXP 37
5788: PUSH
5789: LD_EXP 41
5793: PUSH
5794: LD_EXP 44
5798: PUSH
5799: LD_EXP 45
5803: PUSH
5804: LD_EXP 55
5808: PUSH
5809: LD_EXP 56
5813: PUSH
5814: LD_EXP 57
5818: PUSH
5819: LD_EXP 58
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: ST_TO_ADDR
// tmp :=  ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_STRING 
5887: ST_TO_ADDR
// for i = 1 to normalCounter do
5888: LD_ADDR_VAR 0 8
5892: PUSH
5893: DOUBLE
5894: LD_INT 1
5896: DEC
5897: ST_TO_ADDR
5898: LD_EXP 3
5902: PUSH
5903: FOR_TO
5904: IFFALSE 5940
// begin if flags [ i ] then
5906: LD_VAR 0 4
5910: PUSH
5911: LD_VAR 0 8
5915: ARRAY
5916: IFFALSE 5938
// tmp := tmp & i & ; ;
5918: LD_ADDR_VAR 0 3
5922: PUSH
5923: LD_VAR 0 3
5927: PUSH
5928: LD_VAR 0 8
5932: STR
5933: PUSH
5934: LD_STRING ;
5936: STR
5937: ST_TO_ADDR
// end ;
5938: GO 5903
5940: POP
5941: POP
// for i = 1 to hardcoreCounter do
5942: LD_ADDR_VAR 0 8
5946: PUSH
5947: DOUBLE
5948: LD_INT 1
5950: DEC
5951: ST_TO_ADDR
5952: LD_EXP 4
5956: PUSH
5957: FOR_TO
5958: IFFALSE 6004
// begin if flags [ normalCounter + i ] then
5960: LD_VAR 0 4
5964: PUSH
5965: LD_EXP 3
5969: PUSH
5970: LD_VAR 0 8
5974: PLUS
5975: ARRAY
5976: IFFALSE 6002
// tmp := tmp & ( 100 + i ) & ; ;
5978: LD_ADDR_VAR 0 3
5982: PUSH
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 100
5990: PUSH
5991: LD_VAR 0 8
5995: PLUS
5996: STR
5997: PUSH
5998: LD_STRING ;
6000: STR
6001: ST_TO_ADDR
// end ;
6002: GO 5957
6004: POP
6005: POP
// if tmp then
6006: LD_VAR 0 3
6010: IFFALSE 6022
// active := tmp ;
6012: LD_ADDR_VAR 0 7
6016: PUSH
6017: LD_VAR 0 3
6021: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6022: LD_STRING getStreamItemsFromMission("
6024: PUSH
6025: LD_VAR 0 5
6029: STR
6030: PUSH
6031: LD_STRING ","
6033: STR
6034: PUSH
6035: LD_VAR 0 6
6039: STR
6040: PUSH
6041: LD_STRING ","
6043: STR
6044: PUSH
6045: LD_VAR 0 7
6049: STR
6050: PUSH
6051: LD_STRING ")
6053: STR
6054: PPUSH
6055: CALL_OW 559
// end else
6059: GO 6068
// ToLua ( getStreamItemsFromMission("","","") ) ;
6061: LD_STRING getStreamItemsFromMission("","","")
6063: PPUSH
6064: CALL_OW 559
// end ;
6068: LD_VAR 0 2
6072: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6073: LD_EXP 2
6077: PUSH
6078: LD_EXP 7
6082: AND
6083: IFFALSE 6207
6085: GO 6087
6087: DISABLE
6088: LD_INT 0
6090: PPUSH
6091: PPUSH
// begin enable ;
6092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_INT 22
6100: PUSH
6101: LD_OWVAR 2
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 2
6112: PUSH
6113: LD_INT 34
6115: PUSH
6116: LD_INT 7
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 34
6125: PUSH
6126: LD_INT 45
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 34
6135: PUSH
6136: LD_INT 28
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 34
6145: PUSH
6146: LD_INT 47
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PPUSH
6164: CALL_OW 69
6168: ST_TO_ADDR
// if not tmp then
6169: LD_VAR 0 2
6173: NOT
6174: IFFALSE 6178
// exit ;
6176: GO 6207
// for i in tmp do
6178: LD_ADDR_VAR 0 1
6182: PUSH
6183: LD_VAR 0 2
6187: PUSH
6188: FOR_IN
6189: IFFALSE 6205
// begin SetLives ( i , 0 ) ;
6191: LD_VAR 0 1
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL_OW 234
// end ;
6203: GO 6188
6205: POP
6206: POP
// end ;
6207: PPOPN 2
6209: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6210: LD_EXP 2
6214: PUSH
6215: LD_EXP 8
6219: AND
6220: IFFALSE 6304
6222: GO 6224
6224: DISABLE
6225: LD_INT 0
6227: PPUSH
6228: PPUSH
// begin enable ;
6229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6230: LD_ADDR_VAR 0 2
6234: PUSH
6235: LD_INT 22
6237: PUSH
6238: LD_OWVAR 2
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 32
6249: PUSH
6250: LD_INT 3
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: ST_TO_ADDR
// if not tmp then
6266: LD_VAR 0 2
6270: NOT
6271: IFFALSE 6275
// exit ;
6273: GO 6304
// for i in tmp do
6275: LD_ADDR_VAR 0 1
6279: PUSH
6280: LD_VAR 0 2
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6302
// begin SetLives ( i , 0 ) ;
6288: LD_VAR 0 1
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL_OW 234
// end ;
6300: GO 6285
6302: POP
6303: POP
// end ;
6304: PPOPN 2
6306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6307: LD_EXP 2
6311: PUSH
6312: LD_EXP 5
6316: AND
6317: IFFALSE 6410
6319: GO 6321
6321: DISABLE
6322: LD_INT 0
6324: PPUSH
// begin enable ;
6325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_INT 22
6333: PUSH
6334: LD_OWVAR 2
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 25
6358: PUSH
6359: LD_INT 9
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 8
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6408
// begin SetClass ( i , 1 ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 1
6401: PPUSH
6402: CALL_OW 336
// end ;
6406: GO 6391
6408: POP
6409: POP
// end ;
6410: PPOPN 1
6412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6413: LD_EXP 2
6417: PUSH
6418: LD_EXP 6
6422: AND
6423: PUSH
6424: LD_OWVAR 65
6428: PUSH
6429: LD_INT 7
6431: LESS
6432: AND
6433: IFFALSE 6447
6435: GO 6437
6437: DISABLE
// begin enable ;
6438: ENABLE
// game_speed := 7 ;
6439: LD_ADDR_OWVAR 65
6443: PUSH
6444: LD_INT 7
6446: ST_TO_ADDR
// end ;
6447: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6448: LD_EXP 2
6452: PUSH
6453: LD_EXP 9
6457: AND
6458: IFFALSE 6660
6460: GO 6462
6462: DISABLE
6463: LD_INT 0
6465: PPUSH
6466: PPUSH
6467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_INT 81
6475: PUSH
6476: LD_OWVAR 2
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 69
6503: ST_TO_ADDR
// if not tmp then
6504: LD_VAR 0 3
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6660
// if tmp > 5 then
6513: LD_VAR 0 3
6517: PUSH
6518: LD_INT 5
6520: GREATER
6521: IFFALSE 6533
// k := 5 else
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: LD_INT 5
6530: ST_TO_ADDR
6531: GO 6543
// k := tmp ;
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_VAR 0 3
6542: ST_TO_ADDR
// for i := 1 to k do
6543: LD_ADDR_VAR 0 1
6547: PUSH
6548: DOUBLE
6549: LD_INT 1
6551: DEC
6552: ST_TO_ADDR
6553: LD_VAR 0 2
6557: PUSH
6558: FOR_TO
6559: IFFALSE 6658
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6561: LD_VAR 0 3
6565: PUSH
6566: LD_VAR 0 1
6570: ARRAY
6571: PPUSH
6572: LD_VAR 0 1
6576: PUSH
6577: LD_INT 4
6579: MOD
6580: PUSH
6581: LD_INT 1
6583: PLUS
6584: PPUSH
6585: CALL_OW 259
6589: PUSH
6590: LD_INT 10
6592: LESS
6593: IFFALSE 6656
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6595: LD_VAR 0 3
6599: PUSH
6600: LD_VAR 0 1
6604: ARRAY
6605: PPUSH
6606: LD_VAR 0 1
6610: PUSH
6611: LD_INT 4
6613: MOD
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 3
6623: PUSH
6624: LD_VAR 0 1
6628: ARRAY
6629: PPUSH
6630: LD_VAR 0 1
6634: PUSH
6635: LD_INT 4
6637: MOD
6638: PUSH
6639: LD_INT 1
6641: PLUS
6642: PPUSH
6643: CALL_OW 259
6647: PUSH
6648: LD_INT 1
6650: PLUS
6651: PPUSH
6652: CALL_OW 237
6656: GO 6558
6658: POP
6659: POP
// end ;
6660: PPOPN 3
6662: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6663: LD_EXP 2
6667: PUSH
6668: LD_EXP 10
6672: AND
6673: IFFALSE 6693
6675: GO 6677
6677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6678: LD_INT 4
6680: PPUSH
6681: LD_OWVAR 2
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 324
6693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6694: LD_EXP 2
6698: PUSH
6699: LD_EXP 39
6703: AND
6704: IFFALSE 6724
6706: GO 6708
6708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6709: LD_INT 19
6711: PPUSH
6712: LD_OWVAR 2
6716: PPUSH
6717: LD_INT 0
6719: PPUSH
6720: CALL_OW 324
6724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6725: LD_EXP 2
6729: PUSH
6730: LD_EXP 11
6734: AND
6735: IFFALSE 6837
6737: GO 6739
6739: DISABLE
6740: LD_INT 0
6742: PPUSH
6743: PPUSH
// begin enable ;
6744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_OWVAR 2
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 2
6764: PUSH
6765: LD_INT 34
6767: PUSH
6768: LD_INT 11
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 34
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PPUSH
6794: CALL_OW 69
6798: ST_TO_ADDR
// if not tmp then
6799: LD_VAR 0 2
6803: NOT
6804: IFFALSE 6808
// exit ;
6806: GO 6837
// for i in tmp do
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: LD_VAR 0 2
6817: PUSH
6818: FOR_IN
6819: IFFALSE 6835
// begin SetLives ( i , 0 ) ;
6821: LD_VAR 0 1
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 234
// end ;
6833: GO 6818
6835: POP
6836: POP
// end ;
6837: PPOPN 2
6839: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6840: LD_EXP 2
6844: PUSH
6845: LD_EXP 12
6849: AND
6850: IFFALSE 6870
6852: GO 6854
6854: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6855: LD_INT 32
6857: PPUSH
6858: LD_OWVAR 2
6862: PPUSH
6863: LD_INT 0
6865: PPUSH
6866: CALL_OW 324
6870: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6871: LD_EXP 2
6875: PUSH
6876: LD_EXP 13
6880: AND
6881: IFFALSE 7062
6883: GO 6885
6885: DISABLE
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
6890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6891: LD_ADDR_VAR 0 2
6895: PUSH
6896: LD_INT 22
6898: PUSH
6899: LD_OWVAR 2
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: LD_INT 33
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 69
6926: ST_TO_ADDR
// if not tmp then
6927: LD_VAR 0 2
6931: NOT
6932: IFFALSE 6936
// exit ;
6934: GO 7062
// side := 0 ;
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_INT 0
6943: ST_TO_ADDR
// for i := 1 to 8 do
6944: LD_ADDR_VAR 0 1
6948: PUSH
6949: DOUBLE
6950: LD_INT 1
6952: DEC
6953: ST_TO_ADDR
6954: LD_INT 8
6956: PUSH
6957: FOR_TO
6958: IFFALSE 7006
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6960: LD_OWVAR 2
6964: PUSH
6965: LD_VAR 0 1
6969: NONEQUAL
6970: PUSH
6971: LD_OWVAR 2
6975: PPUSH
6976: LD_VAR 0 1
6980: PPUSH
6981: CALL_OW 81
6985: PUSH
6986: LD_INT 2
6988: EQUAL
6989: AND
6990: IFFALSE 7004
// begin side := i ;
6992: LD_ADDR_VAR 0 3
6996: PUSH
6997: LD_VAR 0 1
7001: ST_TO_ADDR
// break ;
7002: GO 7006
// end ;
7004: GO 6957
7006: POP
7007: POP
// if not side then
7008: LD_VAR 0 3
7012: NOT
7013: IFFALSE 7017
// exit ;
7015: GO 7062
// for i := 1 to tmp do
7017: LD_ADDR_VAR 0 1
7021: PUSH
7022: DOUBLE
7023: LD_INT 1
7025: DEC
7026: ST_TO_ADDR
7027: LD_VAR 0 2
7031: PUSH
7032: FOR_TO
7033: IFFALSE 7060
// if Prob ( 60 ) then
7035: LD_INT 60
7037: PPUSH
7038: CALL_OW 13
7042: IFFALSE 7058
// SetSide ( i , side ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 235
7058: GO 7032
7060: POP
7061: POP
// end ;
7062: PPOPN 3
7064: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7065: LD_EXP 2
7069: PUSH
7070: LD_EXP 15
7074: AND
7075: IFFALSE 7194
7077: GO 7079
7079: DISABLE
7080: LD_INT 0
7082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7083: LD_ADDR_VAR 0 1
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_OWVAR 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: LD_INT 23
7115: PUSH
7116: LD_INT 0
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: FOR_IN
7138: IFFALSE 7192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL_OW 257
7149: PUSH
7150: LD_INT 1
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: LD_INT 4
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: IN
7168: IFFALSE 7190
// SetClass ( un , rand ( 1 , 4 ) ) ;
7170: LD_VAR 0 1
7174: PPUSH
7175: LD_INT 1
7177: PPUSH
7178: LD_INT 4
7180: PPUSH
7181: CALL_OW 12
7185: PPUSH
7186: CALL_OW 336
7190: GO 7137
7192: POP
7193: POP
// end ;
7194: PPOPN 1
7196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7197: LD_EXP 2
7201: PUSH
7202: LD_EXP 14
7206: AND
7207: IFFALSE 7286
7209: GO 7211
7211: DISABLE
7212: LD_INT 0
7214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7215: LD_ADDR_VAR 0 1
7219: PUSH
7220: LD_INT 22
7222: PUSH
7223: LD_OWVAR 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 21
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 69
7250: ST_TO_ADDR
// if not tmp then
7251: LD_VAR 0 1
7255: NOT
7256: IFFALSE 7260
// exit ;
7258: GO 7286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7260: LD_VAR 0 1
7264: PUSH
7265: LD_INT 1
7267: PPUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 12
7277: ARRAY
7278: PPUSH
7279: LD_INT 100
7281: PPUSH
7282: CALL_OW 234
// end ;
7286: PPOPN 1
7288: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7289: LD_EXP 2
7293: PUSH
7294: LD_EXP 16
7298: AND
7299: IFFALSE 7397
7301: GO 7303
7303: DISABLE
7304: LD_INT 0
7306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_OWVAR 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PPUSH
7338: CALL_OW 69
7342: ST_TO_ADDR
// if not tmp then
7343: LD_VAR 0 1
7347: NOT
7348: IFFALSE 7352
// exit ;
7350: GO 7397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7352: LD_VAR 0 1
7356: PUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 12
7369: ARRAY
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: LD_INT 4
7376: PPUSH
7377: CALL_OW 12
7381: PPUSH
7382: LD_INT 3000
7384: PPUSH
7385: LD_INT 9000
7387: PPUSH
7388: CALL_OW 12
7392: PPUSH
7393: CALL_OW 492
// end ;
7397: PPOPN 1
7399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7400: LD_EXP 2
7404: PUSH
7405: LD_EXP 17
7409: AND
7410: IFFALSE 7430
7412: GO 7414
7414: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7415: LD_INT 1
7417: PPUSH
7418: LD_OWVAR 2
7422: PPUSH
7423: LD_INT 0
7425: PPUSH
7426: CALL_OW 324
7430: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7431: LD_EXP 2
7435: PUSH
7436: LD_EXP 18
7440: AND
7441: IFFALSE 7524
7443: GO 7445
7445: DISABLE
7446: LD_INT 0
7448: PPUSH
7449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_INT 22
7457: PUSH
7458: LD_OWVAR 2
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 21
7469: PUSH
7470: LD_INT 3
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PPUSH
7481: CALL_OW 69
7485: ST_TO_ADDR
// if not tmp then
7486: LD_VAR 0 2
7490: NOT
7491: IFFALSE 7495
// exit ;
7493: GO 7524
// for i in tmp do
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_VAR 0 2
7504: PUSH
7505: FOR_IN
7506: IFFALSE 7522
// SetBLevel ( i , 10 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 10
7515: PPUSH
7516: CALL_OW 241
7520: GO 7505
7522: POP
7523: POP
// end ;
7524: PPOPN 2
7526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7527: LD_EXP 2
7531: PUSH
7532: LD_EXP 19
7536: AND
7537: IFFALSE 7648
7539: GO 7541
7541: DISABLE
7542: LD_INT 0
7544: PPUSH
7545: PPUSH
7546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: LD_INT 22
7554: PUSH
7555: LD_OWVAR 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 25
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 69
7582: ST_TO_ADDR
// if not tmp then
7583: LD_VAR 0 3
7587: NOT
7588: IFFALSE 7592
// exit ;
7590: GO 7648
// un := tmp [ rand ( 1 , tmp ) ] ;
7592: LD_ADDR_VAR 0 2
7596: PUSH
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 1
7604: PPUSH
7605: LD_VAR 0 3
7609: PPUSH
7610: CALL_OW 12
7614: ARRAY
7615: ST_TO_ADDR
// if Crawls ( un ) then
7616: LD_VAR 0 2
7620: PPUSH
7621: CALL_OW 318
7625: IFFALSE 7636
// ComWalk ( un ) ;
7627: LD_VAR 0 2
7631: PPUSH
7632: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7636: LD_VAR 0 2
7640: PPUSH
7641: LD_INT 5
7643: PPUSH
7644: CALL_OW 336
// end ;
7648: PPOPN 3
7650: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7651: LD_EXP 2
7655: PUSH
7656: LD_EXP 20
7660: AND
7661: PUSH
7662: LD_OWVAR 67
7666: PUSH
7667: LD_INT 4
7669: LESS
7670: AND
7671: IFFALSE 7690
7673: GO 7675
7675: DISABLE
// begin Difficulty := Difficulty + 1 ;
7676: LD_ADDR_OWVAR 67
7680: PUSH
7681: LD_OWVAR 67
7685: PUSH
7686: LD_INT 1
7688: PLUS
7689: ST_TO_ADDR
// end ;
7690: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7691: LD_EXP 2
7695: PUSH
7696: LD_EXP 21
7700: AND
7701: IFFALSE 7804
7703: GO 7705
7705: DISABLE
7706: LD_INT 0
7708: PPUSH
// begin for i := 1 to 5 do
7709: LD_ADDR_VAR 0 1
7713: PUSH
7714: DOUBLE
7715: LD_INT 1
7717: DEC
7718: ST_TO_ADDR
7719: LD_INT 5
7721: PUSH
7722: FOR_TO
7723: IFFALSE 7802
// begin uc_nation := nation_nature ;
7725: LD_ADDR_OWVAR 21
7729: PUSH
7730: LD_INT 0
7732: ST_TO_ADDR
// uc_side := 0 ;
7733: LD_ADDR_OWVAR 20
7737: PUSH
7738: LD_INT 0
7740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7741: LD_ADDR_OWVAR 29
7745: PUSH
7746: LD_INT 12
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: ST_TO_ADDR
// hc_agressivity := 20 ;
7756: LD_ADDR_OWVAR 35
7760: PUSH
7761: LD_INT 20
7763: ST_TO_ADDR
// hc_class := class_tiger ;
7764: LD_ADDR_OWVAR 28
7768: PUSH
7769: LD_INT 14
7771: ST_TO_ADDR
// hc_gallery :=  ;
7772: LD_ADDR_OWVAR 33
7776: PUSH
7777: LD_STRING 
7779: ST_TO_ADDR
// hc_name :=  ;
7780: LD_ADDR_OWVAR 26
7784: PUSH
7785: LD_STRING 
7787: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7788: CALL_OW 44
7792: PPUSH
7793: LD_INT 0
7795: PPUSH
7796: CALL_OW 51
// end ;
7800: GO 7722
7802: POP
7803: POP
// end ;
7804: PPOPN 1
7806: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7807: LD_EXP 2
7811: PUSH
7812: LD_EXP 22
7816: AND
7817: IFFALSE 7826
7819: GO 7821
7821: DISABLE
// StreamSibBomb ;
7822: CALL 7827 0 0
7826: END
// export function StreamSibBomb ; var i , x , y ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
7831: PPUSH
7832: PPUSH
// result := false ;
7833: LD_ADDR_VAR 0 1
7837: PUSH
7838: LD_INT 0
7840: ST_TO_ADDR
// for i := 1 to 16 do
7841: LD_ADDR_VAR 0 2
7845: PUSH
7846: DOUBLE
7847: LD_INT 1
7849: DEC
7850: ST_TO_ADDR
7851: LD_INT 16
7853: PUSH
7854: FOR_TO
7855: IFFALSE 8054
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7857: LD_ADDR_VAR 0 3
7861: PUSH
7862: LD_INT 10
7864: PUSH
7865: LD_INT 20
7867: PUSH
7868: LD_INT 30
7870: PUSH
7871: LD_INT 40
7873: PUSH
7874: LD_INT 50
7876: PUSH
7877: LD_INT 60
7879: PUSH
7880: LD_INT 70
7882: PUSH
7883: LD_INT 80
7885: PUSH
7886: LD_INT 90
7888: PUSH
7889: LD_INT 100
7891: PUSH
7892: LD_INT 110
7894: PUSH
7895: LD_INT 120
7897: PUSH
7898: LD_INT 130
7900: PUSH
7901: LD_INT 140
7903: PUSH
7904: LD_INT 150
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_INT 15
7929: PPUSH
7930: CALL_OW 12
7934: ARRAY
7935: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7936: LD_ADDR_VAR 0 4
7940: PUSH
7941: LD_INT 10
7943: PUSH
7944: LD_INT 20
7946: PUSH
7947: LD_INT 30
7949: PUSH
7950: LD_INT 40
7952: PUSH
7953: LD_INT 50
7955: PUSH
7956: LD_INT 60
7958: PUSH
7959: LD_INT 70
7961: PUSH
7962: LD_INT 80
7964: PUSH
7965: LD_INT 90
7967: PUSH
7968: LD_INT 100
7970: PUSH
7971: LD_INT 110
7973: PUSH
7974: LD_INT 120
7976: PUSH
7977: LD_INT 130
7979: PUSH
7980: LD_INT 140
7982: PUSH
7983: LD_INT 150
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: LD_INT 1
8005: PPUSH
8006: LD_INT 15
8008: PPUSH
8009: CALL_OW 12
8013: ARRAY
8014: ST_TO_ADDR
// if ValidHex ( x , y ) then
8015: LD_VAR 0 3
8019: PPUSH
8020: LD_VAR 0 4
8024: PPUSH
8025: CALL_OW 488
8029: IFFALSE 8052
// begin result := [ x , y ] ;
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_VAR 0 3
8040: PUSH
8041: LD_VAR 0 4
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: ST_TO_ADDR
// break ;
8050: GO 8054
// end ; end ;
8052: GO 7854
8054: POP
8055: POP
// if result then
8056: LD_VAR 0 1
8060: IFFALSE 8120
// begin ToLua ( playSibBomb() ) ;
8062: LD_STRING playSibBomb()
8064: PPUSH
8065: CALL_OW 559
// wait ( 0 0$14 ) ;
8069: LD_INT 490
8071: PPUSH
8072: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8076: LD_VAR 0 1
8080: PUSH
8081: LD_INT 1
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 1
8089: PUSH
8090: LD_INT 2
8092: ARRAY
8093: PPUSH
8094: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8098: LD_VAR 0 1
8102: PUSH
8103: LD_INT 1
8105: ARRAY
8106: PPUSH
8107: LD_VAR 0 1
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PPUSH
8116: CALL_OW 429
// end ; end ;
8120: LD_VAR 0 1
8124: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8125: LD_EXP 2
8129: PUSH
8130: LD_EXP 24
8134: AND
8135: IFFALSE 8147
8137: GO 8139
8139: DISABLE
// YouLost (  ) ;
8140: LD_STRING 
8142: PPUSH
8143: CALL_OW 104
8147: END
// every 0 0$1 trigger StreamModeActive and sFog do
8148: LD_EXP 2
8152: PUSH
8153: LD_EXP 23
8157: AND
8158: IFFALSE 8172
8160: GO 8162
8162: DISABLE
// FogOff ( your_side ) ;
8163: LD_OWVAR 2
8167: PPUSH
8168: CALL_OW 344
8172: END
// every 0 0$1 trigger StreamModeActive and sSun do
8173: LD_EXP 2
8177: PUSH
8178: LD_EXP 25
8182: AND
8183: IFFALSE 8211
8185: GO 8187
8187: DISABLE
// begin solar_recharge_percent := 0 ;
8188: LD_ADDR_OWVAR 79
8192: PUSH
8193: LD_INT 0
8195: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8196: LD_INT 10500
8198: PPUSH
8199: CALL_OW 67
// solar_recharge_percent := 100 ;
8203: LD_ADDR_OWVAR 79
8207: PUSH
8208: LD_INT 100
8210: ST_TO_ADDR
// end ;
8211: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8212: LD_EXP 2
8216: PUSH
8217: LD_EXP 26
8221: AND
8222: IFFALSE 8461
8224: GO 8226
8226: DISABLE
8227: LD_INT 0
8229: PPUSH
8230: PPUSH
8231: PPUSH
// begin tmp := [ ] ;
8232: LD_ADDR_VAR 0 3
8236: PUSH
8237: EMPTY
8238: ST_TO_ADDR
// for i := 1 to 6 do
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: DOUBLE
8245: LD_INT 1
8247: DEC
8248: ST_TO_ADDR
8249: LD_INT 6
8251: PUSH
8252: FOR_TO
8253: IFFALSE 8358
// begin uc_nation := nation_nature ;
8255: LD_ADDR_OWVAR 21
8259: PUSH
8260: LD_INT 0
8262: ST_TO_ADDR
// uc_side := 0 ;
8263: LD_ADDR_OWVAR 20
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8271: LD_ADDR_OWVAR 29
8275: PUSH
8276: LD_INT 12
8278: PUSH
8279: LD_INT 12
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// hc_agressivity := 20 ;
8286: LD_ADDR_OWVAR 35
8290: PUSH
8291: LD_INT 20
8293: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8294: LD_ADDR_OWVAR 28
8298: PUSH
8299: LD_INT 17
8301: ST_TO_ADDR
// hc_gallery :=  ;
8302: LD_ADDR_OWVAR 33
8306: PUSH
8307: LD_STRING 
8309: ST_TO_ADDR
// hc_name :=  ;
8310: LD_ADDR_OWVAR 26
8314: PUSH
8315: LD_STRING 
8317: ST_TO_ADDR
// un := CreateHuman ;
8318: LD_ADDR_VAR 0 2
8322: PUSH
8323: CALL_OW 44
8327: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 51
// tmp := tmp ^ un ;
8340: LD_ADDR_VAR 0 3
8344: PUSH
8345: LD_VAR 0 3
8349: PUSH
8350: LD_VAR 0 2
8354: ADD
8355: ST_TO_ADDR
// end ;
8356: GO 8252
8358: POP
8359: POP
// repeat wait ( 0 0$1 ) ;
8360: LD_INT 35
8362: PPUSH
8363: CALL_OW 67
// for un in tmp do
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_VAR 0 3
8376: PUSH
8377: FOR_IN
8378: IFFALSE 8452
// begin if IsDead ( un ) then
8380: LD_VAR 0 2
8384: PPUSH
8385: CALL_OW 301
8389: IFFALSE 8409
// begin tmp := tmp diff un ;
8391: LD_ADDR_VAR 0 3
8395: PUSH
8396: LD_VAR 0 3
8400: PUSH
8401: LD_VAR 0 2
8405: DIFF
8406: ST_TO_ADDR
// continue ;
8407: GO 8377
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 0
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PPUSH
8431: CALL_OW 69
8435: PPUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL_OW 74
8445: PPUSH
8446: CALL_OW 115
// end ;
8450: GO 8377
8452: POP
8453: POP
// until not tmp ;
8454: LD_VAR 0 3
8458: NOT
8459: IFFALSE 8360
// end ;
8461: PPOPN 3
8463: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8464: LD_EXP 2
8468: PUSH
8469: LD_EXP 27
8473: AND
8474: IFFALSE 8528
8476: GO 8478
8478: DISABLE
// begin ToLua ( displayTroll(); ) ;
8479: LD_STRING displayTroll();
8481: PPUSH
8482: CALL_OW 559
// wait ( 3 3$00 ) ;
8486: LD_INT 6300
8488: PPUSH
8489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8493: LD_STRING hideTroll();
8495: PPUSH
8496: CALL_OW 559
// wait ( 1 1$00 ) ;
8500: LD_INT 2100
8502: PPUSH
8503: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8507: LD_STRING displayTroll();
8509: PPUSH
8510: CALL_OW 559
// wait ( 1 1$00 ) ;
8514: LD_INT 2100
8516: PPUSH
8517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8521: LD_STRING hideTroll();
8523: PPUSH
8524: CALL_OW 559
// end ;
8528: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8529: LD_EXP 2
8533: PUSH
8534: LD_EXP 28
8538: AND
8539: IFFALSE 8602
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin p := 0 ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// repeat game_speed := 1 ;
8555: LD_ADDR_OWVAR 65
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8563: LD_INT 35
8565: PPUSH
8566: CALL_OW 67
// p := p + 1 ;
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: LD_VAR 0 1
8579: PUSH
8580: LD_INT 1
8582: PLUS
8583: ST_TO_ADDR
// until p >= 60 ;
8584: LD_VAR 0 1
8588: PUSH
8589: LD_INT 60
8591: GREATEREQUAL
8592: IFFALSE 8555
// game_speed := 4 ;
8594: LD_ADDR_OWVAR 65
8598: PUSH
8599: LD_INT 4
8601: ST_TO_ADDR
// end ;
8602: PPOPN 1
8604: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8605: LD_EXP 2
8609: PUSH
8610: LD_EXP 29
8614: AND
8615: IFFALSE 8761
8617: GO 8619
8619: DISABLE
8620: LD_INT 0
8622: PPUSH
8623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8624: LD_ADDR_VAR 0 1
8628: PUSH
8629: LD_INT 22
8631: PUSH
8632: LD_OWVAR 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 30
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 30
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: ST_TO_ADDR
// if not depot then
8678: LD_VAR 0 1
8682: NOT
8683: IFFALSE 8687
// exit ;
8685: GO 8761
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8687: LD_ADDR_VAR 0 2
8691: PUSH
8692: LD_VAR 0 1
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: LD_VAR 0 1
8704: PPUSH
8705: CALL_OW 12
8709: ARRAY
8710: PPUSH
8711: CALL_OW 274
8715: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8716: LD_VAR 0 2
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8731: LD_VAR 0 2
8735: PPUSH
8736: LD_INT 2
8738: PPUSH
8739: LD_INT 0
8741: PPUSH
8742: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8746: LD_VAR 0 2
8750: PPUSH
8751: LD_INT 3
8753: PPUSH
8754: LD_INT 0
8756: PPUSH
8757: CALL_OW 277
// end ;
8761: PPOPN 2
8763: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8764: LD_EXP 2
8768: PUSH
8769: LD_EXP 30
8773: AND
8774: IFFALSE 8871
8776: GO 8778
8778: DISABLE
8779: LD_INT 0
8781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 22
8789: PUSH
8790: LD_OWVAR 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 3
8811: PUSH
8812: LD_INT 23
8814: PUSH
8815: LD_INT 0
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: ST_TO_ADDR
// if not tmp then
8836: LD_VAR 0 1
8840: NOT
8841: IFFALSE 8845
// exit ;
8843: GO 8871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8845: LD_VAR 0 1
8849: PUSH
8850: LD_INT 1
8852: PPUSH
8853: LD_VAR 0 1
8857: PPUSH
8858: CALL_OW 12
8862: ARRAY
8863: PPUSH
8864: LD_INT 200
8866: PPUSH
8867: CALL_OW 234
// end ;
8871: PPOPN 1
8873: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8874: LD_EXP 2
8878: PUSH
8879: LD_EXP 31
8883: AND
8884: IFFALSE 8963
8886: GO 8888
8888: DISABLE
8889: LD_INT 0
8891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 22
8899: PUSH
8900: LD_OWVAR 2
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 21
8911: PUSH
8912: LD_INT 2
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 69
8927: ST_TO_ADDR
// if not tmp then
8928: LD_VAR 0 1
8932: NOT
8933: IFFALSE 8937
// exit ;
8935: GO 8963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8937: LD_VAR 0 1
8941: PUSH
8942: LD_INT 1
8944: PPUSH
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL_OW 12
8954: ARRAY
8955: PPUSH
8956: LD_INT 60
8958: PPUSH
8959: CALL_OW 234
// end ;
8963: PPOPN 1
8965: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8966: LD_EXP 2
8970: PUSH
8971: LD_EXP 32
8975: AND
8976: IFFALSE 9075
8978: GO 8980
8980: DISABLE
8981: LD_INT 0
8983: PPUSH
8984: PPUSH
// begin enable ;
8985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_INT 22
8993: PUSH
8994: LD_OWVAR 2
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 61
9005: PUSH
9006: EMPTY
9007: LIST
9008: PUSH
9009: LD_INT 33
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PPUSH
9024: CALL_OW 69
9028: ST_TO_ADDR
// if not tmp then
9029: LD_VAR 0 1
9033: NOT
9034: IFFALSE 9038
// exit ;
9036: GO 9075
// for i in tmp do
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_VAR 0 1
9047: PUSH
9048: FOR_IN
9049: IFFALSE 9073
// if IsControledBy ( i ) then
9051: LD_VAR 0 2
9055: PPUSH
9056: CALL_OW 312
9060: IFFALSE 9071
// ComUnlink ( i ) ;
9062: LD_VAR 0 2
9066: PPUSH
9067: CALL_OW 136
9071: GO 9048
9073: POP
9074: POP
// end ;
9075: PPOPN 2
9077: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9078: LD_EXP 2
9082: PUSH
9083: LD_EXP 33
9087: AND
9088: IFFALSE 9228
9090: GO 9092
9092: DISABLE
9093: LD_INT 0
9095: PPUSH
9096: PPUSH
// begin ToLua ( displayPowell(); ) ;
9097: LD_STRING displayPowell();
9099: PPUSH
9100: CALL_OW 559
// uc_side := 0 ;
9104: LD_ADDR_OWVAR 20
9108: PUSH
9109: LD_INT 0
9111: ST_TO_ADDR
// uc_nation := 2 ;
9112: LD_ADDR_OWVAR 21
9116: PUSH
9117: LD_INT 2
9119: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9120: LD_ADDR_OWVAR 37
9124: PUSH
9125: LD_INT 14
9127: ST_TO_ADDR
// vc_engine := engine_siberite ;
9128: LD_ADDR_OWVAR 39
9132: PUSH
9133: LD_INT 3
9135: ST_TO_ADDR
// vc_control := control_apeman ;
9136: LD_ADDR_OWVAR 38
9140: PUSH
9141: LD_INT 5
9143: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9144: LD_ADDR_OWVAR 40
9148: PUSH
9149: LD_INT 29
9151: ST_TO_ADDR
// un := CreateVehicle ;
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: CALL_OW 45
9161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9162: LD_VAR 0 2
9166: PPUSH
9167: LD_INT 1
9169: PPUSH
9170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9174: LD_INT 35
9176: PPUSH
9177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9181: LD_VAR 0 2
9185: PPUSH
9186: LD_INT 22
9188: PUSH
9189: LD_OWVAR 2
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PPUSH
9198: CALL_OW 69
9202: PPUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: CALL_OW 74
9212: PPUSH
9213: CALL_OW 115
// until IsDead ( un ) ;
9217: LD_VAR 0 2
9221: PPUSH
9222: CALL_OW 301
9226: IFFALSE 9174
// end ;
9228: PPOPN 2
9230: END
// every 0 0$1 trigger StreamModeActive and sStu do
9231: LD_EXP 2
9235: PUSH
9236: LD_EXP 41
9240: AND
9241: IFFALSE 9257
9243: GO 9245
9245: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9246: LD_STRING displayStucuk();
9248: PPUSH
9249: CALL_OW 559
// ResetFog ;
9253: CALL_OW 335
// end ;
9257: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9258: LD_EXP 2
9262: PUSH
9263: LD_EXP 34
9267: AND
9268: IFFALSE 9409
9270: GO 9272
9272: DISABLE
9273: LD_INT 0
9275: PPUSH
9276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_OWVAR 2
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 21
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 69
9312: ST_TO_ADDR
// if not tmp then
9313: LD_VAR 0 2
9317: NOT
9318: IFFALSE 9322
// exit ;
9320: GO 9409
// un := tmp [ rand ( 1 , tmp ) ] ;
9322: LD_ADDR_VAR 0 1
9326: PUSH
9327: LD_VAR 0 2
9331: PUSH
9332: LD_INT 1
9334: PPUSH
9335: LD_VAR 0 2
9339: PPUSH
9340: CALL_OW 12
9344: ARRAY
9345: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9346: LD_VAR 0 1
9350: PPUSH
9351: LD_INT 0
9353: PPUSH
9354: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_OWVAR 3
9367: PUSH
9368: LD_VAR 0 1
9372: DIFF
9373: PPUSH
9374: LD_VAR 0 1
9378: PPUSH
9379: CALL_OW 74
9383: PPUSH
9384: CALL_OW 115
// wait ( 0 0$20 ) ;
9388: LD_INT 700
9390: PPUSH
9391: CALL_OW 67
// SetSide ( un , your_side ) ;
9395: LD_VAR 0 1
9399: PPUSH
9400: LD_OWVAR 2
9404: PPUSH
9405: CALL_OW 235
// end ;
9409: PPOPN 2
9411: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9412: LD_EXP 2
9416: PUSH
9417: LD_EXP 35
9421: AND
9422: IFFALSE 9528
9424: GO 9426
9426: DISABLE
9427: LD_INT 0
9429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9430: LD_ADDR_VAR 0 1
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_OWVAR 2
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 2
9449: PUSH
9450: LD_INT 30
9452: PUSH
9453: LD_INT 0
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 30
9462: PUSH
9463: LD_INT 1
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 69
9483: ST_TO_ADDR
// if not depot then
9484: LD_VAR 0 1
9488: NOT
9489: IFFALSE 9493
// exit ;
9491: GO 9528
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9493: LD_VAR 0 1
9497: PUSH
9498: LD_INT 1
9500: ARRAY
9501: PPUSH
9502: CALL_OW 250
9506: PPUSH
9507: LD_VAR 0 1
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 251
9520: PPUSH
9521: LD_INT 70
9523: PPUSH
9524: CALL_OW 495
// end ;
9528: PPOPN 1
9530: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9531: LD_EXP 2
9535: PUSH
9536: LD_EXP 36
9540: AND
9541: IFFALSE 9752
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_OWVAR 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 21
9572: PUSH
9573: LD_INT 1
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: ST_TO_ADDR
// if not tmp then
9589: LD_VAR 0 5
9593: NOT
9594: IFFALSE 9598
// exit ;
9596: GO 9752
// for i in tmp do
9598: LD_ADDR_VAR 0 1
9602: PUSH
9603: LD_VAR 0 5
9607: PUSH
9608: FOR_IN
9609: IFFALSE 9750
// begin d := rand ( 0 , 5 ) ;
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_INT 0
9618: PPUSH
9619: LD_INT 5
9621: PPUSH
9622: CALL_OW 12
9626: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL_OW 250
9641: PPUSH
9642: LD_VAR 0 4
9646: PPUSH
9647: LD_INT 3
9649: PPUSH
9650: LD_INT 12
9652: PPUSH
9653: CALL_OW 12
9657: PPUSH
9658: CALL_OW 272
9662: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9663: LD_ADDR_VAR 0 3
9667: PUSH
9668: LD_VAR 0 1
9672: PPUSH
9673: CALL_OW 251
9677: PPUSH
9678: LD_VAR 0 4
9682: PPUSH
9683: LD_INT 3
9685: PPUSH
9686: LD_INT 12
9688: PPUSH
9689: CALL_OW 12
9693: PPUSH
9694: CALL_OW 273
9698: ST_TO_ADDR
// if ValidHex ( x , y ) then
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_VAR 0 3
9708: PPUSH
9709: CALL_OW 488
9713: IFFALSE 9748
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9715: LD_VAR 0 1
9719: PPUSH
9720: LD_VAR 0 2
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_INT 3
9732: PPUSH
9733: LD_INT 6
9735: PPUSH
9736: CALL_OW 12
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: CALL_OW 483
// end ;
9748: GO 9608
9750: POP
9751: POP
// end ;
9752: PPOPN 5
9754: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9755: LD_EXP 2
9759: PUSH
9760: LD_EXP 37
9764: AND
9765: IFFALSE 9859
9767: GO 9769
9769: DISABLE
9770: LD_INT 0
9772: PPUSH
9773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9774: LD_ADDR_VAR 0 2
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_OWVAR 2
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 32
9793: PUSH
9794: LD_INT 1
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 21
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: PPUSH
9816: CALL_OW 69
9820: ST_TO_ADDR
// if not tmp then
9821: LD_VAR 0 2
9825: NOT
9826: IFFALSE 9830
// exit ;
9828: GO 9859
// for i in tmp do
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: LD_VAR 0 2
9839: PUSH
9840: FOR_IN
9841: IFFALSE 9857
// SetFuel ( i , 0 ) ;
9843: LD_VAR 0 1
9847: PPUSH
9848: LD_INT 0
9850: PPUSH
9851: CALL_OW 240
9855: GO 9840
9857: POP
9858: POP
// end ;
9859: PPOPN 2
9861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9862: LD_EXP 2
9866: PUSH
9867: LD_EXP 38
9871: AND
9872: IFFALSE 9938
9874: GO 9876
9876: DISABLE
9877: LD_INT 0
9879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PUSH
9888: LD_OWVAR 2
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 30
9899: PUSH
9900: LD_INT 29
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 69
9915: ST_TO_ADDR
// if not tmp then
9916: LD_VAR 0 1
9920: NOT
9921: IFFALSE 9925
// exit ;
9923: GO 9938
// DestroyUnit ( tmp [ 1 ] ) ;
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: CALL_OW 65
// end ;
9938: PPOPN 1
9940: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9941: LD_EXP 2
9945: PUSH
9946: LD_EXP 40
9950: AND
9951: IFFALSE 10080
9953: GO 9955
9955: DISABLE
9956: LD_INT 0
9958: PPUSH
// begin uc_side := 0 ;
9959: LD_ADDR_OWVAR 20
9963: PUSH
9964: LD_INT 0
9966: ST_TO_ADDR
// uc_nation := nation_arabian ;
9967: LD_ADDR_OWVAR 21
9971: PUSH
9972: LD_INT 2
9974: ST_TO_ADDR
// hc_gallery :=  ;
9975: LD_ADDR_OWVAR 33
9979: PUSH
9980: LD_STRING 
9982: ST_TO_ADDR
// hc_name :=  ;
9983: LD_ADDR_OWVAR 26
9987: PUSH
9988: LD_STRING 
9990: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9991: LD_INT 1
9993: PPUSH
9994: LD_INT 11
9996: PPUSH
9997: LD_INT 10
9999: PPUSH
10000: CALL_OW 380
// un := CreateHuman ;
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: CALL_OW 44
10013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10014: LD_VAR 0 1
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10026: LD_INT 35
10028: PPUSH
10029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10033: LD_VAR 0 1
10037: PPUSH
10038: LD_INT 22
10040: PUSH
10041: LD_OWVAR 2
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 69
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 74
10064: PPUSH
10065: CALL_OW 115
// until IsDead ( un ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 301
10078: IFFALSE 10026
// end ;
10080: PPOPN 1
10082: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10083: LD_EXP 2
10087: PUSH
10088: LD_EXP 42
10092: AND
10093: IFFALSE 10105
10095: GO 10097
10097: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10098: LD_STRING earthquake(getX(game), 0, 32)
10100: PPUSH
10101: CALL_OW 559
10105: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10106: LD_EXP 2
10110: PUSH
10111: LD_EXP 43
10115: AND
10116: IFFALSE 10207
10118: GO 10120
10120: DISABLE
10121: LD_INT 0
10123: PPUSH
// begin enable ;
10124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_OWVAR 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 21
10144: PUSH
10145: LD_INT 2
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 33
10154: PUSH
10155: LD_INT 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 69
10171: ST_TO_ADDR
// if not tmp then
10172: LD_VAR 0 1
10176: NOT
10177: IFFALSE 10181
// exit ;
10179: GO 10207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10181: LD_VAR 0 1
10185: PUSH
10186: LD_INT 1
10188: PPUSH
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 12
10198: ARRAY
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 234
// end ;
10207: PPOPN 1
10209: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10210: LD_EXP 2
10214: PUSH
10215: LD_EXP 44
10219: AND
10220: IFFALSE 10361
10222: GO 10224
10224: DISABLE
10225: LD_INT 0
10227: PPUSH
10228: PPUSH
10229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10230: LD_ADDR_VAR 0 3
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_OWVAR 2
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 25
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: ST_TO_ADDR
// if not tmp then
10266: LD_VAR 0 3
10270: NOT
10271: IFFALSE 10275
// exit ;
10273: GO 10361
// un := tmp [ rand ( 1 , tmp ) ] ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: LD_VAR 0 3
10284: PUSH
10285: LD_INT 1
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: CALL_OW 12
10297: ARRAY
10298: ST_TO_ADDR
// if Crawls ( un ) then
10299: LD_VAR 0 2
10303: PPUSH
10304: CALL_OW 318
10308: IFFALSE 10319
// ComWalk ( un ) ;
10310: LD_VAR 0 2
10314: PPUSH
10315: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10319: LD_VAR 0 2
10323: PPUSH
10324: LD_INT 9
10326: PPUSH
10327: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10331: LD_INT 28
10333: PPUSH
10334: LD_OWVAR 2
10338: PPUSH
10339: LD_INT 2
10341: PPUSH
10342: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10346: LD_INT 29
10348: PPUSH
10349: LD_OWVAR 2
10353: PPUSH
10354: LD_INT 2
10356: PPUSH
10357: CALL_OW 322
// end ;
10361: PPOPN 3
10363: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10364: LD_EXP 2
10368: PUSH
10369: LD_EXP 45
10373: AND
10374: IFFALSE 10485
10376: GO 10378
10378: DISABLE
10379: LD_INT 0
10381: PPUSH
10382: PPUSH
10383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10384: LD_ADDR_VAR 0 3
10388: PUSH
10389: LD_INT 22
10391: PUSH
10392: LD_OWVAR 2
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: ST_TO_ADDR
// if not tmp then
10420: LD_VAR 0 3
10424: NOT
10425: IFFALSE 10429
// exit ;
10427: GO 10485
// un := tmp [ rand ( 1 , tmp ) ] ;
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 1
10441: PPUSH
10442: LD_VAR 0 3
10446: PPUSH
10447: CALL_OW 12
10451: ARRAY
10452: ST_TO_ADDR
// if Crawls ( un ) then
10453: LD_VAR 0 2
10457: PPUSH
10458: CALL_OW 318
10462: IFFALSE 10473
// ComWalk ( un ) ;
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10473: LD_VAR 0 2
10477: PPUSH
10478: LD_INT 8
10480: PPUSH
10481: CALL_OW 336
// end ;
10485: PPOPN 3
10487: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10488: LD_EXP 2
10492: PUSH
10493: LD_EXP 46
10497: AND
10498: IFFALSE 10642
10500: GO 10502
10502: DISABLE
10503: LD_INT 0
10505: PPUSH
10506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: LD_INT 22
10514: PUSH
10515: LD_OWVAR 2
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 21
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 2
10536: PUSH
10537: LD_INT 34
10539: PUSH
10540: LD_INT 12
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 51
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 34
10559: PUSH
10560: LD_INT 32
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 69
10582: ST_TO_ADDR
// if not tmp then
10583: LD_VAR 0 2
10587: NOT
10588: IFFALSE 10592
// exit ;
10590: GO 10642
// for i in tmp do
10592: LD_ADDR_VAR 0 1
10596: PUSH
10597: LD_VAR 0 2
10601: PUSH
10602: FOR_IN
10603: IFFALSE 10640
// if GetCargo ( i , mat_artifact ) = 0 then
10605: LD_VAR 0 1
10609: PPUSH
10610: LD_INT 4
10612: PPUSH
10613: CALL_OW 289
10617: PUSH
10618: LD_INT 0
10620: EQUAL
10621: IFFALSE 10638
// SetCargo ( i , mat_siberit , 100 ) ;
10623: LD_VAR 0 1
10627: PPUSH
10628: LD_INT 3
10630: PPUSH
10631: LD_INT 100
10633: PPUSH
10634: CALL_OW 290
10638: GO 10602
10640: POP
10641: POP
// end ;
10642: PPOPN 2
10644: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10645: LD_EXP 2
10649: PUSH
10650: LD_EXP 47
10654: AND
10655: IFFALSE 10838
10657: GO 10659
10659: DISABLE
10660: LD_INT 0
10662: PPUSH
10663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 22
10671: PUSH
10672: LD_OWVAR 2
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 69
10685: ST_TO_ADDR
// if not tmp then
10686: LD_VAR 0 2
10690: NOT
10691: IFFALSE 10695
// exit ;
10693: GO 10838
// for i := 1 to 2 do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: DOUBLE
10701: LD_INT 1
10703: DEC
10704: ST_TO_ADDR
10705: LD_INT 2
10707: PUSH
10708: FOR_TO
10709: IFFALSE 10836
// begin uc_side := your_side ;
10711: LD_ADDR_OWVAR 20
10715: PUSH
10716: LD_OWVAR 2
10720: ST_TO_ADDR
// uc_nation := nation_american ;
10721: LD_ADDR_OWVAR 21
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// vc_chassis := us_morphling ;
10729: LD_ADDR_OWVAR 37
10733: PUSH
10734: LD_INT 5
10736: ST_TO_ADDR
// vc_engine := engine_siberite ;
10737: LD_ADDR_OWVAR 39
10741: PUSH
10742: LD_INT 3
10744: ST_TO_ADDR
// vc_control := control_computer ;
10745: LD_ADDR_OWVAR 38
10749: PUSH
10750: LD_INT 3
10752: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10753: LD_ADDR_OWVAR 40
10757: PUSH
10758: LD_INT 10
10760: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10761: LD_VAR 0 2
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: CALL_OW 310
10774: NOT
10775: IFFALSE 10822
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10777: CALL_OW 45
10781: PPUSH
10782: LD_VAR 0 2
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: CALL_OW 250
10795: PPUSH
10796: LD_VAR 0 2
10800: PUSH
10801: LD_INT 1
10803: ARRAY
10804: PPUSH
10805: CALL_OW 251
10809: PPUSH
10810: LD_INT 12
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 50
10820: GO 10834
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10822: CALL_OW 45
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 51
// end ;
10834: GO 10708
10836: POP
10837: POP
// end ;
10838: PPOPN 2
10840: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10841: LD_EXP 2
10845: PUSH
10846: LD_EXP 48
10850: AND
10851: IFFALSE 11073
10853: GO 10855
10855: DISABLE
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
10860: PPUSH
10861: PPUSH
10862: PPUSH
10863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10864: LD_ADDR_VAR 0 6
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: LD_OWVAR 2
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 21
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: LD_INT 23
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 69
10917: ST_TO_ADDR
// if not tmp then
10918: LD_VAR 0 6
10922: NOT
10923: IFFALSE 10927
// exit ;
10925: GO 11073
// s1 := rand ( 1 , 4 ) ;
10927: LD_ADDR_VAR 0 2
10931: PUSH
10932: LD_INT 1
10934: PPUSH
10935: LD_INT 4
10937: PPUSH
10938: CALL_OW 12
10942: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10943: LD_ADDR_VAR 0 4
10947: PUSH
10948: LD_VAR 0 6
10952: PUSH
10953: LD_INT 1
10955: ARRAY
10956: PPUSH
10957: LD_VAR 0 2
10961: PPUSH
10962: CALL_OW 259
10966: ST_TO_ADDR
// if s1 = 1 then
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 1
10974: EQUAL
10975: IFFALSE 10995
// s2 := rand ( 2 , 4 ) else
10977: LD_ADDR_VAR 0 3
10981: PUSH
10982: LD_INT 2
10984: PPUSH
10985: LD_INT 4
10987: PPUSH
10988: CALL_OW 12
10992: ST_TO_ADDR
10993: GO 11003
// s2 := 1 ;
10995: LD_ADDR_VAR 0 3
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11003: LD_ADDR_VAR 0 5
11007: PUSH
11008: LD_VAR 0 6
11012: PUSH
11013: LD_INT 1
11015: ARRAY
11016: PPUSH
11017: LD_VAR 0 3
11021: PPUSH
11022: CALL_OW 259
11026: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11027: LD_VAR 0 6
11031: PUSH
11032: LD_INT 1
11034: ARRAY
11035: PPUSH
11036: LD_VAR 0 2
11040: PPUSH
11041: LD_VAR 0 5
11045: PPUSH
11046: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11050: LD_VAR 0 6
11054: PUSH
11055: LD_INT 1
11057: ARRAY
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_VAR 0 4
11068: PPUSH
11069: CALL_OW 237
// end ;
11073: PPOPN 6
11075: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11076: LD_EXP 2
11080: PUSH
11081: LD_EXP 49
11085: AND
11086: IFFALSE 11165
11088: GO 11090
11090: DISABLE
11091: LD_INT 0
11093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11094: LD_ADDR_VAR 0 1
11098: PUSH
11099: LD_INT 22
11101: PUSH
11102: LD_OWVAR 2
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 30
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 69
11129: ST_TO_ADDR
// if not tmp then
11130: LD_VAR 0 1
11134: NOT
11135: IFFALSE 11139
// exit ;
11137: GO 11165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11139: LD_VAR 0 1
11143: PUSH
11144: LD_INT 1
11146: PPUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 12
11156: ARRAY
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 234
// end ;
11165: PPOPN 1
11167: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11168: LD_EXP 2
11172: PUSH
11173: LD_EXP 50
11177: AND
11178: IFFALSE 11290
11180: GO 11182
11182: DISABLE
11183: LD_INT 0
11185: PPUSH
11186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11187: LD_ADDR_VAR 0 2
11191: PUSH
11192: LD_INT 22
11194: PUSH
11195: LD_OWVAR 2
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: LD_INT 30
11209: PUSH
11210: LD_INT 27
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 30
11219: PUSH
11220: LD_INT 26
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 28
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: ST_TO_ADDR
// if not tmp then
11252: LD_VAR 0 2
11256: NOT
11257: IFFALSE 11261
// exit ;
11259: GO 11290
// for i in tmp do
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_VAR 0 2
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11288
// SetLives ( i , 1 ) ;
11274: LD_VAR 0 1
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 234
11286: GO 11271
11288: POP
11289: POP
// end ;
11290: PPOPN 2
11292: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11293: LD_EXP 2
11297: PUSH
11298: LD_EXP 51
11302: AND
11303: IFFALSE 11590
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
11311: PPUSH
11312: PPUSH
// begin i := rand ( 1 , 7 ) ;
11313: LD_ADDR_VAR 0 1
11317: PUSH
11318: LD_INT 1
11320: PPUSH
11321: LD_INT 7
11323: PPUSH
11324: CALL_OW 12
11328: ST_TO_ADDR
// case i of 1 :
11329: LD_VAR 0 1
11333: PUSH
11334: LD_INT 1
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11352
11342: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11343: LD_STRING earthquake(getX(game), 0, 32)
11345: PPUSH
11346: CALL_OW 559
11350: GO 11590
11352: LD_INT 2
11354: DOUBLE
11355: EQUAL
11356: IFTRUE 11360
11358: GO 11374
11360: POP
// begin ToLua ( displayStucuk(); ) ;
11361: LD_STRING displayStucuk();
11363: PPUSH
11364: CALL_OW 559
// ResetFog ;
11368: CALL_OW 335
// end ; 3 :
11372: GO 11590
11374: LD_INT 3
11376: DOUBLE
11377: EQUAL
11378: IFTRUE 11382
11380: GO 11486
11382: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11383: LD_ADDR_VAR 0 2
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_OWVAR 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PPUSH
11414: CALL_OW 69
11418: ST_TO_ADDR
// if not tmp then
11419: LD_VAR 0 2
11423: NOT
11424: IFFALSE 11428
// exit ;
11426: GO 11590
// un := tmp [ rand ( 1 , tmp ) ] ;
11428: LD_ADDR_VAR 0 3
11432: PUSH
11433: LD_VAR 0 2
11437: PUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_VAR 0 2
11445: PPUSH
11446: CALL_OW 12
11450: ARRAY
11451: ST_TO_ADDR
// if Crawls ( un ) then
11452: LD_VAR 0 3
11456: PPUSH
11457: CALL_OW 318
11461: IFFALSE 11472
// ComWalk ( un ) ;
11463: LD_VAR 0 3
11467: PPUSH
11468: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_INT 8
11479: PPUSH
11480: CALL_OW 336
// end ; 4 :
11484: GO 11590
11486: LD_INT 4
11488: DOUBLE
11489: EQUAL
11490: IFTRUE 11494
11492: GO 11568
11494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11495: LD_ADDR_VAR 0 2
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_OWVAR 2
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 29
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PPUSH
11526: CALL_OW 69
11530: ST_TO_ADDR
// if not tmp then
11531: LD_VAR 0 2
11535: NOT
11536: IFFALSE 11540
// exit ;
11538: GO 11590
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11540: LD_VAR 0 2
11544: PUSH
11545: LD_INT 1
11547: ARRAY
11548: PPUSH
11549: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11553: LD_VAR 0 2
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: CALL_OW 65
// end ; 5 .. 7 :
11566: GO 11590
11568: LD_INT 5
11570: DOUBLE
11571: GREATEREQUAL
11572: IFFALSE 11580
11574: LD_INT 7
11576: DOUBLE
11577: LESSEQUAL
11578: IFTRUE 11582
11580: GO 11589
11582: POP
// StreamSibBomb ; end ;
11583: CALL 7827 0 0
11587: GO 11590
11589: POP
// end ;
11590: PPOPN 3
11592: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11593: LD_EXP 2
11597: PUSH
11598: LD_EXP 52
11602: AND
11603: IFFALSE 11759
11605: GO 11607
11607: DISABLE
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11613: LD_ADDR_VAR 0 2
11617: PUSH
11618: LD_INT 81
11620: PUSH
11621: LD_OWVAR 2
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 2
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 1
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 21
11645: PUSH
11646: LD_INT 2
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if not tmp then
11667: LD_VAR 0 2
11671: NOT
11672: IFFALSE 11676
// exit ;
11674: GO 11759
// p := 0 ;
11676: LD_ADDR_VAR 0 3
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11684: LD_INT 35
11686: PPUSH
11687: CALL_OW 67
// p := p + 1 ;
11691: LD_ADDR_VAR 0 3
11695: PUSH
11696: LD_VAR 0 3
11700: PUSH
11701: LD_INT 1
11703: PLUS
11704: ST_TO_ADDR
// for i in tmp do
11705: LD_ADDR_VAR 0 1
11709: PUSH
11710: LD_VAR 0 2
11714: PUSH
11715: FOR_IN
11716: IFFALSE 11747
// if GetLives ( i ) < 1000 then
11718: LD_VAR 0 1
11722: PPUSH
11723: CALL_OW 256
11727: PUSH
11728: LD_INT 1000
11730: LESS
11731: IFFALSE 11745
// SetLives ( i , 1000 ) ;
11733: LD_VAR 0 1
11737: PPUSH
11738: LD_INT 1000
11740: PPUSH
11741: CALL_OW 234
11745: GO 11715
11747: POP
11748: POP
// until p > 20 ;
11749: LD_VAR 0 3
11753: PUSH
11754: LD_INT 20
11756: GREATER
11757: IFFALSE 11684
// end ;
11759: PPOPN 3
11761: END
// every 0 0$1 trigger StreamModeActive and sTime do
11762: LD_EXP 2
11766: PUSH
11767: LD_EXP 53
11771: AND
11772: IFFALSE 11807
11774: GO 11776
11776: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11777: LD_INT 28
11779: PPUSH
11780: LD_OWVAR 2
11784: PPUSH
11785: LD_INT 2
11787: PPUSH
11788: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11792: LD_INT 30
11794: PPUSH
11795: LD_OWVAR 2
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: CALL_OW 322
// end ;
11807: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11808: LD_EXP 2
11812: PUSH
11813: LD_EXP 54
11817: AND
11818: IFFALSE 11939
11820: GO 11822
11822: DISABLE
11823: LD_INT 0
11825: PPUSH
11826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_OWVAR 2
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 21
11846: PUSH
11847: LD_INT 1
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: LD_INT 23
11859: PUSH
11860: LD_INT 0
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: ST_TO_ADDR
// if not tmp then
11881: LD_VAR 0 2
11885: NOT
11886: IFFALSE 11890
// exit ;
11888: GO 11939
// for i in tmp do
11890: LD_ADDR_VAR 0 1
11894: PUSH
11895: LD_VAR 0 2
11899: PUSH
11900: FOR_IN
11901: IFFALSE 11937
// begin if Crawls ( i ) then
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 318
11912: IFFALSE 11923
// ComWalk ( i ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: CALL_OW 138
// SetClass ( i , 2 ) ;
11923: LD_VAR 0 1
11927: PPUSH
11928: LD_INT 2
11930: PPUSH
11931: CALL_OW 336
// end ;
11935: GO 11900
11937: POP
11938: POP
// end ;
11939: PPOPN 2
11941: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11942: LD_EXP 2
11946: PUSH
11947: LD_EXP 55
11951: AND
11952: IFFALSE 12240
11954: GO 11956
11956: DISABLE
11957: LD_INT 0
11959: PPUSH
11960: PPUSH
11961: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11962: LD_OWVAR 2
11966: PPUSH
11967: LD_INT 9
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11980: LD_INT 9
11982: PPUSH
11983: LD_OWVAR 2
11987: PPUSH
11988: CALL_OW 343
// uc_side := 9 ;
11992: LD_ADDR_OWVAR 20
11996: PUSH
11997: LD_INT 9
11999: ST_TO_ADDR
// uc_nation := 2 ;
12000: LD_ADDR_OWVAR 21
12004: PUSH
12005: LD_INT 2
12007: ST_TO_ADDR
// hc_name := Dark Warrior ;
12008: LD_ADDR_OWVAR 26
12012: PUSH
12013: LD_STRING Dark Warrior
12015: ST_TO_ADDR
// hc_gallery :=  ;
12016: LD_ADDR_OWVAR 33
12020: PUSH
12021: LD_STRING 
12023: ST_TO_ADDR
// hc_noskilllimit := true ;
12024: LD_ADDR_OWVAR 76
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12032: LD_ADDR_OWVAR 31
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 30
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: ST_TO_ADDR
// un := CreateHuman ;
12055: LD_ADDR_VAR 0 3
12059: PUSH
12060: CALL_OW 44
12064: ST_TO_ADDR
// hc_noskilllimit := false ;
12065: LD_ADDR_OWVAR 76
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 51
// ToLua ( playRanger() ) ;
12085: LD_STRING playRanger()
12087: PPUSH
12088: CALL_OW 559
// p := 0 ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12100: LD_INT 35
12102: PPUSH
12103: CALL_OW 67
// p := p + 1 ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_VAR 0 2
12116: PUSH
12117: LD_INT 1
12119: PLUS
12120: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12121: LD_VAR 0 3
12125: PPUSH
12126: CALL_OW 256
12130: PUSH
12131: LD_INT 1000
12133: LESS
12134: IFFALSE 12148
// SetLives ( un , 1000 ) ;
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1000
12143: PPUSH
12144: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 81
12155: PUSH
12156: LD_OWVAR 2
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 91
12167: PUSH
12168: LD_VAR 0 3
12172: PUSH
12173: LD_INT 30
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: CALL_OW 74
12199: PPUSH
12200: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12204: LD_VAR 0 2
12208: PUSH
12209: LD_INT 80
12211: GREATER
12212: PUSH
12213: LD_VAR 0 3
12217: PPUSH
12218: CALL_OW 301
12222: OR
12223: IFFALSE 12100
// if un then
12225: LD_VAR 0 3
12229: IFFALSE 12240
// RemoveUnit ( un ) ;
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL_OW 64
// end ;
12240: PPOPN 3
12242: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12243: LD_EXP 56
12247: IFFALSE 12363
12249: GO 12251
12251: DISABLE
12252: LD_INT 0
12254: PPUSH
12255: PPUSH
12256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_INT 81
12264: PUSH
12265: LD_OWVAR 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 1
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12293: LD_STRING playComputer()
12295: PPUSH
12296: CALL_OW 559
// if not tmp then
12300: LD_VAR 0 2
12304: NOT
12305: IFFALSE 12309
// exit ;
12307: GO 12363
// for i in tmp do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: LD_VAR 0 2
12318: PUSH
12319: FOR_IN
12320: IFFALSE 12361
// for j := 1 to 4 do
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: DOUBLE
12328: LD_INT 1
12330: DEC
12331: ST_TO_ADDR
12332: LD_INT 4
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12357
// SetSkill ( i , j , 10 ) ;
12338: LD_VAR 0 1
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 10
12350: PPUSH
12351: CALL_OW 237
12355: GO 12335
12357: POP
12358: POP
12359: GO 12319
12361: POP
12362: POP
// end ;
12363: PPOPN 3
12365: END
// every 0 0$1 trigger s30 do var i , tmp ;
12366: LD_EXP 57
12370: IFFALSE 12439
12372: GO 12374
12374: DISABLE
12375: LD_INT 0
12377: PPUSH
12378: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_OWVAR 2
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PPUSH
12396: CALL_OW 69
12400: ST_TO_ADDR
// if not tmp then
12401: LD_VAR 0 2
12405: NOT
12406: IFFALSE 12410
// exit ;
12408: GO 12439
// for i in tmp do
12410: LD_ADDR_VAR 0 1
12414: PUSH
12415: LD_VAR 0 2
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12437
// SetLives ( i , 300 ) ;
12423: LD_VAR 0 1
12427: PPUSH
12428: LD_INT 300
12430: PPUSH
12431: CALL_OW 234
12435: GO 12420
12437: POP
12438: POP
// end ;
12439: PPOPN 2
12441: END
// every 0 0$1 trigger s60 do var i , tmp ;
12442: LD_EXP 58
12446: IFFALSE 12515
12448: GO 12450
12450: DISABLE
12451: LD_INT 0
12453: PPUSH
12454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12455: LD_ADDR_VAR 0 2
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_OWVAR 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PPUSH
12472: CALL_OW 69
12476: ST_TO_ADDR
// if not tmp then
12477: LD_VAR 0 2
12481: NOT
12482: IFFALSE 12486
// exit ;
12484: GO 12515
// for i in tmp do
12486: LD_ADDR_VAR 0 1
12490: PUSH
12491: LD_VAR 0 2
12495: PUSH
12496: FOR_IN
12497: IFFALSE 12513
// SetLives ( i , 600 ) ;
12499: LD_VAR 0 1
12503: PPUSH
12504: LD_INT 600
12506: PPUSH
12507: CALL_OW 234
12511: GO 12496
12513: POP
12514: POP
// end ;
12515: PPOPN 2
12517: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12518: LD_INT 0
12520: PPUSH
// case cmd of 301 :
12521: LD_VAR 0 1
12525: PUSH
12526: LD_INT 301
12528: DOUBLE
12529: EQUAL
12530: IFTRUE 12534
12532: GO 12566
12534: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12535: LD_VAR 0 6
12539: PPUSH
12540: LD_VAR 0 7
12544: PPUSH
12545: LD_VAR 0 8
12549: PPUSH
12550: LD_VAR 0 4
12554: PPUSH
12555: LD_VAR 0 5
12559: PPUSH
12560: CALL 13775 0 5
12564: GO 12687
12566: LD_INT 302
12568: DOUBLE
12569: EQUAL
12570: IFTRUE 12574
12572: GO 12611
12574: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12575: LD_VAR 0 6
12579: PPUSH
12580: LD_VAR 0 7
12584: PPUSH
12585: LD_VAR 0 8
12589: PPUSH
12590: LD_VAR 0 9
12594: PPUSH
12595: LD_VAR 0 4
12599: PPUSH
12600: LD_VAR 0 5
12604: PPUSH
12605: CALL 13866 0 6
12609: GO 12687
12611: LD_INT 303
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12656
12619: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12620: LD_VAR 0 6
12624: PPUSH
12625: LD_VAR 0 7
12629: PPUSH
12630: LD_VAR 0 8
12634: PPUSH
12635: LD_VAR 0 9
12639: PPUSH
12640: LD_VAR 0 4
12644: PPUSH
12645: LD_VAR 0 5
12649: PPUSH
12650: CALL 12692 0 6
12654: GO 12687
12656: LD_INT 304
12658: DOUBLE
12659: EQUAL
12660: IFTRUE 12664
12662: GO 12686
12664: POP
// hHackTeleport ( unit , x , y ) ; end ;
12665: LD_VAR 0 2
12669: PPUSH
12670: LD_VAR 0 4
12674: PPUSH
12675: LD_VAR 0 5
12679: PPUSH
12680: CALL 14459 0 3
12684: GO 12687
12686: POP
// end ;
12687: LD_VAR 0 12
12691: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12692: LD_INT 0
12694: PPUSH
12695: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: LESS
12704: PUSH
12705: LD_VAR 0 1
12709: PUSH
12710: LD_INT 3
12712: GREATER
12713: OR
12714: PUSH
12715: LD_VAR 0 5
12719: PPUSH
12720: LD_VAR 0 6
12724: PPUSH
12725: CALL_OW 428
12729: OR
12730: IFFALSE 12734
// exit ;
12732: GO 13462
// uc_side := your_side ;
12734: LD_ADDR_OWVAR 20
12738: PUSH
12739: LD_OWVAR 2
12743: ST_TO_ADDR
// uc_nation := nation ;
12744: LD_ADDR_OWVAR 21
12748: PUSH
12749: LD_VAR 0 1
12753: ST_TO_ADDR
// bc_level = 1 ;
12754: LD_ADDR_OWVAR 43
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// case btype of 1 :
12762: LD_VAR 0 2
12766: PUSH
12767: LD_INT 1
12769: DOUBLE
12770: EQUAL
12771: IFTRUE 12775
12773: GO 12786
12775: POP
// bc_type := b_depot ; 2 :
12776: LD_ADDR_OWVAR 42
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
12784: GO 13406
12786: LD_INT 2
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12805
12794: POP
// bc_type := b_warehouse ; 3 :
12795: LD_ADDR_OWVAR 42
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
12803: GO 13406
12805: LD_INT 3
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 12824
12813: POP
// bc_type := b_lab ; 4 .. 9 :
12814: LD_ADDR_OWVAR 42
12818: PUSH
12819: LD_INT 6
12821: ST_TO_ADDR
12822: GO 13406
12824: LD_INT 4
12826: DOUBLE
12827: GREATEREQUAL
12828: IFFALSE 12836
12830: LD_INT 9
12832: DOUBLE
12833: LESSEQUAL
12834: IFTRUE 12838
12836: GO 12898
12838: POP
// begin bc_type := b_lab_half ;
12839: LD_ADDR_OWVAR 42
12843: PUSH
12844: LD_INT 7
12846: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12847: LD_ADDR_OWVAR 44
12851: PUSH
12852: LD_INT 10
12854: PUSH
12855: LD_INT 11
12857: PUSH
12858: LD_INT 12
12860: PUSH
12861: LD_INT 15
12863: PUSH
12864: LD_INT 14
12866: PUSH
12867: LD_INT 13
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_VAR 0 2
12882: PUSH
12883: LD_INT 3
12885: MINUS
12886: ARRAY
12887: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
12888: LD_ADDR_OWVAR 45
12892: PUSH
12893: LD_INT 9
12895: ST_TO_ADDR
// end ; 10 .. 13 :
12896: GO 13406
12898: LD_INT 10
12900: DOUBLE
12901: GREATEREQUAL
12902: IFFALSE 12910
12904: LD_INT 13
12906: DOUBLE
12907: LESSEQUAL
12908: IFTRUE 12912
12910: GO 12989
12912: POP
// begin bc_type := b_lab_full ;
12913: LD_ADDR_OWVAR 42
12917: PUSH
12918: LD_INT 8
12920: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12921: LD_ADDR_OWVAR 44
12925: PUSH
12926: LD_INT 10
12928: PUSH
12929: LD_INT 12
12931: PUSH
12932: LD_INT 14
12934: PUSH
12935: LD_INT 13
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_VAR 0 2
12948: PUSH
12949: LD_INT 9
12951: MINUS
12952: ARRAY
12953: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12954: LD_ADDR_OWVAR 45
12958: PUSH
12959: LD_INT 11
12961: PUSH
12962: LD_INT 15
12964: PUSH
12965: LD_INT 12
12967: PUSH
12968: LD_INT 15
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 9
12984: MINUS
12985: ARRAY
12986: ST_TO_ADDR
// end ; 14 :
12987: GO 13406
12989: LD_INT 14
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 12997
12995: GO 13008
12997: POP
// bc_type := b_workshop ; 15 :
12998: LD_ADDR_OWVAR 42
13002: PUSH
13003: LD_INT 2
13005: ST_TO_ADDR
13006: GO 13406
13008: LD_INT 15
13010: DOUBLE
13011: EQUAL
13012: IFTRUE 13016
13014: GO 13027
13016: POP
// bc_type := b_factory ; 16 :
13017: LD_ADDR_OWVAR 42
13021: PUSH
13022: LD_INT 3
13024: ST_TO_ADDR
13025: GO 13406
13027: LD_INT 16
13029: DOUBLE
13030: EQUAL
13031: IFTRUE 13035
13033: GO 13046
13035: POP
// bc_type := b_ext_gun ; 17 :
13036: LD_ADDR_OWVAR 42
13040: PUSH
13041: LD_INT 17
13043: ST_TO_ADDR
13044: GO 13406
13046: LD_INT 17
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13082
13054: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13055: LD_ADDR_OWVAR 42
13059: PUSH
13060: LD_INT 19
13062: PUSH
13063: LD_INT 23
13065: PUSH
13066: LD_INT 19
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: LD_VAR 0 1
13078: ARRAY
13079: ST_TO_ADDR
13080: GO 13406
13082: LD_INT 18
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 13101
13090: POP
// bc_type := b_ext_radar ; 19 :
13091: LD_ADDR_OWVAR 42
13095: PUSH
13096: LD_INT 20
13098: ST_TO_ADDR
13099: GO 13406
13101: LD_INT 19
13103: DOUBLE
13104: EQUAL
13105: IFTRUE 13109
13107: GO 13120
13109: POP
// bc_type := b_ext_radio ; 20 :
13110: LD_ADDR_OWVAR 42
13114: PUSH
13115: LD_INT 22
13117: ST_TO_ADDR
13118: GO 13406
13120: LD_INT 20
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13139
13128: POP
// bc_type := b_ext_siberium ; 21 :
13129: LD_ADDR_OWVAR 42
13133: PUSH
13134: LD_INT 21
13136: ST_TO_ADDR
13137: GO 13406
13139: LD_INT 21
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13158
13147: POP
// bc_type := b_ext_computer ; 22 :
13148: LD_ADDR_OWVAR 42
13152: PUSH
13153: LD_INT 24
13155: ST_TO_ADDR
13156: GO 13406
13158: LD_INT 22
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13177
13166: POP
// bc_type := b_ext_track ; 23 :
13167: LD_ADDR_OWVAR 42
13171: PUSH
13172: LD_INT 16
13174: ST_TO_ADDR
13175: GO 13406
13177: LD_INT 23
13179: DOUBLE
13180: EQUAL
13181: IFTRUE 13185
13183: GO 13196
13185: POP
// bc_type := b_ext_laser ; 24 :
13186: LD_ADDR_OWVAR 42
13190: PUSH
13191: LD_INT 25
13193: ST_TO_ADDR
13194: GO 13406
13196: LD_INT 24
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13215
13204: POP
// bc_type := b_control_tower ; 25 :
13205: LD_ADDR_OWVAR 42
13209: PUSH
13210: LD_INT 36
13212: ST_TO_ADDR
13213: GO 13406
13215: LD_INT 25
13217: DOUBLE
13218: EQUAL
13219: IFTRUE 13223
13221: GO 13234
13223: POP
// bc_type := b_breastwork ; 26 :
13224: LD_ADDR_OWVAR 42
13228: PUSH
13229: LD_INT 31
13231: ST_TO_ADDR
13232: GO 13406
13234: LD_INT 26
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13253
13242: POP
// bc_type := b_bunker ; 27 :
13243: LD_ADDR_OWVAR 42
13247: PUSH
13248: LD_INT 32
13250: ST_TO_ADDR
13251: GO 13406
13253: LD_INT 27
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13272
13261: POP
// bc_type := b_turret ; 28 :
13262: LD_ADDR_OWVAR 42
13266: PUSH
13267: LD_INT 33
13269: ST_TO_ADDR
13270: GO 13406
13272: LD_INT 28
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13291
13280: POP
// bc_type := b_armoury ; 29 :
13281: LD_ADDR_OWVAR 42
13285: PUSH
13286: LD_INT 4
13288: ST_TO_ADDR
13289: GO 13406
13291: LD_INT 29
13293: DOUBLE
13294: EQUAL
13295: IFTRUE 13299
13297: GO 13310
13299: POP
// bc_type := b_barracks ; 30 :
13300: LD_ADDR_OWVAR 42
13304: PUSH
13305: LD_INT 5
13307: ST_TO_ADDR
13308: GO 13406
13310: LD_INT 30
13312: DOUBLE
13313: EQUAL
13314: IFTRUE 13318
13316: GO 13329
13318: POP
// bc_type := b_solar_power ; 31 :
13319: LD_ADDR_OWVAR 42
13323: PUSH
13324: LD_INT 27
13326: ST_TO_ADDR
13327: GO 13406
13329: LD_INT 31
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13348
13337: POP
// bc_type := b_oil_power ; 32 :
13338: LD_ADDR_OWVAR 42
13342: PUSH
13343: LD_INT 26
13345: ST_TO_ADDR
13346: GO 13406
13348: LD_INT 32
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13367
13356: POP
// bc_type := b_siberite_power ; 33 :
13357: LD_ADDR_OWVAR 42
13361: PUSH
13362: LD_INT 28
13364: ST_TO_ADDR
13365: GO 13406
13367: LD_INT 33
13369: DOUBLE
13370: EQUAL
13371: IFTRUE 13375
13373: GO 13386
13375: POP
// bc_type := b_oil_mine ; 34 :
13376: LD_ADDR_OWVAR 42
13380: PUSH
13381: LD_INT 29
13383: ST_TO_ADDR
13384: GO 13406
13386: LD_INT 34
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13394
13392: GO 13405
13394: POP
// bc_type := b_siberite_mine ; end ;
13395: LD_ADDR_OWVAR 42
13399: PUSH
13400: LD_INT 30
13402: ST_TO_ADDR
13403: GO 13406
13405: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_VAR 0 5
13415: PPUSH
13416: LD_VAR 0 6
13420: PPUSH
13421: LD_VAR 0 3
13425: PPUSH
13426: CALL_OW 47
13430: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13431: LD_OWVAR 42
13435: PUSH
13436: LD_INT 32
13438: PUSH
13439: LD_INT 33
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: IN
13446: IFFALSE 13462
// PlaceWeaponTurret ( b , weapon ) ;
13448: LD_VAR 0 8
13452: PPUSH
13453: LD_VAR 0 4
13457: PPUSH
13458: CALL_OW 431
// end ;
13462: LD_VAR 0 7
13466: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
13471: PPUSH
13472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13473: LD_ADDR_VAR 0 4
13477: PUSH
13478: LD_INT 22
13480: PUSH
13481: LD_OWVAR 2
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 30
13495: PUSH
13496: LD_INT 0
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 30
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: ST_TO_ADDR
// if not tmp then
13527: LD_VAR 0 4
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13595
// for i in tmp do
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: LD_VAR 0 4
13545: PUSH
13546: FOR_IN
13547: IFFALSE 13593
// for j = 1 to 3 do
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: DOUBLE
13555: LD_INT 1
13557: DEC
13558: ST_TO_ADDR
13559: LD_INT 3
13561: PUSH
13562: FOR_TO
13563: IFFALSE 13589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13565: LD_VAR 0 2
13569: PPUSH
13570: CALL_OW 274
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: LD_INT 99999
13582: PPUSH
13583: CALL_OW 277
13587: GO 13562
13589: POP
13590: POP
13591: GO 13546
13593: POP
13594: POP
// end ;
13595: LD_VAR 0 1
13599: RET
// export function hHackSetLevel10 ; var i , j ; begin
13600: LD_INT 0
13602: PPUSH
13603: PPUSH
13604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: FOR_IN
13626: IFFALSE 13678
// if IsSelected ( i ) then
13628: LD_VAR 0 2
13632: PPUSH
13633: CALL_OW 306
13637: IFFALSE 13676
// begin for j := 1 to 4 do
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: DOUBLE
13645: LD_INT 1
13647: DEC
13648: ST_TO_ADDR
13649: LD_INT 4
13651: PUSH
13652: FOR_TO
13653: IFFALSE 13674
// SetSkill ( i , j , 10 ) ;
13655: LD_VAR 0 2
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 10
13667: PPUSH
13668: CALL_OW 237
13672: GO 13652
13674: POP
13675: POP
// end ;
13676: GO 13625
13678: POP
13679: POP
// end ;
13680: LD_VAR 0 1
13684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13685: LD_INT 0
13687: PPUSH
13688: PPUSH
13689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13690: LD_ADDR_VAR 0 2
13694: PUSH
13695: LD_INT 22
13697: PUSH
13698: LD_OWVAR 2
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 21
13709: PUSH
13710: LD_INT 1
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13768
// begin for j := 1 to 4 do
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: DOUBLE
13735: LD_INT 1
13737: DEC
13738: ST_TO_ADDR
13739: LD_INT 4
13741: PUSH
13742: FOR_TO
13743: IFFALSE 13764
// SetSkill ( i , j , 10 ) ;
13745: LD_VAR 0 2
13749: PPUSH
13750: LD_VAR 0 3
13754: PPUSH
13755: LD_INT 10
13757: PPUSH
13758: CALL_OW 237
13762: GO 13742
13764: POP
13765: POP
// end ;
13766: GO 13726
13768: POP
13769: POP
// end ;
13770: LD_VAR 0 1
13774: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13775: LD_INT 0
13777: PPUSH
// uc_side := your_side ;
13778: LD_ADDR_OWVAR 20
13782: PUSH
13783: LD_OWVAR 2
13787: ST_TO_ADDR
// uc_nation := nation ;
13788: LD_ADDR_OWVAR 21
13792: PUSH
13793: LD_VAR 0 1
13797: ST_TO_ADDR
// InitHc ;
13798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13802: LD_INT 0
13804: PPUSH
13805: LD_VAR 0 2
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13819: LD_VAR 0 4
13823: PPUSH
13824: LD_VAR 0 5
13828: PPUSH
13829: CALL_OW 428
13833: PUSH
13834: LD_INT 0
13836: EQUAL
13837: IFFALSE 13861
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13839: CALL_OW 44
13843: PPUSH
13844: LD_VAR 0 4
13848: PPUSH
13849: LD_VAR 0 5
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: CALL_OW 48
// end ;
13861: LD_VAR 0 6
13865: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
// uc_side := your_side ;
13870: LD_ADDR_OWVAR 20
13874: PUSH
13875: LD_OWVAR 2
13879: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13880: LD_VAR 0 1
13884: PUSH
13885: LD_INT 1
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: LD_INT 5
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: IN
13907: IFFALSE 13919
// uc_nation := nation_american else
13909: LD_ADDR_OWVAR 21
13913: PUSH
13914: LD_INT 1
13916: ST_TO_ADDR
13917: GO 13962
// if chassis in [ 11 , 12 , 13 , 14 ] then
13919: LD_VAR 0 1
13923: PUSH
13924: LD_INT 11
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: IN
13942: IFFALSE 13954
// uc_nation := nation_arabian else
13944: LD_ADDR_OWVAR 21
13948: PUSH
13949: LD_INT 2
13951: ST_TO_ADDR
13952: GO 13962
// uc_nation := nation_russian ;
13954: LD_ADDR_OWVAR 21
13958: PUSH
13959: LD_INT 3
13961: ST_TO_ADDR
// vc_chassis := chassis ;
13962: LD_ADDR_OWVAR 37
13966: PUSH
13967: LD_VAR 0 1
13971: ST_TO_ADDR
// vc_engine := engine ;
13972: LD_ADDR_OWVAR 39
13976: PUSH
13977: LD_VAR 0 2
13981: ST_TO_ADDR
// vc_control := control ;
13982: LD_ADDR_OWVAR 38
13986: PUSH
13987: LD_VAR 0 3
13991: ST_TO_ADDR
// vc_weapon := weapon ;
13992: LD_ADDR_OWVAR 40
13996: PUSH
13997: LD_VAR 0 4
14001: ST_TO_ADDR
// un := CreateVehicle ;
14002: LD_ADDR_VAR 0 8
14006: PUSH
14007: CALL_OW 45
14011: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14012: LD_VAR 0 8
14016: PPUSH
14017: LD_INT 0
14019: PPUSH
14020: LD_INT 5
14022: PPUSH
14023: CALL_OW 12
14027: PPUSH
14028: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14032: LD_VAR 0 8
14036: PPUSH
14037: LD_VAR 0 5
14041: PPUSH
14042: LD_VAR 0 6
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 48
// end ;
14054: LD_VAR 0 7
14058: RET
// export hInvincible ; every 1 do
14059: GO 14061
14061: DISABLE
// hInvincible := [ ] ;
14062: LD_ADDR_EXP 59
14066: PUSH
14067: EMPTY
14068: ST_TO_ADDR
14069: END
// every 10 do var i ;
14070: GO 14072
14072: DISABLE
14073: LD_INT 0
14075: PPUSH
// begin enable ;
14076: ENABLE
// if not hInvincible then
14077: LD_EXP 59
14081: NOT
14082: IFFALSE 14086
// exit ;
14084: GO 14130
// for i in hInvincible do
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_EXP 59
14095: PUSH
14096: FOR_IN
14097: IFFALSE 14128
// if GetLives ( i ) < 1000 then
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 256
14108: PUSH
14109: LD_INT 1000
14111: LESS
14112: IFFALSE 14126
// SetLives ( i , 1000 ) ;
14114: LD_VAR 0 1
14118: PPUSH
14119: LD_INT 1000
14121: PPUSH
14122: CALL_OW 234
14126: GO 14096
14128: POP
14129: POP
// end ;
14130: PPOPN 1
14132: END
// export function hHackInvincible ; var i ; begin
14133: LD_INT 0
14135: PPUSH
14136: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 2
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: PUSH
14175: FOR_IN
14176: IFFALSE 14237
// if IsSelected ( i ) then
14178: LD_VAR 0 2
14182: PPUSH
14183: CALL_OW 306
14187: IFFALSE 14235
// begin if i in hInvincible then
14189: LD_VAR 0 2
14193: PUSH
14194: LD_EXP 59
14198: IN
14199: IFFALSE 14219
// hInvincible := hInvincible diff i else
14201: LD_ADDR_EXP 59
14205: PUSH
14206: LD_EXP 59
14210: PUSH
14211: LD_VAR 0 2
14215: DIFF
14216: ST_TO_ADDR
14217: GO 14235
// hInvincible := hInvincible union i ;
14219: LD_ADDR_EXP 59
14223: PUSH
14224: LD_EXP 59
14228: PUSH
14229: LD_VAR 0 2
14233: UNION
14234: ST_TO_ADDR
// end ;
14235: GO 14175
14237: POP
14238: POP
// end ;
14239: LD_VAR 0 1
14243: RET
// export function hHackInvisible ; var i , j ; begin
14244: LD_INT 0
14246: PPUSH
14247: PPUSH
14248: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14249: LD_ADDR_VAR 0 2
14253: PUSH
14254: LD_INT 21
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: FOR_IN
14270: IFFALSE 14294
// if IsSelected ( i ) then
14272: LD_VAR 0 2
14276: PPUSH
14277: CALL_OW 306
14281: IFFALSE 14292
// ComForceInvisible ( i ) ;
14283: LD_VAR 0 2
14287: PPUSH
14288: CALL_OW 496
14292: GO 14269
14294: POP
14295: POP
// end ;
14296: LD_VAR 0 1
14300: RET
// export function hHackChangeYourSide ; begin
14301: LD_INT 0
14303: PPUSH
// if your_side = 8 then
14304: LD_OWVAR 2
14308: PUSH
14309: LD_INT 8
14311: EQUAL
14312: IFFALSE 14324
// your_side := 0 else
14314: LD_ADDR_OWVAR 2
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
14322: GO 14338
// your_side := your_side + 1 ;
14324: LD_ADDR_OWVAR 2
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: LD_INT 1
14336: PLUS
14337: ST_TO_ADDR
// end ;
14338: LD_VAR 0 1
14342: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
14347: PPUSH
// for i in all_units do
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_OWVAR 3
14357: PUSH
14358: FOR_IN
14359: IFFALSE 14437
// if IsSelected ( i ) then
14361: LD_VAR 0 2
14365: PPUSH
14366: CALL_OW 306
14370: IFFALSE 14435
// begin j := GetSide ( i ) ;
14372: LD_ADDR_VAR 0 3
14376: PUSH
14377: LD_VAR 0 2
14381: PPUSH
14382: CALL_OW 255
14386: ST_TO_ADDR
// if j = 8 then
14387: LD_VAR 0 3
14391: PUSH
14392: LD_INT 8
14394: EQUAL
14395: IFFALSE 14407
// j := 0 else
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
14405: GO 14421
// j := j + 1 ;
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_VAR 0 3
14416: PUSH
14417: LD_INT 1
14419: PLUS
14420: ST_TO_ADDR
// SetSide ( i , j ) ;
14421: LD_VAR 0 2
14425: PPUSH
14426: LD_VAR 0 3
14430: PPUSH
14431: CALL_OW 235
// end ;
14435: GO 14358
14437: POP
14438: POP
// end ;
14439: LD_VAR 0 1
14443: RET
// export function hHackFog ; begin
14444: LD_INT 0
14446: PPUSH
// FogOff ( true ) ;
14447: LD_INT 1
14449: PPUSH
14450: CALL_OW 344
// end ;
14454: LD_VAR 0 1
14458: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14459: LD_INT 0
14461: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14462: LD_VAR 0 1
14466: PPUSH
14467: LD_VAR 0 2
14471: PPUSH
14472: LD_VAR 0 3
14476: PPUSH
14477: LD_INT 1
14479: PPUSH
14480: LD_INT 1
14482: PPUSH
14483: CALL_OW 483
// CenterOnXY ( x , y ) ;
14487: LD_VAR 0 2
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 84
// end ;
14501: LD_VAR 0 4
14505: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14510: LD_VAR 0 1
14514: NOT
14515: PUSH
14516: LD_VAR 0 2
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: CALL_OW 488
14530: NOT
14531: OR
14532: PUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 266
14542: PUSH
14543: LD_INT 3
14545: NONEQUAL
14546: PUSH
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 247
14556: PUSH
14557: LD_INT 1
14559: EQUAL
14560: NOT
14561: AND
14562: OR
14563: IFFALSE 14567
// exit ;
14565: GO 14716
// if GetType ( factory ) = unit_human then
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 247
14576: PUSH
14577: LD_INT 1
14579: EQUAL
14580: IFFALSE 14597
// factory := IsInUnit ( factory ) ;
14582: LD_ADDR_VAR 0 1
14586: PUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 310
14596: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 266
14606: PUSH
14607: LD_INT 3
14609: NONEQUAL
14610: IFFALSE 14614
// exit ;
14612: GO 14716
// if HexInfo ( x , y ) = factory then
14614: LD_VAR 0 2
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: CALL_OW 428
14628: PUSH
14629: LD_VAR 0 1
14633: EQUAL
14634: IFFALSE 14661
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14636: LD_ADDR_EXP 60
14640: PUSH
14641: LD_EXP 60
14645: PPUSH
14646: LD_VAR 0 1
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 1
14658: ST_TO_ADDR
14659: GO 14712
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14661: LD_ADDR_EXP 60
14665: PUSH
14666: LD_EXP 60
14670: PPUSH
14671: LD_VAR 0 1
14675: PPUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 255
14685: PUSH
14686: LD_VAR 0 1
14690: PUSH
14691: LD_VAR 0 2
14695: PUSH
14696: LD_VAR 0 3
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 1
14711: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14712: CALL 14721 0 0
// end ;
14716: LD_VAR 0 4
14720: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14721: LD_INT 0
14723: PPUSH
14724: PPUSH
14725: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14726: LD_STRING resetFactoryWaypoint();
14728: PPUSH
14729: CALL_OW 559
// if factoryWaypoints then
14733: LD_EXP 60
14737: IFFALSE 14863
// begin list := PrepareArray ( factoryWaypoints ) ;
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: LD_EXP 60
14748: PPUSH
14749: CALL 62334 0 1
14753: ST_TO_ADDR
// for i := 1 to list do
14754: LD_ADDR_VAR 0 2
14758: PUSH
14759: DOUBLE
14760: LD_INT 1
14762: DEC
14763: ST_TO_ADDR
14764: LD_VAR 0 3
14768: PUSH
14769: FOR_TO
14770: IFFALSE 14861
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14772: LD_STRING setFactoryWaypointXY(
14774: PUSH
14775: LD_VAR 0 3
14779: PUSH
14780: LD_VAR 0 2
14784: ARRAY
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: STR
14790: PUSH
14791: LD_STRING ,
14793: STR
14794: PUSH
14795: LD_VAR 0 3
14799: PUSH
14800: LD_VAR 0 2
14804: ARRAY
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: STR
14810: PUSH
14811: LD_STRING ,
14813: STR
14814: PUSH
14815: LD_VAR 0 3
14819: PUSH
14820: LD_VAR 0 2
14824: ARRAY
14825: PUSH
14826: LD_INT 3
14828: ARRAY
14829: STR
14830: PUSH
14831: LD_STRING ,
14833: STR
14834: PUSH
14835: LD_VAR 0 3
14839: PUSH
14840: LD_VAR 0 2
14844: ARRAY
14845: PUSH
14846: LD_INT 4
14848: ARRAY
14849: STR
14850: PUSH
14851: LD_STRING )
14853: STR
14854: PPUSH
14855: CALL_OW 559
14859: GO 14769
14861: POP
14862: POP
// end ; end ;
14863: LD_VAR 0 1
14867: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
14868: LD_INT 0
14870: PPUSH
// if HexInfo ( x , y ) = warehouse then
14871: LD_VAR 0 2
14875: PPUSH
14876: LD_VAR 0 3
14880: PPUSH
14881: CALL_OW 428
14885: PUSH
14886: LD_VAR 0 1
14890: EQUAL
14891: IFFALSE 14918
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
14893: LD_ADDR_EXP 61
14897: PUSH
14898: LD_EXP 61
14902: PPUSH
14903: LD_VAR 0 1
14907: PPUSH
14908: LD_INT 0
14910: PPUSH
14911: CALL_OW 1
14915: ST_TO_ADDR
14916: GO 14969
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
14918: LD_ADDR_EXP 61
14922: PUSH
14923: LD_EXP 61
14927: PPUSH
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 255
14942: PUSH
14943: LD_VAR 0 1
14947: PUSH
14948: LD_VAR 0 2
14952: PUSH
14953: LD_VAR 0 3
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 1
14968: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
14969: CALL 14978 0 0
// end ;
14973: LD_VAR 0 4
14977: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
14982: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
14983: LD_STRING resetWarehouseGatheringPoints();
14985: PPUSH
14986: CALL_OW 559
// if warehouseGatheringPoints then
14990: LD_EXP 61
14994: IFFALSE 15120
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: LD_EXP 61
15005: PPUSH
15006: CALL 62334 0 1
15010: ST_TO_ADDR
// for i := 1 to list do
15011: LD_ADDR_VAR 0 2
15015: PUSH
15016: DOUBLE
15017: LD_INT 1
15019: DEC
15020: ST_TO_ADDR
15021: LD_VAR 0 3
15025: PUSH
15026: FOR_TO
15027: IFFALSE 15118
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15029: LD_STRING setWarehouseGatheringPointXY(
15031: PUSH
15032: LD_VAR 0 3
15036: PUSH
15037: LD_VAR 0 2
15041: ARRAY
15042: PUSH
15043: LD_INT 1
15045: ARRAY
15046: STR
15047: PUSH
15048: LD_STRING ,
15050: STR
15051: PUSH
15052: LD_VAR 0 3
15056: PUSH
15057: LD_VAR 0 2
15061: ARRAY
15062: PUSH
15063: LD_INT 2
15065: ARRAY
15066: STR
15067: PUSH
15068: LD_STRING ,
15070: STR
15071: PUSH
15072: LD_VAR 0 3
15076: PUSH
15077: LD_VAR 0 2
15081: ARRAY
15082: PUSH
15083: LD_INT 3
15085: ARRAY
15086: STR
15087: PUSH
15088: LD_STRING ,
15090: STR
15091: PUSH
15092: LD_VAR 0 3
15096: PUSH
15097: LD_VAR 0 2
15101: ARRAY
15102: PUSH
15103: LD_INT 4
15105: ARRAY
15106: STR
15107: PUSH
15108: LD_STRING )
15110: STR
15111: PPUSH
15112: CALL_OW 559
15116: GO 15026
15118: POP
15119: POP
// end ; end ;
15120: LD_VAR 0 1
15124: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15125: LD_EXP 61
15129: IFFALSE 15814
15131: GO 15133
15133: DISABLE
15134: LD_INT 0
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
// begin enable ;
15145: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15146: LD_ADDR_VAR 0 3
15150: PUSH
15151: LD_EXP 61
15155: PPUSH
15156: CALL 62334 0 1
15160: ST_TO_ADDR
// if not list then
15161: LD_VAR 0 3
15165: NOT
15166: IFFALSE 15170
// exit ;
15168: GO 15814
// for i := 1 to list do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: DOUBLE
15176: LD_INT 1
15178: DEC
15179: ST_TO_ADDR
15180: LD_VAR 0 3
15184: PUSH
15185: FOR_TO
15186: IFFALSE 15812
// begin depot := list [ i ] [ 2 ] ;
15188: LD_ADDR_VAR 0 8
15192: PUSH
15193: LD_VAR 0 3
15197: PUSH
15198: LD_VAR 0 1
15202: ARRAY
15203: PUSH
15204: LD_INT 2
15206: ARRAY
15207: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15208: LD_ADDR_VAR 0 5
15212: PUSH
15213: LD_VAR 0 3
15217: PUSH
15218: LD_VAR 0 1
15222: ARRAY
15223: PUSH
15224: LD_INT 1
15226: ARRAY
15227: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15228: LD_VAR 0 8
15232: PPUSH
15233: CALL_OW 301
15237: PUSH
15238: LD_VAR 0 5
15242: PUSH
15243: LD_VAR 0 8
15247: PPUSH
15248: CALL_OW 255
15252: NONEQUAL
15253: OR
15254: IFFALSE 15283
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15256: LD_ADDR_EXP 61
15260: PUSH
15261: LD_EXP 61
15265: PPUSH
15266: LD_VAR 0 8
15270: PPUSH
15271: LD_INT 0
15273: PPUSH
15274: CALL_OW 1
15278: ST_TO_ADDR
// exit ;
15279: POP
15280: POP
15281: GO 15814
// end ; x := list [ i ] [ 3 ] ;
15283: LD_ADDR_VAR 0 6
15287: PUSH
15288: LD_VAR 0 3
15292: PUSH
15293: LD_VAR 0 1
15297: ARRAY
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15303: LD_ADDR_VAR 0 7
15307: PUSH
15308: LD_VAR 0 3
15312: PUSH
15313: LD_VAR 0 1
15317: ARRAY
15318: PUSH
15319: LD_INT 4
15321: ARRAY
15322: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15323: LD_ADDR_VAR 0 9
15327: PUSH
15328: LD_VAR 0 6
15332: PPUSH
15333: LD_VAR 0 7
15337: PPUSH
15338: LD_INT 16
15340: PPUSH
15341: CALL 60922 0 3
15345: ST_TO_ADDR
// if not cratesNearbyPoint then
15346: LD_VAR 0 9
15350: NOT
15351: IFFALSE 15357
// exit ;
15353: POP
15354: POP
15355: GO 15814
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15357: LD_ADDR_VAR 0 4
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_VAR 0 5
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 3
15376: PUSH
15377: LD_INT 60
15379: PUSH
15380: EMPTY
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 91
15389: PUSH
15390: LD_VAR 0 8
15394: PUSH
15395: LD_INT 6
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: LD_INT 25
15408: PUSH
15409: LD_INT 2
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 25
15418: PUSH
15419: LD_INT 16
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: PUSH
15442: LD_VAR 0 8
15446: PPUSH
15447: CALL_OW 313
15451: PPUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 60
15457: PUSH
15458: EMPTY
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: LD_INT 25
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 25
15480: PUSH
15481: LD_INT 16
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 72
15501: UNION
15502: ST_TO_ADDR
// if tmp then
15503: LD_VAR 0 4
15507: IFFALSE 15587
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15509: LD_ADDR_VAR 0 4
15513: PUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: LD_INT 3
15521: PPUSH
15522: CALL 58891 0 2
15526: ST_TO_ADDR
// for j in tmp do
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_VAR 0 4
15536: PUSH
15537: FOR_IN
15538: IFFALSE 15581
// begin if IsInUnit ( j ) then
15540: LD_VAR 0 2
15544: PPUSH
15545: CALL_OW 310
15549: IFFALSE 15560
// ComExit ( j ) ;
15551: LD_VAR 0 2
15555: PPUSH
15556: CALL 58974 0 1
// AddComCollect ( j , x , y ) ;
15560: LD_VAR 0 2
15564: PPUSH
15565: LD_VAR 0 6
15569: PPUSH
15570: LD_VAR 0 7
15574: PPUSH
15575: CALL_OW 177
// end ;
15579: GO 15537
15581: POP
15582: POP
// exit ;
15583: POP
15584: POP
15585: GO 15814
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15587: LD_ADDR_VAR 0 4
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_VAR 0 5
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 91
15606: PUSH
15607: LD_VAR 0 8
15611: PUSH
15612: LD_INT 8
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 34
15625: PUSH
15626: LD_INT 12
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 34
15635: PUSH
15636: LD_INT 51
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 34
15645: PUSH
15646: LD_INT 32
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 34
15655: PUSH
15656: LD_INT 89
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 69
15679: ST_TO_ADDR
// if tmp then
15680: LD_VAR 0 4
15684: IFFALSE 15810
// begin for j in tmp do
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: LD_VAR 0 4
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15808
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15699: LD_VAR 0 2
15703: PPUSH
15704: CALL_OW 262
15708: PUSH
15709: LD_INT 3
15711: EQUAL
15712: PUSH
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 261
15722: PUSH
15723: LD_INT 20
15725: GREATER
15726: OR
15727: PUSH
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 314
15737: NOT
15738: AND
15739: PUSH
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL_OW 263
15749: PUSH
15750: LD_INT 1
15752: NONEQUAL
15753: PUSH
15754: LD_VAR 0 2
15758: PPUSH
15759: CALL_OW 311
15763: OR
15764: AND
15765: IFFALSE 15806
// begin ComCollect ( j , x , y ) ;
15767: LD_VAR 0 2
15771: PPUSH
15772: LD_VAR 0 6
15776: PPUSH
15777: LD_VAR 0 7
15781: PPUSH
15782: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15786: LD_VAR 0 2
15790: PPUSH
15791: LD_VAR 0 8
15795: PPUSH
15796: CALL_OW 172
// exit ;
15800: POP
15801: POP
15802: POP
15803: POP
15804: GO 15814
// end ;
15806: GO 15696
15808: POP
15809: POP
// end ; end ;
15810: GO 15185
15812: POP
15813: POP
// end ; end_of_file
15814: PPOPN 9
15816: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15817: LD_INT 0
15819: PPUSH
15820: PPUSH
15821: PPUSH
15822: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 264
15832: PUSH
15833: LD_INT 91
15835: EQUAL
15836: IFFALSE 15908
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15838: LD_INT 68
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 255
15850: PPUSH
15851: CALL_OW 321
15855: PUSH
15856: LD_INT 2
15858: EQUAL
15859: IFFALSE 15871
// eff := 70 else
15861: LD_ADDR_VAR 0 4
15865: PUSH
15866: LD_INT 70
15868: ST_TO_ADDR
15869: GO 15879
// eff := 30 ;
15871: LD_ADDR_VAR 0 4
15875: PUSH
15876: LD_INT 30
15878: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 250
15888: PPUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 251
15898: PPUSH
15899: LD_VAR 0 4
15903: PPUSH
15904: CALL_OW 495
// end ; end ;
15908: LD_VAR 0 2
15912: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15913: LD_INT 0
15915: PPUSH
// end ;
15916: LD_VAR 0 4
15920: RET
// export function SOS_Command ( cmd ) ; begin
15921: LD_INT 0
15923: PPUSH
// end ;
15924: LD_VAR 0 2
15928: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15929: LD_INT 0
15931: PPUSH
// end ;
15932: LD_VAR 0 6
15936: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15937: LD_INT 0
15939: PPUSH
15940: PPUSH
// if not vehicle or not factory then
15941: LD_VAR 0 1
15945: NOT
15946: PUSH
15947: LD_VAR 0 2
15951: NOT
15952: OR
15953: IFFALSE 15957
// exit ;
15955: GO 16188
// if factoryWaypoints >= factory then
15957: LD_EXP 60
15961: PUSH
15962: LD_VAR 0 2
15966: GREATEREQUAL
15967: IFFALSE 16188
// if factoryWaypoints [ factory ] then
15969: LD_EXP 60
15973: PUSH
15974: LD_VAR 0 2
15978: ARRAY
15979: IFFALSE 16188
// begin if GetControl ( vehicle ) = control_manual then
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 263
15990: PUSH
15991: LD_INT 1
15993: EQUAL
15994: IFFALSE 16075
// begin driver := IsDrivenBy ( vehicle ) ;
15996: LD_ADDR_VAR 0 4
16000: PUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: CALL_OW 311
16010: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16011: LD_VAR 0 4
16015: PPUSH
16016: LD_EXP 60
16020: PUSH
16021: LD_VAR 0 2
16025: ARRAY
16026: PUSH
16027: LD_INT 3
16029: ARRAY
16030: PPUSH
16031: LD_EXP 60
16035: PUSH
16036: LD_VAR 0 2
16040: ARRAY
16041: PUSH
16042: LD_INT 4
16044: ARRAY
16045: PPUSH
16046: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16050: LD_VAR 0 4
16054: PPUSH
16055: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16059: LD_VAR 0 4
16063: PPUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 180
// end else
16073: GO 16188
// if GetControl ( vehicle ) = control_remote then
16075: LD_VAR 0 1
16079: PPUSH
16080: CALL_OW 263
16084: PUSH
16085: LD_INT 2
16087: EQUAL
16088: IFFALSE 16149
// begin wait ( 0 0$2 ) ;
16090: LD_INT 70
16092: PPUSH
16093: CALL_OW 67
// if Connect ( vehicle ) then
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL 29182 0 1
16106: IFFALSE 16147
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16108: LD_VAR 0 1
16112: PPUSH
16113: LD_EXP 60
16117: PUSH
16118: LD_VAR 0 2
16122: ARRAY
16123: PUSH
16124: LD_INT 3
16126: ARRAY
16127: PPUSH
16128: LD_EXP 60
16132: PUSH
16133: LD_VAR 0 2
16137: ARRAY
16138: PUSH
16139: LD_INT 4
16141: ARRAY
16142: PPUSH
16143: CALL_OW 171
// end else
16147: GO 16188
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16149: LD_VAR 0 1
16153: PPUSH
16154: LD_EXP 60
16158: PUSH
16159: LD_VAR 0 2
16163: ARRAY
16164: PUSH
16165: LD_INT 3
16167: ARRAY
16168: PPUSH
16169: LD_EXP 60
16173: PUSH
16174: LD_VAR 0 2
16178: ARRAY
16179: PUSH
16180: LD_INT 4
16182: ARRAY
16183: PPUSH
16184: CALL_OW 171
// end ; end ;
16188: LD_VAR 0 3
16192: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16193: LD_INT 0
16195: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_INT 250
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 264
16214: PUSH
16215: LD_INT 81
16217: EQUAL
16218: AND
16219: IFFALSE 16240
// MinerPlaceMine ( unit , x , y ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_VAR 0 4
16230: PPUSH
16231: LD_VAR 0 5
16235: PPUSH
16236: CALL 19230 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16240: LD_VAR 0 1
16244: PUSH
16245: LD_INT 251
16247: EQUAL
16248: PUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 264
16258: PUSH
16259: LD_INT 81
16261: EQUAL
16262: AND
16263: IFFALSE 16284
// MinerDetonateMine ( unit , x , y ) ;
16265: LD_VAR 0 2
16269: PPUSH
16270: LD_VAR 0 4
16274: PPUSH
16275: LD_VAR 0 5
16279: PPUSH
16280: CALL 19505 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 252
16291: EQUAL
16292: PUSH
16293: LD_VAR 0 2
16297: PPUSH
16298: CALL_OW 264
16302: PUSH
16303: LD_INT 81
16305: EQUAL
16306: AND
16307: IFFALSE 16328
// MinerCreateMinefield ( unit , x , y ) ;
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_VAR 0 4
16318: PPUSH
16319: LD_VAR 0 5
16323: PPUSH
16324: CALL 19922 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 253
16335: EQUAL
16336: PUSH
16337: LD_VAR 0 2
16341: PPUSH
16342: CALL_OW 257
16346: PUSH
16347: LD_INT 5
16349: EQUAL
16350: AND
16351: IFFALSE 16372
// ComBinocular ( unit , x , y ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: LD_VAR 0 4
16362: PPUSH
16363: LD_VAR 0 5
16367: PPUSH
16368: CALL 20291 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16372: LD_VAR 0 1
16376: PUSH
16377: LD_INT 254
16379: EQUAL
16380: PUSH
16381: LD_VAR 0 2
16385: PPUSH
16386: CALL_OW 264
16390: PUSH
16391: LD_INT 99
16393: EQUAL
16394: AND
16395: PUSH
16396: LD_VAR 0 3
16400: PPUSH
16401: CALL_OW 263
16405: PUSH
16406: LD_INT 3
16408: EQUAL
16409: AND
16410: IFFALSE 16426
// HackDestroyVehicle ( unit , selectedUnit ) ;
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_VAR 0 3
16421: PPUSH
16422: CALL 18594 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16426: LD_VAR 0 1
16430: PUSH
16431: LD_INT 255
16433: EQUAL
16434: PUSH
16435: LD_VAR 0 2
16439: PPUSH
16440: CALL_OW 264
16444: PUSH
16445: LD_INT 14
16447: PUSH
16448: LD_INT 53
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: IN
16455: AND
16456: PUSH
16457: LD_VAR 0 4
16461: PPUSH
16462: LD_VAR 0 5
16466: PPUSH
16467: CALL_OW 488
16471: AND
16472: IFFALSE 16496
// CutTreeXYR ( unit , x , y , 12 ) ;
16474: LD_VAR 0 2
16478: PPUSH
16479: LD_VAR 0 4
16483: PPUSH
16484: LD_VAR 0 5
16488: PPUSH
16489: LD_INT 12
16491: PPUSH
16492: CALL 16591 0 4
// if cmd = 256 then
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 256
16503: EQUAL
16504: IFFALSE 16525
// SetFactoryWaypoint ( unit , x , y ) ;
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_VAR 0 4
16515: PPUSH
16516: LD_VAR 0 5
16520: PPUSH
16521: CALL 14506 0 3
// if cmd = 257 then
16525: LD_VAR 0 1
16529: PUSH
16530: LD_INT 257
16532: EQUAL
16533: IFFALSE 16554
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16535: LD_VAR 0 2
16539: PPUSH
16540: LD_VAR 0 4
16544: PPUSH
16545: LD_VAR 0 5
16549: PPUSH
16550: CALL 14868 0 3
// if cmd = 258 then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 258
16561: EQUAL
16562: IFFALSE 16586
// BurnTreeXYR ( unit , x , y , 8 ) ;
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_VAR 0 4
16573: PPUSH
16574: LD_VAR 0 5
16578: PPUSH
16579: LD_INT 8
16581: PPUSH
16582: CALL 16985 0 4
// end ;
16586: LD_VAR 0 6
16590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16591: LD_INT 0
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 302
16611: NOT
16612: PUSH
16613: LD_VAR 0 2
16617: PPUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: CALL_OW 488
16627: NOT
16628: OR
16629: PUSH
16630: LD_VAR 0 4
16634: NOT
16635: OR
16636: IFFALSE 16640
// exit ;
16638: GO 16980
// list := [ ] ;
16640: LD_ADDR_VAR 0 13
16644: PUSH
16645: EMPTY
16646: ST_TO_ADDR
// if x - r < 0 then
16647: LD_VAR 0 2
16651: PUSH
16652: LD_VAR 0 4
16656: MINUS
16657: PUSH
16658: LD_INT 0
16660: LESS
16661: IFFALSE 16673
// min_x := 0 else
16663: LD_ADDR_VAR 0 7
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
16671: GO 16689
// min_x := x - r ;
16673: LD_ADDR_VAR 0 7
16677: PUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_VAR 0 4
16687: MINUS
16688: ST_TO_ADDR
// if y - r < 0 then
16689: LD_VAR 0 3
16693: PUSH
16694: LD_VAR 0 4
16698: MINUS
16699: PUSH
16700: LD_INT 0
16702: LESS
16703: IFFALSE 16715
// min_y := 0 else
16705: LD_ADDR_VAR 0 8
16709: PUSH
16710: LD_INT 0
16712: ST_TO_ADDR
16713: GO 16731
// min_y := y - r ;
16715: LD_ADDR_VAR 0 8
16719: PUSH
16720: LD_VAR 0 3
16724: PUSH
16725: LD_VAR 0 4
16729: MINUS
16730: ST_TO_ADDR
// max_x := x + r ;
16731: LD_ADDR_VAR 0 9
16735: PUSH
16736: LD_VAR 0 2
16740: PUSH
16741: LD_VAR 0 4
16745: PLUS
16746: ST_TO_ADDR
// max_y := y + r ;
16747: LD_ADDR_VAR 0 10
16751: PUSH
16752: LD_VAR 0 3
16756: PUSH
16757: LD_VAR 0 4
16761: PLUS
16762: ST_TO_ADDR
// for _x = min_x to max_x do
16763: LD_ADDR_VAR 0 11
16767: PUSH
16768: DOUBLE
16769: LD_VAR 0 7
16773: DEC
16774: ST_TO_ADDR
16775: LD_VAR 0 9
16779: PUSH
16780: FOR_TO
16781: IFFALSE 16898
// for _y = min_y to max_y do
16783: LD_ADDR_VAR 0 12
16787: PUSH
16788: DOUBLE
16789: LD_VAR 0 8
16793: DEC
16794: ST_TO_ADDR
16795: LD_VAR 0 10
16799: PUSH
16800: FOR_TO
16801: IFFALSE 16894
// begin if not ValidHex ( _x , _y ) then
16803: LD_VAR 0 11
16807: PPUSH
16808: LD_VAR 0 12
16812: PPUSH
16813: CALL_OW 488
16817: NOT
16818: IFFALSE 16822
// continue ;
16820: GO 16800
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16822: LD_VAR 0 11
16826: PPUSH
16827: LD_VAR 0 12
16831: PPUSH
16832: CALL_OW 351
16836: PUSH
16837: LD_VAR 0 11
16841: PPUSH
16842: LD_VAR 0 12
16846: PPUSH
16847: CALL_OW 554
16851: AND
16852: IFFALSE 16892
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16854: LD_ADDR_VAR 0 13
16858: PUSH
16859: LD_VAR 0 13
16863: PPUSH
16864: LD_VAR 0 13
16868: PUSH
16869: LD_INT 1
16871: PLUS
16872: PPUSH
16873: LD_VAR 0 11
16877: PUSH
16878: LD_VAR 0 12
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PPUSH
16887: CALL_OW 2
16891: ST_TO_ADDR
// end ;
16892: GO 16800
16894: POP
16895: POP
16896: GO 16780
16898: POP
16899: POP
// if not list then
16900: LD_VAR 0 13
16904: NOT
16905: IFFALSE 16909
// exit ;
16907: GO 16980
// for i in list do
16909: LD_ADDR_VAR 0 6
16913: PUSH
16914: LD_VAR 0 13
16918: PUSH
16919: FOR_IN
16920: IFFALSE 16978
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16922: LD_VAR 0 1
16926: PPUSH
16927: LD_STRING M
16929: PUSH
16930: LD_VAR 0 6
16934: PUSH
16935: LD_INT 1
16937: ARRAY
16938: PUSH
16939: LD_VAR 0 6
16943: PUSH
16944: LD_INT 2
16946: ARRAY
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: LD_INT 0
16953: PUSH
16954: LD_INT 0
16956: PUSH
16957: LD_INT 0
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: EMPTY
16970: LIST
16971: PPUSH
16972: CALL_OW 447
16976: GO 16919
16978: POP
16979: POP
// end ;
16980: LD_VAR 0 5
16984: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16985: LD_INT 0
16987: PPUSH
16988: PPUSH
16989: PPUSH
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
16996: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 302
17006: NOT
17007: PUSH
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_VAR 0 3
17017: PPUSH
17018: CALL_OW 488
17022: NOT
17023: OR
17024: PUSH
17025: LD_VAR 0 4
17029: NOT
17030: OR
17031: IFFALSE 17035
// exit ;
17033: GO 17548
// list := [ ] ;
17035: LD_ADDR_VAR 0 13
17039: PUSH
17040: EMPTY
17041: ST_TO_ADDR
// if x - r < 0 then
17042: LD_VAR 0 2
17046: PUSH
17047: LD_VAR 0 4
17051: MINUS
17052: PUSH
17053: LD_INT 0
17055: LESS
17056: IFFALSE 17068
// min_x := 0 else
17058: LD_ADDR_VAR 0 7
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
17066: GO 17084
// min_x := x - r ;
17068: LD_ADDR_VAR 0 7
17072: PUSH
17073: LD_VAR 0 2
17077: PUSH
17078: LD_VAR 0 4
17082: MINUS
17083: ST_TO_ADDR
// if y - r < 0 then
17084: LD_VAR 0 3
17088: PUSH
17089: LD_VAR 0 4
17093: MINUS
17094: PUSH
17095: LD_INT 0
17097: LESS
17098: IFFALSE 17110
// min_y := 0 else
17100: LD_ADDR_VAR 0 8
17104: PUSH
17105: LD_INT 0
17107: ST_TO_ADDR
17108: GO 17126
// min_y := y - r ;
17110: LD_ADDR_VAR 0 8
17114: PUSH
17115: LD_VAR 0 3
17119: PUSH
17120: LD_VAR 0 4
17124: MINUS
17125: ST_TO_ADDR
// max_x := x + r ;
17126: LD_ADDR_VAR 0 9
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_VAR 0 4
17140: PLUS
17141: ST_TO_ADDR
// max_y := y + r ;
17142: LD_ADDR_VAR 0 10
17146: PUSH
17147: LD_VAR 0 3
17151: PUSH
17152: LD_VAR 0 4
17156: PLUS
17157: ST_TO_ADDR
// for _x = min_x to max_x do
17158: LD_ADDR_VAR 0 11
17162: PUSH
17163: DOUBLE
17164: LD_VAR 0 7
17168: DEC
17169: ST_TO_ADDR
17170: LD_VAR 0 9
17174: PUSH
17175: FOR_TO
17176: IFFALSE 17293
// for _y = min_y to max_y do
17178: LD_ADDR_VAR 0 12
17182: PUSH
17183: DOUBLE
17184: LD_VAR 0 8
17188: DEC
17189: ST_TO_ADDR
17190: LD_VAR 0 10
17194: PUSH
17195: FOR_TO
17196: IFFALSE 17289
// begin if not ValidHex ( _x , _y ) then
17198: LD_VAR 0 11
17202: PPUSH
17203: LD_VAR 0 12
17207: PPUSH
17208: CALL_OW 488
17212: NOT
17213: IFFALSE 17217
// continue ;
17215: GO 17195
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17217: LD_VAR 0 11
17221: PPUSH
17222: LD_VAR 0 12
17226: PPUSH
17227: CALL_OW 351
17231: PUSH
17232: LD_VAR 0 11
17236: PPUSH
17237: LD_VAR 0 12
17241: PPUSH
17242: CALL_OW 554
17246: AND
17247: IFFALSE 17287
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17249: LD_ADDR_VAR 0 13
17253: PUSH
17254: LD_VAR 0 13
17258: PPUSH
17259: LD_VAR 0 13
17263: PUSH
17264: LD_INT 1
17266: PLUS
17267: PPUSH
17268: LD_VAR 0 11
17272: PUSH
17273: LD_VAR 0 12
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: CALL_OW 2
17286: ST_TO_ADDR
// end ;
17287: GO 17195
17289: POP
17290: POP
17291: GO 17175
17293: POP
17294: POP
// if not list then
17295: LD_VAR 0 13
17299: NOT
17300: IFFALSE 17304
// exit ;
17302: GO 17548
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17304: LD_ADDR_VAR 0 13
17308: PUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: LD_VAR 0 13
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL 26324 0 4
17329: ST_TO_ADDR
// ComStop ( flame ) ;
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 141
// for i in list do
17339: LD_ADDR_VAR 0 6
17343: PUSH
17344: LD_VAR 0 13
17348: PUSH
17349: FOR_IN
17350: IFFALSE 17381
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_VAR 0 6
17361: PUSH
17362: LD_INT 1
17364: ARRAY
17365: PPUSH
17366: LD_VAR 0 6
17370: PUSH
17371: LD_INT 2
17373: ARRAY
17374: PPUSH
17375: CALL_OW 176
17379: GO 17349
17381: POP
17382: POP
// repeat wait ( 0 0$1 ) ;
17383: LD_INT 35
17385: PPUSH
17386: CALL_OW 67
// task := GetTaskList ( flame ) ;
17390: LD_ADDR_VAR 0 14
17394: PUSH
17395: LD_VAR 0 1
17399: PPUSH
17400: CALL_OW 437
17404: ST_TO_ADDR
// if not task then
17405: LD_VAR 0 14
17409: NOT
17410: IFFALSE 17414
// exit ;
17412: GO 17548
// if task [ 1 ] [ 1 ] <> | then
17414: LD_VAR 0 14
17418: PUSH
17419: LD_INT 1
17421: ARRAY
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PUSH
17427: LD_STRING |
17429: NONEQUAL
17430: IFFALSE 17434
// exit ;
17432: GO 17548
// _x := task [ 1 ] [ 2 ] ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_VAR 0 14
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PUSH
17448: LD_INT 2
17450: ARRAY
17451: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17452: LD_ADDR_VAR 0 12
17456: PUSH
17457: LD_VAR 0 14
17461: PUSH
17462: LD_INT 1
17464: ARRAY
17465: PUSH
17466: LD_INT 3
17468: ARRAY
17469: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17470: LD_VAR 0 11
17474: PPUSH
17475: LD_VAR 0 12
17479: PPUSH
17480: CALL_OW 351
17484: NOT
17485: PUSH
17486: LD_VAR 0 11
17490: PPUSH
17491: LD_VAR 0 12
17495: PPUSH
17496: CALL_OW 554
17500: NOT
17501: OR
17502: IFFALSE 17536
// begin task := Delete ( task , 1 ) ;
17504: LD_ADDR_VAR 0 14
17508: PUSH
17509: LD_VAR 0 14
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: CALL_OW 3
17521: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: LD_VAR 0 14
17531: PPUSH
17532: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: CALL_OW 314
17545: NOT
17546: IFFALSE 17383
// end ;
17548: LD_VAR 0 5
17552: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17553: LD_EXP 63
17557: NOT
17558: IFFALSE 17608
17560: GO 17562
17562: DISABLE
// begin initHack := true ;
17563: LD_ADDR_EXP 63
17567: PUSH
17568: LD_INT 1
17570: ST_TO_ADDR
// hackTanks := [ ] ;
17571: LD_ADDR_EXP 64
17575: PUSH
17576: EMPTY
17577: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17578: LD_ADDR_EXP 65
17582: PUSH
17583: EMPTY
17584: ST_TO_ADDR
// hackLimit := 3 ;
17585: LD_ADDR_EXP 66
17589: PUSH
17590: LD_INT 3
17592: ST_TO_ADDR
// hackDist := 12 ;
17593: LD_ADDR_EXP 67
17597: PUSH
17598: LD_INT 12
17600: ST_TO_ADDR
// hackCounter := [ ] ;
17601: LD_ADDR_EXP 68
17605: PUSH
17606: EMPTY
17607: ST_TO_ADDR
// end ;
17608: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17609: LD_EXP 63
17613: PUSH
17614: LD_INT 34
17616: PUSH
17617: LD_INT 99
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: AND
17629: IFFALSE 17882
17631: GO 17633
17633: DISABLE
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
// begin enable ;
17638: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17639: LD_ADDR_VAR 0 1
17643: PUSH
17644: LD_INT 34
17646: PUSH
17647: LD_INT 99
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: PUSH
17659: FOR_IN
17660: IFFALSE 17880
// begin if not i in hackTanks then
17662: LD_VAR 0 1
17666: PUSH
17667: LD_EXP 64
17671: IN
17672: NOT
17673: IFFALSE 17756
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17675: LD_ADDR_EXP 64
17679: PUSH
17680: LD_EXP 64
17684: PPUSH
17685: LD_EXP 64
17689: PUSH
17690: LD_INT 1
17692: PLUS
17693: PPUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 1
17703: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17704: LD_ADDR_EXP 65
17708: PUSH
17709: LD_EXP 65
17713: PPUSH
17714: LD_EXP 65
17718: PUSH
17719: LD_INT 1
17721: PLUS
17722: PPUSH
17723: EMPTY
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17730: LD_ADDR_EXP 68
17734: PUSH
17735: LD_EXP 68
17739: PPUSH
17740: LD_EXP 68
17744: PUSH
17745: LD_INT 1
17747: PLUS
17748: PPUSH
17749: EMPTY
17750: PPUSH
17751: CALL_OW 1
17755: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL_OW 302
17765: NOT
17766: IFFALSE 17779
// begin HackUnlinkAll ( i ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL 17885 0 1
// continue ;
17777: GO 17659
// end ; HackCheckCapturedStatus ( i ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL 18328 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 81
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 255
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 33
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 91
17822: PUSH
17823: LD_VAR 0 1
17827: PUSH
17828: LD_EXP 67
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 50
17840: PUSH
17841: EMPTY
17842: LIST
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: PPUSH
17850: CALL_OW 69
17854: ST_TO_ADDR
// if not tmp then
17855: LD_VAR 0 2
17859: NOT
17860: IFFALSE 17864
// continue ;
17862: GO 17659
// HackLink ( i , tmp ) ;
17864: LD_VAR 0 1
17868: PPUSH
17869: LD_VAR 0 2
17873: PPUSH
17874: CALL 18021 0 2
// end ;
17878: GO 17659
17880: POP
17881: POP
// end ;
17882: PPOPN 2
17884: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17885: LD_INT 0
17887: PPUSH
17888: PPUSH
17889: PPUSH
// if not hack in hackTanks then
17890: LD_VAR 0 1
17894: PUSH
17895: LD_EXP 64
17899: IN
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 18016
// index := GetElementIndex ( hackTanks , hack ) ;
17905: LD_ADDR_VAR 0 4
17909: PUSH
17910: LD_EXP 64
17914: PPUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL 25621 0 2
17924: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17925: LD_EXP 65
17929: PUSH
17930: LD_VAR 0 4
17934: ARRAY
17935: IFFALSE 18016
// begin for i in hackTanksCaptured [ index ] do
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_EXP 65
17946: PUSH
17947: LD_VAR 0 4
17951: ARRAY
17952: PUSH
17953: FOR_IN
17954: IFFALSE 17980
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17956: LD_VAR 0 3
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: LD_VAR 0 3
17969: PUSH
17970: LD_INT 2
17972: ARRAY
17973: PPUSH
17974: CALL_OW 235
17978: GO 17953
17980: POP
17981: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17982: LD_ADDR_EXP 65
17986: PUSH
17987: LD_EXP 65
17991: PPUSH
17992: LD_VAR 0 4
17996: PPUSH
17997: EMPTY
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: CALL_OW 505
// end ; end ;
18016: LD_VAR 0 2
18020: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
// if not hack in hackTanks or not vehicles then
18026: LD_VAR 0 1
18030: PUSH
18031: LD_EXP 64
18035: IN
18036: NOT
18037: PUSH
18038: LD_VAR 0 2
18042: NOT
18043: OR
18044: IFFALSE 18048
// exit ;
18046: GO 18323
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18048: LD_ADDR_VAR 0 2
18052: PUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 1
18068: PPUSH
18069: CALL 26271 0 4
18073: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18074: LD_ADDR_VAR 0 5
18078: PUSH
18079: LD_EXP 64
18083: PPUSH
18084: LD_VAR 0 1
18088: PPUSH
18089: CALL 25621 0 2
18093: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18094: LD_EXP 65
18098: PUSH
18099: LD_VAR 0 5
18103: ARRAY
18104: PUSH
18105: LD_EXP 66
18109: LESS
18110: IFFALSE 18299
// begin for i := 1 to vehicles do
18112: LD_ADDR_VAR 0 4
18116: PUSH
18117: DOUBLE
18118: LD_INT 1
18120: DEC
18121: ST_TO_ADDR
18122: LD_VAR 0 2
18126: PUSH
18127: FOR_TO
18128: IFFALSE 18297
// begin if hackTanksCaptured [ index ] = hackLimit then
18130: LD_EXP 65
18134: PUSH
18135: LD_VAR 0 5
18139: ARRAY
18140: PUSH
18141: LD_EXP 66
18145: EQUAL
18146: IFFALSE 18150
// break ;
18148: GO 18297
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18150: LD_ADDR_EXP 68
18154: PUSH
18155: LD_EXP 68
18159: PPUSH
18160: LD_VAR 0 5
18164: PPUSH
18165: LD_EXP 68
18169: PUSH
18170: LD_VAR 0 5
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: PLUS
18179: PPUSH
18180: CALL_OW 1
18184: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18185: LD_ADDR_EXP 65
18189: PUSH
18190: LD_EXP 65
18194: PPUSH
18195: LD_VAR 0 5
18199: PUSH
18200: LD_EXP 65
18204: PUSH
18205: LD_VAR 0 5
18209: ARRAY
18210: PUSH
18211: LD_INT 1
18213: PLUS
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PPUSH
18219: LD_VAR 0 2
18223: PUSH
18224: LD_VAR 0 4
18228: ARRAY
18229: PUSH
18230: LD_VAR 0 2
18234: PUSH
18235: LD_VAR 0 4
18239: ARRAY
18240: PPUSH
18241: CALL_OW 255
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL 25836 0 3
18254: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18255: LD_VAR 0 2
18259: PUSH
18260: LD_VAR 0 4
18264: ARRAY
18265: PPUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 255
18275: PPUSH
18276: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18280: LD_VAR 0 2
18284: PUSH
18285: LD_VAR 0 4
18289: ARRAY
18290: PPUSH
18291: CALL_OW 141
// end ;
18295: GO 18127
18297: POP
18298: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_EXP 65
18308: PUSH
18309: LD_VAR 0 5
18313: ARRAY
18314: PUSH
18315: LD_INT 0
18317: PLUS
18318: PPUSH
18319: CALL_OW 505
// end ;
18323: LD_VAR 0 3
18327: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
// if not hack in hackTanks then
18334: LD_VAR 0 1
18338: PUSH
18339: LD_EXP 64
18343: IN
18344: NOT
18345: IFFALSE 18349
// exit ;
18347: GO 18589
// index := GetElementIndex ( hackTanks , hack ) ;
18349: LD_ADDR_VAR 0 4
18353: PUSH
18354: LD_EXP 64
18358: PPUSH
18359: LD_VAR 0 1
18363: PPUSH
18364: CALL 25621 0 2
18368: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18369: LD_ADDR_VAR 0 3
18373: PUSH
18374: DOUBLE
18375: LD_EXP 65
18379: PUSH
18380: LD_VAR 0 4
18384: ARRAY
18385: INC
18386: ST_TO_ADDR
18387: LD_INT 1
18389: PUSH
18390: FOR_DOWNTO
18391: IFFALSE 18563
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18393: LD_ADDR_VAR 0 5
18397: PUSH
18398: LD_EXP 65
18402: PUSH
18403: LD_VAR 0 4
18407: ARRAY
18408: PUSH
18409: LD_VAR 0 3
18413: ARRAY
18414: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18415: LD_VAR 0 5
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: PPUSH
18424: CALL_OW 302
18428: NOT
18429: PUSH
18430: LD_VAR 0 5
18434: PUSH
18435: LD_INT 1
18437: ARRAY
18438: PPUSH
18439: CALL_OW 255
18443: PUSH
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 255
18453: NONEQUAL
18454: OR
18455: IFFALSE 18561
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18457: LD_VAR 0 5
18461: PUSH
18462: LD_INT 1
18464: ARRAY
18465: PPUSH
18466: CALL_OW 305
18470: PUSH
18471: LD_VAR 0 5
18475: PUSH
18476: LD_INT 1
18478: ARRAY
18479: PPUSH
18480: CALL_OW 255
18484: PUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 255
18494: EQUAL
18495: AND
18496: IFFALSE 18520
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18498: LD_VAR 0 5
18502: PUSH
18503: LD_INT 1
18505: ARRAY
18506: PPUSH
18507: LD_VAR 0 5
18511: PUSH
18512: LD_INT 2
18514: ARRAY
18515: PPUSH
18516: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18520: LD_ADDR_EXP 65
18524: PUSH
18525: LD_EXP 65
18529: PPUSH
18530: LD_VAR 0 4
18534: PPUSH
18535: LD_EXP 65
18539: PUSH
18540: LD_VAR 0 4
18544: ARRAY
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: CALL_OW 3
18555: PPUSH
18556: CALL_OW 1
18560: ST_TO_ADDR
// end ; end ;
18561: GO 18390
18563: POP
18564: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18565: LD_VAR 0 1
18569: PPUSH
18570: LD_EXP 65
18574: PUSH
18575: LD_VAR 0 4
18579: ARRAY
18580: PUSH
18581: LD_INT 0
18583: PLUS
18584: PPUSH
18585: CALL_OW 505
// end ;
18589: LD_VAR 0 2
18593: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18594: LD_INT 0
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
// if not hack in hackTanks then
18600: LD_VAR 0 1
18604: PUSH
18605: LD_EXP 64
18609: IN
18610: NOT
18611: IFFALSE 18615
// exit ;
18613: GO 18700
// index := GetElementIndex ( hackTanks , hack ) ;
18615: LD_ADDR_VAR 0 5
18619: PUSH
18620: LD_EXP 64
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL 25621 0 2
18634: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18635: LD_ADDR_VAR 0 4
18639: PUSH
18640: DOUBLE
18641: LD_INT 1
18643: DEC
18644: ST_TO_ADDR
18645: LD_EXP 65
18649: PUSH
18650: LD_VAR 0 5
18654: ARRAY
18655: PUSH
18656: FOR_TO
18657: IFFALSE 18698
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18659: LD_EXP 65
18663: PUSH
18664: LD_VAR 0 5
18668: ARRAY
18669: PUSH
18670: LD_VAR 0 4
18674: ARRAY
18675: PUSH
18676: LD_INT 1
18678: ARRAY
18679: PUSH
18680: LD_VAR 0 2
18684: EQUAL
18685: IFFALSE 18696
// KillUnit ( vehicle ) ;
18687: LD_VAR 0 2
18691: PPUSH
18692: CALL_OW 66
18696: GO 18656
18698: POP
18699: POP
// end ;
18700: LD_VAR 0 3
18704: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18705: LD_EXP 69
18709: NOT
18710: IFFALSE 18745
18712: GO 18714
18714: DISABLE
// begin initMiner := true ;
18715: LD_ADDR_EXP 69
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// minersList := [ ] ;
18723: LD_ADDR_EXP 70
18727: PUSH
18728: EMPTY
18729: ST_TO_ADDR
// minerMinesList := [ ] ;
18730: LD_ADDR_EXP 71
18734: PUSH
18735: EMPTY
18736: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18737: LD_ADDR_EXP 72
18741: PUSH
18742: LD_INT 5
18744: ST_TO_ADDR
// end ;
18745: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18746: LD_EXP 69
18750: PUSH
18751: LD_INT 34
18753: PUSH
18754: LD_INT 81
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: AND
18766: IFFALSE 19227
18768: GO 18770
18770: DISABLE
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
18775: PPUSH
18776: PPUSH
// begin enable ;
18777: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18778: LD_ADDR_VAR 0 1
18782: PUSH
18783: LD_INT 34
18785: PUSH
18786: LD_INT 81
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PPUSH
18793: CALL_OW 69
18797: PUSH
18798: FOR_IN
18799: IFFALSE 18871
// begin if not i in minersList then
18801: LD_VAR 0 1
18805: PUSH
18806: LD_EXP 70
18810: IN
18811: NOT
18812: IFFALSE 18869
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18814: LD_ADDR_EXP 70
18818: PUSH
18819: LD_EXP 70
18823: PPUSH
18824: LD_EXP 70
18828: PUSH
18829: LD_INT 1
18831: PLUS
18832: PPUSH
18833: LD_VAR 0 1
18837: PPUSH
18838: CALL_OW 1
18842: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18843: LD_ADDR_EXP 71
18847: PUSH
18848: LD_EXP 71
18852: PPUSH
18853: LD_EXP 71
18857: PUSH
18858: LD_INT 1
18860: PLUS
18861: PPUSH
18862: EMPTY
18863: PPUSH
18864: CALL_OW 1
18868: ST_TO_ADDR
// end end ;
18869: GO 18798
18871: POP
18872: POP
// for i := minerMinesList downto 1 do
18873: LD_ADDR_VAR 0 1
18877: PUSH
18878: DOUBLE
18879: LD_EXP 71
18883: INC
18884: ST_TO_ADDR
18885: LD_INT 1
18887: PUSH
18888: FOR_DOWNTO
18889: IFFALSE 19225
// begin if IsLive ( minersList [ i ] ) then
18891: LD_EXP 70
18895: PUSH
18896: LD_VAR 0 1
18900: ARRAY
18901: PPUSH
18902: CALL_OW 300
18906: IFFALSE 18934
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18908: LD_EXP 70
18912: PUSH
18913: LD_VAR 0 1
18917: ARRAY
18918: PPUSH
18919: LD_EXP 71
18923: PUSH
18924: LD_VAR 0 1
18928: ARRAY
18929: PPUSH
18930: CALL_OW 505
// if not minerMinesList [ i ] then
18934: LD_EXP 71
18938: PUSH
18939: LD_VAR 0 1
18943: ARRAY
18944: NOT
18945: IFFALSE 18949
// continue ;
18947: GO 18888
// for j := minerMinesList [ i ] downto 1 do
18949: LD_ADDR_VAR 0 2
18953: PUSH
18954: DOUBLE
18955: LD_EXP 71
18959: PUSH
18960: LD_VAR 0 1
18964: ARRAY
18965: INC
18966: ST_TO_ADDR
18967: LD_INT 1
18969: PUSH
18970: FOR_DOWNTO
18971: IFFALSE 19221
// begin side := GetSide ( minersList [ i ] ) ;
18973: LD_ADDR_VAR 0 3
18977: PUSH
18978: LD_EXP 70
18982: PUSH
18983: LD_VAR 0 1
18987: ARRAY
18988: PPUSH
18989: CALL_OW 255
18993: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18994: LD_ADDR_VAR 0 4
18998: PUSH
18999: LD_EXP 71
19003: PUSH
19004: LD_VAR 0 1
19008: ARRAY
19009: PUSH
19010: LD_VAR 0 2
19014: ARRAY
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: PPUSH
19020: LD_EXP 71
19024: PUSH
19025: LD_VAR 0 1
19029: ARRAY
19030: PUSH
19031: LD_VAR 0 2
19035: ARRAY
19036: PUSH
19037: LD_INT 2
19039: ARRAY
19040: PPUSH
19041: CALL_OW 428
19045: ST_TO_ADDR
// if not tmp then
19046: LD_VAR 0 4
19050: NOT
19051: IFFALSE 19055
// continue ;
19053: GO 18970
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19055: LD_VAR 0 4
19059: PUSH
19060: LD_INT 81
19062: PUSH
19063: LD_VAR 0 3
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: IN
19077: PUSH
19078: LD_EXP 71
19082: PUSH
19083: LD_VAR 0 1
19087: ARRAY
19088: PUSH
19089: LD_VAR 0 2
19093: ARRAY
19094: PUSH
19095: LD_INT 1
19097: ARRAY
19098: PPUSH
19099: LD_EXP 71
19103: PUSH
19104: LD_VAR 0 1
19108: ARRAY
19109: PUSH
19110: LD_VAR 0 2
19114: ARRAY
19115: PUSH
19116: LD_INT 2
19118: ARRAY
19119: PPUSH
19120: CALL_OW 458
19124: AND
19125: IFFALSE 19219
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19127: LD_EXP 71
19131: PUSH
19132: LD_VAR 0 1
19136: ARRAY
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PUSH
19144: LD_INT 1
19146: ARRAY
19147: PPUSH
19148: LD_EXP 71
19152: PUSH
19153: LD_VAR 0 1
19157: ARRAY
19158: PUSH
19159: LD_VAR 0 2
19163: ARRAY
19164: PUSH
19165: LD_INT 2
19167: ARRAY
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19178: LD_ADDR_EXP 71
19182: PUSH
19183: LD_EXP 71
19187: PPUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_EXP 71
19197: PUSH
19198: LD_VAR 0 1
19202: ARRAY
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL_OW 3
19213: PPUSH
19214: CALL_OW 1
19218: ST_TO_ADDR
// end ; end ;
19219: GO 18970
19221: POP
19222: POP
// end ;
19223: GO 18888
19225: POP
19226: POP
// end ;
19227: PPOPN 4
19229: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// result := false ;
19234: LD_ADDR_VAR 0 4
19238: PUSH
19239: LD_INT 0
19241: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 264
19251: PUSH
19252: LD_INT 81
19254: EQUAL
19255: NOT
19256: IFFALSE 19260
// exit ;
19258: GO 19500
// index := GetElementIndex ( minersList , unit ) ;
19260: LD_ADDR_VAR 0 5
19264: PUSH
19265: LD_EXP 70
19269: PPUSH
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL 25621 0 2
19279: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19280: LD_EXP 71
19284: PUSH
19285: LD_VAR 0 5
19289: ARRAY
19290: PUSH
19291: LD_EXP 72
19295: GREATEREQUAL
19296: IFFALSE 19300
// exit ;
19298: GO 19500
// ComMoveXY ( unit , x , y ) ;
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_VAR 0 2
19309: PPUSH
19310: LD_VAR 0 3
19314: PPUSH
19315: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19319: LD_INT 35
19321: PPUSH
19322: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_VAR 0 3
19340: PPUSH
19341: CALL 57373 0 3
19345: NOT
19346: PUSH
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 314
19356: AND
19357: IFFALSE 19361
// exit ;
19359: GO 19500
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19361: LD_VAR 0 2
19365: PPUSH
19366: LD_VAR 0 3
19370: PPUSH
19371: CALL_OW 428
19375: PUSH
19376: LD_VAR 0 1
19380: EQUAL
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 314
19391: NOT
19392: AND
19393: IFFALSE 19319
// PlaySoundXY ( x , y , PlantMine ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_STRING PlantMine
19407: PPUSH
19408: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 255
19431: PPUSH
19432: LD_INT 0
19434: PPUSH
19435: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19439: LD_ADDR_EXP 71
19443: PUSH
19444: LD_EXP 71
19448: PPUSH
19449: LD_VAR 0 5
19453: PUSH
19454: LD_EXP 71
19458: PUSH
19459: LD_VAR 0 5
19463: ARRAY
19464: PUSH
19465: LD_INT 1
19467: PLUS
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: LD_VAR 0 2
19477: PUSH
19478: LD_VAR 0 3
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PPUSH
19487: CALL 25836 0 3
19491: ST_TO_ADDR
// result := true ;
19492: LD_ADDR_VAR 0 4
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// end ;
19500: LD_VAR 0 4
19504: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
// if not unit in minersList then
19510: LD_VAR 0 1
19514: PUSH
19515: LD_EXP 70
19519: IN
19520: NOT
19521: IFFALSE 19525
// exit ;
19523: GO 19917
// index := GetElementIndex ( minersList , unit ) ;
19525: LD_ADDR_VAR 0 6
19529: PUSH
19530: LD_EXP 70
19534: PPUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL 25621 0 2
19544: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19545: LD_ADDR_VAR 0 5
19549: PUSH
19550: DOUBLE
19551: LD_EXP 71
19555: PUSH
19556: LD_VAR 0 6
19560: ARRAY
19561: INC
19562: ST_TO_ADDR
19563: LD_INT 1
19565: PUSH
19566: FOR_DOWNTO
19567: IFFALSE 19728
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19569: LD_EXP 71
19573: PUSH
19574: LD_VAR 0 6
19578: ARRAY
19579: PUSH
19580: LD_VAR 0 5
19584: ARRAY
19585: PUSH
19586: LD_INT 1
19588: ARRAY
19589: PUSH
19590: LD_VAR 0 2
19594: EQUAL
19595: PUSH
19596: LD_EXP 71
19600: PUSH
19601: LD_VAR 0 6
19605: ARRAY
19606: PUSH
19607: LD_VAR 0 5
19611: ARRAY
19612: PUSH
19613: LD_INT 2
19615: ARRAY
19616: PUSH
19617: LD_VAR 0 3
19621: EQUAL
19622: AND
19623: IFFALSE 19726
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19625: LD_EXP 71
19629: PUSH
19630: LD_VAR 0 6
19634: ARRAY
19635: PUSH
19636: LD_VAR 0 5
19640: ARRAY
19641: PUSH
19642: LD_INT 1
19644: ARRAY
19645: PPUSH
19646: LD_EXP 71
19650: PUSH
19651: LD_VAR 0 6
19655: ARRAY
19656: PUSH
19657: LD_VAR 0 5
19661: ARRAY
19662: PUSH
19663: LD_INT 2
19665: ARRAY
19666: PPUSH
19667: LD_VAR 0 1
19671: PPUSH
19672: CALL_OW 255
19676: PPUSH
19677: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19681: LD_ADDR_EXP 71
19685: PUSH
19686: LD_EXP 71
19690: PPUSH
19691: LD_VAR 0 6
19695: PPUSH
19696: LD_EXP 71
19700: PUSH
19701: LD_VAR 0 6
19705: ARRAY
19706: PPUSH
19707: LD_VAR 0 5
19711: PPUSH
19712: CALL_OW 3
19716: PPUSH
19717: CALL_OW 1
19721: ST_TO_ADDR
// exit ;
19722: POP
19723: POP
19724: GO 19917
// end ; end ;
19726: GO 19566
19728: POP
19729: POP
// for i := minerMinesList [ index ] downto 1 do
19730: LD_ADDR_VAR 0 5
19734: PUSH
19735: DOUBLE
19736: LD_EXP 71
19740: PUSH
19741: LD_VAR 0 6
19745: ARRAY
19746: INC
19747: ST_TO_ADDR
19748: LD_INT 1
19750: PUSH
19751: FOR_DOWNTO
19752: IFFALSE 19915
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19754: LD_EXP 71
19758: PUSH
19759: LD_VAR 0 6
19763: ARRAY
19764: PUSH
19765: LD_VAR 0 5
19769: ARRAY
19770: PUSH
19771: LD_INT 1
19773: ARRAY
19774: PPUSH
19775: LD_EXP 71
19779: PUSH
19780: LD_VAR 0 6
19784: ARRAY
19785: PUSH
19786: LD_VAR 0 5
19790: ARRAY
19791: PUSH
19792: LD_INT 2
19794: ARRAY
19795: PPUSH
19796: LD_VAR 0 2
19800: PPUSH
19801: LD_VAR 0 3
19805: PPUSH
19806: CALL_OW 298
19810: PUSH
19811: LD_INT 6
19813: LESS
19814: IFFALSE 19913
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19816: LD_EXP 71
19820: PUSH
19821: LD_VAR 0 6
19825: ARRAY
19826: PUSH
19827: LD_VAR 0 5
19831: ARRAY
19832: PUSH
19833: LD_INT 1
19835: ARRAY
19836: PPUSH
19837: LD_EXP 71
19841: PUSH
19842: LD_VAR 0 6
19846: ARRAY
19847: PUSH
19848: LD_VAR 0 5
19852: ARRAY
19853: PUSH
19854: LD_INT 2
19856: ARRAY
19857: PPUSH
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 255
19867: PPUSH
19868: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19872: LD_ADDR_EXP 71
19876: PUSH
19877: LD_EXP 71
19881: PPUSH
19882: LD_VAR 0 6
19886: PPUSH
19887: LD_EXP 71
19891: PUSH
19892: LD_VAR 0 6
19896: ARRAY
19897: PPUSH
19898: LD_VAR 0 5
19902: PPUSH
19903: CALL_OW 3
19907: PPUSH
19908: CALL_OW 1
19912: ST_TO_ADDR
// end ; end ;
19913: GO 19751
19915: POP
19916: POP
// end ;
19917: LD_VAR 0 4
19921: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19922: LD_INT 0
19924: PPUSH
19925: PPUSH
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
19931: PPUSH
19932: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 264
19942: PUSH
19943: LD_INT 81
19945: EQUAL
19946: NOT
19947: PUSH
19948: LD_VAR 0 1
19952: PUSH
19953: LD_EXP 70
19957: IN
19958: NOT
19959: OR
19960: IFFALSE 19964
// exit ;
19962: GO 20286
// index := GetElementIndex ( minersList , unit ) ;
19964: LD_ADDR_VAR 0 6
19968: PUSH
19969: LD_EXP 70
19973: PPUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL 25621 0 2
19983: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19984: LD_ADDR_VAR 0 8
19988: PUSH
19989: LD_EXP 72
19993: PUSH
19994: LD_EXP 71
19998: PUSH
19999: LD_VAR 0 6
20003: ARRAY
20004: MINUS
20005: ST_TO_ADDR
// if not minesFreeAmount then
20006: LD_VAR 0 8
20010: NOT
20011: IFFALSE 20015
// exit ;
20013: GO 20286
// tmp := [ ] ;
20015: LD_ADDR_VAR 0 7
20019: PUSH
20020: EMPTY
20021: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20022: LD_ADDR_VAR 0 5
20026: PUSH
20027: DOUBLE
20028: LD_INT 1
20030: DEC
20031: ST_TO_ADDR
20032: LD_VAR 0 8
20036: PUSH
20037: FOR_TO
20038: IFFALSE 20233
// begin _d := rand ( 0 , 5 ) ;
20040: LD_ADDR_VAR 0 11
20044: PUSH
20045: LD_INT 0
20047: PPUSH
20048: LD_INT 5
20050: PPUSH
20051: CALL_OW 12
20055: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20056: LD_ADDR_VAR 0 12
20060: PUSH
20061: LD_INT 2
20063: PPUSH
20064: LD_INT 6
20066: PPUSH
20067: CALL_OW 12
20071: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20072: LD_ADDR_VAR 0 9
20076: PUSH
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_VAR 0 11
20086: PPUSH
20087: LD_VAR 0 12
20091: PPUSH
20092: CALL_OW 272
20096: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20097: LD_ADDR_VAR 0 10
20101: PUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: LD_VAR 0 11
20111: PPUSH
20112: LD_VAR 0 12
20116: PPUSH
20117: CALL_OW 273
20121: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20122: LD_VAR 0 9
20126: PPUSH
20127: LD_VAR 0 10
20131: PPUSH
20132: CALL_OW 488
20136: PUSH
20137: LD_VAR 0 9
20141: PUSH
20142: LD_VAR 0 10
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_VAR 0 7
20155: IN
20156: NOT
20157: AND
20158: PUSH
20159: LD_VAR 0 9
20163: PPUSH
20164: LD_VAR 0 10
20168: PPUSH
20169: CALL_OW 458
20173: NOT
20174: AND
20175: IFFALSE 20217
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20177: LD_ADDR_VAR 0 7
20181: PUSH
20182: LD_VAR 0 7
20186: PPUSH
20187: LD_VAR 0 7
20191: PUSH
20192: LD_INT 1
20194: PLUS
20195: PPUSH
20196: LD_VAR 0 9
20200: PUSH
20201: LD_VAR 0 10
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PPUSH
20210: CALL_OW 1
20214: ST_TO_ADDR
20215: GO 20231
// i := i - 1 ;
20217: LD_ADDR_VAR 0 5
20221: PUSH
20222: LD_VAR 0 5
20226: PUSH
20227: LD_INT 1
20229: MINUS
20230: ST_TO_ADDR
// end ;
20231: GO 20037
20233: POP
20234: POP
// for i in tmp do
20235: LD_ADDR_VAR 0 5
20239: PUSH
20240: LD_VAR 0 7
20244: PUSH
20245: FOR_IN
20246: IFFALSE 20284
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20248: LD_VAR 0 1
20252: PPUSH
20253: LD_VAR 0 5
20257: PUSH
20258: LD_INT 1
20260: ARRAY
20261: PPUSH
20262: LD_VAR 0 5
20266: PUSH
20267: LD_INT 2
20269: ARRAY
20270: PPUSH
20271: CALL 19230 0 3
20275: NOT
20276: IFFALSE 20282
// exit ;
20278: POP
20279: POP
20280: GO 20286
20282: GO 20245
20284: POP
20285: POP
// end ;
20286: LD_VAR 0 4
20290: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
// if not GetClass ( unit ) = class_sniper then
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 257
20309: PUSH
20310: LD_INT 5
20312: EQUAL
20313: NOT
20314: IFFALSE 20318
// exit ;
20316: GO 20706
// dist := 8 ;
20318: LD_ADDR_VAR 0 5
20322: PUSH
20323: LD_INT 8
20325: ST_TO_ADDR
// viewRange := 12 ;
20326: LD_ADDR_VAR 0 7
20330: PUSH
20331: LD_INT 12
20333: ST_TO_ADDR
// side := GetSide ( unit ) ;
20334: LD_ADDR_VAR 0 6
20338: PUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 255
20348: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20349: LD_INT 61
20351: PPUSH
20352: LD_VAR 0 6
20356: PPUSH
20357: CALL_OW 321
20361: PUSH
20362: LD_INT 2
20364: EQUAL
20365: IFFALSE 20375
// viewRange := 16 ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 16
20374: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20375: LD_VAR 0 1
20379: PPUSH
20380: LD_VAR 0 2
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: CALL_OW 297
20394: PUSH
20395: LD_VAR 0 5
20399: GREATER
20400: IFFALSE 20479
// begin ComMoveXY ( unit , x , y ) ;
20402: LD_VAR 0 1
20406: PPUSH
20407: LD_VAR 0 2
20411: PPUSH
20412: LD_VAR 0 3
20416: PPUSH
20417: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20421: LD_INT 35
20423: PPUSH
20424: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20428: LD_VAR 0 1
20432: PPUSH
20433: LD_VAR 0 2
20437: PPUSH
20438: LD_VAR 0 3
20442: PPUSH
20443: CALL 57373 0 3
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20706
// until GetDistUnitXY ( unit , x , y ) < dist ;
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_VAR 0 2
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL_OW 297
20471: PUSH
20472: LD_VAR 0 5
20476: LESS
20477: IFFALSE 20421
// end ; ComTurnXY ( unit , x , y ) ;
20479: LD_VAR 0 1
20483: PPUSH
20484: LD_VAR 0 2
20488: PPUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: CALL_OW 118
// wait ( 5 ) ;
20498: LD_INT 5
20500: PPUSH
20501: CALL_OW 67
// _d := GetDir ( unit ) ;
20505: LD_ADDR_VAR 0 10
20509: PUSH
20510: LD_VAR 0 1
20514: PPUSH
20515: CALL_OW 254
20519: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20520: LD_ADDR_VAR 0 8
20524: PUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 250
20534: PPUSH
20535: LD_VAR 0 10
20539: PPUSH
20540: LD_VAR 0 5
20544: PPUSH
20545: CALL_OW 272
20549: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20550: LD_ADDR_VAR 0 9
20554: PUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL_OW 251
20564: PPUSH
20565: LD_VAR 0 10
20569: PPUSH
20570: LD_VAR 0 5
20574: PPUSH
20575: CALL_OW 273
20579: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20580: LD_VAR 0 8
20584: PPUSH
20585: LD_VAR 0 9
20589: PPUSH
20590: CALL_OW 488
20594: NOT
20595: IFFALSE 20599
// exit ;
20597: GO 20706
// ComAnimCustom ( unit , 1 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20611: LD_VAR 0 8
20615: PPUSH
20616: LD_VAR 0 9
20620: PPUSH
20621: LD_VAR 0 6
20625: PPUSH
20626: LD_VAR 0 7
20630: PPUSH
20631: CALL_OW 330
// repeat wait ( 1 ) ;
20635: LD_INT 1
20637: PPUSH
20638: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20642: LD_VAR 0 1
20646: PPUSH
20647: CALL_OW 316
20651: PUSH
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL_OW 314
20661: OR
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 302
20672: NOT
20673: OR
20674: PUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 301
20684: OR
20685: IFFALSE 20635
// RemoveSeeing ( _x , _y , side ) ;
20687: LD_VAR 0 8
20691: PPUSH
20692: LD_VAR 0 9
20696: PPUSH
20697: LD_VAR 0 6
20701: PPUSH
20702: CALL_OW 331
// end ; end_of_file
20706: LD_VAR 0 4
20710: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20711: LD_VAR 0 1
20715: PUSH
20716: LD_INT 200
20718: DOUBLE
20719: GREATEREQUAL
20720: IFFALSE 20728
20722: LD_INT 299
20724: DOUBLE
20725: LESSEQUAL
20726: IFTRUE 20730
20728: GO 20762
20730: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20731: LD_VAR 0 1
20735: PPUSH
20736: LD_VAR 0 2
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_VAR 0 4
20750: PPUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL 16193 0 5
20760: GO 20839
20762: LD_INT 300
20764: DOUBLE
20765: GREATEREQUAL
20766: IFFALSE 20774
20768: LD_INT 399
20770: DOUBLE
20771: LESSEQUAL
20772: IFTRUE 20776
20774: GO 20838
20776: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20777: LD_VAR 0 1
20781: PPUSH
20782: LD_VAR 0 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: LD_VAR 0 6
20806: PPUSH
20807: LD_VAR 0 7
20811: PPUSH
20812: LD_VAR 0 8
20816: PPUSH
20817: LD_VAR 0 9
20821: PPUSH
20822: LD_VAR 0 10
20826: PPUSH
20827: LD_VAR 0 11
20831: PPUSH
20832: CALL 12518 0 11
20836: GO 20839
20838: POP
// end ;
20839: PPOPN 11
20841: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20842: LD_VAR 0 1
20846: PPUSH
20847: LD_VAR 0 2
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_VAR 0 4
20861: PPUSH
20862: LD_VAR 0 5
20866: PPUSH
20867: CALL 15929 0 5
// end ; end_of_file
20871: PPOPN 5
20873: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
// if exist_mode then
20878: LD_VAR 0 2
20882: IFFALSE 20907
// unit := CreateCharacter ( prefix & ident ) else
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_VAR 0 3
20893: PUSH
20894: LD_VAR 0 1
20898: STR
20899: PPUSH
20900: CALL_OW 34
20904: ST_TO_ADDR
20905: GO 20922
// unit := NewCharacter ( ident ) ;
20907: LD_ADDR_VAR 0 5
20911: PUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 25
20921: ST_TO_ADDR
// result := unit ;
20922: LD_ADDR_VAR 0 4
20926: PUSH
20927: LD_VAR 0 5
20931: ST_TO_ADDR
// end ;
20932: LD_VAR 0 4
20936: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20937: LD_INT 0
20939: PPUSH
20940: PPUSH
// if not side or not nation then
20941: LD_VAR 0 1
20945: NOT
20946: PUSH
20947: LD_VAR 0 2
20951: NOT
20952: OR
20953: IFFALSE 20957
// exit ;
20955: GO 21725
// case nation of nation_american :
20957: LD_VAR 0 2
20961: PUSH
20962: LD_INT 1
20964: DOUBLE
20965: EQUAL
20966: IFTRUE 20970
20968: GO 21184
20970: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20971: LD_ADDR_VAR 0 4
20975: PUSH
20976: LD_INT 35
20978: PUSH
20979: LD_INT 45
20981: PUSH
20982: LD_INT 46
20984: PUSH
20985: LD_INT 47
20987: PUSH
20988: LD_INT 82
20990: PUSH
20991: LD_INT 83
20993: PUSH
20994: LD_INT 84
20996: PUSH
20997: LD_INT 85
20999: PUSH
21000: LD_INT 86
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 6
21011: PUSH
21012: LD_INT 15
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: LD_INT 7
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 13
21026: PUSH
21027: LD_INT 10
21029: PUSH
21030: LD_INT 14
21032: PUSH
21033: LD_INT 20
21035: PUSH
21036: LD_INT 21
21038: PUSH
21039: LD_INT 22
21041: PUSH
21042: LD_INT 25
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 27
21050: PUSH
21051: LD_INT 36
21053: PUSH
21054: LD_INT 69
21056: PUSH
21057: LD_INT 39
21059: PUSH
21060: LD_INT 34
21062: PUSH
21063: LD_INT 40
21065: PUSH
21066: LD_INT 48
21068: PUSH
21069: LD_INT 49
21071: PUSH
21072: LD_INT 50
21074: PUSH
21075: LD_INT 51
21077: PUSH
21078: LD_INT 52
21080: PUSH
21081: LD_INT 53
21083: PUSH
21084: LD_INT 54
21086: PUSH
21087: LD_INT 55
21089: PUSH
21090: LD_INT 56
21092: PUSH
21093: LD_INT 57
21095: PUSH
21096: LD_INT 58
21098: PUSH
21099: LD_INT 59
21101: PUSH
21102: LD_INT 60
21104: PUSH
21105: LD_INT 61
21107: PUSH
21108: LD_INT 62
21110: PUSH
21111: LD_INT 80
21113: PUSH
21114: LD_INT 82
21116: PUSH
21117: LD_INT 83
21119: PUSH
21120: LD_INT 84
21122: PUSH
21123: LD_INT 85
21125: PUSH
21126: LD_INT 86
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: ST_TO_ADDR
21182: GO 21649
21184: LD_INT 2
21186: DOUBLE
21187: EQUAL
21188: IFTRUE 21192
21190: GO 21418
21192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21193: LD_ADDR_VAR 0 4
21197: PUSH
21198: LD_INT 35
21200: PUSH
21201: LD_INT 45
21203: PUSH
21204: LD_INT 46
21206: PUSH
21207: LD_INT 47
21209: PUSH
21210: LD_INT 82
21212: PUSH
21213: LD_INT 83
21215: PUSH
21216: LD_INT 84
21218: PUSH
21219: LD_INT 85
21221: PUSH
21222: LD_INT 87
21224: PUSH
21225: LD_INT 70
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 3
21236: PUSH
21237: LD_INT 4
21239: PUSH
21240: LD_INT 5
21242: PUSH
21243: LD_INT 6
21245: PUSH
21246: LD_INT 15
21248: PUSH
21249: LD_INT 18
21251: PUSH
21252: LD_INT 7
21254: PUSH
21255: LD_INT 17
21257: PUSH
21258: LD_INT 8
21260: PUSH
21261: LD_INT 20
21263: PUSH
21264: LD_INT 21
21266: PUSH
21267: LD_INT 22
21269: PUSH
21270: LD_INT 72
21272: PUSH
21273: LD_INT 26
21275: PUSH
21276: LD_INT 69
21278: PUSH
21279: LD_INT 39
21281: PUSH
21282: LD_INT 40
21284: PUSH
21285: LD_INT 41
21287: PUSH
21288: LD_INT 42
21290: PUSH
21291: LD_INT 43
21293: PUSH
21294: LD_INT 48
21296: PUSH
21297: LD_INT 49
21299: PUSH
21300: LD_INT 50
21302: PUSH
21303: LD_INT 51
21305: PUSH
21306: LD_INT 52
21308: PUSH
21309: LD_INT 53
21311: PUSH
21312: LD_INT 54
21314: PUSH
21315: LD_INT 55
21317: PUSH
21318: LD_INT 56
21320: PUSH
21321: LD_INT 60
21323: PUSH
21324: LD_INT 61
21326: PUSH
21327: LD_INT 62
21329: PUSH
21330: LD_INT 66
21332: PUSH
21333: LD_INT 67
21335: PUSH
21336: LD_INT 68
21338: PUSH
21339: LD_INT 81
21341: PUSH
21342: LD_INT 82
21344: PUSH
21345: LD_INT 83
21347: PUSH
21348: LD_INT 84
21350: PUSH
21351: LD_INT 85
21353: PUSH
21354: LD_INT 87
21356: PUSH
21357: LD_INT 88
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: ST_TO_ADDR
21416: GO 21649
21418: LD_INT 3
21420: DOUBLE
21421: EQUAL
21422: IFTRUE 21426
21424: GO 21648
21426: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21427: LD_ADDR_VAR 0 4
21431: PUSH
21432: LD_INT 46
21434: PUSH
21435: LD_INT 47
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 82
21446: PUSH
21447: LD_INT 83
21449: PUSH
21450: LD_INT 84
21452: PUSH
21453: LD_INT 85
21455: PUSH
21456: LD_INT 86
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: LD_INT 9
21464: PUSH
21465: LD_INT 20
21467: PUSH
21468: LD_INT 19
21470: PUSH
21471: LD_INT 21
21473: PUSH
21474: LD_INT 24
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 25
21482: PUSH
21483: LD_INT 28
21485: PUSH
21486: LD_INT 29
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 31
21494: PUSH
21495: LD_INT 37
21497: PUSH
21498: LD_INT 38
21500: PUSH
21501: LD_INT 32
21503: PUSH
21504: LD_INT 27
21506: PUSH
21507: LD_INT 33
21509: PUSH
21510: LD_INT 69
21512: PUSH
21513: LD_INT 39
21515: PUSH
21516: LD_INT 34
21518: PUSH
21519: LD_INT 40
21521: PUSH
21522: LD_INT 71
21524: PUSH
21525: LD_INT 23
21527: PUSH
21528: LD_INT 44
21530: PUSH
21531: LD_INT 48
21533: PUSH
21534: LD_INT 49
21536: PUSH
21537: LD_INT 50
21539: PUSH
21540: LD_INT 51
21542: PUSH
21543: LD_INT 52
21545: PUSH
21546: LD_INT 53
21548: PUSH
21549: LD_INT 54
21551: PUSH
21552: LD_INT 55
21554: PUSH
21555: LD_INT 56
21557: PUSH
21558: LD_INT 57
21560: PUSH
21561: LD_INT 58
21563: PUSH
21564: LD_INT 59
21566: PUSH
21567: LD_INT 63
21569: PUSH
21570: LD_INT 64
21572: PUSH
21573: LD_INT 65
21575: PUSH
21576: LD_INT 82
21578: PUSH
21579: LD_INT 83
21581: PUSH
21582: LD_INT 84
21584: PUSH
21585: LD_INT 85
21587: PUSH
21588: LD_INT 86
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 21649
21648: POP
// if state > - 1 and state < 3 then
21649: LD_VAR 0 3
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: GREATER
21658: PUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 3
21666: LESS
21667: AND
21668: IFFALSE 21725
// for i in result do
21670: LD_ADDR_VAR 0 5
21674: PUSH
21675: LD_VAR 0 4
21679: PUSH
21680: FOR_IN
21681: IFFALSE 21723
// if GetTech ( i , side ) <> state then
21683: LD_VAR 0 5
21687: PPUSH
21688: LD_VAR 0 1
21692: PPUSH
21693: CALL_OW 321
21697: PUSH
21698: LD_VAR 0 3
21702: NONEQUAL
21703: IFFALSE 21721
// result := result diff i ;
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 4
21714: PUSH
21715: LD_VAR 0 5
21719: DIFF
21720: ST_TO_ADDR
21721: GO 21680
21723: POP
21724: POP
// end ;
21725: LD_VAR 0 4
21729: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
// result := true ;
21735: LD_ADDR_VAR 0 3
21739: PUSH
21740: LD_INT 1
21742: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21743: LD_ADDR_VAR 0 5
21747: PUSH
21748: LD_VAR 0 2
21752: PPUSH
21753: CALL_OW 480
21757: ST_TO_ADDR
// if not tmp then
21758: LD_VAR 0 5
21762: NOT
21763: IFFALSE 21767
// exit ;
21765: GO 21816
// for i in tmp do
21767: LD_ADDR_VAR 0 4
21771: PUSH
21772: LD_VAR 0 5
21776: PUSH
21777: FOR_IN
21778: IFFALSE 21814
// if GetTech ( i , side ) <> state_researched then
21780: LD_VAR 0 4
21784: PPUSH
21785: LD_VAR 0 1
21789: PPUSH
21790: CALL_OW 321
21794: PUSH
21795: LD_INT 2
21797: NONEQUAL
21798: IFFALSE 21812
// begin result := false ;
21800: LD_ADDR_VAR 0 3
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// exit ;
21808: POP
21809: POP
21810: GO 21816
// end ;
21812: GO 21777
21814: POP
21815: POP
// end ;
21816: LD_VAR 0 3
21820: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21821: LD_INT 0
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21836: LD_VAR 0 1
21840: NOT
21841: PUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: CALL_OW 257
21851: PUSH
21852: LD_INT 9
21854: NONEQUAL
21855: OR
21856: IFFALSE 21860
// exit ;
21858: GO 22433
// side := GetSide ( unit ) ;
21860: LD_ADDR_VAR 0 9
21864: PUSH
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 255
21874: ST_TO_ADDR
// tech_space := tech_spacanom ;
21875: LD_ADDR_VAR 0 12
21879: PUSH
21880: LD_INT 29
21882: ST_TO_ADDR
// tech_time := tech_taurad ;
21883: LD_ADDR_VAR 0 13
21887: PUSH
21888: LD_INT 28
21890: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21891: LD_ADDR_VAR 0 11
21895: PUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 310
21905: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21906: LD_VAR 0 11
21910: PPUSH
21911: CALL_OW 247
21915: PUSH
21916: LD_INT 2
21918: EQUAL
21919: IFFALSE 21923
// exit ;
21921: GO 22433
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21923: LD_ADDR_VAR 0 8
21927: PUSH
21928: LD_INT 81
21930: PUSH
21931: LD_VAR 0 9
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 21
21945: PUSH
21946: LD_INT 3
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PPUSH
21961: CALL_OW 69
21965: ST_TO_ADDR
// if not tmp then
21966: LD_VAR 0 8
21970: NOT
21971: IFFALSE 21975
// exit ;
21973: GO 22433
// if in_unit then
21975: LD_VAR 0 11
21979: IFFALSE 22003
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21981: LD_ADDR_VAR 0 10
21985: PUSH
21986: LD_VAR 0 8
21990: PPUSH
21991: LD_VAR 0 11
21995: PPUSH
21996: CALL_OW 74
22000: ST_TO_ADDR
22001: GO 22023
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22003: LD_ADDR_VAR 0 10
22007: PUSH
22008: LD_VAR 0 8
22012: PPUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 74
22022: ST_TO_ADDR
// if not enemy then
22023: LD_VAR 0 10
22027: NOT
22028: IFFALSE 22032
// exit ;
22030: GO 22433
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22032: LD_VAR 0 11
22036: PUSH
22037: LD_VAR 0 11
22041: PPUSH
22042: LD_VAR 0 10
22046: PPUSH
22047: CALL_OW 296
22051: PUSH
22052: LD_INT 13
22054: GREATER
22055: AND
22056: PUSH
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_VAR 0 10
22066: PPUSH
22067: CALL_OW 296
22071: PUSH
22072: LD_INT 12
22074: GREATER
22075: OR
22076: IFFALSE 22080
// exit ;
22078: GO 22433
// missile := [ 1 ] ;
22080: LD_ADDR_VAR 0 14
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22091: LD_VAR 0 9
22095: PPUSH
22096: LD_VAR 0 12
22100: PPUSH
22101: CALL_OW 325
22105: IFFALSE 22134
// missile := Replace ( missile , missile + 1 , 2 ) ;
22107: LD_ADDR_VAR 0 14
22111: PUSH
22112: LD_VAR 0 14
22116: PPUSH
22117: LD_VAR 0 14
22121: PUSH
22122: LD_INT 1
22124: PLUS
22125: PPUSH
22126: LD_INT 2
22128: PPUSH
22129: CALL_OW 1
22133: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22134: LD_VAR 0 9
22138: PPUSH
22139: LD_VAR 0 13
22143: PPUSH
22144: CALL_OW 325
22148: PUSH
22149: LD_VAR 0 10
22153: PPUSH
22154: CALL_OW 255
22158: PPUSH
22159: LD_VAR 0 13
22163: PPUSH
22164: CALL_OW 325
22168: NOT
22169: AND
22170: IFFALSE 22199
// missile := Replace ( missile , missile + 1 , 3 ) ;
22172: LD_ADDR_VAR 0 14
22176: PUSH
22177: LD_VAR 0 14
22181: PPUSH
22182: LD_VAR 0 14
22186: PUSH
22187: LD_INT 1
22189: PLUS
22190: PPUSH
22191: LD_INT 3
22193: PPUSH
22194: CALL_OW 1
22198: ST_TO_ADDR
// if missile < 2 then
22199: LD_VAR 0 14
22203: PUSH
22204: LD_INT 2
22206: LESS
22207: IFFALSE 22211
// exit ;
22209: GO 22433
// x := GetX ( enemy ) ;
22211: LD_ADDR_VAR 0 4
22215: PUSH
22216: LD_VAR 0 10
22220: PPUSH
22221: CALL_OW 250
22225: ST_TO_ADDR
// y := GetY ( enemy ) ;
22226: LD_ADDR_VAR 0 5
22230: PUSH
22231: LD_VAR 0 10
22235: PPUSH
22236: CALL_OW 251
22240: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22241: LD_ADDR_VAR 0 6
22245: PUSH
22246: LD_VAR 0 4
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PPUSH
22255: LD_INT 1
22257: PPUSH
22258: CALL_OW 12
22262: PLUS
22263: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22264: LD_ADDR_VAR 0 7
22268: PUSH
22269: LD_VAR 0 5
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PPUSH
22278: LD_INT 1
22280: PPUSH
22281: CALL_OW 12
22285: PLUS
22286: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22287: LD_VAR 0 6
22291: PPUSH
22292: LD_VAR 0 7
22296: PPUSH
22297: CALL_OW 488
22301: NOT
22302: IFFALSE 22324
// begin _x := x ;
22304: LD_ADDR_VAR 0 6
22308: PUSH
22309: LD_VAR 0 4
22313: ST_TO_ADDR
// _y := y ;
22314: LD_ADDR_VAR 0 7
22318: PUSH
22319: LD_VAR 0 5
22323: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22324: LD_ADDR_VAR 0 3
22328: PUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 14
22336: PPUSH
22337: CALL_OW 12
22341: ST_TO_ADDR
// case i of 1 :
22342: LD_VAR 0 3
22346: PUSH
22347: LD_INT 1
22349: DOUBLE
22350: EQUAL
22351: IFTRUE 22355
22353: GO 22372
22355: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22356: LD_VAR 0 1
22360: PPUSH
22361: LD_VAR 0 10
22365: PPUSH
22366: CALL_OW 115
22370: GO 22433
22372: LD_INT 2
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22402
22380: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22381: LD_VAR 0 1
22385: PPUSH
22386: LD_VAR 0 6
22390: PPUSH
22391: LD_VAR 0 7
22395: PPUSH
22396: CALL_OW 153
22400: GO 22433
22402: LD_INT 3
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22432
22410: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22411: LD_VAR 0 1
22415: PPUSH
22416: LD_VAR 0 6
22420: PPUSH
22421: LD_VAR 0 7
22425: PPUSH
22426: CALL_OW 154
22430: GO 22433
22432: POP
// end ;
22433: LD_VAR 0 2
22437: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
22445: PPUSH
// if not unit or not building then
22446: LD_VAR 0 1
22450: NOT
22451: PUSH
22452: LD_VAR 0 2
22456: NOT
22457: OR
22458: IFFALSE 22462
// exit ;
22460: GO 22620
// x := GetX ( building ) ;
22462: LD_ADDR_VAR 0 5
22466: PUSH
22467: LD_VAR 0 2
22471: PPUSH
22472: CALL_OW 250
22476: ST_TO_ADDR
// y := GetY ( building ) ;
22477: LD_ADDR_VAR 0 6
22481: PUSH
22482: LD_VAR 0 2
22486: PPUSH
22487: CALL_OW 251
22491: ST_TO_ADDR
// for i = 0 to 5 do
22492: LD_ADDR_VAR 0 4
22496: PUSH
22497: DOUBLE
22498: LD_INT 0
22500: DEC
22501: ST_TO_ADDR
22502: LD_INT 5
22504: PUSH
22505: FOR_TO
22506: IFFALSE 22618
// begin _x := ShiftX ( x , i , 3 ) ;
22508: LD_ADDR_VAR 0 7
22512: PUSH
22513: LD_VAR 0 5
22517: PPUSH
22518: LD_VAR 0 4
22522: PPUSH
22523: LD_INT 3
22525: PPUSH
22526: CALL_OW 272
22530: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22531: LD_ADDR_VAR 0 8
22535: PUSH
22536: LD_VAR 0 6
22540: PPUSH
22541: LD_VAR 0 4
22545: PPUSH
22546: LD_INT 3
22548: PPUSH
22549: CALL_OW 273
22553: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22554: LD_VAR 0 7
22558: PPUSH
22559: LD_VAR 0 8
22563: PPUSH
22564: CALL_OW 488
22568: NOT
22569: IFFALSE 22573
// continue ;
22571: GO 22505
// if HexInfo ( _x , _y ) = 0 then
22573: LD_VAR 0 7
22577: PPUSH
22578: LD_VAR 0 8
22582: PPUSH
22583: CALL_OW 428
22587: PUSH
22588: LD_INT 0
22590: EQUAL
22591: IFFALSE 22616
// begin ComMoveXY ( unit , _x , _y ) ;
22593: LD_VAR 0 1
22597: PPUSH
22598: LD_VAR 0 7
22602: PPUSH
22603: LD_VAR 0 8
22607: PPUSH
22608: CALL_OW 111
// exit ;
22612: POP
22613: POP
22614: GO 22620
// end ; end ;
22616: GO 22505
22618: POP
22619: POP
// end ;
22620: LD_VAR 0 3
22624: RET
// export function ScanBase ( side , base_area ) ; begin
22625: LD_INT 0
22627: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_INT 81
22640: PUSH
22641: LD_VAR 0 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 70
22654: ST_TO_ADDR
// end ;
22655: LD_VAR 0 3
22659: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22660: LD_INT 0
22662: PPUSH
22663: PPUSH
22664: PPUSH
22665: PPUSH
// result := false ;
22666: LD_ADDR_VAR 0 2
22670: PUSH
22671: LD_INT 0
22673: ST_TO_ADDR
// side := GetSide ( unit ) ;
22674: LD_ADDR_VAR 0 3
22678: PUSH
22679: LD_VAR 0 1
22683: PPUSH
22684: CALL_OW 255
22688: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22689: LD_ADDR_VAR 0 4
22693: PUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 248
22703: ST_TO_ADDR
// case nat of 1 :
22704: LD_VAR 0 4
22708: PUSH
22709: LD_INT 1
22711: DOUBLE
22712: EQUAL
22713: IFTRUE 22717
22715: GO 22728
22717: POP
// tech := tech_lassight ; 2 :
22718: LD_ADDR_VAR 0 5
22722: PUSH
22723: LD_INT 12
22725: ST_TO_ADDR
22726: GO 22767
22728: LD_INT 2
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22736
22734: GO 22747
22736: POP
// tech := tech_mortar ; 3 :
22737: LD_ADDR_VAR 0 5
22741: PUSH
22742: LD_INT 41
22744: ST_TO_ADDR
22745: GO 22767
22747: LD_INT 3
22749: DOUBLE
22750: EQUAL
22751: IFTRUE 22755
22753: GO 22766
22755: POP
// tech := tech_bazooka ; end ;
22756: LD_ADDR_VAR 0 5
22760: PUSH
22761: LD_INT 44
22763: ST_TO_ADDR
22764: GO 22767
22766: POP
// if Researched ( side , tech ) then
22767: LD_VAR 0 3
22771: PPUSH
22772: LD_VAR 0 5
22776: PPUSH
22777: CALL_OW 325
22781: IFFALSE 22808
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22783: LD_ADDR_VAR 0 2
22787: PUSH
22788: LD_INT 5
22790: PUSH
22791: LD_INT 8
22793: PUSH
22794: LD_INT 9
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: PUSH
22802: LD_VAR 0 4
22806: ARRAY
22807: ST_TO_ADDR
// end ;
22808: LD_VAR 0 2
22812: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22813: LD_INT 0
22815: PPUSH
22816: PPUSH
22817: PPUSH
// if not mines then
22818: LD_VAR 0 2
22822: NOT
22823: IFFALSE 22827
// exit ;
22825: GO 22971
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22827: LD_ADDR_VAR 0 5
22831: PUSH
22832: LD_INT 81
22834: PUSH
22835: LD_VAR 0 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PPUSH
22865: CALL_OW 69
22869: ST_TO_ADDR
// for i in mines do
22870: LD_ADDR_VAR 0 4
22874: PUSH
22875: LD_VAR 0 2
22879: PUSH
22880: FOR_IN
22881: IFFALSE 22969
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22883: LD_VAR 0 4
22887: PUSH
22888: LD_INT 1
22890: ARRAY
22891: PPUSH
22892: LD_VAR 0 4
22896: PUSH
22897: LD_INT 2
22899: ARRAY
22900: PPUSH
22901: CALL_OW 458
22905: NOT
22906: IFFALSE 22910
// continue ;
22908: GO 22880
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 1
22917: ARRAY
22918: PPUSH
22919: LD_VAR 0 4
22923: PUSH
22924: LD_INT 2
22926: ARRAY
22927: PPUSH
22928: CALL_OW 428
22932: PUSH
22933: LD_VAR 0 5
22937: IN
22938: IFFALSE 22967
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22940: LD_VAR 0 4
22944: PUSH
22945: LD_INT 1
22947: ARRAY
22948: PPUSH
22949: LD_VAR 0 4
22953: PUSH
22954: LD_INT 2
22956: ARRAY
22957: PPUSH
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 456
// end ;
22967: GO 22880
22969: POP
22970: POP
// end ;
22971: LD_VAR 0 3
22975: RET
// export function Count ( array ) ; begin
22976: LD_INT 0
22978: PPUSH
// result := array + 0 ;
22979: LD_ADDR_VAR 0 2
22983: PUSH
22984: LD_VAR 0 1
22988: PUSH
22989: LD_INT 0
22991: PLUS
22992: ST_TO_ADDR
// end ;
22993: LD_VAR 0 2
22997: RET
// export function IsEmpty ( building ) ; begin
22998: LD_INT 0
23000: PPUSH
// if not building then
23001: LD_VAR 0 1
23005: NOT
23006: IFFALSE 23010
// exit ;
23008: GO 23053
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_VAR 0 1
23019: PUSH
23020: LD_INT 22
23022: PUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 255
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 58
23039: PUSH
23040: EMPTY
23041: LIST
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 69
23051: IN
23052: ST_TO_ADDR
// end ;
23053: LD_VAR 0 2
23057: RET
// export function IsNotFull ( building ) ; var places ; begin
23058: LD_INT 0
23060: PPUSH
23061: PPUSH
// if not building then
23062: LD_VAR 0 1
23066: NOT
23067: IFFALSE 23071
// exit ;
23069: GO 23099
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: LD_INT 3
23083: PUSH
23084: LD_INT 62
23086: PUSH
23087: EMPTY
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 72
23098: ST_TO_ADDR
// end ;
23099: LD_VAR 0 2
23103: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23104: LD_INT 0
23106: PPUSH
23107: PPUSH
23108: PPUSH
23109: PPUSH
// tmp := [ ] ;
23110: LD_ADDR_VAR 0 3
23114: PUSH
23115: EMPTY
23116: ST_TO_ADDR
// list := [ ] ;
23117: LD_ADDR_VAR 0 5
23121: PUSH
23122: EMPTY
23123: ST_TO_ADDR
// for i = 16 to 25 do
23124: LD_ADDR_VAR 0 4
23128: PUSH
23129: DOUBLE
23130: LD_INT 16
23132: DEC
23133: ST_TO_ADDR
23134: LD_INT 25
23136: PUSH
23137: FOR_TO
23138: IFFALSE 23211
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23140: LD_ADDR_VAR 0 3
23144: PUSH
23145: LD_VAR 0 3
23149: PUSH
23150: LD_INT 22
23152: PUSH
23153: LD_VAR 0 1
23157: PPUSH
23158: CALL_OW 255
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 91
23169: PUSH
23170: LD_VAR 0 1
23174: PUSH
23175: LD_INT 6
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_VAR 0 4
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: EMPTY
23201: LIST
23202: PPUSH
23203: CALL_OW 69
23207: ADD
23208: ST_TO_ADDR
23209: GO 23137
23211: POP
23212: POP
// for i = 1 to tmp do
23213: LD_ADDR_VAR 0 4
23217: PUSH
23218: DOUBLE
23219: LD_INT 1
23221: DEC
23222: ST_TO_ADDR
23223: LD_VAR 0 3
23227: PUSH
23228: FOR_TO
23229: IFFALSE 23317
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: LD_VAR 0 5
23240: PUSH
23241: LD_VAR 0 3
23245: PUSH
23246: LD_VAR 0 4
23250: ARRAY
23251: PPUSH
23252: CALL_OW 266
23256: PUSH
23257: LD_VAR 0 3
23261: PUSH
23262: LD_VAR 0 4
23266: ARRAY
23267: PPUSH
23268: CALL_OW 250
23272: PUSH
23273: LD_VAR 0 3
23277: PUSH
23278: LD_VAR 0 4
23282: ARRAY
23283: PPUSH
23284: CALL_OW 251
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: LD_VAR 0 4
23298: ARRAY
23299: PPUSH
23300: CALL_OW 254
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: ADD
23314: ST_TO_ADDR
23315: GO 23228
23317: POP
23318: POP
// result := list ;
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_VAR 0 5
23328: ST_TO_ADDR
// end ;
23329: LD_VAR 0 2
23333: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
// if not factory then
23343: LD_VAR 0 1
23347: NOT
23348: IFFALSE 23352
// exit ;
23350: GO 23945
// if control = control_apeman then
23352: LD_VAR 0 4
23356: PUSH
23357: LD_INT 5
23359: EQUAL
23360: IFFALSE 23469
// begin tmp := UnitsInside ( factory ) ;
23362: LD_ADDR_VAR 0 8
23366: PUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 313
23376: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23377: LD_VAR 0 8
23381: PPUSH
23382: LD_INT 25
23384: PUSH
23385: LD_INT 12
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PPUSH
23392: CALL_OW 72
23396: NOT
23397: IFFALSE 23407
// control := control_manual ;
23399: LD_ADDR_VAR 0 4
23403: PUSH
23404: LD_INT 1
23406: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23407: LD_ADDR_VAR 0 8
23411: PUSH
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL 23104 0 1
23421: ST_TO_ADDR
// if tmp then
23422: LD_VAR 0 8
23426: IFFALSE 23469
// begin for i in tmp do
23428: LD_ADDR_VAR 0 7
23432: PUSH
23433: LD_VAR 0 8
23437: PUSH
23438: FOR_IN
23439: IFFALSE 23467
// if i [ 1 ] = b_ext_radio then
23441: LD_VAR 0 7
23445: PUSH
23446: LD_INT 1
23448: ARRAY
23449: PUSH
23450: LD_INT 22
23452: EQUAL
23453: IFFALSE 23465
// begin control := control_remote ;
23455: LD_ADDR_VAR 0 4
23459: PUSH
23460: LD_INT 2
23462: ST_TO_ADDR
// break ;
23463: GO 23467
// end ;
23465: GO 23438
23467: POP
23468: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23469: LD_VAR 0 1
23473: PPUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_VAR 0 4
23488: PPUSH
23489: LD_VAR 0 5
23493: PPUSH
23494: CALL_OW 448
23498: IFFALSE 23533
// begin result := [ chassis , engine , control , weapon ] ;
23500: LD_ADDR_VAR 0 6
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: LD_VAR 0 3
23514: PUSH
23515: LD_VAR 0 4
23519: PUSH
23520: LD_VAR 0 5
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: ST_TO_ADDR
// exit ;
23531: GO 23945
// end ; _chassis := AvailableChassisList ( factory ) ;
23533: LD_ADDR_VAR 0 9
23537: PUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 475
23547: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23548: LD_ADDR_VAR 0 11
23552: PUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 476
23562: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23563: LD_ADDR_VAR 0 12
23567: PUSH
23568: LD_VAR 0 1
23572: PPUSH
23573: CALL_OW 477
23577: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23578: LD_ADDR_VAR 0 10
23582: PUSH
23583: LD_VAR 0 1
23587: PPUSH
23588: CALL_OW 478
23592: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23593: LD_VAR 0 9
23597: NOT
23598: PUSH
23599: LD_VAR 0 11
23603: NOT
23604: OR
23605: PUSH
23606: LD_VAR 0 12
23610: NOT
23611: OR
23612: PUSH
23613: LD_VAR 0 10
23617: NOT
23618: OR
23619: IFFALSE 23654
// begin result := [ chassis , engine , control , weapon ] ;
23621: LD_ADDR_VAR 0 6
23625: PUSH
23626: LD_VAR 0 2
23630: PUSH
23631: LD_VAR 0 3
23635: PUSH
23636: LD_VAR 0 4
23640: PUSH
23641: LD_VAR 0 5
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: ST_TO_ADDR
// exit ;
23652: GO 23945
// end ; if not chassis in _chassis then
23654: LD_VAR 0 2
23658: PUSH
23659: LD_VAR 0 9
23663: IN
23664: NOT
23665: IFFALSE 23691
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_VAR 0 9
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 9
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: CALL 23950 0 2
23705: NOT
23706: IFFALSE 23765
// repeat engine := _engine [ 1 ] ;
23708: LD_ADDR_VAR 0 3
23712: PUSH
23713: LD_VAR 0 11
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23722: LD_ADDR_VAR 0 11
23726: PUSH
23727: LD_VAR 0 11
23731: PPUSH
23732: LD_INT 1
23734: PPUSH
23735: CALL_OW 3
23739: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23740: LD_VAR 0 2
23744: PPUSH
23745: LD_VAR 0 3
23749: PPUSH
23750: CALL 23950 0 2
23754: PUSH
23755: LD_VAR 0 11
23759: PUSH
23760: EMPTY
23761: EQUAL
23762: OR
23763: IFFALSE 23708
// if not control in _control then
23765: LD_VAR 0 4
23769: PUSH
23770: LD_VAR 0 12
23774: IN
23775: NOT
23776: IFFALSE 23802
// control := _control [ rand ( 1 , _control ) ] ;
23778: LD_ADDR_VAR 0 4
23782: PUSH
23783: LD_VAR 0 12
23787: PUSH
23788: LD_INT 1
23790: PPUSH
23791: LD_VAR 0 12
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_VAR 0 5
23811: PPUSH
23812: CALL 24170 0 2
23816: NOT
23817: IFFALSE 23876
// repeat weapon := _weapon [ 1 ] ;
23819: LD_ADDR_VAR 0 5
23823: PUSH
23824: LD_VAR 0 10
23828: PUSH
23829: LD_INT 1
23831: ARRAY
23832: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23833: LD_ADDR_VAR 0 10
23837: PUSH
23838: LD_VAR 0 10
23842: PPUSH
23843: LD_INT 1
23845: PPUSH
23846: CALL_OW 3
23850: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23851: LD_VAR 0 2
23855: PPUSH
23856: LD_VAR 0 5
23860: PPUSH
23861: CALL 24170 0 2
23865: PUSH
23866: LD_VAR 0 10
23870: PUSH
23871: EMPTY
23872: EQUAL
23873: OR
23874: IFFALSE 23819
// result := [ ] ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: EMPTY
23882: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_VAR 0 2
23892: PPUSH
23893: LD_VAR 0 3
23897: PPUSH
23898: LD_VAR 0 4
23902: PPUSH
23903: LD_VAR 0 5
23907: PPUSH
23908: CALL_OW 448
23912: IFFALSE 23945
// result := [ chassis , engine , control , weapon ] ;
23914: LD_ADDR_VAR 0 6
23918: PUSH
23919: LD_VAR 0 2
23923: PUSH
23924: LD_VAR 0 3
23928: PUSH
23929: LD_VAR 0 4
23933: PUSH
23934: LD_VAR 0 5
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: ST_TO_ADDR
// end ;
23945: LD_VAR 0 6
23949: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23950: LD_INT 0
23952: PPUSH
// if not chassis or not engine then
23953: LD_VAR 0 1
23957: NOT
23958: PUSH
23959: LD_VAR 0 2
23963: NOT
23964: OR
23965: IFFALSE 23969
// exit ;
23967: GO 24165
// case engine of engine_solar :
23969: LD_VAR 0 2
23973: PUSH
23974: LD_INT 2
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24020
23982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 11
23990: PUSH
23991: LD_INT 12
23993: PUSH
23994: LD_INT 13
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 3
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 24149
24020: LD_INT 1
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24090
24028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 11
24036: PUSH
24037: LD_INT 12
24039: PUSH
24040: LD_INT 13
24042: PUSH
24043: LD_INT 14
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: LD_INT 3
24054: PUSH
24055: LD_INT 4
24057: PUSH
24058: LD_INT 5
24060: PUSH
24061: LD_INT 21
24063: PUSH
24064: LD_INT 23
24066: PUSH
24067: LD_INT 22
24069: PUSH
24070: LD_INT 24
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: ST_TO_ADDR
24088: GO 24149
24090: LD_INT 3
24092: DOUBLE
24093: EQUAL
24094: IFTRUE 24098
24096: GO 24148
24098: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_INT 13
24106: PUSH
24107: LD_INT 14
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 3
24115: PUSH
24116: LD_INT 4
24118: PUSH
24119: LD_INT 5
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: ST_TO_ADDR
24146: GO 24149
24148: POP
// result := ( chassis in result ) ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_VAR 0 1
24158: PUSH
24159: LD_VAR 0 3
24163: IN
24164: ST_TO_ADDR
// end ;
24165: LD_VAR 0 3
24169: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24170: LD_INT 0
24172: PPUSH
// if not chassis or not weapon then
24173: LD_VAR 0 1
24177: NOT
24178: PUSH
24179: LD_VAR 0 2
24183: NOT
24184: OR
24185: IFFALSE 24189
// exit ;
24187: GO 25249
// case weapon of us_machine_gun :
24189: LD_VAR 0 2
24193: PUSH
24194: LD_INT 2
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24232
24202: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24203: LD_ADDR_VAR 0 3
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 4
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: ST_TO_ADDR
24230: GO 25233
24232: LD_INT 3
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24240
24238: GO 24270
24240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24241: LD_ADDR_VAR 0 3
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: LD_INT 4
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
24268: GO 25233
24270: LD_INT 11
24272: DOUBLE
24273: EQUAL
24274: IFTRUE 24278
24276: GO 24308
24278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24279: LD_ADDR_VAR 0 3
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 3
24292: PUSH
24293: LD_INT 4
24295: PUSH
24296: LD_INT 5
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 25233
24308: LD_INT 4
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24342
24316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24317: LD_ADDR_VAR 0 3
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 3
24327: PUSH
24328: LD_INT 4
24330: PUSH
24331: LD_INT 5
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
24340: GO 25233
24342: LD_INT 5
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24376
24350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24351: LD_ADDR_VAR 0 3
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 3
24361: PUSH
24362: LD_INT 4
24364: PUSH
24365: LD_INT 5
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: ST_TO_ADDR
24374: GO 25233
24376: LD_INT 9
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24410
24384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: LD_INT 3
24395: PUSH
24396: LD_INT 4
24398: PUSH
24399: LD_INT 5
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: ST_TO_ADDR
24408: GO 25233
24410: LD_INT 7
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24444
24418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: LD_INT 3
24429: PUSH
24430: LD_INT 4
24432: PUSH
24433: LD_INT 5
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: ST_TO_ADDR
24442: GO 25233
24444: LD_INT 12
24446: DOUBLE
24447: EQUAL
24448: IFTRUE 24452
24450: GO 24478
24452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 3
24463: PUSH
24464: LD_INT 4
24466: PUSH
24467: LD_INT 5
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: ST_TO_ADDR
24476: GO 25233
24478: LD_INT 13
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24512
24486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24487: LD_ADDR_VAR 0 3
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 5
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: ST_TO_ADDR
24510: GO 25233
24512: LD_INT 14
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24538
24520: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24521: LD_ADDR_VAR 0 3
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: ST_TO_ADDR
24536: GO 25233
24538: LD_INT 6
24540: DOUBLE
24541: EQUAL
24542: IFTRUE 24546
24544: GO 24564
24546: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: LD_INT 4
24554: PUSH
24555: LD_INT 5
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: ST_TO_ADDR
24562: GO 25233
24564: LD_INT 10
24566: DOUBLE
24567: EQUAL
24568: IFTRUE 24572
24570: GO 24590
24572: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 4
24580: PUSH
24581: LD_INT 5
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: ST_TO_ADDR
24588: GO 25233
24590: LD_INT 22
24592: DOUBLE
24593: EQUAL
24594: IFTRUE 24598
24596: GO 24624
24598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: LD_INT 11
24606: PUSH
24607: LD_INT 12
24609: PUSH
24610: LD_INT 13
24612: PUSH
24613: LD_INT 14
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: ST_TO_ADDR
24622: GO 25233
24624: LD_INT 23
24626: DOUBLE
24627: EQUAL
24628: IFTRUE 24632
24630: GO 24658
24632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_INT 11
24640: PUSH
24641: LD_INT 12
24643: PUSH
24644: LD_INT 13
24646: PUSH
24647: LD_INT 14
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: ST_TO_ADDR
24656: GO 25233
24658: LD_INT 24
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24692
24666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_INT 11
24674: PUSH
24675: LD_INT 12
24677: PUSH
24678: LD_INT 13
24680: PUSH
24681: LD_INT 14
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: ST_TO_ADDR
24690: GO 25233
24692: LD_INT 30
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24726
24700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24701: LD_ADDR_VAR 0 3
24705: PUSH
24706: LD_INT 11
24708: PUSH
24709: LD_INT 12
24711: PUSH
24712: LD_INT 13
24714: PUSH
24715: LD_INT 14
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: ST_TO_ADDR
24724: GO 25233
24726: LD_INT 25
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24752
24734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 13
24742: PUSH
24743: LD_INT 14
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 25233
24752: LD_INT 27
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24778
24760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 13
24768: PUSH
24769: LD_INT 14
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: ST_TO_ADDR
24776: GO 25233
24778: LD_INT 92
24780: DOUBLE
24781: EQUAL
24782: IFTRUE 24786
24784: GO 24812
24786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24787: LD_ADDR_VAR 0 3
24791: PUSH
24792: LD_INT 11
24794: PUSH
24795: LD_INT 12
24797: PUSH
24798: LD_INT 13
24800: PUSH
24801: LD_INT 14
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: ST_TO_ADDR
24810: GO 25233
24812: LD_INT 28
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24838
24820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: LD_INT 13
24828: PUSH
24829: LD_INT 14
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: ST_TO_ADDR
24836: GO 25233
24838: LD_INT 29
24840: DOUBLE
24841: EQUAL
24842: IFTRUE 24846
24844: GO 24864
24846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_INT 13
24854: PUSH
24855: LD_INT 14
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: ST_TO_ADDR
24862: GO 25233
24864: LD_INT 31
24866: DOUBLE
24867: EQUAL
24868: IFTRUE 24872
24870: GO 24890
24872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24873: LD_ADDR_VAR 0 3
24877: PUSH
24878: LD_INT 13
24880: PUSH
24881: LD_INT 14
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25233
24890: LD_INT 26
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24916
24898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 13
24906: PUSH
24907: LD_INT 14
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: ST_TO_ADDR
24914: GO 25233
24916: LD_INT 42
24918: DOUBLE
24919: EQUAL
24920: IFTRUE 24924
24922: GO 24950
24924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_INT 21
24932: PUSH
24933: LD_INT 22
24935: PUSH
24936: LD_INT 23
24938: PUSH
24939: LD_INT 24
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: ST_TO_ADDR
24948: GO 25233
24950: LD_INT 43
24952: DOUBLE
24953: EQUAL
24954: IFTRUE 24958
24956: GO 24984
24958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_INT 21
24966: PUSH
24967: LD_INT 22
24969: PUSH
24970: LD_INT 23
24972: PUSH
24973: LD_INT 24
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: ST_TO_ADDR
24982: GO 25233
24984: LD_INT 44
24986: DOUBLE
24987: EQUAL
24988: IFTRUE 24992
24990: GO 25018
24992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_INT 21
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_INT 23
25006: PUSH
25007: LD_INT 24
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: ST_TO_ADDR
25016: GO 25233
25018: LD_INT 45
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25052
25026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25027: LD_ADDR_VAR 0 3
25031: PUSH
25032: LD_INT 21
25034: PUSH
25035: LD_INT 22
25037: PUSH
25038: LD_INT 23
25040: PUSH
25041: LD_INT 24
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: ST_TO_ADDR
25050: GO 25233
25052: LD_INT 49
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25086
25060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 23
25074: PUSH
25075: LD_INT 24
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 25233
25086: LD_INT 51
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25120
25094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 22
25105: PUSH
25106: LD_INT 23
25108: PUSH
25109: LD_INT 24
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 25233
25120: LD_INT 52
25122: DOUBLE
25123: EQUAL
25124: IFTRUE 25128
25126: GO 25154
25128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 21
25136: PUSH
25137: LD_INT 22
25139: PUSH
25140: LD_INT 23
25142: PUSH
25143: LD_INT 24
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: ST_TO_ADDR
25152: GO 25233
25154: LD_INT 53
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25180
25162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25163: LD_ADDR_VAR 0 3
25167: PUSH
25168: LD_INT 23
25170: PUSH
25171: LD_INT 24
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: ST_TO_ADDR
25178: GO 25233
25180: LD_INT 46
25182: DOUBLE
25183: EQUAL
25184: IFTRUE 25188
25186: GO 25206
25188: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 23
25196: PUSH
25197: LD_INT 24
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: ST_TO_ADDR
25204: GO 25233
25206: LD_INT 47
25208: DOUBLE
25209: EQUAL
25210: IFTRUE 25214
25212: GO 25232
25214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 23
25222: PUSH
25223: LD_INT 24
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: ST_TO_ADDR
25230: GO 25233
25232: POP
// result := ( chassis in result ) ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_VAR 0 1
25242: PUSH
25243: LD_VAR 0 3
25247: IN
25248: ST_TO_ADDR
// end ;
25249: LD_VAR 0 3
25253: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25254: LD_INT 0
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
// result := array ;
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: LD_VAR 0 1
25272: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25273: LD_VAR 0 1
25277: NOT
25278: PUSH
25279: LD_VAR 0 2
25283: NOT
25284: OR
25285: PUSH
25286: LD_VAR 0 3
25290: NOT
25291: OR
25292: PUSH
25293: LD_VAR 0 2
25297: PUSH
25298: LD_VAR 0 1
25302: GREATER
25303: OR
25304: PUSH
25305: LD_VAR 0 3
25309: PUSH
25310: LD_VAR 0 1
25314: GREATER
25315: OR
25316: IFFALSE 25320
// exit ;
25318: GO 25616
// if direction then
25320: LD_VAR 0 4
25324: IFFALSE 25388
// begin d := 1 ;
25326: LD_ADDR_VAR 0 9
25330: PUSH
25331: LD_INT 1
25333: ST_TO_ADDR
// if i_from > i_to then
25334: LD_VAR 0 2
25338: PUSH
25339: LD_VAR 0 3
25343: GREATER
25344: IFFALSE 25370
// length := ( array - i_from ) + i_to else
25346: LD_ADDR_VAR 0 11
25350: PUSH
25351: LD_VAR 0 1
25355: PUSH
25356: LD_VAR 0 2
25360: MINUS
25361: PUSH
25362: LD_VAR 0 3
25366: PLUS
25367: ST_TO_ADDR
25368: GO 25386
// length := i_to - i_from ;
25370: LD_ADDR_VAR 0 11
25374: PUSH
25375: LD_VAR 0 3
25379: PUSH
25380: LD_VAR 0 2
25384: MINUS
25385: ST_TO_ADDR
// end else
25386: GO 25449
// begin d := - 1 ;
25388: LD_ADDR_VAR 0 9
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: ST_TO_ADDR
// if i_from > i_to then
25397: LD_VAR 0 2
25401: PUSH
25402: LD_VAR 0 3
25406: GREATER
25407: IFFALSE 25427
// length := i_from - i_to else
25409: LD_ADDR_VAR 0 11
25413: PUSH
25414: LD_VAR 0 2
25418: PUSH
25419: LD_VAR 0 3
25423: MINUS
25424: ST_TO_ADDR
25425: GO 25449
// length := ( array - i_to ) + i_from ;
25427: LD_ADDR_VAR 0 11
25431: PUSH
25432: LD_VAR 0 1
25436: PUSH
25437: LD_VAR 0 3
25441: MINUS
25442: PUSH
25443: LD_VAR 0 2
25447: PLUS
25448: ST_TO_ADDR
// end ; if not length then
25449: LD_VAR 0 11
25453: NOT
25454: IFFALSE 25458
// exit ;
25456: GO 25616
// tmp := array ;
25458: LD_ADDR_VAR 0 10
25462: PUSH
25463: LD_VAR 0 1
25467: ST_TO_ADDR
// for i = 1 to length do
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: DOUBLE
25474: LD_INT 1
25476: DEC
25477: ST_TO_ADDR
25478: LD_VAR 0 11
25482: PUSH
25483: FOR_TO
25484: IFFALSE 25604
// begin for j = 1 to array do
25486: LD_ADDR_VAR 0 7
25490: PUSH
25491: DOUBLE
25492: LD_INT 1
25494: DEC
25495: ST_TO_ADDR
25496: LD_VAR 0 1
25500: PUSH
25501: FOR_TO
25502: IFFALSE 25590
// begin k := j + d ;
25504: LD_ADDR_VAR 0 8
25508: PUSH
25509: LD_VAR 0 7
25513: PUSH
25514: LD_VAR 0 9
25518: PLUS
25519: ST_TO_ADDR
// if k > array then
25520: LD_VAR 0 8
25524: PUSH
25525: LD_VAR 0 1
25529: GREATER
25530: IFFALSE 25540
// k := 1 ;
25532: LD_ADDR_VAR 0 8
25536: PUSH
25537: LD_INT 1
25539: ST_TO_ADDR
// if not k then
25540: LD_VAR 0 8
25544: NOT
25545: IFFALSE 25557
// k := array ;
25547: LD_ADDR_VAR 0 8
25551: PUSH
25552: LD_VAR 0 1
25556: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25557: LD_ADDR_VAR 0 10
25561: PUSH
25562: LD_VAR 0 10
25566: PPUSH
25567: LD_VAR 0 8
25571: PPUSH
25572: LD_VAR 0 1
25576: PUSH
25577: LD_VAR 0 7
25581: ARRAY
25582: PPUSH
25583: CALL_OW 1
25587: ST_TO_ADDR
// end ;
25588: GO 25501
25590: POP
25591: POP
// array := tmp ;
25592: LD_ADDR_VAR 0 1
25596: PUSH
25597: LD_VAR 0 10
25601: ST_TO_ADDR
// end ;
25602: GO 25483
25604: POP
25605: POP
// result := array ;
25606: LD_ADDR_VAR 0 5
25610: PUSH
25611: LD_VAR 0 1
25615: ST_TO_ADDR
// end ;
25616: LD_VAR 0 5
25620: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25621: LD_INT 0
25623: PPUSH
25624: PPUSH
// result := 0 ;
25625: LD_ADDR_VAR 0 3
25629: PUSH
25630: LD_INT 0
25632: ST_TO_ADDR
// if not array or not value in array then
25633: LD_VAR 0 1
25637: NOT
25638: PUSH
25639: LD_VAR 0 2
25643: PUSH
25644: LD_VAR 0 1
25648: IN
25649: NOT
25650: OR
25651: IFFALSE 25655
// exit ;
25653: GO 25709
// for i = 1 to array do
25655: LD_ADDR_VAR 0 4
25659: PUSH
25660: DOUBLE
25661: LD_INT 1
25663: DEC
25664: ST_TO_ADDR
25665: LD_VAR 0 1
25669: PUSH
25670: FOR_TO
25671: IFFALSE 25707
// if value = array [ i ] then
25673: LD_VAR 0 2
25677: PUSH
25678: LD_VAR 0 1
25682: PUSH
25683: LD_VAR 0 4
25687: ARRAY
25688: EQUAL
25689: IFFALSE 25705
// begin result := i ;
25691: LD_ADDR_VAR 0 3
25695: PUSH
25696: LD_VAR 0 4
25700: ST_TO_ADDR
// exit ;
25701: POP
25702: POP
25703: GO 25709
// end ;
25705: GO 25670
25707: POP
25708: POP
// end ;
25709: LD_VAR 0 3
25713: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25714: LD_INT 0
25716: PPUSH
// vc_chassis := chassis ;
25717: LD_ADDR_OWVAR 37
25721: PUSH
25722: LD_VAR 0 1
25726: ST_TO_ADDR
// vc_engine := engine ;
25727: LD_ADDR_OWVAR 39
25731: PUSH
25732: LD_VAR 0 2
25736: ST_TO_ADDR
// vc_control := control ;
25737: LD_ADDR_OWVAR 38
25741: PUSH
25742: LD_VAR 0 3
25746: ST_TO_ADDR
// vc_weapon := weapon ;
25747: LD_ADDR_OWVAR 40
25751: PUSH
25752: LD_VAR 0 4
25756: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25757: LD_ADDR_OWVAR 41
25761: PUSH
25762: LD_VAR 0 5
25766: ST_TO_ADDR
// end ;
25767: LD_VAR 0 6
25771: RET
// export function WantPlant ( unit ) ; var task ; begin
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
// result := false ;
25776: LD_ADDR_VAR 0 2
25780: PUSH
25781: LD_INT 0
25783: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25784: LD_ADDR_VAR 0 3
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 437
25798: ST_TO_ADDR
// if task then
25799: LD_VAR 0 3
25803: IFFALSE 25831
// if task [ 1 ] [ 1 ] = p then
25805: LD_VAR 0 3
25809: PUSH
25810: LD_INT 1
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PUSH
25818: LD_STRING p
25820: EQUAL
25821: IFFALSE 25831
// result := true ;
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 1
25830: ST_TO_ADDR
// end ;
25831: LD_VAR 0 2
25835: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25836: LD_INT 0
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
// if pos < 1 then
25842: LD_VAR 0 2
25846: PUSH
25847: LD_INT 1
25849: LESS
25850: IFFALSE 25854
// exit ;
25852: GO 26157
// if pos = 1 then
25854: LD_VAR 0 2
25858: PUSH
25859: LD_INT 1
25861: EQUAL
25862: IFFALSE 25895
// result := Replace ( arr , pos [ 1 ] , value ) else
25864: LD_ADDR_VAR 0 4
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_INT 1
25881: ARRAY
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: CALL_OW 1
25892: ST_TO_ADDR
25893: GO 26157
// begin tmp := arr ;
25895: LD_ADDR_VAR 0 6
25899: PUSH
25900: LD_VAR 0 1
25904: ST_TO_ADDR
// s_arr := [ tmp ] ;
25905: LD_ADDR_VAR 0 7
25909: PUSH
25910: LD_VAR 0 6
25914: PUSH
25915: EMPTY
25916: LIST
25917: ST_TO_ADDR
// for i = 1 to pos - 1 do
25918: LD_ADDR_VAR 0 5
25922: PUSH
25923: DOUBLE
25924: LD_INT 1
25926: DEC
25927: ST_TO_ADDR
25928: LD_VAR 0 2
25932: PUSH
25933: LD_INT 1
25935: MINUS
25936: PUSH
25937: FOR_TO
25938: IFFALSE 25983
// begin tmp := tmp [ pos [ i ] ] ;
25940: LD_ADDR_VAR 0 6
25944: PUSH
25945: LD_VAR 0 6
25949: PUSH
25950: LD_VAR 0 2
25954: PUSH
25955: LD_VAR 0 5
25959: ARRAY
25960: ARRAY
25961: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25962: LD_ADDR_VAR 0 7
25966: PUSH
25967: LD_VAR 0 7
25971: PUSH
25972: LD_VAR 0 6
25976: PUSH
25977: EMPTY
25978: LIST
25979: ADD
25980: ST_TO_ADDR
// end ;
25981: GO 25937
25983: POP
25984: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25985: LD_ADDR_VAR 0 6
25989: PUSH
25990: LD_VAR 0 6
25994: PPUSH
25995: LD_VAR 0 2
25999: PUSH
26000: LD_VAR 0 2
26004: ARRAY
26005: PPUSH
26006: LD_VAR 0 3
26010: PPUSH
26011: CALL_OW 1
26015: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26016: LD_ADDR_VAR 0 7
26020: PUSH
26021: LD_VAR 0 7
26025: PPUSH
26026: LD_VAR 0 7
26030: PPUSH
26031: LD_VAR 0 6
26035: PPUSH
26036: CALL_OW 1
26040: ST_TO_ADDR
// for i = s_arr downto 2 do
26041: LD_ADDR_VAR 0 5
26045: PUSH
26046: DOUBLE
26047: LD_VAR 0 7
26051: INC
26052: ST_TO_ADDR
26053: LD_INT 2
26055: PUSH
26056: FOR_DOWNTO
26057: IFFALSE 26141
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26059: LD_ADDR_VAR 0 6
26063: PUSH
26064: LD_VAR 0 7
26068: PUSH
26069: LD_VAR 0 5
26073: PUSH
26074: LD_INT 1
26076: MINUS
26077: ARRAY
26078: PPUSH
26079: LD_VAR 0 2
26083: PUSH
26084: LD_VAR 0 5
26088: PUSH
26089: LD_INT 1
26091: MINUS
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 7
26098: PUSH
26099: LD_VAR 0 5
26103: ARRAY
26104: PPUSH
26105: CALL_OW 1
26109: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26110: LD_ADDR_VAR 0 7
26114: PUSH
26115: LD_VAR 0 7
26119: PPUSH
26120: LD_VAR 0 5
26124: PUSH
26125: LD_INT 1
26127: MINUS
26128: PPUSH
26129: LD_VAR 0 6
26133: PPUSH
26134: CALL_OW 1
26138: ST_TO_ADDR
// end ;
26139: GO 26056
26141: POP
26142: POP
// result := s_arr [ 1 ] ;
26143: LD_ADDR_VAR 0 4
26147: PUSH
26148: LD_VAR 0 7
26152: PUSH
26153: LD_INT 1
26155: ARRAY
26156: ST_TO_ADDR
// end ; end ;
26157: LD_VAR 0 4
26161: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26162: LD_INT 0
26164: PPUSH
26165: PPUSH
// if not list then
26166: LD_VAR 0 1
26170: NOT
26171: IFFALSE 26175
// exit ;
26173: GO 26266
// i := list [ pos1 ] ;
26175: LD_ADDR_VAR 0 5
26179: PUSH
26180: LD_VAR 0 1
26184: PUSH
26185: LD_VAR 0 2
26189: ARRAY
26190: ST_TO_ADDR
// if not i then
26191: LD_VAR 0 5
26195: NOT
26196: IFFALSE 26200
// exit ;
26198: GO 26266
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26200: LD_ADDR_VAR 0 1
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: LD_VAR 0 2
26214: PPUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_VAR 0 3
26224: ARRAY
26225: PPUSH
26226: CALL_OW 1
26230: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26231: LD_ADDR_VAR 0 1
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: LD_VAR 0 3
26245: PPUSH
26246: LD_VAR 0 5
26250: PPUSH
26251: CALL_OW 1
26255: ST_TO_ADDR
// result := list ;
26256: LD_ADDR_VAR 0 4
26260: PUSH
26261: LD_VAR 0 1
26265: ST_TO_ADDR
// end ;
26266: LD_VAR 0 4
26270: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26271: LD_INT 0
26273: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26274: LD_ADDR_VAR 0 5
26278: PUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 250
26288: PPUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: PPUSH
26299: LD_VAR 0 2
26303: PPUSH
26304: LD_VAR 0 3
26308: PPUSH
26309: LD_VAR 0 4
26313: PPUSH
26314: CALL 26692 0 5
26318: ST_TO_ADDR
// end ;
26319: LD_VAR 0 5
26323: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// if not list or not unit then
26330: LD_VAR 0 2
26334: NOT
26335: PUSH
26336: LD_VAR 0 1
26340: NOT
26341: OR
26342: IFFALSE 26346
// exit ;
26344: GO 26687
// result := [ ] ;
26346: LD_ADDR_VAR 0 5
26350: PUSH
26351: EMPTY
26352: ST_TO_ADDR
// for i in list do
26353: LD_ADDR_VAR 0 6
26357: PUSH
26358: LD_VAR 0 2
26362: PUSH
26363: FOR_IN
26364: IFFALSE 26582
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26366: LD_ADDR_VAR 0 8
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_VAR 0 6
26380: PUSH
26381: LD_INT 1
26383: ARRAY
26384: PPUSH
26385: LD_VAR 0 6
26389: PUSH
26390: LD_INT 2
26392: ARRAY
26393: PPUSH
26394: CALL_OW 297
26398: ST_TO_ADDR
// if not Count ( result ) then
26399: LD_VAR 0 5
26403: PPUSH
26404: CALL 22976 0 1
26408: NOT
26409: IFFALSE 26442
// begin result := Join ( result , [ i , tmp ] ) ;
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: LD_VAR 0 6
26425: PUSH
26426: LD_VAR 0 8
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PPUSH
26435: CALL 58576 0 2
26439: ST_TO_ADDR
// continue ;
26440: GO 26363
// end ; if result [ result ] [ 2 ] <= tmp then
26442: LD_VAR 0 5
26446: PUSH
26447: LD_VAR 0 5
26451: ARRAY
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PUSH
26457: LD_VAR 0 8
26461: LESSEQUAL
26462: IFFALSE 26495
// result := Join ( result , [ i , tmp ] ) else
26464: LD_ADDR_VAR 0 5
26468: PUSH
26469: LD_VAR 0 5
26473: PPUSH
26474: LD_VAR 0 6
26478: PUSH
26479: LD_VAR 0 8
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PPUSH
26488: CALL 58576 0 2
26492: ST_TO_ADDR
26493: GO 26580
// begin for j := 1 to Count ( result ) do
26495: LD_ADDR_VAR 0 7
26499: PUSH
26500: DOUBLE
26501: LD_INT 1
26503: DEC
26504: ST_TO_ADDR
26505: LD_VAR 0 5
26509: PPUSH
26510: CALL 22976 0 1
26514: PUSH
26515: FOR_TO
26516: IFFALSE 26578
// begin if tmp < result [ j ] [ 2 ] then
26518: LD_VAR 0 8
26522: PUSH
26523: LD_VAR 0 5
26527: PUSH
26528: LD_VAR 0 7
26532: ARRAY
26533: PUSH
26534: LD_INT 2
26536: ARRAY
26537: LESS
26538: IFFALSE 26576
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26540: LD_ADDR_VAR 0 5
26544: PUSH
26545: LD_VAR 0 5
26549: PPUSH
26550: LD_VAR 0 7
26554: PPUSH
26555: LD_VAR 0 6
26559: PUSH
26560: LD_VAR 0 8
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 2
26573: ST_TO_ADDR
// break ;
26574: GO 26578
// end ; end ;
26576: GO 26515
26578: POP
26579: POP
// end ; end ;
26580: GO 26363
26582: POP
26583: POP
// if result and not asc then
26584: LD_VAR 0 5
26588: PUSH
26589: LD_VAR 0 3
26593: NOT
26594: AND
26595: IFFALSE 26612
// result := ReverseArray ( result ) ;
26597: LD_ADDR_VAR 0 5
26601: PUSH
26602: LD_VAR 0 5
26606: PPUSH
26607: CALL 53852 0 1
26611: ST_TO_ADDR
// tmp := [ ] ;
26612: LD_ADDR_VAR 0 8
26616: PUSH
26617: EMPTY
26618: ST_TO_ADDR
// if mode then
26619: LD_VAR 0 4
26623: IFFALSE 26687
// begin for i := 1 to result do
26625: LD_ADDR_VAR 0 6
26629: PUSH
26630: DOUBLE
26631: LD_INT 1
26633: DEC
26634: ST_TO_ADDR
26635: LD_VAR 0 5
26639: PUSH
26640: FOR_TO
26641: IFFALSE 26675
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26643: LD_ADDR_VAR 0 8
26647: PUSH
26648: LD_VAR 0 8
26652: PPUSH
26653: LD_VAR 0 5
26657: PUSH
26658: LD_VAR 0 6
26662: ARRAY
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: CALL 58576 0 2
26672: ST_TO_ADDR
26673: GO 26640
26675: POP
26676: POP
// result := tmp ;
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_VAR 0 8
26686: ST_TO_ADDR
// end ; end ;
26687: LD_VAR 0 5
26691: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26692: LD_INT 0
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
// if not list then
26698: LD_VAR 0 3
26702: NOT
26703: IFFALSE 26707
// exit ;
26705: GO 27095
// result := [ ] ;
26707: LD_ADDR_VAR 0 6
26711: PUSH
26712: EMPTY
26713: ST_TO_ADDR
// for i in list do
26714: LD_ADDR_VAR 0 7
26718: PUSH
26719: LD_VAR 0 3
26723: PUSH
26724: FOR_IN
26725: IFFALSE 26927
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26727: LD_ADDR_VAR 0 9
26731: PUSH
26732: LD_VAR 0 7
26736: PPUSH
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_VAR 0 2
26746: PPUSH
26747: CALL_OW 297
26751: ST_TO_ADDR
// if not result then
26752: LD_VAR 0 6
26756: NOT
26757: IFFALSE 26783
// result := [ [ i , tmp ] ] else
26759: LD_ADDR_VAR 0 6
26763: PUSH
26764: LD_VAR 0 7
26768: PUSH
26769: LD_VAR 0 9
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: EMPTY
26779: LIST
26780: ST_TO_ADDR
26781: GO 26925
// begin if result [ result ] [ 2 ] < tmp then
26783: LD_VAR 0 6
26787: PUSH
26788: LD_VAR 0 6
26792: ARRAY
26793: PUSH
26794: LD_INT 2
26796: ARRAY
26797: PUSH
26798: LD_VAR 0 9
26802: LESS
26803: IFFALSE 26845
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26805: LD_ADDR_VAR 0 6
26809: PUSH
26810: LD_VAR 0 6
26814: PPUSH
26815: LD_VAR 0 6
26819: PUSH
26820: LD_INT 1
26822: PLUS
26823: PPUSH
26824: LD_VAR 0 7
26828: PUSH
26829: LD_VAR 0 9
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PPUSH
26838: CALL_OW 2
26842: ST_TO_ADDR
26843: GO 26925
// for j = 1 to result do
26845: LD_ADDR_VAR 0 8
26849: PUSH
26850: DOUBLE
26851: LD_INT 1
26853: DEC
26854: ST_TO_ADDR
26855: LD_VAR 0 6
26859: PUSH
26860: FOR_TO
26861: IFFALSE 26923
// begin if tmp < result [ j ] [ 2 ] then
26863: LD_VAR 0 9
26867: PUSH
26868: LD_VAR 0 6
26872: PUSH
26873: LD_VAR 0 8
26877: ARRAY
26878: PUSH
26879: LD_INT 2
26881: ARRAY
26882: LESS
26883: IFFALSE 26921
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26885: LD_ADDR_VAR 0 6
26889: PUSH
26890: LD_VAR 0 6
26894: PPUSH
26895: LD_VAR 0 8
26899: PPUSH
26900: LD_VAR 0 7
26904: PUSH
26905: LD_VAR 0 9
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL_OW 2
26918: ST_TO_ADDR
// break ;
26919: GO 26923
// end ; end ;
26921: GO 26860
26923: POP
26924: POP
// end ; end ;
26925: GO 26724
26927: POP
26928: POP
// if result and not asc then
26929: LD_VAR 0 6
26933: PUSH
26934: LD_VAR 0 4
26938: NOT
26939: AND
26940: IFFALSE 27015
// begin tmp := result ;
26942: LD_ADDR_VAR 0 9
26946: PUSH
26947: LD_VAR 0 6
26951: ST_TO_ADDR
// for i = tmp downto 1 do
26952: LD_ADDR_VAR 0 7
26956: PUSH
26957: DOUBLE
26958: LD_VAR 0 9
26962: INC
26963: ST_TO_ADDR
26964: LD_INT 1
26966: PUSH
26967: FOR_DOWNTO
26968: IFFALSE 27013
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26970: LD_ADDR_VAR 0 6
26974: PUSH
26975: LD_VAR 0 6
26979: PPUSH
26980: LD_VAR 0 9
26984: PUSH
26985: LD_VAR 0 7
26989: MINUS
26990: PUSH
26991: LD_INT 1
26993: PLUS
26994: PPUSH
26995: LD_VAR 0 9
26999: PUSH
27000: LD_VAR 0 7
27004: ARRAY
27005: PPUSH
27006: CALL_OW 1
27010: ST_TO_ADDR
27011: GO 26967
27013: POP
27014: POP
// end ; tmp := [ ] ;
27015: LD_ADDR_VAR 0 9
27019: PUSH
27020: EMPTY
27021: ST_TO_ADDR
// if mode then
27022: LD_VAR 0 5
27026: IFFALSE 27095
// begin for i = 1 to result do
27028: LD_ADDR_VAR 0 7
27032: PUSH
27033: DOUBLE
27034: LD_INT 1
27036: DEC
27037: ST_TO_ADDR
27038: LD_VAR 0 6
27042: PUSH
27043: FOR_TO
27044: IFFALSE 27083
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27046: LD_ADDR_VAR 0 9
27050: PUSH
27051: LD_VAR 0 9
27055: PPUSH
27056: LD_VAR 0 7
27060: PPUSH
27061: LD_VAR 0 6
27065: PUSH
27066: LD_VAR 0 7
27070: ARRAY
27071: PUSH
27072: LD_INT 1
27074: ARRAY
27075: PPUSH
27076: CALL_OW 1
27080: ST_TO_ADDR
27081: GO 27043
27083: POP
27084: POP
// result := tmp ;
27085: LD_ADDR_VAR 0 6
27089: PUSH
27090: LD_VAR 0 9
27094: ST_TO_ADDR
// end ; end ;
27095: LD_VAR 0 6
27099: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27100: LD_INT 0
27102: PPUSH
27103: PPUSH
27104: PPUSH
27105: PPUSH
27106: PPUSH
27107: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27108: LD_ADDR_VAR 0 5
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// if not x or not y then
27130: LD_VAR 0 2
27134: NOT
27135: PUSH
27136: LD_VAR 0 3
27140: NOT
27141: OR
27142: IFFALSE 27146
// exit ;
27144: GO 28796
// if not range then
27146: LD_VAR 0 4
27150: NOT
27151: IFFALSE 27161
// range := 10 ;
27153: LD_ADDR_VAR 0 4
27157: PUSH
27158: LD_INT 10
27160: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27161: LD_ADDR_VAR 0 8
27165: PUSH
27166: LD_INT 81
27168: PUSH
27169: LD_VAR 0 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 92
27180: PUSH
27181: LD_VAR 0 2
27185: PUSH
27186: LD_VAR 0 3
27190: PUSH
27191: LD_VAR 0 4
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 3
27204: PUSH
27205: LD_INT 21
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: ST_TO_ADDR
// if not tmp then
27229: LD_VAR 0 8
27233: NOT
27234: IFFALSE 27238
// exit ;
27236: GO 28796
// for i in tmp do
27238: LD_ADDR_VAR 0 6
27242: PUSH
27243: LD_VAR 0 8
27247: PUSH
27248: FOR_IN
27249: IFFALSE 28771
// begin points := [ 0 , 0 , 0 ] ;
27251: LD_ADDR_VAR 0 9
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// bpoints := 1 ;
27270: LD_ADDR_VAR 0 10
27274: PUSH
27275: LD_INT 1
27277: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27278: LD_VAR 0 6
27282: PPUSH
27283: CALL_OW 247
27287: PUSH
27288: LD_INT 1
27290: DOUBLE
27291: EQUAL
27292: IFTRUE 27296
27294: GO 27874
27296: POP
// begin if GetClass ( i ) = 1 then
27297: LD_VAR 0 6
27301: PPUSH
27302: CALL_OW 257
27306: PUSH
27307: LD_INT 1
27309: EQUAL
27310: IFFALSE 27331
// points := [ 10 , 5 , 3 ] ;
27312: LD_ADDR_VAR 0 9
27316: PUSH
27317: LD_INT 10
27319: PUSH
27320: LD_INT 5
27322: PUSH
27323: LD_INT 3
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27331: LD_VAR 0 6
27335: PPUSH
27336: CALL_OW 257
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: LD_INT 4
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: IN
27355: IFFALSE 27376
// points := [ 3 , 2 , 1 ] ;
27357: LD_ADDR_VAR 0 9
27361: PUSH
27362: LD_INT 3
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27376: LD_VAR 0 6
27380: PPUSH
27381: CALL_OW 257
27385: PUSH
27386: LD_INT 5
27388: EQUAL
27389: IFFALSE 27410
// points := [ 130 , 5 , 2 ] ;
27391: LD_ADDR_VAR 0 9
27395: PUSH
27396: LD_INT 130
27398: PUSH
27399: LD_INT 5
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27410: LD_VAR 0 6
27414: PPUSH
27415: CALL_OW 257
27419: PUSH
27420: LD_INT 8
27422: EQUAL
27423: IFFALSE 27444
// points := [ 35 , 35 , 30 ] ;
27425: LD_ADDR_VAR 0 9
27429: PUSH
27430: LD_INT 35
27432: PUSH
27433: LD_INT 35
27435: PUSH
27436: LD_INT 30
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27444: LD_VAR 0 6
27448: PPUSH
27449: CALL_OW 257
27453: PUSH
27454: LD_INT 9
27456: EQUAL
27457: IFFALSE 27478
// points := [ 20 , 55 , 40 ] ;
27459: LD_ADDR_VAR 0 9
27463: PUSH
27464: LD_INT 20
27466: PUSH
27467: LD_INT 55
27469: PUSH
27470: LD_INT 40
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27478: LD_VAR 0 6
27482: PPUSH
27483: CALL_OW 257
27487: PUSH
27488: LD_INT 12
27490: PUSH
27491: LD_INT 16
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: IN
27498: IFFALSE 27519
// points := [ 5 , 3 , 2 ] ;
27500: LD_ADDR_VAR 0 9
27504: PUSH
27505: LD_INT 5
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27519: LD_VAR 0 6
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 17
27531: EQUAL
27532: IFFALSE 27553
// points := [ 100 , 50 , 75 ] ;
27534: LD_ADDR_VAR 0 9
27538: PUSH
27539: LD_INT 100
27541: PUSH
27542: LD_INT 50
27544: PUSH
27545: LD_INT 75
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27553: LD_VAR 0 6
27557: PPUSH
27558: CALL_OW 257
27562: PUSH
27563: LD_INT 15
27565: EQUAL
27566: IFFALSE 27587
// points := [ 10 , 5 , 3 ] ;
27568: LD_ADDR_VAR 0 9
27572: PUSH
27573: LD_INT 10
27575: PUSH
27576: LD_INT 5
27578: PUSH
27579: LD_INT 3
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27587: LD_VAR 0 6
27591: PPUSH
27592: CALL_OW 257
27596: PUSH
27597: LD_INT 14
27599: EQUAL
27600: IFFALSE 27621
// points := [ 10 , 0 , 0 ] ;
27602: LD_ADDR_VAR 0 9
27606: PUSH
27607: LD_INT 10
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27621: LD_VAR 0 6
27625: PPUSH
27626: CALL_OW 257
27630: PUSH
27631: LD_INT 11
27633: EQUAL
27634: IFFALSE 27655
// points := [ 30 , 10 , 5 ] ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: LD_INT 30
27643: PUSH
27644: LD_INT 10
27646: PUSH
27647: LD_INT 5
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_INT 5
27662: PPUSH
27663: CALL_OW 321
27667: PUSH
27668: LD_INT 2
27670: EQUAL
27671: IFFALSE 27688
// bpoints := bpoints * 1.8 ;
27673: LD_ADDR_VAR 0 10
27677: PUSH
27678: LD_VAR 0 10
27682: PUSH
27683: LD_REAL  1.80000000000000E+0000
27686: MUL
27687: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27688: LD_VAR 0 6
27692: PPUSH
27693: CALL_OW 257
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 4
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: IN
27716: PUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: LD_INT 51
27724: PPUSH
27725: CALL_OW 321
27729: PUSH
27730: LD_INT 2
27732: EQUAL
27733: AND
27734: IFFALSE 27751
// bpoints := bpoints * 1.2 ;
27736: LD_ADDR_VAR 0 10
27740: PUSH
27741: LD_VAR 0 10
27745: PUSH
27746: LD_REAL  1.20000000000000E+0000
27749: MUL
27750: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27751: LD_VAR 0 6
27755: PPUSH
27756: CALL_OW 257
27760: PUSH
27761: LD_INT 5
27763: PUSH
27764: LD_INT 7
27766: PUSH
27767: LD_INT 9
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: IN
27775: PUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: LD_INT 52
27783: PPUSH
27784: CALL_OW 321
27788: PUSH
27789: LD_INT 2
27791: EQUAL
27792: AND
27793: IFFALSE 27810
// bpoints := bpoints * 1.5 ;
27795: LD_ADDR_VAR 0 10
27799: PUSH
27800: LD_VAR 0 10
27804: PUSH
27805: LD_REAL  1.50000000000000E+0000
27808: MUL
27809: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27810: LD_VAR 0 1
27814: PPUSH
27815: LD_INT 66
27817: PPUSH
27818: CALL_OW 321
27822: PUSH
27823: LD_INT 2
27825: EQUAL
27826: IFFALSE 27843
// bpoints := bpoints * 1.1 ;
27828: LD_ADDR_VAR 0 10
27832: PUSH
27833: LD_VAR 0 10
27837: PUSH
27838: LD_REAL  1.10000000000000E+0000
27841: MUL
27842: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27843: LD_ADDR_VAR 0 10
27847: PUSH
27848: LD_VAR 0 10
27852: PUSH
27853: LD_VAR 0 6
27857: PPUSH
27858: LD_INT 1
27860: PPUSH
27861: CALL_OW 259
27865: PUSH
27866: LD_REAL  1.15000000000000E+0000
27869: MUL
27870: MUL
27871: ST_TO_ADDR
// end ; unit_vehicle :
27872: GO 28700
27874: LD_INT 2
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 28688
27882: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27883: LD_VAR 0 6
27887: PPUSH
27888: CALL_OW 264
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 42
27898: PUSH
27899: LD_INT 24
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: IN
27907: IFFALSE 27928
// points := [ 25 , 5 , 3 ] ;
27909: LD_ADDR_VAR 0 9
27913: PUSH
27914: LD_INT 25
27916: PUSH
27917: LD_INT 5
27919: PUSH
27920: LD_INT 3
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27928: LD_VAR 0 6
27932: PPUSH
27933: CALL_OW 264
27937: PUSH
27938: LD_INT 4
27940: PUSH
27941: LD_INT 43
27943: PUSH
27944: LD_INT 25
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: IN
27952: IFFALSE 27973
// points := [ 40 , 15 , 5 ] ;
27954: LD_ADDR_VAR 0 9
27958: PUSH
27959: LD_INT 40
27961: PUSH
27962: LD_INT 15
27964: PUSH
27965: LD_INT 5
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27973: LD_VAR 0 6
27977: PPUSH
27978: CALL_OW 264
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 23
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: IN
27993: IFFALSE 28014
// points := [ 7 , 25 , 8 ] ;
27995: LD_ADDR_VAR 0 9
27999: PUSH
28000: LD_INT 7
28002: PUSH
28003: LD_INT 25
28005: PUSH
28006: LD_INT 8
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28014: LD_VAR 0 6
28018: PPUSH
28019: CALL_OW 264
28023: PUSH
28024: LD_INT 5
28026: PUSH
28027: LD_INT 27
28029: PUSH
28030: LD_INT 44
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: IN
28038: IFFALSE 28059
// points := [ 14 , 50 , 16 ] ;
28040: LD_ADDR_VAR 0 9
28044: PUSH
28045: LD_INT 14
28047: PUSH
28048: LD_INT 50
28050: PUSH
28051: LD_INT 16
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28059: LD_VAR 0 6
28063: PPUSH
28064: CALL_OW 264
28068: PUSH
28069: LD_INT 6
28071: PUSH
28072: LD_INT 46
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: IN
28079: IFFALSE 28100
// points := [ 32 , 120 , 70 ] ;
28081: LD_ADDR_VAR 0 9
28085: PUSH
28086: LD_INT 32
28088: PUSH
28089: LD_INT 120
28091: PUSH
28092: LD_INT 70
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28100: LD_VAR 0 6
28104: PPUSH
28105: CALL_OW 264
28109: PUSH
28110: LD_INT 7
28112: PUSH
28113: LD_INT 28
28115: PUSH
28116: LD_INT 45
28118: PUSH
28119: LD_INT 92
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: IN
28128: IFFALSE 28149
// points := [ 35 , 20 , 45 ] ;
28130: LD_ADDR_VAR 0 9
28134: PUSH
28135: LD_INT 35
28137: PUSH
28138: LD_INT 20
28140: PUSH
28141: LD_INT 45
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: LIST
28148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28149: LD_VAR 0 6
28153: PPUSH
28154: CALL_OW 264
28158: PUSH
28159: LD_INT 47
28161: PUSH
28162: EMPTY
28163: LIST
28164: IN
28165: IFFALSE 28186
// points := [ 67 , 45 , 75 ] ;
28167: LD_ADDR_VAR 0 9
28171: PUSH
28172: LD_INT 67
28174: PUSH
28175: LD_INT 45
28177: PUSH
28178: LD_INT 75
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 264
28195: PUSH
28196: LD_INT 26
28198: PUSH
28199: EMPTY
28200: LIST
28201: IN
28202: IFFALSE 28223
// points := [ 120 , 30 , 80 ] ;
28204: LD_ADDR_VAR 0 9
28208: PUSH
28209: LD_INT 120
28211: PUSH
28212: LD_INT 30
28214: PUSH
28215: LD_INT 80
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28223: LD_VAR 0 6
28227: PPUSH
28228: CALL_OW 264
28232: PUSH
28233: LD_INT 22
28235: PUSH
28236: EMPTY
28237: LIST
28238: IN
28239: IFFALSE 28260
// points := [ 40 , 1 , 1 ] ;
28241: LD_ADDR_VAR 0 9
28245: PUSH
28246: LD_INT 40
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28260: LD_VAR 0 6
28264: PPUSH
28265: CALL_OW 264
28269: PUSH
28270: LD_INT 29
28272: PUSH
28273: EMPTY
28274: LIST
28275: IN
28276: IFFALSE 28297
// points := [ 70 , 200 , 400 ] ;
28278: LD_ADDR_VAR 0 9
28282: PUSH
28283: LD_INT 70
28285: PUSH
28286: LD_INT 200
28288: PUSH
28289: LD_INT 400
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28297: LD_VAR 0 6
28301: PPUSH
28302: CALL_OW 264
28306: PUSH
28307: LD_INT 14
28309: PUSH
28310: LD_INT 53
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: IN
28317: IFFALSE 28338
// points := [ 40 , 10 , 20 ] ;
28319: LD_ADDR_VAR 0 9
28323: PUSH
28324: LD_INT 40
28326: PUSH
28327: LD_INT 10
28329: PUSH
28330: LD_INT 20
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28338: LD_VAR 0 6
28342: PPUSH
28343: CALL_OW 264
28347: PUSH
28348: LD_INT 9
28350: PUSH
28351: EMPTY
28352: LIST
28353: IN
28354: IFFALSE 28375
// points := [ 5 , 70 , 20 ] ;
28356: LD_ADDR_VAR 0 9
28360: PUSH
28361: LD_INT 5
28363: PUSH
28364: LD_INT 70
28366: PUSH
28367: LD_INT 20
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28375: LD_VAR 0 6
28379: PPUSH
28380: CALL_OW 264
28384: PUSH
28385: LD_INT 10
28387: PUSH
28388: EMPTY
28389: LIST
28390: IN
28391: IFFALSE 28412
// points := [ 35 , 110 , 70 ] ;
28393: LD_ADDR_VAR 0 9
28397: PUSH
28398: LD_INT 35
28400: PUSH
28401: LD_INT 110
28403: PUSH
28404: LD_INT 70
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28412: LD_VAR 0 6
28416: PPUSH
28417: CALL_OW 265
28421: PUSH
28422: LD_INT 25
28424: EQUAL
28425: IFFALSE 28446
// points := [ 80 , 65 , 100 ] ;
28427: LD_ADDR_VAR 0 9
28431: PUSH
28432: LD_INT 80
28434: PUSH
28435: LD_INT 65
28437: PUSH
28438: LD_INT 100
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28446: LD_VAR 0 6
28450: PPUSH
28451: CALL_OW 263
28455: PUSH
28456: LD_INT 1
28458: EQUAL
28459: IFFALSE 28494
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28461: LD_ADDR_VAR 0 10
28465: PUSH
28466: LD_VAR 0 10
28470: PUSH
28471: LD_VAR 0 6
28475: PPUSH
28476: CALL_OW 311
28480: PPUSH
28481: LD_INT 3
28483: PPUSH
28484: CALL_OW 259
28488: PUSH
28489: LD_INT 4
28491: MUL
28492: MUL
28493: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28494: LD_VAR 0 6
28498: PPUSH
28499: CALL_OW 263
28503: PUSH
28504: LD_INT 2
28506: EQUAL
28507: IFFALSE 28558
// begin j := IsControledBy ( i ) ;
28509: LD_ADDR_VAR 0 7
28513: PUSH
28514: LD_VAR 0 6
28518: PPUSH
28519: CALL_OW 312
28523: ST_TO_ADDR
// if j then
28524: LD_VAR 0 7
28528: IFFALSE 28558
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28530: LD_ADDR_VAR 0 10
28534: PUSH
28535: LD_VAR 0 10
28539: PUSH
28540: LD_VAR 0 7
28544: PPUSH
28545: LD_INT 3
28547: PPUSH
28548: CALL_OW 259
28552: PUSH
28553: LD_INT 3
28555: MUL
28556: MUL
28557: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28558: LD_VAR 0 6
28562: PPUSH
28563: CALL_OW 264
28567: PUSH
28568: LD_INT 5
28570: PUSH
28571: LD_INT 6
28573: PUSH
28574: LD_INT 46
28576: PUSH
28577: LD_INT 44
28579: PUSH
28580: LD_INT 47
28582: PUSH
28583: LD_INT 45
28585: PUSH
28586: LD_INT 28
28588: PUSH
28589: LD_INT 7
28591: PUSH
28592: LD_INT 27
28594: PUSH
28595: LD_INT 29
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: IN
28610: PUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_INT 52
28618: PPUSH
28619: CALL_OW 321
28623: PUSH
28624: LD_INT 2
28626: EQUAL
28627: AND
28628: IFFALSE 28645
// bpoints := bpoints * 1.2 ;
28630: LD_ADDR_VAR 0 10
28634: PUSH
28635: LD_VAR 0 10
28639: PUSH
28640: LD_REAL  1.20000000000000E+0000
28643: MUL
28644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28645: LD_VAR 0 6
28649: PPUSH
28650: CALL_OW 264
28654: PUSH
28655: LD_INT 6
28657: PUSH
28658: LD_INT 46
28660: PUSH
28661: LD_INT 47
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: IN
28669: IFFALSE 28686
// bpoints := bpoints * 1.2 ;
28671: LD_ADDR_VAR 0 10
28675: PUSH
28676: LD_VAR 0 10
28680: PUSH
28681: LD_REAL  1.20000000000000E+0000
28684: MUL
28685: ST_TO_ADDR
// end ; unit_building :
28686: GO 28700
28688: LD_INT 3
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28699
28696: POP
// ; end ;
28697: GO 28700
28699: POP
// for j = 1 to 3 do
28700: LD_ADDR_VAR 0 7
28704: PUSH
28705: DOUBLE
28706: LD_INT 1
28708: DEC
28709: ST_TO_ADDR
28710: LD_INT 3
28712: PUSH
28713: FOR_TO
28714: IFFALSE 28767
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 5
28725: PPUSH
28726: LD_VAR 0 7
28730: PPUSH
28731: LD_VAR 0 5
28735: PUSH
28736: LD_VAR 0 7
28740: ARRAY
28741: PUSH
28742: LD_VAR 0 9
28746: PUSH
28747: LD_VAR 0 7
28751: ARRAY
28752: PUSH
28753: LD_VAR 0 10
28757: MUL
28758: PLUS
28759: PPUSH
28760: CALL_OW 1
28764: ST_TO_ADDR
28765: GO 28713
28767: POP
28768: POP
// end ;
28769: GO 27248
28771: POP
28772: POP
// result := Replace ( result , 4 , tmp ) ;
28773: LD_ADDR_VAR 0 5
28777: PUSH
28778: LD_VAR 0 5
28782: PPUSH
28783: LD_INT 4
28785: PPUSH
28786: LD_VAR 0 8
28790: PPUSH
28791: CALL_OW 1
28795: ST_TO_ADDR
// end ;
28796: LD_VAR 0 5
28800: RET
// export function DangerAtRange ( unit , range ) ; begin
28801: LD_INT 0
28803: PPUSH
// if not unit then
28804: LD_VAR 0 1
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 28858
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: CALL_OW 255
28827: PPUSH
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 250
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 251
28847: PPUSH
28848: LD_VAR 0 2
28852: PPUSH
28853: CALL 27100 0 4
28857: ST_TO_ADDR
// end ;
28858: LD_VAR 0 3
28862: RET
// export function DangerInArea ( side , area ) ; begin
28863: LD_INT 0
28865: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_VAR 0 2
28875: PPUSH
28876: LD_INT 81
28878: PUSH
28879: LD_VAR 0 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PPUSH
28888: CALL_OW 70
28892: ST_TO_ADDR
// end ;
28893: LD_VAR 0 3
28897: RET
// export function IsExtension ( b ) ; begin
28898: LD_INT 0
28900: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28901: LD_ADDR_VAR 0 2
28905: PUSH
28906: LD_VAR 0 1
28910: PUSH
28911: LD_INT 23
28913: PUSH
28914: LD_INT 20
28916: PUSH
28917: LD_INT 22
28919: PUSH
28920: LD_INT 17
28922: PUSH
28923: LD_INT 24
28925: PUSH
28926: LD_INT 21
28928: PUSH
28929: LD_INT 19
28931: PUSH
28932: LD_INT 16
28934: PUSH
28935: LD_INT 25
28937: PUSH
28938: LD_INT 18
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: IN
28953: ST_TO_ADDR
// end ;
28954: LD_VAR 0 2
28958: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28959: LD_INT 0
28961: PPUSH
28962: PPUSH
28963: PPUSH
// result := [ ] ;
28964: LD_ADDR_VAR 0 4
28968: PUSH
28969: EMPTY
28970: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28971: LD_ADDR_VAR 0 5
28975: PUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: LD_INT 21
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 70
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 5
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29069
// if checkLink then
29005: LD_VAR 0 3
29009: IFFALSE 29059
// begin for i in tmp do
29011: LD_ADDR_VAR 0 6
29015: PUSH
29016: LD_VAR 0 5
29020: PUSH
29021: FOR_IN
29022: IFFALSE 29057
// if GetBase ( i ) <> base then
29024: LD_VAR 0 6
29028: PPUSH
29029: CALL_OW 274
29033: PUSH
29034: LD_VAR 0 1
29038: NONEQUAL
29039: IFFALSE 29055
// ComLinkToBase ( base , i ) ;
29041: LD_VAR 0 1
29045: PPUSH
29046: LD_VAR 0 6
29050: PPUSH
29051: CALL_OW 169
29055: GO 29021
29057: POP
29058: POP
// end ; result := tmp ;
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: LD_VAR 0 5
29068: ST_TO_ADDR
// end ;
29069: LD_VAR 0 4
29073: RET
// export function ComComplete ( units , b ) ; var i ; begin
29074: LD_INT 0
29076: PPUSH
29077: PPUSH
// if not units then
29078: LD_VAR 0 1
29082: NOT
29083: IFFALSE 29087
// exit ;
29085: GO 29177
// for i in units do
29087: LD_ADDR_VAR 0 4
29091: PUSH
29092: LD_VAR 0 1
29096: PUSH
29097: FOR_IN
29098: IFFALSE 29175
// if BuildingStatus ( b ) = bs_build then
29100: LD_VAR 0 2
29104: PPUSH
29105: CALL_OW 461
29109: PUSH
29110: LD_INT 1
29112: EQUAL
29113: IFFALSE 29173
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29115: LD_VAR 0 4
29119: PPUSH
29120: LD_STRING h
29122: PUSH
29123: LD_VAR 0 2
29127: PPUSH
29128: CALL_OW 250
29132: PUSH
29133: LD_VAR 0 2
29137: PPUSH
29138: CALL_OW 251
29142: PUSH
29143: LD_VAR 0 2
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: PPUSH
29169: CALL_OW 446
29173: GO 29097
29175: POP
29176: POP
// end ;
29177: LD_VAR 0 3
29181: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29182: LD_INT 0
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29190: LD_VAR 0 1
29194: NOT
29195: PUSH
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 263
29205: PUSH
29206: LD_INT 2
29208: NONEQUAL
29209: OR
29210: IFFALSE 29214
// exit ;
29212: GO 29530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29214: LD_ADDR_VAR 0 6
29218: PUSH
29219: LD_INT 22
29221: PUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 255
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 30
29241: PUSH
29242: LD_INT 36
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 34
29251: PUSH
29252: LD_INT 31
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PPUSH
29268: CALL_OW 69
29272: ST_TO_ADDR
// if not tmp then
29273: LD_VAR 0 6
29277: NOT
29278: IFFALSE 29282
// exit ;
29280: GO 29530
// result := [ ] ;
29282: LD_ADDR_VAR 0 2
29286: PUSH
29287: EMPTY
29288: ST_TO_ADDR
// for i in tmp do
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_VAR 0 6
29298: PUSH
29299: FOR_IN
29300: IFFALSE 29371
// begin t := UnitsInside ( i ) ;
29302: LD_ADDR_VAR 0 4
29306: PUSH
29307: LD_VAR 0 3
29311: PPUSH
29312: CALL_OW 313
29316: ST_TO_ADDR
// if t then
29317: LD_VAR 0 4
29321: IFFALSE 29369
// for j in t do
29323: LD_ADDR_VAR 0 7
29327: PUSH
29328: LD_VAR 0 4
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29367
// result := Replace ( result , result + 1 , j ) ;
29336: LD_ADDR_VAR 0 2
29340: PUSH
29341: LD_VAR 0 2
29345: PPUSH
29346: LD_VAR 0 2
29350: PUSH
29351: LD_INT 1
29353: PLUS
29354: PPUSH
29355: LD_VAR 0 7
29359: PPUSH
29360: CALL_OW 1
29364: ST_TO_ADDR
29365: GO 29333
29367: POP
29368: POP
// end ;
29369: GO 29299
29371: POP
29372: POP
// if not result then
29373: LD_VAR 0 2
29377: NOT
29378: IFFALSE 29382
// exit ;
29380: GO 29530
// mech := result [ 1 ] ;
29382: LD_ADDR_VAR 0 5
29386: PUSH
29387: LD_VAR 0 2
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: ST_TO_ADDR
// if result > 1 then
29396: LD_VAR 0 2
29400: PUSH
29401: LD_INT 1
29403: GREATER
29404: IFFALSE 29516
// begin for i = 2 to result do
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: DOUBLE
29412: LD_INT 2
29414: DEC
29415: ST_TO_ADDR
29416: LD_VAR 0 2
29420: PUSH
29421: FOR_TO
29422: IFFALSE 29514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29424: LD_ADDR_VAR 0 4
29428: PUSH
29429: LD_VAR 0 2
29433: PUSH
29434: LD_VAR 0 3
29438: ARRAY
29439: PPUSH
29440: LD_INT 3
29442: PPUSH
29443: CALL_OW 259
29447: PUSH
29448: LD_VAR 0 2
29452: PUSH
29453: LD_VAR 0 3
29457: ARRAY
29458: PPUSH
29459: CALL_OW 432
29463: MINUS
29464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29465: LD_VAR 0 4
29469: PUSH
29470: LD_VAR 0 5
29474: PPUSH
29475: LD_INT 3
29477: PPUSH
29478: CALL_OW 259
29482: PUSH
29483: LD_VAR 0 5
29487: PPUSH
29488: CALL_OW 432
29492: MINUS
29493: GREATEREQUAL
29494: IFFALSE 29512
// mech := result [ i ] ;
29496: LD_ADDR_VAR 0 5
29500: PUSH
29501: LD_VAR 0 2
29505: PUSH
29506: LD_VAR 0 3
29510: ARRAY
29511: ST_TO_ADDR
// end ;
29512: GO 29421
29514: POP
29515: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29516: LD_VAR 0 1
29520: PPUSH
29521: LD_VAR 0 5
29525: PPUSH
29526: CALL_OW 135
// end ;
29530: LD_VAR 0 2
29534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29535: LD_INT 0
29537: PPUSH
29538: PPUSH
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
// result := [ ] ;
29550: LD_ADDR_VAR 0 7
29554: PUSH
29555: EMPTY
29556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 266
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: IN
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 31216
// if name then
29582: LD_VAR 0 3
29586: IFFALSE 29602
// SetBName ( base_dep , name ) ;
29588: LD_VAR 0 1
29592: PPUSH
29593: LD_VAR 0 3
29597: PPUSH
29598: CALL_OW 500
// base := GetBase ( base_dep ) ;
29602: LD_ADDR_VAR 0 15
29606: PUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL_OW 274
29616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29617: LD_ADDR_VAR 0 16
29621: PUSH
29622: LD_VAR 0 1
29626: PPUSH
29627: CALL_OW 255
29631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29632: LD_ADDR_VAR 0 17
29636: PUSH
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 248
29646: ST_TO_ADDR
// if sources then
29647: LD_VAR 0 5
29651: IFFALSE 29698
// for i = 1 to 3 do
29653: LD_ADDR_VAR 0 8
29657: PUSH
29658: DOUBLE
29659: LD_INT 1
29661: DEC
29662: ST_TO_ADDR
29663: LD_INT 3
29665: PUSH
29666: FOR_TO
29667: IFFALSE 29696
// AddResourceType ( base , i , sources [ i ] ) ;
29669: LD_VAR 0 15
29673: PPUSH
29674: LD_VAR 0 8
29678: PPUSH
29679: LD_VAR 0 5
29683: PUSH
29684: LD_VAR 0 8
29688: ARRAY
29689: PPUSH
29690: CALL_OW 276
29694: GO 29666
29696: POP
29697: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29698: LD_ADDR_VAR 0 18
29702: PUSH
29703: LD_VAR 0 15
29707: PPUSH
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_INT 1
29715: PPUSH
29716: CALL 28959 0 3
29720: ST_TO_ADDR
// InitHc ;
29721: CALL_OW 19
// InitUc ;
29725: CALL_OW 18
// uc_side := side ;
29729: LD_ADDR_OWVAR 20
29733: PUSH
29734: LD_VAR 0 16
29738: ST_TO_ADDR
// uc_nation := nation ;
29739: LD_ADDR_OWVAR 21
29743: PUSH
29744: LD_VAR 0 17
29748: ST_TO_ADDR
// if buildings then
29749: LD_VAR 0 18
29753: IFFALSE 31075
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29755: LD_ADDR_VAR 0 19
29759: PUSH
29760: LD_VAR 0 18
29764: PPUSH
29765: LD_INT 2
29767: PUSH
29768: LD_INT 30
29770: PUSH
29771: LD_INT 29
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 30
29780: PUSH
29781: LD_INT 30
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 72
29797: ST_TO_ADDR
// if tmp then
29798: LD_VAR 0 19
29802: IFFALSE 29850
// for i in tmp do
29804: LD_ADDR_VAR 0 8
29808: PUSH
29809: LD_VAR 0 19
29813: PUSH
29814: FOR_IN
29815: IFFALSE 29848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29817: LD_VAR 0 8
29821: PPUSH
29822: CALL_OW 250
29826: PPUSH
29827: LD_VAR 0 8
29831: PPUSH
29832: CALL_OW 251
29836: PPUSH
29837: LD_VAR 0 16
29841: PPUSH
29842: CALL_OW 441
29846: GO 29814
29848: POP
29849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29850: LD_VAR 0 18
29854: PPUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: LD_INT 32
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 33
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 72
29887: IFFALSE 29975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29889: LD_ADDR_VAR 0 8
29893: PUSH
29894: LD_VAR 0 18
29898: PPUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 30
29904: PUSH
29905: LD_INT 32
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 30
29914: PUSH
29915: LD_INT 33
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 72
29931: PUSH
29932: FOR_IN
29933: IFFALSE 29973
// begin if not GetBWeapon ( i ) then
29935: LD_VAR 0 8
29939: PPUSH
29940: CALL_OW 269
29944: NOT
29945: IFFALSE 29971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29947: LD_VAR 0 8
29951: PPUSH
29952: LD_VAR 0 8
29956: PPUSH
29957: LD_VAR 0 2
29961: PPUSH
29962: CALL 31221 0 2
29966: PPUSH
29967: CALL_OW 431
// end ;
29971: GO 29932
29973: POP
29974: POP
// end ; for i = 1 to personel do
29975: LD_ADDR_VAR 0 8
29979: PUSH
29980: DOUBLE
29981: LD_INT 1
29983: DEC
29984: ST_TO_ADDR
29985: LD_VAR 0 6
29989: PUSH
29990: FOR_TO
29991: IFFALSE 31055
// begin if i > 4 then
29993: LD_VAR 0 8
29997: PUSH
29998: LD_INT 4
30000: GREATER
30001: IFFALSE 30005
// break ;
30003: GO 31055
// case i of 1 :
30005: LD_VAR 0 8
30009: PUSH
30010: LD_INT 1
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30098
30018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30019: LD_ADDR_VAR 0 12
30023: PUSH
30024: LD_VAR 0 18
30028: PPUSH
30029: LD_INT 22
30031: PUSH
30032: LD_VAR 0 16
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 58
30043: PUSH
30044: EMPTY
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 30
30052: PUSH
30053: LD_INT 32
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 30
30062: PUSH
30063: LD_INT 4
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 30
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL_OW 72
30095: ST_TO_ADDR
30096: GO 30320
30098: LD_INT 2
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30168
30106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30107: LD_ADDR_VAR 0 12
30111: PUSH
30112: LD_VAR 0 18
30116: PPUSH
30117: LD_INT 22
30119: PUSH
30120: LD_VAR 0 16
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PPUSH
30161: CALL_OW 72
30165: ST_TO_ADDR
30166: GO 30320
30168: LD_INT 3
30170: DOUBLE
30171: EQUAL
30172: IFTRUE 30176
30174: GO 30238
30176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30177: LD_ADDR_VAR 0 12
30181: PUSH
30182: LD_VAR 0 18
30186: PPUSH
30187: LD_INT 22
30189: PUSH
30190: LD_VAR 0 16
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 30
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 72
30235: ST_TO_ADDR
30236: GO 30320
30238: LD_INT 4
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30319
30246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30247: LD_ADDR_VAR 0 12
30251: PUSH
30252: LD_VAR 0 18
30256: PPUSH
30257: LD_INT 22
30259: PUSH
30260: LD_VAR 0 16
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 30
30274: PUSH
30275: LD_INT 6
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 30
30284: PUSH
30285: LD_INT 7
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 30
30294: PUSH
30295: LD_INT 8
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 72
30316: ST_TO_ADDR
30317: GO 30320
30319: POP
// if i = 1 then
30320: LD_VAR 0 8
30324: PUSH
30325: LD_INT 1
30327: EQUAL
30328: IFFALSE 30439
// begin tmp := [ ] ;
30330: LD_ADDR_VAR 0 19
30334: PUSH
30335: EMPTY
30336: ST_TO_ADDR
// for j in f do
30337: LD_ADDR_VAR 0 9
30341: PUSH
30342: LD_VAR 0 12
30346: PUSH
30347: FOR_IN
30348: IFFALSE 30421
// if GetBType ( j ) = b_bunker then
30350: LD_VAR 0 9
30354: PPUSH
30355: CALL_OW 266
30359: PUSH
30360: LD_INT 32
30362: EQUAL
30363: IFFALSE 30390
// tmp := Insert ( tmp , 1 , j ) else
30365: LD_ADDR_VAR 0 19
30369: PUSH
30370: LD_VAR 0 19
30374: PPUSH
30375: LD_INT 1
30377: PPUSH
30378: LD_VAR 0 9
30382: PPUSH
30383: CALL_OW 2
30387: ST_TO_ADDR
30388: GO 30419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30390: LD_ADDR_VAR 0 19
30394: PUSH
30395: LD_VAR 0 19
30399: PPUSH
30400: LD_VAR 0 19
30404: PUSH
30405: LD_INT 1
30407: PLUS
30408: PPUSH
30409: LD_VAR 0 9
30413: PPUSH
30414: CALL_OW 2
30418: ST_TO_ADDR
30419: GO 30347
30421: POP
30422: POP
// if tmp then
30423: LD_VAR 0 19
30427: IFFALSE 30439
// f := tmp ;
30429: LD_ADDR_VAR 0 12
30433: PUSH
30434: LD_VAR 0 19
30438: ST_TO_ADDR
// end ; x := personel [ i ] ;
30439: LD_ADDR_VAR 0 13
30443: PUSH
30444: LD_VAR 0 6
30448: PUSH
30449: LD_VAR 0 8
30453: ARRAY
30454: ST_TO_ADDR
// if x = - 1 then
30455: LD_VAR 0 13
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: EQUAL
30464: IFFALSE 30673
// begin for j in f do
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: LD_VAR 0 12
30475: PUSH
30476: FOR_IN
30477: IFFALSE 30669
// repeat InitHc ;
30479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30483: LD_VAR 0 9
30487: PPUSH
30488: CALL_OW 266
30492: PUSH
30493: LD_INT 5
30495: EQUAL
30496: IFFALSE 30566
// begin if UnitsInside ( j ) < 3 then
30498: LD_VAR 0 9
30502: PPUSH
30503: CALL_OW 313
30507: PUSH
30508: LD_INT 3
30510: LESS
30511: IFFALSE 30547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30513: LD_INT 0
30515: PPUSH
30516: LD_INT 5
30518: PUSH
30519: LD_INT 8
30521: PUSH
30522: LD_INT 9
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: PUSH
30530: LD_VAR 0 17
30534: ARRAY
30535: PPUSH
30536: LD_VAR 0 4
30540: PPUSH
30541: CALL_OW 380
30545: GO 30564
// PrepareHuman ( false , i , skill ) ;
30547: LD_INT 0
30549: PPUSH
30550: LD_VAR 0 8
30554: PPUSH
30555: LD_VAR 0 4
30559: PPUSH
30560: CALL_OW 380
// end else
30564: GO 30583
// PrepareHuman ( false , i , skill ) ;
30566: LD_INT 0
30568: PPUSH
30569: LD_VAR 0 8
30573: PPUSH
30574: LD_VAR 0 4
30578: PPUSH
30579: CALL_OW 380
// un := CreateHuman ;
30583: LD_ADDR_VAR 0 14
30587: PUSH
30588: CALL_OW 44
30592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30593: LD_ADDR_VAR 0 7
30597: PUSH
30598: LD_VAR 0 7
30602: PPUSH
30603: LD_INT 1
30605: PPUSH
30606: LD_VAR 0 14
30610: PPUSH
30611: CALL_OW 2
30615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30616: LD_VAR 0 14
30620: PPUSH
30621: LD_VAR 0 9
30625: PPUSH
30626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30630: LD_VAR 0 9
30634: PPUSH
30635: CALL_OW 313
30639: PUSH
30640: LD_INT 6
30642: EQUAL
30643: PUSH
30644: LD_VAR 0 9
30648: PPUSH
30649: CALL_OW 266
30653: PUSH
30654: LD_INT 32
30656: PUSH
30657: LD_INT 31
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: IN
30664: OR
30665: IFFALSE 30479
30667: GO 30476
30669: POP
30670: POP
// end else
30671: GO 31053
// for j = 1 to x do
30673: LD_ADDR_VAR 0 9
30677: PUSH
30678: DOUBLE
30679: LD_INT 1
30681: DEC
30682: ST_TO_ADDR
30683: LD_VAR 0 13
30687: PUSH
30688: FOR_TO
30689: IFFALSE 31051
// begin InitHc ;
30691: CALL_OW 19
// if not f then
30695: LD_VAR 0 12
30699: NOT
30700: IFFALSE 30789
// begin PrepareHuman ( false , i , skill ) ;
30702: LD_INT 0
30704: PPUSH
30705: LD_VAR 0 8
30709: PPUSH
30710: LD_VAR 0 4
30714: PPUSH
30715: CALL_OW 380
// un := CreateHuman ;
30719: LD_ADDR_VAR 0 14
30723: PUSH
30724: CALL_OW 44
30728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30729: LD_ADDR_VAR 0 7
30733: PUSH
30734: LD_VAR 0 7
30738: PPUSH
30739: LD_INT 1
30741: PPUSH
30742: LD_VAR 0 14
30746: PPUSH
30747: CALL_OW 2
30751: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30752: LD_VAR 0 14
30756: PPUSH
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 250
30766: PPUSH
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 251
30776: PPUSH
30777: LD_INT 10
30779: PPUSH
30780: LD_INT 0
30782: PPUSH
30783: CALL_OW 50
// continue ;
30787: GO 30688
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30789: LD_VAR 0 12
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: CALL_OW 313
30802: PUSH
30803: LD_VAR 0 12
30807: PUSH
30808: LD_INT 1
30810: ARRAY
30811: PPUSH
30812: CALL_OW 266
30816: PUSH
30817: LD_INT 32
30819: PUSH
30820: LD_INT 31
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: IN
30827: AND
30828: PUSH
30829: LD_VAR 0 12
30833: PUSH
30834: LD_INT 1
30836: ARRAY
30837: PPUSH
30838: CALL_OW 313
30842: PUSH
30843: LD_INT 6
30845: EQUAL
30846: OR
30847: IFFALSE 30867
// f := Delete ( f , 1 ) ;
30849: LD_ADDR_VAR 0 12
30853: PUSH
30854: LD_VAR 0 12
30858: PPUSH
30859: LD_INT 1
30861: PPUSH
30862: CALL_OW 3
30866: ST_TO_ADDR
// if not f then
30867: LD_VAR 0 12
30871: NOT
30872: IFFALSE 30890
// begin x := x + 2 ;
30874: LD_ADDR_VAR 0 13
30878: PUSH
30879: LD_VAR 0 13
30883: PUSH
30884: LD_INT 2
30886: PLUS
30887: ST_TO_ADDR
// continue ;
30888: GO 30688
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30890: LD_VAR 0 12
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: CALL_OW 266
30903: PUSH
30904: LD_INT 5
30906: EQUAL
30907: IFFALSE 30981
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30909: LD_VAR 0 12
30913: PUSH
30914: LD_INT 1
30916: ARRAY
30917: PPUSH
30918: CALL_OW 313
30922: PUSH
30923: LD_INT 3
30925: LESS
30926: IFFALSE 30962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30928: LD_INT 0
30930: PPUSH
30931: LD_INT 5
30933: PUSH
30934: LD_INT 8
30936: PUSH
30937: LD_INT 9
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: PUSH
30945: LD_VAR 0 17
30949: ARRAY
30950: PPUSH
30951: LD_VAR 0 4
30955: PPUSH
30956: CALL_OW 380
30960: GO 30979
// PrepareHuman ( false , i , skill ) ;
30962: LD_INT 0
30964: PPUSH
30965: LD_VAR 0 8
30969: PPUSH
30970: LD_VAR 0 4
30974: PPUSH
30975: CALL_OW 380
// end else
30979: GO 30998
// PrepareHuman ( false , i , skill ) ;
30981: LD_INT 0
30983: PPUSH
30984: LD_VAR 0 8
30988: PPUSH
30989: LD_VAR 0 4
30993: PPUSH
30994: CALL_OW 380
// un := CreateHuman ;
30998: LD_ADDR_VAR 0 14
31002: PUSH
31003: CALL_OW 44
31007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31008: LD_ADDR_VAR 0 7
31012: PUSH
31013: LD_VAR 0 7
31017: PPUSH
31018: LD_INT 1
31020: PPUSH
31021: LD_VAR 0 14
31025: PPUSH
31026: CALL_OW 2
31030: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31031: LD_VAR 0 14
31035: PPUSH
31036: LD_VAR 0 12
31040: PUSH
31041: LD_INT 1
31043: ARRAY
31044: PPUSH
31045: CALL_OW 52
// end ;
31049: GO 30688
31051: POP
31052: POP
// end ;
31053: GO 29990
31055: POP
31056: POP
// result := result ^ buildings ;
31057: LD_ADDR_VAR 0 7
31061: PUSH
31062: LD_VAR 0 7
31066: PUSH
31067: LD_VAR 0 18
31071: ADD
31072: ST_TO_ADDR
// end else
31073: GO 31216
// begin for i = 1 to personel do
31075: LD_ADDR_VAR 0 8
31079: PUSH
31080: DOUBLE
31081: LD_INT 1
31083: DEC
31084: ST_TO_ADDR
31085: LD_VAR 0 6
31089: PUSH
31090: FOR_TO
31091: IFFALSE 31214
// begin if i > 4 then
31093: LD_VAR 0 8
31097: PUSH
31098: LD_INT 4
31100: GREATER
31101: IFFALSE 31105
// break ;
31103: GO 31214
// x := personel [ i ] ;
31105: LD_ADDR_VAR 0 13
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: LD_VAR 0 8
31119: ARRAY
31120: ST_TO_ADDR
// if x = - 1 then
31121: LD_VAR 0 13
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: EQUAL
31130: IFFALSE 31134
// continue ;
31132: GO 31090
// PrepareHuman ( false , i , skill ) ;
31134: LD_INT 0
31136: PPUSH
31137: LD_VAR 0 8
31141: PPUSH
31142: LD_VAR 0 4
31146: PPUSH
31147: CALL_OW 380
// un := CreateHuman ;
31151: LD_ADDR_VAR 0 14
31155: PUSH
31156: CALL_OW 44
31160: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31161: LD_VAR 0 14
31165: PPUSH
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 250
31175: PPUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 251
31185: PPUSH
31186: LD_INT 10
31188: PPUSH
31189: LD_INT 0
31191: PPUSH
31192: CALL_OW 50
// result := result ^ un ;
31196: LD_ADDR_VAR 0 7
31200: PUSH
31201: LD_VAR 0 7
31205: PUSH
31206: LD_VAR 0 14
31210: ADD
31211: ST_TO_ADDR
// end ;
31212: GO 31090
31214: POP
31215: POP
// end ; end ;
31216: LD_VAR 0 7
31220: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31221: LD_INT 0
31223: PPUSH
31224: PPUSH
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
31233: PPUSH
31234: PPUSH
31235: PPUSH
31236: PPUSH
31237: PPUSH
31238: PPUSH
// result := false ;
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 0
31246: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31247: LD_VAR 0 1
31251: NOT
31252: PUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: CALL_OW 266
31262: PUSH
31263: LD_INT 32
31265: PUSH
31266: LD_INT 33
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: IN
31273: NOT
31274: OR
31275: IFFALSE 31279
// exit ;
31277: GO 32388
// nat := GetNation ( tower ) ;
31279: LD_ADDR_VAR 0 12
31283: PUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: CALL_OW 248
31293: ST_TO_ADDR
// side := GetSide ( tower ) ;
31294: LD_ADDR_VAR 0 16
31298: PUSH
31299: LD_VAR 0 1
31303: PPUSH
31304: CALL_OW 255
31308: ST_TO_ADDR
// x := GetX ( tower ) ;
31309: LD_ADDR_VAR 0 10
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 250
31323: ST_TO_ADDR
// y := GetY ( tower ) ;
31324: LD_ADDR_VAR 0 11
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 251
31338: ST_TO_ADDR
// if not x or not y then
31339: LD_VAR 0 10
31343: NOT
31344: PUSH
31345: LD_VAR 0 11
31349: NOT
31350: OR
31351: IFFALSE 31355
// exit ;
31353: GO 32388
// weapon := 0 ;
31355: LD_ADDR_VAR 0 18
31359: PUSH
31360: LD_INT 0
31362: ST_TO_ADDR
// fac_list := [ ] ;
31363: LD_ADDR_VAR 0 17
31367: PUSH
31368: EMPTY
31369: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31370: LD_ADDR_VAR 0 6
31374: PUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 274
31384: PPUSH
31385: LD_VAR 0 2
31389: PPUSH
31390: LD_INT 0
31392: PPUSH
31393: CALL 28959 0 3
31397: PPUSH
31398: LD_INT 30
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PPUSH
31408: CALL_OW 72
31412: ST_TO_ADDR
// if not factories then
31413: LD_VAR 0 6
31417: NOT
31418: IFFALSE 31422
// exit ;
31420: GO 32388
// for i in factories do
31422: LD_ADDR_VAR 0 8
31426: PUSH
31427: LD_VAR 0 6
31431: PUSH
31432: FOR_IN
31433: IFFALSE 31458
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31435: LD_ADDR_VAR 0 17
31439: PUSH
31440: LD_VAR 0 17
31444: PUSH
31445: LD_VAR 0 8
31449: PPUSH
31450: CALL_OW 478
31454: UNION
31455: ST_TO_ADDR
31456: GO 31432
31458: POP
31459: POP
// if not fac_list then
31460: LD_VAR 0 17
31464: NOT
31465: IFFALSE 31469
// exit ;
31467: GO 32388
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31469: LD_ADDR_VAR 0 5
31473: PUSH
31474: LD_INT 4
31476: PUSH
31477: LD_INT 5
31479: PUSH
31480: LD_INT 9
31482: PUSH
31483: LD_INT 10
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: LD_INT 7
31491: PUSH
31492: LD_INT 11
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 27
31506: PUSH
31507: LD_INT 28
31509: PUSH
31510: LD_INT 26
31512: PUSH
31513: LD_INT 30
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 43
31524: PUSH
31525: LD_INT 44
31527: PUSH
31528: LD_INT 46
31530: PUSH
31531: LD_INT 45
31533: PUSH
31534: LD_INT 47
31536: PUSH
31537: LD_INT 49
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: PUSH
31553: LD_VAR 0 12
31557: ARRAY
31558: ST_TO_ADDR
// list := list isect fac_list ;
31559: LD_ADDR_VAR 0 5
31563: PUSH
31564: LD_VAR 0 5
31568: PUSH
31569: LD_VAR 0 17
31573: ISECT
31574: ST_TO_ADDR
// if not list then
31575: LD_VAR 0 5
31579: NOT
31580: IFFALSE 31584
// exit ;
31582: GO 32388
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31584: LD_VAR 0 12
31588: PUSH
31589: LD_INT 3
31591: EQUAL
31592: PUSH
31593: LD_INT 49
31595: PUSH
31596: LD_VAR 0 5
31600: IN
31601: AND
31602: PUSH
31603: LD_INT 31
31605: PPUSH
31606: LD_VAR 0 16
31610: PPUSH
31611: CALL_OW 321
31615: PUSH
31616: LD_INT 2
31618: EQUAL
31619: AND
31620: IFFALSE 31680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31622: LD_INT 22
31624: PUSH
31625: LD_VAR 0 16
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 35
31636: PUSH
31637: LD_INT 49
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 91
31646: PUSH
31647: LD_VAR 0 1
31651: PUSH
31652: LD_INT 10
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 69
31669: NOT
31670: IFFALSE 31680
// weapon := ru_time_lapser ;
31672: LD_ADDR_VAR 0 18
31676: PUSH
31677: LD_INT 49
31679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31680: LD_VAR 0 12
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: IN
31695: PUSH
31696: LD_INT 11
31698: PUSH
31699: LD_VAR 0 5
31703: IN
31704: PUSH
31705: LD_INT 30
31707: PUSH
31708: LD_VAR 0 5
31712: IN
31713: OR
31714: AND
31715: PUSH
31716: LD_INT 6
31718: PPUSH
31719: LD_VAR 0 16
31723: PPUSH
31724: CALL_OW 321
31728: PUSH
31729: LD_INT 2
31731: EQUAL
31732: AND
31733: IFFALSE 31898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31735: LD_INT 22
31737: PUSH
31738: LD_VAR 0 16
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: LD_INT 35
31752: PUSH
31753: LD_INT 11
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 35
31762: PUSH
31763: LD_INT 30
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 91
31777: PUSH
31778: LD_VAR 0 1
31782: PUSH
31783: LD_INT 18
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 69
31800: NOT
31801: PUSH
31802: LD_INT 22
31804: PUSH
31805: LD_VAR 0 16
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 30
31819: PUSH
31820: LD_INT 32
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 30
31829: PUSH
31830: LD_INT 33
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 91
31844: PUSH
31845: LD_VAR 0 1
31849: PUSH
31850: LD_INT 12
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: PUSH
31863: EMPTY
31864: LIST
31865: PPUSH
31866: CALL_OW 69
31870: PUSH
31871: LD_INT 2
31873: GREATER
31874: AND
31875: IFFALSE 31898
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31877: LD_ADDR_VAR 0 18
31881: PUSH
31882: LD_INT 11
31884: PUSH
31885: LD_INT 30
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_VAR 0 12
31896: ARRAY
31897: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31898: LD_VAR 0 18
31902: NOT
31903: PUSH
31904: LD_INT 40
31906: PPUSH
31907: LD_VAR 0 16
31911: PPUSH
31912: CALL_OW 321
31916: PUSH
31917: LD_INT 2
31919: EQUAL
31920: AND
31921: PUSH
31922: LD_INT 7
31924: PUSH
31925: LD_VAR 0 5
31929: IN
31930: PUSH
31931: LD_INT 28
31933: PUSH
31934: LD_VAR 0 5
31938: IN
31939: OR
31940: PUSH
31941: LD_INT 45
31943: PUSH
31944: LD_VAR 0 5
31948: IN
31949: OR
31950: AND
31951: IFFALSE 32205
// begin hex := GetHexInfo ( x , y ) ;
31953: LD_ADDR_VAR 0 4
31957: PUSH
31958: LD_VAR 0 10
31962: PPUSH
31963: LD_VAR 0 11
31967: PPUSH
31968: CALL_OW 546
31972: ST_TO_ADDR
// if hex [ 1 ] then
31973: LD_VAR 0 4
31977: PUSH
31978: LD_INT 1
31980: ARRAY
31981: IFFALSE 31985
// exit ;
31983: GO 32388
// height := hex [ 2 ] ;
31985: LD_ADDR_VAR 0 15
31989: PUSH
31990: LD_VAR 0 4
31994: PUSH
31995: LD_INT 2
31997: ARRAY
31998: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31999: LD_ADDR_VAR 0 14
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: LD_INT 5
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
// for i in tmp do
32022: LD_ADDR_VAR 0 8
32026: PUSH
32027: LD_VAR 0 14
32031: PUSH
32032: FOR_IN
32033: IFFALSE 32203
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32035: LD_ADDR_VAR 0 9
32039: PUSH
32040: LD_VAR 0 10
32044: PPUSH
32045: LD_VAR 0 8
32049: PPUSH
32050: LD_INT 5
32052: PPUSH
32053: CALL_OW 272
32057: PUSH
32058: LD_VAR 0 11
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_INT 5
32070: PPUSH
32071: CALL_OW 273
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32080: LD_VAR 0 9
32084: PUSH
32085: LD_INT 1
32087: ARRAY
32088: PPUSH
32089: LD_VAR 0 9
32093: PUSH
32094: LD_INT 2
32096: ARRAY
32097: PPUSH
32098: CALL_OW 488
32102: IFFALSE 32201
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32104: LD_ADDR_VAR 0 4
32108: PUSH
32109: LD_VAR 0 9
32113: PUSH
32114: LD_INT 1
32116: ARRAY
32117: PPUSH
32118: LD_VAR 0 9
32122: PUSH
32123: LD_INT 2
32125: ARRAY
32126: PPUSH
32127: CALL_OW 546
32131: ST_TO_ADDR
// if hex [ 1 ] then
32132: LD_VAR 0 4
32136: PUSH
32137: LD_INT 1
32139: ARRAY
32140: IFFALSE 32144
// continue ;
32142: GO 32032
// h := hex [ 2 ] ;
32144: LD_ADDR_VAR 0 13
32148: PUSH
32149: LD_VAR 0 4
32153: PUSH
32154: LD_INT 2
32156: ARRAY
32157: ST_TO_ADDR
// if h + 7 < height then
32158: LD_VAR 0 13
32162: PUSH
32163: LD_INT 7
32165: PLUS
32166: PUSH
32167: LD_VAR 0 15
32171: LESS
32172: IFFALSE 32201
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32174: LD_ADDR_VAR 0 18
32178: PUSH
32179: LD_INT 7
32181: PUSH
32182: LD_INT 28
32184: PUSH
32185: LD_INT 45
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: PUSH
32193: LD_VAR 0 12
32197: ARRAY
32198: ST_TO_ADDR
// break ;
32199: GO 32203
// end ; end ; end ;
32201: GO 32032
32203: POP
32204: POP
// end ; if not weapon then
32205: LD_VAR 0 18
32209: NOT
32210: IFFALSE 32270
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: LD_VAR 0 5
32221: PUSH
32222: LD_INT 11
32224: PUSH
32225: LD_INT 30
32227: PUSH
32228: LD_INT 49
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: DIFF
32236: ST_TO_ADDR
// if not list then
32237: LD_VAR 0 5
32241: NOT
32242: IFFALSE 32246
// exit ;
32244: GO 32388
// weapon := list [ rand ( 1 , list ) ] ;
32246: LD_ADDR_VAR 0 18
32250: PUSH
32251: LD_VAR 0 5
32255: PUSH
32256: LD_INT 1
32258: PPUSH
32259: LD_VAR 0 5
32263: PPUSH
32264: CALL_OW 12
32268: ARRAY
32269: ST_TO_ADDR
// end ; if weapon then
32270: LD_VAR 0 18
32274: IFFALSE 32388
// begin tmp := CostOfWeapon ( weapon ) ;
32276: LD_ADDR_VAR 0 14
32280: PUSH
32281: LD_VAR 0 18
32285: PPUSH
32286: CALL_OW 451
32290: ST_TO_ADDR
// j := GetBase ( tower ) ;
32291: LD_ADDR_VAR 0 9
32295: PUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 274
32305: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32306: LD_VAR 0 9
32310: PPUSH
32311: LD_INT 1
32313: PPUSH
32314: CALL_OW 275
32318: PUSH
32319: LD_VAR 0 14
32323: PUSH
32324: LD_INT 1
32326: ARRAY
32327: GREATEREQUAL
32328: PUSH
32329: LD_VAR 0 9
32333: PPUSH
32334: LD_INT 2
32336: PPUSH
32337: CALL_OW 275
32341: PUSH
32342: LD_VAR 0 14
32346: PUSH
32347: LD_INT 2
32349: ARRAY
32350: GREATEREQUAL
32351: AND
32352: PUSH
32353: LD_VAR 0 9
32357: PPUSH
32358: LD_INT 3
32360: PPUSH
32361: CALL_OW 275
32365: PUSH
32366: LD_VAR 0 14
32370: PUSH
32371: LD_INT 3
32373: ARRAY
32374: GREATEREQUAL
32375: AND
32376: IFFALSE 32388
// result := weapon ;
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: LD_VAR 0 18
32387: ST_TO_ADDR
// end ; end ;
32388: LD_VAR 0 3
32392: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32393: LD_INT 0
32395: PPUSH
32396: PPUSH
// result := true ;
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 1
32404: ST_TO_ADDR
// if array1 = array2 then
32405: LD_VAR 0 1
32409: PUSH
32410: LD_VAR 0 2
32414: EQUAL
32415: IFFALSE 32475
// begin for i = 1 to array1 do
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: DOUBLE
32423: LD_INT 1
32425: DEC
32426: ST_TO_ADDR
32427: LD_VAR 0 1
32431: PUSH
32432: FOR_TO
32433: IFFALSE 32471
// if array1 [ i ] <> array2 [ i ] then
32435: LD_VAR 0 1
32439: PUSH
32440: LD_VAR 0 4
32444: ARRAY
32445: PUSH
32446: LD_VAR 0 2
32450: PUSH
32451: LD_VAR 0 4
32455: ARRAY
32456: NONEQUAL
32457: IFFALSE 32469
// begin result := false ;
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_INT 0
32466: ST_TO_ADDR
// break ;
32467: GO 32471
// end ;
32469: GO 32432
32471: POP
32472: POP
// end else
32473: GO 32483
// result := false ;
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 0
32482: ST_TO_ADDR
// end ;
32483: LD_VAR 0 3
32487: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32488: LD_INT 0
32490: PPUSH
32491: PPUSH
// if not array1 or not array2 then
32492: LD_VAR 0 1
32496: NOT
32497: PUSH
32498: LD_VAR 0 2
32502: NOT
32503: OR
32504: IFFALSE 32508
// exit ;
32506: GO 32572
// result := true ;
32508: LD_ADDR_VAR 0 3
32512: PUSH
32513: LD_INT 1
32515: ST_TO_ADDR
// for i = 1 to array1 do
32516: LD_ADDR_VAR 0 4
32520: PUSH
32521: DOUBLE
32522: LD_INT 1
32524: DEC
32525: ST_TO_ADDR
32526: LD_VAR 0 1
32530: PUSH
32531: FOR_TO
32532: IFFALSE 32570
// if array1 [ i ] <> array2 [ i ] then
32534: LD_VAR 0 1
32538: PUSH
32539: LD_VAR 0 4
32543: ARRAY
32544: PUSH
32545: LD_VAR 0 2
32549: PUSH
32550: LD_VAR 0 4
32554: ARRAY
32555: NONEQUAL
32556: IFFALSE 32568
// begin result := false ;
32558: LD_ADDR_VAR 0 3
32562: PUSH
32563: LD_INT 0
32565: ST_TO_ADDR
// break ;
32566: GO 32570
// end ;
32568: GO 32531
32570: POP
32571: POP
// end ;
32572: LD_VAR 0 3
32576: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32577: LD_INT 0
32579: PPUSH
32580: PPUSH
32581: PPUSH
// pom := GetBase ( fac ) ;
32582: LD_ADDR_VAR 0 5
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 274
32596: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32597: LD_ADDR_VAR 0 4
32601: PUSH
32602: LD_VAR 0 2
32606: PUSH
32607: LD_INT 1
32609: ARRAY
32610: PPUSH
32611: LD_VAR 0 2
32615: PUSH
32616: LD_INT 2
32618: ARRAY
32619: PPUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 3
32627: ARRAY
32628: PPUSH
32629: LD_VAR 0 2
32633: PUSH
32634: LD_INT 4
32636: ARRAY
32637: PPUSH
32638: CALL_OW 449
32642: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32643: LD_ADDR_VAR 0 3
32647: PUSH
32648: LD_VAR 0 5
32652: PPUSH
32653: LD_INT 1
32655: PPUSH
32656: CALL_OW 275
32660: PUSH
32661: LD_VAR 0 4
32665: PUSH
32666: LD_INT 1
32668: ARRAY
32669: GREATEREQUAL
32670: PUSH
32671: LD_VAR 0 5
32675: PPUSH
32676: LD_INT 2
32678: PPUSH
32679: CALL_OW 275
32683: PUSH
32684: LD_VAR 0 4
32688: PUSH
32689: LD_INT 2
32691: ARRAY
32692: GREATEREQUAL
32693: AND
32694: PUSH
32695: LD_VAR 0 5
32699: PPUSH
32700: LD_INT 3
32702: PPUSH
32703: CALL_OW 275
32707: PUSH
32708: LD_VAR 0 4
32712: PUSH
32713: LD_INT 3
32715: ARRAY
32716: GREATEREQUAL
32717: AND
32718: ST_TO_ADDR
// end ;
32719: LD_VAR 0 3
32723: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32724: LD_INT 0
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
// pom := GetBase ( building ) ;
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 274
32744: ST_TO_ADDR
// if not pom then
32745: LD_VAR 0 3
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 32924
// btype := GetBType ( building ) ;
32754: LD_ADDR_VAR 0 5
32758: PUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 266
32768: ST_TO_ADDR
// if btype = b_armoury then
32769: LD_VAR 0 5
32773: PUSH
32774: LD_INT 4
32776: EQUAL
32777: IFFALSE 32787
// btype := b_barracks ;
32779: LD_ADDR_VAR 0 5
32783: PUSH
32784: LD_INT 5
32786: ST_TO_ADDR
// if btype = b_depot then
32787: LD_VAR 0 5
32791: PUSH
32792: LD_INT 0
32794: EQUAL
32795: IFFALSE 32805
// btype := b_warehouse ;
32797: LD_ADDR_VAR 0 5
32801: PUSH
32802: LD_INT 1
32804: ST_TO_ADDR
// if btype = b_workshop then
32805: LD_VAR 0 5
32809: PUSH
32810: LD_INT 2
32812: EQUAL
32813: IFFALSE 32823
// btype := b_factory ;
32815: LD_ADDR_VAR 0 5
32819: PUSH
32820: LD_INT 3
32822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32823: LD_ADDR_VAR 0 4
32827: PUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 248
32842: PPUSH
32843: CALL_OW 450
32847: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32848: LD_ADDR_VAR 0 2
32852: PUSH
32853: LD_VAR 0 3
32857: PPUSH
32858: LD_INT 1
32860: PPUSH
32861: CALL_OW 275
32865: PUSH
32866: LD_VAR 0 4
32870: PUSH
32871: LD_INT 1
32873: ARRAY
32874: GREATEREQUAL
32875: PUSH
32876: LD_VAR 0 3
32880: PPUSH
32881: LD_INT 2
32883: PPUSH
32884: CALL_OW 275
32888: PUSH
32889: LD_VAR 0 4
32893: PUSH
32894: LD_INT 2
32896: ARRAY
32897: GREATEREQUAL
32898: AND
32899: PUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: LD_INT 3
32907: PPUSH
32908: CALL_OW 275
32912: PUSH
32913: LD_VAR 0 4
32917: PUSH
32918: LD_INT 3
32920: ARRAY
32921: GREATEREQUAL
32922: AND
32923: ST_TO_ADDR
// end ;
32924: LD_VAR 0 2
32928: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
32933: PPUSH
// pom := GetBase ( building ) ;
32934: LD_ADDR_VAR 0 4
32938: PUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 274
32948: ST_TO_ADDR
// if not pom then
32949: LD_VAR 0 4
32953: NOT
32954: IFFALSE 32958
// exit ;
32956: GO 33059
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_VAR 0 2
32967: PPUSH
32968: LD_VAR 0 1
32972: PPUSH
32973: CALL_OW 248
32977: PPUSH
32978: CALL_OW 450
32982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32983: LD_ADDR_VAR 0 3
32987: PUSH
32988: LD_VAR 0 4
32992: PPUSH
32993: LD_INT 1
32995: PPUSH
32996: CALL_OW 275
33000: PUSH
33001: LD_VAR 0 5
33005: PUSH
33006: LD_INT 1
33008: ARRAY
33009: GREATEREQUAL
33010: PUSH
33011: LD_VAR 0 4
33015: PPUSH
33016: LD_INT 2
33018: PPUSH
33019: CALL_OW 275
33023: PUSH
33024: LD_VAR 0 5
33028: PUSH
33029: LD_INT 2
33031: ARRAY
33032: GREATEREQUAL
33033: AND
33034: PUSH
33035: LD_VAR 0 4
33039: PPUSH
33040: LD_INT 3
33042: PPUSH
33043: CALL_OW 275
33047: PUSH
33048: LD_VAR 0 5
33052: PUSH
33053: LD_INT 3
33055: ARRAY
33056: GREATEREQUAL
33057: AND
33058: ST_TO_ADDR
// end ;
33059: LD_VAR 0 3
33063: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33064: LD_INT 0
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
33076: PPUSH
// result := false ;
33077: LD_ADDR_VAR 0 8
33081: PUSH
33082: LD_INT 0
33084: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33085: LD_VAR 0 5
33089: NOT
33090: PUSH
33091: LD_VAR 0 1
33095: NOT
33096: OR
33097: PUSH
33098: LD_VAR 0 2
33102: NOT
33103: OR
33104: PUSH
33105: LD_VAR 0 3
33109: NOT
33110: OR
33111: IFFALSE 33115
// exit ;
33113: GO 33929
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33115: LD_ADDR_VAR 0 14
33119: PUSH
33120: LD_VAR 0 1
33124: PPUSH
33125: LD_VAR 0 2
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: LD_VAR 0 4
33139: PPUSH
33140: LD_VAR 0 5
33144: PUSH
33145: LD_INT 1
33147: ARRAY
33148: PPUSH
33149: CALL_OW 248
33153: PPUSH
33154: LD_INT 0
33156: PPUSH
33157: CALL 35182 0 6
33161: ST_TO_ADDR
// if not hexes then
33162: LD_VAR 0 14
33166: NOT
33167: IFFALSE 33171
// exit ;
33169: GO 33929
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33171: LD_ADDR_VAR 0 17
33175: PUSH
33176: LD_VAR 0 5
33180: PPUSH
33181: LD_INT 22
33183: PUSH
33184: LD_VAR 0 13
33188: PPUSH
33189: CALL_OW 255
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 30
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 30
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 72
33234: ST_TO_ADDR
// for i = 1 to hexes do
33235: LD_ADDR_VAR 0 9
33239: PUSH
33240: DOUBLE
33241: LD_INT 1
33243: DEC
33244: ST_TO_ADDR
33245: LD_VAR 0 14
33249: PUSH
33250: FOR_TO
33251: IFFALSE 33927
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33253: LD_ADDR_VAR 0 13
33257: PUSH
33258: LD_VAR 0 14
33262: PUSH
33263: LD_VAR 0 9
33267: ARRAY
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 14
33277: PUSH
33278: LD_VAR 0 9
33282: ARRAY
33283: PUSH
33284: LD_INT 2
33286: ARRAY
33287: PPUSH
33288: CALL_OW 428
33292: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33293: LD_VAR 0 14
33297: PUSH
33298: LD_VAR 0 9
33302: ARRAY
33303: PUSH
33304: LD_INT 1
33306: ARRAY
33307: PPUSH
33308: LD_VAR 0 14
33312: PUSH
33313: LD_VAR 0 9
33317: ARRAY
33318: PUSH
33319: LD_INT 2
33321: ARRAY
33322: PPUSH
33323: CALL_OW 351
33327: PUSH
33328: LD_VAR 0 14
33332: PUSH
33333: LD_VAR 0 9
33337: ARRAY
33338: PUSH
33339: LD_INT 1
33341: ARRAY
33342: PPUSH
33343: LD_VAR 0 14
33347: PUSH
33348: LD_VAR 0 9
33352: ARRAY
33353: PUSH
33354: LD_INT 2
33356: ARRAY
33357: PPUSH
33358: CALL_OW 488
33362: NOT
33363: OR
33364: PUSH
33365: LD_VAR 0 13
33369: PPUSH
33370: CALL_OW 247
33374: PUSH
33375: LD_INT 3
33377: EQUAL
33378: OR
33379: IFFALSE 33385
// exit ;
33381: POP
33382: POP
33383: GO 33929
// if not tmp then
33385: LD_VAR 0 13
33389: NOT
33390: IFFALSE 33394
// continue ;
33392: GO 33250
// result := true ;
33394: LD_ADDR_VAR 0 8
33398: PUSH
33399: LD_INT 1
33401: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33402: LD_VAR 0 6
33406: PUSH
33407: LD_VAR 0 13
33411: PPUSH
33412: CALL_OW 247
33416: PUSH
33417: LD_INT 2
33419: EQUAL
33420: AND
33421: PUSH
33422: LD_VAR 0 13
33426: PPUSH
33427: CALL_OW 263
33431: PUSH
33432: LD_INT 1
33434: EQUAL
33435: AND
33436: IFFALSE 33600
// begin if IsDrivenBy ( tmp ) then
33438: LD_VAR 0 13
33442: PPUSH
33443: CALL_OW 311
33447: IFFALSE 33451
// continue ;
33449: GO 33250
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33451: LD_VAR 0 6
33455: PPUSH
33456: LD_INT 3
33458: PUSH
33459: LD_INT 60
33461: PUSH
33462: EMPTY
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: LD_INT 55
33474: PUSH
33475: EMPTY
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PPUSH
33486: CALL_OW 72
33490: IFFALSE 33598
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33492: LD_ADDR_VAR 0 18
33496: PUSH
33497: LD_VAR 0 6
33501: PPUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 60
33507: PUSH
33508: EMPTY
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: LD_INT 55
33520: PUSH
33521: EMPTY
33522: LIST
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PPUSH
33532: CALL_OW 72
33536: PUSH
33537: LD_INT 1
33539: ARRAY
33540: ST_TO_ADDR
// if IsInUnit ( driver ) then
33541: LD_VAR 0 18
33545: PPUSH
33546: CALL_OW 310
33550: IFFALSE 33561
// ComExit ( driver ) ;
33552: LD_VAR 0 18
33556: PPUSH
33557: CALL 58974 0 1
// AddComEnterUnit ( driver , tmp ) ;
33561: LD_VAR 0 18
33565: PPUSH
33566: LD_VAR 0 13
33570: PPUSH
33571: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33575: LD_VAR 0 18
33579: PPUSH
33580: LD_VAR 0 7
33584: PPUSH
33585: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33589: LD_VAR 0 18
33593: PPUSH
33594: CALL_OW 181
// end ; continue ;
33598: GO 33250
// end ; if not cleaners or not tmp in cleaners then
33600: LD_VAR 0 6
33604: NOT
33605: PUSH
33606: LD_VAR 0 13
33610: PUSH
33611: LD_VAR 0 6
33615: IN
33616: NOT
33617: OR
33618: IFFALSE 33925
// begin if dep then
33620: LD_VAR 0 17
33624: IFFALSE 33760
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33626: LD_ADDR_VAR 0 16
33630: PUSH
33631: LD_VAR 0 17
33635: PUSH
33636: LD_INT 1
33638: ARRAY
33639: PPUSH
33640: CALL_OW 250
33644: PPUSH
33645: LD_VAR 0 17
33649: PUSH
33650: LD_INT 1
33652: ARRAY
33653: PPUSH
33654: CALL_OW 254
33658: PPUSH
33659: LD_INT 5
33661: PPUSH
33662: CALL_OW 272
33666: PUSH
33667: LD_VAR 0 17
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PPUSH
33676: CALL_OW 251
33680: PPUSH
33681: LD_VAR 0 17
33685: PUSH
33686: LD_INT 1
33688: ARRAY
33689: PPUSH
33690: CALL_OW 254
33694: PPUSH
33695: LD_INT 5
33697: PPUSH
33698: CALL_OW 273
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33707: LD_VAR 0 16
33711: PUSH
33712: LD_INT 1
33714: ARRAY
33715: PPUSH
33716: LD_VAR 0 16
33720: PUSH
33721: LD_INT 2
33723: ARRAY
33724: PPUSH
33725: CALL_OW 488
33729: IFFALSE 33760
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33731: LD_VAR 0 13
33735: PPUSH
33736: LD_VAR 0 16
33740: PUSH
33741: LD_INT 1
33743: ARRAY
33744: PPUSH
33745: LD_VAR 0 16
33749: PUSH
33750: LD_INT 2
33752: ARRAY
33753: PPUSH
33754: CALL_OW 111
// continue ;
33758: GO 33250
// end ; end ; r := GetDir ( tmp ) ;
33760: LD_ADDR_VAR 0 15
33764: PUSH
33765: LD_VAR 0 13
33769: PPUSH
33770: CALL_OW 254
33774: ST_TO_ADDR
// if r = 5 then
33775: LD_VAR 0 15
33779: PUSH
33780: LD_INT 5
33782: EQUAL
33783: IFFALSE 33793
// r := 0 ;
33785: LD_ADDR_VAR 0 15
33789: PUSH
33790: LD_INT 0
33792: ST_TO_ADDR
// for j = r to 5 do
33793: LD_ADDR_VAR 0 10
33797: PUSH
33798: DOUBLE
33799: LD_VAR 0 15
33803: DEC
33804: ST_TO_ADDR
33805: LD_INT 5
33807: PUSH
33808: FOR_TO
33809: IFFALSE 33923
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33811: LD_ADDR_VAR 0 11
33815: PUSH
33816: LD_VAR 0 13
33820: PPUSH
33821: CALL_OW 250
33825: PPUSH
33826: LD_VAR 0 10
33830: PPUSH
33831: LD_INT 2
33833: PPUSH
33834: CALL_OW 272
33838: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33839: LD_ADDR_VAR 0 12
33843: PUSH
33844: LD_VAR 0 13
33848: PPUSH
33849: CALL_OW 251
33853: PPUSH
33854: LD_VAR 0 10
33858: PPUSH
33859: LD_INT 2
33861: PPUSH
33862: CALL_OW 273
33866: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33867: LD_VAR 0 11
33871: PPUSH
33872: LD_VAR 0 12
33876: PPUSH
33877: CALL_OW 488
33881: PUSH
33882: LD_VAR 0 11
33886: PPUSH
33887: LD_VAR 0 12
33891: PPUSH
33892: CALL_OW 428
33896: NOT
33897: AND
33898: IFFALSE 33921
// begin ComMoveXY ( tmp , _x , _y ) ;
33900: LD_VAR 0 13
33904: PPUSH
33905: LD_VAR 0 11
33909: PPUSH
33910: LD_VAR 0 12
33914: PPUSH
33915: CALL_OW 111
// break ;
33919: GO 33923
// end ; end ;
33921: GO 33808
33923: POP
33924: POP
// end ; end ;
33925: GO 33250
33927: POP
33928: POP
// end ;
33929: LD_VAR 0 8
33933: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33934: LD_INT 0
33936: PPUSH
// result := true ;
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 1
33944: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33945: LD_VAR 0 2
33949: PUSH
33950: LD_INT 24
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33964
33956: LD_INT 33
33958: DOUBLE
33959: EQUAL
33960: IFTRUE 33964
33962: GO 33989
33964: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33965: LD_ADDR_VAR 0 3
33969: PUSH
33970: LD_INT 32
33972: PPUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 321
33982: PUSH
33983: LD_INT 2
33985: EQUAL
33986: ST_TO_ADDR
33987: GO 34305
33989: LD_INT 20
33991: DOUBLE
33992: EQUAL
33993: IFTRUE 33997
33995: GO 34022
33997: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33998: LD_ADDR_VAR 0 3
34002: PUSH
34003: LD_INT 6
34005: PPUSH
34006: LD_VAR 0 1
34010: PPUSH
34011: CALL_OW 321
34015: PUSH
34016: LD_INT 2
34018: EQUAL
34019: ST_TO_ADDR
34020: GO 34305
34022: LD_INT 22
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34036
34028: LD_INT 36
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34036
34034: GO 34061
34036: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34037: LD_ADDR_VAR 0 3
34041: PUSH
34042: LD_INT 15
34044: PPUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 321
34054: PUSH
34055: LD_INT 2
34057: EQUAL
34058: ST_TO_ADDR
34059: GO 34305
34061: LD_INT 30
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34094
34069: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_INT 20
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 321
34087: PUSH
34088: LD_INT 2
34090: EQUAL
34091: ST_TO_ADDR
34092: GO 34305
34094: LD_INT 28
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34108
34100: LD_INT 21
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34133
34108: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 21
34116: PPUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 321
34126: PUSH
34127: LD_INT 2
34129: EQUAL
34130: ST_TO_ADDR
34131: GO 34305
34133: LD_INT 16
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34166
34141: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34142: LD_ADDR_VAR 0 3
34146: PUSH
34147: LD_INT 84
34149: PPUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 321
34159: PUSH
34160: LD_INT 2
34162: EQUAL
34163: ST_TO_ADDR
34164: GO 34305
34166: LD_INT 19
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34180
34172: LD_INT 23
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34205
34180: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_INT 83
34188: PPUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 321
34198: PUSH
34199: LD_INT 2
34201: EQUAL
34202: ST_TO_ADDR
34203: GO 34305
34205: LD_INT 17
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34238
34213: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_INT 39
34221: PPUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 321
34231: PUSH
34232: LD_INT 2
34234: EQUAL
34235: ST_TO_ADDR
34236: GO 34305
34238: LD_INT 18
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34246
34244: GO 34271
34246: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34247: LD_ADDR_VAR 0 3
34251: PUSH
34252: LD_INT 40
34254: PPUSH
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 321
34264: PUSH
34265: LD_INT 2
34267: EQUAL
34268: ST_TO_ADDR
34269: GO 34305
34271: LD_INT 27
34273: DOUBLE
34274: EQUAL
34275: IFTRUE 34279
34277: GO 34304
34279: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34280: LD_ADDR_VAR 0 3
34284: PUSH
34285: LD_INT 35
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 321
34297: PUSH
34298: LD_INT 2
34300: EQUAL
34301: ST_TO_ADDR
34302: GO 34305
34304: POP
// end ;
34305: LD_VAR 0 3
34309: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34310: LD_INT 0
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
// result := false ;
34323: LD_ADDR_VAR 0 6
34327: PUSH
34328: LD_INT 0
34330: ST_TO_ADDR
// if btype = b_depot then
34331: LD_VAR 0 2
34335: PUSH
34336: LD_INT 0
34338: EQUAL
34339: IFFALSE 34351
// begin result := true ;
34341: LD_ADDR_VAR 0 6
34345: PUSH
34346: LD_INT 1
34348: ST_TO_ADDR
// exit ;
34349: GO 35177
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34351: LD_VAR 0 1
34355: NOT
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 266
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: IN
34377: NOT
34378: OR
34379: PUSH
34380: LD_VAR 0 2
34384: NOT
34385: OR
34386: PUSH
34387: LD_VAR 0 5
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 4
34406: PUSH
34407: LD_INT 5
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: IN
34418: NOT
34419: OR
34420: PUSH
34421: LD_VAR 0 3
34425: PPUSH
34426: LD_VAR 0 4
34430: PPUSH
34431: CALL_OW 488
34435: NOT
34436: OR
34437: IFFALSE 34441
// exit ;
34439: GO 35177
// side := GetSide ( depot ) ;
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_VAR 0 1
34450: PPUSH
34451: CALL_OW 255
34455: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34456: LD_VAR 0 9
34460: PPUSH
34461: LD_VAR 0 2
34465: PPUSH
34466: CALL 33934 0 2
34470: NOT
34471: IFFALSE 34475
// exit ;
34473: GO 35177
// pom := GetBase ( depot ) ;
34475: LD_ADDR_VAR 0 10
34479: PUSH
34480: LD_VAR 0 1
34484: PPUSH
34485: CALL_OW 274
34489: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34490: LD_ADDR_VAR 0 11
34494: PUSH
34495: LD_VAR 0 2
34499: PPUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 248
34509: PPUSH
34510: CALL_OW 450
34514: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34515: LD_VAR 0 10
34519: PPUSH
34520: LD_INT 1
34522: PPUSH
34523: CALL_OW 275
34527: PUSH
34528: LD_VAR 0 11
34532: PUSH
34533: LD_INT 1
34535: ARRAY
34536: GREATEREQUAL
34537: PUSH
34538: LD_VAR 0 10
34542: PPUSH
34543: LD_INT 2
34545: PPUSH
34546: CALL_OW 275
34550: PUSH
34551: LD_VAR 0 11
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: GREATEREQUAL
34560: AND
34561: PUSH
34562: LD_VAR 0 10
34566: PPUSH
34567: LD_INT 3
34569: PPUSH
34570: CALL_OW 275
34574: PUSH
34575: LD_VAR 0 11
34579: PUSH
34580: LD_INT 3
34582: ARRAY
34583: GREATEREQUAL
34584: AND
34585: NOT
34586: IFFALSE 34590
// exit ;
34588: GO 35177
// if GetBType ( depot ) = b_depot then
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 266
34599: PUSH
34600: LD_INT 0
34602: EQUAL
34603: IFFALSE 34615
// dist := 28 else
34605: LD_ADDR_VAR 0 14
34609: PUSH
34610: LD_INT 28
34612: ST_TO_ADDR
34613: GO 34623
// dist := 36 ;
34615: LD_ADDR_VAR 0 14
34619: PUSH
34620: LD_INT 36
34622: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34623: LD_VAR 0 1
34627: PPUSH
34628: LD_VAR 0 3
34632: PPUSH
34633: LD_VAR 0 4
34637: PPUSH
34638: CALL_OW 297
34642: PUSH
34643: LD_VAR 0 14
34647: GREATER
34648: IFFALSE 34652
// exit ;
34650: GO 35177
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34652: LD_ADDR_VAR 0 12
34656: PUSH
34657: LD_VAR 0 2
34661: PPUSH
34662: LD_VAR 0 3
34666: PPUSH
34667: LD_VAR 0 4
34671: PPUSH
34672: LD_VAR 0 5
34676: PPUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 248
34686: PPUSH
34687: LD_INT 0
34689: PPUSH
34690: CALL 35182 0 6
34694: ST_TO_ADDR
// if not hexes then
34695: LD_VAR 0 12
34699: NOT
34700: IFFALSE 34704
// exit ;
34702: GO 35177
// hex := GetHexInfo ( x , y ) ;
34704: LD_ADDR_VAR 0 15
34708: PUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: LD_VAR 0 4
34718: PPUSH
34719: CALL_OW 546
34723: ST_TO_ADDR
// if hex [ 1 ] then
34724: LD_VAR 0 15
34728: PUSH
34729: LD_INT 1
34731: ARRAY
34732: IFFALSE 34736
// exit ;
34734: GO 35177
// height := hex [ 2 ] ;
34736: LD_ADDR_VAR 0 13
34740: PUSH
34741: LD_VAR 0 15
34745: PUSH
34746: LD_INT 2
34748: ARRAY
34749: ST_TO_ADDR
// for i = 1 to hexes do
34750: LD_ADDR_VAR 0 7
34754: PUSH
34755: DOUBLE
34756: LD_INT 1
34758: DEC
34759: ST_TO_ADDR
34760: LD_VAR 0 12
34764: PUSH
34765: FOR_TO
34766: IFFALSE 35096
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34768: LD_VAR 0 12
34772: PUSH
34773: LD_VAR 0 7
34777: ARRAY
34778: PUSH
34779: LD_INT 1
34781: ARRAY
34782: PPUSH
34783: LD_VAR 0 12
34787: PUSH
34788: LD_VAR 0 7
34792: ARRAY
34793: PUSH
34794: LD_INT 2
34796: ARRAY
34797: PPUSH
34798: CALL_OW 488
34802: NOT
34803: PUSH
34804: LD_VAR 0 12
34808: PUSH
34809: LD_VAR 0 7
34813: ARRAY
34814: PUSH
34815: LD_INT 1
34817: ARRAY
34818: PPUSH
34819: LD_VAR 0 12
34823: PUSH
34824: LD_VAR 0 7
34828: ARRAY
34829: PUSH
34830: LD_INT 2
34832: ARRAY
34833: PPUSH
34834: CALL_OW 428
34838: PUSH
34839: LD_INT 0
34841: GREATER
34842: OR
34843: PUSH
34844: LD_VAR 0 12
34848: PUSH
34849: LD_VAR 0 7
34853: ARRAY
34854: PUSH
34855: LD_INT 1
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 12
34863: PUSH
34864: LD_VAR 0 7
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: PPUSH
34874: CALL_OW 351
34878: OR
34879: IFFALSE 34885
// exit ;
34881: POP
34882: POP
34883: GO 35177
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34885: LD_ADDR_VAR 0 8
34889: PUSH
34890: LD_VAR 0 12
34894: PUSH
34895: LD_VAR 0 7
34899: ARRAY
34900: PUSH
34901: LD_INT 1
34903: ARRAY
34904: PPUSH
34905: LD_VAR 0 12
34909: PUSH
34910: LD_VAR 0 7
34914: ARRAY
34915: PUSH
34916: LD_INT 2
34918: ARRAY
34919: PPUSH
34920: CALL_OW 546
34924: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34925: LD_VAR 0 8
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PUSH
34934: LD_VAR 0 8
34938: PUSH
34939: LD_INT 2
34941: ARRAY
34942: PUSH
34943: LD_VAR 0 13
34947: PUSH
34948: LD_INT 2
34950: PLUS
34951: GREATER
34952: OR
34953: PUSH
34954: LD_VAR 0 8
34958: PUSH
34959: LD_INT 2
34961: ARRAY
34962: PUSH
34963: LD_VAR 0 13
34967: PUSH
34968: LD_INT 2
34970: MINUS
34971: LESS
34972: OR
34973: PUSH
34974: LD_VAR 0 8
34978: PUSH
34979: LD_INT 3
34981: ARRAY
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 8
34988: PUSH
34989: LD_INT 9
34991: PUSH
34992: LD_INT 10
34994: PUSH
34995: LD_INT 11
34997: PUSH
34998: LD_INT 12
35000: PUSH
35001: LD_INT 13
35003: PUSH
35004: LD_INT 16
35006: PUSH
35007: LD_INT 17
35009: PUSH
35010: LD_INT 18
35012: PUSH
35013: LD_INT 19
35015: PUSH
35016: LD_INT 20
35018: PUSH
35019: LD_INT 21
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: IN
35037: NOT
35038: OR
35039: PUSH
35040: LD_VAR 0 8
35044: PUSH
35045: LD_INT 5
35047: ARRAY
35048: NOT
35049: OR
35050: PUSH
35051: LD_VAR 0 8
35055: PUSH
35056: LD_INT 6
35058: ARRAY
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 7
35068: PUSH
35069: LD_INT 9
35071: PUSH
35072: LD_INT 10
35074: PUSH
35075: LD_INT 11
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: IN
35086: NOT
35087: OR
35088: IFFALSE 35094
// exit ;
35090: POP
35091: POP
35092: GO 35177
// end ;
35094: GO 34765
35096: POP
35097: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35098: LD_VAR 0 9
35102: PPUSH
35103: LD_VAR 0 3
35107: PPUSH
35108: LD_VAR 0 4
35112: PPUSH
35113: LD_INT 20
35115: PPUSH
35116: CALL 27100 0 4
35120: PUSH
35121: LD_INT 4
35123: ARRAY
35124: IFFALSE 35128
// exit ;
35126: GO 35177
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35128: LD_VAR 0 2
35132: PUSH
35133: LD_INT 29
35135: PUSH
35136: LD_INT 30
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: IN
35143: PUSH
35144: LD_VAR 0 3
35148: PPUSH
35149: LD_VAR 0 4
35153: PPUSH
35154: LD_VAR 0 9
35158: PPUSH
35159: CALL_OW 440
35163: NOT
35164: AND
35165: IFFALSE 35169
// exit ;
35167: GO 35177
// result := true ;
35169: LD_ADDR_VAR 0 6
35173: PUSH
35174: LD_INT 1
35176: ST_TO_ADDR
// end ;
35177: LD_VAR 0 6
35181: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
// result = [ ] ;
35242: LD_ADDR_VAR 0 7
35246: PUSH
35247: EMPTY
35248: ST_TO_ADDR
// temp_list = [ ] ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: EMPTY
35255: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35256: LD_VAR 0 4
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: LD_INT 5
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: IN
35287: NOT
35288: PUSH
35289: LD_VAR 0 1
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: IN
35304: PUSH
35305: LD_VAR 0 5
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: IN
35324: NOT
35325: AND
35326: OR
35327: IFFALSE 35331
// exit ;
35329: GO 53722
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35331: LD_VAR 0 1
35335: PUSH
35336: LD_INT 6
35338: PUSH
35339: LD_INT 7
35341: PUSH
35342: LD_INT 8
35344: PUSH
35345: LD_INT 13
35347: PUSH
35348: LD_INT 12
35350: PUSH
35351: LD_INT 15
35353: PUSH
35354: LD_INT 11
35356: PUSH
35357: LD_INT 14
35359: PUSH
35360: LD_INT 10
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: IN
35374: IFFALSE 35384
// btype = b_lab ;
35376: LD_ADDR_VAR 0 1
35380: PUSH
35381: LD_INT 6
35383: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35384: LD_VAR 0 6
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: IN
35403: NOT
35404: PUSH
35405: LD_VAR 0 1
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 6
35424: PUSH
35425: LD_INT 36
35427: PUSH
35428: LD_INT 4
35430: PUSH
35431: LD_INT 5
35433: PUSH
35434: LD_INT 31
35436: PUSH
35437: LD_INT 32
35439: PUSH
35440: LD_INT 33
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: IN
35456: NOT
35457: PUSH
35458: LD_VAR 0 6
35462: PUSH
35463: LD_INT 1
35465: EQUAL
35466: AND
35467: OR
35468: PUSH
35469: LD_VAR 0 1
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: IN
35484: NOT
35485: PUSH
35486: LD_VAR 0 6
35490: PUSH
35491: LD_INT 2
35493: EQUAL
35494: AND
35495: OR
35496: IFFALSE 35506
// mode = 0 ;
35498: LD_ADDR_VAR 0 6
35502: PUSH
35503: LD_INT 0
35505: ST_TO_ADDR
// case mode of 0 :
35506: LD_VAR 0 6
35510: PUSH
35511: LD_INT 0
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35519
35517: GO 46972
35519: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35520: LD_ADDR_VAR 0 11
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35713: LD_ADDR_VAR 0 12
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 3
35870: NEG
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 3
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35909: LD_ADDR_VAR 0 13
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 2
36032: NEG
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: LD_INT 2
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 2
36056: NEG
36057: PUSH
36058: LD_INT 3
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 3
36068: NEG
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 3
36080: NEG
36081: PUSH
36082: LD_INT 3
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36108: LD_ADDR_VAR 0 14
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 2
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 3
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36304: LD_ADDR_VAR 0 15
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36497: LD_ADDR_VAR 0 16
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 3
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36690: LD_ADDR_VAR 0 17
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36920: LD_ADDR_VAR 0 18
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37150: LD_ADDR_VAR 0 19
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37380: LD_ADDR_VAR 0 20
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37610: LD_ADDR_VAR 0 21
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37840: LD_ADDR_VAR 0 22
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38070: LD_ADDR_VAR 0 23
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 2
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 3
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: LD_INT 3
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38350: LD_ADDR_VAR 0 24
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38626: LD_ADDR_VAR 0 25
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38900: LD_ADDR_VAR 0 26
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 2
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39176: LD_ADDR_VAR 0 27
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39456: LD_ADDR_VAR 0 28
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: NEG
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 3
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39738: LD_ADDR_VAR 0 29
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 3
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40017: LD_ADDR_VAR 0 30
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 3
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 3
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 3
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40295: LD_ADDR_VAR 0 31
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 3
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40573: LD_ADDR_VAR 0 32
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 3
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 3
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40851: LD_ADDR_VAR 0 33
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 3
41095: NEG
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41130: LD_ADDR_VAR 0 34
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 3
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41410: LD_ADDR_VAR 0 35
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41522: LD_ADDR_VAR 0 36
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41634: LD_ADDR_VAR 0 37
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41746: LD_ADDR_VAR 0 38
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41858: LD_ADDR_VAR 0 39
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41970: LD_ADDR_VAR 0 40
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42082: LD_ADDR_VAR 0 41
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: LD_INT 3
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: LD_INT 3
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: NEG
42392: PUSH
42393: LD_INT 3
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42432: LD_ADDR_VAR 0 42
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 3
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42782: LD_ADDR_VAR 0 43
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 3
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 3
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43130: LD_ADDR_VAR 0 44
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 3
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43480: LD_ADDR_VAR 0 45
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43830: LD_ADDR_VAR 0 46
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 3
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 3
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 3
44126: NEG
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 3
44137: NEG
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44178: LD_ADDR_VAR 0 47
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44329: LD_ADDR_VAR 0 48
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44476: LD_ADDR_VAR 0 49
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44620: LD_ADDR_VAR 0 50
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44764: LD_ADDR_VAR 0 51
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44911: LD_ADDR_VAR 0 52
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45062: LD_ADDR_VAR 0 53
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45292: LD_ADDR_VAR 0 54
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45522: LD_ADDR_VAR 0 55
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45752: LD_ADDR_VAR 0 56
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45982: LD_ADDR_VAR 0 57
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46212: LD_ADDR_VAR 0 58
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 59
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46530: LD_ADDR_VAR 0 60
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46618: LD_ADDR_VAR 0 61
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46706: LD_ADDR_VAR 0 62
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46794: LD_ADDR_VAR 0 63
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46882: LD_ADDR_VAR 0 64
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// end ; 1 :
46970: GO 52867
46972: LD_INT 1
46974: DOUBLE
46975: EQUAL
46976: IFTRUE 46980
46978: GO 49603
46980: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46981: LD_ADDR_VAR 0 11
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47025: LD_ADDR_VAR 0 12
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47066: LD_ADDR_VAR 0 13
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47106: LD_ADDR_VAR 0 14
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47147: LD_ADDR_VAR 0 15
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47191: LD_ADDR_VAR 0 16
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47237: LD_ADDR_VAR 0 17
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47281: LD_ADDR_VAR 0 18
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47322: LD_ADDR_VAR 0 19
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47362: LD_ADDR_VAR 0 20
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 3
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47403: LD_ADDR_VAR 0 21
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: NEG
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47447: LD_ADDR_VAR 0 22
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47493: LD_ADDR_VAR 0 23
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47537: LD_ADDR_VAR 0 24
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 4
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47578: LD_ADDR_VAR 0 25
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 4
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 4
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47618: LD_ADDR_VAR 0 26
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 4
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47659: LD_ADDR_VAR 0 27
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 4
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47703: LD_ADDR_VAR 0 28
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 4
47734: NEG
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47749: LD_ADDR_VAR 0 29
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 4
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 4
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 5
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 5
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 4
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 6
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 6
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 5
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47904: LD_ADDR_VAR 0 30
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 4
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 5
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 5
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 5
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 6
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 6
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48047: LD_ADDR_VAR 0 31
48051: PUSH
48052: LD_INT 3
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 3
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 4
48094: PUSH
48095: LD_INT 4
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: LD_INT 5
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 4
48134: PUSH
48135: LD_INT 5
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 6
48144: PUSH
48145: LD_INT 5
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 6
48154: PUSH
48155: LD_INT 6
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 5
48164: PUSH
48165: LD_INT 6
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48186: LD_ADDR_VAR 0 32
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 3
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 4
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 4
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 5
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 4
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 6
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 6
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 5
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48329: LD_ADDR_VAR 0 33
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 4
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 4
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 5
48415: NEG
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 5
48426: NEG
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 5
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 6
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 6
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48484: LD_ADDR_VAR 0 34
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 3
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: LD_INT 4
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 4
48539: NEG
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 4
48551: NEG
48552: PUSH
48553: LD_INT 4
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 4
48563: NEG
48564: PUSH
48565: LD_INT 5
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 5
48575: NEG
48576: PUSH
48577: LD_INT 4
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 5
48587: NEG
48588: PUSH
48589: LD_INT 5
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 5
48599: NEG
48600: PUSH
48601: LD_INT 6
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 6
48611: NEG
48612: PUSH
48613: LD_INT 5
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 6
48623: NEG
48624: PUSH
48625: LD_INT 6
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48647: LD_ADDR_VAR 0 41
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48691: LD_ADDR_VAR 0 42
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48732: LD_ADDR_VAR 0 43
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: LD_INT 3
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48772: LD_ADDR_VAR 0 44
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48813: LD_ADDR_VAR 0 45
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48857: LD_ADDR_VAR 0 46
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48903: LD_ADDR_VAR 0 47
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48936: LD_ADDR_VAR 0 48
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48967: LD_ADDR_VAR 0 49
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48996: LD_ADDR_VAR 0 50
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 3
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49025: LD_ADDR_VAR 0 51
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49056: LD_ADDR_VAR 0 52
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49089: LD_ADDR_VAR 0 53
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49133: LD_ADDR_VAR 0 54
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49174: LD_ADDR_VAR 0 55
49178: PUSH
49179: LD_INT 3
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: PUSH
49192: LD_INT 3
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49214: LD_ADDR_VAR 0 56
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49255: LD_ADDR_VAR 0 57
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49299: LD_ADDR_VAR 0 58
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49345: LD_ADDR_VAR 0 59
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49389: LD_ADDR_VAR 0 60
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49430: LD_ADDR_VAR 0 61
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49470: LD_ADDR_VAR 0 62
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49511: LD_ADDR_VAR 0 63
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49555: LD_ADDR_VAR 0 64
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// end ; 2 :
49601: GO 52867
49603: LD_INT 2
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49611
49609: GO 52866
49611: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49612: LD_ADDR_VAR 0 29
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 5
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 5
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 4
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 5
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 4
49742: PUSH
49743: LD_INT 4
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: LD_INT 4
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 4
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 4
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 4
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 5
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 4
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 3
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 5
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 3
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 3
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 4
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 4
49997: NEG
49998: PUSH
49999: LD_INT 4
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: LD_INT 5
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: LD_INT 4
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 4
50045: NEG
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 5
50057: NEG
50058: PUSH
50059: LD_INT 4
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 5
50069: NEG
50070: PUSH
50071: LD_INT 5
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 5
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50150: LD_ADDR_VAR 0 30
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 5
50177: PUSH
50178: LD_INT 4
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 5
50187: PUSH
50188: LD_INT 5
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 4
50197: PUSH
50198: LD_INT 5
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 5
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 5
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 4
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 4
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 4
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 5
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 5
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 5
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 4
50514: NEG
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 4
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 4
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 5
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 4
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 5
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 5
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50697: LD_ADDR_VAR 0 31
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 4
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 4
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 5
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 5
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 4
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 5
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 4
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 4
50899: NEG
50900: PUSH
50901: LD_INT 4
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 4
50911: NEG
50912: PUSH
50913: LD_INT 5
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: NEG
50924: PUSH
50925: LD_INT 4
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 5
50959: NEG
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 5
50971: NEG
50972: PUSH
50973: LD_INT 5
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: LD_INT 5
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 4
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 4
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 5
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 5
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 5
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51247: LD_ADDR_VAR 0 32
51251: PUSH
51252: LD_INT 4
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 4
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 4
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 5
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 5
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 5
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: LD_INT 3
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 4
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 4
51428: NEG
51429: PUSH
51430: LD_INT 4
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 4
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 4
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 5
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 5
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 5
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: LD_INT 4
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 5
51689: PUSH
51690: LD_INT 5
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: LD_INT 5
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 5
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51794: LD_ADDR_VAR 0 33
51798: PUSH
51799: LD_INT 4
51801: NEG
51802: PUSH
51803: LD_INT 4
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: NEG
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: LD_INT 4
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: LD_INT 4
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 5
51873: NEG
51874: PUSH
51875: LD_INT 5
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: LD_INT 5
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 5
51897: NEG
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 4
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 5
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 4
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 5
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 4
52134: PUSH
52135: LD_INT 4
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 4
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 4
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 5
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 5
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 5
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52332: LD_ADDR_VAR 0 34
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 4
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 5
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 4
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 4
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 5
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 5
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 4
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 4
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 4
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: LD_INT 4
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 5
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 5
52564: PUSH
52565: LD_INT 5
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 4
52574: PUSH
52575: LD_INT 5
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: LD_INT 4
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 5
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 5
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 4
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 4
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 4
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 4
52717: NEG
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 4
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 4
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 5
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 5
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// end ; end ;
52864: GO 52867
52866: POP
// case btype of b_depot , b_warehouse :
52867: LD_VAR 0 1
52871: PUSH
52872: LD_INT 0
52874: DOUBLE
52875: EQUAL
52876: IFTRUE 52886
52878: LD_INT 1
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52886
52884: GO 53087
52886: POP
// case nation of nation_american :
52887: LD_VAR 0 5
52891: PUSH
52892: LD_INT 1
52894: DOUBLE
52895: EQUAL
52896: IFTRUE 52900
52898: GO 52956
52900: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52901: LD_ADDR_VAR 0 9
52905: PUSH
52906: LD_VAR 0 11
52910: PUSH
52911: LD_VAR 0 12
52915: PUSH
52916: LD_VAR 0 13
52920: PUSH
52921: LD_VAR 0 14
52925: PUSH
52926: LD_VAR 0 15
52930: PUSH
52931: LD_VAR 0 16
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: PUSH
52944: LD_VAR 0 4
52948: PUSH
52949: LD_INT 1
52951: PLUS
52952: ARRAY
52953: ST_TO_ADDR
52954: GO 53085
52956: LD_INT 2
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 52964
52962: GO 53020
52964: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52965: LD_ADDR_VAR 0 9
52969: PUSH
52970: LD_VAR 0 17
52974: PUSH
52975: LD_VAR 0 18
52979: PUSH
52980: LD_VAR 0 19
52984: PUSH
52985: LD_VAR 0 20
52989: PUSH
52990: LD_VAR 0 21
52994: PUSH
52995: LD_VAR 0 22
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: PUSH
53008: LD_VAR 0 4
53012: PUSH
53013: LD_INT 1
53015: PLUS
53016: ARRAY
53017: ST_TO_ADDR
53018: GO 53085
53020: LD_INT 3
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53028
53026: GO 53084
53028: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53029: LD_ADDR_VAR 0 9
53033: PUSH
53034: LD_VAR 0 23
53038: PUSH
53039: LD_VAR 0 24
53043: PUSH
53044: LD_VAR 0 25
53048: PUSH
53049: LD_VAR 0 26
53053: PUSH
53054: LD_VAR 0 27
53058: PUSH
53059: LD_VAR 0 28
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_VAR 0 4
53076: PUSH
53077: LD_INT 1
53079: PLUS
53080: ARRAY
53081: ST_TO_ADDR
53082: GO 53085
53084: POP
53085: GO 53640
53087: LD_INT 2
53089: DOUBLE
53090: EQUAL
53091: IFTRUE 53101
53093: LD_INT 3
53095: DOUBLE
53096: EQUAL
53097: IFTRUE 53101
53099: GO 53157
53101: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53102: LD_ADDR_VAR 0 9
53106: PUSH
53107: LD_VAR 0 29
53111: PUSH
53112: LD_VAR 0 30
53116: PUSH
53117: LD_VAR 0 31
53121: PUSH
53122: LD_VAR 0 32
53126: PUSH
53127: LD_VAR 0 33
53131: PUSH
53132: LD_VAR 0 34
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: PUSH
53145: LD_VAR 0 4
53149: PUSH
53150: LD_INT 1
53152: PLUS
53153: ARRAY
53154: ST_TO_ADDR
53155: GO 53640
53157: LD_INT 16
53159: DOUBLE
53160: EQUAL
53161: IFTRUE 53219
53163: LD_INT 17
53165: DOUBLE
53166: EQUAL
53167: IFTRUE 53219
53169: LD_INT 18
53171: DOUBLE
53172: EQUAL
53173: IFTRUE 53219
53175: LD_INT 19
53177: DOUBLE
53178: EQUAL
53179: IFTRUE 53219
53181: LD_INT 22
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53219
53187: LD_INT 20
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53219
53193: LD_INT 21
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53219
53199: LD_INT 23
53201: DOUBLE
53202: EQUAL
53203: IFTRUE 53219
53205: LD_INT 24
53207: DOUBLE
53208: EQUAL
53209: IFTRUE 53219
53211: LD_INT 25
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53219
53217: GO 53275
53219: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53220: LD_ADDR_VAR 0 9
53224: PUSH
53225: LD_VAR 0 35
53229: PUSH
53230: LD_VAR 0 36
53234: PUSH
53235: LD_VAR 0 37
53239: PUSH
53240: LD_VAR 0 38
53244: PUSH
53245: LD_VAR 0 39
53249: PUSH
53250: LD_VAR 0 40
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: PUSH
53263: LD_VAR 0 4
53267: PUSH
53268: LD_INT 1
53270: PLUS
53271: ARRAY
53272: ST_TO_ADDR
53273: GO 53640
53275: LD_INT 6
53277: DOUBLE
53278: EQUAL
53279: IFTRUE 53331
53281: LD_INT 7
53283: DOUBLE
53284: EQUAL
53285: IFTRUE 53331
53287: LD_INT 8
53289: DOUBLE
53290: EQUAL
53291: IFTRUE 53331
53293: LD_INT 13
53295: DOUBLE
53296: EQUAL
53297: IFTRUE 53331
53299: LD_INT 12
53301: DOUBLE
53302: EQUAL
53303: IFTRUE 53331
53305: LD_INT 15
53307: DOUBLE
53308: EQUAL
53309: IFTRUE 53331
53311: LD_INT 11
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53331
53317: LD_INT 14
53319: DOUBLE
53320: EQUAL
53321: IFTRUE 53331
53323: LD_INT 10
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53331
53329: GO 53387
53331: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53332: LD_ADDR_VAR 0 9
53336: PUSH
53337: LD_VAR 0 41
53341: PUSH
53342: LD_VAR 0 42
53346: PUSH
53347: LD_VAR 0 43
53351: PUSH
53352: LD_VAR 0 44
53356: PUSH
53357: LD_VAR 0 45
53361: PUSH
53362: LD_VAR 0 46
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: PUSH
53375: LD_VAR 0 4
53379: PUSH
53380: LD_INT 1
53382: PLUS
53383: ARRAY
53384: ST_TO_ADDR
53385: GO 53640
53387: LD_INT 36
53389: DOUBLE
53390: EQUAL
53391: IFTRUE 53395
53393: GO 53451
53395: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53396: LD_ADDR_VAR 0 9
53400: PUSH
53401: LD_VAR 0 47
53405: PUSH
53406: LD_VAR 0 48
53410: PUSH
53411: LD_VAR 0 49
53415: PUSH
53416: LD_VAR 0 50
53420: PUSH
53421: LD_VAR 0 51
53425: PUSH
53426: LD_VAR 0 52
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: PUSH
53439: LD_VAR 0 4
53443: PUSH
53444: LD_INT 1
53446: PLUS
53447: ARRAY
53448: ST_TO_ADDR
53449: GO 53640
53451: LD_INT 4
53453: DOUBLE
53454: EQUAL
53455: IFTRUE 53477
53457: LD_INT 5
53459: DOUBLE
53460: EQUAL
53461: IFTRUE 53477
53463: LD_INT 34
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53477
53469: LD_INT 37
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 53533
53477: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53478: LD_ADDR_VAR 0 9
53482: PUSH
53483: LD_VAR 0 53
53487: PUSH
53488: LD_VAR 0 54
53492: PUSH
53493: LD_VAR 0 55
53497: PUSH
53498: LD_VAR 0 56
53502: PUSH
53503: LD_VAR 0 57
53507: PUSH
53508: LD_VAR 0 58
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 4
53525: PUSH
53526: LD_INT 1
53528: PLUS
53529: ARRAY
53530: ST_TO_ADDR
53531: GO 53640
53533: LD_INT 31
53535: DOUBLE
53536: EQUAL
53537: IFTRUE 53583
53539: LD_INT 32
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53583
53545: LD_INT 33
53547: DOUBLE
53548: EQUAL
53549: IFTRUE 53583
53551: LD_INT 27
53553: DOUBLE
53554: EQUAL
53555: IFTRUE 53583
53557: LD_INT 26
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53583
53563: LD_INT 28
53565: DOUBLE
53566: EQUAL
53567: IFTRUE 53583
53569: LD_INT 29
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53583
53575: LD_INT 30
53577: DOUBLE
53578: EQUAL
53579: IFTRUE 53583
53581: GO 53639
53583: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53584: LD_ADDR_VAR 0 9
53588: PUSH
53589: LD_VAR 0 59
53593: PUSH
53594: LD_VAR 0 60
53598: PUSH
53599: LD_VAR 0 61
53603: PUSH
53604: LD_VAR 0 62
53608: PUSH
53609: LD_VAR 0 63
53613: PUSH
53614: LD_VAR 0 64
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: LD_VAR 0 4
53631: PUSH
53632: LD_INT 1
53634: PLUS
53635: ARRAY
53636: ST_TO_ADDR
53637: GO 53640
53639: POP
// temp_list2 = [ ] ;
53640: LD_ADDR_VAR 0 10
53644: PUSH
53645: EMPTY
53646: ST_TO_ADDR
// for i in temp_list do
53647: LD_ADDR_VAR 0 8
53651: PUSH
53652: LD_VAR 0 9
53656: PUSH
53657: FOR_IN
53658: IFFALSE 53710
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53660: LD_ADDR_VAR 0 10
53664: PUSH
53665: LD_VAR 0 10
53669: PUSH
53670: LD_VAR 0 8
53674: PUSH
53675: LD_INT 1
53677: ARRAY
53678: PUSH
53679: LD_VAR 0 2
53683: PLUS
53684: PUSH
53685: LD_VAR 0 8
53689: PUSH
53690: LD_INT 2
53692: ARRAY
53693: PUSH
53694: LD_VAR 0 3
53698: PLUS
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: ADD
53707: ST_TO_ADDR
53708: GO 53657
53710: POP
53711: POP
// result = temp_list2 ;
53712: LD_ADDR_VAR 0 7
53716: PUSH
53717: LD_VAR 0 10
53721: ST_TO_ADDR
// end ;
53722: LD_VAR 0 7
53726: RET
// export function EnemyInRange ( unit , dist ) ; begin
53727: LD_INT 0
53729: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53730: LD_ADDR_VAR 0 3
53734: PUSH
53735: LD_VAR 0 1
53739: PPUSH
53740: CALL_OW 255
53744: PPUSH
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL_OW 250
53754: PPUSH
53755: LD_VAR 0 1
53759: PPUSH
53760: CALL_OW 251
53764: PPUSH
53765: LD_VAR 0 2
53769: PPUSH
53770: CALL 27100 0 4
53774: PUSH
53775: LD_INT 4
53777: ARRAY
53778: ST_TO_ADDR
// end ;
53779: LD_VAR 0 3
53783: RET
// export function PlayerSeeMe ( unit ) ; begin
53784: LD_INT 0
53786: PPUSH
// result := See ( your_side , unit ) ;
53787: LD_ADDR_VAR 0 2
53791: PUSH
53792: LD_OWVAR 2
53796: PPUSH
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 292
53806: ST_TO_ADDR
// end ;
53807: LD_VAR 0 2
53811: RET
// export function ReverseDir ( unit ) ; begin
53812: LD_INT 0
53814: PPUSH
// if not unit then
53815: LD_VAR 0 1
53819: NOT
53820: IFFALSE 53824
// exit ;
53822: GO 53847
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53824: LD_ADDR_VAR 0 2
53828: PUSH
53829: LD_VAR 0 1
53833: PPUSH
53834: CALL_OW 254
53838: PUSH
53839: LD_INT 3
53841: PLUS
53842: PUSH
53843: LD_INT 6
53845: MOD
53846: ST_TO_ADDR
// end ;
53847: LD_VAR 0 2
53851: RET
// export function ReverseArray ( array ) ; var i ; begin
53852: LD_INT 0
53854: PPUSH
53855: PPUSH
// if not array then
53856: LD_VAR 0 1
53860: NOT
53861: IFFALSE 53865
// exit ;
53863: GO 53920
// result := [ ] ;
53865: LD_ADDR_VAR 0 2
53869: PUSH
53870: EMPTY
53871: ST_TO_ADDR
// for i := array downto 1 do
53872: LD_ADDR_VAR 0 3
53876: PUSH
53877: DOUBLE
53878: LD_VAR 0 1
53882: INC
53883: ST_TO_ADDR
53884: LD_INT 1
53886: PUSH
53887: FOR_DOWNTO
53888: IFFALSE 53918
// result := Join ( result , array [ i ] ) ;
53890: LD_ADDR_VAR 0 2
53894: PUSH
53895: LD_VAR 0 2
53899: PPUSH
53900: LD_VAR 0 1
53904: PUSH
53905: LD_VAR 0 3
53909: ARRAY
53910: PPUSH
53911: CALL 58576 0 2
53915: ST_TO_ADDR
53916: GO 53887
53918: POP
53919: POP
// end ;
53920: LD_VAR 0 2
53924: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53925: LD_INT 0
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
// if not unit or not hexes then
53933: LD_VAR 0 1
53937: NOT
53938: PUSH
53939: LD_VAR 0 2
53943: NOT
53944: OR
53945: IFFALSE 53949
// exit ;
53947: GO 54072
// dist := 9999 ;
53949: LD_ADDR_VAR 0 5
53953: PUSH
53954: LD_INT 9999
53956: ST_TO_ADDR
// for i = 1 to hexes do
53957: LD_ADDR_VAR 0 4
53961: PUSH
53962: DOUBLE
53963: LD_INT 1
53965: DEC
53966: ST_TO_ADDR
53967: LD_VAR 0 2
53971: PUSH
53972: FOR_TO
53973: IFFALSE 54060
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53975: LD_ADDR_VAR 0 6
53979: PUSH
53980: LD_VAR 0 1
53984: PPUSH
53985: LD_VAR 0 2
53989: PUSH
53990: LD_VAR 0 4
53994: ARRAY
53995: PUSH
53996: LD_INT 1
53998: ARRAY
53999: PPUSH
54000: LD_VAR 0 2
54004: PUSH
54005: LD_VAR 0 4
54009: ARRAY
54010: PUSH
54011: LD_INT 2
54013: ARRAY
54014: PPUSH
54015: CALL_OW 297
54019: ST_TO_ADDR
// if tdist < dist then
54020: LD_VAR 0 6
54024: PUSH
54025: LD_VAR 0 5
54029: LESS
54030: IFFALSE 54058
// begin hex := hexes [ i ] ;
54032: LD_ADDR_VAR 0 8
54036: PUSH
54037: LD_VAR 0 2
54041: PUSH
54042: LD_VAR 0 4
54046: ARRAY
54047: ST_TO_ADDR
// dist := tdist ;
54048: LD_ADDR_VAR 0 5
54052: PUSH
54053: LD_VAR 0 6
54057: ST_TO_ADDR
// end ; end ;
54058: GO 53972
54060: POP
54061: POP
// result := hex ;
54062: LD_ADDR_VAR 0 3
54066: PUSH
54067: LD_VAR 0 8
54071: ST_TO_ADDR
// end ;
54072: LD_VAR 0 3
54076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54077: LD_INT 0
54079: PPUSH
54080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54081: LD_VAR 0 1
54085: NOT
54086: PUSH
54087: LD_VAR 0 1
54091: PUSH
54092: LD_INT 21
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 23
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PPUSH
54116: CALL_OW 69
54120: IN
54121: NOT
54122: OR
54123: IFFALSE 54127
// exit ;
54125: GO 54174
// for i = 1 to 3 do
54127: LD_ADDR_VAR 0 3
54131: PUSH
54132: DOUBLE
54133: LD_INT 1
54135: DEC
54136: ST_TO_ADDR
54137: LD_INT 3
54139: PUSH
54140: FOR_TO
54141: IFFALSE 54172
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54143: LD_VAR 0 1
54147: PPUSH
54148: CALL_OW 250
54152: PPUSH
54153: LD_VAR 0 1
54157: PPUSH
54158: CALL_OW 251
54162: PPUSH
54163: LD_INT 1
54165: PPUSH
54166: CALL_OW 453
54170: GO 54140
54172: POP
54173: POP
// end ;
54174: LD_VAR 0 2
54178: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54179: LD_INT 0
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
54185: PPUSH
54186: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54187: LD_VAR 0 1
54191: NOT
54192: PUSH
54193: LD_VAR 0 2
54197: NOT
54198: OR
54199: PUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 314
54209: OR
54210: IFFALSE 54214
// exit ;
54212: GO 54681
// if GetLives ( i ) < 250 then
54214: LD_VAR 0 4
54218: PPUSH
54219: CALL_OW 256
54223: PUSH
54224: LD_INT 250
54226: LESS
54227: IFFALSE 54240
// begin ComAutodestruct ( i ) ;
54229: LD_VAR 0 4
54233: PPUSH
54234: CALL 54077 0 1
// exit ;
54238: GO 54681
// end ; x := GetX ( enemy_unit ) ;
54240: LD_ADDR_VAR 0 7
54244: PUSH
54245: LD_VAR 0 2
54249: PPUSH
54250: CALL_OW 250
54254: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54255: LD_ADDR_VAR 0 8
54259: PUSH
54260: LD_VAR 0 2
54264: PPUSH
54265: CALL_OW 251
54269: ST_TO_ADDR
// if not x or not y then
54270: LD_VAR 0 7
54274: NOT
54275: PUSH
54276: LD_VAR 0 8
54280: NOT
54281: OR
54282: IFFALSE 54286
// exit ;
54284: GO 54681
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54286: LD_ADDR_VAR 0 6
54290: PUSH
54291: LD_VAR 0 7
54295: PPUSH
54296: LD_INT 0
54298: PPUSH
54299: LD_INT 4
54301: PPUSH
54302: CALL_OW 272
54306: PUSH
54307: LD_VAR 0 8
54311: PPUSH
54312: LD_INT 0
54314: PPUSH
54315: LD_INT 4
54317: PPUSH
54318: CALL_OW 273
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_VAR 0 7
54331: PPUSH
54332: LD_INT 1
54334: PPUSH
54335: LD_INT 4
54337: PPUSH
54338: CALL_OW 272
54342: PUSH
54343: LD_VAR 0 8
54347: PPUSH
54348: LD_INT 1
54350: PPUSH
54351: LD_INT 4
54353: PPUSH
54354: CALL_OW 273
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_VAR 0 7
54367: PPUSH
54368: LD_INT 2
54370: PPUSH
54371: LD_INT 4
54373: PPUSH
54374: CALL_OW 272
54378: PUSH
54379: LD_VAR 0 8
54383: PPUSH
54384: LD_INT 2
54386: PPUSH
54387: LD_INT 4
54389: PPUSH
54390: CALL_OW 273
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 7
54403: PPUSH
54404: LD_INT 3
54406: PPUSH
54407: LD_INT 4
54409: PPUSH
54410: CALL_OW 272
54414: PUSH
54415: LD_VAR 0 8
54419: PPUSH
54420: LD_INT 3
54422: PPUSH
54423: LD_INT 4
54425: PPUSH
54426: CALL_OW 273
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 7
54439: PPUSH
54440: LD_INT 4
54442: PPUSH
54443: LD_INT 4
54445: PPUSH
54446: CALL_OW 272
54450: PUSH
54451: LD_VAR 0 8
54455: PPUSH
54456: LD_INT 4
54458: PPUSH
54459: LD_INT 4
54461: PPUSH
54462: CALL_OW 273
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_VAR 0 7
54475: PPUSH
54476: LD_INT 5
54478: PPUSH
54479: LD_INT 4
54481: PPUSH
54482: CALL_OW 272
54486: PUSH
54487: LD_VAR 0 8
54491: PPUSH
54492: LD_INT 5
54494: PPUSH
54495: LD_INT 4
54497: PPUSH
54498: CALL_OW 273
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: ST_TO_ADDR
// for i = tmp downto 1 do
54515: LD_ADDR_VAR 0 4
54519: PUSH
54520: DOUBLE
54521: LD_VAR 0 6
54525: INC
54526: ST_TO_ADDR
54527: LD_INT 1
54529: PUSH
54530: FOR_DOWNTO
54531: IFFALSE 54632
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54533: LD_VAR 0 6
54537: PUSH
54538: LD_VAR 0 4
54542: ARRAY
54543: PUSH
54544: LD_INT 1
54546: ARRAY
54547: PPUSH
54548: LD_VAR 0 6
54552: PUSH
54553: LD_VAR 0 4
54557: ARRAY
54558: PUSH
54559: LD_INT 2
54561: ARRAY
54562: PPUSH
54563: CALL_OW 488
54567: NOT
54568: PUSH
54569: LD_VAR 0 6
54573: PUSH
54574: LD_VAR 0 4
54578: ARRAY
54579: PUSH
54580: LD_INT 1
54582: ARRAY
54583: PPUSH
54584: LD_VAR 0 6
54588: PUSH
54589: LD_VAR 0 4
54593: ARRAY
54594: PUSH
54595: LD_INT 2
54597: ARRAY
54598: PPUSH
54599: CALL_OW 428
54603: PUSH
54604: LD_INT 0
54606: NONEQUAL
54607: OR
54608: IFFALSE 54630
// tmp := Delete ( tmp , i ) ;
54610: LD_ADDR_VAR 0 6
54614: PUSH
54615: LD_VAR 0 6
54619: PPUSH
54620: LD_VAR 0 4
54624: PPUSH
54625: CALL_OW 3
54629: ST_TO_ADDR
54630: GO 54530
54632: POP
54633: POP
// j := GetClosestHex ( unit , tmp ) ;
54634: LD_ADDR_VAR 0 5
54638: PUSH
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_VAR 0 6
54648: PPUSH
54649: CALL 53925 0 2
54653: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54654: LD_VAR 0 1
54658: PPUSH
54659: LD_VAR 0 5
54663: PUSH
54664: LD_INT 1
54666: ARRAY
54667: PPUSH
54668: LD_VAR 0 5
54672: PUSH
54673: LD_INT 2
54675: ARRAY
54676: PPUSH
54677: CALL_OW 111
// end ;
54681: LD_VAR 0 3
54685: RET
// export function PrepareApemanSoldier ( ) ; begin
54686: LD_INT 0
54688: PPUSH
// uc_nation := 0 ;
54689: LD_ADDR_OWVAR 21
54693: PUSH
54694: LD_INT 0
54696: ST_TO_ADDR
// hc_sex := sex_male ;
54697: LD_ADDR_OWVAR 27
54701: PUSH
54702: LD_INT 1
54704: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54705: LD_ADDR_OWVAR 28
54709: PUSH
54710: LD_INT 15
54712: ST_TO_ADDR
// hc_gallery :=  ;
54713: LD_ADDR_OWVAR 33
54717: PUSH
54718: LD_STRING 
54720: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54721: LD_ADDR_OWVAR 31
54725: PUSH
54726: LD_INT 0
54728: PPUSH
54729: LD_INT 3
54731: PPUSH
54732: CALL_OW 12
54736: PUSH
54737: LD_INT 0
54739: PPUSH
54740: LD_INT 3
54742: PPUSH
54743: CALL_OW 12
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// end ;
54760: LD_VAR 0 1
54764: RET
// export function PrepareApemanEngineer ( ) ; begin
54765: LD_INT 0
54767: PPUSH
// uc_nation := 0 ;
54768: LD_ADDR_OWVAR 21
54772: PUSH
54773: LD_INT 0
54775: ST_TO_ADDR
// hc_sex := sex_male ;
54776: LD_ADDR_OWVAR 27
54780: PUSH
54781: LD_INT 1
54783: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54784: LD_ADDR_OWVAR 28
54788: PUSH
54789: LD_INT 16
54791: ST_TO_ADDR
// hc_gallery :=  ;
54792: LD_ADDR_OWVAR 33
54796: PUSH
54797: LD_STRING 
54799: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54800: LD_ADDR_OWVAR 31
54804: PUSH
54805: LD_INT 0
54807: PPUSH
54808: LD_INT 3
54810: PPUSH
54811: CALL_OW 12
54815: PUSH
54816: LD_INT 0
54818: PPUSH
54819: LD_INT 3
54821: PPUSH
54822: CALL_OW 12
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// end ;
54839: LD_VAR 0 1
54843: RET
// export function PrepareApeman ( agressivity ) ; begin
54844: LD_INT 0
54846: PPUSH
// uc_side := 0 ;
54847: LD_ADDR_OWVAR 20
54851: PUSH
54852: LD_INT 0
54854: ST_TO_ADDR
// uc_nation := 0 ;
54855: LD_ADDR_OWVAR 21
54859: PUSH
54860: LD_INT 0
54862: ST_TO_ADDR
// hc_sex := sex_male ;
54863: LD_ADDR_OWVAR 27
54867: PUSH
54868: LD_INT 1
54870: ST_TO_ADDR
// hc_class := class_apeman ;
54871: LD_ADDR_OWVAR 28
54875: PUSH
54876: LD_INT 12
54878: ST_TO_ADDR
// hc_gallery :=  ;
54879: LD_ADDR_OWVAR 33
54883: PUSH
54884: LD_STRING 
54886: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54887: LD_ADDR_OWVAR 35
54891: PUSH
54892: LD_VAR 0 1
54896: NEG
54897: PPUSH
54898: LD_VAR 0 1
54902: PPUSH
54903: CALL_OW 12
54907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54908: LD_ADDR_OWVAR 31
54912: PUSH
54913: LD_INT 0
54915: PPUSH
54916: LD_INT 3
54918: PPUSH
54919: CALL_OW 12
54923: PUSH
54924: LD_INT 0
54926: PPUSH
54927: LD_INT 3
54929: PPUSH
54930: CALL_OW 12
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// end ;
54947: LD_VAR 0 2
54951: RET
// export function PrepareTiger ( agressivity ) ; begin
54952: LD_INT 0
54954: PPUSH
// uc_side := 0 ;
54955: LD_ADDR_OWVAR 20
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// uc_nation := 0 ;
54963: LD_ADDR_OWVAR 21
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// hc_class := class_tiger ;
54971: LD_ADDR_OWVAR 28
54975: PUSH
54976: LD_INT 14
54978: ST_TO_ADDR
// hc_gallery :=  ;
54979: LD_ADDR_OWVAR 33
54983: PUSH
54984: LD_STRING 
54986: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54987: LD_ADDR_OWVAR 35
54991: PUSH
54992: LD_VAR 0 1
54996: NEG
54997: PPUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 12
55007: ST_TO_ADDR
// end ;
55008: LD_VAR 0 2
55012: RET
// export function PrepareEnchidna ( ) ; begin
55013: LD_INT 0
55015: PPUSH
// uc_side := 0 ;
55016: LD_ADDR_OWVAR 20
55020: PUSH
55021: LD_INT 0
55023: ST_TO_ADDR
// uc_nation := 0 ;
55024: LD_ADDR_OWVAR 21
55028: PUSH
55029: LD_INT 0
55031: ST_TO_ADDR
// hc_class := class_baggie ;
55032: LD_ADDR_OWVAR 28
55036: PUSH
55037: LD_INT 13
55039: ST_TO_ADDR
// hc_gallery :=  ;
55040: LD_ADDR_OWVAR 33
55044: PUSH
55045: LD_STRING 
55047: ST_TO_ADDR
// end ;
55048: LD_VAR 0 1
55052: RET
// export function PrepareFrog ( ) ; begin
55053: LD_INT 0
55055: PPUSH
// uc_side := 0 ;
55056: LD_ADDR_OWVAR 20
55060: PUSH
55061: LD_INT 0
55063: ST_TO_ADDR
// uc_nation := 0 ;
55064: LD_ADDR_OWVAR 21
55068: PUSH
55069: LD_INT 0
55071: ST_TO_ADDR
// hc_class := class_frog ;
55072: LD_ADDR_OWVAR 28
55076: PUSH
55077: LD_INT 19
55079: ST_TO_ADDR
// hc_gallery :=  ;
55080: LD_ADDR_OWVAR 33
55084: PUSH
55085: LD_STRING 
55087: ST_TO_ADDR
// end ;
55088: LD_VAR 0 1
55092: RET
// export function PrepareFish ( ) ; begin
55093: LD_INT 0
55095: PPUSH
// uc_side := 0 ;
55096: LD_ADDR_OWVAR 20
55100: PUSH
55101: LD_INT 0
55103: ST_TO_ADDR
// uc_nation := 0 ;
55104: LD_ADDR_OWVAR 21
55108: PUSH
55109: LD_INT 0
55111: ST_TO_ADDR
// hc_class := class_fish ;
55112: LD_ADDR_OWVAR 28
55116: PUSH
55117: LD_INT 20
55119: ST_TO_ADDR
// hc_gallery :=  ;
55120: LD_ADDR_OWVAR 33
55124: PUSH
55125: LD_STRING 
55127: ST_TO_ADDR
// end ;
55128: LD_VAR 0 1
55132: RET
// export function PrepareBird ( ) ; begin
55133: LD_INT 0
55135: PPUSH
// uc_side := 0 ;
55136: LD_ADDR_OWVAR 20
55140: PUSH
55141: LD_INT 0
55143: ST_TO_ADDR
// uc_nation := 0 ;
55144: LD_ADDR_OWVAR 21
55148: PUSH
55149: LD_INT 0
55151: ST_TO_ADDR
// hc_class := class_phororhacos ;
55152: LD_ADDR_OWVAR 28
55156: PUSH
55157: LD_INT 18
55159: ST_TO_ADDR
// hc_gallery :=  ;
55160: LD_ADDR_OWVAR 33
55164: PUSH
55165: LD_STRING 
55167: ST_TO_ADDR
// end ;
55168: LD_VAR 0 1
55172: RET
// export function PrepareHorse ( ) ; begin
55173: LD_INT 0
55175: PPUSH
// uc_side := 0 ;
55176: LD_ADDR_OWVAR 20
55180: PUSH
55181: LD_INT 0
55183: ST_TO_ADDR
// uc_nation := 0 ;
55184: LD_ADDR_OWVAR 21
55188: PUSH
55189: LD_INT 0
55191: ST_TO_ADDR
// hc_class := class_horse ;
55192: LD_ADDR_OWVAR 28
55196: PUSH
55197: LD_INT 21
55199: ST_TO_ADDR
// hc_gallery :=  ;
55200: LD_ADDR_OWVAR 33
55204: PUSH
55205: LD_STRING 
55207: ST_TO_ADDR
// end ;
55208: LD_VAR 0 1
55212: RET
// export function PrepareMastodont ( ) ; begin
55213: LD_INT 0
55215: PPUSH
// uc_side := 0 ;
55216: LD_ADDR_OWVAR 20
55220: PUSH
55221: LD_INT 0
55223: ST_TO_ADDR
// uc_nation := 0 ;
55224: LD_ADDR_OWVAR 21
55228: PUSH
55229: LD_INT 0
55231: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55232: LD_ADDR_OWVAR 37
55236: PUSH
55237: LD_INT 31
55239: ST_TO_ADDR
// vc_control := control_rider ;
55240: LD_ADDR_OWVAR 38
55244: PUSH
55245: LD_INT 4
55247: ST_TO_ADDR
// end ;
55248: LD_VAR 0 1
55252: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55253: LD_INT 0
55255: PPUSH
55256: PPUSH
55257: PPUSH
// uc_side = 0 ;
55258: LD_ADDR_OWVAR 20
55262: PUSH
55263: LD_INT 0
55265: ST_TO_ADDR
// uc_nation = 0 ;
55266: LD_ADDR_OWVAR 21
55270: PUSH
55271: LD_INT 0
55273: ST_TO_ADDR
// InitHc_All ( ) ;
55274: CALL_OW 584
// InitVc ;
55278: CALL_OW 20
// if mastodonts then
55282: LD_VAR 0 6
55286: IFFALSE 55353
// for i = 1 to mastodonts do
55288: LD_ADDR_VAR 0 11
55292: PUSH
55293: DOUBLE
55294: LD_INT 1
55296: DEC
55297: ST_TO_ADDR
55298: LD_VAR 0 6
55302: PUSH
55303: FOR_TO
55304: IFFALSE 55351
// begin vc_chassis := 31 ;
55306: LD_ADDR_OWVAR 37
55310: PUSH
55311: LD_INT 31
55313: ST_TO_ADDR
// vc_control := control_rider ;
55314: LD_ADDR_OWVAR 38
55318: PUSH
55319: LD_INT 4
55321: ST_TO_ADDR
// animal := CreateVehicle ;
55322: LD_ADDR_VAR 0 12
55326: PUSH
55327: CALL_OW 45
55331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55332: LD_VAR 0 12
55336: PPUSH
55337: LD_VAR 0 8
55341: PPUSH
55342: LD_INT 0
55344: PPUSH
55345: CALL 57481 0 3
// end ;
55349: GO 55303
55351: POP
55352: POP
// if horses then
55353: LD_VAR 0 5
55357: IFFALSE 55424
// for i = 1 to horses do
55359: LD_ADDR_VAR 0 11
55363: PUSH
55364: DOUBLE
55365: LD_INT 1
55367: DEC
55368: ST_TO_ADDR
55369: LD_VAR 0 5
55373: PUSH
55374: FOR_TO
55375: IFFALSE 55422
// begin hc_class := 21 ;
55377: LD_ADDR_OWVAR 28
55381: PUSH
55382: LD_INT 21
55384: ST_TO_ADDR
// hc_gallery :=  ;
55385: LD_ADDR_OWVAR 33
55389: PUSH
55390: LD_STRING 
55392: ST_TO_ADDR
// animal := CreateHuman ;
55393: LD_ADDR_VAR 0 12
55397: PUSH
55398: CALL_OW 44
55402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55403: LD_VAR 0 12
55407: PPUSH
55408: LD_VAR 0 8
55412: PPUSH
55413: LD_INT 0
55415: PPUSH
55416: CALL 57481 0 3
// end ;
55420: GO 55374
55422: POP
55423: POP
// if birds then
55424: LD_VAR 0 1
55428: IFFALSE 55495
// for i = 1 to birds do
55430: LD_ADDR_VAR 0 11
55434: PUSH
55435: DOUBLE
55436: LD_INT 1
55438: DEC
55439: ST_TO_ADDR
55440: LD_VAR 0 1
55444: PUSH
55445: FOR_TO
55446: IFFALSE 55493
// begin hc_class := 18 ;
55448: LD_ADDR_OWVAR 28
55452: PUSH
55453: LD_INT 18
55455: ST_TO_ADDR
// hc_gallery =  ;
55456: LD_ADDR_OWVAR 33
55460: PUSH
55461: LD_STRING 
55463: ST_TO_ADDR
// animal := CreateHuman ;
55464: LD_ADDR_VAR 0 12
55468: PUSH
55469: CALL_OW 44
55473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55474: LD_VAR 0 12
55478: PPUSH
55479: LD_VAR 0 8
55483: PPUSH
55484: LD_INT 0
55486: PPUSH
55487: CALL 57481 0 3
// end ;
55491: GO 55445
55493: POP
55494: POP
// if tigers then
55495: LD_VAR 0 2
55499: IFFALSE 55583
// for i = 1 to tigers do
55501: LD_ADDR_VAR 0 11
55505: PUSH
55506: DOUBLE
55507: LD_INT 1
55509: DEC
55510: ST_TO_ADDR
55511: LD_VAR 0 2
55515: PUSH
55516: FOR_TO
55517: IFFALSE 55581
// begin hc_class = class_tiger ;
55519: LD_ADDR_OWVAR 28
55523: PUSH
55524: LD_INT 14
55526: ST_TO_ADDR
// hc_gallery =  ;
55527: LD_ADDR_OWVAR 33
55531: PUSH
55532: LD_STRING 
55534: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55535: LD_ADDR_OWVAR 35
55539: PUSH
55540: LD_INT 7
55542: NEG
55543: PPUSH
55544: LD_INT 7
55546: PPUSH
55547: CALL_OW 12
55551: ST_TO_ADDR
// animal := CreateHuman ;
55552: LD_ADDR_VAR 0 12
55556: PUSH
55557: CALL_OW 44
55561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55562: LD_VAR 0 12
55566: PPUSH
55567: LD_VAR 0 8
55571: PPUSH
55572: LD_INT 0
55574: PPUSH
55575: CALL 57481 0 3
// end ;
55579: GO 55516
55581: POP
55582: POP
// if apemans then
55583: LD_VAR 0 3
55587: IFFALSE 55710
// for i = 1 to apemans do
55589: LD_ADDR_VAR 0 11
55593: PUSH
55594: DOUBLE
55595: LD_INT 1
55597: DEC
55598: ST_TO_ADDR
55599: LD_VAR 0 3
55603: PUSH
55604: FOR_TO
55605: IFFALSE 55708
// begin hc_class = class_apeman ;
55607: LD_ADDR_OWVAR 28
55611: PUSH
55612: LD_INT 12
55614: ST_TO_ADDR
// hc_gallery =  ;
55615: LD_ADDR_OWVAR 33
55619: PUSH
55620: LD_STRING 
55622: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55623: LD_ADDR_OWVAR 35
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PPUSH
55632: LD_INT 2
55634: PPUSH
55635: CALL_OW 12
55639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55640: LD_ADDR_OWVAR 31
55644: PUSH
55645: LD_INT 1
55647: PPUSH
55648: LD_INT 3
55650: PPUSH
55651: CALL_OW 12
55655: PUSH
55656: LD_INT 1
55658: PPUSH
55659: LD_INT 3
55661: PPUSH
55662: CALL_OW 12
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// animal := CreateHuman ;
55679: LD_ADDR_VAR 0 12
55683: PUSH
55684: CALL_OW 44
55688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55689: LD_VAR 0 12
55693: PPUSH
55694: LD_VAR 0 8
55698: PPUSH
55699: LD_INT 0
55701: PPUSH
55702: CALL 57481 0 3
// end ;
55706: GO 55604
55708: POP
55709: POP
// if enchidnas then
55710: LD_VAR 0 4
55714: IFFALSE 55781
// for i = 1 to enchidnas do
55716: LD_ADDR_VAR 0 11
55720: PUSH
55721: DOUBLE
55722: LD_INT 1
55724: DEC
55725: ST_TO_ADDR
55726: LD_VAR 0 4
55730: PUSH
55731: FOR_TO
55732: IFFALSE 55779
// begin hc_class = 13 ;
55734: LD_ADDR_OWVAR 28
55738: PUSH
55739: LD_INT 13
55741: ST_TO_ADDR
// hc_gallery =  ;
55742: LD_ADDR_OWVAR 33
55746: PUSH
55747: LD_STRING 
55749: ST_TO_ADDR
// animal := CreateHuman ;
55750: LD_ADDR_VAR 0 12
55754: PUSH
55755: CALL_OW 44
55759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55760: LD_VAR 0 12
55764: PPUSH
55765: LD_VAR 0 8
55769: PPUSH
55770: LD_INT 0
55772: PPUSH
55773: CALL 57481 0 3
// end ;
55777: GO 55731
55779: POP
55780: POP
// if fishes then
55781: LD_VAR 0 7
55785: IFFALSE 55852
// for i = 1 to fishes do
55787: LD_ADDR_VAR 0 11
55791: PUSH
55792: DOUBLE
55793: LD_INT 1
55795: DEC
55796: ST_TO_ADDR
55797: LD_VAR 0 7
55801: PUSH
55802: FOR_TO
55803: IFFALSE 55850
// begin hc_class = 20 ;
55805: LD_ADDR_OWVAR 28
55809: PUSH
55810: LD_INT 20
55812: ST_TO_ADDR
// hc_gallery =  ;
55813: LD_ADDR_OWVAR 33
55817: PUSH
55818: LD_STRING 
55820: ST_TO_ADDR
// animal := CreateHuman ;
55821: LD_ADDR_VAR 0 12
55825: PUSH
55826: CALL_OW 44
55830: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55831: LD_VAR 0 12
55835: PPUSH
55836: LD_VAR 0 9
55840: PPUSH
55841: LD_INT 0
55843: PPUSH
55844: CALL 57481 0 3
// end ;
55848: GO 55802
55850: POP
55851: POP
// end ;
55852: LD_VAR 0 10
55856: RET
// export function WantHeal ( sci , unit ) ; begin
55857: LD_INT 0
55859: PPUSH
// if GetTaskList ( sci ) > 0 then
55860: LD_VAR 0 1
55864: PPUSH
55865: CALL_OW 437
55869: PUSH
55870: LD_INT 0
55872: GREATER
55873: IFFALSE 55943
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55875: LD_VAR 0 1
55879: PPUSH
55880: CALL_OW 437
55884: PUSH
55885: LD_INT 1
55887: ARRAY
55888: PUSH
55889: LD_INT 1
55891: ARRAY
55892: PUSH
55893: LD_STRING l
55895: EQUAL
55896: PUSH
55897: LD_VAR 0 1
55901: PPUSH
55902: CALL_OW 437
55906: PUSH
55907: LD_INT 1
55909: ARRAY
55910: PUSH
55911: LD_INT 4
55913: ARRAY
55914: PUSH
55915: LD_VAR 0 2
55919: EQUAL
55920: AND
55921: IFFALSE 55933
// result := true else
55923: LD_ADDR_VAR 0 3
55927: PUSH
55928: LD_INT 1
55930: ST_TO_ADDR
55931: GO 55941
// result := false ;
55933: LD_ADDR_VAR 0 3
55937: PUSH
55938: LD_INT 0
55940: ST_TO_ADDR
// end else
55941: GO 55951
// result := false ;
55943: LD_ADDR_VAR 0 3
55947: PUSH
55948: LD_INT 0
55950: ST_TO_ADDR
// end ;
55951: LD_VAR 0 3
55955: RET
// export function HealTarget ( sci ) ; begin
55956: LD_INT 0
55958: PPUSH
// if not sci then
55959: LD_VAR 0 1
55963: NOT
55964: IFFALSE 55968
// exit ;
55966: GO 56033
// result := 0 ;
55968: LD_ADDR_VAR 0 2
55972: PUSH
55973: LD_INT 0
55975: ST_TO_ADDR
// if GetTaskList ( sci ) then
55976: LD_VAR 0 1
55980: PPUSH
55981: CALL_OW 437
55985: IFFALSE 56033
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55987: LD_VAR 0 1
55991: PPUSH
55992: CALL_OW 437
55996: PUSH
55997: LD_INT 1
55999: ARRAY
56000: PUSH
56001: LD_INT 1
56003: ARRAY
56004: PUSH
56005: LD_STRING l
56007: EQUAL
56008: IFFALSE 56033
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: CALL_OW 437
56024: PUSH
56025: LD_INT 1
56027: ARRAY
56028: PUSH
56029: LD_INT 4
56031: ARRAY
56032: ST_TO_ADDR
// end ;
56033: LD_VAR 0 2
56037: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56038: LD_INT 0
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
// if not base_units then
56044: LD_VAR 0 1
56048: NOT
56049: IFFALSE 56053
// exit ;
56051: GO 56140
// result := false ;
56053: LD_ADDR_VAR 0 2
56057: PUSH
56058: LD_INT 0
56060: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56061: LD_ADDR_VAR 0 5
56065: PUSH
56066: LD_VAR 0 1
56070: PPUSH
56071: LD_INT 21
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PPUSH
56081: CALL_OW 72
56085: ST_TO_ADDR
// if not tmp then
56086: LD_VAR 0 5
56090: NOT
56091: IFFALSE 56095
// exit ;
56093: GO 56140
// for i in tmp do
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: LD_VAR 0 5
56104: PUSH
56105: FOR_IN
56106: IFFALSE 56138
// begin result := EnemyInRange ( i , 22 ) ;
56108: LD_ADDR_VAR 0 2
56112: PUSH
56113: LD_VAR 0 3
56117: PPUSH
56118: LD_INT 22
56120: PPUSH
56121: CALL 53727 0 2
56125: ST_TO_ADDR
// if result then
56126: LD_VAR 0 2
56130: IFFALSE 56136
// exit ;
56132: POP
56133: POP
56134: GO 56140
// end ;
56136: GO 56105
56138: POP
56139: POP
// end ;
56140: LD_VAR 0 2
56144: RET
// export function FilterByTag ( units , tag ) ; begin
56145: LD_INT 0
56147: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56148: LD_ADDR_VAR 0 3
56152: PUSH
56153: LD_VAR 0 1
56157: PPUSH
56158: LD_INT 120
56160: PUSH
56161: LD_VAR 0 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PPUSH
56170: CALL_OW 72
56174: ST_TO_ADDR
// end ;
56175: LD_VAR 0 3
56179: RET
// export function IsDriver ( un ) ; begin
56180: LD_INT 0
56182: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56183: LD_ADDR_VAR 0 2
56187: PUSH
56188: LD_VAR 0 1
56192: PUSH
56193: LD_INT 55
56195: PUSH
56196: EMPTY
56197: LIST
56198: PPUSH
56199: CALL_OW 69
56203: IN
56204: ST_TO_ADDR
// end ;
56205: LD_VAR 0 2
56209: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56210: LD_INT 0
56212: PPUSH
56213: PPUSH
// list := [ ] ;
56214: LD_ADDR_VAR 0 5
56218: PUSH
56219: EMPTY
56220: ST_TO_ADDR
// case d of 0 :
56221: LD_VAR 0 3
56225: PUSH
56226: LD_INT 0
56228: DOUBLE
56229: EQUAL
56230: IFTRUE 56234
56232: GO 56367
56234: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56235: LD_ADDR_VAR 0 5
56239: PUSH
56240: LD_VAR 0 1
56244: PUSH
56245: LD_INT 4
56247: MINUS
56248: PUSH
56249: LD_VAR 0 2
56253: PUSH
56254: LD_INT 4
56256: MINUS
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: PUSH
56266: LD_VAR 0 1
56270: PUSH
56271: LD_INT 3
56273: MINUS
56274: PUSH
56275: LD_VAR 0 2
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: PUSH
56288: LD_VAR 0 1
56292: PUSH
56293: LD_INT 4
56295: PLUS
56296: PUSH
56297: LD_VAR 0 2
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: PUSH
56310: LD_VAR 0 1
56314: PUSH
56315: LD_INT 3
56317: PLUS
56318: PUSH
56319: LD_VAR 0 2
56323: PUSH
56324: LD_INT 3
56326: PLUS
56327: PUSH
56328: LD_INT 5
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: PUSH
56336: LD_VAR 0 1
56340: PUSH
56341: LD_VAR 0 2
56345: PUSH
56346: LD_INT 4
56348: PLUS
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// end ; 1 :
56365: GO 57065
56367: LD_INT 1
56369: DOUBLE
56370: EQUAL
56371: IFTRUE 56375
56373: GO 56508
56375: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56376: LD_ADDR_VAR 0 5
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: LD_VAR 0 2
56390: PUSH
56391: LD_INT 4
56393: MINUS
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: PUSH
56403: LD_VAR 0 1
56407: PUSH
56408: LD_INT 3
56410: MINUS
56411: PUSH
56412: LD_VAR 0 2
56416: PUSH
56417: LD_INT 3
56419: MINUS
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: LIST
56428: PUSH
56429: LD_VAR 0 1
56433: PUSH
56434: LD_INT 4
56436: MINUS
56437: PUSH
56438: LD_VAR 0 2
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: PUSH
56451: LD_VAR 0 1
56455: PUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_INT 3
56463: PLUS
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: PUSH
56473: LD_VAR 0 1
56477: PUSH
56478: LD_INT 4
56480: PLUS
56481: PUSH
56482: LD_VAR 0 2
56486: PUSH
56487: LD_INT 4
56489: PLUS
56490: PUSH
56491: LD_INT 5
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// end ; 2 :
56506: GO 57065
56508: LD_INT 2
56510: DOUBLE
56511: EQUAL
56512: IFTRUE 56516
56514: GO 56645
56516: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56517: LD_ADDR_VAR 0 5
56521: PUSH
56522: LD_VAR 0 1
56526: PUSH
56527: LD_VAR 0 2
56531: PUSH
56532: LD_INT 3
56534: MINUS
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: PUSH
56544: LD_VAR 0 1
56548: PUSH
56549: LD_INT 4
56551: PLUS
56552: PUSH
56553: LD_VAR 0 2
56557: PUSH
56558: LD_INT 4
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: PUSH
56566: LD_VAR 0 1
56570: PUSH
56571: LD_VAR 0 2
56575: PUSH
56576: LD_INT 4
56578: PLUS
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: PUSH
56588: LD_VAR 0 1
56592: PUSH
56593: LD_INT 3
56595: MINUS
56596: PUSH
56597: LD_VAR 0 2
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: PUSH
56610: LD_VAR 0 1
56614: PUSH
56615: LD_INT 4
56617: MINUS
56618: PUSH
56619: LD_VAR 0 2
56623: PUSH
56624: LD_INT 4
56626: MINUS
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// end ; 3 :
56643: GO 57065
56645: LD_INT 3
56647: DOUBLE
56648: EQUAL
56649: IFTRUE 56653
56651: GO 56786
56653: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56654: LD_ADDR_VAR 0 5
56658: PUSH
56659: LD_VAR 0 1
56663: PUSH
56664: LD_INT 3
56666: PLUS
56667: PUSH
56668: LD_VAR 0 2
56672: PUSH
56673: LD_INT 4
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: PUSH
56681: LD_VAR 0 1
56685: PUSH
56686: LD_INT 4
56688: PLUS
56689: PUSH
56690: LD_VAR 0 2
56694: PUSH
56695: LD_INT 4
56697: PLUS
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: PUSH
56707: LD_VAR 0 1
56711: PUSH
56712: LD_INT 4
56714: MINUS
56715: PUSH
56716: LD_VAR 0 2
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: PUSH
56729: LD_VAR 0 1
56733: PUSH
56734: LD_VAR 0 2
56738: PUSH
56739: LD_INT 4
56741: MINUS
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: PUSH
56751: LD_VAR 0 1
56755: PUSH
56756: LD_INT 3
56758: MINUS
56759: PUSH
56760: LD_VAR 0 2
56764: PUSH
56765: LD_INT 3
56767: MINUS
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// end ; 4 :
56784: GO 57065
56786: LD_INT 4
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56794
56792: GO 56927
56794: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56795: LD_ADDR_VAR 0 5
56799: PUSH
56800: LD_VAR 0 1
56804: PUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_INT 4
56812: PLUS
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: LD_VAR 0 1
56826: PUSH
56827: LD_INT 3
56829: PLUS
56830: PUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_INT 3
56838: PLUS
56839: PUSH
56840: LD_INT 5
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: PUSH
56848: LD_VAR 0 1
56852: PUSH
56853: LD_INT 4
56855: PLUS
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: PUSH
56870: LD_VAR 0 1
56874: PUSH
56875: LD_VAR 0 2
56879: PUSH
56880: LD_INT 3
56882: MINUS
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: PUSH
56892: LD_VAR 0 1
56896: PUSH
56897: LD_INT 4
56899: MINUS
56900: PUSH
56901: LD_VAR 0 2
56905: PUSH
56906: LD_INT 4
56908: MINUS
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// end ; 5 :
56925: GO 57065
56927: LD_INT 5
56929: DOUBLE
56930: EQUAL
56931: IFTRUE 56935
56933: GO 57064
56935: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56936: LD_ADDR_VAR 0 5
56940: PUSH
56941: LD_VAR 0 1
56945: PUSH
56946: LD_INT 4
56948: MINUS
56949: PUSH
56950: LD_VAR 0 2
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: PUSH
56963: LD_VAR 0 1
56967: PUSH
56968: LD_VAR 0 2
56972: PUSH
56973: LD_INT 4
56975: MINUS
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: PUSH
56985: LD_VAR 0 1
56989: PUSH
56990: LD_INT 4
56992: PLUS
56993: PUSH
56994: LD_VAR 0 2
56998: PUSH
56999: LD_INT 4
57001: PLUS
57002: PUSH
57003: LD_INT 5
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: PUSH
57011: LD_VAR 0 1
57015: PUSH
57016: LD_INT 3
57018: PLUS
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: LD_INT 4
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: PUSH
57033: LD_VAR 0 1
57037: PUSH
57038: LD_VAR 0 2
57042: PUSH
57043: LD_INT 3
57045: PLUS
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// end ; end ;
57062: GO 57065
57064: POP
// result := list ;
57065: LD_ADDR_VAR 0 4
57069: PUSH
57070: LD_VAR 0 5
57074: ST_TO_ADDR
// end ;
57075: LD_VAR 0 4
57079: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57080: LD_INT 0
57082: PPUSH
57083: PPUSH
57084: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57085: LD_VAR 0 1
57089: NOT
57090: PUSH
57091: LD_VAR 0 2
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: IN
57114: NOT
57115: OR
57116: IFFALSE 57120
// exit ;
57118: GO 57203
// tmp := [ ] ;
57120: LD_ADDR_VAR 0 5
57124: PUSH
57125: EMPTY
57126: ST_TO_ADDR
// for i in units do
57127: LD_ADDR_VAR 0 4
57131: PUSH
57132: LD_VAR 0 1
57136: PUSH
57137: FOR_IN
57138: IFFALSE 57172
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57140: LD_ADDR_VAR 0 5
57144: PUSH
57145: LD_VAR 0 5
57149: PPUSH
57150: LD_VAR 0 4
57154: PPUSH
57155: LD_VAR 0 2
57159: PPUSH
57160: CALL_OW 259
57164: PPUSH
57165: CALL 58576 0 2
57169: ST_TO_ADDR
57170: GO 57137
57172: POP
57173: POP
// if not tmp then
57174: LD_VAR 0 5
57178: NOT
57179: IFFALSE 57183
// exit ;
57181: GO 57203
// result := SortListByListDesc ( units , tmp ) ;
57183: LD_ADDR_VAR 0 3
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: LD_VAR 0 5
57197: PPUSH
57198: CALL_OW 77
57202: ST_TO_ADDR
// end ;
57203: LD_VAR 0 3
57207: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57208: LD_INT 0
57210: PPUSH
57211: PPUSH
57212: PPUSH
// result := false ;
57213: LD_ADDR_VAR 0 3
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// if not building then
57221: LD_VAR 0 2
57225: NOT
57226: IFFALSE 57230
// exit ;
57228: GO 57368
// x := GetX ( building ) ;
57230: LD_ADDR_VAR 0 4
57234: PUSH
57235: LD_VAR 0 2
57239: PPUSH
57240: CALL_OW 250
57244: ST_TO_ADDR
// y := GetY ( building ) ;
57245: LD_ADDR_VAR 0 5
57249: PUSH
57250: LD_VAR 0 2
57254: PPUSH
57255: CALL_OW 251
57259: ST_TO_ADDR
// if not x or not y then
57260: LD_VAR 0 4
57264: NOT
57265: PUSH
57266: LD_VAR 0 5
57270: NOT
57271: OR
57272: IFFALSE 57276
// exit ;
57274: GO 57368
// if GetTaskList ( unit ) then
57276: LD_VAR 0 1
57280: PPUSH
57281: CALL_OW 437
57285: IFFALSE 57368
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57287: LD_STRING e
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: CALL_OW 437
57299: PUSH
57300: LD_INT 1
57302: ARRAY
57303: PUSH
57304: LD_INT 1
57306: ARRAY
57307: EQUAL
57308: PUSH
57309: LD_VAR 0 4
57313: PUSH
57314: LD_VAR 0 1
57318: PPUSH
57319: CALL_OW 437
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PUSH
57328: LD_INT 2
57330: ARRAY
57331: EQUAL
57332: AND
57333: PUSH
57334: LD_VAR 0 5
57338: PUSH
57339: LD_VAR 0 1
57343: PPUSH
57344: CALL_OW 437
57348: PUSH
57349: LD_INT 1
57351: ARRAY
57352: PUSH
57353: LD_INT 3
57355: ARRAY
57356: EQUAL
57357: AND
57358: IFFALSE 57368
// result := true end ;
57360: LD_ADDR_VAR 0 3
57364: PUSH
57365: LD_INT 1
57367: ST_TO_ADDR
// end ;
57368: LD_VAR 0 3
57372: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57373: LD_INT 0
57375: PPUSH
// result := false ;
57376: LD_ADDR_VAR 0 4
57380: PUSH
57381: LD_INT 0
57383: ST_TO_ADDR
// if GetTaskList ( unit ) then
57384: LD_VAR 0 1
57388: PPUSH
57389: CALL_OW 437
57393: IFFALSE 57476
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57395: LD_STRING M
57397: PUSH
57398: LD_VAR 0 1
57402: PPUSH
57403: CALL_OW 437
57407: PUSH
57408: LD_INT 1
57410: ARRAY
57411: PUSH
57412: LD_INT 1
57414: ARRAY
57415: EQUAL
57416: PUSH
57417: LD_VAR 0 2
57421: PUSH
57422: LD_VAR 0 1
57426: PPUSH
57427: CALL_OW 437
57431: PUSH
57432: LD_INT 1
57434: ARRAY
57435: PUSH
57436: LD_INT 2
57438: ARRAY
57439: EQUAL
57440: AND
57441: PUSH
57442: LD_VAR 0 3
57446: PUSH
57447: LD_VAR 0 1
57451: PPUSH
57452: CALL_OW 437
57456: PUSH
57457: LD_INT 1
57459: ARRAY
57460: PUSH
57461: LD_INT 3
57463: ARRAY
57464: EQUAL
57465: AND
57466: IFFALSE 57476
// result := true ;
57468: LD_ADDR_VAR 0 4
57472: PUSH
57473: LD_INT 1
57475: ST_TO_ADDR
// end ; end ;
57476: LD_VAR 0 4
57480: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57481: LD_INT 0
57483: PPUSH
57484: PPUSH
57485: PPUSH
57486: PPUSH
// if not unit or not area then
57487: LD_VAR 0 1
57491: NOT
57492: PUSH
57493: LD_VAR 0 2
57497: NOT
57498: OR
57499: IFFALSE 57503
// exit ;
57501: GO 57679
// tmp := AreaToList ( area , i ) ;
57503: LD_ADDR_VAR 0 6
57507: PUSH
57508: LD_VAR 0 2
57512: PPUSH
57513: LD_VAR 0 5
57517: PPUSH
57518: CALL_OW 517
57522: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57523: LD_ADDR_VAR 0 5
57527: PUSH
57528: DOUBLE
57529: LD_INT 1
57531: DEC
57532: ST_TO_ADDR
57533: LD_VAR 0 6
57537: PUSH
57538: LD_INT 1
57540: ARRAY
57541: PUSH
57542: FOR_TO
57543: IFFALSE 57677
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57545: LD_ADDR_VAR 0 7
57549: PUSH
57550: LD_VAR 0 6
57554: PUSH
57555: LD_INT 1
57557: ARRAY
57558: PUSH
57559: LD_VAR 0 5
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 6
57569: PUSH
57570: LD_INT 2
57572: ARRAY
57573: PUSH
57574: LD_VAR 0 5
57578: ARRAY
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57584: LD_INT 92
57586: PUSH
57587: LD_VAR 0 7
57591: PUSH
57592: LD_INT 1
57594: ARRAY
57595: PUSH
57596: LD_VAR 0 7
57600: PUSH
57601: LD_INT 2
57603: ARRAY
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: PPUSH
57614: CALL_OW 69
57618: PUSH
57619: LD_INT 0
57621: EQUAL
57622: IFFALSE 57675
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57624: LD_VAR 0 1
57628: PPUSH
57629: LD_VAR 0 7
57633: PUSH
57634: LD_INT 1
57636: ARRAY
57637: PPUSH
57638: LD_VAR 0 7
57642: PUSH
57643: LD_INT 2
57645: ARRAY
57646: PPUSH
57647: LD_VAR 0 3
57651: PPUSH
57652: CALL_OW 48
// result := IsPlaced ( unit ) ;
57656: LD_ADDR_VAR 0 4
57660: PUSH
57661: LD_VAR 0 1
57665: PPUSH
57666: CALL_OW 305
57670: ST_TO_ADDR
// exit ;
57671: POP
57672: POP
57673: GO 57679
// end ; end ;
57675: GO 57542
57677: POP
57678: POP
// end ;
57679: LD_VAR 0 4
57683: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57684: LD_INT 0
57686: PPUSH
57687: PPUSH
57688: PPUSH
// if not side or side > 8 then
57689: LD_VAR 0 1
57693: NOT
57694: PUSH
57695: LD_VAR 0 1
57699: PUSH
57700: LD_INT 8
57702: GREATER
57703: OR
57704: IFFALSE 57708
// exit ;
57706: GO 57895
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57708: LD_ADDR_VAR 0 4
57712: PUSH
57713: LD_INT 22
57715: PUSH
57716: LD_VAR 0 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 21
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PPUSH
57739: CALL_OW 69
57743: ST_TO_ADDR
// if not tmp then
57744: LD_VAR 0 4
57748: NOT
57749: IFFALSE 57753
// exit ;
57751: GO 57895
// enable_addtolog := true ;
57753: LD_ADDR_OWVAR 81
57757: PUSH
57758: LD_INT 1
57760: ST_TO_ADDR
// AddToLog ( [ ) ;
57761: LD_STRING [
57763: PPUSH
57764: CALL_OW 561
// for i in tmp do
57768: LD_ADDR_VAR 0 3
57772: PUSH
57773: LD_VAR 0 4
57777: PUSH
57778: FOR_IN
57779: IFFALSE 57886
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57781: LD_STRING [
57783: PUSH
57784: LD_VAR 0 3
57788: PPUSH
57789: CALL_OW 266
57793: STR
57794: PUSH
57795: LD_STRING , 
57797: STR
57798: PUSH
57799: LD_VAR 0 3
57803: PPUSH
57804: CALL_OW 250
57808: STR
57809: PUSH
57810: LD_STRING , 
57812: STR
57813: PUSH
57814: LD_VAR 0 3
57818: PPUSH
57819: CALL_OW 251
57823: STR
57824: PUSH
57825: LD_STRING , 
57827: STR
57828: PUSH
57829: LD_VAR 0 3
57833: PPUSH
57834: CALL_OW 254
57838: STR
57839: PUSH
57840: LD_STRING , 
57842: STR
57843: PUSH
57844: LD_VAR 0 3
57848: PPUSH
57849: LD_INT 1
57851: PPUSH
57852: CALL_OW 268
57856: STR
57857: PUSH
57858: LD_STRING , 
57860: STR
57861: PUSH
57862: LD_VAR 0 3
57866: PPUSH
57867: LD_INT 2
57869: PPUSH
57870: CALL_OW 268
57874: STR
57875: PUSH
57876: LD_STRING ],
57878: STR
57879: PPUSH
57880: CALL_OW 561
// end ;
57884: GO 57778
57886: POP
57887: POP
// AddToLog ( ]; ) ;
57888: LD_STRING ];
57890: PPUSH
57891: CALL_OW 561
// end ;
57895: LD_VAR 0 2
57899: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
57904: PPUSH
57905: PPUSH
57906: PPUSH
// if not area or not rate or not max then
57907: LD_VAR 0 1
57911: NOT
57912: PUSH
57913: LD_VAR 0 2
57917: NOT
57918: OR
57919: PUSH
57920: LD_VAR 0 4
57924: NOT
57925: OR
57926: IFFALSE 57930
// exit ;
57928: GO 58119
// while 1 do
57930: LD_INT 1
57932: IFFALSE 58119
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57934: LD_ADDR_VAR 0 9
57938: PUSH
57939: LD_VAR 0 1
57943: PPUSH
57944: LD_INT 1
57946: PPUSH
57947: CALL_OW 287
57951: PUSH
57952: LD_INT 10
57954: MUL
57955: ST_TO_ADDR
// r := rate / 10 ;
57956: LD_ADDR_VAR 0 7
57960: PUSH
57961: LD_VAR 0 2
57965: PUSH
57966: LD_INT 10
57968: DIVREAL
57969: ST_TO_ADDR
// time := 1 1$00 ;
57970: LD_ADDR_VAR 0 8
57974: PUSH
57975: LD_INT 2100
57977: ST_TO_ADDR
// if amount < min then
57978: LD_VAR 0 9
57982: PUSH
57983: LD_VAR 0 3
57987: LESS
57988: IFFALSE 58006
// r := r * 2 else
57990: LD_ADDR_VAR 0 7
57994: PUSH
57995: LD_VAR 0 7
57999: PUSH
58000: LD_INT 2
58002: MUL
58003: ST_TO_ADDR
58004: GO 58032
// if amount > max then
58006: LD_VAR 0 9
58010: PUSH
58011: LD_VAR 0 4
58015: GREATER
58016: IFFALSE 58032
// r := r / 2 ;
58018: LD_ADDR_VAR 0 7
58022: PUSH
58023: LD_VAR 0 7
58027: PUSH
58028: LD_INT 2
58030: DIVREAL
58031: ST_TO_ADDR
// time := time / r ;
58032: LD_ADDR_VAR 0 8
58036: PUSH
58037: LD_VAR 0 8
58041: PUSH
58042: LD_VAR 0 7
58046: DIVREAL
58047: ST_TO_ADDR
// if time < 0 then
58048: LD_VAR 0 8
58052: PUSH
58053: LD_INT 0
58055: LESS
58056: IFFALSE 58073
// time := time * - 1 ;
58058: LD_ADDR_VAR 0 8
58062: PUSH
58063: LD_VAR 0 8
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: MUL
58072: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58073: LD_VAR 0 8
58077: PUSH
58078: LD_INT 35
58080: PPUSH
58081: LD_INT 875
58083: PPUSH
58084: CALL_OW 12
58088: PLUS
58089: PPUSH
58090: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58094: LD_INT 1
58096: PPUSH
58097: LD_INT 5
58099: PPUSH
58100: CALL_OW 12
58104: PPUSH
58105: LD_VAR 0 1
58109: PPUSH
58110: LD_INT 1
58112: PPUSH
58113: CALL_OW 55
// end ;
58117: GO 57930
// end ;
58119: LD_VAR 0 5
58123: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58124: LD_INT 0
58126: PPUSH
58127: PPUSH
58128: PPUSH
58129: PPUSH
58130: PPUSH
58131: PPUSH
58132: PPUSH
58133: PPUSH
// if not turrets or not factories then
58134: LD_VAR 0 1
58138: NOT
58139: PUSH
58140: LD_VAR 0 2
58144: NOT
58145: OR
58146: IFFALSE 58150
// exit ;
58148: GO 58457
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58150: LD_ADDR_VAR 0 10
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: LD_INT 6
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 5
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 24
58192: PUSH
58193: LD_INT 25
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 23
58202: PUSH
58203: LD_INT 27
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 42
58216: PUSH
58217: LD_INT 43
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 44
58226: PUSH
58227: LD_INT 46
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 45
58236: PUSH
58237: LD_INT 47
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: ST_TO_ADDR
// result := [ ] ;
58254: LD_ADDR_VAR 0 3
58258: PUSH
58259: EMPTY
58260: ST_TO_ADDR
// for i in turrets do
58261: LD_ADDR_VAR 0 4
58265: PUSH
58266: LD_VAR 0 1
58270: PUSH
58271: FOR_IN
58272: IFFALSE 58455
// begin nat := GetNation ( i ) ;
58274: LD_ADDR_VAR 0 7
58278: PUSH
58279: LD_VAR 0 4
58283: PPUSH
58284: CALL_OW 248
58288: ST_TO_ADDR
// weapon := 0 ;
58289: LD_ADDR_VAR 0 8
58293: PUSH
58294: LD_INT 0
58296: ST_TO_ADDR
// if not nat then
58297: LD_VAR 0 7
58301: NOT
58302: IFFALSE 58306
// continue ;
58304: GO 58271
// for j in list [ nat ] do
58306: LD_ADDR_VAR 0 5
58310: PUSH
58311: LD_VAR 0 10
58315: PUSH
58316: LD_VAR 0 7
58320: ARRAY
58321: PUSH
58322: FOR_IN
58323: IFFALSE 58364
// if GetBWeapon ( i ) = j [ 1 ] then
58325: LD_VAR 0 4
58329: PPUSH
58330: CALL_OW 269
58334: PUSH
58335: LD_VAR 0 5
58339: PUSH
58340: LD_INT 1
58342: ARRAY
58343: EQUAL
58344: IFFALSE 58362
// begin weapon := j [ 2 ] ;
58346: LD_ADDR_VAR 0 8
58350: PUSH
58351: LD_VAR 0 5
58355: PUSH
58356: LD_INT 2
58358: ARRAY
58359: ST_TO_ADDR
// break ;
58360: GO 58364
// end ;
58362: GO 58322
58364: POP
58365: POP
// if not weapon then
58366: LD_VAR 0 8
58370: NOT
58371: IFFALSE 58375
// continue ;
58373: GO 58271
// for k in factories do
58375: LD_ADDR_VAR 0 6
58379: PUSH
58380: LD_VAR 0 2
58384: PUSH
58385: FOR_IN
58386: IFFALSE 58451
// begin weapons := AvailableWeaponList ( k ) ;
58388: LD_ADDR_VAR 0 9
58392: PUSH
58393: LD_VAR 0 6
58397: PPUSH
58398: CALL_OW 478
58402: ST_TO_ADDR
// if not weapons then
58403: LD_VAR 0 9
58407: NOT
58408: IFFALSE 58412
// continue ;
58410: GO 58385
// if weapon in weapons then
58412: LD_VAR 0 8
58416: PUSH
58417: LD_VAR 0 9
58421: IN
58422: IFFALSE 58449
// begin result := [ i , weapon ] ;
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: LD_VAR 0 4
58433: PUSH
58434: LD_VAR 0 8
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// exit ;
58443: POP
58444: POP
58445: POP
58446: POP
58447: GO 58457
// end ; end ;
58449: GO 58385
58451: POP
58452: POP
// end ;
58453: GO 58271
58455: POP
58456: POP
// end ;
58457: LD_VAR 0 3
58461: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58462: LD_INT 0
58464: PPUSH
// if not side or side > 8 then
58465: LD_VAR 0 3
58469: NOT
58470: PUSH
58471: LD_VAR 0 3
58475: PUSH
58476: LD_INT 8
58478: GREATER
58479: OR
58480: IFFALSE 58484
// exit ;
58482: GO 58543
// if not range then
58484: LD_VAR 0 4
58488: NOT
58489: IFFALSE 58500
// range := - 12 ;
58491: LD_ADDR_VAR 0 4
58495: PUSH
58496: LD_INT 12
58498: NEG
58499: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58500: LD_VAR 0 1
58504: PPUSH
58505: LD_VAR 0 2
58509: PPUSH
58510: LD_VAR 0 3
58514: PPUSH
58515: LD_VAR 0 4
58519: PPUSH
58520: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58524: LD_VAR 0 1
58528: PPUSH
58529: LD_VAR 0 2
58533: PPUSH
58534: LD_VAR 0 3
58538: PPUSH
58539: CALL_OW 331
// end ;
58543: LD_VAR 0 5
58547: RET
// export function Video ( mode ) ; begin
58548: LD_INT 0
58550: PPUSH
// ingame_video = mode ;
58551: LD_ADDR_OWVAR 52
58555: PUSH
58556: LD_VAR 0 1
58560: ST_TO_ADDR
// interface_hidden = mode ;
58561: LD_ADDR_OWVAR 54
58565: PUSH
58566: LD_VAR 0 1
58570: ST_TO_ADDR
// end ;
58571: LD_VAR 0 2
58575: RET
// export function Join ( array , element ) ; begin
58576: LD_INT 0
58578: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58579: LD_ADDR_VAR 0 3
58583: PUSH
58584: LD_VAR 0 1
58588: PPUSH
58589: LD_VAR 0 1
58593: PUSH
58594: LD_INT 1
58596: PLUS
58597: PPUSH
58598: LD_VAR 0 2
58602: PPUSH
58603: CALL_OW 1
58607: ST_TO_ADDR
// end ;
58608: LD_VAR 0 3
58612: RET
// export function JoinUnion ( array , element ) ; begin
58613: LD_INT 0
58615: PPUSH
// result := array union element ;
58616: LD_ADDR_VAR 0 3
58620: PUSH
58621: LD_VAR 0 1
58625: PUSH
58626: LD_VAR 0 2
58630: UNION
58631: ST_TO_ADDR
// end ;
58632: LD_VAR 0 3
58636: RET
// export function GetBehemoths ( side ) ; begin
58637: LD_INT 0
58639: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58640: LD_ADDR_VAR 0 2
58644: PUSH
58645: LD_INT 22
58647: PUSH
58648: LD_VAR 0 1
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 31
58659: PUSH
58660: LD_INT 25
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PPUSH
58671: CALL_OW 69
58675: ST_TO_ADDR
// end ;
58676: LD_VAR 0 2
58680: RET
// export function Shuffle ( array ) ; var i , index ; begin
58681: LD_INT 0
58683: PPUSH
58684: PPUSH
58685: PPUSH
// result := [ ] ;
58686: LD_ADDR_VAR 0 2
58690: PUSH
58691: EMPTY
58692: ST_TO_ADDR
// if not array then
58693: LD_VAR 0 1
58697: NOT
58698: IFFALSE 58702
// exit ;
58700: GO 58801
// Randomize ;
58702: CALL_OW 10
// for i = array downto 1 do
58706: LD_ADDR_VAR 0 3
58710: PUSH
58711: DOUBLE
58712: LD_VAR 0 1
58716: INC
58717: ST_TO_ADDR
58718: LD_INT 1
58720: PUSH
58721: FOR_DOWNTO
58722: IFFALSE 58799
// begin index := rand ( 1 , array ) ;
58724: LD_ADDR_VAR 0 4
58728: PUSH
58729: LD_INT 1
58731: PPUSH
58732: LD_VAR 0 1
58736: PPUSH
58737: CALL_OW 12
58741: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58742: LD_ADDR_VAR 0 2
58746: PUSH
58747: LD_VAR 0 2
58751: PPUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_INT 1
58759: PLUS
58760: PPUSH
58761: LD_VAR 0 1
58765: PUSH
58766: LD_VAR 0 4
58770: ARRAY
58771: PPUSH
58772: CALL_OW 2
58776: ST_TO_ADDR
// array := Delete ( array , index ) ;
58777: LD_ADDR_VAR 0 1
58781: PUSH
58782: LD_VAR 0 1
58786: PPUSH
58787: LD_VAR 0 4
58791: PPUSH
58792: CALL_OW 3
58796: ST_TO_ADDR
// end ;
58797: GO 58721
58799: POP
58800: POP
// end ;
58801: LD_VAR 0 2
58805: RET
// export function GetBaseMaterials ( base ) ; begin
58806: LD_INT 0
58808: PPUSH
// result := [ 0 , 0 , 0 ] ;
58809: LD_ADDR_VAR 0 2
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: ST_TO_ADDR
// if not base then
58828: LD_VAR 0 1
58832: NOT
58833: IFFALSE 58837
// exit ;
58835: GO 58886
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58837: LD_ADDR_VAR 0 2
58841: PUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: LD_INT 1
58849: PPUSH
58850: CALL_OW 275
58854: PUSH
58855: LD_VAR 0 1
58859: PPUSH
58860: LD_INT 2
58862: PPUSH
58863: CALL_OW 275
58867: PUSH
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_INT 3
58875: PPUSH
58876: CALL_OW 275
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// end ;
58886: LD_VAR 0 2
58890: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58891: LD_INT 0
58893: PPUSH
58894: PPUSH
// result := array ;
58895: LD_ADDR_VAR 0 3
58899: PUSH
58900: LD_VAR 0 1
58904: ST_TO_ADDR
// if size >= result then
58905: LD_VAR 0 2
58909: PUSH
58910: LD_VAR 0 3
58914: GREATEREQUAL
58915: IFFALSE 58919
// exit ;
58917: GO 58969
// if size then
58919: LD_VAR 0 2
58923: IFFALSE 58969
// for i := array downto size do
58925: LD_ADDR_VAR 0 4
58929: PUSH
58930: DOUBLE
58931: LD_VAR 0 1
58935: INC
58936: ST_TO_ADDR
58937: LD_VAR 0 2
58941: PUSH
58942: FOR_DOWNTO
58943: IFFALSE 58967
// result := Delete ( result , result ) ;
58945: LD_ADDR_VAR 0 3
58949: PUSH
58950: LD_VAR 0 3
58954: PPUSH
58955: LD_VAR 0 3
58959: PPUSH
58960: CALL_OW 3
58964: ST_TO_ADDR
58965: GO 58942
58967: POP
58968: POP
// end ;
58969: LD_VAR 0 3
58973: RET
// export function ComExit ( unit ) ; var tmp ; begin
58974: LD_INT 0
58976: PPUSH
58977: PPUSH
// if not IsInUnit ( unit ) then
58978: LD_VAR 0 1
58982: PPUSH
58983: CALL_OW 310
58987: NOT
58988: IFFALSE 58992
// exit ;
58990: GO 59052
// tmp := IsInUnit ( unit ) ;
58992: LD_ADDR_VAR 0 3
58996: PUSH
58997: LD_VAR 0 1
59001: PPUSH
59002: CALL_OW 310
59006: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59007: LD_VAR 0 3
59011: PPUSH
59012: CALL_OW 247
59016: PUSH
59017: LD_INT 2
59019: EQUAL
59020: IFFALSE 59033
// ComExitVehicle ( unit ) else
59022: LD_VAR 0 1
59026: PPUSH
59027: CALL_OW 121
59031: GO 59042
// ComExitBuilding ( unit ) ;
59033: LD_VAR 0 1
59037: PPUSH
59038: CALL_OW 122
// result := tmp ;
59042: LD_ADDR_VAR 0 2
59046: PUSH
59047: LD_VAR 0 3
59051: ST_TO_ADDR
// end ;
59052: LD_VAR 0 2
59056: RET
// export function ComExitAll ( units ) ; var i ; begin
59057: LD_INT 0
59059: PPUSH
59060: PPUSH
// if not units then
59061: LD_VAR 0 1
59065: NOT
59066: IFFALSE 59070
// exit ;
59068: GO 59096
// for i in units do
59070: LD_ADDR_VAR 0 3
59074: PUSH
59075: LD_VAR 0 1
59079: PUSH
59080: FOR_IN
59081: IFFALSE 59094
// ComExit ( i ) ;
59083: LD_VAR 0 3
59087: PPUSH
59088: CALL 58974 0 1
59092: GO 59080
59094: POP
59095: POP
// end ;
59096: LD_VAR 0 2
59100: RET
// export function ResetHc ; begin
59101: LD_INT 0
59103: PPUSH
// InitHc ;
59104: CALL_OW 19
// hc_importance := 0 ;
59108: LD_ADDR_OWVAR 32
59112: PUSH
59113: LD_INT 0
59115: ST_TO_ADDR
// end ;
59116: LD_VAR 0 1
59120: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59121: LD_INT 0
59123: PPUSH
59124: PPUSH
59125: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59126: LD_ADDR_VAR 0 6
59130: PUSH
59131: LD_VAR 0 1
59135: PUSH
59136: LD_VAR 0 3
59140: PLUS
59141: PUSH
59142: LD_INT 2
59144: DIV
59145: ST_TO_ADDR
// if _x < 0 then
59146: LD_VAR 0 6
59150: PUSH
59151: LD_INT 0
59153: LESS
59154: IFFALSE 59171
// _x := _x * - 1 ;
59156: LD_ADDR_VAR 0 6
59160: PUSH
59161: LD_VAR 0 6
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: MUL
59170: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59171: LD_ADDR_VAR 0 7
59175: PUSH
59176: LD_VAR 0 2
59180: PUSH
59181: LD_VAR 0 4
59185: PLUS
59186: PUSH
59187: LD_INT 2
59189: DIV
59190: ST_TO_ADDR
// if _y < 0 then
59191: LD_VAR 0 7
59195: PUSH
59196: LD_INT 0
59198: LESS
59199: IFFALSE 59216
// _y := _y * - 1 ;
59201: LD_ADDR_VAR 0 7
59205: PUSH
59206: LD_VAR 0 7
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: MUL
59215: ST_TO_ADDR
// result := [ _x , _y ] ;
59216: LD_ADDR_VAR 0 5
59220: PUSH
59221: LD_VAR 0 6
59225: PUSH
59226: LD_VAR 0 7
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// end ;
59235: LD_VAR 0 5
59239: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59240: LD_INT 0
59242: PPUSH
59243: PPUSH
59244: PPUSH
59245: PPUSH
// task := GetTaskList ( unit ) ;
59246: LD_ADDR_VAR 0 7
59250: PUSH
59251: LD_VAR 0 1
59255: PPUSH
59256: CALL_OW 437
59260: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59261: LD_VAR 0 7
59265: NOT
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: LD_VAR 0 2
59276: PPUSH
59277: CALL_OW 308
59281: NOT
59282: AND
59283: IFFALSE 59287
// exit ;
59285: GO 59405
// if IsInArea ( unit , area ) then
59287: LD_VAR 0 1
59291: PPUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: CALL_OW 308
59301: IFFALSE 59319
// begin ComMoveToArea ( unit , goAway ) ;
59303: LD_VAR 0 1
59307: PPUSH
59308: LD_VAR 0 3
59312: PPUSH
59313: CALL_OW 113
// exit ;
59317: GO 59405
// end ; if task [ 1 ] [ 1 ] <> M then
59319: LD_VAR 0 7
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PUSH
59328: LD_INT 1
59330: ARRAY
59331: PUSH
59332: LD_STRING M
59334: NONEQUAL
59335: IFFALSE 59339
// exit ;
59337: GO 59405
// x := task [ 1 ] [ 2 ] ;
59339: LD_ADDR_VAR 0 5
59343: PUSH
59344: LD_VAR 0 7
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: PUSH
59353: LD_INT 2
59355: ARRAY
59356: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59357: LD_ADDR_VAR 0 6
59361: PUSH
59362: LD_VAR 0 7
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PUSH
59371: LD_INT 3
59373: ARRAY
59374: ST_TO_ADDR
// if InArea ( x , y , area ) then
59375: LD_VAR 0 5
59379: PPUSH
59380: LD_VAR 0 6
59384: PPUSH
59385: LD_VAR 0 2
59389: PPUSH
59390: CALL_OW 309
59394: IFFALSE 59405
// ComStop ( unit ) ;
59396: LD_VAR 0 1
59400: PPUSH
59401: CALL_OW 141
// end ;
59405: LD_VAR 0 4
59409: RET
// export function Abs ( value ) ; begin
59410: LD_INT 0
59412: PPUSH
// result := value ;
59413: LD_ADDR_VAR 0 2
59417: PUSH
59418: LD_VAR 0 1
59422: ST_TO_ADDR
// if value < 0 then
59423: LD_VAR 0 1
59427: PUSH
59428: LD_INT 0
59430: LESS
59431: IFFALSE 59448
// result := value * - 1 ;
59433: LD_ADDR_VAR 0 2
59437: PUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: MUL
59447: ST_TO_ADDR
// end ;
59448: LD_VAR 0 2
59452: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59453: LD_INT 0
59455: PPUSH
59456: PPUSH
59457: PPUSH
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
// if not unit or not building then
59463: LD_VAR 0 1
59467: NOT
59468: PUSH
59469: LD_VAR 0 2
59473: NOT
59474: OR
59475: IFFALSE 59479
// exit ;
59477: GO 59705
// x := GetX ( building ) ;
59479: LD_ADDR_VAR 0 4
59483: PUSH
59484: LD_VAR 0 2
59488: PPUSH
59489: CALL_OW 250
59493: ST_TO_ADDR
// y := GetY ( building ) ;
59494: LD_ADDR_VAR 0 6
59498: PUSH
59499: LD_VAR 0 2
59503: PPUSH
59504: CALL_OW 251
59508: ST_TO_ADDR
// d := GetDir ( building ) ;
59509: LD_ADDR_VAR 0 8
59513: PUSH
59514: LD_VAR 0 2
59518: PPUSH
59519: CALL_OW 254
59523: ST_TO_ADDR
// r := 4 ;
59524: LD_ADDR_VAR 0 9
59528: PUSH
59529: LD_INT 4
59531: ST_TO_ADDR
// for i := 1 to 5 do
59532: LD_ADDR_VAR 0 10
59536: PUSH
59537: DOUBLE
59538: LD_INT 1
59540: DEC
59541: ST_TO_ADDR
59542: LD_INT 5
59544: PUSH
59545: FOR_TO
59546: IFFALSE 59703
// begin _x := ShiftX ( x , d , r + i ) ;
59548: LD_ADDR_VAR 0 5
59552: PUSH
59553: LD_VAR 0 4
59557: PPUSH
59558: LD_VAR 0 8
59562: PPUSH
59563: LD_VAR 0 9
59567: PUSH
59568: LD_VAR 0 10
59572: PLUS
59573: PPUSH
59574: CALL_OW 272
59578: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59579: LD_ADDR_VAR 0 7
59583: PUSH
59584: LD_VAR 0 6
59588: PPUSH
59589: LD_VAR 0 8
59593: PPUSH
59594: LD_VAR 0 9
59598: PUSH
59599: LD_VAR 0 10
59603: PLUS
59604: PPUSH
59605: CALL_OW 273
59609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59610: LD_VAR 0 5
59614: PPUSH
59615: LD_VAR 0 7
59619: PPUSH
59620: CALL_OW 488
59624: PUSH
59625: LD_VAR 0 5
59629: PPUSH
59630: LD_VAR 0 7
59634: PPUSH
59635: CALL_OW 428
59639: PPUSH
59640: CALL_OW 247
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: IN
59655: NOT
59656: AND
59657: IFFALSE 59701
// begin ComMoveXY ( unit , _x , _y ) ;
59659: LD_VAR 0 1
59663: PPUSH
59664: LD_VAR 0 5
59668: PPUSH
59669: LD_VAR 0 7
59673: PPUSH
59674: CALL_OW 111
// result := [ _x , _y ] ;
59678: LD_ADDR_VAR 0 3
59682: PUSH
59683: LD_VAR 0 5
59687: PUSH
59688: LD_VAR 0 7
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: ST_TO_ADDR
// exit ;
59697: POP
59698: POP
59699: GO 59705
// end ; end ;
59701: GO 59545
59703: POP
59704: POP
// end ;
59705: LD_VAR 0 3
59709: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59710: LD_INT 0
59712: PPUSH
59713: PPUSH
59714: PPUSH
// result := 0 ;
59715: LD_ADDR_VAR 0 3
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59723: LD_VAR 0 1
59727: PUSH
59728: LD_INT 0
59730: LESS
59731: PUSH
59732: LD_VAR 0 1
59736: PUSH
59737: LD_INT 8
59739: GREATER
59740: OR
59741: PUSH
59742: LD_VAR 0 2
59746: PUSH
59747: LD_INT 0
59749: LESS
59750: OR
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_INT 8
59759: GREATER
59760: OR
59761: IFFALSE 59765
// exit ;
59763: GO 59840
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59765: LD_ADDR_VAR 0 4
59769: PUSH
59770: LD_INT 22
59772: PUSH
59773: LD_VAR 0 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PPUSH
59782: CALL_OW 69
59786: PUSH
59787: FOR_IN
59788: IFFALSE 59838
// begin un := UnitShoot ( i ) ;
59790: LD_ADDR_VAR 0 5
59794: PUSH
59795: LD_VAR 0 4
59799: PPUSH
59800: CALL_OW 504
59804: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59805: LD_VAR 0 5
59809: PPUSH
59810: CALL_OW 255
59814: PUSH
59815: LD_VAR 0 1
59819: EQUAL
59820: IFFALSE 59836
// begin result := un ;
59822: LD_ADDR_VAR 0 3
59826: PUSH
59827: LD_VAR 0 5
59831: ST_TO_ADDR
// exit ;
59832: POP
59833: POP
59834: GO 59840
// end ; end ;
59836: GO 59787
59838: POP
59839: POP
// end ;
59840: LD_VAR 0 3
59844: RET
// export function GetCargoBay ( units ) ; begin
59845: LD_INT 0
59847: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59848: LD_ADDR_VAR 0 2
59852: PUSH
59853: LD_VAR 0 1
59857: PPUSH
59858: LD_INT 2
59860: PUSH
59861: LD_INT 34
59863: PUSH
59864: LD_INT 12
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 34
59873: PUSH
59874: LD_INT 51
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 34
59883: PUSH
59884: LD_INT 32
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 34
59893: PUSH
59894: LD_INT 89
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 72
59912: ST_TO_ADDR
// end ;
59913: LD_VAR 0 2
59917: RET
// export function Negate ( value ) ; begin
59918: LD_INT 0
59920: PPUSH
// result := not value ;
59921: LD_ADDR_VAR 0 2
59925: PUSH
59926: LD_VAR 0 1
59930: NOT
59931: ST_TO_ADDR
// end ;
59932: LD_VAR 0 2
59936: RET
// export function Inc ( value ) ; begin
59937: LD_INT 0
59939: PPUSH
// result := value + 1 ;
59940: LD_ADDR_VAR 0 2
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: LD_INT 1
59952: PLUS
59953: ST_TO_ADDR
// end ;
59954: LD_VAR 0 2
59958: RET
// export function Dec ( value ) ; begin
59959: LD_INT 0
59961: PPUSH
// result := value - 1 ;
59962: LD_ADDR_VAR 0 2
59966: PUSH
59967: LD_VAR 0 1
59971: PUSH
59972: LD_INT 1
59974: MINUS
59975: ST_TO_ADDR
// end ;
59976: LD_VAR 0 2
59980: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59981: LD_INT 0
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
59989: PPUSH
59990: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_VAR 0 2
60000: PPUSH
60001: CALL_OW 488
60005: NOT
60006: PUSH
60007: LD_VAR 0 3
60011: PPUSH
60012: LD_VAR 0 4
60016: PPUSH
60017: CALL_OW 488
60021: NOT
60022: OR
60023: IFFALSE 60036
// begin result := - 1 ;
60025: LD_ADDR_VAR 0 5
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: ST_TO_ADDR
// exit ;
60034: GO 60271
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60036: LD_ADDR_VAR 0 12
60040: PUSH
60041: LD_VAR 0 1
60045: PPUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: LD_VAR 0 3
60055: PPUSH
60056: LD_VAR 0 4
60060: PPUSH
60061: CALL 59121 0 4
60065: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60066: LD_ADDR_VAR 0 11
60070: PUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: LD_VAR 0 2
60080: PPUSH
60081: LD_VAR 0 12
60085: PUSH
60086: LD_INT 1
60088: ARRAY
60089: PPUSH
60090: LD_VAR 0 12
60094: PUSH
60095: LD_INT 2
60097: ARRAY
60098: PPUSH
60099: CALL_OW 298
60103: ST_TO_ADDR
// distance := 9999 ;
60104: LD_ADDR_VAR 0 10
60108: PUSH
60109: LD_INT 9999
60111: ST_TO_ADDR
// for i := 0 to 5 do
60112: LD_ADDR_VAR 0 6
60116: PUSH
60117: DOUBLE
60118: LD_INT 0
60120: DEC
60121: ST_TO_ADDR
60122: LD_INT 5
60124: PUSH
60125: FOR_TO
60126: IFFALSE 60269
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60128: LD_ADDR_VAR 0 7
60132: PUSH
60133: LD_VAR 0 1
60137: PPUSH
60138: LD_VAR 0 6
60142: PPUSH
60143: LD_VAR 0 11
60147: PPUSH
60148: CALL_OW 272
60152: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60153: LD_ADDR_VAR 0 8
60157: PUSH
60158: LD_VAR 0 2
60162: PPUSH
60163: LD_VAR 0 6
60167: PPUSH
60168: LD_VAR 0 11
60172: PPUSH
60173: CALL_OW 273
60177: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60178: LD_VAR 0 7
60182: PPUSH
60183: LD_VAR 0 8
60187: PPUSH
60188: CALL_OW 488
60192: NOT
60193: IFFALSE 60197
// continue ;
60195: GO 60125
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60197: LD_ADDR_VAR 0 9
60201: PUSH
60202: LD_VAR 0 12
60206: PUSH
60207: LD_INT 1
60209: ARRAY
60210: PPUSH
60211: LD_VAR 0 12
60215: PUSH
60216: LD_INT 2
60218: ARRAY
60219: PPUSH
60220: LD_VAR 0 7
60224: PPUSH
60225: LD_VAR 0 8
60229: PPUSH
60230: CALL_OW 298
60234: ST_TO_ADDR
// if tmp < distance then
60235: LD_VAR 0 9
60239: PUSH
60240: LD_VAR 0 10
60244: LESS
60245: IFFALSE 60267
// begin result := i ;
60247: LD_ADDR_VAR 0 5
60251: PUSH
60252: LD_VAR 0 6
60256: ST_TO_ADDR
// distance := tmp ;
60257: LD_ADDR_VAR 0 10
60261: PUSH
60262: LD_VAR 0 9
60266: ST_TO_ADDR
// end ; end ;
60267: GO 60125
60269: POP
60270: POP
// end ;
60271: LD_VAR 0 5
60275: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60276: LD_INT 0
60278: PPUSH
60279: PPUSH
// if not driver or not IsInUnit ( driver ) then
60280: LD_VAR 0 1
60284: NOT
60285: PUSH
60286: LD_VAR 0 1
60290: PPUSH
60291: CALL_OW 310
60295: NOT
60296: OR
60297: IFFALSE 60301
// exit ;
60299: GO 60391
// vehicle := IsInUnit ( driver ) ;
60301: LD_ADDR_VAR 0 3
60305: PUSH
60306: LD_VAR 0 1
60310: PPUSH
60311: CALL_OW 310
60315: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60316: LD_VAR 0 1
60320: PPUSH
60321: LD_STRING \
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: PUSH
60351: LD_STRING E
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_VAR 0 3
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PPUSH
60387: CALL_OW 446
// end ;
60391: LD_VAR 0 2
60395: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60396: LD_INT 0
60398: PPUSH
60399: PPUSH
// if not driver or not IsInUnit ( driver ) then
60400: LD_VAR 0 1
60404: NOT
60405: PUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 310
60415: NOT
60416: OR
60417: IFFALSE 60421
// exit ;
60419: GO 60511
// vehicle := IsInUnit ( driver ) ;
60421: LD_ADDR_VAR 0 3
60425: PUSH
60426: LD_VAR 0 1
60430: PPUSH
60431: CALL_OW 310
60435: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60436: LD_VAR 0 1
60440: PPUSH
60441: LD_STRING \
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: PUSH
60471: LD_STRING E
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_VAR 0 3
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PPUSH
60507: CALL_OW 447
// end ;
60511: LD_VAR 0 2
60515: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60516: LD_INT 0
60518: PPUSH
60519: PPUSH
60520: PPUSH
// tmp := [ ] ;
60521: LD_ADDR_VAR 0 5
60525: PUSH
60526: EMPTY
60527: ST_TO_ADDR
// for i in units do
60528: LD_ADDR_VAR 0 4
60532: PUSH
60533: LD_VAR 0 1
60537: PUSH
60538: FOR_IN
60539: IFFALSE 60577
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60541: LD_ADDR_VAR 0 5
60545: PUSH
60546: LD_VAR 0 5
60550: PPUSH
60551: LD_VAR 0 5
60555: PUSH
60556: LD_INT 1
60558: PLUS
60559: PPUSH
60560: LD_VAR 0 4
60564: PPUSH
60565: CALL_OW 256
60569: PPUSH
60570: CALL_OW 2
60574: ST_TO_ADDR
60575: GO 60538
60577: POP
60578: POP
// if not tmp then
60579: LD_VAR 0 5
60583: NOT
60584: IFFALSE 60588
// exit ;
60586: GO 60636
// if asc then
60588: LD_VAR 0 2
60592: IFFALSE 60616
// result := SortListByListAsc ( units , tmp ) else
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: LD_VAR 0 1
60603: PPUSH
60604: LD_VAR 0 5
60608: PPUSH
60609: CALL_OW 76
60613: ST_TO_ADDR
60614: GO 60636
// result := SortListByListDesc ( units , tmp ) ;
60616: LD_ADDR_VAR 0 3
60620: PUSH
60621: LD_VAR 0 1
60625: PPUSH
60626: LD_VAR 0 5
60630: PPUSH
60631: CALL_OW 77
60635: ST_TO_ADDR
// end ;
60636: LD_VAR 0 3
60640: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60641: LD_INT 0
60643: PPUSH
60644: PPUSH
// task := GetTaskList ( mech ) ;
60645: LD_ADDR_VAR 0 4
60649: PUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: CALL_OW 437
60659: ST_TO_ADDR
// if not task then
60660: LD_VAR 0 4
60664: NOT
60665: IFFALSE 60669
// exit ;
60667: GO 60711
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 4
60678: PUSH
60679: LD_INT 1
60681: ARRAY
60682: PUSH
60683: LD_INT 1
60685: ARRAY
60686: PUSH
60687: LD_STRING r
60689: EQUAL
60690: PUSH
60691: LD_VAR 0 4
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_INT 4
60702: ARRAY
60703: PUSH
60704: LD_VAR 0 2
60708: EQUAL
60709: AND
60710: ST_TO_ADDR
// end ;
60711: LD_VAR 0 3
60715: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60716: LD_INT 0
60718: PPUSH
// SetDir ( unit , d ) ;
60719: LD_VAR 0 1
60723: PPUSH
60724: LD_VAR 0 4
60728: PPUSH
60729: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60733: LD_VAR 0 1
60737: PPUSH
60738: LD_VAR 0 2
60742: PPUSH
60743: LD_VAR 0 3
60747: PPUSH
60748: LD_VAR 0 5
60752: PPUSH
60753: CALL_OW 48
// end ;
60757: LD_VAR 0 6
60761: RET
// export function ToNaturalNumber ( number ) ; begin
60762: LD_INT 0
60764: PPUSH
// result := number div 1 ;
60765: LD_ADDR_VAR 0 2
60769: PUSH
60770: LD_VAR 0 1
60774: PUSH
60775: LD_INT 1
60777: DIV
60778: ST_TO_ADDR
// if number < 0 then
60779: LD_VAR 0 1
60783: PUSH
60784: LD_INT 0
60786: LESS
60787: IFFALSE 60797
// result := 0 ;
60789: LD_ADDR_VAR 0 2
60793: PUSH
60794: LD_INT 0
60796: ST_TO_ADDR
// end ;
60797: LD_VAR 0 2
60801: RET
// export function SortByClass ( units , class ) ; var un ; begin
60802: LD_INT 0
60804: PPUSH
60805: PPUSH
// if not units or not class then
60806: LD_VAR 0 1
60810: NOT
60811: PUSH
60812: LD_VAR 0 2
60816: NOT
60817: OR
60818: IFFALSE 60822
// exit ;
60820: GO 60917
// result := [ ] ;
60822: LD_ADDR_VAR 0 3
60826: PUSH
60827: EMPTY
60828: ST_TO_ADDR
// for un in units do
60829: LD_ADDR_VAR 0 4
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: FOR_IN
60840: IFFALSE 60915
// if GetClass ( un ) = class then
60842: LD_VAR 0 4
60846: PPUSH
60847: CALL_OW 257
60851: PUSH
60852: LD_VAR 0 2
60856: EQUAL
60857: IFFALSE 60884
// result := Insert ( result , 1 , un ) else
60859: LD_ADDR_VAR 0 3
60863: PUSH
60864: LD_VAR 0 3
60868: PPUSH
60869: LD_INT 1
60871: PPUSH
60872: LD_VAR 0 4
60876: PPUSH
60877: CALL_OW 2
60881: ST_TO_ADDR
60882: GO 60913
// result := Replace ( result , result + 1 , un ) ;
60884: LD_ADDR_VAR 0 3
60888: PUSH
60889: LD_VAR 0 3
60893: PPUSH
60894: LD_VAR 0 3
60898: PUSH
60899: LD_INT 1
60901: PLUS
60902: PPUSH
60903: LD_VAR 0 4
60907: PPUSH
60908: CALL_OW 1
60912: ST_TO_ADDR
60913: GO 60839
60915: POP
60916: POP
// end ;
60917: LD_VAR 0 3
60921: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60922: LD_INT 0
60924: PPUSH
60925: PPUSH
60926: PPUSH
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
// result := [ ] ;
60931: LD_ADDR_VAR 0 4
60935: PUSH
60936: EMPTY
60937: ST_TO_ADDR
// if x - r < 0 then
60938: LD_VAR 0 1
60942: PUSH
60943: LD_VAR 0 3
60947: MINUS
60948: PUSH
60949: LD_INT 0
60951: LESS
60952: IFFALSE 60964
// min_x := 0 else
60954: LD_ADDR_VAR 0 8
60958: PUSH
60959: LD_INT 0
60961: ST_TO_ADDR
60962: GO 60980
// min_x := x - r ;
60964: LD_ADDR_VAR 0 8
60968: PUSH
60969: LD_VAR 0 1
60973: PUSH
60974: LD_VAR 0 3
60978: MINUS
60979: ST_TO_ADDR
// if y - r < 0 then
60980: LD_VAR 0 2
60984: PUSH
60985: LD_VAR 0 3
60989: MINUS
60990: PUSH
60991: LD_INT 0
60993: LESS
60994: IFFALSE 61006
// min_y := 0 else
60996: LD_ADDR_VAR 0 7
61000: PUSH
61001: LD_INT 0
61003: ST_TO_ADDR
61004: GO 61022
// min_y := y - r ;
61006: LD_ADDR_VAR 0 7
61010: PUSH
61011: LD_VAR 0 2
61015: PUSH
61016: LD_VAR 0 3
61020: MINUS
61021: ST_TO_ADDR
// max_x := x + r ;
61022: LD_ADDR_VAR 0 9
61026: PUSH
61027: LD_VAR 0 1
61031: PUSH
61032: LD_VAR 0 3
61036: PLUS
61037: ST_TO_ADDR
// max_y := y + r ;
61038: LD_ADDR_VAR 0 10
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_VAR 0 3
61052: PLUS
61053: ST_TO_ADDR
// for _x = min_x to max_x do
61054: LD_ADDR_VAR 0 5
61058: PUSH
61059: DOUBLE
61060: LD_VAR 0 8
61064: DEC
61065: ST_TO_ADDR
61066: LD_VAR 0 9
61070: PUSH
61071: FOR_TO
61072: IFFALSE 61173
// for _y = min_y to max_y do
61074: LD_ADDR_VAR 0 6
61078: PUSH
61079: DOUBLE
61080: LD_VAR 0 7
61084: DEC
61085: ST_TO_ADDR
61086: LD_VAR 0 10
61090: PUSH
61091: FOR_TO
61092: IFFALSE 61169
// begin if not ValidHex ( _x , _y ) then
61094: LD_VAR 0 5
61098: PPUSH
61099: LD_VAR 0 6
61103: PPUSH
61104: CALL_OW 488
61108: NOT
61109: IFFALSE 61113
// continue ;
61111: GO 61091
// if GetResourceTypeXY ( _x , _y ) then
61113: LD_VAR 0 5
61117: PPUSH
61118: LD_VAR 0 6
61122: PPUSH
61123: CALL_OW 283
61127: IFFALSE 61167
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61129: LD_ADDR_VAR 0 4
61133: PUSH
61134: LD_VAR 0 4
61138: PPUSH
61139: LD_VAR 0 4
61143: PUSH
61144: LD_INT 1
61146: PLUS
61147: PPUSH
61148: LD_VAR 0 5
61152: PUSH
61153: LD_VAR 0 6
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PPUSH
61162: CALL_OW 1
61166: ST_TO_ADDR
// end ;
61167: GO 61091
61169: POP
61170: POP
61171: GO 61071
61173: POP
61174: POP
// end ;
61175: LD_VAR 0 4
61179: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61180: LD_INT 0
61182: PPUSH
61183: PPUSH
61184: PPUSH
61185: PPUSH
61186: PPUSH
61187: PPUSH
61188: PPUSH
61189: PPUSH
// if not units then
61190: LD_VAR 0 1
61194: NOT
61195: IFFALSE 61199
// exit ;
61197: GO 61723
// result := UnitFilter ( units , [ f_ok ] ) ;
61199: LD_ADDR_VAR 0 3
61203: PUSH
61204: LD_VAR 0 1
61208: PPUSH
61209: LD_INT 50
61211: PUSH
61212: EMPTY
61213: LIST
61214: PPUSH
61215: CALL_OW 72
61219: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61220: LD_ADDR_VAR 0 8
61224: PUSH
61225: LD_VAR 0 1
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PPUSH
61234: CALL_OW 255
61238: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61239: LD_ADDR_VAR 0 10
61243: PUSH
61244: LD_INT 29
61246: PUSH
61247: LD_INT 91
61249: PUSH
61250: LD_INT 49
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// if not result then
61258: LD_VAR 0 3
61262: NOT
61263: IFFALSE 61267
// exit ;
61265: GO 61723
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61267: LD_ADDR_VAR 0 5
61271: PUSH
61272: LD_INT 81
61274: PUSH
61275: LD_VAR 0 8
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PPUSH
61284: CALL_OW 69
61288: ST_TO_ADDR
// for i in result do
61289: LD_ADDR_VAR 0 4
61293: PUSH
61294: LD_VAR 0 3
61298: PUSH
61299: FOR_IN
61300: IFFALSE 61721
// begin tag := GetTag ( i ) + 1 ;
61302: LD_ADDR_VAR 0 9
61306: PUSH
61307: LD_VAR 0 4
61311: PPUSH
61312: CALL_OW 110
61316: PUSH
61317: LD_INT 1
61319: PLUS
61320: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61321: LD_ADDR_VAR 0 7
61325: PUSH
61326: LD_VAR 0 4
61330: PPUSH
61331: CALL_OW 250
61335: PPUSH
61336: LD_VAR 0 4
61340: PPUSH
61341: CALL_OW 251
61345: PPUSH
61346: LD_INT 6
61348: PPUSH
61349: CALL 60922 0 3
61353: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61354: LD_VAR 0 4
61358: PPUSH
61359: CALL_OW 247
61363: PUSH
61364: LD_INT 2
61366: EQUAL
61367: PUSH
61368: LD_VAR 0 7
61372: AND
61373: PUSH
61374: LD_VAR 0 4
61378: PPUSH
61379: CALL_OW 264
61383: PUSH
61384: LD_VAR 0 10
61388: IN
61389: NOT
61390: AND
61391: IFFALSE 61430
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61393: LD_VAR 0 4
61397: PPUSH
61398: LD_VAR 0 7
61402: PUSH
61403: LD_INT 1
61405: ARRAY
61406: PUSH
61407: LD_INT 1
61409: ARRAY
61410: PPUSH
61411: LD_VAR 0 7
61415: PUSH
61416: LD_INT 1
61418: ARRAY
61419: PUSH
61420: LD_INT 2
61422: ARRAY
61423: PPUSH
61424: CALL_OW 116
61428: GO 61719
// if path > tag then
61430: LD_VAR 0 2
61434: PUSH
61435: LD_VAR 0 9
61439: GREATER
61440: IFFALSE 61648
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61442: LD_ADDR_VAR 0 6
61446: PUSH
61447: LD_VAR 0 5
61451: PPUSH
61452: LD_INT 91
61454: PUSH
61455: LD_VAR 0 4
61459: PUSH
61460: LD_INT 8
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: PPUSH
61468: CALL_OW 72
61472: ST_TO_ADDR
// if nearEnemy then
61473: LD_VAR 0 6
61477: IFFALSE 61546
// begin if GetWeapon ( i ) = ru_time_lapser then
61479: LD_VAR 0 4
61483: PPUSH
61484: CALL_OW 264
61488: PUSH
61489: LD_INT 49
61491: EQUAL
61492: IFFALSE 61520
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61494: LD_VAR 0 4
61498: PPUSH
61499: LD_VAR 0 6
61503: PPUSH
61504: LD_VAR 0 4
61508: PPUSH
61509: CALL_OW 74
61513: PPUSH
61514: CALL_OW 112
61518: GO 61544
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61520: LD_VAR 0 4
61524: PPUSH
61525: LD_VAR 0 6
61529: PPUSH
61530: LD_VAR 0 4
61534: PPUSH
61535: CALL_OW 74
61539: PPUSH
61540: CALL 62648 0 2
// end else
61544: GO 61646
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61546: LD_VAR 0 4
61550: PPUSH
61551: LD_VAR 0 2
61555: PUSH
61556: LD_VAR 0 9
61560: ARRAY
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PPUSH
61566: LD_VAR 0 2
61570: PUSH
61571: LD_VAR 0 9
61575: ARRAY
61576: PUSH
61577: LD_INT 2
61579: ARRAY
61580: PPUSH
61581: CALL_OW 297
61585: PUSH
61586: LD_INT 6
61588: GREATER
61589: IFFALSE 61632
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61591: LD_VAR 0 4
61595: PPUSH
61596: LD_VAR 0 2
61600: PUSH
61601: LD_VAR 0 9
61605: ARRAY
61606: PUSH
61607: LD_INT 1
61609: ARRAY
61610: PPUSH
61611: LD_VAR 0 2
61615: PUSH
61616: LD_VAR 0 9
61620: ARRAY
61621: PUSH
61622: LD_INT 2
61624: ARRAY
61625: PPUSH
61626: CALL_OW 114
61630: GO 61646
// SetTag ( i , tag ) ;
61632: LD_VAR 0 4
61636: PPUSH
61637: LD_VAR 0 9
61641: PPUSH
61642: CALL_OW 109
// end else
61646: GO 61719
// if enemy then
61648: LD_VAR 0 5
61652: IFFALSE 61719
// begin if GetWeapon ( i ) = ru_time_lapser then
61654: LD_VAR 0 4
61658: PPUSH
61659: CALL_OW 264
61663: PUSH
61664: LD_INT 49
61666: EQUAL
61667: IFFALSE 61695
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61669: LD_VAR 0 4
61673: PPUSH
61674: LD_VAR 0 5
61678: PPUSH
61679: LD_VAR 0 4
61683: PPUSH
61684: CALL_OW 74
61688: PPUSH
61689: CALL_OW 112
61693: GO 61719
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61695: LD_VAR 0 4
61699: PPUSH
61700: LD_VAR 0 5
61704: PPUSH
61705: LD_VAR 0 4
61709: PPUSH
61710: CALL_OW 74
61714: PPUSH
61715: CALL 62648 0 2
// end ; end ;
61719: GO 61299
61721: POP
61722: POP
// end ;
61723: LD_VAR 0 3
61727: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61728: LD_INT 0
61730: PPUSH
61731: PPUSH
61732: PPUSH
// if not unit or IsInUnit ( unit ) then
61733: LD_VAR 0 1
61737: NOT
61738: PUSH
61739: LD_VAR 0 1
61743: PPUSH
61744: CALL_OW 310
61748: OR
61749: IFFALSE 61753
// exit ;
61751: GO 61844
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61753: LD_ADDR_VAR 0 4
61757: PUSH
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 250
61767: PPUSH
61768: LD_VAR 0 2
61772: PPUSH
61773: LD_INT 1
61775: PPUSH
61776: CALL_OW 272
61780: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61781: LD_ADDR_VAR 0 5
61785: PUSH
61786: LD_VAR 0 1
61790: PPUSH
61791: CALL_OW 251
61795: PPUSH
61796: LD_VAR 0 2
61800: PPUSH
61801: LD_INT 1
61803: PPUSH
61804: CALL_OW 273
61808: ST_TO_ADDR
// if ValidHex ( x , y ) then
61809: LD_VAR 0 4
61813: PPUSH
61814: LD_VAR 0 5
61818: PPUSH
61819: CALL_OW 488
61823: IFFALSE 61844
// ComTurnXY ( unit , x , y ) ;
61825: LD_VAR 0 1
61829: PPUSH
61830: LD_VAR 0 4
61834: PPUSH
61835: LD_VAR 0 5
61839: PPUSH
61840: CALL_OW 118
// end ;
61844: LD_VAR 0 3
61848: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61849: LD_INT 0
61851: PPUSH
61852: PPUSH
// result := false ;
61853: LD_ADDR_VAR 0 3
61857: PUSH
61858: LD_INT 0
61860: ST_TO_ADDR
// if not units then
61861: LD_VAR 0 2
61865: NOT
61866: IFFALSE 61870
// exit ;
61868: GO 61915
// for i in units do
61870: LD_ADDR_VAR 0 4
61874: PUSH
61875: LD_VAR 0 2
61879: PUSH
61880: FOR_IN
61881: IFFALSE 61913
// if See ( side , i ) then
61883: LD_VAR 0 1
61887: PPUSH
61888: LD_VAR 0 4
61892: PPUSH
61893: CALL_OW 292
61897: IFFALSE 61911
// begin result := true ;
61899: LD_ADDR_VAR 0 3
61903: PUSH
61904: LD_INT 1
61906: ST_TO_ADDR
// exit ;
61907: POP
61908: POP
61909: GO 61915
// end ;
61911: GO 61880
61913: POP
61914: POP
// end ;
61915: LD_VAR 0 3
61919: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61920: LD_INT 0
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
// if not unit or not points then
61926: LD_VAR 0 1
61930: NOT
61931: PUSH
61932: LD_VAR 0 2
61936: NOT
61937: OR
61938: IFFALSE 61942
// exit ;
61940: GO 62032
// dist := 99999 ;
61942: LD_ADDR_VAR 0 5
61946: PUSH
61947: LD_INT 99999
61949: ST_TO_ADDR
// for i in points do
61950: LD_ADDR_VAR 0 4
61954: PUSH
61955: LD_VAR 0 2
61959: PUSH
61960: FOR_IN
61961: IFFALSE 62030
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61963: LD_ADDR_VAR 0 6
61967: PUSH
61968: LD_VAR 0 1
61972: PPUSH
61973: LD_VAR 0 4
61977: PUSH
61978: LD_INT 1
61980: ARRAY
61981: PPUSH
61982: LD_VAR 0 4
61986: PUSH
61987: LD_INT 2
61989: ARRAY
61990: PPUSH
61991: CALL_OW 297
61995: ST_TO_ADDR
// if tmpDist < dist then
61996: LD_VAR 0 6
62000: PUSH
62001: LD_VAR 0 5
62005: LESS
62006: IFFALSE 62028
// begin result := i ;
62008: LD_ADDR_VAR 0 3
62012: PUSH
62013: LD_VAR 0 4
62017: ST_TO_ADDR
// dist := tmpDist ;
62018: LD_ADDR_VAR 0 5
62022: PUSH
62023: LD_VAR 0 6
62027: ST_TO_ADDR
// end ; end ;
62028: GO 61960
62030: POP
62031: POP
// end ;
62032: LD_VAR 0 3
62036: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62037: LD_INT 0
62039: PPUSH
// uc_side := side ;
62040: LD_ADDR_OWVAR 20
62044: PUSH
62045: LD_VAR 0 1
62049: ST_TO_ADDR
// uc_nation := 3 ;
62050: LD_ADDR_OWVAR 21
62054: PUSH
62055: LD_INT 3
62057: ST_TO_ADDR
// vc_chassis := 25 ;
62058: LD_ADDR_OWVAR 37
62062: PUSH
62063: LD_INT 25
62065: ST_TO_ADDR
// vc_engine := engine_siberite ;
62066: LD_ADDR_OWVAR 39
62070: PUSH
62071: LD_INT 3
62073: ST_TO_ADDR
// vc_control := control_computer ;
62074: LD_ADDR_OWVAR 38
62078: PUSH
62079: LD_INT 3
62081: ST_TO_ADDR
// vc_weapon := 59 ;
62082: LD_ADDR_OWVAR 40
62086: PUSH
62087: LD_INT 59
62089: ST_TO_ADDR
// result := CreateVehicle ;
62090: LD_ADDR_VAR 0 5
62094: PUSH
62095: CALL_OW 45
62099: ST_TO_ADDR
// SetDir ( result , d ) ;
62100: LD_VAR 0 5
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62114: LD_VAR 0 5
62118: PPUSH
62119: LD_VAR 0 2
62123: PPUSH
62124: LD_VAR 0 3
62128: PPUSH
62129: LD_INT 0
62131: PPUSH
62132: CALL_OW 48
// end ;
62136: LD_VAR 0 5
62140: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62141: LD_INT 0
62143: PPUSH
62144: PPUSH
62145: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62146: LD_ADDR_VAR 0 2
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62169: LD_VAR 0 1
62173: NOT
62174: PUSH
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 264
62184: PUSH
62185: LD_INT 12
62187: PUSH
62188: LD_INT 51
62190: PUSH
62191: LD_INT 32
62193: PUSH
62194: LD_INT 89
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: IN
62203: NOT
62204: OR
62205: IFFALSE 62209
// exit ;
62207: GO 62307
// for i := 1 to 3 do
62209: LD_ADDR_VAR 0 3
62213: PUSH
62214: DOUBLE
62215: LD_INT 1
62217: DEC
62218: ST_TO_ADDR
62219: LD_INT 3
62221: PUSH
62222: FOR_TO
62223: IFFALSE 62305
// begin tmp := GetCargo ( cargo , i ) ;
62225: LD_ADDR_VAR 0 4
62229: PUSH
62230: LD_VAR 0 1
62234: PPUSH
62235: LD_VAR 0 3
62239: PPUSH
62240: CALL_OW 289
62244: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62245: LD_ADDR_VAR 0 2
62249: PUSH
62250: LD_VAR 0 2
62254: PPUSH
62255: LD_VAR 0 3
62259: PPUSH
62260: LD_VAR 0 4
62264: PPUSH
62265: CALL_OW 1
62269: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62270: LD_ADDR_VAR 0 2
62274: PUSH
62275: LD_VAR 0 2
62279: PPUSH
62280: LD_INT 4
62282: PPUSH
62283: LD_VAR 0 2
62287: PUSH
62288: LD_INT 4
62290: ARRAY
62291: PUSH
62292: LD_VAR 0 4
62296: PLUS
62297: PPUSH
62298: CALL_OW 1
62302: ST_TO_ADDR
// end ;
62303: GO 62222
62305: POP
62306: POP
// end ;
62307: LD_VAR 0 2
62311: RET
// export function Length ( array ) ; begin
62312: LD_INT 0
62314: PPUSH
// result := array + 0 ;
62315: LD_ADDR_VAR 0 2
62319: PUSH
62320: LD_VAR 0 1
62324: PUSH
62325: LD_INT 0
62327: PLUS
62328: ST_TO_ADDR
// end ;
62329: LD_VAR 0 2
62333: RET
// export function PrepareArray ( array ) ; begin
62334: LD_INT 0
62336: PPUSH
// result := array diff 0 ;
62337: LD_ADDR_VAR 0 2
62341: PUSH
62342: LD_VAR 0 1
62346: PUSH
62347: LD_INT 0
62349: DIFF
62350: ST_TO_ADDR
// if not result [ 1 ] then
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 1
62358: ARRAY
62359: NOT
62360: IFFALSE 62380
// result := Delete ( result , 1 ) ;
62362: LD_ADDR_VAR 0 2
62366: PUSH
62367: LD_VAR 0 2
62371: PPUSH
62372: LD_INT 1
62374: PPUSH
62375: CALL_OW 3
62379: ST_TO_ADDR
// end ;
62380: LD_VAR 0 2
62384: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62385: LD_INT 0
62387: PPUSH
62388: PPUSH
62389: PPUSH
62390: PPUSH
// sibRocketRange := 25 ;
62391: LD_ADDR_VAR 0 6
62395: PUSH
62396: LD_INT 25
62398: ST_TO_ADDR
// result := false ;
62399: LD_ADDR_VAR 0 4
62403: PUSH
62404: LD_INT 0
62406: ST_TO_ADDR
// for i := 0 to 5 do
62407: LD_ADDR_VAR 0 5
62411: PUSH
62412: DOUBLE
62413: LD_INT 0
62415: DEC
62416: ST_TO_ADDR
62417: LD_INT 5
62419: PUSH
62420: FOR_TO
62421: IFFALSE 62488
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62423: LD_VAR 0 1
62427: PPUSH
62428: LD_VAR 0 5
62432: PPUSH
62433: LD_VAR 0 6
62437: PPUSH
62438: CALL_OW 272
62442: PPUSH
62443: LD_VAR 0 2
62447: PPUSH
62448: LD_VAR 0 5
62452: PPUSH
62453: LD_VAR 0 6
62457: PPUSH
62458: CALL_OW 273
62462: PPUSH
62463: LD_VAR 0 3
62467: PPUSH
62468: CALL_OW 309
62472: IFFALSE 62486
// begin result := true ;
62474: LD_ADDR_VAR 0 4
62478: PUSH
62479: LD_INT 1
62481: ST_TO_ADDR
// exit ;
62482: POP
62483: POP
62484: GO 62490
// end ;
62486: GO 62420
62488: POP
62489: POP
// end ;
62490: LD_VAR 0 4
62494: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62495: LD_INT 0
62497: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62498: LD_VAR 0 1
62502: PPUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_INT 0
62510: PPUSH
62511: LD_INT 0
62513: PPUSH
62514: LD_INT 1
62516: PPUSH
62517: LD_INT 0
62519: PPUSH
62520: CALL_OW 587
// end ;
62524: LD_VAR 0 3
62528: RET
// export function CenterOnNow ( unit ) ; begin
62529: LD_INT 0
62531: PPUSH
// result := IsInUnit ( unit ) ;
62532: LD_ADDR_VAR 0 2
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 310
62546: ST_TO_ADDR
// if not result then
62547: LD_VAR 0 2
62551: NOT
62552: IFFALSE 62564
// result := unit ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_VAR 0 1
62563: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 87
// end ;
62573: LD_VAR 0 2
62577: RET
// export function ComMoveHex ( unit , hex ) ; begin
62578: LD_INT 0
62580: PPUSH
// if not hex then
62581: LD_VAR 0 2
62585: NOT
62586: IFFALSE 62590
// exit ;
62588: GO 62643
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 1
62597: ARRAY
62598: PPUSH
62599: LD_VAR 0 2
62603: PUSH
62604: LD_INT 2
62606: ARRAY
62607: PPUSH
62608: CALL_OW 428
62612: IFFALSE 62616
// exit ;
62614: GO 62643
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_INT 1
62628: ARRAY
62629: PPUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_INT 2
62637: ARRAY
62638: PPUSH
62639: CALL_OW 111
// end ;
62643: LD_VAR 0 3
62647: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62648: LD_INT 0
62650: PPUSH
62651: PPUSH
62652: PPUSH
// if not unit or not enemy then
62653: LD_VAR 0 1
62657: NOT
62658: PUSH
62659: LD_VAR 0 2
62663: NOT
62664: OR
62665: IFFALSE 62669
// exit ;
62667: GO 62793
// x := GetX ( enemy ) ;
62669: LD_ADDR_VAR 0 4
62673: PUSH
62674: LD_VAR 0 2
62678: PPUSH
62679: CALL_OW 250
62683: ST_TO_ADDR
// y := GetY ( enemy ) ;
62684: LD_ADDR_VAR 0 5
62688: PUSH
62689: LD_VAR 0 2
62693: PPUSH
62694: CALL_OW 251
62698: ST_TO_ADDR
// if ValidHex ( x , y ) then
62699: LD_VAR 0 4
62703: PPUSH
62704: LD_VAR 0 5
62708: PPUSH
62709: CALL_OW 488
62713: IFFALSE 62793
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
62715: LD_VAR 0 2
62719: PPUSH
62720: CALL_OW 247
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: IN
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 255
62745: PPUSH
62746: LD_VAR 0 2
62750: PPUSH
62751: CALL_OW 292
62755: AND
62756: IFFALSE 62774
// ComAttackUnit ( unit , enemy ) else
62758: LD_VAR 0 1
62762: PPUSH
62763: LD_VAR 0 2
62767: PPUSH
62768: CALL_OW 115
62772: GO 62793
// ComAgressiveMove ( unit , x , y ) ;
62774: LD_VAR 0 1
62778: PPUSH
62779: LD_VAR 0 4
62783: PPUSH
62784: LD_VAR 0 5
62788: PPUSH
62789: CALL_OW 114
// end ;
62793: LD_VAR 0 3
62797: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
62802: PPUSH
// list := AreaToList ( area , 0 ) ;
62803: LD_ADDR_VAR 0 5
62807: PUSH
62808: LD_VAR 0 1
62812: PPUSH
62813: LD_INT 0
62815: PPUSH
62816: CALL_OW 517
62820: ST_TO_ADDR
// if not list then
62821: LD_VAR 0 5
62825: NOT
62826: IFFALSE 62830
// exit ;
62828: GO 62960
// if all then
62830: LD_VAR 0 2
62834: IFFALSE 62922
// begin for i := 1 to list [ 1 ] do
62836: LD_ADDR_VAR 0 4
62840: PUSH
62841: DOUBLE
62842: LD_INT 1
62844: DEC
62845: ST_TO_ADDR
62846: LD_VAR 0 5
62850: PUSH
62851: LD_INT 1
62853: ARRAY
62854: PUSH
62855: FOR_TO
62856: IFFALSE 62918
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62858: LD_ADDR_VAR 0 3
62862: PUSH
62863: LD_VAR 0 3
62867: PPUSH
62868: LD_VAR 0 3
62872: PUSH
62873: LD_INT 1
62875: PLUS
62876: PPUSH
62877: LD_VAR 0 5
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PUSH
62886: LD_VAR 0 4
62890: ARRAY
62891: PUSH
62892: LD_VAR 0 5
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: PUSH
62901: LD_VAR 0 4
62905: ARRAY
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PPUSH
62911: CALL_OW 1
62915: ST_TO_ADDR
62916: GO 62855
62918: POP
62919: POP
// exit ;
62920: GO 62960
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_VAR 0 5
62931: PUSH
62932: LD_INT 1
62934: ARRAY
62935: PUSH
62936: LD_INT 1
62938: ARRAY
62939: PUSH
62940: LD_VAR 0 5
62944: PUSH
62945: LD_INT 2
62947: ARRAY
62948: PUSH
62949: LD_INT 1
62951: ARRAY
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: ST_TO_ADDR
// end ;
62960: LD_VAR 0 3
62964: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62965: LD_INT 0
62967: PPUSH
62968: PPUSH
// list := AreaToList ( area , 0 ) ;
62969: LD_ADDR_VAR 0 4
62973: PUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: LD_INT 0
62981: PPUSH
62982: CALL_OW 517
62986: ST_TO_ADDR
// if not list then
62987: LD_VAR 0 4
62991: NOT
62992: IFFALSE 62996
// exit ;
62994: GO 63037
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62996: LD_ADDR_VAR 0 3
63000: PUSH
63001: LD_VAR 0 4
63005: PUSH
63006: LD_INT 1
63008: ARRAY
63009: PUSH
63010: LD_INT 1
63012: ARRAY
63013: PUSH
63014: LD_VAR 0 4
63018: PUSH
63019: LD_INT 2
63021: ARRAY
63022: PUSH
63023: LD_INT 1
63025: ARRAY
63026: PUSH
63027: LD_VAR 0 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: ST_TO_ADDR
// end ;
63037: LD_VAR 0 3
63041: RET
// export function First ( array ) ; begin
63042: LD_INT 0
63044: PPUSH
// if not array then
63045: LD_VAR 0 1
63049: NOT
63050: IFFALSE 63054
// exit ;
63052: GO 63068
// result := array [ 1 ] ;
63054: LD_ADDR_VAR 0 2
63058: PUSH
63059: LD_VAR 0 1
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: ST_TO_ADDR
// end ;
63068: LD_VAR 0 2
63072: RET
// export function Last ( array ) ; begin
63073: LD_INT 0
63075: PPUSH
// if not array then
63076: LD_VAR 0 1
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63101
// result := array [ array ] ;
63085: LD_ADDR_VAR 0 2
63089: PUSH
63090: LD_VAR 0 1
63094: PUSH
63095: LD_VAR 0 1
63099: ARRAY
63100: ST_TO_ADDR
// end ;
63101: LD_VAR 0 2
63105: RET
