// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ;
  14: END
// every 0 0$1 do var un , x , i ;
  15: GO 17
  17: DISABLE
  18: LD_INT 0
  20: PPUSH
  21: PPUSH
  22: PPUSH
// begin uc_side := 2 ;
  23: LD_ADDR_OWVAR 20
  27: PUSH
  28: LD_INT 2
  30: ST_TO_ADDR
// uc_nation := 2 ;
  31: LD_ADDR_OWVAR 21
  35: PUSH
  36: LD_INT 2
  38: ST_TO_ADDR
// i := 0 ;
  39: LD_ADDR_VAR 0 3
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_gun , 100 ) ;
  47: LD_INT 14
  49: PPUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 27
  58: PPUSH
  59: LD_INT 100
  61: PPUSH
  62: CALL 25927 0 5
// un := CreateVehicle ;
  66: LD_ADDR_VAR 0 1
  70: PUSH
  71: CALL_OW 45
  75: ST_TO_ADDR
// repeat wait ( 3 ) ;
  76: LD_INT 3
  78: PPUSH
  79: CALL_OW 67
// i := Inc ( i ) ;
  83: LD_ADDR_VAR 0 3
  87: PUSH
  88: LD_VAR 0 3
  92: PPUSH
  93: CALL 60139 0 1
  97: ST_TO_ADDR
// display_strings := i ;
  98: LD_ADDR_OWVAR 47
 102: PUSH
 103: LD_VAR 0 3
 107: ST_TO_ADDR
// x := PlaceUnitArea ( un , area130 , false ) ;
 108: LD_ADDR_VAR 0 2
 112: PUSH
 113: LD_VAR 0 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: CALL_OW 49
 128: ST_TO_ADDR
// until x ;
 129: LD_VAR 0 2
 133: IFFALSE 76
// end ; end_of_file
 135: PPOPN 3
 137: END
// export globalGameSaveCounter ; every 0 0$1 do
 138: GO 140
 140: DISABLE
// begin enable ;
 141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 142: LD_STRING updateTimer(
 144: PUSH
 145: LD_OWVAR 1
 149: STR
 150: PUSH
 151: LD_STRING );
 153: STR
 154: PPUSH
 155: CALL_OW 559
// end ;
 159: END
// every 0 0$1 do
 160: GO 162
 162: DISABLE
// begin globalGameSaveCounter := 0 ;
 163: LD_ADDR_EXP 1
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 171: LD_STRING setGameSaveCounter(0)
 173: PPUSH
 174: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 178: LD_STRING initStreamRollete();
 180: PPUSH
 181: CALL_OW 559
// InitStreamMode ;
 185: CALL 1528 0 0
// DefineStreamItems ( false ) ;
 189: LD_INT 0
 191: PPUSH
 192: CALL 1992 0 1
// end ;
 196: END
// export function SOS_MapStart ( ) ; begin
 197: LD_INT 0
 199: PPUSH
// if streamModeActive then
 200: LD_EXP 2
 204: IFFALSE 213
// DefineStreamItems ( true ) ;
 206: LD_INT 1
 208: PPUSH
 209: CALL 1992 0 1
// UpdateLuaVariables ( ) ;
 213: CALL 230 0 0
// UpdateFactoryWaypoints ( ) ;
 217: CALL 14861 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 221: CALL 15118 0 0
// end ;
 225: LD_VAR 0 1
 229: RET
// function UpdateLuaVariables ( ) ; begin
 230: LD_INT 0
 232: PPUSH
// if globalGameSaveCounter then
 233: LD_EXP 1
 237: IFFALSE 271
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 239: LD_ADDR_EXP 1
 243: PUSH
 244: LD_EXP 1
 248: PPUSH
 249: CALL 60139 0 1
 253: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 254: LD_STRING setGameSaveCounter(
 256: PUSH
 257: LD_EXP 1
 261: STR
 262: PUSH
 263: LD_STRING )
 265: STR
 266: PPUSH
 267: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 271: LD_STRING setGameDifficulty(
 273: PUSH
 274: LD_OWVAR 67
 278: STR
 279: PUSH
 280: LD_STRING )
 282: STR
 283: PPUSH
 284: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 288: LD_STRING displayDifficulty(
 290: PUSH
 291: LD_OWVAR 67
 295: STR
 296: PUSH
 297: LD_STRING )
 299: STR
 300: PPUSH
 301: CALL_OW 559
// end ;
 305: LD_VAR 0 1
 309: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 310: LD_INT 0
 312: PPUSH
// if p2 = stream_mode then
 313: LD_VAR 0 2
 317: PUSH
 318: LD_INT 100
 320: EQUAL
 321: IFFALSE 1324
// begin if not StreamModeActive then
 323: LD_EXP 2
 327: NOT
 328: IFFALSE 338
// StreamModeActive := true ;
 330: LD_ADDR_EXP 2
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// if p3 = 0 then
 338: LD_VAR 0 3
 342: PUSH
 343: LD_INT 0
 345: EQUAL
 346: IFFALSE 352
// InitStreamMode ;
 348: CALL 1528 0 0
// if p3 = 1 then
 352: LD_VAR 0 3
 356: PUSH
 357: LD_INT 1
 359: EQUAL
 360: IFFALSE 370
// sRocket := true ;
 362: LD_ADDR_EXP 7
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// if p3 = 2 then
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: IFFALSE 388
// sSpeed := true ;
 380: LD_ADDR_EXP 6
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// if p3 = 3 then
 388: LD_VAR 0 3
 392: PUSH
 393: LD_INT 3
 395: EQUAL
 396: IFFALSE 406
// sEngine := true ;
 398: LD_ADDR_EXP 8
 402: PUSH
 403: LD_INT 1
 405: ST_TO_ADDR
// if p3 = 4 then
 406: LD_VAR 0 3
 410: PUSH
 411: LD_INT 4
 413: EQUAL
 414: IFFALSE 424
// sSpec := true ;
 416: LD_ADDR_EXP 5
 420: PUSH
 421: LD_INT 1
 423: ST_TO_ADDR
// if p3 = 5 then
 424: LD_VAR 0 3
 428: PUSH
 429: LD_INT 5
 431: EQUAL
 432: IFFALSE 442
// sLevel := true ;
 434: LD_ADDR_EXP 9
 438: PUSH
 439: LD_INT 1
 441: ST_TO_ADDR
// if p3 = 6 then
 442: LD_VAR 0 3
 446: PUSH
 447: LD_INT 6
 449: EQUAL
 450: IFFALSE 460
// sArmoury := true ;
 452: LD_ADDR_EXP 10
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// if p3 = 7 then
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 7
 467: EQUAL
 468: IFFALSE 478
// sRadar := true ;
 470: LD_ADDR_EXP 11
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// if p3 = 8 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_INT 8
 485: EQUAL
 486: IFFALSE 496
// sBunker := true ;
 488: LD_ADDR_EXP 12
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// if p3 = 9 then
 496: LD_VAR 0 3
 500: PUSH
 501: LD_INT 9
 503: EQUAL
 504: IFFALSE 514
// sHack := true ;
 506: LD_ADDR_EXP 13
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// if p3 = 10 then
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 10
 521: EQUAL
 522: IFFALSE 532
// sFire := true ;
 524: LD_ADDR_EXP 14
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// if p3 = 11 then
 532: LD_VAR 0 3
 536: PUSH
 537: LD_INT 11
 539: EQUAL
 540: IFFALSE 550
// sRefresh := true ;
 542: LD_ADDR_EXP 15
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// if p3 = 12 then
 550: LD_VAR 0 3
 554: PUSH
 555: LD_INT 12
 557: EQUAL
 558: IFFALSE 568
// sExp := true ;
 560: LD_ADDR_EXP 16
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// if p3 = 13 then
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 13
 575: EQUAL
 576: IFFALSE 586
// sDepot := true ;
 578: LD_ADDR_EXP 17
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// if p3 = 14 then
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 14
 593: EQUAL
 594: IFFALSE 604
// sFlag := true ;
 596: LD_ADDR_EXP 18
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if p3 = 15 then
 604: LD_VAR 0 3
 608: PUSH
 609: LD_INT 15
 611: EQUAL
 612: IFFALSE 622
// sKamikadze := true ;
 614: LD_ADDR_EXP 26
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
// if p3 = 16 then
 622: LD_VAR 0 3
 626: PUSH
 627: LD_INT 16
 629: EQUAL
 630: IFFALSE 640
// sTroll := true ;
 632: LD_ADDR_EXP 27
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// if p3 = 17 then
 640: LD_VAR 0 3
 644: PUSH
 645: LD_INT 17
 647: EQUAL
 648: IFFALSE 658
// sSlow := true ;
 650: LD_ADDR_EXP 28
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// if p3 = 18 then
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 18
 665: EQUAL
 666: IFFALSE 676
// sLack := true ;
 668: LD_ADDR_EXP 29
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// if p3 = 19 then
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 19
 683: EQUAL
 684: IFFALSE 694
// sTank := true ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// if p3 = 20 then
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 20
 701: EQUAL
 702: IFFALSE 712
// sRemote := true ;
 704: LD_ADDR_EXP 32
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// if p3 = 21 then
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 21
 719: EQUAL
 720: IFFALSE 730
// sPowell := true ;
 722: LD_ADDR_EXP 33
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// if p3 = 22 then
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 22
 737: EQUAL
 738: IFFALSE 748
// sTeleport := true ;
 740: LD_ADDR_EXP 36
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// if p3 = 23 then
 748: LD_VAR 0 3
 752: PUSH
 753: LD_INT 23
 755: EQUAL
 756: IFFALSE 766
// sOilTower := true ;
 758: LD_ADDR_EXP 38
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// if p3 = 24 then
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 24
 773: EQUAL
 774: IFFALSE 784
// sShovel := true ;
 776: LD_ADDR_EXP 39
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// if p3 = 25 then
 784: LD_VAR 0 3
 788: PUSH
 789: LD_INT 25
 791: EQUAL
 792: IFFALSE 802
// sSheik := true ;
 794: LD_ADDR_EXP 40
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// if p3 = 26 then
 802: LD_VAR 0 3
 806: PUSH
 807: LD_INT 26
 809: EQUAL
 810: IFFALSE 820
// sEarthquake := true ;
 812: LD_ADDR_EXP 42
 816: PUSH
 817: LD_INT 1
 819: ST_TO_ADDR
// if p3 = 27 then
 820: LD_VAR 0 3
 824: PUSH
 825: LD_INT 27
 827: EQUAL
 828: IFFALSE 838
// sAI := true ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// if p3 = 28 then
 838: LD_VAR 0 3
 842: PUSH
 843: LD_INT 28
 845: EQUAL
 846: IFFALSE 856
// sCargo := true ;
 848: LD_ADDR_EXP 46
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// if p3 = 29 then
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 29
 863: EQUAL
 864: IFFALSE 874
// sDLaser := true ;
 866: LD_ADDR_EXP 47
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// if p3 = 30 then
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 30
 881: EQUAL
 882: IFFALSE 892
// sExchange := true ;
 884: LD_ADDR_EXP 48
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
// if p3 = 31 then
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 31
 899: EQUAL
 900: IFFALSE 910
// sFac := true ;
 902: LD_ADDR_EXP 49
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// if p3 = 32 then
 910: LD_VAR 0 3
 914: PUSH
 915: LD_INT 32
 917: EQUAL
 918: IFFALSE 928
// sPower := true ;
 920: LD_ADDR_EXP 50
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// if p3 = 33 then
 928: LD_VAR 0 3
 932: PUSH
 933: LD_INT 33
 935: EQUAL
 936: IFFALSE 946
// sRandom := true ;
 938: LD_ADDR_EXP 51
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// if p3 = 34 then
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 34
 953: EQUAL
 954: IFFALSE 964
// sShield := true ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_INT 1
 963: ST_TO_ADDR
// if p3 = 35 then
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 35
 971: EQUAL
 972: IFFALSE 982
// sTime := true ;
 974: LD_ADDR_EXP 53
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// if p3 = 36 then
 982: LD_VAR 0 3
 986: PUSH
 987: LD_INT 36
 989: EQUAL
 990: IFFALSE 1000
// sTools := true ;
 992: LD_ADDR_EXP 54
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// if p3 = 101 then
1000: LD_VAR 0 3
1004: PUSH
1005: LD_INT 101
1007: EQUAL
1008: IFFALSE 1018
// sSold := true ;
1010: LD_ADDR_EXP 19
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if p3 = 102 then
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 102
1025: EQUAL
1026: IFFALSE 1036
// sDiff := true ;
1028: LD_ADDR_EXP 20
1032: PUSH
1033: LD_INT 1
1035: ST_TO_ADDR
// if p3 = 103 then
1036: LD_VAR 0 3
1040: PUSH
1041: LD_INT 103
1043: EQUAL
1044: IFFALSE 1054
// sFog := true ;
1046: LD_ADDR_EXP 23
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// if p3 = 104 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 104
1061: EQUAL
1062: IFFALSE 1072
// sReset := true ;
1064: LD_ADDR_EXP 24
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// if p3 = 105 then
1072: LD_VAR 0 3
1076: PUSH
1077: LD_INT 105
1079: EQUAL
1080: IFFALSE 1090
// sSun := true ;
1082: LD_ADDR_EXP 25
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// if p3 = 106 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 106
1097: EQUAL
1098: IFFALSE 1108
// sTiger := true ;
1100: LD_ADDR_EXP 21
1104: PUSH
1105: LD_INT 1
1107: ST_TO_ADDR
// if p3 = 107 then
1108: LD_VAR 0 3
1112: PUSH
1113: LD_INT 107
1115: EQUAL
1116: IFFALSE 1126
// sBomb := true ;
1118: LD_ADDR_EXP 22
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// if p3 = 108 then
1126: LD_VAR 0 3
1130: PUSH
1131: LD_INT 108
1133: EQUAL
1134: IFFALSE 1144
// sWound := true ;
1136: LD_ADDR_EXP 30
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// if p3 = 109 then
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 109
1151: EQUAL
1152: IFFALSE 1162
// sBetray := true ;
1154: LD_ADDR_EXP 34
1158: PUSH
1159: LD_INT 1
1161: ST_TO_ADDR
// if p3 = 110 then
1162: LD_VAR 0 3
1166: PUSH
1167: LD_INT 110
1169: EQUAL
1170: IFFALSE 1180
// sContamin := true ;
1172: LD_ADDR_EXP 35
1176: PUSH
1177: LD_INT 1
1179: ST_TO_ADDR
// if p3 = 111 then
1180: LD_VAR 0 3
1184: PUSH
1185: LD_INT 111
1187: EQUAL
1188: IFFALSE 1198
// sOil := true ;
1190: LD_ADDR_EXP 37
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if p3 = 112 then
1198: LD_VAR 0 3
1202: PUSH
1203: LD_INT 112
1205: EQUAL
1206: IFFALSE 1216
// sStu := true ;
1208: LD_ADDR_EXP 41
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if p3 = 113 then
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 113
1223: EQUAL
1224: IFFALSE 1234
// sBazooka := true ;
1226: LD_ADDR_EXP 44
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// if p3 = 114 then
1234: LD_VAR 0 3
1238: PUSH
1239: LD_INT 114
1241: EQUAL
1242: IFFALSE 1252
// sMortar := true ;
1244: LD_ADDR_EXP 45
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// if p3 = 115 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 115
1259: EQUAL
1260: IFFALSE 1270
// sRanger := true ;
1262: LD_ADDR_EXP 55
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// if p3 = 116 then
1270: LD_VAR 0 3
1274: PUSH
1275: LD_INT 116
1277: EQUAL
1278: IFFALSE 1288
// sComputer := true ;
1280: LD_ADDR_EXP 56
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// if p3 = 117 then
1288: LD_VAR 0 3
1292: PUSH
1293: LD_INT 117
1295: EQUAL
1296: IFFALSE 1306
// s30 := true ;
1298: LD_ADDR_EXP 57
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// if p3 = 118 then
1306: LD_VAR 0 3
1310: PUSH
1311: LD_INT 118
1313: EQUAL
1314: IFFALSE 1324
// s60 := true ;
1316: LD_ADDR_EXP 58
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// end ; if p2 = hack_mode then
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 101
1331: EQUAL
1332: IFFALSE 1460
// begin case p3 of 1 :
1334: LD_VAR 0 3
1338: PUSH
1339: LD_INT 1
1341: DOUBLE
1342: EQUAL
1343: IFTRUE 1347
1345: GO 1354
1347: POP
// hHackUnlimitedResources ; 2 :
1348: CALL 13607 0 0
1352: GO 1460
1354: LD_INT 2
1356: DOUBLE
1357: EQUAL
1358: IFTRUE 1362
1360: GO 1369
1362: POP
// hHackSetLevel10 ; 3 :
1363: CALL 13740 0 0
1367: GO 1460
1369: LD_INT 3
1371: DOUBLE
1372: EQUAL
1373: IFTRUE 1377
1375: GO 1384
1377: POP
// hHackSetLevel10YourUnits ; 4 :
1378: CALL 13825 0 0
1382: GO 1460
1384: LD_INT 4
1386: DOUBLE
1387: EQUAL
1388: IFTRUE 1392
1390: GO 1399
1392: POP
// hHackInvincible ; 5 :
1393: CALL 14273 0 0
1397: GO 1460
1399: LD_INT 5
1401: DOUBLE
1402: EQUAL
1403: IFTRUE 1407
1405: GO 1414
1407: POP
// hHackInvisible ; 6 :
1408: CALL 14384 0 0
1412: GO 1460
1414: LD_INT 6
1416: DOUBLE
1417: EQUAL
1418: IFTRUE 1422
1420: GO 1429
1422: POP
// hHackChangeYourSide ; 7 :
1423: CALL 14441 0 0
1427: GO 1460
1429: LD_INT 7
1431: DOUBLE
1432: EQUAL
1433: IFTRUE 1437
1435: GO 1444
1437: POP
// hHackChangeUnitSide ; 8 :
1438: CALL 14483 0 0
1442: GO 1460
1444: LD_INT 8
1446: DOUBLE
1447: EQUAL
1448: IFTRUE 1452
1450: GO 1459
1452: POP
// hHackFog ; end ;
1453: CALL 14584 0 0
1457: GO 1460
1459: POP
// end ; if p2 = game_save_mode then
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 102
1467: EQUAL
1468: IFFALSE 1523
// begin if p3 = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1490
// globalGameSaveCounter := p4 ;
1480: LD_ADDR_EXP 1
1484: PUSH
1485: LD_VAR 0 4
1489: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1490: LD_VAR 0 3
1494: PUSH
1495: LD_INT 2
1497: EQUAL
1498: PUSH
1499: LD_EXP 1
1503: AND
1504: IFFALSE 1523
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1506: LD_STRING setGameSaveCounter(
1508: PUSH
1509: LD_EXP 1
1513: STR
1514: PUSH
1515: LD_STRING )
1517: STR
1518: PPUSH
1519: CALL_OW 559
// end ; end ;
1523: LD_VAR 0 7
1527: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1528: LD_INT 0
1530: PPUSH
// streamModeActive := false ;
1531: LD_ADDR_EXP 2
1535: PUSH
1536: LD_INT 0
1538: ST_TO_ADDR
// normalCounter := 36 ;
1539: LD_ADDR_EXP 3
1543: PUSH
1544: LD_INT 36
1546: ST_TO_ADDR
// hardcoreCounter := 18 ;
1547: LD_ADDR_EXP 4
1551: PUSH
1552: LD_INT 18
1554: ST_TO_ADDR
// sRocket := false ;
1555: LD_ADDR_EXP 7
1559: PUSH
1560: LD_INT 0
1562: ST_TO_ADDR
// sSpeed := false ;
1563: LD_ADDR_EXP 6
1567: PUSH
1568: LD_INT 0
1570: ST_TO_ADDR
// sEngine := false ;
1571: LD_ADDR_EXP 8
1575: PUSH
1576: LD_INT 0
1578: ST_TO_ADDR
// sSpec := false ;
1579: LD_ADDR_EXP 5
1583: PUSH
1584: LD_INT 0
1586: ST_TO_ADDR
// sLevel := false ;
1587: LD_ADDR_EXP 9
1591: PUSH
1592: LD_INT 0
1594: ST_TO_ADDR
// sArmoury := false ;
1595: LD_ADDR_EXP 10
1599: PUSH
1600: LD_INT 0
1602: ST_TO_ADDR
// sRadar := false ;
1603: LD_ADDR_EXP 11
1607: PUSH
1608: LD_INT 0
1610: ST_TO_ADDR
// sBunker := false ;
1611: LD_ADDR_EXP 12
1615: PUSH
1616: LD_INT 0
1618: ST_TO_ADDR
// sHack := false ;
1619: LD_ADDR_EXP 13
1623: PUSH
1624: LD_INT 0
1626: ST_TO_ADDR
// sFire := false ;
1627: LD_ADDR_EXP 14
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// sRefresh := false ;
1635: LD_ADDR_EXP 15
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// sExp := false ;
1643: LD_ADDR_EXP 16
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// sDepot := false ;
1651: LD_ADDR_EXP 17
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// sFlag := false ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// sKamikadze := false ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 0
1674: ST_TO_ADDR
// sTroll := false ;
1675: LD_ADDR_EXP 27
1679: PUSH
1680: LD_INT 0
1682: ST_TO_ADDR
// sSlow := false ;
1683: LD_ADDR_EXP 28
1687: PUSH
1688: LD_INT 0
1690: ST_TO_ADDR
// sLack := false ;
1691: LD_ADDR_EXP 29
1695: PUSH
1696: LD_INT 0
1698: ST_TO_ADDR
// sTank := false ;
1699: LD_ADDR_EXP 31
1703: PUSH
1704: LD_INT 0
1706: ST_TO_ADDR
// sRemote := false ;
1707: LD_ADDR_EXP 32
1711: PUSH
1712: LD_INT 0
1714: ST_TO_ADDR
// sPowell := false ;
1715: LD_ADDR_EXP 33
1719: PUSH
1720: LD_INT 0
1722: ST_TO_ADDR
// sTeleport := false ;
1723: LD_ADDR_EXP 36
1727: PUSH
1728: LD_INT 0
1730: ST_TO_ADDR
// sOilTower := false ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: LD_INT 0
1738: ST_TO_ADDR
// sShovel := false ;
1739: LD_ADDR_EXP 39
1743: PUSH
1744: LD_INT 0
1746: ST_TO_ADDR
// sSheik := false ;
1747: LD_ADDR_EXP 40
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// sEarthquake := false ;
1755: LD_ADDR_EXP 42
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// sAI := false ;
1763: LD_ADDR_EXP 43
1767: PUSH
1768: LD_INT 0
1770: ST_TO_ADDR
// sCargo := false ;
1771: LD_ADDR_EXP 46
1775: PUSH
1776: LD_INT 0
1778: ST_TO_ADDR
// sDLaser := false ;
1779: LD_ADDR_EXP 47
1783: PUSH
1784: LD_INT 0
1786: ST_TO_ADDR
// sExchange := false ;
1787: LD_ADDR_EXP 48
1791: PUSH
1792: LD_INT 0
1794: ST_TO_ADDR
// sFac := false ;
1795: LD_ADDR_EXP 49
1799: PUSH
1800: LD_INT 0
1802: ST_TO_ADDR
// sPower := false ;
1803: LD_ADDR_EXP 50
1807: PUSH
1808: LD_INT 0
1810: ST_TO_ADDR
// sRandom := false ;
1811: LD_ADDR_EXP 51
1815: PUSH
1816: LD_INT 0
1818: ST_TO_ADDR
// sShield := false ;
1819: LD_ADDR_EXP 52
1823: PUSH
1824: LD_INT 0
1826: ST_TO_ADDR
// sTime := false ;
1827: LD_ADDR_EXP 53
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// sTools := false ;
1835: LD_ADDR_EXP 54
1839: PUSH
1840: LD_INT 0
1842: ST_TO_ADDR
// sSold := false ;
1843: LD_ADDR_EXP 19
1847: PUSH
1848: LD_INT 0
1850: ST_TO_ADDR
// sDiff := false ;
1851: LD_ADDR_EXP 20
1855: PUSH
1856: LD_INT 0
1858: ST_TO_ADDR
// sFog := false ;
1859: LD_ADDR_EXP 23
1863: PUSH
1864: LD_INT 0
1866: ST_TO_ADDR
// sReset := false ;
1867: LD_ADDR_EXP 24
1871: PUSH
1872: LD_INT 0
1874: ST_TO_ADDR
// sSun := false ;
1875: LD_ADDR_EXP 25
1879: PUSH
1880: LD_INT 0
1882: ST_TO_ADDR
// sTiger := false ;
1883: LD_ADDR_EXP 21
1887: PUSH
1888: LD_INT 0
1890: ST_TO_ADDR
// sBomb := false ;
1891: LD_ADDR_EXP 22
1895: PUSH
1896: LD_INT 0
1898: ST_TO_ADDR
// sWound := false ;
1899: LD_ADDR_EXP 30
1903: PUSH
1904: LD_INT 0
1906: ST_TO_ADDR
// sBetray := false ;
1907: LD_ADDR_EXP 34
1911: PUSH
1912: LD_INT 0
1914: ST_TO_ADDR
// sContamin := false ;
1915: LD_ADDR_EXP 35
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// sOil := false ;
1923: LD_ADDR_EXP 37
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// sStu := false ;
1931: LD_ADDR_EXP 41
1935: PUSH
1936: LD_INT 0
1938: ST_TO_ADDR
// sBazooka := false ;
1939: LD_ADDR_EXP 44
1943: PUSH
1944: LD_INT 0
1946: ST_TO_ADDR
// sMortar := false ;
1947: LD_ADDR_EXP 45
1951: PUSH
1952: LD_INT 0
1954: ST_TO_ADDR
// sRanger := false ;
1955: LD_ADDR_EXP 55
1959: PUSH
1960: LD_INT 0
1962: ST_TO_ADDR
// sComputer := false ;
1963: LD_ADDR_EXP 56
1967: PUSH
1968: LD_INT 0
1970: ST_TO_ADDR
// s30 := false ;
1971: LD_ADDR_EXP 57
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// s60 := false ;
1979: LD_ADDR_EXP 58
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// end ;
1987: LD_VAR 0 1
1991: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := [ ] ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: EMPTY
2007: ST_TO_ADDR
// if campaign_id = 1 then
2008: LD_OWVAR 69
2012: PUSH
2013: LD_INT 1
2015: EQUAL
2016: IFFALSE 5182
// begin case mission_number of 1 :
2018: LD_OWVAR 70
2022: PUSH
2023: LD_INT 1
2025: DOUBLE
2026: EQUAL
2027: IFTRUE 2031
2029: GO 2107
2031: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: LD_INT 11
2045: PUSH
2046: LD_INT 12
2048: PUSH
2049: LD_INT 15
2051: PUSH
2052: LD_INT 16
2054: PUSH
2055: LD_INT 22
2057: PUSH
2058: LD_INT 23
2060: PUSH
2061: LD_INT 26
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 101
2077: PUSH
2078: LD_INT 102
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 116
2086: PUSH
2087: LD_INT 117
2089: PUSH
2090: LD_INT 118
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
2105: GO 5180
2107: LD_INT 2
2109: DOUBLE
2110: EQUAL
2111: IFTRUE 2115
2113: GO 2199
2115: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: LD_INT 4
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 12
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 16
2138: PUSH
2139: LD_INT 22
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 26
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 101
2161: PUSH
2162: LD_INT 102
2164: PUSH
2165: LD_INT 105
2167: PUSH
2168: LD_INT 106
2170: PUSH
2171: LD_INT 108
2173: PUSH
2174: LD_INT 116
2176: PUSH
2177: LD_INT 117
2179: PUSH
2180: LD_INT 118
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: ST_TO_ADDR
2197: GO 5180
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2295
2207: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: LD_INT 5
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 15
2230: PUSH
2231: LD_INT 16
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 26
2239: PUSH
2240: LD_INT 36
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 101
2257: PUSH
2258: LD_INT 102
2260: PUSH
2261: LD_INT 105
2263: PUSH
2264: LD_INT 106
2266: PUSH
2267: LD_INT 108
2269: PUSH
2270: LD_INT 116
2272: PUSH
2273: LD_INT 117
2275: PUSH
2276: LD_INT 118
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: ST_TO_ADDR
2293: GO 5180
2295: LD_INT 4
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2399
2303: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 5
2317: PUSH
2318: LD_INT 8
2320: PUSH
2321: LD_INT 11
2323: PUSH
2324: LD_INT 12
2326: PUSH
2327: LD_INT 15
2329: PUSH
2330: LD_INT 16
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 23
2338: PUSH
2339: LD_INT 26
2341: PUSH
2342: LD_INT 36
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 101
2361: PUSH
2362: LD_INT 102
2364: PUSH
2365: LD_INT 105
2367: PUSH
2368: LD_INT 106
2370: PUSH
2371: LD_INT 108
2373: PUSH
2374: LD_INT 116
2376: PUSH
2377: LD_INT 117
2379: PUSH
2380: LD_INT 118
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: ST_TO_ADDR
2397: GO 5180
2399: LD_INT 5
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2519
2407: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_INT 2
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: LD_INT 8
2427: PUSH
2428: LD_INT 11
2430: PUSH
2431: LD_INT 12
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 16
2439: PUSH
2440: LD_INT 22
2442: PUSH
2443: LD_INT 23
2445: PUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 26
2451: PUSH
2452: LD_INT 36
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 101
2473: PUSH
2474: LD_INT 102
2476: PUSH
2477: LD_INT 105
2479: PUSH
2480: LD_INT 106
2482: PUSH
2483: LD_INT 108
2485: PUSH
2486: LD_INT 109
2488: PUSH
2489: LD_INT 112
2491: PUSH
2492: LD_INT 116
2494: PUSH
2495: LD_INT 117
2497: PUSH
2498: LD_INT 118
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: ST_TO_ADDR
2517: GO 5180
2519: LD_INT 6
2521: DOUBLE
2522: EQUAL
2523: IFTRUE 2527
2525: GO 2659
2527: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: LD_INT 4
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 6
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 11
2550: PUSH
2551: LD_INT 12
2553: PUSH
2554: LD_INT 15
2556: PUSH
2557: LD_INT 16
2559: PUSH
2560: LD_INT 20
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: LD_INT 25
2574: PUSH
2575: LD_INT 26
2577: PUSH
2578: LD_INT 30
2580: PUSH
2581: LD_INT 31
2583: PUSH
2584: LD_INT 32
2586: PUSH
2587: LD_INT 36
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 101
2613: PUSH
2614: LD_INT 102
2616: PUSH
2617: LD_INT 105
2619: PUSH
2620: LD_INT 106
2622: PUSH
2623: LD_INT 108
2625: PUSH
2626: LD_INT 109
2628: PUSH
2629: LD_INT 112
2631: PUSH
2632: LD_INT 116
2634: PUSH
2635: LD_INT 117
2637: PUSH
2638: LD_INT 118
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: ST_TO_ADDR
2657: GO 5180
2659: LD_INT 7
2661: DOUBLE
2662: EQUAL
2663: IFTRUE 2667
2665: GO 2779
2667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_INT 2
2675: PUSH
2676: LD_INT 4
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 11
2687: PUSH
2688: LD_INT 12
2690: PUSH
2691: LD_INT 15
2693: PUSH
2694: LD_INT 16
2696: PUSH
2697: LD_INT 20
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 22
2705: PUSH
2706: LD_INT 23
2708: PUSH
2709: LD_INT 25
2711: PUSH
2712: LD_INT 26
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 101
2733: PUSH
2734: LD_INT 102
2736: PUSH
2737: LD_INT 103
2739: PUSH
2740: LD_INT 105
2742: PUSH
2743: LD_INT 106
2745: PUSH
2746: LD_INT 108
2748: PUSH
2749: LD_INT 112
2751: PUSH
2752: LD_INT 116
2754: PUSH
2755: LD_INT 117
2757: PUSH
2758: LD_INT 118
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
2777: GO 5180
2779: LD_INT 8
2781: DOUBLE
2782: EQUAL
2783: IFTRUE 2787
2785: GO 2927
2787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 4
2798: PUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: LD_INT 11
2813: PUSH
2814: LD_INT 12
2816: PUSH
2817: LD_INT 15
2819: PUSH
2820: LD_INT 16
2822: PUSH
2823: LD_INT 20
2825: PUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 23
2834: PUSH
2835: LD_INT 25
2837: PUSH
2838: LD_INT 26
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: LD_INT 32
2849: PUSH
2850: LD_INT 36
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 101
2877: PUSH
2878: LD_INT 102
2880: PUSH
2881: LD_INT 103
2883: PUSH
2884: LD_INT 105
2886: PUSH
2887: LD_INT 106
2889: PUSH
2890: LD_INT 108
2892: PUSH
2893: LD_INT 109
2895: PUSH
2896: LD_INT 112
2898: PUSH
2899: LD_INT 116
2901: PUSH
2902: LD_INT 117
2904: PUSH
2905: LD_INT 118
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: ST_TO_ADDR
2925: GO 5180
2927: LD_INT 9
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 3083
2935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 4
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: LD_INT 11
2961: PUSH
2962: LD_INT 12
2964: PUSH
2965: LD_INT 15
2967: PUSH
2968: LD_INT 16
2970: PUSH
2971: LD_INT 20
2973: PUSH
2974: LD_INT 21
2976: PUSH
2977: LD_INT 22
2979: PUSH
2980: LD_INT 23
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 26
2988: PUSH
2989: LD_INT 28
2991: PUSH
2992: LD_INT 30
2994: PUSH
2995: LD_INT 31
2997: PUSH
2998: LD_INT 32
3000: PUSH
3001: LD_INT 36
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 101
3029: PUSH
3030: LD_INT 102
3032: PUSH
3033: LD_INT 103
3035: PUSH
3036: LD_INT 105
3038: PUSH
3039: LD_INT 106
3041: PUSH
3042: LD_INT 108
3044: PUSH
3045: LD_INT 109
3047: PUSH
3048: LD_INT 112
3050: PUSH
3051: LD_INT 114
3053: PUSH
3054: LD_INT 116
3056: PUSH
3057: LD_INT 117
3059: PUSH
3060: LD_INT 118
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: ST_TO_ADDR
3081: GO 5180
3083: LD_INT 10
3085: DOUBLE
3086: EQUAL
3087: IFTRUE 3091
3089: GO 3287
3091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: LD_INT 5
3105: PUSH
3106: LD_INT 6
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: LD_INT 8
3114: PUSH
3115: LD_INT 9
3117: PUSH
3118: LD_INT 10
3120: PUSH
3121: LD_INT 11
3123: PUSH
3124: LD_INT 12
3126: PUSH
3127: LD_INT 13
3129: PUSH
3130: LD_INT 14
3132: PUSH
3133: LD_INT 15
3135: PUSH
3136: LD_INT 16
3138: PUSH
3139: LD_INT 17
3141: PUSH
3142: LD_INT 18
3144: PUSH
3145: LD_INT 19
3147: PUSH
3148: LD_INT 20
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 23
3159: PUSH
3160: LD_INT 24
3162: PUSH
3163: LD_INT 25
3165: PUSH
3166: LD_INT 26
3168: PUSH
3169: LD_INT 28
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 31
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: LD_INT 36
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 101
3217: PUSH
3218: LD_INT 102
3220: PUSH
3221: LD_INT 103
3223: PUSH
3224: LD_INT 104
3226: PUSH
3227: LD_INT 105
3229: PUSH
3230: LD_INT 106
3232: PUSH
3233: LD_INT 107
3235: PUSH
3236: LD_INT 108
3238: PUSH
3239: LD_INT 109
3241: PUSH
3242: LD_INT 110
3244: PUSH
3245: LD_INT 111
3247: PUSH
3248: LD_INT 112
3250: PUSH
3251: LD_INT 114
3253: PUSH
3254: LD_INT 116
3256: PUSH
3257: LD_INT 117
3259: PUSH
3260: LD_INT 118
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: ST_TO_ADDR
3285: GO 5180
3287: LD_INT 11
3289: DOUBLE
3290: EQUAL
3291: IFTRUE 3295
3293: GO 3499
3295: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 6
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 8
3321: PUSH
3322: LD_INT 9
3324: PUSH
3325: LD_INT 10
3327: PUSH
3328: LD_INT 11
3330: PUSH
3331: LD_INT 12
3333: PUSH
3334: LD_INT 13
3336: PUSH
3337: LD_INT 14
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 16
3345: PUSH
3346: LD_INT 17
3348: PUSH
3349: LD_INT 18
3351: PUSH
3352: LD_INT 19
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 23
3366: PUSH
3367: LD_INT 24
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 28
3378: PUSH
3379: LD_INT 30
3381: PUSH
3382: LD_INT 31
3384: PUSH
3385: LD_INT 32
3387: PUSH
3388: LD_INT 34
3390: PUSH
3391: LD_INT 36
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 101
3429: PUSH
3430: LD_INT 102
3432: PUSH
3433: LD_INT 103
3435: PUSH
3436: LD_INT 104
3438: PUSH
3439: LD_INT 105
3441: PUSH
3442: LD_INT 106
3444: PUSH
3445: LD_INT 107
3447: PUSH
3448: LD_INT 108
3450: PUSH
3451: LD_INT 109
3453: PUSH
3454: LD_INT 110
3456: PUSH
3457: LD_INT 111
3459: PUSH
3460: LD_INT 112
3462: PUSH
3463: LD_INT 114
3465: PUSH
3466: LD_INT 116
3468: PUSH
3469: LD_INT 117
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: ST_TO_ADDR
3497: GO 5180
3499: LD_INT 12
3501: DOUBLE
3502: EQUAL
3503: IFTRUE 3507
3505: GO 3727
3507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: LD_INT 5
3527: PUSH
3528: LD_INT 6
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: LD_INT 9
3539: PUSH
3540: LD_INT 10
3542: PUSH
3543: LD_INT 11
3545: PUSH
3546: LD_INT 12
3548: PUSH
3549: LD_INT 13
3551: PUSH
3552: LD_INT 14
3554: PUSH
3555: LD_INT 15
3557: PUSH
3558: LD_INT 16
3560: PUSH
3561: LD_INT 17
3563: PUSH
3564: LD_INT 18
3566: PUSH
3567: LD_INT 19
3569: PUSH
3570: LD_INT 20
3572: PUSH
3573: LD_INT 21
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 24
3584: PUSH
3585: LD_INT 25
3587: PUSH
3588: LD_INT 26
3590: PUSH
3591: LD_INT 27
3593: PUSH
3594: LD_INT 28
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 31
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 33
3608: PUSH
3609: LD_INT 34
3611: PUSH
3612: LD_INT 36
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 101
3653: PUSH
3654: LD_INT 102
3656: PUSH
3657: LD_INT 103
3659: PUSH
3660: LD_INT 104
3662: PUSH
3663: LD_INT 105
3665: PUSH
3666: LD_INT 106
3668: PUSH
3669: LD_INT 107
3671: PUSH
3672: LD_INT 108
3674: PUSH
3675: LD_INT 109
3677: PUSH
3678: LD_INT 110
3680: PUSH
3681: LD_INT 111
3683: PUSH
3684: LD_INT 112
3686: PUSH
3687: LD_INT 113
3689: PUSH
3690: LD_INT 114
3692: PUSH
3693: LD_INT 116
3695: PUSH
3696: LD_INT 117
3698: PUSH
3699: LD_INT 118
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
3725: GO 5180
3727: LD_INT 13
3729: DOUBLE
3730: EQUAL
3731: IFTRUE 3735
3733: GO 3943
3735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: LD_INT 8
3758: PUSH
3759: LD_INT 9
3761: PUSH
3762: LD_INT 10
3764: PUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: LD_INT 14
3773: PUSH
3774: LD_INT 15
3776: PUSH
3777: LD_INT 16
3779: PUSH
3780: LD_INT 17
3782: PUSH
3783: LD_INT 18
3785: PUSH
3786: LD_INT 19
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 25
3806: PUSH
3807: LD_INT 26
3809: PUSH
3810: LD_INT 27
3812: PUSH
3813: LD_INT 28
3815: PUSH
3816: LD_INT 30
3818: PUSH
3819: LD_INT 31
3821: PUSH
3822: LD_INT 32
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 34
3830: PUSH
3831: LD_INT 36
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 101
3869: PUSH
3870: LD_INT 102
3872: PUSH
3873: LD_INT 103
3875: PUSH
3876: LD_INT 104
3878: PUSH
3879: LD_INT 105
3881: PUSH
3882: LD_INT 106
3884: PUSH
3885: LD_INT 107
3887: PUSH
3888: LD_INT 108
3890: PUSH
3891: LD_INT 109
3893: PUSH
3894: LD_INT 110
3896: PUSH
3897: LD_INT 111
3899: PUSH
3900: LD_INT 112
3902: PUSH
3903: LD_INT 113
3905: PUSH
3906: LD_INT 114
3908: PUSH
3909: LD_INT 116
3911: PUSH
3912: LD_INT 117
3914: PUSH
3915: LD_INT 118
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: ST_TO_ADDR
3941: GO 5180
3943: LD_INT 14
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 4175
3951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: LD_INT 6
3974: PUSH
3975: LD_INT 7
3977: PUSH
3978: LD_INT 8
3980: PUSH
3981: LD_INT 9
3983: PUSH
3984: LD_INT 10
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 12
3992: PUSH
3993: LD_INT 13
3995: PUSH
3996: LD_INT 14
3998: PUSH
3999: LD_INT 15
4001: PUSH
4002: LD_INT 16
4004: PUSH
4005: LD_INT 17
4007: PUSH
4008: LD_INT 18
4010: PUSH
4011: LD_INT 19
4013: PUSH
4014: LD_INT 20
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 23
4025: PUSH
4026: LD_INT 24
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 26
4034: PUSH
4035: LD_INT 27
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 29
4043: PUSH
4044: LD_INT 30
4046: PUSH
4047: LD_INT 31
4049: PUSH
4050: LD_INT 32
4052: PUSH
4053: LD_INT 33
4055: PUSH
4056: LD_INT 34
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 101
4101: PUSH
4102: LD_INT 102
4104: PUSH
4105: LD_INT 103
4107: PUSH
4108: LD_INT 104
4110: PUSH
4111: LD_INT 105
4113: PUSH
4114: LD_INT 106
4116: PUSH
4117: LD_INT 107
4119: PUSH
4120: LD_INT 108
4122: PUSH
4123: LD_INT 109
4125: PUSH
4126: LD_INT 110
4128: PUSH
4129: LD_INT 111
4131: PUSH
4132: LD_INT 112
4134: PUSH
4135: LD_INT 113
4137: PUSH
4138: LD_INT 114
4140: PUSH
4141: LD_INT 116
4143: PUSH
4144: LD_INT 117
4146: PUSH
4147: LD_INT 118
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5180
4175: LD_INT 15
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4407
4183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: LD_INT 6
4206: PUSH
4207: LD_INT 7
4209: PUSH
4210: LD_INT 8
4212: PUSH
4213: LD_INT 9
4215: PUSH
4216: LD_INT 10
4218: PUSH
4219: LD_INT 11
4221: PUSH
4222: LD_INT 12
4224: PUSH
4225: LD_INT 13
4227: PUSH
4228: LD_INT 14
4230: PUSH
4231: LD_INT 15
4233: PUSH
4234: LD_INT 16
4236: PUSH
4237: LD_INT 17
4239: PUSH
4240: LD_INT 18
4242: PUSH
4243: LD_INT 19
4245: PUSH
4246: LD_INT 20
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 23
4257: PUSH
4258: LD_INT 24
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 27
4269: PUSH
4270: LD_INT 28
4272: PUSH
4273: LD_INT 29
4275: PUSH
4276: LD_INT 30
4278: PUSH
4279: LD_INT 31
4281: PUSH
4282: LD_INT 32
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 34
4290: PUSH
4291: LD_INT 36
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 101
4333: PUSH
4334: LD_INT 102
4336: PUSH
4337: LD_INT 103
4339: PUSH
4340: LD_INT 104
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 106
4348: PUSH
4349: LD_INT 107
4351: PUSH
4352: LD_INT 108
4354: PUSH
4355: LD_INT 109
4357: PUSH
4358: LD_INT 110
4360: PUSH
4361: LD_INT 111
4363: PUSH
4364: LD_INT 112
4366: PUSH
4367: LD_INT 113
4369: PUSH
4370: LD_INT 114
4372: PUSH
4373: LD_INT 116
4375: PUSH
4376: LD_INT 117
4378: PUSH
4379: LD_INT 118
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 5180
4407: LD_INT 16
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4551
4415: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: LD_INT 7
4432: PUSH
4433: LD_INT 11
4435: PUSH
4436: LD_INT 12
4438: PUSH
4439: LD_INT 15
4441: PUSH
4442: LD_INT 16
4444: PUSH
4445: LD_INT 20
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 23
4456: PUSH
4457: LD_INT 25
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 31
4468: PUSH
4469: LD_INT 32
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 34
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 101
4501: PUSH
4502: LD_INT 102
4504: PUSH
4505: LD_INT 103
4507: PUSH
4508: LD_INT 106
4510: PUSH
4511: LD_INT 108
4513: PUSH
4514: LD_INT 112
4516: PUSH
4517: LD_INT 113
4519: PUSH
4520: LD_INT 114
4522: PUSH
4523: LD_INT 116
4525: PUSH
4526: LD_INT 117
4528: PUSH
4529: LD_INT 118
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5180
4551: LD_INT 17
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4783
4559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: LD_INT 5
4579: PUSH
4580: LD_INT 6
4582: PUSH
4583: LD_INT 7
4585: PUSH
4586: LD_INT 8
4588: PUSH
4589: LD_INT 9
4591: PUSH
4592: LD_INT 10
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 12
4600: PUSH
4601: LD_INT 13
4603: PUSH
4604: LD_INT 14
4606: PUSH
4607: LD_INT 15
4609: PUSH
4610: LD_INT 16
4612: PUSH
4613: LD_INT 17
4615: PUSH
4616: LD_INT 18
4618: PUSH
4619: LD_INT 19
4621: PUSH
4622: LD_INT 20
4624: PUSH
4625: LD_INT 21
4627: PUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 23
4633: PUSH
4634: LD_INT 24
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 26
4642: PUSH
4643: LD_INT 27
4645: PUSH
4646: LD_INT 28
4648: PUSH
4649: LD_INT 29
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 33
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 36
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 101
4709: PUSH
4710: LD_INT 102
4712: PUSH
4713: LD_INT 103
4715: PUSH
4716: LD_INT 104
4718: PUSH
4719: LD_INT 105
4721: PUSH
4722: LD_INT 106
4724: PUSH
4725: LD_INT 107
4727: PUSH
4728: LD_INT 108
4730: PUSH
4731: LD_INT 109
4733: PUSH
4734: LD_INT 110
4736: PUSH
4737: LD_INT 111
4739: PUSH
4740: LD_INT 112
4742: PUSH
4743: LD_INT 113
4745: PUSH
4746: LD_INT 114
4748: PUSH
4749: LD_INT 116
4751: PUSH
4752: LD_INT 117
4754: PUSH
4755: LD_INT 118
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5180
4783: LD_INT 18
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4939
4791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 7
4808: PUSH
4809: LD_INT 11
4811: PUSH
4812: LD_INT 12
4814: PUSH
4815: LD_INT 15
4817: PUSH
4818: LD_INT 16
4820: PUSH
4821: LD_INT 20
4823: PUSH
4824: LD_INT 21
4826: PUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 23
4832: PUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 26
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 31
4844: PUSH
4845: LD_INT 32
4847: PUSH
4848: LD_INT 33
4850: PUSH
4851: LD_INT 34
4853: PUSH
4854: LD_INT 35
4856: PUSH
4857: LD_INT 36
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PUSH
4883: LD_INT 101
4885: PUSH
4886: LD_INT 102
4888: PUSH
4889: LD_INT 103
4891: PUSH
4892: LD_INT 106
4894: PUSH
4895: LD_INT 108
4897: PUSH
4898: LD_INT 112
4900: PUSH
4901: LD_INT 113
4903: PUSH
4904: LD_INT 114
4906: PUSH
4907: LD_INT 115
4909: PUSH
4910: LD_INT 116
4912: PUSH
4913: LD_INT 117
4915: PUSH
4916: LD_INT 118
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5180
4939: LD_INT 19
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5179
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 6
4970: PUSH
4971: LD_INT 7
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: LD_INT 9
4979: PUSH
4980: LD_INT 10
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: LD_INT 15
4997: PUSH
4998: LD_INT 16
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: LD_INT 18
5006: PUSH
5007: LD_INT 19
5009: PUSH
5010: LD_INT 20
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: LD_INT 25
5027: PUSH
5028: LD_INT 26
5030: PUSH
5031: LD_INT 27
5033: PUSH
5034: LD_INT 28
5036: PUSH
5037: LD_INT 29
5039: PUSH
5040: LD_INT 30
5042: PUSH
5043: LD_INT 31
5045: PUSH
5046: LD_INT 32
5048: PUSH
5049: LD_INT 33
5051: PUSH
5052: LD_INT 34
5054: PUSH
5055: LD_INT 35
5057: PUSH
5058: LD_INT 36
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 101
5101: PUSH
5102: LD_INT 102
5104: PUSH
5105: LD_INT 103
5107: PUSH
5108: LD_INT 104
5110: PUSH
5111: LD_INT 105
5113: PUSH
5114: LD_INT 106
5116: PUSH
5117: LD_INT 107
5119: PUSH
5120: LD_INT 108
5122: PUSH
5123: LD_INT 109
5125: PUSH
5126: LD_INT 110
5128: PUSH
5129: LD_INT 111
5131: PUSH
5132: LD_INT 112
5134: PUSH
5135: LD_INT 113
5137: PUSH
5138: LD_INT 114
5140: PUSH
5141: LD_INT 115
5143: PUSH
5144: LD_INT 116
5146: PUSH
5147: LD_INT 117
5149: PUSH
5150: LD_INT 118
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5180
5179: POP
// end else
5180: GO 5411
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: LD_INT 2
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 5
5201: PUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: LD_INT 9
5213: PUSH
5214: LD_INT 10
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: LD_INT 12
5222: PUSH
5223: LD_INT 13
5225: PUSH
5226: LD_INT 14
5228: PUSH
5229: LD_INT 15
5231: PUSH
5232: LD_INT 16
5234: PUSH
5235: LD_INT 17
5237: PUSH
5238: LD_INT 18
5240: PUSH
5241: LD_INT 19
5243: PUSH
5244: LD_INT 20
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_INT 23
5255: PUSH
5256: LD_INT 24
5258: PUSH
5259: LD_INT 25
5261: PUSH
5262: LD_INT 26
5264: PUSH
5265: LD_INT 27
5267: PUSH
5268: LD_INT 28
5270: PUSH
5271: LD_INT 29
5273: PUSH
5274: LD_INT 30
5276: PUSH
5277: LD_INT 31
5279: PUSH
5280: LD_INT 32
5282: PUSH
5283: LD_INT 33
5285: PUSH
5286: LD_INT 34
5288: PUSH
5289: LD_INT 35
5291: PUSH
5292: LD_INT 36
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 101
5335: PUSH
5336: LD_INT 102
5338: PUSH
5339: LD_INT 103
5341: PUSH
5342: LD_INT 104
5344: PUSH
5345: LD_INT 105
5347: PUSH
5348: LD_INT 106
5350: PUSH
5351: LD_INT 107
5353: PUSH
5354: LD_INT 108
5356: PUSH
5357: LD_INT 109
5359: PUSH
5360: LD_INT 110
5362: PUSH
5363: LD_INT 111
5365: PUSH
5366: LD_INT 112
5368: PUSH
5369: LD_INT 113
5371: PUSH
5372: LD_INT 114
5374: PUSH
5375: LD_INT 115
5377: PUSH
5378: LD_INT 116
5380: PUSH
5381: LD_INT 117
5383: PUSH
5384: LD_INT 118
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: ST_TO_ADDR
// if result then
5411: LD_VAR 0 2
5415: IFFALSE 6201
// begin normal :=  ;
5417: LD_ADDR_VAR 0 5
5421: PUSH
5422: LD_STRING 
5424: ST_TO_ADDR
// hardcore :=  ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_STRING 
5432: ST_TO_ADDR
// active :=  ;
5433: LD_ADDR_VAR 0 7
5437: PUSH
5438: LD_STRING 
5440: ST_TO_ADDR
// for i = 1 to normalCounter do
5441: LD_ADDR_VAR 0 8
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 3
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5558
// begin tmp := 0 ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_STRING 0
5466: ST_TO_ADDR
// if result [ 1 ] then
5467: LD_VAR 0 2
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: IFFALSE 5540
// if result [ 1 ] [ 1 ] = i then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PUSH
5490: LD_VAR 0 8
5494: EQUAL
5495: IFFALSE 5540
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 3
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// tmp := 1 ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_STRING 1
5539: ST_TO_ADDR
// end ; normal := normal & tmp ;
5540: LD_ADDR_VAR 0 5
5544: PUSH
5545: LD_VAR 0 5
5549: PUSH
5550: LD_VAR 0 3
5554: STR
5555: ST_TO_ADDR
// end ;
5556: GO 5456
5558: POP
5559: POP
// for i = 1 to hardcoreCounter do
5560: LD_ADDR_VAR 0 8
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_EXP 4
5574: PUSH
5575: FOR_TO
5576: IFFALSE 5681
// begin tmp := 0 ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_STRING 0
5585: ST_TO_ADDR
// if result [ 2 ] then
5586: LD_VAR 0 2
5590: PUSH
5591: LD_INT 2
5593: ARRAY
5594: IFFALSE 5663
// if result [ 2 ] [ 1 ] = 100 + i then
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 2
5603: ARRAY
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PUSH
5609: LD_INT 100
5611: PUSH
5612: LD_VAR 0 8
5616: PLUS
5617: EQUAL
5618: IFFALSE 5663
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_VAR 0 2
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: CALL_OW 3
5649: PPUSH
5650: CALL_OW 1
5654: ST_TO_ADDR
// tmp := 1 ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_STRING 1
5662: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5663: LD_ADDR_VAR 0 6
5667: PUSH
5668: LD_VAR 0 6
5672: PUSH
5673: LD_VAR 0 3
5677: STR
5678: ST_TO_ADDR
// end ;
5679: GO 5575
5681: POP
5682: POP
// if isGameLoad then
5683: LD_VAR 0 1
5687: IFFALSE 6162
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5689: LD_ADDR_VAR 0 4
5693: PUSH
5694: LD_EXP 7
5698: PUSH
5699: LD_EXP 6
5703: PUSH
5704: LD_EXP 8
5708: PUSH
5709: LD_EXP 5
5713: PUSH
5714: LD_EXP 9
5718: PUSH
5719: LD_EXP 10
5723: PUSH
5724: LD_EXP 11
5728: PUSH
5729: LD_EXP 12
5733: PUSH
5734: LD_EXP 13
5738: PUSH
5739: LD_EXP 14
5743: PUSH
5744: LD_EXP 15
5748: PUSH
5749: LD_EXP 16
5753: PUSH
5754: LD_EXP 17
5758: PUSH
5759: LD_EXP 18
5763: PUSH
5764: LD_EXP 26
5768: PUSH
5769: LD_EXP 27
5773: PUSH
5774: LD_EXP 28
5778: PUSH
5779: LD_EXP 29
5783: PUSH
5784: LD_EXP 31
5788: PUSH
5789: LD_EXP 32
5793: PUSH
5794: LD_EXP 33
5798: PUSH
5799: LD_EXP 36
5803: PUSH
5804: LD_EXP 38
5808: PUSH
5809: LD_EXP 39
5813: PUSH
5814: LD_EXP 40
5818: PUSH
5819: LD_EXP 42
5823: PUSH
5824: LD_EXP 43
5828: PUSH
5829: LD_EXP 46
5833: PUSH
5834: LD_EXP 47
5838: PUSH
5839: LD_EXP 48
5843: PUSH
5844: LD_EXP 49
5848: PUSH
5849: LD_EXP 50
5853: PUSH
5854: LD_EXP 51
5858: PUSH
5859: LD_EXP 52
5863: PUSH
5864: LD_EXP 53
5868: PUSH
5869: LD_EXP 54
5873: PUSH
5874: LD_EXP 19
5878: PUSH
5879: LD_EXP 20
5883: PUSH
5884: LD_EXP 23
5888: PUSH
5889: LD_EXP 24
5893: PUSH
5894: LD_EXP 25
5898: PUSH
5899: LD_EXP 21
5903: PUSH
5904: LD_EXP 22
5908: PUSH
5909: LD_EXP 30
5913: PUSH
5914: LD_EXP 34
5918: PUSH
5919: LD_EXP 35
5923: PUSH
5924: LD_EXP 37
5928: PUSH
5929: LD_EXP 41
5933: PUSH
5934: LD_EXP 44
5938: PUSH
5939: LD_EXP 45
5943: PUSH
5944: LD_EXP 55
5948: PUSH
5949: LD_EXP 56
5953: PUSH
5954: LD_EXP 57
5958: PUSH
5959: LD_EXP 58
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: ST_TO_ADDR
// tmp :=  ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_STRING 
6027: ST_TO_ADDR
// for i = 1 to normalCounter do
6028: LD_ADDR_VAR 0 8
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 3
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6080
// begin if flags [ i ] then
6046: LD_VAR 0 4
6050: PUSH
6051: LD_VAR 0 8
6055: ARRAY
6056: IFFALSE 6078
// tmp := tmp & i & ; ;
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 3
6067: PUSH
6068: LD_VAR 0 8
6072: STR
6073: PUSH
6074: LD_STRING ;
6076: STR
6077: ST_TO_ADDR
// end ;
6078: GO 6043
6080: POP
6081: POP
// for i = 1 to hardcoreCounter do
6082: LD_ADDR_VAR 0 8
6086: PUSH
6087: DOUBLE
6088: LD_INT 1
6090: DEC
6091: ST_TO_ADDR
6092: LD_EXP 4
6096: PUSH
6097: FOR_TO
6098: IFFALSE 6144
// begin if flags [ normalCounter + i ] then
6100: LD_VAR 0 4
6104: PUSH
6105: LD_EXP 3
6109: PUSH
6110: LD_VAR 0 8
6114: PLUS
6115: ARRAY
6116: IFFALSE 6142
// tmp := tmp & ( 100 + i ) & ; ;
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 100
6130: PUSH
6131: LD_VAR 0 8
6135: PLUS
6136: STR
6137: PUSH
6138: LD_STRING ;
6140: STR
6141: ST_TO_ADDR
// end ;
6142: GO 6097
6144: POP
6145: POP
// if tmp then
6146: LD_VAR 0 3
6150: IFFALSE 6162
// active := tmp ;
6152: LD_ADDR_VAR 0 7
6156: PUSH
6157: LD_VAR 0 3
6161: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6162: LD_STRING getStreamItemsFromMission("
6164: PUSH
6165: LD_VAR 0 5
6169: STR
6170: PUSH
6171: LD_STRING ","
6173: STR
6174: PUSH
6175: LD_VAR 0 6
6179: STR
6180: PUSH
6181: LD_STRING ","
6183: STR
6184: PUSH
6185: LD_VAR 0 7
6189: STR
6190: PUSH
6191: LD_STRING ")
6193: STR
6194: PPUSH
6195: CALL_OW 559
// end else
6199: GO 6208
// ToLua ( getStreamItemsFromMission("","","") ) ;
6201: LD_STRING getStreamItemsFromMission("","","")
6203: PPUSH
6204: CALL_OW 559
// end ;
6208: LD_VAR 0 2
6212: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6213: LD_EXP 2
6217: PUSH
6218: LD_EXP 7
6222: AND
6223: IFFALSE 6347
6225: GO 6227
6227: DISABLE
6228: LD_INT 0
6230: PPUSH
6231: PPUSH
// begin enable ;
6232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_OWVAR 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 34
6255: PUSH
6256: LD_INT 7
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 34
6265: PUSH
6266: LD_INT 45
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 34
6275: PUSH
6276: LD_INT 28
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 34
6285: PUSH
6286: LD_INT 47
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not tmp then
6309: LD_VAR 0 2
6313: NOT
6314: IFFALSE 6318
// exit ;
6316: GO 6347
// for i in tmp do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 2
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6345
// begin SetLives ( i , 0 ) ;
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 234
// end ;
6343: GO 6328
6345: POP
6346: POP
// end ;
6347: PPOPN 2
6349: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6350: LD_EXP 2
6354: PUSH
6355: LD_EXP 8
6359: AND
6360: IFFALSE 6444
6362: GO 6364
6364: DISABLE
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
// begin enable ;
6369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_INT 22
6377: PUSH
6378: LD_OWVAR 2
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 69
6405: ST_TO_ADDR
// if not tmp then
6406: LD_VAR 0 2
6410: NOT
6411: IFFALSE 6415
// exit ;
6413: GO 6444
// for i in tmp do
6415: LD_ADDR_VAR 0 1
6419: PUSH
6420: LD_VAR 0 2
6424: PUSH
6425: FOR_IN
6426: IFFALSE 6442
// begin SetLives ( i , 0 ) ;
6428: LD_VAR 0 1
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 234
// end ;
6440: GO 6425
6442: POP
6443: POP
// end ;
6444: PPOPN 2
6446: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6447: LD_EXP 2
6451: PUSH
6452: LD_EXP 5
6456: AND
6457: IFFALSE 6550
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
// begin enable ;
6465: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 22
6473: PUSH
6474: LD_OWVAR 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 25
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 25
6508: PUSH
6509: LD_INT 8
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 69
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6548
// begin SetClass ( i , 1 ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 336
// end ;
6546: GO 6531
6548: POP
6549: POP
// end ;
6550: PPOPN 1
6552: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6553: LD_EXP 2
6557: PUSH
6558: LD_EXP 6
6562: AND
6563: PUSH
6564: LD_OWVAR 65
6568: PUSH
6569: LD_INT 7
6571: LESS
6572: AND
6573: IFFALSE 6587
6575: GO 6577
6577: DISABLE
// begin enable ;
6578: ENABLE
// game_speed := 7 ;
6579: LD_ADDR_OWVAR 65
6583: PUSH
6584: LD_INT 7
6586: ST_TO_ADDR
// end ;
6587: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6588: LD_EXP 2
6592: PUSH
6593: LD_EXP 9
6597: AND
6598: IFFALSE 6800
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
6607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 81
6615: PUSH
6616: LD_OWVAR 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// if not tmp then
6644: LD_VAR 0 3
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6800
// if tmp > 5 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 5
6660: GREATER
6661: IFFALSE 6673
// k := 5 else
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 5
6670: ST_TO_ADDR
6671: GO 6683
// k := tmp ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ST_TO_ADDR
// for i := 1 to k do
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: DOUBLE
6689: LD_INT 1
6691: DEC
6692: ST_TO_ADDR
6693: LD_VAR 0 2
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6798
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: PPUSH
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 4
6719: MOD
6720: PUSH
6721: LD_INT 1
6723: PLUS
6724: PPUSH
6725: CALL_OW 259
6729: PUSH
6730: LD_INT 10
6732: LESS
6733: IFFALSE 6796
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6735: LD_VAR 0 3
6739: PUSH
6740: LD_VAR 0 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 4
6753: MOD
6754: PUSH
6755: LD_INT 1
6757: PLUS
6758: PPUSH
6759: LD_VAR 0 3
6763: PUSH
6764: LD_VAR 0 1
6768: ARRAY
6769: PPUSH
6770: LD_VAR 0 1
6774: PUSH
6775: LD_INT 4
6777: MOD
6778: PUSH
6779: LD_INT 1
6781: PLUS
6782: PPUSH
6783: CALL_OW 259
6787: PUSH
6788: LD_INT 1
6790: PLUS
6791: PPUSH
6792: CALL_OW 237
6796: GO 6698
6798: POP
6799: POP
// end ;
6800: PPOPN 3
6802: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6803: LD_EXP 2
6807: PUSH
6808: LD_EXP 10
6812: AND
6813: IFFALSE 6833
6815: GO 6817
6817: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6818: LD_INT 4
6820: PPUSH
6821: LD_OWVAR 2
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 324
6833: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6834: LD_EXP 2
6838: PUSH
6839: LD_EXP 39
6843: AND
6844: IFFALSE 6864
6846: GO 6848
6848: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6849: LD_INT 19
6851: PPUSH
6852: LD_OWVAR 2
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 324
6864: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6865: LD_EXP 2
6869: PUSH
6870: LD_EXP 11
6874: AND
6875: IFFALSE 6977
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
// begin enable ;
6884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_OWVAR 2
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 11
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: LD_INT 30
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: ST_TO_ADDR
// if not tmp then
6939: LD_VAR 0 2
6943: NOT
6944: IFFALSE 6948
// exit ;
6946: GO 6977
// for i in tmp do
6948: LD_ADDR_VAR 0 1
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: FOR_IN
6959: IFFALSE 6975
// begin SetLives ( i , 0 ) ;
6961: LD_VAR 0 1
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 234
// end ;
6973: GO 6958
6975: POP
6976: POP
// end ;
6977: PPOPN 2
6979: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6980: LD_EXP 2
6984: PUSH
6985: LD_EXP 12
6989: AND
6990: IFFALSE 7010
6992: GO 6994
6994: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6995: LD_INT 32
6997: PPUSH
6998: LD_OWVAR 2
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 324
7010: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7011: LD_EXP 2
7015: PUSH
7016: LD_EXP 13
7020: AND
7021: IFFALSE 7202
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_OWVAR 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 33
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: ST_TO_ADDR
// if not tmp then
7067: LD_VAR 0 2
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7202
// side := 0 ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// for i := 1 to 8 do
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: DOUBLE
7090: LD_INT 1
7092: DEC
7093: ST_TO_ADDR
7094: LD_INT 8
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7146
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7100: LD_OWVAR 2
7104: PUSH
7105: LD_VAR 0 1
7109: NONEQUAL
7110: PUSH
7111: LD_OWVAR 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 81
7125: PUSH
7126: LD_INT 2
7128: EQUAL
7129: AND
7130: IFFALSE 7144
// begin side := i ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// break ;
7142: GO 7146
// end ;
7144: GO 7097
7146: POP
7147: POP
// if not side then
7148: LD_VAR 0 3
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7202
// for i := 1 to tmp do
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 2
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7200
// if Prob ( 60 ) then
7175: LD_INT 60
7177: PPUSH
7178: CALL_OW 13
7182: IFFALSE 7198
// SetSide ( i , side ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 235
7198: GO 7172
7200: POP
7201: POP
// end ;
7202: PPOPN 3
7204: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7205: LD_EXP 2
7209: PUSH
7210: LD_EXP 15
7214: AND
7215: IFFALSE 7334
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7223: LD_ADDR_VAR 0 1
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_OWVAR 2
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: LD_INT 23
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PPUSH
7272: CALL_OW 69
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7332
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 257
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: IN
7308: IFFALSE 7330
// SetClass ( un , rand ( 1 , 4 ) ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 4
7320: PPUSH
7321: CALL_OW 12
7325: PPUSH
7326: CALL_OW 336
7330: GO 7277
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7337: LD_EXP 2
7341: PUSH
7342: LD_EXP 14
7346: AND
7347: IFFALSE 7426
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_OWVAR 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: ST_TO_ADDR
// if not tmp then
7391: LD_VAR 0 1
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 7426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7400: LD_VAR 0 1
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 100
7421: PPUSH
7422: CALL_OW 234
// end ;
7426: PPOPN 1
7428: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7429: LD_EXP 2
7433: PUSH
7434: LD_EXP 16
7438: AND
7439: IFFALSE 7537
7441: GO 7443
7443: DISABLE
7444: LD_INT 0
7446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_OWVAR 2
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if not tmp then
7483: LD_VAR 0 1
7487: NOT
7488: IFFALSE 7492
// exit ;
7490: GO 7537
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7492: LD_VAR 0 1
7496: PUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 12
7509: ARRAY
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_INT 4
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: LD_INT 3000
7524: PPUSH
7525: LD_INT 9000
7527: PPUSH
7528: CALL_OW 12
7532: PPUSH
7533: CALL_OW 492
// end ;
7537: PPOPN 1
7539: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7540: LD_EXP 2
7544: PUSH
7545: LD_EXP 17
7549: AND
7550: IFFALSE 7570
7552: GO 7554
7554: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7555: LD_INT 1
7557: PPUSH
7558: LD_OWVAR 2
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL_OW 324
7570: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7571: LD_EXP 2
7575: PUSH
7576: LD_EXP 18
7580: AND
7581: IFFALSE 7664
7583: GO 7585
7585: DISABLE
7586: LD_INT 0
7588: PPUSH
7589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_OWVAR 2
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 21
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if not tmp then
7626: LD_VAR 0 2
7630: NOT
7631: IFFALSE 7635
// exit ;
7633: GO 7664
// for i in tmp do
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: FOR_IN
7646: IFFALSE 7662
// SetBLevel ( i , 10 ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_INT 10
7655: PPUSH
7656: CALL_OW 241
7660: GO 7645
7662: POP
7663: POP
// end ;
7664: PPOPN 2
7666: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7667: LD_EXP 2
7671: PUSH
7672: LD_EXP 19
7676: AND
7677: IFFALSE 7788
7679: GO 7681
7681: DISABLE
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 3
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7788
// un := tmp [ rand ( 1 , tmp ) ] ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: PPUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 12
7754: ARRAY
7755: ST_TO_ADDR
// if Crawls ( un ) then
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 318
7765: IFFALSE 7776
// ComWalk ( un ) ;
7767: LD_VAR 0 2
7771: PPUSH
7772: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 5
7783: PPUSH
7784: CALL_OW 336
// end ;
7788: PPOPN 3
7790: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7791: LD_EXP 2
7795: PUSH
7796: LD_EXP 20
7800: AND
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 4
7809: LESS
7810: AND
7811: IFFALSE 7830
7813: GO 7815
7815: DISABLE
// begin Difficulty := Difficulty + 1 ;
7816: LD_ADDR_OWVAR 67
7820: PUSH
7821: LD_OWVAR 67
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ST_TO_ADDR
// end ;
7830: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7831: LD_EXP 2
7835: PUSH
7836: LD_EXP 21
7840: AND
7841: IFFALSE 7944
7843: GO 7845
7845: DISABLE
7846: LD_INT 0
7848: PPUSH
// begin for i := 1 to 5 do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_INT 5
7861: PUSH
7862: FOR_TO
7863: IFFALSE 7942
// begin uc_nation := nation_nature ;
7865: LD_ADDR_OWVAR 21
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// uc_side := 0 ;
7873: LD_ADDR_OWVAR 20
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7881: LD_ADDR_OWVAR 29
7885: PUSH
7886: LD_INT 12
7888: PUSH
7889: LD_INT 12
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// hc_agressivity := 20 ;
7896: LD_ADDR_OWVAR 35
7900: PUSH
7901: LD_INT 20
7903: ST_TO_ADDR
// hc_class := class_tiger ;
7904: LD_ADDR_OWVAR 28
7908: PUSH
7909: LD_INT 14
7911: ST_TO_ADDR
// hc_gallery :=  ;
7912: LD_ADDR_OWVAR 33
7916: PUSH
7917: LD_STRING 
7919: ST_TO_ADDR
// hc_name :=  ;
7920: LD_ADDR_OWVAR 26
7924: PUSH
7925: LD_STRING 
7927: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7928: CALL_OW 44
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 51
// end ;
7940: GO 7862
7942: POP
7943: POP
// end ;
7944: PPOPN 1
7946: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7947: LD_EXP 2
7951: PUSH
7952: LD_EXP 22
7956: AND
7957: IFFALSE 7966
7959: GO 7961
7961: DISABLE
// StreamSibBomb ;
7962: CALL 7967 0 0
7966: END
// export function StreamSibBomb ; var i , x , y ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// result := false ;
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// for i := 1 to 16 do
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: DOUBLE
7987: LD_INT 1
7989: DEC
7990: ST_TO_ADDR
7991: LD_INT 16
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8194
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 10
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 40
8013: PUSH
8014: LD_INT 50
8016: PUSH
8017: LD_INT 60
8019: PUSH
8020: LD_INT 70
8022: PUSH
8023: LD_INT 80
8025: PUSH
8026: LD_INT 90
8028: PUSH
8029: LD_INT 100
8031: PUSH
8032: LD_INT 110
8034: PUSH
8035: LD_INT 120
8037: PUSH
8038: LD_INT 130
8040: PUSH
8041: LD_INT 140
8043: PUSH
8044: LD_INT 150
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 1
8066: PPUSH
8067: LD_INT 15
8069: PPUSH
8070: CALL_OW 12
8074: ARRAY
8075: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: LD_INT 20
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 40
8092: PUSH
8093: LD_INT 50
8095: PUSH
8096: LD_INT 60
8098: PUSH
8099: LD_INT 70
8101: PUSH
8102: LD_INT 80
8104: PUSH
8105: LD_INT 90
8107: PUSH
8108: LD_INT 100
8110: PUSH
8111: LD_INT 110
8113: PUSH
8114: LD_INT 120
8116: PUSH
8117: LD_INT 130
8119: PUSH
8120: LD_INT 140
8122: PUSH
8123: LD_INT 150
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 1
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 12
8153: ARRAY
8154: ST_TO_ADDR
// if ValidHex ( x , y ) then
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_VAR 0 4
8164: PPUSH
8165: CALL_OW 488
8169: IFFALSE 8192
// begin result := [ x , y ] ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 3
8180: PUSH
8181: LD_VAR 0 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// break ;
8190: GO 8194
// end ; end ;
8192: GO 7994
8194: POP
8195: POP
// if result then
8196: LD_VAR 0 1
8200: IFFALSE 8260
// begin ToLua ( playSibBomb() ) ;
8202: LD_STRING playSibBomb()
8204: PPUSH
8205: CALL_OW 559
// wait ( 0 0$14 ) ;
8209: LD_INT 490
8211: PPUSH
8212: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8216: LD_VAR 0 1
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_VAR 0 1
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PPUSH
8234: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8238: LD_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_INT 2
8254: ARRAY
8255: PPUSH
8256: CALL_OW 429
// end ; end ;
8260: LD_VAR 0 1
8264: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8265: LD_EXP 2
8269: PUSH
8270: LD_EXP 24
8274: AND
8275: IFFALSE 8287
8277: GO 8279
8279: DISABLE
// YouLost (  ) ;
8280: LD_STRING 
8282: PPUSH
8283: CALL_OW 104
8287: END
// every 0 0$1 trigger StreamModeActive and sFog do
8288: LD_EXP 2
8292: PUSH
8293: LD_EXP 23
8297: AND
8298: IFFALSE 8312
8300: GO 8302
8302: DISABLE
// FogOff ( your_side ) ;
8303: LD_OWVAR 2
8307: PPUSH
8308: CALL_OW 344
8312: END
// every 0 0$1 trigger StreamModeActive and sSun do
8313: LD_EXP 2
8317: PUSH
8318: LD_EXP 25
8322: AND
8323: IFFALSE 8351
8325: GO 8327
8327: DISABLE
// begin solar_recharge_percent := 0 ;
8328: LD_ADDR_OWVAR 79
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8336: LD_INT 10500
8338: PPUSH
8339: CALL_OW 67
// solar_recharge_percent := 100 ;
8343: LD_ADDR_OWVAR 79
8347: PUSH
8348: LD_INT 100
8350: ST_TO_ADDR
// end ;
8351: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8352: LD_EXP 2
8356: PUSH
8357: LD_EXP 26
8361: AND
8362: IFFALSE 8601
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
// begin tmp := [ ] ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: EMPTY
8378: ST_TO_ADDR
// for i := 1 to 6 do
8379: LD_ADDR_VAR 0 1
8383: PUSH
8384: DOUBLE
8385: LD_INT 1
8387: DEC
8388: ST_TO_ADDR
8389: LD_INT 6
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8498
// begin uc_nation := nation_nature ;
8395: LD_ADDR_OWVAR 21
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// uc_side := 0 ;
8403: LD_ADDR_OWVAR 20
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8411: LD_ADDR_OWVAR 29
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 12
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// hc_agressivity := 20 ;
8426: LD_ADDR_OWVAR 35
8430: PUSH
8431: LD_INT 20
8433: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 17
8441: ST_TO_ADDR
// hc_gallery :=  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name :=  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// un := CreateHuman ;
8458: LD_ADDR_VAR 0 2
8462: PUSH
8463: CALL_OW 44
8467: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: CALL_OW 51
// tmp := tmp ^ un ;
8480: LD_ADDR_VAR 0 3
8484: PUSH
8485: LD_VAR 0 3
8489: PUSH
8490: LD_VAR 0 2
8494: ADD
8495: ST_TO_ADDR
// end ;
8496: GO 8392
8498: POP
8499: POP
// repeat wait ( 0 0$1 ) ;
8500: LD_INT 35
8502: PPUSH
8503: CALL_OW 67
// for un in tmp do
8507: LD_ADDR_VAR 0 2
8511: PUSH
8512: LD_VAR 0 3
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8592
// begin if IsDead ( un ) then
8520: LD_VAR 0 2
8524: PPUSH
8525: CALL_OW 301
8529: IFFALSE 8549
// begin tmp := tmp diff un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 2
8545: DIFF
8546: ST_TO_ADDR
// continue ;
8547: GO 8517
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8549: LD_VAR 0 2
8553: PPUSH
8554: LD_INT 3
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PPUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 74
8585: PPUSH
8586: CALL_OW 115
// end ;
8590: GO 8517
8592: POP
8593: POP
// until not tmp ;
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8500
// end ;
8601: PPOPN 3
8603: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8604: LD_EXP 2
8608: PUSH
8609: LD_EXP 27
8613: AND
8614: IFFALSE 8668
8616: GO 8618
8618: DISABLE
// begin ToLua ( displayTroll(); ) ;
8619: LD_STRING displayTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 3 3$00 ) ;
8626: LD_INT 6300
8628: PPUSH
8629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8633: LD_STRING hideTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8647: LD_STRING displayTroll();
8649: PPUSH
8650: CALL_OW 559
// wait ( 1 1$00 ) ;
8654: LD_INT 2100
8656: PPUSH
8657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8661: LD_STRING hideTroll();
8663: PPUSH
8664: CALL_OW 559
// end ;
8668: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8669: LD_EXP 2
8673: PUSH
8674: LD_EXP 28
8678: AND
8679: IFFALSE 8742
8681: GO 8683
8683: DISABLE
8684: LD_INT 0
8686: PPUSH
// begin p := 0 ;
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// repeat game_speed := 1 ;
8695: LD_ADDR_OWVAR 65
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// p := p + 1 ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: PLUS
8723: ST_TO_ADDR
// until p >= 60 ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 60
8731: GREATEREQUAL
8732: IFFALSE 8695
// game_speed := 4 ;
8734: LD_ADDR_OWVAR 65
8738: PUSH
8739: LD_INT 4
8741: ST_TO_ADDR
// end ;
8742: PPOPN 1
8744: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8745: LD_EXP 2
8749: PUSH
8750: LD_EXP 29
8754: AND
8755: IFFALSE 8901
8757: GO 8759
8759: DISABLE
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_OWVAR 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 0
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 30
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// if not depot then
8818: LD_VAR 0 1
8822: NOT
8823: IFFALSE 8827
// exit ;
8825: GO 8901
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 12
8849: ARRAY
8850: PPUSH
8851: CALL_OW 274
8855: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_INT 2
8878: PPUSH
8879: LD_INT 0
8881: PPUSH
8882: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_INT 3
8893: PPUSH
8894: LD_INT 0
8896: PPUSH
8897: CALL_OW 277
// end ;
8901: PPOPN 2
8903: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8904: LD_EXP 2
8908: PUSH
8909: LD_EXP 30
8913: AND
8914: IFFALSE 9011
8916: GO 8918
8918: DISABLE
8919: LD_INT 0
8921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_OWVAR 2
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: ST_TO_ADDR
// if not tmp then
8976: LD_VAR 0 1
8980: NOT
8981: IFFALSE 8985
// exit ;
8983: GO 9011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 1
8992: PPUSH
8993: LD_VAR 0 1
8997: PPUSH
8998: CALL_OW 12
9002: ARRAY
9003: PPUSH
9004: LD_INT 200
9006: PPUSH
9007: CALL_OW 234
// end ;
9011: PPOPN 1
9013: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9014: LD_EXP 2
9018: PUSH
9019: LD_EXP 31
9023: AND
9024: IFFALSE 9103
9026: GO 9028
9028: DISABLE
9029: LD_INT 0
9031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_OWVAR 2
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 2
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: ST_TO_ADDR
// if not tmp then
9068: LD_VAR 0 1
9072: NOT
9073: IFFALSE 9077
// exit ;
9075: GO 9103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9077: LD_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 12
9094: ARRAY
9095: PPUSH
9096: LD_INT 60
9098: PPUSH
9099: CALL_OW 234
// end ;
9103: PPOPN 1
9105: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9106: LD_EXP 2
9110: PUSH
9111: LD_EXP 32
9115: AND
9116: IFFALSE 9215
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin enable ;
9125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9126: LD_ADDR_VAR 0 1
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_OWVAR 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 61
9145: PUSH
9146: EMPTY
9147: LIST
9148: PUSH
9149: LD_INT 33
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if not tmp then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9215
// for i in tmp do
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9213
// if IsControledBy ( i ) then
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 312
9200: IFFALSE 9211
// ComUnlink ( i ) ;
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 136
9211: GO 9188
9213: POP
9214: POP
// end ;
9215: PPOPN 2
9217: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9218: LD_EXP 2
9222: PUSH
9223: LD_EXP 33
9227: AND
9228: IFFALSE 9368
9230: GO 9232
9232: DISABLE
9233: LD_INT 0
9235: PPUSH
9236: PPUSH
// begin ToLua ( displayPowell(); ) ;
9237: LD_STRING displayPowell();
9239: PPUSH
9240: CALL_OW 559
// uc_side := 0 ;
9244: LD_ADDR_OWVAR 20
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// uc_nation := 2 ;
9252: LD_ADDR_OWVAR 21
9256: PUSH
9257: LD_INT 2
9259: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9260: LD_ADDR_OWVAR 37
9264: PUSH
9265: LD_INT 14
9267: ST_TO_ADDR
// vc_engine := engine_siberite ;
9268: LD_ADDR_OWVAR 39
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// vc_control := control_apeman ;
9276: LD_ADDR_OWVAR 38
9280: PUSH
9281: LD_INT 5
9283: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9284: LD_ADDR_OWVAR 40
9288: PUSH
9289: LD_INT 29
9291: ST_TO_ADDR
// un := CreateVehicle ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: CALL_OW 45
9301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9314: LD_INT 35
9316: PPUSH
9317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 22
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: PPUSH
9343: LD_VAR 0 2
9347: PPUSH
9348: CALL_OW 74
9352: PPUSH
9353: CALL_OW 115
// until IsDead ( un ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: CALL_OW 301
9366: IFFALSE 9314
// end ;
9368: PPOPN 2
9370: END
// every 0 0$1 trigger StreamModeActive and sStu do
9371: LD_EXP 2
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: PUSH
9403: LD_EXP 34
9407: AND
9408: IFFALSE 9549
9410: GO 9412
9412: DISABLE
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_OWVAR 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: ST_TO_ADDR
// if not tmp then
9453: LD_VAR 0 2
9457: NOT
9458: IFFALSE 9462
// exit ;
9460: GO 9549
// un := tmp [ rand ( 1 , tmp ) ] ;
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: CALL_OW 12
9484: ARRAY
9485: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9498: LD_VAR 0 1
9502: PPUSH
9503: LD_OWVAR 3
9507: PUSH
9508: LD_VAR 0 1
9512: DIFF
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 74
9523: PPUSH
9524: CALL_OW 115
// wait ( 0 0$20 ) ;
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 67
// SetSide ( un , your_side ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_OWVAR 2
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 2
9551: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9552: LD_EXP 2
9556: PUSH
9557: LD_EXP 35
9561: AND
9562: IFFALSE 9668
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9570: LD_ADDR_VAR 0 1
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: ST_TO_ADDR
// if not depot then
9624: LD_VAR 0 1
9628: NOT
9629: IFFALSE 9633
// exit ;
9631: GO 9668
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: CALL_OW 250
9646: PPUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 495
// end ;
9668: PPOPN 1
9670: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9671: LD_EXP 2
9675: PUSH
9676: LD_EXP 36
9680: AND
9681: IFFALSE 9892
9683: GO 9685
9685: DISABLE
9686: LD_INT 0
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
9692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9693: LD_ADDR_VAR 0 5
9697: PUSH
9698: LD_INT 22
9700: PUSH
9701: LD_OWVAR 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 21
9712: PUSH
9713: LD_INT 1
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 69
9728: ST_TO_ADDR
// if not tmp then
9729: LD_VAR 0 5
9733: NOT
9734: IFFALSE 9738
// exit ;
9736: GO 9892
// for i in tmp do
9738: LD_ADDR_VAR 0 1
9742: PUSH
9743: LD_VAR 0 5
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9890
// begin d := rand ( 0 , 5 ) ;
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_INT 0
9758: PPUSH
9759: LD_INT 5
9761: PPUSH
9762: CALL_OW 12
9766: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 250
9781: PPUSH
9782: LD_VAR 0 4
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 12
9792: PPUSH
9793: CALL_OW 12
9797: PPUSH
9798: CALL_OW 272
9802: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 4
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: LD_INT 12
9828: PPUSH
9829: CALL_OW 12
9833: PPUSH
9834: CALL_OW 273
9838: ST_TO_ADDR
// if ValidHex ( x , y ) then
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: CALL_OW 488
9853: IFFALSE 9888
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_VAR 0 2
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 6
9875: PPUSH
9876: CALL_OW 12
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 483
// end ;
9888: GO 9748
9890: POP
9891: POP
// end ;
9892: PPOPN 5
9894: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9895: LD_EXP 2
9899: PUSH
9900: LD_EXP 37
9904: AND
9905: IFFALSE 9999
9907: GO 9909
9909: DISABLE
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_OWVAR 2
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 2
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 9999
// for i in tmp do
9970: LD_ADDR_VAR 0 1
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: FOR_IN
9981: IFFALSE 9997
// SetFuel ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 240
9995: GO 9980
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10002: LD_EXP 2
10006: PUSH
10007: LD_EXP 38
10011: AND
10012: IFFALSE 10078
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10020: LD_ADDR_VAR 0 1
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 29
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if not tmp then
10056: LD_VAR 0 1
10060: NOT
10061: IFFALSE 10065
// exit ;
10063: GO 10078
// DestroyUnit ( tmp [ 1 ] ) ;
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: ARRAY
10073: PPUSH
10074: CALL_OW 65
// end ;
10078: PPOPN 1
10080: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10081: LD_EXP 2
10085: PUSH
10086: LD_EXP 40
10090: AND
10091: IFFALSE 10220
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin uc_side := 0 ;
10099: LD_ADDR_OWVAR 20
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// uc_nation := nation_arabian ;
10107: LD_ADDR_OWVAR 21
10111: PUSH
10112: LD_INT 2
10114: ST_TO_ADDR
// hc_gallery :=  ;
10115: LD_ADDR_OWVAR 33
10119: PUSH
10120: LD_STRING 
10122: ST_TO_ADDR
// hc_name :=  ;
10123: LD_ADDR_OWVAR 26
10127: PUSH
10128: LD_STRING 
10130: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_INT 11
10136: PPUSH
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 380
// un := CreateHuman ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10166: LD_INT 35
10168: PPUSH
10169: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 22
10180: PUSH
10181: LD_OWVAR 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 74
10204: PPUSH
10205: CALL_OW 115
// until IsDead ( un ) ;
10209: LD_VAR 0 1
10213: PPUSH
10214: CALL_OW 301
10218: IFFALSE 10166
// end ;
10220: PPOPN 1
10222: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10223: LD_EXP 2
10227: PUSH
10228: LD_EXP 42
10232: AND
10233: IFFALSE 10245
10235: GO 10237
10237: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10238: LD_STRING earthquake(getX(game), 0, 32)
10240: PPUSH
10241: CALL_OW 559
10245: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10246: LD_EXP 2
10250: PUSH
10251: LD_EXP 43
10255: AND
10256: IFFALSE 10347
10258: GO 10260
10260: DISABLE
10261: LD_INT 0
10263: PPUSH
// begin enable ;
10264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_OWVAR 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 33
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: ST_TO_ADDR
// if not tmp then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10321: LD_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: PPUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 12
10338: ARRAY
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: PPOPN 1
10349: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10350: LD_EXP 2
10354: PUSH
10355: LD_EXP 44
10359: AND
10360: IFFALSE 10501
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10370: LD_ADDR_VAR 0 3
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_OWVAR 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: ST_TO_ADDR
// if not tmp then
10406: LD_VAR 0 3
10410: NOT
10411: IFFALSE 10415
// exit ;
10413: GO 10501
// un := tmp [ rand ( 1 , tmp ) ] ;
10415: LD_ADDR_VAR 0 2
10419: PUSH
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: CALL_OW 12
10437: ARRAY
10438: ST_TO_ADDR
// if Crawls ( un ) then
10439: LD_VAR 0 2
10443: PPUSH
10444: CALL_OW 318
10448: IFFALSE 10459
// ComWalk ( un ) ;
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: LD_INT 9
10466: PPUSH
10467: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10471: LD_INT 28
10473: PPUSH
10474: LD_OWVAR 2
10478: PPUSH
10479: LD_INT 2
10481: PPUSH
10482: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10486: LD_INT 29
10488: PPUSH
10489: LD_OWVAR 2
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 322
// end ;
10501: PPOPN 3
10503: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10504: LD_EXP 2
10508: PUSH
10509: LD_EXP 45
10513: AND
10514: IFFALSE 10625
10516: GO 10518
10518: DISABLE
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: ST_TO_ADDR
// if not tmp then
10560: LD_VAR 0 3
10564: NOT
10565: IFFALSE 10569
// exit ;
10567: GO 10625
// un := tmp [ rand ( 1 , tmp ) ] ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: CALL_OW 12
10591: ARRAY
10592: ST_TO_ADDR
// if Crawls ( un ) then
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 318
10602: IFFALSE 10613
// ComWalk ( un ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10613: LD_VAR 0 2
10617: PPUSH
10618: LD_INT 8
10620: PPUSH
10621: CALL_OW 336
// end ;
10625: PPOPN 3
10627: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10628: LD_EXP 2
10632: PUSH
10633: LD_EXP 46
10637: AND
10638: IFFALSE 10782
10640: GO 10642
10642: DISABLE
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_OWVAR 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 34
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 34
10689: PUSH
10690: LD_INT 51
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 32
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 2
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10782
// for i in tmp do
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_VAR 0 2
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10780
// if GetCargo ( i , mat_artifact ) = 0 then
10745: LD_VAR 0 1
10749: PPUSH
10750: LD_INT 4
10752: PPUSH
10753: CALL_OW 289
10757: PUSH
10758: LD_INT 0
10760: EQUAL
10761: IFFALSE 10778
// SetCargo ( i , mat_siberit , 100 ) ;
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 3
10770: PPUSH
10771: LD_INT 100
10773: PPUSH
10774: CALL_OW 290
10778: GO 10742
10780: POP
10781: POP
// end ;
10782: PPOPN 2
10784: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10785: LD_EXP 2
10789: PUSH
10790: LD_EXP 47
10794: AND
10795: IFFALSE 10978
10797: GO 10799
10799: DISABLE
10800: LD_INT 0
10802: PPUSH
10803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: ST_TO_ADDR
// if not tmp then
10826: LD_VAR 0 2
10830: NOT
10831: IFFALSE 10835
// exit ;
10833: GO 10978
// for i := 1 to 2 do
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_INT 2
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10976
// begin uc_side := your_side ;
10851: LD_ADDR_OWVAR 20
10855: PUSH
10856: LD_OWVAR 2
10860: ST_TO_ADDR
// uc_nation := nation_american ;
10861: LD_ADDR_OWVAR 21
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// vc_chassis := us_morphling ;
10869: LD_ADDR_OWVAR 37
10873: PUSH
10874: LD_INT 5
10876: ST_TO_ADDR
// vc_engine := engine_siberite ;
10877: LD_ADDR_OWVAR 39
10881: PUSH
10882: LD_INT 3
10884: ST_TO_ADDR
// vc_control := control_computer ;
10885: LD_ADDR_OWVAR 38
10889: PUSH
10890: LD_INT 3
10892: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10893: LD_ADDR_OWVAR 40
10897: PUSH
10898: LD_INT 10
10900: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 310
10914: NOT
10915: IFFALSE 10962
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10917: CALL_OW 45
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 250
10935: PPUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: CALL_OW 251
10949: PPUSH
10950: LD_INT 12
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 50
10960: GO 10974
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10962: CALL_OW 45
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 51
// end ;
10974: GO 10848
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10981: LD_EXP 2
10985: PUSH
10986: LD_EXP 48
10990: AND
10991: IFFALSE 11213
10993: GO 10995
10995: DISABLE
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11004: LD_ADDR_VAR 0 6
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_OWVAR 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 23
11036: PUSH
11037: LD_INT 0
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 6
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11213
// s1 := rand ( 1 , 4 ) ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 4
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_VAR 0 6
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 2
11101: PPUSH
11102: CALL_OW 259
11106: ST_TO_ADDR
// if s1 = 1 then
11107: LD_VAR 0 2
11111: PUSH
11112: LD_INT 1
11114: EQUAL
11115: IFFALSE 11135
// s2 := rand ( 2 , 4 ) else
11117: LD_ADDR_VAR 0 3
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 12
11132: ST_TO_ADDR
11133: GO 11143
// s2 := 1 ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11143: LD_ADDR_VAR 0 5
11147: PUSH
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: CALL_OW 259
11166: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11167: LD_VAR 0 6
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_VAR 0 5
11185: PPUSH
11186: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11190: LD_VAR 0 6
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_VAR 0 4
11208: PPUSH
11209: CALL_OW 237
// end ;
11213: PPOPN 6
11215: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11216: LD_EXP 2
11220: PUSH
11221: LD_EXP 49
11225: AND
11226: IFFALSE 11305
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 234
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11308: LD_EXP 2
11312: PUSH
11313: LD_EXP 50
11317: AND
11318: IFFALSE 11430
11320: GO 11322
11322: DISABLE
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_OWVAR 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 30
11369: PUSH
11370: LD_INT 28
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// if not tmp then
11392: LD_VAR 0 2
11396: NOT
11397: IFFALSE 11401
// exit ;
11399: GO 11430
// for i in tmp do
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_VAR 0 2
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11428
// SetLives ( i , 1 ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 234
11426: GO 11411
11428: POP
11429: POP
// end ;
11430: PPOPN 2
11432: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11433: LD_EXP 2
11437: PUSH
11438: LD_EXP 51
11442: AND
11443: IFFALSE 11730
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin i := rand ( 1 , 7 ) ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 7
11463: PPUSH
11464: CALL_OW 12
11468: ST_TO_ADDR
// case i of 1 :
11469: LD_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11492
11482: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11483: LD_STRING earthquake(getX(game), 0, 32)
11485: PPUSH
11486: CALL_OW 559
11490: GO 11730
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11514
11500: POP
// begin ToLua ( displayStucuk(); ) ;
11501: LD_STRING displayStucuk();
11503: PPUSH
11504: CALL_OW 559
// ResetFog ;
11508: CALL_OW 335
// end ; 3 :
11512: GO 11730
11514: LD_INT 3
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11626
11522: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_OWVAR 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 2
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: CALL_OW 12
11590: ARRAY
11591: ST_TO_ADDR
// if Crawls ( un ) then
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 318
11601: IFFALSE 11612
// ComWalk ( un ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 8
11619: PPUSH
11620: CALL_OW 336
// end ; 4 :
11624: GO 11730
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11708
11634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 2
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11730
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 65
// end ; 5 .. 7 :
11706: GO 11730
11708: LD_INT 5
11710: DOUBLE
11711: GREATEREQUAL
11712: IFFALSE 11720
11714: LD_INT 7
11716: DOUBLE
11717: LESSEQUAL
11718: IFTRUE 11722
11720: GO 11729
11722: POP
// StreamSibBomb ; end ;
11723: CALL 7967 0 0
11727: GO 11730
11729: POP
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11733: LD_EXP 2
11737: PUSH
11738: LD_EXP 52
11742: AND
11743: IFFALSE 11899
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11753: LD_ADDR_VAR 0 2
11757: PUSH
11758: LD_INT 81
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 69
11806: ST_TO_ADDR
// if not tmp then
11807: LD_VAR 0 2
11811: NOT
11812: IFFALSE 11816
// exit ;
11814: GO 11899
// p := 0 ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// p := p + 1 ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 1
11843: PLUS
11844: ST_TO_ADDR
// for i in tmp do
11845: LD_ADDR_VAR 0 1
11849: PUSH
11850: LD_VAR 0 2
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11887
// if GetLives ( i ) < 1000 then
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 256
11867: PUSH
11868: LD_INT 1000
11870: LESS
11871: IFFALSE 11885
// SetLives ( i , 1000 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 1000
11880: PPUSH
11881: CALL_OW 234
11885: GO 11855
11887: POP
11888: POP
// until p > 20 ;
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 20
11896: GREATER
11897: IFFALSE 11824
// end ;
11899: PPOPN 3
11901: END
// every 0 0$1 trigger StreamModeActive and sTime do
11902: LD_EXP 2
11906: PUSH
11907: LD_EXP 53
11911: AND
11912: IFFALSE 11947
11914: GO 11916
11916: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11917: LD_INT 28
11919: PPUSH
11920: LD_OWVAR 2
11924: PPUSH
11925: LD_INT 2
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11932: LD_INT 30
11934: PPUSH
11935: LD_OWVAR 2
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: CALL_OW 322
// end ;
11947: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11948: LD_EXP 2
11952: PUSH
11953: LD_EXP 54
11957: AND
11958: IFFALSE 12079
11960: GO 11962
11962: DISABLE
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_OWVAR 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 23
11999: PUSH
12000: LD_INT 0
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: ST_TO_ADDR
// if not tmp then
12021: LD_VAR 0 2
12025: NOT
12026: IFFALSE 12030
// exit ;
12028: GO 12079
// for i in tmp do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: LD_VAR 0 2
12039: PUSH
12040: FOR_IN
12041: IFFALSE 12077
// begin if Crawls ( i ) then
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 318
12052: IFFALSE 12063
// ComWalk ( i ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 138
// SetClass ( i , 2 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 336
// end ;
12075: GO 12040
12077: POP
12078: POP
// end ;
12079: PPOPN 2
12081: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12082: LD_EXP 2
12086: PUSH
12087: LD_EXP 55
12091: AND
12092: IFFALSE 12380
12094: GO 12096
12096: DISABLE
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12102: LD_OWVAR 2
12106: PPUSH
12107: LD_INT 9
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12120: LD_INT 9
12122: PPUSH
12123: LD_OWVAR 2
12127: PPUSH
12128: CALL_OW 343
// uc_side := 9 ;
12132: LD_ADDR_OWVAR 20
12136: PUSH
12137: LD_INT 9
12139: ST_TO_ADDR
// uc_nation := 2 ;
12140: LD_ADDR_OWVAR 21
12144: PUSH
12145: LD_INT 2
12147: ST_TO_ADDR
// hc_name := Dark Warrior ;
12148: LD_ADDR_OWVAR 26
12152: PUSH
12153: LD_STRING Dark Warrior
12155: ST_TO_ADDR
// hc_gallery :=  ;
12156: LD_ADDR_OWVAR 33
12160: PUSH
12161: LD_STRING 
12163: ST_TO_ADDR
// hc_noskilllimit := true ;
12164: LD_ADDR_OWVAR 76
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12172: LD_ADDR_OWVAR 31
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: ST_TO_ADDR
// un := CreateHuman ;
12195: LD_ADDR_VAR 0 3
12199: PUSH
12200: CALL_OW 44
12204: ST_TO_ADDR
// hc_noskilllimit := false ;
12205: LD_ADDR_OWVAR 76
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 51
// ToLua ( playRanger() ) ;
12225: LD_STRING playRanger()
12227: PPUSH
12228: CALL_OW 559
// p := 0 ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12240: LD_INT 35
12242: PPUSH
12243: CALL_OW 67
// p := p + 1 ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: LD_VAR 0 2
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 256
12270: PUSH
12271: LD_INT 1000
12273: LESS
12274: IFFALSE 12288
// SetLives ( un , 1000 ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1000
12283: PPUSH
12284: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 81
12295: PUSH
12296: LD_OWVAR 2
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 91
12307: PUSH
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: CALL_OW 74
12339: PPUSH
12340: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12344: LD_VAR 0 2
12348: PUSH
12349: LD_INT 80
12351: GREATER
12352: PUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: CALL_OW 301
12362: OR
12363: IFFALSE 12240
// if un then
12365: LD_VAR 0 3
12369: IFFALSE 12380
// RemoveUnit ( un ) ;
12371: LD_VAR 0 3
12375: PPUSH
12376: CALL_OW 64
// end ;
12380: PPOPN 3
12382: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12383: LD_EXP 56
12387: IFFALSE 12503
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 81
12404: PUSH
12405: LD_OWVAR 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 21
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12433: LD_STRING playComputer()
12435: PPUSH
12436: CALL_OW 559
// if not tmp then
12440: LD_VAR 0 2
12444: NOT
12445: IFFALSE 12449
// exit ;
12447: GO 12503
// for i in tmp do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12501
// for j := 1 to 4 do
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: DOUBLE
12468: LD_INT 1
12470: DEC
12471: ST_TO_ADDR
12472: LD_INT 4
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12497
// SetSkill ( i , j , 10 ) ;
12478: LD_VAR 0 1
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 10
12490: PPUSH
12491: CALL_OW 237
12495: GO 12475
12497: POP
12498: POP
12499: GO 12459
12501: POP
12502: POP
// end ;
12503: PPOPN 3
12505: END
// every 0 0$1 trigger s30 do var i , tmp ;
12506: LD_EXP 57
12510: IFFALSE 12579
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
12518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_OWVAR 2
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 2
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12579
// for i in tmp do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 2
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12577
// SetLives ( i , 300 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 300
12570: PPUSH
12571: CALL_OW 234
12575: GO 12560
12577: POP
12578: POP
// end ;
12579: PPOPN 2
12581: END
// every 0 0$1 trigger s60 do var i , tmp ;
12582: LD_EXP 58
12586: IFFALSE 12655
12588: GO 12590
12590: DISABLE
12591: LD_INT 0
12593: PPUSH
12594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_OWVAR 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 2
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12655
// for i in tmp do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: FOR_IN
12637: IFFALSE 12653
// SetLives ( i , 600 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 600
12646: PPUSH
12647: CALL_OW 234
12651: GO 12636
12653: POP
12654: POP
// end ;
12655: PPOPN 2
12657: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12658: LD_INT 0
12660: PPUSH
// case cmd of 301 :
12661: LD_VAR 0 1
12665: PUSH
12666: LD_INT 301
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12706
12674: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12675: LD_VAR 0 6
12679: PPUSH
12680: LD_VAR 0 7
12684: PPUSH
12685: LD_VAR 0 8
12689: PPUSH
12690: LD_VAR 0 4
12694: PPUSH
12695: LD_VAR 0 5
12699: PPUSH
12700: CALL 13915 0 5
12704: GO 12827
12706: LD_INT 302
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12751
12714: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12715: LD_VAR 0 6
12719: PPUSH
12720: LD_VAR 0 7
12724: PPUSH
12725: LD_VAR 0 8
12729: PPUSH
12730: LD_VAR 0 9
12734: PPUSH
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL 14006 0 6
12749: GO 12827
12751: LD_INT 303
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12796
12759: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12760: LD_VAR 0 6
12764: PPUSH
12765: LD_VAR 0 7
12769: PPUSH
12770: LD_VAR 0 8
12774: PPUSH
12775: LD_VAR 0 9
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: LD_VAR 0 5
12789: PPUSH
12790: CALL 12832 0 6
12794: GO 12827
12796: LD_INT 304
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12826
12804: POP
// hHackTeleport ( unit , x , y ) ; end ;
12805: LD_VAR 0 2
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: LD_VAR 0 5
12819: PPUSH
12820: CALL 14599 0 3
12824: GO 12827
12826: POP
// end ;
12827: LD_VAR 0 12
12831: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: LESS
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 3
12852: GREATER
12853: OR
12854: PUSH
12855: LD_VAR 0 5
12859: PPUSH
12860: LD_VAR 0 6
12864: PPUSH
12865: CALL_OW 428
12869: OR
12870: IFFALSE 12874
// exit ;
12872: GO 13602
// uc_side := your_side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_OWVAR 2
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 1
12893: ST_TO_ADDR
// bc_level = 1 ;
12894: LD_ADDR_OWVAR 43
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// case btype of 1 :
12902: LD_VAR 0 2
12906: PUSH
12907: LD_INT 1
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_depot ; 2 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
12924: GO 13546
12926: LD_INT 2
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_warehouse ; 3 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
12943: GO 13546
12945: LD_INT 3
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12964
12953: POP
// bc_type := b_lab ; 4 .. 9 :
12954: LD_ADDR_OWVAR 42
12958: PUSH
12959: LD_INT 6
12961: ST_TO_ADDR
12962: GO 13546
12964: LD_INT 4
12966: DOUBLE
12967: GREATEREQUAL
12968: IFFALSE 12976
12970: LD_INT 9
12972: DOUBLE
12973: LESSEQUAL
12974: IFTRUE 12978
12976: GO 13038
12978: POP
// begin bc_type := b_lab_half ;
12979: LD_ADDR_OWVAR 42
12983: PUSH
12984: LD_INT 7
12986: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12987: LD_ADDR_OWVAR 44
12991: PUSH
12992: LD_INT 10
12994: PUSH
12995: LD_INT 11
12997: PUSH
12998: LD_INT 12
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: LD_INT 13
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 3
13025: MINUS
13026: ARRAY
13027: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13028: LD_ADDR_OWVAR 45
13032: PUSH
13033: LD_INT 9
13035: ST_TO_ADDR
// end ; 10 .. 13 :
13036: GO 13546
13038: LD_INT 10
13040: DOUBLE
13041: GREATEREQUAL
13042: IFFALSE 13050
13044: LD_INT 13
13046: DOUBLE
13047: LESSEQUAL
13048: IFTRUE 13052
13050: GO 13129
13052: POP
// begin bc_type := b_lab_full ;
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 8
13060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13061: LD_ADDR_OWVAR 44
13065: PUSH
13066: LD_INT 10
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 14
13074: PUSH
13075: LD_INT 13
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 9
13091: MINUS
13092: ARRAY
13093: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13094: LD_ADDR_OWVAR 45
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 15
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 15
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: LD_INT 9
13124: MINUS
13125: ARRAY
13126: ST_TO_ADDR
// end ; 14 :
13127: GO 13546
13129: LD_INT 14
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13148
13137: POP
// bc_type := b_workshop ; 15 :
13138: LD_ADDR_OWVAR 42
13142: PUSH
13143: LD_INT 2
13145: ST_TO_ADDR
13146: GO 13546
13148: LD_INT 15
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13167
13156: POP
// bc_type := b_factory ; 16 :
13157: LD_ADDR_OWVAR 42
13161: PUSH
13162: LD_INT 3
13164: ST_TO_ADDR
13165: GO 13546
13167: LD_INT 16
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13186
13175: POP
// bc_type := b_ext_gun ; 17 :
13176: LD_ADDR_OWVAR 42
13180: PUSH
13181: LD_INT 17
13183: ST_TO_ADDR
13184: GO 13546
13186: LD_INT 17
13188: DOUBLE
13189: EQUAL
13190: IFTRUE 13194
13192: GO 13222
13194: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13195: LD_ADDR_OWVAR 42
13199: PUSH
13200: LD_INT 19
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 19
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_VAR 0 1
13218: ARRAY
13219: ST_TO_ADDR
13220: GO 13546
13222: LD_INT 18
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13241
13230: POP
// bc_type := b_ext_radar ; 19 :
13231: LD_ADDR_OWVAR 42
13235: PUSH
13236: LD_INT 20
13238: ST_TO_ADDR
13239: GO 13546
13241: LD_INT 19
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13260
13249: POP
// bc_type := b_ext_radio ; 20 :
13250: LD_ADDR_OWVAR 42
13254: PUSH
13255: LD_INT 22
13257: ST_TO_ADDR
13258: GO 13546
13260: LD_INT 20
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13279
13268: POP
// bc_type := b_ext_siberium ; 21 :
13269: LD_ADDR_OWVAR 42
13273: PUSH
13274: LD_INT 21
13276: ST_TO_ADDR
13277: GO 13546
13279: LD_INT 21
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13298
13287: POP
// bc_type := b_ext_computer ; 22 :
13288: LD_ADDR_OWVAR 42
13292: PUSH
13293: LD_INT 24
13295: ST_TO_ADDR
13296: GO 13546
13298: LD_INT 22
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13317
13306: POP
// bc_type := b_ext_track ; 23 :
13307: LD_ADDR_OWVAR 42
13311: PUSH
13312: LD_INT 16
13314: ST_TO_ADDR
13315: GO 13546
13317: LD_INT 23
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13336
13325: POP
// bc_type := b_ext_laser ; 24 :
13326: LD_ADDR_OWVAR 42
13330: PUSH
13331: LD_INT 25
13333: ST_TO_ADDR
13334: GO 13546
13336: LD_INT 24
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13355
13344: POP
// bc_type := b_control_tower ; 25 :
13345: LD_ADDR_OWVAR 42
13349: PUSH
13350: LD_INT 36
13352: ST_TO_ADDR
13353: GO 13546
13355: LD_INT 25
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13374
13363: POP
// bc_type := b_breastwork ; 26 :
13364: LD_ADDR_OWVAR 42
13368: PUSH
13369: LD_INT 31
13371: ST_TO_ADDR
13372: GO 13546
13374: LD_INT 26
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13393
13382: POP
// bc_type := b_bunker ; 27 :
13383: LD_ADDR_OWVAR 42
13387: PUSH
13388: LD_INT 32
13390: ST_TO_ADDR
13391: GO 13546
13393: LD_INT 27
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13412
13401: POP
// bc_type := b_turret ; 28 :
13402: LD_ADDR_OWVAR 42
13406: PUSH
13407: LD_INT 33
13409: ST_TO_ADDR
13410: GO 13546
13412: LD_INT 28
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13431
13420: POP
// bc_type := b_armoury ; 29 :
13421: LD_ADDR_OWVAR 42
13425: PUSH
13426: LD_INT 4
13428: ST_TO_ADDR
13429: GO 13546
13431: LD_INT 29
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13450
13439: POP
// bc_type := b_barracks ; 30 :
13440: LD_ADDR_OWVAR 42
13444: PUSH
13445: LD_INT 5
13447: ST_TO_ADDR
13448: GO 13546
13450: LD_INT 30
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13469
13458: POP
// bc_type := b_solar_power ; 31 :
13459: LD_ADDR_OWVAR 42
13463: PUSH
13464: LD_INT 27
13466: ST_TO_ADDR
13467: GO 13546
13469: LD_INT 31
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13488
13477: POP
// bc_type := b_oil_power ; 32 :
13478: LD_ADDR_OWVAR 42
13482: PUSH
13483: LD_INT 26
13485: ST_TO_ADDR
13486: GO 13546
13488: LD_INT 32
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13507
13496: POP
// bc_type := b_siberite_power ; 33 :
13497: LD_ADDR_OWVAR 42
13501: PUSH
13502: LD_INT 28
13504: ST_TO_ADDR
13505: GO 13546
13507: LD_INT 33
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13526
13515: POP
// bc_type := b_oil_mine ; 34 :
13516: LD_ADDR_OWVAR 42
13520: PUSH
13521: LD_INT 29
13523: ST_TO_ADDR
13524: GO 13546
13526: LD_INT 34
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13545
13534: POP
// bc_type := b_siberite_mine ; end ;
13535: LD_ADDR_OWVAR 42
13539: PUSH
13540: LD_INT 30
13542: ST_TO_ADDR
13543: GO 13546
13545: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13546: LD_ADDR_VAR 0 8
13550: PUSH
13551: LD_VAR 0 5
13555: PPUSH
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 47
13570: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13571: LD_OWVAR 42
13575: PUSH
13576: LD_INT 32
13578: PUSH
13579: LD_INT 33
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: IN
13586: IFFALSE 13602
// PlaceWeaponTurret ( b , weapon ) ;
13588: LD_VAR 0 8
13592: PPUSH
13593: LD_VAR 0 4
13597: PPUSH
13598: CALL_OW 431
// end ;
13602: LD_VAR 0 7
13606: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_OWVAR 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: ST_TO_ADDR
// if not tmp then
13667: LD_VAR 0 4
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13735
// for i in tmp do
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_VAR 0 4
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13733
// for j = 1 to 3 do
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 3
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13705: LD_VAR 0 2
13709: PPUSH
13710: CALL_OW 274
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 99999
13722: PPUSH
13723: CALL_OW 277
13727: GO 13702
13729: POP
13730: POP
13731: GO 13686
13733: POP
13734: POP
// end ;
13735: LD_VAR 0 1
13739: RET
// export function hHackSetLevel10 ; var i , j ; begin
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
13744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13818
// if IsSelected ( i ) then
13768: LD_VAR 0 2
13772: PPUSH
13773: CALL_OW 306
13777: IFFALSE 13816
// begin for j := 1 to 4 do
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: DOUBLE
13785: LD_INT 1
13787: DEC
13788: ST_TO_ADDR
13789: LD_INT 4
13791: PUSH
13792: FOR_TO
13793: IFFALSE 13814
// SetSkill ( i , j , 10 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 10
13807: PPUSH
13808: CALL_OW 237
13812: GO 13792
13814: POP
13815: POP
// end ;
13816: GO 13765
13818: POP
13819: POP
// end ;
13820: LD_VAR 0 1
13824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PUSH
13866: FOR_IN
13867: IFFALSE 13908
// begin for j := 1 to 4 do
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: DOUBLE
13875: LD_INT 1
13877: DEC
13878: ST_TO_ADDR
13879: LD_INT 4
13881: PUSH
13882: FOR_TO
13883: IFFALSE 13904
// SetSkill ( i , j , 10 ) ;
13885: LD_VAR 0 2
13889: PPUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 10
13897: PPUSH
13898: CALL_OW 237
13902: GO 13882
13904: POP
13905: POP
// end ;
13906: GO 13866
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 1
13914: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13915: LD_INT 0
13917: PPUSH
// uc_side := your_side ;
13918: LD_ADDR_OWVAR 20
13922: PUSH
13923: LD_OWVAR 2
13927: ST_TO_ADDR
// uc_nation := nation ;
13928: LD_ADDR_OWVAR 21
13932: PUSH
13933: LD_VAR 0 1
13937: ST_TO_ADDR
// InitHc ;
13938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13942: LD_INT 0
13944: PPUSH
13945: LD_VAR 0 2
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13959: LD_VAR 0 4
13963: PPUSH
13964: LD_VAR 0 5
13968: PPUSH
13969: CALL_OW 428
13973: PUSH
13974: LD_INT 0
13976: EQUAL
13977: IFFALSE 14001
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13979: CALL_OW 44
13983: PPUSH
13984: LD_VAR 0 4
13988: PPUSH
13989: LD_VAR 0 5
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 48
// end ;
14001: LD_VAR 0 6
14005: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// uc_side := your_side ;
14010: LD_ADDR_OWVAR 20
14014: PUSH
14015: LD_OWVAR 2
14019: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14020: LD_VAR 0 1
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: IN
14047: IFFALSE 14059
// uc_nation := nation_american else
14049: LD_ADDR_OWVAR 21
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
14057: GO 14102
// if chassis in [ 11 , 12 , 13 , 14 ] then
14059: LD_VAR 0 1
14063: PUSH
14064: LD_INT 11
14066: PUSH
14067: LD_INT 12
14069: PUSH
14070: LD_INT 13
14072: PUSH
14073: LD_INT 14
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: IN
14082: IFFALSE 14094
// uc_nation := nation_arabian else
14084: LD_ADDR_OWVAR 21
14088: PUSH
14089: LD_INT 2
14091: ST_TO_ADDR
14092: GO 14102
// uc_nation := nation_russian ;
14094: LD_ADDR_OWVAR 21
14098: PUSH
14099: LD_INT 3
14101: ST_TO_ADDR
// vc_chassis := chassis ;
14102: LD_ADDR_OWVAR 37
14106: PUSH
14107: LD_VAR 0 1
14111: ST_TO_ADDR
// vc_engine := engine ;
14112: LD_ADDR_OWVAR 39
14116: PUSH
14117: LD_VAR 0 2
14121: ST_TO_ADDR
// vc_control := control ;
14122: LD_ADDR_OWVAR 38
14126: PUSH
14127: LD_VAR 0 3
14131: ST_TO_ADDR
// vc_weapon := weapon ;
14132: LD_ADDR_OWVAR 40
14136: PUSH
14137: LD_VAR 0 4
14141: ST_TO_ADDR
// un := CreateVehicle ;
14142: LD_ADDR_VAR 0 8
14146: PUSH
14147: CALL_OW 45
14151: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14152: LD_VAR 0 8
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: LD_INT 5
14162: PPUSH
14163: CALL_OW 12
14167: PPUSH
14168: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14172: LD_VAR 0 8
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: LD_VAR 0 6
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 48
// end ;
14194: LD_VAR 0 7
14198: RET
// export hInvincible ; every 1 do
14199: GO 14201
14201: DISABLE
// hInvincible := [ ] ;
14202: LD_ADDR_EXP 59
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
14209: END
// every 10 do var i ;
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin enable ;
14216: ENABLE
// if not hInvincible then
14217: LD_EXP 59
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14270
// for i in hInvincible do
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_EXP 59
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14268
// if GetLives ( i ) < 1000 then
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 256
14248: PUSH
14249: LD_INT 1000
14251: LESS
14252: IFFALSE 14266
// SetLives ( i , 1000 ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 1000
14261: PPUSH
14262: CALL_OW 234
14266: GO 14236
14268: POP
14269: POP
// end ;
14270: PPOPN 1
14272: END
// export function hHackInvincible ; var i ; begin
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: FOR_IN
14316: IFFALSE 14377
// if IsSelected ( i ) then
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 306
14327: IFFALSE 14375
// begin if i in hInvincible then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_EXP 59
14338: IN
14339: IFFALSE 14359
// hInvincible := hInvincible diff i else
14341: LD_ADDR_EXP 59
14345: PUSH
14346: LD_EXP 59
14350: PUSH
14351: LD_VAR 0 2
14355: DIFF
14356: ST_TO_ADDR
14357: GO 14375
// hInvincible := hInvincible union i ;
14359: LD_ADDR_EXP 59
14363: PUSH
14364: LD_EXP 59
14368: PUSH
14369: LD_VAR 0 2
14373: UNION
14374: ST_TO_ADDR
// end ;
14375: GO 14315
14377: POP
14378: POP
// end ;
14379: LD_VAR 0 1
14383: RET
// export function hHackInvisible ; var i , j ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
14388: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14434
// if IsSelected ( i ) then
14412: LD_VAR 0 2
14416: PPUSH
14417: CALL_OW 306
14421: IFFALSE 14432
// ComForceInvisible ( i ) ;
14423: LD_VAR 0 2
14427: PPUSH
14428: CALL_OW 496
14432: GO 14409
14434: POP
14435: POP
// end ;
14436: LD_VAR 0 1
14440: RET
// export function hHackChangeYourSide ; begin
14441: LD_INT 0
14443: PPUSH
// if your_side = 8 then
14444: LD_OWVAR 2
14448: PUSH
14449: LD_INT 8
14451: EQUAL
14452: IFFALSE 14464
// your_side := 0 else
14454: LD_ADDR_OWVAR 2
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
14462: GO 14478
// your_side := your_side + 1 ;
14464: LD_ADDR_OWVAR 2
14468: PUSH
14469: LD_OWVAR 2
14473: PUSH
14474: LD_INT 1
14476: PLUS
14477: ST_TO_ADDR
// end ;
14478: LD_VAR 0 1
14482: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
14487: PPUSH
// for i in all_units do
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_OWVAR 3
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14577
// if IsSelected ( i ) then
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 306
14510: IFFALSE 14575
// begin j := GetSide ( i ) ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: PPUSH
14522: CALL_OW 255
14526: ST_TO_ADDR
// if j = 8 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 8
14534: EQUAL
14535: IFFALSE 14547
// j := 0 else
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
14545: GO 14561
// j := j + 1 ;
14547: LD_ADDR_VAR 0 3
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PLUS
14560: ST_TO_ADDR
// SetSide ( i , j ) ;
14561: LD_VAR 0 2
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: CALL_OW 235
// end ;
14575: GO 14498
14577: POP
14578: POP
// end ;
14579: LD_VAR 0 1
14583: RET
// export function hHackFog ; begin
14584: LD_INT 0
14586: PPUSH
// FogOff ( true ) ;
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 344
// end ;
14594: LD_VAR 0 1
14598: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14599: LD_INT 0
14601: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 483
// CenterOnXY ( x , y ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 84
// end ;
14641: LD_VAR 0 4
14645: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14650: LD_VAR 0 1
14654: NOT
14655: PUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: CALL_OW 488
14670: NOT
14671: OR
14672: PUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 266
14682: PUSH
14683: LD_INT 3
14685: NONEQUAL
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 247
14696: PUSH
14697: LD_INT 1
14699: EQUAL
14700: NOT
14701: AND
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 14856
// if GetType ( factory ) = unit_human then
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 247
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14737
// factory := IsInUnit ( factory ) ;
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 310
14736: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 266
14746: PUSH
14747: LD_INT 3
14749: NONEQUAL
14750: IFFALSE 14754
// exit ;
14752: GO 14856
// if HexInfo ( x , y ) = factory then
14754: LD_VAR 0 2
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 428
14768: PUSH
14769: LD_VAR 0 1
14773: EQUAL
14774: IFFALSE 14801
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14776: LD_ADDR_EXP 60
14780: PUSH
14781: LD_EXP 60
14785: PPUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 0
14793: PPUSH
14794: CALL_OW 1
14798: ST_TO_ADDR
14799: GO 14852
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14801: LD_ADDR_EXP 60
14805: PUSH
14806: LD_EXP 60
14810: PPUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 255
14825: PUSH
14826: LD_VAR 0 1
14830: PUSH
14831: LD_VAR 0 2
14835: PUSH
14836: LD_VAR 0 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 1
14851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14852: CALL 14861 0 0
// end ;
14856: LD_VAR 0 4
14860: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14861: LD_INT 0
14863: PPUSH
14864: PPUSH
14865: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14866: LD_STRING resetFactoryWaypoint();
14868: PPUSH
14869: CALL_OW 559
// if factoryWaypoints then
14873: LD_EXP 60
14877: IFFALSE 15003
// begin list := PrepareArray ( factoryWaypoints ) ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_EXP 60
14888: PPUSH
14889: CALL 62540 0 1
14893: ST_TO_ADDR
// for i := 1 to list do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: DOUBLE
14900: LD_INT 1
14902: DEC
14903: ST_TO_ADDR
14904: LD_VAR 0 3
14908: PUSH
14909: FOR_TO
14910: IFFALSE 15001
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14912: LD_STRING setFactoryWaypointXY(
14914: PUSH
14915: LD_VAR 0 3
14919: PUSH
14920: LD_VAR 0 2
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: STR
14930: PUSH
14931: LD_STRING ,
14933: STR
14934: PUSH
14935: LD_VAR 0 3
14939: PUSH
14940: LD_VAR 0 2
14944: ARRAY
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: STR
14950: PUSH
14951: LD_STRING ,
14953: STR
14954: PUSH
14955: LD_VAR 0 3
14959: PUSH
14960: LD_VAR 0 2
14964: ARRAY
14965: PUSH
14966: LD_INT 3
14968: ARRAY
14969: STR
14970: PUSH
14971: LD_STRING ,
14973: STR
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 2
14984: ARRAY
14985: PUSH
14986: LD_INT 4
14988: ARRAY
14989: STR
14990: PUSH
14991: LD_STRING )
14993: STR
14994: PPUSH
14995: CALL_OW 559
14999: GO 14909
15001: POP
15002: POP
// end ; end ;
15003: LD_VAR 0 1
15007: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15008: LD_INT 0
15010: PPUSH
// if HexInfo ( x , y ) = warehouse then
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: CALL_OW 428
15025: PUSH
15026: LD_VAR 0 1
15030: EQUAL
15031: IFFALSE 15058
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15033: LD_ADDR_EXP 61
15037: PUSH
15038: LD_EXP 61
15042: PPUSH
15043: LD_VAR 0 1
15047: PPUSH
15048: LD_INT 0
15050: PPUSH
15051: CALL_OW 1
15055: ST_TO_ADDR
15056: GO 15109
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15058: LD_ADDR_EXP 61
15062: PUSH
15063: LD_EXP 61
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_VAR 0 1
15087: PUSH
15088: LD_VAR 0 2
15092: PUSH
15093: LD_VAR 0 3
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 1
15108: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15109: CALL 15118 0 0
// end ;
15113: LD_VAR 0 4
15117: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15118: LD_INT 0
15120: PPUSH
15121: PPUSH
15122: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15123: LD_STRING resetWarehouseGatheringPoints();
15125: PPUSH
15126: CALL_OW 559
// if warehouseGatheringPoints then
15130: LD_EXP 61
15134: IFFALSE 15260
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_EXP 61
15145: PPUSH
15146: CALL 62540 0 1
15150: ST_TO_ADDR
// for i := 1 to list do
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: DOUBLE
15157: LD_INT 1
15159: DEC
15160: ST_TO_ADDR
15161: LD_VAR 0 3
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15258
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15169: LD_STRING setWarehouseGatheringPointXY(
15171: PUSH
15172: LD_VAR 0 3
15176: PUSH
15177: LD_VAR 0 2
15181: ARRAY
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: STR
15187: PUSH
15188: LD_STRING ,
15190: STR
15191: PUSH
15192: LD_VAR 0 3
15196: PUSH
15197: LD_VAR 0 2
15201: ARRAY
15202: PUSH
15203: LD_INT 2
15205: ARRAY
15206: STR
15207: PUSH
15208: LD_STRING ,
15210: STR
15211: PUSH
15212: LD_VAR 0 3
15216: PUSH
15217: LD_VAR 0 2
15221: ARRAY
15222: PUSH
15223: LD_INT 3
15225: ARRAY
15226: STR
15227: PUSH
15228: LD_STRING ,
15230: STR
15231: PUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 2
15241: ARRAY
15242: PUSH
15243: LD_INT 4
15245: ARRAY
15246: STR
15247: PUSH
15248: LD_STRING )
15250: STR
15251: PPUSH
15252: CALL_OW 559
15256: GO 15166
15258: POP
15259: POP
// end ; end ;
15260: LD_VAR 0 1
15264: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15265: LD_EXP 61
15269: IFFALSE 15954
15271: GO 15273
15273: DISABLE
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin enable ;
15285: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: LD_EXP 61
15295: PPUSH
15296: CALL 62540 0 1
15300: ST_TO_ADDR
// if not list then
15301: LD_VAR 0 3
15305: NOT
15306: IFFALSE 15310
// exit ;
15308: GO 15954
// for i := 1 to list do
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_VAR 0 3
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15952
// begin depot := list [ i ] [ 2 ] ;
15328: LD_ADDR_VAR 0 8
15332: PUSH
15333: LD_VAR 0 3
15337: PUSH
15338: LD_VAR 0 1
15342: ARRAY
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 1
15362: ARRAY
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15368: LD_VAR 0 8
15372: PPUSH
15373: CALL_OW 301
15377: PUSH
15378: LD_VAR 0 5
15382: PUSH
15383: LD_VAR 0 8
15387: PPUSH
15388: CALL_OW 255
15392: NONEQUAL
15393: OR
15394: IFFALSE 15423
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15396: LD_ADDR_EXP 61
15400: PUSH
15401: LD_EXP 61
15405: PPUSH
15406: LD_VAR 0 8
15410: PPUSH
15411: LD_INT 0
15413: PPUSH
15414: CALL_OW 1
15418: ST_TO_ADDR
// exit ;
15419: POP
15420: POP
15421: GO 15954
// end ; x := list [ i ] [ 3 ] ;
15423: LD_ADDR_VAR 0 6
15427: PUSH
15428: LD_VAR 0 3
15432: PUSH
15433: LD_VAR 0 1
15437: ARRAY
15438: PUSH
15439: LD_INT 3
15441: ARRAY
15442: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15443: LD_ADDR_VAR 0 7
15447: PUSH
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ARRAY
15458: PUSH
15459: LD_INT 4
15461: ARRAY
15462: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_VAR 0 6
15472: PPUSH
15473: LD_VAR 0 7
15477: PPUSH
15478: LD_INT 16
15480: PPUSH
15481: CALL 61124 0 3
15485: ST_TO_ADDR
// if not cratesNearbyPoint then
15486: LD_VAR 0 9
15490: NOT
15491: IFFALSE 15497
// exit ;
15493: POP
15494: POP
15495: GO 15954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15497: LD_ADDR_VAR 0 4
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_VAR 0 5
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 60
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 91
15529: PUSH
15530: LD_VAR 0 8
15534: PUSH
15535: LD_INT 6
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 16
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: PUSH
15582: LD_VAR 0 8
15586: PPUSH
15587: CALL_OW 313
15591: PPUSH
15592: LD_INT 3
15594: PUSH
15595: LD_INT 60
15597: PUSH
15598: EMPTY
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 2
15607: PUSH
15608: LD_INT 25
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 25
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 72
15641: UNION
15642: ST_TO_ADDR
// if tmp then
15643: LD_VAR 0 4
15647: IFFALSE 15727
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_VAR 0 4
15658: PPUSH
15659: LD_INT 3
15661: PPUSH
15662: CALL 59093 0 2
15666: ST_TO_ADDR
// for j in tmp do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 4
15676: PUSH
15677: FOR_IN
15678: IFFALSE 15721
// begin if IsInUnit ( j ) then
15680: LD_VAR 0 2
15684: PPUSH
15685: CALL_OW 310
15689: IFFALSE 15700
// ComExit ( j ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL 59176 0 1
// AddComCollect ( j , x , y ) ;
15700: LD_VAR 0 2
15704: PPUSH
15705: LD_VAR 0 6
15709: PPUSH
15710: LD_VAR 0 7
15714: PPUSH
15715: CALL_OW 177
// end ;
15719: GO 15677
15721: POP
15722: POP
// exit ;
15723: POP
15724: POP
15725: GO 15954
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15727: LD_ADDR_VAR 0 4
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_VAR 0 5
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 91
15746: PUSH
15747: LD_VAR 0 8
15751: PUSH
15752: LD_INT 8
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: LD_INT 34
15765: PUSH
15766: LD_INT 12
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 34
15775: PUSH
15776: LD_INT 51
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 34
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 34
15795: PUSH
15796: LD_INT 89
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// if tmp then
15820: LD_VAR 0 4
15824: IFFALSE 15950
// begin for j in tmp do
15826: LD_ADDR_VAR 0 2
15830: PUSH
15831: LD_VAR 0 4
15835: PUSH
15836: FOR_IN
15837: IFFALSE 15948
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 262
15848: PUSH
15849: LD_INT 3
15851: EQUAL
15852: PUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 261
15862: PUSH
15863: LD_INT 20
15865: GREATER
15866: OR
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: CALL_OW 314
15877: NOT
15878: AND
15879: PUSH
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL_OW 263
15889: PUSH
15890: LD_INT 1
15892: NONEQUAL
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 311
15903: OR
15904: AND
15905: IFFALSE 15946
// begin ComCollect ( j , x , y ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_VAR 0 6
15916: PPUSH
15917: LD_VAR 0 7
15921: PPUSH
15922: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15926: LD_VAR 0 2
15930: PPUSH
15931: LD_VAR 0 8
15935: PPUSH
15936: CALL_OW 172
// exit ;
15940: POP
15941: POP
15942: POP
15943: POP
15944: GO 15954
// end ;
15946: GO 15836
15948: POP
15949: POP
// end ; end ;
15950: GO 15325
15952: POP
15953: POP
// end ; end_of_file
15954: PPOPN 9
15956: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15957: LD_INT 0
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 264
15972: PUSH
15973: LD_INT 91
15975: EQUAL
15976: IFFALSE 16048
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15978: LD_INT 68
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 255
15990: PPUSH
15991: CALL_OW 321
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: IFFALSE 16011
// eff := 70 else
16001: LD_ADDR_VAR 0 4
16005: PUSH
16006: LD_INT 70
16008: ST_TO_ADDR
16009: GO 16019
// eff := 30 ;
16011: LD_ADDR_VAR 0 4
16015: PUSH
16016: LD_INT 30
16018: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 250
16028: PPUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 251
16038: PPUSH
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 495
// end ; end ;
16048: LD_VAR 0 2
16052: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16053: LD_INT 0
16055: PPUSH
// end ;
16056: LD_VAR 0 4
16060: RET
// export function SOS_Command ( cmd ) ; begin
16061: LD_INT 0
16063: PPUSH
// end ;
16064: LD_VAR 0 2
16068: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16069: LD_INT 0
16071: PPUSH
// end ;
16072: LD_VAR 0 6
16076: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver ; begin
16077: LD_INT 0
16079: PPUSH
16080: PPUSH
16081: PPUSH
// if not vehicle or not factory then
16082: LD_VAR 0 1
16086: NOT
16087: PUSH
16088: LD_VAR 0 2
16092: NOT
16093: OR
16094: IFFALSE 16098
// exit ;
16096: GO 16401
// if factoryWaypoints >= factory then
16098: LD_EXP 60
16102: PUSH
16103: LD_VAR 0 2
16107: GREATEREQUAL
16108: IFFALSE 16401
// if factoryWaypoints [ factory ] then
16110: LD_EXP 60
16114: PUSH
16115: LD_VAR 0 2
16119: ARRAY
16120: IFFALSE 16401
// begin if GetControl ( vehicle ) = control_manual then
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 263
16131: PUSH
16132: LD_INT 1
16134: EQUAL
16135: IFFALSE 16288
// begin driver := IsDrivenBy ( vehicle ) ;
16137: LD_ADDR_VAR 0 5
16141: PUSH
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 311
16151: ST_TO_ADDR
// tag := GetTag ( driver ) ;
16152: LD_ADDR_VAR 0 4
16156: PUSH
16157: LD_VAR 0 5
16161: PPUSH
16162: CALL_OW 110
16166: ST_TO_ADDR
// if tag = tDriver then
16167: LD_VAR 0 4
16171: PUSH
16172: LD_INT 501
16174: EQUAL
16175: IFFALSE 16179
// exit ;
16177: GO 16401
// if not HasTask ( driver ) then
16179: LD_VAR 0 5
16183: PPUSH
16184: CALL_OW 314
16188: NOT
16189: IFFALSE 16286
// begin SetTag ( driver , tDriver ) ;
16191: LD_VAR 0 5
16195: PPUSH
16196: LD_INT 501
16198: PPUSH
16199: CALL_OW 109
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16203: LD_VAR 0 5
16207: PPUSH
16208: LD_EXP 60
16212: PUSH
16213: LD_VAR 0 2
16217: ARRAY
16218: PUSH
16219: LD_INT 3
16221: ARRAY
16222: PPUSH
16223: LD_EXP 60
16227: PUSH
16228: LD_VAR 0 2
16232: ARRAY
16233: PUSH
16234: LD_INT 4
16236: ARRAY
16237: PPUSH
16238: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16242: LD_VAR 0 5
16246: PPUSH
16247: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16251: LD_VAR 0 5
16255: PPUSH
16256: LD_VAR 0 2
16260: PPUSH
16261: CALL_OW 180
// wait ( 0 0$1 ) ;
16265: LD_INT 35
16267: PPUSH
16268: CALL_OW 67
// SetTag ( driver , tag ) ;
16272: LD_VAR 0 5
16276: PPUSH
16277: LD_VAR 0 4
16281: PPUSH
16282: CALL_OW 109
// end ; end else
16286: GO 16401
// if GetControl ( vehicle ) = control_remote then
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 263
16297: PUSH
16298: LD_INT 2
16300: EQUAL
16301: IFFALSE 16362
// begin wait ( 0 0$2 ) ;
16303: LD_INT 70
16305: PPUSH
16306: CALL_OW 67
// if Connect ( vehicle ) then
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL 29395 0 1
16319: IFFALSE 16360
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_EXP 60
16330: PUSH
16331: LD_VAR 0 2
16335: ARRAY
16336: PUSH
16337: LD_INT 3
16339: ARRAY
16340: PPUSH
16341: LD_EXP 60
16345: PUSH
16346: LD_VAR 0 2
16350: ARRAY
16351: PUSH
16352: LD_INT 4
16354: ARRAY
16355: PPUSH
16356: CALL_OW 171
// end else
16360: GO 16401
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_EXP 60
16371: PUSH
16372: LD_VAR 0 2
16376: ARRAY
16377: PUSH
16378: LD_INT 3
16380: ARRAY
16381: PPUSH
16382: LD_EXP 60
16386: PUSH
16387: LD_VAR 0 2
16391: ARRAY
16392: PUSH
16393: LD_INT 4
16395: ARRAY
16396: PPUSH
16397: CALL_OW 171
// end ; end ;
16401: LD_VAR 0 3
16405: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16406: LD_INT 0
16408: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16409: LD_VAR 0 1
16413: PUSH
16414: LD_INT 250
16416: EQUAL
16417: PUSH
16418: LD_VAR 0 2
16422: PPUSH
16423: CALL_OW 264
16427: PUSH
16428: LD_INT 81
16430: EQUAL
16431: AND
16432: IFFALSE 16453
// MinerPlaceMine ( unit , x , y ) ;
16434: LD_VAR 0 2
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: LD_VAR 0 5
16448: PPUSH
16449: CALL 19443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16453: LD_VAR 0 1
16457: PUSH
16458: LD_INT 251
16460: EQUAL
16461: PUSH
16462: LD_VAR 0 2
16466: PPUSH
16467: CALL_OW 264
16471: PUSH
16472: LD_INT 81
16474: EQUAL
16475: AND
16476: IFFALSE 16497
// MinerDetonateMine ( unit , x , y ) ;
16478: LD_VAR 0 2
16482: PPUSH
16483: LD_VAR 0 4
16487: PPUSH
16488: LD_VAR 0 5
16492: PPUSH
16493: CALL 19718 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16497: LD_VAR 0 1
16501: PUSH
16502: LD_INT 252
16504: EQUAL
16505: PUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: CALL_OW 264
16515: PUSH
16516: LD_INT 81
16518: EQUAL
16519: AND
16520: IFFALSE 16541
// MinerCreateMinefield ( unit , x , y ) ;
16522: LD_VAR 0 2
16526: PPUSH
16527: LD_VAR 0 4
16531: PPUSH
16532: LD_VAR 0 5
16536: PPUSH
16537: CALL 20135 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16541: LD_VAR 0 1
16545: PUSH
16546: LD_INT 253
16548: EQUAL
16549: PUSH
16550: LD_VAR 0 2
16554: PPUSH
16555: CALL_OW 257
16559: PUSH
16560: LD_INT 5
16562: EQUAL
16563: AND
16564: IFFALSE 16585
// ComBinocular ( unit , x , y ) ;
16566: LD_VAR 0 2
16570: PPUSH
16571: LD_VAR 0 4
16575: PPUSH
16576: LD_VAR 0 5
16580: PPUSH
16581: CALL 20504 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 254
16592: EQUAL
16593: PUSH
16594: LD_VAR 0 2
16598: PPUSH
16599: CALL_OW 264
16603: PUSH
16604: LD_INT 99
16606: EQUAL
16607: AND
16608: PUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: CALL_OW 263
16618: PUSH
16619: LD_INT 3
16621: EQUAL
16622: AND
16623: IFFALSE 16639
// HackDestroyVehicle ( unit , selectedUnit ) ;
16625: LD_VAR 0 2
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: CALL 18807 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 255
16646: EQUAL
16647: PUSH
16648: LD_VAR 0 2
16652: PPUSH
16653: CALL_OW 264
16657: PUSH
16658: LD_INT 14
16660: PUSH
16661: LD_INT 53
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: IN
16668: AND
16669: PUSH
16670: LD_VAR 0 4
16674: PPUSH
16675: LD_VAR 0 5
16679: PPUSH
16680: CALL_OW 488
16684: AND
16685: IFFALSE 16709
// CutTreeXYR ( unit , x , y , 12 ) ;
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_VAR 0 4
16696: PPUSH
16697: LD_VAR 0 5
16701: PPUSH
16702: LD_INT 12
16704: PPUSH
16705: CALL 16804 0 4
// if cmd = 256 then
16709: LD_VAR 0 1
16713: PUSH
16714: LD_INT 256
16716: EQUAL
16717: IFFALSE 16738
// SetFactoryWaypoint ( unit , x , y ) ;
16719: LD_VAR 0 2
16723: PPUSH
16724: LD_VAR 0 4
16728: PPUSH
16729: LD_VAR 0 5
16733: PPUSH
16734: CALL 14646 0 3
// if cmd = 257 then
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 257
16745: EQUAL
16746: IFFALSE 16767
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16748: LD_VAR 0 2
16752: PPUSH
16753: LD_VAR 0 4
16757: PPUSH
16758: LD_VAR 0 5
16762: PPUSH
16763: CALL 15008 0 3
// if cmd = 258 then
16767: LD_VAR 0 1
16771: PUSH
16772: LD_INT 258
16774: EQUAL
16775: IFFALSE 16799
// BurnTreeXYR ( unit , x , y , 8 ) ;
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: LD_VAR 0 5
16791: PPUSH
16792: LD_INT 8
16794: PPUSH
16795: CALL 17198 0 4
// end ;
16799: LD_VAR 0 6
16803: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16804: LD_INT 0
16806: PPUSH
16807: PPUSH
16808: PPUSH
16809: PPUSH
16810: PPUSH
16811: PPUSH
16812: PPUSH
16813: PPUSH
16814: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 302
16824: NOT
16825: PUSH
16826: LD_VAR 0 2
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: CALL_OW 488
16840: NOT
16841: OR
16842: PUSH
16843: LD_VAR 0 4
16847: NOT
16848: OR
16849: IFFALSE 16853
// exit ;
16851: GO 17193
// list := [ ] ;
16853: LD_ADDR_VAR 0 13
16857: PUSH
16858: EMPTY
16859: ST_TO_ADDR
// if x - r < 0 then
16860: LD_VAR 0 2
16864: PUSH
16865: LD_VAR 0 4
16869: MINUS
16870: PUSH
16871: LD_INT 0
16873: LESS
16874: IFFALSE 16886
// min_x := 0 else
16876: LD_ADDR_VAR 0 7
16880: PUSH
16881: LD_INT 0
16883: ST_TO_ADDR
16884: GO 16902
// min_x := x - r ;
16886: LD_ADDR_VAR 0 7
16890: PUSH
16891: LD_VAR 0 2
16895: PUSH
16896: LD_VAR 0 4
16900: MINUS
16901: ST_TO_ADDR
// if y - r < 0 then
16902: LD_VAR 0 3
16906: PUSH
16907: LD_VAR 0 4
16911: MINUS
16912: PUSH
16913: LD_INT 0
16915: LESS
16916: IFFALSE 16928
// min_y := 0 else
16918: LD_ADDR_VAR 0 8
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
16926: GO 16944
// min_y := y - r ;
16928: LD_ADDR_VAR 0 8
16932: PUSH
16933: LD_VAR 0 3
16937: PUSH
16938: LD_VAR 0 4
16942: MINUS
16943: ST_TO_ADDR
// max_x := x + r ;
16944: LD_ADDR_VAR 0 9
16948: PUSH
16949: LD_VAR 0 2
16953: PUSH
16954: LD_VAR 0 4
16958: PLUS
16959: ST_TO_ADDR
// max_y := y + r ;
16960: LD_ADDR_VAR 0 10
16964: PUSH
16965: LD_VAR 0 3
16969: PUSH
16970: LD_VAR 0 4
16974: PLUS
16975: ST_TO_ADDR
// for _x = min_x to max_x do
16976: LD_ADDR_VAR 0 11
16980: PUSH
16981: DOUBLE
16982: LD_VAR 0 7
16986: DEC
16987: ST_TO_ADDR
16988: LD_VAR 0 9
16992: PUSH
16993: FOR_TO
16994: IFFALSE 17111
// for _y = min_y to max_y do
16996: LD_ADDR_VAR 0 12
17000: PUSH
17001: DOUBLE
17002: LD_VAR 0 8
17006: DEC
17007: ST_TO_ADDR
17008: LD_VAR 0 10
17012: PUSH
17013: FOR_TO
17014: IFFALSE 17107
// begin if not ValidHex ( _x , _y ) then
17016: LD_VAR 0 11
17020: PPUSH
17021: LD_VAR 0 12
17025: PPUSH
17026: CALL_OW 488
17030: NOT
17031: IFFALSE 17035
// continue ;
17033: GO 17013
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17035: LD_VAR 0 11
17039: PPUSH
17040: LD_VAR 0 12
17044: PPUSH
17045: CALL_OW 351
17049: PUSH
17050: LD_VAR 0 11
17054: PPUSH
17055: LD_VAR 0 12
17059: PPUSH
17060: CALL_OW 554
17064: AND
17065: IFFALSE 17105
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17067: LD_ADDR_VAR 0 13
17071: PUSH
17072: LD_VAR 0 13
17076: PPUSH
17077: LD_VAR 0 13
17081: PUSH
17082: LD_INT 1
17084: PLUS
17085: PPUSH
17086: LD_VAR 0 11
17090: PUSH
17091: LD_VAR 0 12
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 2
17104: ST_TO_ADDR
// end ;
17105: GO 17013
17107: POP
17108: POP
17109: GO 16993
17111: POP
17112: POP
// if not list then
17113: LD_VAR 0 13
17117: NOT
17118: IFFALSE 17122
// exit ;
17120: GO 17193
// for i in list do
17122: LD_ADDR_VAR 0 6
17126: PUSH
17127: LD_VAR 0 13
17131: PUSH
17132: FOR_IN
17133: IFFALSE 17191
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_STRING M
17142: PUSH
17143: LD_VAR 0 6
17147: PUSH
17148: LD_INT 1
17150: ARRAY
17151: PUSH
17152: LD_VAR 0 6
17156: PUSH
17157: LD_INT 2
17159: ARRAY
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: LD_INT 0
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: PPUSH
17185: CALL_OW 447
17189: GO 17132
17191: POP
17192: POP
// end ;
17193: LD_VAR 0 5
17197: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 302
17219: NOT
17220: PUSH
17221: LD_VAR 0 2
17225: PPUSH
17226: LD_VAR 0 3
17230: PPUSH
17231: CALL_OW 488
17235: NOT
17236: OR
17237: PUSH
17238: LD_VAR 0 4
17242: NOT
17243: OR
17244: IFFALSE 17248
// exit ;
17246: GO 17761
// list := [ ] ;
17248: LD_ADDR_VAR 0 13
17252: PUSH
17253: EMPTY
17254: ST_TO_ADDR
// if x - r < 0 then
17255: LD_VAR 0 2
17259: PUSH
17260: LD_VAR 0 4
17264: MINUS
17265: PUSH
17266: LD_INT 0
17268: LESS
17269: IFFALSE 17281
// min_x := 0 else
17271: LD_ADDR_VAR 0 7
17275: PUSH
17276: LD_INT 0
17278: ST_TO_ADDR
17279: GO 17297
// min_x := x - r ;
17281: LD_ADDR_VAR 0 7
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_VAR 0 4
17295: MINUS
17296: ST_TO_ADDR
// if y - r < 0 then
17297: LD_VAR 0 3
17301: PUSH
17302: LD_VAR 0 4
17306: MINUS
17307: PUSH
17308: LD_INT 0
17310: LESS
17311: IFFALSE 17323
// min_y := 0 else
17313: LD_ADDR_VAR 0 8
17317: PUSH
17318: LD_INT 0
17320: ST_TO_ADDR
17321: GO 17339
// min_y := y - r ;
17323: LD_ADDR_VAR 0 8
17327: PUSH
17328: LD_VAR 0 3
17332: PUSH
17333: LD_VAR 0 4
17337: MINUS
17338: ST_TO_ADDR
// max_x := x + r ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_VAR 0 2
17348: PUSH
17349: LD_VAR 0 4
17353: PLUS
17354: ST_TO_ADDR
// max_y := y + r ;
17355: LD_ADDR_VAR 0 10
17359: PUSH
17360: LD_VAR 0 3
17364: PUSH
17365: LD_VAR 0 4
17369: PLUS
17370: ST_TO_ADDR
// for _x = min_x to max_x do
17371: LD_ADDR_VAR 0 11
17375: PUSH
17376: DOUBLE
17377: LD_VAR 0 7
17381: DEC
17382: ST_TO_ADDR
17383: LD_VAR 0 9
17387: PUSH
17388: FOR_TO
17389: IFFALSE 17506
// for _y = min_y to max_y do
17391: LD_ADDR_VAR 0 12
17395: PUSH
17396: DOUBLE
17397: LD_VAR 0 8
17401: DEC
17402: ST_TO_ADDR
17403: LD_VAR 0 10
17407: PUSH
17408: FOR_TO
17409: IFFALSE 17502
// begin if not ValidHex ( _x , _y ) then
17411: LD_VAR 0 11
17415: PPUSH
17416: LD_VAR 0 12
17420: PPUSH
17421: CALL_OW 488
17425: NOT
17426: IFFALSE 17430
// continue ;
17428: GO 17408
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17430: LD_VAR 0 11
17434: PPUSH
17435: LD_VAR 0 12
17439: PPUSH
17440: CALL_OW 351
17444: PUSH
17445: LD_VAR 0 11
17449: PPUSH
17450: LD_VAR 0 12
17454: PPUSH
17455: CALL_OW 554
17459: AND
17460: IFFALSE 17500
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17462: LD_ADDR_VAR 0 13
17466: PUSH
17467: LD_VAR 0 13
17471: PPUSH
17472: LD_VAR 0 13
17476: PUSH
17477: LD_INT 1
17479: PLUS
17480: PPUSH
17481: LD_VAR 0 11
17485: PUSH
17486: LD_VAR 0 12
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 2
17499: ST_TO_ADDR
// end ;
17500: GO 17408
17502: POP
17503: POP
17504: GO 17388
17506: POP
17507: POP
// if not list then
17508: LD_VAR 0 13
17512: NOT
17513: IFFALSE 17517
// exit ;
17515: GO 17761
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17517: LD_ADDR_VAR 0 13
17521: PUSH
17522: LD_VAR 0 1
17526: PPUSH
17527: LD_VAR 0 13
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL 26537 0 4
17542: ST_TO_ADDR
// ComStop ( flame ) ;
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL_OW 141
// for i in list do
17552: LD_ADDR_VAR 0 6
17556: PUSH
17557: LD_VAR 0 13
17561: PUSH
17562: FOR_IN
17563: IFFALSE 17594
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_VAR 0 6
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PPUSH
17579: LD_VAR 0 6
17583: PUSH
17584: LD_INT 2
17586: ARRAY
17587: PPUSH
17588: CALL_OW 176
17592: GO 17562
17594: POP
17595: POP
// repeat wait ( 0 0$1 ) ;
17596: LD_INT 35
17598: PPUSH
17599: CALL_OW 67
// task := GetTaskList ( flame ) ;
17603: LD_ADDR_VAR 0 14
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 437
17617: ST_TO_ADDR
// if not task then
17618: LD_VAR 0 14
17622: NOT
17623: IFFALSE 17627
// exit ;
17625: GO 17761
// if task [ 1 ] [ 1 ] <> | then
17627: LD_VAR 0 14
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: PUSH
17640: LD_STRING |
17642: NONEQUAL
17643: IFFALSE 17647
// exit ;
17645: GO 17761
// _x := task [ 1 ] [ 2 ] ;
17647: LD_ADDR_VAR 0 11
17651: PUSH
17652: LD_VAR 0 14
17656: PUSH
17657: LD_INT 1
17659: ARRAY
17660: PUSH
17661: LD_INT 2
17663: ARRAY
17664: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17665: LD_ADDR_VAR 0 12
17669: PUSH
17670: LD_VAR 0 14
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PUSH
17679: LD_INT 3
17681: ARRAY
17682: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17683: LD_VAR 0 11
17687: PPUSH
17688: LD_VAR 0 12
17692: PPUSH
17693: CALL_OW 351
17697: NOT
17698: PUSH
17699: LD_VAR 0 11
17703: PPUSH
17704: LD_VAR 0 12
17708: PPUSH
17709: CALL_OW 554
17713: NOT
17714: OR
17715: IFFALSE 17749
// begin task := Delete ( task , 1 ) ;
17717: LD_ADDR_VAR 0 14
17721: PUSH
17722: LD_VAR 0 14
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 3
17734: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17735: LD_VAR 0 1
17739: PPUSH
17740: LD_VAR 0 14
17744: PPUSH
17745: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 314
17758: NOT
17759: IFFALSE 17596
// end ;
17761: LD_VAR 0 5
17765: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17766: LD_EXP 63
17770: NOT
17771: IFFALSE 17821
17773: GO 17775
17775: DISABLE
// begin initHack := true ;
17776: LD_ADDR_EXP 63
17780: PUSH
17781: LD_INT 1
17783: ST_TO_ADDR
// hackTanks := [ ] ;
17784: LD_ADDR_EXP 64
17788: PUSH
17789: EMPTY
17790: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17791: LD_ADDR_EXP 65
17795: PUSH
17796: EMPTY
17797: ST_TO_ADDR
// hackLimit := 3 ;
17798: LD_ADDR_EXP 66
17802: PUSH
17803: LD_INT 3
17805: ST_TO_ADDR
// hackDist := 12 ;
17806: LD_ADDR_EXP 67
17810: PUSH
17811: LD_INT 12
17813: ST_TO_ADDR
// hackCounter := [ ] ;
17814: LD_ADDR_EXP 68
17818: PUSH
17819: EMPTY
17820: ST_TO_ADDR
// end ;
17821: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17822: LD_EXP 63
17826: PUSH
17827: LD_INT 34
17829: PUSH
17830: LD_INT 99
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: AND
17842: IFFALSE 18095
17844: GO 17846
17846: DISABLE
17847: LD_INT 0
17849: PPUSH
17850: PPUSH
// begin enable ;
17851: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17852: LD_ADDR_VAR 0 1
17856: PUSH
17857: LD_INT 34
17859: PUSH
17860: LD_INT 99
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PPUSH
17867: CALL_OW 69
17871: PUSH
17872: FOR_IN
17873: IFFALSE 18093
// begin if not i in hackTanks then
17875: LD_VAR 0 1
17879: PUSH
17880: LD_EXP 64
17884: IN
17885: NOT
17886: IFFALSE 17969
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17888: LD_ADDR_EXP 64
17892: PUSH
17893: LD_EXP 64
17897: PPUSH
17898: LD_EXP 64
17902: PUSH
17903: LD_INT 1
17905: PLUS
17906: PPUSH
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 1
17916: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17917: LD_ADDR_EXP 65
17921: PUSH
17922: LD_EXP 65
17926: PPUSH
17927: LD_EXP 65
17931: PUSH
17932: LD_INT 1
17934: PLUS
17935: PPUSH
17936: EMPTY
17937: PPUSH
17938: CALL_OW 1
17942: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17943: LD_ADDR_EXP 68
17947: PUSH
17948: LD_EXP 68
17952: PPUSH
17953: LD_EXP 68
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: PPUSH
17962: EMPTY
17963: PPUSH
17964: CALL_OW 1
17968: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 302
17978: NOT
17979: IFFALSE 17992
// begin HackUnlinkAll ( i ) ;
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL 18098 0 1
// continue ;
17990: GO 17872
// end ; HackCheckCapturedStatus ( i ) ;
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL 18541 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18001: LD_ADDR_VAR 0 2
18005: PUSH
18006: LD_INT 81
18008: PUSH
18009: LD_VAR 0 1
18013: PPUSH
18014: CALL_OW 255
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 91
18035: PUSH
18036: LD_VAR 0 1
18040: PUSH
18041: LD_EXP 67
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 50
18053: PUSH
18054: EMPTY
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: ST_TO_ADDR
// if not tmp then
18068: LD_VAR 0 2
18072: NOT
18073: IFFALSE 18077
// continue ;
18075: GO 17872
// HackLink ( i , tmp ) ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_VAR 0 2
18086: PPUSH
18087: CALL 18234 0 2
// end ;
18091: GO 17872
18093: POP
18094: POP
// end ;
18095: PPOPN 2
18097: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18098: LD_INT 0
18100: PPUSH
18101: PPUSH
18102: PPUSH
// if not hack in hackTanks then
18103: LD_VAR 0 1
18107: PUSH
18108: LD_EXP 64
18112: IN
18113: NOT
18114: IFFALSE 18118
// exit ;
18116: GO 18229
// index := GetElementIndex ( hackTanks , hack ) ;
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: LD_EXP 64
18127: PPUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL 25834 0 2
18137: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18138: LD_EXP 65
18142: PUSH
18143: LD_VAR 0 4
18147: ARRAY
18148: IFFALSE 18229
// begin for i in hackTanksCaptured [ index ] do
18150: LD_ADDR_VAR 0 3
18154: PUSH
18155: LD_EXP 65
18159: PUSH
18160: LD_VAR 0 4
18164: ARRAY
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18193
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18169: LD_VAR 0 3
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: LD_VAR 0 3
18182: PUSH
18183: LD_INT 2
18185: ARRAY
18186: PPUSH
18187: CALL_OW 235
18191: GO 18166
18193: POP
18194: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18195: LD_ADDR_EXP 65
18199: PUSH
18200: LD_EXP 65
18204: PPUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: EMPTY
18211: PPUSH
18212: CALL_OW 1
18216: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_INT 0
18224: PPUSH
18225: CALL_OW 505
// end ; end ;
18229: LD_VAR 0 2
18233: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
18238: PPUSH
// if not hack in hackTanks or not vehicles then
18239: LD_VAR 0 1
18243: PUSH
18244: LD_EXP 64
18248: IN
18249: NOT
18250: PUSH
18251: LD_VAR 0 2
18255: NOT
18256: OR
18257: IFFALSE 18261
// exit ;
18259: GO 18536
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18261: LD_ADDR_VAR 0 2
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_VAR 0 2
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL 26484 0 4
18286: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18287: LD_ADDR_VAR 0 5
18291: PUSH
18292: LD_EXP 64
18296: PPUSH
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL 25834 0 2
18306: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18307: LD_EXP 65
18311: PUSH
18312: LD_VAR 0 5
18316: ARRAY
18317: PUSH
18318: LD_EXP 66
18322: LESS
18323: IFFALSE 18512
// begin for i := 1 to vehicles do
18325: LD_ADDR_VAR 0 4
18329: PUSH
18330: DOUBLE
18331: LD_INT 1
18333: DEC
18334: ST_TO_ADDR
18335: LD_VAR 0 2
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18510
// begin if hackTanksCaptured [ index ] = hackLimit then
18343: LD_EXP 65
18347: PUSH
18348: LD_VAR 0 5
18352: ARRAY
18353: PUSH
18354: LD_EXP 66
18358: EQUAL
18359: IFFALSE 18363
// break ;
18361: GO 18510
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18363: LD_ADDR_EXP 68
18367: PUSH
18368: LD_EXP 68
18372: PPUSH
18373: LD_VAR 0 5
18377: PPUSH
18378: LD_EXP 68
18382: PUSH
18383: LD_VAR 0 5
18387: ARRAY
18388: PUSH
18389: LD_INT 1
18391: PLUS
18392: PPUSH
18393: CALL_OW 1
18397: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18398: LD_ADDR_EXP 65
18402: PUSH
18403: LD_EXP 65
18407: PPUSH
18408: LD_VAR 0 5
18412: PUSH
18413: LD_EXP 65
18417: PUSH
18418: LD_VAR 0 5
18422: ARRAY
18423: PUSH
18424: LD_INT 1
18426: PLUS
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PPUSH
18432: LD_VAR 0 2
18436: PUSH
18437: LD_VAR 0 4
18441: ARRAY
18442: PUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_VAR 0 4
18452: ARRAY
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL 26049 0 3
18467: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18468: LD_VAR 0 2
18472: PUSH
18473: LD_VAR 0 4
18477: ARRAY
18478: PPUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 255
18488: PPUSH
18489: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18493: LD_VAR 0 2
18497: PUSH
18498: LD_VAR 0 4
18502: ARRAY
18503: PPUSH
18504: CALL_OW 141
// end ;
18508: GO 18340
18510: POP
18511: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_EXP 65
18521: PUSH
18522: LD_VAR 0 5
18526: ARRAY
18527: PUSH
18528: LD_INT 0
18530: PLUS
18531: PPUSH
18532: CALL_OW 505
// end ;
18536: LD_VAR 0 3
18540: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
// if not hack in hackTanks then
18547: LD_VAR 0 1
18551: PUSH
18552: LD_EXP 64
18556: IN
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18802
// index := GetElementIndex ( hackTanks , hack ) ;
18562: LD_ADDR_VAR 0 4
18566: PUSH
18567: LD_EXP 64
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL 25834 0 2
18581: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: DOUBLE
18588: LD_EXP 65
18592: PUSH
18593: LD_VAR 0 4
18597: ARRAY
18598: INC
18599: ST_TO_ADDR
18600: LD_INT 1
18602: PUSH
18603: FOR_DOWNTO
18604: IFFALSE 18776
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18606: LD_ADDR_VAR 0 5
18610: PUSH
18611: LD_EXP 65
18615: PUSH
18616: LD_VAR 0 4
18620: ARRAY
18621: PUSH
18622: LD_VAR 0 3
18626: ARRAY
18627: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18628: LD_VAR 0 5
18632: PUSH
18633: LD_INT 1
18635: ARRAY
18636: PPUSH
18637: CALL_OW 302
18641: NOT
18642: PUSH
18643: LD_VAR 0 5
18647: PUSH
18648: LD_INT 1
18650: ARRAY
18651: PPUSH
18652: CALL_OW 255
18656: PUSH
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 255
18666: NONEQUAL
18667: OR
18668: IFFALSE 18774
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18670: LD_VAR 0 5
18674: PUSH
18675: LD_INT 1
18677: ARRAY
18678: PPUSH
18679: CALL_OW 305
18683: PUSH
18684: LD_VAR 0 5
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: PPUSH
18693: CALL_OW 255
18697: PUSH
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL_OW 255
18707: EQUAL
18708: AND
18709: IFFALSE 18733
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18711: LD_VAR 0 5
18715: PUSH
18716: LD_INT 1
18718: ARRAY
18719: PPUSH
18720: LD_VAR 0 5
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18733: LD_ADDR_EXP 65
18737: PUSH
18738: LD_EXP 65
18742: PPUSH
18743: LD_VAR 0 4
18747: PPUSH
18748: LD_EXP 65
18752: PUSH
18753: LD_VAR 0 4
18757: ARRAY
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: CALL_OW 3
18768: PPUSH
18769: CALL_OW 1
18773: ST_TO_ADDR
// end ; end ;
18774: GO 18603
18776: POP
18777: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18778: LD_VAR 0 1
18782: PPUSH
18783: LD_EXP 65
18787: PUSH
18788: LD_VAR 0 4
18792: ARRAY
18793: PUSH
18794: LD_INT 0
18796: PLUS
18797: PPUSH
18798: CALL_OW 505
// end ;
18802: LD_VAR 0 2
18806: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18807: LD_INT 0
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
// if not hack in hackTanks then
18813: LD_VAR 0 1
18817: PUSH
18818: LD_EXP 64
18822: IN
18823: NOT
18824: IFFALSE 18828
// exit ;
18826: GO 18913
// index := GetElementIndex ( hackTanks , hack ) ;
18828: LD_ADDR_VAR 0 5
18832: PUSH
18833: LD_EXP 64
18837: PPUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL 25834 0 2
18847: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18848: LD_ADDR_VAR 0 4
18852: PUSH
18853: DOUBLE
18854: LD_INT 1
18856: DEC
18857: ST_TO_ADDR
18858: LD_EXP 65
18862: PUSH
18863: LD_VAR 0 5
18867: ARRAY
18868: PUSH
18869: FOR_TO
18870: IFFALSE 18911
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18872: LD_EXP 65
18876: PUSH
18877: LD_VAR 0 5
18881: ARRAY
18882: PUSH
18883: LD_VAR 0 4
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: ARRAY
18892: PUSH
18893: LD_VAR 0 2
18897: EQUAL
18898: IFFALSE 18909
// KillUnit ( vehicle ) ;
18900: LD_VAR 0 2
18904: PPUSH
18905: CALL_OW 66
18909: GO 18869
18911: POP
18912: POP
// end ;
18913: LD_VAR 0 3
18917: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18918: LD_EXP 69
18922: NOT
18923: IFFALSE 18958
18925: GO 18927
18927: DISABLE
// begin initMiner := true ;
18928: LD_ADDR_EXP 69
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// minersList := [ ] ;
18936: LD_ADDR_EXP 70
18940: PUSH
18941: EMPTY
18942: ST_TO_ADDR
// minerMinesList := [ ] ;
18943: LD_ADDR_EXP 71
18947: PUSH
18948: EMPTY
18949: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18950: LD_ADDR_EXP 72
18954: PUSH
18955: LD_INT 5
18957: ST_TO_ADDR
// end ;
18958: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18959: LD_EXP 69
18963: PUSH
18964: LD_INT 34
18966: PUSH
18967: LD_INT 81
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 69
18978: AND
18979: IFFALSE 19440
18981: GO 18983
18983: DISABLE
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
// begin enable ;
18990: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18991: LD_ADDR_VAR 0 1
18995: PUSH
18996: LD_INT 34
18998: PUSH
18999: LD_INT 81
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PPUSH
19006: CALL_OW 69
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19084
// begin if not i in minersList then
19014: LD_VAR 0 1
19018: PUSH
19019: LD_EXP 70
19023: IN
19024: NOT
19025: IFFALSE 19082
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19027: LD_ADDR_EXP 70
19031: PUSH
19032: LD_EXP 70
19036: PPUSH
19037: LD_EXP 70
19041: PUSH
19042: LD_INT 1
19044: PLUS
19045: PPUSH
19046: LD_VAR 0 1
19050: PPUSH
19051: CALL_OW 1
19055: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19056: LD_ADDR_EXP 71
19060: PUSH
19061: LD_EXP 71
19065: PPUSH
19066: LD_EXP 71
19070: PUSH
19071: LD_INT 1
19073: PLUS
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: CALL_OW 1
19081: ST_TO_ADDR
// end end ;
19082: GO 19011
19084: POP
19085: POP
// for i := minerMinesList downto 1 do
19086: LD_ADDR_VAR 0 1
19090: PUSH
19091: DOUBLE
19092: LD_EXP 71
19096: INC
19097: ST_TO_ADDR
19098: LD_INT 1
19100: PUSH
19101: FOR_DOWNTO
19102: IFFALSE 19438
// begin if IsLive ( minersList [ i ] ) then
19104: LD_EXP 70
19108: PUSH
19109: LD_VAR 0 1
19113: ARRAY
19114: PPUSH
19115: CALL_OW 300
19119: IFFALSE 19147
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19121: LD_EXP 70
19125: PUSH
19126: LD_VAR 0 1
19130: ARRAY
19131: PPUSH
19132: LD_EXP 71
19136: PUSH
19137: LD_VAR 0 1
19141: ARRAY
19142: PPUSH
19143: CALL_OW 505
// if not minerMinesList [ i ] then
19147: LD_EXP 71
19151: PUSH
19152: LD_VAR 0 1
19156: ARRAY
19157: NOT
19158: IFFALSE 19162
// continue ;
19160: GO 19101
// for j := minerMinesList [ i ] downto 1 do
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: DOUBLE
19168: LD_EXP 71
19172: PUSH
19173: LD_VAR 0 1
19177: ARRAY
19178: INC
19179: ST_TO_ADDR
19180: LD_INT 1
19182: PUSH
19183: FOR_DOWNTO
19184: IFFALSE 19434
// begin side := GetSide ( minersList [ i ] ) ;
19186: LD_ADDR_VAR 0 3
19190: PUSH
19191: LD_EXP 70
19195: PUSH
19196: LD_VAR 0 1
19200: ARRAY
19201: PPUSH
19202: CALL_OW 255
19206: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19207: LD_ADDR_VAR 0 4
19211: PUSH
19212: LD_EXP 71
19216: PUSH
19217: LD_VAR 0 1
19221: ARRAY
19222: PUSH
19223: LD_VAR 0 2
19227: ARRAY
19228: PUSH
19229: LD_INT 1
19231: ARRAY
19232: PPUSH
19233: LD_EXP 71
19237: PUSH
19238: LD_VAR 0 1
19242: ARRAY
19243: PUSH
19244: LD_VAR 0 2
19248: ARRAY
19249: PUSH
19250: LD_INT 2
19252: ARRAY
19253: PPUSH
19254: CALL_OW 428
19258: ST_TO_ADDR
// if not tmp then
19259: LD_VAR 0 4
19263: NOT
19264: IFFALSE 19268
// continue ;
19266: GO 19183
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19268: LD_VAR 0 4
19272: PUSH
19273: LD_INT 81
19275: PUSH
19276: LD_VAR 0 3
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PPUSH
19285: CALL_OW 69
19289: IN
19290: PUSH
19291: LD_EXP 71
19295: PUSH
19296: LD_VAR 0 1
19300: ARRAY
19301: PUSH
19302: LD_VAR 0 2
19306: ARRAY
19307: PUSH
19308: LD_INT 1
19310: ARRAY
19311: PPUSH
19312: LD_EXP 71
19316: PUSH
19317: LD_VAR 0 1
19321: ARRAY
19322: PUSH
19323: LD_VAR 0 2
19327: ARRAY
19328: PUSH
19329: LD_INT 2
19331: ARRAY
19332: PPUSH
19333: CALL_OW 458
19337: AND
19338: IFFALSE 19432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19340: LD_EXP 71
19344: PUSH
19345: LD_VAR 0 1
19349: ARRAY
19350: PUSH
19351: LD_VAR 0 2
19355: ARRAY
19356: PUSH
19357: LD_INT 1
19359: ARRAY
19360: PPUSH
19361: LD_EXP 71
19365: PUSH
19366: LD_VAR 0 1
19370: ARRAY
19371: PUSH
19372: LD_VAR 0 2
19376: ARRAY
19377: PUSH
19378: LD_INT 2
19380: ARRAY
19381: PPUSH
19382: LD_VAR 0 3
19386: PPUSH
19387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19391: LD_ADDR_EXP 71
19395: PUSH
19396: LD_EXP 71
19400: PPUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: LD_EXP 71
19410: PUSH
19411: LD_VAR 0 1
19415: ARRAY
19416: PPUSH
19417: LD_VAR 0 2
19421: PPUSH
19422: CALL_OW 3
19426: PPUSH
19427: CALL_OW 1
19431: ST_TO_ADDR
// end ; end ;
19432: GO 19183
19434: POP
19435: POP
// end ;
19436: GO 19101
19438: POP
19439: POP
// end ;
19440: PPOPN 4
19442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
// result := false ;
19447: LD_ADDR_VAR 0 4
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19455: LD_VAR 0 1
19459: PPUSH
19460: CALL_OW 264
19464: PUSH
19465: LD_INT 81
19467: EQUAL
19468: NOT
19469: IFFALSE 19473
// exit ;
19471: GO 19713
// index := GetElementIndex ( minersList , unit ) ;
19473: LD_ADDR_VAR 0 5
19477: PUSH
19478: LD_EXP 70
19482: PPUSH
19483: LD_VAR 0 1
19487: PPUSH
19488: CALL 25834 0 2
19492: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19493: LD_EXP 71
19497: PUSH
19498: LD_VAR 0 5
19502: ARRAY
19503: PUSH
19504: LD_EXP 72
19508: GREATEREQUAL
19509: IFFALSE 19513
// exit ;
19511: GO 19713
// ComMoveXY ( unit , x , y ) ;
19513: LD_VAR 0 1
19517: PPUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: LD_VAR 0 3
19527: PPUSH
19528: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19532: LD_INT 35
19534: PPUSH
19535: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_VAR 0 2
19548: PPUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: CALL 57575 0 3
19558: NOT
19559: PUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 314
19569: AND
19570: IFFALSE 19574
// exit ;
19572: GO 19713
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19574: LD_VAR 0 2
19578: PPUSH
19579: LD_VAR 0 3
19583: PPUSH
19584: CALL_OW 428
19588: PUSH
19589: LD_VAR 0 1
19593: EQUAL
19594: PUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 314
19604: NOT
19605: AND
19606: IFFALSE 19532
// PlaySoundXY ( x , y , PlantMine ) ;
19608: LD_VAR 0 2
19612: PPUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_STRING PlantMine
19620: PPUSH
19621: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19625: LD_VAR 0 2
19629: PPUSH
19630: LD_VAR 0 3
19634: PPUSH
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 255
19644: PPUSH
19645: LD_INT 0
19647: PPUSH
19648: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19652: LD_ADDR_EXP 71
19656: PUSH
19657: LD_EXP 71
19661: PPUSH
19662: LD_VAR 0 5
19666: PUSH
19667: LD_EXP 71
19671: PUSH
19672: LD_VAR 0 5
19676: ARRAY
19677: PUSH
19678: LD_INT 1
19680: PLUS
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: LD_VAR 0 2
19690: PUSH
19691: LD_VAR 0 3
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL 26049 0 3
19704: ST_TO_ADDR
// result := true ;
19705: LD_ADDR_VAR 0 4
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// end ;
19713: LD_VAR 0 4
19717: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19718: LD_INT 0
19720: PPUSH
19721: PPUSH
19722: PPUSH
// if not unit in minersList then
19723: LD_VAR 0 1
19727: PUSH
19728: LD_EXP 70
19732: IN
19733: NOT
19734: IFFALSE 19738
// exit ;
19736: GO 20130
// index := GetElementIndex ( minersList , unit ) ;
19738: LD_ADDR_VAR 0 6
19742: PUSH
19743: LD_EXP 70
19747: PPUSH
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL 25834 0 2
19757: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19758: LD_ADDR_VAR 0 5
19762: PUSH
19763: DOUBLE
19764: LD_EXP 71
19768: PUSH
19769: LD_VAR 0 6
19773: ARRAY
19774: INC
19775: ST_TO_ADDR
19776: LD_INT 1
19778: PUSH
19779: FOR_DOWNTO
19780: IFFALSE 19941
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19782: LD_EXP 71
19786: PUSH
19787: LD_VAR 0 6
19791: ARRAY
19792: PUSH
19793: LD_VAR 0 5
19797: ARRAY
19798: PUSH
19799: LD_INT 1
19801: ARRAY
19802: PUSH
19803: LD_VAR 0 2
19807: EQUAL
19808: PUSH
19809: LD_EXP 71
19813: PUSH
19814: LD_VAR 0 6
19818: ARRAY
19819: PUSH
19820: LD_VAR 0 5
19824: ARRAY
19825: PUSH
19826: LD_INT 2
19828: ARRAY
19829: PUSH
19830: LD_VAR 0 3
19834: EQUAL
19835: AND
19836: IFFALSE 19939
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19838: LD_EXP 71
19842: PUSH
19843: LD_VAR 0 6
19847: ARRAY
19848: PUSH
19849: LD_VAR 0 5
19853: ARRAY
19854: PUSH
19855: LD_INT 1
19857: ARRAY
19858: PPUSH
19859: LD_EXP 71
19863: PUSH
19864: LD_VAR 0 6
19868: ARRAY
19869: PUSH
19870: LD_VAR 0 5
19874: ARRAY
19875: PUSH
19876: LD_INT 2
19878: ARRAY
19879: PPUSH
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 255
19889: PPUSH
19890: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19894: LD_ADDR_EXP 71
19898: PUSH
19899: LD_EXP 71
19903: PPUSH
19904: LD_VAR 0 6
19908: PPUSH
19909: LD_EXP 71
19913: PUSH
19914: LD_VAR 0 6
19918: ARRAY
19919: PPUSH
19920: LD_VAR 0 5
19924: PPUSH
19925: CALL_OW 3
19929: PPUSH
19930: CALL_OW 1
19934: ST_TO_ADDR
// exit ;
19935: POP
19936: POP
19937: GO 20130
// end ; end ;
19939: GO 19779
19941: POP
19942: POP
// for i := minerMinesList [ index ] downto 1 do
19943: LD_ADDR_VAR 0 5
19947: PUSH
19948: DOUBLE
19949: LD_EXP 71
19953: PUSH
19954: LD_VAR 0 6
19958: ARRAY
19959: INC
19960: ST_TO_ADDR
19961: LD_INT 1
19963: PUSH
19964: FOR_DOWNTO
19965: IFFALSE 20128
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19967: LD_EXP 71
19971: PUSH
19972: LD_VAR 0 6
19976: ARRAY
19977: PUSH
19978: LD_VAR 0 5
19982: ARRAY
19983: PUSH
19984: LD_INT 1
19986: ARRAY
19987: PPUSH
19988: LD_EXP 71
19992: PUSH
19993: LD_VAR 0 6
19997: ARRAY
19998: PUSH
19999: LD_VAR 0 5
20003: ARRAY
20004: PUSH
20005: LD_INT 2
20007: ARRAY
20008: PPUSH
20009: LD_VAR 0 2
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: CALL_OW 298
20023: PUSH
20024: LD_INT 6
20026: LESS
20027: IFFALSE 20126
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20029: LD_EXP 71
20033: PUSH
20034: LD_VAR 0 6
20038: ARRAY
20039: PUSH
20040: LD_VAR 0 5
20044: ARRAY
20045: PUSH
20046: LD_INT 1
20048: ARRAY
20049: PPUSH
20050: LD_EXP 71
20054: PUSH
20055: LD_VAR 0 6
20059: ARRAY
20060: PUSH
20061: LD_VAR 0 5
20065: ARRAY
20066: PUSH
20067: LD_INT 2
20069: ARRAY
20070: PPUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 255
20080: PPUSH
20081: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20085: LD_ADDR_EXP 71
20089: PUSH
20090: LD_EXP 71
20094: PPUSH
20095: LD_VAR 0 6
20099: PPUSH
20100: LD_EXP 71
20104: PUSH
20105: LD_VAR 0 6
20109: ARRAY
20110: PPUSH
20111: LD_VAR 0 5
20115: PPUSH
20116: CALL_OW 3
20120: PPUSH
20121: CALL_OW 1
20125: ST_TO_ADDR
// end ; end ;
20126: GO 19964
20128: POP
20129: POP
// end ;
20130: LD_VAR 0 4
20134: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 264
20155: PUSH
20156: LD_INT 81
20158: EQUAL
20159: NOT
20160: PUSH
20161: LD_VAR 0 1
20165: PUSH
20166: LD_EXP 70
20170: IN
20171: NOT
20172: OR
20173: IFFALSE 20177
// exit ;
20175: GO 20499
// index := GetElementIndex ( minersList , unit ) ;
20177: LD_ADDR_VAR 0 6
20181: PUSH
20182: LD_EXP 70
20186: PPUSH
20187: LD_VAR 0 1
20191: PPUSH
20192: CALL 25834 0 2
20196: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20197: LD_ADDR_VAR 0 8
20201: PUSH
20202: LD_EXP 72
20206: PUSH
20207: LD_EXP 71
20211: PUSH
20212: LD_VAR 0 6
20216: ARRAY
20217: MINUS
20218: ST_TO_ADDR
// if not minesFreeAmount then
20219: LD_VAR 0 8
20223: NOT
20224: IFFALSE 20228
// exit ;
20226: GO 20499
// tmp := [ ] ;
20228: LD_ADDR_VAR 0 7
20232: PUSH
20233: EMPTY
20234: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20235: LD_ADDR_VAR 0 5
20239: PUSH
20240: DOUBLE
20241: LD_INT 1
20243: DEC
20244: ST_TO_ADDR
20245: LD_VAR 0 8
20249: PUSH
20250: FOR_TO
20251: IFFALSE 20446
// begin _d := rand ( 0 , 5 ) ;
20253: LD_ADDR_VAR 0 11
20257: PUSH
20258: LD_INT 0
20260: PPUSH
20261: LD_INT 5
20263: PPUSH
20264: CALL_OW 12
20268: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20269: LD_ADDR_VAR 0 12
20273: PUSH
20274: LD_INT 2
20276: PPUSH
20277: LD_INT 6
20279: PPUSH
20280: CALL_OW 12
20284: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20285: LD_ADDR_VAR 0 9
20289: PUSH
20290: LD_VAR 0 2
20294: PPUSH
20295: LD_VAR 0 11
20299: PPUSH
20300: LD_VAR 0 12
20304: PPUSH
20305: CALL_OW 272
20309: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20310: LD_ADDR_VAR 0 10
20314: PUSH
20315: LD_VAR 0 3
20319: PPUSH
20320: LD_VAR 0 11
20324: PPUSH
20325: LD_VAR 0 12
20329: PPUSH
20330: CALL_OW 273
20334: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20335: LD_VAR 0 9
20339: PPUSH
20340: LD_VAR 0 10
20344: PPUSH
20345: CALL_OW 488
20349: PUSH
20350: LD_VAR 0 9
20354: PUSH
20355: LD_VAR 0 10
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_VAR 0 7
20368: IN
20369: NOT
20370: AND
20371: PUSH
20372: LD_VAR 0 9
20376: PPUSH
20377: LD_VAR 0 10
20381: PPUSH
20382: CALL_OW 458
20386: NOT
20387: AND
20388: IFFALSE 20430
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20390: LD_ADDR_VAR 0 7
20394: PUSH
20395: LD_VAR 0 7
20399: PPUSH
20400: LD_VAR 0 7
20404: PUSH
20405: LD_INT 1
20407: PLUS
20408: PPUSH
20409: LD_VAR 0 9
20413: PUSH
20414: LD_VAR 0 10
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PPUSH
20423: CALL_OW 1
20427: ST_TO_ADDR
20428: GO 20444
// i := i - 1 ;
20430: LD_ADDR_VAR 0 5
20434: PUSH
20435: LD_VAR 0 5
20439: PUSH
20440: LD_INT 1
20442: MINUS
20443: ST_TO_ADDR
// end ;
20444: GO 20250
20446: POP
20447: POP
// for i in tmp do
20448: LD_ADDR_VAR 0 5
20452: PUSH
20453: LD_VAR 0 7
20457: PUSH
20458: FOR_IN
20459: IFFALSE 20497
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20461: LD_VAR 0 1
20465: PPUSH
20466: LD_VAR 0 5
20470: PUSH
20471: LD_INT 1
20473: ARRAY
20474: PPUSH
20475: LD_VAR 0 5
20479: PUSH
20480: LD_INT 2
20482: ARRAY
20483: PPUSH
20484: CALL 19443 0 3
20488: NOT
20489: IFFALSE 20495
// exit ;
20491: POP
20492: POP
20493: GO 20499
20495: GO 20458
20497: POP
20498: POP
// end ;
20499: LD_VAR 0 4
20503: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20504: LD_INT 0
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// if not GetClass ( unit ) = class_sniper then
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 257
20522: PUSH
20523: LD_INT 5
20525: EQUAL
20526: NOT
20527: IFFALSE 20531
// exit ;
20529: GO 20919
// dist := 8 ;
20531: LD_ADDR_VAR 0 5
20535: PUSH
20536: LD_INT 8
20538: ST_TO_ADDR
// viewRange := 12 ;
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_INT 12
20546: ST_TO_ADDR
// side := GetSide ( unit ) ;
20547: LD_ADDR_VAR 0 6
20551: PUSH
20552: LD_VAR 0 1
20556: PPUSH
20557: CALL_OW 255
20561: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20562: LD_INT 61
20564: PPUSH
20565: LD_VAR 0 6
20569: PPUSH
20570: CALL_OW 321
20574: PUSH
20575: LD_INT 2
20577: EQUAL
20578: IFFALSE 20588
// viewRange := 16 ;
20580: LD_ADDR_VAR 0 7
20584: PUSH
20585: LD_INT 16
20587: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20588: LD_VAR 0 1
20592: PPUSH
20593: LD_VAR 0 2
20597: PPUSH
20598: LD_VAR 0 3
20602: PPUSH
20603: CALL_OW 297
20607: PUSH
20608: LD_VAR 0 5
20612: GREATER
20613: IFFALSE 20692
// begin ComMoveXY ( unit , x , y ) ;
20615: LD_VAR 0 1
20619: PPUSH
20620: LD_VAR 0 2
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20634: LD_INT 35
20636: PPUSH
20637: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20641: LD_VAR 0 1
20645: PPUSH
20646: LD_VAR 0 2
20650: PPUSH
20651: LD_VAR 0 3
20655: PPUSH
20656: CALL 57575 0 3
20660: NOT
20661: IFFALSE 20665
// exit ;
20663: GO 20919
// until GetDistUnitXY ( unit , x , y ) < dist ;
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_VAR 0 2
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: CALL_OW 297
20684: PUSH
20685: LD_VAR 0 5
20689: LESS
20690: IFFALSE 20634
// end ; ComTurnXY ( unit , x , y ) ;
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_VAR 0 2
20701: PPUSH
20702: LD_VAR 0 3
20706: PPUSH
20707: CALL_OW 118
// wait ( 5 ) ;
20711: LD_INT 5
20713: PPUSH
20714: CALL_OW 67
// _d := GetDir ( unit ) ;
20718: LD_ADDR_VAR 0 10
20722: PUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 254
20732: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20733: LD_ADDR_VAR 0 8
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: CALL_OW 250
20747: PPUSH
20748: LD_VAR 0 10
20752: PPUSH
20753: LD_VAR 0 5
20757: PPUSH
20758: CALL_OW 272
20762: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20763: LD_ADDR_VAR 0 9
20767: PUSH
20768: LD_VAR 0 1
20772: PPUSH
20773: CALL_OW 251
20777: PPUSH
20778: LD_VAR 0 10
20782: PPUSH
20783: LD_VAR 0 5
20787: PPUSH
20788: CALL_OW 273
20792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20793: LD_VAR 0 8
20797: PPUSH
20798: LD_VAR 0 9
20802: PPUSH
20803: CALL_OW 488
20807: NOT
20808: IFFALSE 20812
// exit ;
20810: GO 20919
// ComAnimCustom ( unit , 1 ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20824: LD_VAR 0 8
20828: PPUSH
20829: LD_VAR 0 9
20833: PPUSH
20834: LD_VAR 0 6
20838: PPUSH
20839: LD_VAR 0 7
20843: PPUSH
20844: CALL_OW 330
// repeat wait ( 1 ) ;
20848: LD_INT 1
20850: PPUSH
20851: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 316
20864: PUSH
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL_OW 314
20874: OR
20875: PUSH
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL_OW 302
20885: NOT
20886: OR
20887: PUSH
20888: LD_VAR 0 1
20892: PPUSH
20893: CALL_OW 301
20897: OR
20898: IFFALSE 20848
// RemoveSeeing ( _x , _y , side ) ;
20900: LD_VAR 0 8
20904: PPUSH
20905: LD_VAR 0 9
20909: PPUSH
20910: LD_VAR 0 6
20914: PPUSH
20915: CALL_OW 331
// end ; end_of_file
20919: LD_VAR 0 4
20923: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20924: LD_VAR 0 1
20928: PUSH
20929: LD_INT 200
20931: DOUBLE
20932: GREATEREQUAL
20933: IFFALSE 20941
20935: LD_INT 299
20937: DOUBLE
20938: LESSEQUAL
20939: IFTRUE 20943
20941: GO 20975
20943: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20944: LD_VAR 0 1
20948: PPUSH
20949: LD_VAR 0 2
20953: PPUSH
20954: LD_VAR 0 3
20958: PPUSH
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_VAR 0 5
20968: PPUSH
20969: CALL 16406 0 5
20973: GO 21052
20975: LD_INT 300
20977: DOUBLE
20978: GREATEREQUAL
20979: IFFALSE 20987
20981: LD_INT 399
20983: DOUBLE
20984: LESSEQUAL
20985: IFTRUE 20989
20987: GO 21051
20989: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20990: LD_VAR 0 1
20994: PPUSH
20995: LD_VAR 0 2
20999: PPUSH
21000: LD_VAR 0 3
21004: PPUSH
21005: LD_VAR 0 4
21009: PPUSH
21010: LD_VAR 0 5
21014: PPUSH
21015: LD_VAR 0 6
21019: PPUSH
21020: LD_VAR 0 7
21024: PPUSH
21025: LD_VAR 0 8
21029: PPUSH
21030: LD_VAR 0 9
21034: PPUSH
21035: LD_VAR 0 10
21039: PPUSH
21040: LD_VAR 0 11
21044: PPUSH
21045: CALL 12658 0 11
21049: GO 21052
21051: POP
// end ;
21052: PPOPN 11
21054: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_VAR 0 2
21064: PPUSH
21065: LD_VAR 0 3
21069: PPUSH
21070: LD_VAR 0 4
21074: PPUSH
21075: LD_VAR 0 5
21079: PPUSH
21080: CALL 16069 0 5
// end ; end_of_file
21084: PPOPN 5
21086: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21087: LD_INT 0
21089: PPUSH
21090: PPUSH
// if exist_mode then
21091: LD_VAR 0 2
21095: IFFALSE 21120
// unit := CreateCharacter ( prefix & ident ) else
21097: LD_ADDR_VAR 0 5
21101: PUSH
21102: LD_VAR 0 3
21106: PUSH
21107: LD_VAR 0 1
21111: STR
21112: PPUSH
21113: CALL_OW 34
21117: ST_TO_ADDR
21118: GO 21135
// unit := NewCharacter ( ident ) ;
21120: LD_ADDR_VAR 0 5
21124: PUSH
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 25
21134: ST_TO_ADDR
// result := unit ;
21135: LD_ADDR_VAR 0 4
21139: PUSH
21140: LD_VAR 0 5
21144: ST_TO_ADDR
// end ;
21145: LD_VAR 0 4
21149: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21150: LD_INT 0
21152: PPUSH
21153: PPUSH
// if not side or not nation then
21154: LD_VAR 0 1
21158: NOT
21159: PUSH
21160: LD_VAR 0 2
21164: NOT
21165: OR
21166: IFFALSE 21170
// exit ;
21168: GO 21938
// case nation of nation_american :
21170: LD_VAR 0 2
21174: PUSH
21175: LD_INT 1
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 21397
21183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21184: LD_ADDR_VAR 0 4
21188: PUSH
21189: LD_INT 35
21191: PUSH
21192: LD_INT 45
21194: PUSH
21195: LD_INT 46
21197: PUSH
21198: LD_INT 47
21200: PUSH
21201: LD_INT 82
21203: PUSH
21204: LD_INT 83
21206: PUSH
21207: LD_INT 84
21209: PUSH
21210: LD_INT 85
21212: PUSH
21213: LD_INT 86
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 6
21224: PUSH
21225: LD_INT 15
21227: PUSH
21228: LD_INT 16
21230: PUSH
21231: LD_INT 7
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 13
21239: PUSH
21240: LD_INT 10
21242: PUSH
21243: LD_INT 14
21245: PUSH
21246: LD_INT 20
21248: PUSH
21249: LD_INT 21
21251: PUSH
21252: LD_INT 22
21254: PUSH
21255: LD_INT 25
21257: PUSH
21258: LD_INT 32
21260: PUSH
21261: LD_INT 27
21263: PUSH
21264: LD_INT 36
21266: PUSH
21267: LD_INT 69
21269: PUSH
21270: LD_INT 39
21272: PUSH
21273: LD_INT 34
21275: PUSH
21276: LD_INT 40
21278: PUSH
21279: LD_INT 48
21281: PUSH
21282: LD_INT 49
21284: PUSH
21285: LD_INT 50
21287: PUSH
21288: LD_INT 51
21290: PUSH
21291: LD_INT 52
21293: PUSH
21294: LD_INT 53
21296: PUSH
21297: LD_INT 54
21299: PUSH
21300: LD_INT 55
21302: PUSH
21303: LD_INT 56
21305: PUSH
21306: LD_INT 57
21308: PUSH
21309: LD_INT 58
21311: PUSH
21312: LD_INT 59
21314: PUSH
21315: LD_INT 60
21317: PUSH
21318: LD_INT 61
21320: PUSH
21321: LD_INT 62
21323: PUSH
21324: LD_INT 80
21326: PUSH
21327: LD_INT 82
21329: PUSH
21330: LD_INT 83
21332: PUSH
21333: LD_INT 84
21335: PUSH
21336: LD_INT 85
21338: PUSH
21339: LD_INT 86
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: ST_TO_ADDR
21395: GO 21862
21397: LD_INT 2
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21631
21405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21406: LD_ADDR_VAR 0 4
21410: PUSH
21411: LD_INT 35
21413: PUSH
21414: LD_INT 45
21416: PUSH
21417: LD_INT 46
21419: PUSH
21420: LD_INT 47
21422: PUSH
21423: LD_INT 82
21425: PUSH
21426: LD_INT 83
21428: PUSH
21429: LD_INT 84
21431: PUSH
21432: LD_INT 85
21434: PUSH
21435: LD_INT 87
21437: PUSH
21438: LD_INT 70
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: LD_INT 11
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: LD_INT 4
21452: PUSH
21453: LD_INT 5
21455: PUSH
21456: LD_INT 6
21458: PUSH
21459: LD_INT 15
21461: PUSH
21462: LD_INT 18
21464: PUSH
21465: LD_INT 7
21467: PUSH
21468: LD_INT 17
21470: PUSH
21471: LD_INT 8
21473: PUSH
21474: LD_INT 20
21476: PUSH
21477: LD_INT 21
21479: PUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 72
21485: PUSH
21486: LD_INT 26
21488: PUSH
21489: LD_INT 69
21491: PUSH
21492: LD_INT 39
21494: PUSH
21495: LD_INT 40
21497: PUSH
21498: LD_INT 41
21500: PUSH
21501: LD_INT 42
21503: PUSH
21504: LD_INT 43
21506: PUSH
21507: LD_INT 48
21509: PUSH
21510: LD_INT 49
21512: PUSH
21513: LD_INT 50
21515: PUSH
21516: LD_INT 51
21518: PUSH
21519: LD_INT 52
21521: PUSH
21522: LD_INT 53
21524: PUSH
21525: LD_INT 54
21527: PUSH
21528: LD_INT 55
21530: PUSH
21531: LD_INT 56
21533: PUSH
21534: LD_INT 60
21536: PUSH
21537: LD_INT 61
21539: PUSH
21540: LD_INT 62
21542: PUSH
21543: LD_INT 66
21545: PUSH
21546: LD_INT 67
21548: PUSH
21549: LD_INT 68
21551: PUSH
21552: LD_INT 81
21554: PUSH
21555: LD_INT 82
21557: PUSH
21558: LD_INT 83
21560: PUSH
21561: LD_INT 84
21563: PUSH
21564: LD_INT 85
21566: PUSH
21567: LD_INT 87
21569: PUSH
21570: LD_INT 88
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: ST_TO_ADDR
21629: GO 21862
21631: LD_INT 3
21633: DOUBLE
21634: EQUAL
21635: IFTRUE 21639
21637: GO 21861
21639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21640: LD_ADDR_VAR 0 4
21644: PUSH
21645: LD_INT 46
21647: PUSH
21648: LD_INT 47
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: LD_INT 82
21659: PUSH
21660: LD_INT 83
21662: PUSH
21663: LD_INT 84
21665: PUSH
21666: LD_INT 85
21668: PUSH
21669: LD_INT 86
21671: PUSH
21672: LD_INT 11
21674: PUSH
21675: LD_INT 9
21677: PUSH
21678: LD_INT 20
21680: PUSH
21681: LD_INT 19
21683: PUSH
21684: LD_INT 21
21686: PUSH
21687: LD_INT 24
21689: PUSH
21690: LD_INT 22
21692: PUSH
21693: LD_INT 25
21695: PUSH
21696: LD_INT 28
21698: PUSH
21699: LD_INT 29
21701: PUSH
21702: LD_INT 30
21704: PUSH
21705: LD_INT 31
21707: PUSH
21708: LD_INT 37
21710: PUSH
21711: LD_INT 38
21713: PUSH
21714: LD_INT 32
21716: PUSH
21717: LD_INT 27
21719: PUSH
21720: LD_INT 33
21722: PUSH
21723: LD_INT 69
21725: PUSH
21726: LD_INT 39
21728: PUSH
21729: LD_INT 34
21731: PUSH
21732: LD_INT 40
21734: PUSH
21735: LD_INT 71
21737: PUSH
21738: LD_INT 23
21740: PUSH
21741: LD_INT 44
21743: PUSH
21744: LD_INT 48
21746: PUSH
21747: LD_INT 49
21749: PUSH
21750: LD_INT 50
21752: PUSH
21753: LD_INT 51
21755: PUSH
21756: LD_INT 52
21758: PUSH
21759: LD_INT 53
21761: PUSH
21762: LD_INT 54
21764: PUSH
21765: LD_INT 55
21767: PUSH
21768: LD_INT 56
21770: PUSH
21771: LD_INT 57
21773: PUSH
21774: LD_INT 58
21776: PUSH
21777: LD_INT 59
21779: PUSH
21780: LD_INT 63
21782: PUSH
21783: LD_INT 64
21785: PUSH
21786: LD_INT 65
21788: PUSH
21789: LD_INT 82
21791: PUSH
21792: LD_INT 83
21794: PUSH
21795: LD_INT 84
21797: PUSH
21798: LD_INT 85
21800: PUSH
21801: LD_INT 86
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: ST_TO_ADDR
21859: GO 21862
21861: POP
// if state > - 1 and state < 3 then
21862: LD_VAR 0 3
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: GREATER
21871: PUSH
21872: LD_VAR 0 3
21876: PUSH
21877: LD_INT 3
21879: LESS
21880: AND
21881: IFFALSE 21938
// for i in result do
21883: LD_ADDR_VAR 0 5
21887: PUSH
21888: LD_VAR 0 4
21892: PUSH
21893: FOR_IN
21894: IFFALSE 21936
// if GetTech ( i , side ) <> state then
21896: LD_VAR 0 5
21900: PPUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 321
21910: PUSH
21911: LD_VAR 0 3
21915: NONEQUAL
21916: IFFALSE 21934
// result := result diff i ;
21918: LD_ADDR_VAR 0 4
21922: PUSH
21923: LD_VAR 0 4
21927: PUSH
21928: LD_VAR 0 5
21932: DIFF
21933: ST_TO_ADDR
21934: GO 21893
21936: POP
21937: POP
// end ;
21938: LD_VAR 0 4
21942: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21943: LD_INT 0
21945: PPUSH
21946: PPUSH
21947: PPUSH
// result := true ;
21948: LD_ADDR_VAR 0 3
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: CALL_OW 480
21970: ST_TO_ADDR
// if not tmp then
21971: LD_VAR 0 5
21975: NOT
21976: IFFALSE 21980
// exit ;
21978: GO 22029
// for i in tmp do
21980: LD_ADDR_VAR 0 4
21984: PUSH
21985: LD_VAR 0 5
21989: PUSH
21990: FOR_IN
21991: IFFALSE 22027
// if GetTech ( i , side ) <> state_researched then
21993: LD_VAR 0 4
21997: PPUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 321
22007: PUSH
22008: LD_INT 2
22010: NONEQUAL
22011: IFFALSE 22025
// begin result := false ;
22013: LD_ADDR_VAR 0 3
22017: PUSH
22018: LD_INT 0
22020: ST_TO_ADDR
// exit ;
22021: POP
22022: POP
22023: GO 22029
// end ;
22025: GO 21990
22027: POP
22028: POP
// end ;
22029: LD_VAR 0 3
22033: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22034: LD_INT 0
22036: PPUSH
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22049: LD_VAR 0 1
22053: NOT
22054: PUSH
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 257
22064: PUSH
22065: LD_INT 9
22067: NONEQUAL
22068: OR
22069: IFFALSE 22073
// exit ;
22071: GO 22646
// side := GetSide ( unit ) ;
22073: LD_ADDR_VAR 0 9
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 255
22087: ST_TO_ADDR
// tech_space := tech_spacanom ;
22088: LD_ADDR_VAR 0 12
22092: PUSH
22093: LD_INT 29
22095: ST_TO_ADDR
// tech_time := tech_taurad ;
22096: LD_ADDR_VAR 0 13
22100: PUSH
22101: LD_INT 28
22103: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22104: LD_ADDR_VAR 0 11
22108: PUSH
22109: LD_VAR 0 1
22113: PPUSH
22114: CALL_OW 310
22118: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22119: LD_VAR 0 11
22123: PPUSH
22124: CALL_OW 247
22128: PUSH
22129: LD_INT 2
22131: EQUAL
22132: IFFALSE 22136
// exit ;
22134: GO 22646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22136: LD_ADDR_VAR 0 8
22140: PUSH
22141: LD_INT 81
22143: PUSH
22144: LD_VAR 0 9
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: LD_INT 21
22158: PUSH
22159: LD_INT 3
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 8
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22646
// if in_unit then
22188: LD_VAR 0 11
22192: IFFALSE 22216
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22194: LD_ADDR_VAR 0 10
22198: PUSH
22199: LD_VAR 0 8
22203: PPUSH
22204: LD_VAR 0 11
22208: PPUSH
22209: CALL_OW 74
22213: ST_TO_ADDR
22214: GO 22236
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22216: LD_ADDR_VAR 0 10
22220: PUSH
22221: LD_VAR 0 8
22225: PPUSH
22226: LD_VAR 0 1
22230: PPUSH
22231: CALL_OW 74
22235: ST_TO_ADDR
// if not enemy then
22236: LD_VAR 0 10
22240: NOT
22241: IFFALSE 22245
// exit ;
22243: GO 22646
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22245: LD_VAR 0 11
22249: PUSH
22250: LD_VAR 0 11
22254: PPUSH
22255: LD_VAR 0 10
22259: PPUSH
22260: CALL_OW 296
22264: PUSH
22265: LD_INT 13
22267: GREATER
22268: AND
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: LD_VAR 0 10
22279: PPUSH
22280: CALL_OW 296
22284: PUSH
22285: LD_INT 12
22287: GREATER
22288: OR
22289: IFFALSE 22293
// exit ;
22291: GO 22646
// missile := [ 1 ] ;
22293: LD_ADDR_VAR 0 14
22297: PUSH
22298: LD_INT 1
22300: PUSH
22301: EMPTY
22302: LIST
22303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22304: LD_VAR 0 9
22308: PPUSH
22309: LD_VAR 0 12
22313: PPUSH
22314: CALL_OW 325
22318: IFFALSE 22347
// missile := Replace ( missile , missile + 1 , 2 ) ;
22320: LD_ADDR_VAR 0 14
22324: PUSH
22325: LD_VAR 0 14
22329: PPUSH
22330: LD_VAR 0 14
22334: PUSH
22335: LD_INT 1
22337: PLUS
22338: PPUSH
22339: LD_INT 2
22341: PPUSH
22342: CALL_OW 1
22346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22347: LD_VAR 0 9
22351: PPUSH
22352: LD_VAR 0 13
22356: PPUSH
22357: CALL_OW 325
22361: PUSH
22362: LD_VAR 0 10
22366: PPUSH
22367: CALL_OW 255
22371: PPUSH
22372: LD_VAR 0 13
22376: PPUSH
22377: CALL_OW 325
22381: NOT
22382: AND
22383: IFFALSE 22412
// missile := Replace ( missile , missile + 1 , 3 ) ;
22385: LD_ADDR_VAR 0 14
22389: PUSH
22390: LD_VAR 0 14
22394: PPUSH
22395: LD_VAR 0 14
22399: PUSH
22400: LD_INT 1
22402: PLUS
22403: PPUSH
22404: LD_INT 3
22406: PPUSH
22407: CALL_OW 1
22411: ST_TO_ADDR
// if missile < 2 then
22412: LD_VAR 0 14
22416: PUSH
22417: LD_INT 2
22419: LESS
22420: IFFALSE 22424
// exit ;
22422: GO 22646
// x := GetX ( enemy ) ;
22424: LD_ADDR_VAR 0 4
22428: PUSH
22429: LD_VAR 0 10
22433: PPUSH
22434: CALL_OW 250
22438: ST_TO_ADDR
// y := GetY ( enemy ) ;
22439: LD_ADDR_VAR 0 5
22443: PUSH
22444: LD_VAR 0 10
22448: PPUSH
22449: CALL_OW 251
22453: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22454: LD_ADDR_VAR 0 6
22458: PUSH
22459: LD_VAR 0 4
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 12
22475: PLUS
22476: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22477: LD_ADDR_VAR 0 7
22481: PUSH
22482: LD_VAR 0 5
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PPUSH
22491: LD_INT 1
22493: PPUSH
22494: CALL_OW 12
22498: PLUS
22499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22500: LD_VAR 0 6
22504: PPUSH
22505: LD_VAR 0 7
22509: PPUSH
22510: CALL_OW 488
22514: NOT
22515: IFFALSE 22537
// begin _x := x ;
22517: LD_ADDR_VAR 0 6
22521: PUSH
22522: LD_VAR 0 4
22526: ST_TO_ADDR
// _y := y ;
22527: LD_ADDR_VAR 0 7
22531: PUSH
22532: LD_VAR 0 5
22536: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_INT 1
22544: PPUSH
22545: LD_VAR 0 14
22549: PPUSH
22550: CALL_OW 12
22554: ST_TO_ADDR
// case i of 1 :
22555: LD_VAR 0 3
22559: PUSH
22560: LD_INT 1
22562: DOUBLE
22563: EQUAL
22564: IFTRUE 22568
22566: GO 22585
22568: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22569: LD_VAR 0 1
22573: PPUSH
22574: LD_VAR 0 10
22578: PPUSH
22579: CALL_OW 115
22583: GO 22646
22585: LD_INT 2
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22615
22593: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22594: LD_VAR 0 1
22598: PPUSH
22599: LD_VAR 0 6
22603: PPUSH
22604: LD_VAR 0 7
22608: PPUSH
22609: CALL_OW 153
22613: GO 22646
22615: LD_INT 3
22617: DOUBLE
22618: EQUAL
22619: IFTRUE 22623
22621: GO 22645
22623: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22624: LD_VAR 0 1
22628: PPUSH
22629: LD_VAR 0 6
22633: PPUSH
22634: LD_VAR 0 7
22638: PPUSH
22639: CALL_OW 154
22643: GO 22646
22645: POP
// end ;
22646: LD_VAR 0 2
22650: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22651: LD_INT 0
22653: PPUSH
22654: PPUSH
22655: PPUSH
22656: PPUSH
22657: PPUSH
22658: PPUSH
// if not unit or not building then
22659: LD_VAR 0 1
22663: NOT
22664: PUSH
22665: LD_VAR 0 2
22669: NOT
22670: OR
22671: IFFALSE 22675
// exit ;
22673: GO 22833
// x := GetX ( building ) ;
22675: LD_ADDR_VAR 0 5
22679: PUSH
22680: LD_VAR 0 2
22684: PPUSH
22685: CALL_OW 250
22689: ST_TO_ADDR
// y := GetY ( building ) ;
22690: LD_ADDR_VAR 0 6
22694: PUSH
22695: LD_VAR 0 2
22699: PPUSH
22700: CALL_OW 251
22704: ST_TO_ADDR
// for i = 0 to 5 do
22705: LD_ADDR_VAR 0 4
22709: PUSH
22710: DOUBLE
22711: LD_INT 0
22713: DEC
22714: ST_TO_ADDR
22715: LD_INT 5
22717: PUSH
22718: FOR_TO
22719: IFFALSE 22831
// begin _x := ShiftX ( x , i , 3 ) ;
22721: LD_ADDR_VAR 0 7
22725: PUSH
22726: LD_VAR 0 5
22730: PPUSH
22731: LD_VAR 0 4
22735: PPUSH
22736: LD_INT 3
22738: PPUSH
22739: CALL_OW 272
22743: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22744: LD_ADDR_VAR 0 8
22748: PUSH
22749: LD_VAR 0 6
22753: PPUSH
22754: LD_VAR 0 4
22758: PPUSH
22759: LD_INT 3
22761: PPUSH
22762: CALL_OW 273
22766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22767: LD_VAR 0 7
22771: PPUSH
22772: LD_VAR 0 8
22776: PPUSH
22777: CALL_OW 488
22781: NOT
22782: IFFALSE 22786
// continue ;
22784: GO 22718
// if HexInfo ( _x , _y ) = 0 then
22786: LD_VAR 0 7
22790: PPUSH
22791: LD_VAR 0 8
22795: PPUSH
22796: CALL_OW 428
22800: PUSH
22801: LD_INT 0
22803: EQUAL
22804: IFFALSE 22829
// begin ComMoveXY ( unit , _x , _y ) ;
22806: LD_VAR 0 1
22810: PPUSH
22811: LD_VAR 0 7
22815: PPUSH
22816: LD_VAR 0 8
22820: PPUSH
22821: CALL_OW 111
// exit ;
22825: POP
22826: POP
22827: GO 22833
// end ; end ;
22829: GO 22718
22831: POP
22832: POP
// end ;
22833: LD_VAR 0 3
22837: RET
// export function ScanBase ( side , base_area ) ; begin
22838: LD_INT 0
22840: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22841: LD_ADDR_VAR 0 3
22845: PUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 81
22853: PUSH
22854: LD_VAR 0 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 70
22867: ST_TO_ADDR
// end ;
22868: LD_VAR 0 3
22872: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22873: LD_INT 0
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
// result := false ;
22879: LD_ADDR_VAR 0 2
22883: PUSH
22884: LD_INT 0
22886: ST_TO_ADDR
// side := GetSide ( unit ) ;
22887: LD_ADDR_VAR 0 3
22891: PUSH
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 255
22901: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 248
22916: ST_TO_ADDR
// case nat of 1 :
22917: LD_VAR 0 4
22921: PUSH
22922: LD_INT 1
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22941
22930: POP
// tech := tech_lassight ; 2 :
22931: LD_ADDR_VAR 0 5
22935: PUSH
22936: LD_INT 12
22938: ST_TO_ADDR
22939: GO 22980
22941: LD_INT 2
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// tech := tech_mortar ; 3 :
22950: LD_ADDR_VAR 0 5
22954: PUSH
22955: LD_INT 41
22957: ST_TO_ADDR
22958: GO 22980
22960: LD_INT 3
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// tech := tech_bazooka ; end ;
22969: LD_ADDR_VAR 0 5
22973: PUSH
22974: LD_INT 44
22976: ST_TO_ADDR
22977: GO 22980
22979: POP
// if Researched ( side , tech ) then
22980: LD_VAR 0 3
22984: PPUSH
22985: LD_VAR 0 5
22989: PPUSH
22990: CALL_OW 325
22994: IFFALSE 23021
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 5
23003: PUSH
23004: LD_INT 8
23006: PUSH
23007: LD_INT 9
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: PUSH
23015: LD_VAR 0 4
23019: ARRAY
23020: ST_TO_ADDR
// end ;
23021: LD_VAR 0 2
23025: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23026: LD_INT 0
23028: PPUSH
23029: PPUSH
23030: PPUSH
// if not mines then
23031: LD_VAR 0 2
23035: NOT
23036: IFFALSE 23040
// exit ;
23038: GO 23184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23040: LD_ADDR_VAR 0 5
23044: PUSH
23045: LD_INT 81
23047: PUSH
23048: LD_VAR 0 1
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 3
23059: PUSH
23060: LD_INT 21
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PPUSH
23078: CALL_OW 69
23082: ST_TO_ADDR
// for i in mines do
23083: LD_ADDR_VAR 0 4
23087: PUSH
23088: LD_VAR 0 2
23092: PUSH
23093: FOR_IN
23094: IFFALSE 23182
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23096: LD_VAR 0 4
23100: PUSH
23101: LD_INT 1
23103: ARRAY
23104: PPUSH
23105: LD_VAR 0 4
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: CALL_OW 458
23118: NOT
23119: IFFALSE 23123
// continue ;
23121: GO 23093
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23123: LD_VAR 0 4
23127: PUSH
23128: LD_INT 1
23130: ARRAY
23131: PPUSH
23132: LD_VAR 0 4
23136: PUSH
23137: LD_INT 2
23139: ARRAY
23140: PPUSH
23141: CALL_OW 428
23145: PUSH
23146: LD_VAR 0 5
23150: IN
23151: IFFALSE 23180
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23153: LD_VAR 0 4
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: LD_VAR 0 4
23166: PUSH
23167: LD_INT 2
23169: ARRAY
23170: PPUSH
23171: LD_VAR 0 1
23175: PPUSH
23176: CALL_OW 456
// end ;
23180: GO 23093
23182: POP
23183: POP
// end ;
23184: LD_VAR 0 3
23188: RET
// export function Count ( array ) ; begin
23189: LD_INT 0
23191: PPUSH
// result := array + 0 ;
23192: LD_ADDR_VAR 0 2
23196: PUSH
23197: LD_VAR 0 1
23201: PUSH
23202: LD_INT 0
23204: PLUS
23205: ST_TO_ADDR
// end ;
23206: LD_VAR 0 2
23210: RET
// export function IsEmpty ( building ) ; begin
23211: LD_INT 0
23213: PPUSH
// if not building then
23214: LD_VAR 0 1
23218: NOT
23219: IFFALSE 23223
// exit ;
23221: GO 23266
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23223: LD_ADDR_VAR 0 2
23227: PUSH
23228: LD_VAR 0 1
23232: PUSH
23233: LD_INT 22
23235: PUSH
23236: LD_VAR 0 1
23240: PPUSH
23241: CALL_OW 255
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 58
23252: PUSH
23253: EMPTY
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PPUSH
23260: CALL_OW 69
23264: IN
23265: ST_TO_ADDR
// end ;
23266: LD_VAR 0 2
23270: RET
// export function IsNotFull ( building ) ; var places ; begin
23271: LD_INT 0
23273: PPUSH
23274: PPUSH
// if not building then
23275: LD_VAR 0 1
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23312
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_INT 3
23296: PUSH
23297: LD_INT 62
23299: PUSH
23300: EMPTY
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PPUSH
23307: CALL_OW 72
23311: ST_TO_ADDR
// end ;
23312: LD_VAR 0 2
23316: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23317: LD_INT 0
23319: PPUSH
23320: PPUSH
23321: PPUSH
23322: PPUSH
// tmp := [ ] ;
23323: LD_ADDR_VAR 0 3
23327: PUSH
23328: EMPTY
23329: ST_TO_ADDR
// list := [ ] ;
23330: LD_ADDR_VAR 0 5
23334: PUSH
23335: EMPTY
23336: ST_TO_ADDR
// for i = 16 to 25 do
23337: LD_ADDR_VAR 0 4
23341: PUSH
23342: DOUBLE
23343: LD_INT 16
23345: DEC
23346: ST_TO_ADDR
23347: LD_INT 25
23349: PUSH
23350: FOR_TO
23351: IFFALSE 23424
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_VAR 0 3
23362: PUSH
23363: LD_INT 22
23365: PUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 255
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 91
23382: PUSH
23383: LD_VAR 0 1
23387: PUSH
23388: LD_INT 6
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 30
23398: PUSH
23399: LD_VAR 0 4
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: PPUSH
23416: CALL_OW 69
23420: ADD
23421: ST_TO_ADDR
23422: GO 23350
23424: POP
23425: POP
// for i = 1 to tmp do
23426: LD_ADDR_VAR 0 4
23430: PUSH
23431: DOUBLE
23432: LD_INT 1
23434: DEC
23435: ST_TO_ADDR
23436: LD_VAR 0 3
23440: PUSH
23441: FOR_TO
23442: IFFALSE 23530
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23444: LD_ADDR_VAR 0 5
23448: PUSH
23449: LD_VAR 0 5
23453: PUSH
23454: LD_VAR 0 3
23458: PUSH
23459: LD_VAR 0 4
23463: ARRAY
23464: PPUSH
23465: CALL_OW 266
23469: PUSH
23470: LD_VAR 0 3
23474: PUSH
23475: LD_VAR 0 4
23479: ARRAY
23480: PPUSH
23481: CALL_OW 250
23485: PUSH
23486: LD_VAR 0 3
23490: PUSH
23491: LD_VAR 0 4
23495: ARRAY
23496: PPUSH
23497: CALL_OW 251
23501: PUSH
23502: LD_VAR 0 3
23506: PUSH
23507: LD_VAR 0 4
23511: ARRAY
23512: PPUSH
23513: CALL_OW 254
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: ADD
23527: ST_TO_ADDR
23528: GO 23441
23530: POP
23531: POP
// result := list ;
23532: LD_ADDR_VAR 0 2
23536: PUSH
23537: LD_VAR 0 5
23541: ST_TO_ADDR
// end ;
23542: LD_VAR 0 2
23546: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
23554: PPUSH
23555: PPUSH
// if not factory then
23556: LD_VAR 0 1
23560: NOT
23561: IFFALSE 23565
// exit ;
23563: GO 24158
// if control = control_apeman then
23565: LD_VAR 0 4
23569: PUSH
23570: LD_INT 5
23572: EQUAL
23573: IFFALSE 23682
// begin tmp := UnitsInside ( factory ) ;
23575: LD_ADDR_VAR 0 8
23579: PUSH
23580: LD_VAR 0 1
23584: PPUSH
23585: CALL_OW 313
23589: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23590: LD_VAR 0 8
23594: PPUSH
23595: LD_INT 25
23597: PUSH
23598: LD_INT 12
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 72
23609: NOT
23610: IFFALSE 23620
// control := control_manual ;
23612: LD_ADDR_VAR 0 4
23616: PUSH
23617: LD_INT 1
23619: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23620: LD_ADDR_VAR 0 8
23624: PUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL 23317 0 1
23634: ST_TO_ADDR
// if tmp then
23635: LD_VAR 0 8
23639: IFFALSE 23682
// begin for i in tmp do
23641: LD_ADDR_VAR 0 7
23645: PUSH
23646: LD_VAR 0 8
23650: PUSH
23651: FOR_IN
23652: IFFALSE 23680
// if i [ 1 ] = b_ext_radio then
23654: LD_VAR 0 7
23658: PUSH
23659: LD_INT 1
23661: ARRAY
23662: PUSH
23663: LD_INT 22
23665: EQUAL
23666: IFFALSE 23678
// begin control := control_remote ;
23668: LD_ADDR_VAR 0 4
23672: PUSH
23673: LD_INT 2
23675: ST_TO_ADDR
// break ;
23676: GO 23680
// end ;
23678: GO 23651
23680: POP
23681: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23682: LD_VAR 0 1
23686: PPUSH
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_VAR 0 3
23696: PPUSH
23697: LD_VAR 0 4
23701: PPUSH
23702: LD_VAR 0 5
23706: PPUSH
23707: CALL_OW 448
23711: IFFALSE 23746
// begin result := [ chassis , engine , control , weapon ] ;
23713: LD_ADDR_VAR 0 6
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: LD_VAR 0 4
23732: PUSH
23733: LD_VAR 0 5
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: ST_TO_ADDR
// exit ;
23744: GO 24158
// end ; _chassis := AvailableChassisList ( factory ) ;
23746: LD_ADDR_VAR 0 9
23750: PUSH
23751: LD_VAR 0 1
23755: PPUSH
23756: CALL_OW 475
23760: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23761: LD_ADDR_VAR 0 11
23765: PUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 476
23775: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23776: LD_ADDR_VAR 0 12
23780: PUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 477
23790: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23791: LD_ADDR_VAR 0 10
23795: PUSH
23796: LD_VAR 0 1
23800: PPUSH
23801: CALL_OW 478
23805: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23806: LD_VAR 0 9
23810: NOT
23811: PUSH
23812: LD_VAR 0 11
23816: NOT
23817: OR
23818: PUSH
23819: LD_VAR 0 12
23823: NOT
23824: OR
23825: PUSH
23826: LD_VAR 0 10
23830: NOT
23831: OR
23832: IFFALSE 23867
// begin result := [ chassis , engine , control , weapon ] ;
23834: LD_ADDR_VAR 0 6
23838: PUSH
23839: LD_VAR 0 2
23843: PUSH
23844: LD_VAR 0 3
23848: PUSH
23849: LD_VAR 0 4
23853: PUSH
23854: LD_VAR 0 5
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: ST_TO_ADDR
// exit ;
23865: GO 24158
// end ; if not chassis in _chassis then
23867: LD_VAR 0 2
23871: PUSH
23872: LD_VAR 0 9
23876: IN
23877: NOT
23878: IFFALSE 23904
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_VAR 0 9
23889: PUSH
23890: LD_INT 1
23892: PPUSH
23893: LD_VAR 0 9
23897: PPUSH
23898: CALL_OW 12
23902: ARRAY
23903: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23904: LD_VAR 0 2
23908: PPUSH
23909: LD_VAR 0 3
23913: PPUSH
23914: CALL 24163 0 2
23918: NOT
23919: IFFALSE 23978
// repeat engine := _engine [ 1 ] ;
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_VAR 0 11
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23935: LD_ADDR_VAR 0 11
23939: PUSH
23940: LD_VAR 0 11
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 3
23952: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_VAR 0 3
23962: PPUSH
23963: CALL 24163 0 2
23967: PUSH
23968: LD_VAR 0 11
23972: PUSH
23973: EMPTY
23974: EQUAL
23975: OR
23976: IFFALSE 23921
// if not control in _control then
23978: LD_VAR 0 4
23982: PUSH
23983: LD_VAR 0 12
23987: IN
23988: NOT
23989: IFFALSE 24015
// control := _control [ rand ( 1 , _control ) ] ;
23991: LD_ADDR_VAR 0 4
23995: PUSH
23996: LD_VAR 0 12
24000: PUSH
24001: LD_INT 1
24003: PPUSH
24004: LD_VAR 0 12
24008: PPUSH
24009: CALL_OW 12
24013: ARRAY
24014: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24015: LD_VAR 0 2
24019: PPUSH
24020: LD_VAR 0 5
24024: PPUSH
24025: CALL 24383 0 2
24029: NOT
24030: IFFALSE 24089
// repeat weapon := _weapon [ 1 ] ;
24032: LD_ADDR_VAR 0 5
24036: PUSH
24037: LD_VAR 0 10
24041: PUSH
24042: LD_INT 1
24044: ARRAY
24045: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24046: LD_ADDR_VAR 0 10
24050: PUSH
24051: LD_VAR 0 10
24055: PPUSH
24056: LD_INT 1
24058: PPUSH
24059: CALL_OW 3
24063: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24064: LD_VAR 0 2
24068: PPUSH
24069: LD_VAR 0 5
24073: PPUSH
24074: CALL 24383 0 2
24078: PUSH
24079: LD_VAR 0 10
24083: PUSH
24084: EMPTY
24085: EQUAL
24086: OR
24087: IFFALSE 24032
// result := [ ] ;
24089: LD_ADDR_VAR 0 6
24093: PUSH
24094: EMPTY
24095: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_VAR 0 3
24110: PPUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: CALL_OW 448
24125: IFFALSE 24158
// result := [ chassis , engine , control , weapon ] ;
24127: LD_ADDR_VAR 0 6
24131: PUSH
24132: LD_VAR 0 2
24136: PUSH
24137: LD_VAR 0 3
24141: PUSH
24142: LD_VAR 0 4
24146: PUSH
24147: LD_VAR 0 5
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
// end ;
24158: LD_VAR 0 6
24162: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24163: LD_INT 0
24165: PPUSH
// if not chassis or not engine then
24166: LD_VAR 0 1
24170: NOT
24171: PUSH
24172: LD_VAR 0 2
24176: NOT
24177: OR
24178: IFFALSE 24182
// exit ;
24180: GO 24378
// case engine of engine_solar :
24182: LD_VAR 0 2
24186: PUSH
24187: LD_INT 2
24189: DOUBLE
24190: EQUAL
24191: IFTRUE 24195
24193: GO 24233
24195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24196: LD_ADDR_VAR 0 3
24200: PUSH
24201: LD_INT 11
24203: PUSH
24204: LD_INT 12
24206: PUSH
24207: LD_INT 13
24209: PUSH
24210: LD_INT 14
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: ST_TO_ADDR
24231: GO 24362
24233: LD_INT 1
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24303
24241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_INT 11
24249: PUSH
24250: LD_INT 12
24252: PUSH
24253: LD_INT 13
24255: PUSH
24256: LD_INT 14
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 4
24270: PUSH
24271: LD_INT 5
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 23
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_INT 24
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: ST_TO_ADDR
24301: GO 24362
24303: LD_INT 3
24305: DOUBLE
24306: EQUAL
24307: IFTRUE 24311
24309: GO 24361
24311: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24312: LD_ADDR_VAR 0 3
24316: PUSH
24317: LD_INT 13
24319: PUSH
24320: LD_INT 14
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 3
24328: PUSH
24329: LD_INT 4
24331: PUSH
24332: LD_INT 5
24334: PUSH
24335: LD_INT 21
24337: PUSH
24338: LD_INT 22
24340: PUSH
24341: LD_INT 23
24343: PUSH
24344: LD_INT 24
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: ST_TO_ADDR
24359: GO 24362
24361: POP
// result := ( chassis in result ) ;
24362: LD_ADDR_VAR 0 3
24366: PUSH
24367: LD_VAR 0 1
24371: PUSH
24372: LD_VAR 0 3
24376: IN
24377: ST_TO_ADDR
// end ;
24378: LD_VAR 0 3
24382: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24383: LD_INT 0
24385: PPUSH
// if not chassis or not weapon then
24386: LD_VAR 0 1
24390: NOT
24391: PUSH
24392: LD_VAR 0 2
24396: NOT
24397: OR
24398: IFFALSE 24402
// exit ;
24400: GO 25462
// case weapon of us_machine_gun :
24402: LD_VAR 0 2
24406: PUSH
24407: LD_INT 2
24409: DOUBLE
24410: EQUAL
24411: IFTRUE 24415
24413: GO 24445
24415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: LD_INT 3
24429: PUSH
24430: LD_INT 4
24432: PUSH
24433: LD_INT 5
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: ST_TO_ADDR
24443: GO 25446
24445: LD_INT 3
24447: DOUBLE
24448: EQUAL
24449: IFTRUE 24453
24451: GO 24483
24453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24454: LD_ADDR_VAR 0 3
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 3
24467: PUSH
24468: LD_INT 4
24470: PUSH
24471: LD_INT 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: ST_TO_ADDR
24481: GO 25446
24483: LD_INT 11
24485: DOUBLE
24486: EQUAL
24487: IFTRUE 24491
24489: GO 24521
24491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 3
24505: PUSH
24506: LD_INT 4
24508: PUSH
24509: LD_INT 5
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
24519: GO 25446
24521: LD_INT 4
24523: DOUBLE
24524: EQUAL
24525: IFTRUE 24529
24527: GO 24555
24529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24530: LD_ADDR_VAR 0 3
24534: PUSH
24535: LD_INT 2
24537: PUSH
24538: LD_INT 3
24540: PUSH
24541: LD_INT 4
24543: PUSH
24544: LD_INT 5
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
24553: GO 25446
24555: LD_INT 5
24557: DOUBLE
24558: EQUAL
24559: IFTRUE 24563
24561: GO 24589
24563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24564: LD_ADDR_VAR 0 3
24568: PUSH
24569: LD_INT 2
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 4
24577: PUSH
24578: LD_INT 5
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: ST_TO_ADDR
24587: GO 25446
24589: LD_INT 9
24591: DOUBLE
24592: EQUAL
24593: IFTRUE 24597
24595: GO 24623
24597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24598: LD_ADDR_VAR 0 3
24602: PUSH
24603: LD_INT 2
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: LD_INT 4
24611: PUSH
24612: LD_INT 5
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: ST_TO_ADDR
24621: GO 25446
24623: LD_INT 7
24625: DOUBLE
24626: EQUAL
24627: IFTRUE 24631
24629: GO 24657
24631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24632: LD_ADDR_VAR 0 3
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 3
24642: PUSH
24643: LD_INT 4
24645: PUSH
24646: LD_INT 5
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
24655: GO 25446
24657: LD_INT 12
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24691
24665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 4
24679: PUSH
24680: LD_INT 5
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: ST_TO_ADDR
24689: GO 25446
24691: LD_INT 13
24693: DOUBLE
24694: EQUAL
24695: IFTRUE 24699
24697: GO 24725
24699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24700: LD_ADDR_VAR 0 3
24704: PUSH
24705: LD_INT 2
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: LD_INT 4
24713: PUSH
24714: LD_INT 5
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: ST_TO_ADDR
24723: GO 25446
24725: LD_INT 14
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24751
24733: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: LD_INT 4
24741: PUSH
24742: LD_INT 5
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25446
24751: LD_INT 6
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24777
24759: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_INT 4
24767: PUSH
24768: LD_INT 5
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 25446
24777: LD_INT 10
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24803
24785: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: LD_INT 4
24793: PUSH
24794: LD_INT 5
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: ST_TO_ADDR
24801: GO 25446
24803: LD_INT 22
24805: DOUBLE
24806: EQUAL
24807: IFTRUE 24811
24809: GO 24837
24811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_INT 11
24819: PUSH
24820: LD_INT 12
24822: PUSH
24823: LD_INT 13
24825: PUSH
24826: LD_INT 14
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: ST_TO_ADDR
24835: GO 25446
24837: LD_INT 23
24839: DOUBLE
24840: EQUAL
24841: IFTRUE 24845
24843: GO 24871
24845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24846: LD_ADDR_VAR 0 3
24850: PUSH
24851: LD_INT 11
24853: PUSH
24854: LD_INT 12
24856: PUSH
24857: LD_INT 13
24859: PUSH
24860: LD_INT 14
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 25446
24871: LD_INT 24
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 24905
24879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_INT 11
24887: PUSH
24888: LD_INT 12
24890: PUSH
24891: LD_INT 13
24893: PUSH
24894: LD_INT 14
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
24903: GO 25446
24905: LD_INT 30
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 24939
24913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: LD_INT 11
24921: PUSH
24922: LD_INT 12
24924: PUSH
24925: LD_INT 13
24927: PUSH
24928: LD_INT 14
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: ST_TO_ADDR
24937: GO 25446
24939: LD_INT 25
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24965
24947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_INT 13
24955: PUSH
24956: LD_INT 14
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: ST_TO_ADDR
24963: GO 25446
24965: LD_INT 27
24967: DOUBLE
24968: EQUAL
24969: IFTRUE 24973
24971: GO 24991
24973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24974: LD_ADDR_VAR 0 3
24978: PUSH
24979: LD_INT 13
24981: PUSH
24982: LD_INT 14
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: ST_TO_ADDR
24989: GO 25446
24991: LD_INT 92
24993: DOUBLE
24994: EQUAL
24995: IFTRUE 24999
24997: GO 25025
24999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25000: LD_ADDR_VAR 0 3
25004: PUSH
25005: LD_INT 11
25007: PUSH
25008: LD_INT 12
25010: PUSH
25011: LD_INT 13
25013: PUSH
25014: LD_INT 14
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: ST_TO_ADDR
25023: GO 25446
25025: LD_INT 28
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25051
25033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: LD_INT 13
25041: PUSH
25042: LD_INT 14
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: ST_TO_ADDR
25049: GO 25446
25051: LD_INT 29
25053: DOUBLE
25054: EQUAL
25055: IFTRUE 25059
25057: GO 25077
25059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 13
25067: PUSH
25068: LD_INT 14
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: ST_TO_ADDR
25075: GO 25446
25077: LD_INT 31
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25103
25085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25086: LD_ADDR_VAR 0 3
25090: PUSH
25091: LD_INT 13
25093: PUSH
25094: LD_INT 14
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: ST_TO_ADDR
25101: GO 25446
25103: LD_INT 26
25105: DOUBLE
25106: EQUAL
25107: IFTRUE 25111
25109: GO 25129
25111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25112: LD_ADDR_VAR 0 3
25116: PUSH
25117: LD_INT 13
25119: PUSH
25120: LD_INT 14
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: ST_TO_ADDR
25127: GO 25446
25129: LD_INT 42
25131: DOUBLE
25132: EQUAL
25133: IFTRUE 25137
25135: GO 25163
25137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: LD_INT 21
25145: PUSH
25146: LD_INT 22
25148: PUSH
25149: LD_INT 23
25151: PUSH
25152: LD_INT 24
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: ST_TO_ADDR
25161: GO 25446
25163: LD_INT 43
25165: DOUBLE
25166: EQUAL
25167: IFTRUE 25171
25169: GO 25197
25171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25172: LD_ADDR_VAR 0 3
25176: PUSH
25177: LD_INT 21
25179: PUSH
25180: LD_INT 22
25182: PUSH
25183: LD_INT 23
25185: PUSH
25186: LD_INT 24
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: ST_TO_ADDR
25195: GO 25446
25197: LD_INT 44
25199: DOUBLE
25200: EQUAL
25201: IFTRUE 25205
25203: GO 25231
25205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25206: LD_ADDR_VAR 0 3
25210: PUSH
25211: LD_INT 21
25213: PUSH
25214: LD_INT 22
25216: PUSH
25217: LD_INT 23
25219: PUSH
25220: LD_INT 24
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: ST_TO_ADDR
25229: GO 25446
25231: LD_INT 45
25233: DOUBLE
25234: EQUAL
25235: IFTRUE 25239
25237: GO 25265
25239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25240: LD_ADDR_VAR 0 3
25244: PUSH
25245: LD_INT 21
25247: PUSH
25248: LD_INT 22
25250: PUSH
25251: LD_INT 23
25253: PUSH
25254: LD_INT 24
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 25446
25265: LD_INT 49
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25299
25273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 22
25284: PUSH
25285: LD_INT 23
25287: PUSH
25288: LD_INT 24
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
25297: GO 25446
25299: LD_INT 51
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25333
25307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_INT 21
25315: PUSH
25316: LD_INT 22
25318: PUSH
25319: LD_INT 23
25321: PUSH
25322: LD_INT 24
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
25331: GO 25446
25333: LD_INT 52
25335: DOUBLE
25336: EQUAL
25337: IFTRUE 25341
25339: GO 25367
25341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_INT 21
25349: PUSH
25350: LD_INT 22
25352: PUSH
25353: LD_INT 23
25355: PUSH
25356: LD_INT 24
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
25365: GO 25446
25367: LD_INT 53
25369: DOUBLE
25370: EQUAL
25371: IFTRUE 25375
25373: GO 25393
25375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25376: LD_ADDR_VAR 0 3
25380: PUSH
25381: LD_INT 23
25383: PUSH
25384: LD_INT 24
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: ST_TO_ADDR
25391: GO 25446
25393: LD_INT 46
25395: DOUBLE
25396: EQUAL
25397: IFTRUE 25401
25399: GO 25419
25401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: LD_INT 23
25409: PUSH
25410: LD_INT 24
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: ST_TO_ADDR
25417: GO 25446
25419: LD_INT 47
25421: DOUBLE
25422: EQUAL
25423: IFTRUE 25427
25425: GO 25445
25427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: LD_INT 23
25435: PUSH
25436: LD_INT 24
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: ST_TO_ADDR
25443: GO 25446
25445: POP
// result := ( chassis in result ) ;
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_VAR 0 1
25455: PUSH
25456: LD_VAR 0 3
25460: IN
25461: ST_TO_ADDR
// end ;
25462: LD_VAR 0 3
25466: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
// result := array ;
25476: LD_ADDR_VAR 0 5
25480: PUSH
25481: LD_VAR 0 1
25485: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25486: LD_VAR 0 1
25490: NOT
25491: PUSH
25492: LD_VAR 0 2
25496: NOT
25497: OR
25498: PUSH
25499: LD_VAR 0 3
25503: NOT
25504: OR
25505: PUSH
25506: LD_VAR 0 2
25510: PUSH
25511: LD_VAR 0 1
25515: GREATER
25516: OR
25517: PUSH
25518: LD_VAR 0 3
25522: PUSH
25523: LD_VAR 0 1
25527: GREATER
25528: OR
25529: IFFALSE 25533
// exit ;
25531: GO 25829
// if direction then
25533: LD_VAR 0 4
25537: IFFALSE 25601
// begin d := 1 ;
25539: LD_ADDR_VAR 0 9
25543: PUSH
25544: LD_INT 1
25546: ST_TO_ADDR
// if i_from > i_to then
25547: LD_VAR 0 2
25551: PUSH
25552: LD_VAR 0 3
25556: GREATER
25557: IFFALSE 25583
// length := ( array - i_from ) + i_to else
25559: LD_ADDR_VAR 0 11
25563: PUSH
25564: LD_VAR 0 1
25568: PUSH
25569: LD_VAR 0 2
25573: MINUS
25574: PUSH
25575: LD_VAR 0 3
25579: PLUS
25580: ST_TO_ADDR
25581: GO 25599
// length := i_to - i_from ;
25583: LD_ADDR_VAR 0 11
25587: PUSH
25588: LD_VAR 0 3
25592: PUSH
25593: LD_VAR 0 2
25597: MINUS
25598: ST_TO_ADDR
// end else
25599: GO 25662
// begin d := - 1 ;
25601: LD_ADDR_VAR 0 9
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: ST_TO_ADDR
// if i_from > i_to then
25610: LD_VAR 0 2
25614: PUSH
25615: LD_VAR 0 3
25619: GREATER
25620: IFFALSE 25640
// length := i_from - i_to else
25622: LD_ADDR_VAR 0 11
25626: PUSH
25627: LD_VAR 0 2
25631: PUSH
25632: LD_VAR 0 3
25636: MINUS
25637: ST_TO_ADDR
25638: GO 25662
// length := ( array - i_to ) + i_from ;
25640: LD_ADDR_VAR 0 11
25644: PUSH
25645: LD_VAR 0 1
25649: PUSH
25650: LD_VAR 0 3
25654: MINUS
25655: PUSH
25656: LD_VAR 0 2
25660: PLUS
25661: ST_TO_ADDR
// end ; if not length then
25662: LD_VAR 0 11
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25829
// tmp := array ;
25671: LD_ADDR_VAR 0 10
25675: PUSH
25676: LD_VAR 0 1
25680: ST_TO_ADDR
// for i = 1 to length do
25681: LD_ADDR_VAR 0 6
25685: PUSH
25686: DOUBLE
25687: LD_INT 1
25689: DEC
25690: ST_TO_ADDR
25691: LD_VAR 0 11
25695: PUSH
25696: FOR_TO
25697: IFFALSE 25817
// begin for j = 1 to array do
25699: LD_ADDR_VAR 0 7
25703: PUSH
25704: DOUBLE
25705: LD_INT 1
25707: DEC
25708: ST_TO_ADDR
25709: LD_VAR 0 1
25713: PUSH
25714: FOR_TO
25715: IFFALSE 25803
// begin k := j + d ;
25717: LD_ADDR_VAR 0 8
25721: PUSH
25722: LD_VAR 0 7
25726: PUSH
25727: LD_VAR 0 9
25731: PLUS
25732: ST_TO_ADDR
// if k > array then
25733: LD_VAR 0 8
25737: PUSH
25738: LD_VAR 0 1
25742: GREATER
25743: IFFALSE 25753
// k := 1 ;
25745: LD_ADDR_VAR 0 8
25749: PUSH
25750: LD_INT 1
25752: ST_TO_ADDR
// if not k then
25753: LD_VAR 0 8
25757: NOT
25758: IFFALSE 25770
// k := array ;
25760: LD_ADDR_VAR 0 8
25764: PUSH
25765: LD_VAR 0 1
25769: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25770: LD_ADDR_VAR 0 10
25774: PUSH
25775: LD_VAR 0 10
25779: PPUSH
25780: LD_VAR 0 8
25784: PPUSH
25785: LD_VAR 0 1
25789: PUSH
25790: LD_VAR 0 7
25794: ARRAY
25795: PPUSH
25796: CALL_OW 1
25800: ST_TO_ADDR
// end ;
25801: GO 25714
25803: POP
25804: POP
// array := tmp ;
25805: LD_ADDR_VAR 0 1
25809: PUSH
25810: LD_VAR 0 10
25814: ST_TO_ADDR
// end ;
25815: GO 25696
25817: POP
25818: POP
// result := array ;
25819: LD_ADDR_VAR 0 5
25823: PUSH
25824: LD_VAR 0 1
25828: ST_TO_ADDR
// end ;
25829: LD_VAR 0 5
25833: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25834: LD_INT 0
25836: PPUSH
25837: PPUSH
// result := 0 ;
25838: LD_ADDR_VAR 0 3
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// if not array or not value in array then
25846: LD_VAR 0 1
25850: NOT
25851: PUSH
25852: LD_VAR 0 2
25856: PUSH
25857: LD_VAR 0 1
25861: IN
25862: NOT
25863: OR
25864: IFFALSE 25868
// exit ;
25866: GO 25922
// for i = 1 to array do
25868: LD_ADDR_VAR 0 4
25872: PUSH
25873: DOUBLE
25874: LD_INT 1
25876: DEC
25877: ST_TO_ADDR
25878: LD_VAR 0 1
25882: PUSH
25883: FOR_TO
25884: IFFALSE 25920
// if value = array [ i ] then
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 1
25895: PUSH
25896: LD_VAR 0 4
25900: ARRAY
25901: EQUAL
25902: IFFALSE 25918
// begin result := i ;
25904: LD_ADDR_VAR 0 3
25908: PUSH
25909: LD_VAR 0 4
25913: ST_TO_ADDR
// exit ;
25914: POP
25915: POP
25916: GO 25922
// end ;
25918: GO 25883
25920: POP
25921: POP
// end ;
25922: LD_VAR 0 3
25926: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25927: LD_INT 0
25929: PPUSH
// vc_chassis := chassis ;
25930: LD_ADDR_OWVAR 37
25934: PUSH
25935: LD_VAR 0 1
25939: ST_TO_ADDR
// vc_engine := engine ;
25940: LD_ADDR_OWVAR 39
25944: PUSH
25945: LD_VAR 0 2
25949: ST_TO_ADDR
// vc_control := control ;
25950: LD_ADDR_OWVAR 38
25954: PUSH
25955: LD_VAR 0 3
25959: ST_TO_ADDR
// vc_weapon := weapon ;
25960: LD_ADDR_OWVAR 40
25964: PUSH
25965: LD_VAR 0 4
25969: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25970: LD_ADDR_OWVAR 41
25974: PUSH
25975: LD_VAR 0 5
25979: ST_TO_ADDR
// end ;
25980: LD_VAR 0 6
25984: RET
// export function WantPlant ( unit ) ; var task ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
// result := false ;
25989: LD_ADDR_VAR 0 2
25993: PUSH
25994: LD_INT 0
25996: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25997: LD_ADDR_VAR 0 3
26001: PUSH
26002: LD_VAR 0 1
26006: PPUSH
26007: CALL_OW 437
26011: ST_TO_ADDR
// if task then
26012: LD_VAR 0 3
26016: IFFALSE 26044
// if task [ 1 ] [ 1 ] = p then
26018: LD_VAR 0 3
26022: PUSH
26023: LD_INT 1
26025: ARRAY
26026: PUSH
26027: LD_INT 1
26029: ARRAY
26030: PUSH
26031: LD_STRING p
26033: EQUAL
26034: IFFALSE 26044
// result := true ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_INT 1
26043: ST_TO_ADDR
// end ;
26044: LD_VAR 0 2
26048: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26049: LD_INT 0
26051: PPUSH
26052: PPUSH
26053: PPUSH
26054: PPUSH
// if pos < 1 then
26055: LD_VAR 0 2
26059: PUSH
26060: LD_INT 1
26062: LESS
26063: IFFALSE 26067
// exit ;
26065: GO 26370
// if pos = 1 then
26067: LD_VAR 0 2
26071: PUSH
26072: LD_INT 1
26074: EQUAL
26075: IFFALSE 26108
// result := Replace ( arr , pos [ 1 ] , value ) else
26077: LD_ADDR_VAR 0 4
26081: PUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 1
26094: ARRAY
26095: PPUSH
26096: LD_VAR 0 3
26100: PPUSH
26101: CALL_OW 1
26105: ST_TO_ADDR
26106: GO 26370
// begin tmp := arr ;
26108: LD_ADDR_VAR 0 6
26112: PUSH
26113: LD_VAR 0 1
26117: ST_TO_ADDR
// s_arr := [ tmp ] ;
26118: LD_ADDR_VAR 0 7
26122: PUSH
26123: LD_VAR 0 6
26127: PUSH
26128: EMPTY
26129: LIST
26130: ST_TO_ADDR
// for i = 1 to pos - 1 do
26131: LD_ADDR_VAR 0 5
26135: PUSH
26136: DOUBLE
26137: LD_INT 1
26139: DEC
26140: ST_TO_ADDR
26141: LD_VAR 0 2
26145: PUSH
26146: LD_INT 1
26148: MINUS
26149: PUSH
26150: FOR_TO
26151: IFFALSE 26196
// begin tmp := tmp [ pos [ i ] ] ;
26153: LD_ADDR_VAR 0 6
26157: PUSH
26158: LD_VAR 0 6
26162: PUSH
26163: LD_VAR 0 2
26167: PUSH
26168: LD_VAR 0 5
26172: ARRAY
26173: ARRAY
26174: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26175: LD_ADDR_VAR 0 7
26179: PUSH
26180: LD_VAR 0 7
26184: PUSH
26185: LD_VAR 0 6
26189: PUSH
26190: EMPTY
26191: LIST
26192: ADD
26193: ST_TO_ADDR
// end ;
26194: GO 26150
26196: POP
26197: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26198: LD_ADDR_VAR 0 6
26202: PUSH
26203: LD_VAR 0 6
26207: PPUSH
26208: LD_VAR 0 2
26212: PUSH
26213: LD_VAR 0 2
26217: ARRAY
26218: PPUSH
26219: LD_VAR 0 3
26223: PPUSH
26224: CALL_OW 1
26228: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26229: LD_ADDR_VAR 0 7
26233: PUSH
26234: LD_VAR 0 7
26238: PPUSH
26239: LD_VAR 0 7
26243: PPUSH
26244: LD_VAR 0 6
26248: PPUSH
26249: CALL_OW 1
26253: ST_TO_ADDR
// for i = s_arr downto 2 do
26254: LD_ADDR_VAR 0 5
26258: PUSH
26259: DOUBLE
26260: LD_VAR 0 7
26264: INC
26265: ST_TO_ADDR
26266: LD_INT 2
26268: PUSH
26269: FOR_DOWNTO
26270: IFFALSE 26354
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 7
26281: PUSH
26282: LD_VAR 0 5
26286: PUSH
26287: LD_INT 1
26289: MINUS
26290: ARRAY
26291: PPUSH
26292: LD_VAR 0 2
26296: PUSH
26297: LD_VAR 0 5
26301: PUSH
26302: LD_INT 1
26304: MINUS
26305: ARRAY
26306: PPUSH
26307: LD_VAR 0 7
26311: PUSH
26312: LD_VAR 0 5
26316: ARRAY
26317: PPUSH
26318: CALL_OW 1
26322: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26323: LD_ADDR_VAR 0 7
26327: PUSH
26328: LD_VAR 0 7
26332: PPUSH
26333: LD_VAR 0 5
26337: PUSH
26338: LD_INT 1
26340: MINUS
26341: PPUSH
26342: LD_VAR 0 6
26346: PPUSH
26347: CALL_OW 1
26351: ST_TO_ADDR
// end ;
26352: GO 26269
26354: POP
26355: POP
// result := s_arr [ 1 ] ;
26356: LD_ADDR_VAR 0 4
26360: PUSH
26361: LD_VAR 0 7
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: ST_TO_ADDR
// end ; end ;
26370: LD_VAR 0 4
26374: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26375: LD_INT 0
26377: PPUSH
26378: PPUSH
// if not list then
26379: LD_VAR 0 1
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26479
// i := list [ pos1 ] ;
26388: LD_ADDR_VAR 0 5
26392: PUSH
26393: LD_VAR 0 1
26397: PUSH
26398: LD_VAR 0 2
26402: ARRAY
26403: ST_TO_ADDR
// if not i then
26404: LD_VAR 0 5
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26479
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26413: LD_ADDR_VAR 0 1
26417: PUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: LD_VAR 0 2
26427: PPUSH
26428: LD_VAR 0 1
26432: PUSH
26433: LD_VAR 0 3
26437: ARRAY
26438: PPUSH
26439: CALL_OW 1
26443: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26444: LD_ADDR_VAR 0 1
26448: PUSH
26449: LD_VAR 0 1
26453: PPUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: LD_VAR 0 5
26463: PPUSH
26464: CALL_OW 1
26468: ST_TO_ADDR
// result := list ;
26469: LD_ADDR_VAR 0 4
26473: PUSH
26474: LD_VAR 0 1
26478: ST_TO_ADDR
// end ;
26479: LD_VAR 0 4
26483: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26484: LD_INT 0
26486: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26487: LD_ADDR_VAR 0 5
26491: PUSH
26492: LD_VAR 0 1
26496: PPUSH
26497: CALL_OW 250
26501: PPUSH
26502: LD_VAR 0 1
26506: PPUSH
26507: CALL_OW 251
26511: PPUSH
26512: LD_VAR 0 2
26516: PPUSH
26517: LD_VAR 0 3
26521: PPUSH
26522: LD_VAR 0 4
26526: PPUSH
26527: CALL 26905 0 5
26531: ST_TO_ADDR
// end ;
26532: LD_VAR 0 5
26536: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26537: LD_INT 0
26539: PPUSH
26540: PPUSH
26541: PPUSH
26542: PPUSH
// if not list or not unit then
26543: LD_VAR 0 2
26547: NOT
26548: PUSH
26549: LD_VAR 0 1
26553: NOT
26554: OR
26555: IFFALSE 26559
// exit ;
26557: GO 26900
// result := [ ] ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: EMPTY
26565: ST_TO_ADDR
// for i in list do
26566: LD_ADDR_VAR 0 6
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26795
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26579: LD_ADDR_VAR 0 8
26583: PUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: LD_VAR 0 6
26593: PUSH
26594: LD_INT 1
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 6
26602: PUSH
26603: LD_INT 2
26605: ARRAY
26606: PPUSH
26607: CALL_OW 297
26611: ST_TO_ADDR
// if not Count ( result ) then
26612: LD_VAR 0 5
26616: PPUSH
26617: CALL 23189 0 1
26621: NOT
26622: IFFALSE 26655
// begin result := Join ( result , [ i , tmp ] ) ;
26624: LD_ADDR_VAR 0 5
26628: PUSH
26629: LD_VAR 0 5
26633: PPUSH
26634: LD_VAR 0 6
26638: PUSH
26639: LD_VAR 0 8
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL 58778 0 2
26652: ST_TO_ADDR
// continue ;
26653: GO 26576
// end ; if result [ result ] [ 2 ] <= tmp then
26655: LD_VAR 0 5
26659: PUSH
26660: LD_VAR 0 5
26664: ARRAY
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PUSH
26670: LD_VAR 0 8
26674: LESSEQUAL
26675: IFFALSE 26708
// result := Join ( result , [ i , tmp ] ) else
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_VAR 0 5
26686: PPUSH
26687: LD_VAR 0 6
26691: PUSH
26692: LD_VAR 0 8
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PPUSH
26701: CALL 58778 0 2
26705: ST_TO_ADDR
26706: GO 26793
// begin for j := 1 to Count ( result ) do
26708: LD_ADDR_VAR 0 7
26712: PUSH
26713: DOUBLE
26714: LD_INT 1
26716: DEC
26717: ST_TO_ADDR
26718: LD_VAR 0 5
26722: PPUSH
26723: CALL 23189 0 1
26727: PUSH
26728: FOR_TO
26729: IFFALSE 26791
// begin if tmp < result [ j ] [ 2 ] then
26731: LD_VAR 0 8
26735: PUSH
26736: LD_VAR 0 5
26740: PUSH
26741: LD_VAR 0 7
26745: ARRAY
26746: PUSH
26747: LD_INT 2
26749: ARRAY
26750: LESS
26751: IFFALSE 26789
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26753: LD_ADDR_VAR 0 5
26757: PUSH
26758: LD_VAR 0 5
26762: PPUSH
26763: LD_VAR 0 7
26767: PPUSH
26768: LD_VAR 0 6
26772: PUSH
26773: LD_VAR 0 8
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PPUSH
26782: CALL_OW 2
26786: ST_TO_ADDR
// break ;
26787: GO 26791
// end ; end ;
26789: GO 26728
26791: POP
26792: POP
// end ; end ;
26793: GO 26576
26795: POP
26796: POP
// if result and not asc then
26797: LD_VAR 0 5
26801: PUSH
26802: LD_VAR 0 3
26806: NOT
26807: AND
26808: IFFALSE 26825
// result := ReverseArray ( result ) ;
26810: LD_ADDR_VAR 0 5
26814: PUSH
26815: LD_VAR 0 5
26819: PPUSH
26820: CALL 54065 0 1
26824: ST_TO_ADDR
// tmp := [ ] ;
26825: LD_ADDR_VAR 0 8
26829: PUSH
26830: EMPTY
26831: ST_TO_ADDR
// if mode then
26832: LD_VAR 0 4
26836: IFFALSE 26900
// begin for i := 1 to result do
26838: LD_ADDR_VAR 0 6
26842: PUSH
26843: DOUBLE
26844: LD_INT 1
26846: DEC
26847: ST_TO_ADDR
26848: LD_VAR 0 5
26852: PUSH
26853: FOR_TO
26854: IFFALSE 26888
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26856: LD_ADDR_VAR 0 8
26860: PUSH
26861: LD_VAR 0 8
26865: PPUSH
26866: LD_VAR 0 5
26870: PUSH
26871: LD_VAR 0 6
26875: ARRAY
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PPUSH
26881: CALL 58778 0 2
26885: ST_TO_ADDR
26886: GO 26853
26888: POP
26889: POP
// result := tmp ;
26890: LD_ADDR_VAR 0 5
26894: PUSH
26895: LD_VAR 0 8
26899: ST_TO_ADDR
// end ; end ;
26900: LD_VAR 0 5
26904: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26905: LD_INT 0
26907: PPUSH
26908: PPUSH
26909: PPUSH
26910: PPUSH
// if not list then
26911: LD_VAR 0 3
26915: NOT
26916: IFFALSE 26920
// exit ;
26918: GO 27308
// result := [ ] ;
26920: LD_ADDR_VAR 0 6
26924: PUSH
26925: EMPTY
26926: ST_TO_ADDR
// for i in list do
26927: LD_ADDR_VAR 0 7
26931: PUSH
26932: LD_VAR 0 3
26936: PUSH
26937: FOR_IN
26938: IFFALSE 27140
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26940: LD_ADDR_VAR 0 9
26944: PUSH
26945: LD_VAR 0 7
26949: PPUSH
26950: LD_VAR 0 1
26954: PPUSH
26955: LD_VAR 0 2
26959: PPUSH
26960: CALL_OW 297
26964: ST_TO_ADDR
// if not result then
26965: LD_VAR 0 6
26969: NOT
26970: IFFALSE 26996
// result := [ [ i , tmp ] ] else
26972: LD_ADDR_VAR 0 6
26976: PUSH
26977: LD_VAR 0 7
26981: PUSH
26982: LD_VAR 0 9
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: ST_TO_ADDR
26994: GO 27138
// begin if result [ result ] [ 2 ] < tmp then
26996: LD_VAR 0 6
27000: PUSH
27001: LD_VAR 0 6
27005: ARRAY
27006: PUSH
27007: LD_INT 2
27009: ARRAY
27010: PUSH
27011: LD_VAR 0 9
27015: LESS
27016: IFFALSE 27058
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27018: LD_ADDR_VAR 0 6
27022: PUSH
27023: LD_VAR 0 6
27027: PPUSH
27028: LD_VAR 0 6
27032: PUSH
27033: LD_INT 1
27035: PLUS
27036: PPUSH
27037: LD_VAR 0 7
27041: PUSH
27042: LD_VAR 0 9
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PPUSH
27051: CALL_OW 2
27055: ST_TO_ADDR
27056: GO 27138
// for j = 1 to result do
27058: LD_ADDR_VAR 0 8
27062: PUSH
27063: DOUBLE
27064: LD_INT 1
27066: DEC
27067: ST_TO_ADDR
27068: LD_VAR 0 6
27072: PUSH
27073: FOR_TO
27074: IFFALSE 27136
// begin if tmp < result [ j ] [ 2 ] then
27076: LD_VAR 0 9
27080: PUSH
27081: LD_VAR 0 6
27085: PUSH
27086: LD_VAR 0 8
27090: ARRAY
27091: PUSH
27092: LD_INT 2
27094: ARRAY
27095: LESS
27096: IFFALSE 27134
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27098: LD_ADDR_VAR 0 6
27102: PUSH
27103: LD_VAR 0 6
27107: PPUSH
27108: LD_VAR 0 8
27112: PPUSH
27113: LD_VAR 0 7
27117: PUSH
27118: LD_VAR 0 9
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PPUSH
27127: CALL_OW 2
27131: ST_TO_ADDR
// break ;
27132: GO 27136
// end ; end ;
27134: GO 27073
27136: POP
27137: POP
// end ; end ;
27138: GO 26937
27140: POP
27141: POP
// if result and not asc then
27142: LD_VAR 0 6
27146: PUSH
27147: LD_VAR 0 4
27151: NOT
27152: AND
27153: IFFALSE 27228
// begin tmp := result ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: LD_VAR 0 6
27164: ST_TO_ADDR
// for i = tmp downto 1 do
27165: LD_ADDR_VAR 0 7
27169: PUSH
27170: DOUBLE
27171: LD_VAR 0 9
27175: INC
27176: ST_TO_ADDR
27177: LD_INT 1
27179: PUSH
27180: FOR_DOWNTO
27181: IFFALSE 27226
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27183: LD_ADDR_VAR 0 6
27187: PUSH
27188: LD_VAR 0 6
27192: PPUSH
27193: LD_VAR 0 9
27197: PUSH
27198: LD_VAR 0 7
27202: MINUS
27203: PUSH
27204: LD_INT 1
27206: PLUS
27207: PPUSH
27208: LD_VAR 0 9
27212: PUSH
27213: LD_VAR 0 7
27217: ARRAY
27218: PPUSH
27219: CALL_OW 1
27223: ST_TO_ADDR
27224: GO 27180
27226: POP
27227: POP
// end ; tmp := [ ] ;
27228: LD_ADDR_VAR 0 9
27232: PUSH
27233: EMPTY
27234: ST_TO_ADDR
// if mode then
27235: LD_VAR 0 5
27239: IFFALSE 27308
// begin for i = 1 to result do
27241: LD_ADDR_VAR 0 7
27245: PUSH
27246: DOUBLE
27247: LD_INT 1
27249: DEC
27250: ST_TO_ADDR
27251: LD_VAR 0 6
27255: PUSH
27256: FOR_TO
27257: IFFALSE 27296
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27259: LD_ADDR_VAR 0 9
27263: PUSH
27264: LD_VAR 0 9
27268: PPUSH
27269: LD_VAR 0 7
27273: PPUSH
27274: LD_VAR 0 6
27278: PUSH
27279: LD_VAR 0 7
27283: ARRAY
27284: PUSH
27285: LD_INT 1
27287: ARRAY
27288: PPUSH
27289: CALL_OW 1
27293: ST_TO_ADDR
27294: GO 27256
27296: POP
27297: POP
// result := tmp ;
27298: LD_ADDR_VAR 0 6
27302: PUSH
27303: LD_VAR 0 9
27307: ST_TO_ADDR
// end ; end ;
27308: LD_VAR 0 6
27312: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
27320: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27321: LD_ADDR_VAR 0 5
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// if not x or not y then
27343: LD_VAR 0 2
27347: NOT
27348: PUSH
27349: LD_VAR 0 3
27353: NOT
27354: OR
27355: IFFALSE 27359
// exit ;
27357: GO 29009
// if not range then
27359: LD_VAR 0 4
27363: NOT
27364: IFFALSE 27374
// range := 10 ;
27366: LD_ADDR_VAR 0 4
27370: PUSH
27371: LD_INT 10
27373: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27374: LD_ADDR_VAR 0 8
27378: PUSH
27379: LD_INT 81
27381: PUSH
27382: LD_VAR 0 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 92
27393: PUSH
27394: LD_VAR 0 2
27398: PUSH
27399: LD_VAR 0 3
27403: PUSH
27404: LD_VAR 0 4
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 3
27417: PUSH
27418: LD_INT 21
27420: PUSH
27421: LD_INT 3
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: PPUSH
27437: CALL_OW 69
27441: ST_TO_ADDR
// if not tmp then
27442: LD_VAR 0 8
27446: NOT
27447: IFFALSE 27451
// exit ;
27449: GO 29009
// for i in tmp do
27451: LD_ADDR_VAR 0 6
27455: PUSH
27456: LD_VAR 0 8
27460: PUSH
27461: FOR_IN
27462: IFFALSE 28984
// begin points := [ 0 , 0 , 0 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// bpoints := 1 ;
27483: LD_ADDR_VAR 0 10
27487: PUSH
27488: LD_INT 1
27490: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27491: LD_VAR 0 6
27495: PPUSH
27496: CALL_OW 247
27500: PUSH
27501: LD_INT 1
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27509
27507: GO 28087
27509: POP
// begin if GetClass ( i ) = 1 then
27510: LD_VAR 0 6
27514: PPUSH
27515: CALL_OW 257
27519: PUSH
27520: LD_INT 1
27522: EQUAL
27523: IFFALSE 27544
// points := [ 10 , 5 , 3 ] ;
27525: LD_ADDR_VAR 0 9
27529: PUSH
27530: LD_INT 10
27532: PUSH
27533: LD_INT 5
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27544: LD_VAR 0 6
27548: PPUSH
27549: CALL_OW 257
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: LD_INT 4
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: IN
27568: IFFALSE 27589
// points := [ 3 , 2 , 1 ] ;
27570: LD_ADDR_VAR 0 9
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27589: LD_VAR 0 6
27593: PPUSH
27594: CALL_OW 257
27598: PUSH
27599: LD_INT 5
27601: EQUAL
27602: IFFALSE 27623
// points := [ 130 , 5 , 2 ] ;
27604: LD_ADDR_VAR 0 9
27608: PUSH
27609: LD_INT 130
27611: PUSH
27612: LD_INT 5
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27623: LD_VAR 0 6
27627: PPUSH
27628: CALL_OW 257
27632: PUSH
27633: LD_INT 8
27635: EQUAL
27636: IFFALSE 27657
// points := [ 35 , 35 , 30 ] ;
27638: LD_ADDR_VAR 0 9
27642: PUSH
27643: LD_INT 35
27645: PUSH
27646: LD_INT 35
27648: PUSH
27649: LD_INT 30
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27657: LD_VAR 0 6
27661: PPUSH
27662: CALL_OW 257
27666: PUSH
27667: LD_INT 9
27669: EQUAL
27670: IFFALSE 27691
// points := [ 20 , 55 , 40 ] ;
27672: LD_ADDR_VAR 0 9
27676: PUSH
27677: LD_INT 20
27679: PUSH
27680: LD_INT 55
27682: PUSH
27683: LD_INT 40
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27691: LD_VAR 0 6
27695: PPUSH
27696: CALL_OW 257
27700: PUSH
27701: LD_INT 12
27703: PUSH
27704: LD_INT 16
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: IN
27711: IFFALSE 27732
// points := [ 5 , 3 , 2 ] ;
27713: LD_ADDR_VAR 0 9
27717: PUSH
27718: LD_INT 5
27720: PUSH
27721: LD_INT 3
27723: PUSH
27724: LD_INT 2
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27732: LD_VAR 0 6
27736: PPUSH
27737: CALL_OW 257
27741: PUSH
27742: LD_INT 17
27744: EQUAL
27745: IFFALSE 27766
// points := [ 100 , 50 , 75 ] ;
27747: LD_ADDR_VAR 0 9
27751: PUSH
27752: LD_INT 100
27754: PUSH
27755: LD_INT 50
27757: PUSH
27758: LD_INT 75
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27766: LD_VAR 0 6
27770: PPUSH
27771: CALL_OW 257
27775: PUSH
27776: LD_INT 15
27778: EQUAL
27779: IFFALSE 27800
// points := [ 10 , 5 , 3 ] ;
27781: LD_ADDR_VAR 0 9
27785: PUSH
27786: LD_INT 10
27788: PUSH
27789: LD_INT 5
27791: PUSH
27792: LD_INT 3
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27800: LD_VAR 0 6
27804: PPUSH
27805: CALL_OW 257
27809: PUSH
27810: LD_INT 14
27812: EQUAL
27813: IFFALSE 27834
// points := [ 10 , 0 , 0 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 10
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27834: LD_VAR 0 6
27838: PPUSH
27839: CALL_OW 257
27843: PUSH
27844: LD_INT 11
27846: EQUAL
27847: IFFALSE 27868
// points := [ 30 , 10 , 5 ] ;
27849: LD_ADDR_VAR 0 9
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 10
27859: PUSH
27860: LD_INT 5
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27868: LD_VAR 0 1
27872: PPUSH
27873: LD_INT 5
27875: PPUSH
27876: CALL_OW 321
27880: PUSH
27881: LD_INT 2
27883: EQUAL
27884: IFFALSE 27901
// bpoints := bpoints * 1.8 ;
27886: LD_ADDR_VAR 0 10
27890: PUSH
27891: LD_VAR 0 10
27895: PUSH
27896: LD_REAL  1.80000000000000E+0000
27899: MUL
27900: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27901: LD_VAR 0 6
27905: PPUSH
27906: CALL_OW 257
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 3
27919: PUSH
27920: LD_INT 4
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: IN
27929: PUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_INT 51
27937: PPUSH
27938: CALL_OW 321
27942: PUSH
27943: LD_INT 2
27945: EQUAL
27946: AND
27947: IFFALSE 27964
// bpoints := bpoints * 1.2 ;
27949: LD_ADDR_VAR 0 10
27953: PUSH
27954: LD_VAR 0 10
27958: PUSH
27959: LD_REAL  1.20000000000000E+0000
27962: MUL
27963: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27964: LD_VAR 0 6
27968: PPUSH
27969: CALL_OW 257
27973: PUSH
27974: LD_INT 5
27976: PUSH
27977: LD_INT 7
27979: PUSH
27980: LD_INT 9
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: IN
27988: PUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: LD_INT 52
27996: PPUSH
27997: CALL_OW 321
28001: PUSH
28002: LD_INT 2
28004: EQUAL
28005: AND
28006: IFFALSE 28023
// bpoints := bpoints * 1.5 ;
28008: LD_ADDR_VAR 0 10
28012: PUSH
28013: LD_VAR 0 10
28017: PUSH
28018: LD_REAL  1.50000000000000E+0000
28021: MUL
28022: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28023: LD_VAR 0 1
28027: PPUSH
28028: LD_INT 66
28030: PPUSH
28031: CALL_OW 321
28035: PUSH
28036: LD_INT 2
28038: EQUAL
28039: IFFALSE 28056
// bpoints := bpoints * 1.1 ;
28041: LD_ADDR_VAR 0 10
28045: PUSH
28046: LD_VAR 0 10
28050: PUSH
28051: LD_REAL  1.10000000000000E+0000
28054: MUL
28055: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28056: LD_ADDR_VAR 0 10
28060: PUSH
28061: LD_VAR 0 10
28065: PUSH
28066: LD_VAR 0 6
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: CALL_OW 259
28078: PUSH
28079: LD_REAL  1.15000000000000E+0000
28082: MUL
28083: MUL
28084: ST_TO_ADDR
// end ; unit_vehicle :
28085: GO 28913
28087: LD_INT 2
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28901
28095: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28096: LD_VAR 0 6
28100: PPUSH
28101: CALL_OW 264
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 42
28111: PUSH
28112: LD_INT 24
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: IN
28120: IFFALSE 28141
// points := [ 25 , 5 , 3 ] ;
28122: LD_ADDR_VAR 0 9
28126: PUSH
28127: LD_INT 25
28129: PUSH
28130: LD_INT 5
28132: PUSH
28133: LD_INT 3
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28141: LD_VAR 0 6
28145: PPUSH
28146: CALL_OW 264
28150: PUSH
28151: LD_INT 4
28153: PUSH
28154: LD_INT 43
28156: PUSH
28157: LD_INT 25
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: IN
28165: IFFALSE 28186
// points := [ 40 , 15 , 5 ] ;
28167: LD_ADDR_VAR 0 9
28171: PUSH
28172: LD_INT 40
28174: PUSH
28175: LD_INT 15
28177: PUSH
28178: LD_INT 5
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 264
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 23
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: IN
28206: IFFALSE 28227
// points := [ 7 , 25 , 8 ] ;
28208: LD_ADDR_VAR 0 9
28212: PUSH
28213: LD_INT 7
28215: PUSH
28216: LD_INT 25
28218: PUSH
28219: LD_INT 8
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28227: LD_VAR 0 6
28231: PPUSH
28232: CALL_OW 264
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: LD_INT 27
28242: PUSH
28243: LD_INT 44
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: IN
28251: IFFALSE 28272
// points := [ 14 , 50 , 16 ] ;
28253: LD_ADDR_VAR 0 9
28257: PUSH
28258: LD_INT 14
28260: PUSH
28261: LD_INT 50
28263: PUSH
28264: LD_INT 16
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28272: LD_VAR 0 6
28276: PPUSH
28277: CALL_OW 264
28281: PUSH
28282: LD_INT 6
28284: PUSH
28285: LD_INT 46
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: IN
28292: IFFALSE 28313
// points := [ 32 , 120 , 70 ] ;
28294: LD_ADDR_VAR 0 9
28298: PUSH
28299: LD_INT 32
28301: PUSH
28302: LD_INT 120
28304: PUSH
28305: LD_INT 70
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28313: LD_VAR 0 6
28317: PPUSH
28318: CALL_OW 264
28322: PUSH
28323: LD_INT 7
28325: PUSH
28326: LD_INT 28
28328: PUSH
28329: LD_INT 45
28331: PUSH
28332: LD_INT 92
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: IN
28341: IFFALSE 28362
// points := [ 35 , 20 , 45 ] ;
28343: LD_ADDR_VAR 0 9
28347: PUSH
28348: LD_INT 35
28350: PUSH
28351: LD_INT 20
28353: PUSH
28354: LD_INT 45
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28362: LD_VAR 0 6
28366: PPUSH
28367: CALL_OW 264
28371: PUSH
28372: LD_INT 47
28374: PUSH
28375: EMPTY
28376: LIST
28377: IN
28378: IFFALSE 28399
// points := [ 67 , 45 , 75 ] ;
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_INT 67
28387: PUSH
28388: LD_INT 45
28390: PUSH
28391: LD_INT 75
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28399: LD_VAR 0 6
28403: PPUSH
28404: CALL_OW 264
28408: PUSH
28409: LD_INT 26
28411: PUSH
28412: EMPTY
28413: LIST
28414: IN
28415: IFFALSE 28436
// points := [ 120 , 30 , 80 ] ;
28417: LD_ADDR_VAR 0 9
28421: PUSH
28422: LD_INT 120
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: LD_INT 80
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28436: LD_VAR 0 6
28440: PPUSH
28441: CALL_OW 264
28445: PUSH
28446: LD_INT 22
28448: PUSH
28449: EMPTY
28450: LIST
28451: IN
28452: IFFALSE 28473
// points := [ 40 , 1 , 1 ] ;
28454: LD_ADDR_VAR 0 9
28458: PUSH
28459: LD_INT 40
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28473: LD_VAR 0 6
28477: PPUSH
28478: CALL_OW 264
28482: PUSH
28483: LD_INT 29
28485: PUSH
28486: EMPTY
28487: LIST
28488: IN
28489: IFFALSE 28510
// points := [ 70 , 200 , 400 ] ;
28491: LD_ADDR_VAR 0 9
28495: PUSH
28496: LD_INT 70
28498: PUSH
28499: LD_INT 200
28501: PUSH
28502: LD_INT 400
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28510: LD_VAR 0 6
28514: PPUSH
28515: CALL_OW 264
28519: PUSH
28520: LD_INT 14
28522: PUSH
28523: LD_INT 53
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: IN
28530: IFFALSE 28551
// points := [ 40 , 10 , 20 ] ;
28532: LD_ADDR_VAR 0 9
28536: PUSH
28537: LD_INT 40
28539: PUSH
28540: LD_INT 10
28542: PUSH
28543: LD_INT 20
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28551: LD_VAR 0 6
28555: PPUSH
28556: CALL_OW 264
28560: PUSH
28561: LD_INT 9
28563: PUSH
28564: EMPTY
28565: LIST
28566: IN
28567: IFFALSE 28588
// points := [ 5 , 70 , 20 ] ;
28569: LD_ADDR_VAR 0 9
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: LD_INT 70
28579: PUSH
28580: LD_INT 20
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28588: LD_VAR 0 6
28592: PPUSH
28593: CALL_OW 264
28597: PUSH
28598: LD_INT 10
28600: PUSH
28601: EMPTY
28602: LIST
28603: IN
28604: IFFALSE 28625
// points := [ 35 , 110 , 70 ] ;
28606: LD_ADDR_VAR 0 9
28610: PUSH
28611: LD_INT 35
28613: PUSH
28614: LD_INT 110
28616: PUSH
28617: LD_INT 70
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28625: LD_VAR 0 6
28629: PPUSH
28630: CALL_OW 265
28634: PUSH
28635: LD_INT 25
28637: EQUAL
28638: IFFALSE 28659
// points := [ 80 , 65 , 100 ] ;
28640: LD_ADDR_VAR 0 9
28644: PUSH
28645: LD_INT 80
28647: PUSH
28648: LD_INT 65
28650: PUSH
28651: LD_INT 100
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28659: LD_VAR 0 6
28663: PPUSH
28664: CALL_OW 263
28668: PUSH
28669: LD_INT 1
28671: EQUAL
28672: IFFALSE 28707
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 10
28683: PUSH
28684: LD_VAR 0 6
28688: PPUSH
28689: CALL_OW 311
28693: PPUSH
28694: LD_INT 3
28696: PPUSH
28697: CALL_OW 259
28701: PUSH
28702: LD_INT 4
28704: MUL
28705: MUL
28706: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28707: LD_VAR 0 6
28711: PPUSH
28712: CALL_OW 263
28716: PUSH
28717: LD_INT 2
28719: EQUAL
28720: IFFALSE 28771
// begin j := IsControledBy ( i ) ;
28722: LD_ADDR_VAR 0 7
28726: PUSH
28727: LD_VAR 0 6
28731: PPUSH
28732: CALL_OW 312
28736: ST_TO_ADDR
// if j then
28737: LD_VAR 0 7
28741: IFFALSE 28771
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28743: LD_ADDR_VAR 0 10
28747: PUSH
28748: LD_VAR 0 10
28752: PUSH
28753: LD_VAR 0 7
28757: PPUSH
28758: LD_INT 3
28760: PPUSH
28761: CALL_OW 259
28765: PUSH
28766: LD_INT 3
28768: MUL
28769: MUL
28770: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28771: LD_VAR 0 6
28775: PPUSH
28776: CALL_OW 264
28780: PUSH
28781: LD_INT 5
28783: PUSH
28784: LD_INT 6
28786: PUSH
28787: LD_INT 46
28789: PUSH
28790: LD_INT 44
28792: PUSH
28793: LD_INT 47
28795: PUSH
28796: LD_INT 45
28798: PUSH
28799: LD_INT 28
28801: PUSH
28802: LD_INT 7
28804: PUSH
28805: LD_INT 27
28807: PUSH
28808: LD_INT 29
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: IN
28823: PUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: LD_INT 52
28831: PPUSH
28832: CALL_OW 321
28836: PUSH
28837: LD_INT 2
28839: EQUAL
28840: AND
28841: IFFALSE 28858
// bpoints := bpoints * 1.2 ;
28843: LD_ADDR_VAR 0 10
28847: PUSH
28848: LD_VAR 0 10
28852: PUSH
28853: LD_REAL  1.20000000000000E+0000
28856: MUL
28857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28858: LD_VAR 0 6
28862: PPUSH
28863: CALL_OW 264
28867: PUSH
28868: LD_INT 6
28870: PUSH
28871: LD_INT 46
28873: PUSH
28874: LD_INT 47
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: IN
28882: IFFALSE 28899
// bpoints := bpoints * 1.2 ;
28884: LD_ADDR_VAR 0 10
28888: PUSH
28889: LD_VAR 0 10
28893: PUSH
28894: LD_REAL  1.20000000000000E+0000
28897: MUL
28898: ST_TO_ADDR
// end ; unit_building :
28899: GO 28913
28901: LD_INT 3
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28912
28909: POP
// ; end ;
28910: GO 28913
28912: POP
// for j = 1 to 3 do
28913: LD_ADDR_VAR 0 7
28917: PUSH
28918: DOUBLE
28919: LD_INT 1
28921: DEC
28922: ST_TO_ADDR
28923: LD_INT 3
28925: PUSH
28926: FOR_TO
28927: IFFALSE 28980
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28929: LD_ADDR_VAR 0 5
28933: PUSH
28934: LD_VAR 0 5
28938: PPUSH
28939: LD_VAR 0 7
28943: PPUSH
28944: LD_VAR 0 5
28948: PUSH
28949: LD_VAR 0 7
28953: ARRAY
28954: PUSH
28955: LD_VAR 0 9
28959: PUSH
28960: LD_VAR 0 7
28964: ARRAY
28965: PUSH
28966: LD_VAR 0 10
28970: MUL
28971: PLUS
28972: PPUSH
28973: CALL_OW 1
28977: ST_TO_ADDR
28978: GO 28926
28980: POP
28981: POP
// end ;
28982: GO 27461
28984: POP
28985: POP
// result := Replace ( result , 4 , tmp ) ;
28986: LD_ADDR_VAR 0 5
28990: PUSH
28991: LD_VAR 0 5
28995: PPUSH
28996: LD_INT 4
28998: PPUSH
28999: LD_VAR 0 8
29003: PPUSH
29004: CALL_OW 1
29008: ST_TO_ADDR
// end ;
29009: LD_VAR 0 5
29013: RET
// export function DangerAtRange ( unit , range ) ; begin
29014: LD_INT 0
29016: PPUSH
// if not unit then
29017: LD_VAR 0 1
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29071
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29026: LD_ADDR_VAR 0 3
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 255
29040: PPUSH
29041: LD_VAR 0 1
29045: PPUSH
29046: CALL_OW 250
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 251
29060: PPUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: CALL 27313 0 4
29070: ST_TO_ADDR
// end ;
29071: LD_VAR 0 3
29075: RET
// export function DangerInArea ( side , area ) ; begin
29076: LD_INT 0
29078: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29079: LD_ADDR_VAR 0 3
29083: PUSH
29084: LD_VAR 0 2
29088: PPUSH
29089: LD_INT 81
29091: PUSH
29092: LD_VAR 0 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PPUSH
29101: CALL_OW 70
29105: ST_TO_ADDR
// end ;
29106: LD_VAR 0 3
29110: RET
// export function IsExtension ( b ) ; begin
29111: LD_INT 0
29113: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_VAR 0 1
29123: PUSH
29124: LD_INT 23
29126: PUSH
29127: LD_INT 20
29129: PUSH
29130: LD_INT 22
29132: PUSH
29133: LD_INT 17
29135: PUSH
29136: LD_INT 24
29138: PUSH
29139: LD_INT 21
29141: PUSH
29142: LD_INT 19
29144: PUSH
29145: LD_INT 16
29147: PUSH
29148: LD_INT 25
29150: PUSH
29151: LD_INT 18
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: IN
29166: ST_TO_ADDR
// end ;
29167: LD_VAR 0 2
29171: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29172: LD_INT 0
29174: PPUSH
29175: PPUSH
29176: PPUSH
// result := [ ] ;
29177: LD_ADDR_VAR 0 4
29181: PUSH
29182: EMPTY
29183: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29184: LD_ADDR_VAR 0 5
29188: PUSH
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 21
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 70
29208: ST_TO_ADDR
// if not tmp then
29209: LD_VAR 0 5
29213: NOT
29214: IFFALSE 29218
// exit ;
29216: GO 29282
// if checkLink then
29218: LD_VAR 0 3
29222: IFFALSE 29272
// begin for i in tmp do
29224: LD_ADDR_VAR 0 6
29228: PUSH
29229: LD_VAR 0 5
29233: PUSH
29234: FOR_IN
29235: IFFALSE 29270
// if GetBase ( i ) <> base then
29237: LD_VAR 0 6
29241: PPUSH
29242: CALL_OW 274
29246: PUSH
29247: LD_VAR 0 1
29251: NONEQUAL
29252: IFFALSE 29268
// ComLinkToBase ( base , i ) ;
29254: LD_VAR 0 1
29258: PPUSH
29259: LD_VAR 0 6
29263: PPUSH
29264: CALL_OW 169
29268: GO 29234
29270: POP
29271: POP
// end ; result := tmp ;
29272: LD_ADDR_VAR 0 4
29276: PUSH
29277: LD_VAR 0 5
29281: ST_TO_ADDR
// end ;
29282: LD_VAR 0 4
29286: RET
// export function ComComplete ( units , b ) ; var i ; begin
29287: LD_INT 0
29289: PPUSH
29290: PPUSH
// if not units then
29291: LD_VAR 0 1
29295: NOT
29296: IFFALSE 29300
// exit ;
29298: GO 29390
// for i in units do
29300: LD_ADDR_VAR 0 4
29304: PUSH
29305: LD_VAR 0 1
29309: PUSH
29310: FOR_IN
29311: IFFALSE 29388
// if BuildingStatus ( b ) = bs_build then
29313: LD_VAR 0 2
29317: PPUSH
29318: CALL_OW 461
29322: PUSH
29323: LD_INT 1
29325: EQUAL
29326: IFFALSE 29386
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29328: LD_VAR 0 4
29332: PPUSH
29333: LD_STRING h
29335: PUSH
29336: LD_VAR 0 2
29340: PPUSH
29341: CALL_OW 250
29345: PUSH
29346: LD_VAR 0 2
29350: PPUSH
29351: CALL_OW 251
29355: PUSH
29356: LD_VAR 0 2
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: PPUSH
29382: CALL_OW 446
29386: GO 29310
29388: POP
29389: POP
// end ;
29390: LD_VAR 0 3
29394: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29403: LD_VAR 0 1
29407: NOT
29408: PUSH
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 263
29418: PUSH
29419: LD_INT 2
29421: NONEQUAL
29422: OR
29423: IFFALSE 29427
// exit ;
29425: GO 29743
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29427: LD_ADDR_VAR 0 6
29431: PUSH
29432: LD_INT 22
29434: PUSH
29435: LD_VAR 0 1
29439: PPUSH
29440: CALL_OW 255
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 30
29454: PUSH
29455: LD_INT 36
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 34
29464: PUSH
29465: LD_INT 31
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: ST_TO_ADDR
// if not tmp then
29486: LD_VAR 0 6
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29743
// result := [ ] ;
29495: LD_ADDR_VAR 0 2
29499: PUSH
29500: EMPTY
29501: ST_TO_ADDR
// for i in tmp do
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: LD_VAR 0 6
29511: PUSH
29512: FOR_IN
29513: IFFALSE 29584
// begin t := UnitsInside ( i ) ;
29515: LD_ADDR_VAR 0 4
29519: PUSH
29520: LD_VAR 0 3
29524: PPUSH
29525: CALL_OW 313
29529: ST_TO_ADDR
// if t then
29530: LD_VAR 0 4
29534: IFFALSE 29582
// for j in t do
29536: LD_ADDR_VAR 0 7
29540: PUSH
29541: LD_VAR 0 4
29545: PUSH
29546: FOR_IN
29547: IFFALSE 29580
// result := Replace ( result , result + 1 , j ) ;
29549: LD_ADDR_VAR 0 2
29553: PUSH
29554: LD_VAR 0 2
29558: PPUSH
29559: LD_VAR 0 2
29563: PUSH
29564: LD_INT 1
29566: PLUS
29567: PPUSH
29568: LD_VAR 0 7
29572: PPUSH
29573: CALL_OW 1
29577: ST_TO_ADDR
29578: GO 29546
29580: POP
29581: POP
// end ;
29582: GO 29512
29584: POP
29585: POP
// if not result then
29586: LD_VAR 0 2
29590: NOT
29591: IFFALSE 29595
// exit ;
29593: GO 29743
// mech := result [ 1 ] ;
29595: LD_ADDR_VAR 0 5
29599: PUSH
29600: LD_VAR 0 2
29604: PUSH
29605: LD_INT 1
29607: ARRAY
29608: ST_TO_ADDR
// if result > 1 then
29609: LD_VAR 0 2
29613: PUSH
29614: LD_INT 1
29616: GREATER
29617: IFFALSE 29729
// begin for i = 2 to result do
29619: LD_ADDR_VAR 0 3
29623: PUSH
29624: DOUBLE
29625: LD_INT 2
29627: DEC
29628: ST_TO_ADDR
29629: LD_VAR 0 2
29633: PUSH
29634: FOR_TO
29635: IFFALSE 29727
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_VAR 0 2
29646: PUSH
29647: LD_VAR 0 3
29651: ARRAY
29652: PPUSH
29653: LD_INT 3
29655: PPUSH
29656: CALL_OW 259
29660: PUSH
29661: LD_VAR 0 2
29665: PUSH
29666: LD_VAR 0 3
29670: ARRAY
29671: PPUSH
29672: CALL_OW 432
29676: MINUS
29677: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29678: LD_VAR 0 4
29682: PUSH
29683: LD_VAR 0 5
29687: PPUSH
29688: LD_INT 3
29690: PPUSH
29691: CALL_OW 259
29695: PUSH
29696: LD_VAR 0 5
29700: PPUSH
29701: CALL_OW 432
29705: MINUS
29706: GREATEREQUAL
29707: IFFALSE 29725
// mech := result [ i ] ;
29709: LD_ADDR_VAR 0 5
29713: PUSH
29714: LD_VAR 0 2
29718: PUSH
29719: LD_VAR 0 3
29723: ARRAY
29724: ST_TO_ADDR
// end ;
29725: GO 29634
29727: POP
29728: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29729: LD_VAR 0 1
29733: PPUSH
29734: LD_VAR 0 5
29738: PPUSH
29739: CALL_OW 135
// end ;
29743: LD_VAR 0 2
29747: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
// result := [ ] ;
29763: LD_ADDR_VAR 0 7
29767: PUSH
29768: EMPTY
29769: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29770: LD_VAR 0 1
29774: PPUSH
29775: CALL_OW 266
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: IN
29790: NOT
29791: IFFALSE 29795
// exit ;
29793: GO 31429
// if name then
29795: LD_VAR 0 3
29799: IFFALSE 29815
// SetBName ( base_dep , name ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_VAR 0 3
29810: PPUSH
29811: CALL_OW 500
// base := GetBase ( base_dep ) ;
29815: LD_ADDR_VAR 0 15
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 274
29829: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29830: LD_ADDR_VAR 0 16
29834: PUSH
29835: LD_VAR 0 1
29839: PPUSH
29840: CALL_OW 255
29844: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29845: LD_ADDR_VAR 0 17
29849: PUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 248
29859: ST_TO_ADDR
// if sources then
29860: LD_VAR 0 5
29864: IFFALSE 29911
// for i = 1 to 3 do
29866: LD_ADDR_VAR 0 8
29870: PUSH
29871: DOUBLE
29872: LD_INT 1
29874: DEC
29875: ST_TO_ADDR
29876: LD_INT 3
29878: PUSH
29879: FOR_TO
29880: IFFALSE 29909
// AddResourceType ( base , i , sources [ i ] ) ;
29882: LD_VAR 0 15
29886: PPUSH
29887: LD_VAR 0 8
29891: PPUSH
29892: LD_VAR 0 5
29896: PUSH
29897: LD_VAR 0 8
29901: ARRAY
29902: PPUSH
29903: CALL_OW 276
29907: GO 29879
29909: POP
29910: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29911: LD_ADDR_VAR 0 18
29915: PUSH
29916: LD_VAR 0 15
29920: PPUSH
29921: LD_VAR 0 2
29925: PPUSH
29926: LD_INT 1
29928: PPUSH
29929: CALL 29172 0 3
29933: ST_TO_ADDR
// InitHc ;
29934: CALL_OW 19
// InitUc ;
29938: CALL_OW 18
// uc_side := side ;
29942: LD_ADDR_OWVAR 20
29946: PUSH
29947: LD_VAR 0 16
29951: ST_TO_ADDR
// uc_nation := nation ;
29952: LD_ADDR_OWVAR 21
29956: PUSH
29957: LD_VAR 0 17
29961: ST_TO_ADDR
// if buildings then
29962: LD_VAR 0 18
29966: IFFALSE 31288
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29968: LD_ADDR_VAR 0 19
29972: PUSH
29973: LD_VAR 0 18
29977: PPUSH
29978: LD_INT 2
29980: PUSH
29981: LD_INT 30
29983: PUSH
29984: LD_INT 29
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 30
29993: PUSH
29994: LD_INT 30
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 72
30010: ST_TO_ADDR
// if tmp then
30011: LD_VAR 0 19
30015: IFFALSE 30063
// for i in tmp do
30017: LD_ADDR_VAR 0 8
30021: PUSH
30022: LD_VAR 0 19
30026: PUSH
30027: FOR_IN
30028: IFFALSE 30061
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30030: LD_VAR 0 8
30034: PPUSH
30035: CALL_OW 250
30039: PPUSH
30040: LD_VAR 0 8
30044: PPUSH
30045: CALL_OW 251
30049: PPUSH
30050: LD_VAR 0 16
30054: PPUSH
30055: CALL_OW 441
30059: GO 30027
30061: POP
30062: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30063: LD_VAR 0 18
30067: PPUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 30
30073: PUSH
30074: LD_INT 32
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 30
30083: PUSH
30084: LD_INT 33
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 72
30100: IFFALSE 30188
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30102: LD_ADDR_VAR 0 8
30106: PUSH
30107: LD_VAR 0 18
30111: PPUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 30
30117: PUSH
30118: LD_INT 32
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 30
30127: PUSH
30128: LD_INT 33
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: PPUSH
30140: CALL_OW 72
30144: PUSH
30145: FOR_IN
30146: IFFALSE 30186
// begin if not GetBWeapon ( i ) then
30148: LD_VAR 0 8
30152: PPUSH
30153: CALL_OW 269
30157: NOT
30158: IFFALSE 30184
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30160: LD_VAR 0 8
30164: PPUSH
30165: LD_VAR 0 8
30169: PPUSH
30170: LD_VAR 0 2
30174: PPUSH
30175: CALL 31434 0 2
30179: PPUSH
30180: CALL_OW 431
// end ;
30184: GO 30145
30186: POP
30187: POP
// end ; for i = 1 to personel do
30188: LD_ADDR_VAR 0 8
30192: PUSH
30193: DOUBLE
30194: LD_INT 1
30196: DEC
30197: ST_TO_ADDR
30198: LD_VAR 0 6
30202: PUSH
30203: FOR_TO
30204: IFFALSE 31268
// begin if i > 4 then
30206: LD_VAR 0 8
30210: PUSH
30211: LD_INT 4
30213: GREATER
30214: IFFALSE 30218
// break ;
30216: GO 31268
// case i of 1 :
30218: LD_VAR 0 8
30222: PUSH
30223: LD_INT 1
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30311
30231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30232: LD_ADDR_VAR 0 12
30236: PUSH
30237: LD_VAR 0 18
30241: PPUSH
30242: LD_INT 22
30244: PUSH
30245: LD_VAR 0 16
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 58
30256: PUSH
30257: EMPTY
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 30
30265: PUSH
30266: LD_INT 32
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 30
30275: PUSH
30276: LD_INT 4
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 30
30285: PUSH
30286: LD_INT 5
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 72
30308: ST_TO_ADDR
30309: GO 30533
30311: LD_INT 2
30313: DOUBLE
30314: EQUAL
30315: IFTRUE 30319
30317: GO 30381
30319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30320: LD_ADDR_VAR 0 12
30324: PUSH
30325: LD_VAR 0 18
30329: PPUSH
30330: LD_INT 22
30332: PUSH
30333: LD_VAR 0 16
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 30
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 30
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PPUSH
30374: CALL_OW 72
30378: ST_TO_ADDR
30379: GO 30533
30381: LD_INT 3
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30451
30389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30390: LD_ADDR_VAR 0 12
30394: PUSH
30395: LD_VAR 0 18
30399: PPUSH
30400: LD_INT 22
30402: PUSH
30403: LD_VAR 0 16
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 30
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PPUSH
30444: CALL_OW 72
30448: ST_TO_ADDR
30449: GO 30533
30451: LD_INT 4
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30532
30459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30460: LD_ADDR_VAR 0 12
30464: PUSH
30465: LD_VAR 0 18
30469: PPUSH
30470: LD_INT 22
30472: PUSH
30473: LD_VAR 0 16
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: LD_INT 30
30487: PUSH
30488: LD_INT 6
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 30
30497: PUSH
30498: LD_INT 7
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 30
30507: PUSH
30508: LD_INT 8
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 72
30529: ST_TO_ADDR
30530: GO 30533
30532: POP
// if i = 1 then
30533: LD_VAR 0 8
30537: PUSH
30538: LD_INT 1
30540: EQUAL
30541: IFFALSE 30652
// begin tmp := [ ] ;
30543: LD_ADDR_VAR 0 19
30547: PUSH
30548: EMPTY
30549: ST_TO_ADDR
// for j in f do
30550: LD_ADDR_VAR 0 9
30554: PUSH
30555: LD_VAR 0 12
30559: PUSH
30560: FOR_IN
30561: IFFALSE 30634
// if GetBType ( j ) = b_bunker then
30563: LD_VAR 0 9
30567: PPUSH
30568: CALL_OW 266
30572: PUSH
30573: LD_INT 32
30575: EQUAL
30576: IFFALSE 30603
// tmp := Insert ( tmp , 1 , j ) else
30578: LD_ADDR_VAR 0 19
30582: PUSH
30583: LD_VAR 0 19
30587: PPUSH
30588: LD_INT 1
30590: PPUSH
30591: LD_VAR 0 9
30595: PPUSH
30596: CALL_OW 2
30600: ST_TO_ADDR
30601: GO 30632
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30603: LD_ADDR_VAR 0 19
30607: PUSH
30608: LD_VAR 0 19
30612: PPUSH
30613: LD_VAR 0 19
30617: PUSH
30618: LD_INT 1
30620: PLUS
30621: PPUSH
30622: LD_VAR 0 9
30626: PPUSH
30627: CALL_OW 2
30631: ST_TO_ADDR
30632: GO 30560
30634: POP
30635: POP
// if tmp then
30636: LD_VAR 0 19
30640: IFFALSE 30652
// f := tmp ;
30642: LD_ADDR_VAR 0 12
30646: PUSH
30647: LD_VAR 0 19
30651: ST_TO_ADDR
// end ; x := personel [ i ] ;
30652: LD_ADDR_VAR 0 13
30656: PUSH
30657: LD_VAR 0 6
30661: PUSH
30662: LD_VAR 0 8
30666: ARRAY
30667: ST_TO_ADDR
// if x = - 1 then
30668: LD_VAR 0 13
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: EQUAL
30677: IFFALSE 30886
// begin for j in f do
30679: LD_ADDR_VAR 0 9
30683: PUSH
30684: LD_VAR 0 12
30688: PUSH
30689: FOR_IN
30690: IFFALSE 30882
// repeat InitHc ;
30692: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30696: LD_VAR 0 9
30700: PPUSH
30701: CALL_OW 266
30705: PUSH
30706: LD_INT 5
30708: EQUAL
30709: IFFALSE 30779
// begin if UnitsInside ( j ) < 3 then
30711: LD_VAR 0 9
30715: PPUSH
30716: CALL_OW 313
30720: PUSH
30721: LD_INT 3
30723: LESS
30724: IFFALSE 30760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30726: LD_INT 0
30728: PPUSH
30729: LD_INT 5
30731: PUSH
30732: LD_INT 8
30734: PUSH
30735: LD_INT 9
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: PUSH
30743: LD_VAR 0 17
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 4
30753: PPUSH
30754: CALL_OW 380
30758: GO 30777
// PrepareHuman ( false , i , skill ) ;
30760: LD_INT 0
30762: PPUSH
30763: LD_VAR 0 8
30767: PPUSH
30768: LD_VAR 0 4
30772: PPUSH
30773: CALL_OW 380
// end else
30777: GO 30796
// PrepareHuman ( false , i , skill ) ;
30779: LD_INT 0
30781: PPUSH
30782: LD_VAR 0 8
30786: PPUSH
30787: LD_VAR 0 4
30791: PPUSH
30792: CALL_OW 380
// un := CreateHuman ;
30796: LD_ADDR_VAR 0 14
30800: PUSH
30801: CALL_OW 44
30805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30806: LD_ADDR_VAR 0 7
30810: PUSH
30811: LD_VAR 0 7
30815: PPUSH
30816: LD_INT 1
30818: PPUSH
30819: LD_VAR 0 14
30823: PPUSH
30824: CALL_OW 2
30828: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30829: LD_VAR 0 14
30833: PPUSH
30834: LD_VAR 0 9
30838: PPUSH
30839: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30843: LD_VAR 0 9
30847: PPUSH
30848: CALL_OW 313
30852: PUSH
30853: LD_INT 6
30855: EQUAL
30856: PUSH
30857: LD_VAR 0 9
30861: PPUSH
30862: CALL_OW 266
30866: PUSH
30867: LD_INT 32
30869: PUSH
30870: LD_INT 31
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: IN
30877: OR
30878: IFFALSE 30692
30880: GO 30689
30882: POP
30883: POP
// end else
30884: GO 31266
// for j = 1 to x do
30886: LD_ADDR_VAR 0 9
30890: PUSH
30891: DOUBLE
30892: LD_INT 1
30894: DEC
30895: ST_TO_ADDR
30896: LD_VAR 0 13
30900: PUSH
30901: FOR_TO
30902: IFFALSE 31264
// begin InitHc ;
30904: CALL_OW 19
// if not f then
30908: LD_VAR 0 12
30912: NOT
30913: IFFALSE 31002
// begin PrepareHuman ( false , i , skill ) ;
30915: LD_INT 0
30917: PPUSH
30918: LD_VAR 0 8
30922: PPUSH
30923: LD_VAR 0 4
30927: PPUSH
30928: CALL_OW 380
// un := CreateHuman ;
30932: LD_ADDR_VAR 0 14
30936: PUSH
30937: CALL_OW 44
30941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 7
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: LD_VAR 0 14
30959: PPUSH
30960: CALL_OW 2
30964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30965: LD_VAR 0 14
30969: PPUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 250
30979: PPUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: CALL_OW 251
30989: PPUSH
30990: LD_INT 10
30992: PPUSH
30993: LD_INT 0
30995: PPUSH
30996: CALL_OW 50
// continue ;
31000: GO 30901
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31002: LD_VAR 0 12
31006: PUSH
31007: LD_INT 1
31009: ARRAY
31010: PPUSH
31011: CALL_OW 313
31015: PUSH
31016: LD_VAR 0 12
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: CALL_OW 266
31029: PUSH
31030: LD_INT 32
31032: PUSH
31033: LD_INT 31
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: IN
31040: AND
31041: PUSH
31042: LD_VAR 0 12
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: CALL_OW 313
31055: PUSH
31056: LD_INT 6
31058: EQUAL
31059: OR
31060: IFFALSE 31080
// f := Delete ( f , 1 ) ;
31062: LD_ADDR_VAR 0 12
31066: PUSH
31067: LD_VAR 0 12
31071: PPUSH
31072: LD_INT 1
31074: PPUSH
31075: CALL_OW 3
31079: ST_TO_ADDR
// if not f then
31080: LD_VAR 0 12
31084: NOT
31085: IFFALSE 31103
// begin x := x + 2 ;
31087: LD_ADDR_VAR 0 13
31091: PUSH
31092: LD_VAR 0 13
31096: PUSH
31097: LD_INT 2
31099: PLUS
31100: ST_TO_ADDR
// continue ;
31101: GO 30901
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31103: LD_VAR 0 12
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: CALL_OW 266
31116: PUSH
31117: LD_INT 5
31119: EQUAL
31120: IFFALSE 31194
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31122: LD_VAR 0 12
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: CALL_OW 313
31135: PUSH
31136: LD_INT 3
31138: LESS
31139: IFFALSE 31175
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31141: LD_INT 0
31143: PPUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 8
31149: PUSH
31150: LD_INT 9
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: PUSH
31158: LD_VAR 0 17
31162: ARRAY
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: CALL_OW 380
31173: GO 31192
// PrepareHuman ( false , i , skill ) ;
31175: LD_INT 0
31177: PPUSH
31178: LD_VAR 0 8
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: CALL_OW 380
// end else
31192: GO 31211
// PrepareHuman ( false , i , skill ) ;
31194: LD_INT 0
31196: PPUSH
31197: LD_VAR 0 8
31201: PPUSH
31202: LD_VAR 0 4
31206: PPUSH
31207: CALL_OW 380
// un := CreateHuman ;
31211: LD_ADDR_VAR 0 14
31215: PUSH
31216: CALL_OW 44
31220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31221: LD_ADDR_VAR 0 7
31225: PUSH
31226: LD_VAR 0 7
31230: PPUSH
31231: LD_INT 1
31233: PPUSH
31234: LD_VAR 0 14
31238: PPUSH
31239: CALL_OW 2
31243: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31244: LD_VAR 0 14
31248: PPUSH
31249: LD_VAR 0 12
31253: PUSH
31254: LD_INT 1
31256: ARRAY
31257: PPUSH
31258: CALL_OW 52
// end ;
31262: GO 30901
31264: POP
31265: POP
// end ;
31266: GO 30203
31268: POP
31269: POP
// result := result ^ buildings ;
31270: LD_ADDR_VAR 0 7
31274: PUSH
31275: LD_VAR 0 7
31279: PUSH
31280: LD_VAR 0 18
31284: ADD
31285: ST_TO_ADDR
// end else
31286: GO 31429
// begin for i = 1 to personel do
31288: LD_ADDR_VAR 0 8
31292: PUSH
31293: DOUBLE
31294: LD_INT 1
31296: DEC
31297: ST_TO_ADDR
31298: LD_VAR 0 6
31302: PUSH
31303: FOR_TO
31304: IFFALSE 31427
// begin if i > 4 then
31306: LD_VAR 0 8
31310: PUSH
31311: LD_INT 4
31313: GREATER
31314: IFFALSE 31318
// break ;
31316: GO 31427
// x := personel [ i ] ;
31318: LD_ADDR_VAR 0 13
31322: PUSH
31323: LD_VAR 0 6
31327: PUSH
31328: LD_VAR 0 8
31332: ARRAY
31333: ST_TO_ADDR
// if x = - 1 then
31334: LD_VAR 0 13
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: EQUAL
31343: IFFALSE 31347
// continue ;
31345: GO 31303
// PrepareHuman ( false , i , skill ) ;
31347: LD_INT 0
31349: PPUSH
31350: LD_VAR 0 8
31354: PPUSH
31355: LD_VAR 0 4
31359: PPUSH
31360: CALL_OW 380
// un := CreateHuman ;
31364: LD_ADDR_VAR 0 14
31368: PUSH
31369: CALL_OW 44
31373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31374: LD_VAR 0 14
31378: PPUSH
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 250
31388: PPUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 251
31398: PPUSH
31399: LD_INT 10
31401: PPUSH
31402: LD_INT 0
31404: PPUSH
31405: CALL_OW 50
// result := result ^ un ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 7
31418: PUSH
31419: LD_VAR 0 14
31423: ADD
31424: ST_TO_ADDR
// end ;
31425: GO 31303
31427: POP
31428: POP
// end ; end ;
31429: LD_VAR 0 7
31433: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31434: LD_INT 0
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
31442: PPUSH
31443: PPUSH
31444: PPUSH
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
31451: PPUSH
// result := false ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_INT 0
31459: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31460: LD_VAR 0 1
31464: NOT
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 266
31475: PUSH
31476: LD_INT 32
31478: PUSH
31479: LD_INT 33
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: IN
31486: NOT
31487: OR
31488: IFFALSE 31492
// exit ;
31490: GO 32601
// nat := GetNation ( tower ) ;
31492: LD_ADDR_VAR 0 12
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 248
31506: ST_TO_ADDR
// side := GetSide ( tower ) ;
31507: LD_ADDR_VAR 0 16
31511: PUSH
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 255
31521: ST_TO_ADDR
// x := GetX ( tower ) ;
31522: LD_ADDR_VAR 0 10
31526: PUSH
31527: LD_VAR 0 1
31531: PPUSH
31532: CALL_OW 250
31536: ST_TO_ADDR
// y := GetY ( tower ) ;
31537: LD_ADDR_VAR 0 11
31541: PUSH
31542: LD_VAR 0 1
31546: PPUSH
31547: CALL_OW 251
31551: ST_TO_ADDR
// if not x or not y then
31552: LD_VAR 0 10
31556: NOT
31557: PUSH
31558: LD_VAR 0 11
31562: NOT
31563: OR
31564: IFFALSE 31568
// exit ;
31566: GO 32601
// weapon := 0 ;
31568: LD_ADDR_VAR 0 18
31572: PUSH
31573: LD_INT 0
31575: ST_TO_ADDR
// fac_list := [ ] ;
31576: LD_ADDR_VAR 0 17
31580: PUSH
31581: EMPTY
31582: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31583: LD_ADDR_VAR 0 6
31587: PUSH
31588: LD_VAR 0 1
31592: PPUSH
31593: CALL_OW 274
31597: PPUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: LD_INT 0
31605: PPUSH
31606: CALL 29172 0 3
31610: PPUSH
31611: LD_INT 30
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PPUSH
31621: CALL_OW 72
31625: ST_TO_ADDR
// if not factories then
31626: LD_VAR 0 6
31630: NOT
31631: IFFALSE 31635
// exit ;
31633: GO 32601
// for i in factories do
31635: LD_ADDR_VAR 0 8
31639: PUSH
31640: LD_VAR 0 6
31644: PUSH
31645: FOR_IN
31646: IFFALSE 31671
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31648: LD_ADDR_VAR 0 17
31652: PUSH
31653: LD_VAR 0 17
31657: PUSH
31658: LD_VAR 0 8
31662: PPUSH
31663: CALL_OW 478
31667: UNION
31668: ST_TO_ADDR
31669: GO 31645
31671: POP
31672: POP
// if not fac_list then
31673: LD_VAR 0 17
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 32601
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31682: LD_ADDR_VAR 0 5
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: LD_INT 9
31695: PUSH
31696: LD_INT 10
31698: PUSH
31699: LD_INT 6
31701: PUSH
31702: LD_INT 7
31704: PUSH
31705: LD_INT 11
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 27
31719: PUSH
31720: LD_INT 28
31722: PUSH
31723: LD_INT 26
31725: PUSH
31726: LD_INT 30
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 43
31737: PUSH
31738: LD_INT 44
31740: PUSH
31741: LD_INT 46
31743: PUSH
31744: LD_INT 45
31746: PUSH
31747: LD_INT 47
31749: PUSH
31750: LD_INT 49
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: PUSH
31766: LD_VAR 0 12
31770: ARRAY
31771: ST_TO_ADDR
// list := list isect fac_list ;
31772: LD_ADDR_VAR 0 5
31776: PUSH
31777: LD_VAR 0 5
31781: PUSH
31782: LD_VAR 0 17
31786: ISECT
31787: ST_TO_ADDR
// if not list then
31788: LD_VAR 0 5
31792: NOT
31793: IFFALSE 31797
// exit ;
31795: GO 32601
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31797: LD_VAR 0 12
31801: PUSH
31802: LD_INT 3
31804: EQUAL
31805: PUSH
31806: LD_INT 49
31808: PUSH
31809: LD_VAR 0 5
31813: IN
31814: AND
31815: PUSH
31816: LD_INT 31
31818: PPUSH
31819: LD_VAR 0 16
31823: PPUSH
31824: CALL_OW 321
31828: PUSH
31829: LD_INT 2
31831: EQUAL
31832: AND
31833: IFFALSE 31893
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31835: LD_INT 22
31837: PUSH
31838: LD_VAR 0 16
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 35
31849: PUSH
31850: LD_INT 49
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 91
31859: PUSH
31860: LD_VAR 0 1
31864: PUSH
31865: LD_INT 10
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: PPUSH
31878: CALL_OW 69
31882: NOT
31883: IFFALSE 31893
// weapon := ru_time_lapser ;
31885: LD_ADDR_VAR 0 18
31889: PUSH
31890: LD_INT 49
31892: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31893: LD_VAR 0 12
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: IN
31908: PUSH
31909: LD_INT 11
31911: PUSH
31912: LD_VAR 0 5
31916: IN
31917: PUSH
31918: LD_INT 30
31920: PUSH
31921: LD_VAR 0 5
31925: IN
31926: OR
31927: AND
31928: PUSH
31929: LD_INT 6
31931: PPUSH
31932: LD_VAR 0 16
31936: PPUSH
31937: CALL_OW 321
31941: PUSH
31942: LD_INT 2
31944: EQUAL
31945: AND
31946: IFFALSE 32111
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31948: LD_INT 22
31950: PUSH
31951: LD_VAR 0 16
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 35
31965: PUSH
31966: LD_INT 11
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 35
31975: PUSH
31976: LD_INT 30
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 91
31990: PUSH
31991: LD_VAR 0 1
31995: PUSH
31996: LD_INT 18
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: PPUSH
32009: CALL_OW 69
32013: NOT
32014: PUSH
32015: LD_INT 22
32017: PUSH
32018: LD_VAR 0 16
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 30
32032: PUSH
32033: LD_INT 32
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 30
32042: PUSH
32043: LD_INT 33
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 91
32057: PUSH
32058: LD_VAR 0 1
32062: PUSH
32063: LD_INT 12
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: PUSH
32076: EMPTY
32077: LIST
32078: PPUSH
32079: CALL_OW 69
32083: PUSH
32084: LD_INT 2
32086: GREATER
32087: AND
32088: IFFALSE 32111
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32090: LD_ADDR_VAR 0 18
32094: PUSH
32095: LD_INT 11
32097: PUSH
32098: LD_INT 30
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_VAR 0 12
32109: ARRAY
32110: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32111: LD_VAR 0 18
32115: NOT
32116: PUSH
32117: LD_INT 40
32119: PPUSH
32120: LD_VAR 0 16
32124: PPUSH
32125: CALL_OW 321
32129: PUSH
32130: LD_INT 2
32132: EQUAL
32133: AND
32134: PUSH
32135: LD_INT 7
32137: PUSH
32138: LD_VAR 0 5
32142: IN
32143: PUSH
32144: LD_INT 28
32146: PUSH
32147: LD_VAR 0 5
32151: IN
32152: OR
32153: PUSH
32154: LD_INT 45
32156: PUSH
32157: LD_VAR 0 5
32161: IN
32162: OR
32163: AND
32164: IFFALSE 32418
// begin hex := GetHexInfo ( x , y ) ;
32166: LD_ADDR_VAR 0 4
32170: PUSH
32171: LD_VAR 0 10
32175: PPUSH
32176: LD_VAR 0 11
32180: PPUSH
32181: CALL_OW 546
32185: ST_TO_ADDR
// if hex [ 1 ] then
32186: LD_VAR 0 4
32190: PUSH
32191: LD_INT 1
32193: ARRAY
32194: IFFALSE 32198
// exit ;
32196: GO 32601
// height := hex [ 2 ] ;
32198: LD_ADDR_VAR 0 15
32202: PUSH
32203: LD_VAR 0 4
32207: PUSH
32208: LD_INT 2
32210: ARRAY
32211: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32212: LD_ADDR_VAR 0 14
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 5
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
// for i in tmp do
32235: LD_ADDR_VAR 0 8
32239: PUSH
32240: LD_VAR 0 14
32244: PUSH
32245: FOR_IN
32246: IFFALSE 32416
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32248: LD_ADDR_VAR 0 9
32252: PUSH
32253: LD_VAR 0 10
32257: PPUSH
32258: LD_VAR 0 8
32262: PPUSH
32263: LD_INT 5
32265: PPUSH
32266: CALL_OW 272
32270: PUSH
32271: LD_VAR 0 11
32275: PPUSH
32276: LD_VAR 0 8
32280: PPUSH
32281: LD_INT 5
32283: PPUSH
32284: CALL_OW 273
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32293: LD_VAR 0 9
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 9
32306: PUSH
32307: LD_INT 2
32309: ARRAY
32310: PPUSH
32311: CALL_OW 488
32315: IFFALSE 32414
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32317: LD_ADDR_VAR 0 4
32321: PUSH
32322: LD_VAR 0 9
32326: PUSH
32327: LD_INT 1
32329: ARRAY
32330: PPUSH
32331: LD_VAR 0 9
32335: PUSH
32336: LD_INT 2
32338: ARRAY
32339: PPUSH
32340: CALL_OW 546
32344: ST_TO_ADDR
// if hex [ 1 ] then
32345: LD_VAR 0 4
32349: PUSH
32350: LD_INT 1
32352: ARRAY
32353: IFFALSE 32357
// continue ;
32355: GO 32245
// h := hex [ 2 ] ;
32357: LD_ADDR_VAR 0 13
32361: PUSH
32362: LD_VAR 0 4
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: ST_TO_ADDR
// if h + 7 < height then
32371: LD_VAR 0 13
32375: PUSH
32376: LD_INT 7
32378: PLUS
32379: PUSH
32380: LD_VAR 0 15
32384: LESS
32385: IFFALSE 32414
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32387: LD_ADDR_VAR 0 18
32391: PUSH
32392: LD_INT 7
32394: PUSH
32395: LD_INT 28
32397: PUSH
32398: LD_INT 45
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: PUSH
32406: LD_VAR 0 12
32410: ARRAY
32411: ST_TO_ADDR
// break ;
32412: GO 32416
// end ; end ; end ;
32414: GO 32245
32416: POP
32417: POP
// end ; if not weapon then
32418: LD_VAR 0 18
32422: NOT
32423: IFFALSE 32483
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32425: LD_ADDR_VAR 0 5
32429: PUSH
32430: LD_VAR 0 5
32434: PUSH
32435: LD_INT 11
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 49
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: DIFF
32449: ST_TO_ADDR
// if not list then
32450: LD_VAR 0 5
32454: NOT
32455: IFFALSE 32459
// exit ;
32457: GO 32601
// weapon := list [ rand ( 1 , list ) ] ;
32459: LD_ADDR_VAR 0 18
32463: PUSH
32464: LD_VAR 0 5
32468: PUSH
32469: LD_INT 1
32471: PPUSH
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL_OW 12
32481: ARRAY
32482: ST_TO_ADDR
// end ; if weapon then
32483: LD_VAR 0 18
32487: IFFALSE 32601
// begin tmp := CostOfWeapon ( weapon ) ;
32489: LD_ADDR_VAR 0 14
32493: PUSH
32494: LD_VAR 0 18
32498: PPUSH
32499: CALL_OW 451
32503: ST_TO_ADDR
// j := GetBase ( tower ) ;
32504: LD_ADDR_VAR 0 9
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 274
32518: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32519: LD_VAR 0 9
32523: PPUSH
32524: LD_INT 1
32526: PPUSH
32527: CALL_OW 275
32531: PUSH
32532: LD_VAR 0 14
32536: PUSH
32537: LD_INT 1
32539: ARRAY
32540: GREATEREQUAL
32541: PUSH
32542: LD_VAR 0 9
32546: PPUSH
32547: LD_INT 2
32549: PPUSH
32550: CALL_OW 275
32554: PUSH
32555: LD_VAR 0 14
32559: PUSH
32560: LD_INT 2
32562: ARRAY
32563: GREATEREQUAL
32564: AND
32565: PUSH
32566: LD_VAR 0 9
32570: PPUSH
32571: LD_INT 3
32573: PPUSH
32574: CALL_OW 275
32578: PUSH
32579: LD_VAR 0 14
32583: PUSH
32584: LD_INT 3
32586: ARRAY
32587: GREATEREQUAL
32588: AND
32589: IFFALSE 32601
// result := weapon ;
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_VAR 0 18
32600: ST_TO_ADDR
// end ; end ;
32601: LD_VAR 0 3
32605: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// result := true ;
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_INT 1
32617: ST_TO_ADDR
// if array1 = array2 then
32618: LD_VAR 0 1
32622: PUSH
32623: LD_VAR 0 2
32627: EQUAL
32628: IFFALSE 32688
// begin for i = 1 to array1 do
32630: LD_ADDR_VAR 0 4
32634: PUSH
32635: DOUBLE
32636: LD_INT 1
32638: DEC
32639: ST_TO_ADDR
32640: LD_VAR 0 1
32644: PUSH
32645: FOR_TO
32646: IFFALSE 32684
// if array1 [ i ] <> array2 [ i ] then
32648: LD_VAR 0 1
32652: PUSH
32653: LD_VAR 0 4
32657: ARRAY
32658: PUSH
32659: LD_VAR 0 2
32663: PUSH
32664: LD_VAR 0 4
32668: ARRAY
32669: NONEQUAL
32670: IFFALSE 32682
// begin result := false ;
32672: LD_ADDR_VAR 0 3
32676: PUSH
32677: LD_INT 0
32679: ST_TO_ADDR
// break ;
32680: GO 32684
// end ;
32682: GO 32645
32684: POP
32685: POP
// end else
32686: GO 32696
// result := false ;
32688: LD_ADDR_VAR 0 3
32692: PUSH
32693: LD_INT 0
32695: ST_TO_ADDR
// end ;
32696: LD_VAR 0 3
32700: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32701: LD_INT 0
32703: PPUSH
32704: PPUSH
// if not array1 or not array2 then
32705: LD_VAR 0 1
32709: NOT
32710: PUSH
32711: LD_VAR 0 2
32715: NOT
32716: OR
32717: IFFALSE 32721
// exit ;
32719: GO 32785
// result := true ;
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_INT 1
32728: ST_TO_ADDR
// for i = 1 to array1 do
32729: LD_ADDR_VAR 0 4
32733: PUSH
32734: DOUBLE
32735: LD_INT 1
32737: DEC
32738: ST_TO_ADDR
32739: LD_VAR 0 1
32743: PUSH
32744: FOR_TO
32745: IFFALSE 32783
// if array1 [ i ] <> array2 [ i ] then
32747: LD_VAR 0 1
32751: PUSH
32752: LD_VAR 0 4
32756: ARRAY
32757: PUSH
32758: LD_VAR 0 2
32762: PUSH
32763: LD_VAR 0 4
32767: ARRAY
32768: NONEQUAL
32769: IFFALSE 32781
// begin result := false ;
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: LD_INT 0
32778: ST_TO_ADDR
// break ;
32779: GO 32783
// end ;
32781: GO 32744
32783: POP
32784: POP
// end ;
32785: LD_VAR 0 3
32789: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32790: LD_INT 0
32792: PPUSH
32793: PPUSH
32794: PPUSH
// pom := GetBase ( fac ) ;
32795: LD_ADDR_VAR 0 5
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 274
32809: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32810: LD_ADDR_VAR 0 4
32814: PUSH
32815: LD_VAR 0 2
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: PPUSH
32824: LD_VAR 0 2
32828: PUSH
32829: LD_INT 2
32831: ARRAY
32832: PPUSH
32833: LD_VAR 0 2
32837: PUSH
32838: LD_INT 3
32840: ARRAY
32841: PPUSH
32842: LD_VAR 0 2
32846: PUSH
32847: LD_INT 4
32849: ARRAY
32850: PPUSH
32851: CALL_OW 449
32855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_VAR 0 5
32865: PPUSH
32866: LD_INT 1
32868: PPUSH
32869: CALL_OW 275
32873: PUSH
32874: LD_VAR 0 4
32878: PUSH
32879: LD_INT 1
32881: ARRAY
32882: GREATEREQUAL
32883: PUSH
32884: LD_VAR 0 5
32888: PPUSH
32889: LD_INT 2
32891: PPUSH
32892: CALL_OW 275
32896: PUSH
32897: LD_VAR 0 4
32901: PUSH
32902: LD_INT 2
32904: ARRAY
32905: GREATEREQUAL
32906: AND
32907: PUSH
32908: LD_VAR 0 5
32912: PPUSH
32913: LD_INT 3
32915: PPUSH
32916: CALL_OW 275
32920: PUSH
32921: LD_VAR 0 4
32925: PUSH
32926: LD_INT 3
32928: ARRAY
32929: GREATEREQUAL
32930: AND
32931: ST_TO_ADDR
// end ;
32932: LD_VAR 0 3
32936: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
// pom := GetBase ( building ) ;
32943: LD_ADDR_VAR 0 3
32947: PUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL_OW 274
32957: ST_TO_ADDR
// if not pom then
32958: LD_VAR 0 3
32962: NOT
32963: IFFALSE 32967
// exit ;
32965: GO 33137
// btype := GetBType ( building ) ;
32967: LD_ADDR_VAR 0 5
32971: PUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 266
32981: ST_TO_ADDR
// if btype = b_armoury then
32982: LD_VAR 0 5
32986: PUSH
32987: LD_INT 4
32989: EQUAL
32990: IFFALSE 33000
// btype := b_barracks ;
32992: LD_ADDR_VAR 0 5
32996: PUSH
32997: LD_INT 5
32999: ST_TO_ADDR
// if btype = b_depot then
33000: LD_VAR 0 5
33004: PUSH
33005: LD_INT 0
33007: EQUAL
33008: IFFALSE 33018
// btype := b_warehouse ;
33010: LD_ADDR_VAR 0 5
33014: PUSH
33015: LD_INT 1
33017: ST_TO_ADDR
// if btype = b_workshop then
33018: LD_VAR 0 5
33022: PUSH
33023: LD_INT 2
33025: EQUAL
33026: IFFALSE 33036
// btype := b_factory ;
33028: LD_ADDR_VAR 0 5
33032: PUSH
33033: LD_INT 3
33035: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33036: LD_ADDR_VAR 0 4
33040: PUSH
33041: LD_VAR 0 5
33045: PPUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 248
33055: PPUSH
33056: CALL_OW 450
33060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33061: LD_ADDR_VAR 0 2
33065: PUSH
33066: LD_VAR 0 3
33070: PPUSH
33071: LD_INT 1
33073: PPUSH
33074: CALL_OW 275
33078: PUSH
33079: LD_VAR 0 4
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: GREATEREQUAL
33088: PUSH
33089: LD_VAR 0 3
33093: PPUSH
33094: LD_INT 2
33096: PPUSH
33097: CALL_OW 275
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 2
33109: ARRAY
33110: GREATEREQUAL
33111: AND
33112: PUSH
33113: LD_VAR 0 3
33117: PPUSH
33118: LD_INT 3
33120: PPUSH
33121: CALL_OW 275
33125: PUSH
33126: LD_VAR 0 4
33130: PUSH
33131: LD_INT 3
33133: ARRAY
33134: GREATEREQUAL
33135: AND
33136: ST_TO_ADDR
// end ;
33137: LD_VAR 0 2
33141: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33142: LD_INT 0
33144: PPUSH
33145: PPUSH
33146: PPUSH
// pom := GetBase ( building ) ;
33147: LD_ADDR_VAR 0 4
33151: PUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL_OW 274
33161: ST_TO_ADDR
// if not pom then
33162: LD_VAR 0 4
33166: NOT
33167: IFFALSE 33171
// exit ;
33169: GO 33272
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33171: LD_ADDR_VAR 0 5
33175: PUSH
33176: LD_VAR 0 2
33180: PPUSH
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL_OW 248
33190: PPUSH
33191: CALL_OW 450
33195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_VAR 0 4
33205: PPUSH
33206: LD_INT 1
33208: PPUSH
33209: CALL_OW 275
33213: PUSH
33214: LD_VAR 0 5
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: GREATEREQUAL
33223: PUSH
33224: LD_VAR 0 4
33228: PPUSH
33229: LD_INT 2
33231: PPUSH
33232: CALL_OW 275
33236: PUSH
33237: LD_VAR 0 5
33241: PUSH
33242: LD_INT 2
33244: ARRAY
33245: GREATEREQUAL
33246: AND
33247: PUSH
33248: LD_VAR 0 4
33252: PPUSH
33253: LD_INT 3
33255: PPUSH
33256: CALL_OW 275
33260: PUSH
33261: LD_VAR 0 5
33265: PUSH
33266: LD_INT 3
33268: ARRAY
33269: GREATEREQUAL
33270: AND
33271: ST_TO_ADDR
// end ;
33272: LD_VAR 0 3
33276: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33277: LD_INT 0
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
// result := false ;
33290: LD_ADDR_VAR 0 8
33294: PUSH
33295: LD_INT 0
33297: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33298: LD_VAR 0 5
33302: NOT
33303: PUSH
33304: LD_VAR 0 1
33308: NOT
33309: OR
33310: PUSH
33311: LD_VAR 0 2
33315: NOT
33316: OR
33317: PUSH
33318: LD_VAR 0 3
33322: NOT
33323: OR
33324: IFFALSE 33328
// exit ;
33326: GO 34142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33328: LD_ADDR_VAR 0 14
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: LD_VAR 0 2
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: LD_VAR 0 4
33352: PPUSH
33353: LD_VAR 0 5
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: PPUSH
33362: CALL_OW 248
33366: PPUSH
33367: LD_INT 0
33369: PPUSH
33370: CALL 35395 0 6
33374: ST_TO_ADDR
// if not hexes then
33375: LD_VAR 0 14
33379: NOT
33380: IFFALSE 33384
// exit ;
33382: GO 34142
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33384: LD_ADDR_VAR 0 17
33388: PUSH
33389: LD_VAR 0 5
33393: PPUSH
33394: LD_INT 22
33396: PUSH
33397: LD_VAR 0 13
33401: PPUSH
33402: CALL_OW 255
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: LD_INT 30
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 30
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL_OW 72
33447: ST_TO_ADDR
// for i = 1 to hexes do
33448: LD_ADDR_VAR 0 9
33452: PUSH
33453: DOUBLE
33454: LD_INT 1
33456: DEC
33457: ST_TO_ADDR
33458: LD_VAR 0 14
33462: PUSH
33463: FOR_TO
33464: IFFALSE 34140
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33466: LD_ADDR_VAR 0 13
33470: PUSH
33471: LD_VAR 0 14
33475: PUSH
33476: LD_VAR 0 9
33480: ARRAY
33481: PUSH
33482: LD_INT 1
33484: ARRAY
33485: PPUSH
33486: LD_VAR 0 14
33490: PUSH
33491: LD_VAR 0 9
33495: ARRAY
33496: PUSH
33497: LD_INT 2
33499: ARRAY
33500: PPUSH
33501: CALL_OW 428
33505: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33506: LD_VAR 0 14
33510: PUSH
33511: LD_VAR 0 9
33515: ARRAY
33516: PUSH
33517: LD_INT 1
33519: ARRAY
33520: PPUSH
33521: LD_VAR 0 14
33525: PUSH
33526: LD_VAR 0 9
33530: ARRAY
33531: PUSH
33532: LD_INT 2
33534: ARRAY
33535: PPUSH
33536: CALL_OW 351
33540: PUSH
33541: LD_VAR 0 14
33545: PUSH
33546: LD_VAR 0 9
33550: ARRAY
33551: PUSH
33552: LD_INT 1
33554: ARRAY
33555: PPUSH
33556: LD_VAR 0 14
33560: PUSH
33561: LD_VAR 0 9
33565: ARRAY
33566: PUSH
33567: LD_INT 2
33569: ARRAY
33570: PPUSH
33571: CALL_OW 488
33575: NOT
33576: OR
33577: PUSH
33578: LD_VAR 0 13
33582: PPUSH
33583: CALL_OW 247
33587: PUSH
33588: LD_INT 3
33590: EQUAL
33591: OR
33592: IFFALSE 33598
// exit ;
33594: POP
33595: POP
33596: GO 34142
// if not tmp then
33598: LD_VAR 0 13
33602: NOT
33603: IFFALSE 33607
// continue ;
33605: GO 33463
// result := true ;
33607: LD_ADDR_VAR 0 8
33611: PUSH
33612: LD_INT 1
33614: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33615: LD_VAR 0 6
33619: PUSH
33620: LD_VAR 0 13
33624: PPUSH
33625: CALL_OW 247
33629: PUSH
33630: LD_INT 2
33632: EQUAL
33633: AND
33634: PUSH
33635: LD_VAR 0 13
33639: PPUSH
33640: CALL_OW 263
33644: PUSH
33645: LD_INT 1
33647: EQUAL
33648: AND
33649: IFFALSE 33813
// begin if IsDrivenBy ( tmp ) then
33651: LD_VAR 0 13
33655: PPUSH
33656: CALL_OW 311
33660: IFFALSE 33664
// continue ;
33662: GO 33463
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33664: LD_VAR 0 6
33668: PPUSH
33669: LD_INT 3
33671: PUSH
33672: LD_INT 60
33674: PUSH
33675: EMPTY
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 55
33687: PUSH
33688: EMPTY
33689: LIST
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PPUSH
33699: CALL_OW 72
33703: IFFALSE 33811
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33705: LD_ADDR_VAR 0 18
33709: PUSH
33710: LD_VAR 0 6
33714: PPUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 60
33720: PUSH
33721: EMPTY
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 55
33733: PUSH
33734: EMPTY
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PPUSH
33745: CALL_OW 72
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: ST_TO_ADDR
// if IsInUnit ( driver ) then
33754: LD_VAR 0 18
33758: PPUSH
33759: CALL_OW 310
33763: IFFALSE 33774
// ComExit ( driver ) ;
33765: LD_VAR 0 18
33769: PPUSH
33770: CALL 59176 0 1
// AddComEnterUnit ( driver , tmp ) ;
33774: LD_VAR 0 18
33778: PPUSH
33779: LD_VAR 0 13
33783: PPUSH
33784: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33788: LD_VAR 0 18
33792: PPUSH
33793: LD_VAR 0 7
33797: PPUSH
33798: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33802: LD_VAR 0 18
33806: PPUSH
33807: CALL_OW 181
// end ; continue ;
33811: GO 33463
// end ; if not cleaners or not tmp in cleaners then
33813: LD_VAR 0 6
33817: NOT
33818: PUSH
33819: LD_VAR 0 13
33823: PUSH
33824: LD_VAR 0 6
33828: IN
33829: NOT
33830: OR
33831: IFFALSE 34138
// begin if dep then
33833: LD_VAR 0 17
33837: IFFALSE 33973
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33839: LD_ADDR_VAR 0 16
33843: PUSH
33844: LD_VAR 0 17
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: CALL_OW 250
33857: PPUSH
33858: LD_VAR 0 17
33862: PUSH
33863: LD_INT 1
33865: ARRAY
33866: PPUSH
33867: CALL_OW 254
33871: PPUSH
33872: LD_INT 5
33874: PPUSH
33875: CALL_OW 272
33879: PUSH
33880: LD_VAR 0 17
33884: PUSH
33885: LD_INT 1
33887: ARRAY
33888: PPUSH
33889: CALL_OW 251
33893: PPUSH
33894: LD_VAR 0 17
33898: PUSH
33899: LD_INT 1
33901: ARRAY
33902: PPUSH
33903: CALL_OW 254
33907: PPUSH
33908: LD_INT 5
33910: PPUSH
33911: CALL_OW 273
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33920: LD_VAR 0 16
33924: PUSH
33925: LD_INT 1
33927: ARRAY
33928: PPUSH
33929: LD_VAR 0 16
33933: PUSH
33934: LD_INT 2
33936: ARRAY
33937: PPUSH
33938: CALL_OW 488
33942: IFFALSE 33973
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33944: LD_VAR 0 13
33948: PPUSH
33949: LD_VAR 0 16
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: PPUSH
33958: LD_VAR 0 16
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PPUSH
33967: CALL_OW 111
// continue ;
33971: GO 33463
// end ; end ; r := GetDir ( tmp ) ;
33973: LD_ADDR_VAR 0 15
33977: PUSH
33978: LD_VAR 0 13
33982: PPUSH
33983: CALL_OW 254
33987: ST_TO_ADDR
// if r = 5 then
33988: LD_VAR 0 15
33992: PUSH
33993: LD_INT 5
33995: EQUAL
33996: IFFALSE 34006
// r := 0 ;
33998: LD_ADDR_VAR 0 15
34002: PUSH
34003: LD_INT 0
34005: ST_TO_ADDR
// for j = r to 5 do
34006: LD_ADDR_VAR 0 10
34010: PUSH
34011: DOUBLE
34012: LD_VAR 0 15
34016: DEC
34017: ST_TO_ADDR
34018: LD_INT 5
34020: PUSH
34021: FOR_TO
34022: IFFALSE 34136
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34024: LD_ADDR_VAR 0 11
34028: PUSH
34029: LD_VAR 0 13
34033: PPUSH
34034: CALL_OW 250
34038: PPUSH
34039: LD_VAR 0 10
34043: PPUSH
34044: LD_INT 2
34046: PPUSH
34047: CALL_OW 272
34051: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34052: LD_ADDR_VAR 0 12
34056: PUSH
34057: LD_VAR 0 13
34061: PPUSH
34062: CALL_OW 251
34066: PPUSH
34067: LD_VAR 0 10
34071: PPUSH
34072: LD_INT 2
34074: PPUSH
34075: CALL_OW 273
34079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34080: LD_VAR 0 11
34084: PPUSH
34085: LD_VAR 0 12
34089: PPUSH
34090: CALL_OW 488
34094: PUSH
34095: LD_VAR 0 11
34099: PPUSH
34100: LD_VAR 0 12
34104: PPUSH
34105: CALL_OW 428
34109: NOT
34110: AND
34111: IFFALSE 34134
// begin ComMoveXY ( tmp , _x , _y ) ;
34113: LD_VAR 0 13
34117: PPUSH
34118: LD_VAR 0 11
34122: PPUSH
34123: LD_VAR 0 12
34127: PPUSH
34128: CALL_OW 111
// break ;
34132: GO 34136
// end ; end ;
34134: GO 34021
34136: POP
34137: POP
// end ; end ;
34138: GO 33463
34140: POP
34141: POP
// end ;
34142: LD_VAR 0 8
34146: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34147: LD_INT 0
34149: PPUSH
// result := true ;
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_INT 1
34157: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34158: LD_VAR 0 2
34162: PUSH
34163: LD_INT 24
34165: DOUBLE
34166: EQUAL
34167: IFTRUE 34177
34169: LD_INT 33
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34202
34177: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_INT 32
34185: PPUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 321
34195: PUSH
34196: LD_INT 2
34198: EQUAL
34199: ST_TO_ADDR
34200: GO 34518
34202: LD_INT 20
34204: DOUBLE
34205: EQUAL
34206: IFTRUE 34210
34208: GO 34235
34210: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_INT 6
34218: PPUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 321
34228: PUSH
34229: LD_INT 2
34231: EQUAL
34232: ST_TO_ADDR
34233: GO 34518
34235: LD_INT 22
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34249
34241: LD_INT 36
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34249
34247: GO 34274
34249: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 15
34257: PPUSH
34258: LD_VAR 0 1
34262: PPUSH
34263: CALL_OW 321
34267: PUSH
34268: LD_INT 2
34270: EQUAL
34271: ST_TO_ADDR
34272: GO 34518
34274: LD_INT 30
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 34307
34282: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: LD_INT 20
34290: PPUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 321
34300: PUSH
34301: LD_INT 2
34303: EQUAL
34304: ST_TO_ADDR
34305: GO 34518
34307: LD_INT 28
34309: DOUBLE
34310: EQUAL
34311: IFTRUE 34321
34313: LD_INT 21
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34346
34321: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 21
34329: PPUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 321
34339: PUSH
34340: LD_INT 2
34342: EQUAL
34343: ST_TO_ADDR
34344: GO 34518
34346: LD_INT 16
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34379
34354: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 84
34362: PPUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 321
34372: PUSH
34373: LD_INT 2
34375: EQUAL
34376: ST_TO_ADDR
34377: GO 34518
34379: LD_INT 19
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34393
34385: LD_INT 23
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34393
34391: GO 34418
34393: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34394: LD_ADDR_VAR 0 3
34398: PUSH
34399: LD_INT 83
34401: PPUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 321
34411: PUSH
34412: LD_INT 2
34414: EQUAL
34415: ST_TO_ADDR
34416: GO 34518
34418: LD_INT 17
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34451
34426: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 39
34434: PPUSH
34435: LD_VAR 0 1
34439: PPUSH
34440: CALL_OW 321
34444: PUSH
34445: LD_INT 2
34447: EQUAL
34448: ST_TO_ADDR
34449: GO 34518
34451: LD_INT 18
34453: DOUBLE
34454: EQUAL
34455: IFTRUE 34459
34457: GO 34484
34459: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34460: LD_ADDR_VAR 0 3
34464: PUSH
34465: LD_INT 40
34467: PPUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 321
34477: PUSH
34478: LD_INT 2
34480: EQUAL
34481: ST_TO_ADDR
34482: GO 34518
34484: LD_INT 27
34486: DOUBLE
34487: EQUAL
34488: IFTRUE 34492
34490: GO 34517
34492: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34493: LD_ADDR_VAR 0 3
34497: PUSH
34498: LD_INT 35
34500: PPUSH
34501: LD_VAR 0 1
34505: PPUSH
34506: CALL_OW 321
34510: PUSH
34511: LD_INT 2
34513: EQUAL
34514: ST_TO_ADDR
34515: GO 34518
34517: POP
// end ;
34518: LD_VAR 0 3
34522: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34523: LD_INT 0
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
// result := false ;
34536: LD_ADDR_VAR 0 6
34540: PUSH
34541: LD_INT 0
34543: ST_TO_ADDR
// if btype = b_depot then
34544: LD_VAR 0 2
34548: PUSH
34549: LD_INT 0
34551: EQUAL
34552: IFFALSE 34564
// begin result := true ;
34554: LD_ADDR_VAR 0 6
34558: PUSH
34559: LD_INT 1
34561: ST_TO_ADDR
// exit ;
34562: GO 35390
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34564: LD_VAR 0 1
34568: NOT
34569: PUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 266
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: IN
34590: NOT
34591: OR
34592: PUSH
34593: LD_VAR 0 2
34597: NOT
34598: OR
34599: PUSH
34600: LD_VAR 0 5
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: LD_INT 4
34619: PUSH
34620: LD_INT 5
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: IN
34631: NOT
34632: OR
34633: PUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: LD_VAR 0 4
34643: PPUSH
34644: CALL_OW 488
34648: NOT
34649: OR
34650: IFFALSE 34654
// exit ;
34652: GO 35390
// side := GetSide ( depot ) ;
34654: LD_ADDR_VAR 0 9
34658: PUSH
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 255
34668: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34669: LD_VAR 0 9
34673: PPUSH
34674: LD_VAR 0 2
34678: PPUSH
34679: CALL 34147 0 2
34683: NOT
34684: IFFALSE 34688
// exit ;
34686: GO 35390
// pom := GetBase ( depot ) ;
34688: LD_ADDR_VAR 0 10
34692: PUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 274
34702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34703: LD_ADDR_VAR 0 11
34707: PUSH
34708: LD_VAR 0 2
34712: PPUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 248
34722: PPUSH
34723: CALL_OW 450
34727: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34728: LD_VAR 0 10
34732: PPUSH
34733: LD_INT 1
34735: PPUSH
34736: CALL_OW 275
34740: PUSH
34741: LD_VAR 0 11
34745: PUSH
34746: LD_INT 1
34748: ARRAY
34749: GREATEREQUAL
34750: PUSH
34751: LD_VAR 0 10
34755: PPUSH
34756: LD_INT 2
34758: PPUSH
34759: CALL_OW 275
34763: PUSH
34764: LD_VAR 0 11
34768: PUSH
34769: LD_INT 2
34771: ARRAY
34772: GREATEREQUAL
34773: AND
34774: PUSH
34775: LD_VAR 0 10
34779: PPUSH
34780: LD_INT 3
34782: PPUSH
34783: CALL_OW 275
34787: PUSH
34788: LD_VAR 0 11
34792: PUSH
34793: LD_INT 3
34795: ARRAY
34796: GREATEREQUAL
34797: AND
34798: NOT
34799: IFFALSE 34803
// exit ;
34801: GO 35390
// if GetBType ( depot ) = b_depot then
34803: LD_VAR 0 1
34807: PPUSH
34808: CALL_OW 266
34812: PUSH
34813: LD_INT 0
34815: EQUAL
34816: IFFALSE 34828
// dist := 28 else
34818: LD_ADDR_VAR 0 14
34822: PUSH
34823: LD_INT 28
34825: ST_TO_ADDR
34826: GO 34836
// dist := 36 ;
34828: LD_ADDR_VAR 0 14
34832: PUSH
34833: LD_INT 36
34835: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34836: LD_VAR 0 1
34840: PPUSH
34841: LD_VAR 0 3
34845: PPUSH
34846: LD_VAR 0 4
34850: PPUSH
34851: CALL_OW 297
34855: PUSH
34856: LD_VAR 0 14
34860: GREATER
34861: IFFALSE 34865
// exit ;
34863: GO 35390
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34865: LD_ADDR_VAR 0 12
34869: PUSH
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_VAR 0 3
34879: PPUSH
34880: LD_VAR 0 4
34884: PPUSH
34885: LD_VAR 0 5
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 248
34899: PPUSH
34900: LD_INT 0
34902: PPUSH
34903: CALL 35395 0 6
34907: ST_TO_ADDR
// if not hexes then
34908: LD_VAR 0 12
34912: NOT
34913: IFFALSE 34917
// exit ;
34915: GO 35390
// hex := GetHexInfo ( x , y ) ;
34917: LD_ADDR_VAR 0 15
34921: PUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: LD_VAR 0 4
34931: PPUSH
34932: CALL_OW 546
34936: ST_TO_ADDR
// if hex [ 1 ] then
34937: LD_VAR 0 15
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: IFFALSE 34949
// exit ;
34947: GO 35390
// height := hex [ 2 ] ;
34949: LD_ADDR_VAR 0 13
34953: PUSH
34954: LD_VAR 0 15
34958: PUSH
34959: LD_INT 2
34961: ARRAY
34962: ST_TO_ADDR
// for i = 1 to hexes do
34963: LD_ADDR_VAR 0 7
34967: PUSH
34968: DOUBLE
34969: LD_INT 1
34971: DEC
34972: ST_TO_ADDR
34973: LD_VAR 0 12
34977: PUSH
34978: FOR_TO
34979: IFFALSE 35309
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34981: LD_VAR 0 12
34985: PUSH
34986: LD_VAR 0 7
34990: ARRAY
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: PPUSH
34996: LD_VAR 0 12
35000: PUSH
35001: LD_VAR 0 7
35005: ARRAY
35006: PUSH
35007: LD_INT 2
35009: ARRAY
35010: PPUSH
35011: CALL_OW 488
35015: NOT
35016: PUSH
35017: LD_VAR 0 12
35021: PUSH
35022: LD_VAR 0 7
35026: ARRAY
35027: PUSH
35028: LD_INT 1
35030: ARRAY
35031: PPUSH
35032: LD_VAR 0 12
35036: PUSH
35037: LD_VAR 0 7
35041: ARRAY
35042: PUSH
35043: LD_INT 2
35045: ARRAY
35046: PPUSH
35047: CALL_OW 428
35051: PUSH
35052: LD_INT 0
35054: GREATER
35055: OR
35056: PUSH
35057: LD_VAR 0 12
35061: PUSH
35062: LD_VAR 0 7
35066: ARRAY
35067: PUSH
35068: LD_INT 1
35070: ARRAY
35071: PPUSH
35072: LD_VAR 0 12
35076: PUSH
35077: LD_VAR 0 7
35081: ARRAY
35082: PUSH
35083: LD_INT 2
35085: ARRAY
35086: PPUSH
35087: CALL_OW 351
35091: OR
35092: IFFALSE 35098
// exit ;
35094: POP
35095: POP
35096: GO 35390
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35098: LD_ADDR_VAR 0 8
35102: PUSH
35103: LD_VAR 0 12
35107: PUSH
35108: LD_VAR 0 7
35112: ARRAY
35113: PUSH
35114: LD_INT 1
35116: ARRAY
35117: PPUSH
35118: LD_VAR 0 12
35122: PUSH
35123: LD_VAR 0 7
35127: ARRAY
35128: PUSH
35129: LD_INT 2
35131: ARRAY
35132: PPUSH
35133: CALL_OW 546
35137: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35138: LD_VAR 0 8
35142: PUSH
35143: LD_INT 1
35145: ARRAY
35146: PUSH
35147: LD_VAR 0 8
35151: PUSH
35152: LD_INT 2
35154: ARRAY
35155: PUSH
35156: LD_VAR 0 13
35160: PUSH
35161: LD_INT 2
35163: PLUS
35164: GREATER
35165: OR
35166: PUSH
35167: LD_VAR 0 8
35171: PUSH
35172: LD_INT 2
35174: ARRAY
35175: PUSH
35176: LD_VAR 0 13
35180: PUSH
35181: LD_INT 2
35183: MINUS
35184: LESS
35185: OR
35186: PUSH
35187: LD_VAR 0 8
35191: PUSH
35192: LD_INT 3
35194: ARRAY
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 8
35201: PUSH
35202: LD_INT 9
35204: PUSH
35205: LD_INT 10
35207: PUSH
35208: LD_INT 11
35210: PUSH
35211: LD_INT 12
35213: PUSH
35214: LD_INT 13
35216: PUSH
35217: LD_INT 16
35219: PUSH
35220: LD_INT 17
35222: PUSH
35223: LD_INT 18
35225: PUSH
35226: LD_INT 19
35228: PUSH
35229: LD_INT 20
35231: PUSH
35232: LD_INT 21
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: IN
35250: NOT
35251: OR
35252: PUSH
35253: LD_VAR 0 8
35257: PUSH
35258: LD_INT 5
35260: ARRAY
35261: NOT
35262: OR
35263: PUSH
35264: LD_VAR 0 8
35268: PUSH
35269: LD_INT 6
35271: ARRAY
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 7
35281: PUSH
35282: LD_INT 9
35284: PUSH
35285: LD_INT 10
35287: PUSH
35288: LD_INT 11
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: IN
35299: NOT
35300: OR
35301: IFFALSE 35307
// exit ;
35303: POP
35304: POP
35305: GO 35390
// end ;
35307: GO 34978
35309: POP
35310: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35311: LD_VAR 0 9
35315: PPUSH
35316: LD_VAR 0 3
35320: PPUSH
35321: LD_VAR 0 4
35325: PPUSH
35326: LD_INT 20
35328: PPUSH
35329: CALL 27313 0 4
35333: PUSH
35334: LD_INT 4
35336: ARRAY
35337: IFFALSE 35341
// exit ;
35339: GO 35390
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35341: LD_VAR 0 2
35345: PUSH
35346: LD_INT 29
35348: PUSH
35349: LD_INT 30
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: IN
35356: PUSH
35357: LD_VAR 0 3
35361: PPUSH
35362: LD_VAR 0 4
35366: PPUSH
35367: LD_VAR 0 9
35371: PPUSH
35372: CALL_OW 440
35376: NOT
35377: AND
35378: IFFALSE 35382
// exit ;
35380: GO 35390
// result := true ;
35382: LD_ADDR_VAR 0 6
35386: PUSH
35387: LD_INT 1
35389: ST_TO_ADDR
// end ;
35390: LD_VAR 0 6
35394: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35395: LD_INT 0
35397: PPUSH
35398: PPUSH
35399: PPUSH
35400: PPUSH
35401: PPUSH
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
35420: PPUSH
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
// result = [ ] ;
35455: LD_ADDR_VAR 0 7
35459: PUSH
35460: EMPTY
35461: ST_TO_ADDR
// temp_list = [ ] ;
35462: LD_ADDR_VAR 0 9
35466: PUSH
35467: EMPTY
35468: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35469: LD_VAR 0 4
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: LD_INT 4
35488: PUSH
35489: LD_INT 5
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: IN
35500: NOT
35501: PUSH
35502: LD_VAR 0 1
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: IN
35517: PUSH
35518: LD_VAR 0 5
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: LD_INT 3
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: IN
35537: NOT
35538: AND
35539: OR
35540: IFFALSE 35544
// exit ;
35542: GO 53935
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35544: LD_VAR 0 1
35548: PUSH
35549: LD_INT 6
35551: PUSH
35552: LD_INT 7
35554: PUSH
35555: LD_INT 8
35557: PUSH
35558: LD_INT 13
35560: PUSH
35561: LD_INT 12
35563: PUSH
35564: LD_INT 15
35566: PUSH
35567: LD_INT 11
35569: PUSH
35570: LD_INT 14
35572: PUSH
35573: LD_INT 10
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: IN
35587: IFFALSE 35597
// btype = b_lab ;
35589: LD_ADDR_VAR 0 1
35593: PUSH
35594: LD_INT 6
35596: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35597: LD_VAR 0 6
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: IN
35616: NOT
35617: PUSH
35618: LD_VAR 0 1
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 6
35637: PUSH
35638: LD_INT 36
35640: PUSH
35641: LD_INT 4
35643: PUSH
35644: LD_INT 5
35646: PUSH
35647: LD_INT 31
35649: PUSH
35650: LD_INT 32
35652: PUSH
35653: LD_INT 33
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: IN
35669: NOT
35670: PUSH
35671: LD_VAR 0 6
35675: PUSH
35676: LD_INT 1
35678: EQUAL
35679: AND
35680: OR
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: IN
35697: NOT
35698: PUSH
35699: LD_VAR 0 6
35703: PUSH
35704: LD_INT 2
35706: EQUAL
35707: AND
35708: OR
35709: IFFALSE 35719
// mode = 0 ;
35711: LD_ADDR_VAR 0 6
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// case mode of 0 :
35719: LD_VAR 0 6
35723: PUSH
35724: LD_INT 0
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35732
35730: GO 47185
35732: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35733: LD_ADDR_VAR 0 11
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35926: LD_ADDR_VAR 0 12
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 3
36083: NEG
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 3
36094: NEG
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36122: LD_ADDR_VAR 0 13
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 3
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 3
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 3
36293: NEG
36294: PUSH
36295: LD_INT 3
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36321: LD_ADDR_VAR 0 14
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 3
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 3
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36517: LD_ADDR_VAR 0 15
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36710: LD_ADDR_VAR 0 16
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 2
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 3
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 3
36867: PUSH
36868: LD_INT 3
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36903: LD_ADDR_VAR 0 17
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: NEG
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: LD_INT 2
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37133: LD_ADDR_VAR 0 18
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37363: LD_ADDR_VAR 0 19
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37593: LD_ADDR_VAR 0 20
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37823: LD_ADDR_VAR 0 21
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38053: LD_ADDR_VAR 0 22
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 2
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38283: LD_ADDR_VAR 0 23
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 2
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: NEG
38495: PUSH
38496: LD_INT 3
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38563: LD_ADDR_VAR 0 24
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 2
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 3
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38839: LD_ADDR_VAR 0 25
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 2
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: NEG
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39113: LD_ADDR_VAR 0 26
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39389: LD_ADDR_VAR 0 27
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 2
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39669: LD_ADDR_VAR 0 28
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 3
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 3
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39951: LD_ADDR_VAR 0 29
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: LD_INT 3
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40230: LD_ADDR_VAR 0 30
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 3
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 3
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40508: LD_ADDR_VAR 0 31
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: NEG
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40786: LD_ADDR_VAR 0 32
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 2
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: LD_INT 3
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 3
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 3
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41064: LD_ADDR_VAR 0 33
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 3
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 3
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 3
41308: NEG
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41343: LD_ADDR_VAR 0 34
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: LD_INT 3
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 3
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 3
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41623: LD_ADDR_VAR 0 35
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41735: LD_ADDR_VAR 0 36
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41847: LD_ADDR_VAR 0 37
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41959: LD_ADDR_VAR 0 38
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42071: LD_ADDR_VAR 0 39
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42183: LD_ADDR_VAR 0 40
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42295: LD_ADDR_VAR 0 41
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 3
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: NEG
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42645: LD_ADDR_VAR 0 42
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 3
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: LD_INT 3
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42995: LD_ADDR_VAR 0 43
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: LD_INT 3
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43343: LD_ADDR_VAR 0 44
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 3
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 3
43617: NEG
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 3
43640: NEG
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: LD_INT 3
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43693: LD_ADDR_VAR 0 45
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 3
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 3
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 3
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 3
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 3
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44043: LD_ADDR_VAR 0 46
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 3
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44391: LD_ADDR_VAR 0 47
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44542: LD_ADDR_VAR 0 48
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44689: LD_ADDR_VAR 0 49
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44833: LD_ADDR_VAR 0 50
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44977: LD_ADDR_VAR 0 51
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45124: LD_ADDR_VAR 0 52
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45275: LD_ADDR_VAR 0 53
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45505: LD_ADDR_VAR 0 54
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45735: LD_ADDR_VAR 0 55
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45965: LD_ADDR_VAR 0 56
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46195: LD_ADDR_VAR 0 57
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46425: LD_ADDR_VAR 0 58
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46655: LD_ADDR_VAR 0 59
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46743: LD_ADDR_VAR 0 60
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46831: LD_ADDR_VAR 0 61
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46919: LD_ADDR_VAR 0 62
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47007: LD_ADDR_VAR 0 63
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47095: LD_ADDR_VAR 0 64
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// end ; 1 :
47183: GO 53080
47185: LD_INT 1
47187: DOUBLE
47188: EQUAL
47189: IFTRUE 47193
47191: GO 49816
47193: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47194: LD_ADDR_VAR 0 11
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47238: LD_ADDR_VAR 0 12
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47279: LD_ADDR_VAR 0 13
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47319: LD_ADDR_VAR 0 14
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47360: LD_ADDR_VAR 0 15
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47404: LD_ADDR_VAR 0 16
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47450: LD_ADDR_VAR 0 17
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47494: LD_ADDR_VAR 0 18
47498: PUSH
47499: LD_INT 2
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47535: LD_ADDR_VAR 0 19
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47575: LD_ADDR_VAR 0 20
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47616: LD_ADDR_VAR 0 21
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47660: LD_ADDR_VAR 0 22
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47706: LD_ADDR_VAR 0 23
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 4
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47750: LD_ADDR_VAR 0 24
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47791: LD_ADDR_VAR 0 25
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47831: LD_ADDR_VAR 0 26
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 4
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 3
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47872: LD_ADDR_VAR 0 27
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 4
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47916: LD_ADDR_VAR 0 28
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: LD_INT 4
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 4
47947: NEG
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47962: LD_ADDR_VAR 0 29
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 3
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 4
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 4
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 3
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 5
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 5
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 4
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 6
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 6
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 5
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48117: LD_ADDR_VAR 0 30
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 4
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 4
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 4
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 5
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 5
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 6
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 6
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48260: LD_ADDR_VAR 0 31
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 4
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 4
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 5
48327: PUSH
48328: LD_INT 4
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: PUSH
48338: LD_INT 5
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: LD_INT 5
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 6
48357: PUSH
48358: LD_INT 5
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 6
48367: PUSH
48368: LD_INT 6
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 5
48377: PUSH
48378: LD_INT 6
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48399: LD_ADDR_VAR 0 32
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 4
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 5
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 4
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 6
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 6
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 5
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48542: LD_ADDR_VAR 0 33
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 4
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 4
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 5
48628: NEG
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 5
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 5
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 6
48662: NEG
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 6
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48697: LD_ADDR_VAR 0 34
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 3
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: LD_INT 4
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 4
48752: NEG
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 4
48764: NEG
48765: PUSH
48766: LD_INT 4
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 4
48776: NEG
48777: PUSH
48778: LD_INT 5
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 5
48788: NEG
48789: PUSH
48790: LD_INT 4
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 5
48800: NEG
48801: PUSH
48802: LD_INT 5
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 5
48812: NEG
48813: PUSH
48814: LD_INT 6
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 6
48824: NEG
48825: PUSH
48826: LD_INT 5
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 6
48836: NEG
48837: PUSH
48838: LD_INT 6
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48860: LD_ADDR_VAR 0 41
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48904: LD_ADDR_VAR 0 42
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48945: LD_ADDR_VAR 0 43
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 3
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48985: LD_ADDR_VAR 0 44
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49026: LD_ADDR_VAR 0 45
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49070: LD_ADDR_VAR 0 46
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49116: LD_ADDR_VAR 0 47
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49149: LD_ADDR_VAR 0 48
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49180: LD_ADDR_VAR 0 49
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49209: LD_ADDR_VAR 0 50
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 3
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49238: LD_ADDR_VAR 0 51
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49269: LD_ADDR_VAR 0 52
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49302: LD_ADDR_VAR 0 53
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 3
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49346: LD_ADDR_VAR 0 54
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49387: LD_ADDR_VAR 0 55
49391: PUSH
49392: LD_INT 3
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: LD_INT 3
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49427: LD_ADDR_VAR 0 56
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49468: LD_ADDR_VAR 0 57
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49512: LD_ADDR_VAR 0 58
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49558: LD_ADDR_VAR 0 59
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49602: LD_ADDR_VAR 0 60
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49643: LD_ADDR_VAR 0 61
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49683: LD_ADDR_VAR 0 62
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49724: LD_ADDR_VAR 0 63
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49768: LD_ADDR_VAR 0 64
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// end ; 2 :
49814: GO 53080
49816: LD_INT 2
49818: DOUBLE
49819: EQUAL
49820: IFTRUE 49824
49822: GO 53079
49824: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49825: LD_ADDR_VAR 0 29
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 4
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 5
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 5
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 4
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 4
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: LD_INT 4
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 4
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 4
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 4
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 4
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 5
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 5
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 4
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 5
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 4
50164: NEG
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 4
50187: NEG
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 4
50210: NEG
50211: PUSH
50212: LD_INT 4
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 4
50222: NEG
50223: PUSH
50224: LD_INT 5
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 3
50234: NEG
50235: PUSH
50236: LD_INT 4
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: NEG
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 4
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 5
50270: NEG
50271: PUSH
50272: LD_INT 4
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 5
50282: NEG
50283: PUSH
50284: LD_INT 5
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: LD_INT 5
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 5
50306: NEG
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50363: LD_ADDR_VAR 0 30
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 4
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 5
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 5
50400: PUSH
50401: LD_INT 5
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 4
50410: PUSH
50411: LD_INT 5
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: LD_INT 4
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 5
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 5
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 4
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 4
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 4
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 4
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 5
50609: NEG
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 5
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 5
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 3
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 4
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 4
50715: NEG
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 4
50727: NEG
50728: PUSH
50729: LD_INT 4
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 4
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 4
50751: NEG
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 4
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 5
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 4
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 4
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 5
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50910: LD_ADDR_VAR 0 31
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 5
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 5
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 4
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 5
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: NEG
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: NEG
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 4
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 4
51089: NEG
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 4
51124: NEG
51125: PUSH
51126: LD_INT 5
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: NEG
51137: PUSH
51138: LD_INT 4
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 4
51160: NEG
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 5
51172: NEG
51173: PUSH
51174: LD_INT 4
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 5
51184: NEG
51185: PUSH
51186: LD_INT 5
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: NEG
51197: PUSH
51198: LD_INT 5
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 5
51208: NEG
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 4
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 4
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 4
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 4
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 4
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 5
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 5
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 4
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 5
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51460: LD_ADDR_VAR 0 32
51464: PUSH
51465: LD_INT 4
51467: NEG
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 4
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: NEG
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 5
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 5
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 5
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 4
51629: NEG
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 4
51641: NEG
51642: PUSH
51643: LD_INT 4
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 4
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 4
51665: NEG
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 4
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 5
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 5
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 5
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 4
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 4
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 4
51872: PUSH
51873: LD_INT 4
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 4
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 5
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 5
51902: PUSH
51903: LD_INT 5
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: LD_INT 4
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 5
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: LD_INT 5
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52007: LD_ADDR_VAR 0 33
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: LD_INT 4
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 4
52026: NEG
52027: PUSH
52028: LD_INT 5
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 4
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 5
52074: NEG
52075: PUSH
52076: LD_INT 4
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 5
52086: NEG
52087: PUSH
52088: LD_INT 5
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: LD_INT 5
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 4
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 4
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 4
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 5
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 5
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 5
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 4
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 4
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 4
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 5
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 5
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 4
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 3
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 5
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52545: LD_ADDR_VAR 0 34
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 4
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 5
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 4
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 5
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 5
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 4
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 4
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: LD_INT 4
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 4
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 5
52767: PUSH
52768: LD_INT 4
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 5
52777: PUSH
52778: LD_INT 5
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 4
52787: PUSH
52788: LD_INT 5
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: LD_INT 4
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 5
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: LD_INT 5
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 4
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 4
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 3
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 4
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 5
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 5
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 5
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// end ; end ;
53077: GO 53080
53079: POP
// case btype of b_depot , b_warehouse :
53080: LD_VAR 0 1
53084: PUSH
53085: LD_INT 0
53087: DOUBLE
53088: EQUAL
53089: IFTRUE 53099
53091: LD_INT 1
53093: DOUBLE
53094: EQUAL
53095: IFTRUE 53099
53097: GO 53300
53099: POP
// case nation of nation_american :
53100: LD_VAR 0 5
53104: PUSH
53105: LD_INT 1
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53113
53111: GO 53169
53113: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53114: LD_ADDR_VAR 0 9
53118: PUSH
53119: LD_VAR 0 11
53123: PUSH
53124: LD_VAR 0 12
53128: PUSH
53129: LD_VAR 0 13
53133: PUSH
53134: LD_VAR 0 14
53138: PUSH
53139: LD_VAR 0 15
53143: PUSH
53144: LD_VAR 0 16
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: PUSH
53157: LD_VAR 0 4
53161: PUSH
53162: LD_INT 1
53164: PLUS
53165: ARRAY
53166: ST_TO_ADDR
53167: GO 53298
53169: LD_INT 2
53171: DOUBLE
53172: EQUAL
53173: IFTRUE 53177
53175: GO 53233
53177: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53178: LD_ADDR_VAR 0 9
53182: PUSH
53183: LD_VAR 0 17
53187: PUSH
53188: LD_VAR 0 18
53192: PUSH
53193: LD_VAR 0 19
53197: PUSH
53198: LD_VAR 0 20
53202: PUSH
53203: LD_VAR 0 21
53207: PUSH
53208: LD_VAR 0 22
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: PUSH
53221: LD_VAR 0 4
53225: PUSH
53226: LD_INT 1
53228: PLUS
53229: ARRAY
53230: ST_TO_ADDR
53231: GO 53298
53233: LD_INT 3
53235: DOUBLE
53236: EQUAL
53237: IFTRUE 53241
53239: GO 53297
53241: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53242: LD_ADDR_VAR 0 9
53246: PUSH
53247: LD_VAR 0 23
53251: PUSH
53252: LD_VAR 0 24
53256: PUSH
53257: LD_VAR 0 25
53261: PUSH
53262: LD_VAR 0 26
53266: PUSH
53267: LD_VAR 0 27
53271: PUSH
53272: LD_VAR 0 28
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: PUSH
53285: LD_VAR 0 4
53289: PUSH
53290: LD_INT 1
53292: PLUS
53293: ARRAY
53294: ST_TO_ADDR
53295: GO 53298
53297: POP
53298: GO 53853
53300: LD_INT 2
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53314
53306: LD_INT 3
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53314
53312: GO 53370
53314: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53315: LD_ADDR_VAR 0 9
53319: PUSH
53320: LD_VAR 0 29
53324: PUSH
53325: LD_VAR 0 30
53329: PUSH
53330: LD_VAR 0 31
53334: PUSH
53335: LD_VAR 0 32
53339: PUSH
53340: LD_VAR 0 33
53344: PUSH
53345: LD_VAR 0 34
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 4
53362: PUSH
53363: LD_INT 1
53365: PLUS
53366: ARRAY
53367: ST_TO_ADDR
53368: GO 53853
53370: LD_INT 16
53372: DOUBLE
53373: EQUAL
53374: IFTRUE 53432
53376: LD_INT 17
53378: DOUBLE
53379: EQUAL
53380: IFTRUE 53432
53382: LD_INT 18
53384: DOUBLE
53385: EQUAL
53386: IFTRUE 53432
53388: LD_INT 19
53390: DOUBLE
53391: EQUAL
53392: IFTRUE 53432
53394: LD_INT 22
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53432
53400: LD_INT 20
53402: DOUBLE
53403: EQUAL
53404: IFTRUE 53432
53406: LD_INT 21
53408: DOUBLE
53409: EQUAL
53410: IFTRUE 53432
53412: LD_INT 23
53414: DOUBLE
53415: EQUAL
53416: IFTRUE 53432
53418: LD_INT 24
53420: DOUBLE
53421: EQUAL
53422: IFTRUE 53432
53424: LD_INT 25
53426: DOUBLE
53427: EQUAL
53428: IFTRUE 53432
53430: GO 53488
53432: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53433: LD_ADDR_VAR 0 9
53437: PUSH
53438: LD_VAR 0 35
53442: PUSH
53443: LD_VAR 0 36
53447: PUSH
53448: LD_VAR 0 37
53452: PUSH
53453: LD_VAR 0 38
53457: PUSH
53458: LD_VAR 0 39
53462: PUSH
53463: LD_VAR 0 40
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: PUSH
53476: LD_VAR 0 4
53480: PUSH
53481: LD_INT 1
53483: PLUS
53484: ARRAY
53485: ST_TO_ADDR
53486: GO 53853
53488: LD_INT 6
53490: DOUBLE
53491: EQUAL
53492: IFTRUE 53544
53494: LD_INT 7
53496: DOUBLE
53497: EQUAL
53498: IFTRUE 53544
53500: LD_INT 8
53502: DOUBLE
53503: EQUAL
53504: IFTRUE 53544
53506: LD_INT 13
53508: DOUBLE
53509: EQUAL
53510: IFTRUE 53544
53512: LD_INT 12
53514: DOUBLE
53515: EQUAL
53516: IFTRUE 53544
53518: LD_INT 15
53520: DOUBLE
53521: EQUAL
53522: IFTRUE 53544
53524: LD_INT 11
53526: DOUBLE
53527: EQUAL
53528: IFTRUE 53544
53530: LD_INT 14
53532: DOUBLE
53533: EQUAL
53534: IFTRUE 53544
53536: LD_INT 10
53538: DOUBLE
53539: EQUAL
53540: IFTRUE 53544
53542: GO 53600
53544: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53545: LD_ADDR_VAR 0 9
53549: PUSH
53550: LD_VAR 0 41
53554: PUSH
53555: LD_VAR 0 42
53559: PUSH
53560: LD_VAR 0 43
53564: PUSH
53565: LD_VAR 0 44
53569: PUSH
53570: LD_VAR 0 45
53574: PUSH
53575: LD_VAR 0 46
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: PUSH
53588: LD_VAR 0 4
53592: PUSH
53593: LD_INT 1
53595: PLUS
53596: ARRAY
53597: ST_TO_ADDR
53598: GO 53853
53600: LD_INT 36
53602: DOUBLE
53603: EQUAL
53604: IFTRUE 53608
53606: GO 53664
53608: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53609: LD_ADDR_VAR 0 9
53613: PUSH
53614: LD_VAR 0 47
53618: PUSH
53619: LD_VAR 0 48
53623: PUSH
53624: LD_VAR 0 49
53628: PUSH
53629: LD_VAR 0 50
53633: PUSH
53634: LD_VAR 0 51
53638: PUSH
53639: LD_VAR 0 52
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: PUSH
53652: LD_VAR 0 4
53656: PUSH
53657: LD_INT 1
53659: PLUS
53660: ARRAY
53661: ST_TO_ADDR
53662: GO 53853
53664: LD_INT 4
53666: DOUBLE
53667: EQUAL
53668: IFTRUE 53690
53670: LD_INT 5
53672: DOUBLE
53673: EQUAL
53674: IFTRUE 53690
53676: LD_INT 34
53678: DOUBLE
53679: EQUAL
53680: IFTRUE 53690
53682: LD_INT 37
53684: DOUBLE
53685: EQUAL
53686: IFTRUE 53690
53688: GO 53746
53690: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53691: LD_ADDR_VAR 0 9
53695: PUSH
53696: LD_VAR 0 53
53700: PUSH
53701: LD_VAR 0 54
53705: PUSH
53706: LD_VAR 0 55
53710: PUSH
53711: LD_VAR 0 56
53715: PUSH
53716: LD_VAR 0 57
53720: PUSH
53721: LD_VAR 0 58
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: PUSH
53734: LD_VAR 0 4
53738: PUSH
53739: LD_INT 1
53741: PLUS
53742: ARRAY
53743: ST_TO_ADDR
53744: GO 53853
53746: LD_INT 31
53748: DOUBLE
53749: EQUAL
53750: IFTRUE 53796
53752: LD_INT 32
53754: DOUBLE
53755: EQUAL
53756: IFTRUE 53796
53758: LD_INT 33
53760: DOUBLE
53761: EQUAL
53762: IFTRUE 53796
53764: LD_INT 27
53766: DOUBLE
53767: EQUAL
53768: IFTRUE 53796
53770: LD_INT 26
53772: DOUBLE
53773: EQUAL
53774: IFTRUE 53796
53776: LD_INT 28
53778: DOUBLE
53779: EQUAL
53780: IFTRUE 53796
53782: LD_INT 29
53784: DOUBLE
53785: EQUAL
53786: IFTRUE 53796
53788: LD_INT 30
53790: DOUBLE
53791: EQUAL
53792: IFTRUE 53796
53794: GO 53852
53796: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53797: LD_ADDR_VAR 0 9
53801: PUSH
53802: LD_VAR 0 59
53806: PUSH
53807: LD_VAR 0 60
53811: PUSH
53812: LD_VAR 0 61
53816: PUSH
53817: LD_VAR 0 62
53821: PUSH
53822: LD_VAR 0 63
53826: PUSH
53827: LD_VAR 0 64
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: PUSH
53840: LD_VAR 0 4
53844: PUSH
53845: LD_INT 1
53847: PLUS
53848: ARRAY
53849: ST_TO_ADDR
53850: GO 53853
53852: POP
// temp_list2 = [ ] ;
53853: LD_ADDR_VAR 0 10
53857: PUSH
53858: EMPTY
53859: ST_TO_ADDR
// for i in temp_list do
53860: LD_ADDR_VAR 0 8
53864: PUSH
53865: LD_VAR 0 9
53869: PUSH
53870: FOR_IN
53871: IFFALSE 53923
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53873: LD_ADDR_VAR 0 10
53877: PUSH
53878: LD_VAR 0 10
53882: PUSH
53883: LD_VAR 0 8
53887: PUSH
53888: LD_INT 1
53890: ARRAY
53891: PUSH
53892: LD_VAR 0 2
53896: PLUS
53897: PUSH
53898: LD_VAR 0 8
53902: PUSH
53903: LD_INT 2
53905: ARRAY
53906: PUSH
53907: LD_VAR 0 3
53911: PLUS
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: ADD
53920: ST_TO_ADDR
53921: GO 53870
53923: POP
53924: POP
// result = temp_list2 ;
53925: LD_ADDR_VAR 0 7
53929: PUSH
53930: LD_VAR 0 10
53934: ST_TO_ADDR
// end ;
53935: LD_VAR 0 7
53939: RET
// export function EnemyInRange ( unit , dist ) ; begin
53940: LD_INT 0
53942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53943: LD_ADDR_VAR 0 3
53947: PUSH
53948: LD_VAR 0 1
53952: PPUSH
53953: CALL_OW 255
53957: PPUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 250
53967: PPUSH
53968: LD_VAR 0 1
53972: PPUSH
53973: CALL_OW 251
53977: PPUSH
53978: LD_VAR 0 2
53982: PPUSH
53983: CALL 27313 0 4
53987: PUSH
53988: LD_INT 4
53990: ARRAY
53991: ST_TO_ADDR
// end ;
53992: LD_VAR 0 3
53996: RET
// export function PlayerSeeMe ( unit ) ; begin
53997: LD_INT 0
53999: PPUSH
// result := See ( your_side , unit ) ;
54000: LD_ADDR_VAR 0 2
54004: PUSH
54005: LD_OWVAR 2
54009: PPUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 292
54019: ST_TO_ADDR
// end ;
54020: LD_VAR 0 2
54024: RET
// export function ReverseDir ( unit ) ; begin
54025: LD_INT 0
54027: PPUSH
// if not unit then
54028: LD_VAR 0 1
54032: NOT
54033: IFFALSE 54037
// exit ;
54035: GO 54060
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54037: LD_ADDR_VAR 0 2
54041: PUSH
54042: LD_VAR 0 1
54046: PPUSH
54047: CALL_OW 254
54051: PUSH
54052: LD_INT 3
54054: PLUS
54055: PUSH
54056: LD_INT 6
54058: MOD
54059: ST_TO_ADDR
// end ;
54060: LD_VAR 0 2
54064: RET
// export function ReverseArray ( array ) ; var i ; begin
54065: LD_INT 0
54067: PPUSH
54068: PPUSH
// if not array then
54069: LD_VAR 0 1
54073: NOT
54074: IFFALSE 54078
// exit ;
54076: GO 54133
// result := [ ] ;
54078: LD_ADDR_VAR 0 2
54082: PUSH
54083: EMPTY
54084: ST_TO_ADDR
// for i := array downto 1 do
54085: LD_ADDR_VAR 0 3
54089: PUSH
54090: DOUBLE
54091: LD_VAR 0 1
54095: INC
54096: ST_TO_ADDR
54097: LD_INT 1
54099: PUSH
54100: FOR_DOWNTO
54101: IFFALSE 54131
// result := Join ( result , array [ i ] ) ;
54103: LD_ADDR_VAR 0 2
54107: PUSH
54108: LD_VAR 0 2
54112: PPUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_VAR 0 3
54122: ARRAY
54123: PPUSH
54124: CALL 58778 0 2
54128: ST_TO_ADDR
54129: GO 54100
54131: POP
54132: POP
// end ;
54133: LD_VAR 0 2
54137: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54138: LD_INT 0
54140: PPUSH
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
54145: PPUSH
// if not unit or not hexes then
54146: LD_VAR 0 1
54150: NOT
54151: PUSH
54152: LD_VAR 0 2
54156: NOT
54157: OR
54158: IFFALSE 54162
// exit ;
54160: GO 54285
// dist := 9999 ;
54162: LD_ADDR_VAR 0 5
54166: PUSH
54167: LD_INT 9999
54169: ST_TO_ADDR
// for i = 1 to hexes do
54170: LD_ADDR_VAR 0 4
54174: PUSH
54175: DOUBLE
54176: LD_INT 1
54178: DEC
54179: ST_TO_ADDR
54180: LD_VAR 0 2
54184: PUSH
54185: FOR_TO
54186: IFFALSE 54273
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54188: LD_ADDR_VAR 0 6
54192: PUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: LD_VAR 0 2
54202: PUSH
54203: LD_VAR 0 4
54207: ARRAY
54208: PUSH
54209: LD_INT 1
54211: ARRAY
54212: PPUSH
54213: LD_VAR 0 2
54217: PUSH
54218: LD_VAR 0 4
54222: ARRAY
54223: PUSH
54224: LD_INT 2
54226: ARRAY
54227: PPUSH
54228: CALL_OW 297
54232: ST_TO_ADDR
// if tdist < dist then
54233: LD_VAR 0 6
54237: PUSH
54238: LD_VAR 0 5
54242: LESS
54243: IFFALSE 54271
// begin hex := hexes [ i ] ;
54245: LD_ADDR_VAR 0 8
54249: PUSH
54250: LD_VAR 0 2
54254: PUSH
54255: LD_VAR 0 4
54259: ARRAY
54260: ST_TO_ADDR
// dist := tdist ;
54261: LD_ADDR_VAR 0 5
54265: PUSH
54266: LD_VAR 0 6
54270: ST_TO_ADDR
// end ; end ;
54271: GO 54185
54273: POP
54274: POP
// result := hex ;
54275: LD_ADDR_VAR 0 3
54279: PUSH
54280: LD_VAR 0 8
54284: ST_TO_ADDR
// end ;
54285: LD_VAR 0 3
54289: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54290: LD_INT 0
54292: PPUSH
54293: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54294: LD_VAR 0 1
54298: NOT
54299: PUSH
54300: LD_VAR 0 1
54304: PUSH
54305: LD_INT 21
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 23
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PPUSH
54329: CALL_OW 69
54333: IN
54334: NOT
54335: OR
54336: IFFALSE 54340
// exit ;
54338: GO 54387
// for i = 1 to 3 do
54340: LD_ADDR_VAR 0 3
54344: PUSH
54345: DOUBLE
54346: LD_INT 1
54348: DEC
54349: ST_TO_ADDR
54350: LD_INT 3
54352: PUSH
54353: FOR_TO
54354: IFFALSE 54385
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54356: LD_VAR 0 1
54360: PPUSH
54361: CALL_OW 250
54365: PPUSH
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 251
54375: PPUSH
54376: LD_INT 1
54378: PPUSH
54379: CALL_OW 453
54383: GO 54353
54385: POP
54386: POP
// end ;
54387: LD_VAR 0 2
54391: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54392: LD_INT 0
54394: PPUSH
54395: PPUSH
54396: PPUSH
54397: PPUSH
54398: PPUSH
54399: PPUSH
// if not unit or not enemy_unit then
54400: LD_VAR 0 1
54404: NOT
54405: PUSH
54406: LD_VAR 0 2
54410: NOT
54411: OR
54412: IFFALSE 54416
// exit ;
54414: GO 54883
// if GetLives ( i ) < 250 then
54416: LD_VAR 0 4
54420: PPUSH
54421: CALL_OW 256
54425: PUSH
54426: LD_INT 250
54428: LESS
54429: IFFALSE 54442
// begin ComAutodestruct ( i ) ;
54431: LD_VAR 0 4
54435: PPUSH
54436: CALL 54290 0 1
// exit ;
54440: GO 54883
// end ; x := GetX ( enemy_unit ) ;
54442: LD_ADDR_VAR 0 7
54446: PUSH
54447: LD_VAR 0 2
54451: PPUSH
54452: CALL_OW 250
54456: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54457: LD_ADDR_VAR 0 8
54461: PUSH
54462: LD_VAR 0 2
54466: PPUSH
54467: CALL_OW 251
54471: ST_TO_ADDR
// if not x or not y then
54472: LD_VAR 0 7
54476: NOT
54477: PUSH
54478: LD_VAR 0 8
54482: NOT
54483: OR
54484: IFFALSE 54488
// exit ;
54486: GO 54883
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54488: LD_ADDR_VAR 0 6
54492: PUSH
54493: LD_VAR 0 7
54497: PPUSH
54498: LD_INT 0
54500: PPUSH
54501: LD_INT 4
54503: PPUSH
54504: CALL_OW 272
54508: PUSH
54509: LD_VAR 0 8
54513: PPUSH
54514: LD_INT 0
54516: PPUSH
54517: LD_INT 4
54519: PPUSH
54520: CALL_OW 273
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_VAR 0 7
54533: PPUSH
54534: LD_INT 1
54536: PPUSH
54537: LD_INT 4
54539: PPUSH
54540: CALL_OW 272
54544: PUSH
54545: LD_VAR 0 8
54549: PPUSH
54550: LD_INT 1
54552: PPUSH
54553: LD_INT 4
54555: PPUSH
54556: CALL_OW 273
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_VAR 0 7
54569: PPUSH
54570: LD_INT 2
54572: PPUSH
54573: LD_INT 4
54575: PPUSH
54576: CALL_OW 272
54580: PUSH
54581: LD_VAR 0 8
54585: PPUSH
54586: LD_INT 2
54588: PPUSH
54589: LD_INT 4
54591: PPUSH
54592: CALL_OW 273
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_VAR 0 7
54605: PPUSH
54606: LD_INT 3
54608: PPUSH
54609: LD_INT 4
54611: PPUSH
54612: CALL_OW 272
54616: PUSH
54617: LD_VAR 0 8
54621: PPUSH
54622: LD_INT 3
54624: PPUSH
54625: LD_INT 4
54627: PPUSH
54628: CALL_OW 273
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_VAR 0 7
54641: PPUSH
54642: LD_INT 4
54644: PPUSH
54645: LD_INT 4
54647: PPUSH
54648: CALL_OW 272
54652: PUSH
54653: LD_VAR 0 8
54657: PPUSH
54658: LD_INT 4
54660: PPUSH
54661: LD_INT 4
54663: PPUSH
54664: CALL_OW 273
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_VAR 0 7
54677: PPUSH
54678: LD_INT 5
54680: PPUSH
54681: LD_INT 4
54683: PPUSH
54684: CALL_OW 272
54688: PUSH
54689: LD_VAR 0 8
54693: PPUSH
54694: LD_INT 5
54696: PPUSH
54697: LD_INT 4
54699: PPUSH
54700: CALL_OW 273
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// for i = tmp downto 1 do
54717: LD_ADDR_VAR 0 4
54721: PUSH
54722: DOUBLE
54723: LD_VAR 0 6
54727: INC
54728: ST_TO_ADDR
54729: LD_INT 1
54731: PUSH
54732: FOR_DOWNTO
54733: IFFALSE 54834
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54735: LD_VAR 0 6
54739: PUSH
54740: LD_VAR 0 4
54744: ARRAY
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PPUSH
54750: LD_VAR 0 6
54754: PUSH
54755: LD_VAR 0 4
54759: ARRAY
54760: PUSH
54761: LD_INT 2
54763: ARRAY
54764: PPUSH
54765: CALL_OW 488
54769: NOT
54770: PUSH
54771: LD_VAR 0 6
54775: PUSH
54776: LD_VAR 0 4
54780: ARRAY
54781: PUSH
54782: LD_INT 1
54784: ARRAY
54785: PPUSH
54786: LD_VAR 0 6
54790: PUSH
54791: LD_VAR 0 4
54795: ARRAY
54796: PUSH
54797: LD_INT 2
54799: ARRAY
54800: PPUSH
54801: CALL_OW 428
54805: PUSH
54806: LD_INT 0
54808: NONEQUAL
54809: OR
54810: IFFALSE 54832
// tmp := Delete ( tmp , i ) ;
54812: LD_ADDR_VAR 0 6
54816: PUSH
54817: LD_VAR 0 6
54821: PPUSH
54822: LD_VAR 0 4
54826: PPUSH
54827: CALL_OW 3
54831: ST_TO_ADDR
54832: GO 54732
54834: POP
54835: POP
// j := GetClosestHex ( unit , tmp ) ;
54836: LD_ADDR_VAR 0 5
54840: PUSH
54841: LD_VAR 0 1
54845: PPUSH
54846: LD_VAR 0 6
54850: PPUSH
54851: CALL 54138 0 2
54855: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54856: LD_VAR 0 1
54860: PPUSH
54861: LD_VAR 0 5
54865: PUSH
54866: LD_INT 1
54868: ARRAY
54869: PPUSH
54870: LD_VAR 0 5
54874: PUSH
54875: LD_INT 2
54877: ARRAY
54878: PPUSH
54879: CALL_OW 111
// end ;
54883: LD_VAR 0 3
54887: RET
// export function PrepareApemanSoldier ( ) ; begin
54888: LD_INT 0
54890: PPUSH
// uc_nation := 0 ;
54891: LD_ADDR_OWVAR 21
54895: PUSH
54896: LD_INT 0
54898: ST_TO_ADDR
// hc_sex := sex_male ;
54899: LD_ADDR_OWVAR 27
54903: PUSH
54904: LD_INT 1
54906: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54907: LD_ADDR_OWVAR 28
54911: PUSH
54912: LD_INT 15
54914: ST_TO_ADDR
// hc_gallery :=  ;
54915: LD_ADDR_OWVAR 33
54919: PUSH
54920: LD_STRING 
54922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54923: LD_ADDR_OWVAR 31
54927: PUSH
54928: LD_INT 0
54930: PPUSH
54931: LD_INT 3
54933: PPUSH
54934: CALL_OW 12
54938: PUSH
54939: LD_INT 0
54941: PPUSH
54942: LD_INT 3
54944: PPUSH
54945: CALL_OW 12
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// end ;
54962: LD_VAR 0 1
54966: RET
// export function PrepareApemanEngineer ( ) ; begin
54967: LD_INT 0
54969: PPUSH
// uc_nation := 0 ;
54970: LD_ADDR_OWVAR 21
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
// hc_sex := sex_male ;
54978: LD_ADDR_OWVAR 27
54982: PUSH
54983: LD_INT 1
54985: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54986: LD_ADDR_OWVAR 28
54990: PUSH
54991: LD_INT 16
54993: ST_TO_ADDR
// hc_gallery :=  ;
54994: LD_ADDR_OWVAR 33
54998: PUSH
54999: LD_STRING 
55001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55002: LD_ADDR_OWVAR 31
55006: PUSH
55007: LD_INT 0
55009: PPUSH
55010: LD_INT 3
55012: PPUSH
55013: CALL_OW 12
55017: PUSH
55018: LD_INT 0
55020: PPUSH
55021: LD_INT 3
55023: PPUSH
55024: CALL_OW 12
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// end ;
55041: LD_VAR 0 1
55045: RET
// export function PrepareApeman ( agressivity ) ; begin
55046: LD_INT 0
55048: PPUSH
// uc_side := 0 ;
55049: LD_ADDR_OWVAR 20
55053: PUSH
55054: LD_INT 0
55056: ST_TO_ADDR
// uc_nation := 0 ;
55057: LD_ADDR_OWVAR 21
55061: PUSH
55062: LD_INT 0
55064: ST_TO_ADDR
// hc_sex := sex_male ;
55065: LD_ADDR_OWVAR 27
55069: PUSH
55070: LD_INT 1
55072: ST_TO_ADDR
// hc_class := class_apeman ;
55073: LD_ADDR_OWVAR 28
55077: PUSH
55078: LD_INT 12
55080: ST_TO_ADDR
// hc_gallery :=  ;
55081: LD_ADDR_OWVAR 33
55085: PUSH
55086: LD_STRING 
55088: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55089: LD_ADDR_OWVAR 35
55093: PUSH
55094: LD_VAR 0 1
55098: NEG
55099: PPUSH
55100: LD_VAR 0 1
55104: PPUSH
55105: CALL_OW 12
55109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55110: LD_ADDR_OWVAR 31
55114: PUSH
55115: LD_INT 0
55117: PPUSH
55118: LD_INT 3
55120: PPUSH
55121: CALL_OW 12
55125: PUSH
55126: LD_INT 0
55128: PPUSH
55129: LD_INT 3
55131: PPUSH
55132: CALL_OW 12
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// end ;
55149: LD_VAR 0 2
55153: RET
// export function PrepareTiger ( agressivity ) ; begin
55154: LD_INT 0
55156: PPUSH
// uc_side := 0 ;
55157: LD_ADDR_OWVAR 20
55161: PUSH
55162: LD_INT 0
55164: ST_TO_ADDR
// uc_nation := 0 ;
55165: LD_ADDR_OWVAR 21
55169: PUSH
55170: LD_INT 0
55172: ST_TO_ADDR
// hc_class := class_tiger ;
55173: LD_ADDR_OWVAR 28
55177: PUSH
55178: LD_INT 14
55180: ST_TO_ADDR
// hc_gallery :=  ;
55181: LD_ADDR_OWVAR 33
55185: PUSH
55186: LD_STRING 
55188: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55189: LD_ADDR_OWVAR 35
55193: PUSH
55194: LD_VAR 0 1
55198: NEG
55199: PPUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 12
55209: ST_TO_ADDR
// end ;
55210: LD_VAR 0 2
55214: RET
// export function PrepareEnchidna ( ) ; begin
55215: LD_INT 0
55217: PPUSH
// uc_side := 0 ;
55218: LD_ADDR_OWVAR 20
55222: PUSH
55223: LD_INT 0
55225: ST_TO_ADDR
// uc_nation := 0 ;
55226: LD_ADDR_OWVAR 21
55230: PUSH
55231: LD_INT 0
55233: ST_TO_ADDR
// hc_class := class_baggie ;
55234: LD_ADDR_OWVAR 28
55238: PUSH
55239: LD_INT 13
55241: ST_TO_ADDR
// hc_gallery :=  ;
55242: LD_ADDR_OWVAR 33
55246: PUSH
55247: LD_STRING 
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 1
55254: RET
// export function PrepareFrog ( ) ; begin
55255: LD_INT 0
55257: PPUSH
// uc_side := 0 ;
55258: LD_ADDR_OWVAR 20
55262: PUSH
55263: LD_INT 0
55265: ST_TO_ADDR
// uc_nation := 0 ;
55266: LD_ADDR_OWVAR 21
55270: PUSH
55271: LD_INT 0
55273: ST_TO_ADDR
// hc_class := class_frog ;
55274: LD_ADDR_OWVAR 28
55278: PUSH
55279: LD_INT 19
55281: ST_TO_ADDR
// hc_gallery :=  ;
55282: LD_ADDR_OWVAR 33
55286: PUSH
55287: LD_STRING 
55289: ST_TO_ADDR
// end ;
55290: LD_VAR 0 1
55294: RET
// export function PrepareFish ( ) ; begin
55295: LD_INT 0
55297: PPUSH
// uc_side := 0 ;
55298: LD_ADDR_OWVAR 20
55302: PUSH
55303: LD_INT 0
55305: ST_TO_ADDR
// uc_nation := 0 ;
55306: LD_ADDR_OWVAR 21
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
// hc_class := class_fish ;
55314: LD_ADDR_OWVAR 28
55318: PUSH
55319: LD_INT 20
55321: ST_TO_ADDR
// hc_gallery :=  ;
55322: LD_ADDR_OWVAR 33
55326: PUSH
55327: LD_STRING 
55329: ST_TO_ADDR
// end ;
55330: LD_VAR 0 1
55334: RET
// export function PrepareBird ( ) ; begin
55335: LD_INT 0
55337: PPUSH
// uc_side := 0 ;
55338: LD_ADDR_OWVAR 20
55342: PUSH
55343: LD_INT 0
55345: ST_TO_ADDR
// uc_nation := 0 ;
55346: LD_ADDR_OWVAR 21
55350: PUSH
55351: LD_INT 0
55353: ST_TO_ADDR
// hc_class := class_phororhacos ;
55354: LD_ADDR_OWVAR 28
55358: PUSH
55359: LD_INT 18
55361: ST_TO_ADDR
// hc_gallery :=  ;
55362: LD_ADDR_OWVAR 33
55366: PUSH
55367: LD_STRING 
55369: ST_TO_ADDR
// end ;
55370: LD_VAR 0 1
55374: RET
// export function PrepareHorse ( ) ; begin
55375: LD_INT 0
55377: PPUSH
// uc_side := 0 ;
55378: LD_ADDR_OWVAR 20
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// uc_nation := 0 ;
55386: LD_ADDR_OWVAR 21
55390: PUSH
55391: LD_INT 0
55393: ST_TO_ADDR
// hc_class := class_horse ;
55394: LD_ADDR_OWVAR 28
55398: PUSH
55399: LD_INT 21
55401: ST_TO_ADDR
// hc_gallery :=  ;
55402: LD_ADDR_OWVAR 33
55406: PUSH
55407: LD_STRING 
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 1
55414: RET
// export function PrepareMastodont ( ) ; begin
55415: LD_INT 0
55417: PPUSH
// uc_side := 0 ;
55418: LD_ADDR_OWVAR 20
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// uc_nation := 0 ;
55426: LD_ADDR_OWVAR 21
55430: PUSH
55431: LD_INT 0
55433: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55434: LD_ADDR_OWVAR 37
55438: PUSH
55439: LD_INT 31
55441: ST_TO_ADDR
// vc_control := control_rider ;
55442: LD_ADDR_OWVAR 38
55446: PUSH
55447: LD_INT 4
55449: ST_TO_ADDR
// end ;
55450: LD_VAR 0 1
55454: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55455: LD_INT 0
55457: PPUSH
55458: PPUSH
55459: PPUSH
// uc_side = 0 ;
55460: LD_ADDR_OWVAR 20
55464: PUSH
55465: LD_INT 0
55467: ST_TO_ADDR
// uc_nation = 0 ;
55468: LD_ADDR_OWVAR 21
55472: PUSH
55473: LD_INT 0
55475: ST_TO_ADDR
// InitHc_All ( ) ;
55476: CALL_OW 584
// InitVc ;
55480: CALL_OW 20
// if mastodonts then
55484: LD_VAR 0 6
55488: IFFALSE 55555
// for i = 1 to mastodonts do
55490: LD_ADDR_VAR 0 11
55494: PUSH
55495: DOUBLE
55496: LD_INT 1
55498: DEC
55499: ST_TO_ADDR
55500: LD_VAR 0 6
55504: PUSH
55505: FOR_TO
55506: IFFALSE 55553
// begin vc_chassis := 31 ;
55508: LD_ADDR_OWVAR 37
55512: PUSH
55513: LD_INT 31
55515: ST_TO_ADDR
// vc_control := control_rider ;
55516: LD_ADDR_OWVAR 38
55520: PUSH
55521: LD_INT 4
55523: ST_TO_ADDR
// animal := CreateVehicle ;
55524: LD_ADDR_VAR 0 12
55528: PUSH
55529: CALL_OW 45
55533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55534: LD_VAR 0 12
55538: PPUSH
55539: LD_VAR 0 8
55543: PPUSH
55544: LD_INT 0
55546: PPUSH
55547: CALL 57683 0 3
// end ;
55551: GO 55505
55553: POP
55554: POP
// if horses then
55555: LD_VAR 0 5
55559: IFFALSE 55626
// for i = 1 to horses do
55561: LD_ADDR_VAR 0 11
55565: PUSH
55566: DOUBLE
55567: LD_INT 1
55569: DEC
55570: ST_TO_ADDR
55571: LD_VAR 0 5
55575: PUSH
55576: FOR_TO
55577: IFFALSE 55624
// begin hc_class := 21 ;
55579: LD_ADDR_OWVAR 28
55583: PUSH
55584: LD_INT 21
55586: ST_TO_ADDR
// hc_gallery :=  ;
55587: LD_ADDR_OWVAR 33
55591: PUSH
55592: LD_STRING 
55594: ST_TO_ADDR
// animal := CreateHuman ;
55595: LD_ADDR_VAR 0 12
55599: PUSH
55600: CALL_OW 44
55604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55605: LD_VAR 0 12
55609: PPUSH
55610: LD_VAR 0 8
55614: PPUSH
55615: LD_INT 0
55617: PPUSH
55618: CALL 57683 0 3
// end ;
55622: GO 55576
55624: POP
55625: POP
// if birds then
55626: LD_VAR 0 1
55630: IFFALSE 55697
// for i = 1 to birds do
55632: LD_ADDR_VAR 0 11
55636: PUSH
55637: DOUBLE
55638: LD_INT 1
55640: DEC
55641: ST_TO_ADDR
55642: LD_VAR 0 1
55646: PUSH
55647: FOR_TO
55648: IFFALSE 55695
// begin hc_class := 18 ;
55650: LD_ADDR_OWVAR 28
55654: PUSH
55655: LD_INT 18
55657: ST_TO_ADDR
// hc_gallery =  ;
55658: LD_ADDR_OWVAR 33
55662: PUSH
55663: LD_STRING 
55665: ST_TO_ADDR
// animal := CreateHuman ;
55666: LD_ADDR_VAR 0 12
55670: PUSH
55671: CALL_OW 44
55675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55676: LD_VAR 0 12
55680: PPUSH
55681: LD_VAR 0 8
55685: PPUSH
55686: LD_INT 0
55688: PPUSH
55689: CALL 57683 0 3
// end ;
55693: GO 55647
55695: POP
55696: POP
// if tigers then
55697: LD_VAR 0 2
55701: IFFALSE 55785
// for i = 1 to tigers do
55703: LD_ADDR_VAR 0 11
55707: PUSH
55708: DOUBLE
55709: LD_INT 1
55711: DEC
55712: ST_TO_ADDR
55713: LD_VAR 0 2
55717: PUSH
55718: FOR_TO
55719: IFFALSE 55783
// begin hc_class = class_tiger ;
55721: LD_ADDR_OWVAR 28
55725: PUSH
55726: LD_INT 14
55728: ST_TO_ADDR
// hc_gallery =  ;
55729: LD_ADDR_OWVAR 33
55733: PUSH
55734: LD_STRING 
55736: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55737: LD_ADDR_OWVAR 35
55741: PUSH
55742: LD_INT 7
55744: NEG
55745: PPUSH
55746: LD_INT 7
55748: PPUSH
55749: CALL_OW 12
55753: ST_TO_ADDR
// animal := CreateHuman ;
55754: LD_ADDR_VAR 0 12
55758: PUSH
55759: CALL_OW 44
55763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55764: LD_VAR 0 12
55768: PPUSH
55769: LD_VAR 0 8
55773: PPUSH
55774: LD_INT 0
55776: PPUSH
55777: CALL 57683 0 3
// end ;
55781: GO 55718
55783: POP
55784: POP
// if apemans then
55785: LD_VAR 0 3
55789: IFFALSE 55912
// for i = 1 to apemans do
55791: LD_ADDR_VAR 0 11
55795: PUSH
55796: DOUBLE
55797: LD_INT 1
55799: DEC
55800: ST_TO_ADDR
55801: LD_VAR 0 3
55805: PUSH
55806: FOR_TO
55807: IFFALSE 55910
// begin hc_class = class_apeman ;
55809: LD_ADDR_OWVAR 28
55813: PUSH
55814: LD_INT 12
55816: ST_TO_ADDR
// hc_gallery =  ;
55817: LD_ADDR_OWVAR 33
55821: PUSH
55822: LD_STRING 
55824: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55825: LD_ADDR_OWVAR 35
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PPUSH
55834: LD_INT 2
55836: PPUSH
55837: CALL_OW 12
55841: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55842: LD_ADDR_OWVAR 31
55846: PUSH
55847: LD_INT 1
55849: PPUSH
55850: LD_INT 3
55852: PPUSH
55853: CALL_OW 12
55857: PUSH
55858: LD_INT 1
55860: PPUSH
55861: LD_INT 3
55863: PPUSH
55864: CALL_OW 12
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// animal := CreateHuman ;
55881: LD_ADDR_VAR 0 12
55885: PUSH
55886: CALL_OW 44
55890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55891: LD_VAR 0 12
55895: PPUSH
55896: LD_VAR 0 8
55900: PPUSH
55901: LD_INT 0
55903: PPUSH
55904: CALL 57683 0 3
// end ;
55908: GO 55806
55910: POP
55911: POP
// if enchidnas then
55912: LD_VAR 0 4
55916: IFFALSE 55983
// for i = 1 to enchidnas do
55918: LD_ADDR_VAR 0 11
55922: PUSH
55923: DOUBLE
55924: LD_INT 1
55926: DEC
55927: ST_TO_ADDR
55928: LD_VAR 0 4
55932: PUSH
55933: FOR_TO
55934: IFFALSE 55981
// begin hc_class = 13 ;
55936: LD_ADDR_OWVAR 28
55940: PUSH
55941: LD_INT 13
55943: ST_TO_ADDR
// hc_gallery =  ;
55944: LD_ADDR_OWVAR 33
55948: PUSH
55949: LD_STRING 
55951: ST_TO_ADDR
// animal := CreateHuman ;
55952: LD_ADDR_VAR 0 12
55956: PUSH
55957: CALL_OW 44
55961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55962: LD_VAR 0 12
55966: PPUSH
55967: LD_VAR 0 8
55971: PPUSH
55972: LD_INT 0
55974: PPUSH
55975: CALL 57683 0 3
// end ;
55979: GO 55933
55981: POP
55982: POP
// if fishes then
55983: LD_VAR 0 7
55987: IFFALSE 56054
// for i = 1 to fishes do
55989: LD_ADDR_VAR 0 11
55993: PUSH
55994: DOUBLE
55995: LD_INT 1
55997: DEC
55998: ST_TO_ADDR
55999: LD_VAR 0 7
56003: PUSH
56004: FOR_TO
56005: IFFALSE 56052
// begin hc_class = 20 ;
56007: LD_ADDR_OWVAR 28
56011: PUSH
56012: LD_INT 20
56014: ST_TO_ADDR
// hc_gallery =  ;
56015: LD_ADDR_OWVAR 33
56019: PUSH
56020: LD_STRING 
56022: ST_TO_ADDR
// animal := CreateHuman ;
56023: LD_ADDR_VAR 0 12
56027: PUSH
56028: CALL_OW 44
56032: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56033: LD_VAR 0 12
56037: PPUSH
56038: LD_VAR 0 9
56042: PPUSH
56043: LD_INT 0
56045: PPUSH
56046: CALL 57683 0 3
// end ;
56050: GO 56004
56052: POP
56053: POP
// end ;
56054: LD_VAR 0 10
56058: RET
// export function WantHeal ( sci , unit ) ; begin
56059: LD_INT 0
56061: PPUSH
// if GetTaskList ( sci ) > 0 then
56062: LD_VAR 0 1
56066: PPUSH
56067: CALL_OW 437
56071: PUSH
56072: LD_INT 0
56074: GREATER
56075: IFFALSE 56145
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56077: LD_VAR 0 1
56081: PPUSH
56082: CALL_OW 437
56086: PUSH
56087: LD_INT 1
56089: ARRAY
56090: PUSH
56091: LD_INT 1
56093: ARRAY
56094: PUSH
56095: LD_STRING l
56097: EQUAL
56098: PUSH
56099: LD_VAR 0 1
56103: PPUSH
56104: CALL_OW 437
56108: PUSH
56109: LD_INT 1
56111: ARRAY
56112: PUSH
56113: LD_INT 4
56115: ARRAY
56116: PUSH
56117: LD_VAR 0 2
56121: EQUAL
56122: AND
56123: IFFALSE 56135
// result := true else
56125: LD_ADDR_VAR 0 3
56129: PUSH
56130: LD_INT 1
56132: ST_TO_ADDR
56133: GO 56143
// result := false ;
56135: LD_ADDR_VAR 0 3
56139: PUSH
56140: LD_INT 0
56142: ST_TO_ADDR
// end else
56143: GO 56153
// result := false ;
56145: LD_ADDR_VAR 0 3
56149: PUSH
56150: LD_INT 0
56152: ST_TO_ADDR
// end ;
56153: LD_VAR 0 3
56157: RET
// export function HealTarget ( sci ) ; begin
56158: LD_INT 0
56160: PPUSH
// if not sci then
56161: LD_VAR 0 1
56165: NOT
56166: IFFALSE 56170
// exit ;
56168: GO 56235
// result := 0 ;
56170: LD_ADDR_VAR 0 2
56174: PUSH
56175: LD_INT 0
56177: ST_TO_ADDR
// if GetTaskList ( sci ) then
56178: LD_VAR 0 1
56182: PPUSH
56183: CALL_OW 437
56187: IFFALSE 56235
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 437
56198: PUSH
56199: LD_INT 1
56201: ARRAY
56202: PUSH
56203: LD_INT 1
56205: ARRAY
56206: PUSH
56207: LD_STRING l
56209: EQUAL
56210: IFFALSE 56235
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56212: LD_ADDR_VAR 0 2
56216: PUSH
56217: LD_VAR 0 1
56221: PPUSH
56222: CALL_OW 437
56226: PUSH
56227: LD_INT 1
56229: ARRAY
56230: PUSH
56231: LD_INT 4
56233: ARRAY
56234: ST_TO_ADDR
// end ;
56235: LD_VAR 0 2
56239: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56240: LD_INT 0
56242: PPUSH
56243: PPUSH
56244: PPUSH
56245: PPUSH
// if not base_units then
56246: LD_VAR 0 1
56250: NOT
56251: IFFALSE 56255
// exit ;
56253: GO 56342
// result := false ;
56255: LD_ADDR_VAR 0 2
56259: PUSH
56260: LD_INT 0
56262: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56263: LD_ADDR_VAR 0 5
56267: PUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: LD_INT 21
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 72
56287: ST_TO_ADDR
// if not tmp then
56288: LD_VAR 0 5
56292: NOT
56293: IFFALSE 56297
// exit ;
56295: GO 56342
// for i in tmp do
56297: LD_ADDR_VAR 0 3
56301: PUSH
56302: LD_VAR 0 5
56306: PUSH
56307: FOR_IN
56308: IFFALSE 56340
// begin result := EnemyInRange ( i , 22 ) ;
56310: LD_ADDR_VAR 0 2
56314: PUSH
56315: LD_VAR 0 3
56319: PPUSH
56320: LD_INT 22
56322: PPUSH
56323: CALL 53940 0 2
56327: ST_TO_ADDR
// if result then
56328: LD_VAR 0 2
56332: IFFALSE 56338
// exit ;
56334: POP
56335: POP
56336: GO 56342
// end ;
56338: GO 56307
56340: POP
56341: POP
// end ;
56342: LD_VAR 0 2
56346: RET
// export function FilterByTag ( units , tag ) ; begin
56347: LD_INT 0
56349: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: LD_VAR 0 1
56359: PPUSH
56360: LD_INT 120
56362: PUSH
56363: LD_VAR 0 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PPUSH
56372: CALL_OW 72
56376: ST_TO_ADDR
// end ;
56377: LD_VAR 0 3
56381: RET
// export function IsDriver ( un ) ; begin
56382: LD_INT 0
56384: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56385: LD_ADDR_VAR 0 2
56389: PUSH
56390: LD_VAR 0 1
56394: PUSH
56395: LD_INT 55
56397: PUSH
56398: EMPTY
56399: LIST
56400: PPUSH
56401: CALL_OW 69
56405: IN
56406: ST_TO_ADDR
// end ;
56407: LD_VAR 0 2
56411: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56412: LD_INT 0
56414: PPUSH
56415: PPUSH
// list := [ ] ;
56416: LD_ADDR_VAR 0 5
56420: PUSH
56421: EMPTY
56422: ST_TO_ADDR
// case d of 0 :
56423: LD_VAR 0 3
56427: PUSH
56428: LD_INT 0
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56436
56434: GO 56569
56436: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56437: LD_ADDR_VAR 0 5
56441: PUSH
56442: LD_VAR 0 1
56446: PUSH
56447: LD_INT 4
56449: MINUS
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: LD_INT 4
56458: MINUS
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: PUSH
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 3
56475: MINUS
56476: PUSH
56477: LD_VAR 0 2
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: PUSH
56490: LD_VAR 0 1
56494: PUSH
56495: LD_INT 4
56497: PLUS
56498: PUSH
56499: LD_VAR 0 2
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: PUSH
56512: LD_VAR 0 1
56516: PUSH
56517: LD_INT 3
56519: PLUS
56520: PUSH
56521: LD_VAR 0 2
56525: PUSH
56526: LD_INT 3
56528: PLUS
56529: PUSH
56530: LD_INT 5
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: LD_VAR 0 1
56542: PUSH
56543: LD_VAR 0 2
56547: PUSH
56548: LD_INT 4
56550: PLUS
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// end ; 1 :
56567: GO 57267
56569: LD_INT 1
56571: DOUBLE
56572: EQUAL
56573: IFTRUE 56577
56575: GO 56710
56577: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56578: LD_ADDR_VAR 0 5
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: LD_VAR 0 2
56592: PUSH
56593: LD_INT 4
56595: MINUS
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: PUSH
56605: LD_VAR 0 1
56609: PUSH
56610: LD_INT 3
56612: MINUS
56613: PUSH
56614: LD_VAR 0 2
56618: PUSH
56619: LD_INT 3
56621: MINUS
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 4
56638: MINUS
56639: PUSH
56640: LD_VAR 0 2
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: PUSH
56653: LD_VAR 0 1
56657: PUSH
56658: LD_VAR 0 2
56662: PUSH
56663: LD_INT 3
56665: PLUS
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: PUSH
56675: LD_VAR 0 1
56679: PUSH
56680: LD_INT 4
56682: PLUS
56683: PUSH
56684: LD_VAR 0 2
56688: PUSH
56689: LD_INT 4
56691: PLUS
56692: PUSH
56693: LD_INT 5
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// end ; 2 :
56708: GO 57267
56710: LD_INT 2
56712: DOUBLE
56713: EQUAL
56714: IFTRUE 56718
56716: GO 56847
56718: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56719: LD_ADDR_VAR 0 5
56723: PUSH
56724: LD_VAR 0 1
56728: PUSH
56729: LD_VAR 0 2
56733: PUSH
56734: LD_INT 3
56736: MINUS
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: PUSH
56746: LD_VAR 0 1
56750: PUSH
56751: LD_INT 4
56753: PLUS
56754: PUSH
56755: LD_VAR 0 2
56759: PUSH
56760: LD_INT 4
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: PUSH
56768: LD_VAR 0 1
56772: PUSH
56773: LD_VAR 0 2
56777: PUSH
56778: LD_INT 4
56780: PLUS
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: PUSH
56790: LD_VAR 0 1
56794: PUSH
56795: LD_INT 3
56797: MINUS
56798: PUSH
56799: LD_VAR 0 2
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: PUSH
56812: LD_VAR 0 1
56816: PUSH
56817: LD_INT 4
56819: MINUS
56820: PUSH
56821: LD_VAR 0 2
56825: PUSH
56826: LD_INT 4
56828: MINUS
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// end ; 3 :
56845: GO 57267
56847: LD_INT 3
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56855
56853: GO 56988
56855: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: LD_VAR 0 1
56865: PUSH
56866: LD_INT 3
56868: PLUS
56869: PUSH
56870: LD_VAR 0 2
56874: PUSH
56875: LD_INT 4
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: PUSH
56883: LD_VAR 0 1
56887: PUSH
56888: LD_INT 4
56890: PLUS
56891: PUSH
56892: LD_VAR 0 2
56896: PUSH
56897: LD_INT 4
56899: PLUS
56900: PUSH
56901: LD_INT 5
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: PUSH
56909: LD_VAR 0 1
56913: PUSH
56914: LD_INT 4
56916: MINUS
56917: PUSH
56918: LD_VAR 0 2
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: PUSH
56931: LD_VAR 0 1
56935: PUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_INT 4
56943: MINUS
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: PUSH
56953: LD_VAR 0 1
56957: PUSH
56958: LD_INT 3
56960: MINUS
56961: PUSH
56962: LD_VAR 0 2
56966: PUSH
56967: LD_INT 3
56969: MINUS
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// end ; 4 :
56986: GO 57267
56988: LD_INT 4
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 56996
56994: GO 57129
56996: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56997: LD_ADDR_VAR 0 5
57001: PUSH
57002: LD_VAR 0 1
57006: PUSH
57007: LD_VAR 0 2
57011: PUSH
57012: LD_INT 4
57014: PLUS
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: PUSH
57024: LD_VAR 0 1
57028: PUSH
57029: LD_INT 3
57031: PLUS
57032: PUSH
57033: LD_VAR 0 2
57037: PUSH
57038: LD_INT 3
57040: PLUS
57041: PUSH
57042: LD_INT 5
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: PUSH
57050: LD_VAR 0 1
57054: PUSH
57055: LD_INT 4
57057: PLUS
57058: PUSH
57059: LD_VAR 0 2
57063: PUSH
57064: LD_INT 4
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: PUSH
57072: LD_VAR 0 1
57076: PUSH
57077: LD_VAR 0 2
57081: PUSH
57082: LD_INT 3
57084: MINUS
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: PUSH
57094: LD_VAR 0 1
57098: PUSH
57099: LD_INT 4
57101: MINUS
57102: PUSH
57103: LD_VAR 0 2
57107: PUSH
57108: LD_INT 4
57110: MINUS
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: ST_TO_ADDR
// end ; 5 :
57127: GO 57267
57129: LD_INT 5
57131: DOUBLE
57132: EQUAL
57133: IFTRUE 57137
57135: GO 57266
57137: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57138: LD_ADDR_VAR 0 5
57142: PUSH
57143: LD_VAR 0 1
57147: PUSH
57148: LD_INT 4
57150: MINUS
57151: PUSH
57152: LD_VAR 0 2
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: PUSH
57165: LD_VAR 0 1
57169: PUSH
57170: LD_VAR 0 2
57174: PUSH
57175: LD_INT 4
57177: MINUS
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: PUSH
57187: LD_VAR 0 1
57191: PUSH
57192: LD_INT 4
57194: PLUS
57195: PUSH
57196: LD_VAR 0 2
57200: PUSH
57201: LD_INT 4
57203: PLUS
57204: PUSH
57205: LD_INT 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: LIST
57212: PUSH
57213: LD_VAR 0 1
57217: PUSH
57218: LD_INT 3
57220: PLUS
57221: PUSH
57222: LD_VAR 0 2
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: PUSH
57235: LD_VAR 0 1
57239: PUSH
57240: LD_VAR 0 2
57244: PUSH
57245: LD_INT 3
57247: PLUS
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: ST_TO_ADDR
// end ; end ;
57264: GO 57267
57266: POP
// result := list ;
57267: LD_ADDR_VAR 0 4
57271: PUSH
57272: LD_VAR 0 5
57276: ST_TO_ADDR
// end ;
57277: LD_VAR 0 4
57281: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57282: LD_INT 0
57284: PPUSH
57285: PPUSH
57286: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57287: LD_VAR 0 1
57291: NOT
57292: PUSH
57293: LD_VAR 0 2
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: IN
57316: NOT
57317: OR
57318: IFFALSE 57322
// exit ;
57320: GO 57405
// tmp := [ ] ;
57322: LD_ADDR_VAR 0 5
57326: PUSH
57327: EMPTY
57328: ST_TO_ADDR
// for i in units do
57329: LD_ADDR_VAR 0 4
57333: PUSH
57334: LD_VAR 0 1
57338: PUSH
57339: FOR_IN
57340: IFFALSE 57374
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57342: LD_ADDR_VAR 0 5
57346: PUSH
57347: LD_VAR 0 5
57351: PPUSH
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 2
57361: PPUSH
57362: CALL_OW 259
57366: PPUSH
57367: CALL 58778 0 2
57371: ST_TO_ADDR
57372: GO 57339
57374: POP
57375: POP
// if not tmp then
57376: LD_VAR 0 5
57380: NOT
57381: IFFALSE 57385
// exit ;
57383: GO 57405
// result := SortListByListDesc ( units , tmp ) ;
57385: LD_ADDR_VAR 0 3
57389: PUSH
57390: LD_VAR 0 1
57394: PPUSH
57395: LD_VAR 0 5
57399: PPUSH
57400: CALL_OW 77
57404: ST_TO_ADDR
// end ;
57405: LD_VAR 0 3
57409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57410: LD_INT 0
57412: PPUSH
57413: PPUSH
57414: PPUSH
// result := false ;
57415: LD_ADDR_VAR 0 3
57419: PUSH
57420: LD_INT 0
57422: ST_TO_ADDR
// if not building then
57423: LD_VAR 0 2
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57570
// x := GetX ( building ) ;
57432: LD_ADDR_VAR 0 4
57436: PUSH
57437: LD_VAR 0 2
57441: PPUSH
57442: CALL_OW 250
57446: ST_TO_ADDR
// y := GetY ( building ) ;
57447: LD_ADDR_VAR 0 5
57451: PUSH
57452: LD_VAR 0 2
57456: PPUSH
57457: CALL_OW 251
57461: ST_TO_ADDR
// if not x or not y then
57462: LD_VAR 0 4
57466: NOT
57467: PUSH
57468: LD_VAR 0 5
57472: NOT
57473: OR
57474: IFFALSE 57478
// exit ;
57476: GO 57570
// if GetTaskList ( unit ) then
57478: LD_VAR 0 1
57482: PPUSH
57483: CALL_OW 437
57487: IFFALSE 57570
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57489: LD_STRING e
57491: PUSH
57492: LD_VAR 0 1
57496: PPUSH
57497: CALL_OW 437
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: EQUAL
57510: PUSH
57511: LD_VAR 0 4
57515: PUSH
57516: LD_VAR 0 1
57520: PPUSH
57521: CALL_OW 437
57525: PUSH
57526: LD_INT 1
57528: ARRAY
57529: PUSH
57530: LD_INT 2
57532: ARRAY
57533: EQUAL
57534: AND
57535: PUSH
57536: LD_VAR 0 5
57540: PUSH
57541: LD_VAR 0 1
57545: PPUSH
57546: CALL_OW 437
57550: PUSH
57551: LD_INT 1
57553: ARRAY
57554: PUSH
57555: LD_INT 3
57557: ARRAY
57558: EQUAL
57559: AND
57560: IFFALSE 57570
// result := true end ;
57562: LD_ADDR_VAR 0 3
57566: PUSH
57567: LD_INT 1
57569: ST_TO_ADDR
// end ;
57570: LD_VAR 0 3
57574: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57575: LD_INT 0
57577: PPUSH
// result := false ;
57578: LD_ADDR_VAR 0 4
57582: PUSH
57583: LD_INT 0
57585: ST_TO_ADDR
// if GetTaskList ( unit ) then
57586: LD_VAR 0 1
57590: PPUSH
57591: CALL_OW 437
57595: IFFALSE 57678
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57597: LD_STRING M
57599: PUSH
57600: LD_VAR 0 1
57604: PPUSH
57605: CALL_OW 437
57609: PUSH
57610: LD_INT 1
57612: ARRAY
57613: PUSH
57614: LD_INT 1
57616: ARRAY
57617: EQUAL
57618: PUSH
57619: LD_VAR 0 2
57623: PUSH
57624: LD_VAR 0 1
57628: PPUSH
57629: CALL_OW 437
57633: PUSH
57634: LD_INT 1
57636: ARRAY
57637: PUSH
57638: LD_INT 2
57640: ARRAY
57641: EQUAL
57642: AND
57643: PUSH
57644: LD_VAR 0 3
57648: PUSH
57649: LD_VAR 0 1
57653: PPUSH
57654: CALL_OW 437
57658: PUSH
57659: LD_INT 1
57661: ARRAY
57662: PUSH
57663: LD_INT 3
57665: ARRAY
57666: EQUAL
57667: AND
57668: IFFALSE 57678
// result := true ;
57670: LD_ADDR_VAR 0 4
57674: PUSH
57675: LD_INT 1
57677: ST_TO_ADDR
// end ; end ;
57678: LD_VAR 0 4
57682: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57683: LD_INT 0
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
// if not unit or not area then
57689: LD_VAR 0 1
57693: NOT
57694: PUSH
57695: LD_VAR 0 2
57699: NOT
57700: OR
57701: IFFALSE 57705
// exit ;
57703: GO 57881
// tmp := AreaToList ( area , i ) ;
57705: LD_ADDR_VAR 0 6
57709: PUSH
57710: LD_VAR 0 2
57714: PPUSH
57715: LD_VAR 0 5
57719: PPUSH
57720: CALL_OW 517
57724: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57725: LD_ADDR_VAR 0 5
57729: PUSH
57730: DOUBLE
57731: LD_INT 1
57733: DEC
57734: ST_TO_ADDR
57735: LD_VAR 0 6
57739: PUSH
57740: LD_INT 1
57742: ARRAY
57743: PUSH
57744: FOR_TO
57745: IFFALSE 57879
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57747: LD_ADDR_VAR 0 7
57751: PUSH
57752: LD_VAR 0 6
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: LD_VAR 0 5
57765: ARRAY
57766: PUSH
57767: LD_VAR 0 6
57771: PUSH
57772: LD_INT 2
57774: ARRAY
57775: PUSH
57776: LD_VAR 0 5
57780: ARRAY
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57786: LD_INT 92
57788: PUSH
57789: LD_VAR 0 7
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: PUSH
57798: LD_VAR 0 7
57802: PUSH
57803: LD_INT 2
57805: ARRAY
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: PPUSH
57816: CALL_OW 69
57820: PUSH
57821: LD_INT 0
57823: EQUAL
57824: IFFALSE 57877
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57826: LD_VAR 0 1
57830: PPUSH
57831: LD_VAR 0 7
57835: PUSH
57836: LD_INT 1
57838: ARRAY
57839: PPUSH
57840: LD_VAR 0 7
57844: PUSH
57845: LD_INT 2
57847: ARRAY
57848: PPUSH
57849: LD_VAR 0 3
57853: PPUSH
57854: CALL_OW 48
// result := IsPlaced ( unit ) ;
57858: LD_ADDR_VAR 0 4
57862: PUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 305
57872: ST_TO_ADDR
// exit ;
57873: POP
57874: POP
57875: GO 57881
// end ; end ;
57877: GO 57744
57879: POP
57880: POP
// end ;
57881: LD_VAR 0 4
57885: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57886: LD_INT 0
57888: PPUSH
57889: PPUSH
57890: PPUSH
// if not side or side > 8 then
57891: LD_VAR 0 1
57895: NOT
57896: PUSH
57897: LD_VAR 0 1
57901: PUSH
57902: LD_INT 8
57904: GREATER
57905: OR
57906: IFFALSE 57910
// exit ;
57908: GO 58097
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57910: LD_ADDR_VAR 0 4
57914: PUSH
57915: LD_INT 22
57917: PUSH
57918: LD_VAR 0 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 21
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PPUSH
57941: CALL_OW 69
57945: ST_TO_ADDR
// if not tmp then
57946: LD_VAR 0 4
57950: NOT
57951: IFFALSE 57955
// exit ;
57953: GO 58097
// enable_addtolog := true ;
57955: LD_ADDR_OWVAR 81
57959: PUSH
57960: LD_INT 1
57962: ST_TO_ADDR
// AddToLog ( [ ) ;
57963: LD_STRING [
57965: PPUSH
57966: CALL_OW 561
// for i in tmp do
57970: LD_ADDR_VAR 0 3
57974: PUSH
57975: LD_VAR 0 4
57979: PUSH
57980: FOR_IN
57981: IFFALSE 58088
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57983: LD_STRING [
57985: PUSH
57986: LD_VAR 0 3
57990: PPUSH
57991: CALL_OW 266
57995: STR
57996: PUSH
57997: LD_STRING , 
57999: STR
58000: PUSH
58001: LD_VAR 0 3
58005: PPUSH
58006: CALL_OW 250
58010: STR
58011: PUSH
58012: LD_STRING , 
58014: STR
58015: PUSH
58016: LD_VAR 0 3
58020: PPUSH
58021: CALL_OW 251
58025: STR
58026: PUSH
58027: LD_STRING , 
58029: STR
58030: PUSH
58031: LD_VAR 0 3
58035: PPUSH
58036: CALL_OW 254
58040: STR
58041: PUSH
58042: LD_STRING , 
58044: STR
58045: PUSH
58046: LD_VAR 0 3
58050: PPUSH
58051: LD_INT 1
58053: PPUSH
58054: CALL_OW 268
58058: STR
58059: PUSH
58060: LD_STRING , 
58062: STR
58063: PUSH
58064: LD_VAR 0 3
58068: PPUSH
58069: LD_INT 2
58071: PPUSH
58072: CALL_OW 268
58076: STR
58077: PUSH
58078: LD_STRING ],
58080: STR
58081: PPUSH
58082: CALL_OW 561
// end ;
58086: GO 57980
58088: POP
58089: POP
// AddToLog ( ]; ) ;
58090: LD_STRING ];
58092: PPUSH
58093: CALL_OW 561
// end ;
58097: LD_VAR 0 2
58101: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58102: LD_INT 0
58104: PPUSH
58105: PPUSH
58106: PPUSH
58107: PPUSH
58108: PPUSH
// if not area or not rate or not max then
58109: LD_VAR 0 1
58113: NOT
58114: PUSH
58115: LD_VAR 0 2
58119: NOT
58120: OR
58121: PUSH
58122: LD_VAR 0 4
58126: NOT
58127: OR
58128: IFFALSE 58132
// exit ;
58130: GO 58321
// while 1 do
58132: LD_INT 1
58134: IFFALSE 58321
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58136: LD_ADDR_VAR 0 9
58140: PUSH
58141: LD_VAR 0 1
58145: PPUSH
58146: LD_INT 1
58148: PPUSH
58149: CALL_OW 287
58153: PUSH
58154: LD_INT 10
58156: MUL
58157: ST_TO_ADDR
// r := rate / 10 ;
58158: LD_ADDR_VAR 0 7
58162: PUSH
58163: LD_VAR 0 2
58167: PUSH
58168: LD_INT 10
58170: DIVREAL
58171: ST_TO_ADDR
// time := 1 1$00 ;
58172: LD_ADDR_VAR 0 8
58176: PUSH
58177: LD_INT 2100
58179: ST_TO_ADDR
// if amount < min then
58180: LD_VAR 0 9
58184: PUSH
58185: LD_VAR 0 3
58189: LESS
58190: IFFALSE 58208
// r := r * 2 else
58192: LD_ADDR_VAR 0 7
58196: PUSH
58197: LD_VAR 0 7
58201: PUSH
58202: LD_INT 2
58204: MUL
58205: ST_TO_ADDR
58206: GO 58234
// if amount > max then
58208: LD_VAR 0 9
58212: PUSH
58213: LD_VAR 0 4
58217: GREATER
58218: IFFALSE 58234
// r := r / 2 ;
58220: LD_ADDR_VAR 0 7
58224: PUSH
58225: LD_VAR 0 7
58229: PUSH
58230: LD_INT 2
58232: DIVREAL
58233: ST_TO_ADDR
// time := time / r ;
58234: LD_ADDR_VAR 0 8
58238: PUSH
58239: LD_VAR 0 8
58243: PUSH
58244: LD_VAR 0 7
58248: DIVREAL
58249: ST_TO_ADDR
// if time < 0 then
58250: LD_VAR 0 8
58254: PUSH
58255: LD_INT 0
58257: LESS
58258: IFFALSE 58275
// time := time * - 1 ;
58260: LD_ADDR_VAR 0 8
58264: PUSH
58265: LD_VAR 0 8
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: MUL
58274: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58275: LD_VAR 0 8
58279: PUSH
58280: LD_INT 35
58282: PPUSH
58283: LD_INT 875
58285: PPUSH
58286: CALL_OW 12
58290: PLUS
58291: PPUSH
58292: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58296: LD_INT 1
58298: PPUSH
58299: LD_INT 5
58301: PPUSH
58302: CALL_OW 12
58306: PPUSH
58307: LD_VAR 0 1
58311: PPUSH
58312: LD_INT 1
58314: PPUSH
58315: CALL_OW 55
// end ;
58319: GO 58132
// end ;
58321: LD_VAR 0 5
58325: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58326: LD_INT 0
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
// if not turrets or not factories then
58336: LD_VAR 0 1
58340: NOT
58341: PUSH
58342: LD_VAR 0 2
58346: NOT
58347: OR
58348: IFFALSE 58352
// exit ;
58350: GO 58659
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58352: LD_ADDR_VAR 0 10
58356: PUSH
58357: LD_INT 5
58359: PUSH
58360: LD_INT 6
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 24
58394: PUSH
58395: LD_INT 25
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 23
58404: PUSH
58405: LD_INT 27
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 42
58418: PUSH
58419: LD_INT 43
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 44
58428: PUSH
58429: LD_INT 46
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 45
58438: PUSH
58439: LD_INT 47
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// result := [ ] ;
58456: LD_ADDR_VAR 0 3
58460: PUSH
58461: EMPTY
58462: ST_TO_ADDR
// for i in turrets do
58463: LD_ADDR_VAR 0 4
58467: PUSH
58468: LD_VAR 0 1
58472: PUSH
58473: FOR_IN
58474: IFFALSE 58657
// begin nat := GetNation ( i ) ;
58476: LD_ADDR_VAR 0 7
58480: PUSH
58481: LD_VAR 0 4
58485: PPUSH
58486: CALL_OW 248
58490: ST_TO_ADDR
// weapon := 0 ;
58491: LD_ADDR_VAR 0 8
58495: PUSH
58496: LD_INT 0
58498: ST_TO_ADDR
// if not nat then
58499: LD_VAR 0 7
58503: NOT
58504: IFFALSE 58508
// continue ;
58506: GO 58473
// for j in list [ nat ] do
58508: LD_ADDR_VAR 0 5
58512: PUSH
58513: LD_VAR 0 10
58517: PUSH
58518: LD_VAR 0 7
58522: ARRAY
58523: PUSH
58524: FOR_IN
58525: IFFALSE 58566
// if GetBWeapon ( i ) = j [ 1 ] then
58527: LD_VAR 0 4
58531: PPUSH
58532: CALL_OW 269
58536: PUSH
58537: LD_VAR 0 5
58541: PUSH
58542: LD_INT 1
58544: ARRAY
58545: EQUAL
58546: IFFALSE 58564
// begin weapon := j [ 2 ] ;
58548: LD_ADDR_VAR 0 8
58552: PUSH
58553: LD_VAR 0 5
58557: PUSH
58558: LD_INT 2
58560: ARRAY
58561: ST_TO_ADDR
// break ;
58562: GO 58566
// end ;
58564: GO 58524
58566: POP
58567: POP
// if not weapon then
58568: LD_VAR 0 8
58572: NOT
58573: IFFALSE 58577
// continue ;
58575: GO 58473
// for k in factories do
58577: LD_ADDR_VAR 0 6
58581: PUSH
58582: LD_VAR 0 2
58586: PUSH
58587: FOR_IN
58588: IFFALSE 58653
// begin weapons := AvailableWeaponList ( k ) ;
58590: LD_ADDR_VAR 0 9
58594: PUSH
58595: LD_VAR 0 6
58599: PPUSH
58600: CALL_OW 478
58604: ST_TO_ADDR
// if not weapons then
58605: LD_VAR 0 9
58609: NOT
58610: IFFALSE 58614
// continue ;
58612: GO 58587
// if weapon in weapons then
58614: LD_VAR 0 8
58618: PUSH
58619: LD_VAR 0 9
58623: IN
58624: IFFALSE 58651
// begin result := [ i , weapon ] ;
58626: LD_ADDR_VAR 0 3
58630: PUSH
58631: LD_VAR 0 4
58635: PUSH
58636: LD_VAR 0 8
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// exit ;
58645: POP
58646: POP
58647: POP
58648: POP
58649: GO 58659
// end ; end ;
58651: GO 58587
58653: POP
58654: POP
// end ;
58655: GO 58473
58657: POP
58658: POP
// end ;
58659: LD_VAR 0 3
58663: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58664: LD_INT 0
58666: PPUSH
// if not side or side > 8 then
58667: LD_VAR 0 3
58671: NOT
58672: PUSH
58673: LD_VAR 0 3
58677: PUSH
58678: LD_INT 8
58680: GREATER
58681: OR
58682: IFFALSE 58686
// exit ;
58684: GO 58745
// if not range then
58686: LD_VAR 0 4
58690: NOT
58691: IFFALSE 58702
// range := - 12 ;
58693: LD_ADDR_VAR 0 4
58697: PUSH
58698: LD_INT 12
58700: NEG
58701: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58702: LD_VAR 0 1
58706: PPUSH
58707: LD_VAR 0 2
58711: PPUSH
58712: LD_VAR 0 3
58716: PPUSH
58717: LD_VAR 0 4
58721: PPUSH
58722: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58726: LD_VAR 0 1
58730: PPUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: LD_VAR 0 3
58740: PPUSH
58741: CALL_OW 331
// end ;
58745: LD_VAR 0 5
58749: RET
// export function Video ( mode ) ; begin
58750: LD_INT 0
58752: PPUSH
// ingame_video = mode ;
58753: LD_ADDR_OWVAR 52
58757: PUSH
58758: LD_VAR 0 1
58762: ST_TO_ADDR
// interface_hidden = mode ;
58763: LD_ADDR_OWVAR 54
58767: PUSH
58768: LD_VAR 0 1
58772: ST_TO_ADDR
// end ;
58773: LD_VAR 0 2
58777: RET
// export function Join ( array , element ) ; begin
58778: LD_INT 0
58780: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58781: LD_ADDR_VAR 0 3
58785: PUSH
58786: LD_VAR 0 1
58790: PPUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_INT 1
58798: PLUS
58799: PPUSH
58800: LD_VAR 0 2
58804: PPUSH
58805: CALL_OW 1
58809: ST_TO_ADDR
// end ;
58810: LD_VAR 0 3
58814: RET
// export function JoinUnion ( array , element ) ; begin
58815: LD_INT 0
58817: PPUSH
// result := array union element ;
58818: LD_ADDR_VAR 0 3
58822: PUSH
58823: LD_VAR 0 1
58827: PUSH
58828: LD_VAR 0 2
58832: UNION
58833: ST_TO_ADDR
// end ;
58834: LD_VAR 0 3
58838: RET
// export function GetBehemoths ( side ) ; begin
58839: LD_INT 0
58841: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58842: LD_ADDR_VAR 0 2
58846: PUSH
58847: LD_INT 22
58849: PUSH
58850: LD_VAR 0 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 31
58861: PUSH
58862: LD_INT 25
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PPUSH
58873: CALL_OW 69
58877: ST_TO_ADDR
// end ;
58878: LD_VAR 0 2
58882: RET
// export function Shuffle ( array ) ; var i , index ; begin
58883: LD_INT 0
58885: PPUSH
58886: PPUSH
58887: PPUSH
// result := [ ] ;
58888: LD_ADDR_VAR 0 2
58892: PUSH
58893: EMPTY
58894: ST_TO_ADDR
// if not array then
58895: LD_VAR 0 1
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 59003
// Randomize ;
58904: CALL_OW 10
// for i = array downto 1 do
58908: LD_ADDR_VAR 0 3
58912: PUSH
58913: DOUBLE
58914: LD_VAR 0 1
58918: INC
58919: ST_TO_ADDR
58920: LD_INT 1
58922: PUSH
58923: FOR_DOWNTO
58924: IFFALSE 59001
// begin index := rand ( 1 , array ) ;
58926: LD_ADDR_VAR 0 4
58930: PUSH
58931: LD_INT 1
58933: PPUSH
58934: LD_VAR 0 1
58938: PPUSH
58939: CALL_OW 12
58943: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58944: LD_ADDR_VAR 0 2
58948: PUSH
58949: LD_VAR 0 2
58953: PPUSH
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 1
58961: PLUS
58962: PPUSH
58963: LD_VAR 0 1
58967: PUSH
58968: LD_VAR 0 4
58972: ARRAY
58973: PPUSH
58974: CALL_OW 2
58978: ST_TO_ADDR
// array := Delete ( array , index ) ;
58979: LD_ADDR_VAR 0 1
58983: PUSH
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_VAR 0 4
58993: PPUSH
58994: CALL_OW 3
58998: ST_TO_ADDR
// end ;
58999: GO 58923
59001: POP
59002: POP
// end ;
59003: LD_VAR 0 2
59007: RET
// export function GetBaseMaterials ( base ) ; begin
59008: LD_INT 0
59010: PPUSH
// result := [ 0 , 0 , 0 ] ;
59011: LD_ADDR_VAR 0 2
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// if not base then
59030: LD_VAR 0 1
59034: NOT
59035: IFFALSE 59039
// exit ;
59037: GO 59088
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59039: LD_ADDR_VAR 0 2
59043: PUSH
59044: LD_VAR 0 1
59048: PPUSH
59049: LD_INT 1
59051: PPUSH
59052: CALL_OW 275
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: LD_INT 2
59064: PPUSH
59065: CALL_OW 275
59069: PUSH
59070: LD_VAR 0 1
59074: PPUSH
59075: LD_INT 3
59077: PPUSH
59078: CALL_OW 275
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// end ;
59088: LD_VAR 0 2
59092: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59093: LD_INT 0
59095: PPUSH
59096: PPUSH
// result := array ;
59097: LD_ADDR_VAR 0 3
59101: PUSH
59102: LD_VAR 0 1
59106: ST_TO_ADDR
// if size >= result then
59107: LD_VAR 0 2
59111: PUSH
59112: LD_VAR 0 3
59116: GREATEREQUAL
59117: IFFALSE 59121
// exit ;
59119: GO 59171
// if size then
59121: LD_VAR 0 2
59125: IFFALSE 59171
// for i := array downto size do
59127: LD_ADDR_VAR 0 4
59131: PUSH
59132: DOUBLE
59133: LD_VAR 0 1
59137: INC
59138: ST_TO_ADDR
59139: LD_VAR 0 2
59143: PUSH
59144: FOR_DOWNTO
59145: IFFALSE 59169
// result := Delete ( result , result ) ;
59147: LD_ADDR_VAR 0 3
59151: PUSH
59152: LD_VAR 0 3
59156: PPUSH
59157: LD_VAR 0 3
59161: PPUSH
59162: CALL_OW 3
59166: ST_TO_ADDR
59167: GO 59144
59169: POP
59170: POP
// end ;
59171: LD_VAR 0 3
59175: RET
// export function ComExit ( unit ) ; var tmp ; begin
59176: LD_INT 0
59178: PPUSH
59179: PPUSH
// if not IsInUnit ( unit ) then
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 310
59189: NOT
59190: IFFALSE 59194
// exit ;
59192: GO 59254
// tmp := IsInUnit ( unit ) ;
59194: LD_ADDR_VAR 0 3
59198: PUSH
59199: LD_VAR 0 1
59203: PPUSH
59204: CALL_OW 310
59208: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59209: LD_VAR 0 3
59213: PPUSH
59214: CALL_OW 247
59218: PUSH
59219: LD_INT 2
59221: EQUAL
59222: IFFALSE 59235
// ComExitVehicle ( unit ) else
59224: LD_VAR 0 1
59228: PPUSH
59229: CALL_OW 121
59233: GO 59244
// ComExitBuilding ( unit ) ;
59235: LD_VAR 0 1
59239: PPUSH
59240: CALL_OW 122
// result := tmp ;
59244: LD_ADDR_VAR 0 2
59248: PUSH
59249: LD_VAR 0 3
59253: ST_TO_ADDR
// end ;
59254: LD_VAR 0 2
59258: RET
// export function ComExitAll ( units ) ; var i ; begin
59259: LD_INT 0
59261: PPUSH
59262: PPUSH
// if not units then
59263: LD_VAR 0 1
59267: NOT
59268: IFFALSE 59272
// exit ;
59270: GO 59298
// for i in units do
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: LD_VAR 0 1
59281: PUSH
59282: FOR_IN
59283: IFFALSE 59296
// ComExit ( i ) ;
59285: LD_VAR 0 3
59289: PPUSH
59290: CALL 59176 0 1
59294: GO 59282
59296: POP
59297: POP
// end ;
59298: LD_VAR 0 2
59302: RET
// export function ResetHc ; begin
59303: LD_INT 0
59305: PPUSH
// InitHc ;
59306: CALL_OW 19
// hc_importance := 0 ;
59310: LD_ADDR_OWVAR 32
59314: PUSH
59315: LD_INT 0
59317: ST_TO_ADDR
// end ;
59318: LD_VAR 0 1
59322: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59323: LD_INT 0
59325: PPUSH
59326: PPUSH
59327: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59328: LD_ADDR_VAR 0 6
59332: PUSH
59333: LD_VAR 0 1
59337: PUSH
59338: LD_VAR 0 3
59342: PLUS
59343: PUSH
59344: LD_INT 2
59346: DIV
59347: ST_TO_ADDR
// if _x < 0 then
59348: LD_VAR 0 6
59352: PUSH
59353: LD_INT 0
59355: LESS
59356: IFFALSE 59373
// _x := _x * - 1 ;
59358: LD_ADDR_VAR 0 6
59362: PUSH
59363: LD_VAR 0 6
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: MUL
59372: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59373: LD_ADDR_VAR 0 7
59377: PUSH
59378: LD_VAR 0 2
59382: PUSH
59383: LD_VAR 0 4
59387: PLUS
59388: PUSH
59389: LD_INT 2
59391: DIV
59392: ST_TO_ADDR
// if _y < 0 then
59393: LD_VAR 0 7
59397: PUSH
59398: LD_INT 0
59400: LESS
59401: IFFALSE 59418
// _y := _y * - 1 ;
59403: LD_ADDR_VAR 0 7
59407: PUSH
59408: LD_VAR 0 7
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: MUL
59417: ST_TO_ADDR
// result := [ _x , _y ] ;
59418: LD_ADDR_VAR 0 5
59422: PUSH
59423: LD_VAR 0 6
59427: PUSH
59428: LD_VAR 0 7
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// end ;
59437: LD_VAR 0 5
59441: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59442: LD_INT 0
59444: PPUSH
59445: PPUSH
59446: PPUSH
59447: PPUSH
// task := GetTaskList ( unit ) ;
59448: LD_ADDR_VAR 0 7
59452: PUSH
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL_OW 437
59462: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59463: LD_VAR 0 7
59467: NOT
59468: PUSH
59469: LD_VAR 0 1
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: CALL_OW 308
59483: NOT
59484: AND
59485: IFFALSE 59489
// exit ;
59487: GO 59607
// if IsInArea ( unit , area ) then
59489: LD_VAR 0 1
59493: PPUSH
59494: LD_VAR 0 2
59498: PPUSH
59499: CALL_OW 308
59503: IFFALSE 59521
// begin ComMoveToArea ( unit , goAway ) ;
59505: LD_VAR 0 1
59509: PPUSH
59510: LD_VAR 0 3
59514: PPUSH
59515: CALL_OW 113
// exit ;
59519: GO 59607
// end ; if task [ 1 ] [ 1 ] <> M then
59521: LD_VAR 0 7
59525: PUSH
59526: LD_INT 1
59528: ARRAY
59529: PUSH
59530: LD_INT 1
59532: ARRAY
59533: PUSH
59534: LD_STRING M
59536: NONEQUAL
59537: IFFALSE 59541
// exit ;
59539: GO 59607
// x := task [ 1 ] [ 2 ] ;
59541: LD_ADDR_VAR 0 5
59545: PUSH
59546: LD_VAR 0 7
59550: PUSH
59551: LD_INT 1
59553: ARRAY
59554: PUSH
59555: LD_INT 2
59557: ARRAY
59558: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59559: LD_ADDR_VAR 0 6
59563: PUSH
59564: LD_VAR 0 7
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PUSH
59573: LD_INT 3
59575: ARRAY
59576: ST_TO_ADDR
// if InArea ( x , y , area ) then
59577: LD_VAR 0 5
59581: PPUSH
59582: LD_VAR 0 6
59586: PPUSH
59587: LD_VAR 0 2
59591: PPUSH
59592: CALL_OW 309
59596: IFFALSE 59607
// ComStop ( unit ) ;
59598: LD_VAR 0 1
59602: PPUSH
59603: CALL_OW 141
// end ;
59607: LD_VAR 0 4
59611: RET
// export function Abs ( value ) ; begin
59612: LD_INT 0
59614: PPUSH
// result := value ;
59615: LD_ADDR_VAR 0 2
59619: PUSH
59620: LD_VAR 0 1
59624: ST_TO_ADDR
// if value < 0 then
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 0
59632: LESS
59633: IFFALSE 59650
// result := value * - 1 ;
59635: LD_ADDR_VAR 0 2
59639: PUSH
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: MUL
59649: ST_TO_ADDR
// end ;
59650: LD_VAR 0 2
59654: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59655: LD_INT 0
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not unit or not building then
59665: LD_VAR 0 1
59669: NOT
59670: PUSH
59671: LD_VAR 0 2
59675: NOT
59676: OR
59677: IFFALSE 59681
// exit ;
59679: GO 59907
// x := GetX ( building ) ;
59681: LD_ADDR_VAR 0 4
59685: PUSH
59686: LD_VAR 0 2
59690: PPUSH
59691: CALL_OW 250
59695: ST_TO_ADDR
// y := GetY ( building ) ;
59696: LD_ADDR_VAR 0 6
59700: PUSH
59701: LD_VAR 0 2
59705: PPUSH
59706: CALL_OW 251
59710: ST_TO_ADDR
// d := GetDir ( building ) ;
59711: LD_ADDR_VAR 0 8
59715: PUSH
59716: LD_VAR 0 2
59720: PPUSH
59721: CALL_OW 254
59725: ST_TO_ADDR
// r := 4 ;
59726: LD_ADDR_VAR 0 9
59730: PUSH
59731: LD_INT 4
59733: ST_TO_ADDR
// for i := 1 to 5 do
59734: LD_ADDR_VAR 0 10
59738: PUSH
59739: DOUBLE
59740: LD_INT 1
59742: DEC
59743: ST_TO_ADDR
59744: LD_INT 5
59746: PUSH
59747: FOR_TO
59748: IFFALSE 59905
// begin _x := ShiftX ( x , d , r + i ) ;
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: LD_VAR 0 4
59759: PPUSH
59760: LD_VAR 0 8
59764: PPUSH
59765: LD_VAR 0 9
59769: PUSH
59770: LD_VAR 0 10
59774: PLUS
59775: PPUSH
59776: CALL_OW 272
59780: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59781: LD_ADDR_VAR 0 7
59785: PUSH
59786: LD_VAR 0 6
59790: PPUSH
59791: LD_VAR 0 8
59795: PPUSH
59796: LD_VAR 0 9
59800: PUSH
59801: LD_VAR 0 10
59805: PLUS
59806: PPUSH
59807: CALL_OW 273
59811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59812: LD_VAR 0 5
59816: PPUSH
59817: LD_VAR 0 7
59821: PPUSH
59822: CALL_OW 488
59826: PUSH
59827: LD_VAR 0 5
59831: PPUSH
59832: LD_VAR 0 7
59836: PPUSH
59837: CALL_OW 428
59841: PPUSH
59842: CALL_OW 247
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: IN
59857: NOT
59858: AND
59859: IFFALSE 59903
// begin ComMoveXY ( unit , _x , _y ) ;
59861: LD_VAR 0 1
59865: PPUSH
59866: LD_VAR 0 5
59870: PPUSH
59871: LD_VAR 0 7
59875: PPUSH
59876: CALL_OW 111
// result := [ _x , _y ] ;
59880: LD_ADDR_VAR 0 3
59884: PUSH
59885: LD_VAR 0 5
59889: PUSH
59890: LD_VAR 0 7
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// exit ;
59899: POP
59900: POP
59901: GO 59907
// end ; end ;
59903: GO 59747
59905: POP
59906: POP
// end ;
59907: LD_VAR 0 3
59911: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59912: LD_INT 0
59914: PPUSH
59915: PPUSH
59916: PPUSH
// result := 0 ;
59917: LD_ADDR_VAR 0 3
59921: PUSH
59922: LD_INT 0
59924: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59925: LD_VAR 0 1
59929: PUSH
59930: LD_INT 0
59932: LESS
59933: PUSH
59934: LD_VAR 0 1
59938: PUSH
59939: LD_INT 8
59941: GREATER
59942: OR
59943: PUSH
59944: LD_VAR 0 2
59948: PUSH
59949: LD_INT 0
59951: LESS
59952: OR
59953: PUSH
59954: LD_VAR 0 2
59958: PUSH
59959: LD_INT 8
59961: GREATER
59962: OR
59963: IFFALSE 59967
// exit ;
59965: GO 60042
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59967: LD_ADDR_VAR 0 4
59971: PUSH
59972: LD_INT 22
59974: PUSH
59975: LD_VAR 0 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PPUSH
59984: CALL_OW 69
59988: PUSH
59989: FOR_IN
59990: IFFALSE 60040
// begin un := UnitShoot ( i ) ;
59992: LD_ADDR_VAR 0 5
59996: PUSH
59997: LD_VAR 0 4
60001: PPUSH
60002: CALL_OW 504
60006: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60007: LD_VAR 0 5
60011: PPUSH
60012: CALL_OW 255
60016: PUSH
60017: LD_VAR 0 1
60021: EQUAL
60022: IFFALSE 60038
// begin result := un ;
60024: LD_ADDR_VAR 0 3
60028: PUSH
60029: LD_VAR 0 5
60033: ST_TO_ADDR
// exit ;
60034: POP
60035: POP
60036: GO 60042
// end ; end ;
60038: GO 59989
60040: POP
60041: POP
// end ;
60042: LD_VAR 0 3
60046: RET
// export function GetCargoBay ( units ) ; begin
60047: LD_INT 0
60049: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60050: LD_ADDR_VAR 0 2
60054: PUSH
60055: LD_VAR 0 1
60059: PPUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 34
60065: PUSH
60066: LD_INT 12
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 34
60075: PUSH
60076: LD_INT 51
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 34
60085: PUSH
60086: LD_INT 32
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 34
60095: PUSH
60096: LD_INT 89
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: PPUSH
60110: CALL_OW 72
60114: ST_TO_ADDR
// end ;
60115: LD_VAR 0 2
60119: RET
// export function Negate ( value ) ; begin
60120: LD_INT 0
60122: PPUSH
// result := not value ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_VAR 0 1
60132: NOT
60133: ST_TO_ADDR
// end ;
60134: LD_VAR 0 2
60138: RET
// export function Inc ( value ) ; begin
60139: LD_INT 0
60141: PPUSH
// result := value + 1 ;
60142: LD_ADDR_VAR 0 2
60146: PUSH
60147: LD_VAR 0 1
60151: PUSH
60152: LD_INT 1
60154: PLUS
60155: ST_TO_ADDR
// end ;
60156: LD_VAR 0 2
60160: RET
// export function Dec ( value ) ; begin
60161: LD_INT 0
60163: PPUSH
// result := value - 1 ;
60164: LD_ADDR_VAR 0 2
60168: PUSH
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 1
60176: MINUS
60177: ST_TO_ADDR
// end ;
60178: LD_VAR 0 2
60182: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60183: LD_INT 0
60185: PPUSH
60186: PPUSH
60187: PPUSH
60188: PPUSH
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60193: LD_VAR 0 1
60197: PPUSH
60198: LD_VAR 0 2
60202: PPUSH
60203: CALL_OW 488
60207: NOT
60208: PUSH
60209: LD_VAR 0 3
60213: PPUSH
60214: LD_VAR 0 4
60218: PPUSH
60219: CALL_OW 488
60223: NOT
60224: OR
60225: IFFALSE 60238
// begin result := - 1 ;
60227: LD_ADDR_VAR 0 5
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: ST_TO_ADDR
// exit ;
60236: GO 60473
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60238: LD_ADDR_VAR 0 12
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: LD_VAR 0 2
60252: PPUSH
60253: LD_VAR 0 3
60257: PPUSH
60258: LD_VAR 0 4
60262: PPUSH
60263: CALL 59323 0 4
60267: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60268: LD_ADDR_VAR 0 11
60272: PUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: LD_VAR 0 2
60282: PPUSH
60283: LD_VAR 0 12
60287: PUSH
60288: LD_INT 1
60290: ARRAY
60291: PPUSH
60292: LD_VAR 0 12
60296: PUSH
60297: LD_INT 2
60299: ARRAY
60300: PPUSH
60301: CALL_OW 298
60305: ST_TO_ADDR
// distance := 9999 ;
60306: LD_ADDR_VAR 0 10
60310: PUSH
60311: LD_INT 9999
60313: ST_TO_ADDR
// for i := 0 to 5 do
60314: LD_ADDR_VAR 0 6
60318: PUSH
60319: DOUBLE
60320: LD_INT 0
60322: DEC
60323: ST_TO_ADDR
60324: LD_INT 5
60326: PUSH
60327: FOR_TO
60328: IFFALSE 60471
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60330: LD_ADDR_VAR 0 7
60334: PUSH
60335: LD_VAR 0 1
60339: PPUSH
60340: LD_VAR 0 6
60344: PPUSH
60345: LD_VAR 0 11
60349: PPUSH
60350: CALL_OW 272
60354: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60355: LD_ADDR_VAR 0 8
60359: PUSH
60360: LD_VAR 0 2
60364: PPUSH
60365: LD_VAR 0 6
60369: PPUSH
60370: LD_VAR 0 11
60374: PPUSH
60375: CALL_OW 273
60379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60380: LD_VAR 0 7
60384: PPUSH
60385: LD_VAR 0 8
60389: PPUSH
60390: CALL_OW 488
60394: NOT
60395: IFFALSE 60399
// continue ;
60397: GO 60327
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60399: LD_ADDR_VAR 0 9
60403: PUSH
60404: LD_VAR 0 12
60408: PUSH
60409: LD_INT 1
60411: ARRAY
60412: PPUSH
60413: LD_VAR 0 12
60417: PUSH
60418: LD_INT 2
60420: ARRAY
60421: PPUSH
60422: LD_VAR 0 7
60426: PPUSH
60427: LD_VAR 0 8
60431: PPUSH
60432: CALL_OW 298
60436: ST_TO_ADDR
// if tmp < distance then
60437: LD_VAR 0 9
60441: PUSH
60442: LD_VAR 0 10
60446: LESS
60447: IFFALSE 60469
// begin result := i ;
60449: LD_ADDR_VAR 0 5
60453: PUSH
60454: LD_VAR 0 6
60458: ST_TO_ADDR
// distance := tmp ;
60459: LD_ADDR_VAR 0 10
60463: PUSH
60464: LD_VAR 0 9
60468: ST_TO_ADDR
// end ; end ;
60469: GO 60327
60471: POP
60472: POP
// end ;
60473: LD_VAR 0 5
60477: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60478: LD_INT 0
60480: PPUSH
60481: PPUSH
// if not driver or not IsInUnit ( driver ) then
60482: LD_VAR 0 1
60486: NOT
60487: PUSH
60488: LD_VAR 0 1
60492: PPUSH
60493: CALL_OW 310
60497: NOT
60498: OR
60499: IFFALSE 60503
// exit ;
60501: GO 60593
// vehicle := IsInUnit ( driver ) ;
60503: LD_ADDR_VAR 0 3
60507: PUSH
60508: LD_VAR 0 1
60512: PPUSH
60513: CALL_OW 310
60517: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60518: LD_VAR 0 1
60522: PPUSH
60523: LD_STRING \
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: PUSH
60553: LD_STRING E
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_VAR 0 3
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PPUSH
60589: CALL_OW 446
// end ;
60593: LD_VAR 0 2
60597: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60598: LD_INT 0
60600: PPUSH
60601: PPUSH
// if not driver or not IsInUnit ( driver ) then
60602: LD_VAR 0 1
60606: NOT
60607: PUSH
60608: LD_VAR 0 1
60612: PPUSH
60613: CALL_OW 310
60617: NOT
60618: OR
60619: IFFALSE 60623
// exit ;
60621: GO 60713
// vehicle := IsInUnit ( driver ) ;
60623: LD_ADDR_VAR 0 3
60627: PUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: CALL_OW 310
60637: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60638: LD_VAR 0 1
60642: PPUSH
60643: LD_STRING \
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_STRING E
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_VAR 0 3
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PPUSH
60709: CALL_OW 447
// end ;
60713: LD_VAR 0 2
60717: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60718: LD_INT 0
60720: PPUSH
60721: PPUSH
60722: PPUSH
// tmp := [ ] ;
60723: LD_ADDR_VAR 0 5
60727: PUSH
60728: EMPTY
60729: ST_TO_ADDR
// for i in units do
60730: LD_ADDR_VAR 0 4
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: FOR_IN
60741: IFFALSE 60779
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60743: LD_ADDR_VAR 0 5
60747: PUSH
60748: LD_VAR 0 5
60752: PPUSH
60753: LD_VAR 0 5
60757: PUSH
60758: LD_INT 1
60760: PLUS
60761: PPUSH
60762: LD_VAR 0 4
60766: PPUSH
60767: CALL_OW 256
60771: PPUSH
60772: CALL_OW 2
60776: ST_TO_ADDR
60777: GO 60740
60779: POP
60780: POP
// if not tmp then
60781: LD_VAR 0 5
60785: NOT
60786: IFFALSE 60790
// exit ;
60788: GO 60838
// if asc then
60790: LD_VAR 0 2
60794: IFFALSE 60818
// result := SortListByListAsc ( units , tmp ) else
60796: LD_ADDR_VAR 0 3
60800: PUSH
60801: LD_VAR 0 1
60805: PPUSH
60806: LD_VAR 0 5
60810: PPUSH
60811: CALL_OW 76
60815: ST_TO_ADDR
60816: GO 60838
// result := SortListByListDesc ( units , tmp ) ;
60818: LD_ADDR_VAR 0 3
60822: PUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: LD_VAR 0 5
60832: PPUSH
60833: CALL_OW 77
60837: ST_TO_ADDR
// end ;
60838: LD_VAR 0 3
60842: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60843: LD_INT 0
60845: PPUSH
60846: PPUSH
// task := GetTaskList ( mech ) ;
60847: LD_ADDR_VAR 0 4
60851: PUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 437
60861: ST_TO_ADDR
// if not task then
60862: LD_VAR 0 4
60866: NOT
60867: IFFALSE 60871
// exit ;
60869: GO 60913
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60871: LD_ADDR_VAR 0 3
60875: PUSH
60876: LD_VAR 0 4
60880: PUSH
60881: LD_INT 1
60883: ARRAY
60884: PUSH
60885: LD_INT 1
60887: ARRAY
60888: PUSH
60889: LD_STRING r
60891: EQUAL
60892: PUSH
60893: LD_VAR 0 4
60897: PUSH
60898: LD_INT 1
60900: ARRAY
60901: PUSH
60902: LD_INT 4
60904: ARRAY
60905: PUSH
60906: LD_VAR 0 2
60910: EQUAL
60911: AND
60912: ST_TO_ADDR
// end ;
60913: LD_VAR 0 3
60917: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60918: LD_INT 0
60920: PPUSH
// SetDir ( unit , d ) ;
60921: LD_VAR 0 1
60925: PPUSH
60926: LD_VAR 0 4
60930: PPUSH
60931: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60935: LD_VAR 0 1
60939: PPUSH
60940: LD_VAR 0 2
60944: PPUSH
60945: LD_VAR 0 3
60949: PPUSH
60950: LD_VAR 0 5
60954: PPUSH
60955: CALL_OW 48
// end ;
60959: LD_VAR 0 6
60963: RET
// export function ToNaturalNumber ( number ) ; begin
60964: LD_INT 0
60966: PPUSH
// result := number div 1 ;
60967: LD_ADDR_VAR 0 2
60971: PUSH
60972: LD_VAR 0 1
60976: PUSH
60977: LD_INT 1
60979: DIV
60980: ST_TO_ADDR
// if number < 0 then
60981: LD_VAR 0 1
60985: PUSH
60986: LD_INT 0
60988: LESS
60989: IFFALSE 60999
// result := 0 ;
60991: LD_ADDR_VAR 0 2
60995: PUSH
60996: LD_INT 0
60998: ST_TO_ADDR
// end ;
60999: LD_VAR 0 2
61003: RET
// export function SortByClass ( units , class ) ; var un ; begin
61004: LD_INT 0
61006: PPUSH
61007: PPUSH
// if not units or not class then
61008: LD_VAR 0 1
61012: NOT
61013: PUSH
61014: LD_VAR 0 2
61018: NOT
61019: OR
61020: IFFALSE 61024
// exit ;
61022: GO 61119
// result := [ ] ;
61024: LD_ADDR_VAR 0 3
61028: PUSH
61029: EMPTY
61030: ST_TO_ADDR
// for un in units do
61031: LD_ADDR_VAR 0 4
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: FOR_IN
61042: IFFALSE 61117
// if GetClass ( un ) = class then
61044: LD_VAR 0 4
61048: PPUSH
61049: CALL_OW 257
61053: PUSH
61054: LD_VAR 0 2
61058: EQUAL
61059: IFFALSE 61086
// result := Insert ( result , 1 , un ) else
61061: LD_ADDR_VAR 0 3
61065: PUSH
61066: LD_VAR 0 3
61070: PPUSH
61071: LD_INT 1
61073: PPUSH
61074: LD_VAR 0 4
61078: PPUSH
61079: CALL_OW 2
61083: ST_TO_ADDR
61084: GO 61115
// result := Replace ( result , result + 1 , un ) ;
61086: LD_ADDR_VAR 0 3
61090: PUSH
61091: LD_VAR 0 3
61095: PPUSH
61096: LD_VAR 0 3
61100: PUSH
61101: LD_INT 1
61103: PLUS
61104: PPUSH
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL_OW 1
61114: ST_TO_ADDR
61115: GO 61041
61117: POP
61118: POP
// end ;
61119: LD_VAR 0 3
61123: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61124: LD_INT 0
61126: PPUSH
61127: PPUSH
61128: PPUSH
61129: PPUSH
61130: PPUSH
61131: PPUSH
61132: PPUSH
// result := [ ] ;
61133: LD_ADDR_VAR 0 4
61137: PUSH
61138: EMPTY
61139: ST_TO_ADDR
// if x - r < 0 then
61140: LD_VAR 0 1
61144: PUSH
61145: LD_VAR 0 3
61149: MINUS
61150: PUSH
61151: LD_INT 0
61153: LESS
61154: IFFALSE 61166
// min_x := 0 else
61156: LD_ADDR_VAR 0 8
61160: PUSH
61161: LD_INT 0
61163: ST_TO_ADDR
61164: GO 61182
// min_x := x - r ;
61166: LD_ADDR_VAR 0 8
61170: PUSH
61171: LD_VAR 0 1
61175: PUSH
61176: LD_VAR 0 3
61180: MINUS
61181: ST_TO_ADDR
// if y - r < 0 then
61182: LD_VAR 0 2
61186: PUSH
61187: LD_VAR 0 3
61191: MINUS
61192: PUSH
61193: LD_INT 0
61195: LESS
61196: IFFALSE 61208
// min_y := 0 else
61198: LD_ADDR_VAR 0 7
61202: PUSH
61203: LD_INT 0
61205: ST_TO_ADDR
61206: GO 61224
// min_y := y - r ;
61208: LD_ADDR_VAR 0 7
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_VAR 0 3
61222: MINUS
61223: ST_TO_ADDR
// max_x := x + r ;
61224: LD_ADDR_VAR 0 9
61228: PUSH
61229: LD_VAR 0 1
61233: PUSH
61234: LD_VAR 0 3
61238: PLUS
61239: ST_TO_ADDR
// max_y := y + r ;
61240: LD_ADDR_VAR 0 10
61244: PUSH
61245: LD_VAR 0 2
61249: PUSH
61250: LD_VAR 0 3
61254: PLUS
61255: ST_TO_ADDR
// for _x = min_x to max_x do
61256: LD_ADDR_VAR 0 5
61260: PUSH
61261: DOUBLE
61262: LD_VAR 0 8
61266: DEC
61267: ST_TO_ADDR
61268: LD_VAR 0 9
61272: PUSH
61273: FOR_TO
61274: IFFALSE 61375
// for _y = min_y to max_y do
61276: LD_ADDR_VAR 0 6
61280: PUSH
61281: DOUBLE
61282: LD_VAR 0 7
61286: DEC
61287: ST_TO_ADDR
61288: LD_VAR 0 10
61292: PUSH
61293: FOR_TO
61294: IFFALSE 61371
// begin if not ValidHex ( _x , _y ) then
61296: LD_VAR 0 5
61300: PPUSH
61301: LD_VAR 0 6
61305: PPUSH
61306: CALL_OW 488
61310: NOT
61311: IFFALSE 61315
// continue ;
61313: GO 61293
// if GetResourceTypeXY ( _x , _y ) then
61315: LD_VAR 0 5
61319: PPUSH
61320: LD_VAR 0 6
61324: PPUSH
61325: CALL_OW 283
61329: IFFALSE 61369
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61331: LD_ADDR_VAR 0 4
61335: PUSH
61336: LD_VAR 0 4
61340: PPUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_INT 1
61348: PLUS
61349: PPUSH
61350: LD_VAR 0 5
61354: PUSH
61355: LD_VAR 0 6
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PPUSH
61364: CALL_OW 1
61368: ST_TO_ADDR
// end ;
61369: GO 61293
61371: POP
61372: POP
61373: GO 61273
61375: POP
61376: POP
// end ;
61377: LD_VAR 0 4
61381: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61382: LD_INT 0
61384: PPUSH
61385: PPUSH
61386: PPUSH
61387: PPUSH
61388: PPUSH
61389: PPUSH
61390: PPUSH
61391: PPUSH
// if not units then
61392: LD_VAR 0 1
61396: NOT
61397: IFFALSE 61401
// exit ;
61399: GO 61929
// result := UnitFilter ( units , [ f_ok ] ) ;
61401: LD_ADDR_VAR 0 3
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: LD_INT 50
61413: PUSH
61414: EMPTY
61415: LIST
61416: PPUSH
61417: CALL_OW 72
61421: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61422: LD_ADDR_VAR 0 8
61426: PUSH
61427: LD_VAR 0 1
61431: PUSH
61432: LD_INT 1
61434: ARRAY
61435: PPUSH
61436: CALL_OW 255
61440: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61441: LD_ADDR_VAR 0 10
61445: PUSH
61446: LD_INT 29
61448: PUSH
61449: LD_INT 91
61451: PUSH
61452: LD_INT 49
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// if not result then
61460: LD_VAR 0 3
61464: NOT
61465: IFFALSE 61469
// exit ;
61467: GO 61929
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: LD_INT 81
61476: PUSH
61477: LD_VAR 0 8
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PPUSH
61486: CALL_OW 69
61490: ST_TO_ADDR
// for i in result do
61491: LD_ADDR_VAR 0 4
61495: PUSH
61496: LD_VAR 0 3
61500: PUSH
61501: FOR_IN
61502: IFFALSE 61927
// begin tag := GetTag ( i ) + 1 ;
61504: LD_ADDR_VAR 0 9
61508: PUSH
61509: LD_VAR 0 4
61513: PPUSH
61514: CALL_OW 110
61518: PUSH
61519: LD_INT 1
61521: PLUS
61522: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61523: LD_ADDR_VAR 0 7
61527: PUSH
61528: LD_VAR 0 4
61532: PPUSH
61533: CALL_OW 250
61537: PPUSH
61538: LD_VAR 0 4
61542: PPUSH
61543: CALL_OW 251
61547: PPUSH
61548: LD_INT 4
61550: PPUSH
61551: CALL 61124 0 3
61555: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61556: LD_VAR 0 4
61560: PPUSH
61561: CALL_OW 247
61565: PUSH
61566: LD_INT 2
61568: EQUAL
61569: PUSH
61570: LD_VAR 0 7
61574: PUSH
61575: LD_INT 2
61577: GREATER
61578: AND
61579: PUSH
61580: LD_VAR 0 4
61584: PPUSH
61585: CALL_OW 264
61589: PUSH
61590: LD_VAR 0 10
61594: IN
61595: NOT
61596: AND
61597: IFFALSE 61636
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61599: LD_VAR 0 4
61603: PPUSH
61604: LD_VAR 0 7
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PUSH
61613: LD_INT 1
61615: ARRAY
61616: PPUSH
61617: LD_VAR 0 7
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: LD_INT 2
61628: ARRAY
61629: PPUSH
61630: CALL_OW 116
61634: GO 61925
// if path > tag then
61636: LD_VAR 0 2
61640: PUSH
61641: LD_VAR 0 9
61645: GREATER
61646: IFFALSE 61854
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61648: LD_ADDR_VAR 0 6
61652: PUSH
61653: LD_VAR 0 5
61657: PPUSH
61658: LD_INT 91
61660: PUSH
61661: LD_VAR 0 4
61665: PUSH
61666: LD_INT 8
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: PPUSH
61674: CALL_OW 72
61678: ST_TO_ADDR
// if nearEnemy then
61679: LD_VAR 0 6
61683: IFFALSE 61752
// begin if GetWeapon ( i ) = ru_time_lapser then
61685: LD_VAR 0 4
61689: PPUSH
61690: CALL_OW 264
61694: PUSH
61695: LD_INT 49
61697: EQUAL
61698: IFFALSE 61726
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61700: LD_VAR 0 4
61704: PPUSH
61705: LD_VAR 0 6
61709: PPUSH
61710: LD_VAR 0 4
61714: PPUSH
61715: CALL_OW 74
61719: PPUSH
61720: CALL_OW 112
61724: GO 61750
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61726: LD_VAR 0 4
61730: PPUSH
61731: LD_VAR 0 6
61735: PPUSH
61736: LD_VAR 0 4
61740: PPUSH
61741: CALL_OW 74
61745: PPUSH
61746: CALL 63000 0 2
// end else
61750: GO 61852
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61752: LD_VAR 0 4
61756: PPUSH
61757: LD_VAR 0 2
61761: PUSH
61762: LD_VAR 0 9
61766: ARRAY
61767: PUSH
61768: LD_INT 1
61770: ARRAY
61771: PPUSH
61772: LD_VAR 0 2
61776: PUSH
61777: LD_VAR 0 9
61781: ARRAY
61782: PUSH
61783: LD_INT 2
61785: ARRAY
61786: PPUSH
61787: CALL_OW 297
61791: PUSH
61792: LD_INT 6
61794: GREATER
61795: IFFALSE 61838
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61797: LD_VAR 0 4
61801: PPUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_VAR 0 9
61811: ARRAY
61812: PUSH
61813: LD_INT 1
61815: ARRAY
61816: PPUSH
61817: LD_VAR 0 2
61821: PUSH
61822: LD_VAR 0 9
61826: ARRAY
61827: PUSH
61828: LD_INT 2
61830: ARRAY
61831: PPUSH
61832: CALL_OW 114
61836: GO 61852
// SetTag ( i , tag ) ;
61838: LD_VAR 0 4
61842: PPUSH
61843: LD_VAR 0 9
61847: PPUSH
61848: CALL_OW 109
// end else
61852: GO 61925
// if enemy then
61854: LD_VAR 0 5
61858: IFFALSE 61925
// begin if GetWeapon ( i ) = ru_time_lapser then
61860: LD_VAR 0 4
61864: PPUSH
61865: CALL_OW 264
61869: PUSH
61870: LD_INT 49
61872: EQUAL
61873: IFFALSE 61901
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61875: LD_VAR 0 4
61879: PPUSH
61880: LD_VAR 0 5
61884: PPUSH
61885: LD_VAR 0 4
61889: PPUSH
61890: CALL_OW 74
61894: PPUSH
61895: CALL_OW 112
61899: GO 61925
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61901: LD_VAR 0 4
61905: PPUSH
61906: LD_VAR 0 5
61910: PPUSH
61911: LD_VAR 0 4
61915: PPUSH
61916: CALL_OW 74
61920: PPUSH
61921: CALL 63000 0 2
// end ; end ;
61925: GO 61501
61927: POP
61928: POP
// end ;
61929: LD_VAR 0 3
61933: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61934: LD_INT 0
61936: PPUSH
61937: PPUSH
61938: PPUSH
// if not unit or IsInUnit ( unit ) then
61939: LD_VAR 0 1
61943: NOT
61944: PUSH
61945: LD_VAR 0 1
61949: PPUSH
61950: CALL_OW 310
61954: OR
61955: IFFALSE 61959
// exit ;
61957: GO 62050
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61959: LD_ADDR_VAR 0 4
61963: PUSH
61964: LD_VAR 0 1
61968: PPUSH
61969: CALL_OW 250
61973: PPUSH
61974: LD_VAR 0 2
61978: PPUSH
61979: LD_INT 1
61981: PPUSH
61982: CALL_OW 272
61986: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61987: LD_ADDR_VAR 0 5
61991: PUSH
61992: LD_VAR 0 1
61996: PPUSH
61997: CALL_OW 251
62001: PPUSH
62002: LD_VAR 0 2
62006: PPUSH
62007: LD_INT 1
62009: PPUSH
62010: CALL_OW 273
62014: ST_TO_ADDR
// if ValidHex ( x , y ) then
62015: LD_VAR 0 4
62019: PPUSH
62020: LD_VAR 0 5
62024: PPUSH
62025: CALL_OW 488
62029: IFFALSE 62050
// ComTurnXY ( unit , x , y ) ;
62031: LD_VAR 0 1
62035: PPUSH
62036: LD_VAR 0 4
62040: PPUSH
62041: LD_VAR 0 5
62045: PPUSH
62046: CALL_OW 118
// end ;
62050: LD_VAR 0 3
62054: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62055: LD_INT 0
62057: PPUSH
62058: PPUSH
// result := false ;
62059: LD_ADDR_VAR 0 3
62063: PUSH
62064: LD_INT 0
62066: ST_TO_ADDR
// if not units then
62067: LD_VAR 0 2
62071: NOT
62072: IFFALSE 62076
// exit ;
62074: GO 62121
// for i in units do
62076: LD_ADDR_VAR 0 4
62080: PUSH
62081: LD_VAR 0 2
62085: PUSH
62086: FOR_IN
62087: IFFALSE 62119
// if See ( side , i ) then
62089: LD_VAR 0 1
62093: PPUSH
62094: LD_VAR 0 4
62098: PPUSH
62099: CALL_OW 292
62103: IFFALSE 62117
// begin result := true ;
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: LD_INT 1
62112: ST_TO_ADDR
// exit ;
62113: POP
62114: POP
62115: GO 62121
// end ;
62117: GO 62086
62119: POP
62120: POP
// end ;
62121: LD_VAR 0 3
62125: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62126: LD_INT 0
62128: PPUSH
62129: PPUSH
62130: PPUSH
62131: PPUSH
// if not unit or not points then
62132: LD_VAR 0 1
62136: NOT
62137: PUSH
62138: LD_VAR 0 2
62142: NOT
62143: OR
62144: IFFALSE 62148
// exit ;
62146: GO 62238
// dist := 99999 ;
62148: LD_ADDR_VAR 0 5
62152: PUSH
62153: LD_INT 99999
62155: ST_TO_ADDR
// for i in points do
62156: LD_ADDR_VAR 0 4
62160: PUSH
62161: LD_VAR 0 2
62165: PUSH
62166: FOR_IN
62167: IFFALSE 62236
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62169: LD_ADDR_VAR 0 6
62173: PUSH
62174: LD_VAR 0 1
62178: PPUSH
62179: LD_VAR 0 4
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PPUSH
62188: LD_VAR 0 4
62192: PUSH
62193: LD_INT 2
62195: ARRAY
62196: PPUSH
62197: CALL_OW 297
62201: ST_TO_ADDR
// if tmpDist < dist then
62202: LD_VAR 0 6
62206: PUSH
62207: LD_VAR 0 5
62211: LESS
62212: IFFALSE 62234
// begin result := i ;
62214: LD_ADDR_VAR 0 3
62218: PUSH
62219: LD_VAR 0 4
62223: ST_TO_ADDR
// dist := tmpDist ;
62224: LD_ADDR_VAR 0 5
62228: PUSH
62229: LD_VAR 0 6
62233: ST_TO_ADDR
// end ; end ;
62234: GO 62166
62236: POP
62237: POP
// end ;
62238: LD_VAR 0 3
62242: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62243: LD_INT 0
62245: PPUSH
// uc_side := side ;
62246: LD_ADDR_OWVAR 20
62250: PUSH
62251: LD_VAR 0 1
62255: ST_TO_ADDR
// uc_nation := 3 ;
62256: LD_ADDR_OWVAR 21
62260: PUSH
62261: LD_INT 3
62263: ST_TO_ADDR
// vc_chassis := 25 ;
62264: LD_ADDR_OWVAR 37
62268: PUSH
62269: LD_INT 25
62271: ST_TO_ADDR
// vc_engine := engine_siberite ;
62272: LD_ADDR_OWVAR 39
62276: PUSH
62277: LD_INT 3
62279: ST_TO_ADDR
// vc_control := control_computer ;
62280: LD_ADDR_OWVAR 38
62284: PUSH
62285: LD_INT 3
62287: ST_TO_ADDR
// vc_weapon := 59 ;
62288: LD_ADDR_OWVAR 40
62292: PUSH
62293: LD_INT 59
62295: ST_TO_ADDR
// result := CreateVehicle ;
62296: LD_ADDR_VAR 0 5
62300: PUSH
62301: CALL_OW 45
62305: ST_TO_ADDR
// SetDir ( result , d ) ;
62306: LD_VAR 0 5
62310: PPUSH
62311: LD_VAR 0 4
62315: PPUSH
62316: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62320: LD_VAR 0 5
62324: PPUSH
62325: LD_VAR 0 2
62329: PPUSH
62330: LD_VAR 0 3
62334: PPUSH
62335: LD_INT 0
62337: PPUSH
62338: CALL_OW 48
// end ;
62342: LD_VAR 0 5
62346: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62347: LD_INT 0
62349: PPUSH
62350: PPUSH
62351: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62352: LD_ADDR_VAR 0 2
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62375: LD_VAR 0 1
62379: NOT
62380: PUSH
62381: LD_VAR 0 1
62385: PPUSH
62386: CALL_OW 264
62390: PUSH
62391: LD_INT 12
62393: PUSH
62394: LD_INT 51
62396: PUSH
62397: LD_INT 32
62399: PUSH
62400: LD_INT 89
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: IN
62409: NOT
62410: OR
62411: IFFALSE 62415
// exit ;
62413: GO 62513
// for i := 1 to 3 do
62415: LD_ADDR_VAR 0 3
62419: PUSH
62420: DOUBLE
62421: LD_INT 1
62423: DEC
62424: ST_TO_ADDR
62425: LD_INT 3
62427: PUSH
62428: FOR_TO
62429: IFFALSE 62511
// begin tmp := GetCargo ( cargo , i ) ;
62431: LD_ADDR_VAR 0 4
62435: PUSH
62436: LD_VAR 0 1
62440: PPUSH
62441: LD_VAR 0 3
62445: PPUSH
62446: CALL_OW 289
62450: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62451: LD_ADDR_VAR 0 2
62455: PUSH
62456: LD_VAR 0 2
62460: PPUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: LD_VAR 0 4
62470: PPUSH
62471: CALL_OW 1
62475: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62476: LD_ADDR_VAR 0 2
62480: PUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: LD_INT 4
62488: PPUSH
62489: LD_VAR 0 2
62493: PUSH
62494: LD_INT 4
62496: ARRAY
62497: PUSH
62498: LD_VAR 0 4
62502: PLUS
62503: PPUSH
62504: CALL_OW 1
62508: ST_TO_ADDR
// end ;
62509: GO 62428
62511: POP
62512: POP
// end ;
62513: LD_VAR 0 2
62517: RET
// export function Length ( array ) ; begin
62518: LD_INT 0
62520: PPUSH
// result := array + 0 ;
62521: LD_ADDR_VAR 0 2
62525: PUSH
62526: LD_VAR 0 1
62530: PUSH
62531: LD_INT 0
62533: PLUS
62534: ST_TO_ADDR
// end ;
62535: LD_VAR 0 2
62539: RET
// export function PrepareArray ( array ) ; begin
62540: LD_INT 0
62542: PPUSH
// result := array diff 0 ;
62543: LD_ADDR_VAR 0 2
62547: PUSH
62548: LD_VAR 0 1
62552: PUSH
62553: LD_INT 0
62555: DIFF
62556: ST_TO_ADDR
// if not result [ 1 ] then
62557: LD_VAR 0 2
62561: PUSH
62562: LD_INT 1
62564: ARRAY
62565: NOT
62566: IFFALSE 62586
// result := Delete ( result , 1 ) ;
62568: LD_ADDR_VAR 0 2
62572: PUSH
62573: LD_VAR 0 2
62577: PPUSH
62578: LD_INT 1
62580: PPUSH
62581: CALL_OW 3
62585: ST_TO_ADDR
// end ;
62586: LD_VAR 0 2
62590: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62591: LD_INT 0
62593: PPUSH
62594: PPUSH
62595: PPUSH
62596: PPUSH
// sibRocketRange := 25 ;
62597: LD_ADDR_VAR 0 6
62601: PUSH
62602: LD_INT 25
62604: ST_TO_ADDR
// result := false ;
62605: LD_ADDR_VAR 0 4
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// for i := 0 to 5 do
62613: LD_ADDR_VAR 0 5
62617: PUSH
62618: DOUBLE
62619: LD_INT 0
62621: DEC
62622: ST_TO_ADDR
62623: LD_INT 5
62625: PUSH
62626: FOR_TO
62627: IFFALSE 62694
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62629: LD_VAR 0 1
62633: PPUSH
62634: LD_VAR 0 5
62638: PPUSH
62639: LD_VAR 0 6
62643: PPUSH
62644: CALL_OW 272
62648: PPUSH
62649: LD_VAR 0 2
62653: PPUSH
62654: LD_VAR 0 5
62658: PPUSH
62659: LD_VAR 0 6
62663: PPUSH
62664: CALL_OW 273
62668: PPUSH
62669: LD_VAR 0 3
62673: PPUSH
62674: CALL_OW 309
62678: IFFALSE 62692
// begin result := true ;
62680: LD_ADDR_VAR 0 4
62684: PUSH
62685: LD_INT 1
62687: ST_TO_ADDR
// exit ;
62688: POP
62689: POP
62690: GO 62696
// end ;
62692: GO 62626
62694: POP
62695: POP
// end ;
62696: LD_VAR 0 4
62700: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
62705: PPUSH
// if btype = b_depot then
62706: LD_VAR 0 2
62710: PUSH
62711: LD_INT 0
62713: EQUAL
62714: IFFALSE 62726
// begin result := true ;
62716: LD_ADDR_VAR 0 3
62720: PUSH
62721: LD_INT 1
62723: ST_TO_ADDR
// exit ;
62724: GO 62842
// end ; pom := GetBase ( depot ) ;
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 274
62740: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62741: LD_ADDR_VAR 0 5
62745: PUSH
62746: LD_VAR 0 2
62750: PPUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 248
62760: PPUSH
62761: CALL_OW 450
62765: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62766: LD_ADDR_VAR 0 3
62770: PUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: LD_INT 1
62778: PPUSH
62779: CALL_OW 275
62783: PUSH
62784: LD_VAR 0 5
62788: PUSH
62789: LD_INT 1
62791: ARRAY
62792: GREATEREQUAL
62793: PUSH
62794: LD_VAR 0 4
62798: PPUSH
62799: LD_INT 2
62801: PPUSH
62802: CALL_OW 275
62806: PUSH
62807: LD_VAR 0 5
62811: PUSH
62812: LD_INT 2
62814: ARRAY
62815: GREATEREQUAL
62816: AND
62817: PUSH
62818: LD_VAR 0 4
62822: PPUSH
62823: LD_INT 3
62825: PPUSH
62826: CALL_OW 275
62830: PUSH
62831: LD_VAR 0 5
62835: PUSH
62836: LD_INT 3
62838: ARRAY
62839: GREATEREQUAL
62840: AND
62841: ST_TO_ADDR
// end ;
62842: LD_VAR 0 3
62846: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62847: LD_INT 0
62849: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62850: LD_VAR 0 1
62854: PPUSH
62855: LD_VAR 0 2
62859: PPUSH
62860: LD_INT 0
62862: PPUSH
62863: LD_INT 0
62865: PPUSH
62866: LD_INT 1
62868: PPUSH
62869: LD_INT 0
62871: PPUSH
62872: CALL_OW 587
// end ;
62876: LD_VAR 0 3
62880: RET
// export function CenterOnNow ( unit ) ; begin
62881: LD_INT 0
62883: PPUSH
// result := IsInUnit ( unit ) ;
62884: LD_ADDR_VAR 0 2
62888: PUSH
62889: LD_VAR 0 1
62893: PPUSH
62894: CALL_OW 310
62898: ST_TO_ADDR
// if not result then
62899: LD_VAR 0 2
62903: NOT
62904: IFFALSE 62916
// result := unit ;
62906: LD_ADDR_VAR 0 2
62910: PUSH
62911: LD_VAR 0 1
62915: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62916: LD_VAR 0 1
62920: PPUSH
62921: CALL_OW 87
// end ;
62925: LD_VAR 0 2
62929: RET
// export function ComMoveHex ( unit , hex ) ; begin
62930: LD_INT 0
62932: PPUSH
// if not hex then
62933: LD_VAR 0 2
62937: NOT
62938: IFFALSE 62942
// exit ;
62940: GO 62995
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 1
62949: ARRAY
62950: PPUSH
62951: LD_VAR 0 2
62955: PUSH
62956: LD_INT 2
62958: ARRAY
62959: PPUSH
62960: CALL_OW 428
62964: IFFALSE 62968
// exit ;
62966: GO 62995
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62968: LD_VAR 0 1
62972: PPUSH
62973: LD_VAR 0 2
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PPUSH
62982: LD_VAR 0 2
62986: PUSH
62987: LD_INT 2
62989: ARRAY
62990: PPUSH
62991: CALL_OW 111
// end ;
62995: LD_VAR 0 3
62999: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63000: LD_INT 0
63002: PPUSH
63003: PPUSH
63004: PPUSH
// if not unit or not enemy then
63005: LD_VAR 0 1
63009: NOT
63010: PUSH
63011: LD_VAR 0 2
63015: NOT
63016: OR
63017: IFFALSE 63021
// exit ;
63019: GO 63145
// x := GetX ( enemy ) ;
63021: LD_ADDR_VAR 0 4
63025: PUSH
63026: LD_VAR 0 2
63030: PPUSH
63031: CALL_OW 250
63035: ST_TO_ADDR
// y := GetY ( enemy ) ;
63036: LD_ADDR_VAR 0 5
63040: PUSH
63041: LD_VAR 0 2
63045: PPUSH
63046: CALL_OW 251
63050: ST_TO_ADDR
// if ValidHex ( x , y ) then
63051: LD_VAR 0 4
63055: PPUSH
63056: LD_VAR 0 5
63060: PPUSH
63061: CALL_OW 488
63065: IFFALSE 63145
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63067: LD_VAR 0 2
63071: PPUSH
63072: CALL_OW 247
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: IN
63087: PUSH
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 255
63097: PPUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: CALL_OW 292
63107: OR
63108: IFFALSE 63126
// ComAttackUnit ( unit , enemy ) else
63110: LD_VAR 0 1
63114: PPUSH
63115: LD_VAR 0 2
63119: PPUSH
63120: CALL_OW 115
63124: GO 63145
// ComAgressiveMove ( unit , x , y ) ;
63126: LD_VAR 0 1
63130: PPUSH
63131: LD_VAR 0 4
63135: PPUSH
63136: LD_VAR 0 5
63140: PPUSH
63141: CALL_OW 114
// end ;
63145: LD_VAR 0 3
63149: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63150: LD_INT 0
63152: PPUSH
63153: PPUSH
63154: PPUSH
// list := AreaToList ( area , 0 ) ;
63155: LD_ADDR_VAR 0 5
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_INT 0
63167: PPUSH
63168: CALL_OW 517
63172: ST_TO_ADDR
// if not list then
63173: LD_VAR 0 5
63177: NOT
63178: IFFALSE 63182
// exit ;
63180: GO 63312
// if all then
63182: LD_VAR 0 2
63186: IFFALSE 63274
// begin for i := 1 to list [ 1 ] do
63188: LD_ADDR_VAR 0 4
63192: PUSH
63193: DOUBLE
63194: LD_INT 1
63196: DEC
63197: ST_TO_ADDR
63198: LD_VAR 0 5
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PUSH
63207: FOR_TO
63208: IFFALSE 63270
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63210: LD_ADDR_VAR 0 3
63214: PUSH
63215: LD_VAR 0 3
63219: PPUSH
63220: LD_VAR 0 3
63224: PUSH
63225: LD_INT 1
63227: PLUS
63228: PPUSH
63229: LD_VAR 0 5
63233: PUSH
63234: LD_INT 1
63236: ARRAY
63237: PUSH
63238: LD_VAR 0 4
63242: ARRAY
63243: PUSH
63244: LD_VAR 0 5
63248: PUSH
63249: LD_INT 2
63251: ARRAY
63252: PUSH
63253: LD_VAR 0 4
63257: ARRAY
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PPUSH
63263: CALL_OW 1
63267: ST_TO_ADDR
63268: GO 63207
63270: POP
63271: POP
// exit ;
63272: GO 63312
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63274: LD_ADDR_VAR 0 3
63278: PUSH
63279: LD_VAR 0 5
63283: PUSH
63284: LD_INT 1
63286: ARRAY
63287: PUSH
63288: LD_INT 1
63290: ARRAY
63291: PUSH
63292: LD_VAR 0 5
63296: PUSH
63297: LD_INT 2
63299: ARRAY
63300: PUSH
63301: LD_INT 1
63303: ARRAY
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: ST_TO_ADDR
// end ;
63312: LD_VAR 0 3
63316: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63317: LD_INT 0
63319: PPUSH
63320: PPUSH
// list := AreaToList ( area , 0 ) ;
63321: LD_ADDR_VAR 0 4
63325: PUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: LD_INT 0
63333: PPUSH
63334: CALL_OW 517
63338: ST_TO_ADDR
// if not list then
63339: LD_VAR 0 4
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63389
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63348: LD_ADDR_VAR 0 3
63352: PUSH
63353: LD_VAR 0 4
63357: PUSH
63358: LD_INT 1
63360: ARRAY
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PUSH
63366: LD_VAR 0 4
63370: PUSH
63371: LD_INT 2
63373: ARRAY
63374: PUSH
63375: LD_INT 1
63377: ARRAY
63378: PUSH
63379: LD_VAR 0 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: LIST
63388: ST_TO_ADDR
// end ;
63389: LD_VAR 0 3
63393: RET
// export function First ( array ) ; begin
63394: LD_INT 0
63396: PPUSH
// if not array then
63397: LD_VAR 0 1
63401: NOT
63402: IFFALSE 63406
// exit ;
63404: GO 63420
// result := array [ 1 ] ;
63406: LD_ADDR_VAR 0 2
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: LD_INT 1
63418: ARRAY
63419: ST_TO_ADDR
// end ;
63420: LD_VAR 0 2
63424: RET
// export function Last ( array ) ; begin
63425: LD_INT 0
63427: PPUSH
// if not array then
63428: LD_VAR 0 1
63432: NOT
63433: IFFALSE 63437
// exit ;
63435: GO 63453
// result := array [ array ] ;
63437: LD_ADDR_VAR 0 2
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_VAR 0 1
63451: ARRAY
63452: ST_TO_ADDR
// end ;
63453: LD_VAR 0 2
63457: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63458: LD_INT 0
63460: PPUSH
63461: PPUSH
// result := [ ] ;
63462: LD_ADDR_VAR 0 5
63466: PUSH
63467: EMPTY
63468: ST_TO_ADDR
// if not array then
63469: LD_VAR 0 1
63473: NOT
63474: IFFALSE 63478
// exit ;
63476: GO 63590
// for i := 1 to array do
63478: LD_ADDR_VAR 0 6
63482: PUSH
63483: DOUBLE
63484: LD_INT 1
63486: DEC
63487: ST_TO_ADDR
63488: LD_VAR 0 1
63492: PUSH
63493: FOR_TO
63494: IFFALSE 63588
// if array [ i ] [ index ] = value then
63496: LD_VAR 0 1
63500: PUSH
63501: LD_VAR 0 6
63505: ARRAY
63506: PUSH
63507: LD_VAR 0 2
63511: ARRAY
63512: PUSH
63513: LD_VAR 0 3
63517: EQUAL
63518: IFFALSE 63586
// begin if indexColumn then
63520: LD_VAR 0 4
63524: IFFALSE 63560
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63526: LD_ADDR_VAR 0 5
63530: PUSH
63531: LD_VAR 0 5
63535: PPUSH
63536: LD_VAR 0 1
63540: PUSH
63541: LD_VAR 0 6
63545: ARRAY
63546: PUSH
63547: LD_VAR 0 4
63551: ARRAY
63552: PPUSH
63553: CALL 58778 0 2
63557: ST_TO_ADDR
63558: GO 63586
// result := Join ( result , array [ i ] ) ;
63560: LD_ADDR_VAR 0 5
63564: PUSH
63565: LD_VAR 0 5
63569: PPUSH
63570: LD_VAR 0 1
63574: PUSH
63575: LD_VAR 0 6
63579: ARRAY
63580: PPUSH
63581: CALL 58778 0 2
63585: ST_TO_ADDR
// end ;
63586: GO 63493
63588: POP
63589: POP
// end ;
63590: LD_VAR 0 5
63594: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63595: LD_INT 0
63597: PPUSH
// if not vehicles or not parkingPoint then
63598: LD_VAR 0 1
63602: NOT
63603: PUSH
63604: LD_VAR 0 2
63608: NOT
63609: OR
63610: IFFALSE 63614
// exit ;
63612: GO 63712
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63614: LD_ADDR_VAR 0 1
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_INT 50
63626: PUSH
63627: EMPTY
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: LD_INT 92
63635: PUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_INT 1
63643: ARRAY
63644: PUSH
63645: LD_VAR 0 2
63649: PUSH
63650: LD_INT 2
63652: ARRAY
63653: PUSH
63654: LD_INT 8
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PPUSH
63671: CALL_OW 72
63675: ST_TO_ADDR
// if not vehicles then
63676: LD_VAR 0 1
63680: NOT
63681: IFFALSE 63685
// exit ;
63683: GO 63712
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63685: LD_VAR 0 1
63689: PPUSH
63690: LD_VAR 0 2
63694: PUSH
63695: LD_INT 1
63697: ARRAY
63698: PPUSH
63699: LD_VAR 0 2
63703: PUSH
63704: LD_INT 2
63706: ARRAY
63707: PPUSH
63708: CALL_OW 111
// end ;
63712: LD_VAR 0 3
63716: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63717: LD_INT 0
63719: PPUSH
63720: PPUSH
63721: PPUSH
// if not side or not area then
63722: LD_VAR 0 1
63726: NOT
63727: PUSH
63728: LD_VAR 0 2
63732: NOT
63733: OR
63734: IFFALSE 63738
// exit ;
63736: GO 63857
// tmp := AreaToList ( area , 0 ) ;
63738: LD_ADDR_VAR 0 5
63742: PUSH
63743: LD_VAR 0 2
63747: PPUSH
63748: LD_INT 0
63750: PPUSH
63751: CALL_OW 517
63755: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63756: LD_ADDR_VAR 0 4
63760: PUSH
63761: DOUBLE
63762: LD_INT 1
63764: DEC
63765: ST_TO_ADDR
63766: LD_VAR 0 5
63770: PUSH
63771: LD_INT 1
63773: ARRAY
63774: PUSH
63775: FOR_TO
63776: IFFALSE 63855
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63778: LD_VAR 0 5
63782: PUSH
63783: LD_INT 1
63785: ARRAY
63786: PUSH
63787: LD_VAR 0 4
63791: ARRAY
63792: PPUSH
63793: LD_VAR 0 5
63797: PUSH
63798: LD_INT 2
63800: ARRAY
63801: PUSH
63802: LD_VAR 0 4
63806: ARRAY
63807: PPUSH
63808: CALL_OW 351
63812: IFFALSE 63853
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63814: LD_VAR 0 5
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PUSH
63823: LD_VAR 0 4
63827: ARRAY
63828: PPUSH
63829: LD_VAR 0 5
63833: PUSH
63834: LD_INT 2
63836: ARRAY
63837: PUSH
63838: LD_VAR 0 4
63842: ARRAY
63843: PPUSH
63844: LD_VAR 0 1
63848: PPUSH
63849: CALL_OW 244
// end ;
63853: GO 63775
63855: POP
63856: POP
// end ;
63857: LD_VAR 0 3
63861: RET
