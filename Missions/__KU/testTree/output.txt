// starting begin ResetFog ;
   0: CALL_OW 335
// SetInvulnrability ( aa3 , true ) ;
   4: LD_INT 14
   6: PPUSH
   7: LD_INT 1
   9: PPUSH
  10: CALL_OW 607
// end ;
  14: END
// every 0 0$1 do var un , x , i ;
  15: GO 17
  17: DISABLE
  18: LD_INT 0
  20: PPUSH
  21: PPUSH
  22: PPUSH
// begin uc_side := 2 ;
  23: LD_ADDR_OWVAR 20
  27: PUSH
  28: LD_INT 2
  30: ST_TO_ADDR
// uc_nation := 2 ;
  31: LD_ADDR_OWVAR 21
  35: PUSH
  36: LD_INT 2
  38: ST_TO_ADDR
// i := 0 ;
  39: LD_ADDR_VAR 0 3
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_gun , 100 ) ;
  47: LD_INT 14
  49: PPUSH
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 27
  58: PPUSH
  59: LD_INT 100
  61: PPUSH
  62: CALL 25854 0 5
// un := CreateVehicle ;
  66: LD_ADDR_VAR 0 1
  70: PUSH
  71: CALL_OW 45
  75: ST_TO_ADDR
// repeat wait ( 3 ) ;
  76: LD_INT 3
  78: PPUSH
  79: CALL_OW 67
// i := Inc ( i ) ;
  83: LD_ADDR_VAR 0 3
  87: PUSH
  88: LD_VAR 0 3
  92: PPUSH
  93: CALL 60066 0 1
  97: ST_TO_ADDR
// display_strings := i ;
  98: LD_ADDR_OWVAR 47
 102: PUSH
 103: LD_VAR 0 3
 107: ST_TO_ADDR
// x := PlaceUnitArea ( un , area130 , false ) ;
 108: LD_ADDR_VAR 0 2
 112: PUSH
 113: LD_VAR 0 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: CALL_OW 49
 128: ST_TO_ADDR
// until x ;
 129: LD_VAR 0 2
 133: IFFALSE 76
// end ; end_of_file
 135: PPOPN 3
 137: END
// export globalGameSaveCounter ; every 0 0$1 do
 138: GO 140
 140: DISABLE
// begin enable ;
 141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 142: LD_STRING updateTimer(
 144: PUSH
 145: LD_OWVAR 1
 149: STR
 150: PUSH
 151: LD_STRING );
 153: STR
 154: PPUSH
 155: CALL_OW 559
// end ;
 159: END
// every 0 0$1 do
 160: GO 162
 162: DISABLE
// begin globalGameSaveCounter := 0 ;
 163: LD_ADDR_EXP 1
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 171: LD_STRING setGameSaveCounter(0)
 173: PPUSH
 174: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 178: LD_STRING initStreamRollete();
 180: PPUSH
 181: CALL_OW 559
// InitStreamMode ;
 185: CALL 1528 0 0
// DefineStreamItems ( false ) ;
 189: LD_INT 0
 191: PPUSH
 192: CALL 1992 0 1
// end ;
 196: END
// export function SOS_MapStart ( ) ; begin
 197: LD_INT 0
 199: PPUSH
// if streamModeActive then
 200: LD_EXP 2
 204: IFFALSE 213
// DefineStreamItems ( true ) ;
 206: LD_INT 1
 208: PPUSH
 209: CALL 1992 0 1
// UpdateLuaVariables ( ) ;
 213: CALL 230 0 0
// UpdateFactoryWaypoints ( ) ;
 217: CALL 14861 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 221: CALL 15118 0 0
// end ;
 225: LD_VAR 0 1
 229: RET
// function UpdateLuaVariables ( ) ; begin
 230: LD_INT 0
 232: PPUSH
// if globalGameSaveCounter then
 233: LD_EXP 1
 237: IFFALSE 271
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 239: LD_ADDR_EXP 1
 243: PUSH
 244: LD_EXP 1
 248: PPUSH
 249: CALL 60066 0 1
 253: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 254: LD_STRING setGameSaveCounter(
 256: PUSH
 257: LD_EXP 1
 261: STR
 262: PUSH
 263: LD_STRING )
 265: STR
 266: PPUSH
 267: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 271: LD_STRING setGameDifficulty(
 273: PUSH
 274: LD_OWVAR 67
 278: STR
 279: PUSH
 280: LD_STRING )
 282: STR
 283: PPUSH
 284: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 288: LD_STRING displayDifficulty(
 290: PUSH
 291: LD_OWVAR 67
 295: STR
 296: PUSH
 297: LD_STRING )
 299: STR
 300: PPUSH
 301: CALL_OW 559
// end ;
 305: LD_VAR 0 1
 309: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 310: LD_INT 0
 312: PPUSH
// if p2 = stream_mode then
 313: LD_VAR 0 2
 317: PUSH
 318: LD_INT 100
 320: EQUAL
 321: IFFALSE 1324
// begin if not StreamModeActive then
 323: LD_EXP 2
 327: NOT
 328: IFFALSE 338
// StreamModeActive := true ;
 330: LD_ADDR_EXP 2
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// if p3 = 0 then
 338: LD_VAR 0 3
 342: PUSH
 343: LD_INT 0
 345: EQUAL
 346: IFFALSE 352
// InitStreamMode ;
 348: CALL 1528 0 0
// if p3 = 1 then
 352: LD_VAR 0 3
 356: PUSH
 357: LD_INT 1
 359: EQUAL
 360: IFFALSE 370
// sRocket := true ;
 362: LD_ADDR_EXP 7
 366: PUSH
 367: LD_INT 1
 369: ST_TO_ADDR
// if p3 = 2 then
 370: LD_VAR 0 3
 374: PUSH
 375: LD_INT 2
 377: EQUAL
 378: IFFALSE 388
// sSpeed := true ;
 380: LD_ADDR_EXP 6
 384: PUSH
 385: LD_INT 1
 387: ST_TO_ADDR
// if p3 = 3 then
 388: LD_VAR 0 3
 392: PUSH
 393: LD_INT 3
 395: EQUAL
 396: IFFALSE 406
// sEngine := true ;
 398: LD_ADDR_EXP 8
 402: PUSH
 403: LD_INT 1
 405: ST_TO_ADDR
// if p3 = 4 then
 406: LD_VAR 0 3
 410: PUSH
 411: LD_INT 4
 413: EQUAL
 414: IFFALSE 424
// sSpec := true ;
 416: LD_ADDR_EXP 5
 420: PUSH
 421: LD_INT 1
 423: ST_TO_ADDR
// if p3 = 5 then
 424: LD_VAR 0 3
 428: PUSH
 429: LD_INT 5
 431: EQUAL
 432: IFFALSE 442
// sLevel := true ;
 434: LD_ADDR_EXP 9
 438: PUSH
 439: LD_INT 1
 441: ST_TO_ADDR
// if p3 = 6 then
 442: LD_VAR 0 3
 446: PUSH
 447: LD_INT 6
 449: EQUAL
 450: IFFALSE 460
// sArmoury := true ;
 452: LD_ADDR_EXP 10
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// if p3 = 7 then
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 7
 467: EQUAL
 468: IFFALSE 478
// sRadar := true ;
 470: LD_ADDR_EXP 11
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// if p3 = 8 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_INT 8
 485: EQUAL
 486: IFFALSE 496
// sBunker := true ;
 488: LD_ADDR_EXP 12
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// if p3 = 9 then
 496: LD_VAR 0 3
 500: PUSH
 501: LD_INT 9
 503: EQUAL
 504: IFFALSE 514
// sHack := true ;
 506: LD_ADDR_EXP 13
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// if p3 = 10 then
 514: LD_VAR 0 3
 518: PUSH
 519: LD_INT 10
 521: EQUAL
 522: IFFALSE 532
// sFire := true ;
 524: LD_ADDR_EXP 14
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// if p3 = 11 then
 532: LD_VAR 0 3
 536: PUSH
 537: LD_INT 11
 539: EQUAL
 540: IFFALSE 550
// sRefresh := true ;
 542: LD_ADDR_EXP 15
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// if p3 = 12 then
 550: LD_VAR 0 3
 554: PUSH
 555: LD_INT 12
 557: EQUAL
 558: IFFALSE 568
// sExp := true ;
 560: LD_ADDR_EXP 16
 564: PUSH
 565: LD_INT 1
 567: ST_TO_ADDR
// if p3 = 13 then
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 13
 575: EQUAL
 576: IFFALSE 586
// sDepot := true ;
 578: LD_ADDR_EXP 17
 582: PUSH
 583: LD_INT 1
 585: ST_TO_ADDR
// if p3 = 14 then
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 14
 593: EQUAL
 594: IFFALSE 604
// sFlag := true ;
 596: LD_ADDR_EXP 18
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// if p3 = 15 then
 604: LD_VAR 0 3
 608: PUSH
 609: LD_INT 15
 611: EQUAL
 612: IFFALSE 622
// sKamikadze := true ;
 614: LD_ADDR_EXP 26
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
// if p3 = 16 then
 622: LD_VAR 0 3
 626: PUSH
 627: LD_INT 16
 629: EQUAL
 630: IFFALSE 640
// sTroll := true ;
 632: LD_ADDR_EXP 27
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// if p3 = 17 then
 640: LD_VAR 0 3
 644: PUSH
 645: LD_INT 17
 647: EQUAL
 648: IFFALSE 658
// sSlow := true ;
 650: LD_ADDR_EXP 28
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// if p3 = 18 then
 658: LD_VAR 0 3
 662: PUSH
 663: LD_INT 18
 665: EQUAL
 666: IFFALSE 676
// sLack := true ;
 668: LD_ADDR_EXP 29
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// if p3 = 19 then
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 19
 683: EQUAL
 684: IFFALSE 694
// sTank := true ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// if p3 = 20 then
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 20
 701: EQUAL
 702: IFFALSE 712
// sRemote := true ;
 704: LD_ADDR_EXP 32
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// if p3 = 21 then
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 21
 719: EQUAL
 720: IFFALSE 730
// sPowell := true ;
 722: LD_ADDR_EXP 33
 726: PUSH
 727: LD_INT 1
 729: ST_TO_ADDR
// if p3 = 22 then
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 22
 737: EQUAL
 738: IFFALSE 748
// sTeleport := true ;
 740: LD_ADDR_EXP 36
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// if p3 = 23 then
 748: LD_VAR 0 3
 752: PUSH
 753: LD_INT 23
 755: EQUAL
 756: IFFALSE 766
// sOilTower := true ;
 758: LD_ADDR_EXP 38
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// if p3 = 24 then
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 24
 773: EQUAL
 774: IFFALSE 784
// sShovel := true ;
 776: LD_ADDR_EXP 39
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// if p3 = 25 then
 784: LD_VAR 0 3
 788: PUSH
 789: LD_INT 25
 791: EQUAL
 792: IFFALSE 802
// sSheik := true ;
 794: LD_ADDR_EXP 40
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// if p3 = 26 then
 802: LD_VAR 0 3
 806: PUSH
 807: LD_INT 26
 809: EQUAL
 810: IFFALSE 820
// sEarthquake := true ;
 812: LD_ADDR_EXP 42
 816: PUSH
 817: LD_INT 1
 819: ST_TO_ADDR
// if p3 = 27 then
 820: LD_VAR 0 3
 824: PUSH
 825: LD_INT 27
 827: EQUAL
 828: IFFALSE 838
// sAI := true ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// if p3 = 28 then
 838: LD_VAR 0 3
 842: PUSH
 843: LD_INT 28
 845: EQUAL
 846: IFFALSE 856
// sCargo := true ;
 848: LD_ADDR_EXP 46
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// if p3 = 29 then
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 29
 863: EQUAL
 864: IFFALSE 874
// sDLaser := true ;
 866: LD_ADDR_EXP 47
 870: PUSH
 871: LD_INT 1
 873: ST_TO_ADDR
// if p3 = 30 then
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 30
 881: EQUAL
 882: IFFALSE 892
// sExchange := true ;
 884: LD_ADDR_EXP 48
 888: PUSH
 889: LD_INT 1
 891: ST_TO_ADDR
// if p3 = 31 then
 892: LD_VAR 0 3
 896: PUSH
 897: LD_INT 31
 899: EQUAL
 900: IFFALSE 910
// sFac := true ;
 902: LD_ADDR_EXP 49
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// if p3 = 32 then
 910: LD_VAR 0 3
 914: PUSH
 915: LD_INT 32
 917: EQUAL
 918: IFFALSE 928
// sPower := true ;
 920: LD_ADDR_EXP 50
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// if p3 = 33 then
 928: LD_VAR 0 3
 932: PUSH
 933: LD_INT 33
 935: EQUAL
 936: IFFALSE 946
// sRandom := true ;
 938: LD_ADDR_EXP 51
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// if p3 = 34 then
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 34
 953: EQUAL
 954: IFFALSE 964
// sShield := true ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_INT 1
 963: ST_TO_ADDR
// if p3 = 35 then
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 35
 971: EQUAL
 972: IFFALSE 982
// sTime := true ;
 974: LD_ADDR_EXP 53
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// if p3 = 36 then
 982: LD_VAR 0 3
 986: PUSH
 987: LD_INT 36
 989: EQUAL
 990: IFFALSE 1000
// sTools := true ;
 992: LD_ADDR_EXP 54
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// if p3 = 101 then
1000: LD_VAR 0 3
1004: PUSH
1005: LD_INT 101
1007: EQUAL
1008: IFFALSE 1018
// sSold := true ;
1010: LD_ADDR_EXP 19
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// if p3 = 102 then
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 102
1025: EQUAL
1026: IFFALSE 1036
// sDiff := true ;
1028: LD_ADDR_EXP 20
1032: PUSH
1033: LD_INT 1
1035: ST_TO_ADDR
// if p3 = 103 then
1036: LD_VAR 0 3
1040: PUSH
1041: LD_INT 103
1043: EQUAL
1044: IFFALSE 1054
// sFog := true ;
1046: LD_ADDR_EXP 23
1050: PUSH
1051: LD_INT 1
1053: ST_TO_ADDR
// if p3 = 104 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 104
1061: EQUAL
1062: IFFALSE 1072
// sReset := true ;
1064: LD_ADDR_EXP 24
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// if p3 = 105 then
1072: LD_VAR 0 3
1076: PUSH
1077: LD_INT 105
1079: EQUAL
1080: IFFALSE 1090
// sSun := true ;
1082: LD_ADDR_EXP 25
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// if p3 = 106 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 106
1097: EQUAL
1098: IFFALSE 1108
// sTiger := true ;
1100: LD_ADDR_EXP 21
1104: PUSH
1105: LD_INT 1
1107: ST_TO_ADDR
// if p3 = 107 then
1108: LD_VAR 0 3
1112: PUSH
1113: LD_INT 107
1115: EQUAL
1116: IFFALSE 1126
// sBomb := true ;
1118: LD_ADDR_EXP 22
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// if p3 = 108 then
1126: LD_VAR 0 3
1130: PUSH
1131: LD_INT 108
1133: EQUAL
1134: IFFALSE 1144
// sWound := true ;
1136: LD_ADDR_EXP 30
1140: PUSH
1141: LD_INT 1
1143: ST_TO_ADDR
// if p3 = 109 then
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 109
1151: EQUAL
1152: IFFALSE 1162
// sBetray := true ;
1154: LD_ADDR_EXP 34
1158: PUSH
1159: LD_INT 1
1161: ST_TO_ADDR
// if p3 = 110 then
1162: LD_VAR 0 3
1166: PUSH
1167: LD_INT 110
1169: EQUAL
1170: IFFALSE 1180
// sContamin := true ;
1172: LD_ADDR_EXP 35
1176: PUSH
1177: LD_INT 1
1179: ST_TO_ADDR
// if p3 = 111 then
1180: LD_VAR 0 3
1184: PUSH
1185: LD_INT 111
1187: EQUAL
1188: IFFALSE 1198
// sOil := true ;
1190: LD_ADDR_EXP 37
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// if p3 = 112 then
1198: LD_VAR 0 3
1202: PUSH
1203: LD_INT 112
1205: EQUAL
1206: IFFALSE 1216
// sStu := true ;
1208: LD_ADDR_EXP 41
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if p3 = 113 then
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 113
1223: EQUAL
1224: IFFALSE 1234
// sBazooka := true ;
1226: LD_ADDR_EXP 44
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// if p3 = 114 then
1234: LD_VAR 0 3
1238: PUSH
1239: LD_INT 114
1241: EQUAL
1242: IFFALSE 1252
// sMortar := true ;
1244: LD_ADDR_EXP 45
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// if p3 = 115 then
1252: LD_VAR 0 3
1256: PUSH
1257: LD_INT 115
1259: EQUAL
1260: IFFALSE 1270
// sRanger := true ;
1262: LD_ADDR_EXP 55
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// if p3 = 116 then
1270: LD_VAR 0 3
1274: PUSH
1275: LD_INT 116
1277: EQUAL
1278: IFFALSE 1288
// sComputer := true ;
1280: LD_ADDR_EXP 56
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// if p3 = 117 then
1288: LD_VAR 0 3
1292: PUSH
1293: LD_INT 117
1295: EQUAL
1296: IFFALSE 1306
// s30 := true ;
1298: LD_ADDR_EXP 57
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
// if p3 = 118 then
1306: LD_VAR 0 3
1310: PUSH
1311: LD_INT 118
1313: EQUAL
1314: IFFALSE 1324
// s60 := true ;
1316: LD_ADDR_EXP 58
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// end ; if p2 = hack_mode then
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 101
1331: EQUAL
1332: IFFALSE 1460
// begin case p3 of 1 :
1334: LD_VAR 0 3
1338: PUSH
1339: LD_INT 1
1341: DOUBLE
1342: EQUAL
1343: IFTRUE 1347
1345: GO 1354
1347: POP
// hHackUnlimitedResources ; 2 :
1348: CALL 13607 0 0
1352: GO 1460
1354: LD_INT 2
1356: DOUBLE
1357: EQUAL
1358: IFTRUE 1362
1360: GO 1369
1362: POP
// hHackSetLevel10 ; 3 :
1363: CALL 13740 0 0
1367: GO 1460
1369: LD_INT 3
1371: DOUBLE
1372: EQUAL
1373: IFTRUE 1377
1375: GO 1384
1377: POP
// hHackSetLevel10YourUnits ; 4 :
1378: CALL 13825 0 0
1382: GO 1460
1384: LD_INT 4
1386: DOUBLE
1387: EQUAL
1388: IFTRUE 1392
1390: GO 1399
1392: POP
// hHackInvincible ; 5 :
1393: CALL 14273 0 0
1397: GO 1460
1399: LD_INT 5
1401: DOUBLE
1402: EQUAL
1403: IFTRUE 1407
1405: GO 1414
1407: POP
// hHackInvisible ; 6 :
1408: CALL 14384 0 0
1412: GO 1460
1414: LD_INT 6
1416: DOUBLE
1417: EQUAL
1418: IFTRUE 1422
1420: GO 1429
1422: POP
// hHackChangeYourSide ; 7 :
1423: CALL 14441 0 0
1427: GO 1460
1429: LD_INT 7
1431: DOUBLE
1432: EQUAL
1433: IFTRUE 1437
1435: GO 1444
1437: POP
// hHackChangeUnitSide ; 8 :
1438: CALL 14483 0 0
1442: GO 1460
1444: LD_INT 8
1446: DOUBLE
1447: EQUAL
1448: IFTRUE 1452
1450: GO 1459
1452: POP
// hHackFog ; end ;
1453: CALL 14584 0 0
1457: GO 1460
1459: POP
// end ; if p2 = game_save_mode then
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 102
1467: EQUAL
1468: IFFALSE 1523
// begin if p3 = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1490
// globalGameSaveCounter := p4 ;
1480: LD_ADDR_EXP 1
1484: PUSH
1485: LD_VAR 0 4
1489: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1490: LD_VAR 0 3
1494: PUSH
1495: LD_INT 2
1497: EQUAL
1498: PUSH
1499: LD_EXP 1
1503: AND
1504: IFFALSE 1523
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1506: LD_STRING setGameSaveCounter(
1508: PUSH
1509: LD_EXP 1
1513: STR
1514: PUSH
1515: LD_STRING )
1517: STR
1518: PPUSH
1519: CALL_OW 559
// end ; end ;
1523: LD_VAR 0 7
1527: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1528: LD_INT 0
1530: PPUSH
// streamModeActive := false ;
1531: LD_ADDR_EXP 2
1535: PUSH
1536: LD_INT 0
1538: ST_TO_ADDR
// normalCounter := 36 ;
1539: LD_ADDR_EXP 3
1543: PUSH
1544: LD_INT 36
1546: ST_TO_ADDR
// hardcoreCounter := 18 ;
1547: LD_ADDR_EXP 4
1551: PUSH
1552: LD_INT 18
1554: ST_TO_ADDR
// sRocket := false ;
1555: LD_ADDR_EXP 7
1559: PUSH
1560: LD_INT 0
1562: ST_TO_ADDR
// sSpeed := false ;
1563: LD_ADDR_EXP 6
1567: PUSH
1568: LD_INT 0
1570: ST_TO_ADDR
// sEngine := false ;
1571: LD_ADDR_EXP 8
1575: PUSH
1576: LD_INT 0
1578: ST_TO_ADDR
// sSpec := false ;
1579: LD_ADDR_EXP 5
1583: PUSH
1584: LD_INT 0
1586: ST_TO_ADDR
// sLevel := false ;
1587: LD_ADDR_EXP 9
1591: PUSH
1592: LD_INT 0
1594: ST_TO_ADDR
// sArmoury := false ;
1595: LD_ADDR_EXP 10
1599: PUSH
1600: LD_INT 0
1602: ST_TO_ADDR
// sRadar := false ;
1603: LD_ADDR_EXP 11
1607: PUSH
1608: LD_INT 0
1610: ST_TO_ADDR
// sBunker := false ;
1611: LD_ADDR_EXP 12
1615: PUSH
1616: LD_INT 0
1618: ST_TO_ADDR
// sHack := false ;
1619: LD_ADDR_EXP 13
1623: PUSH
1624: LD_INT 0
1626: ST_TO_ADDR
// sFire := false ;
1627: LD_ADDR_EXP 14
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// sRefresh := false ;
1635: LD_ADDR_EXP 15
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// sExp := false ;
1643: LD_ADDR_EXP 16
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// sDepot := false ;
1651: LD_ADDR_EXP 17
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// sFlag := false ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// sKamikadze := false ;
1667: LD_ADDR_EXP 26
1671: PUSH
1672: LD_INT 0
1674: ST_TO_ADDR
// sTroll := false ;
1675: LD_ADDR_EXP 27
1679: PUSH
1680: LD_INT 0
1682: ST_TO_ADDR
// sSlow := false ;
1683: LD_ADDR_EXP 28
1687: PUSH
1688: LD_INT 0
1690: ST_TO_ADDR
// sLack := false ;
1691: LD_ADDR_EXP 29
1695: PUSH
1696: LD_INT 0
1698: ST_TO_ADDR
// sTank := false ;
1699: LD_ADDR_EXP 31
1703: PUSH
1704: LD_INT 0
1706: ST_TO_ADDR
// sRemote := false ;
1707: LD_ADDR_EXP 32
1711: PUSH
1712: LD_INT 0
1714: ST_TO_ADDR
// sPowell := false ;
1715: LD_ADDR_EXP 33
1719: PUSH
1720: LD_INT 0
1722: ST_TO_ADDR
// sTeleport := false ;
1723: LD_ADDR_EXP 36
1727: PUSH
1728: LD_INT 0
1730: ST_TO_ADDR
// sOilTower := false ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: LD_INT 0
1738: ST_TO_ADDR
// sShovel := false ;
1739: LD_ADDR_EXP 39
1743: PUSH
1744: LD_INT 0
1746: ST_TO_ADDR
// sSheik := false ;
1747: LD_ADDR_EXP 40
1751: PUSH
1752: LD_INT 0
1754: ST_TO_ADDR
// sEarthquake := false ;
1755: LD_ADDR_EXP 42
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// sAI := false ;
1763: LD_ADDR_EXP 43
1767: PUSH
1768: LD_INT 0
1770: ST_TO_ADDR
// sCargo := false ;
1771: LD_ADDR_EXP 46
1775: PUSH
1776: LD_INT 0
1778: ST_TO_ADDR
// sDLaser := false ;
1779: LD_ADDR_EXP 47
1783: PUSH
1784: LD_INT 0
1786: ST_TO_ADDR
// sExchange := false ;
1787: LD_ADDR_EXP 48
1791: PUSH
1792: LD_INT 0
1794: ST_TO_ADDR
// sFac := false ;
1795: LD_ADDR_EXP 49
1799: PUSH
1800: LD_INT 0
1802: ST_TO_ADDR
// sPower := false ;
1803: LD_ADDR_EXP 50
1807: PUSH
1808: LD_INT 0
1810: ST_TO_ADDR
// sRandom := false ;
1811: LD_ADDR_EXP 51
1815: PUSH
1816: LD_INT 0
1818: ST_TO_ADDR
// sShield := false ;
1819: LD_ADDR_EXP 52
1823: PUSH
1824: LD_INT 0
1826: ST_TO_ADDR
// sTime := false ;
1827: LD_ADDR_EXP 53
1831: PUSH
1832: LD_INT 0
1834: ST_TO_ADDR
// sTools := false ;
1835: LD_ADDR_EXP 54
1839: PUSH
1840: LD_INT 0
1842: ST_TO_ADDR
// sSold := false ;
1843: LD_ADDR_EXP 19
1847: PUSH
1848: LD_INT 0
1850: ST_TO_ADDR
// sDiff := false ;
1851: LD_ADDR_EXP 20
1855: PUSH
1856: LD_INT 0
1858: ST_TO_ADDR
// sFog := false ;
1859: LD_ADDR_EXP 23
1863: PUSH
1864: LD_INT 0
1866: ST_TO_ADDR
// sReset := false ;
1867: LD_ADDR_EXP 24
1871: PUSH
1872: LD_INT 0
1874: ST_TO_ADDR
// sSun := false ;
1875: LD_ADDR_EXP 25
1879: PUSH
1880: LD_INT 0
1882: ST_TO_ADDR
// sTiger := false ;
1883: LD_ADDR_EXP 21
1887: PUSH
1888: LD_INT 0
1890: ST_TO_ADDR
// sBomb := false ;
1891: LD_ADDR_EXP 22
1895: PUSH
1896: LD_INT 0
1898: ST_TO_ADDR
// sWound := false ;
1899: LD_ADDR_EXP 30
1903: PUSH
1904: LD_INT 0
1906: ST_TO_ADDR
// sBetray := false ;
1907: LD_ADDR_EXP 34
1911: PUSH
1912: LD_INT 0
1914: ST_TO_ADDR
// sContamin := false ;
1915: LD_ADDR_EXP 35
1919: PUSH
1920: LD_INT 0
1922: ST_TO_ADDR
// sOil := false ;
1923: LD_ADDR_EXP 37
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// sStu := false ;
1931: LD_ADDR_EXP 41
1935: PUSH
1936: LD_INT 0
1938: ST_TO_ADDR
// sBazooka := false ;
1939: LD_ADDR_EXP 44
1943: PUSH
1944: LD_INT 0
1946: ST_TO_ADDR
// sMortar := false ;
1947: LD_ADDR_EXP 45
1951: PUSH
1952: LD_INT 0
1954: ST_TO_ADDR
// sRanger := false ;
1955: LD_ADDR_EXP 55
1959: PUSH
1960: LD_INT 0
1962: ST_TO_ADDR
// sComputer := false ;
1963: LD_ADDR_EXP 56
1967: PUSH
1968: LD_INT 0
1970: ST_TO_ADDR
// s30 := false ;
1971: LD_ADDR_EXP 57
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// s60 := false ;
1979: LD_ADDR_EXP 58
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// end ;
1987: LD_VAR 0 1
1991: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := [ ] ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: EMPTY
2007: ST_TO_ADDR
// if campaign_id = 1 then
2008: LD_OWVAR 69
2012: PUSH
2013: LD_INT 1
2015: EQUAL
2016: IFFALSE 5182
// begin case mission_number of 1 :
2018: LD_OWVAR 70
2022: PUSH
2023: LD_INT 1
2025: DOUBLE
2026: EQUAL
2027: IFTRUE 2031
2029: GO 2107
2031: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: LD_INT 4
2042: PUSH
2043: LD_INT 11
2045: PUSH
2046: LD_INT 12
2048: PUSH
2049: LD_INT 15
2051: PUSH
2052: LD_INT 16
2054: PUSH
2055: LD_INT 22
2057: PUSH
2058: LD_INT 23
2060: PUSH
2061: LD_INT 26
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 101
2077: PUSH
2078: LD_INT 102
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 116
2086: PUSH
2087: LD_INT 117
2089: PUSH
2090: LD_INT 118
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
2105: GO 5180
2107: LD_INT 2
2109: DOUBLE
2110: EQUAL
2111: IFTRUE 2115
2113: GO 2199
2115: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: LD_INT 4
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 12
2132: PUSH
2133: LD_INT 15
2135: PUSH
2136: LD_INT 16
2138: PUSH
2139: LD_INT 22
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 26
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 101
2161: PUSH
2162: LD_INT 102
2164: PUSH
2165: LD_INT 105
2167: PUSH
2168: LD_INT 106
2170: PUSH
2171: LD_INT 108
2173: PUSH
2174: LD_INT 116
2176: PUSH
2177: LD_INT 117
2179: PUSH
2180: LD_INT 118
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: ST_TO_ADDR
2197: GO 5180
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2295
2207: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: LD_INT 5
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 15
2230: PUSH
2231: LD_INT 16
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 26
2239: PUSH
2240: LD_INT 36
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 101
2257: PUSH
2258: LD_INT 102
2260: PUSH
2261: LD_INT 105
2263: PUSH
2264: LD_INT 106
2266: PUSH
2267: LD_INT 108
2269: PUSH
2270: LD_INT 116
2272: PUSH
2273: LD_INT 117
2275: PUSH
2276: LD_INT 118
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: ST_TO_ADDR
2293: GO 5180
2295: LD_INT 4
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2399
2303: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2304: LD_ADDR_VAR 0 2
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 5
2317: PUSH
2318: LD_INT 8
2320: PUSH
2321: LD_INT 11
2323: PUSH
2324: LD_INT 12
2326: PUSH
2327: LD_INT 15
2329: PUSH
2330: LD_INT 16
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 23
2338: PUSH
2339: LD_INT 26
2341: PUSH
2342: LD_INT 36
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 101
2361: PUSH
2362: LD_INT 102
2364: PUSH
2365: LD_INT 105
2367: PUSH
2368: LD_INT 106
2370: PUSH
2371: LD_INT 108
2373: PUSH
2374: LD_INT 116
2376: PUSH
2377: LD_INT 117
2379: PUSH
2380: LD_INT 118
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: ST_TO_ADDR
2397: GO 5180
2399: LD_INT 5
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2519
2407: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_INT 2
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: LD_INT 8
2427: PUSH
2428: LD_INT 11
2430: PUSH
2431: LD_INT 12
2433: PUSH
2434: LD_INT 15
2436: PUSH
2437: LD_INT 16
2439: PUSH
2440: LD_INT 22
2442: PUSH
2443: LD_INT 23
2445: PUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 26
2451: PUSH
2452: LD_INT 36
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 101
2473: PUSH
2474: LD_INT 102
2476: PUSH
2477: LD_INT 105
2479: PUSH
2480: LD_INT 106
2482: PUSH
2483: LD_INT 108
2485: PUSH
2486: LD_INT 109
2488: PUSH
2489: LD_INT 112
2491: PUSH
2492: LD_INT 116
2494: PUSH
2495: LD_INT 117
2497: PUSH
2498: LD_INT 118
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: ST_TO_ADDR
2517: GO 5180
2519: LD_INT 6
2521: DOUBLE
2522: EQUAL
2523: IFTRUE 2527
2525: GO 2659
2527: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: LD_INT 4
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 6
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 11
2550: PUSH
2551: LD_INT 12
2553: PUSH
2554: LD_INT 15
2556: PUSH
2557: LD_INT 16
2559: PUSH
2560: LD_INT 20
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: LD_INT 25
2574: PUSH
2575: LD_INT 26
2577: PUSH
2578: LD_INT 30
2580: PUSH
2581: LD_INT 31
2583: PUSH
2584: LD_INT 32
2586: PUSH
2587: LD_INT 36
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 101
2613: PUSH
2614: LD_INT 102
2616: PUSH
2617: LD_INT 105
2619: PUSH
2620: LD_INT 106
2622: PUSH
2623: LD_INT 108
2625: PUSH
2626: LD_INT 109
2628: PUSH
2629: LD_INT 112
2631: PUSH
2632: LD_INT 116
2634: PUSH
2635: LD_INT 117
2637: PUSH
2638: LD_INT 118
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: ST_TO_ADDR
2657: GO 5180
2659: LD_INT 7
2661: DOUBLE
2662: EQUAL
2663: IFTRUE 2667
2665: GO 2779
2667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: LD_INT 2
2675: PUSH
2676: LD_INT 4
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: LD_INT 11
2687: PUSH
2688: LD_INT 12
2690: PUSH
2691: LD_INT 15
2693: PUSH
2694: LD_INT 16
2696: PUSH
2697: LD_INT 20
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 22
2705: PUSH
2706: LD_INT 23
2708: PUSH
2709: LD_INT 25
2711: PUSH
2712: LD_INT 26
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 101
2733: PUSH
2734: LD_INT 102
2736: PUSH
2737: LD_INT 103
2739: PUSH
2740: LD_INT 105
2742: PUSH
2743: LD_INT 106
2745: PUSH
2746: LD_INT 108
2748: PUSH
2749: LD_INT 112
2751: PUSH
2752: LD_INT 116
2754: PUSH
2755: LD_INT 117
2757: PUSH
2758: LD_INT 118
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: ST_TO_ADDR
2777: GO 5180
2779: LD_INT 8
2781: DOUBLE
2782: EQUAL
2783: IFTRUE 2787
2785: GO 2927
2787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 4
2798: PUSH
2799: LD_INT 5
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: LD_INT 7
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: LD_INT 11
2813: PUSH
2814: LD_INT 12
2816: PUSH
2817: LD_INT 15
2819: PUSH
2820: LD_INT 16
2822: PUSH
2823: LD_INT 20
2825: PUSH
2826: LD_INT 21
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 23
2834: PUSH
2835: LD_INT 25
2837: PUSH
2838: LD_INT 26
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: LD_INT 32
2849: PUSH
2850: LD_INT 36
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 101
2877: PUSH
2878: LD_INT 102
2880: PUSH
2881: LD_INT 103
2883: PUSH
2884: LD_INT 105
2886: PUSH
2887: LD_INT 106
2889: PUSH
2890: LD_INT 108
2892: PUSH
2893: LD_INT 109
2895: PUSH
2896: LD_INT 112
2898: PUSH
2899: LD_INT 116
2901: PUSH
2902: LD_INT 117
2904: PUSH
2905: LD_INT 118
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: ST_TO_ADDR
2925: GO 5180
2927: LD_INT 9
2929: DOUBLE
2930: EQUAL
2931: IFTRUE 2935
2933: GO 3083
2935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: LD_INT 4
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: LD_INT 11
2961: PUSH
2962: LD_INT 12
2964: PUSH
2965: LD_INT 15
2967: PUSH
2968: LD_INT 16
2970: PUSH
2971: LD_INT 20
2973: PUSH
2974: LD_INT 21
2976: PUSH
2977: LD_INT 22
2979: PUSH
2980: LD_INT 23
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 26
2988: PUSH
2989: LD_INT 28
2991: PUSH
2992: LD_INT 30
2994: PUSH
2995: LD_INT 31
2997: PUSH
2998: LD_INT 32
3000: PUSH
3001: LD_INT 36
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 101
3029: PUSH
3030: LD_INT 102
3032: PUSH
3033: LD_INT 103
3035: PUSH
3036: LD_INT 105
3038: PUSH
3039: LD_INT 106
3041: PUSH
3042: LD_INT 108
3044: PUSH
3045: LD_INT 109
3047: PUSH
3048: LD_INT 112
3050: PUSH
3051: LD_INT 114
3053: PUSH
3054: LD_INT 116
3056: PUSH
3057: LD_INT 117
3059: PUSH
3060: LD_INT 118
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: ST_TO_ADDR
3081: GO 5180
3083: LD_INT 10
3085: DOUBLE
3086: EQUAL
3087: IFTRUE 3091
3089: GO 3287
3091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 2
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: LD_INT 5
3105: PUSH
3106: LD_INT 6
3108: PUSH
3109: LD_INT 7
3111: PUSH
3112: LD_INT 8
3114: PUSH
3115: LD_INT 9
3117: PUSH
3118: LD_INT 10
3120: PUSH
3121: LD_INT 11
3123: PUSH
3124: LD_INT 12
3126: PUSH
3127: LD_INT 13
3129: PUSH
3130: LD_INT 14
3132: PUSH
3133: LD_INT 15
3135: PUSH
3136: LD_INT 16
3138: PUSH
3139: LD_INT 17
3141: PUSH
3142: LD_INT 18
3144: PUSH
3145: LD_INT 19
3147: PUSH
3148: LD_INT 20
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 22
3156: PUSH
3157: LD_INT 23
3159: PUSH
3160: LD_INT 24
3162: PUSH
3163: LD_INT 25
3165: PUSH
3166: LD_INT 26
3168: PUSH
3169: LD_INT 28
3171: PUSH
3172: LD_INT 30
3174: PUSH
3175: LD_INT 31
3177: PUSH
3178: LD_INT 32
3180: PUSH
3181: LD_INT 36
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 101
3217: PUSH
3218: LD_INT 102
3220: PUSH
3221: LD_INT 103
3223: PUSH
3224: LD_INT 104
3226: PUSH
3227: LD_INT 105
3229: PUSH
3230: LD_INT 106
3232: PUSH
3233: LD_INT 107
3235: PUSH
3236: LD_INT 108
3238: PUSH
3239: LD_INT 109
3241: PUSH
3242: LD_INT 110
3244: PUSH
3245: LD_INT 111
3247: PUSH
3248: LD_INT 112
3250: PUSH
3251: LD_INT 114
3253: PUSH
3254: LD_INT 116
3256: PUSH
3257: LD_INT 117
3259: PUSH
3260: LD_INT 118
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: ST_TO_ADDR
3285: GO 5180
3287: LD_INT 11
3289: DOUBLE
3290: EQUAL
3291: IFTRUE 3295
3293: GO 3499
3295: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: LD_INT 5
3312: PUSH
3313: LD_INT 6
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: LD_INT 8
3321: PUSH
3322: LD_INT 9
3324: PUSH
3325: LD_INT 10
3327: PUSH
3328: LD_INT 11
3330: PUSH
3331: LD_INT 12
3333: PUSH
3334: LD_INT 13
3336: PUSH
3337: LD_INT 14
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 16
3345: PUSH
3346: LD_INT 17
3348: PUSH
3349: LD_INT 18
3351: PUSH
3352: LD_INT 19
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 23
3366: PUSH
3367: LD_INT 24
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 28
3378: PUSH
3379: LD_INT 30
3381: PUSH
3382: LD_INT 31
3384: PUSH
3385: LD_INT 32
3387: PUSH
3388: LD_INT 34
3390: PUSH
3391: LD_INT 36
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 101
3429: PUSH
3430: LD_INT 102
3432: PUSH
3433: LD_INT 103
3435: PUSH
3436: LD_INT 104
3438: PUSH
3439: LD_INT 105
3441: PUSH
3442: LD_INT 106
3444: PUSH
3445: LD_INT 107
3447: PUSH
3448: LD_INT 108
3450: PUSH
3451: LD_INT 109
3453: PUSH
3454: LD_INT 110
3456: PUSH
3457: LD_INT 111
3459: PUSH
3460: LD_INT 112
3462: PUSH
3463: LD_INT 114
3465: PUSH
3466: LD_INT 116
3468: PUSH
3469: LD_INT 117
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: ST_TO_ADDR
3497: GO 5180
3499: LD_INT 12
3501: DOUBLE
3502: EQUAL
3503: IFTRUE 3507
3505: GO 3727
3507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: LD_INT 5
3527: PUSH
3528: LD_INT 6
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: LD_INT 9
3539: PUSH
3540: LD_INT 10
3542: PUSH
3543: LD_INT 11
3545: PUSH
3546: LD_INT 12
3548: PUSH
3549: LD_INT 13
3551: PUSH
3552: LD_INT 14
3554: PUSH
3555: LD_INT 15
3557: PUSH
3558: LD_INT 16
3560: PUSH
3561: LD_INT 17
3563: PUSH
3564: LD_INT 18
3566: PUSH
3567: LD_INT 19
3569: PUSH
3570: LD_INT 20
3572: PUSH
3573: LD_INT 21
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 24
3584: PUSH
3585: LD_INT 25
3587: PUSH
3588: LD_INT 26
3590: PUSH
3591: LD_INT 27
3593: PUSH
3594: LD_INT 28
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 31
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 33
3608: PUSH
3609: LD_INT 34
3611: PUSH
3612: LD_INT 36
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 101
3653: PUSH
3654: LD_INT 102
3656: PUSH
3657: LD_INT 103
3659: PUSH
3660: LD_INT 104
3662: PUSH
3663: LD_INT 105
3665: PUSH
3666: LD_INT 106
3668: PUSH
3669: LD_INT 107
3671: PUSH
3672: LD_INT 108
3674: PUSH
3675: LD_INT 109
3677: PUSH
3678: LD_INT 110
3680: PUSH
3681: LD_INT 111
3683: PUSH
3684: LD_INT 112
3686: PUSH
3687: LD_INT 113
3689: PUSH
3690: LD_INT 114
3692: PUSH
3693: LD_INT 116
3695: PUSH
3696: LD_INT 117
3698: PUSH
3699: LD_INT 118
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: ST_TO_ADDR
3725: GO 5180
3727: LD_INT 13
3729: DOUBLE
3730: EQUAL
3731: IFTRUE 3735
3733: GO 3943
3735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: LD_INT 2
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 5
3755: PUSH
3756: LD_INT 8
3758: PUSH
3759: LD_INT 9
3761: PUSH
3762: LD_INT 10
3764: PUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: LD_INT 14
3773: PUSH
3774: LD_INT 15
3776: PUSH
3777: LD_INT 16
3779: PUSH
3780: LD_INT 17
3782: PUSH
3783: LD_INT 18
3785: PUSH
3786: LD_INT 19
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 24
3803: PUSH
3804: LD_INT 25
3806: PUSH
3807: LD_INT 26
3809: PUSH
3810: LD_INT 27
3812: PUSH
3813: LD_INT 28
3815: PUSH
3816: LD_INT 30
3818: PUSH
3819: LD_INT 31
3821: PUSH
3822: LD_INT 32
3824: PUSH
3825: LD_INT 33
3827: PUSH
3828: LD_INT 34
3830: PUSH
3831: LD_INT 36
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 101
3869: PUSH
3870: LD_INT 102
3872: PUSH
3873: LD_INT 103
3875: PUSH
3876: LD_INT 104
3878: PUSH
3879: LD_INT 105
3881: PUSH
3882: LD_INT 106
3884: PUSH
3885: LD_INT 107
3887: PUSH
3888: LD_INT 108
3890: PUSH
3891: LD_INT 109
3893: PUSH
3894: LD_INT 110
3896: PUSH
3897: LD_INT 111
3899: PUSH
3900: LD_INT 112
3902: PUSH
3903: LD_INT 113
3905: PUSH
3906: LD_INT 114
3908: PUSH
3909: LD_INT 116
3911: PUSH
3912: LD_INT 117
3914: PUSH
3915: LD_INT 118
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: ST_TO_ADDR
3941: GO 5180
3943: LD_INT 14
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 4175
3951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: LD_INT 6
3974: PUSH
3975: LD_INT 7
3977: PUSH
3978: LD_INT 8
3980: PUSH
3981: LD_INT 9
3983: PUSH
3984: LD_INT 10
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 12
3992: PUSH
3993: LD_INT 13
3995: PUSH
3996: LD_INT 14
3998: PUSH
3999: LD_INT 15
4001: PUSH
4002: LD_INT 16
4004: PUSH
4005: LD_INT 17
4007: PUSH
4008: LD_INT 18
4010: PUSH
4011: LD_INT 19
4013: PUSH
4014: LD_INT 20
4016: PUSH
4017: LD_INT 21
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 23
4025: PUSH
4026: LD_INT 24
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 26
4034: PUSH
4035: LD_INT 27
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 29
4043: PUSH
4044: LD_INT 30
4046: PUSH
4047: LD_INT 31
4049: PUSH
4050: LD_INT 32
4052: PUSH
4053: LD_INT 33
4055: PUSH
4056: LD_INT 34
4058: PUSH
4059: LD_INT 36
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 101
4101: PUSH
4102: LD_INT 102
4104: PUSH
4105: LD_INT 103
4107: PUSH
4108: LD_INT 104
4110: PUSH
4111: LD_INT 105
4113: PUSH
4114: LD_INT 106
4116: PUSH
4117: LD_INT 107
4119: PUSH
4120: LD_INT 108
4122: PUSH
4123: LD_INT 109
4125: PUSH
4126: LD_INT 110
4128: PUSH
4129: LD_INT 111
4131: PUSH
4132: LD_INT 112
4134: PUSH
4135: LD_INT 113
4137: PUSH
4138: LD_INT 114
4140: PUSH
4141: LD_INT 116
4143: PUSH
4144: LD_INT 117
4146: PUSH
4147: LD_INT 118
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 5180
4175: LD_INT 15
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4407
4183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: LD_INT 6
4206: PUSH
4207: LD_INT 7
4209: PUSH
4210: LD_INT 8
4212: PUSH
4213: LD_INT 9
4215: PUSH
4216: LD_INT 10
4218: PUSH
4219: LD_INT 11
4221: PUSH
4222: LD_INT 12
4224: PUSH
4225: LD_INT 13
4227: PUSH
4228: LD_INT 14
4230: PUSH
4231: LD_INT 15
4233: PUSH
4234: LD_INT 16
4236: PUSH
4237: LD_INT 17
4239: PUSH
4240: LD_INT 18
4242: PUSH
4243: LD_INT 19
4245: PUSH
4246: LD_INT 20
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: LD_INT 22
4254: PUSH
4255: LD_INT 23
4257: PUSH
4258: LD_INT 24
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 26
4266: PUSH
4267: LD_INT 27
4269: PUSH
4270: LD_INT 28
4272: PUSH
4273: LD_INT 29
4275: PUSH
4276: LD_INT 30
4278: PUSH
4279: LD_INT 31
4281: PUSH
4282: LD_INT 32
4284: PUSH
4285: LD_INT 33
4287: PUSH
4288: LD_INT 34
4290: PUSH
4291: LD_INT 36
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 101
4333: PUSH
4334: LD_INT 102
4336: PUSH
4337: LD_INT 103
4339: PUSH
4340: LD_INT 104
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 106
4348: PUSH
4349: LD_INT 107
4351: PUSH
4352: LD_INT 108
4354: PUSH
4355: LD_INT 109
4357: PUSH
4358: LD_INT 110
4360: PUSH
4361: LD_INT 111
4363: PUSH
4364: LD_INT 112
4366: PUSH
4367: LD_INT 113
4369: PUSH
4370: LD_INT 114
4372: PUSH
4373: LD_INT 116
4375: PUSH
4376: LD_INT 117
4378: PUSH
4379: LD_INT 118
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 5180
4407: LD_INT 16
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4551
4415: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: LD_INT 5
4429: PUSH
4430: LD_INT 7
4432: PUSH
4433: LD_INT 11
4435: PUSH
4436: LD_INT 12
4438: PUSH
4439: LD_INT 15
4441: PUSH
4442: LD_INT 16
4444: PUSH
4445: LD_INT 20
4447: PUSH
4448: LD_INT 21
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 23
4456: PUSH
4457: LD_INT 25
4459: PUSH
4460: LD_INT 26
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 31
4468: PUSH
4469: LD_INT 32
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 34
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 101
4501: PUSH
4502: LD_INT 102
4504: PUSH
4505: LD_INT 103
4507: PUSH
4508: LD_INT 106
4510: PUSH
4511: LD_INT 108
4513: PUSH
4514: LD_INT 112
4516: PUSH
4517: LD_INT 113
4519: PUSH
4520: LD_INT 114
4522: PUSH
4523: LD_INT 116
4525: PUSH
4526: LD_INT 117
4528: PUSH
4529: LD_INT 118
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
4549: GO 5180
4551: LD_INT 17
4553: DOUBLE
4554: EQUAL
4555: IFTRUE 4559
4557: GO 4783
4559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4560: LD_ADDR_VAR 0 2
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: LD_INT 5
4579: PUSH
4580: LD_INT 6
4582: PUSH
4583: LD_INT 7
4585: PUSH
4586: LD_INT 8
4588: PUSH
4589: LD_INT 9
4591: PUSH
4592: LD_INT 10
4594: PUSH
4595: LD_INT 11
4597: PUSH
4598: LD_INT 12
4600: PUSH
4601: LD_INT 13
4603: PUSH
4604: LD_INT 14
4606: PUSH
4607: LD_INT 15
4609: PUSH
4610: LD_INT 16
4612: PUSH
4613: LD_INT 17
4615: PUSH
4616: LD_INT 18
4618: PUSH
4619: LD_INT 19
4621: PUSH
4622: LD_INT 20
4624: PUSH
4625: LD_INT 21
4627: PUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 23
4633: PUSH
4634: LD_INT 24
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 26
4642: PUSH
4643: LD_INT 27
4645: PUSH
4646: LD_INT 28
4648: PUSH
4649: LD_INT 29
4651: PUSH
4652: LD_INT 30
4654: PUSH
4655: LD_INT 31
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 33
4663: PUSH
4664: LD_INT 34
4666: PUSH
4667: LD_INT 36
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 101
4709: PUSH
4710: LD_INT 102
4712: PUSH
4713: LD_INT 103
4715: PUSH
4716: LD_INT 104
4718: PUSH
4719: LD_INT 105
4721: PUSH
4722: LD_INT 106
4724: PUSH
4725: LD_INT 107
4727: PUSH
4728: LD_INT 108
4730: PUSH
4731: LD_INT 109
4733: PUSH
4734: LD_INT 110
4736: PUSH
4737: LD_INT 111
4739: PUSH
4740: LD_INT 112
4742: PUSH
4743: LD_INT 113
4745: PUSH
4746: LD_INT 114
4748: PUSH
4749: LD_INT 116
4751: PUSH
4752: LD_INT 117
4754: PUSH
4755: LD_INT 118
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5180
4783: LD_INT 18
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4939
4791: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 7
4808: PUSH
4809: LD_INT 11
4811: PUSH
4812: LD_INT 12
4814: PUSH
4815: LD_INT 15
4817: PUSH
4818: LD_INT 16
4820: PUSH
4821: LD_INT 20
4823: PUSH
4824: LD_INT 21
4826: PUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 23
4832: PUSH
4833: LD_INT 25
4835: PUSH
4836: LD_INT 26
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 31
4844: PUSH
4845: LD_INT 32
4847: PUSH
4848: LD_INT 33
4850: PUSH
4851: LD_INT 34
4853: PUSH
4854: LD_INT 35
4856: PUSH
4857: LD_INT 36
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: PUSH
4883: LD_INT 101
4885: PUSH
4886: LD_INT 102
4888: PUSH
4889: LD_INT 103
4891: PUSH
4892: LD_INT 106
4894: PUSH
4895: LD_INT 108
4897: PUSH
4898: LD_INT 112
4900: PUSH
4901: LD_INT 113
4903: PUSH
4904: LD_INT 114
4906: PUSH
4907: LD_INT 115
4909: PUSH
4910: LD_INT 116
4912: PUSH
4913: LD_INT 117
4915: PUSH
4916: LD_INT 118
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5180
4939: LD_INT 19
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5179
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 6
4970: PUSH
4971: LD_INT 7
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: LD_INT 9
4979: PUSH
4980: LD_INT 10
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: LD_INT 15
4997: PUSH
4998: LD_INT 16
5000: PUSH
5001: LD_INT 17
5003: PUSH
5004: LD_INT 18
5006: PUSH
5007: LD_INT 19
5009: PUSH
5010: LD_INT 20
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 23
5021: PUSH
5022: LD_INT 24
5024: PUSH
5025: LD_INT 25
5027: PUSH
5028: LD_INT 26
5030: PUSH
5031: LD_INT 27
5033: PUSH
5034: LD_INT 28
5036: PUSH
5037: LD_INT 29
5039: PUSH
5040: LD_INT 30
5042: PUSH
5043: LD_INT 31
5045: PUSH
5046: LD_INT 32
5048: PUSH
5049: LD_INT 33
5051: PUSH
5052: LD_INT 34
5054: PUSH
5055: LD_INT 35
5057: PUSH
5058: LD_INT 36
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_INT 101
5101: PUSH
5102: LD_INT 102
5104: PUSH
5105: LD_INT 103
5107: PUSH
5108: LD_INT 104
5110: PUSH
5111: LD_INT 105
5113: PUSH
5114: LD_INT 106
5116: PUSH
5117: LD_INT 107
5119: PUSH
5120: LD_INT 108
5122: PUSH
5123: LD_INT 109
5125: PUSH
5126: LD_INT 110
5128: PUSH
5129: LD_INT 111
5131: PUSH
5132: LD_INT 112
5134: PUSH
5135: LD_INT 113
5137: PUSH
5138: LD_INT 114
5140: PUSH
5141: LD_INT 115
5143: PUSH
5144: LD_INT 116
5146: PUSH
5147: LD_INT 117
5149: PUSH
5150: LD_INT 118
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5180
5179: POP
// end else
5180: GO 5411
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: LD_INT 2
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 5
5201: PUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: LD_INT 9
5213: PUSH
5214: LD_INT 10
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: LD_INT 12
5222: PUSH
5223: LD_INT 13
5225: PUSH
5226: LD_INT 14
5228: PUSH
5229: LD_INT 15
5231: PUSH
5232: LD_INT 16
5234: PUSH
5235: LD_INT 17
5237: PUSH
5238: LD_INT 18
5240: PUSH
5241: LD_INT 19
5243: PUSH
5244: LD_INT 20
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_INT 23
5255: PUSH
5256: LD_INT 24
5258: PUSH
5259: LD_INT 25
5261: PUSH
5262: LD_INT 26
5264: PUSH
5265: LD_INT 27
5267: PUSH
5268: LD_INT 28
5270: PUSH
5271: LD_INT 29
5273: PUSH
5274: LD_INT 30
5276: PUSH
5277: LD_INT 31
5279: PUSH
5280: LD_INT 32
5282: PUSH
5283: LD_INT 33
5285: PUSH
5286: LD_INT 34
5288: PUSH
5289: LD_INT 35
5291: PUSH
5292: LD_INT 36
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 101
5335: PUSH
5336: LD_INT 102
5338: PUSH
5339: LD_INT 103
5341: PUSH
5342: LD_INT 104
5344: PUSH
5345: LD_INT 105
5347: PUSH
5348: LD_INT 106
5350: PUSH
5351: LD_INT 107
5353: PUSH
5354: LD_INT 108
5356: PUSH
5357: LD_INT 109
5359: PUSH
5360: LD_INT 110
5362: PUSH
5363: LD_INT 111
5365: PUSH
5366: LD_INT 112
5368: PUSH
5369: LD_INT 113
5371: PUSH
5372: LD_INT 114
5374: PUSH
5375: LD_INT 115
5377: PUSH
5378: LD_INT 116
5380: PUSH
5381: LD_INT 117
5383: PUSH
5384: LD_INT 118
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: ST_TO_ADDR
// if result then
5411: LD_VAR 0 2
5415: IFFALSE 6201
// begin normal :=  ;
5417: LD_ADDR_VAR 0 5
5421: PUSH
5422: LD_STRING 
5424: ST_TO_ADDR
// hardcore :=  ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_STRING 
5432: ST_TO_ADDR
// active :=  ;
5433: LD_ADDR_VAR 0 7
5437: PUSH
5438: LD_STRING 
5440: ST_TO_ADDR
// for i = 1 to normalCounter do
5441: LD_ADDR_VAR 0 8
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 3
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5558
// begin tmp := 0 ;
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_STRING 0
5466: ST_TO_ADDR
// if result [ 1 ] then
5467: LD_VAR 0 2
5471: PUSH
5472: LD_INT 1
5474: ARRAY
5475: IFFALSE 5540
// if result [ 1 ] [ 1 ] = i then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PUSH
5490: LD_VAR 0 8
5494: EQUAL
5495: IFFALSE 5540
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5497: LD_ADDR_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 3
5526: PPUSH
5527: CALL_OW 1
5531: ST_TO_ADDR
// tmp := 1 ;
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_STRING 1
5539: ST_TO_ADDR
// end ; normal := normal & tmp ;
5540: LD_ADDR_VAR 0 5
5544: PUSH
5545: LD_VAR 0 5
5549: PUSH
5550: LD_VAR 0 3
5554: STR
5555: ST_TO_ADDR
// end ;
5556: GO 5456
5558: POP
5559: POP
// for i = 1 to hardcoreCounter do
5560: LD_ADDR_VAR 0 8
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_EXP 4
5574: PUSH
5575: FOR_TO
5576: IFFALSE 5681
// begin tmp := 0 ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_STRING 0
5585: ST_TO_ADDR
// if result [ 2 ] then
5586: LD_VAR 0 2
5590: PUSH
5591: LD_INT 2
5593: ARRAY
5594: IFFALSE 5663
// if result [ 2 ] [ 1 ] = 100 + i then
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 2
5603: ARRAY
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PUSH
5609: LD_INT 100
5611: PUSH
5612: LD_VAR 0 8
5616: PLUS
5617: EQUAL
5618: IFFALSE 5663
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_VAR 0 2
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: CALL_OW 3
5649: PPUSH
5650: CALL_OW 1
5654: ST_TO_ADDR
// tmp := 1 ;
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_STRING 1
5662: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5663: LD_ADDR_VAR 0 6
5667: PUSH
5668: LD_VAR 0 6
5672: PUSH
5673: LD_VAR 0 3
5677: STR
5678: ST_TO_ADDR
// end ;
5679: GO 5575
5681: POP
5682: POP
// if isGameLoad then
5683: LD_VAR 0 1
5687: IFFALSE 6162
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5689: LD_ADDR_VAR 0 4
5693: PUSH
5694: LD_EXP 7
5698: PUSH
5699: LD_EXP 6
5703: PUSH
5704: LD_EXP 8
5708: PUSH
5709: LD_EXP 5
5713: PUSH
5714: LD_EXP 9
5718: PUSH
5719: LD_EXP 10
5723: PUSH
5724: LD_EXP 11
5728: PUSH
5729: LD_EXP 12
5733: PUSH
5734: LD_EXP 13
5738: PUSH
5739: LD_EXP 14
5743: PUSH
5744: LD_EXP 15
5748: PUSH
5749: LD_EXP 16
5753: PUSH
5754: LD_EXP 17
5758: PUSH
5759: LD_EXP 18
5763: PUSH
5764: LD_EXP 26
5768: PUSH
5769: LD_EXP 27
5773: PUSH
5774: LD_EXP 28
5778: PUSH
5779: LD_EXP 29
5783: PUSH
5784: LD_EXP 31
5788: PUSH
5789: LD_EXP 32
5793: PUSH
5794: LD_EXP 33
5798: PUSH
5799: LD_EXP 36
5803: PUSH
5804: LD_EXP 38
5808: PUSH
5809: LD_EXP 39
5813: PUSH
5814: LD_EXP 40
5818: PUSH
5819: LD_EXP 42
5823: PUSH
5824: LD_EXP 43
5828: PUSH
5829: LD_EXP 46
5833: PUSH
5834: LD_EXP 47
5838: PUSH
5839: LD_EXP 48
5843: PUSH
5844: LD_EXP 49
5848: PUSH
5849: LD_EXP 50
5853: PUSH
5854: LD_EXP 51
5858: PUSH
5859: LD_EXP 52
5863: PUSH
5864: LD_EXP 53
5868: PUSH
5869: LD_EXP 54
5873: PUSH
5874: LD_EXP 19
5878: PUSH
5879: LD_EXP 20
5883: PUSH
5884: LD_EXP 23
5888: PUSH
5889: LD_EXP 24
5893: PUSH
5894: LD_EXP 25
5898: PUSH
5899: LD_EXP 21
5903: PUSH
5904: LD_EXP 22
5908: PUSH
5909: LD_EXP 30
5913: PUSH
5914: LD_EXP 34
5918: PUSH
5919: LD_EXP 35
5923: PUSH
5924: LD_EXP 37
5928: PUSH
5929: LD_EXP 41
5933: PUSH
5934: LD_EXP 44
5938: PUSH
5939: LD_EXP 45
5943: PUSH
5944: LD_EXP 55
5948: PUSH
5949: LD_EXP 56
5953: PUSH
5954: LD_EXP 57
5958: PUSH
5959: LD_EXP 58
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: ST_TO_ADDR
// tmp :=  ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_STRING 
6027: ST_TO_ADDR
// for i = 1 to normalCounter do
6028: LD_ADDR_VAR 0 8
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 3
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6080
// begin if flags [ i ] then
6046: LD_VAR 0 4
6050: PUSH
6051: LD_VAR 0 8
6055: ARRAY
6056: IFFALSE 6078
// tmp := tmp & i & ; ;
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 3
6067: PUSH
6068: LD_VAR 0 8
6072: STR
6073: PUSH
6074: LD_STRING ;
6076: STR
6077: ST_TO_ADDR
// end ;
6078: GO 6043
6080: POP
6081: POP
// for i = 1 to hardcoreCounter do
6082: LD_ADDR_VAR 0 8
6086: PUSH
6087: DOUBLE
6088: LD_INT 1
6090: DEC
6091: ST_TO_ADDR
6092: LD_EXP 4
6096: PUSH
6097: FOR_TO
6098: IFFALSE 6144
// begin if flags [ normalCounter + i ] then
6100: LD_VAR 0 4
6104: PUSH
6105: LD_EXP 3
6109: PUSH
6110: LD_VAR 0 8
6114: PLUS
6115: ARRAY
6116: IFFALSE 6142
// tmp := tmp & ( 100 + i ) & ; ;
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 100
6130: PUSH
6131: LD_VAR 0 8
6135: PLUS
6136: STR
6137: PUSH
6138: LD_STRING ;
6140: STR
6141: ST_TO_ADDR
// end ;
6142: GO 6097
6144: POP
6145: POP
// if tmp then
6146: LD_VAR 0 3
6150: IFFALSE 6162
// active := tmp ;
6152: LD_ADDR_VAR 0 7
6156: PUSH
6157: LD_VAR 0 3
6161: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6162: LD_STRING getStreamItemsFromMission("
6164: PUSH
6165: LD_VAR 0 5
6169: STR
6170: PUSH
6171: LD_STRING ","
6173: STR
6174: PUSH
6175: LD_VAR 0 6
6179: STR
6180: PUSH
6181: LD_STRING ","
6183: STR
6184: PUSH
6185: LD_VAR 0 7
6189: STR
6190: PUSH
6191: LD_STRING ")
6193: STR
6194: PPUSH
6195: CALL_OW 559
// end else
6199: GO 6208
// ToLua ( getStreamItemsFromMission("","","") ) ;
6201: LD_STRING getStreamItemsFromMission("","","")
6203: PPUSH
6204: CALL_OW 559
// end ;
6208: LD_VAR 0 2
6212: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6213: LD_EXP 2
6217: PUSH
6218: LD_EXP 7
6222: AND
6223: IFFALSE 6347
6225: GO 6227
6227: DISABLE
6228: LD_INT 0
6230: PPUSH
6231: PPUSH
// begin enable ;
6232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_OWVAR 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 34
6255: PUSH
6256: LD_INT 7
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 34
6265: PUSH
6266: LD_INT 45
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 34
6275: PUSH
6276: LD_INT 28
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 34
6285: PUSH
6286: LD_INT 47
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not tmp then
6309: LD_VAR 0 2
6313: NOT
6314: IFFALSE 6318
// exit ;
6316: GO 6347
// for i in tmp do
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 2
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6345
// begin SetLives ( i , 0 ) ;
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 234
// end ;
6343: GO 6328
6345: POP
6346: POP
// end ;
6347: PPOPN 2
6349: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6350: LD_EXP 2
6354: PUSH
6355: LD_EXP 8
6359: AND
6360: IFFALSE 6444
6362: GO 6364
6364: DISABLE
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
// begin enable ;
6369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_INT 22
6377: PUSH
6378: LD_OWVAR 2
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 69
6405: ST_TO_ADDR
// if not tmp then
6406: LD_VAR 0 2
6410: NOT
6411: IFFALSE 6415
// exit ;
6413: GO 6444
// for i in tmp do
6415: LD_ADDR_VAR 0 1
6419: PUSH
6420: LD_VAR 0 2
6424: PUSH
6425: FOR_IN
6426: IFFALSE 6442
// begin SetLives ( i , 0 ) ;
6428: LD_VAR 0 1
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL_OW 234
// end ;
6440: GO 6425
6442: POP
6443: POP
// end ;
6444: PPOPN 2
6446: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6447: LD_EXP 2
6451: PUSH
6452: LD_EXP 5
6456: AND
6457: IFFALSE 6550
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
// begin enable ;
6465: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 22
6473: PUSH
6474: LD_OWVAR 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 25
6498: PUSH
6499: LD_INT 9
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 25
6508: PUSH
6509: LD_INT 8
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 69
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6548
// begin SetClass ( i , 1 ) ;
6534: LD_VAR 0 1
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: CALL_OW 336
// end ;
6546: GO 6531
6548: POP
6549: POP
// end ;
6550: PPOPN 1
6552: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6553: LD_EXP 2
6557: PUSH
6558: LD_EXP 6
6562: AND
6563: PUSH
6564: LD_OWVAR 65
6568: PUSH
6569: LD_INT 7
6571: LESS
6572: AND
6573: IFFALSE 6587
6575: GO 6577
6577: DISABLE
// begin enable ;
6578: ENABLE
// game_speed := 7 ;
6579: LD_ADDR_OWVAR 65
6583: PUSH
6584: LD_INT 7
6586: ST_TO_ADDR
// end ;
6587: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6588: LD_EXP 2
6592: PUSH
6593: LD_EXP 9
6597: AND
6598: IFFALSE 6800
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
6607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 81
6615: PUSH
6616: LD_OWVAR 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// if not tmp then
6644: LD_VAR 0 3
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6800
// if tmp > 5 then
6653: LD_VAR 0 3
6657: PUSH
6658: LD_INT 5
6660: GREATER
6661: IFFALSE 6673
// k := 5 else
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 5
6670: ST_TO_ADDR
6671: GO 6683
// k := tmp ;
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ST_TO_ADDR
// for i := 1 to k do
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: DOUBLE
6689: LD_INT 1
6691: DEC
6692: ST_TO_ADDR
6693: LD_VAR 0 2
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6798
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: PPUSH
6712: LD_VAR 0 1
6716: PUSH
6717: LD_INT 4
6719: MOD
6720: PUSH
6721: LD_INT 1
6723: PLUS
6724: PPUSH
6725: CALL_OW 259
6729: PUSH
6730: LD_INT 10
6732: LESS
6733: IFFALSE 6796
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6735: LD_VAR 0 3
6739: PUSH
6740: LD_VAR 0 1
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 4
6753: MOD
6754: PUSH
6755: LD_INT 1
6757: PLUS
6758: PPUSH
6759: LD_VAR 0 3
6763: PUSH
6764: LD_VAR 0 1
6768: ARRAY
6769: PPUSH
6770: LD_VAR 0 1
6774: PUSH
6775: LD_INT 4
6777: MOD
6778: PUSH
6779: LD_INT 1
6781: PLUS
6782: PPUSH
6783: CALL_OW 259
6787: PUSH
6788: LD_INT 1
6790: PLUS
6791: PPUSH
6792: CALL_OW 237
6796: GO 6698
6798: POP
6799: POP
// end ;
6800: PPOPN 3
6802: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6803: LD_EXP 2
6807: PUSH
6808: LD_EXP 10
6812: AND
6813: IFFALSE 6833
6815: GO 6817
6817: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6818: LD_INT 4
6820: PPUSH
6821: LD_OWVAR 2
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 324
6833: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6834: LD_EXP 2
6838: PUSH
6839: LD_EXP 39
6843: AND
6844: IFFALSE 6864
6846: GO 6848
6848: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6849: LD_INT 19
6851: PPUSH
6852: LD_OWVAR 2
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 324
6864: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6865: LD_EXP 2
6869: PUSH
6870: LD_EXP 11
6874: AND
6875: IFFALSE 6977
6877: GO 6879
6879: DISABLE
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
// begin enable ;
6884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_OWVAR 2
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 11
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: LD_INT 30
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: ST_TO_ADDR
// if not tmp then
6939: LD_VAR 0 2
6943: NOT
6944: IFFALSE 6948
// exit ;
6946: GO 6977
// for i in tmp do
6948: LD_ADDR_VAR 0 1
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: FOR_IN
6959: IFFALSE 6975
// begin SetLives ( i , 0 ) ;
6961: LD_VAR 0 1
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 234
// end ;
6973: GO 6958
6975: POP
6976: POP
// end ;
6977: PPOPN 2
6979: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6980: LD_EXP 2
6984: PUSH
6985: LD_EXP 12
6989: AND
6990: IFFALSE 7010
6992: GO 6994
6994: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6995: LD_INT 32
6997: PPUSH
6998: LD_OWVAR 2
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 324
7010: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7011: LD_EXP 2
7015: PUSH
7016: LD_EXP 13
7020: AND
7021: IFFALSE 7202
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_OWVAR 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 33
7050: PUSH
7051: LD_INT 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: ST_TO_ADDR
// if not tmp then
7067: LD_VAR 0 2
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7202
// side := 0 ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// for i := 1 to 8 do
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: DOUBLE
7090: LD_INT 1
7092: DEC
7093: ST_TO_ADDR
7094: LD_INT 8
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7146
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7100: LD_OWVAR 2
7104: PUSH
7105: LD_VAR 0 1
7109: NONEQUAL
7110: PUSH
7111: LD_OWVAR 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 81
7125: PUSH
7126: LD_INT 2
7128: EQUAL
7129: AND
7130: IFFALSE 7144
// begin side := i ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// break ;
7142: GO 7146
// end ;
7144: GO 7097
7146: POP
7147: POP
// if not side then
7148: LD_VAR 0 3
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7202
// for i := 1 to tmp do
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 2
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7200
// if Prob ( 60 ) then
7175: LD_INT 60
7177: PPUSH
7178: CALL_OW 13
7182: IFFALSE 7198
// SetSide ( i , side ) ;
7184: LD_VAR 0 1
7188: PPUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: CALL_OW 235
7198: GO 7172
7200: POP
7201: POP
// end ;
7202: PPOPN 3
7204: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7205: LD_EXP 2
7209: PUSH
7210: LD_EXP 15
7214: AND
7215: IFFALSE 7334
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7223: LD_ADDR_VAR 0 1
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_OWVAR 2
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 21
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: LD_INT 23
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PPUSH
7272: CALL_OW 69
7276: PUSH
7277: FOR_IN
7278: IFFALSE 7332
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 257
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: IN
7308: IFFALSE 7330
// SetClass ( un , rand ( 1 , 4 ) ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 4
7320: PPUSH
7321: CALL_OW 12
7325: PPUSH
7326: CALL_OW 336
7330: GO 7277
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7337: LD_EXP 2
7341: PUSH
7342: LD_EXP 14
7346: AND
7347: IFFALSE 7426
7349: GO 7351
7351: DISABLE
7352: LD_INT 0
7354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_OWVAR 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: ST_TO_ADDR
// if not tmp then
7391: LD_VAR 0 1
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 7426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7400: LD_VAR 0 1
7404: PUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 12
7417: ARRAY
7418: PPUSH
7419: LD_INT 100
7421: PPUSH
7422: CALL_OW 234
// end ;
7426: PPOPN 1
7428: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7429: LD_EXP 2
7433: PUSH
7434: LD_EXP 16
7438: AND
7439: IFFALSE 7537
7441: GO 7443
7443: DISABLE
7444: LD_INT 0
7446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_OWVAR 2
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if not tmp then
7483: LD_VAR 0 1
7487: NOT
7488: IFFALSE 7492
// exit ;
7490: GO 7537
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7492: LD_VAR 0 1
7496: PUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 12
7509: ARRAY
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_INT 4
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: LD_INT 3000
7524: PPUSH
7525: LD_INT 9000
7527: PPUSH
7528: CALL_OW 12
7532: PPUSH
7533: CALL_OW 492
// end ;
7537: PPOPN 1
7539: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7540: LD_EXP 2
7544: PUSH
7545: LD_EXP 17
7549: AND
7550: IFFALSE 7570
7552: GO 7554
7554: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7555: LD_INT 1
7557: PPUSH
7558: LD_OWVAR 2
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL_OW 324
7570: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7571: LD_EXP 2
7575: PUSH
7576: LD_EXP 18
7580: AND
7581: IFFALSE 7664
7583: GO 7585
7585: DISABLE
7586: LD_INT 0
7588: PPUSH
7589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_OWVAR 2
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 21
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if not tmp then
7626: LD_VAR 0 2
7630: NOT
7631: IFFALSE 7635
// exit ;
7633: GO 7664
// for i in tmp do
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: FOR_IN
7646: IFFALSE 7662
// SetBLevel ( i , 10 ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_INT 10
7655: PPUSH
7656: CALL_OW 241
7660: GO 7645
7662: POP
7663: POP
// end ;
7664: PPOPN 2
7666: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7667: LD_EXP 2
7671: PUSH
7672: LD_EXP 19
7676: AND
7677: IFFALSE 7788
7679: GO 7681
7681: DISABLE
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 3
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7788
// un := tmp [ rand ( 1 , tmp ) ] ;
7732: LD_ADDR_VAR 0 2
7736: PUSH
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: PPUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 12
7754: ARRAY
7755: ST_TO_ADDR
// if Crawls ( un ) then
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 318
7765: IFFALSE 7776
// ComWalk ( un ) ;
7767: LD_VAR 0 2
7771: PPUSH
7772: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 5
7783: PPUSH
7784: CALL_OW 336
// end ;
7788: PPOPN 3
7790: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7791: LD_EXP 2
7795: PUSH
7796: LD_EXP 20
7800: AND
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 4
7809: LESS
7810: AND
7811: IFFALSE 7830
7813: GO 7815
7815: DISABLE
// begin Difficulty := Difficulty + 1 ;
7816: LD_ADDR_OWVAR 67
7820: PUSH
7821: LD_OWVAR 67
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ST_TO_ADDR
// end ;
7830: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7831: LD_EXP 2
7835: PUSH
7836: LD_EXP 21
7840: AND
7841: IFFALSE 7944
7843: GO 7845
7845: DISABLE
7846: LD_INT 0
7848: PPUSH
// begin for i := 1 to 5 do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_INT 5
7861: PUSH
7862: FOR_TO
7863: IFFALSE 7942
// begin uc_nation := nation_nature ;
7865: LD_ADDR_OWVAR 21
7869: PUSH
7870: LD_INT 0
7872: ST_TO_ADDR
// uc_side := 0 ;
7873: LD_ADDR_OWVAR 20
7877: PUSH
7878: LD_INT 0
7880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7881: LD_ADDR_OWVAR 29
7885: PUSH
7886: LD_INT 12
7888: PUSH
7889: LD_INT 12
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: ST_TO_ADDR
// hc_agressivity := 20 ;
7896: LD_ADDR_OWVAR 35
7900: PUSH
7901: LD_INT 20
7903: ST_TO_ADDR
// hc_class := class_tiger ;
7904: LD_ADDR_OWVAR 28
7908: PUSH
7909: LD_INT 14
7911: ST_TO_ADDR
// hc_gallery :=  ;
7912: LD_ADDR_OWVAR 33
7916: PUSH
7917: LD_STRING 
7919: ST_TO_ADDR
// hc_name :=  ;
7920: LD_ADDR_OWVAR 26
7924: PUSH
7925: LD_STRING 
7927: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7928: CALL_OW 44
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 51
// end ;
7940: GO 7862
7942: POP
7943: POP
// end ;
7944: PPOPN 1
7946: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7947: LD_EXP 2
7951: PUSH
7952: LD_EXP 22
7956: AND
7957: IFFALSE 7966
7959: GO 7961
7961: DISABLE
// StreamSibBomb ;
7962: CALL 7967 0 0
7966: END
// export function StreamSibBomb ; var i , x , y ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// result := false ;
7973: LD_ADDR_VAR 0 1
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// for i := 1 to 16 do
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: DOUBLE
7987: LD_INT 1
7989: DEC
7990: ST_TO_ADDR
7991: LD_INT 16
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8194
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_INT 10
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 40
8013: PUSH
8014: LD_INT 50
8016: PUSH
8017: LD_INT 60
8019: PUSH
8020: LD_INT 70
8022: PUSH
8023: LD_INT 80
8025: PUSH
8026: LD_INT 90
8028: PUSH
8029: LD_INT 100
8031: PUSH
8032: LD_INT 110
8034: PUSH
8035: LD_INT 120
8037: PUSH
8038: LD_INT 130
8040: PUSH
8041: LD_INT 140
8043: PUSH
8044: LD_INT 150
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 1
8066: PPUSH
8067: LD_INT 15
8069: PPUSH
8070: CALL_OW 12
8074: ARRAY
8075: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_INT 10
8083: PUSH
8084: LD_INT 20
8086: PUSH
8087: LD_INT 30
8089: PUSH
8090: LD_INT 40
8092: PUSH
8093: LD_INT 50
8095: PUSH
8096: LD_INT 60
8098: PUSH
8099: LD_INT 70
8101: PUSH
8102: LD_INT 80
8104: PUSH
8105: LD_INT 90
8107: PUSH
8108: LD_INT 100
8110: PUSH
8111: LD_INT 110
8113: PUSH
8114: LD_INT 120
8116: PUSH
8117: LD_INT 130
8119: PUSH
8120: LD_INT 140
8122: PUSH
8123: LD_INT 150
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 1
8145: PPUSH
8146: LD_INT 15
8148: PPUSH
8149: CALL_OW 12
8153: ARRAY
8154: ST_TO_ADDR
// if ValidHex ( x , y ) then
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_VAR 0 4
8164: PPUSH
8165: CALL_OW 488
8169: IFFALSE 8192
// begin result := [ x , y ] ;
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 3
8180: PUSH
8181: LD_VAR 0 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// break ;
8190: GO 8194
// end ; end ;
8192: GO 7994
8194: POP
8195: POP
// if result then
8196: LD_VAR 0 1
8200: IFFALSE 8260
// begin ToLua ( playSibBomb() ) ;
8202: LD_STRING playSibBomb()
8204: PPUSH
8205: CALL_OW 559
// wait ( 0 0$14 ) ;
8209: LD_INT 490
8211: PPUSH
8212: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8216: LD_VAR 0 1
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_VAR 0 1
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PPUSH
8234: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8238: LD_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_INT 2
8254: ARRAY
8255: PPUSH
8256: CALL_OW 429
// end ; end ;
8260: LD_VAR 0 1
8264: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8265: LD_EXP 2
8269: PUSH
8270: LD_EXP 24
8274: AND
8275: IFFALSE 8287
8277: GO 8279
8279: DISABLE
// YouLost (  ) ;
8280: LD_STRING 
8282: PPUSH
8283: CALL_OW 104
8287: END
// every 0 0$1 trigger StreamModeActive and sFog do
8288: LD_EXP 2
8292: PUSH
8293: LD_EXP 23
8297: AND
8298: IFFALSE 8312
8300: GO 8302
8302: DISABLE
// FogOff ( your_side ) ;
8303: LD_OWVAR 2
8307: PPUSH
8308: CALL_OW 344
8312: END
// every 0 0$1 trigger StreamModeActive and sSun do
8313: LD_EXP 2
8317: PUSH
8318: LD_EXP 25
8322: AND
8323: IFFALSE 8351
8325: GO 8327
8327: DISABLE
// begin solar_recharge_percent := 0 ;
8328: LD_ADDR_OWVAR 79
8332: PUSH
8333: LD_INT 0
8335: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8336: LD_INT 10500
8338: PPUSH
8339: CALL_OW 67
// solar_recharge_percent := 100 ;
8343: LD_ADDR_OWVAR 79
8347: PUSH
8348: LD_INT 100
8350: ST_TO_ADDR
// end ;
8351: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8352: LD_EXP 2
8356: PUSH
8357: LD_EXP 26
8361: AND
8362: IFFALSE 8601
8364: GO 8366
8366: DISABLE
8367: LD_INT 0
8369: PPUSH
8370: PPUSH
8371: PPUSH
// begin tmp := [ ] ;
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: EMPTY
8378: ST_TO_ADDR
// for i := 1 to 6 do
8379: LD_ADDR_VAR 0 1
8383: PUSH
8384: DOUBLE
8385: LD_INT 1
8387: DEC
8388: ST_TO_ADDR
8389: LD_INT 6
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8498
// begin uc_nation := nation_nature ;
8395: LD_ADDR_OWVAR 21
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// uc_side := 0 ;
8403: LD_ADDR_OWVAR 20
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8411: LD_ADDR_OWVAR 29
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 12
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// hc_agressivity := 20 ;
8426: LD_ADDR_OWVAR 35
8430: PUSH
8431: LD_INT 20
8433: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 17
8441: ST_TO_ADDR
// hc_gallery :=  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name :=  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// un := CreateHuman ;
8458: LD_ADDR_VAR 0 2
8462: PUSH
8463: CALL_OW 44
8467: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8468: LD_VAR 0 2
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: CALL_OW 51
// tmp := tmp ^ un ;
8480: LD_ADDR_VAR 0 3
8484: PUSH
8485: LD_VAR 0 3
8489: PUSH
8490: LD_VAR 0 2
8494: ADD
8495: ST_TO_ADDR
// end ;
8496: GO 8392
8498: POP
8499: POP
// repeat wait ( 0 0$1 ) ;
8500: LD_INT 35
8502: PPUSH
8503: CALL_OW 67
// for un in tmp do
8507: LD_ADDR_VAR 0 2
8511: PUSH
8512: LD_VAR 0 3
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8592
// begin if IsDead ( un ) then
8520: LD_VAR 0 2
8524: PPUSH
8525: CALL_OW 301
8529: IFFALSE 8549
// begin tmp := tmp diff un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 2
8545: DIFF
8546: ST_TO_ADDR
// continue ;
8547: GO 8517
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8549: LD_VAR 0 2
8553: PPUSH
8554: LD_INT 3
8556: PUSH
8557: LD_INT 22
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: PPUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 74
8585: PPUSH
8586: CALL_OW 115
// end ;
8590: GO 8517
8592: POP
8593: POP
// until not tmp ;
8594: LD_VAR 0 3
8598: NOT
8599: IFFALSE 8500
// end ;
8601: PPOPN 3
8603: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8604: LD_EXP 2
8608: PUSH
8609: LD_EXP 27
8613: AND
8614: IFFALSE 8668
8616: GO 8618
8618: DISABLE
// begin ToLua ( displayTroll(); ) ;
8619: LD_STRING displayTroll();
8621: PPUSH
8622: CALL_OW 559
// wait ( 3 3$00 ) ;
8626: LD_INT 6300
8628: PPUSH
8629: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8633: LD_STRING hideTroll();
8635: PPUSH
8636: CALL_OW 559
// wait ( 1 1$00 ) ;
8640: LD_INT 2100
8642: PPUSH
8643: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8647: LD_STRING displayTroll();
8649: PPUSH
8650: CALL_OW 559
// wait ( 1 1$00 ) ;
8654: LD_INT 2100
8656: PPUSH
8657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8661: LD_STRING hideTroll();
8663: PPUSH
8664: CALL_OW 559
// end ;
8668: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8669: LD_EXP 2
8673: PUSH
8674: LD_EXP 28
8678: AND
8679: IFFALSE 8742
8681: GO 8683
8683: DISABLE
8684: LD_INT 0
8686: PPUSH
// begin p := 0 ;
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// repeat game_speed := 1 ;
8695: LD_ADDR_OWVAR 65
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8703: LD_INT 35
8705: PPUSH
8706: CALL_OW 67
// p := p + 1 ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: PLUS
8723: ST_TO_ADDR
// until p >= 60 ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 60
8731: GREATEREQUAL
8732: IFFALSE 8695
// game_speed := 4 ;
8734: LD_ADDR_OWVAR 65
8738: PUSH
8739: LD_INT 4
8741: ST_TO_ADDR
// end ;
8742: PPOPN 1
8744: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8745: LD_EXP 2
8749: PUSH
8750: LD_EXP 29
8754: AND
8755: IFFALSE 8901
8757: GO 8759
8759: DISABLE
8760: LD_INT 0
8762: PPUSH
8763: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 22
8771: PUSH
8772: LD_OWVAR 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: LD_INT 30
8786: PUSH
8787: LD_INT 0
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 30
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// if not depot then
8818: LD_VAR 0 1
8822: NOT
8823: IFFALSE 8827
// exit ;
8825: GO 8901
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 12
8849: ARRAY
8850: PPUSH
8851: CALL_OW 274
8855: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8871: LD_VAR 0 2
8875: PPUSH
8876: LD_INT 2
8878: PPUSH
8879: LD_INT 0
8881: PPUSH
8882: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8886: LD_VAR 0 2
8890: PPUSH
8891: LD_INT 3
8893: PPUSH
8894: LD_INT 0
8896: PPUSH
8897: CALL_OW 277
// end ;
8901: PPOPN 2
8903: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8904: LD_EXP 2
8908: PUSH
8909: LD_EXP 30
8913: AND
8914: IFFALSE 9011
8916: GO 8918
8918: DISABLE
8919: LD_INT 0
8921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_OWVAR 2
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 21
8941: PUSH
8942: LD_INT 1
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 23
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: ST_TO_ADDR
// if not tmp then
8976: LD_VAR 0 1
8980: NOT
8981: IFFALSE 8985
// exit ;
8983: GO 9011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 1
8992: PPUSH
8993: LD_VAR 0 1
8997: PPUSH
8998: CALL_OW 12
9002: ARRAY
9003: PPUSH
9004: LD_INT 200
9006: PPUSH
9007: CALL_OW 234
// end ;
9011: PPOPN 1
9013: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9014: LD_EXP 2
9018: PUSH
9019: LD_EXP 31
9023: AND
9024: IFFALSE 9103
9026: GO 9028
9028: DISABLE
9029: LD_INT 0
9031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_INT 22
9039: PUSH
9040: LD_OWVAR 2
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 21
9051: PUSH
9052: LD_INT 2
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: ST_TO_ADDR
// if not tmp then
9068: LD_VAR 0 1
9072: NOT
9073: IFFALSE 9077
// exit ;
9075: GO 9103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9077: LD_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: PPUSH
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 12
9094: ARRAY
9095: PPUSH
9096: LD_INT 60
9098: PPUSH
9099: CALL_OW 234
// end ;
9103: PPOPN 1
9105: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9106: LD_EXP 2
9110: PUSH
9111: LD_EXP 32
9115: AND
9116: IFFALSE 9215
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin enable ;
9125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9126: LD_ADDR_VAR 0 1
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_OWVAR 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 61
9145: PUSH
9146: EMPTY
9147: LIST
9148: PUSH
9149: LD_INT 33
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if not tmp then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9215
// for i in tmp do
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9213
// if IsControledBy ( i ) then
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 312
9200: IFFALSE 9211
// ComUnlink ( i ) ;
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 136
9211: GO 9188
9213: POP
9214: POP
// end ;
9215: PPOPN 2
9217: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9218: LD_EXP 2
9222: PUSH
9223: LD_EXP 33
9227: AND
9228: IFFALSE 9368
9230: GO 9232
9232: DISABLE
9233: LD_INT 0
9235: PPUSH
9236: PPUSH
// begin ToLua ( displayPowell(); ) ;
9237: LD_STRING displayPowell();
9239: PPUSH
9240: CALL_OW 559
// uc_side := 0 ;
9244: LD_ADDR_OWVAR 20
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// uc_nation := 2 ;
9252: LD_ADDR_OWVAR 21
9256: PUSH
9257: LD_INT 2
9259: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9260: LD_ADDR_OWVAR 37
9264: PUSH
9265: LD_INT 14
9267: ST_TO_ADDR
// vc_engine := engine_siberite ;
9268: LD_ADDR_OWVAR 39
9272: PUSH
9273: LD_INT 3
9275: ST_TO_ADDR
// vc_control := control_apeman ;
9276: LD_ADDR_OWVAR 38
9280: PUSH
9281: LD_INT 5
9283: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9284: LD_ADDR_OWVAR 40
9288: PUSH
9289: LD_INT 29
9291: ST_TO_ADDR
// un := CreateVehicle ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: CALL_OW 45
9301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 1
9309: PPUSH
9310: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9314: LD_INT 35
9316: PPUSH
9317: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_INT 22
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: PPUSH
9343: LD_VAR 0 2
9347: PPUSH
9348: CALL_OW 74
9352: PPUSH
9353: CALL_OW 115
// until IsDead ( un ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: CALL_OW 301
9366: IFFALSE 9314
// end ;
9368: PPOPN 2
9370: END
// every 0 0$1 trigger StreamModeActive and sStu do
9371: LD_EXP 2
9375: PUSH
9376: LD_EXP 41
9380: AND
9381: IFFALSE 9397
9383: GO 9385
9385: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9386: LD_STRING displayStucuk();
9388: PPUSH
9389: CALL_OW 559
// ResetFog ;
9393: CALL_OW 335
// end ;
9397: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9398: LD_EXP 2
9402: PUSH
9403: LD_EXP 34
9407: AND
9408: IFFALSE 9549
9410: GO 9412
9412: DISABLE
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_OWVAR 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 21
9436: PUSH
9437: LD_INT 1
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: ST_TO_ADDR
// if not tmp then
9453: LD_VAR 0 2
9457: NOT
9458: IFFALSE 9462
// exit ;
9460: GO 9549
// un := tmp [ rand ( 1 , tmp ) ] ;
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: LD_VAR 0 2
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 2
9479: PPUSH
9480: CALL_OW 12
9484: ARRAY
9485: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9498: LD_VAR 0 1
9502: PPUSH
9503: LD_OWVAR 3
9507: PUSH
9508: LD_VAR 0 1
9512: DIFF
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 74
9523: PPUSH
9524: CALL_OW 115
// wait ( 0 0$20 ) ;
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 67
// SetSide ( un , your_side ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_OWVAR 2
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 2
9551: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9552: LD_EXP 2
9556: PUSH
9557: LD_EXP 35
9561: AND
9562: IFFALSE 9668
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9570: LD_ADDR_VAR 0 1
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 30
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PPUSH
9619: CALL_OW 69
9623: ST_TO_ADDR
// if not depot then
9624: LD_VAR 0 1
9628: NOT
9629: IFFALSE 9633
// exit ;
9631: GO 9668
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: CALL_OW 250
9646: PPUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 1
9654: ARRAY
9655: PPUSH
9656: CALL_OW 251
9660: PPUSH
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 495
// end ;
9668: PPOPN 1
9670: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9671: LD_EXP 2
9675: PUSH
9676: LD_EXP 36
9680: AND
9681: IFFALSE 9892
9683: GO 9685
9685: DISABLE
9686: LD_INT 0
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
9692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9693: LD_ADDR_VAR 0 5
9697: PUSH
9698: LD_INT 22
9700: PUSH
9701: LD_OWVAR 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 21
9712: PUSH
9713: LD_INT 1
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 69
9728: ST_TO_ADDR
// if not tmp then
9729: LD_VAR 0 5
9733: NOT
9734: IFFALSE 9738
// exit ;
9736: GO 9892
// for i in tmp do
9738: LD_ADDR_VAR 0 1
9742: PUSH
9743: LD_VAR 0 5
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9890
// begin d := rand ( 0 , 5 ) ;
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_INT 0
9758: PPUSH
9759: LD_INT 5
9761: PPUSH
9762: CALL_OW 12
9766: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 250
9781: PPUSH
9782: LD_VAR 0 4
9786: PPUSH
9787: LD_INT 3
9789: PPUSH
9790: LD_INT 12
9792: PPUSH
9793: CALL_OW 12
9797: PPUSH
9798: CALL_OW 272
9802: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 4
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: LD_INT 12
9828: PPUSH
9829: CALL_OW 12
9833: PPUSH
9834: CALL_OW 273
9838: ST_TO_ADDR
// if ValidHex ( x , y ) then
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: CALL_OW 488
9853: IFFALSE 9888
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_VAR 0 2
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 3
9872: PPUSH
9873: LD_INT 6
9875: PPUSH
9876: CALL_OW 12
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: CALL_OW 483
// end ;
9888: GO 9748
9890: POP
9891: POP
// end ;
9892: PPOPN 5
9894: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9895: LD_EXP 2
9899: PUSH
9900: LD_EXP 37
9904: AND
9905: IFFALSE 9999
9907: GO 9909
9909: DISABLE
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_OWVAR 2
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 21
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 2
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 9999
// for i in tmp do
9970: LD_ADDR_VAR 0 1
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: FOR_IN
9981: IFFALSE 9997
// SetFuel ( i , 0 ) ;
9983: LD_VAR 0 1
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 240
9995: GO 9980
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10002: LD_EXP 2
10006: PUSH
10007: LD_EXP 38
10011: AND
10012: IFFALSE 10078
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10020: LD_ADDR_VAR 0 1
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 29
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if not tmp then
10056: LD_VAR 0 1
10060: NOT
10061: IFFALSE 10065
// exit ;
10063: GO 10078
// DestroyUnit ( tmp [ 1 ] ) ;
10065: LD_VAR 0 1
10069: PUSH
10070: LD_INT 1
10072: ARRAY
10073: PPUSH
10074: CALL_OW 65
// end ;
10078: PPOPN 1
10080: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10081: LD_EXP 2
10085: PUSH
10086: LD_EXP 40
10090: AND
10091: IFFALSE 10220
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin uc_side := 0 ;
10099: LD_ADDR_OWVAR 20
10103: PUSH
10104: LD_INT 0
10106: ST_TO_ADDR
// uc_nation := nation_arabian ;
10107: LD_ADDR_OWVAR 21
10111: PUSH
10112: LD_INT 2
10114: ST_TO_ADDR
// hc_gallery :=  ;
10115: LD_ADDR_OWVAR 33
10119: PUSH
10120: LD_STRING 
10122: ST_TO_ADDR
// hc_name :=  ;
10123: LD_ADDR_OWVAR 26
10127: PUSH
10128: LD_STRING 
10130: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_INT 11
10136: PPUSH
10137: LD_INT 10
10139: PPUSH
10140: CALL_OW 380
// un := CreateHuman ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: CALL_OW 44
10153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10166: LD_INT 35
10168: PPUSH
10169: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10173: LD_VAR 0 1
10177: PPUSH
10178: LD_INT 22
10180: PUSH
10181: LD_OWVAR 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 74
10204: PPUSH
10205: CALL_OW 115
// until IsDead ( un ) ;
10209: LD_VAR 0 1
10213: PPUSH
10214: CALL_OW 301
10218: IFFALSE 10166
// end ;
10220: PPOPN 1
10222: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10223: LD_EXP 2
10227: PUSH
10228: LD_EXP 42
10232: AND
10233: IFFALSE 10245
10235: GO 10237
10237: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10238: LD_STRING earthquake(getX(game), 0, 32)
10240: PPUSH
10241: CALL_OW 559
10245: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10246: LD_EXP 2
10250: PUSH
10251: LD_EXP 43
10255: AND
10256: IFFALSE 10347
10258: GO 10260
10260: DISABLE
10261: LD_INT 0
10263: PPUSH
// begin enable ;
10264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_OWVAR 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 33
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: ST_TO_ADDR
// if not tmp then
10312: LD_VAR 0 1
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10321: LD_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: PPUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 12
10338: ARRAY
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: PPOPN 1
10349: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10350: LD_EXP 2
10354: PUSH
10355: LD_EXP 44
10359: AND
10360: IFFALSE 10501
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10370: LD_ADDR_VAR 0 3
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_OWVAR 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: ST_TO_ADDR
// if not tmp then
10406: LD_VAR 0 3
10410: NOT
10411: IFFALSE 10415
// exit ;
10413: GO 10501
// un := tmp [ rand ( 1 , tmp ) ] ;
10415: LD_ADDR_VAR 0 2
10419: PUSH
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: CALL_OW 12
10437: ARRAY
10438: ST_TO_ADDR
// if Crawls ( un ) then
10439: LD_VAR 0 2
10443: PPUSH
10444: CALL_OW 318
10448: IFFALSE 10459
// ComWalk ( un ) ;
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: LD_INT 9
10466: PPUSH
10467: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10471: LD_INT 28
10473: PPUSH
10474: LD_OWVAR 2
10478: PPUSH
10479: LD_INT 2
10481: PPUSH
10482: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10486: LD_INT 29
10488: PPUSH
10489: LD_OWVAR 2
10493: PPUSH
10494: LD_INT 2
10496: PPUSH
10497: CALL_OW 322
// end ;
10501: PPOPN 3
10503: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10504: LD_EXP 2
10508: PUSH
10509: LD_EXP 45
10513: AND
10514: IFFALSE 10625
10516: GO 10518
10518: DISABLE
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
10523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: ST_TO_ADDR
// if not tmp then
10560: LD_VAR 0 3
10564: NOT
10565: IFFALSE 10569
// exit ;
10567: GO 10625
// un := tmp [ rand ( 1 , tmp ) ] ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: CALL_OW 12
10591: ARRAY
10592: ST_TO_ADDR
// if Crawls ( un ) then
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 318
10602: IFFALSE 10613
// ComWalk ( un ) ;
10604: LD_VAR 0 2
10608: PPUSH
10609: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10613: LD_VAR 0 2
10617: PPUSH
10618: LD_INT 8
10620: PPUSH
10621: CALL_OW 336
// end ;
10625: PPOPN 3
10627: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10628: LD_EXP 2
10632: PUSH
10633: LD_EXP 46
10637: AND
10638: IFFALSE 10782
10640: GO 10642
10642: DISABLE
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_OWVAR 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 34
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 34
10689: PUSH
10690: LD_INT 51
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 32
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 2
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10782
// for i in tmp do
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_VAR 0 2
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10780
// if GetCargo ( i , mat_artifact ) = 0 then
10745: LD_VAR 0 1
10749: PPUSH
10750: LD_INT 4
10752: PPUSH
10753: CALL_OW 289
10757: PUSH
10758: LD_INT 0
10760: EQUAL
10761: IFFALSE 10778
// SetCargo ( i , mat_siberit , 100 ) ;
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 3
10770: PPUSH
10771: LD_INT 100
10773: PPUSH
10774: CALL_OW 290
10778: GO 10742
10780: POP
10781: POP
// end ;
10782: PPOPN 2
10784: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10785: LD_EXP 2
10789: PUSH
10790: LD_EXP 47
10794: AND
10795: IFFALSE 10978
10797: GO 10799
10799: DISABLE
10800: LD_INT 0
10802: PPUSH
10803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: ST_TO_ADDR
// if not tmp then
10826: LD_VAR 0 2
10830: NOT
10831: IFFALSE 10835
// exit ;
10833: GO 10978
// for i := 1 to 2 do
10835: LD_ADDR_VAR 0 1
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_INT 2
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10976
// begin uc_side := your_side ;
10851: LD_ADDR_OWVAR 20
10855: PUSH
10856: LD_OWVAR 2
10860: ST_TO_ADDR
// uc_nation := nation_american ;
10861: LD_ADDR_OWVAR 21
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// vc_chassis := us_morphling ;
10869: LD_ADDR_OWVAR 37
10873: PUSH
10874: LD_INT 5
10876: ST_TO_ADDR
// vc_engine := engine_siberite ;
10877: LD_ADDR_OWVAR 39
10881: PUSH
10882: LD_INT 3
10884: ST_TO_ADDR
// vc_control := control_computer ;
10885: LD_ADDR_OWVAR 38
10889: PUSH
10890: LD_INT 3
10892: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10893: LD_ADDR_OWVAR 40
10897: PUSH
10898: LD_INT 10
10900: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10901: LD_VAR 0 2
10905: PUSH
10906: LD_INT 1
10908: ARRAY
10909: PPUSH
10910: CALL_OW 310
10914: NOT
10915: IFFALSE 10962
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10917: CALL_OW 45
10921: PPUSH
10922: LD_VAR 0 2
10926: PUSH
10927: LD_INT 1
10929: ARRAY
10930: PPUSH
10931: CALL_OW 250
10935: PPUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: PPUSH
10945: CALL_OW 251
10949: PPUSH
10950: LD_INT 12
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 50
10960: GO 10974
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10962: CALL_OW 45
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 51
// end ;
10974: GO 10848
10976: POP
10977: POP
// end ;
10978: PPOPN 2
10980: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10981: LD_EXP 2
10985: PUSH
10986: LD_EXP 48
10990: AND
10991: IFFALSE 11213
10993: GO 10995
10995: DISABLE
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11004: LD_ADDR_VAR 0 6
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_OWVAR 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 23
11036: PUSH
11037: LD_INT 0
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: ST_TO_ADDR
// if not tmp then
11058: LD_VAR 0 6
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11213
// s1 := rand ( 1 , 4 ) ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 4
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_VAR 0 6
11092: PUSH
11093: LD_INT 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 2
11101: PPUSH
11102: CALL_OW 259
11106: ST_TO_ADDR
// if s1 = 1 then
11107: LD_VAR 0 2
11111: PUSH
11112: LD_INT 1
11114: EQUAL
11115: IFFALSE 11135
// s2 := rand ( 2 , 4 ) else
11117: LD_ADDR_VAR 0 3
11121: PUSH
11122: LD_INT 2
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 12
11132: ST_TO_ADDR
11133: GO 11143
// s2 := 1 ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11143: LD_ADDR_VAR 0 5
11147: PUSH
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: CALL_OW 259
11166: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11167: LD_VAR 0 6
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_VAR 0 5
11185: PPUSH
11186: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11190: LD_VAR 0 6
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_VAR 0 4
11208: PPUSH
11209: CALL_OW 237
// end ;
11213: PPOPN 6
11215: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11216: LD_EXP 2
11220: PUSH
11221: LD_EXP 49
11225: AND
11226: IFFALSE 11305
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11305
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 234
// end ;
11305: PPOPN 1
11307: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11308: LD_EXP 2
11312: PUSH
11313: LD_EXP 50
11317: AND
11318: IFFALSE 11430
11320: GO 11322
11322: DISABLE
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_OWVAR 2
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 30
11369: PUSH
11370: LD_INT 28
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: ST_TO_ADDR
// if not tmp then
11392: LD_VAR 0 2
11396: NOT
11397: IFFALSE 11401
// exit ;
11399: GO 11430
// for i in tmp do
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_VAR 0 2
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11428
// SetLives ( i , 1 ) ;
11414: LD_VAR 0 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 234
11426: GO 11411
11428: POP
11429: POP
// end ;
11430: PPOPN 2
11432: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11433: LD_EXP 2
11437: PUSH
11438: LD_EXP 51
11442: AND
11443: IFFALSE 11730
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin i := rand ( 1 , 7 ) ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 7
11463: PPUSH
11464: CALL_OW 12
11468: ST_TO_ADDR
// case i of 1 :
11469: LD_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11492
11482: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11483: LD_STRING earthquake(getX(game), 0, 32)
11485: PPUSH
11486: CALL_OW 559
11490: GO 11730
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11514
11500: POP
// begin ToLua ( displayStucuk(); ) ;
11501: LD_STRING displayStucuk();
11503: PPUSH
11504: CALL_OW 559
// ResetFog ;
11508: CALL_OW 335
// end ; 3 :
11512: GO 11730
11514: LD_INT 3
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11626
11522: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_OWVAR 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 2
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: CALL_OW 12
11590: ARRAY
11591: ST_TO_ADDR
// if Crawls ( un ) then
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 318
11601: IFFALSE 11612
// ComWalk ( un ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 8
11619: PPUSH
11620: CALL_OW 336
// end ; 4 :
11624: GO 11730
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11708
11634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 2
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11730
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 65
// end ; 5 .. 7 :
11706: GO 11730
11708: LD_INT 5
11710: DOUBLE
11711: GREATEREQUAL
11712: IFFALSE 11720
11714: LD_INT 7
11716: DOUBLE
11717: LESSEQUAL
11718: IFTRUE 11722
11720: GO 11729
11722: POP
// StreamSibBomb ; end ;
11723: CALL 7967 0 0
11727: GO 11730
11729: POP
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11733: LD_EXP 2
11737: PUSH
11738: LD_EXP 52
11742: AND
11743: IFFALSE 11899
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11753: LD_ADDR_VAR 0 2
11757: PUSH
11758: LD_INT 81
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 69
11806: ST_TO_ADDR
// if not tmp then
11807: LD_VAR 0 2
11811: NOT
11812: IFFALSE 11816
// exit ;
11814: GO 11899
// p := 0 ;
11816: LD_ADDR_VAR 0 3
11820: PUSH
11821: LD_INT 0
11823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11824: LD_INT 35
11826: PPUSH
11827: CALL_OW 67
// p := p + 1 ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 1
11843: PLUS
11844: ST_TO_ADDR
// for i in tmp do
11845: LD_ADDR_VAR 0 1
11849: PUSH
11850: LD_VAR 0 2
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11887
// if GetLives ( i ) < 1000 then
11858: LD_VAR 0 1
11862: PPUSH
11863: CALL_OW 256
11867: PUSH
11868: LD_INT 1000
11870: LESS
11871: IFFALSE 11885
// SetLives ( i , 1000 ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 1000
11880: PPUSH
11881: CALL_OW 234
11885: GO 11855
11887: POP
11888: POP
// until p > 20 ;
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 20
11896: GREATER
11897: IFFALSE 11824
// end ;
11899: PPOPN 3
11901: END
// every 0 0$1 trigger StreamModeActive and sTime do
11902: LD_EXP 2
11906: PUSH
11907: LD_EXP 53
11911: AND
11912: IFFALSE 11947
11914: GO 11916
11916: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11917: LD_INT 28
11919: PPUSH
11920: LD_OWVAR 2
11924: PPUSH
11925: LD_INT 2
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11932: LD_INT 30
11934: PPUSH
11935: LD_OWVAR 2
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: CALL_OW 322
// end ;
11947: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11948: LD_EXP 2
11952: PUSH
11953: LD_EXP 54
11957: AND
11958: IFFALSE 12079
11960: GO 11962
11962: DISABLE
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_OWVAR 2
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 21
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 23
11999: PUSH
12000: LD_INT 0
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: ST_TO_ADDR
// if not tmp then
12021: LD_VAR 0 2
12025: NOT
12026: IFFALSE 12030
// exit ;
12028: GO 12079
// for i in tmp do
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: LD_VAR 0 2
12039: PUSH
12040: FOR_IN
12041: IFFALSE 12077
// begin if Crawls ( i ) then
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 318
12052: IFFALSE 12063
// ComWalk ( i ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 138
// SetClass ( i , 2 ) ;
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_INT 2
12070: PPUSH
12071: CALL_OW 336
// end ;
12075: GO 12040
12077: POP
12078: POP
// end ;
12079: PPOPN 2
12081: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12082: LD_EXP 2
12086: PUSH
12087: LD_EXP 55
12091: AND
12092: IFFALSE 12380
12094: GO 12096
12096: DISABLE
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12102: LD_OWVAR 2
12106: PPUSH
12107: LD_INT 9
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12120: LD_INT 9
12122: PPUSH
12123: LD_OWVAR 2
12127: PPUSH
12128: CALL_OW 343
// uc_side := 9 ;
12132: LD_ADDR_OWVAR 20
12136: PUSH
12137: LD_INT 9
12139: ST_TO_ADDR
// uc_nation := 2 ;
12140: LD_ADDR_OWVAR 21
12144: PUSH
12145: LD_INT 2
12147: ST_TO_ADDR
// hc_name := Dark Warrior ;
12148: LD_ADDR_OWVAR 26
12152: PUSH
12153: LD_STRING Dark Warrior
12155: ST_TO_ADDR
// hc_gallery :=  ;
12156: LD_ADDR_OWVAR 33
12160: PUSH
12161: LD_STRING 
12163: ST_TO_ADDR
// hc_noskilllimit := true ;
12164: LD_ADDR_OWVAR 76
12168: PUSH
12169: LD_INT 1
12171: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12172: LD_ADDR_OWVAR 31
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: ST_TO_ADDR
// un := CreateHuman ;
12195: LD_ADDR_VAR 0 3
12199: PUSH
12200: CALL_OW 44
12204: ST_TO_ADDR
// hc_noskilllimit := false ;
12205: LD_ADDR_OWVAR 76
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 51
// ToLua ( playRanger() ) ;
12225: LD_STRING playRanger()
12227: PPUSH
12228: CALL_OW 559
// p := 0 ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12240: LD_INT 35
12242: PPUSH
12243: CALL_OW 67
// p := p + 1 ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: LD_VAR 0 2
12256: PUSH
12257: LD_INT 1
12259: PLUS
12260: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 256
12270: PUSH
12271: LD_INT 1000
12273: LESS
12274: IFFALSE 12288
// SetLives ( un , 1000 ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1000
12283: PPUSH
12284: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 81
12295: PUSH
12296: LD_OWVAR 2
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 91
12307: PUSH
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: CALL_OW 74
12339: PPUSH
12340: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12344: LD_VAR 0 2
12348: PUSH
12349: LD_INT 80
12351: GREATER
12352: PUSH
12353: LD_VAR 0 3
12357: PPUSH
12358: CALL_OW 301
12362: OR
12363: IFFALSE 12240
// if un then
12365: LD_VAR 0 3
12369: IFFALSE 12380
// RemoveUnit ( un ) ;
12371: LD_VAR 0 3
12375: PPUSH
12376: CALL_OW 64
// end ;
12380: PPOPN 3
12382: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12383: LD_EXP 56
12387: IFFALSE 12503
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_INT 81
12404: PUSH
12405: LD_OWVAR 2
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 21
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 69
12432: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12433: LD_STRING playComputer()
12435: PPUSH
12436: CALL_OW 559
// if not tmp then
12440: LD_VAR 0 2
12444: NOT
12445: IFFALSE 12449
// exit ;
12447: GO 12503
// for i in tmp do
12449: LD_ADDR_VAR 0 1
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: FOR_IN
12460: IFFALSE 12501
// for j := 1 to 4 do
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: DOUBLE
12468: LD_INT 1
12470: DEC
12471: ST_TO_ADDR
12472: LD_INT 4
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12497
// SetSkill ( i , j , 10 ) ;
12478: LD_VAR 0 1
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 10
12490: PPUSH
12491: CALL_OW 237
12495: GO 12475
12497: POP
12498: POP
12499: GO 12459
12501: POP
12502: POP
// end ;
12503: PPOPN 3
12505: END
// every 0 0$1 trigger s30 do var i , tmp ;
12506: LD_EXP 57
12510: IFFALSE 12579
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
12518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_OWVAR 2
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 2
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12579
// for i in tmp do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 2
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12577
// SetLives ( i , 300 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 300
12570: PPUSH
12571: CALL_OW 234
12575: GO 12560
12577: POP
12578: POP
// end ;
12579: PPOPN 2
12581: END
// every 0 0$1 trigger s60 do var i , tmp ;
12582: LD_EXP 58
12586: IFFALSE 12655
12588: GO 12590
12590: DISABLE
12591: LD_INT 0
12593: PPUSH
12594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12595: LD_ADDR_VAR 0 2
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_OWVAR 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: ST_TO_ADDR
// if not tmp then
12617: LD_VAR 0 2
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 12655
// for i in tmp do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: FOR_IN
12637: IFFALSE 12653
// SetLives ( i , 600 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 600
12646: PPUSH
12647: CALL_OW 234
12651: GO 12636
12653: POP
12654: POP
// end ;
12655: PPOPN 2
12657: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12658: LD_INT 0
12660: PPUSH
// case cmd of 301 :
12661: LD_VAR 0 1
12665: PUSH
12666: LD_INT 301
12668: DOUBLE
12669: EQUAL
12670: IFTRUE 12674
12672: GO 12706
12674: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12675: LD_VAR 0 6
12679: PPUSH
12680: LD_VAR 0 7
12684: PPUSH
12685: LD_VAR 0 8
12689: PPUSH
12690: LD_VAR 0 4
12694: PPUSH
12695: LD_VAR 0 5
12699: PPUSH
12700: CALL 13915 0 5
12704: GO 12827
12706: LD_INT 302
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12751
12714: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12715: LD_VAR 0 6
12719: PPUSH
12720: LD_VAR 0 7
12724: PPUSH
12725: LD_VAR 0 8
12729: PPUSH
12730: LD_VAR 0 9
12734: PPUSH
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_VAR 0 5
12744: PPUSH
12745: CALL 14006 0 6
12749: GO 12827
12751: LD_INT 303
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12796
12759: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12760: LD_VAR 0 6
12764: PPUSH
12765: LD_VAR 0 7
12769: PPUSH
12770: LD_VAR 0 8
12774: PPUSH
12775: LD_VAR 0 9
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: LD_VAR 0 5
12789: PPUSH
12790: CALL 12832 0 6
12794: GO 12827
12796: LD_INT 304
12798: DOUBLE
12799: EQUAL
12800: IFTRUE 12804
12802: GO 12826
12804: POP
// hHackTeleport ( unit , x , y ) ; end ;
12805: LD_VAR 0 2
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: LD_VAR 0 5
12819: PPUSH
12820: CALL 14599 0 3
12824: GO 12827
12826: POP
// end ;
12827: LD_VAR 0 12
12831: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12832: LD_INT 0
12834: PPUSH
12835: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: LESS
12844: PUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 3
12852: GREATER
12853: OR
12854: PUSH
12855: LD_VAR 0 5
12859: PPUSH
12860: LD_VAR 0 6
12864: PPUSH
12865: CALL_OW 428
12869: OR
12870: IFFALSE 12874
// exit ;
12872: GO 13602
// uc_side := your_side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_OWVAR 2
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 1
12893: ST_TO_ADDR
// bc_level = 1 ;
12894: LD_ADDR_OWVAR 43
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// case btype of 1 :
12902: LD_VAR 0 2
12906: PUSH
12907: LD_INT 1
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_depot ; 2 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
12924: GO 13546
12926: LD_INT 2
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_warehouse ; 3 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
12943: GO 13546
12945: LD_INT 3
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 12964
12953: POP
// bc_type := b_lab ; 4 .. 9 :
12954: LD_ADDR_OWVAR 42
12958: PUSH
12959: LD_INT 6
12961: ST_TO_ADDR
12962: GO 13546
12964: LD_INT 4
12966: DOUBLE
12967: GREATEREQUAL
12968: IFFALSE 12976
12970: LD_INT 9
12972: DOUBLE
12973: LESSEQUAL
12974: IFTRUE 12978
12976: GO 13038
12978: POP
// begin bc_type := b_lab_half ;
12979: LD_ADDR_OWVAR 42
12983: PUSH
12984: LD_INT 7
12986: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12987: LD_ADDR_OWVAR 44
12991: PUSH
12992: LD_INT 10
12994: PUSH
12995: LD_INT 11
12997: PUSH
12998: LD_INT 12
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: LD_INT 14
13006: PUSH
13007: LD_INT 13
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 3
13025: MINUS
13026: ARRAY
13027: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13028: LD_ADDR_OWVAR 45
13032: PUSH
13033: LD_INT 9
13035: ST_TO_ADDR
// end ; 10 .. 13 :
13036: GO 13546
13038: LD_INT 10
13040: DOUBLE
13041: GREATEREQUAL
13042: IFFALSE 13050
13044: LD_INT 13
13046: DOUBLE
13047: LESSEQUAL
13048: IFTRUE 13052
13050: GO 13129
13052: POP
// begin bc_type := b_lab_full ;
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 8
13060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13061: LD_ADDR_OWVAR 44
13065: PUSH
13066: LD_INT 10
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 14
13074: PUSH
13075: LD_INT 13
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 9
13091: MINUS
13092: ARRAY
13093: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13094: LD_ADDR_OWVAR 45
13098: PUSH
13099: LD_INT 11
13101: PUSH
13102: LD_INT 15
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 15
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_VAR 0 2
13121: PUSH
13122: LD_INT 9
13124: MINUS
13125: ARRAY
13126: ST_TO_ADDR
// end ; 14 :
13127: GO 13546
13129: LD_INT 14
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13148
13137: POP
// bc_type := b_workshop ; 15 :
13138: LD_ADDR_OWVAR 42
13142: PUSH
13143: LD_INT 2
13145: ST_TO_ADDR
13146: GO 13546
13148: LD_INT 15
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 13167
13156: POP
// bc_type := b_factory ; 16 :
13157: LD_ADDR_OWVAR 42
13161: PUSH
13162: LD_INT 3
13164: ST_TO_ADDR
13165: GO 13546
13167: LD_INT 16
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13186
13175: POP
// bc_type := b_ext_gun ; 17 :
13176: LD_ADDR_OWVAR 42
13180: PUSH
13181: LD_INT 17
13183: ST_TO_ADDR
13184: GO 13546
13186: LD_INT 17
13188: DOUBLE
13189: EQUAL
13190: IFTRUE 13194
13192: GO 13222
13194: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13195: LD_ADDR_OWVAR 42
13199: PUSH
13200: LD_INT 19
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: LD_INT 19
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_VAR 0 1
13218: ARRAY
13219: ST_TO_ADDR
13220: GO 13546
13222: LD_INT 18
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13241
13230: POP
// bc_type := b_ext_radar ; 19 :
13231: LD_ADDR_OWVAR 42
13235: PUSH
13236: LD_INT 20
13238: ST_TO_ADDR
13239: GO 13546
13241: LD_INT 19
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13260
13249: POP
// bc_type := b_ext_radio ; 20 :
13250: LD_ADDR_OWVAR 42
13254: PUSH
13255: LD_INT 22
13257: ST_TO_ADDR
13258: GO 13546
13260: LD_INT 20
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13279
13268: POP
// bc_type := b_ext_siberium ; 21 :
13269: LD_ADDR_OWVAR 42
13273: PUSH
13274: LD_INT 21
13276: ST_TO_ADDR
13277: GO 13546
13279: LD_INT 21
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13298
13287: POP
// bc_type := b_ext_computer ; 22 :
13288: LD_ADDR_OWVAR 42
13292: PUSH
13293: LD_INT 24
13295: ST_TO_ADDR
13296: GO 13546
13298: LD_INT 22
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13317
13306: POP
// bc_type := b_ext_track ; 23 :
13307: LD_ADDR_OWVAR 42
13311: PUSH
13312: LD_INT 16
13314: ST_TO_ADDR
13315: GO 13546
13317: LD_INT 23
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13336
13325: POP
// bc_type := b_ext_laser ; 24 :
13326: LD_ADDR_OWVAR 42
13330: PUSH
13331: LD_INT 25
13333: ST_TO_ADDR
13334: GO 13546
13336: LD_INT 24
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13355
13344: POP
// bc_type := b_control_tower ; 25 :
13345: LD_ADDR_OWVAR 42
13349: PUSH
13350: LD_INT 36
13352: ST_TO_ADDR
13353: GO 13546
13355: LD_INT 25
13357: DOUBLE
13358: EQUAL
13359: IFTRUE 13363
13361: GO 13374
13363: POP
// bc_type := b_breastwork ; 26 :
13364: LD_ADDR_OWVAR 42
13368: PUSH
13369: LD_INT 31
13371: ST_TO_ADDR
13372: GO 13546
13374: LD_INT 26
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13393
13382: POP
// bc_type := b_bunker ; 27 :
13383: LD_ADDR_OWVAR 42
13387: PUSH
13388: LD_INT 32
13390: ST_TO_ADDR
13391: GO 13546
13393: LD_INT 27
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13412
13401: POP
// bc_type := b_turret ; 28 :
13402: LD_ADDR_OWVAR 42
13406: PUSH
13407: LD_INT 33
13409: ST_TO_ADDR
13410: GO 13546
13412: LD_INT 28
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13431
13420: POP
// bc_type := b_armoury ; 29 :
13421: LD_ADDR_OWVAR 42
13425: PUSH
13426: LD_INT 4
13428: ST_TO_ADDR
13429: GO 13546
13431: LD_INT 29
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13450
13439: POP
// bc_type := b_barracks ; 30 :
13440: LD_ADDR_OWVAR 42
13444: PUSH
13445: LD_INT 5
13447: ST_TO_ADDR
13448: GO 13546
13450: LD_INT 30
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13469
13458: POP
// bc_type := b_solar_power ; 31 :
13459: LD_ADDR_OWVAR 42
13463: PUSH
13464: LD_INT 27
13466: ST_TO_ADDR
13467: GO 13546
13469: LD_INT 31
13471: DOUBLE
13472: EQUAL
13473: IFTRUE 13477
13475: GO 13488
13477: POP
// bc_type := b_oil_power ; 32 :
13478: LD_ADDR_OWVAR 42
13482: PUSH
13483: LD_INT 26
13485: ST_TO_ADDR
13486: GO 13546
13488: LD_INT 32
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13507
13496: POP
// bc_type := b_siberite_power ; 33 :
13497: LD_ADDR_OWVAR 42
13501: PUSH
13502: LD_INT 28
13504: ST_TO_ADDR
13505: GO 13546
13507: LD_INT 33
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13526
13515: POP
// bc_type := b_oil_mine ; 34 :
13516: LD_ADDR_OWVAR 42
13520: PUSH
13521: LD_INT 29
13523: ST_TO_ADDR
13524: GO 13546
13526: LD_INT 34
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13545
13534: POP
// bc_type := b_siberite_mine ; end ;
13535: LD_ADDR_OWVAR 42
13539: PUSH
13540: LD_INT 30
13542: ST_TO_ADDR
13543: GO 13546
13545: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13546: LD_ADDR_VAR 0 8
13550: PUSH
13551: LD_VAR 0 5
13555: PPUSH
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 47
13570: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13571: LD_OWVAR 42
13575: PUSH
13576: LD_INT 32
13578: PUSH
13579: LD_INT 33
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: IN
13586: IFFALSE 13602
// PlaceWeaponTurret ( b , weapon ) ;
13588: LD_VAR 0 8
13592: PPUSH
13593: LD_VAR 0 4
13597: PPUSH
13598: CALL_OW 431
// end ;
13602: LD_VAR 0 7
13606: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
13612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 22
13620: PUSH
13621: LD_OWVAR 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 0
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 30
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: ST_TO_ADDR
// if not tmp then
13667: LD_VAR 0 4
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13735
// for i in tmp do
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: LD_VAR 0 4
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13733
// for j = 1 to 3 do
13689: LD_ADDR_VAR 0 3
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 3
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13705: LD_VAR 0 2
13709: PPUSH
13710: CALL_OW 274
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 99999
13722: PPUSH
13723: CALL_OW 277
13727: GO 13702
13729: POP
13730: POP
13731: GO 13686
13733: POP
13734: POP
// end ;
13735: LD_VAR 0 1
13739: RET
// export function hHackSetLevel10 ; var i , j ; begin
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
13744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: PUSH
13765: FOR_IN
13766: IFFALSE 13818
// if IsSelected ( i ) then
13768: LD_VAR 0 2
13772: PPUSH
13773: CALL_OW 306
13777: IFFALSE 13816
// begin for j := 1 to 4 do
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: DOUBLE
13785: LD_INT 1
13787: DEC
13788: ST_TO_ADDR
13789: LD_INT 4
13791: PUSH
13792: FOR_TO
13793: IFFALSE 13814
// SetSkill ( i , j , 10 ) ;
13795: LD_VAR 0 2
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 10
13807: PPUSH
13808: CALL_OW 237
13812: GO 13792
13814: POP
13815: POP
// end ;
13816: GO 13765
13818: POP
13819: POP
// end ;
13820: LD_VAR 0 1
13824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 22
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 21
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 69
13865: PUSH
13866: FOR_IN
13867: IFFALSE 13908
// begin for j := 1 to 4 do
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: DOUBLE
13875: LD_INT 1
13877: DEC
13878: ST_TO_ADDR
13879: LD_INT 4
13881: PUSH
13882: FOR_TO
13883: IFFALSE 13904
// SetSkill ( i , j , 10 ) ;
13885: LD_VAR 0 2
13889: PPUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 10
13897: PPUSH
13898: CALL_OW 237
13902: GO 13882
13904: POP
13905: POP
// end ;
13906: GO 13866
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 1
13914: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13915: LD_INT 0
13917: PPUSH
// uc_side := your_side ;
13918: LD_ADDR_OWVAR 20
13922: PUSH
13923: LD_OWVAR 2
13927: ST_TO_ADDR
// uc_nation := nation ;
13928: LD_ADDR_OWVAR 21
13932: PUSH
13933: LD_VAR 0 1
13937: ST_TO_ADDR
// InitHc ;
13938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13942: LD_INT 0
13944: PPUSH
13945: LD_VAR 0 2
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13959: LD_VAR 0 4
13963: PPUSH
13964: LD_VAR 0 5
13968: PPUSH
13969: CALL_OW 428
13973: PUSH
13974: LD_INT 0
13976: EQUAL
13977: IFFALSE 14001
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13979: CALL_OW 44
13983: PPUSH
13984: LD_VAR 0 4
13988: PPUSH
13989: LD_VAR 0 5
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 48
// end ;
14001: LD_VAR 0 6
14005: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14006: LD_INT 0
14008: PPUSH
14009: PPUSH
// uc_side := your_side ;
14010: LD_ADDR_OWVAR 20
14014: PUSH
14015: LD_OWVAR 2
14019: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14020: LD_VAR 0 1
14024: PUSH
14025: LD_INT 1
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 4
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: IN
14047: IFFALSE 14059
// uc_nation := nation_american else
14049: LD_ADDR_OWVAR 21
14053: PUSH
14054: LD_INT 1
14056: ST_TO_ADDR
14057: GO 14102
// if chassis in [ 11 , 12 , 13 , 14 ] then
14059: LD_VAR 0 1
14063: PUSH
14064: LD_INT 11
14066: PUSH
14067: LD_INT 12
14069: PUSH
14070: LD_INT 13
14072: PUSH
14073: LD_INT 14
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: IN
14082: IFFALSE 14094
// uc_nation := nation_arabian else
14084: LD_ADDR_OWVAR 21
14088: PUSH
14089: LD_INT 2
14091: ST_TO_ADDR
14092: GO 14102
// uc_nation := nation_russian ;
14094: LD_ADDR_OWVAR 21
14098: PUSH
14099: LD_INT 3
14101: ST_TO_ADDR
// vc_chassis := chassis ;
14102: LD_ADDR_OWVAR 37
14106: PUSH
14107: LD_VAR 0 1
14111: ST_TO_ADDR
// vc_engine := engine ;
14112: LD_ADDR_OWVAR 39
14116: PUSH
14117: LD_VAR 0 2
14121: ST_TO_ADDR
// vc_control := control ;
14122: LD_ADDR_OWVAR 38
14126: PUSH
14127: LD_VAR 0 3
14131: ST_TO_ADDR
// vc_weapon := weapon ;
14132: LD_ADDR_OWVAR 40
14136: PUSH
14137: LD_VAR 0 4
14141: ST_TO_ADDR
// un := CreateVehicle ;
14142: LD_ADDR_VAR 0 8
14146: PUSH
14147: CALL_OW 45
14151: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14152: LD_VAR 0 8
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: LD_INT 5
14162: PPUSH
14163: CALL_OW 12
14167: PPUSH
14168: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14172: LD_VAR 0 8
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: LD_VAR 0 6
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 48
// end ;
14194: LD_VAR 0 7
14198: RET
// export hInvincible ; every 1 do
14199: GO 14201
14201: DISABLE
// hInvincible := [ ] ;
14202: LD_ADDR_EXP 59
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
14209: END
// every 10 do var i ;
14210: GO 14212
14212: DISABLE
14213: LD_INT 0
14215: PPUSH
// begin enable ;
14216: ENABLE
// if not hInvincible then
14217: LD_EXP 59
14221: NOT
14222: IFFALSE 14226
// exit ;
14224: GO 14270
// for i in hInvincible do
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_EXP 59
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14268
// if GetLives ( i ) < 1000 then
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 256
14248: PUSH
14249: LD_INT 1000
14251: LESS
14252: IFFALSE 14266
// SetLives ( i , 1000 ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 1000
14261: PPUSH
14262: CALL_OW 234
14266: GO 14236
14268: POP
14269: POP
// end ;
14270: PPOPN 1
14272: END
// export function hHackInvincible ; var i ; begin
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 21
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: FOR_IN
14316: IFFALSE 14377
// if IsSelected ( i ) then
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 306
14327: IFFALSE 14375
// begin if i in hInvincible then
14329: LD_VAR 0 2
14333: PUSH
14334: LD_EXP 59
14338: IN
14339: IFFALSE 14359
// hInvincible := hInvincible diff i else
14341: LD_ADDR_EXP 59
14345: PUSH
14346: LD_EXP 59
14350: PUSH
14351: LD_VAR 0 2
14355: DIFF
14356: ST_TO_ADDR
14357: GO 14375
// hInvincible := hInvincible union i ;
14359: LD_ADDR_EXP 59
14363: PUSH
14364: LD_EXP 59
14368: PUSH
14369: LD_VAR 0 2
14373: UNION
14374: ST_TO_ADDR
// end ;
14375: GO 14315
14377: POP
14378: POP
// end ;
14379: LD_VAR 0 1
14383: RET
// export function hHackInvisible ; var i , j ; begin
14384: LD_INT 0
14386: PPUSH
14387: PPUSH
14388: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14434
// if IsSelected ( i ) then
14412: LD_VAR 0 2
14416: PPUSH
14417: CALL_OW 306
14421: IFFALSE 14432
// ComForceInvisible ( i ) ;
14423: LD_VAR 0 2
14427: PPUSH
14428: CALL_OW 496
14432: GO 14409
14434: POP
14435: POP
// end ;
14436: LD_VAR 0 1
14440: RET
// export function hHackChangeYourSide ; begin
14441: LD_INT 0
14443: PPUSH
// if your_side = 8 then
14444: LD_OWVAR 2
14448: PUSH
14449: LD_INT 8
14451: EQUAL
14452: IFFALSE 14464
// your_side := 0 else
14454: LD_ADDR_OWVAR 2
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
14462: GO 14478
// your_side := your_side + 1 ;
14464: LD_ADDR_OWVAR 2
14468: PUSH
14469: LD_OWVAR 2
14473: PUSH
14474: LD_INT 1
14476: PLUS
14477: ST_TO_ADDR
// end ;
14478: LD_VAR 0 1
14482: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
14487: PPUSH
// for i in all_units do
14488: LD_ADDR_VAR 0 2
14492: PUSH
14493: LD_OWVAR 3
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14577
// if IsSelected ( i ) then
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 306
14510: IFFALSE 14575
// begin j := GetSide ( i ) ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: PPUSH
14522: CALL_OW 255
14526: ST_TO_ADDR
// if j = 8 then
14527: LD_VAR 0 3
14531: PUSH
14532: LD_INT 8
14534: EQUAL
14535: IFFALSE 14547
// j := 0 else
14537: LD_ADDR_VAR 0 3
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
14545: GO 14561
// j := j + 1 ;
14547: LD_ADDR_VAR 0 3
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PLUS
14560: ST_TO_ADDR
// SetSide ( i , j ) ;
14561: LD_VAR 0 2
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: CALL_OW 235
// end ;
14575: GO 14498
14577: POP
14578: POP
// end ;
14579: LD_VAR 0 1
14583: RET
// export function hHackFog ; begin
14584: LD_INT 0
14586: PPUSH
// FogOff ( true ) ;
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 344
// end ;
14594: LD_VAR 0 1
14598: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14599: LD_INT 0
14601: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14602: LD_VAR 0 1
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 483
// CenterOnXY ( x , y ) ;
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 84
// end ;
14641: LD_VAR 0 4
14645: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14650: LD_VAR 0 1
14654: NOT
14655: PUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: CALL_OW 488
14670: NOT
14671: OR
14672: PUSH
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 266
14682: PUSH
14683: LD_INT 3
14685: NONEQUAL
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 247
14696: PUSH
14697: LD_INT 1
14699: EQUAL
14700: NOT
14701: AND
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 14856
// if GetType ( factory ) = unit_human then
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 247
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14737
// factory := IsInUnit ( factory ) ;
14722: LD_ADDR_VAR 0 1
14726: PUSH
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 310
14736: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 266
14746: PUSH
14747: LD_INT 3
14749: NONEQUAL
14750: IFFALSE 14754
// exit ;
14752: GO 14856
// if HexInfo ( x , y ) = factory then
14754: LD_VAR 0 2
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: CALL_OW 428
14768: PUSH
14769: LD_VAR 0 1
14773: EQUAL
14774: IFFALSE 14801
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14776: LD_ADDR_EXP 60
14780: PUSH
14781: LD_EXP 60
14785: PPUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_INT 0
14793: PPUSH
14794: CALL_OW 1
14798: ST_TO_ADDR
14799: GO 14852
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14801: LD_ADDR_EXP 60
14805: PUSH
14806: LD_EXP 60
14810: PPUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 255
14825: PUSH
14826: LD_VAR 0 1
14830: PUSH
14831: LD_VAR 0 2
14835: PUSH
14836: LD_VAR 0 3
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 1
14851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14852: CALL 14861 0 0
// end ;
14856: LD_VAR 0 4
14860: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14861: LD_INT 0
14863: PPUSH
14864: PPUSH
14865: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14866: LD_STRING resetFactoryWaypoint();
14868: PPUSH
14869: CALL_OW 559
// if factoryWaypoints then
14873: LD_EXP 60
14877: IFFALSE 15003
// begin list := PrepareArray ( factoryWaypoints ) ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_EXP 60
14888: PPUSH
14889: CALL 62463 0 1
14893: ST_TO_ADDR
// for i := 1 to list do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: DOUBLE
14900: LD_INT 1
14902: DEC
14903: ST_TO_ADDR
14904: LD_VAR 0 3
14908: PUSH
14909: FOR_TO
14910: IFFALSE 15001
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14912: LD_STRING setFactoryWaypointXY(
14914: PUSH
14915: LD_VAR 0 3
14919: PUSH
14920: LD_VAR 0 2
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: STR
14930: PUSH
14931: LD_STRING ,
14933: STR
14934: PUSH
14935: LD_VAR 0 3
14939: PUSH
14940: LD_VAR 0 2
14944: ARRAY
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: STR
14950: PUSH
14951: LD_STRING ,
14953: STR
14954: PUSH
14955: LD_VAR 0 3
14959: PUSH
14960: LD_VAR 0 2
14964: ARRAY
14965: PUSH
14966: LD_INT 3
14968: ARRAY
14969: STR
14970: PUSH
14971: LD_STRING ,
14973: STR
14974: PUSH
14975: LD_VAR 0 3
14979: PUSH
14980: LD_VAR 0 2
14984: ARRAY
14985: PUSH
14986: LD_INT 4
14988: ARRAY
14989: STR
14990: PUSH
14991: LD_STRING )
14993: STR
14994: PPUSH
14995: CALL_OW 559
14999: GO 14909
15001: POP
15002: POP
// end ; end ;
15003: LD_VAR 0 1
15007: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15008: LD_INT 0
15010: PPUSH
// if HexInfo ( x , y ) = warehouse then
15011: LD_VAR 0 2
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: CALL_OW 428
15025: PUSH
15026: LD_VAR 0 1
15030: EQUAL
15031: IFFALSE 15058
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15033: LD_ADDR_EXP 61
15037: PUSH
15038: LD_EXP 61
15042: PPUSH
15043: LD_VAR 0 1
15047: PPUSH
15048: LD_INT 0
15050: PPUSH
15051: CALL_OW 1
15055: ST_TO_ADDR
15056: GO 15109
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15058: LD_ADDR_EXP 61
15062: PUSH
15063: LD_EXP 61
15067: PPUSH
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 255
15082: PUSH
15083: LD_VAR 0 1
15087: PUSH
15088: LD_VAR 0 2
15092: PUSH
15093: LD_VAR 0 3
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 1
15108: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15109: CALL 15118 0 0
// end ;
15113: LD_VAR 0 4
15117: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15118: LD_INT 0
15120: PPUSH
15121: PPUSH
15122: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15123: LD_STRING resetWarehouseGatheringPoints();
15125: PPUSH
15126: CALL_OW 559
// if warehouseGatheringPoints then
15130: LD_EXP 61
15134: IFFALSE 15260
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15136: LD_ADDR_VAR 0 3
15140: PUSH
15141: LD_EXP 61
15145: PPUSH
15146: CALL 62463 0 1
15150: ST_TO_ADDR
// for i := 1 to list do
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: DOUBLE
15157: LD_INT 1
15159: DEC
15160: ST_TO_ADDR
15161: LD_VAR 0 3
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15258
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15169: LD_STRING setWarehouseGatheringPointXY(
15171: PUSH
15172: LD_VAR 0 3
15176: PUSH
15177: LD_VAR 0 2
15181: ARRAY
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: STR
15187: PUSH
15188: LD_STRING ,
15190: STR
15191: PUSH
15192: LD_VAR 0 3
15196: PUSH
15197: LD_VAR 0 2
15201: ARRAY
15202: PUSH
15203: LD_INT 2
15205: ARRAY
15206: STR
15207: PUSH
15208: LD_STRING ,
15210: STR
15211: PUSH
15212: LD_VAR 0 3
15216: PUSH
15217: LD_VAR 0 2
15221: ARRAY
15222: PUSH
15223: LD_INT 3
15225: ARRAY
15226: STR
15227: PUSH
15228: LD_STRING ,
15230: STR
15231: PUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 2
15241: ARRAY
15242: PUSH
15243: LD_INT 4
15245: ARRAY
15246: STR
15247: PUSH
15248: LD_STRING )
15250: STR
15251: PPUSH
15252: CALL_OW 559
15256: GO 15166
15258: POP
15259: POP
// end ; end ;
15260: LD_VAR 0 1
15264: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15265: LD_EXP 61
15269: IFFALSE 15954
15271: GO 15273
15273: DISABLE
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
// begin enable ;
15285: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: LD_EXP 61
15295: PPUSH
15296: CALL 62463 0 1
15300: ST_TO_ADDR
// if not list then
15301: LD_VAR 0 3
15305: NOT
15306: IFFALSE 15310
// exit ;
15308: GO 15954
// for i := 1 to list do
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: DOUBLE
15316: LD_INT 1
15318: DEC
15319: ST_TO_ADDR
15320: LD_VAR 0 3
15324: PUSH
15325: FOR_TO
15326: IFFALSE 15952
// begin depot := list [ i ] [ 2 ] ;
15328: LD_ADDR_VAR 0 8
15332: PUSH
15333: LD_VAR 0 3
15337: PUSH
15338: LD_VAR 0 1
15342: ARRAY
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 1
15362: ARRAY
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15368: LD_VAR 0 8
15372: PPUSH
15373: CALL_OW 301
15377: PUSH
15378: LD_VAR 0 5
15382: PUSH
15383: LD_VAR 0 8
15387: PPUSH
15388: CALL_OW 255
15392: NONEQUAL
15393: OR
15394: IFFALSE 15423
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15396: LD_ADDR_EXP 61
15400: PUSH
15401: LD_EXP 61
15405: PPUSH
15406: LD_VAR 0 8
15410: PPUSH
15411: LD_INT 0
15413: PPUSH
15414: CALL_OW 1
15418: ST_TO_ADDR
// exit ;
15419: POP
15420: POP
15421: GO 15954
// end ; x := list [ i ] [ 3 ] ;
15423: LD_ADDR_VAR 0 6
15427: PUSH
15428: LD_VAR 0 3
15432: PUSH
15433: LD_VAR 0 1
15437: ARRAY
15438: PUSH
15439: LD_INT 3
15441: ARRAY
15442: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15443: LD_ADDR_VAR 0 7
15447: PUSH
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ARRAY
15458: PUSH
15459: LD_INT 4
15461: ARRAY
15462: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_VAR 0 6
15472: PPUSH
15473: LD_VAR 0 7
15477: PPUSH
15478: LD_INT 16
15480: PPUSH
15481: CALL 61051 0 3
15485: ST_TO_ADDR
// if not cratesNearbyPoint then
15486: LD_VAR 0 9
15490: NOT
15491: IFFALSE 15497
// exit ;
15493: POP
15494: POP
15495: GO 15954
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15497: LD_ADDR_VAR 0 4
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_VAR 0 5
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 60
15519: PUSH
15520: EMPTY
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 91
15529: PUSH
15530: LD_VAR 0 8
15534: PUSH
15535: LD_INT 6
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 25
15558: PUSH
15559: LD_INT 16
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 69
15581: PUSH
15582: LD_VAR 0 8
15586: PPUSH
15587: CALL_OW 313
15591: PPUSH
15592: LD_INT 3
15594: PUSH
15595: LD_INT 60
15597: PUSH
15598: EMPTY
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 2
15607: PUSH
15608: LD_INT 25
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 25
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 72
15641: UNION
15642: ST_TO_ADDR
// if tmp then
15643: LD_VAR 0 4
15647: IFFALSE 15727
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15649: LD_ADDR_VAR 0 4
15653: PUSH
15654: LD_VAR 0 4
15658: PPUSH
15659: LD_INT 3
15661: PPUSH
15662: CALL 59020 0 2
15666: ST_TO_ADDR
// for j in tmp do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 4
15676: PUSH
15677: FOR_IN
15678: IFFALSE 15721
// begin if IsInUnit ( j ) then
15680: LD_VAR 0 2
15684: PPUSH
15685: CALL_OW 310
15689: IFFALSE 15700
// ComExit ( j ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL 59103 0 1
// AddComCollect ( j , x , y ) ;
15700: LD_VAR 0 2
15704: PPUSH
15705: LD_VAR 0 6
15709: PPUSH
15710: LD_VAR 0 7
15714: PPUSH
15715: CALL_OW 177
// end ;
15719: GO 15677
15721: POP
15722: POP
// exit ;
15723: POP
15724: POP
15725: GO 15954
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15727: LD_ADDR_VAR 0 4
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_VAR 0 5
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 91
15746: PUSH
15747: LD_VAR 0 8
15751: PUSH
15752: LD_INT 8
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 2
15762: PUSH
15763: LD_INT 34
15765: PUSH
15766: LD_INT 12
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 34
15775: PUSH
15776: LD_INT 51
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 34
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 34
15795: PUSH
15796: LD_INT 89
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// if tmp then
15820: LD_VAR 0 4
15824: IFFALSE 15950
// begin for j in tmp do
15826: LD_ADDR_VAR 0 2
15830: PUSH
15831: LD_VAR 0 4
15835: PUSH
15836: FOR_IN
15837: IFFALSE 15948
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 262
15848: PUSH
15849: LD_INT 3
15851: EQUAL
15852: PUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 261
15862: PUSH
15863: LD_INT 20
15865: GREATER
15866: OR
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: CALL_OW 314
15877: NOT
15878: AND
15879: PUSH
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL_OW 263
15889: PUSH
15890: LD_INT 1
15892: NONEQUAL
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 311
15903: OR
15904: AND
15905: IFFALSE 15946
// begin ComCollect ( j , x , y ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_VAR 0 6
15916: PPUSH
15917: LD_VAR 0 7
15921: PPUSH
15922: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15926: LD_VAR 0 2
15930: PPUSH
15931: LD_VAR 0 8
15935: PPUSH
15936: CALL_OW 172
// exit ;
15940: POP
15941: POP
15942: POP
15943: POP
15944: GO 15954
// end ;
15946: GO 15836
15948: POP
15949: POP
// end ; end ;
15950: GO 15325
15952: POP
15953: POP
// end ; end_of_file
15954: PPOPN 9
15956: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15957: LD_INT 0
15959: PPUSH
15960: PPUSH
15961: PPUSH
15962: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 264
15972: PUSH
15973: LD_INT 91
15975: EQUAL
15976: IFFALSE 16048
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15978: LD_INT 68
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 255
15990: PPUSH
15991: CALL_OW 321
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: IFFALSE 16011
// eff := 70 else
16001: LD_ADDR_VAR 0 4
16005: PUSH
16006: LD_INT 70
16008: ST_TO_ADDR
16009: GO 16019
// eff := 30 ;
16011: LD_ADDR_VAR 0 4
16015: PUSH
16016: LD_INT 30
16018: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 250
16028: PPUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 251
16038: PPUSH
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 495
// end ; end ;
16048: LD_VAR 0 2
16052: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16053: LD_INT 0
16055: PPUSH
// end ;
16056: LD_VAR 0 4
16060: RET
// export function SOS_Command ( cmd ) ; begin
16061: LD_INT 0
16063: PPUSH
// end ;
16064: LD_VAR 0 2
16068: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16069: LD_INT 0
16071: PPUSH
// end ;
16072: LD_VAR 0 6
16076: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
16077: LD_INT 0
16079: PPUSH
16080: PPUSH
// if not vehicle or not factory then
16081: LD_VAR 0 1
16085: NOT
16086: PUSH
16087: LD_VAR 0 2
16091: NOT
16092: OR
16093: IFFALSE 16097
// exit ;
16095: GO 16328
// if factoryWaypoints >= factory then
16097: LD_EXP 60
16101: PUSH
16102: LD_VAR 0 2
16106: GREATEREQUAL
16107: IFFALSE 16328
// if factoryWaypoints [ factory ] then
16109: LD_EXP 60
16113: PUSH
16114: LD_VAR 0 2
16118: ARRAY
16119: IFFALSE 16328
// begin if GetControl ( vehicle ) = control_manual then
16121: LD_VAR 0 1
16125: PPUSH
16126: CALL_OW 263
16130: PUSH
16131: LD_INT 1
16133: EQUAL
16134: IFFALSE 16215
// begin driver := IsDrivenBy ( vehicle ) ;
16136: LD_ADDR_VAR 0 4
16140: PUSH
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 311
16150: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16151: LD_VAR 0 4
16155: PPUSH
16156: LD_EXP 60
16160: PUSH
16161: LD_VAR 0 2
16165: ARRAY
16166: PUSH
16167: LD_INT 3
16169: ARRAY
16170: PPUSH
16171: LD_EXP 60
16175: PUSH
16176: LD_VAR 0 2
16180: ARRAY
16181: PUSH
16182: LD_INT 4
16184: ARRAY
16185: PPUSH
16186: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16190: LD_VAR 0 4
16194: PPUSH
16195: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16199: LD_VAR 0 4
16203: PPUSH
16204: LD_VAR 0 2
16208: PPUSH
16209: CALL_OW 180
// end else
16213: GO 16328
// if GetControl ( vehicle ) = control_remote then
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 263
16224: PUSH
16225: LD_INT 2
16227: EQUAL
16228: IFFALSE 16289
// begin wait ( 0 0$2 ) ;
16230: LD_INT 70
16232: PPUSH
16233: CALL_OW 67
// if Connect ( vehicle ) then
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL 29322 0 1
16246: IFFALSE 16287
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16248: LD_VAR 0 1
16252: PPUSH
16253: LD_EXP 60
16257: PUSH
16258: LD_VAR 0 2
16262: ARRAY
16263: PUSH
16264: LD_INT 3
16266: ARRAY
16267: PPUSH
16268: LD_EXP 60
16272: PUSH
16273: LD_VAR 0 2
16277: ARRAY
16278: PUSH
16279: LD_INT 4
16281: ARRAY
16282: PPUSH
16283: CALL_OW 171
// end else
16287: GO 16328
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16289: LD_VAR 0 1
16293: PPUSH
16294: LD_EXP 60
16298: PUSH
16299: LD_VAR 0 2
16303: ARRAY
16304: PUSH
16305: LD_INT 3
16307: ARRAY
16308: PPUSH
16309: LD_EXP 60
16313: PUSH
16314: LD_VAR 0 2
16318: ARRAY
16319: PUSH
16320: LD_INT 4
16322: ARRAY
16323: PPUSH
16324: CALL_OW 171
// end ; end ;
16328: LD_VAR 0 3
16332: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16333: LD_INT 0
16335: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16336: LD_VAR 0 1
16340: PUSH
16341: LD_INT 250
16343: EQUAL
16344: PUSH
16345: LD_VAR 0 2
16349: PPUSH
16350: CALL_OW 264
16354: PUSH
16355: LD_INT 81
16357: EQUAL
16358: AND
16359: IFFALSE 16380
// MinerPlaceMine ( unit , x , y ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: LD_VAR 0 5
16375: PPUSH
16376: CALL 19370 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 251
16387: EQUAL
16388: PUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_INT 81
16401: EQUAL
16402: AND
16403: IFFALSE 16424
// MinerDetonateMine ( unit , x , y ) ;
16405: LD_VAR 0 2
16409: PPUSH
16410: LD_VAR 0 4
16414: PPUSH
16415: LD_VAR 0 5
16419: PPUSH
16420: CALL 19645 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16424: LD_VAR 0 1
16428: PUSH
16429: LD_INT 252
16431: EQUAL
16432: PUSH
16433: LD_VAR 0 2
16437: PPUSH
16438: CALL_OW 264
16442: PUSH
16443: LD_INT 81
16445: EQUAL
16446: AND
16447: IFFALSE 16468
// MinerCreateMinefield ( unit , x , y ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_VAR 0 4
16458: PPUSH
16459: LD_VAR 0 5
16463: PPUSH
16464: CALL 20062 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16468: LD_VAR 0 1
16472: PUSH
16473: LD_INT 253
16475: EQUAL
16476: PUSH
16477: LD_VAR 0 2
16481: PPUSH
16482: CALL_OW 257
16486: PUSH
16487: LD_INT 5
16489: EQUAL
16490: AND
16491: IFFALSE 16512
// ComBinocular ( unit , x , y ) ;
16493: LD_VAR 0 2
16497: PPUSH
16498: LD_VAR 0 4
16502: PPUSH
16503: LD_VAR 0 5
16507: PPUSH
16508: CALL 20431 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16512: LD_VAR 0 1
16516: PUSH
16517: LD_INT 254
16519: EQUAL
16520: PUSH
16521: LD_VAR 0 2
16525: PPUSH
16526: CALL_OW 264
16530: PUSH
16531: LD_INT 99
16533: EQUAL
16534: AND
16535: PUSH
16536: LD_VAR 0 3
16540: PPUSH
16541: CALL_OW 263
16545: PUSH
16546: LD_INT 3
16548: EQUAL
16549: AND
16550: IFFALSE 16566
// HackDestroyVehicle ( unit , selectedUnit ) ;
16552: LD_VAR 0 2
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: CALL 18734 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16566: LD_VAR 0 1
16570: PUSH
16571: LD_INT 255
16573: EQUAL
16574: PUSH
16575: LD_VAR 0 2
16579: PPUSH
16580: CALL_OW 264
16584: PUSH
16585: LD_INT 14
16587: PUSH
16588: LD_INT 53
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: IN
16595: AND
16596: PUSH
16597: LD_VAR 0 4
16601: PPUSH
16602: LD_VAR 0 5
16606: PPUSH
16607: CALL_OW 488
16611: AND
16612: IFFALSE 16636
// CutTreeXYR ( unit , x , y , 12 ) ;
16614: LD_VAR 0 2
16618: PPUSH
16619: LD_VAR 0 4
16623: PPUSH
16624: LD_VAR 0 5
16628: PPUSH
16629: LD_INT 12
16631: PPUSH
16632: CALL 16731 0 4
// if cmd = 256 then
16636: LD_VAR 0 1
16640: PUSH
16641: LD_INT 256
16643: EQUAL
16644: IFFALSE 16665
// SetFactoryWaypoint ( unit , x , y ) ;
16646: LD_VAR 0 2
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: LD_VAR 0 5
16660: PPUSH
16661: CALL 14646 0 3
// if cmd = 257 then
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 257
16672: EQUAL
16673: IFFALSE 16694
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16675: LD_VAR 0 2
16679: PPUSH
16680: LD_VAR 0 4
16684: PPUSH
16685: LD_VAR 0 5
16689: PPUSH
16690: CALL 15008 0 3
// if cmd = 258 then
16694: LD_VAR 0 1
16698: PUSH
16699: LD_INT 258
16701: EQUAL
16702: IFFALSE 16726
// BurnTreeXYR ( unit , x , y , 8 ) ;
16704: LD_VAR 0 2
16708: PPUSH
16709: LD_VAR 0 4
16713: PPUSH
16714: LD_VAR 0 5
16718: PPUSH
16719: LD_INT 8
16721: PPUSH
16722: CALL 17125 0 4
// end ;
16726: LD_VAR 0 6
16730: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16731: LD_INT 0
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 302
16751: NOT
16752: PUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: LD_VAR 0 3
16762: PPUSH
16763: CALL_OW 488
16767: NOT
16768: OR
16769: PUSH
16770: LD_VAR 0 4
16774: NOT
16775: OR
16776: IFFALSE 16780
// exit ;
16778: GO 17120
// list := [ ] ;
16780: LD_ADDR_VAR 0 13
16784: PUSH
16785: EMPTY
16786: ST_TO_ADDR
// if x - r < 0 then
16787: LD_VAR 0 2
16791: PUSH
16792: LD_VAR 0 4
16796: MINUS
16797: PUSH
16798: LD_INT 0
16800: LESS
16801: IFFALSE 16813
// min_x := 0 else
16803: LD_ADDR_VAR 0 7
16807: PUSH
16808: LD_INT 0
16810: ST_TO_ADDR
16811: GO 16829
// min_x := x - r ;
16813: LD_ADDR_VAR 0 7
16817: PUSH
16818: LD_VAR 0 2
16822: PUSH
16823: LD_VAR 0 4
16827: MINUS
16828: ST_TO_ADDR
// if y - r < 0 then
16829: LD_VAR 0 3
16833: PUSH
16834: LD_VAR 0 4
16838: MINUS
16839: PUSH
16840: LD_INT 0
16842: LESS
16843: IFFALSE 16855
// min_y := 0 else
16845: LD_ADDR_VAR 0 8
16849: PUSH
16850: LD_INT 0
16852: ST_TO_ADDR
16853: GO 16871
// min_y := y - r ;
16855: LD_ADDR_VAR 0 8
16859: PUSH
16860: LD_VAR 0 3
16864: PUSH
16865: LD_VAR 0 4
16869: MINUS
16870: ST_TO_ADDR
// max_x := x + r ;
16871: LD_ADDR_VAR 0 9
16875: PUSH
16876: LD_VAR 0 2
16880: PUSH
16881: LD_VAR 0 4
16885: PLUS
16886: ST_TO_ADDR
// max_y := y + r ;
16887: LD_ADDR_VAR 0 10
16891: PUSH
16892: LD_VAR 0 3
16896: PUSH
16897: LD_VAR 0 4
16901: PLUS
16902: ST_TO_ADDR
// for _x = min_x to max_x do
16903: LD_ADDR_VAR 0 11
16907: PUSH
16908: DOUBLE
16909: LD_VAR 0 7
16913: DEC
16914: ST_TO_ADDR
16915: LD_VAR 0 9
16919: PUSH
16920: FOR_TO
16921: IFFALSE 17038
// for _y = min_y to max_y do
16923: LD_ADDR_VAR 0 12
16927: PUSH
16928: DOUBLE
16929: LD_VAR 0 8
16933: DEC
16934: ST_TO_ADDR
16935: LD_VAR 0 10
16939: PUSH
16940: FOR_TO
16941: IFFALSE 17034
// begin if not ValidHex ( _x , _y ) then
16943: LD_VAR 0 11
16947: PPUSH
16948: LD_VAR 0 12
16952: PPUSH
16953: CALL_OW 488
16957: NOT
16958: IFFALSE 16962
// continue ;
16960: GO 16940
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16962: LD_VAR 0 11
16966: PPUSH
16967: LD_VAR 0 12
16971: PPUSH
16972: CALL_OW 351
16976: PUSH
16977: LD_VAR 0 11
16981: PPUSH
16982: LD_VAR 0 12
16986: PPUSH
16987: CALL_OW 554
16991: AND
16992: IFFALSE 17032
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16994: LD_ADDR_VAR 0 13
16998: PUSH
16999: LD_VAR 0 13
17003: PPUSH
17004: LD_VAR 0 13
17008: PUSH
17009: LD_INT 1
17011: PLUS
17012: PPUSH
17013: LD_VAR 0 11
17017: PUSH
17018: LD_VAR 0 12
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 2
17031: ST_TO_ADDR
// end ;
17032: GO 16940
17034: POP
17035: POP
17036: GO 16920
17038: POP
17039: POP
// if not list then
17040: LD_VAR 0 13
17044: NOT
17045: IFFALSE 17049
// exit ;
17047: GO 17120
// for i in list do
17049: LD_ADDR_VAR 0 6
17053: PUSH
17054: LD_VAR 0 13
17058: PUSH
17059: FOR_IN
17060: IFFALSE 17118
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17062: LD_VAR 0 1
17066: PPUSH
17067: LD_STRING M
17069: PUSH
17070: LD_VAR 0 6
17074: PUSH
17075: LD_INT 1
17077: ARRAY
17078: PUSH
17079: LD_VAR 0 6
17083: PUSH
17084: LD_INT 2
17086: ARRAY
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: PPUSH
17112: CALL_OW 447
17116: GO 17059
17118: POP
17119: POP
// end ;
17120: LD_VAR 0 5
17124: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17125: LD_INT 0
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 302
17146: NOT
17147: PUSH
17148: LD_VAR 0 2
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: CALL_OW 488
17162: NOT
17163: OR
17164: PUSH
17165: LD_VAR 0 4
17169: NOT
17170: OR
17171: IFFALSE 17175
// exit ;
17173: GO 17688
// list := [ ] ;
17175: LD_ADDR_VAR 0 13
17179: PUSH
17180: EMPTY
17181: ST_TO_ADDR
// if x - r < 0 then
17182: LD_VAR 0 2
17186: PUSH
17187: LD_VAR 0 4
17191: MINUS
17192: PUSH
17193: LD_INT 0
17195: LESS
17196: IFFALSE 17208
// min_x := 0 else
17198: LD_ADDR_VAR 0 7
17202: PUSH
17203: LD_INT 0
17205: ST_TO_ADDR
17206: GO 17224
// min_x := x - r ;
17208: LD_ADDR_VAR 0 7
17212: PUSH
17213: LD_VAR 0 2
17217: PUSH
17218: LD_VAR 0 4
17222: MINUS
17223: ST_TO_ADDR
// if y - r < 0 then
17224: LD_VAR 0 3
17228: PUSH
17229: LD_VAR 0 4
17233: MINUS
17234: PUSH
17235: LD_INT 0
17237: LESS
17238: IFFALSE 17250
// min_y := 0 else
17240: LD_ADDR_VAR 0 8
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
17248: GO 17266
// min_y := y - r ;
17250: LD_ADDR_VAR 0 8
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_VAR 0 4
17264: MINUS
17265: ST_TO_ADDR
// max_x := x + r ;
17266: LD_ADDR_VAR 0 9
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: LD_VAR 0 4
17280: PLUS
17281: ST_TO_ADDR
// max_y := y + r ;
17282: LD_ADDR_VAR 0 10
17286: PUSH
17287: LD_VAR 0 3
17291: PUSH
17292: LD_VAR 0 4
17296: PLUS
17297: ST_TO_ADDR
// for _x = min_x to max_x do
17298: LD_ADDR_VAR 0 11
17302: PUSH
17303: DOUBLE
17304: LD_VAR 0 7
17308: DEC
17309: ST_TO_ADDR
17310: LD_VAR 0 9
17314: PUSH
17315: FOR_TO
17316: IFFALSE 17433
// for _y = min_y to max_y do
17318: LD_ADDR_VAR 0 12
17322: PUSH
17323: DOUBLE
17324: LD_VAR 0 8
17328: DEC
17329: ST_TO_ADDR
17330: LD_VAR 0 10
17334: PUSH
17335: FOR_TO
17336: IFFALSE 17429
// begin if not ValidHex ( _x , _y ) then
17338: LD_VAR 0 11
17342: PPUSH
17343: LD_VAR 0 12
17347: PPUSH
17348: CALL_OW 488
17352: NOT
17353: IFFALSE 17357
// continue ;
17355: GO 17335
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17357: LD_VAR 0 11
17361: PPUSH
17362: LD_VAR 0 12
17366: PPUSH
17367: CALL_OW 351
17371: PUSH
17372: LD_VAR 0 11
17376: PPUSH
17377: LD_VAR 0 12
17381: PPUSH
17382: CALL_OW 554
17386: AND
17387: IFFALSE 17427
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17389: LD_ADDR_VAR 0 13
17393: PUSH
17394: LD_VAR 0 13
17398: PPUSH
17399: LD_VAR 0 13
17403: PUSH
17404: LD_INT 1
17406: PLUS
17407: PPUSH
17408: LD_VAR 0 11
17412: PUSH
17413: LD_VAR 0 12
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PPUSH
17422: CALL_OW 2
17426: ST_TO_ADDR
// end ;
17427: GO 17335
17429: POP
17430: POP
17431: GO 17315
17433: POP
17434: POP
// if not list then
17435: LD_VAR 0 13
17439: NOT
17440: IFFALSE 17444
// exit ;
17442: GO 17688
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17444: LD_ADDR_VAR 0 13
17448: PUSH
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_VAR 0 13
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_INT 1
17464: PPUSH
17465: CALL 26464 0 4
17469: ST_TO_ADDR
// ComStop ( flame ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 141
// for i in list do
17479: LD_ADDR_VAR 0 6
17483: PUSH
17484: LD_VAR 0 13
17488: PUSH
17489: FOR_IN
17490: IFFALSE 17521
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17492: LD_VAR 0 1
17496: PPUSH
17497: LD_VAR 0 6
17501: PUSH
17502: LD_INT 1
17504: ARRAY
17505: PPUSH
17506: LD_VAR 0 6
17510: PUSH
17511: LD_INT 2
17513: ARRAY
17514: PPUSH
17515: CALL_OW 176
17519: GO 17489
17521: POP
17522: POP
// repeat wait ( 0 0$1 ) ;
17523: LD_INT 35
17525: PPUSH
17526: CALL_OW 67
// task := GetTaskList ( flame ) ;
17530: LD_ADDR_VAR 0 14
17534: PUSH
17535: LD_VAR 0 1
17539: PPUSH
17540: CALL_OW 437
17544: ST_TO_ADDR
// if not task then
17545: LD_VAR 0 14
17549: NOT
17550: IFFALSE 17554
// exit ;
17552: GO 17688
// if task [ 1 ] [ 1 ] <> | then
17554: LD_VAR 0 14
17558: PUSH
17559: LD_INT 1
17561: ARRAY
17562: PUSH
17563: LD_INT 1
17565: ARRAY
17566: PUSH
17567: LD_STRING |
17569: NONEQUAL
17570: IFFALSE 17574
// exit ;
17572: GO 17688
// _x := task [ 1 ] [ 2 ] ;
17574: LD_ADDR_VAR 0 11
17578: PUSH
17579: LD_VAR 0 14
17583: PUSH
17584: LD_INT 1
17586: ARRAY
17587: PUSH
17588: LD_INT 2
17590: ARRAY
17591: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17592: LD_ADDR_VAR 0 12
17596: PUSH
17597: LD_VAR 0 14
17601: PUSH
17602: LD_INT 1
17604: ARRAY
17605: PUSH
17606: LD_INT 3
17608: ARRAY
17609: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17610: LD_VAR 0 11
17614: PPUSH
17615: LD_VAR 0 12
17619: PPUSH
17620: CALL_OW 351
17624: NOT
17625: PUSH
17626: LD_VAR 0 11
17630: PPUSH
17631: LD_VAR 0 12
17635: PPUSH
17636: CALL_OW 554
17640: NOT
17641: OR
17642: IFFALSE 17676
// begin task := Delete ( task , 1 ) ;
17644: LD_ADDR_VAR 0 14
17648: PUSH
17649: LD_VAR 0 14
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL_OW 3
17661: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_VAR 0 14
17671: PPUSH
17672: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 314
17685: NOT
17686: IFFALSE 17523
// end ;
17688: LD_VAR 0 5
17692: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17693: LD_EXP 63
17697: NOT
17698: IFFALSE 17748
17700: GO 17702
17702: DISABLE
// begin initHack := true ;
17703: LD_ADDR_EXP 63
17707: PUSH
17708: LD_INT 1
17710: ST_TO_ADDR
// hackTanks := [ ] ;
17711: LD_ADDR_EXP 64
17715: PUSH
17716: EMPTY
17717: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17718: LD_ADDR_EXP 65
17722: PUSH
17723: EMPTY
17724: ST_TO_ADDR
// hackLimit := 3 ;
17725: LD_ADDR_EXP 66
17729: PUSH
17730: LD_INT 3
17732: ST_TO_ADDR
// hackDist := 12 ;
17733: LD_ADDR_EXP 67
17737: PUSH
17738: LD_INT 12
17740: ST_TO_ADDR
// hackCounter := [ ] ;
17741: LD_ADDR_EXP 68
17745: PUSH
17746: EMPTY
17747: ST_TO_ADDR
// end ;
17748: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17749: LD_EXP 63
17753: PUSH
17754: LD_INT 34
17756: PUSH
17757: LD_INT 99
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: AND
17769: IFFALSE 18022
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
17777: PPUSH
// begin enable ;
17778: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17779: LD_ADDR_VAR 0 1
17783: PUSH
17784: LD_INT 34
17786: PUSH
17787: LD_INT 99
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 18020
// begin if not i in hackTanks then
17802: LD_VAR 0 1
17806: PUSH
17807: LD_EXP 64
17811: IN
17812: NOT
17813: IFFALSE 17896
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17815: LD_ADDR_EXP 64
17819: PUSH
17820: LD_EXP 64
17824: PPUSH
17825: LD_EXP 64
17829: PUSH
17830: LD_INT 1
17832: PLUS
17833: PPUSH
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 1
17843: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17844: LD_ADDR_EXP 65
17848: PUSH
17849: LD_EXP 65
17853: PPUSH
17854: LD_EXP 65
17858: PUSH
17859: LD_INT 1
17861: PLUS
17862: PPUSH
17863: EMPTY
17864: PPUSH
17865: CALL_OW 1
17869: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17870: LD_ADDR_EXP 68
17874: PUSH
17875: LD_EXP 68
17879: PPUSH
17880: LD_EXP 68
17884: PUSH
17885: LD_INT 1
17887: PLUS
17888: PPUSH
17889: EMPTY
17890: PPUSH
17891: CALL_OW 1
17895: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 302
17905: NOT
17906: IFFALSE 17919
// begin HackUnlinkAll ( i ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL 18025 0 1
// continue ;
17917: GO 17799
// end ; HackCheckCapturedStatus ( i ) ;
17919: LD_VAR 0 1
17923: PPUSH
17924: CALL 18468 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17928: LD_ADDR_VAR 0 2
17932: PUSH
17933: LD_INT 81
17935: PUSH
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 255
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 33
17952: PUSH
17953: LD_INT 3
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 91
17962: PUSH
17963: LD_VAR 0 1
17967: PUSH
17968: LD_EXP 67
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 50
17980: PUSH
17981: EMPTY
17982: LIST
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: PPUSH
17990: CALL_OW 69
17994: ST_TO_ADDR
// if not tmp then
17995: LD_VAR 0 2
17999: NOT
18000: IFFALSE 18004
// continue ;
18002: GO 17799
// HackLink ( i , tmp ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PPUSH
18014: CALL 18161 0 2
// end ;
18018: GO 17799
18020: POP
18021: POP
// end ;
18022: PPOPN 2
18024: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18025: LD_INT 0
18027: PPUSH
18028: PPUSH
18029: PPUSH
// if not hack in hackTanks then
18030: LD_VAR 0 1
18034: PUSH
18035: LD_EXP 64
18039: IN
18040: NOT
18041: IFFALSE 18045
// exit ;
18043: GO 18156
// index := GetElementIndex ( hackTanks , hack ) ;
18045: LD_ADDR_VAR 0 4
18049: PUSH
18050: LD_EXP 64
18054: PPUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL 25761 0 2
18064: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18065: LD_EXP 65
18069: PUSH
18070: LD_VAR 0 4
18074: ARRAY
18075: IFFALSE 18156
// begin for i in hackTanksCaptured [ index ] do
18077: LD_ADDR_VAR 0 3
18081: PUSH
18082: LD_EXP 65
18086: PUSH
18087: LD_VAR 0 4
18091: ARRAY
18092: PUSH
18093: FOR_IN
18094: IFFALSE 18120
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18096: LD_VAR 0 3
18100: PUSH
18101: LD_INT 1
18103: ARRAY
18104: PPUSH
18105: LD_VAR 0 3
18109: PUSH
18110: LD_INT 2
18112: ARRAY
18113: PPUSH
18114: CALL_OW 235
18118: GO 18093
18120: POP
18121: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18122: LD_ADDR_EXP 65
18126: PUSH
18127: LD_EXP 65
18131: PPUSH
18132: LD_VAR 0 4
18136: PPUSH
18137: EMPTY
18138: PPUSH
18139: CALL_OW 1
18143: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 0
18151: PPUSH
18152: CALL_OW 505
// end ; end ;
18156: LD_VAR 0 2
18160: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18161: LD_INT 0
18163: PPUSH
18164: PPUSH
18165: PPUSH
// if not hack in hackTanks or not vehicles then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 64
18175: IN
18176: NOT
18177: PUSH
18178: LD_VAR 0 2
18182: NOT
18183: OR
18184: IFFALSE 18188
// exit ;
18186: GO 18463
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18188: LD_ADDR_VAR 0 2
18192: PUSH
18193: LD_VAR 0 1
18197: PPUSH
18198: LD_VAR 0 2
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL 26411 0 4
18213: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18214: LD_ADDR_VAR 0 5
18218: PUSH
18219: LD_EXP 64
18223: PPUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL 25761 0 2
18233: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18234: LD_EXP 65
18238: PUSH
18239: LD_VAR 0 5
18243: ARRAY
18244: PUSH
18245: LD_EXP 66
18249: LESS
18250: IFFALSE 18439
// begin for i := 1 to vehicles do
18252: LD_ADDR_VAR 0 4
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_VAR 0 2
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18437
// begin if hackTanksCaptured [ index ] = hackLimit then
18270: LD_EXP 65
18274: PUSH
18275: LD_VAR 0 5
18279: ARRAY
18280: PUSH
18281: LD_EXP 66
18285: EQUAL
18286: IFFALSE 18290
// break ;
18288: GO 18437
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18290: LD_ADDR_EXP 68
18294: PUSH
18295: LD_EXP 68
18299: PPUSH
18300: LD_VAR 0 5
18304: PPUSH
18305: LD_EXP 68
18309: PUSH
18310: LD_VAR 0 5
18314: ARRAY
18315: PUSH
18316: LD_INT 1
18318: PLUS
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18325: LD_ADDR_EXP 65
18329: PUSH
18330: LD_EXP 65
18334: PPUSH
18335: LD_VAR 0 5
18339: PUSH
18340: LD_EXP 65
18344: PUSH
18345: LD_VAR 0 5
18349: ARRAY
18350: PUSH
18351: LD_INT 1
18353: PLUS
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PPUSH
18359: LD_VAR 0 2
18363: PUSH
18364: LD_VAR 0 4
18368: ARRAY
18369: PUSH
18370: LD_VAR 0 2
18374: PUSH
18375: LD_VAR 0 4
18379: ARRAY
18380: PPUSH
18381: CALL_OW 255
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PPUSH
18390: CALL 25976 0 3
18394: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18395: LD_VAR 0 2
18399: PUSH
18400: LD_VAR 0 4
18404: ARRAY
18405: PPUSH
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 255
18415: PPUSH
18416: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18420: LD_VAR 0 2
18424: PUSH
18425: LD_VAR 0 4
18429: ARRAY
18430: PPUSH
18431: CALL_OW 141
// end ;
18435: GO 18267
18437: POP
18438: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_EXP 65
18448: PUSH
18449: LD_VAR 0 5
18453: ARRAY
18454: PUSH
18455: LD_INT 0
18457: PLUS
18458: PPUSH
18459: CALL_OW 505
// end ;
18463: LD_VAR 0 3
18467: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18468: LD_INT 0
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
// if not hack in hackTanks then
18474: LD_VAR 0 1
18478: PUSH
18479: LD_EXP 64
18483: IN
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18729
// index := GetElementIndex ( hackTanks , hack ) ;
18489: LD_ADDR_VAR 0 4
18493: PUSH
18494: LD_EXP 64
18498: PPUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL 25761 0 2
18508: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: DOUBLE
18515: LD_EXP 65
18519: PUSH
18520: LD_VAR 0 4
18524: ARRAY
18525: INC
18526: ST_TO_ADDR
18527: LD_INT 1
18529: PUSH
18530: FOR_DOWNTO
18531: IFFALSE 18703
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18533: LD_ADDR_VAR 0 5
18537: PUSH
18538: LD_EXP 65
18542: PUSH
18543: LD_VAR 0 4
18547: ARRAY
18548: PUSH
18549: LD_VAR 0 3
18553: ARRAY
18554: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18555: LD_VAR 0 5
18559: PUSH
18560: LD_INT 1
18562: ARRAY
18563: PPUSH
18564: CALL_OW 302
18568: NOT
18569: PUSH
18570: LD_VAR 0 5
18574: PUSH
18575: LD_INT 1
18577: ARRAY
18578: PPUSH
18579: CALL_OW 255
18583: PUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 255
18593: NONEQUAL
18594: OR
18595: IFFALSE 18701
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18597: LD_VAR 0 5
18601: PUSH
18602: LD_INT 1
18604: ARRAY
18605: PPUSH
18606: CALL_OW 305
18610: PUSH
18611: LD_VAR 0 5
18615: PUSH
18616: LD_INT 1
18618: ARRAY
18619: PPUSH
18620: CALL_OW 255
18624: PUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 255
18634: EQUAL
18635: AND
18636: IFFALSE 18660
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18638: LD_VAR 0 5
18642: PUSH
18643: LD_INT 1
18645: ARRAY
18646: PPUSH
18647: LD_VAR 0 5
18651: PUSH
18652: LD_INT 2
18654: ARRAY
18655: PPUSH
18656: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18660: LD_ADDR_EXP 65
18664: PUSH
18665: LD_EXP 65
18669: PPUSH
18670: LD_VAR 0 4
18674: PPUSH
18675: LD_EXP 65
18679: PUSH
18680: LD_VAR 0 4
18684: ARRAY
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: CALL_OW 3
18695: PPUSH
18696: CALL_OW 1
18700: ST_TO_ADDR
// end ; end ;
18701: GO 18530
18703: POP
18704: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_EXP 65
18714: PUSH
18715: LD_VAR 0 4
18719: ARRAY
18720: PUSH
18721: LD_INT 0
18723: PLUS
18724: PPUSH
18725: CALL_OW 505
// end ;
18729: LD_VAR 0 2
18733: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18734: LD_INT 0
18736: PPUSH
18737: PPUSH
18738: PPUSH
18739: PPUSH
// if not hack in hackTanks then
18740: LD_VAR 0 1
18744: PUSH
18745: LD_EXP 64
18749: IN
18750: NOT
18751: IFFALSE 18755
// exit ;
18753: GO 18840
// index := GetElementIndex ( hackTanks , hack ) ;
18755: LD_ADDR_VAR 0 5
18759: PUSH
18760: LD_EXP 64
18764: PPUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL 25761 0 2
18774: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18775: LD_ADDR_VAR 0 4
18779: PUSH
18780: DOUBLE
18781: LD_INT 1
18783: DEC
18784: ST_TO_ADDR
18785: LD_EXP 65
18789: PUSH
18790: LD_VAR 0 5
18794: ARRAY
18795: PUSH
18796: FOR_TO
18797: IFFALSE 18838
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18799: LD_EXP 65
18803: PUSH
18804: LD_VAR 0 5
18808: ARRAY
18809: PUSH
18810: LD_VAR 0 4
18814: ARRAY
18815: PUSH
18816: LD_INT 1
18818: ARRAY
18819: PUSH
18820: LD_VAR 0 2
18824: EQUAL
18825: IFFALSE 18836
// KillUnit ( vehicle ) ;
18827: LD_VAR 0 2
18831: PPUSH
18832: CALL_OW 66
18836: GO 18796
18838: POP
18839: POP
// end ;
18840: LD_VAR 0 3
18844: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18845: LD_EXP 69
18849: NOT
18850: IFFALSE 18885
18852: GO 18854
18854: DISABLE
// begin initMiner := true ;
18855: LD_ADDR_EXP 69
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// minersList := [ ] ;
18863: LD_ADDR_EXP 70
18867: PUSH
18868: EMPTY
18869: ST_TO_ADDR
// minerMinesList := [ ] ;
18870: LD_ADDR_EXP 71
18874: PUSH
18875: EMPTY
18876: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18877: LD_ADDR_EXP 72
18881: PUSH
18882: LD_INT 5
18884: ST_TO_ADDR
// end ;
18885: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18886: LD_EXP 69
18890: PUSH
18891: LD_INT 34
18893: PUSH
18894: LD_INT 81
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: AND
18906: IFFALSE 19367
18908: GO 18910
18910: DISABLE
18911: LD_INT 0
18913: PPUSH
18914: PPUSH
18915: PPUSH
18916: PPUSH
// begin enable ;
18917: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18918: LD_ADDR_VAR 0 1
18922: PUSH
18923: LD_INT 34
18925: PUSH
18926: LD_INT 81
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: PUSH
18938: FOR_IN
18939: IFFALSE 19011
// begin if not i in minersList then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_EXP 70
18950: IN
18951: NOT
18952: IFFALSE 19009
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18954: LD_ADDR_EXP 70
18958: PUSH
18959: LD_EXP 70
18963: PPUSH
18964: LD_EXP 70
18968: PUSH
18969: LD_INT 1
18971: PLUS
18972: PPUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 1
18982: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18983: LD_ADDR_EXP 71
18987: PUSH
18988: LD_EXP 71
18992: PPUSH
18993: LD_EXP 71
18997: PUSH
18998: LD_INT 1
19000: PLUS
19001: PPUSH
19002: EMPTY
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
// end end ;
19009: GO 18938
19011: POP
19012: POP
// for i := minerMinesList downto 1 do
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: DOUBLE
19019: LD_EXP 71
19023: INC
19024: ST_TO_ADDR
19025: LD_INT 1
19027: PUSH
19028: FOR_DOWNTO
19029: IFFALSE 19365
// begin if IsLive ( minersList [ i ] ) then
19031: LD_EXP 70
19035: PUSH
19036: LD_VAR 0 1
19040: ARRAY
19041: PPUSH
19042: CALL_OW 300
19046: IFFALSE 19074
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19048: LD_EXP 70
19052: PUSH
19053: LD_VAR 0 1
19057: ARRAY
19058: PPUSH
19059: LD_EXP 71
19063: PUSH
19064: LD_VAR 0 1
19068: ARRAY
19069: PPUSH
19070: CALL_OW 505
// if not minerMinesList [ i ] then
19074: LD_EXP 71
19078: PUSH
19079: LD_VAR 0 1
19083: ARRAY
19084: NOT
19085: IFFALSE 19089
// continue ;
19087: GO 19028
// for j := minerMinesList [ i ] downto 1 do
19089: LD_ADDR_VAR 0 2
19093: PUSH
19094: DOUBLE
19095: LD_EXP 71
19099: PUSH
19100: LD_VAR 0 1
19104: ARRAY
19105: INC
19106: ST_TO_ADDR
19107: LD_INT 1
19109: PUSH
19110: FOR_DOWNTO
19111: IFFALSE 19361
// begin side := GetSide ( minersList [ i ] ) ;
19113: LD_ADDR_VAR 0 3
19117: PUSH
19118: LD_EXP 70
19122: PUSH
19123: LD_VAR 0 1
19127: ARRAY
19128: PPUSH
19129: CALL_OW 255
19133: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19134: LD_ADDR_VAR 0 4
19138: PUSH
19139: LD_EXP 71
19143: PUSH
19144: LD_VAR 0 1
19148: ARRAY
19149: PUSH
19150: LD_VAR 0 2
19154: ARRAY
19155: PUSH
19156: LD_INT 1
19158: ARRAY
19159: PPUSH
19160: LD_EXP 71
19164: PUSH
19165: LD_VAR 0 1
19169: ARRAY
19170: PUSH
19171: LD_VAR 0 2
19175: ARRAY
19176: PUSH
19177: LD_INT 2
19179: ARRAY
19180: PPUSH
19181: CALL_OW 428
19185: ST_TO_ADDR
// if not tmp then
19186: LD_VAR 0 4
19190: NOT
19191: IFFALSE 19195
// continue ;
19193: GO 19110
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19195: LD_VAR 0 4
19199: PUSH
19200: LD_INT 81
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: IN
19217: PUSH
19218: LD_EXP 71
19222: PUSH
19223: LD_VAR 0 1
19227: ARRAY
19228: PUSH
19229: LD_VAR 0 2
19233: ARRAY
19234: PUSH
19235: LD_INT 1
19237: ARRAY
19238: PPUSH
19239: LD_EXP 71
19243: PUSH
19244: LD_VAR 0 1
19248: ARRAY
19249: PUSH
19250: LD_VAR 0 2
19254: ARRAY
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: PPUSH
19260: CALL_OW 458
19264: AND
19265: IFFALSE 19359
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19267: LD_EXP 71
19271: PUSH
19272: LD_VAR 0 1
19276: ARRAY
19277: PUSH
19278: LD_VAR 0 2
19282: ARRAY
19283: PUSH
19284: LD_INT 1
19286: ARRAY
19287: PPUSH
19288: LD_EXP 71
19292: PUSH
19293: LD_VAR 0 1
19297: ARRAY
19298: PUSH
19299: LD_VAR 0 2
19303: ARRAY
19304: PUSH
19305: LD_INT 2
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19318: LD_ADDR_EXP 71
19322: PUSH
19323: LD_EXP 71
19327: PPUSH
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_EXP 71
19337: PUSH
19338: LD_VAR 0 1
19342: ARRAY
19343: PPUSH
19344: LD_VAR 0 2
19348: PPUSH
19349: CALL_OW 3
19353: PPUSH
19354: CALL_OW 1
19358: ST_TO_ADDR
// end ; end ;
19359: GO 19110
19361: POP
19362: POP
// end ;
19363: GO 19028
19365: POP
19366: POP
// end ;
19367: PPOPN 4
19369: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19370: LD_INT 0
19372: PPUSH
19373: PPUSH
// result := false ;
19374: LD_ADDR_VAR 0 4
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 264
19391: PUSH
19392: LD_INT 81
19394: EQUAL
19395: NOT
19396: IFFALSE 19400
// exit ;
19398: GO 19640
// index := GetElementIndex ( minersList , unit ) ;
19400: LD_ADDR_VAR 0 5
19404: PUSH
19405: LD_EXP 70
19409: PPUSH
19410: LD_VAR 0 1
19414: PPUSH
19415: CALL 25761 0 2
19419: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19420: LD_EXP 71
19424: PUSH
19425: LD_VAR 0 5
19429: ARRAY
19430: PUSH
19431: LD_EXP 72
19435: GREATEREQUAL
19436: IFFALSE 19440
// exit ;
19438: GO 19640
// ComMoveXY ( unit , x , y ) ;
19440: LD_VAR 0 1
19444: PPUSH
19445: LD_VAR 0 2
19449: PPUSH
19450: LD_VAR 0 3
19454: PPUSH
19455: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19459: LD_INT 35
19461: PPUSH
19462: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19466: LD_VAR 0 1
19470: PPUSH
19471: LD_VAR 0 2
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: CALL 57502 0 3
19485: NOT
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 314
19496: AND
19497: IFFALSE 19501
// exit ;
19499: GO 19640
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19501: LD_VAR 0 2
19505: PPUSH
19506: LD_VAR 0 3
19510: PPUSH
19511: CALL_OW 428
19515: PUSH
19516: LD_VAR 0 1
19520: EQUAL
19521: PUSH
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 314
19531: NOT
19532: AND
19533: IFFALSE 19459
// PlaySoundXY ( x , y , PlantMine ) ;
19535: LD_VAR 0 2
19539: PPUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_STRING PlantMine
19547: PPUSH
19548: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19552: LD_VAR 0 2
19556: PPUSH
19557: LD_VAR 0 3
19561: PPUSH
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 255
19571: PPUSH
19572: LD_INT 0
19574: PPUSH
19575: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19579: LD_ADDR_EXP 71
19583: PUSH
19584: LD_EXP 71
19588: PPUSH
19589: LD_VAR 0 5
19593: PUSH
19594: LD_EXP 71
19598: PUSH
19599: LD_VAR 0 5
19603: ARRAY
19604: PUSH
19605: LD_INT 1
19607: PLUS
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: LD_VAR 0 2
19617: PUSH
19618: LD_VAR 0 3
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PPUSH
19627: CALL 25976 0 3
19631: ST_TO_ADDR
// result := true ;
19632: LD_ADDR_VAR 0 4
19636: PUSH
19637: LD_INT 1
19639: ST_TO_ADDR
// end ;
19640: LD_VAR 0 4
19644: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19645: LD_INT 0
19647: PPUSH
19648: PPUSH
19649: PPUSH
// if not unit in minersList then
19650: LD_VAR 0 1
19654: PUSH
19655: LD_EXP 70
19659: IN
19660: NOT
19661: IFFALSE 19665
// exit ;
19663: GO 20057
// index := GetElementIndex ( minersList , unit ) ;
19665: LD_ADDR_VAR 0 6
19669: PUSH
19670: LD_EXP 70
19674: PPUSH
19675: LD_VAR 0 1
19679: PPUSH
19680: CALL 25761 0 2
19684: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19685: LD_ADDR_VAR 0 5
19689: PUSH
19690: DOUBLE
19691: LD_EXP 71
19695: PUSH
19696: LD_VAR 0 6
19700: ARRAY
19701: INC
19702: ST_TO_ADDR
19703: LD_INT 1
19705: PUSH
19706: FOR_DOWNTO
19707: IFFALSE 19868
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19709: LD_EXP 71
19713: PUSH
19714: LD_VAR 0 6
19718: ARRAY
19719: PUSH
19720: LD_VAR 0 5
19724: ARRAY
19725: PUSH
19726: LD_INT 1
19728: ARRAY
19729: PUSH
19730: LD_VAR 0 2
19734: EQUAL
19735: PUSH
19736: LD_EXP 71
19740: PUSH
19741: LD_VAR 0 6
19745: ARRAY
19746: PUSH
19747: LD_VAR 0 5
19751: ARRAY
19752: PUSH
19753: LD_INT 2
19755: ARRAY
19756: PUSH
19757: LD_VAR 0 3
19761: EQUAL
19762: AND
19763: IFFALSE 19866
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19765: LD_EXP 71
19769: PUSH
19770: LD_VAR 0 6
19774: ARRAY
19775: PUSH
19776: LD_VAR 0 5
19780: ARRAY
19781: PUSH
19782: LD_INT 1
19784: ARRAY
19785: PPUSH
19786: LD_EXP 71
19790: PUSH
19791: LD_VAR 0 6
19795: ARRAY
19796: PUSH
19797: LD_VAR 0 5
19801: ARRAY
19802: PUSH
19803: LD_INT 2
19805: ARRAY
19806: PPUSH
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 255
19816: PPUSH
19817: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19821: LD_ADDR_EXP 71
19825: PUSH
19826: LD_EXP 71
19830: PPUSH
19831: LD_VAR 0 6
19835: PPUSH
19836: LD_EXP 71
19840: PUSH
19841: LD_VAR 0 6
19845: ARRAY
19846: PPUSH
19847: LD_VAR 0 5
19851: PPUSH
19852: CALL_OW 3
19856: PPUSH
19857: CALL_OW 1
19861: ST_TO_ADDR
// exit ;
19862: POP
19863: POP
19864: GO 20057
// end ; end ;
19866: GO 19706
19868: POP
19869: POP
// for i := minerMinesList [ index ] downto 1 do
19870: LD_ADDR_VAR 0 5
19874: PUSH
19875: DOUBLE
19876: LD_EXP 71
19880: PUSH
19881: LD_VAR 0 6
19885: ARRAY
19886: INC
19887: ST_TO_ADDR
19888: LD_INT 1
19890: PUSH
19891: FOR_DOWNTO
19892: IFFALSE 20055
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19894: LD_EXP 71
19898: PUSH
19899: LD_VAR 0 6
19903: ARRAY
19904: PUSH
19905: LD_VAR 0 5
19909: ARRAY
19910: PUSH
19911: LD_INT 1
19913: ARRAY
19914: PPUSH
19915: LD_EXP 71
19919: PUSH
19920: LD_VAR 0 6
19924: ARRAY
19925: PUSH
19926: LD_VAR 0 5
19930: ARRAY
19931: PUSH
19932: LD_INT 2
19934: ARRAY
19935: PPUSH
19936: LD_VAR 0 2
19940: PPUSH
19941: LD_VAR 0 3
19945: PPUSH
19946: CALL_OW 298
19950: PUSH
19951: LD_INT 6
19953: LESS
19954: IFFALSE 20053
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19956: LD_EXP 71
19960: PUSH
19961: LD_VAR 0 6
19965: ARRAY
19966: PUSH
19967: LD_VAR 0 5
19971: ARRAY
19972: PUSH
19973: LD_INT 1
19975: ARRAY
19976: PPUSH
19977: LD_EXP 71
19981: PUSH
19982: LD_VAR 0 6
19986: ARRAY
19987: PUSH
19988: LD_VAR 0 5
19992: ARRAY
19993: PUSH
19994: LD_INT 2
19996: ARRAY
19997: PPUSH
19998: LD_VAR 0 1
20002: PPUSH
20003: CALL_OW 255
20007: PPUSH
20008: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20012: LD_ADDR_EXP 71
20016: PUSH
20017: LD_EXP 71
20021: PPUSH
20022: LD_VAR 0 6
20026: PPUSH
20027: LD_EXP 71
20031: PUSH
20032: LD_VAR 0 6
20036: ARRAY
20037: PPUSH
20038: LD_VAR 0 5
20042: PPUSH
20043: CALL_OW 3
20047: PPUSH
20048: CALL_OW 1
20052: ST_TO_ADDR
// end ; end ;
20053: GO 19891
20055: POP
20056: POP
// end ;
20057: LD_VAR 0 4
20061: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20062: LD_INT 0
20064: PPUSH
20065: PPUSH
20066: PPUSH
20067: PPUSH
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
20072: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20073: LD_VAR 0 1
20077: PPUSH
20078: CALL_OW 264
20082: PUSH
20083: LD_INT 81
20085: EQUAL
20086: NOT
20087: PUSH
20088: LD_VAR 0 1
20092: PUSH
20093: LD_EXP 70
20097: IN
20098: NOT
20099: OR
20100: IFFALSE 20104
// exit ;
20102: GO 20426
// index := GetElementIndex ( minersList , unit ) ;
20104: LD_ADDR_VAR 0 6
20108: PUSH
20109: LD_EXP 70
20113: PPUSH
20114: LD_VAR 0 1
20118: PPUSH
20119: CALL 25761 0 2
20123: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20124: LD_ADDR_VAR 0 8
20128: PUSH
20129: LD_EXP 72
20133: PUSH
20134: LD_EXP 71
20138: PUSH
20139: LD_VAR 0 6
20143: ARRAY
20144: MINUS
20145: ST_TO_ADDR
// if not minesFreeAmount then
20146: LD_VAR 0 8
20150: NOT
20151: IFFALSE 20155
// exit ;
20153: GO 20426
// tmp := [ ] ;
20155: LD_ADDR_VAR 0 7
20159: PUSH
20160: EMPTY
20161: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20162: LD_ADDR_VAR 0 5
20166: PUSH
20167: DOUBLE
20168: LD_INT 1
20170: DEC
20171: ST_TO_ADDR
20172: LD_VAR 0 8
20176: PUSH
20177: FOR_TO
20178: IFFALSE 20373
// begin _d := rand ( 0 , 5 ) ;
20180: LD_ADDR_VAR 0 11
20184: PUSH
20185: LD_INT 0
20187: PPUSH
20188: LD_INT 5
20190: PPUSH
20191: CALL_OW 12
20195: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20196: LD_ADDR_VAR 0 12
20200: PUSH
20201: LD_INT 2
20203: PPUSH
20204: LD_INT 6
20206: PPUSH
20207: CALL_OW 12
20211: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20212: LD_ADDR_VAR 0 9
20216: PUSH
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_VAR 0 11
20226: PPUSH
20227: LD_VAR 0 12
20231: PPUSH
20232: CALL_OW 272
20236: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20237: LD_ADDR_VAR 0 10
20241: PUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: LD_VAR 0 11
20251: PPUSH
20252: LD_VAR 0 12
20256: PPUSH
20257: CALL_OW 273
20261: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20262: LD_VAR 0 9
20266: PPUSH
20267: LD_VAR 0 10
20271: PPUSH
20272: CALL_OW 488
20276: PUSH
20277: LD_VAR 0 9
20281: PUSH
20282: LD_VAR 0 10
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_VAR 0 7
20295: IN
20296: NOT
20297: AND
20298: PUSH
20299: LD_VAR 0 9
20303: PPUSH
20304: LD_VAR 0 10
20308: PPUSH
20309: CALL_OW 458
20313: NOT
20314: AND
20315: IFFALSE 20357
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20317: LD_ADDR_VAR 0 7
20321: PUSH
20322: LD_VAR 0 7
20326: PPUSH
20327: LD_VAR 0 7
20331: PUSH
20332: LD_INT 1
20334: PLUS
20335: PPUSH
20336: LD_VAR 0 9
20340: PUSH
20341: LD_VAR 0 10
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PPUSH
20350: CALL_OW 1
20354: ST_TO_ADDR
20355: GO 20371
// i := i - 1 ;
20357: LD_ADDR_VAR 0 5
20361: PUSH
20362: LD_VAR 0 5
20366: PUSH
20367: LD_INT 1
20369: MINUS
20370: ST_TO_ADDR
// end ;
20371: GO 20177
20373: POP
20374: POP
// for i in tmp do
20375: LD_ADDR_VAR 0 5
20379: PUSH
20380: LD_VAR 0 7
20384: PUSH
20385: FOR_IN
20386: IFFALSE 20424
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20388: LD_VAR 0 1
20392: PPUSH
20393: LD_VAR 0 5
20397: PUSH
20398: LD_INT 1
20400: ARRAY
20401: PPUSH
20402: LD_VAR 0 5
20406: PUSH
20407: LD_INT 2
20409: ARRAY
20410: PPUSH
20411: CALL 19370 0 3
20415: NOT
20416: IFFALSE 20422
// exit ;
20418: POP
20419: POP
20420: GO 20426
20422: GO 20385
20424: POP
20425: POP
// end ;
20426: LD_VAR 0 4
20430: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20431: LD_INT 0
20433: PPUSH
20434: PPUSH
20435: PPUSH
20436: PPUSH
20437: PPUSH
20438: PPUSH
20439: PPUSH
// if not GetClass ( unit ) = class_sniper then
20440: LD_VAR 0 1
20444: PPUSH
20445: CALL_OW 257
20449: PUSH
20450: LD_INT 5
20452: EQUAL
20453: NOT
20454: IFFALSE 20458
// exit ;
20456: GO 20846
// dist := 8 ;
20458: LD_ADDR_VAR 0 5
20462: PUSH
20463: LD_INT 8
20465: ST_TO_ADDR
// viewRange := 12 ;
20466: LD_ADDR_VAR 0 7
20470: PUSH
20471: LD_INT 12
20473: ST_TO_ADDR
// side := GetSide ( unit ) ;
20474: LD_ADDR_VAR 0 6
20478: PUSH
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL_OW 255
20488: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20489: LD_INT 61
20491: PPUSH
20492: LD_VAR 0 6
20496: PPUSH
20497: CALL_OW 321
20501: PUSH
20502: LD_INT 2
20504: EQUAL
20505: IFFALSE 20515
// viewRange := 16 ;
20507: LD_ADDR_VAR 0 7
20511: PUSH
20512: LD_INT 16
20514: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20515: LD_VAR 0 1
20519: PPUSH
20520: LD_VAR 0 2
20524: PPUSH
20525: LD_VAR 0 3
20529: PPUSH
20530: CALL_OW 297
20534: PUSH
20535: LD_VAR 0 5
20539: GREATER
20540: IFFALSE 20619
// begin ComMoveXY ( unit , x , y ) ;
20542: LD_VAR 0 1
20546: PPUSH
20547: LD_VAR 0 2
20551: PPUSH
20552: LD_VAR 0 3
20556: PPUSH
20557: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20561: LD_INT 35
20563: PPUSH
20564: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20568: LD_VAR 0 1
20572: PPUSH
20573: LD_VAR 0 2
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL 57502 0 3
20587: NOT
20588: IFFALSE 20592
// exit ;
20590: GO 20846
// until GetDistUnitXY ( unit , x , y ) < dist ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_VAR 0 2
20601: PPUSH
20602: LD_VAR 0 3
20606: PPUSH
20607: CALL_OW 297
20611: PUSH
20612: LD_VAR 0 5
20616: LESS
20617: IFFALSE 20561
// end ; ComTurnXY ( unit , x , y ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: LD_VAR 0 2
20628: PPUSH
20629: LD_VAR 0 3
20633: PPUSH
20634: CALL_OW 118
// wait ( 5 ) ;
20638: LD_INT 5
20640: PPUSH
20641: CALL_OW 67
// _d := GetDir ( unit ) ;
20645: LD_ADDR_VAR 0 10
20649: PUSH
20650: LD_VAR 0 1
20654: PPUSH
20655: CALL_OW 254
20659: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20660: LD_ADDR_VAR 0 8
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 250
20674: PPUSH
20675: LD_VAR 0 10
20679: PPUSH
20680: LD_VAR 0 5
20684: PPUSH
20685: CALL_OW 272
20689: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20690: LD_ADDR_VAR 0 9
20694: PUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 251
20704: PPUSH
20705: LD_VAR 0 10
20709: PPUSH
20710: LD_VAR 0 5
20714: PPUSH
20715: CALL_OW 273
20719: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20720: LD_VAR 0 8
20724: PPUSH
20725: LD_VAR 0 9
20729: PPUSH
20730: CALL_OW 488
20734: NOT
20735: IFFALSE 20739
// exit ;
20737: GO 20846
// ComAnimCustom ( unit , 1 ) ;
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_INT 1
20746: PPUSH
20747: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20751: LD_VAR 0 8
20755: PPUSH
20756: LD_VAR 0 9
20760: PPUSH
20761: LD_VAR 0 6
20765: PPUSH
20766: LD_VAR 0 7
20770: PPUSH
20771: CALL_OW 330
// repeat wait ( 1 ) ;
20775: LD_INT 1
20777: PPUSH
20778: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 316
20791: PUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 314
20801: OR
20802: PUSH
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 302
20812: NOT
20813: OR
20814: PUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: CALL_OW 301
20824: OR
20825: IFFALSE 20775
// RemoveSeeing ( _x , _y , side ) ;
20827: LD_VAR 0 8
20831: PPUSH
20832: LD_VAR 0 9
20836: PPUSH
20837: LD_VAR 0 6
20841: PPUSH
20842: CALL_OW 331
// end ; end_of_file
20846: LD_VAR 0 4
20850: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20851: LD_VAR 0 1
20855: PUSH
20856: LD_INT 200
20858: DOUBLE
20859: GREATEREQUAL
20860: IFFALSE 20868
20862: LD_INT 299
20864: DOUBLE
20865: LESSEQUAL
20866: IFTRUE 20870
20868: GO 20902
20870: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20871: LD_VAR 0 1
20875: PPUSH
20876: LD_VAR 0 2
20880: PPUSH
20881: LD_VAR 0 3
20885: PPUSH
20886: LD_VAR 0 4
20890: PPUSH
20891: LD_VAR 0 5
20895: PPUSH
20896: CALL 16333 0 5
20900: GO 20979
20902: LD_INT 300
20904: DOUBLE
20905: GREATEREQUAL
20906: IFFALSE 20914
20908: LD_INT 399
20910: DOUBLE
20911: LESSEQUAL
20912: IFTRUE 20916
20914: GO 20978
20916: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20917: LD_VAR 0 1
20921: PPUSH
20922: LD_VAR 0 2
20926: PPUSH
20927: LD_VAR 0 3
20931: PPUSH
20932: LD_VAR 0 4
20936: PPUSH
20937: LD_VAR 0 5
20941: PPUSH
20942: LD_VAR 0 6
20946: PPUSH
20947: LD_VAR 0 7
20951: PPUSH
20952: LD_VAR 0 8
20956: PPUSH
20957: LD_VAR 0 9
20961: PPUSH
20962: LD_VAR 0 10
20966: PPUSH
20967: LD_VAR 0 11
20971: PPUSH
20972: CALL 12658 0 11
20976: GO 20979
20978: POP
// end ;
20979: PPOPN 11
20981: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20982: LD_VAR 0 1
20986: PPUSH
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: LD_VAR 0 4
21001: PPUSH
21002: LD_VAR 0 5
21006: PPUSH
21007: CALL 16069 0 5
// end ; end_of_file
21011: PPOPN 5
21013: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21014: LD_INT 0
21016: PPUSH
21017: PPUSH
// if exist_mode then
21018: LD_VAR 0 2
21022: IFFALSE 21047
// unit := CreateCharacter ( prefix & ident ) else
21024: LD_ADDR_VAR 0 5
21028: PUSH
21029: LD_VAR 0 3
21033: PUSH
21034: LD_VAR 0 1
21038: STR
21039: PPUSH
21040: CALL_OW 34
21044: ST_TO_ADDR
21045: GO 21062
// unit := NewCharacter ( ident ) ;
21047: LD_ADDR_VAR 0 5
21051: PUSH
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 25
21061: ST_TO_ADDR
// result := unit ;
21062: LD_ADDR_VAR 0 4
21066: PUSH
21067: LD_VAR 0 5
21071: ST_TO_ADDR
// end ;
21072: LD_VAR 0 4
21076: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21077: LD_INT 0
21079: PPUSH
21080: PPUSH
// if not side or not nation then
21081: LD_VAR 0 1
21085: NOT
21086: PUSH
21087: LD_VAR 0 2
21091: NOT
21092: OR
21093: IFFALSE 21097
// exit ;
21095: GO 21865
// case nation of nation_american :
21097: LD_VAR 0 2
21101: PUSH
21102: LD_INT 1
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21324
21110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21111: LD_ADDR_VAR 0 4
21115: PUSH
21116: LD_INT 35
21118: PUSH
21119: LD_INT 45
21121: PUSH
21122: LD_INT 46
21124: PUSH
21125: LD_INT 47
21127: PUSH
21128: LD_INT 82
21130: PUSH
21131: LD_INT 83
21133: PUSH
21134: LD_INT 84
21136: PUSH
21137: LD_INT 85
21139: PUSH
21140: LD_INT 86
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 6
21151: PUSH
21152: LD_INT 15
21154: PUSH
21155: LD_INT 16
21157: PUSH
21158: LD_INT 7
21160: PUSH
21161: LD_INT 12
21163: PUSH
21164: LD_INT 13
21166: PUSH
21167: LD_INT 10
21169: PUSH
21170: LD_INT 14
21172: PUSH
21173: LD_INT 20
21175: PUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_INT 25
21184: PUSH
21185: LD_INT 32
21187: PUSH
21188: LD_INT 27
21190: PUSH
21191: LD_INT 36
21193: PUSH
21194: LD_INT 69
21196: PUSH
21197: LD_INT 39
21199: PUSH
21200: LD_INT 34
21202: PUSH
21203: LD_INT 40
21205: PUSH
21206: LD_INT 48
21208: PUSH
21209: LD_INT 49
21211: PUSH
21212: LD_INT 50
21214: PUSH
21215: LD_INT 51
21217: PUSH
21218: LD_INT 52
21220: PUSH
21221: LD_INT 53
21223: PUSH
21224: LD_INT 54
21226: PUSH
21227: LD_INT 55
21229: PUSH
21230: LD_INT 56
21232: PUSH
21233: LD_INT 57
21235: PUSH
21236: LD_INT 58
21238: PUSH
21239: LD_INT 59
21241: PUSH
21242: LD_INT 60
21244: PUSH
21245: LD_INT 61
21247: PUSH
21248: LD_INT 62
21250: PUSH
21251: LD_INT 80
21253: PUSH
21254: LD_INT 82
21256: PUSH
21257: LD_INT 83
21259: PUSH
21260: LD_INT 84
21262: PUSH
21263: LD_INT 85
21265: PUSH
21266: LD_INT 86
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: ST_TO_ADDR
21322: GO 21789
21324: LD_INT 2
21326: DOUBLE
21327: EQUAL
21328: IFTRUE 21332
21330: GO 21558
21332: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21333: LD_ADDR_VAR 0 4
21337: PUSH
21338: LD_INT 35
21340: PUSH
21341: LD_INT 45
21343: PUSH
21344: LD_INT 46
21346: PUSH
21347: LD_INT 47
21349: PUSH
21350: LD_INT 82
21352: PUSH
21353: LD_INT 83
21355: PUSH
21356: LD_INT 84
21358: PUSH
21359: LD_INT 85
21361: PUSH
21362: LD_INT 87
21364: PUSH
21365: LD_INT 70
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 11
21373: PUSH
21374: LD_INT 3
21376: PUSH
21377: LD_INT 4
21379: PUSH
21380: LD_INT 5
21382: PUSH
21383: LD_INT 6
21385: PUSH
21386: LD_INT 15
21388: PUSH
21389: LD_INT 18
21391: PUSH
21392: LD_INT 7
21394: PUSH
21395: LD_INT 17
21397: PUSH
21398: LD_INT 8
21400: PUSH
21401: LD_INT 20
21403: PUSH
21404: LD_INT 21
21406: PUSH
21407: LD_INT 22
21409: PUSH
21410: LD_INT 72
21412: PUSH
21413: LD_INT 26
21415: PUSH
21416: LD_INT 69
21418: PUSH
21419: LD_INT 39
21421: PUSH
21422: LD_INT 40
21424: PUSH
21425: LD_INT 41
21427: PUSH
21428: LD_INT 42
21430: PUSH
21431: LD_INT 43
21433: PUSH
21434: LD_INT 48
21436: PUSH
21437: LD_INT 49
21439: PUSH
21440: LD_INT 50
21442: PUSH
21443: LD_INT 51
21445: PUSH
21446: LD_INT 52
21448: PUSH
21449: LD_INT 53
21451: PUSH
21452: LD_INT 54
21454: PUSH
21455: LD_INT 55
21457: PUSH
21458: LD_INT 56
21460: PUSH
21461: LD_INT 60
21463: PUSH
21464: LD_INT 61
21466: PUSH
21467: LD_INT 62
21469: PUSH
21470: LD_INT 66
21472: PUSH
21473: LD_INT 67
21475: PUSH
21476: LD_INT 68
21478: PUSH
21479: LD_INT 81
21481: PUSH
21482: LD_INT 82
21484: PUSH
21485: LD_INT 83
21487: PUSH
21488: LD_INT 84
21490: PUSH
21491: LD_INT 85
21493: PUSH
21494: LD_INT 87
21496: PUSH
21497: LD_INT 88
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 21789
21558: LD_INT 3
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21788
21566: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21567: LD_ADDR_VAR 0 4
21571: PUSH
21572: LD_INT 46
21574: PUSH
21575: LD_INT 47
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: LD_INT 82
21586: PUSH
21587: LD_INT 83
21589: PUSH
21590: LD_INT 84
21592: PUSH
21593: LD_INT 85
21595: PUSH
21596: LD_INT 86
21598: PUSH
21599: LD_INT 11
21601: PUSH
21602: LD_INT 9
21604: PUSH
21605: LD_INT 20
21607: PUSH
21608: LD_INT 19
21610: PUSH
21611: LD_INT 21
21613: PUSH
21614: LD_INT 24
21616: PUSH
21617: LD_INT 22
21619: PUSH
21620: LD_INT 25
21622: PUSH
21623: LD_INT 28
21625: PUSH
21626: LD_INT 29
21628: PUSH
21629: LD_INT 30
21631: PUSH
21632: LD_INT 31
21634: PUSH
21635: LD_INT 37
21637: PUSH
21638: LD_INT 38
21640: PUSH
21641: LD_INT 32
21643: PUSH
21644: LD_INT 27
21646: PUSH
21647: LD_INT 33
21649: PUSH
21650: LD_INT 69
21652: PUSH
21653: LD_INT 39
21655: PUSH
21656: LD_INT 34
21658: PUSH
21659: LD_INT 40
21661: PUSH
21662: LD_INT 71
21664: PUSH
21665: LD_INT 23
21667: PUSH
21668: LD_INT 44
21670: PUSH
21671: LD_INT 48
21673: PUSH
21674: LD_INT 49
21676: PUSH
21677: LD_INT 50
21679: PUSH
21680: LD_INT 51
21682: PUSH
21683: LD_INT 52
21685: PUSH
21686: LD_INT 53
21688: PUSH
21689: LD_INT 54
21691: PUSH
21692: LD_INT 55
21694: PUSH
21695: LD_INT 56
21697: PUSH
21698: LD_INT 57
21700: PUSH
21701: LD_INT 58
21703: PUSH
21704: LD_INT 59
21706: PUSH
21707: LD_INT 63
21709: PUSH
21710: LD_INT 64
21712: PUSH
21713: LD_INT 65
21715: PUSH
21716: LD_INT 82
21718: PUSH
21719: LD_INT 83
21721: PUSH
21722: LD_INT 84
21724: PUSH
21725: LD_INT 85
21727: PUSH
21728: LD_INT 86
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: ST_TO_ADDR
21786: GO 21789
21788: POP
// if state > - 1 and state < 3 then
21789: LD_VAR 0 3
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: GREATER
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_INT 3
21806: LESS
21807: AND
21808: IFFALSE 21865
// for i in result do
21810: LD_ADDR_VAR 0 5
21814: PUSH
21815: LD_VAR 0 4
21819: PUSH
21820: FOR_IN
21821: IFFALSE 21863
// if GetTech ( i , side ) <> state then
21823: LD_VAR 0 5
21827: PPUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 321
21837: PUSH
21838: LD_VAR 0 3
21842: NONEQUAL
21843: IFFALSE 21861
// result := result diff i ;
21845: LD_ADDR_VAR 0 4
21849: PUSH
21850: LD_VAR 0 4
21854: PUSH
21855: LD_VAR 0 5
21859: DIFF
21860: ST_TO_ADDR
21861: GO 21820
21863: POP
21864: POP
// end ;
21865: LD_VAR 0 4
21869: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
21874: PPUSH
// result := true ;
21875: LD_ADDR_VAR 0 3
21879: PUSH
21880: LD_INT 1
21882: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21883: LD_ADDR_VAR 0 5
21887: PUSH
21888: LD_VAR 0 2
21892: PPUSH
21893: CALL_OW 480
21897: ST_TO_ADDR
// if not tmp then
21898: LD_VAR 0 5
21902: NOT
21903: IFFALSE 21907
// exit ;
21905: GO 21956
// for i in tmp do
21907: LD_ADDR_VAR 0 4
21911: PUSH
21912: LD_VAR 0 5
21916: PUSH
21917: FOR_IN
21918: IFFALSE 21954
// if GetTech ( i , side ) <> state_researched then
21920: LD_VAR 0 4
21924: PPUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL_OW 321
21934: PUSH
21935: LD_INT 2
21937: NONEQUAL
21938: IFFALSE 21952
// begin result := false ;
21940: LD_ADDR_VAR 0 3
21944: PUSH
21945: LD_INT 0
21947: ST_TO_ADDR
// exit ;
21948: POP
21949: POP
21950: GO 21956
// end ;
21952: GO 21917
21954: POP
21955: POP
// end ;
21956: LD_VAR 0 3
21960: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21976: LD_VAR 0 1
21980: NOT
21981: PUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: CALL_OW 257
21991: PUSH
21992: LD_INT 9
21994: NONEQUAL
21995: OR
21996: IFFALSE 22000
// exit ;
21998: GO 22573
// side := GetSide ( unit ) ;
22000: LD_ADDR_VAR 0 9
22004: PUSH
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 255
22014: ST_TO_ADDR
// tech_space := tech_spacanom ;
22015: LD_ADDR_VAR 0 12
22019: PUSH
22020: LD_INT 29
22022: ST_TO_ADDR
// tech_time := tech_taurad ;
22023: LD_ADDR_VAR 0 13
22027: PUSH
22028: LD_INT 28
22030: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22031: LD_ADDR_VAR 0 11
22035: PUSH
22036: LD_VAR 0 1
22040: PPUSH
22041: CALL_OW 310
22045: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22046: LD_VAR 0 11
22050: PPUSH
22051: CALL_OW 247
22055: PUSH
22056: LD_INT 2
22058: EQUAL
22059: IFFALSE 22063
// exit ;
22061: GO 22573
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22063: LD_ADDR_VAR 0 8
22067: PUSH
22068: LD_INT 81
22070: PUSH
22071: LD_VAR 0 9
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 3
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: ST_TO_ADDR
// if not tmp then
22106: LD_VAR 0 8
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22573
// if in_unit then
22115: LD_VAR 0 11
22119: IFFALSE 22143
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22121: LD_ADDR_VAR 0 10
22125: PUSH
22126: LD_VAR 0 8
22130: PPUSH
22131: LD_VAR 0 11
22135: PPUSH
22136: CALL_OW 74
22140: ST_TO_ADDR
22141: GO 22163
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22143: LD_ADDR_VAR 0 10
22147: PUSH
22148: LD_VAR 0 8
22152: PPUSH
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL_OW 74
22162: ST_TO_ADDR
// if not enemy then
22163: LD_VAR 0 10
22167: NOT
22168: IFFALSE 22172
// exit ;
22170: GO 22573
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22172: LD_VAR 0 11
22176: PUSH
22177: LD_VAR 0 11
22181: PPUSH
22182: LD_VAR 0 10
22186: PPUSH
22187: CALL_OW 296
22191: PUSH
22192: LD_INT 13
22194: GREATER
22195: AND
22196: PUSH
22197: LD_VAR 0 1
22201: PPUSH
22202: LD_VAR 0 10
22206: PPUSH
22207: CALL_OW 296
22211: PUSH
22212: LD_INT 12
22214: GREATER
22215: OR
22216: IFFALSE 22220
// exit ;
22218: GO 22573
// missile := [ 1 ] ;
22220: LD_ADDR_VAR 0 14
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22231: LD_VAR 0 9
22235: PPUSH
22236: LD_VAR 0 12
22240: PPUSH
22241: CALL_OW 325
22245: IFFALSE 22274
// missile := Replace ( missile , missile + 1 , 2 ) ;
22247: LD_ADDR_VAR 0 14
22251: PUSH
22252: LD_VAR 0 14
22256: PPUSH
22257: LD_VAR 0 14
22261: PUSH
22262: LD_INT 1
22264: PLUS
22265: PPUSH
22266: LD_INT 2
22268: PPUSH
22269: CALL_OW 1
22273: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22274: LD_VAR 0 9
22278: PPUSH
22279: LD_VAR 0 13
22283: PPUSH
22284: CALL_OW 325
22288: PUSH
22289: LD_VAR 0 10
22293: PPUSH
22294: CALL_OW 255
22298: PPUSH
22299: LD_VAR 0 13
22303: PPUSH
22304: CALL_OW 325
22308: NOT
22309: AND
22310: IFFALSE 22339
// missile := Replace ( missile , missile + 1 , 3 ) ;
22312: LD_ADDR_VAR 0 14
22316: PUSH
22317: LD_VAR 0 14
22321: PPUSH
22322: LD_VAR 0 14
22326: PUSH
22327: LD_INT 1
22329: PLUS
22330: PPUSH
22331: LD_INT 3
22333: PPUSH
22334: CALL_OW 1
22338: ST_TO_ADDR
// if missile < 2 then
22339: LD_VAR 0 14
22343: PUSH
22344: LD_INT 2
22346: LESS
22347: IFFALSE 22351
// exit ;
22349: GO 22573
// x := GetX ( enemy ) ;
22351: LD_ADDR_VAR 0 4
22355: PUSH
22356: LD_VAR 0 10
22360: PPUSH
22361: CALL_OW 250
22365: ST_TO_ADDR
// y := GetY ( enemy ) ;
22366: LD_ADDR_VAR 0 5
22370: PUSH
22371: LD_VAR 0 10
22375: PPUSH
22376: CALL_OW 251
22380: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22381: LD_ADDR_VAR 0 6
22385: PUSH
22386: LD_VAR 0 4
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: CALL_OW 12
22402: PLUS
22403: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22404: LD_ADDR_VAR 0 7
22408: PUSH
22409: LD_VAR 0 5
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PPUSH
22418: LD_INT 1
22420: PPUSH
22421: CALL_OW 12
22425: PLUS
22426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22427: LD_VAR 0 6
22431: PPUSH
22432: LD_VAR 0 7
22436: PPUSH
22437: CALL_OW 488
22441: NOT
22442: IFFALSE 22464
// begin _x := x ;
22444: LD_ADDR_VAR 0 6
22448: PUSH
22449: LD_VAR 0 4
22453: ST_TO_ADDR
// _y := y ;
22454: LD_ADDR_VAR 0 7
22458: PUSH
22459: LD_VAR 0 5
22463: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22464: LD_ADDR_VAR 0 3
22468: PUSH
22469: LD_INT 1
22471: PPUSH
22472: LD_VAR 0 14
22476: PPUSH
22477: CALL_OW 12
22481: ST_TO_ADDR
// case i of 1 :
22482: LD_VAR 0 3
22486: PUSH
22487: LD_INT 1
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22512
22495: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22496: LD_VAR 0 1
22500: PPUSH
22501: LD_VAR 0 10
22505: PPUSH
22506: CALL_OW 115
22510: GO 22573
22512: LD_INT 2
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22542
22520: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_VAR 0 6
22530: PPUSH
22531: LD_VAR 0 7
22535: PPUSH
22536: CALL_OW 153
22540: GO 22573
22542: LD_INT 3
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22572
22550: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22551: LD_VAR 0 1
22555: PPUSH
22556: LD_VAR 0 6
22560: PPUSH
22561: LD_VAR 0 7
22565: PPUSH
22566: CALL_OW 154
22570: GO 22573
22572: POP
// end ;
22573: LD_VAR 0 2
22577: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22578: LD_INT 0
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
// if not unit or not building then
22586: LD_VAR 0 1
22590: NOT
22591: PUSH
22592: LD_VAR 0 2
22596: NOT
22597: OR
22598: IFFALSE 22602
// exit ;
22600: GO 22760
// x := GetX ( building ) ;
22602: LD_ADDR_VAR 0 5
22606: PUSH
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL_OW 250
22616: ST_TO_ADDR
// y := GetY ( building ) ;
22617: LD_ADDR_VAR 0 6
22621: PUSH
22622: LD_VAR 0 2
22626: PPUSH
22627: CALL_OW 251
22631: ST_TO_ADDR
// for i = 0 to 5 do
22632: LD_ADDR_VAR 0 4
22636: PUSH
22637: DOUBLE
22638: LD_INT 0
22640: DEC
22641: ST_TO_ADDR
22642: LD_INT 5
22644: PUSH
22645: FOR_TO
22646: IFFALSE 22758
// begin _x := ShiftX ( x , i , 3 ) ;
22648: LD_ADDR_VAR 0 7
22652: PUSH
22653: LD_VAR 0 5
22657: PPUSH
22658: LD_VAR 0 4
22662: PPUSH
22663: LD_INT 3
22665: PPUSH
22666: CALL_OW 272
22670: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22671: LD_ADDR_VAR 0 8
22675: PUSH
22676: LD_VAR 0 6
22680: PPUSH
22681: LD_VAR 0 4
22685: PPUSH
22686: LD_INT 3
22688: PPUSH
22689: CALL_OW 273
22693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22694: LD_VAR 0 7
22698: PPUSH
22699: LD_VAR 0 8
22703: PPUSH
22704: CALL_OW 488
22708: NOT
22709: IFFALSE 22713
// continue ;
22711: GO 22645
// if HexInfo ( _x , _y ) = 0 then
22713: LD_VAR 0 7
22717: PPUSH
22718: LD_VAR 0 8
22722: PPUSH
22723: CALL_OW 428
22727: PUSH
22728: LD_INT 0
22730: EQUAL
22731: IFFALSE 22756
// begin ComMoveXY ( unit , _x , _y ) ;
22733: LD_VAR 0 1
22737: PPUSH
22738: LD_VAR 0 7
22742: PPUSH
22743: LD_VAR 0 8
22747: PPUSH
22748: CALL_OW 111
// exit ;
22752: POP
22753: POP
22754: GO 22760
// end ; end ;
22756: GO 22645
22758: POP
22759: POP
// end ;
22760: LD_VAR 0 3
22764: RET
// export function ScanBase ( side , base_area ) ; begin
22765: LD_INT 0
22767: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22768: LD_ADDR_VAR 0 3
22772: PUSH
22773: LD_VAR 0 2
22777: PPUSH
22778: LD_INT 81
22780: PUSH
22781: LD_VAR 0 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PPUSH
22790: CALL_OW 70
22794: ST_TO_ADDR
// end ;
22795: LD_VAR 0 3
22799: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
// result := false ;
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_INT 0
22813: ST_TO_ADDR
// side := GetSide ( unit ) ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 255
22828: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22829: LD_ADDR_VAR 0 4
22833: PUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 248
22843: ST_TO_ADDR
// case nat of 1 :
22844: LD_VAR 0 4
22848: PUSH
22849: LD_INT 1
22851: DOUBLE
22852: EQUAL
22853: IFTRUE 22857
22855: GO 22868
22857: POP
// tech := tech_lassight ; 2 :
22858: LD_ADDR_VAR 0 5
22862: PUSH
22863: LD_INT 12
22865: ST_TO_ADDR
22866: GO 22907
22868: LD_INT 2
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22887
22876: POP
// tech := tech_mortar ; 3 :
22877: LD_ADDR_VAR 0 5
22881: PUSH
22882: LD_INT 41
22884: ST_TO_ADDR
22885: GO 22907
22887: LD_INT 3
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 22906
22895: POP
// tech := tech_bazooka ; end ;
22896: LD_ADDR_VAR 0 5
22900: PUSH
22901: LD_INT 44
22903: ST_TO_ADDR
22904: GO 22907
22906: POP
// if Researched ( side , tech ) then
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_VAR 0 5
22916: PPUSH
22917: CALL_OW 325
22921: IFFALSE 22948
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22923: LD_ADDR_VAR 0 2
22927: PUSH
22928: LD_INT 5
22930: PUSH
22931: LD_INT 8
22933: PUSH
22934: LD_INT 9
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: PUSH
22942: LD_VAR 0 4
22946: ARRAY
22947: ST_TO_ADDR
// end ;
22948: LD_VAR 0 2
22952: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22953: LD_INT 0
22955: PPUSH
22956: PPUSH
22957: PPUSH
// if not mines then
22958: LD_VAR 0 2
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23111
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22967: LD_ADDR_VAR 0 5
22971: PUSH
22972: LD_INT 81
22974: PUSH
22975: LD_VAR 0 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 21
22989: PUSH
22990: LD_INT 3
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PPUSH
23005: CALL_OW 69
23009: ST_TO_ADDR
// for i in mines do
23010: LD_ADDR_VAR 0 4
23014: PUSH
23015: LD_VAR 0 2
23019: PUSH
23020: FOR_IN
23021: IFFALSE 23109
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23023: LD_VAR 0 4
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: LD_VAR 0 4
23036: PUSH
23037: LD_INT 2
23039: ARRAY
23040: PPUSH
23041: CALL_OW 458
23045: NOT
23046: IFFALSE 23050
// continue ;
23048: GO 23020
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23050: LD_VAR 0 4
23054: PUSH
23055: LD_INT 1
23057: ARRAY
23058: PPUSH
23059: LD_VAR 0 4
23063: PUSH
23064: LD_INT 2
23066: ARRAY
23067: PPUSH
23068: CALL_OW 428
23072: PUSH
23073: LD_VAR 0 5
23077: IN
23078: IFFALSE 23107
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23080: LD_VAR 0 4
23084: PUSH
23085: LD_INT 1
23087: ARRAY
23088: PPUSH
23089: LD_VAR 0 4
23093: PUSH
23094: LD_INT 2
23096: ARRAY
23097: PPUSH
23098: LD_VAR 0 1
23102: PPUSH
23103: CALL_OW 456
// end ;
23107: GO 23020
23109: POP
23110: POP
// end ;
23111: LD_VAR 0 3
23115: RET
// export function Count ( array ) ; begin
23116: LD_INT 0
23118: PPUSH
// result := array + 0 ;
23119: LD_ADDR_VAR 0 2
23123: PUSH
23124: LD_VAR 0 1
23128: PUSH
23129: LD_INT 0
23131: PLUS
23132: ST_TO_ADDR
// end ;
23133: LD_VAR 0 2
23137: RET
// export function IsEmpty ( building ) ; begin
23138: LD_INT 0
23140: PPUSH
// if not building then
23141: LD_VAR 0 1
23145: NOT
23146: IFFALSE 23150
// exit ;
23148: GO 23193
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_VAR 0 1
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 255
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 58
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PPUSH
23187: CALL_OW 69
23191: IN
23192: ST_TO_ADDR
// end ;
23193: LD_VAR 0 2
23197: RET
// export function IsNotFull ( building ) ; var places ; begin
23198: LD_INT 0
23200: PPUSH
23201: PPUSH
// if not building then
23202: LD_VAR 0 1
23206: NOT
23207: IFFALSE 23211
// exit ;
23209: GO 23239
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23211: LD_ADDR_VAR 0 2
23215: PUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 62
23226: PUSH
23227: EMPTY
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PPUSH
23234: CALL_OW 72
23238: ST_TO_ADDR
// end ;
23239: LD_VAR 0 2
23243: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
// tmp := [ ] ;
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// list := [ ] ;
23257: LD_ADDR_VAR 0 5
23261: PUSH
23262: EMPTY
23263: ST_TO_ADDR
// for i = 16 to 25 do
23264: LD_ADDR_VAR 0 4
23268: PUSH
23269: DOUBLE
23270: LD_INT 16
23272: DEC
23273: ST_TO_ADDR
23274: LD_INT 25
23276: PUSH
23277: FOR_TO
23278: IFFALSE 23351
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23280: LD_ADDR_VAR 0 3
23284: PUSH
23285: LD_VAR 0 3
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 255
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 91
23309: PUSH
23310: LD_VAR 0 1
23314: PUSH
23315: LD_INT 6
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 30
23325: PUSH
23326: LD_VAR 0 4
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: PPUSH
23343: CALL_OW 69
23347: ADD
23348: ST_TO_ADDR
23349: GO 23277
23351: POP
23352: POP
// for i = 1 to tmp do
23353: LD_ADDR_VAR 0 4
23357: PUSH
23358: DOUBLE
23359: LD_INT 1
23361: DEC
23362: ST_TO_ADDR
23363: LD_VAR 0 3
23367: PUSH
23368: FOR_TO
23369: IFFALSE 23457
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23371: LD_ADDR_VAR 0 5
23375: PUSH
23376: LD_VAR 0 5
23380: PUSH
23381: LD_VAR 0 3
23385: PUSH
23386: LD_VAR 0 4
23390: ARRAY
23391: PPUSH
23392: CALL_OW 266
23396: PUSH
23397: LD_VAR 0 3
23401: PUSH
23402: LD_VAR 0 4
23406: ARRAY
23407: PPUSH
23408: CALL_OW 250
23412: PUSH
23413: LD_VAR 0 3
23417: PUSH
23418: LD_VAR 0 4
23422: ARRAY
23423: PPUSH
23424: CALL_OW 251
23428: PUSH
23429: LD_VAR 0 3
23433: PUSH
23434: LD_VAR 0 4
23438: ARRAY
23439: PPUSH
23440: CALL_OW 254
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: ADD
23454: ST_TO_ADDR
23455: GO 23368
23457: POP
23458: POP
// result := list ;
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_VAR 0 5
23468: ST_TO_ADDR
// end ;
23469: LD_VAR 0 2
23473: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23474: LD_INT 0
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
// if not factory then
23483: LD_VAR 0 1
23487: NOT
23488: IFFALSE 23492
// exit ;
23490: GO 24085
// if control = control_apeman then
23492: LD_VAR 0 4
23496: PUSH
23497: LD_INT 5
23499: EQUAL
23500: IFFALSE 23609
// begin tmp := UnitsInside ( factory ) ;
23502: LD_ADDR_VAR 0 8
23506: PUSH
23507: LD_VAR 0 1
23511: PPUSH
23512: CALL_OW 313
23516: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23517: LD_VAR 0 8
23521: PPUSH
23522: LD_INT 25
23524: PUSH
23525: LD_INT 12
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 72
23536: NOT
23537: IFFALSE 23547
// control := control_manual ;
23539: LD_ADDR_VAR 0 4
23543: PUSH
23544: LD_INT 1
23546: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23547: LD_ADDR_VAR 0 8
23551: PUSH
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL 23244 0 1
23561: ST_TO_ADDR
// if tmp then
23562: LD_VAR 0 8
23566: IFFALSE 23609
// begin for i in tmp do
23568: LD_ADDR_VAR 0 7
23572: PUSH
23573: LD_VAR 0 8
23577: PUSH
23578: FOR_IN
23579: IFFALSE 23607
// if i [ 1 ] = b_ext_radio then
23581: LD_VAR 0 7
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PUSH
23590: LD_INT 22
23592: EQUAL
23593: IFFALSE 23605
// begin control := control_remote ;
23595: LD_ADDR_VAR 0 4
23599: PUSH
23600: LD_INT 2
23602: ST_TO_ADDR
// break ;
23603: GO 23607
// end ;
23605: GO 23578
23607: POP
23608: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_VAR 0 2
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: LD_VAR 0 4
23628: PPUSH
23629: LD_VAR 0 5
23633: PPUSH
23634: CALL_OW 448
23638: IFFALSE 23673
// begin result := [ chassis , engine , control , weapon ] ;
23640: LD_ADDR_VAR 0 6
23644: PUSH
23645: LD_VAR 0 2
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 4
23659: PUSH
23660: LD_VAR 0 5
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: ST_TO_ADDR
// exit ;
23671: GO 24085
// end ; _chassis := AvailableChassisList ( factory ) ;
23673: LD_ADDR_VAR 0 9
23677: PUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 475
23687: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23688: LD_ADDR_VAR 0 11
23692: PUSH
23693: LD_VAR 0 1
23697: PPUSH
23698: CALL_OW 476
23702: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23703: LD_ADDR_VAR 0 12
23707: PUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 477
23717: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23718: LD_ADDR_VAR 0 10
23722: PUSH
23723: LD_VAR 0 1
23727: PPUSH
23728: CALL_OW 478
23732: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23733: LD_VAR 0 9
23737: NOT
23738: PUSH
23739: LD_VAR 0 11
23743: NOT
23744: OR
23745: PUSH
23746: LD_VAR 0 12
23750: NOT
23751: OR
23752: PUSH
23753: LD_VAR 0 10
23757: NOT
23758: OR
23759: IFFALSE 23794
// begin result := [ chassis , engine , control , weapon ] ;
23761: LD_ADDR_VAR 0 6
23765: PUSH
23766: LD_VAR 0 2
23770: PUSH
23771: LD_VAR 0 3
23775: PUSH
23776: LD_VAR 0 4
23780: PUSH
23781: LD_VAR 0 5
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// exit ;
23792: GO 24085
// end ; if not chassis in _chassis then
23794: LD_VAR 0 2
23798: PUSH
23799: LD_VAR 0 9
23803: IN
23804: NOT
23805: IFFALSE 23831
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23807: LD_ADDR_VAR 0 2
23811: PUSH
23812: LD_VAR 0 9
23816: PUSH
23817: LD_INT 1
23819: PPUSH
23820: LD_VAR 0 9
23824: PPUSH
23825: CALL_OW 12
23829: ARRAY
23830: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23831: LD_VAR 0 2
23835: PPUSH
23836: LD_VAR 0 3
23840: PPUSH
23841: CALL 24090 0 2
23845: NOT
23846: IFFALSE 23905
// repeat engine := _engine [ 1 ] ;
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: LD_VAR 0 11
23857: PUSH
23858: LD_INT 1
23860: ARRAY
23861: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23862: LD_ADDR_VAR 0 11
23866: PUSH
23867: LD_VAR 0 11
23871: PPUSH
23872: LD_INT 1
23874: PPUSH
23875: CALL_OW 3
23879: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23880: LD_VAR 0 2
23884: PPUSH
23885: LD_VAR 0 3
23889: PPUSH
23890: CALL 24090 0 2
23894: PUSH
23895: LD_VAR 0 11
23899: PUSH
23900: EMPTY
23901: EQUAL
23902: OR
23903: IFFALSE 23848
// if not control in _control then
23905: LD_VAR 0 4
23909: PUSH
23910: LD_VAR 0 12
23914: IN
23915: NOT
23916: IFFALSE 23942
// control := _control [ rand ( 1 , _control ) ] ;
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_VAR 0 12
23927: PUSH
23928: LD_INT 1
23930: PPUSH
23931: LD_VAR 0 12
23935: PPUSH
23936: CALL_OW 12
23940: ARRAY
23941: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23942: LD_VAR 0 2
23946: PPUSH
23947: LD_VAR 0 5
23951: PPUSH
23952: CALL 24310 0 2
23956: NOT
23957: IFFALSE 24016
// repeat weapon := _weapon [ 1 ] ;
23959: LD_ADDR_VAR 0 5
23963: PUSH
23964: LD_VAR 0 10
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23973: LD_ADDR_VAR 0 10
23977: PUSH
23978: LD_VAR 0 10
23982: PPUSH
23983: LD_INT 1
23985: PPUSH
23986: CALL_OW 3
23990: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23991: LD_VAR 0 2
23995: PPUSH
23996: LD_VAR 0 5
24000: PPUSH
24001: CALL 24310 0 2
24005: PUSH
24006: LD_VAR 0 10
24010: PUSH
24011: EMPTY
24012: EQUAL
24013: OR
24014: IFFALSE 23959
// result := [ ] ;
24016: LD_ADDR_VAR 0 6
24020: PUSH
24021: EMPTY
24022: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24023: LD_VAR 0 1
24027: PPUSH
24028: LD_VAR 0 2
24032: PPUSH
24033: LD_VAR 0 3
24037: PPUSH
24038: LD_VAR 0 4
24042: PPUSH
24043: LD_VAR 0 5
24047: PPUSH
24048: CALL_OW 448
24052: IFFALSE 24085
// result := [ chassis , engine , control , weapon ] ;
24054: LD_ADDR_VAR 0 6
24058: PUSH
24059: LD_VAR 0 2
24063: PUSH
24064: LD_VAR 0 3
24068: PUSH
24069: LD_VAR 0 4
24073: PUSH
24074: LD_VAR 0 5
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: ST_TO_ADDR
// end ;
24085: LD_VAR 0 6
24089: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24090: LD_INT 0
24092: PPUSH
// if not chassis or not engine then
24093: LD_VAR 0 1
24097: NOT
24098: PUSH
24099: LD_VAR 0 2
24103: NOT
24104: OR
24105: IFFALSE 24109
// exit ;
24107: GO 24305
// case engine of engine_solar :
24109: LD_VAR 0 2
24113: PUSH
24114: LD_INT 2
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24160
24122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24123: LD_ADDR_VAR 0 3
24127: PUSH
24128: LD_INT 11
24130: PUSH
24131: LD_INT 12
24133: PUSH
24134: LD_INT 13
24136: PUSH
24137: LD_INT 14
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 3
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
24158: GO 24289
24160: LD_INT 1
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24230
24168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 11
24176: PUSH
24177: LD_INT 12
24179: PUSH
24180: LD_INT 13
24182: PUSH
24183: LD_INT 14
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 5
24200: PUSH
24201: LD_INT 21
24203: PUSH
24204: LD_INT 23
24206: PUSH
24207: LD_INT 22
24209: PUSH
24210: LD_INT 24
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: ST_TO_ADDR
24228: GO 24289
24230: LD_INT 3
24232: DOUBLE
24233: EQUAL
24234: IFTRUE 24238
24236: GO 24288
24238: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24239: LD_ADDR_VAR 0 3
24243: PUSH
24244: LD_INT 13
24246: PUSH
24247: LD_INT 14
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: LD_INT 4
24258: PUSH
24259: LD_INT 5
24261: PUSH
24262: LD_INT 21
24264: PUSH
24265: LD_INT 22
24267: PUSH
24268: LD_INT 23
24270: PUSH
24271: LD_INT 24
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 24289
24288: POP
// result := ( chassis in result ) ;
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_VAR 0 1
24298: PUSH
24299: LD_VAR 0 3
24303: IN
24304: ST_TO_ADDR
// end ;
24305: LD_VAR 0 3
24309: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24310: LD_INT 0
24312: PPUSH
// if not chassis or not weapon then
24313: LD_VAR 0 1
24317: NOT
24318: PUSH
24319: LD_VAR 0 2
24323: NOT
24324: OR
24325: IFFALSE 24329
// exit ;
24327: GO 25389
// case weapon of us_machine_gun :
24329: LD_VAR 0 2
24333: PUSH
24334: LD_INT 2
24336: DOUBLE
24337: EQUAL
24338: IFTRUE 24342
24340: GO 24372
24342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24343: LD_ADDR_VAR 0 3
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: LD_INT 4
24359: PUSH
24360: LD_INT 5
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: ST_TO_ADDR
24370: GO 25373
24372: LD_INT 3
24374: DOUBLE
24375: EQUAL
24376: IFTRUE 24380
24378: GO 24410
24380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 3
24394: PUSH
24395: LD_INT 4
24397: PUSH
24398: LD_INT 5
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: ST_TO_ADDR
24408: GO 25373
24410: LD_INT 11
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24448
24418: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: LD_INT 3
24432: PUSH
24433: LD_INT 4
24435: PUSH
24436: LD_INT 5
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: ST_TO_ADDR
24446: GO 25373
24448: LD_INT 4
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24482
24456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24457: LD_ADDR_VAR 0 3
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 3
24467: PUSH
24468: LD_INT 4
24470: PUSH
24471: LD_INT 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: ST_TO_ADDR
24480: GO 25373
24482: LD_INT 5
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24516
24490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 3
24501: PUSH
24502: LD_INT 4
24504: PUSH
24505: LD_INT 5
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
24514: GO 25373
24516: LD_INT 9
24518: DOUBLE
24519: EQUAL
24520: IFTRUE 24524
24522: GO 24550
24524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24525: LD_ADDR_VAR 0 3
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: ST_TO_ADDR
24548: GO 25373
24550: LD_INT 7
24552: DOUBLE
24553: EQUAL
24554: IFTRUE 24558
24556: GO 24584
24558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24559: LD_ADDR_VAR 0 3
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: LD_INT 4
24572: PUSH
24573: LD_INT 5
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: ST_TO_ADDR
24582: GO 25373
24584: LD_INT 12
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24618
24592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24593: LD_ADDR_VAR 0 3
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 3
24603: PUSH
24604: LD_INT 4
24606: PUSH
24607: LD_INT 5
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: ST_TO_ADDR
24616: GO 25373
24618: LD_INT 13
24620: DOUBLE
24621: EQUAL
24622: IFTRUE 24626
24624: GO 24652
24626: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24627: LD_ADDR_VAR 0 3
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: LD_INT 4
24640: PUSH
24641: LD_INT 5
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: ST_TO_ADDR
24650: GO 25373
24652: LD_INT 14
24654: DOUBLE
24655: EQUAL
24656: IFTRUE 24660
24658: GO 24678
24660: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_INT 4
24668: PUSH
24669: LD_INT 5
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: ST_TO_ADDR
24676: GO 25373
24678: LD_INT 6
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24686
24684: GO 24704
24686: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_INT 4
24694: PUSH
24695: LD_INT 5
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: ST_TO_ADDR
24702: GO 25373
24704: LD_INT 10
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24730
24712: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 4
24720: PUSH
24721: LD_INT 5
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: ST_TO_ADDR
24728: GO 25373
24730: LD_INT 22
24732: DOUBLE
24733: EQUAL
24734: IFTRUE 24738
24736: GO 24764
24738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: LD_INT 11
24746: PUSH
24747: LD_INT 12
24749: PUSH
24750: LD_INT 13
24752: PUSH
24753: LD_INT 14
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
24762: GO 25373
24764: LD_INT 23
24766: DOUBLE
24767: EQUAL
24768: IFTRUE 24772
24770: GO 24798
24772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24773: LD_ADDR_VAR 0 3
24777: PUSH
24778: LD_INT 11
24780: PUSH
24781: LD_INT 12
24783: PUSH
24784: LD_INT 13
24786: PUSH
24787: LD_INT 14
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: ST_TO_ADDR
24796: GO 25373
24798: LD_INT 24
24800: DOUBLE
24801: EQUAL
24802: IFTRUE 24806
24804: GO 24832
24806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24807: LD_ADDR_VAR 0 3
24811: PUSH
24812: LD_INT 11
24814: PUSH
24815: LD_INT 12
24817: PUSH
24818: LD_INT 13
24820: PUSH
24821: LD_INT 14
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
24830: GO 25373
24832: LD_INT 30
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24866
24840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: LD_INT 11
24848: PUSH
24849: LD_INT 12
24851: PUSH
24852: LD_INT 13
24854: PUSH
24855: LD_INT 14
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
24864: GO 25373
24866: LD_INT 25
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24874
24872: GO 24892
24874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: LD_INT 13
24882: PUSH
24883: LD_INT 14
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: ST_TO_ADDR
24890: GO 25373
24892: LD_INT 27
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24900
24898: GO 24918
24900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: LD_INT 13
24908: PUSH
24909: LD_INT 14
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25373
24918: LD_INT 92
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24952
24926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 11
24934: PUSH
24935: LD_INT 12
24937: PUSH
24938: LD_INT 13
24940: PUSH
24941: LD_INT 14
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: ST_TO_ADDR
24950: GO 25373
24952: LD_INT 28
24954: DOUBLE
24955: EQUAL
24956: IFTRUE 24960
24958: GO 24978
24960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 13
24968: PUSH
24969: LD_INT 14
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: ST_TO_ADDR
24976: GO 25373
24978: LD_INT 29
24980: DOUBLE
24981: EQUAL
24982: IFTRUE 24986
24984: GO 25004
24986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_INT 13
24994: PUSH
24995: LD_INT 14
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: ST_TO_ADDR
25002: GO 25373
25004: LD_INT 31
25006: DOUBLE
25007: EQUAL
25008: IFTRUE 25012
25010: GO 25030
25012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: LD_INT 13
25020: PUSH
25021: LD_INT 14
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: ST_TO_ADDR
25028: GO 25373
25030: LD_INT 26
25032: DOUBLE
25033: EQUAL
25034: IFTRUE 25038
25036: GO 25056
25038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25039: LD_ADDR_VAR 0 3
25043: PUSH
25044: LD_INT 13
25046: PUSH
25047: LD_INT 14
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: ST_TO_ADDR
25054: GO 25373
25056: LD_INT 42
25058: DOUBLE
25059: EQUAL
25060: IFTRUE 25064
25062: GO 25090
25064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_INT 21
25072: PUSH
25073: LD_INT 22
25075: PUSH
25076: LD_INT 23
25078: PUSH
25079: LD_INT 24
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
25088: GO 25373
25090: LD_INT 43
25092: DOUBLE
25093: EQUAL
25094: IFTRUE 25098
25096: GO 25124
25098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25099: LD_ADDR_VAR 0 3
25103: PUSH
25104: LD_INT 21
25106: PUSH
25107: LD_INT 22
25109: PUSH
25110: LD_INT 23
25112: PUSH
25113: LD_INT 24
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: ST_TO_ADDR
25122: GO 25373
25124: LD_INT 44
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25158
25132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_INT 21
25140: PUSH
25141: LD_INT 22
25143: PUSH
25144: LD_INT 23
25146: PUSH
25147: LD_INT 24
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
25156: GO 25373
25158: LD_INT 45
25160: DOUBLE
25161: EQUAL
25162: IFTRUE 25166
25164: GO 25192
25166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25167: LD_ADDR_VAR 0 3
25171: PUSH
25172: LD_INT 21
25174: PUSH
25175: LD_INT 22
25177: PUSH
25178: LD_INT 23
25180: PUSH
25181: LD_INT 24
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
25190: GO 25373
25192: LD_INT 49
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25226
25200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_INT 21
25208: PUSH
25209: LD_INT 22
25211: PUSH
25212: LD_INT 23
25214: PUSH
25215: LD_INT 24
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
25224: GO 25373
25226: LD_INT 51
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25260
25234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_INT 21
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_INT 23
25248: PUSH
25249: LD_INT 24
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: ST_TO_ADDR
25258: GO 25373
25260: LD_INT 52
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25294
25268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25269: LD_ADDR_VAR 0 3
25273: PUSH
25274: LD_INT 21
25276: PUSH
25277: LD_INT 22
25279: PUSH
25280: LD_INT 23
25282: PUSH
25283: LD_INT 24
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
25292: GO 25373
25294: LD_INT 53
25296: DOUBLE
25297: EQUAL
25298: IFTRUE 25302
25300: GO 25320
25302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_INT 23
25310: PUSH
25311: LD_INT 24
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 25373
25320: LD_INT 46
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25346
25328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 23
25336: PUSH
25337: LD_INT 24
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: ST_TO_ADDR
25344: GO 25373
25346: LD_INT 47
25348: DOUBLE
25349: EQUAL
25350: IFTRUE 25354
25352: GO 25372
25354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_INT 23
25362: PUSH
25363: LD_INT 24
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: ST_TO_ADDR
25370: GO 25373
25372: POP
// result := ( chassis in result ) ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_VAR 0 1
25382: PUSH
25383: LD_VAR 0 3
25387: IN
25388: ST_TO_ADDR
// end ;
25389: LD_VAR 0 3
25393: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25394: LD_INT 0
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
25402: PPUSH
// result := array ;
25403: LD_ADDR_VAR 0 5
25407: PUSH
25408: LD_VAR 0 1
25412: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25413: LD_VAR 0 1
25417: NOT
25418: PUSH
25419: LD_VAR 0 2
25423: NOT
25424: OR
25425: PUSH
25426: LD_VAR 0 3
25430: NOT
25431: OR
25432: PUSH
25433: LD_VAR 0 2
25437: PUSH
25438: LD_VAR 0 1
25442: GREATER
25443: OR
25444: PUSH
25445: LD_VAR 0 3
25449: PUSH
25450: LD_VAR 0 1
25454: GREATER
25455: OR
25456: IFFALSE 25460
// exit ;
25458: GO 25756
// if direction then
25460: LD_VAR 0 4
25464: IFFALSE 25528
// begin d := 1 ;
25466: LD_ADDR_VAR 0 9
25470: PUSH
25471: LD_INT 1
25473: ST_TO_ADDR
// if i_from > i_to then
25474: LD_VAR 0 2
25478: PUSH
25479: LD_VAR 0 3
25483: GREATER
25484: IFFALSE 25510
// length := ( array - i_from ) + i_to else
25486: LD_ADDR_VAR 0 11
25490: PUSH
25491: LD_VAR 0 1
25495: PUSH
25496: LD_VAR 0 2
25500: MINUS
25501: PUSH
25502: LD_VAR 0 3
25506: PLUS
25507: ST_TO_ADDR
25508: GO 25526
// length := i_to - i_from ;
25510: LD_ADDR_VAR 0 11
25514: PUSH
25515: LD_VAR 0 3
25519: PUSH
25520: LD_VAR 0 2
25524: MINUS
25525: ST_TO_ADDR
// end else
25526: GO 25589
// begin d := - 1 ;
25528: LD_ADDR_VAR 0 9
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: ST_TO_ADDR
// if i_from > i_to then
25537: LD_VAR 0 2
25541: PUSH
25542: LD_VAR 0 3
25546: GREATER
25547: IFFALSE 25567
// length := i_from - i_to else
25549: LD_ADDR_VAR 0 11
25553: PUSH
25554: LD_VAR 0 2
25558: PUSH
25559: LD_VAR 0 3
25563: MINUS
25564: ST_TO_ADDR
25565: GO 25589
// length := ( array - i_to ) + i_from ;
25567: LD_ADDR_VAR 0 11
25571: PUSH
25572: LD_VAR 0 1
25576: PUSH
25577: LD_VAR 0 3
25581: MINUS
25582: PUSH
25583: LD_VAR 0 2
25587: PLUS
25588: ST_TO_ADDR
// end ; if not length then
25589: LD_VAR 0 11
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25756
// tmp := array ;
25598: LD_ADDR_VAR 0 10
25602: PUSH
25603: LD_VAR 0 1
25607: ST_TO_ADDR
// for i = 1 to length do
25608: LD_ADDR_VAR 0 6
25612: PUSH
25613: DOUBLE
25614: LD_INT 1
25616: DEC
25617: ST_TO_ADDR
25618: LD_VAR 0 11
25622: PUSH
25623: FOR_TO
25624: IFFALSE 25744
// begin for j = 1 to array do
25626: LD_ADDR_VAR 0 7
25630: PUSH
25631: DOUBLE
25632: LD_INT 1
25634: DEC
25635: ST_TO_ADDR
25636: LD_VAR 0 1
25640: PUSH
25641: FOR_TO
25642: IFFALSE 25730
// begin k := j + d ;
25644: LD_ADDR_VAR 0 8
25648: PUSH
25649: LD_VAR 0 7
25653: PUSH
25654: LD_VAR 0 9
25658: PLUS
25659: ST_TO_ADDR
// if k > array then
25660: LD_VAR 0 8
25664: PUSH
25665: LD_VAR 0 1
25669: GREATER
25670: IFFALSE 25680
// k := 1 ;
25672: LD_ADDR_VAR 0 8
25676: PUSH
25677: LD_INT 1
25679: ST_TO_ADDR
// if not k then
25680: LD_VAR 0 8
25684: NOT
25685: IFFALSE 25697
// k := array ;
25687: LD_ADDR_VAR 0 8
25691: PUSH
25692: LD_VAR 0 1
25696: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25697: LD_ADDR_VAR 0 10
25701: PUSH
25702: LD_VAR 0 10
25706: PPUSH
25707: LD_VAR 0 8
25711: PPUSH
25712: LD_VAR 0 1
25716: PUSH
25717: LD_VAR 0 7
25721: ARRAY
25722: PPUSH
25723: CALL_OW 1
25727: ST_TO_ADDR
// end ;
25728: GO 25641
25730: POP
25731: POP
// array := tmp ;
25732: LD_ADDR_VAR 0 1
25736: PUSH
25737: LD_VAR 0 10
25741: ST_TO_ADDR
// end ;
25742: GO 25623
25744: POP
25745: POP
// result := array ;
25746: LD_ADDR_VAR 0 5
25750: PUSH
25751: LD_VAR 0 1
25755: ST_TO_ADDR
// end ;
25756: LD_VAR 0 5
25760: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25761: LD_INT 0
25763: PPUSH
25764: PPUSH
// result := 0 ;
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 0
25772: ST_TO_ADDR
// if not array or not value in array then
25773: LD_VAR 0 1
25777: NOT
25778: PUSH
25779: LD_VAR 0 2
25783: PUSH
25784: LD_VAR 0 1
25788: IN
25789: NOT
25790: OR
25791: IFFALSE 25795
// exit ;
25793: GO 25849
// for i = 1 to array do
25795: LD_ADDR_VAR 0 4
25799: PUSH
25800: DOUBLE
25801: LD_INT 1
25803: DEC
25804: ST_TO_ADDR
25805: LD_VAR 0 1
25809: PUSH
25810: FOR_TO
25811: IFFALSE 25847
// if value = array [ i ] then
25813: LD_VAR 0 2
25817: PUSH
25818: LD_VAR 0 1
25822: PUSH
25823: LD_VAR 0 4
25827: ARRAY
25828: EQUAL
25829: IFFALSE 25845
// begin result := i ;
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_VAR 0 4
25840: ST_TO_ADDR
// exit ;
25841: POP
25842: POP
25843: GO 25849
// end ;
25845: GO 25810
25847: POP
25848: POP
// end ;
25849: LD_VAR 0 3
25853: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25854: LD_INT 0
25856: PPUSH
// vc_chassis := chassis ;
25857: LD_ADDR_OWVAR 37
25861: PUSH
25862: LD_VAR 0 1
25866: ST_TO_ADDR
// vc_engine := engine ;
25867: LD_ADDR_OWVAR 39
25871: PUSH
25872: LD_VAR 0 2
25876: ST_TO_ADDR
// vc_control := control ;
25877: LD_ADDR_OWVAR 38
25881: PUSH
25882: LD_VAR 0 3
25886: ST_TO_ADDR
// vc_weapon := weapon ;
25887: LD_ADDR_OWVAR 40
25891: PUSH
25892: LD_VAR 0 4
25896: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25897: LD_ADDR_OWVAR 41
25901: PUSH
25902: LD_VAR 0 5
25906: ST_TO_ADDR
// end ;
25907: LD_VAR 0 6
25911: RET
// export function WantPlant ( unit ) ; var task ; begin
25912: LD_INT 0
25914: PPUSH
25915: PPUSH
// result := false ;
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: LD_INT 0
25923: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 437
25938: ST_TO_ADDR
// if task then
25939: LD_VAR 0 3
25943: IFFALSE 25971
// if task [ 1 ] [ 1 ] = p then
25945: LD_VAR 0 3
25949: PUSH
25950: LD_INT 1
25952: ARRAY
25953: PUSH
25954: LD_INT 1
25956: ARRAY
25957: PUSH
25958: LD_STRING p
25960: EQUAL
25961: IFFALSE 25971
// result := true ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_INT 1
25970: ST_TO_ADDR
// end ;
25971: LD_VAR 0 2
25975: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25976: LD_INT 0
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
// if pos < 1 then
25982: LD_VAR 0 2
25986: PUSH
25987: LD_INT 1
25989: LESS
25990: IFFALSE 25994
// exit ;
25992: GO 26297
// if pos = 1 then
25994: LD_VAR 0 2
25998: PUSH
25999: LD_INT 1
26001: EQUAL
26002: IFFALSE 26035
// result := Replace ( arr , pos [ 1 ] , value ) else
26004: LD_ADDR_VAR 0 4
26008: PUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: LD_VAR 0 2
26018: PUSH
26019: LD_INT 1
26021: ARRAY
26022: PPUSH
26023: LD_VAR 0 3
26027: PPUSH
26028: CALL_OW 1
26032: ST_TO_ADDR
26033: GO 26297
// begin tmp := arr ;
26035: LD_ADDR_VAR 0 6
26039: PUSH
26040: LD_VAR 0 1
26044: ST_TO_ADDR
// s_arr := [ tmp ] ;
26045: LD_ADDR_VAR 0 7
26049: PUSH
26050: LD_VAR 0 6
26054: PUSH
26055: EMPTY
26056: LIST
26057: ST_TO_ADDR
// for i = 1 to pos - 1 do
26058: LD_ADDR_VAR 0 5
26062: PUSH
26063: DOUBLE
26064: LD_INT 1
26066: DEC
26067: ST_TO_ADDR
26068: LD_VAR 0 2
26072: PUSH
26073: LD_INT 1
26075: MINUS
26076: PUSH
26077: FOR_TO
26078: IFFALSE 26123
// begin tmp := tmp [ pos [ i ] ] ;
26080: LD_ADDR_VAR 0 6
26084: PUSH
26085: LD_VAR 0 6
26089: PUSH
26090: LD_VAR 0 2
26094: PUSH
26095: LD_VAR 0 5
26099: ARRAY
26100: ARRAY
26101: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26102: LD_ADDR_VAR 0 7
26106: PUSH
26107: LD_VAR 0 7
26111: PUSH
26112: LD_VAR 0 6
26116: PUSH
26117: EMPTY
26118: LIST
26119: ADD
26120: ST_TO_ADDR
// end ;
26121: GO 26077
26123: POP
26124: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26125: LD_ADDR_VAR 0 6
26129: PUSH
26130: LD_VAR 0 6
26134: PPUSH
26135: LD_VAR 0 2
26139: PUSH
26140: LD_VAR 0 2
26144: ARRAY
26145: PPUSH
26146: LD_VAR 0 3
26150: PPUSH
26151: CALL_OW 1
26155: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26156: LD_ADDR_VAR 0 7
26160: PUSH
26161: LD_VAR 0 7
26165: PPUSH
26166: LD_VAR 0 7
26170: PPUSH
26171: LD_VAR 0 6
26175: PPUSH
26176: CALL_OW 1
26180: ST_TO_ADDR
// for i = s_arr downto 2 do
26181: LD_ADDR_VAR 0 5
26185: PUSH
26186: DOUBLE
26187: LD_VAR 0 7
26191: INC
26192: ST_TO_ADDR
26193: LD_INT 2
26195: PUSH
26196: FOR_DOWNTO
26197: IFFALSE 26281
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26199: LD_ADDR_VAR 0 6
26203: PUSH
26204: LD_VAR 0 7
26208: PUSH
26209: LD_VAR 0 5
26213: PUSH
26214: LD_INT 1
26216: MINUS
26217: ARRAY
26218: PPUSH
26219: LD_VAR 0 2
26223: PUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_INT 1
26231: MINUS
26232: ARRAY
26233: PPUSH
26234: LD_VAR 0 7
26238: PUSH
26239: LD_VAR 0 5
26243: ARRAY
26244: PPUSH
26245: CALL_OW 1
26249: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26250: LD_ADDR_VAR 0 7
26254: PUSH
26255: LD_VAR 0 7
26259: PPUSH
26260: LD_VAR 0 5
26264: PUSH
26265: LD_INT 1
26267: MINUS
26268: PPUSH
26269: LD_VAR 0 6
26273: PPUSH
26274: CALL_OW 1
26278: ST_TO_ADDR
// end ;
26279: GO 26196
26281: POP
26282: POP
// result := s_arr [ 1 ] ;
26283: LD_ADDR_VAR 0 4
26287: PUSH
26288: LD_VAR 0 7
26292: PUSH
26293: LD_INT 1
26295: ARRAY
26296: ST_TO_ADDR
// end ; end ;
26297: LD_VAR 0 4
26301: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26302: LD_INT 0
26304: PPUSH
26305: PPUSH
// if not list then
26306: LD_VAR 0 1
26310: NOT
26311: IFFALSE 26315
// exit ;
26313: GO 26406
// i := list [ pos1 ] ;
26315: LD_ADDR_VAR 0 5
26319: PUSH
26320: LD_VAR 0 1
26324: PUSH
26325: LD_VAR 0 2
26329: ARRAY
26330: ST_TO_ADDR
// if not i then
26331: LD_VAR 0 5
26335: NOT
26336: IFFALSE 26340
// exit ;
26338: GO 26406
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26340: LD_ADDR_VAR 0 1
26344: PUSH
26345: LD_VAR 0 1
26349: PPUSH
26350: LD_VAR 0 2
26354: PPUSH
26355: LD_VAR 0 1
26359: PUSH
26360: LD_VAR 0 3
26364: ARRAY
26365: PPUSH
26366: CALL_OW 1
26370: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26371: LD_ADDR_VAR 0 1
26375: PUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: LD_VAR 0 3
26385: PPUSH
26386: LD_VAR 0 5
26390: PPUSH
26391: CALL_OW 1
26395: ST_TO_ADDR
// result := list ;
26396: LD_ADDR_VAR 0 4
26400: PUSH
26401: LD_VAR 0 1
26405: ST_TO_ADDR
// end ;
26406: LD_VAR 0 4
26410: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26411: LD_INT 0
26413: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26414: LD_ADDR_VAR 0 5
26418: PUSH
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 250
26428: PPUSH
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 251
26438: PPUSH
26439: LD_VAR 0 2
26443: PPUSH
26444: LD_VAR 0 3
26448: PPUSH
26449: LD_VAR 0 4
26453: PPUSH
26454: CALL 26832 0 5
26458: ST_TO_ADDR
// end ;
26459: LD_VAR 0 5
26463: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
// if not list or not unit then
26470: LD_VAR 0 2
26474: NOT
26475: PUSH
26476: LD_VAR 0 1
26480: NOT
26481: OR
26482: IFFALSE 26486
// exit ;
26484: GO 26827
// result := [ ] ;
26486: LD_ADDR_VAR 0 5
26490: PUSH
26491: EMPTY
26492: ST_TO_ADDR
// for i in list do
26493: LD_ADDR_VAR 0 6
26497: PUSH
26498: LD_VAR 0 2
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26722
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26506: LD_ADDR_VAR 0 8
26510: PUSH
26511: LD_VAR 0 1
26515: PPUSH
26516: LD_VAR 0 6
26520: PUSH
26521: LD_INT 1
26523: ARRAY
26524: PPUSH
26525: LD_VAR 0 6
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: PPUSH
26534: CALL_OW 297
26538: ST_TO_ADDR
// if not Count ( result ) then
26539: LD_VAR 0 5
26543: PPUSH
26544: CALL 23116 0 1
26548: NOT
26549: IFFALSE 26582
// begin result := Join ( result , [ i , tmp ] ) ;
26551: LD_ADDR_VAR 0 5
26555: PUSH
26556: LD_VAR 0 5
26560: PPUSH
26561: LD_VAR 0 6
26565: PUSH
26566: LD_VAR 0 8
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PPUSH
26575: CALL 58705 0 2
26579: ST_TO_ADDR
// continue ;
26580: GO 26503
// end ; if result [ result ] [ 2 ] <= tmp then
26582: LD_VAR 0 5
26586: PUSH
26587: LD_VAR 0 5
26591: ARRAY
26592: PUSH
26593: LD_INT 2
26595: ARRAY
26596: PUSH
26597: LD_VAR 0 8
26601: LESSEQUAL
26602: IFFALSE 26635
// result := Join ( result , [ i , tmp ] ) else
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_VAR 0 5
26613: PPUSH
26614: LD_VAR 0 6
26618: PUSH
26619: LD_VAR 0 8
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PPUSH
26628: CALL 58705 0 2
26632: ST_TO_ADDR
26633: GO 26720
// begin for j := 1 to Count ( result ) do
26635: LD_ADDR_VAR 0 7
26639: PUSH
26640: DOUBLE
26641: LD_INT 1
26643: DEC
26644: ST_TO_ADDR
26645: LD_VAR 0 5
26649: PPUSH
26650: CALL 23116 0 1
26654: PUSH
26655: FOR_TO
26656: IFFALSE 26718
// begin if tmp < result [ j ] [ 2 ] then
26658: LD_VAR 0 8
26662: PUSH
26663: LD_VAR 0 5
26667: PUSH
26668: LD_VAR 0 7
26672: ARRAY
26673: PUSH
26674: LD_INT 2
26676: ARRAY
26677: LESS
26678: IFFALSE 26716
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26680: LD_ADDR_VAR 0 5
26684: PUSH
26685: LD_VAR 0 5
26689: PPUSH
26690: LD_VAR 0 7
26694: PPUSH
26695: LD_VAR 0 6
26699: PUSH
26700: LD_VAR 0 8
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PPUSH
26709: CALL_OW 2
26713: ST_TO_ADDR
// break ;
26714: GO 26718
// end ; end ;
26716: GO 26655
26718: POP
26719: POP
// end ; end ;
26720: GO 26503
26722: POP
26723: POP
// if result and not asc then
26724: LD_VAR 0 5
26728: PUSH
26729: LD_VAR 0 3
26733: NOT
26734: AND
26735: IFFALSE 26752
// result := ReverseArray ( result ) ;
26737: LD_ADDR_VAR 0 5
26741: PUSH
26742: LD_VAR 0 5
26746: PPUSH
26747: CALL 53992 0 1
26751: ST_TO_ADDR
// tmp := [ ] ;
26752: LD_ADDR_VAR 0 8
26756: PUSH
26757: EMPTY
26758: ST_TO_ADDR
// if mode then
26759: LD_VAR 0 4
26763: IFFALSE 26827
// begin for i := 1 to result do
26765: LD_ADDR_VAR 0 6
26769: PUSH
26770: DOUBLE
26771: LD_INT 1
26773: DEC
26774: ST_TO_ADDR
26775: LD_VAR 0 5
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26815
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26783: LD_ADDR_VAR 0 8
26787: PUSH
26788: LD_VAR 0 8
26792: PPUSH
26793: LD_VAR 0 5
26797: PUSH
26798: LD_VAR 0 6
26802: ARRAY
26803: PUSH
26804: LD_INT 1
26806: ARRAY
26807: PPUSH
26808: CALL 58705 0 2
26812: ST_TO_ADDR
26813: GO 26780
26815: POP
26816: POP
// result := tmp ;
26817: LD_ADDR_VAR 0 5
26821: PUSH
26822: LD_VAR 0 8
26826: ST_TO_ADDR
// end ; end ;
26827: LD_VAR 0 5
26831: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
// if not list then
26838: LD_VAR 0 3
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 27235
// result := [ ] ;
26847: LD_ADDR_VAR 0 6
26851: PUSH
26852: EMPTY
26853: ST_TO_ADDR
// for i in list do
26854: LD_ADDR_VAR 0 7
26858: PUSH
26859: LD_VAR 0 3
26863: PUSH
26864: FOR_IN
26865: IFFALSE 27067
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26867: LD_ADDR_VAR 0 9
26871: PUSH
26872: LD_VAR 0 7
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: LD_VAR 0 2
26886: PPUSH
26887: CALL_OW 297
26891: ST_TO_ADDR
// if not result then
26892: LD_VAR 0 6
26896: NOT
26897: IFFALSE 26923
// result := [ [ i , tmp ] ] else
26899: LD_ADDR_VAR 0 6
26903: PUSH
26904: LD_VAR 0 7
26908: PUSH
26909: LD_VAR 0 9
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: ST_TO_ADDR
26921: GO 27065
// begin if result [ result ] [ 2 ] < tmp then
26923: LD_VAR 0 6
26927: PUSH
26928: LD_VAR 0 6
26932: ARRAY
26933: PUSH
26934: LD_INT 2
26936: ARRAY
26937: PUSH
26938: LD_VAR 0 9
26942: LESS
26943: IFFALSE 26985
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26945: LD_ADDR_VAR 0 6
26949: PUSH
26950: LD_VAR 0 6
26954: PPUSH
26955: LD_VAR 0 6
26959: PUSH
26960: LD_INT 1
26962: PLUS
26963: PPUSH
26964: LD_VAR 0 7
26968: PUSH
26969: LD_VAR 0 9
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 2
26982: ST_TO_ADDR
26983: GO 27065
// for j = 1 to result do
26985: LD_ADDR_VAR 0 8
26989: PUSH
26990: DOUBLE
26991: LD_INT 1
26993: DEC
26994: ST_TO_ADDR
26995: LD_VAR 0 6
26999: PUSH
27000: FOR_TO
27001: IFFALSE 27063
// begin if tmp < result [ j ] [ 2 ] then
27003: LD_VAR 0 9
27007: PUSH
27008: LD_VAR 0 6
27012: PUSH
27013: LD_VAR 0 8
27017: ARRAY
27018: PUSH
27019: LD_INT 2
27021: ARRAY
27022: LESS
27023: IFFALSE 27061
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27025: LD_ADDR_VAR 0 6
27029: PUSH
27030: LD_VAR 0 6
27034: PPUSH
27035: LD_VAR 0 8
27039: PPUSH
27040: LD_VAR 0 7
27044: PUSH
27045: LD_VAR 0 9
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PPUSH
27054: CALL_OW 2
27058: ST_TO_ADDR
// break ;
27059: GO 27063
// end ; end ;
27061: GO 27000
27063: POP
27064: POP
// end ; end ;
27065: GO 26864
27067: POP
27068: POP
// if result and not asc then
27069: LD_VAR 0 6
27073: PUSH
27074: LD_VAR 0 4
27078: NOT
27079: AND
27080: IFFALSE 27155
// begin tmp := result ;
27082: LD_ADDR_VAR 0 9
27086: PUSH
27087: LD_VAR 0 6
27091: ST_TO_ADDR
// for i = tmp downto 1 do
27092: LD_ADDR_VAR 0 7
27096: PUSH
27097: DOUBLE
27098: LD_VAR 0 9
27102: INC
27103: ST_TO_ADDR
27104: LD_INT 1
27106: PUSH
27107: FOR_DOWNTO
27108: IFFALSE 27153
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27110: LD_ADDR_VAR 0 6
27114: PUSH
27115: LD_VAR 0 6
27119: PPUSH
27120: LD_VAR 0 9
27124: PUSH
27125: LD_VAR 0 7
27129: MINUS
27130: PUSH
27131: LD_INT 1
27133: PLUS
27134: PPUSH
27135: LD_VAR 0 9
27139: PUSH
27140: LD_VAR 0 7
27144: ARRAY
27145: PPUSH
27146: CALL_OW 1
27150: ST_TO_ADDR
27151: GO 27107
27153: POP
27154: POP
// end ; tmp := [ ] ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: EMPTY
27161: ST_TO_ADDR
// if mode then
27162: LD_VAR 0 5
27166: IFFALSE 27235
// begin for i = 1 to result do
27168: LD_ADDR_VAR 0 7
27172: PUSH
27173: DOUBLE
27174: LD_INT 1
27176: DEC
27177: ST_TO_ADDR
27178: LD_VAR 0 6
27182: PUSH
27183: FOR_TO
27184: IFFALSE 27223
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27186: LD_ADDR_VAR 0 9
27190: PUSH
27191: LD_VAR 0 9
27195: PPUSH
27196: LD_VAR 0 7
27200: PPUSH
27201: LD_VAR 0 6
27205: PUSH
27206: LD_VAR 0 7
27210: ARRAY
27211: PUSH
27212: LD_INT 1
27214: ARRAY
27215: PPUSH
27216: CALL_OW 1
27220: ST_TO_ADDR
27221: GO 27183
27223: POP
27224: POP
// result := tmp ;
27225: LD_ADDR_VAR 0 6
27229: PUSH
27230: LD_VAR 0 9
27234: ST_TO_ADDR
// end ; end ;
27235: LD_VAR 0 6
27239: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// if not x or not y then
27270: LD_VAR 0 2
27274: NOT
27275: PUSH
27276: LD_VAR 0 3
27280: NOT
27281: OR
27282: IFFALSE 27286
// exit ;
27284: GO 28936
// if not range then
27286: LD_VAR 0 4
27290: NOT
27291: IFFALSE 27301
// range := 10 ;
27293: LD_ADDR_VAR 0 4
27297: PUSH
27298: LD_INT 10
27300: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27301: LD_ADDR_VAR 0 8
27305: PUSH
27306: LD_INT 81
27308: PUSH
27309: LD_VAR 0 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 92
27320: PUSH
27321: LD_VAR 0 2
27325: PUSH
27326: LD_VAR 0 3
27330: PUSH
27331: LD_VAR 0 4
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 3
27344: PUSH
27345: LD_INT 21
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PPUSH
27364: CALL_OW 69
27368: ST_TO_ADDR
// if not tmp then
27369: LD_VAR 0 8
27373: NOT
27374: IFFALSE 27378
// exit ;
27376: GO 28936
// for i in tmp do
27378: LD_ADDR_VAR 0 6
27382: PUSH
27383: LD_VAR 0 8
27387: PUSH
27388: FOR_IN
27389: IFFALSE 28911
// begin points := [ 0 , 0 , 0 ] ;
27391: LD_ADDR_VAR 0 9
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: ST_TO_ADDR
// bpoints := 1 ;
27410: LD_ADDR_VAR 0 10
27414: PUSH
27415: LD_INT 1
27417: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 247
27427: PUSH
27428: LD_INT 1
27430: DOUBLE
27431: EQUAL
27432: IFTRUE 27436
27434: GO 28014
27436: POP
// begin if GetClass ( i ) = 1 then
27437: LD_VAR 0 6
27441: PPUSH
27442: CALL_OW 257
27446: PUSH
27447: LD_INT 1
27449: EQUAL
27450: IFFALSE 27471
// points := [ 10 , 5 , 3 ] ;
27452: LD_ADDR_VAR 0 9
27456: PUSH
27457: LD_INT 10
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27471: LD_VAR 0 6
27475: PPUSH
27476: CALL_OW 257
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 4
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: IN
27495: IFFALSE 27516
// points := [ 3 , 2 , 1 ] ;
27497: LD_ADDR_VAR 0 9
27501: PUSH
27502: LD_INT 3
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 257
27525: PUSH
27526: LD_INT 5
27528: EQUAL
27529: IFFALSE 27550
// points := [ 130 , 5 , 2 ] ;
27531: LD_ADDR_VAR 0 9
27535: PUSH
27536: LD_INT 130
27538: PUSH
27539: LD_INT 5
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27550: LD_VAR 0 6
27554: PPUSH
27555: CALL_OW 257
27559: PUSH
27560: LD_INT 8
27562: EQUAL
27563: IFFALSE 27584
// points := [ 35 , 35 , 30 ] ;
27565: LD_ADDR_VAR 0 9
27569: PUSH
27570: LD_INT 35
27572: PUSH
27573: LD_INT 35
27575: PUSH
27576: LD_INT 30
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27584: LD_VAR 0 6
27588: PPUSH
27589: CALL_OW 257
27593: PUSH
27594: LD_INT 9
27596: EQUAL
27597: IFFALSE 27618
// points := [ 20 , 55 , 40 ] ;
27599: LD_ADDR_VAR 0 9
27603: PUSH
27604: LD_INT 20
27606: PUSH
27607: LD_INT 55
27609: PUSH
27610: LD_INT 40
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27618: LD_VAR 0 6
27622: PPUSH
27623: CALL_OW 257
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 16
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: IN
27638: IFFALSE 27659
// points := [ 5 , 3 , 2 ] ;
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_INT 5
27647: PUSH
27648: LD_INT 3
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27659: LD_VAR 0 6
27663: PPUSH
27664: CALL_OW 257
27668: PUSH
27669: LD_INT 17
27671: EQUAL
27672: IFFALSE 27693
// points := [ 100 , 50 , 75 ] ;
27674: LD_ADDR_VAR 0 9
27678: PUSH
27679: LD_INT 100
27681: PUSH
27682: LD_INT 50
27684: PUSH
27685: LD_INT 75
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27693: LD_VAR 0 6
27697: PPUSH
27698: CALL_OW 257
27702: PUSH
27703: LD_INT 15
27705: EQUAL
27706: IFFALSE 27727
// points := [ 10 , 5 , 3 ] ;
27708: LD_ADDR_VAR 0 9
27712: PUSH
27713: LD_INT 10
27715: PUSH
27716: LD_INT 5
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27727: LD_VAR 0 6
27731: PPUSH
27732: CALL_OW 257
27736: PUSH
27737: LD_INT 14
27739: EQUAL
27740: IFFALSE 27761
// points := [ 10 , 0 , 0 ] ;
27742: LD_ADDR_VAR 0 9
27746: PUSH
27747: LD_INT 10
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27761: LD_VAR 0 6
27765: PPUSH
27766: CALL_OW 257
27770: PUSH
27771: LD_INT 11
27773: EQUAL
27774: IFFALSE 27795
// points := [ 30 , 10 , 5 ] ;
27776: LD_ADDR_VAR 0 9
27780: PUSH
27781: LD_INT 30
27783: PUSH
27784: LD_INT 10
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27795: LD_VAR 0 1
27799: PPUSH
27800: LD_INT 5
27802: PPUSH
27803: CALL_OW 321
27807: PUSH
27808: LD_INT 2
27810: EQUAL
27811: IFFALSE 27828
// bpoints := bpoints * 1.8 ;
27813: LD_ADDR_VAR 0 10
27817: PUSH
27818: LD_VAR 0 10
27822: PUSH
27823: LD_REAL  1.80000000000000E+0000
27826: MUL
27827: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27828: LD_VAR 0 6
27832: PPUSH
27833: CALL_OW 257
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 4
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: IN
27856: PUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: LD_INT 51
27864: PPUSH
27865: CALL_OW 321
27869: PUSH
27870: LD_INT 2
27872: EQUAL
27873: AND
27874: IFFALSE 27891
// bpoints := bpoints * 1.2 ;
27876: LD_ADDR_VAR 0 10
27880: PUSH
27881: LD_VAR 0 10
27885: PUSH
27886: LD_REAL  1.20000000000000E+0000
27889: MUL
27890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 257
27900: PUSH
27901: LD_INT 5
27903: PUSH
27904: LD_INT 7
27906: PUSH
27907: LD_INT 9
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: PUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: LD_INT 52
27923: PPUSH
27924: CALL_OW 321
27928: PUSH
27929: LD_INT 2
27931: EQUAL
27932: AND
27933: IFFALSE 27950
// bpoints := bpoints * 1.5 ;
27935: LD_ADDR_VAR 0 10
27939: PUSH
27940: LD_VAR 0 10
27944: PUSH
27945: LD_REAL  1.50000000000000E+0000
27948: MUL
27949: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27950: LD_VAR 0 1
27954: PPUSH
27955: LD_INT 66
27957: PPUSH
27958: CALL_OW 321
27962: PUSH
27963: LD_INT 2
27965: EQUAL
27966: IFFALSE 27983
// bpoints := bpoints * 1.1 ;
27968: LD_ADDR_VAR 0 10
27972: PUSH
27973: LD_VAR 0 10
27977: PUSH
27978: LD_REAL  1.10000000000000E+0000
27981: MUL
27982: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27983: LD_ADDR_VAR 0 10
27987: PUSH
27988: LD_VAR 0 10
27992: PUSH
27993: LD_VAR 0 6
27997: PPUSH
27998: LD_INT 1
28000: PPUSH
28001: CALL_OW 259
28005: PUSH
28006: LD_REAL  1.15000000000000E+0000
28009: MUL
28010: MUL
28011: ST_TO_ADDR
// end ; unit_vehicle :
28012: GO 28840
28014: LD_INT 2
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28828
28022: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28023: LD_VAR 0 6
28027: PPUSH
28028: CALL_OW 264
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 42
28038: PUSH
28039: LD_INT 24
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: IN
28047: IFFALSE 28068
// points := [ 25 , 5 , 3 ] ;
28049: LD_ADDR_VAR 0 9
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: LD_INT 3
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28068: LD_VAR 0 6
28072: PPUSH
28073: CALL_OW 264
28077: PUSH
28078: LD_INT 4
28080: PUSH
28081: LD_INT 43
28083: PUSH
28084: LD_INT 25
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: IN
28092: IFFALSE 28113
// points := [ 40 , 15 , 5 ] ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: LD_INT 40
28101: PUSH
28102: LD_INT 15
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 264
28122: PUSH
28123: LD_INT 3
28125: PUSH
28126: LD_INT 23
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: IN
28133: IFFALSE 28154
// points := [ 7 , 25 , 8 ] ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_INT 7
28142: PUSH
28143: LD_INT 25
28145: PUSH
28146: LD_INT 8
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28154: LD_VAR 0 6
28158: PPUSH
28159: CALL_OW 264
28163: PUSH
28164: LD_INT 5
28166: PUSH
28167: LD_INT 27
28169: PUSH
28170: LD_INT 44
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: IN
28178: IFFALSE 28199
// points := [ 14 , 50 , 16 ] ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_INT 14
28187: PUSH
28188: LD_INT 50
28190: PUSH
28191: LD_INT 16
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 264
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: LD_INT 46
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: IN
28219: IFFALSE 28240
// points := [ 32 , 120 , 70 ] ;
28221: LD_ADDR_VAR 0 9
28225: PUSH
28226: LD_INT 32
28228: PUSH
28229: LD_INT 120
28231: PUSH
28232: LD_INT 70
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28240: LD_VAR 0 6
28244: PPUSH
28245: CALL_OW 264
28249: PUSH
28250: LD_INT 7
28252: PUSH
28253: LD_INT 28
28255: PUSH
28256: LD_INT 45
28258: PUSH
28259: LD_INT 92
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: IN
28268: IFFALSE 28289
// points := [ 35 , 20 , 45 ] ;
28270: LD_ADDR_VAR 0 9
28274: PUSH
28275: LD_INT 35
28277: PUSH
28278: LD_INT 20
28280: PUSH
28281: LD_INT 45
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28289: LD_VAR 0 6
28293: PPUSH
28294: CALL_OW 264
28298: PUSH
28299: LD_INT 47
28301: PUSH
28302: EMPTY
28303: LIST
28304: IN
28305: IFFALSE 28326
// points := [ 67 , 45 , 75 ] ;
28307: LD_ADDR_VAR 0 9
28311: PUSH
28312: LD_INT 67
28314: PUSH
28315: LD_INT 45
28317: PUSH
28318: LD_INT 75
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28326: LD_VAR 0 6
28330: PPUSH
28331: CALL_OW 264
28335: PUSH
28336: LD_INT 26
28338: PUSH
28339: EMPTY
28340: LIST
28341: IN
28342: IFFALSE 28363
// points := [ 120 , 30 , 80 ] ;
28344: LD_ADDR_VAR 0 9
28348: PUSH
28349: LD_INT 120
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 80
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28363: LD_VAR 0 6
28367: PPUSH
28368: CALL_OW 264
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: EMPTY
28377: LIST
28378: IN
28379: IFFALSE 28400
// points := [ 40 , 1 , 1 ] ;
28381: LD_ADDR_VAR 0 9
28385: PUSH
28386: LD_INT 40
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28400: LD_VAR 0 6
28404: PPUSH
28405: CALL_OW 264
28409: PUSH
28410: LD_INT 29
28412: PUSH
28413: EMPTY
28414: LIST
28415: IN
28416: IFFALSE 28437
// points := [ 70 , 200 , 400 ] ;
28418: LD_ADDR_VAR 0 9
28422: PUSH
28423: LD_INT 70
28425: PUSH
28426: LD_INT 200
28428: PUSH
28429: LD_INT 400
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28437: LD_VAR 0 6
28441: PPUSH
28442: CALL_OW 264
28446: PUSH
28447: LD_INT 14
28449: PUSH
28450: LD_INT 53
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: IN
28457: IFFALSE 28478
// points := [ 40 , 10 , 20 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 40
28466: PUSH
28467: LD_INT 10
28469: PUSH
28470: LD_INT 20
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 264
28487: PUSH
28488: LD_INT 9
28490: PUSH
28491: EMPTY
28492: LIST
28493: IN
28494: IFFALSE 28515
// points := [ 5 , 70 , 20 ] ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: LD_INT 70
28506: PUSH
28507: LD_INT 20
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28515: LD_VAR 0 6
28519: PPUSH
28520: CALL_OW 264
28524: PUSH
28525: LD_INT 10
28527: PUSH
28528: EMPTY
28529: LIST
28530: IN
28531: IFFALSE 28552
// points := [ 35 , 110 , 70 ] ;
28533: LD_ADDR_VAR 0 9
28537: PUSH
28538: LD_INT 35
28540: PUSH
28541: LD_INT 110
28543: PUSH
28544: LD_INT 70
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28552: LD_VAR 0 6
28556: PPUSH
28557: CALL_OW 265
28561: PUSH
28562: LD_INT 25
28564: EQUAL
28565: IFFALSE 28586
// points := [ 80 , 65 , 100 ] ;
28567: LD_ADDR_VAR 0 9
28571: PUSH
28572: LD_INT 80
28574: PUSH
28575: LD_INT 65
28577: PUSH
28578: LD_INT 100
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28586: LD_VAR 0 6
28590: PPUSH
28591: CALL_OW 263
28595: PUSH
28596: LD_INT 1
28598: EQUAL
28599: IFFALSE 28634
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28601: LD_ADDR_VAR 0 10
28605: PUSH
28606: LD_VAR 0 10
28610: PUSH
28611: LD_VAR 0 6
28615: PPUSH
28616: CALL_OW 311
28620: PPUSH
28621: LD_INT 3
28623: PPUSH
28624: CALL_OW 259
28628: PUSH
28629: LD_INT 4
28631: MUL
28632: MUL
28633: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28634: LD_VAR 0 6
28638: PPUSH
28639: CALL_OW 263
28643: PUSH
28644: LD_INT 2
28646: EQUAL
28647: IFFALSE 28698
// begin j := IsControledBy ( i ) ;
28649: LD_ADDR_VAR 0 7
28653: PUSH
28654: LD_VAR 0 6
28658: PPUSH
28659: CALL_OW 312
28663: ST_TO_ADDR
// if j then
28664: LD_VAR 0 7
28668: IFFALSE 28698
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28670: LD_ADDR_VAR 0 10
28674: PUSH
28675: LD_VAR 0 10
28679: PUSH
28680: LD_VAR 0 7
28684: PPUSH
28685: LD_INT 3
28687: PPUSH
28688: CALL_OW 259
28692: PUSH
28693: LD_INT 3
28695: MUL
28696: MUL
28697: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28698: LD_VAR 0 6
28702: PPUSH
28703: CALL_OW 264
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: LD_INT 6
28713: PUSH
28714: LD_INT 46
28716: PUSH
28717: LD_INT 44
28719: PUSH
28720: LD_INT 47
28722: PUSH
28723: LD_INT 45
28725: PUSH
28726: LD_INT 28
28728: PUSH
28729: LD_INT 7
28731: PUSH
28732: LD_INT 27
28734: PUSH
28735: LD_INT 29
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: IN
28750: PUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: LD_INT 52
28758: PPUSH
28759: CALL_OW 321
28763: PUSH
28764: LD_INT 2
28766: EQUAL
28767: AND
28768: IFFALSE 28785
// bpoints := bpoints * 1.2 ;
28770: LD_ADDR_VAR 0 10
28774: PUSH
28775: LD_VAR 0 10
28779: PUSH
28780: LD_REAL  1.20000000000000E+0000
28783: MUL
28784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28785: LD_VAR 0 6
28789: PPUSH
28790: CALL_OW 264
28794: PUSH
28795: LD_INT 6
28797: PUSH
28798: LD_INT 46
28800: PUSH
28801: LD_INT 47
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: IN
28809: IFFALSE 28826
// bpoints := bpoints * 1.2 ;
28811: LD_ADDR_VAR 0 10
28815: PUSH
28816: LD_VAR 0 10
28820: PUSH
28821: LD_REAL  1.20000000000000E+0000
28824: MUL
28825: ST_TO_ADDR
// end ; unit_building :
28826: GO 28840
28828: LD_INT 3
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28839
28836: POP
// ; end ;
28837: GO 28840
28839: POP
// for j = 1 to 3 do
28840: LD_ADDR_VAR 0 7
28844: PUSH
28845: DOUBLE
28846: LD_INT 1
28848: DEC
28849: ST_TO_ADDR
28850: LD_INT 3
28852: PUSH
28853: FOR_TO
28854: IFFALSE 28907
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: LD_VAR 0 5
28865: PPUSH
28866: LD_VAR 0 7
28870: PPUSH
28871: LD_VAR 0 5
28875: PUSH
28876: LD_VAR 0 7
28880: ARRAY
28881: PUSH
28882: LD_VAR 0 9
28886: PUSH
28887: LD_VAR 0 7
28891: ARRAY
28892: PUSH
28893: LD_VAR 0 10
28897: MUL
28898: PLUS
28899: PPUSH
28900: CALL_OW 1
28904: ST_TO_ADDR
28905: GO 28853
28907: POP
28908: POP
// end ;
28909: GO 27388
28911: POP
28912: POP
// result := Replace ( result , 4 , tmp ) ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_VAR 0 5
28922: PPUSH
28923: LD_INT 4
28925: PPUSH
28926: LD_VAR 0 8
28930: PPUSH
28931: CALL_OW 1
28935: ST_TO_ADDR
// end ;
28936: LD_VAR 0 5
28940: RET
// export function DangerAtRange ( unit , range ) ; begin
28941: LD_INT 0
28943: PPUSH
// if not unit then
28944: LD_VAR 0 1
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 28998
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 255
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 250
28977: PPUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: CALL_OW 251
28987: PPUSH
28988: LD_VAR 0 2
28992: PPUSH
28993: CALL 27240 0 4
28997: ST_TO_ADDR
// end ;
28998: LD_VAR 0 3
29002: RET
// export function DangerInArea ( side , area ) ; begin
29003: LD_INT 0
29005: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29006: LD_ADDR_VAR 0 3
29010: PUSH
29011: LD_VAR 0 2
29015: PPUSH
29016: LD_INT 81
29018: PUSH
29019: LD_VAR 0 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 70
29032: ST_TO_ADDR
// end ;
29033: LD_VAR 0 3
29037: RET
// export function IsExtension ( b ) ; begin
29038: LD_INT 0
29040: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_VAR 0 1
29050: PUSH
29051: LD_INT 23
29053: PUSH
29054: LD_INT 20
29056: PUSH
29057: LD_INT 22
29059: PUSH
29060: LD_INT 17
29062: PUSH
29063: LD_INT 24
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 19
29071: PUSH
29072: LD_INT 16
29074: PUSH
29075: LD_INT 25
29077: PUSH
29078: LD_INT 18
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: IN
29093: ST_TO_ADDR
// end ;
29094: LD_VAR 0 2
29098: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29099: LD_INT 0
29101: PPUSH
29102: PPUSH
29103: PPUSH
// result := [ ] ;
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: EMPTY
29110: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: LD_VAR 0 2
29120: PPUSH
29121: LD_INT 21
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PPUSH
29131: CALL_OW 70
29135: ST_TO_ADDR
// if not tmp then
29136: LD_VAR 0 5
29140: NOT
29141: IFFALSE 29145
// exit ;
29143: GO 29209
// if checkLink then
29145: LD_VAR 0 3
29149: IFFALSE 29199
// begin for i in tmp do
29151: LD_ADDR_VAR 0 6
29155: PUSH
29156: LD_VAR 0 5
29160: PUSH
29161: FOR_IN
29162: IFFALSE 29197
// if GetBase ( i ) <> base then
29164: LD_VAR 0 6
29168: PPUSH
29169: CALL_OW 274
29173: PUSH
29174: LD_VAR 0 1
29178: NONEQUAL
29179: IFFALSE 29195
// ComLinkToBase ( base , i ) ;
29181: LD_VAR 0 1
29185: PPUSH
29186: LD_VAR 0 6
29190: PPUSH
29191: CALL_OW 169
29195: GO 29161
29197: POP
29198: POP
// end ; result := tmp ;
29199: LD_ADDR_VAR 0 4
29203: PUSH
29204: LD_VAR 0 5
29208: ST_TO_ADDR
// end ;
29209: LD_VAR 0 4
29213: RET
// export function ComComplete ( units , b ) ; var i ; begin
29214: LD_INT 0
29216: PPUSH
29217: PPUSH
// if not units then
29218: LD_VAR 0 1
29222: NOT
29223: IFFALSE 29227
// exit ;
29225: GO 29317
// for i in units do
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_VAR 0 1
29236: PUSH
29237: FOR_IN
29238: IFFALSE 29315
// if BuildingStatus ( b ) = bs_build then
29240: LD_VAR 0 2
29244: PPUSH
29245: CALL_OW 461
29249: PUSH
29250: LD_INT 1
29252: EQUAL
29253: IFFALSE 29313
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29255: LD_VAR 0 4
29259: PPUSH
29260: LD_STRING h
29262: PUSH
29263: LD_VAR 0 2
29267: PPUSH
29268: CALL_OW 250
29272: PUSH
29273: LD_VAR 0 2
29277: PPUSH
29278: CALL_OW 251
29282: PUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: PPUSH
29309: CALL_OW 446
29313: GO 29237
29315: POP
29316: POP
// end ;
29317: LD_VAR 0 3
29321: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29322: LD_INT 0
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29330: LD_VAR 0 1
29334: NOT
29335: PUSH
29336: LD_VAR 0 1
29340: PPUSH
29341: CALL_OW 263
29345: PUSH
29346: LD_INT 2
29348: NONEQUAL
29349: OR
29350: IFFALSE 29354
// exit ;
29352: GO 29670
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29354: LD_ADDR_VAR 0 6
29358: PUSH
29359: LD_INT 22
29361: PUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 255
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 30
29381: PUSH
29382: LD_INT 36
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 34
29391: PUSH
29392: LD_INT 31
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PPUSH
29408: CALL_OW 69
29412: ST_TO_ADDR
// if not tmp then
29413: LD_VAR 0 6
29417: NOT
29418: IFFALSE 29422
// exit ;
29420: GO 29670
// result := [ ] ;
29422: LD_ADDR_VAR 0 2
29426: PUSH
29427: EMPTY
29428: ST_TO_ADDR
// for i in tmp do
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 6
29438: PUSH
29439: FOR_IN
29440: IFFALSE 29511
// begin t := UnitsInside ( i ) ;
29442: LD_ADDR_VAR 0 4
29446: PUSH
29447: LD_VAR 0 3
29451: PPUSH
29452: CALL_OW 313
29456: ST_TO_ADDR
// if t then
29457: LD_VAR 0 4
29461: IFFALSE 29509
// for j in t do
29463: LD_ADDR_VAR 0 7
29467: PUSH
29468: LD_VAR 0 4
29472: PUSH
29473: FOR_IN
29474: IFFALSE 29507
// result := Replace ( result , result + 1 , j ) ;
29476: LD_ADDR_VAR 0 2
29480: PUSH
29481: LD_VAR 0 2
29485: PPUSH
29486: LD_VAR 0 2
29490: PUSH
29491: LD_INT 1
29493: PLUS
29494: PPUSH
29495: LD_VAR 0 7
29499: PPUSH
29500: CALL_OW 1
29504: ST_TO_ADDR
29505: GO 29473
29507: POP
29508: POP
// end ;
29509: GO 29439
29511: POP
29512: POP
// if not result then
29513: LD_VAR 0 2
29517: NOT
29518: IFFALSE 29522
// exit ;
29520: GO 29670
// mech := result [ 1 ] ;
29522: LD_ADDR_VAR 0 5
29526: PUSH
29527: LD_VAR 0 2
29531: PUSH
29532: LD_INT 1
29534: ARRAY
29535: ST_TO_ADDR
// if result > 1 then
29536: LD_VAR 0 2
29540: PUSH
29541: LD_INT 1
29543: GREATER
29544: IFFALSE 29656
// begin for i = 2 to result do
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: DOUBLE
29552: LD_INT 2
29554: DEC
29555: ST_TO_ADDR
29556: LD_VAR 0 2
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29654
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29564: LD_ADDR_VAR 0 4
29568: PUSH
29569: LD_VAR 0 2
29573: PUSH
29574: LD_VAR 0 3
29578: ARRAY
29579: PPUSH
29580: LD_INT 3
29582: PPUSH
29583: CALL_OW 259
29587: PUSH
29588: LD_VAR 0 2
29592: PUSH
29593: LD_VAR 0 3
29597: ARRAY
29598: PPUSH
29599: CALL_OW 432
29603: MINUS
29604: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29605: LD_VAR 0 4
29609: PUSH
29610: LD_VAR 0 5
29614: PPUSH
29615: LD_INT 3
29617: PPUSH
29618: CALL_OW 259
29622: PUSH
29623: LD_VAR 0 5
29627: PPUSH
29628: CALL_OW 432
29632: MINUS
29633: GREATEREQUAL
29634: IFFALSE 29652
// mech := result [ i ] ;
29636: LD_ADDR_VAR 0 5
29640: PUSH
29641: LD_VAR 0 2
29645: PUSH
29646: LD_VAR 0 3
29650: ARRAY
29651: ST_TO_ADDR
// end ;
29652: GO 29561
29654: POP
29655: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_VAR 0 5
29665: PPUSH
29666: CALL_OW 135
// end ;
29670: LD_VAR 0 2
29674: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
// result := [ ] ;
29690: LD_ADDR_VAR 0 7
29694: PUSH
29695: EMPTY
29696: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29697: LD_VAR 0 1
29701: PPUSH
29702: CALL_OW 266
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: IN
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 31356
// if name then
29722: LD_VAR 0 3
29726: IFFALSE 29742
// SetBName ( base_dep , name ) ;
29728: LD_VAR 0 1
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: CALL_OW 500
// base := GetBase ( base_dep ) ;
29742: LD_ADDR_VAR 0 15
29746: PUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 274
29756: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29757: LD_ADDR_VAR 0 16
29761: PUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL_OW 255
29771: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29772: LD_ADDR_VAR 0 17
29776: PUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 248
29786: ST_TO_ADDR
// if sources then
29787: LD_VAR 0 5
29791: IFFALSE 29838
// for i = 1 to 3 do
29793: LD_ADDR_VAR 0 8
29797: PUSH
29798: DOUBLE
29799: LD_INT 1
29801: DEC
29802: ST_TO_ADDR
29803: LD_INT 3
29805: PUSH
29806: FOR_TO
29807: IFFALSE 29836
// AddResourceType ( base , i , sources [ i ] ) ;
29809: LD_VAR 0 15
29813: PPUSH
29814: LD_VAR 0 8
29818: PPUSH
29819: LD_VAR 0 5
29823: PUSH
29824: LD_VAR 0 8
29828: ARRAY
29829: PPUSH
29830: CALL_OW 276
29834: GO 29806
29836: POP
29837: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29838: LD_ADDR_VAR 0 18
29842: PUSH
29843: LD_VAR 0 15
29847: PPUSH
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_INT 1
29855: PPUSH
29856: CALL 29099 0 3
29860: ST_TO_ADDR
// InitHc ;
29861: CALL_OW 19
// InitUc ;
29865: CALL_OW 18
// uc_side := side ;
29869: LD_ADDR_OWVAR 20
29873: PUSH
29874: LD_VAR 0 16
29878: ST_TO_ADDR
// uc_nation := nation ;
29879: LD_ADDR_OWVAR 21
29883: PUSH
29884: LD_VAR 0 17
29888: ST_TO_ADDR
// if buildings then
29889: LD_VAR 0 18
29893: IFFALSE 31215
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29895: LD_ADDR_VAR 0 19
29899: PUSH
29900: LD_VAR 0 18
29904: PPUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 29
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 30
29920: PUSH
29921: LD_INT 30
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PPUSH
29933: CALL_OW 72
29937: ST_TO_ADDR
// if tmp then
29938: LD_VAR 0 19
29942: IFFALSE 29990
// for i in tmp do
29944: LD_ADDR_VAR 0 8
29948: PUSH
29949: LD_VAR 0 19
29953: PUSH
29954: FOR_IN
29955: IFFALSE 29988
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29957: LD_VAR 0 8
29961: PPUSH
29962: CALL_OW 250
29966: PPUSH
29967: LD_VAR 0 8
29971: PPUSH
29972: CALL_OW 251
29976: PPUSH
29977: LD_VAR 0 16
29981: PPUSH
29982: CALL_OW 441
29986: GO 29954
29988: POP
29989: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29990: LD_VAR 0 18
29994: PPUSH
29995: LD_INT 2
29997: PUSH
29998: LD_INT 30
30000: PUSH
30001: LD_INT 32
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 30
30010: PUSH
30011: LD_INT 33
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: PPUSH
30023: CALL_OW 72
30027: IFFALSE 30115
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30029: LD_ADDR_VAR 0 8
30033: PUSH
30034: LD_VAR 0 18
30038: PPUSH
30039: LD_INT 2
30041: PUSH
30042: LD_INT 30
30044: PUSH
30045: LD_INT 32
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 30
30054: PUSH
30055: LD_INT 33
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: PPUSH
30067: CALL_OW 72
30071: PUSH
30072: FOR_IN
30073: IFFALSE 30113
// begin if not GetBWeapon ( i ) then
30075: LD_VAR 0 8
30079: PPUSH
30080: CALL_OW 269
30084: NOT
30085: IFFALSE 30111
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30087: LD_VAR 0 8
30091: PPUSH
30092: LD_VAR 0 8
30096: PPUSH
30097: LD_VAR 0 2
30101: PPUSH
30102: CALL 31361 0 2
30106: PPUSH
30107: CALL_OW 431
// end ;
30111: GO 30072
30113: POP
30114: POP
// end ; for i = 1 to personel do
30115: LD_ADDR_VAR 0 8
30119: PUSH
30120: DOUBLE
30121: LD_INT 1
30123: DEC
30124: ST_TO_ADDR
30125: LD_VAR 0 6
30129: PUSH
30130: FOR_TO
30131: IFFALSE 31195
// begin if i > 4 then
30133: LD_VAR 0 8
30137: PUSH
30138: LD_INT 4
30140: GREATER
30141: IFFALSE 30145
// break ;
30143: GO 31195
// case i of 1 :
30145: LD_VAR 0 8
30149: PUSH
30150: LD_INT 1
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30238
30158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30159: LD_ADDR_VAR 0 12
30163: PUSH
30164: LD_VAR 0 18
30168: PPUSH
30169: LD_INT 22
30171: PUSH
30172: LD_VAR 0 16
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 58
30183: PUSH
30184: EMPTY
30185: LIST
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 30
30192: PUSH
30193: LD_INT 32
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 30
30202: PUSH
30203: LD_INT 4
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 30
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 72
30235: ST_TO_ADDR
30236: GO 30460
30238: LD_INT 2
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30308
30246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30247: LD_ADDR_VAR 0 12
30251: PUSH
30252: LD_VAR 0 18
30256: PPUSH
30257: LD_INT 22
30259: PUSH
30260: LD_VAR 0 16
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 30
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 30
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PPUSH
30301: CALL_OW 72
30305: ST_TO_ADDR
30306: GO 30460
30308: LD_INT 3
30310: DOUBLE
30311: EQUAL
30312: IFTRUE 30316
30314: GO 30378
30316: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30317: LD_ADDR_VAR 0 12
30321: PUSH
30322: LD_VAR 0 18
30326: PPUSH
30327: LD_INT 22
30329: PUSH
30330: LD_VAR 0 16
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 30
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 30
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PPUSH
30371: CALL_OW 72
30375: ST_TO_ADDR
30376: GO 30460
30378: LD_INT 4
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30459
30386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30387: LD_ADDR_VAR 0 12
30391: PUSH
30392: LD_VAR 0 18
30396: PPUSH
30397: LD_INT 22
30399: PUSH
30400: LD_VAR 0 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: PUSH
30412: LD_INT 30
30414: PUSH
30415: LD_INT 6
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 30
30424: PUSH
30425: LD_INT 7
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 30
30434: PUSH
30435: LD_INT 8
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PPUSH
30452: CALL_OW 72
30456: ST_TO_ADDR
30457: GO 30460
30459: POP
// if i = 1 then
30460: LD_VAR 0 8
30464: PUSH
30465: LD_INT 1
30467: EQUAL
30468: IFFALSE 30579
// begin tmp := [ ] ;
30470: LD_ADDR_VAR 0 19
30474: PUSH
30475: EMPTY
30476: ST_TO_ADDR
// for j in f do
30477: LD_ADDR_VAR 0 9
30481: PUSH
30482: LD_VAR 0 12
30486: PUSH
30487: FOR_IN
30488: IFFALSE 30561
// if GetBType ( j ) = b_bunker then
30490: LD_VAR 0 9
30494: PPUSH
30495: CALL_OW 266
30499: PUSH
30500: LD_INT 32
30502: EQUAL
30503: IFFALSE 30530
// tmp := Insert ( tmp , 1 , j ) else
30505: LD_ADDR_VAR 0 19
30509: PUSH
30510: LD_VAR 0 19
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: LD_VAR 0 9
30522: PPUSH
30523: CALL_OW 2
30527: ST_TO_ADDR
30528: GO 30559
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30530: LD_ADDR_VAR 0 19
30534: PUSH
30535: LD_VAR 0 19
30539: PPUSH
30540: LD_VAR 0 19
30544: PUSH
30545: LD_INT 1
30547: PLUS
30548: PPUSH
30549: LD_VAR 0 9
30553: PPUSH
30554: CALL_OW 2
30558: ST_TO_ADDR
30559: GO 30487
30561: POP
30562: POP
// if tmp then
30563: LD_VAR 0 19
30567: IFFALSE 30579
// f := tmp ;
30569: LD_ADDR_VAR 0 12
30573: PUSH
30574: LD_VAR 0 19
30578: ST_TO_ADDR
// end ; x := personel [ i ] ;
30579: LD_ADDR_VAR 0 13
30583: PUSH
30584: LD_VAR 0 6
30588: PUSH
30589: LD_VAR 0 8
30593: ARRAY
30594: ST_TO_ADDR
// if x = - 1 then
30595: LD_VAR 0 13
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: EQUAL
30604: IFFALSE 30813
// begin for j in f do
30606: LD_ADDR_VAR 0 9
30610: PUSH
30611: LD_VAR 0 12
30615: PUSH
30616: FOR_IN
30617: IFFALSE 30809
// repeat InitHc ;
30619: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30623: LD_VAR 0 9
30627: PPUSH
30628: CALL_OW 266
30632: PUSH
30633: LD_INT 5
30635: EQUAL
30636: IFFALSE 30706
// begin if UnitsInside ( j ) < 3 then
30638: LD_VAR 0 9
30642: PPUSH
30643: CALL_OW 313
30647: PUSH
30648: LD_INT 3
30650: LESS
30651: IFFALSE 30687
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30653: LD_INT 0
30655: PPUSH
30656: LD_INT 5
30658: PUSH
30659: LD_INT 8
30661: PUSH
30662: LD_INT 9
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: PUSH
30670: LD_VAR 0 17
30674: ARRAY
30675: PPUSH
30676: LD_VAR 0 4
30680: PPUSH
30681: CALL_OW 380
30685: GO 30704
// PrepareHuman ( false , i , skill ) ;
30687: LD_INT 0
30689: PPUSH
30690: LD_VAR 0 8
30694: PPUSH
30695: LD_VAR 0 4
30699: PPUSH
30700: CALL_OW 380
// end else
30704: GO 30723
// PrepareHuman ( false , i , skill ) ;
30706: LD_INT 0
30708: PPUSH
30709: LD_VAR 0 8
30713: PPUSH
30714: LD_VAR 0 4
30718: PPUSH
30719: CALL_OW 380
// un := CreateHuman ;
30723: LD_ADDR_VAR 0 14
30727: PUSH
30728: CALL_OW 44
30732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30733: LD_ADDR_VAR 0 7
30737: PUSH
30738: LD_VAR 0 7
30742: PPUSH
30743: LD_INT 1
30745: PPUSH
30746: LD_VAR 0 14
30750: PPUSH
30751: CALL_OW 2
30755: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30756: LD_VAR 0 14
30760: PPUSH
30761: LD_VAR 0 9
30765: PPUSH
30766: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30770: LD_VAR 0 9
30774: PPUSH
30775: CALL_OW 313
30779: PUSH
30780: LD_INT 6
30782: EQUAL
30783: PUSH
30784: LD_VAR 0 9
30788: PPUSH
30789: CALL_OW 266
30793: PUSH
30794: LD_INT 32
30796: PUSH
30797: LD_INT 31
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: IN
30804: OR
30805: IFFALSE 30619
30807: GO 30616
30809: POP
30810: POP
// end else
30811: GO 31193
// for j = 1 to x do
30813: LD_ADDR_VAR 0 9
30817: PUSH
30818: DOUBLE
30819: LD_INT 1
30821: DEC
30822: ST_TO_ADDR
30823: LD_VAR 0 13
30827: PUSH
30828: FOR_TO
30829: IFFALSE 31191
// begin InitHc ;
30831: CALL_OW 19
// if not f then
30835: LD_VAR 0 12
30839: NOT
30840: IFFALSE 30929
// begin PrepareHuman ( false , i , skill ) ;
30842: LD_INT 0
30844: PPUSH
30845: LD_VAR 0 8
30849: PPUSH
30850: LD_VAR 0 4
30854: PPUSH
30855: CALL_OW 380
// un := CreateHuman ;
30859: LD_ADDR_VAR 0 14
30863: PUSH
30864: CALL_OW 44
30868: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30869: LD_ADDR_VAR 0 7
30873: PUSH
30874: LD_VAR 0 7
30878: PPUSH
30879: LD_INT 1
30881: PPUSH
30882: LD_VAR 0 14
30886: PPUSH
30887: CALL_OW 2
30891: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30892: LD_VAR 0 14
30896: PPUSH
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 250
30906: PPUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 251
30916: PPUSH
30917: LD_INT 10
30919: PPUSH
30920: LD_INT 0
30922: PPUSH
30923: CALL_OW 50
// continue ;
30927: GO 30828
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30929: LD_VAR 0 12
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PPUSH
30938: CALL_OW 313
30942: PUSH
30943: LD_VAR 0 12
30947: PUSH
30948: LD_INT 1
30950: ARRAY
30951: PPUSH
30952: CALL_OW 266
30956: PUSH
30957: LD_INT 32
30959: PUSH
30960: LD_INT 31
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: IN
30967: AND
30968: PUSH
30969: LD_VAR 0 12
30973: PUSH
30974: LD_INT 1
30976: ARRAY
30977: PPUSH
30978: CALL_OW 313
30982: PUSH
30983: LD_INT 6
30985: EQUAL
30986: OR
30987: IFFALSE 31007
// f := Delete ( f , 1 ) ;
30989: LD_ADDR_VAR 0 12
30993: PUSH
30994: LD_VAR 0 12
30998: PPUSH
30999: LD_INT 1
31001: PPUSH
31002: CALL_OW 3
31006: ST_TO_ADDR
// if not f then
31007: LD_VAR 0 12
31011: NOT
31012: IFFALSE 31030
// begin x := x + 2 ;
31014: LD_ADDR_VAR 0 13
31018: PUSH
31019: LD_VAR 0 13
31023: PUSH
31024: LD_INT 2
31026: PLUS
31027: ST_TO_ADDR
// continue ;
31028: GO 30828
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31030: LD_VAR 0 12
31034: PUSH
31035: LD_INT 1
31037: ARRAY
31038: PPUSH
31039: CALL_OW 266
31043: PUSH
31044: LD_INT 5
31046: EQUAL
31047: IFFALSE 31121
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31049: LD_VAR 0 12
31053: PUSH
31054: LD_INT 1
31056: ARRAY
31057: PPUSH
31058: CALL_OW 313
31062: PUSH
31063: LD_INT 3
31065: LESS
31066: IFFALSE 31102
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31068: LD_INT 0
31070: PPUSH
31071: LD_INT 5
31073: PUSH
31074: LD_INT 8
31076: PUSH
31077: LD_INT 9
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: PUSH
31085: LD_VAR 0 17
31089: ARRAY
31090: PPUSH
31091: LD_VAR 0 4
31095: PPUSH
31096: CALL_OW 380
31100: GO 31119
// PrepareHuman ( false , i , skill ) ;
31102: LD_INT 0
31104: PPUSH
31105: LD_VAR 0 8
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: CALL_OW 380
// end else
31119: GO 31138
// PrepareHuman ( false , i , skill ) ;
31121: LD_INT 0
31123: PPUSH
31124: LD_VAR 0 8
31128: PPUSH
31129: LD_VAR 0 4
31133: PPUSH
31134: CALL_OW 380
// un := CreateHuman ;
31138: LD_ADDR_VAR 0 14
31142: PUSH
31143: CALL_OW 44
31147: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31148: LD_ADDR_VAR 0 7
31152: PUSH
31153: LD_VAR 0 7
31157: PPUSH
31158: LD_INT 1
31160: PPUSH
31161: LD_VAR 0 14
31165: PPUSH
31166: CALL_OW 2
31170: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31171: LD_VAR 0 14
31175: PPUSH
31176: LD_VAR 0 12
31180: PUSH
31181: LD_INT 1
31183: ARRAY
31184: PPUSH
31185: CALL_OW 52
// end ;
31189: GO 30828
31191: POP
31192: POP
// end ;
31193: GO 30130
31195: POP
31196: POP
// result := result ^ buildings ;
31197: LD_ADDR_VAR 0 7
31201: PUSH
31202: LD_VAR 0 7
31206: PUSH
31207: LD_VAR 0 18
31211: ADD
31212: ST_TO_ADDR
// end else
31213: GO 31356
// begin for i = 1 to personel do
31215: LD_ADDR_VAR 0 8
31219: PUSH
31220: DOUBLE
31221: LD_INT 1
31223: DEC
31224: ST_TO_ADDR
31225: LD_VAR 0 6
31229: PUSH
31230: FOR_TO
31231: IFFALSE 31354
// begin if i > 4 then
31233: LD_VAR 0 8
31237: PUSH
31238: LD_INT 4
31240: GREATER
31241: IFFALSE 31245
// break ;
31243: GO 31354
// x := personel [ i ] ;
31245: LD_ADDR_VAR 0 13
31249: PUSH
31250: LD_VAR 0 6
31254: PUSH
31255: LD_VAR 0 8
31259: ARRAY
31260: ST_TO_ADDR
// if x = - 1 then
31261: LD_VAR 0 13
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: EQUAL
31270: IFFALSE 31274
// continue ;
31272: GO 31230
// PrepareHuman ( false , i , skill ) ;
31274: LD_INT 0
31276: PPUSH
31277: LD_VAR 0 8
31281: PPUSH
31282: LD_VAR 0 4
31286: PPUSH
31287: CALL_OW 380
// un := CreateHuman ;
31291: LD_ADDR_VAR 0 14
31295: PUSH
31296: CALL_OW 44
31300: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31301: LD_VAR 0 14
31305: PPUSH
31306: LD_VAR 0 1
31310: PPUSH
31311: CALL_OW 250
31315: PPUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 251
31325: PPUSH
31326: LD_INT 10
31328: PPUSH
31329: LD_INT 0
31331: PPUSH
31332: CALL_OW 50
// result := result ^ un ;
31336: LD_ADDR_VAR 0 7
31340: PUSH
31341: LD_VAR 0 7
31345: PUSH
31346: LD_VAR 0 14
31350: ADD
31351: ST_TO_ADDR
// end ;
31352: GO 31230
31354: POP
31355: POP
// end ; end ;
31356: LD_VAR 0 7
31360: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31361: LD_INT 0
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
// result := false ;
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: LD_INT 0
31386: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31387: LD_VAR 0 1
31391: NOT
31392: PUSH
31393: LD_VAR 0 1
31397: PPUSH
31398: CALL_OW 266
31402: PUSH
31403: LD_INT 32
31405: PUSH
31406: LD_INT 33
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: IN
31413: NOT
31414: OR
31415: IFFALSE 31419
// exit ;
31417: GO 32528
// nat := GetNation ( tower ) ;
31419: LD_ADDR_VAR 0 12
31423: PUSH
31424: LD_VAR 0 1
31428: PPUSH
31429: CALL_OW 248
31433: ST_TO_ADDR
// side := GetSide ( tower ) ;
31434: LD_ADDR_VAR 0 16
31438: PUSH
31439: LD_VAR 0 1
31443: PPUSH
31444: CALL_OW 255
31448: ST_TO_ADDR
// x := GetX ( tower ) ;
31449: LD_ADDR_VAR 0 10
31453: PUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 250
31463: ST_TO_ADDR
// y := GetY ( tower ) ;
31464: LD_ADDR_VAR 0 11
31468: PUSH
31469: LD_VAR 0 1
31473: PPUSH
31474: CALL_OW 251
31478: ST_TO_ADDR
// if not x or not y then
31479: LD_VAR 0 10
31483: NOT
31484: PUSH
31485: LD_VAR 0 11
31489: NOT
31490: OR
31491: IFFALSE 31495
// exit ;
31493: GO 32528
// weapon := 0 ;
31495: LD_ADDR_VAR 0 18
31499: PUSH
31500: LD_INT 0
31502: ST_TO_ADDR
// fac_list := [ ] ;
31503: LD_ADDR_VAR 0 17
31507: PUSH
31508: EMPTY
31509: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31510: LD_ADDR_VAR 0 6
31514: PUSH
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL_OW 274
31524: PPUSH
31525: LD_VAR 0 2
31529: PPUSH
31530: LD_INT 0
31532: PPUSH
31533: CALL 29099 0 3
31537: PPUSH
31538: LD_INT 30
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PPUSH
31548: CALL_OW 72
31552: ST_TO_ADDR
// if not factories then
31553: LD_VAR 0 6
31557: NOT
31558: IFFALSE 31562
// exit ;
31560: GO 32528
// for i in factories do
31562: LD_ADDR_VAR 0 8
31566: PUSH
31567: LD_VAR 0 6
31571: PUSH
31572: FOR_IN
31573: IFFALSE 31598
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31575: LD_ADDR_VAR 0 17
31579: PUSH
31580: LD_VAR 0 17
31584: PUSH
31585: LD_VAR 0 8
31589: PPUSH
31590: CALL_OW 478
31594: UNION
31595: ST_TO_ADDR
31596: GO 31572
31598: POP
31599: POP
// if not fac_list then
31600: LD_VAR 0 17
31604: NOT
31605: IFFALSE 31609
// exit ;
31607: GO 32528
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31609: LD_ADDR_VAR 0 5
31613: PUSH
31614: LD_INT 4
31616: PUSH
31617: LD_INT 5
31619: PUSH
31620: LD_INT 9
31622: PUSH
31623: LD_INT 10
31625: PUSH
31626: LD_INT 6
31628: PUSH
31629: LD_INT 7
31631: PUSH
31632: LD_INT 11
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 27
31646: PUSH
31647: LD_INT 28
31649: PUSH
31650: LD_INT 26
31652: PUSH
31653: LD_INT 30
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 43
31664: PUSH
31665: LD_INT 44
31667: PUSH
31668: LD_INT 46
31670: PUSH
31671: LD_INT 45
31673: PUSH
31674: LD_INT 47
31676: PUSH
31677: LD_INT 49
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: PUSH
31693: LD_VAR 0 12
31697: ARRAY
31698: ST_TO_ADDR
// list := list isect fac_list ;
31699: LD_ADDR_VAR 0 5
31703: PUSH
31704: LD_VAR 0 5
31708: PUSH
31709: LD_VAR 0 17
31713: ISECT
31714: ST_TO_ADDR
// if not list then
31715: LD_VAR 0 5
31719: NOT
31720: IFFALSE 31724
// exit ;
31722: GO 32528
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31724: LD_VAR 0 12
31728: PUSH
31729: LD_INT 3
31731: EQUAL
31732: PUSH
31733: LD_INT 49
31735: PUSH
31736: LD_VAR 0 5
31740: IN
31741: AND
31742: PUSH
31743: LD_INT 31
31745: PPUSH
31746: LD_VAR 0 16
31750: PPUSH
31751: CALL_OW 321
31755: PUSH
31756: LD_INT 2
31758: EQUAL
31759: AND
31760: IFFALSE 31820
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31762: LD_INT 22
31764: PUSH
31765: LD_VAR 0 16
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 35
31776: PUSH
31777: LD_INT 49
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 91
31786: PUSH
31787: LD_VAR 0 1
31791: PUSH
31792: LD_INT 10
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: PPUSH
31805: CALL_OW 69
31809: NOT
31810: IFFALSE 31820
// weapon := ru_time_lapser ;
31812: LD_ADDR_VAR 0 18
31816: PUSH
31817: LD_INT 49
31819: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31820: LD_VAR 0 12
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: IN
31835: PUSH
31836: LD_INT 11
31838: PUSH
31839: LD_VAR 0 5
31843: IN
31844: PUSH
31845: LD_INT 30
31847: PUSH
31848: LD_VAR 0 5
31852: IN
31853: OR
31854: AND
31855: PUSH
31856: LD_INT 6
31858: PPUSH
31859: LD_VAR 0 16
31863: PPUSH
31864: CALL_OW 321
31868: PUSH
31869: LD_INT 2
31871: EQUAL
31872: AND
31873: IFFALSE 32038
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31875: LD_INT 22
31877: PUSH
31878: LD_VAR 0 16
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 35
31892: PUSH
31893: LD_INT 11
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 35
31902: PUSH
31903: LD_INT 30
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 91
31917: PUSH
31918: LD_VAR 0 1
31922: PUSH
31923: LD_INT 18
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 69
31940: NOT
31941: PUSH
31942: LD_INT 22
31944: PUSH
31945: LD_VAR 0 16
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 30
31959: PUSH
31960: LD_INT 32
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 30
31969: PUSH
31970: LD_INT 33
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 91
31984: PUSH
31985: LD_VAR 0 1
31989: PUSH
31990: LD_INT 12
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: EMPTY
32004: LIST
32005: PPUSH
32006: CALL_OW 69
32010: PUSH
32011: LD_INT 2
32013: GREATER
32014: AND
32015: IFFALSE 32038
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32017: LD_ADDR_VAR 0 18
32021: PUSH
32022: LD_INT 11
32024: PUSH
32025: LD_INT 30
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_VAR 0 12
32036: ARRAY
32037: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32038: LD_VAR 0 18
32042: NOT
32043: PUSH
32044: LD_INT 40
32046: PPUSH
32047: LD_VAR 0 16
32051: PPUSH
32052: CALL_OW 321
32056: PUSH
32057: LD_INT 2
32059: EQUAL
32060: AND
32061: PUSH
32062: LD_INT 7
32064: PUSH
32065: LD_VAR 0 5
32069: IN
32070: PUSH
32071: LD_INT 28
32073: PUSH
32074: LD_VAR 0 5
32078: IN
32079: OR
32080: PUSH
32081: LD_INT 45
32083: PUSH
32084: LD_VAR 0 5
32088: IN
32089: OR
32090: AND
32091: IFFALSE 32345
// begin hex := GetHexInfo ( x , y ) ;
32093: LD_ADDR_VAR 0 4
32097: PUSH
32098: LD_VAR 0 10
32102: PPUSH
32103: LD_VAR 0 11
32107: PPUSH
32108: CALL_OW 546
32112: ST_TO_ADDR
// if hex [ 1 ] then
32113: LD_VAR 0 4
32117: PUSH
32118: LD_INT 1
32120: ARRAY
32121: IFFALSE 32125
// exit ;
32123: GO 32528
// height := hex [ 2 ] ;
32125: LD_ADDR_VAR 0 15
32129: PUSH
32130: LD_VAR 0 4
32134: PUSH
32135: LD_INT 2
32137: ARRAY
32138: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32139: LD_ADDR_VAR 0 14
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: ST_TO_ADDR
// for i in tmp do
32162: LD_ADDR_VAR 0 8
32166: PUSH
32167: LD_VAR 0 14
32171: PUSH
32172: FOR_IN
32173: IFFALSE 32343
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32175: LD_ADDR_VAR 0 9
32179: PUSH
32180: LD_VAR 0 10
32184: PPUSH
32185: LD_VAR 0 8
32189: PPUSH
32190: LD_INT 5
32192: PPUSH
32193: CALL_OW 272
32197: PUSH
32198: LD_VAR 0 11
32202: PPUSH
32203: LD_VAR 0 8
32207: PPUSH
32208: LD_INT 5
32210: PPUSH
32211: CALL_OW 273
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32220: LD_VAR 0 9
32224: PUSH
32225: LD_INT 1
32227: ARRAY
32228: PPUSH
32229: LD_VAR 0 9
32233: PUSH
32234: LD_INT 2
32236: ARRAY
32237: PPUSH
32238: CALL_OW 488
32242: IFFALSE 32341
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: LD_VAR 0 9
32253: PUSH
32254: LD_INT 1
32256: ARRAY
32257: PPUSH
32258: LD_VAR 0 9
32262: PUSH
32263: LD_INT 2
32265: ARRAY
32266: PPUSH
32267: CALL_OW 546
32271: ST_TO_ADDR
// if hex [ 1 ] then
32272: LD_VAR 0 4
32276: PUSH
32277: LD_INT 1
32279: ARRAY
32280: IFFALSE 32284
// continue ;
32282: GO 32172
// h := hex [ 2 ] ;
32284: LD_ADDR_VAR 0 13
32288: PUSH
32289: LD_VAR 0 4
32293: PUSH
32294: LD_INT 2
32296: ARRAY
32297: ST_TO_ADDR
// if h + 7 < height then
32298: LD_VAR 0 13
32302: PUSH
32303: LD_INT 7
32305: PLUS
32306: PUSH
32307: LD_VAR 0 15
32311: LESS
32312: IFFALSE 32341
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32314: LD_ADDR_VAR 0 18
32318: PUSH
32319: LD_INT 7
32321: PUSH
32322: LD_INT 28
32324: PUSH
32325: LD_INT 45
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: PUSH
32333: LD_VAR 0 12
32337: ARRAY
32338: ST_TO_ADDR
// break ;
32339: GO 32343
// end ; end ; end ;
32341: GO 32172
32343: POP
32344: POP
// end ; if not weapon then
32345: LD_VAR 0 18
32349: NOT
32350: IFFALSE 32410
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32352: LD_ADDR_VAR 0 5
32356: PUSH
32357: LD_VAR 0 5
32361: PUSH
32362: LD_INT 11
32364: PUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 49
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: DIFF
32376: ST_TO_ADDR
// if not list then
32377: LD_VAR 0 5
32381: NOT
32382: IFFALSE 32386
// exit ;
32384: GO 32528
// weapon := list [ rand ( 1 , list ) ] ;
32386: LD_ADDR_VAR 0 18
32390: PUSH
32391: LD_VAR 0 5
32395: PUSH
32396: LD_INT 1
32398: PPUSH
32399: LD_VAR 0 5
32403: PPUSH
32404: CALL_OW 12
32408: ARRAY
32409: ST_TO_ADDR
// end ; if weapon then
32410: LD_VAR 0 18
32414: IFFALSE 32528
// begin tmp := CostOfWeapon ( weapon ) ;
32416: LD_ADDR_VAR 0 14
32420: PUSH
32421: LD_VAR 0 18
32425: PPUSH
32426: CALL_OW 451
32430: ST_TO_ADDR
// j := GetBase ( tower ) ;
32431: LD_ADDR_VAR 0 9
32435: PUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 274
32445: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32446: LD_VAR 0 9
32450: PPUSH
32451: LD_INT 1
32453: PPUSH
32454: CALL_OW 275
32458: PUSH
32459: LD_VAR 0 14
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: GREATEREQUAL
32468: PUSH
32469: LD_VAR 0 9
32473: PPUSH
32474: LD_INT 2
32476: PPUSH
32477: CALL_OW 275
32481: PUSH
32482: LD_VAR 0 14
32486: PUSH
32487: LD_INT 2
32489: ARRAY
32490: GREATEREQUAL
32491: AND
32492: PUSH
32493: LD_VAR 0 9
32497: PPUSH
32498: LD_INT 3
32500: PPUSH
32501: CALL_OW 275
32505: PUSH
32506: LD_VAR 0 14
32510: PUSH
32511: LD_INT 3
32513: ARRAY
32514: GREATEREQUAL
32515: AND
32516: IFFALSE 32528
// result := weapon ;
32518: LD_ADDR_VAR 0 3
32522: PUSH
32523: LD_VAR 0 18
32527: ST_TO_ADDR
// end ; end ;
32528: LD_VAR 0 3
32532: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32533: LD_INT 0
32535: PPUSH
32536: PPUSH
// result := true ;
32537: LD_ADDR_VAR 0 3
32541: PUSH
32542: LD_INT 1
32544: ST_TO_ADDR
// if array1 = array2 then
32545: LD_VAR 0 1
32549: PUSH
32550: LD_VAR 0 2
32554: EQUAL
32555: IFFALSE 32615
// begin for i = 1 to array1 do
32557: LD_ADDR_VAR 0 4
32561: PUSH
32562: DOUBLE
32563: LD_INT 1
32565: DEC
32566: ST_TO_ADDR
32567: LD_VAR 0 1
32571: PUSH
32572: FOR_TO
32573: IFFALSE 32611
// if array1 [ i ] <> array2 [ i ] then
32575: LD_VAR 0 1
32579: PUSH
32580: LD_VAR 0 4
32584: ARRAY
32585: PUSH
32586: LD_VAR 0 2
32590: PUSH
32591: LD_VAR 0 4
32595: ARRAY
32596: NONEQUAL
32597: IFFALSE 32609
// begin result := false ;
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_INT 0
32606: ST_TO_ADDR
// break ;
32607: GO 32611
// end ;
32609: GO 32572
32611: POP
32612: POP
// end else
32613: GO 32623
// result := false ;
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 0
32622: ST_TO_ADDR
// end ;
32623: LD_VAR 0 3
32627: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32628: LD_INT 0
32630: PPUSH
32631: PPUSH
// if not array1 or not array2 then
32632: LD_VAR 0 1
32636: NOT
32637: PUSH
32638: LD_VAR 0 2
32642: NOT
32643: OR
32644: IFFALSE 32648
// exit ;
32646: GO 32712
// result := true ;
32648: LD_ADDR_VAR 0 3
32652: PUSH
32653: LD_INT 1
32655: ST_TO_ADDR
// for i = 1 to array1 do
32656: LD_ADDR_VAR 0 4
32660: PUSH
32661: DOUBLE
32662: LD_INT 1
32664: DEC
32665: ST_TO_ADDR
32666: LD_VAR 0 1
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32710
// if array1 [ i ] <> array2 [ i ] then
32674: LD_VAR 0 1
32678: PUSH
32679: LD_VAR 0 4
32683: ARRAY
32684: PUSH
32685: LD_VAR 0 2
32689: PUSH
32690: LD_VAR 0 4
32694: ARRAY
32695: NONEQUAL
32696: IFFALSE 32708
// begin result := false ;
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 0
32705: ST_TO_ADDR
// break ;
32706: GO 32710
// end ;
32708: GO 32671
32710: POP
32711: POP
// end ;
32712: LD_VAR 0 3
32716: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32717: LD_INT 0
32719: PPUSH
32720: PPUSH
32721: PPUSH
// pom := GetBase ( fac ) ;
32722: LD_ADDR_VAR 0 5
32726: PUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 274
32736: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_VAR 0 2
32746: PUSH
32747: LD_INT 1
32749: ARRAY
32750: PPUSH
32751: LD_VAR 0 2
32755: PUSH
32756: LD_INT 2
32758: ARRAY
32759: PPUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_INT 3
32767: ARRAY
32768: PPUSH
32769: LD_VAR 0 2
32773: PUSH
32774: LD_INT 4
32776: ARRAY
32777: PPUSH
32778: CALL_OW 449
32782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_VAR 0 5
32792: PPUSH
32793: LD_INT 1
32795: PPUSH
32796: CALL_OW 275
32800: PUSH
32801: LD_VAR 0 4
32805: PUSH
32806: LD_INT 1
32808: ARRAY
32809: GREATEREQUAL
32810: PUSH
32811: LD_VAR 0 5
32815: PPUSH
32816: LD_INT 2
32818: PPUSH
32819: CALL_OW 275
32823: PUSH
32824: LD_VAR 0 4
32828: PUSH
32829: LD_INT 2
32831: ARRAY
32832: GREATEREQUAL
32833: AND
32834: PUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: LD_INT 3
32842: PPUSH
32843: CALL_OW 275
32847: PUSH
32848: LD_VAR 0 4
32852: PUSH
32853: LD_INT 3
32855: ARRAY
32856: GREATEREQUAL
32857: AND
32858: ST_TO_ADDR
// end ;
32859: LD_VAR 0 3
32863: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32864: LD_INT 0
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
// pom := GetBase ( building ) ;
32870: LD_ADDR_VAR 0 3
32874: PUSH
32875: LD_VAR 0 1
32879: PPUSH
32880: CALL_OW 274
32884: ST_TO_ADDR
// if not pom then
32885: LD_VAR 0 3
32889: NOT
32890: IFFALSE 32894
// exit ;
32892: GO 33064
// btype := GetBType ( building ) ;
32894: LD_ADDR_VAR 0 5
32898: PUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 266
32908: ST_TO_ADDR
// if btype = b_armoury then
32909: LD_VAR 0 5
32913: PUSH
32914: LD_INT 4
32916: EQUAL
32917: IFFALSE 32927
// btype := b_barracks ;
32919: LD_ADDR_VAR 0 5
32923: PUSH
32924: LD_INT 5
32926: ST_TO_ADDR
// if btype = b_depot then
32927: LD_VAR 0 5
32931: PUSH
32932: LD_INT 0
32934: EQUAL
32935: IFFALSE 32945
// btype := b_warehouse ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: LD_INT 1
32944: ST_TO_ADDR
// if btype = b_workshop then
32945: LD_VAR 0 5
32949: PUSH
32950: LD_INT 2
32952: EQUAL
32953: IFFALSE 32963
// btype := b_factory ;
32955: LD_ADDR_VAR 0 5
32959: PUSH
32960: LD_INT 3
32962: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32963: LD_ADDR_VAR 0 4
32967: PUSH
32968: LD_VAR 0 5
32972: PPUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 248
32982: PPUSH
32983: CALL_OW 450
32987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32988: LD_ADDR_VAR 0 2
32992: PUSH
32993: LD_VAR 0 3
32997: PPUSH
32998: LD_INT 1
33000: PPUSH
33001: CALL_OW 275
33005: PUSH
33006: LD_VAR 0 4
33010: PUSH
33011: LD_INT 1
33013: ARRAY
33014: GREATEREQUAL
33015: PUSH
33016: LD_VAR 0 3
33020: PPUSH
33021: LD_INT 2
33023: PPUSH
33024: CALL_OW 275
33028: PUSH
33029: LD_VAR 0 4
33033: PUSH
33034: LD_INT 2
33036: ARRAY
33037: GREATEREQUAL
33038: AND
33039: PUSH
33040: LD_VAR 0 3
33044: PPUSH
33045: LD_INT 3
33047: PPUSH
33048: CALL_OW 275
33052: PUSH
33053: LD_VAR 0 4
33057: PUSH
33058: LD_INT 3
33060: ARRAY
33061: GREATEREQUAL
33062: AND
33063: ST_TO_ADDR
// end ;
33064: LD_VAR 0 2
33068: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33069: LD_INT 0
33071: PPUSH
33072: PPUSH
33073: PPUSH
// pom := GetBase ( building ) ;
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: LD_VAR 0 1
33083: PPUSH
33084: CALL_OW 274
33088: ST_TO_ADDR
// if not pom then
33089: LD_VAR 0 4
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33199
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33098: LD_ADDR_VAR 0 5
33102: PUSH
33103: LD_VAR 0 2
33107: PPUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 248
33117: PPUSH
33118: CALL_OW 450
33122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33123: LD_ADDR_VAR 0 3
33127: PUSH
33128: LD_VAR 0 4
33132: PPUSH
33133: LD_INT 1
33135: PPUSH
33136: CALL_OW 275
33140: PUSH
33141: LD_VAR 0 5
33145: PUSH
33146: LD_INT 1
33148: ARRAY
33149: GREATEREQUAL
33150: PUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: LD_INT 2
33158: PPUSH
33159: CALL_OW 275
33163: PUSH
33164: LD_VAR 0 5
33168: PUSH
33169: LD_INT 2
33171: ARRAY
33172: GREATEREQUAL
33173: AND
33174: PUSH
33175: LD_VAR 0 4
33179: PPUSH
33180: LD_INT 3
33182: PPUSH
33183: CALL_OW 275
33187: PUSH
33188: LD_VAR 0 5
33192: PUSH
33193: LD_INT 3
33195: ARRAY
33196: GREATEREQUAL
33197: AND
33198: ST_TO_ADDR
// end ;
33199: LD_VAR 0 3
33203: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
33216: PPUSH
// result := false ;
33217: LD_ADDR_VAR 0 8
33221: PUSH
33222: LD_INT 0
33224: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33225: LD_VAR 0 5
33229: NOT
33230: PUSH
33231: LD_VAR 0 1
33235: NOT
33236: OR
33237: PUSH
33238: LD_VAR 0 2
33242: NOT
33243: OR
33244: PUSH
33245: LD_VAR 0 3
33249: NOT
33250: OR
33251: IFFALSE 33255
// exit ;
33253: GO 34069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33255: LD_ADDR_VAR 0 14
33259: PUSH
33260: LD_VAR 0 1
33264: PPUSH
33265: LD_VAR 0 2
33269: PPUSH
33270: LD_VAR 0 3
33274: PPUSH
33275: LD_VAR 0 4
33279: PPUSH
33280: LD_VAR 0 5
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: CALL_OW 248
33293: PPUSH
33294: LD_INT 0
33296: PPUSH
33297: CALL 35322 0 6
33301: ST_TO_ADDR
// if not hexes then
33302: LD_VAR 0 14
33306: NOT
33307: IFFALSE 33311
// exit ;
33309: GO 34069
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33311: LD_ADDR_VAR 0 17
33315: PUSH
33316: LD_VAR 0 5
33320: PPUSH
33321: LD_INT 22
33323: PUSH
33324: LD_VAR 0 13
33328: PPUSH
33329: CALL_OW 255
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 30
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 30
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PPUSH
33370: CALL_OW 72
33374: ST_TO_ADDR
// for i = 1 to hexes do
33375: LD_ADDR_VAR 0 9
33379: PUSH
33380: DOUBLE
33381: LD_INT 1
33383: DEC
33384: ST_TO_ADDR
33385: LD_VAR 0 14
33389: PUSH
33390: FOR_TO
33391: IFFALSE 34067
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33393: LD_ADDR_VAR 0 13
33397: PUSH
33398: LD_VAR 0 14
33402: PUSH
33403: LD_VAR 0 9
33407: ARRAY
33408: PUSH
33409: LD_INT 1
33411: ARRAY
33412: PPUSH
33413: LD_VAR 0 14
33417: PUSH
33418: LD_VAR 0 9
33422: ARRAY
33423: PUSH
33424: LD_INT 2
33426: ARRAY
33427: PPUSH
33428: CALL_OW 428
33432: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33433: LD_VAR 0 14
33437: PUSH
33438: LD_VAR 0 9
33442: ARRAY
33443: PUSH
33444: LD_INT 1
33446: ARRAY
33447: PPUSH
33448: LD_VAR 0 14
33452: PUSH
33453: LD_VAR 0 9
33457: ARRAY
33458: PUSH
33459: LD_INT 2
33461: ARRAY
33462: PPUSH
33463: CALL_OW 351
33467: PUSH
33468: LD_VAR 0 14
33472: PUSH
33473: LD_VAR 0 9
33477: ARRAY
33478: PUSH
33479: LD_INT 1
33481: ARRAY
33482: PPUSH
33483: LD_VAR 0 14
33487: PUSH
33488: LD_VAR 0 9
33492: ARRAY
33493: PUSH
33494: LD_INT 2
33496: ARRAY
33497: PPUSH
33498: CALL_OW 488
33502: NOT
33503: OR
33504: PUSH
33505: LD_VAR 0 13
33509: PPUSH
33510: CALL_OW 247
33514: PUSH
33515: LD_INT 3
33517: EQUAL
33518: OR
33519: IFFALSE 33525
// exit ;
33521: POP
33522: POP
33523: GO 34069
// if not tmp then
33525: LD_VAR 0 13
33529: NOT
33530: IFFALSE 33534
// continue ;
33532: GO 33390
// result := true ;
33534: LD_ADDR_VAR 0 8
33538: PUSH
33539: LD_INT 1
33541: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33542: LD_VAR 0 6
33546: PUSH
33547: LD_VAR 0 13
33551: PPUSH
33552: CALL_OW 247
33556: PUSH
33557: LD_INT 2
33559: EQUAL
33560: AND
33561: PUSH
33562: LD_VAR 0 13
33566: PPUSH
33567: CALL_OW 263
33571: PUSH
33572: LD_INT 1
33574: EQUAL
33575: AND
33576: IFFALSE 33740
// begin if IsDrivenBy ( tmp ) then
33578: LD_VAR 0 13
33582: PPUSH
33583: CALL_OW 311
33587: IFFALSE 33591
// continue ;
33589: GO 33390
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33591: LD_VAR 0 6
33595: PPUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 60
33601: PUSH
33602: EMPTY
33603: LIST
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 55
33614: PUSH
33615: EMPTY
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PPUSH
33626: CALL_OW 72
33630: IFFALSE 33738
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33632: LD_ADDR_VAR 0 18
33636: PUSH
33637: LD_VAR 0 6
33641: PPUSH
33642: LD_INT 3
33644: PUSH
33645: LD_INT 60
33647: PUSH
33648: EMPTY
33649: LIST
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 55
33660: PUSH
33661: EMPTY
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PPUSH
33672: CALL_OW 72
33676: PUSH
33677: LD_INT 1
33679: ARRAY
33680: ST_TO_ADDR
// if IsInUnit ( driver ) then
33681: LD_VAR 0 18
33685: PPUSH
33686: CALL_OW 310
33690: IFFALSE 33701
// ComExit ( driver ) ;
33692: LD_VAR 0 18
33696: PPUSH
33697: CALL 59103 0 1
// AddComEnterUnit ( driver , tmp ) ;
33701: LD_VAR 0 18
33705: PPUSH
33706: LD_VAR 0 13
33710: PPUSH
33711: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33715: LD_VAR 0 18
33719: PPUSH
33720: LD_VAR 0 7
33724: PPUSH
33725: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33729: LD_VAR 0 18
33733: PPUSH
33734: CALL_OW 181
// end ; continue ;
33738: GO 33390
// end ; if not cleaners or not tmp in cleaners then
33740: LD_VAR 0 6
33744: NOT
33745: PUSH
33746: LD_VAR 0 13
33750: PUSH
33751: LD_VAR 0 6
33755: IN
33756: NOT
33757: OR
33758: IFFALSE 34065
// begin if dep then
33760: LD_VAR 0 17
33764: IFFALSE 33900
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33766: LD_ADDR_VAR 0 16
33770: PUSH
33771: LD_VAR 0 17
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PPUSH
33780: CALL_OW 250
33784: PPUSH
33785: LD_VAR 0 17
33789: PUSH
33790: LD_INT 1
33792: ARRAY
33793: PPUSH
33794: CALL_OW 254
33798: PPUSH
33799: LD_INT 5
33801: PPUSH
33802: CALL_OW 272
33806: PUSH
33807: LD_VAR 0 17
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: PPUSH
33816: CALL_OW 251
33820: PPUSH
33821: LD_VAR 0 17
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PPUSH
33830: CALL_OW 254
33834: PPUSH
33835: LD_INT 5
33837: PPUSH
33838: CALL_OW 273
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33847: LD_VAR 0 16
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: PPUSH
33856: LD_VAR 0 16
33860: PUSH
33861: LD_INT 2
33863: ARRAY
33864: PPUSH
33865: CALL_OW 488
33869: IFFALSE 33900
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33871: LD_VAR 0 13
33875: PPUSH
33876: LD_VAR 0 16
33880: PUSH
33881: LD_INT 1
33883: ARRAY
33884: PPUSH
33885: LD_VAR 0 16
33889: PUSH
33890: LD_INT 2
33892: ARRAY
33893: PPUSH
33894: CALL_OW 111
// continue ;
33898: GO 33390
// end ; end ; r := GetDir ( tmp ) ;
33900: LD_ADDR_VAR 0 15
33904: PUSH
33905: LD_VAR 0 13
33909: PPUSH
33910: CALL_OW 254
33914: ST_TO_ADDR
// if r = 5 then
33915: LD_VAR 0 15
33919: PUSH
33920: LD_INT 5
33922: EQUAL
33923: IFFALSE 33933
// r := 0 ;
33925: LD_ADDR_VAR 0 15
33929: PUSH
33930: LD_INT 0
33932: ST_TO_ADDR
// for j = r to 5 do
33933: LD_ADDR_VAR 0 10
33937: PUSH
33938: DOUBLE
33939: LD_VAR 0 15
33943: DEC
33944: ST_TO_ADDR
33945: LD_INT 5
33947: PUSH
33948: FOR_TO
33949: IFFALSE 34063
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33951: LD_ADDR_VAR 0 11
33955: PUSH
33956: LD_VAR 0 13
33960: PPUSH
33961: CALL_OW 250
33965: PPUSH
33966: LD_VAR 0 10
33970: PPUSH
33971: LD_INT 2
33973: PPUSH
33974: CALL_OW 272
33978: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33979: LD_ADDR_VAR 0 12
33983: PUSH
33984: LD_VAR 0 13
33988: PPUSH
33989: CALL_OW 251
33993: PPUSH
33994: LD_VAR 0 10
33998: PPUSH
33999: LD_INT 2
34001: PPUSH
34002: CALL_OW 273
34006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34007: LD_VAR 0 11
34011: PPUSH
34012: LD_VAR 0 12
34016: PPUSH
34017: CALL_OW 488
34021: PUSH
34022: LD_VAR 0 11
34026: PPUSH
34027: LD_VAR 0 12
34031: PPUSH
34032: CALL_OW 428
34036: NOT
34037: AND
34038: IFFALSE 34061
// begin ComMoveXY ( tmp , _x , _y ) ;
34040: LD_VAR 0 13
34044: PPUSH
34045: LD_VAR 0 11
34049: PPUSH
34050: LD_VAR 0 12
34054: PPUSH
34055: CALL_OW 111
// break ;
34059: GO 34063
// end ; end ;
34061: GO 33948
34063: POP
34064: POP
// end ; end ;
34065: GO 33390
34067: POP
34068: POP
// end ;
34069: LD_VAR 0 8
34073: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34074: LD_INT 0
34076: PPUSH
// result := true ;
34077: LD_ADDR_VAR 0 3
34081: PUSH
34082: LD_INT 1
34084: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34085: LD_VAR 0 2
34089: PUSH
34090: LD_INT 24
34092: DOUBLE
34093: EQUAL
34094: IFTRUE 34104
34096: LD_INT 33
34098: DOUBLE
34099: EQUAL
34100: IFTRUE 34104
34102: GO 34129
34104: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34105: LD_ADDR_VAR 0 3
34109: PUSH
34110: LD_INT 32
34112: PPUSH
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 321
34122: PUSH
34123: LD_INT 2
34125: EQUAL
34126: ST_TO_ADDR
34127: GO 34445
34129: LD_INT 20
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34137
34135: GO 34162
34137: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: LD_INT 6
34145: PPUSH
34146: LD_VAR 0 1
34150: PPUSH
34151: CALL_OW 321
34155: PUSH
34156: LD_INT 2
34158: EQUAL
34159: ST_TO_ADDR
34160: GO 34445
34162: LD_INT 22
34164: DOUBLE
34165: EQUAL
34166: IFTRUE 34176
34168: LD_INT 36
34170: DOUBLE
34171: EQUAL
34172: IFTRUE 34176
34174: GO 34201
34176: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34177: LD_ADDR_VAR 0 3
34181: PUSH
34182: LD_INT 15
34184: PPUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 321
34194: PUSH
34195: LD_INT 2
34197: EQUAL
34198: ST_TO_ADDR
34199: GO 34445
34201: LD_INT 30
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34209
34207: GO 34234
34209: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34210: LD_ADDR_VAR 0 3
34214: PUSH
34215: LD_INT 20
34217: PPUSH
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 321
34227: PUSH
34228: LD_INT 2
34230: EQUAL
34231: ST_TO_ADDR
34232: GO 34445
34234: LD_INT 28
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34248
34240: LD_INT 21
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34248
34246: GO 34273
34248: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34249: LD_ADDR_VAR 0 3
34253: PUSH
34254: LD_INT 21
34256: PPUSH
34257: LD_VAR 0 1
34261: PPUSH
34262: CALL_OW 321
34266: PUSH
34267: LD_INT 2
34269: EQUAL
34270: ST_TO_ADDR
34271: GO 34445
34273: LD_INT 16
34275: DOUBLE
34276: EQUAL
34277: IFTRUE 34281
34279: GO 34306
34281: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34282: LD_ADDR_VAR 0 3
34286: PUSH
34287: LD_INT 84
34289: PPUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 321
34299: PUSH
34300: LD_INT 2
34302: EQUAL
34303: ST_TO_ADDR
34304: GO 34445
34306: LD_INT 19
34308: DOUBLE
34309: EQUAL
34310: IFTRUE 34320
34312: LD_INT 23
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34345
34320: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34321: LD_ADDR_VAR 0 3
34325: PUSH
34326: LD_INT 83
34328: PPUSH
34329: LD_VAR 0 1
34333: PPUSH
34334: CALL_OW 321
34338: PUSH
34339: LD_INT 2
34341: EQUAL
34342: ST_TO_ADDR
34343: GO 34445
34345: LD_INT 17
34347: DOUBLE
34348: EQUAL
34349: IFTRUE 34353
34351: GO 34378
34353: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 39
34361: PPUSH
34362: LD_VAR 0 1
34366: PPUSH
34367: CALL_OW 321
34371: PUSH
34372: LD_INT 2
34374: EQUAL
34375: ST_TO_ADDR
34376: GO 34445
34378: LD_INT 18
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34411
34386: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_INT 40
34394: PPUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: CALL_OW 321
34404: PUSH
34405: LD_INT 2
34407: EQUAL
34408: ST_TO_ADDR
34409: GO 34445
34411: LD_INT 27
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34419
34417: GO 34444
34419: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 35
34427: PPUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 321
34437: PUSH
34438: LD_INT 2
34440: EQUAL
34441: ST_TO_ADDR
34442: GO 34445
34444: POP
// end ;
34445: LD_VAR 0 3
34449: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34450: LD_INT 0
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
// result := false ;
34463: LD_ADDR_VAR 0 6
34467: PUSH
34468: LD_INT 0
34470: ST_TO_ADDR
// if btype = b_depot then
34471: LD_VAR 0 2
34475: PUSH
34476: LD_INT 0
34478: EQUAL
34479: IFFALSE 34491
// begin result := true ;
34481: LD_ADDR_VAR 0 6
34485: PUSH
34486: LD_INT 1
34488: ST_TO_ADDR
// exit ;
34489: GO 35317
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34491: LD_VAR 0 1
34495: NOT
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 266
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: IN
34517: NOT
34518: OR
34519: PUSH
34520: LD_VAR 0 2
34524: NOT
34525: OR
34526: PUSH
34527: LD_VAR 0 5
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: IN
34558: NOT
34559: OR
34560: PUSH
34561: LD_VAR 0 3
34565: PPUSH
34566: LD_VAR 0 4
34570: PPUSH
34571: CALL_OW 488
34575: NOT
34576: OR
34577: IFFALSE 34581
// exit ;
34579: GO 35317
// side := GetSide ( depot ) ;
34581: LD_ADDR_VAR 0 9
34585: PUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 255
34595: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34596: LD_VAR 0 9
34600: PPUSH
34601: LD_VAR 0 2
34605: PPUSH
34606: CALL 34074 0 2
34610: NOT
34611: IFFALSE 34615
// exit ;
34613: GO 35317
// pom := GetBase ( depot ) ;
34615: LD_ADDR_VAR 0 10
34619: PUSH
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 274
34629: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34630: LD_ADDR_VAR 0 11
34634: PUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 248
34649: PPUSH
34650: CALL_OW 450
34654: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34655: LD_VAR 0 10
34659: PPUSH
34660: LD_INT 1
34662: PPUSH
34663: CALL_OW 275
34667: PUSH
34668: LD_VAR 0 11
34672: PUSH
34673: LD_INT 1
34675: ARRAY
34676: GREATEREQUAL
34677: PUSH
34678: LD_VAR 0 10
34682: PPUSH
34683: LD_INT 2
34685: PPUSH
34686: CALL_OW 275
34690: PUSH
34691: LD_VAR 0 11
34695: PUSH
34696: LD_INT 2
34698: ARRAY
34699: GREATEREQUAL
34700: AND
34701: PUSH
34702: LD_VAR 0 10
34706: PPUSH
34707: LD_INT 3
34709: PPUSH
34710: CALL_OW 275
34714: PUSH
34715: LD_VAR 0 11
34719: PUSH
34720: LD_INT 3
34722: ARRAY
34723: GREATEREQUAL
34724: AND
34725: NOT
34726: IFFALSE 34730
// exit ;
34728: GO 35317
// if GetBType ( depot ) = b_depot then
34730: LD_VAR 0 1
34734: PPUSH
34735: CALL_OW 266
34739: PUSH
34740: LD_INT 0
34742: EQUAL
34743: IFFALSE 34755
// dist := 28 else
34745: LD_ADDR_VAR 0 14
34749: PUSH
34750: LD_INT 28
34752: ST_TO_ADDR
34753: GO 34763
// dist := 36 ;
34755: LD_ADDR_VAR 0 14
34759: PUSH
34760: LD_INT 36
34762: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 3
34772: PPUSH
34773: LD_VAR 0 4
34777: PPUSH
34778: CALL_OW 297
34782: PUSH
34783: LD_VAR 0 14
34787: GREATER
34788: IFFALSE 34792
// exit ;
34790: GO 35317
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34792: LD_ADDR_VAR 0 12
34796: PUSH
34797: LD_VAR 0 2
34801: PPUSH
34802: LD_VAR 0 3
34806: PPUSH
34807: LD_VAR 0 4
34811: PPUSH
34812: LD_VAR 0 5
34816: PPUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 248
34826: PPUSH
34827: LD_INT 0
34829: PPUSH
34830: CALL 35322 0 6
34834: ST_TO_ADDR
// if not hexes then
34835: LD_VAR 0 12
34839: NOT
34840: IFFALSE 34844
// exit ;
34842: GO 35317
// hex := GetHexInfo ( x , y ) ;
34844: LD_ADDR_VAR 0 15
34848: PUSH
34849: LD_VAR 0 3
34853: PPUSH
34854: LD_VAR 0 4
34858: PPUSH
34859: CALL_OW 546
34863: ST_TO_ADDR
// if hex [ 1 ] then
34864: LD_VAR 0 15
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: IFFALSE 34876
// exit ;
34874: GO 35317
// height := hex [ 2 ] ;
34876: LD_ADDR_VAR 0 13
34880: PUSH
34881: LD_VAR 0 15
34885: PUSH
34886: LD_INT 2
34888: ARRAY
34889: ST_TO_ADDR
// for i = 1 to hexes do
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 12
34904: PUSH
34905: FOR_TO
34906: IFFALSE 35236
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34908: LD_VAR 0 12
34912: PUSH
34913: LD_VAR 0 7
34917: ARRAY
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: LD_VAR 0 12
34927: PUSH
34928: LD_VAR 0 7
34932: ARRAY
34933: PUSH
34934: LD_INT 2
34936: ARRAY
34937: PPUSH
34938: CALL_OW 488
34942: NOT
34943: PUSH
34944: LD_VAR 0 12
34948: PUSH
34949: LD_VAR 0 7
34953: ARRAY
34954: PUSH
34955: LD_INT 1
34957: ARRAY
34958: PPUSH
34959: LD_VAR 0 12
34963: PUSH
34964: LD_VAR 0 7
34968: ARRAY
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: PPUSH
34974: CALL_OW 428
34978: PUSH
34979: LD_INT 0
34981: GREATER
34982: OR
34983: PUSH
34984: LD_VAR 0 12
34988: PUSH
34989: LD_VAR 0 7
34993: ARRAY
34994: PUSH
34995: LD_INT 1
34997: ARRAY
34998: PPUSH
34999: LD_VAR 0 12
35003: PUSH
35004: LD_VAR 0 7
35008: ARRAY
35009: PUSH
35010: LD_INT 2
35012: ARRAY
35013: PPUSH
35014: CALL_OW 351
35018: OR
35019: IFFALSE 35025
// exit ;
35021: POP
35022: POP
35023: GO 35317
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35025: LD_ADDR_VAR 0 8
35029: PUSH
35030: LD_VAR 0 12
35034: PUSH
35035: LD_VAR 0 7
35039: ARRAY
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PPUSH
35045: LD_VAR 0 12
35049: PUSH
35050: LD_VAR 0 7
35054: ARRAY
35055: PUSH
35056: LD_INT 2
35058: ARRAY
35059: PPUSH
35060: CALL_OW 546
35064: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35065: LD_VAR 0 8
35069: PUSH
35070: LD_INT 1
35072: ARRAY
35073: PUSH
35074: LD_VAR 0 8
35078: PUSH
35079: LD_INT 2
35081: ARRAY
35082: PUSH
35083: LD_VAR 0 13
35087: PUSH
35088: LD_INT 2
35090: PLUS
35091: GREATER
35092: OR
35093: PUSH
35094: LD_VAR 0 8
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: PUSH
35103: LD_VAR 0 13
35107: PUSH
35108: LD_INT 2
35110: MINUS
35111: LESS
35112: OR
35113: PUSH
35114: LD_VAR 0 8
35118: PUSH
35119: LD_INT 3
35121: ARRAY
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 8
35128: PUSH
35129: LD_INT 9
35131: PUSH
35132: LD_INT 10
35134: PUSH
35135: LD_INT 11
35137: PUSH
35138: LD_INT 12
35140: PUSH
35141: LD_INT 13
35143: PUSH
35144: LD_INT 16
35146: PUSH
35147: LD_INT 17
35149: PUSH
35150: LD_INT 18
35152: PUSH
35153: LD_INT 19
35155: PUSH
35156: LD_INT 20
35158: PUSH
35159: LD_INT 21
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: IN
35177: NOT
35178: OR
35179: PUSH
35180: LD_VAR 0 8
35184: PUSH
35185: LD_INT 5
35187: ARRAY
35188: NOT
35189: OR
35190: PUSH
35191: LD_VAR 0 8
35195: PUSH
35196: LD_INT 6
35198: ARRAY
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: LD_INT 7
35208: PUSH
35209: LD_INT 9
35211: PUSH
35212: LD_INT 10
35214: PUSH
35215: LD_INT 11
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: IN
35226: NOT
35227: OR
35228: IFFALSE 35234
// exit ;
35230: POP
35231: POP
35232: GO 35317
// end ;
35234: GO 34905
35236: POP
35237: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35238: LD_VAR 0 9
35242: PPUSH
35243: LD_VAR 0 3
35247: PPUSH
35248: LD_VAR 0 4
35252: PPUSH
35253: LD_INT 20
35255: PPUSH
35256: CALL 27240 0 4
35260: PUSH
35261: LD_INT 4
35263: ARRAY
35264: IFFALSE 35268
// exit ;
35266: GO 35317
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35268: LD_VAR 0 2
35272: PUSH
35273: LD_INT 29
35275: PUSH
35276: LD_INT 30
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: IN
35283: PUSH
35284: LD_VAR 0 3
35288: PPUSH
35289: LD_VAR 0 4
35293: PPUSH
35294: LD_VAR 0 9
35298: PPUSH
35299: CALL_OW 440
35303: NOT
35304: AND
35305: IFFALSE 35309
// exit ;
35307: GO 35317
// result := true ;
35309: LD_ADDR_VAR 0 6
35313: PUSH
35314: LD_INT 1
35316: ST_TO_ADDR
// end ;
35317: LD_VAR 0 6
35321: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35322: LD_INT 0
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
// result = [ ] ;
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: EMPTY
35388: ST_TO_ADDR
// temp_list = [ ] ;
35389: LD_ADDR_VAR 0 9
35393: PUSH
35394: EMPTY
35395: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35396: LD_VAR 0 4
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: LD_INT 4
35415: PUSH
35416: LD_INT 5
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: IN
35427: NOT
35428: PUSH
35429: LD_VAR 0 1
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: IN
35444: PUSH
35445: LD_VAR 0 5
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: IN
35464: NOT
35465: AND
35466: OR
35467: IFFALSE 35471
// exit ;
35469: GO 53862
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35471: LD_VAR 0 1
35475: PUSH
35476: LD_INT 6
35478: PUSH
35479: LD_INT 7
35481: PUSH
35482: LD_INT 8
35484: PUSH
35485: LD_INT 13
35487: PUSH
35488: LD_INT 12
35490: PUSH
35491: LD_INT 15
35493: PUSH
35494: LD_INT 11
35496: PUSH
35497: LD_INT 14
35499: PUSH
35500: LD_INT 10
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: IN
35514: IFFALSE 35524
// btype = b_lab ;
35516: LD_ADDR_VAR 0 1
35520: PUSH
35521: LD_INT 6
35523: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35524: LD_VAR 0 6
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: IN
35543: NOT
35544: PUSH
35545: LD_VAR 0 1
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: LD_INT 6
35564: PUSH
35565: LD_INT 36
35567: PUSH
35568: LD_INT 4
35570: PUSH
35571: LD_INT 5
35573: PUSH
35574: LD_INT 31
35576: PUSH
35577: LD_INT 32
35579: PUSH
35580: LD_INT 33
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: IN
35596: NOT
35597: PUSH
35598: LD_VAR 0 6
35602: PUSH
35603: LD_INT 1
35605: EQUAL
35606: AND
35607: OR
35608: PUSH
35609: LD_VAR 0 1
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 3
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: IN
35624: NOT
35625: PUSH
35626: LD_VAR 0 6
35630: PUSH
35631: LD_INT 2
35633: EQUAL
35634: AND
35635: OR
35636: IFFALSE 35646
// mode = 0 ;
35638: LD_ADDR_VAR 0 6
35642: PUSH
35643: LD_INT 0
35645: ST_TO_ADDR
// case mode of 0 :
35646: LD_VAR 0 6
35650: PUSH
35651: LD_INT 0
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35659
35657: GO 47112
35659: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35660: LD_ADDR_VAR 0 11
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 3
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35853: LD_ADDR_VAR 0 12
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: NEG
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 3
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36049: LD_ADDR_VAR 0 13
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: LD_INT 3
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: NEG
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36248: LD_ADDR_VAR 0 14
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: LD_INT 3
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 3
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36444: LD_ADDR_VAR 0 15
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36637: LD_ADDR_VAR 0 16
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: NEG
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36830: LD_ADDR_VAR 0 17
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37060: LD_ADDR_VAR 0 18
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 2
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37290: LD_ADDR_VAR 0 19
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37520: LD_ADDR_VAR 0 20
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 2
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37750: LD_ADDR_VAR 0 21
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37980: LD_ADDR_VAR 0 22
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38210: LD_ADDR_VAR 0 23
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 3
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38490: LD_ADDR_VAR 0 24
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 3
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38766: LD_ADDR_VAR 0 25
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 3
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 3
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39040: LD_ADDR_VAR 0 26
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 3
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39316: LD_ADDR_VAR 0 27
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39596: LD_ADDR_VAR 0 28
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39878: LD_ADDR_VAR 0 29
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 3
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 3
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 3
40122: NEG
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40157: LD_ADDR_VAR 0 30
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 3
40400: NEG
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40435: LD_ADDR_VAR 0 31
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 3
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 3
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40713: LD_ADDR_VAR 0 32
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 3
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40991: LD_ADDR_VAR 0 33
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 3
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 3
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41270: LD_ADDR_VAR 0 34
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 3
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 3
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 3
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41550: LD_ADDR_VAR 0 35
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41662: LD_ADDR_VAR 0 36
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41774: LD_ADDR_VAR 0 37
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41886: LD_ADDR_VAR 0 38
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41998: LD_ADDR_VAR 0 39
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42110: LD_ADDR_VAR 0 40
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42222: LD_ADDR_VAR 0 41
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: NEG
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 3
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42572: LD_ADDR_VAR 0 42
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 3
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 3
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 3
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42922: LD_ADDR_VAR 0 43
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 3
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43270: LD_ADDR_VAR 0 44
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 3
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: NEG
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43620: LD_ADDR_VAR 0 45
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 3
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 3
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 3
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 3
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: NEG
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43970: LD_ADDR_VAR 0 46
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 3
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 3
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 3
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 3
44266: NEG
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44318: LD_ADDR_VAR 0 47
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44469: LD_ADDR_VAR 0 48
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44616: LD_ADDR_VAR 0 49
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44760: LD_ADDR_VAR 0 50
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44904: LD_ADDR_VAR 0 51
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45051: LD_ADDR_VAR 0 52
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45202: LD_ADDR_VAR 0 53
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45432: LD_ADDR_VAR 0 54
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45662: LD_ADDR_VAR 0 55
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45892: LD_ADDR_VAR 0 56
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46122: LD_ADDR_VAR 0 57
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46352: LD_ADDR_VAR 0 58
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46582: LD_ADDR_VAR 0 59
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46670: LD_ADDR_VAR 0 60
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46758: LD_ADDR_VAR 0 61
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46846: LD_ADDR_VAR 0 62
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46934: LD_ADDR_VAR 0 63
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47022: LD_ADDR_VAR 0 64
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// end ; 1 :
47110: GO 53007
47112: LD_INT 1
47114: DOUBLE
47115: EQUAL
47116: IFTRUE 47120
47118: GO 49743
47120: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47121: LD_ADDR_VAR 0 11
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47165: LD_ADDR_VAR 0 12
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47206: LD_ADDR_VAR 0 13
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47246: LD_ADDR_VAR 0 14
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47287: LD_ADDR_VAR 0 15
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47331: LD_ADDR_VAR 0 16
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47377: LD_ADDR_VAR 0 17
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47421: LD_ADDR_VAR 0 18
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47462: LD_ADDR_VAR 0 19
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47502: LD_ADDR_VAR 0 20
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47543: LD_ADDR_VAR 0 21
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47587: LD_ADDR_VAR 0 22
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47633: LD_ADDR_VAR 0 23
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 4
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47677: LD_ADDR_VAR 0 24
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 4
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47718: LD_ADDR_VAR 0 25
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 4
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47758: LD_ADDR_VAR 0 26
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47799: LD_ADDR_VAR 0 27
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 3
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47843: LD_ADDR_VAR 0 28
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: LD_INT 4
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 4
47874: NEG
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47889: LD_ADDR_VAR 0 29
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 3
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 4
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 4
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 5
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 5
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 4
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 6
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 6
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 5
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48044: LD_ADDR_VAR 0 30
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 4
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 4
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 5
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 5
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 6
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 6
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48187: LD_ADDR_VAR 0 31
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 4
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: PUSH
48235: LD_INT 4
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: LD_INT 4
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 5
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 5
48264: PUSH
48265: LD_INT 5
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 4
48274: PUSH
48275: LD_INT 5
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 6
48284: PUSH
48285: LD_INT 5
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 6
48294: PUSH
48295: LD_INT 6
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 5
48304: PUSH
48305: LD_INT 6
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48326: LD_ADDR_VAR 0 32
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 4
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 6
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 6
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 5
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48469: LD_ADDR_VAR 0 33
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 4
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 4
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 4
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 5
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 5
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 5
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 6
48589: NEG
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 6
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48624: LD_ADDR_VAR 0 34
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: LD_INT 4
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 4
48679: NEG
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 4
48691: NEG
48692: PUSH
48693: LD_INT 4
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: LD_INT 5
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 5
48715: NEG
48716: PUSH
48717: LD_INT 4
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 5
48727: NEG
48728: PUSH
48729: LD_INT 5
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 5
48739: NEG
48740: PUSH
48741: LD_INT 6
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 6
48751: NEG
48752: PUSH
48753: LD_INT 5
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 6
48763: NEG
48764: PUSH
48765: LD_INT 6
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48787: LD_ADDR_VAR 0 41
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48831: LD_ADDR_VAR 0 42
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48872: LD_ADDR_VAR 0 43
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48912: LD_ADDR_VAR 0 44
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48953: LD_ADDR_VAR 0 45
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48997: LD_ADDR_VAR 0 46
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 3
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49043: LD_ADDR_VAR 0 47
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 3
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 3
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49076: LD_ADDR_VAR 0 48
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49107: LD_ADDR_VAR 0 49
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49136: LD_ADDR_VAR 0 50
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49165: LD_ADDR_VAR 0 51
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49196: LD_ADDR_VAR 0 52
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49229: LD_ADDR_VAR 0 53
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49273: LD_ADDR_VAR 0 54
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49314: LD_ADDR_VAR 0 55
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49354: LD_ADDR_VAR 0 56
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49395: LD_ADDR_VAR 0 57
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49439: LD_ADDR_VAR 0 58
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49485: LD_ADDR_VAR 0 59
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49529: LD_ADDR_VAR 0 60
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49570: LD_ADDR_VAR 0 61
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49610: LD_ADDR_VAR 0 62
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49651: LD_ADDR_VAR 0 63
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49695: LD_ADDR_VAR 0 64
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// end ; 2 :
49741: GO 53007
49743: LD_INT 2
49745: DOUBLE
49746: EQUAL
49747: IFTRUE 49751
49749: GO 53006
49751: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49752: LD_ADDR_VAR 0 29
49756: PUSH
49757: LD_INT 4
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 4
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 5
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 5
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 4
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 4
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 4
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: LD_INT 4
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 4
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 4
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 4
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 5
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 5
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 4
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 4
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 4
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 4
50149: NEG
50150: PUSH
50151: LD_INT 5
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: LD_INT 4
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 4
50185: NEG
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 5
50197: NEG
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 5
50209: NEG
50210: PUSH
50211: LD_INT 5
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: LD_INT 5
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 5
50233: NEG
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50290: LD_ADDR_VAR 0 30
50294: PUSH
50295: LD_INT 4
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: LD_INT 4
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 5
50327: PUSH
50328: LD_INT 5
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 4
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 4
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 5
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 5
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 4
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 4
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 4
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 5
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 5
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 5
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 3
50582: NEG
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 3
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: NEG
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: NEG
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 4
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 4
50678: NEG
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 4
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 5
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 4
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 4
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 5
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 5
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50837: LD_ADDR_VAR 0 31
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 4
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 4
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 5
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 5
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 4
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 4
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 4
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 4
51051: NEG
51052: PUSH
51053: LD_INT 5
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: LD_INT 4
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 4
51087: NEG
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 5
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 5
51111: NEG
51112: PUSH
51113: LD_INT 5
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 5
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 5
51135: NEG
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 3
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 3
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: LD_INT 4
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 4
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 5
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 5
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 5
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51387: LD_ADDR_VAR 0 32
51391: PUSH
51392: LD_INT 4
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 4
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 5
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 5
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 5
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 4
51556: NEG
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 4
51568: NEG
51569: PUSH
51570: LD_INT 4
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 4
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 4
51592: NEG
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 4
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 5
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 4
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 5
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 5
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 4
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: LD_INT 4
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 4
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 4
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 4
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 5
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: LD_INT 5
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51934: LD_ADDR_VAR 0 33
51938: PUSH
51939: LD_INT 4
51941: NEG
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 4
51953: NEG
51954: PUSH
51955: LD_INT 5
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: LD_INT 4
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 4
51989: NEG
51990: PUSH
51991: LD_INT 3
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 5
52001: NEG
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 5
52013: NEG
52014: PUSH
52015: LD_INT 5
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: LD_INT 5
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 5
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 4
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 3
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 4
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 4
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 4
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 4
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 5
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 5
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 4
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 4
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 5
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 5
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 5
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52472: LD_ADDR_VAR 0 34
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 4
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 5
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 5
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: LD_INT 4
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: LD_INT 5
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 4
52714: PUSH
52715: LD_INT 5
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 4
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 5
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 5
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 4
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 4
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 4
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 4
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 4
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 5
52913: NEG
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 5
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 5
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// end ; end ;
53004: GO 53007
53006: POP
// case btype of b_depot , b_warehouse :
53007: LD_VAR 0 1
53011: PUSH
53012: LD_INT 0
53014: DOUBLE
53015: EQUAL
53016: IFTRUE 53026
53018: LD_INT 1
53020: DOUBLE
53021: EQUAL
53022: IFTRUE 53026
53024: GO 53227
53026: POP
// case nation of nation_american :
53027: LD_VAR 0 5
53031: PUSH
53032: LD_INT 1
53034: DOUBLE
53035: EQUAL
53036: IFTRUE 53040
53038: GO 53096
53040: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53041: LD_ADDR_VAR 0 9
53045: PUSH
53046: LD_VAR 0 11
53050: PUSH
53051: LD_VAR 0 12
53055: PUSH
53056: LD_VAR 0 13
53060: PUSH
53061: LD_VAR 0 14
53065: PUSH
53066: LD_VAR 0 15
53070: PUSH
53071: LD_VAR 0 16
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: PUSH
53084: LD_VAR 0 4
53088: PUSH
53089: LD_INT 1
53091: PLUS
53092: ARRAY
53093: ST_TO_ADDR
53094: GO 53225
53096: LD_INT 2
53098: DOUBLE
53099: EQUAL
53100: IFTRUE 53104
53102: GO 53160
53104: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53105: LD_ADDR_VAR 0 9
53109: PUSH
53110: LD_VAR 0 17
53114: PUSH
53115: LD_VAR 0 18
53119: PUSH
53120: LD_VAR 0 19
53124: PUSH
53125: LD_VAR 0 20
53129: PUSH
53130: LD_VAR 0 21
53134: PUSH
53135: LD_VAR 0 22
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: PUSH
53148: LD_VAR 0 4
53152: PUSH
53153: LD_INT 1
53155: PLUS
53156: ARRAY
53157: ST_TO_ADDR
53158: GO 53225
53160: LD_INT 3
53162: DOUBLE
53163: EQUAL
53164: IFTRUE 53168
53166: GO 53224
53168: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53169: LD_ADDR_VAR 0 9
53173: PUSH
53174: LD_VAR 0 23
53178: PUSH
53179: LD_VAR 0 24
53183: PUSH
53184: LD_VAR 0 25
53188: PUSH
53189: LD_VAR 0 26
53193: PUSH
53194: LD_VAR 0 27
53198: PUSH
53199: LD_VAR 0 28
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: PUSH
53212: LD_VAR 0 4
53216: PUSH
53217: LD_INT 1
53219: PLUS
53220: ARRAY
53221: ST_TO_ADDR
53222: GO 53225
53224: POP
53225: GO 53780
53227: LD_INT 2
53229: DOUBLE
53230: EQUAL
53231: IFTRUE 53241
53233: LD_INT 3
53235: DOUBLE
53236: EQUAL
53237: IFTRUE 53241
53239: GO 53297
53241: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53242: LD_ADDR_VAR 0 9
53246: PUSH
53247: LD_VAR 0 29
53251: PUSH
53252: LD_VAR 0 30
53256: PUSH
53257: LD_VAR 0 31
53261: PUSH
53262: LD_VAR 0 32
53266: PUSH
53267: LD_VAR 0 33
53271: PUSH
53272: LD_VAR 0 34
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: PUSH
53285: LD_VAR 0 4
53289: PUSH
53290: LD_INT 1
53292: PLUS
53293: ARRAY
53294: ST_TO_ADDR
53295: GO 53780
53297: LD_INT 16
53299: DOUBLE
53300: EQUAL
53301: IFTRUE 53359
53303: LD_INT 17
53305: DOUBLE
53306: EQUAL
53307: IFTRUE 53359
53309: LD_INT 18
53311: DOUBLE
53312: EQUAL
53313: IFTRUE 53359
53315: LD_INT 19
53317: DOUBLE
53318: EQUAL
53319: IFTRUE 53359
53321: LD_INT 22
53323: DOUBLE
53324: EQUAL
53325: IFTRUE 53359
53327: LD_INT 20
53329: DOUBLE
53330: EQUAL
53331: IFTRUE 53359
53333: LD_INT 21
53335: DOUBLE
53336: EQUAL
53337: IFTRUE 53359
53339: LD_INT 23
53341: DOUBLE
53342: EQUAL
53343: IFTRUE 53359
53345: LD_INT 24
53347: DOUBLE
53348: EQUAL
53349: IFTRUE 53359
53351: LD_INT 25
53353: DOUBLE
53354: EQUAL
53355: IFTRUE 53359
53357: GO 53415
53359: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53360: LD_ADDR_VAR 0 9
53364: PUSH
53365: LD_VAR 0 35
53369: PUSH
53370: LD_VAR 0 36
53374: PUSH
53375: LD_VAR 0 37
53379: PUSH
53380: LD_VAR 0 38
53384: PUSH
53385: LD_VAR 0 39
53389: PUSH
53390: LD_VAR 0 40
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: LD_VAR 0 4
53407: PUSH
53408: LD_INT 1
53410: PLUS
53411: ARRAY
53412: ST_TO_ADDR
53413: GO 53780
53415: LD_INT 6
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53471
53421: LD_INT 7
53423: DOUBLE
53424: EQUAL
53425: IFTRUE 53471
53427: LD_INT 8
53429: DOUBLE
53430: EQUAL
53431: IFTRUE 53471
53433: LD_INT 13
53435: DOUBLE
53436: EQUAL
53437: IFTRUE 53471
53439: LD_INT 12
53441: DOUBLE
53442: EQUAL
53443: IFTRUE 53471
53445: LD_INT 15
53447: DOUBLE
53448: EQUAL
53449: IFTRUE 53471
53451: LD_INT 11
53453: DOUBLE
53454: EQUAL
53455: IFTRUE 53471
53457: LD_INT 14
53459: DOUBLE
53460: EQUAL
53461: IFTRUE 53471
53463: LD_INT 10
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53471
53469: GO 53527
53471: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53472: LD_ADDR_VAR 0 9
53476: PUSH
53477: LD_VAR 0 41
53481: PUSH
53482: LD_VAR 0 42
53486: PUSH
53487: LD_VAR 0 43
53491: PUSH
53492: LD_VAR 0 44
53496: PUSH
53497: LD_VAR 0 45
53501: PUSH
53502: LD_VAR 0 46
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: PUSH
53515: LD_VAR 0 4
53519: PUSH
53520: LD_INT 1
53522: PLUS
53523: ARRAY
53524: ST_TO_ADDR
53525: GO 53780
53527: LD_INT 36
53529: DOUBLE
53530: EQUAL
53531: IFTRUE 53535
53533: GO 53591
53535: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53536: LD_ADDR_VAR 0 9
53540: PUSH
53541: LD_VAR 0 47
53545: PUSH
53546: LD_VAR 0 48
53550: PUSH
53551: LD_VAR 0 49
53555: PUSH
53556: LD_VAR 0 50
53560: PUSH
53561: LD_VAR 0 51
53565: PUSH
53566: LD_VAR 0 52
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: PUSH
53579: LD_VAR 0 4
53583: PUSH
53584: LD_INT 1
53586: PLUS
53587: ARRAY
53588: ST_TO_ADDR
53589: GO 53780
53591: LD_INT 4
53593: DOUBLE
53594: EQUAL
53595: IFTRUE 53617
53597: LD_INT 5
53599: DOUBLE
53600: EQUAL
53601: IFTRUE 53617
53603: LD_INT 34
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53617
53609: LD_INT 37
53611: DOUBLE
53612: EQUAL
53613: IFTRUE 53617
53615: GO 53673
53617: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53618: LD_ADDR_VAR 0 9
53622: PUSH
53623: LD_VAR 0 53
53627: PUSH
53628: LD_VAR 0 54
53632: PUSH
53633: LD_VAR 0 55
53637: PUSH
53638: LD_VAR 0 56
53642: PUSH
53643: LD_VAR 0 57
53647: PUSH
53648: LD_VAR 0 58
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: LD_VAR 0 4
53665: PUSH
53666: LD_INT 1
53668: PLUS
53669: ARRAY
53670: ST_TO_ADDR
53671: GO 53780
53673: LD_INT 31
53675: DOUBLE
53676: EQUAL
53677: IFTRUE 53723
53679: LD_INT 32
53681: DOUBLE
53682: EQUAL
53683: IFTRUE 53723
53685: LD_INT 33
53687: DOUBLE
53688: EQUAL
53689: IFTRUE 53723
53691: LD_INT 27
53693: DOUBLE
53694: EQUAL
53695: IFTRUE 53723
53697: LD_INT 26
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53723
53703: LD_INT 28
53705: DOUBLE
53706: EQUAL
53707: IFTRUE 53723
53709: LD_INT 29
53711: DOUBLE
53712: EQUAL
53713: IFTRUE 53723
53715: LD_INT 30
53717: DOUBLE
53718: EQUAL
53719: IFTRUE 53723
53721: GO 53779
53723: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53724: LD_ADDR_VAR 0 9
53728: PUSH
53729: LD_VAR 0 59
53733: PUSH
53734: LD_VAR 0 60
53738: PUSH
53739: LD_VAR 0 61
53743: PUSH
53744: LD_VAR 0 62
53748: PUSH
53749: LD_VAR 0 63
53753: PUSH
53754: LD_VAR 0 64
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: PUSH
53767: LD_VAR 0 4
53771: PUSH
53772: LD_INT 1
53774: PLUS
53775: ARRAY
53776: ST_TO_ADDR
53777: GO 53780
53779: POP
// temp_list2 = [ ] ;
53780: LD_ADDR_VAR 0 10
53784: PUSH
53785: EMPTY
53786: ST_TO_ADDR
// for i in temp_list do
53787: LD_ADDR_VAR 0 8
53791: PUSH
53792: LD_VAR 0 9
53796: PUSH
53797: FOR_IN
53798: IFFALSE 53850
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53800: LD_ADDR_VAR 0 10
53804: PUSH
53805: LD_VAR 0 10
53809: PUSH
53810: LD_VAR 0 8
53814: PUSH
53815: LD_INT 1
53817: ARRAY
53818: PUSH
53819: LD_VAR 0 2
53823: PLUS
53824: PUSH
53825: LD_VAR 0 8
53829: PUSH
53830: LD_INT 2
53832: ARRAY
53833: PUSH
53834: LD_VAR 0 3
53838: PLUS
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: ADD
53847: ST_TO_ADDR
53848: GO 53797
53850: POP
53851: POP
// result = temp_list2 ;
53852: LD_ADDR_VAR 0 7
53856: PUSH
53857: LD_VAR 0 10
53861: ST_TO_ADDR
// end ;
53862: LD_VAR 0 7
53866: RET
// export function EnemyInRange ( unit , dist ) ; begin
53867: LD_INT 0
53869: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53870: LD_ADDR_VAR 0 3
53874: PUSH
53875: LD_VAR 0 1
53879: PPUSH
53880: CALL_OW 255
53884: PPUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: CALL_OW 250
53894: PPUSH
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL_OW 251
53904: PPUSH
53905: LD_VAR 0 2
53909: PPUSH
53910: CALL 27240 0 4
53914: PUSH
53915: LD_INT 4
53917: ARRAY
53918: ST_TO_ADDR
// end ;
53919: LD_VAR 0 3
53923: RET
// export function PlayerSeeMe ( unit ) ; begin
53924: LD_INT 0
53926: PPUSH
// result := See ( your_side , unit ) ;
53927: LD_ADDR_VAR 0 2
53931: PUSH
53932: LD_OWVAR 2
53936: PPUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: CALL_OW 292
53946: ST_TO_ADDR
// end ;
53947: LD_VAR 0 2
53951: RET
// export function ReverseDir ( unit ) ; begin
53952: LD_INT 0
53954: PPUSH
// if not unit then
53955: LD_VAR 0 1
53959: NOT
53960: IFFALSE 53964
// exit ;
53962: GO 53987
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53964: LD_ADDR_VAR 0 2
53968: PUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: CALL_OW 254
53978: PUSH
53979: LD_INT 3
53981: PLUS
53982: PUSH
53983: LD_INT 6
53985: MOD
53986: ST_TO_ADDR
// end ;
53987: LD_VAR 0 2
53991: RET
// export function ReverseArray ( array ) ; var i ; begin
53992: LD_INT 0
53994: PPUSH
53995: PPUSH
// if not array then
53996: LD_VAR 0 1
54000: NOT
54001: IFFALSE 54005
// exit ;
54003: GO 54060
// result := [ ] ;
54005: LD_ADDR_VAR 0 2
54009: PUSH
54010: EMPTY
54011: ST_TO_ADDR
// for i := array downto 1 do
54012: LD_ADDR_VAR 0 3
54016: PUSH
54017: DOUBLE
54018: LD_VAR 0 1
54022: INC
54023: ST_TO_ADDR
54024: LD_INT 1
54026: PUSH
54027: FOR_DOWNTO
54028: IFFALSE 54058
// result := Join ( result , array [ i ] ) ;
54030: LD_ADDR_VAR 0 2
54034: PUSH
54035: LD_VAR 0 2
54039: PPUSH
54040: LD_VAR 0 1
54044: PUSH
54045: LD_VAR 0 3
54049: ARRAY
54050: PPUSH
54051: CALL 58705 0 2
54055: ST_TO_ADDR
54056: GO 54027
54058: POP
54059: POP
// end ;
54060: LD_VAR 0 2
54064: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54065: LD_INT 0
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
// if not unit or not hexes then
54073: LD_VAR 0 1
54077: NOT
54078: PUSH
54079: LD_VAR 0 2
54083: NOT
54084: OR
54085: IFFALSE 54089
// exit ;
54087: GO 54212
// dist := 9999 ;
54089: LD_ADDR_VAR 0 5
54093: PUSH
54094: LD_INT 9999
54096: ST_TO_ADDR
// for i = 1 to hexes do
54097: LD_ADDR_VAR 0 4
54101: PUSH
54102: DOUBLE
54103: LD_INT 1
54105: DEC
54106: ST_TO_ADDR
54107: LD_VAR 0 2
54111: PUSH
54112: FOR_TO
54113: IFFALSE 54200
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54115: LD_ADDR_VAR 0 6
54119: PUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_VAR 0 2
54129: PUSH
54130: LD_VAR 0 4
54134: ARRAY
54135: PUSH
54136: LD_INT 1
54138: ARRAY
54139: PPUSH
54140: LD_VAR 0 2
54144: PUSH
54145: LD_VAR 0 4
54149: ARRAY
54150: PUSH
54151: LD_INT 2
54153: ARRAY
54154: PPUSH
54155: CALL_OW 297
54159: ST_TO_ADDR
// if tdist < dist then
54160: LD_VAR 0 6
54164: PUSH
54165: LD_VAR 0 5
54169: LESS
54170: IFFALSE 54198
// begin hex := hexes [ i ] ;
54172: LD_ADDR_VAR 0 8
54176: PUSH
54177: LD_VAR 0 2
54181: PUSH
54182: LD_VAR 0 4
54186: ARRAY
54187: ST_TO_ADDR
// dist := tdist ;
54188: LD_ADDR_VAR 0 5
54192: PUSH
54193: LD_VAR 0 6
54197: ST_TO_ADDR
// end ; end ;
54198: GO 54112
54200: POP
54201: POP
// result := hex ;
54202: LD_ADDR_VAR 0 3
54206: PUSH
54207: LD_VAR 0 8
54211: ST_TO_ADDR
// end ;
54212: LD_VAR 0 3
54216: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54217: LD_INT 0
54219: PPUSH
54220: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54221: LD_VAR 0 1
54225: NOT
54226: PUSH
54227: LD_VAR 0 1
54231: PUSH
54232: LD_INT 21
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 23
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PPUSH
54256: CALL_OW 69
54260: IN
54261: NOT
54262: OR
54263: IFFALSE 54267
// exit ;
54265: GO 54314
// for i = 1 to 3 do
54267: LD_ADDR_VAR 0 3
54271: PUSH
54272: DOUBLE
54273: LD_INT 1
54275: DEC
54276: ST_TO_ADDR
54277: LD_INT 3
54279: PUSH
54280: FOR_TO
54281: IFFALSE 54312
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 250
54292: PPUSH
54293: LD_VAR 0 1
54297: PPUSH
54298: CALL_OW 251
54302: PPUSH
54303: LD_INT 1
54305: PPUSH
54306: CALL_OW 453
54310: GO 54280
54312: POP
54313: POP
// end ;
54314: LD_VAR 0 2
54318: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54319: LD_INT 0
54321: PPUSH
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
// if not unit or not enemy_unit then
54327: LD_VAR 0 1
54331: NOT
54332: PUSH
54333: LD_VAR 0 2
54337: NOT
54338: OR
54339: IFFALSE 54343
// exit ;
54341: GO 54810
// if GetLives ( i ) < 250 then
54343: LD_VAR 0 4
54347: PPUSH
54348: CALL_OW 256
54352: PUSH
54353: LD_INT 250
54355: LESS
54356: IFFALSE 54369
// begin ComAutodestruct ( i ) ;
54358: LD_VAR 0 4
54362: PPUSH
54363: CALL 54217 0 1
// exit ;
54367: GO 54810
// end ; x := GetX ( enemy_unit ) ;
54369: LD_ADDR_VAR 0 7
54373: PUSH
54374: LD_VAR 0 2
54378: PPUSH
54379: CALL_OW 250
54383: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54384: LD_ADDR_VAR 0 8
54388: PUSH
54389: LD_VAR 0 2
54393: PPUSH
54394: CALL_OW 251
54398: ST_TO_ADDR
// if not x or not y then
54399: LD_VAR 0 7
54403: NOT
54404: PUSH
54405: LD_VAR 0 8
54409: NOT
54410: OR
54411: IFFALSE 54415
// exit ;
54413: GO 54810
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54415: LD_ADDR_VAR 0 6
54419: PUSH
54420: LD_VAR 0 7
54424: PPUSH
54425: LD_INT 0
54427: PPUSH
54428: LD_INT 4
54430: PPUSH
54431: CALL_OW 272
54435: PUSH
54436: LD_VAR 0 8
54440: PPUSH
54441: LD_INT 0
54443: PPUSH
54444: LD_INT 4
54446: PPUSH
54447: CALL_OW 273
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_VAR 0 7
54460: PPUSH
54461: LD_INT 1
54463: PPUSH
54464: LD_INT 4
54466: PPUSH
54467: CALL_OW 272
54471: PUSH
54472: LD_VAR 0 8
54476: PPUSH
54477: LD_INT 1
54479: PPUSH
54480: LD_INT 4
54482: PPUSH
54483: CALL_OW 273
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_VAR 0 7
54496: PPUSH
54497: LD_INT 2
54499: PPUSH
54500: LD_INT 4
54502: PPUSH
54503: CALL_OW 272
54507: PUSH
54508: LD_VAR 0 8
54512: PPUSH
54513: LD_INT 2
54515: PPUSH
54516: LD_INT 4
54518: PPUSH
54519: CALL_OW 273
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_VAR 0 7
54532: PPUSH
54533: LD_INT 3
54535: PPUSH
54536: LD_INT 4
54538: PPUSH
54539: CALL_OW 272
54543: PUSH
54544: LD_VAR 0 8
54548: PPUSH
54549: LD_INT 3
54551: PPUSH
54552: LD_INT 4
54554: PPUSH
54555: CALL_OW 273
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_VAR 0 7
54568: PPUSH
54569: LD_INT 4
54571: PPUSH
54572: LD_INT 4
54574: PPUSH
54575: CALL_OW 272
54579: PUSH
54580: LD_VAR 0 8
54584: PPUSH
54585: LD_INT 4
54587: PPUSH
54588: LD_INT 4
54590: PPUSH
54591: CALL_OW 273
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_VAR 0 7
54604: PPUSH
54605: LD_INT 5
54607: PPUSH
54608: LD_INT 4
54610: PPUSH
54611: CALL_OW 272
54615: PUSH
54616: LD_VAR 0 8
54620: PPUSH
54621: LD_INT 5
54623: PPUSH
54624: LD_INT 4
54626: PPUSH
54627: CALL_OW 273
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// for i = tmp downto 1 do
54644: LD_ADDR_VAR 0 4
54648: PUSH
54649: DOUBLE
54650: LD_VAR 0 6
54654: INC
54655: ST_TO_ADDR
54656: LD_INT 1
54658: PUSH
54659: FOR_DOWNTO
54660: IFFALSE 54761
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54662: LD_VAR 0 6
54666: PUSH
54667: LD_VAR 0 4
54671: ARRAY
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: PPUSH
54677: LD_VAR 0 6
54681: PUSH
54682: LD_VAR 0 4
54686: ARRAY
54687: PUSH
54688: LD_INT 2
54690: ARRAY
54691: PPUSH
54692: CALL_OW 488
54696: NOT
54697: PUSH
54698: LD_VAR 0 6
54702: PUSH
54703: LD_VAR 0 4
54707: ARRAY
54708: PUSH
54709: LD_INT 1
54711: ARRAY
54712: PPUSH
54713: LD_VAR 0 6
54717: PUSH
54718: LD_VAR 0 4
54722: ARRAY
54723: PUSH
54724: LD_INT 2
54726: ARRAY
54727: PPUSH
54728: CALL_OW 428
54732: PUSH
54733: LD_INT 0
54735: NONEQUAL
54736: OR
54737: IFFALSE 54759
// tmp := Delete ( tmp , i ) ;
54739: LD_ADDR_VAR 0 6
54743: PUSH
54744: LD_VAR 0 6
54748: PPUSH
54749: LD_VAR 0 4
54753: PPUSH
54754: CALL_OW 3
54758: ST_TO_ADDR
54759: GO 54659
54761: POP
54762: POP
// j := GetClosestHex ( unit , tmp ) ;
54763: LD_ADDR_VAR 0 5
54767: PUSH
54768: LD_VAR 0 1
54772: PPUSH
54773: LD_VAR 0 6
54777: PPUSH
54778: CALL 54065 0 2
54782: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54783: LD_VAR 0 1
54787: PPUSH
54788: LD_VAR 0 5
54792: PUSH
54793: LD_INT 1
54795: ARRAY
54796: PPUSH
54797: LD_VAR 0 5
54801: PUSH
54802: LD_INT 2
54804: ARRAY
54805: PPUSH
54806: CALL_OW 111
// end ;
54810: LD_VAR 0 3
54814: RET
// export function PrepareApemanSoldier ( ) ; begin
54815: LD_INT 0
54817: PPUSH
// uc_nation := 0 ;
54818: LD_ADDR_OWVAR 21
54822: PUSH
54823: LD_INT 0
54825: ST_TO_ADDR
// hc_sex := sex_male ;
54826: LD_ADDR_OWVAR 27
54830: PUSH
54831: LD_INT 1
54833: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54834: LD_ADDR_OWVAR 28
54838: PUSH
54839: LD_INT 15
54841: ST_TO_ADDR
// hc_gallery :=  ;
54842: LD_ADDR_OWVAR 33
54846: PUSH
54847: LD_STRING 
54849: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54850: LD_ADDR_OWVAR 31
54854: PUSH
54855: LD_INT 0
54857: PPUSH
54858: LD_INT 3
54860: PPUSH
54861: CALL_OW 12
54865: PUSH
54866: LD_INT 0
54868: PPUSH
54869: LD_INT 3
54871: PPUSH
54872: CALL_OW 12
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: ST_TO_ADDR
// end ;
54889: LD_VAR 0 1
54893: RET
// export function PrepareApemanEngineer ( ) ; begin
54894: LD_INT 0
54896: PPUSH
// uc_nation := 0 ;
54897: LD_ADDR_OWVAR 21
54901: PUSH
54902: LD_INT 0
54904: ST_TO_ADDR
// hc_sex := sex_male ;
54905: LD_ADDR_OWVAR 27
54909: PUSH
54910: LD_INT 1
54912: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54913: LD_ADDR_OWVAR 28
54917: PUSH
54918: LD_INT 16
54920: ST_TO_ADDR
// hc_gallery :=  ;
54921: LD_ADDR_OWVAR 33
54925: PUSH
54926: LD_STRING 
54928: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54929: LD_ADDR_OWVAR 31
54933: PUSH
54934: LD_INT 0
54936: PPUSH
54937: LD_INT 3
54939: PPUSH
54940: CALL_OW 12
54944: PUSH
54945: LD_INT 0
54947: PPUSH
54948: LD_INT 3
54950: PPUSH
54951: CALL_OW 12
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// end ;
54968: LD_VAR 0 1
54972: RET
// export function PrepareApeman ( agressivity ) ; begin
54973: LD_INT 0
54975: PPUSH
// uc_side := 0 ;
54976: LD_ADDR_OWVAR 20
54980: PUSH
54981: LD_INT 0
54983: ST_TO_ADDR
// uc_nation := 0 ;
54984: LD_ADDR_OWVAR 21
54988: PUSH
54989: LD_INT 0
54991: ST_TO_ADDR
// hc_sex := sex_male ;
54992: LD_ADDR_OWVAR 27
54996: PUSH
54997: LD_INT 1
54999: ST_TO_ADDR
// hc_class := class_apeman ;
55000: LD_ADDR_OWVAR 28
55004: PUSH
55005: LD_INT 12
55007: ST_TO_ADDR
// hc_gallery :=  ;
55008: LD_ADDR_OWVAR 33
55012: PUSH
55013: LD_STRING 
55015: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55016: LD_ADDR_OWVAR 35
55020: PUSH
55021: LD_VAR 0 1
55025: NEG
55026: PPUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: CALL_OW 12
55036: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55037: LD_ADDR_OWVAR 31
55041: PUSH
55042: LD_INT 0
55044: PPUSH
55045: LD_INT 3
55047: PPUSH
55048: CALL_OW 12
55052: PUSH
55053: LD_INT 0
55055: PPUSH
55056: LD_INT 3
55058: PPUSH
55059: CALL_OW 12
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: ST_TO_ADDR
// end ;
55076: LD_VAR 0 2
55080: RET
// export function PrepareTiger ( agressivity ) ; begin
55081: LD_INT 0
55083: PPUSH
// uc_side := 0 ;
55084: LD_ADDR_OWVAR 20
55088: PUSH
55089: LD_INT 0
55091: ST_TO_ADDR
// uc_nation := 0 ;
55092: LD_ADDR_OWVAR 21
55096: PUSH
55097: LD_INT 0
55099: ST_TO_ADDR
// hc_class := class_tiger ;
55100: LD_ADDR_OWVAR 28
55104: PUSH
55105: LD_INT 14
55107: ST_TO_ADDR
// hc_gallery :=  ;
55108: LD_ADDR_OWVAR 33
55112: PUSH
55113: LD_STRING 
55115: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55116: LD_ADDR_OWVAR 35
55120: PUSH
55121: LD_VAR 0 1
55125: NEG
55126: PPUSH
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL_OW 12
55136: ST_TO_ADDR
// end ;
55137: LD_VAR 0 2
55141: RET
// export function PrepareEnchidna ( ) ; begin
55142: LD_INT 0
55144: PPUSH
// uc_side := 0 ;
55145: LD_ADDR_OWVAR 20
55149: PUSH
55150: LD_INT 0
55152: ST_TO_ADDR
// uc_nation := 0 ;
55153: LD_ADDR_OWVAR 21
55157: PUSH
55158: LD_INT 0
55160: ST_TO_ADDR
// hc_class := class_baggie ;
55161: LD_ADDR_OWVAR 28
55165: PUSH
55166: LD_INT 13
55168: ST_TO_ADDR
// hc_gallery :=  ;
55169: LD_ADDR_OWVAR 33
55173: PUSH
55174: LD_STRING 
55176: ST_TO_ADDR
// end ;
55177: LD_VAR 0 1
55181: RET
// export function PrepareFrog ( ) ; begin
55182: LD_INT 0
55184: PPUSH
// uc_side := 0 ;
55185: LD_ADDR_OWVAR 20
55189: PUSH
55190: LD_INT 0
55192: ST_TO_ADDR
// uc_nation := 0 ;
55193: LD_ADDR_OWVAR 21
55197: PUSH
55198: LD_INT 0
55200: ST_TO_ADDR
// hc_class := class_frog ;
55201: LD_ADDR_OWVAR 28
55205: PUSH
55206: LD_INT 19
55208: ST_TO_ADDR
// hc_gallery :=  ;
55209: LD_ADDR_OWVAR 33
55213: PUSH
55214: LD_STRING 
55216: ST_TO_ADDR
// end ;
55217: LD_VAR 0 1
55221: RET
// export function PrepareFish ( ) ; begin
55222: LD_INT 0
55224: PPUSH
// uc_side := 0 ;
55225: LD_ADDR_OWVAR 20
55229: PUSH
55230: LD_INT 0
55232: ST_TO_ADDR
// uc_nation := 0 ;
55233: LD_ADDR_OWVAR 21
55237: PUSH
55238: LD_INT 0
55240: ST_TO_ADDR
// hc_class := class_fish ;
55241: LD_ADDR_OWVAR 28
55245: PUSH
55246: LD_INT 20
55248: ST_TO_ADDR
// hc_gallery :=  ;
55249: LD_ADDR_OWVAR 33
55253: PUSH
55254: LD_STRING 
55256: ST_TO_ADDR
// end ;
55257: LD_VAR 0 1
55261: RET
// export function PrepareBird ( ) ; begin
55262: LD_INT 0
55264: PPUSH
// uc_side := 0 ;
55265: LD_ADDR_OWVAR 20
55269: PUSH
55270: LD_INT 0
55272: ST_TO_ADDR
// uc_nation := 0 ;
55273: LD_ADDR_OWVAR 21
55277: PUSH
55278: LD_INT 0
55280: ST_TO_ADDR
// hc_class := class_phororhacos ;
55281: LD_ADDR_OWVAR 28
55285: PUSH
55286: LD_INT 18
55288: ST_TO_ADDR
// hc_gallery :=  ;
55289: LD_ADDR_OWVAR 33
55293: PUSH
55294: LD_STRING 
55296: ST_TO_ADDR
// end ;
55297: LD_VAR 0 1
55301: RET
// export function PrepareHorse ( ) ; begin
55302: LD_INT 0
55304: PPUSH
// uc_side := 0 ;
55305: LD_ADDR_OWVAR 20
55309: PUSH
55310: LD_INT 0
55312: ST_TO_ADDR
// uc_nation := 0 ;
55313: LD_ADDR_OWVAR 21
55317: PUSH
55318: LD_INT 0
55320: ST_TO_ADDR
// hc_class := class_horse ;
55321: LD_ADDR_OWVAR 28
55325: PUSH
55326: LD_INT 21
55328: ST_TO_ADDR
// hc_gallery :=  ;
55329: LD_ADDR_OWVAR 33
55333: PUSH
55334: LD_STRING 
55336: ST_TO_ADDR
// end ;
55337: LD_VAR 0 1
55341: RET
// export function PrepareMastodont ( ) ; begin
55342: LD_INT 0
55344: PPUSH
// uc_side := 0 ;
55345: LD_ADDR_OWVAR 20
55349: PUSH
55350: LD_INT 0
55352: ST_TO_ADDR
// uc_nation := 0 ;
55353: LD_ADDR_OWVAR 21
55357: PUSH
55358: LD_INT 0
55360: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55361: LD_ADDR_OWVAR 37
55365: PUSH
55366: LD_INT 31
55368: ST_TO_ADDR
// vc_control := control_rider ;
55369: LD_ADDR_OWVAR 38
55373: PUSH
55374: LD_INT 4
55376: ST_TO_ADDR
// end ;
55377: LD_VAR 0 1
55381: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55382: LD_INT 0
55384: PPUSH
55385: PPUSH
55386: PPUSH
// uc_side = 0 ;
55387: LD_ADDR_OWVAR 20
55391: PUSH
55392: LD_INT 0
55394: ST_TO_ADDR
// uc_nation = 0 ;
55395: LD_ADDR_OWVAR 21
55399: PUSH
55400: LD_INT 0
55402: ST_TO_ADDR
// InitHc_All ( ) ;
55403: CALL_OW 584
// InitVc ;
55407: CALL_OW 20
// if mastodonts then
55411: LD_VAR 0 6
55415: IFFALSE 55482
// for i = 1 to mastodonts do
55417: LD_ADDR_VAR 0 11
55421: PUSH
55422: DOUBLE
55423: LD_INT 1
55425: DEC
55426: ST_TO_ADDR
55427: LD_VAR 0 6
55431: PUSH
55432: FOR_TO
55433: IFFALSE 55480
// begin vc_chassis := 31 ;
55435: LD_ADDR_OWVAR 37
55439: PUSH
55440: LD_INT 31
55442: ST_TO_ADDR
// vc_control := control_rider ;
55443: LD_ADDR_OWVAR 38
55447: PUSH
55448: LD_INT 4
55450: ST_TO_ADDR
// animal := CreateVehicle ;
55451: LD_ADDR_VAR 0 12
55455: PUSH
55456: CALL_OW 45
55460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55461: LD_VAR 0 12
55465: PPUSH
55466: LD_VAR 0 8
55470: PPUSH
55471: LD_INT 0
55473: PPUSH
55474: CALL 57610 0 3
// end ;
55478: GO 55432
55480: POP
55481: POP
// if horses then
55482: LD_VAR 0 5
55486: IFFALSE 55553
// for i = 1 to horses do
55488: LD_ADDR_VAR 0 11
55492: PUSH
55493: DOUBLE
55494: LD_INT 1
55496: DEC
55497: ST_TO_ADDR
55498: LD_VAR 0 5
55502: PUSH
55503: FOR_TO
55504: IFFALSE 55551
// begin hc_class := 21 ;
55506: LD_ADDR_OWVAR 28
55510: PUSH
55511: LD_INT 21
55513: ST_TO_ADDR
// hc_gallery :=  ;
55514: LD_ADDR_OWVAR 33
55518: PUSH
55519: LD_STRING 
55521: ST_TO_ADDR
// animal := CreateHuman ;
55522: LD_ADDR_VAR 0 12
55526: PUSH
55527: CALL_OW 44
55531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55532: LD_VAR 0 12
55536: PPUSH
55537: LD_VAR 0 8
55541: PPUSH
55542: LD_INT 0
55544: PPUSH
55545: CALL 57610 0 3
// end ;
55549: GO 55503
55551: POP
55552: POP
// if birds then
55553: LD_VAR 0 1
55557: IFFALSE 55624
// for i = 1 to birds do
55559: LD_ADDR_VAR 0 11
55563: PUSH
55564: DOUBLE
55565: LD_INT 1
55567: DEC
55568: ST_TO_ADDR
55569: LD_VAR 0 1
55573: PUSH
55574: FOR_TO
55575: IFFALSE 55622
// begin hc_class := 18 ;
55577: LD_ADDR_OWVAR 28
55581: PUSH
55582: LD_INT 18
55584: ST_TO_ADDR
// hc_gallery =  ;
55585: LD_ADDR_OWVAR 33
55589: PUSH
55590: LD_STRING 
55592: ST_TO_ADDR
// animal := CreateHuman ;
55593: LD_ADDR_VAR 0 12
55597: PUSH
55598: CALL_OW 44
55602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55603: LD_VAR 0 12
55607: PPUSH
55608: LD_VAR 0 8
55612: PPUSH
55613: LD_INT 0
55615: PPUSH
55616: CALL 57610 0 3
// end ;
55620: GO 55574
55622: POP
55623: POP
// if tigers then
55624: LD_VAR 0 2
55628: IFFALSE 55712
// for i = 1 to tigers do
55630: LD_ADDR_VAR 0 11
55634: PUSH
55635: DOUBLE
55636: LD_INT 1
55638: DEC
55639: ST_TO_ADDR
55640: LD_VAR 0 2
55644: PUSH
55645: FOR_TO
55646: IFFALSE 55710
// begin hc_class = class_tiger ;
55648: LD_ADDR_OWVAR 28
55652: PUSH
55653: LD_INT 14
55655: ST_TO_ADDR
// hc_gallery =  ;
55656: LD_ADDR_OWVAR 33
55660: PUSH
55661: LD_STRING 
55663: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55664: LD_ADDR_OWVAR 35
55668: PUSH
55669: LD_INT 7
55671: NEG
55672: PPUSH
55673: LD_INT 7
55675: PPUSH
55676: CALL_OW 12
55680: ST_TO_ADDR
// animal := CreateHuman ;
55681: LD_ADDR_VAR 0 12
55685: PUSH
55686: CALL_OW 44
55690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55691: LD_VAR 0 12
55695: PPUSH
55696: LD_VAR 0 8
55700: PPUSH
55701: LD_INT 0
55703: PPUSH
55704: CALL 57610 0 3
// end ;
55708: GO 55645
55710: POP
55711: POP
// if apemans then
55712: LD_VAR 0 3
55716: IFFALSE 55839
// for i = 1 to apemans do
55718: LD_ADDR_VAR 0 11
55722: PUSH
55723: DOUBLE
55724: LD_INT 1
55726: DEC
55727: ST_TO_ADDR
55728: LD_VAR 0 3
55732: PUSH
55733: FOR_TO
55734: IFFALSE 55837
// begin hc_class = class_apeman ;
55736: LD_ADDR_OWVAR 28
55740: PUSH
55741: LD_INT 12
55743: ST_TO_ADDR
// hc_gallery =  ;
55744: LD_ADDR_OWVAR 33
55748: PUSH
55749: LD_STRING 
55751: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55752: LD_ADDR_OWVAR 35
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PPUSH
55761: LD_INT 2
55763: PPUSH
55764: CALL_OW 12
55768: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55769: LD_ADDR_OWVAR 31
55773: PUSH
55774: LD_INT 1
55776: PPUSH
55777: LD_INT 3
55779: PPUSH
55780: CALL_OW 12
55784: PUSH
55785: LD_INT 1
55787: PPUSH
55788: LD_INT 3
55790: PPUSH
55791: CALL_OW 12
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// animal := CreateHuman ;
55808: LD_ADDR_VAR 0 12
55812: PUSH
55813: CALL_OW 44
55817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55818: LD_VAR 0 12
55822: PPUSH
55823: LD_VAR 0 8
55827: PPUSH
55828: LD_INT 0
55830: PPUSH
55831: CALL 57610 0 3
// end ;
55835: GO 55733
55837: POP
55838: POP
// if enchidnas then
55839: LD_VAR 0 4
55843: IFFALSE 55910
// for i = 1 to enchidnas do
55845: LD_ADDR_VAR 0 11
55849: PUSH
55850: DOUBLE
55851: LD_INT 1
55853: DEC
55854: ST_TO_ADDR
55855: LD_VAR 0 4
55859: PUSH
55860: FOR_TO
55861: IFFALSE 55908
// begin hc_class = 13 ;
55863: LD_ADDR_OWVAR 28
55867: PUSH
55868: LD_INT 13
55870: ST_TO_ADDR
// hc_gallery =  ;
55871: LD_ADDR_OWVAR 33
55875: PUSH
55876: LD_STRING 
55878: ST_TO_ADDR
// animal := CreateHuman ;
55879: LD_ADDR_VAR 0 12
55883: PUSH
55884: CALL_OW 44
55888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55889: LD_VAR 0 12
55893: PPUSH
55894: LD_VAR 0 8
55898: PPUSH
55899: LD_INT 0
55901: PPUSH
55902: CALL 57610 0 3
// end ;
55906: GO 55860
55908: POP
55909: POP
// if fishes then
55910: LD_VAR 0 7
55914: IFFALSE 55981
// for i = 1 to fishes do
55916: LD_ADDR_VAR 0 11
55920: PUSH
55921: DOUBLE
55922: LD_INT 1
55924: DEC
55925: ST_TO_ADDR
55926: LD_VAR 0 7
55930: PUSH
55931: FOR_TO
55932: IFFALSE 55979
// begin hc_class = 20 ;
55934: LD_ADDR_OWVAR 28
55938: PUSH
55939: LD_INT 20
55941: ST_TO_ADDR
// hc_gallery =  ;
55942: LD_ADDR_OWVAR 33
55946: PUSH
55947: LD_STRING 
55949: ST_TO_ADDR
// animal := CreateHuman ;
55950: LD_ADDR_VAR 0 12
55954: PUSH
55955: CALL_OW 44
55959: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55960: LD_VAR 0 12
55964: PPUSH
55965: LD_VAR 0 9
55969: PPUSH
55970: LD_INT 0
55972: PPUSH
55973: CALL 57610 0 3
// end ;
55977: GO 55931
55979: POP
55980: POP
// end ;
55981: LD_VAR 0 10
55985: RET
// export function WantHeal ( sci , unit ) ; begin
55986: LD_INT 0
55988: PPUSH
// if GetTaskList ( sci ) > 0 then
55989: LD_VAR 0 1
55993: PPUSH
55994: CALL_OW 437
55998: PUSH
55999: LD_INT 0
56001: GREATER
56002: IFFALSE 56072
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56004: LD_VAR 0 1
56008: PPUSH
56009: CALL_OW 437
56013: PUSH
56014: LD_INT 1
56016: ARRAY
56017: PUSH
56018: LD_INT 1
56020: ARRAY
56021: PUSH
56022: LD_STRING l
56024: EQUAL
56025: PUSH
56026: LD_VAR 0 1
56030: PPUSH
56031: CALL_OW 437
56035: PUSH
56036: LD_INT 1
56038: ARRAY
56039: PUSH
56040: LD_INT 4
56042: ARRAY
56043: PUSH
56044: LD_VAR 0 2
56048: EQUAL
56049: AND
56050: IFFALSE 56062
// result := true else
56052: LD_ADDR_VAR 0 3
56056: PUSH
56057: LD_INT 1
56059: ST_TO_ADDR
56060: GO 56070
// result := false ;
56062: LD_ADDR_VAR 0 3
56066: PUSH
56067: LD_INT 0
56069: ST_TO_ADDR
// end else
56070: GO 56080
// result := false ;
56072: LD_ADDR_VAR 0 3
56076: PUSH
56077: LD_INT 0
56079: ST_TO_ADDR
// end ;
56080: LD_VAR 0 3
56084: RET
// export function HealTarget ( sci ) ; begin
56085: LD_INT 0
56087: PPUSH
// if not sci then
56088: LD_VAR 0 1
56092: NOT
56093: IFFALSE 56097
// exit ;
56095: GO 56162
// result := 0 ;
56097: LD_ADDR_VAR 0 2
56101: PUSH
56102: LD_INT 0
56104: ST_TO_ADDR
// if GetTaskList ( sci ) then
56105: LD_VAR 0 1
56109: PPUSH
56110: CALL_OW 437
56114: IFFALSE 56162
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56116: LD_VAR 0 1
56120: PPUSH
56121: CALL_OW 437
56125: PUSH
56126: LD_INT 1
56128: ARRAY
56129: PUSH
56130: LD_INT 1
56132: ARRAY
56133: PUSH
56134: LD_STRING l
56136: EQUAL
56137: IFFALSE 56162
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56139: LD_ADDR_VAR 0 2
56143: PUSH
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL_OW 437
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_INT 4
56160: ARRAY
56161: ST_TO_ADDR
// end ;
56162: LD_VAR 0 2
56166: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56167: LD_INT 0
56169: PPUSH
56170: PPUSH
56171: PPUSH
56172: PPUSH
// if not base_units then
56173: LD_VAR 0 1
56177: NOT
56178: IFFALSE 56182
// exit ;
56180: GO 56269
// result := false ;
56182: LD_ADDR_VAR 0 2
56186: PUSH
56187: LD_INT 0
56189: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56190: LD_ADDR_VAR 0 5
56194: PUSH
56195: LD_VAR 0 1
56199: PPUSH
56200: LD_INT 21
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PPUSH
56210: CALL_OW 72
56214: ST_TO_ADDR
// if not tmp then
56215: LD_VAR 0 5
56219: NOT
56220: IFFALSE 56224
// exit ;
56222: GO 56269
// for i in tmp do
56224: LD_ADDR_VAR 0 3
56228: PUSH
56229: LD_VAR 0 5
56233: PUSH
56234: FOR_IN
56235: IFFALSE 56267
// begin result := EnemyInRange ( i , 22 ) ;
56237: LD_ADDR_VAR 0 2
56241: PUSH
56242: LD_VAR 0 3
56246: PPUSH
56247: LD_INT 22
56249: PPUSH
56250: CALL 53867 0 2
56254: ST_TO_ADDR
// if result then
56255: LD_VAR 0 2
56259: IFFALSE 56265
// exit ;
56261: POP
56262: POP
56263: GO 56269
// end ;
56265: GO 56234
56267: POP
56268: POP
// end ;
56269: LD_VAR 0 2
56273: RET
// export function FilterByTag ( units , tag ) ; begin
56274: LD_INT 0
56276: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56277: LD_ADDR_VAR 0 3
56281: PUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: LD_INT 120
56289: PUSH
56290: LD_VAR 0 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PPUSH
56299: CALL_OW 72
56303: ST_TO_ADDR
// end ;
56304: LD_VAR 0 3
56308: RET
// export function IsDriver ( un ) ; begin
56309: LD_INT 0
56311: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56312: LD_ADDR_VAR 0 2
56316: PUSH
56317: LD_VAR 0 1
56321: PUSH
56322: LD_INT 55
56324: PUSH
56325: EMPTY
56326: LIST
56327: PPUSH
56328: CALL_OW 69
56332: IN
56333: ST_TO_ADDR
// end ;
56334: LD_VAR 0 2
56338: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56339: LD_INT 0
56341: PPUSH
56342: PPUSH
// list := [ ] ;
56343: LD_ADDR_VAR 0 5
56347: PUSH
56348: EMPTY
56349: ST_TO_ADDR
// case d of 0 :
56350: LD_VAR 0 3
56354: PUSH
56355: LD_INT 0
56357: DOUBLE
56358: EQUAL
56359: IFTRUE 56363
56361: GO 56496
56363: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56364: LD_ADDR_VAR 0 5
56368: PUSH
56369: LD_VAR 0 1
56373: PUSH
56374: LD_INT 4
56376: MINUS
56377: PUSH
56378: LD_VAR 0 2
56382: PUSH
56383: LD_INT 4
56385: MINUS
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: LIST
56394: PUSH
56395: LD_VAR 0 1
56399: PUSH
56400: LD_INT 3
56402: MINUS
56403: PUSH
56404: LD_VAR 0 2
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: PUSH
56417: LD_VAR 0 1
56421: PUSH
56422: LD_INT 4
56424: PLUS
56425: PUSH
56426: LD_VAR 0 2
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: PUSH
56439: LD_VAR 0 1
56443: PUSH
56444: LD_INT 3
56446: PLUS
56447: PUSH
56448: LD_VAR 0 2
56452: PUSH
56453: LD_INT 3
56455: PLUS
56456: PUSH
56457: LD_INT 5
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: PUSH
56465: LD_VAR 0 1
56469: PUSH
56470: LD_VAR 0 2
56474: PUSH
56475: LD_INT 4
56477: PLUS
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// end ; 1 :
56494: GO 57194
56496: LD_INT 1
56498: DOUBLE
56499: EQUAL
56500: IFTRUE 56504
56502: GO 56637
56504: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56505: LD_ADDR_VAR 0 5
56509: PUSH
56510: LD_VAR 0 1
56514: PUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_INT 4
56522: MINUS
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: LD_VAR 0 1
56536: PUSH
56537: LD_INT 3
56539: MINUS
56540: PUSH
56541: LD_VAR 0 2
56545: PUSH
56546: LD_INT 3
56548: MINUS
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: PUSH
56558: LD_VAR 0 1
56562: PUSH
56563: LD_INT 4
56565: MINUS
56566: PUSH
56567: LD_VAR 0 2
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: PUSH
56580: LD_VAR 0 1
56584: PUSH
56585: LD_VAR 0 2
56589: PUSH
56590: LD_INT 3
56592: PLUS
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: PUSH
56602: LD_VAR 0 1
56606: PUSH
56607: LD_INT 4
56609: PLUS
56610: PUSH
56611: LD_VAR 0 2
56615: PUSH
56616: LD_INT 4
56618: PLUS
56619: PUSH
56620: LD_INT 5
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// end ; 2 :
56635: GO 57194
56637: LD_INT 2
56639: DOUBLE
56640: EQUAL
56641: IFTRUE 56645
56643: GO 56774
56645: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56646: LD_ADDR_VAR 0 5
56650: PUSH
56651: LD_VAR 0 1
56655: PUSH
56656: LD_VAR 0 2
56660: PUSH
56661: LD_INT 3
56663: MINUS
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: LD_VAR 0 1
56677: PUSH
56678: LD_INT 4
56680: PLUS
56681: PUSH
56682: LD_VAR 0 2
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: LD_VAR 0 1
56699: PUSH
56700: LD_VAR 0 2
56704: PUSH
56705: LD_INT 4
56707: PLUS
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: PUSH
56717: LD_VAR 0 1
56721: PUSH
56722: LD_INT 3
56724: MINUS
56725: PUSH
56726: LD_VAR 0 2
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: PUSH
56739: LD_VAR 0 1
56743: PUSH
56744: LD_INT 4
56746: MINUS
56747: PUSH
56748: LD_VAR 0 2
56752: PUSH
56753: LD_INT 4
56755: MINUS
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// end ; 3 :
56772: GO 57194
56774: LD_INT 3
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56782
56780: GO 56915
56782: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56783: LD_ADDR_VAR 0 5
56787: PUSH
56788: LD_VAR 0 1
56792: PUSH
56793: LD_INT 3
56795: PLUS
56796: PUSH
56797: LD_VAR 0 2
56801: PUSH
56802: LD_INT 4
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: PUSH
56810: LD_VAR 0 1
56814: PUSH
56815: LD_INT 4
56817: PLUS
56818: PUSH
56819: LD_VAR 0 2
56823: PUSH
56824: LD_INT 4
56826: PLUS
56827: PUSH
56828: LD_INT 5
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: PUSH
56836: LD_VAR 0 1
56840: PUSH
56841: LD_INT 4
56843: MINUS
56844: PUSH
56845: LD_VAR 0 2
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: PUSH
56858: LD_VAR 0 1
56862: PUSH
56863: LD_VAR 0 2
56867: PUSH
56868: LD_INT 4
56870: MINUS
56871: PUSH
56872: LD_INT 3
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: PUSH
56880: LD_VAR 0 1
56884: PUSH
56885: LD_INT 3
56887: MINUS
56888: PUSH
56889: LD_VAR 0 2
56893: PUSH
56894: LD_INT 3
56896: MINUS
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// end ; 4 :
56913: GO 57194
56915: LD_INT 4
56917: DOUBLE
56918: EQUAL
56919: IFTRUE 56923
56921: GO 57056
56923: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56924: LD_ADDR_VAR 0 5
56928: PUSH
56929: LD_VAR 0 1
56933: PUSH
56934: LD_VAR 0 2
56938: PUSH
56939: LD_INT 4
56941: PLUS
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: PUSH
56951: LD_VAR 0 1
56955: PUSH
56956: LD_INT 3
56958: PLUS
56959: PUSH
56960: LD_VAR 0 2
56964: PUSH
56965: LD_INT 3
56967: PLUS
56968: PUSH
56969: LD_INT 5
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: PUSH
56977: LD_VAR 0 1
56981: PUSH
56982: LD_INT 4
56984: PLUS
56985: PUSH
56986: LD_VAR 0 2
56990: PUSH
56991: LD_INT 4
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: PUSH
56999: LD_VAR 0 1
57003: PUSH
57004: LD_VAR 0 2
57008: PUSH
57009: LD_INT 3
57011: MINUS
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: PUSH
57021: LD_VAR 0 1
57025: PUSH
57026: LD_INT 4
57028: MINUS
57029: PUSH
57030: LD_VAR 0 2
57034: PUSH
57035: LD_INT 4
57037: MINUS
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// end ; 5 :
57054: GO 57194
57056: LD_INT 5
57058: DOUBLE
57059: EQUAL
57060: IFTRUE 57064
57062: GO 57193
57064: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57065: LD_ADDR_VAR 0 5
57069: PUSH
57070: LD_VAR 0 1
57074: PUSH
57075: LD_INT 4
57077: MINUS
57078: PUSH
57079: LD_VAR 0 2
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: PUSH
57092: LD_VAR 0 1
57096: PUSH
57097: LD_VAR 0 2
57101: PUSH
57102: LD_INT 4
57104: MINUS
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: PUSH
57114: LD_VAR 0 1
57118: PUSH
57119: LD_INT 4
57121: PLUS
57122: PUSH
57123: LD_VAR 0 2
57127: PUSH
57128: LD_INT 4
57130: PLUS
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: PUSH
57140: LD_VAR 0 1
57144: PUSH
57145: LD_INT 3
57147: PLUS
57148: PUSH
57149: LD_VAR 0 2
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: LIST
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: LD_VAR 0 2
57171: PUSH
57172: LD_INT 3
57174: PLUS
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// end ; end ;
57191: GO 57194
57193: POP
// result := list ;
57194: LD_ADDR_VAR 0 4
57198: PUSH
57199: LD_VAR 0 5
57203: ST_TO_ADDR
// end ;
57204: LD_VAR 0 4
57208: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57209: LD_INT 0
57211: PPUSH
57212: PPUSH
57213: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57214: LD_VAR 0 1
57218: NOT
57219: PUSH
57220: LD_VAR 0 2
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: IN
57243: NOT
57244: OR
57245: IFFALSE 57249
// exit ;
57247: GO 57332
// tmp := [ ] ;
57249: LD_ADDR_VAR 0 5
57253: PUSH
57254: EMPTY
57255: ST_TO_ADDR
// for i in units do
57256: LD_ADDR_VAR 0 4
57260: PUSH
57261: LD_VAR 0 1
57265: PUSH
57266: FOR_IN
57267: IFFALSE 57301
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57269: LD_ADDR_VAR 0 5
57273: PUSH
57274: LD_VAR 0 5
57278: PPUSH
57279: LD_VAR 0 4
57283: PPUSH
57284: LD_VAR 0 2
57288: PPUSH
57289: CALL_OW 259
57293: PPUSH
57294: CALL 58705 0 2
57298: ST_TO_ADDR
57299: GO 57266
57301: POP
57302: POP
// if not tmp then
57303: LD_VAR 0 5
57307: NOT
57308: IFFALSE 57312
// exit ;
57310: GO 57332
// result := SortListByListDesc ( units , tmp ) ;
57312: LD_ADDR_VAR 0 3
57316: PUSH
57317: LD_VAR 0 1
57321: PPUSH
57322: LD_VAR 0 5
57326: PPUSH
57327: CALL_OW 77
57331: ST_TO_ADDR
// end ;
57332: LD_VAR 0 3
57336: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
57341: PPUSH
// result := false ;
57342: LD_ADDR_VAR 0 3
57346: PUSH
57347: LD_INT 0
57349: ST_TO_ADDR
// if not building then
57350: LD_VAR 0 2
57354: NOT
57355: IFFALSE 57359
// exit ;
57357: GO 57497
// x := GetX ( building ) ;
57359: LD_ADDR_VAR 0 4
57363: PUSH
57364: LD_VAR 0 2
57368: PPUSH
57369: CALL_OW 250
57373: ST_TO_ADDR
// y := GetY ( building ) ;
57374: LD_ADDR_VAR 0 5
57378: PUSH
57379: LD_VAR 0 2
57383: PPUSH
57384: CALL_OW 251
57388: ST_TO_ADDR
// if not x or not y then
57389: LD_VAR 0 4
57393: NOT
57394: PUSH
57395: LD_VAR 0 5
57399: NOT
57400: OR
57401: IFFALSE 57405
// exit ;
57403: GO 57497
// if GetTaskList ( unit ) then
57405: LD_VAR 0 1
57409: PPUSH
57410: CALL_OW 437
57414: IFFALSE 57497
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57416: LD_STRING e
57418: PUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: CALL_OW 437
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PUSH
57433: LD_INT 1
57435: ARRAY
57436: EQUAL
57437: PUSH
57438: LD_VAR 0 4
57442: PUSH
57443: LD_VAR 0 1
57447: PPUSH
57448: CALL_OW 437
57452: PUSH
57453: LD_INT 1
57455: ARRAY
57456: PUSH
57457: LD_INT 2
57459: ARRAY
57460: EQUAL
57461: AND
57462: PUSH
57463: LD_VAR 0 5
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 437
57477: PUSH
57478: LD_INT 1
57480: ARRAY
57481: PUSH
57482: LD_INT 3
57484: ARRAY
57485: EQUAL
57486: AND
57487: IFFALSE 57497
// result := true end ;
57489: LD_ADDR_VAR 0 3
57493: PUSH
57494: LD_INT 1
57496: ST_TO_ADDR
// end ;
57497: LD_VAR 0 3
57501: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57502: LD_INT 0
57504: PPUSH
// result := false ;
57505: LD_ADDR_VAR 0 4
57509: PUSH
57510: LD_INT 0
57512: ST_TO_ADDR
// if GetTaskList ( unit ) then
57513: LD_VAR 0 1
57517: PPUSH
57518: CALL_OW 437
57522: IFFALSE 57605
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57524: LD_STRING M
57526: PUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 437
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: EQUAL
57545: PUSH
57546: LD_VAR 0 2
57550: PUSH
57551: LD_VAR 0 1
57555: PPUSH
57556: CALL_OW 437
57560: PUSH
57561: LD_INT 1
57563: ARRAY
57564: PUSH
57565: LD_INT 2
57567: ARRAY
57568: EQUAL
57569: AND
57570: PUSH
57571: LD_VAR 0 3
57575: PUSH
57576: LD_VAR 0 1
57580: PPUSH
57581: CALL_OW 437
57585: PUSH
57586: LD_INT 1
57588: ARRAY
57589: PUSH
57590: LD_INT 3
57592: ARRAY
57593: EQUAL
57594: AND
57595: IFFALSE 57605
// result := true ;
57597: LD_ADDR_VAR 0 4
57601: PUSH
57602: LD_INT 1
57604: ST_TO_ADDR
// end ; end ;
57605: LD_VAR 0 4
57609: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57610: LD_INT 0
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
// if not unit or not area then
57616: LD_VAR 0 1
57620: NOT
57621: PUSH
57622: LD_VAR 0 2
57626: NOT
57627: OR
57628: IFFALSE 57632
// exit ;
57630: GO 57808
// tmp := AreaToList ( area , i ) ;
57632: LD_ADDR_VAR 0 6
57636: PUSH
57637: LD_VAR 0 2
57641: PPUSH
57642: LD_VAR 0 5
57646: PPUSH
57647: CALL_OW 517
57651: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: DOUBLE
57658: LD_INT 1
57660: DEC
57661: ST_TO_ADDR
57662: LD_VAR 0 6
57666: PUSH
57667: LD_INT 1
57669: ARRAY
57670: PUSH
57671: FOR_TO
57672: IFFALSE 57806
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57674: LD_ADDR_VAR 0 7
57678: PUSH
57679: LD_VAR 0 6
57683: PUSH
57684: LD_INT 1
57686: ARRAY
57687: PUSH
57688: LD_VAR 0 5
57692: ARRAY
57693: PUSH
57694: LD_VAR 0 6
57698: PUSH
57699: LD_INT 2
57701: ARRAY
57702: PUSH
57703: LD_VAR 0 5
57707: ARRAY
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57713: LD_INT 92
57715: PUSH
57716: LD_VAR 0 7
57720: PUSH
57721: LD_INT 1
57723: ARRAY
57724: PUSH
57725: LD_VAR 0 7
57729: PUSH
57730: LD_INT 2
57732: ARRAY
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: PPUSH
57743: CALL_OW 69
57747: PUSH
57748: LD_INT 0
57750: EQUAL
57751: IFFALSE 57804
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57753: LD_VAR 0 1
57757: PPUSH
57758: LD_VAR 0 7
57762: PUSH
57763: LD_INT 1
57765: ARRAY
57766: PPUSH
57767: LD_VAR 0 7
57771: PUSH
57772: LD_INT 2
57774: ARRAY
57775: PPUSH
57776: LD_VAR 0 3
57780: PPUSH
57781: CALL_OW 48
// result := IsPlaced ( unit ) ;
57785: LD_ADDR_VAR 0 4
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 305
57799: ST_TO_ADDR
// exit ;
57800: POP
57801: POP
57802: GO 57808
// end ; end ;
57804: GO 57671
57806: POP
57807: POP
// end ;
57808: LD_VAR 0 4
57812: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57813: LD_INT 0
57815: PPUSH
57816: PPUSH
57817: PPUSH
// if not side or side > 8 then
57818: LD_VAR 0 1
57822: NOT
57823: PUSH
57824: LD_VAR 0 1
57828: PUSH
57829: LD_INT 8
57831: GREATER
57832: OR
57833: IFFALSE 57837
// exit ;
57835: GO 58024
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57837: LD_ADDR_VAR 0 4
57841: PUSH
57842: LD_INT 22
57844: PUSH
57845: LD_VAR 0 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 21
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PPUSH
57868: CALL_OW 69
57872: ST_TO_ADDR
// if not tmp then
57873: LD_VAR 0 4
57877: NOT
57878: IFFALSE 57882
// exit ;
57880: GO 58024
// enable_addtolog := true ;
57882: LD_ADDR_OWVAR 81
57886: PUSH
57887: LD_INT 1
57889: ST_TO_ADDR
// AddToLog ( [ ) ;
57890: LD_STRING [
57892: PPUSH
57893: CALL_OW 561
// for i in tmp do
57897: LD_ADDR_VAR 0 3
57901: PUSH
57902: LD_VAR 0 4
57906: PUSH
57907: FOR_IN
57908: IFFALSE 58015
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57910: LD_STRING [
57912: PUSH
57913: LD_VAR 0 3
57917: PPUSH
57918: CALL_OW 266
57922: STR
57923: PUSH
57924: LD_STRING , 
57926: STR
57927: PUSH
57928: LD_VAR 0 3
57932: PPUSH
57933: CALL_OW 250
57937: STR
57938: PUSH
57939: LD_STRING , 
57941: STR
57942: PUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: CALL_OW 251
57952: STR
57953: PUSH
57954: LD_STRING , 
57956: STR
57957: PUSH
57958: LD_VAR 0 3
57962: PPUSH
57963: CALL_OW 254
57967: STR
57968: PUSH
57969: LD_STRING , 
57971: STR
57972: PUSH
57973: LD_VAR 0 3
57977: PPUSH
57978: LD_INT 1
57980: PPUSH
57981: CALL_OW 268
57985: STR
57986: PUSH
57987: LD_STRING , 
57989: STR
57990: PUSH
57991: LD_VAR 0 3
57995: PPUSH
57996: LD_INT 2
57998: PPUSH
57999: CALL_OW 268
58003: STR
58004: PUSH
58005: LD_STRING ],
58007: STR
58008: PPUSH
58009: CALL_OW 561
// end ;
58013: GO 57907
58015: POP
58016: POP
// AddToLog ( ]; ) ;
58017: LD_STRING ];
58019: PPUSH
58020: CALL_OW 561
// end ;
58024: LD_VAR 0 2
58028: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58029: LD_INT 0
58031: PPUSH
58032: PPUSH
58033: PPUSH
58034: PPUSH
58035: PPUSH
// if not area or not rate or not max then
58036: LD_VAR 0 1
58040: NOT
58041: PUSH
58042: LD_VAR 0 2
58046: NOT
58047: OR
58048: PUSH
58049: LD_VAR 0 4
58053: NOT
58054: OR
58055: IFFALSE 58059
// exit ;
58057: GO 58248
// while 1 do
58059: LD_INT 1
58061: IFFALSE 58248
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58063: LD_ADDR_VAR 0 9
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: LD_INT 1
58075: PPUSH
58076: CALL_OW 287
58080: PUSH
58081: LD_INT 10
58083: MUL
58084: ST_TO_ADDR
// r := rate / 10 ;
58085: LD_ADDR_VAR 0 7
58089: PUSH
58090: LD_VAR 0 2
58094: PUSH
58095: LD_INT 10
58097: DIVREAL
58098: ST_TO_ADDR
// time := 1 1$00 ;
58099: LD_ADDR_VAR 0 8
58103: PUSH
58104: LD_INT 2100
58106: ST_TO_ADDR
// if amount < min then
58107: LD_VAR 0 9
58111: PUSH
58112: LD_VAR 0 3
58116: LESS
58117: IFFALSE 58135
// r := r * 2 else
58119: LD_ADDR_VAR 0 7
58123: PUSH
58124: LD_VAR 0 7
58128: PUSH
58129: LD_INT 2
58131: MUL
58132: ST_TO_ADDR
58133: GO 58161
// if amount > max then
58135: LD_VAR 0 9
58139: PUSH
58140: LD_VAR 0 4
58144: GREATER
58145: IFFALSE 58161
// r := r / 2 ;
58147: LD_ADDR_VAR 0 7
58151: PUSH
58152: LD_VAR 0 7
58156: PUSH
58157: LD_INT 2
58159: DIVREAL
58160: ST_TO_ADDR
// time := time / r ;
58161: LD_ADDR_VAR 0 8
58165: PUSH
58166: LD_VAR 0 8
58170: PUSH
58171: LD_VAR 0 7
58175: DIVREAL
58176: ST_TO_ADDR
// if time < 0 then
58177: LD_VAR 0 8
58181: PUSH
58182: LD_INT 0
58184: LESS
58185: IFFALSE 58202
// time := time * - 1 ;
58187: LD_ADDR_VAR 0 8
58191: PUSH
58192: LD_VAR 0 8
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: MUL
58201: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58202: LD_VAR 0 8
58206: PUSH
58207: LD_INT 35
58209: PPUSH
58210: LD_INT 875
58212: PPUSH
58213: CALL_OW 12
58217: PLUS
58218: PPUSH
58219: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58223: LD_INT 1
58225: PPUSH
58226: LD_INT 5
58228: PPUSH
58229: CALL_OW 12
58233: PPUSH
58234: LD_VAR 0 1
58238: PPUSH
58239: LD_INT 1
58241: PPUSH
58242: CALL_OW 55
// end ;
58246: GO 58059
// end ;
58248: LD_VAR 0 5
58252: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58253: LD_INT 0
58255: PPUSH
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
// if not turrets or not factories then
58263: LD_VAR 0 1
58267: NOT
58268: PUSH
58269: LD_VAR 0 2
58273: NOT
58274: OR
58275: IFFALSE 58279
// exit ;
58277: GO 58586
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58279: LD_ADDR_VAR 0 10
58283: PUSH
58284: LD_INT 5
58286: PUSH
58287: LD_INT 6
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 5
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 24
58321: PUSH
58322: LD_INT 25
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 23
58331: PUSH
58332: LD_INT 27
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 42
58345: PUSH
58346: LD_INT 43
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 44
58355: PUSH
58356: LD_INT 46
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 45
58365: PUSH
58366: LD_INT 47
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: ST_TO_ADDR
// result := [ ] ;
58383: LD_ADDR_VAR 0 3
58387: PUSH
58388: EMPTY
58389: ST_TO_ADDR
// for i in turrets do
58390: LD_ADDR_VAR 0 4
58394: PUSH
58395: LD_VAR 0 1
58399: PUSH
58400: FOR_IN
58401: IFFALSE 58584
// begin nat := GetNation ( i ) ;
58403: LD_ADDR_VAR 0 7
58407: PUSH
58408: LD_VAR 0 4
58412: PPUSH
58413: CALL_OW 248
58417: ST_TO_ADDR
// weapon := 0 ;
58418: LD_ADDR_VAR 0 8
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// if not nat then
58426: LD_VAR 0 7
58430: NOT
58431: IFFALSE 58435
// continue ;
58433: GO 58400
// for j in list [ nat ] do
58435: LD_ADDR_VAR 0 5
58439: PUSH
58440: LD_VAR 0 10
58444: PUSH
58445: LD_VAR 0 7
58449: ARRAY
58450: PUSH
58451: FOR_IN
58452: IFFALSE 58493
// if GetBWeapon ( i ) = j [ 1 ] then
58454: LD_VAR 0 4
58458: PPUSH
58459: CALL_OW 269
58463: PUSH
58464: LD_VAR 0 5
58468: PUSH
58469: LD_INT 1
58471: ARRAY
58472: EQUAL
58473: IFFALSE 58491
// begin weapon := j [ 2 ] ;
58475: LD_ADDR_VAR 0 8
58479: PUSH
58480: LD_VAR 0 5
58484: PUSH
58485: LD_INT 2
58487: ARRAY
58488: ST_TO_ADDR
// break ;
58489: GO 58493
// end ;
58491: GO 58451
58493: POP
58494: POP
// if not weapon then
58495: LD_VAR 0 8
58499: NOT
58500: IFFALSE 58504
// continue ;
58502: GO 58400
// for k in factories do
58504: LD_ADDR_VAR 0 6
58508: PUSH
58509: LD_VAR 0 2
58513: PUSH
58514: FOR_IN
58515: IFFALSE 58580
// begin weapons := AvailableWeaponList ( k ) ;
58517: LD_ADDR_VAR 0 9
58521: PUSH
58522: LD_VAR 0 6
58526: PPUSH
58527: CALL_OW 478
58531: ST_TO_ADDR
// if not weapons then
58532: LD_VAR 0 9
58536: NOT
58537: IFFALSE 58541
// continue ;
58539: GO 58514
// if weapon in weapons then
58541: LD_VAR 0 8
58545: PUSH
58546: LD_VAR 0 9
58550: IN
58551: IFFALSE 58578
// begin result := [ i , weapon ] ;
58553: LD_ADDR_VAR 0 3
58557: PUSH
58558: LD_VAR 0 4
58562: PUSH
58563: LD_VAR 0 8
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// exit ;
58572: POP
58573: POP
58574: POP
58575: POP
58576: GO 58586
// end ; end ;
58578: GO 58514
58580: POP
58581: POP
// end ;
58582: GO 58400
58584: POP
58585: POP
// end ;
58586: LD_VAR 0 3
58590: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58591: LD_INT 0
58593: PPUSH
// if not side or side > 8 then
58594: LD_VAR 0 3
58598: NOT
58599: PUSH
58600: LD_VAR 0 3
58604: PUSH
58605: LD_INT 8
58607: GREATER
58608: OR
58609: IFFALSE 58613
// exit ;
58611: GO 58672
// if not range then
58613: LD_VAR 0 4
58617: NOT
58618: IFFALSE 58629
// range := - 12 ;
58620: LD_ADDR_VAR 0 4
58624: PUSH
58625: LD_INT 12
58627: NEG
58628: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58629: LD_VAR 0 1
58633: PPUSH
58634: LD_VAR 0 2
58638: PPUSH
58639: LD_VAR 0 3
58643: PPUSH
58644: LD_VAR 0 4
58648: PPUSH
58649: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58653: LD_VAR 0 1
58657: PPUSH
58658: LD_VAR 0 2
58662: PPUSH
58663: LD_VAR 0 3
58667: PPUSH
58668: CALL_OW 331
// end ;
58672: LD_VAR 0 5
58676: RET
// export function Video ( mode ) ; begin
58677: LD_INT 0
58679: PPUSH
// ingame_video = mode ;
58680: LD_ADDR_OWVAR 52
58684: PUSH
58685: LD_VAR 0 1
58689: ST_TO_ADDR
// interface_hidden = mode ;
58690: LD_ADDR_OWVAR 54
58694: PUSH
58695: LD_VAR 0 1
58699: ST_TO_ADDR
// end ;
58700: LD_VAR 0 2
58704: RET
// export function Join ( array , element ) ; begin
58705: LD_INT 0
58707: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58708: LD_ADDR_VAR 0 3
58712: PUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: LD_VAR 0 1
58722: PUSH
58723: LD_INT 1
58725: PLUS
58726: PPUSH
58727: LD_VAR 0 2
58731: PPUSH
58732: CALL_OW 1
58736: ST_TO_ADDR
// end ;
58737: LD_VAR 0 3
58741: RET
// export function JoinUnion ( array , element ) ; begin
58742: LD_INT 0
58744: PPUSH
// result := array union element ;
58745: LD_ADDR_VAR 0 3
58749: PUSH
58750: LD_VAR 0 1
58754: PUSH
58755: LD_VAR 0 2
58759: UNION
58760: ST_TO_ADDR
// end ;
58761: LD_VAR 0 3
58765: RET
// export function GetBehemoths ( side ) ; begin
58766: LD_INT 0
58768: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58769: LD_ADDR_VAR 0 2
58773: PUSH
58774: LD_INT 22
58776: PUSH
58777: LD_VAR 0 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 31
58788: PUSH
58789: LD_INT 25
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PPUSH
58800: CALL_OW 69
58804: ST_TO_ADDR
// end ;
58805: LD_VAR 0 2
58809: RET
// export function Shuffle ( array ) ; var i , index ; begin
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
58814: PPUSH
// result := [ ] ;
58815: LD_ADDR_VAR 0 2
58819: PUSH
58820: EMPTY
58821: ST_TO_ADDR
// if not array then
58822: LD_VAR 0 1
58826: NOT
58827: IFFALSE 58831
// exit ;
58829: GO 58930
// Randomize ;
58831: CALL_OW 10
// for i = array downto 1 do
58835: LD_ADDR_VAR 0 3
58839: PUSH
58840: DOUBLE
58841: LD_VAR 0 1
58845: INC
58846: ST_TO_ADDR
58847: LD_INT 1
58849: PUSH
58850: FOR_DOWNTO
58851: IFFALSE 58928
// begin index := rand ( 1 , array ) ;
58853: LD_ADDR_VAR 0 4
58857: PUSH
58858: LD_INT 1
58860: PPUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: CALL_OW 12
58870: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58871: LD_ADDR_VAR 0 2
58875: PUSH
58876: LD_VAR 0 2
58880: PPUSH
58881: LD_VAR 0 2
58885: PUSH
58886: LD_INT 1
58888: PLUS
58889: PPUSH
58890: LD_VAR 0 1
58894: PUSH
58895: LD_VAR 0 4
58899: ARRAY
58900: PPUSH
58901: CALL_OW 2
58905: ST_TO_ADDR
// array := Delete ( array , index ) ;
58906: LD_ADDR_VAR 0 1
58910: PUSH
58911: LD_VAR 0 1
58915: PPUSH
58916: LD_VAR 0 4
58920: PPUSH
58921: CALL_OW 3
58925: ST_TO_ADDR
// end ;
58926: GO 58850
58928: POP
58929: POP
// end ;
58930: LD_VAR 0 2
58934: RET
// export function GetBaseMaterials ( base ) ; begin
58935: LD_INT 0
58937: PPUSH
// result := [ 0 , 0 , 0 ] ;
58938: LD_ADDR_VAR 0 2
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// if not base then
58957: LD_VAR 0 1
58961: NOT
58962: IFFALSE 58966
// exit ;
58964: GO 59015
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58966: LD_ADDR_VAR 0 2
58970: PUSH
58971: LD_VAR 0 1
58975: PPUSH
58976: LD_INT 1
58978: PPUSH
58979: CALL_OW 275
58983: PUSH
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_INT 2
58991: PPUSH
58992: CALL_OW 275
58996: PUSH
58997: LD_VAR 0 1
59001: PPUSH
59002: LD_INT 3
59004: PPUSH
59005: CALL_OW 275
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// end ;
59015: LD_VAR 0 2
59019: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59020: LD_INT 0
59022: PPUSH
59023: PPUSH
// result := array ;
59024: LD_ADDR_VAR 0 3
59028: PUSH
59029: LD_VAR 0 1
59033: ST_TO_ADDR
// if size >= result then
59034: LD_VAR 0 2
59038: PUSH
59039: LD_VAR 0 3
59043: GREATEREQUAL
59044: IFFALSE 59048
// exit ;
59046: GO 59098
// if size then
59048: LD_VAR 0 2
59052: IFFALSE 59098
// for i := array downto size do
59054: LD_ADDR_VAR 0 4
59058: PUSH
59059: DOUBLE
59060: LD_VAR 0 1
59064: INC
59065: ST_TO_ADDR
59066: LD_VAR 0 2
59070: PUSH
59071: FOR_DOWNTO
59072: IFFALSE 59096
// result := Delete ( result , result ) ;
59074: LD_ADDR_VAR 0 3
59078: PUSH
59079: LD_VAR 0 3
59083: PPUSH
59084: LD_VAR 0 3
59088: PPUSH
59089: CALL_OW 3
59093: ST_TO_ADDR
59094: GO 59071
59096: POP
59097: POP
// end ;
59098: LD_VAR 0 3
59102: RET
// export function ComExit ( unit ) ; var tmp ; begin
59103: LD_INT 0
59105: PPUSH
59106: PPUSH
// if not IsInUnit ( unit ) then
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 310
59116: NOT
59117: IFFALSE 59121
// exit ;
59119: GO 59181
// tmp := IsInUnit ( unit ) ;
59121: LD_ADDR_VAR 0 3
59125: PUSH
59126: LD_VAR 0 1
59130: PPUSH
59131: CALL_OW 310
59135: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59136: LD_VAR 0 3
59140: PPUSH
59141: CALL_OW 247
59145: PUSH
59146: LD_INT 2
59148: EQUAL
59149: IFFALSE 59162
// ComExitVehicle ( unit ) else
59151: LD_VAR 0 1
59155: PPUSH
59156: CALL_OW 121
59160: GO 59171
// ComExitBuilding ( unit ) ;
59162: LD_VAR 0 1
59166: PPUSH
59167: CALL_OW 122
// result := tmp ;
59171: LD_ADDR_VAR 0 2
59175: PUSH
59176: LD_VAR 0 3
59180: ST_TO_ADDR
// end ;
59181: LD_VAR 0 2
59185: RET
// export function ComExitAll ( units ) ; var i ; begin
59186: LD_INT 0
59188: PPUSH
59189: PPUSH
// if not units then
59190: LD_VAR 0 1
59194: NOT
59195: IFFALSE 59199
// exit ;
59197: GO 59225
// for i in units do
59199: LD_ADDR_VAR 0 3
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: FOR_IN
59210: IFFALSE 59223
// ComExit ( i ) ;
59212: LD_VAR 0 3
59216: PPUSH
59217: CALL 59103 0 1
59221: GO 59209
59223: POP
59224: POP
// end ;
59225: LD_VAR 0 2
59229: RET
// export function ResetHc ; begin
59230: LD_INT 0
59232: PPUSH
// InitHc ;
59233: CALL_OW 19
// hc_importance := 0 ;
59237: LD_ADDR_OWVAR 32
59241: PUSH
59242: LD_INT 0
59244: ST_TO_ADDR
// end ;
59245: LD_VAR 0 1
59249: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
59254: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59255: LD_ADDR_VAR 0 6
59259: PUSH
59260: LD_VAR 0 1
59264: PUSH
59265: LD_VAR 0 3
59269: PLUS
59270: PUSH
59271: LD_INT 2
59273: DIV
59274: ST_TO_ADDR
// if _x < 0 then
59275: LD_VAR 0 6
59279: PUSH
59280: LD_INT 0
59282: LESS
59283: IFFALSE 59300
// _x := _x * - 1 ;
59285: LD_ADDR_VAR 0 6
59289: PUSH
59290: LD_VAR 0 6
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: MUL
59299: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59300: LD_ADDR_VAR 0 7
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_VAR 0 4
59314: PLUS
59315: PUSH
59316: LD_INT 2
59318: DIV
59319: ST_TO_ADDR
// if _y < 0 then
59320: LD_VAR 0 7
59324: PUSH
59325: LD_INT 0
59327: LESS
59328: IFFALSE 59345
// _y := _y * - 1 ;
59330: LD_ADDR_VAR 0 7
59334: PUSH
59335: LD_VAR 0 7
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: MUL
59344: ST_TO_ADDR
// result := [ _x , _y ] ;
59345: LD_ADDR_VAR 0 5
59349: PUSH
59350: LD_VAR 0 6
59354: PUSH
59355: LD_VAR 0 7
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 5
59368: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
59374: PPUSH
// task := GetTaskList ( unit ) ;
59375: LD_ADDR_VAR 0 7
59379: PUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: CALL_OW 437
59389: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59390: LD_VAR 0 7
59394: NOT
59395: PUSH
59396: LD_VAR 0 1
59400: PPUSH
59401: LD_VAR 0 2
59405: PPUSH
59406: CALL_OW 308
59410: NOT
59411: AND
59412: IFFALSE 59416
// exit ;
59414: GO 59534
// if IsInArea ( unit , area ) then
59416: LD_VAR 0 1
59420: PPUSH
59421: LD_VAR 0 2
59425: PPUSH
59426: CALL_OW 308
59430: IFFALSE 59448
// begin ComMoveToArea ( unit , goAway ) ;
59432: LD_VAR 0 1
59436: PPUSH
59437: LD_VAR 0 3
59441: PPUSH
59442: CALL_OW 113
// exit ;
59446: GO 59534
// end ; if task [ 1 ] [ 1 ] <> M then
59448: LD_VAR 0 7
59452: PUSH
59453: LD_INT 1
59455: ARRAY
59456: PUSH
59457: LD_INT 1
59459: ARRAY
59460: PUSH
59461: LD_STRING M
59463: NONEQUAL
59464: IFFALSE 59468
// exit ;
59466: GO 59534
// x := task [ 1 ] [ 2 ] ;
59468: LD_ADDR_VAR 0 5
59472: PUSH
59473: LD_VAR 0 7
59477: PUSH
59478: LD_INT 1
59480: ARRAY
59481: PUSH
59482: LD_INT 2
59484: ARRAY
59485: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59486: LD_ADDR_VAR 0 6
59490: PUSH
59491: LD_VAR 0 7
59495: PUSH
59496: LD_INT 1
59498: ARRAY
59499: PUSH
59500: LD_INT 3
59502: ARRAY
59503: ST_TO_ADDR
// if InArea ( x , y , area ) then
59504: LD_VAR 0 5
59508: PPUSH
59509: LD_VAR 0 6
59513: PPUSH
59514: LD_VAR 0 2
59518: PPUSH
59519: CALL_OW 309
59523: IFFALSE 59534
// ComStop ( unit ) ;
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL_OW 141
// end ;
59534: LD_VAR 0 4
59538: RET
// export function Abs ( value ) ; begin
59539: LD_INT 0
59541: PPUSH
// result := value ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: LD_VAR 0 1
59551: ST_TO_ADDR
// if value < 0 then
59552: LD_VAR 0 1
59556: PUSH
59557: LD_INT 0
59559: LESS
59560: IFFALSE 59577
// result := value * - 1 ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_VAR 0 1
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: MUL
59576: ST_TO_ADDR
// end ;
59577: LD_VAR 0 2
59581: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59582: LD_INT 0
59584: PPUSH
59585: PPUSH
59586: PPUSH
59587: PPUSH
59588: PPUSH
59589: PPUSH
59590: PPUSH
59591: PPUSH
// if not unit or not building then
59592: LD_VAR 0 1
59596: NOT
59597: PUSH
59598: LD_VAR 0 2
59602: NOT
59603: OR
59604: IFFALSE 59608
// exit ;
59606: GO 59834
// x := GetX ( building ) ;
59608: LD_ADDR_VAR 0 4
59612: PUSH
59613: LD_VAR 0 2
59617: PPUSH
59618: CALL_OW 250
59622: ST_TO_ADDR
// y := GetY ( building ) ;
59623: LD_ADDR_VAR 0 6
59627: PUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: CALL_OW 251
59637: ST_TO_ADDR
// d := GetDir ( building ) ;
59638: LD_ADDR_VAR 0 8
59642: PUSH
59643: LD_VAR 0 2
59647: PPUSH
59648: CALL_OW 254
59652: ST_TO_ADDR
// r := 4 ;
59653: LD_ADDR_VAR 0 9
59657: PUSH
59658: LD_INT 4
59660: ST_TO_ADDR
// for i := 1 to 5 do
59661: LD_ADDR_VAR 0 10
59665: PUSH
59666: DOUBLE
59667: LD_INT 1
59669: DEC
59670: ST_TO_ADDR
59671: LD_INT 5
59673: PUSH
59674: FOR_TO
59675: IFFALSE 59832
// begin _x := ShiftX ( x , d , r + i ) ;
59677: LD_ADDR_VAR 0 5
59681: PUSH
59682: LD_VAR 0 4
59686: PPUSH
59687: LD_VAR 0 8
59691: PPUSH
59692: LD_VAR 0 9
59696: PUSH
59697: LD_VAR 0 10
59701: PLUS
59702: PPUSH
59703: CALL_OW 272
59707: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59708: LD_ADDR_VAR 0 7
59712: PUSH
59713: LD_VAR 0 6
59717: PPUSH
59718: LD_VAR 0 8
59722: PPUSH
59723: LD_VAR 0 9
59727: PUSH
59728: LD_VAR 0 10
59732: PLUS
59733: PPUSH
59734: CALL_OW 273
59738: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59739: LD_VAR 0 5
59743: PPUSH
59744: LD_VAR 0 7
59748: PPUSH
59749: CALL_OW 488
59753: PUSH
59754: LD_VAR 0 5
59758: PPUSH
59759: LD_VAR 0 7
59763: PPUSH
59764: CALL_OW 428
59768: PPUSH
59769: CALL_OW 247
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: IN
59784: NOT
59785: AND
59786: IFFALSE 59830
// begin ComMoveXY ( unit , _x , _y ) ;
59788: LD_VAR 0 1
59792: PPUSH
59793: LD_VAR 0 5
59797: PPUSH
59798: LD_VAR 0 7
59802: PPUSH
59803: CALL_OW 111
// result := [ _x , _y ] ;
59807: LD_ADDR_VAR 0 3
59811: PUSH
59812: LD_VAR 0 5
59816: PUSH
59817: LD_VAR 0 7
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: ST_TO_ADDR
// exit ;
59826: POP
59827: POP
59828: GO 59834
// end ; end ;
59830: GO 59674
59832: POP
59833: POP
// end ;
59834: LD_VAR 0 3
59838: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59839: LD_INT 0
59841: PPUSH
59842: PPUSH
59843: PPUSH
// result := 0 ;
59844: LD_ADDR_VAR 0 3
59848: PUSH
59849: LD_INT 0
59851: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59852: LD_VAR 0 1
59856: PUSH
59857: LD_INT 0
59859: LESS
59860: PUSH
59861: LD_VAR 0 1
59865: PUSH
59866: LD_INT 8
59868: GREATER
59869: OR
59870: PUSH
59871: LD_VAR 0 2
59875: PUSH
59876: LD_INT 0
59878: LESS
59879: OR
59880: PUSH
59881: LD_VAR 0 2
59885: PUSH
59886: LD_INT 8
59888: GREATER
59889: OR
59890: IFFALSE 59894
// exit ;
59892: GO 59969
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59894: LD_ADDR_VAR 0 4
59898: PUSH
59899: LD_INT 22
59901: PUSH
59902: LD_VAR 0 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PPUSH
59911: CALL_OW 69
59915: PUSH
59916: FOR_IN
59917: IFFALSE 59967
// begin un := UnitShoot ( i ) ;
59919: LD_ADDR_VAR 0 5
59923: PUSH
59924: LD_VAR 0 4
59928: PPUSH
59929: CALL_OW 504
59933: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59934: LD_VAR 0 5
59938: PPUSH
59939: CALL_OW 255
59943: PUSH
59944: LD_VAR 0 1
59948: EQUAL
59949: IFFALSE 59965
// begin result := un ;
59951: LD_ADDR_VAR 0 3
59955: PUSH
59956: LD_VAR 0 5
59960: ST_TO_ADDR
// exit ;
59961: POP
59962: POP
59963: GO 59969
// end ; end ;
59965: GO 59916
59967: POP
59968: POP
// end ;
59969: LD_VAR 0 3
59973: RET
// export function GetCargoBay ( units ) ; begin
59974: LD_INT 0
59976: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59977: LD_ADDR_VAR 0 2
59981: PUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 34
59992: PUSH
59993: LD_INT 12
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 34
60002: PUSH
60003: LD_INT 51
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 34
60012: PUSH
60013: LD_INT 32
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 34
60022: PUSH
60023: LD_INT 89
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: PPUSH
60037: CALL_OW 72
60041: ST_TO_ADDR
// end ;
60042: LD_VAR 0 2
60046: RET
// export function Negate ( value ) ; begin
60047: LD_INT 0
60049: PPUSH
// result := not value ;
60050: LD_ADDR_VAR 0 2
60054: PUSH
60055: LD_VAR 0 1
60059: NOT
60060: ST_TO_ADDR
// end ;
60061: LD_VAR 0 2
60065: RET
// export function Inc ( value ) ; begin
60066: LD_INT 0
60068: PPUSH
// result := value + 1 ;
60069: LD_ADDR_VAR 0 2
60073: PUSH
60074: LD_VAR 0 1
60078: PUSH
60079: LD_INT 1
60081: PLUS
60082: ST_TO_ADDR
// end ;
60083: LD_VAR 0 2
60087: RET
// export function Dec ( value ) ; begin
60088: LD_INT 0
60090: PPUSH
// result := value - 1 ;
60091: LD_ADDR_VAR 0 2
60095: PUSH
60096: LD_VAR 0 1
60100: PUSH
60101: LD_INT 1
60103: MINUS
60104: ST_TO_ADDR
// end ;
60105: LD_VAR 0 2
60109: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60110: LD_INT 0
60112: PPUSH
60113: PPUSH
60114: PPUSH
60115: PPUSH
60116: PPUSH
60117: PPUSH
60118: PPUSH
60119: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_VAR 0 2
60129: PPUSH
60130: CALL_OW 488
60134: NOT
60135: PUSH
60136: LD_VAR 0 3
60140: PPUSH
60141: LD_VAR 0 4
60145: PPUSH
60146: CALL_OW 488
60150: NOT
60151: OR
60152: IFFALSE 60165
// begin result := - 1 ;
60154: LD_ADDR_VAR 0 5
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: ST_TO_ADDR
// exit ;
60163: GO 60400
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60165: LD_ADDR_VAR 0 12
60169: PUSH
60170: LD_VAR 0 1
60174: PPUSH
60175: LD_VAR 0 2
60179: PPUSH
60180: LD_VAR 0 3
60184: PPUSH
60185: LD_VAR 0 4
60189: PPUSH
60190: CALL 59250 0 4
60194: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60195: LD_ADDR_VAR 0 11
60199: PUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: LD_VAR 0 2
60209: PPUSH
60210: LD_VAR 0 12
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PPUSH
60219: LD_VAR 0 12
60223: PUSH
60224: LD_INT 2
60226: ARRAY
60227: PPUSH
60228: CALL_OW 298
60232: ST_TO_ADDR
// distance := 9999 ;
60233: LD_ADDR_VAR 0 10
60237: PUSH
60238: LD_INT 9999
60240: ST_TO_ADDR
// for i := 0 to 5 do
60241: LD_ADDR_VAR 0 6
60245: PUSH
60246: DOUBLE
60247: LD_INT 0
60249: DEC
60250: ST_TO_ADDR
60251: LD_INT 5
60253: PUSH
60254: FOR_TO
60255: IFFALSE 60398
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60257: LD_ADDR_VAR 0 7
60261: PUSH
60262: LD_VAR 0 1
60266: PPUSH
60267: LD_VAR 0 6
60271: PPUSH
60272: LD_VAR 0 11
60276: PPUSH
60277: CALL_OW 272
60281: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60282: LD_ADDR_VAR 0 8
60286: PUSH
60287: LD_VAR 0 2
60291: PPUSH
60292: LD_VAR 0 6
60296: PPUSH
60297: LD_VAR 0 11
60301: PPUSH
60302: CALL_OW 273
60306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60307: LD_VAR 0 7
60311: PPUSH
60312: LD_VAR 0 8
60316: PPUSH
60317: CALL_OW 488
60321: NOT
60322: IFFALSE 60326
// continue ;
60324: GO 60254
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60326: LD_ADDR_VAR 0 9
60330: PUSH
60331: LD_VAR 0 12
60335: PUSH
60336: LD_INT 1
60338: ARRAY
60339: PPUSH
60340: LD_VAR 0 12
60344: PUSH
60345: LD_INT 2
60347: ARRAY
60348: PPUSH
60349: LD_VAR 0 7
60353: PPUSH
60354: LD_VAR 0 8
60358: PPUSH
60359: CALL_OW 298
60363: ST_TO_ADDR
// if tmp < distance then
60364: LD_VAR 0 9
60368: PUSH
60369: LD_VAR 0 10
60373: LESS
60374: IFFALSE 60396
// begin result := i ;
60376: LD_ADDR_VAR 0 5
60380: PUSH
60381: LD_VAR 0 6
60385: ST_TO_ADDR
// distance := tmp ;
60386: LD_ADDR_VAR 0 10
60390: PUSH
60391: LD_VAR 0 9
60395: ST_TO_ADDR
// end ; end ;
60396: GO 60254
60398: POP
60399: POP
// end ;
60400: LD_VAR 0 5
60404: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60405: LD_INT 0
60407: PPUSH
60408: PPUSH
// if not driver or not IsInUnit ( driver ) then
60409: LD_VAR 0 1
60413: NOT
60414: PUSH
60415: LD_VAR 0 1
60419: PPUSH
60420: CALL_OW 310
60424: NOT
60425: OR
60426: IFFALSE 60430
// exit ;
60428: GO 60520
// vehicle := IsInUnit ( driver ) ;
60430: LD_ADDR_VAR 0 3
60434: PUSH
60435: LD_VAR 0 1
60439: PPUSH
60440: CALL_OW 310
60444: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60445: LD_VAR 0 1
60449: PPUSH
60450: LD_STRING \
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: LD_STRING E
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_VAR 0 3
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PPUSH
60516: CALL_OW 446
// end ;
60520: LD_VAR 0 2
60524: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60525: LD_INT 0
60527: PPUSH
60528: PPUSH
// if not driver or not IsInUnit ( driver ) then
60529: LD_VAR 0 1
60533: NOT
60534: PUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 310
60544: NOT
60545: OR
60546: IFFALSE 60550
// exit ;
60548: GO 60640
// vehicle := IsInUnit ( driver ) ;
60550: LD_ADDR_VAR 0 3
60554: PUSH
60555: LD_VAR 0 1
60559: PPUSH
60560: CALL_OW 310
60564: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60565: LD_VAR 0 1
60569: PPUSH
60570: LD_STRING \
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: PUSH
60600: LD_STRING E
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_VAR 0 3
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PPUSH
60636: CALL_OW 447
// end ;
60640: LD_VAR 0 2
60644: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
60649: PPUSH
// tmp := [ ] ;
60650: LD_ADDR_VAR 0 5
60654: PUSH
60655: EMPTY
60656: ST_TO_ADDR
// for i in units do
60657: LD_ADDR_VAR 0 4
60661: PUSH
60662: LD_VAR 0 1
60666: PUSH
60667: FOR_IN
60668: IFFALSE 60706
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60670: LD_ADDR_VAR 0 5
60674: PUSH
60675: LD_VAR 0 5
60679: PPUSH
60680: LD_VAR 0 5
60684: PUSH
60685: LD_INT 1
60687: PLUS
60688: PPUSH
60689: LD_VAR 0 4
60693: PPUSH
60694: CALL_OW 256
60698: PPUSH
60699: CALL_OW 2
60703: ST_TO_ADDR
60704: GO 60667
60706: POP
60707: POP
// if not tmp then
60708: LD_VAR 0 5
60712: NOT
60713: IFFALSE 60717
// exit ;
60715: GO 60765
// if asc then
60717: LD_VAR 0 2
60721: IFFALSE 60745
// result := SortListByListAsc ( units , tmp ) else
60723: LD_ADDR_VAR 0 3
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: LD_VAR 0 5
60737: PPUSH
60738: CALL_OW 76
60742: ST_TO_ADDR
60743: GO 60765
// result := SortListByListDesc ( units , tmp ) ;
60745: LD_ADDR_VAR 0 3
60749: PUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: LD_VAR 0 5
60759: PPUSH
60760: CALL_OW 77
60764: ST_TO_ADDR
// end ;
60765: LD_VAR 0 3
60769: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60770: LD_INT 0
60772: PPUSH
60773: PPUSH
// task := GetTaskList ( mech ) ;
60774: LD_ADDR_VAR 0 4
60778: PUSH
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL_OW 437
60788: ST_TO_ADDR
// if not task then
60789: LD_VAR 0 4
60793: NOT
60794: IFFALSE 60798
// exit ;
60796: GO 60840
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: LD_VAR 0 4
60807: PUSH
60808: LD_INT 1
60810: ARRAY
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: PUSH
60816: LD_STRING r
60818: EQUAL
60819: PUSH
60820: LD_VAR 0 4
60824: PUSH
60825: LD_INT 1
60827: ARRAY
60828: PUSH
60829: LD_INT 4
60831: ARRAY
60832: PUSH
60833: LD_VAR 0 2
60837: EQUAL
60838: AND
60839: ST_TO_ADDR
// end ;
60840: LD_VAR 0 3
60844: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60845: LD_INT 0
60847: PPUSH
// SetDir ( unit , d ) ;
60848: LD_VAR 0 1
60852: PPUSH
60853: LD_VAR 0 4
60857: PPUSH
60858: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60862: LD_VAR 0 1
60866: PPUSH
60867: LD_VAR 0 2
60871: PPUSH
60872: LD_VAR 0 3
60876: PPUSH
60877: LD_VAR 0 5
60881: PPUSH
60882: CALL_OW 48
// end ;
60886: LD_VAR 0 6
60890: RET
// export function ToNaturalNumber ( number ) ; begin
60891: LD_INT 0
60893: PPUSH
// result := number div 1 ;
60894: LD_ADDR_VAR 0 2
60898: PUSH
60899: LD_VAR 0 1
60903: PUSH
60904: LD_INT 1
60906: DIV
60907: ST_TO_ADDR
// if number < 0 then
60908: LD_VAR 0 1
60912: PUSH
60913: LD_INT 0
60915: LESS
60916: IFFALSE 60926
// result := 0 ;
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_INT 0
60925: ST_TO_ADDR
// end ;
60926: LD_VAR 0 2
60930: RET
// export function SortByClass ( units , class ) ; var un ; begin
60931: LD_INT 0
60933: PPUSH
60934: PPUSH
// if not units or not class then
60935: LD_VAR 0 1
60939: NOT
60940: PUSH
60941: LD_VAR 0 2
60945: NOT
60946: OR
60947: IFFALSE 60951
// exit ;
60949: GO 61046
// result := [ ] ;
60951: LD_ADDR_VAR 0 3
60955: PUSH
60956: EMPTY
60957: ST_TO_ADDR
// for un in units do
60958: LD_ADDR_VAR 0 4
60962: PUSH
60963: LD_VAR 0 1
60967: PUSH
60968: FOR_IN
60969: IFFALSE 61044
// if GetClass ( un ) = class then
60971: LD_VAR 0 4
60975: PPUSH
60976: CALL_OW 257
60980: PUSH
60981: LD_VAR 0 2
60985: EQUAL
60986: IFFALSE 61013
// result := Insert ( result , 1 , un ) else
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_VAR 0 3
60997: PPUSH
60998: LD_INT 1
61000: PPUSH
61001: LD_VAR 0 4
61005: PPUSH
61006: CALL_OW 2
61010: ST_TO_ADDR
61011: GO 61042
// result := Replace ( result , result + 1 , un ) ;
61013: LD_ADDR_VAR 0 3
61017: PUSH
61018: LD_VAR 0 3
61022: PPUSH
61023: LD_VAR 0 3
61027: PUSH
61028: LD_INT 1
61030: PLUS
61031: PPUSH
61032: LD_VAR 0 4
61036: PPUSH
61037: CALL_OW 1
61041: ST_TO_ADDR
61042: GO 60968
61044: POP
61045: POP
// end ;
61046: LD_VAR 0 3
61050: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61051: LD_INT 0
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
61058: PPUSH
61059: PPUSH
// result := [ ] ;
61060: LD_ADDR_VAR 0 4
61064: PUSH
61065: EMPTY
61066: ST_TO_ADDR
// if x - r < 0 then
61067: LD_VAR 0 1
61071: PUSH
61072: LD_VAR 0 3
61076: MINUS
61077: PUSH
61078: LD_INT 0
61080: LESS
61081: IFFALSE 61093
// min_x := 0 else
61083: LD_ADDR_VAR 0 8
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
61091: GO 61109
// min_x := x - r ;
61093: LD_ADDR_VAR 0 8
61097: PUSH
61098: LD_VAR 0 1
61102: PUSH
61103: LD_VAR 0 3
61107: MINUS
61108: ST_TO_ADDR
// if y - r < 0 then
61109: LD_VAR 0 2
61113: PUSH
61114: LD_VAR 0 3
61118: MINUS
61119: PUSH
61120: LD_INT 0
61122: LESS
61123: IFFALSE 61135
// min_y := 0 else
61125: LD_ADDR_VAR 0 7
61129: PUSH
61130: LD_INT 0
61132: ST_TO_ADDR
61133: GO 61151
// min_y := y - r ;
61135: LD_ADDR_VAR 0 7
61139: PUSH
61140: LD_VAR 0 2
61144: PUSH
61145: LD_VAR 0 3
61149: MINUS
61150: ST_TO_ADDR
// max_x := x + r ;
61151: LD_ADDR_VAR 0 9
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_VAR 0 3
61165: PLUS
61166: ST_TO_ADDR
// max_y := y + r ;
61167: LD_ADDR_VAR 0 10
61171: PUSH
61172: LD_VAR 0 2
61176: PUSH
61177: LD_VAR 0 3
61181: PLUS
61182: ST_TO_ADDR
// for _x = min_x to max_x do
61183: LD_ADDR_VAR 0 5
61187: PUSH
61188: DOUBLE
61189: LD_VAR 0 8
61193: DEC
61194: ST_TO_ADDR
61195: LD_VAR 0 9
61199: PUSH
61200: FOR_TO
61201: IFFALSE 61302
// for _y = min_y to max_y do
61203: LD_ADDR_VAR 0 6
61207: PUSH
61208: DOUBLE
61209: LD_VAR 0 7
61213: DEC
61214: ST_TO_ADDR
61215: LD_VAR 0 10
61219: PUSH
61220: FOR_TO
61221: IFFALSE 61298
// begin if not ValidHex ( _x , _y ) then
61223: LD_VAR 0 5
61227: PPUSH
61228: LD_VAR 0 6
61232: PPUSH
61233: CALL_OW 488
61237: NOT
61238: IFFALSE 61242
// continue ;
61240: GO 61220
// if GetResourceTypeXY ( _x , _y ) then
61242: LD_VAR 0 5
61246: PPUSH
61247: LD_VAR 0 6
61251: PPUSH
61252: CALL_OW 283
61256: IFFALSE 61296
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61258: LD_ADDR_VAR 0 4
61262: PUSH
61263: LD_VAR 0 4
61267: PPUSH
61268: LD_VAR 0 4
61272: PUSH
61273: LD_INT 1
61275: PLUS
61276: PPUSH
61277: LD_VAR 0 5
61281: PUSH
61282: LD_VAR 0 6
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PPUSH
61291: CALL_OW 1
61295: ST_TO_ADDR
// end ;
61296: GO 61220
61298: POP
61299: POP
61300: GO 61200
61302: POP
61303: POP
// end ;
61304: LD_VAR 0 4
61308: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61309: LD_INT 0
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
61317: PPUSH
61318: PPUSH
// if not units then
61319: LD_VAR 0 1
61323: NOT
61324: IFFALSE 61328
// exit ;
61326: GO 61852
// result := UnitFilter ( units , [ f_ok ] ) ;
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_INT 50
61340: PUSH
61341: EMPTY
61342: LIST
61343: PPUSH
61344: CALL_OW 72
61348: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61349: LD_ADDR_VAR 0 8
61353: PUSH
61354: LD_VAR 0 1
61358: PUSH
61359: LD_INT 1
61361: ARRAY
61362: PPUSH
61363: CALL_OW 255
61367: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61368: LD_ADDR_VAR 0 10
61372: PUSH
61373: LD_INT 29
61375: PUSH
61376: LD_INT 91
61378: PUSH
61379: LD_INT 49
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// if not result then
61387: LD_VAR 0 3
61391: NOT
61392: IFFALSE 61396
// exit ;
61394: GO 61852
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61396: LD_ADDR_VAR 0 5
61400: PUSH
61401: LD_INT 81
61403: PUSH
61404: LD_VAR 0 8
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PPUSH
61413: CALL_OW 69
61417: ST_TO_ADDR
// for i in result do
61418: LD_ADDR_VAR 0 4
61422: PUSH
61423: LD_VAR 0 3
61427: PUSH
61428: FOR_IN
61429: IFFALSE 61850
// begin tag := GetTag ( i ) + 1 ;
61431: LD_ADDR_VAR 0 9
61435: PUSH
61436: LD_VAR 0 4
61440: PPUSH
61441: CALL_OW 110
61445: PUSH
61446: LD_INT 1
61448: PLUS
61449: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61450: LD_ADDR_VAR 0 7
61454: PUSH
61455: LD_VAR 0 4
61459: PPUSH
61460: CALL_OW 250
61464: PPUSH
61465: LD_VAR 0 4
61469: PPUSH
61470: CALL_OW 251
61474: PPUSH
61475: LD_INT 6
61477: PPUSH
61478: CALL 61051 0 3
61482: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61483: LD_VAR 0 4
61487: PPUSH
61488: CALL_OW 247
61492: PUSH
61493: LD_INT 2
61495: EQUAL
61496: PUSH
61497: LD_VAR 0 7
61501: AND
61502: PUSH
61503: LD_VAR 0 4
61507: PPUSH
61508: CALL_OW 264
61512: PUSH
61513: LD_VAR 0 10
61517: IN
61518: NOT
61519: AND
61520: IFFALSE 61559
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61522: LD_VAR 0 4
61526: PPUSH
61527: LD_VAR 0 7
61531: PUSH
61532: LD_INT 1
61534: ARRAY
61535: PUSH
61536: LD_INT 1
61538: ARRAY
61539: PPUSH
61540: LD_VAR 0 7
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: PUSH
61549: LD_INT 2
61551: ARRAY
61552: PPUSH
61553: CALL_OW 116
61557: GO 61848
// if path > tag then
61559: LD_VAR 0 2
61563: PUSH
61564: LD_VAR 0 9
61568: GREATER
61569: IFFALSE 61777
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61571: LD_ADDR_VAR 0 6
61575: PUSH
61576: LD_VAR 0 5
61580: PPUSH
61581: LD_INT 91
61583: PUSH
61584: LD_VAR 0 4
61588: PUSH
61589: LD_INT 8
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: PPUSH
61597: CALL_OW 72
61601: ST_TO_ADDR
// if nearEnemy then
61602: LD_VAR 0 6
61606: IFFALSE 61675
// begin if GetWeapon ( i ) = ru_time_lapser then
61608: LD_VAR 0 4
61612: PPUSH
61613: CALL_OW 264
61617: PUSH
61618: LD_INT 49
61620: EQUAL
61621: IFFALSE 61649
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61623: LD_VAR 0 4
61627: PPUSH
61628: LD_VAR 0 6
61632: PPUSH
61633: LD_VAR 0 4
61637: PPUSH
61638: CALL_OW 74
61642: PPUSH
61643: CALL_OW 112
61647: GO 61673
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61649: LD_VAR 0 4
61653: PPUSH
61654: LD_VAR 0 6
61658: PPUSH
61659: LD_VAR 0 4
61663: PPUSH
61664: CALL_OW 74
61668: PPUSH
61669: CALL 62923 0 2
// end else
61673: GO 61775
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61675: LD_VAR 0 4
61679: PPUSH
61680: LD_VAR 0 2
61684: PUSH
61685: LD_VAR 0 9
61689: ARRAY
61690: PUSH
61691: LD_INT 1
61693: ARRAY
61694: PPUSH
61695: LD_VAR 0 2
61699: PUSH
61700: LD_VAR 0 9
61704: ARRAY
61705: PUSH
61706: LD_INT 2
61708: ARRAY
61709: PPUSH
61710: CALL_OW 297
61714: PUSH
61715: LD_INT 6
61717: GREATER
61718: IFFALSE 61761
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61720: LD_VAR 0 4
61724: PPUSH
61725: LD_VAR 0 2
61729: PUSH
61730: LD_VAR 0 9
61734: ARRAY
61735: PUSH
61736: LD_INT 1
61738: ARRAY
61739: PPUSH
61740: LD_VAR 0 2
61744: PUSH
61745: LD_VAR 0 9
61749: ARRAY
61750: PUSH
61751: LD_INT 2
61753: ARRAY
61754: PPUSH
61755: CALL_OW 114
61759: GO 61775
// SetTag ( i , tag ) ;
61761: LD_VAR 0 4
61765: PPUSH
61766: LD_VAR 0 9
61770: PPUSH
61771: CALL_OW 109
// end else
61775: GO 61848
// if enemy then
61777: LD_VAR 0 5
61781: IFFALSE 61848
// begin if GetWeapon ( i ) = ru_time_lapser then
61783: LD_VAR 0 4
61787: PPUSH
61788: CALL_OW 264
61792: PUSH
61793: LD_INT 49
61795: EQUAL
61796: IFFALSE 61824
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 5
61807: PPUSH
61808: LD_VAR 0 4
61812: PPUSH
61813: CALL_OW 74
61817: PPUSH
61818: CALL_OW 112
61822: GO 61848
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61824: LD_VAR 0 4
61828: PPUSH
61829: LD_VAR 0 5
61833: PPUSH
61834: LD_VAR 0 4
61838: PPUSH
61839: CALL_OW 74
61843: PPUSH
61844: CALL 62923 0 2
// end ; end ;
61848: GO 61428
61850: POP
61851: POP
// end ;
61852: LD_VAR 0 3
61856: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61857: LD_INT 0
61859: PPUSH
61860: PPUSH
61861: PPUSH
// if not unit or IsInUnit ( unit ) then
61862: LD_VAR 0 1
61866: NOT
61867: PUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: CALL_OW 310
61877: OR
61878: IFFALSE 61882
// exit ;
61880: GO 61973
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61882: LD_ADDR_VAR 0 4
61886: PUSH
61887: LD_VAR 0 1
61891: PPUSH
61892: CALL_OW 250
61896: PPUSH
61897: LD_VAR 0 2
61901: PPUSH
61902: LD_INT 1
61904: PPUSH
61905: CALL_OW 272
61909: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61910: LD_ADDR_VAR 0 5
61914: PUSH
61915: LD_VAR 0 1
61919: PPUSH
61920: CALL_OW 251
61924: PPUSH
61925: LD_VAR 0 2
61929: PPUSH
61930: LD_INT 1
61932: PPUSH
61933: CALL_OW 273
61937: ST_TO_ADDR
// if ValidHex ( x , y ) then
61938: LD_VAR 0 4
61942: PPUSH
61943: LD_VAR 0 5
61947: PPUSH
61948: CALL_OW 488
61952: IFFALSE 61973
// ComTurnXY ( unit , x , y ) ;
61954: LD_VAR 0 1
61958: PPUSH
61959: LD_VAR 0 4
61963: PPUSH
61964: LD_VAR 0 5
61968: PPUSH
61969: CALL_OW 118
// end ;
61973: LD_VAR 0 3
61977: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61978: LD_INT 0
61980: PPUSH
61981: PPUSH
// result := false ;
61982: LD_ADDR_VAR 0 3
61986: PUSH
61987: LD_INT 0
61989: ST_TO_ADDR
// if not units then
61990: LD_VAR 0 2
61994: NOT
61995: IFFALSE 61999
// exit ;
61997: GO 62044
// for i in units do
61999: LD_ADDR_VAR 0 4
62003: PUSH
62004: LD_VAR 0 2
62008: PUSH
62009: FOR_IN
62010: IFFALSE 62042
// if See ( side , i ) then
62012: LD_VAR 0 1
62016: PPUSH
62017: LD_VAR 0 4
62021: PPUSH
62022: CALL_OW 292
62026: IFFALSE 62040
// begin result := true ;
62028: LD_ADDR_VAR 0 3
62032: PUSH
62033: LD_INT 1
62035: ST_TO_ADDR
// exit ;
62036: POP
62037: POP
62038: GO 62044
// end ;
62040: GO 62009
62042: POP
62043: POP
// end ;
62044: LD_VAR 0 3
62048: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62049: LD_INT 0
62051: PPUSH
62052: PPUSH
62053: PPUSH
62054: PPUSH
// if not unit or not points then
62055: LD_VAR 0 1
62059: NOT
62060: PUSH
62061: LD_VAR 0 2
62065: NOT
62066: OR
62067: IFFALSE 62071
// exit ;
62069: GO 62161
// dist := 99999 ;
62071: LD_ADDR_VAR 0 5
62075: PUSH
62076: LD_INT 99999
62078: ST_TO_ADDR
// for i in points do
62079: LD_ADDR_VAR 0 4
62083: PUSH
62084: LD_VAR 0 2
62088: PUSH
62089: FOR_IN
62090: IFFALSE 62159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62092: LD_ADDR_VAR 0 6
62096: PUSH
62097: LD_VAR 0 1
62101: PPUSH
62102: LD_VAR 0 4
62106: PUSH
62107: LD_INT 1
62109: ARRAY
62110: PPUSH
62111: LD_VAR 0 4
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: PPUSH
62120: CALL_OW 297
62124: ST_TO_ADDR
// if tmpDist < dist then
62125: LD_VAR 0 6
62129: PUSH
62130: LD_VAR 0 5
62134: LESS
62135: IFFALSE 62157
// begin result := i ;
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 4
62146: ST_TO_ADDR
// dist := tmpDist ;
62147: LD_ADDR_VAR 0 5
62151: PUSH
62152: LD_VAR 0 6
62156: ST_TO_ADDR
// end ; end ;
62157: GO 62089
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 3
62165: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62166: LD_INT 0
62168: PPUSH
// uc_side := side ;
62169: LD_ADDR_OWVAR 20
62173: PUSH
62174: LD_VAR 0 1
62178: ST_TO_ADDR
// uc_nation := 3 ;
62179: LD_ADDR_OWVAR 21
62183: PUSH
62184: LD_INT 3
62186: ST_TO_ADDR
// vc_chassis := 25 ;
62187: LD_ADDR_OWVAR 37
62191: PUSH
62192: LD_INT 25
62194: ST_TO_ADDR
// vc_engine := engine_siberite ;
62195: LD_ADDR_OWVAR 39
62199: PUSH
62200: LD_INT 3
62202: ST_TO_ADDR
// vc_control := control_computer ;
62203: LD_ADDR_OWVAR 38
62207: PUSH
62208: LD_INT 3
62210: ST_TO_ADDR
// vc_weapon := 59 ;
62211: LD_ADDR_OWVAR 40
62215: PUSH
62216: LD_INT 59
62218: ST_TO_ADDR
// result := CreateVehicle ;
62219: LD_ADDR_VAR 0 5
62223: PUSH
62224: CALL_OW 45
62228: ST_TO_ADDR
// SetDir ( result , d ) ;
62229: LD_VAR 0 5
62233: PPUSH
62234: LD_VAR 0 4
62238: PPUSH
62239: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62243: LD_VAR 0 5
62247: PPUSH
62248: LD_VAR 0 2
62252: PPUSH
62253: LD_VAR 0 3
62257: PPUSH
62258: LD_INT 0
62260: PPUSH
62261: CALL_OW 48
// end ;
62265: LD_VAR 0 5
62269: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62270: LD_INT 0
62272: PPUSH
62273: PPUSH
62274: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62275: LD_ADDR_VAR 0 2
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62298: LD_VAR 0 1
62302: NOT
62303: PUSH
62304: LD_VAR 0 1
62308: PPUSH
62309: CALL_OW 264
62313: PUSH
62314: LD_INT 12
62316: PUSH
62317: LD_INT 51
62319: PUSH
62320: LD_INT 32
62322: PUSH
62323: LD_INT 89
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: IN
62332: NOT
62333: OR
62334: IFFALSE 62338
// exit ;
62336: GO 62436
// for i := 1 to 3 do
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: DOUBLE
62344: LD_INT 1
62346: DEC
62347: ST_TO_ADDR
62348: LD_INT 3
62350: PUSH
62351: FOR_TO
62352: IFFALSE 62434
// begin tmp := GetCargo ( cargo , i ) ;
62354: LD_ADDR_VAR 0 4
62358: PUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: LD_VAR 0 3
62368: PPUSH
62369: CALL_OW 289
62373: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62374: LD_ADDR_VAR 0 2
62378: PUSH
62379: LD_VAR 0 2
62383: PPUSH
62384: LD_VAR 0 3
62388: PPUSH
62389: LD_VAR 0 4
62393: PPUSH
62394: CALL_OW 1
62398: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: LD_VAR 0 2
62408: PPUSH
62409: LD_INT 4
62411: PPUSH
62412: LD_VAR 0 2
62416: PUSH
62417: LD_INT 4
62419: ARRAY
62420: PUSH
62421: LD_VAR 0 4
62425: PLUS
62426: PPUSH
62427: CALL_OW 1
62431: ST_TO_ADDR
// end ;
62432: GO 62351
62434: POP
62435: POP
// end ;
62436: LD_VAR 0 2
62440: RET
// export function Length ( array ) ; begin
62441: LD_INT 0
62443: PPUSH
// result := array + 0 ;
62444: LD_ADDR_VAR 0 2
62448: PUSH
62449: LD_VAR 0 1
62453: PUSH
62454: LD_INT 0
62456: PLUS
62457: ST_TO_ADDR
// end ;
62458: LD_VAR 0 2
62462: RET
// export function PrepareArray ( array ) ; begin
62463: LD_INT 0
62465: PPUSH
// result := array diff 0 ;
62466: LD_ADDR_VAR 0 2
62470: PUSH
62471: LD_VAR 0 1
62475: PUSH
62476: LD_INT 0
62478: DIFF
62479: ST_TO_ADDR
// if not result [ 1 ] then
62480: LD_VAR 0 2
62484: PUSH
62485: LD_INT 1
62487: ARRAY
62488: NOT
62489: IFFALSE 62509
// result := Delete ( result , 1 ) ;
62491: LD_ADDR_VAR 0 2
62495: PUSH
62496: LD_VAR 0 2
62500: PPUSH
62501: LD_INT 1
62503: PPUSH
62504: CALL_OW 3
62508: ST_TO_ADDR
// end ;
62509: LD_VAR 0 2
62513: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62514: LD_INT 0
62516: PPUSH
62517: PPUSH
62518: PPUSH
62519: PPUSH
// sibRocketRange := 25 ;
62520: LD_ADDR_VAR 0 6
62524: PUSH
62525: LD_INT 25
62527: ST_TO_ADDR
// result := false ;
62528: LD_ADDR_VAR 0 4
62532: PUSH
62533: LD_INT 0
62535: ST_TO_ADDR
// for i := 0 to 5 do
62536: LD_ADDR_VAR 0 5
62540: PUSH
62541: DOUBLE
62542: LD_INT 0
62544: DEC
62545: ST_TO_ADDR
62546: LD_INT 5
62548: PUSH
62549: FOR_TO
62550: IFFALSE 62617
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62552: LD_VAR 0 1
62556: PPUSH
62557: LD_VAR 0 5
62561: PPUSH
62562: LD_VAR 0 6
62566: PPUSH
62567: CALL_OW 272
62571: PPUSH
62572: LD_VAR 0 2
62576: PPUSH
62577: LD_VAR 0 5
62581: PPUSH
62582: LD_VAR 0 6
62586: PPUSH
62587: CALL_OW 273
62591: PPUSH
62592: LD_VAR 0 3
62596: PPUSH
62597: CALL_OW 309
62601: IFFALSE 62615
// begin result := true ;
62603: LD_ADDR_VAR 0 4
62607: PUSH
62608: LD_INT 1
62610: ST_TO_ADDR
// exit ;
62611: POP
62612: POP
62613: GO 62619
// end ;
62615: GO 62549
62617: POP
62618: POP
// end ;
62619: LD_VAR 0 4
62623: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62624: LD_INT 0
62626: PPUSH
62627: PPUSH
62628: PPUSH
// if btype = b_depot then
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 0
62636: EQUAL
62637: IFFALSE 62649
// begin result := true ;
62639: LD_ADDR_VAR 0 3
62643: PUSH
62644: LD_INT 1
62646: ST_TO_ADDR
// exit ;
62647: GO 62765
// end ; pom := GetBase ( depot ) ;
62649: LD_ADDR_VAR 0 4
62653: PUSH
62654: LD_VAR 0 1
62658: PPUSH
62659: CALL_OW 274
62663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62664: LD_ADDR_VAR 0 5
62668: PUSH
62669: LD_VAR 0 2
62673: PPUSH
62674: LD_VAR 0 1
62678: PPUSH
62679: CALL_OW 248
62683: PPUSH
62684: CALL_OW 450
62688: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62689: LD_ADDR_VAR 0 3
62693: PUSH
62694: LD_VAR 0 4
62698: PPUSH
62699: LD_INT 1
62701: PPUSH
62702: CALL_OW 275
62706: PUSH
62707: LD_VAR 0 5
62711: PUSH
62712: LD_INT 1
62714: ARRAY
62715: GREATEREQUAL
62716: PUSH
62717: LD_VAR 0 4
62721: PPUSH
62722: LD_INT 2
62724: PPUSH
62725: CALL_OW 275
62729: PUSH
62730: LD_VAR 0 5
62734: PUSH
62735: LD_INT 2
62737: ARRAY
62738: GREATEREQUAL
62739: AND
62740: PUSH
62741: LD_VAR 0 4
62745: PPUSH
62746: LD_INT 3
62748: PPUSH
62749: CALL_OW 275
62753: PUSH
62754: LD_VAR 0 5
62758: PUSH
62759: LD_INT 3
62761: ARRAY
62762: GREATEREQUAL
62763: AND
62764: ST_TO_ADDR
// end ;
62765: LD_VAR 0 3
62769: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62770: LD_INT 0
62772: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62773: LD_VAR 0 1
62777: PPUSH
62778: LD_VAR 0 2
62782: PPUSH
62783: LD_INT 0
62785: PPUSH
62786: LD_INT 0
62788: PPUSH
62789: LD_INT 1
62791: PPUSH
62792: LD_INT 0
62794: PPUSH
62795: CALL_OW 587
// end ;
62799: LD_VAR 0 3
62803: RET
// export function CenterOnNow ( unit ) ; begin
62804: LD_INT 0
62806: PPUSH
// result := IsInUnit ( unit ) ;
62807: LD_ADDR_VAR 0 2
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: CALL_OW 310
62821: ST_TO_ADDR
// if not result then
62822: LD_VAR 0 2
62826: NOT
62827: IFFALSE 62839
// result := unit ;
62829: LD_ADDR_VAR 0 2
62833: PUSH
62834: LD_VAR 0 1
62838: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62839: LD_VAR 0 1
62843: PPUSH
62844: CALL_OW 87
// end ;
62848: LD_VAR 0 2
62852: RET
// export function ComMoveHex ( unit , hex ) ; begin
62853: LD_INT 0
62855: PPUSH
// if not hex then
62856: LD_VAR 0 2
62860: NOT
62861: IFFALSE 62865
// exit ;
62863: GO 62918
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62865: LD_VAR 0 2
62869: PUSH
62870: LD_INT 1
62872: ARRAY
62873: PPUSH
62874: LD_VAR 0 2
62878: PUSH
62879: LD_INT 2
62881: ARRAY
62882: PPUSH
62883: CALL_OW 428
62887: IFFALSE 62891
// exit ;
62889: GO 62918
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62891: LD_VAR 0 1
62895: PPUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_INT 1
62903: ARRAY
62904: PPUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 2
62912: ARRAY
62913: PPUSH
62914: CALL_OW 111
// end ;
62918: LD_VAR 0 3
62922: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62923: LD_INT 0
62925: PPUSH
62926: PPUSH
62927: PPUSH
// if not unit or not enemy then
62928: LD_VAR 0 1
62932: NOT
62933: PUSH
62934: LD_VAR 0 2
62938: NOT
62939: OR
62940: IFFALSE 62944
// exit ;
62942: GO 63068
// x := GetX ( enemy ) ;
62944: LD_ADDR_VAR 0 4
62948: PUSH
62949: LD_VAR 0 2
62953: PPUSH
62954: CALL_OW 250
62958: ST_TO_ADDR
// y := GetY ( enemy ) ;
62959: LD_ADDR_VAR 0 5
62963: PUSH
62964: LD_VAR 0 2
62968: PPUSH
62969: CALL_OW 251
62973: ST_TO_ADDR
// if ValidHex ( x , y ) then
62974: LD_VAR 0 4
62978: PPUSH
62979: LD_VAR 0 5
62983: PPUSH
62984: CALL_OW 488
62988: IFFALSE 63068
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62990: LD_VAR 0 2
62994: PPUSH
62995: CALL_OW 247
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: IN
63010: PUSH
63011: LD_VAR 0 1
63015: PPUSH
63016: CALL_OW 255
63020: PPUSH
63021: LD_VAR 0 2
63025: PPUSH
63026: CALL_OW 292
63030: OR
63031: IFFALSE 63049
// ComAttackUnit ( unit , enemy ) else
63033: LD_VAR 0 1
63037: PPUSH
63038: LD_VAR 0 2
63042: PPUSH
63043: CALL_OW 115
63047: GO 63068
// ComAgressiveMove ( unit , x , y ) ;
63049: LD_VAR 0 1
63053: PPUSH
63054: LD_VAR 0 4
63058: PPUSH
63059: LD_VAR 0 5
63063: PPUSH
63064: CALL_OW 114
// end ;
63068: LD_VAR 0 3
63072: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63073: LD_INT 0
63075: PPUSH
63076: PPUSH
63077: PPUSH
// list := AreaToList ( area , 0 ) ;
63078: LD_ADDR_VAR 0 5
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: LD_INT 0
63090: PPUSH
63091: CALL_OW 517
63095: ST_TO_ADDR
// if not list then
63096: LD_VAR 0 5
63100: NOT
63101: IFFALSE 63105
// exit ;
63103: GO 63235
// if all then
63105: LD_VAR 0 2
63109: IFFALSE 63197
// begin for i := 1 to list [ 1 ] do
63111: LD_ADDR_VAR 0 4
63115: PUSH
63116: DOUBLE
63117: LD_INT 1
63119: DEC
63120: ST_TO_ADDR
63121: LD_VAR 0 5
63125: PUSH
63126: LD_INT 1
63128: ARRAY
63129: PUSH
63130: FOR_TO
63131: IFFALSE 63193
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63133: LD_ADDR_VAR 0 3
63137: PUSH
63138: LD_VAR 0 3
63142: PPUSH
63143: LD_VAR 0 3
63147: PUSH
63148: LD_INT 1
63150: PLUS
63151: PPUSH
63152: LD_VAR 0 5
63156: PUSH
63157: LD_INT 1
63159: ARRAY
63160: PUSH
63161: LD_VAR 0 4
63165: ARRAY
63166: PUSH
63167: LD_VAR 0 5
63171: PUSH
63172: LD_INT 2
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 4
63180: ARRAY
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PPUSH
63186: CALL_OW 1
63190: ST_TO_ADDR
63191: GO 63130
63193: POP
63194: POP
// exit ;
63195: GO 63235
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63197: LD_ADDR_VAR 0 3
63201: PUSH
63202: LD_VAR 0 5
63206: PUSH
63207: LD_INT 1
63209: ARRAY
63210: PUSH
63211: LD_INT 1
63213: ARRAY
63214: PUSH
63215: LD_VAR 0 5
63219: PUSH
63220: LD_INT 2
63222: ARRAY
63223: PUSH
63224: LD_INT 1
63226: ARRAY
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: ST_TO_ADDR
// end ;
63235: LD_VAR 0 3
63239: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63240: LD_INT 0
63242: PPUSH
63243: PPUSH
// list := AreaToList ( area , 0 ) ;
63244: LD_ADDR_VAR 0 4
63248: PUSH
63249: LD_VAR 0 1
63253: PPUSH
63254: LD_INT 0
63256: PPUSH
63257: CALL_OW 517
63261: ST_TO_ADDR
// if not list then
63262: LD_VAR 0 4
63266: NOT
63267: IFFALSE 63271
// exit ;
63269: GO 63312
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63271: LD_ADDR_VAR 0 3
63275: PUSH
63276: LD_VAR 0 4
63280: PUSH
63281: LD_INT 1
63283: ARRAY
63284: PUSH
63285: LD_INT 1
63287: ARRAY
63288: PUSH
63289: LD_VAR 0 4
63293: PUSH
63294: LD_INT 2
63296: ARRAY
63297: PUSH
63298: LD_INT 1
63300: ARRAY
63301: PUSH
63302: LD_VAR 0 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: ST_TO_ADDR
// end ;
63312: LD_VAR 0 3
63316: RET
// export function First ( array ) ; begin
63317: LD_INT 0
63319: PPUSH
// if not array then
63320: LD_VAR 0 1
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63343
// result := array [ 1 ] ;
63329: LD_ADDR_VAR 0 2
63333: PUSH
63334: LD_VAR 0 1
63338: PUSH
63339: LD_INT 1
63341: ARRAY
63342: ST_TO_ADDR
// end ;
63343: LD_VAR 0 2
63347: RET
// export function Last ( array ) ; begin
63348: LD_INT 0
63350: PPUSH
// if not array then
63351: LD_VAR 0 1
63355: NOT
63356: IFFALSE 63360
// exit ;
63358: GO 63376
// result := array [ array ] ;
63360: LD_ADDR_VAR 0 2
63364: PUSH
63365: LD_VAR 0 1
63369: PUSH
63370: LD_VAR 0 1
63374: ARRAY
63375: ST_TO_ADDR
// end ;
63376: LD_VAR 0 2
63380: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63381: LD_INT 0
63383: PPUSH
63384: PPUSH
// result := [ ] ;
63385: LD_ADDR_VAR 0 5
63389: PUSH
63390: EMPTY
63391: ST_TO_ADDR
// if not array then
63392: LD_VAR 0 1
63396: NOT
63397: IFFALSE 63401
// exit ;
63399: GO 63513
// for i := 1 to array do
63401: LD_ADDR_VAR 0 6
63405: PUSH
63406: DOUBLE
63407: LD_INT 1
63409: DEC
63410: ST_TO_ADDR
63411: LD_VAR 0 1
63415: PUSH
63416: FOR_TO
63417: IFFALSE 63511
// if array [ i ] [ index ] = value then
63419: LD_VAR 0 1
63423: PUSH
63424: LD_VAR 0 6
63428: ARRAY
63429: PUSH
63430: LD_VAR 0 2
63434: ARRAY
63435: PUSH
63436: LD_VAR 0 3
63440: EQUAL
63441: IFFALSE 63509
// begin if indexColumn then
63443: LD_VAR 0 4
63447: IFFALSE 63483
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63449: LD_ADDR_VAR 0 5
63453: PUSH
63454: LD_VAR 0 5
63458: PPUSH
63459: LD_VAR 0 1
63463: PUSH
63464: LD_VAR 0 6
63468: ARRAY
63469: PUSH
63470: LD_VAR 0 4
63474: ARRAY
63475: PPUSH
63476: CALL 58705 0 2
63480: ST_TO_ADDR
63481: GO 63509
// result := Join ( result , array [ i ] ) ;
63483: LD_ADDR_VAR 0 5
63487: PUSH
63488: LD_VAR 0 5
63492: PPUSH
63493: LD_VAR 0 1
63497: PUSH
63498: LD_VAR 0 6
63502: ARRAY
63503: PPUSH
63504: CALL 58705 0 2
63508: ST_TO_ADDR
// end ;
63509: GO 63416
63511: POP
63512: POP
// end ;
63513: LD_VAR 0 5
63517: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63518: LD_INT 0
63520: PPUSH
// if not vehicles or not parkingPoint then
63521: LD_VAR 0 1
63525: NOT
63526: PUSH
63527: LD_VAR 0 2
63531: NOT
63532: OR
63533: IFFALSE 63537
// exit ;
63535: GO 63635
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63537: LD_ADDR_VAR 0 1
63541: PUSH
63542: LD_VAR 0 1
63546: PPUSH
63547: LD_INT 50
63549: PUSH
63550: EMPTY
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 92
63558: PUSH
63559: LD_VAR 0 2
63563: PUSH
63564: LD_INT 1
63566: ARRAY
63567: PUSH
63568: LD_VAR 0 2
63572: PUSH
63573: LD_INT 2
63575: ARRAY
63576: PUSH
63577: LD_INT 8
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PPUSH
63594: CALL_OW 72
63598: ST_TO_ADDR
// if not vehicles then
63599: LD_VAR 0 1
63603: NOT
63604: IFFALSE 63608
// exit ;
63606: GO 63635
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63608: LD_VAR 0 1
63612: PPUSH
63613: LD_VAR 0 2
63617: PUSH
63618: LD_INT 1
63620: ARRAY
63621: PPUSH
63622: LD_VAR 0 2
63626: PUSH
63627: LD_INT 2
63629: ARRAY
63630: PPUSH
63631: CALL_OW 111
// end ;
63635: LD_VAR 0 3
63639: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63640: LD_INT 0
63642: PPUSH
63643: PPUSH
63644: PPUSH
// if not side or not area then
63645: LD_VAR 0 1
63649: NOT
63650: PUSH
63651: LD_VAR 0 2
63655: NOT
63656: OR
63657: IFFALSE 63661
// exit ;
63659: GO 63780
// tmp := AreaToList ( area , 0 ) ;
63661: LD_ADDR_VAR 0 5
63665: PUSH
63666: LD_VAR 0 2
63670: PPUSH
63671: LD_INT 0
63673: PPUSH
63674: CALL_OW 517
63678: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63679: LD_ADDR_VAR 0 4
63683: PUSH
63684: DOUBLE
63685: LD_INT 1
63687: DEC
63688: ST_TO_ADDR
63689: LD_VAR 0 5
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PUSH
63698: FOR_TO
63699: IFFALSE 63778
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63701: LD_VAR 0 5
63705: PUSH
63706: LD_INT 1
63708: ARRAY
63709: PUSH
63710: LD_VAR 0 4
63714: ARRAY
63715: PPUSH
63716: LD_VAR 0 5
63720: PUSH
63721: LD_INT 2
63723: ARRAY
63724: PUSH
63725: LD_VAR 0 4
63729: ARRAY
63730: PPUSH
63731: CALL_OW 351
63735: IFFALSE 63776
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63737: LD_VAR 0 5
63741: PUSH
63742: LD_INT 1
63744: ARRAY
63745: PUSH
63746: LD_VAR 0 4
63750: ARRAY
63751: PPUSH
63752: LD_VAR 0 5
63756: PUSH
63757: LD_INT 2
63759: ARRAY
63760: PUSH
63761: LD_VAR 0 4
63765: ARRAY
63766: PPUSH
63767: LD_VAR 0 1
63771: PPUSH
63772: CALL_OW 244
// end ;
63776: GO 63698
63778: POP
63779: POP
// end ;
63780: LD_VAR 0 3
63784: RET
