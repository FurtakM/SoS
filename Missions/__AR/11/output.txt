// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 58
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// You := 1 ;
  46: LD_ADDR_EXP 1
  50: PUSH
  51: LD_INT 1
  53: ST_TO_ADDR
// You2 := 4 ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_INT 4
  61: ST_TO_ADDR
// Arabi := 2 ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_INT 2
  69: ST_TO_ADDR
// Arabi2 := 5 ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_INT 5
  77: ST_TO_ADDR
// SET_DIFFICULTY ;
  78: CALL 24824 0 0
// load_postavy ;
  82: CALL 1529 0 0
// dodej_skily ;
  86: CALL 8381 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
  90: LD_ADDR_EXP 5
  94: PUSH
  95: LD_EXP 3
  99: PPUSH
 100: LD_INT 2
 102: PUSH
 103: LD_INT 27
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: PUSH
 110: LD_INT 3
 112: PUSH
 113: LD_INT 28
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: PUSH
 120: LD_INT 5
 122: PUSH
 123: LD_INT 175
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: LIST
 134: PPUSH
 135: CALL_OW 399
 139: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 140: LD_ADDR_EXP 7
 144: PUSH
 145: LD_EXP 3
 149: PPUSH
 150: LD_INT 2
 152: PUSH
 153: LD_INT 32
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 3
 162: PUSH
 163: LD_INT 33
 165: PUSH
 166: EMPTY
 167: LIST
 168: LIST
 169: PUSH
 170: LD_INT 5
 172: PUSH
 173: LD_INT 175
 175: PUSH
 176: EMPTY
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: LIST
 184: PPUSH
 185: CALL_OW 399
 189: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 2
 197: PPUSH
 198: LD_EXP 5
 202: PPUSH
 203: LD_INT 46
 205: PUSH
 206: LD_INT 61
 208: PUSH
 209: LD_INT 48
 211: PUSH
 212: LD_INT 50
 214: PUSH
 215: LD_INT 107
 217: PUSH
 218: LD_INT 63
 220: PUSH
 221: LD_INT 108
 223: PUSH
 224: LD_INT 117
 226: PUSH
 227: LD_INT 116
 229: PUSH
 230: LD_INT 47
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: PPUSH
 245: LD_INT 2
 247: PUSH
 248: LD_INT 27
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: EMPTY
 256: LIST
 257: PPUSH
 258: CALL_OW 401
 262: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 263: LD_ADDR_EXP 6
 267: PUSH
 268: LD_INT 1
 270: PPUSH
 271: LD_EXP 7
 275: PPUSH
 276: LD_INT 46
 278: PUSH
 279: LD_INT 61
 281: PUSH
 282: LD_INT 48
 284: PUSH
 285: LD_INT 50
 287: PUSH
 288: LD_INT 107
 290: PUSH
 291: LD_INT 47
 293: PUSH
 294: LD_INT 59
 296: PUSH
 297: LD_INT 62
 299: PUSH
 300: LD_INT 108
 302: PUSH
 303: LD_INT 117
 305: PUSH
 306: LD_INT 116
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: PPUSH
 322: LD_INT 2
 324: PUSH
 325: LD_INT 32
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: PPUSH
 335: CALL_OW 401
 339: ST_TO_ADDR
// A1_dobyta = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// A2_dobyta = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// A3_dobyta = false ;
 356: LD_ADDR_EXP 29
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// vojcli_base_2 ;
 364: CALL 8946 0 0
// vojcli_base_3 ;
 368: CALL 9644 0 0
// InGameOn ;
 372: CALL_OW 8
// Odebirani = false ;
 376: LD_ADDR_EXP 44
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// Pruzkumnik := false ;
 384: LD_ADDR_EXP 30
 388: PUSH
 389: LD_INT 0
 391: ST_TO_ADDR
// oposoldier := 0 ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 0
 399: ST_TO_ADDR
// choose_vojaky ;
 400: CALL 10923 0 0
// create_amici ;
 404: CALL 7788 0 0
// uklid_arabu ;
 408: CALL 16993 0 0
// create_ar_protiofenzivu ;
 412: CALL 7917 0 0
// create_arabske_utoky_behem_mise ;
 416: CALL 12326 0 0
// end ;
 420: END
// export function end_of_mission_time ; begin
 421: LD_INT 0
 423: PPUSH
// YouLost ( Command ) ;
 424: LD_STRING Command
 426: PPUSH
 427: CALL_OW 104
// end ;
 431: LD_VAR 0 1
 435: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 436: LD_VAR 0 1
 440: PUSH
 441: LD_EXP 31
 445: EQUAL
 446: IFFALSE 455
// YouLost ( JMM ) ;
 448: LD_STRING JMM
 450: PPUSH
 451: CALL_OW 104
// enable ;
 455: ENABLE
// end ;
 456: PPOPN 1
 458: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 459: CALL 466 0 0
// end ;
 463: PPOPN 1
 465: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 ; begin
 466: LD_INT 0
 468: PPUSH
 469: PPUSH
 470: PPUSH
 471: PPUSH
 472: PPUSH
 473: PPUSH
 474: PPUSH
 475: PPUSH
 476: PPUSH
 477: PPUSH
// DisableExclamations ;
 478: CALL_OW 474
// gained_medals := [ ] ;
 482: LD_ADDR_OWVAR 61
 486: PUSH
 487: EMPTY
 488: ST_TO_ADDR
// missing_medals := [ ] ;
 489: LD_ADDR_OWVAR 62
 493: PUSH
 494: EMPTY
 495: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 496: LD_EXP 57
 500: PUSH
 501: LD_EXP 55
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: LESSEQUAL
 512: IFFALSE 534
// begin AddMedal ( Time1 , 1 ) ;
 514: LD_STRING Time1
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL_OW 101
// pommedaile = true ;
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// end else
 532: GO 553
// begin AddMedal ( Time1 , - 1 ) ;
 534: LD_STRING Time1
 536: PPUSH
 537: LD_INT 1
 539: NEG
 540: PPUSH
 541: CALL_OW 101
// pommedaile = false ;
 545: LD_ADDR_VAR 0 2
 549: PUSH
 550: LD_INT 0
 552: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 553: LD_EXP 57
 557: PUSH
 558: LD_EXP 56
 562: PUSH
 563: LD_OWVAR 67
 567: ARRAY
 568: LESSEQUAL
 569: IFFALSE 583
// AddMedal ( Time2 , 1 ) else
 571: LD_STRING Time2
 573: PPUSH
 574: LD_INT 1
 576: PPUSH
 577: CALL_OW 101
 581: GO 613
// if pommedaile then
 583: LD_VAR 0 2
 587: IFFALSE 602
// AddMedal ( Time2 , - 1 ) else
 589: LD_STRING Time2
 591: PPUSH
 592: LD_INT 1
 594: NEG
 595: PPUSH
 596: CALL_OW 101
 600: GO 613
// AddMedal ( Time2 , - 2 ) ;
 602: LD_STRING Time2
 604: PPUSH
 605: LD_INT 2
 607: NEG
 608: PPUSH
 609: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 613: LD_ADDR_VAR 0 3
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_EXP 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: LD_INT 34
 635: PUSH
 636: LD_INT 12
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 34
 645: PUSH
 646: LD_INT 32
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PPUSH
 662: CALL_OW 69
 666: ST_TO_ADDR
// art = false ;
 667: LD_ADDR_VAR 0 8
 671: PUSH
 672: LD_INT 0
 674: ST_TO_ADDR
// for i in pomauta do
 675: LD_ADDR_VAR 0 4
 679: PUSH
 680: LD_VAR 0 3
 684: PUSH
 685: FOR_IN
 686: IFFALSE 716
// if GetCargo ( i , mat_artefact ) > 0 then
 688: LD_VAR 0 4
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: CALL_OW 289
 700: PUSH
 701: LD_INT 0
 703: GREATER
 704: IFFALSE 714
// art = true ;
 706: LD_ADDR_VAR 0 8
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
 714: GO 685
 716: POP
 717: POP
// if art then
 718: LD_VAR 0 8
 722: IFFALSE 736
// AddMedal ( Artefact , 1 ) else
 724: LD_STRING Artefact
 726: PPUSH
 727: LD_INT 1
 729: PPUSH
 730: CALL_OW 101
 734: GO 747
// AddMedal ( Artefact , - 1 ) ;
 736: LD_STRING Artefact
 738: PPUSH
 739: LD_INT 1
 741: NEG
 742: PPUSH
 743: CALL_OW 101
// GiveMedals ( Main ) ;
 747: LD_STRING Main
 749: PPUSH
 750: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 754: LD_ADDR_VAR 0 5
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_EXP 1
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
 790: LD_ADDR_VAR 0 4
 794: PUSH
 795: LD_INT 22
 797: PUSH
 798: LD_EXP 1
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 21
 809: PUSH
 810: LD_INT 2
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PPUSH
 821: CALL_OW 69
 825: PUSH
 826: FOR_IN
 827: IFFALSE 875
// begin pom1 = IsDrivenBy ( i ) ;
 829: LD_ADDR_VAR 0 6
 833: PUSH
 834: LD_VAR 0 4
 838: PPUSH
 839: CALL_OW 311
 843: ST_TO_ADDR
// if not ( pom1 in pom ) then
 844: LD_VAR 0 6
 848: PUSH
 849: LD_VAR 0 5
 853: IN
 854: NOT
 855: IFFALSE 873
// pom = pom ^ pom1 ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PUSH
 867: LD_VAR 0 6
 871: ADD
 872: ST_TO_ADDR
// end ;
 873: GO 826
 875: POP
 876: POP
// all_units_1 = pom ;
 877: LD_ADDR_VAR 0 10
 881: PUSH
 882: LD_VAR 0 5
 886: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
 887: LD_ADDR_VAR 0 10
 891: PUSH
 892: LD_VAR 0 10
 896: PUSH
 897: LD_VAR 0 10
 901: PPUSH
 902: LD_INT 2
 904: PUSH
 905: LD_INT 25
 907: PUSH
 908: LD_INT 12
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 25
 917: PUSH
 918: LD_INT 16
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: PPUSH
 930: CALL_OW 72
 934: DIFF
 935: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
 936: LD_VAR 0 10
 940: PPUSH
 941: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
 945: LD_ADDR_VAR 0 9
 949: PUSH
 950: LD_EXP 31
 954: PUSH
 955: LD_EXP 35
 959: PUSH
 960: LD_EXP 32
 964: PUSH
 965: LD_EXP 33
 969: PUSH
 970: LD_EXP 34
 974: PUSH
 975: LD_EXP 38
 979: PUSH
 980: LD_EXP 39
 984: PUSH
 985: LD_EXP 37
 989: PUSH
 990: LD_EXP 36
 994: PUSH
 995: LD_EXP 40
 999: PUSH
1000: LD_EXP 41
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1018: LD_EXP 31
1022: PPUSH
1023: LD_STRING JMM
1025: PPUSH
1026: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1030: LD_EXP 39
1034: PPUSH
1035: LD_STRING Cyrus
1037: PPUSH
1038: CALL_OW 38
// if Cyrus in Amici_enter then
1042: LD_EXP 39
1046: PUSH
1047: LD_EXP 42
1051: IN
1052: IFFALSE 1066
// SaveVariable ( 6 , CyrusLoc ) else
1054: LD_INT 6
1056: PPUSH
1057: LD_STRING CyrusLoc
1059: PPUSH
1060: CALL_OW 39
1064: GO 1076
// SaveVariable ( 7 , CyrusLoc ) ;
1066: LD_INT 7
1068: PPUSH
1069: LD_STRING CyrusLoc
1071: PPUSH
1072: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1076: LD_EXP 33
1080: PPUSH
1081: LD_STRING Gary
1083: PPUSH
1084: CALL_OW 38
// if Gary in Amici_enter then
1088: LD_EXP 33
1092: PUSH
1093: LD_EXP 42
1097: IN
1098: IFFALSE 1112
// SaveVariable ( 6 , GaryLoc ) else
1100: LD_INT 6
1102: PPUSH
1103: LD_STRING GaryLoc
1105: PPUSH
1106: CALL_OW 39
1110: GO 1122
// SaveVariable ( 7 , GaryLoc ) ;
1112: LD_INT 7
1114: PPUSH
1115: LD_STRING GaryLoc
1117: PPUSH
1118: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1122: LD_EXP 37
1126: PPUSH
1127: LD_STRING Cornell
1129: PPUSH
1130: CALL_OW 38
// if Cornel in Amici_enter then
1134: LD_EXP 37
1138: PUSH
1139: LD_EXP 42
1143: IN
1144: IFFALSE 1158
// SaveVariable ( 6 , CornellLoc ) else
1146: LD_INT 6
1148: PPUSH
1149: LD_STRING CornellLoc
1151: PPUSH
1152: CALL_OW 39
1156: GO 1168
// SaveVariable ( 7 , CornellLoc ) ;
1158: LD_INT 7
1160: PPUSH
1161: LD_STRING CornellLoc
1163: PPUSH
1164: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1168: LD_EXP 35
1172: PPUSH
1173: LD_STRING Frank
1175: PPUSH
1176: CALL_OW 38
// if Frank in Amici_enter then
1180: LD_EXP 35
1184: PUSH
1185: LD_EXP 42
1189: IN
1190: IFFALSE 1204
// SaveVariable ( 6 , FrankLoc ) else
1192: LD_INT 6
1194: PPUSH
1195: LD_STRING FrankLoc
1197: PPUSH
1198: CALL_OW 39
1202: GO 1214
// SaveVariable ( 7 , FrankLoc ) ;
1204: LD_INT 7
1206: PPUSH
1207: LD_STRING FrankLoc
1209: PPUSH
1210: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1214: LD_EXP 34
1218: PPUSH
1219: LD_STRING Bobby
1221: PPUSH
1222: CALL_OW 38
// if Bobby in Amici_enter then
1226: LD_EXP 34
1230: PUSH
1231: LD_EXP 42
1235: IN
1236: IFFALSE 1250
// SaveVariable ( 6 , BobbyLoc ) else
1238: LD_INT 6
1240: PPUSH
1241: LD_STRING BobbyLoc
1243: PPUSH
1244: CALL_OW 39
1248: GO 1260
// SaveVariable ( 7 , BobbyLoc ) ;
1250: LD_INT 7
1252: PPUSH
1253: LD_STRING BobbyLoc
1255: PPUSH
1256: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1260: LD_EXP 38
1264: PPUSH
1265: LD_STRING Yamoko
1267: PPUSH
1268: CALL_OW 38
// if Yamoko in Amici_enter then
1272: LD_EXP 38
1276: PUSH
1277: LD_EXP 42
1281: IN
1282: IFFALSE 1296
// SaveVariable ( 6 , YamokoLoc ) else
1284: LD_INT 6
1286: PPUSH
1287: LD_STRING YamokoLoc
1289: PPUSH
1290: CALL_OW 39
1294: GO 1306
// SaveVariable ( 7 , YamokoLoc ) ;
1296: LD_INT 7
1298: PPUSH
1299: LD_STRING YamokoLoc
1301: PPUSH
1302: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1306: LD_EXP 40
1310: PPUSH
1311: LD_STRING Donaldson
1313: PPUSH
1314: CALL_OW 38
// if Don in Amici_enter then
1318: LD_EXP 40
1322: PUSH
1323: LD_EXP 42
1327: IN
1328: IFFALSE 1342
// SaveVariable ( 6 , DonaldsonLoc ) else
1330: LD_INT 6
1332: PPUSH
1333: LD_STRING DonaldsonLoc
1335: PPUSH
1336: CALL_OW 39
1340: GO 1352
// SaveVariable ( 7 , DonaldsonLoc ) ;
1342: LD_INT 7
1344: PPUSH
1345: LD_STRING DonaldsonLoc
1347: PPUSH
1348: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1352: LD_EXP 41
1356: PPUSH
1357: LD_STRING Brown
1359: PPUSH
1360: CALL_OW 38
// if Brown in Amici_enter then
1364: LD_EXP 41
1368: PUSH
1369: LD_EXP 42
1373: IN
1374: IFFALSE 1388
// SaveVariable ( 6 , BrownLoc ) else
1376: LD_INT 6
1378: PPUSH
1379: LD_STRING BrownLoc
1381: PPUSH
1382: CALL_OW 39
1386: GO 1398
// SaveVariable ( 7 , BrownLoc ) ;
1388: LD_INT 7
1390: PPUSH
1391: LD_STRING BrownLoc
1393: PPUSH
1394: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1398: LD_EXP 36
1402: PPUSH
1403: LD_STRING Lisa
1405: PPUSH
1406: CALL_OW 38
// if Lisa in Amici_enter then
1410: LD_EXP 36
1414: PUSH
1415: LD_EXP 42
1419: IN
1420: IFFALSE 1434
// SaveVariable ( 6 , LisaLoc ) else
1422: LD_INT 6
1424: PPUSH
1425: LD_STRING LisaLoc
1427: PPUSH
1428: CALL_OW 39
1432: GO 1444
// SaveVariable ( 7 , LiasLoc ) ;
1434: LD_INT 7
1436: PPUSH
1437: LD_STRING LiasLoc
1439: PPUSH
1440: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_EXP 51
1453: PUSH
1454: LD_EXP 42
1458: DIFF
1459: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1460: LD_ADDR_VAR 0 7
1464: PUSH
1465: LD_VAR 0 10
1469: PUSH
1470: LD_VAR 0 9
1474: DIFF
1475: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1476: LD_STRING other_survivors
1478: PPUSH
1479: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1483: LD_STRING otherGamma2
1485: PPUSH
1486: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1490: LD_VAR 0 6
1494: PPUSH
1495: LD_STRING otherNotJMM
1497: PPUSH
1498: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1502: LD_VAR 0 7
1506: PPUSH
1507: LD_STRING otherWithJMM
1509: PPUSH
1510: CALL_OW 38
// YouWin ;
1514: CALL_OW 103
// EnableExclamations ;
1518: CALL_OW 473
// exit ;
1522: GO 1524
// end ;
1524: LD_VAR 0 1
1528: RET
// function load_postavy ; var pom ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_STRING JMM
1540: PPUSH
1541: CALL 7744 0 1
1545: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1546: LD_ADDR_EXP 32
1550: PUSH
1551: LD_STRING Powell
1553: PPUSH
1554: CALL_OW 25
1558: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1559: LD_ADDR_EXP 33
1563: PUSH
1564: LD_STRING Gary
1566: PPUSH
1567: CALL 7744 0 1
1571: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1572: LD_ADDR_EXP 36
1576: PUSH
1577: LD_STRING Lisa
1579: PPUSH
1580: CALL 7744 0 1
1584: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1585: LD_ADDR_EXP 38
1589: PUSH
1590: LD_STRING Yamoko
1592: PPUSH
1593: CALL 7744 0 1
1597: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1598: LD_ADDR_EXP 35
1602: PUSH
1603: LD_STRING Frank
1605: PPUSH
1606: CALL 7744 0 1
1610: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1611: LD_ADDR_EXP 37
1615: PUSH
1616: LD_STRING Cornell
1618: PPUSH
1619: CALL 7744 0 1
1623: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1624: LD_ADDR_EXP 34
1628: PUSH
1629: LD_STRING Bobby
1631: PPUSH
1632: CALL 7744 0 1
1636: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1637: LD_ADDR_EXP 39
1641: PUSH
1642: LD_STRING Cyrus
1644: PPUSH
1645: CALL 7744 0 1
1649: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1650: LD_ADDR_EXP 40
1654: PUSH
1655: LD_STRING Donaldson
1657: PPUSH
1658: CALL 7744 0 1
1662: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1663: LD_ADDR_EXP 41
1667: PUSH
1668: LD_STRING Brown
1670: PPUSH
1671: CALL 7744 0 1
1675: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1676: LD_ADDR_EXP 18
1680: PUSH
1681: LD_STRING GaryLoc
1683: PPUSH
1684: LD_INT 6
1686: PPUSH
1687: CALL_OW 30
1691: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1692: LD_ADDR_EXP 19
1696: PUSH
1697: LD_STRING LisaLoc
1699: PPUSH
1700: LD_INT 6
1702: PPUSH
1703: CALL_OW 30
1707: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
1708: LD_ADDR_EXP 20
1712: PUSH
1713: LD_STRING YamokoLoc
1715: PPUSH
1716: LD_INT 6
1718: PPUSH
1719: CALL_OW 30
1723: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
1724: LD_ADDR_EXP 21
1728: PUSH
1729: LD_STRING FrankLoc
1731: PPUSH
1732: LD_INT 6
1734: PPUSH
1735: CALL_OW 30
1739: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
1740: LD_ADDR_EXP 22
1744: PUSH
1745: LD_STRING CornellLoc
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL_OW 30
1755: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
1756: LD_ADDR_EXP 23
1760: PUSH
1761: LD_STRING BobbyLoc
1763: PPUSH
1764: LD_INT 6
1766: PPUSH
1767: CALL_OW 30
1771: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
1772: LD_ADDR_EXP 24
1776: PUSH
1777: LD_STRING CyrusLoc
1779: PPUSH
1780: LD_INT 6
1782: PPUSH
1783: CALL_OW 30
1787: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
1788: LD_ADDR_EXP 25
1792: PUSH
1793: LD_STRING DonaldsonLoc
1795: PPUSH
1796: LD_INT 6
1798: PPUSH
1799: CALL_OW 30
1803: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
1804: LD_ADDR_EXP 26
1808: PUSH
1809: LD_STRING BrownLoc
1811: PPUSH
1812: LD_INT 6
1814: PPUSH
1815: CALL_OW 30
1819: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
1820: LD_STRING otherWithJMM
1822: PPUSH
1823: CALL_OW 29
1827: IFFALSE 1844
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
1829: LD_ADDR_EXP 51
1833: PUSH
1834: LD_STRING otherWithJMM
1836: PPUSH
1837: CALL_OW 31
1841: ST_TO_ADDR
1842: GO 1851
// lidi_other = [ ] ;
1844: LD_ADDR_EXP 51
1848: PUSH
1849: EMPTY
1850: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
1851: LD_STRING other_survivors
1853: PPUSH
1854: CALL_OW 29
1858: IFFALSE 1875
// pom = CreateCharacterSet ( other_survivors ) else
1860: LD_ADDR_VAR 0 2
1864: PUSH
1865: LD_STRING other_survivors
1867: PPUSH
1868: CALL_OW 31
1872: ST_TO_ADDR
1873: GO 1882
// pom = [ ] ;
1875: LD_ADDR_VAR 0 2
1879: PUSH
1880: EMPTY
1881: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
1882: LD_ADDR_EXP 51
1886: PUSH
1887: LD_EXP 51
1891: PUSH
1892: LD_VAR 0 2
1896: ADD
1897: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
1898: LD_STRING otherNotJMM
1900: PPUSH
1901: CALL_OW 29
1905: IFFALSE 1922
// pom = CreateCharacterSet ( otherNotJMM ) else
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: LD_STRING otherNotJMM
1914: PPUSH
1915: CALL_OW 31
1919: ST_TO_ADDR
1920: GO 1929
// pom = [ ] ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: EMPTY
1928: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
1929: LD_ADDR_EXP 51
1933: PUSH
1934: LD_EXP 51
1938: PUSH
1939: LD_VAR 0 2
1943: ADD
1944: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
1945: LD_STRING otherGamma2
1947: PPUSH
1948: CALL_OW 29
1952: IFFALSE 1969
// pom = CreateCharacterSet ( otherGamma2 ) else
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_STRING otherGamma2
1961: PPUSH
1962: CALL_OW 31
1966: ST_TO_ADDR
1967: GO 1976
// pom = [ ] ;
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: EMPTY
1975: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
1976: LD_ADDR_EXP 51
1980: PUSH
1981: LD_EXP 51
1985: PUSH
1986: LD_VAR 0 2
1990: ADD
1991: ST_TO_ADDR
// end ; end_of_file
1992: LD_VAR 0 1
1996: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
1997: GO 1999
1999: DISABLE
// begin for i := 1 to 2 do
2000: LD_ADDR_LOC 1
2004: PUSH
2005: DOUBLE
2006: LD_INT 1
2008: DEC
2009: ST_TO_ADDR
2010: LD_INT 2
2012: PUSH
2013: FOR_TO
2014: IFFALSE 2023
// disable ( i ) ;
2016: LD_LOC 1
2020: DISABLE_MARKED
2021: GO 2013
2023: POP
2024: POP
// kecy := false ;
2025: LD_ADDR_LOC 7
2029: PUSH
2030: LD_INT 0
2032: ST_TO_ADDR
// KAMI = false ;
2033: LD_ADDR_LOC 8
2037: PUSH
2038: LD_INT 0
2040: ST_TO_ADDR
// disable_kecy_5D = false ;
2041: LD_ADDR_LOC 9
2045: PUSH
2046: LD_INT 0
2048: ST_TO_ADDR
// end ;
2049: END
// export function chmo1 ; begin
2050: LD_INT 0
2052: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2053: LD_INT 86
2055: PPUSH
2056: LD_INT 145
2058: PPUSH
2059: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2063: LD_EXP 1
2067: PPUSH
2068: LD_EXP 3
2072: PPUSH
2073: LD_INT 2
2075: PPUSH
2076: LD_INT 1
2078: PPUSH
2079: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2083: LD_EXP 3
2087: PPUSH
2088: LD_EXP 1
2092: PPUSH
2093: LD_INT 2
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
// SaveForQuickRestart ;
2103: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2107: LD_INT 18
2109: PPUSH
2110: CALL_OW 67
// InGameOff ;
2114: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2118: LD_STRING M1
2120: PPUSH
2121: CALL_OW 337
// end ;
2125: LD_VAR 0 1
2129: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2130: LD_INT 4
2132: PPUSH
2133: CALL_OW 255
2137: PUSH
2138: LD_EXP 1
2142: EQUAL
2143: PUSH
2144: LD_INT 4
2146: PPUSH
2147: CALL_OW 301
2151: OR
2152: IFFALSE 2737
2154: GO 2156
2156: DISABLE
2157: LD_INT 0
2159: PPUSH
// begin A1_dobyta = true ;
2160: LD_ADDR_EXP 27
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// DialogueOn ;
2168: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2172: LD_EXP 31
2176: PPUSH
2177: LD_STRING D2-JMM-1
2179: PPUSH
2180: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2184: LD_EXP 32
2188: PPUSH
2189: LD_STRING D2-Pow-1
2191: PPUSH
2192: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2196: LD_EXP 31
2200: PPUSH
2201: LD_STRING D2-JMM-2
2203: PPUSH
2204: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2208: LD_EXP 32
2212: PPUSH
2213: LD_STRING D2-Pow-2
2215: PPUSH
2216: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2220: LD_EXP 31
2224: PPUSH
2225: LD_STRING D2-JMM-3
2227: PPUSH
2228: CALL_OW 94
// DialogueOff ;
2232: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2236: LD_STRING M2
2238: PPUSH
2239: CALL_OW 337
// Hint ( CapturedBase ) ;
2243: LD_STRING CapturedBase
2245: PPUSH
2246: CALL_OW 339
// pom = [ ] ;
2250: LD_ADDR_LOC 2
2254: PUSH
2255: EMPTY
2256: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2257: LD_ADDR_LOC 1
2261: PUSH
2262: LD_EXP 33
2266: PUSH
2267: LD_EXP 34
2271: PUSH
2272: LD_EXP 35
2276: PUSH
2277: LD_EXP 36
2281: PUSH
2282: LD_EXP 37
2286: PUSH
2287: LD_EXP 39
2291: PUSH
2292: LD_EXP 40
2296: PUSH
2297: LD_EXP 41
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: FOR_IN
2313: IFFALSE 2344
// if IsOK ( i ) then
2315: LD_LOC 1
2319: PPUSH
2320: CALL_OW 302
2324: IFFALSE 2342
// pom = pom ^ i ;
2326: LD_ADDR_LOC 2
2330: PUSH
2331: LD_LOC 2
2335: PUSH
2336: LD_LOC 1
2340: ADD
2341: ST_TO_ADDR
2342: GO 2312
2344: POP
2345: POP
// if pom > 3 then
2346: LD_LOC 2
2350: PUSH
2351: LD_INT 3
2353: GREATER
2354: IFFALSE 2504
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: LD_LOC 2
2365: PUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_LOC 2
2373: PUSH
2374: LD_INT 0
2376: PLUS
2377: PPUSH
2378: CALL_OW 12
2382: ARRAY
2383: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2384: LD_ADDR_LOC 2
2388: PUSH
2389: LD_LOC 2
2393: PUSH
2394: LD_VAR 0 1
2398: PUSH
2399: LD_INT 1
2401: ARRAY
2402: DIFF
2403: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2404: LD_ADDR_VAR 0 1
2408: PUSH
2409: LD_VAR 0 1
2413: PUSH
2414: LD_LOC 2
2418: PUSH
2419: LD_INT 1
2421: PPUSH
2422: LD_LOC 2
2426: PUSH
2427: LD_INT 0
2429: PLUS
2430: PPUSH
2431: CALL_OW 12
2435: ARRAY
2436: ADD
2437: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2438: LD_ADDR_LOC 2
2442: PUSH
2443: LD_LOC 2
2447: PUSH
2448: LD_VAR 0 1
2452: PUSH
2453: LD_INT 2
2455: ARRAY
2456: DIFF
2457: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2458: LD_ADDR_VAR 0 1
2462: PUSH
2463: LD_VAR 0 1
2467: PUSH
2468: LD_LOC 2
2472: PUSH
2473: LD_INT 1
2475: PPUSH
2476: LD_LOC 2
2480: PUSH
2481: LD_INT 0
2483: PLUS
2484: PPUSH
2485: CALL_OW 12
2489: ARRAY
2490: ADD
2491: ST_TO_ADDR
// pom = pom1 ;
2492: LD_ADDR_LOC 2
2496: PUSH
2497: LD_VAR 0 1
2501: ST_TO_ADDR
// end else
2502: GO 2514
// pom1 = pom ;
2504: LD_ADDR_VAR 0 1
2508: PUSH
2509: LD_LOC 2
2513: ST_TO_ADDR
// for i in pom1 do
2514: LD_ADDR_LOC 1
2518: PUSH
2519: LD_VAR 0 1
2523: PUSH
2524: FOR_IN
2525: IFFALSE 2735
// case i of Gary :
2527: LD_LOC 1
2531: PUSH
2532: LD_EXP 33
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2557
2542: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2543: LD_EXP 33
2547: PPUSH
2548: LD_STRING D2a-Gary-1
2550: PPUSH
2551: CALL_OW 88
2555: GO 2733
2557: LD_EXP 34
2561: DOUBLE
2562: EQUAL
2563: IFTRUE 2567
2565: GO 2582
2567: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2568: LD_EXP 34
2572: PPUSH
2573: LD_STRING D2a-Bobby-1
2575: PPUSH
2576: CALL_OW 88
2580: GO 2733
2582: LD_EXP 35
2586: DOUBLE
2587: EQUAL
2588: IFTRUE 2592
2590: GO 2607
2592: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2593: LD_EXP 35
2597: PPUSH
2598: LD_STRING D2a-Frank-1
2600: PPUSH
2601: CALL_OW 88
2605: GO 2733
2607: LD_EXP 36
2611: DOUBLE
2612: EQUAL
2613: IFTRUE 2617
2615: GO 2632
2617: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2618: LD_EXP 36
2622: PPUSH
2623: LD_STRING D2a-Lisa-1
2625: PPUSH
2626: CALL_OW 88
2630: GO 2733
2632: LD_EXP 37
2636: DOUBLE
2637: EQUAL
2638: IFTRUE 2642
2640: GO 2657
2642: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2643: LD_EXP 37
2647: PPUSH
2648: LD_STRING D2a-Corn-1
2650: PPUSH
2651: CALL_OW 88
2655: GO 2733
2657: LD_EXP 39
2661: DOUBLE
2662: EQUAL
2663: IFTRUE 2667
2665: GO 2682
2667: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2668: LD_EXP 39
2672: PPUSH
2673: LD_STRING D2a-Cyrus-1
2675: PPUSH
2676: CALL_OW 88
2680: GO 2733
2682: LD_EXP 40
2686: DOUBLE
2687: EQUAL
2688: IFTRUE 2692
2690: GO 2707
2692: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2693: LD_EXP 40
2697: PPUSH
2698: LD_STRING D2a-Don-1
2700: PPUSH
2701: CALL_OW 88
2705: GO 2733
2707: LD_EXP 41
2711: DOUBLE
2712: EQUAL
2713: IFTRUE 2717
2715: GO 2732
2717: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
2718: LD_EXP 41
2722: PPUSH
2723: LD_STRING D2a-Brown-1
2725: PPUSH
2726: CALL_OW 88
2730: GO 2733
2732: POP
2733: GO 2524
2735: POP
2736: POP
// end ;
2737: PPOPN 1
2739: END
// export function dialog_frank ; begin
2740: LD_INT 0
2742: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
2743: LD_EXP 35
2747: PPUSH
2748: LD_STRING D3F-Frank-1
2750: PPUSH
2751: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
2755: LD_EXP 31
2759: PPUSH
2760: LD_STRING D3F-JMM-1
2762: PPUSH
2763: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
2767: LD_EXP 35
2771: PPUSH
2772: LD_STRING D3F-Frank-2
2774: PPUSH
2775: CALL_OW 88
// pom := Query ( QFrank ) ;
2779: LD_ADDR_LOC 2
2783: PUSH
2784: LD_STRING QFrank
2786: PPUSH
2787: CALL_OW 97
2791: ST_TO_ADDR
// case pom of 1 :
2792: LD_LOC 2
2796: PUSH
2797: LD_INT 1
2799: DOUBLE
2800: EQUAL
2801: IFTRUE 2805
2803: GO 2828
2805: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
2806: LD_EXP 31
2810: PPUSH
2811: LD_STRING D3Fa-JMM-1
2813: PPUSH
2814: CALL_OW 88
// result := 1 ;
2818: LD_ADDR_VAR 0 1
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// end ; 2 :
2826: GO 2984
2828: LD_INT 2
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2952
2836: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
2837: LD_EXP 31
2841: PPUSH
2842: LD_STRING D3Fb-JMM-1
2844: PPUSH
2845: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
2849: LD_EXP 35
2853: PPUSH
2854: LD_STRING D3Fb-Frank-1
2856: PPUSH
2857: CALL_OW 88
// pom := Query ( QFrank2 ) ;
2861: LD_ADDR_LOC 2
2865: PUSH
2866: LD_STRING QFrank2
2868: PPUSH
2869: CALL_OW 97
2873: ST_TO_ADDR
// if pom = 1 then
2874: LD_LOC 2
2878: PUSH
2879: LD_INT 1
2881: EQUAL
2882: IFFALSE 2930
// begin Say ( JMM , D3Fba-JMM-1 ) ;
2884: LD_EXP 31
2888: PPUSH
2889: LD_STRING D3Fba-JMM-1
2891: PPUSH
2892: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
2896: LD_EXP 35
2900: PPUSH
2901: LD_STRING D3Fba-Frank-1
2903: PPUSH
2904: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
2908: LD_EXP 31
2912: PPUSH
2913: LD_STRING D3Fba-JMM-2
2915: PPUSH
2916: CALL_OW 88
// result := 21 ;
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_INT 21
2927: ST_TO_ADDR
// end else
2928: GO 2950
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
2930: LD_EXP 31
2934: PPUSH
2935: LD_STRING D3Fbb-JMM-1
2937: PPUSH
2938: CALL_OW 88
// result := 22 ;
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: LD_INT 22
2949: ST_TO_ADDR
// end ; end ; 3 :
2950: GO 2984
2952: LD_INT 3
2954: DOUBLE
2955: EQUAL
2956: IFTRUE 2960
2958: GO 2983
2960: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
2961: LD_EXP 31
2965: PPUSH
2966: LD_STRING D3Fc-JMM-1
2968: PPUSH
2969: CALL_OW 88
// result := 3 ;
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_INT 3
2980: ST_TO_ADDR
// end ; end ;
2981: GO 2984
2983: POP
// end ;
2984: LD_VAR 0 1
2988: RET
// export function fuspech1 ; begin
2989: LD_INT 0
2991: PPUSH
// DialogueOn ;
2992: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
2996: LD_EXP 31
3000: PPUSH
3001: LD_STRING D4Fa-JMM-1
3003: PPUSH
3004: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3008: LD_EXP 1
3012: PPUSH
3013: LD_INT 6
3015: PPUSH
3016: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3020: LD_INT 111
3022: PPUSH
3023: LD_INT 123
3025: PPUSH
3026: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3030: LD_INT 32
3032: PPUSH
3033: LD_INT 39
3035: PPUSH
3036: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3040: LD_EXP 35
3044: PPUSH
3045: LD_STRING D4Fa-Frank-1
3047: PPUSH
3048: CALL_OW 88
// wait ( 0 0$3 ) ;
3052: LD_INT 105
3054: PPUSH
3055: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3059: LD_EXP 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3071: LD_INT 122
3073: PPUSH
3074: LD_INT 68
3076: PPUSH
3077: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3081: LD_EXP 31
3085: PPUSH
3086: LD_STRING D4Fa-JMM-2
3088: PPUSH
3089: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3093: LD_EXP 35
3097: PPUSH
3098: LD_STRING D4Fa-Frank-2
3100: PPUSH
3101: CALL_OW 88
// DialogueOff ;
3105: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3109: LD_EXP 35
3113: PUSH
3114: EMPTY
3115: LIST
3116: PPUSH
3117: CALL_OW 85
// end ;
3121: LD_VAR 0 1
3125: RET
// export function fuspech2 ; begin
3126: LD_INT 0
3128: PPUSH
// DialogueOn ;
3129: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_INT 8
3140: PPUSH
3141: CALL_OW 332
// if IsOK ( Frank ) then
3145: LD_EXP 35
3149: PPUSH
3150: CALL_OW 302
3154: IFFALSE 3248
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3156: LD_EXP 35
3160: PPUSH
3161: LD_STRING D4Fb-Frank-1
3163: PPUSH
3164: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3168: LD_EXP 31
3172: PPUSH
3173: LD_STRING D4Fb-JMM-1
3175: PPUSH
3176: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3180: LD_ADDR_LOC 2
3184: PUSH
3185: LD_INT 2
3187: PPUSH
3188: LD_INT 4
3190: PPUSH
3191: EMPTY
3192: PPUSH
3193: CALL 6326 0 3
3197: ST_TO_ADDR
// if pom > 0 then
3198: LD_LOC 2
3202: PUSH
3203: LD_INT 0
3205: GREATER
3206: IFFALSE 3224
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3208: LD_LOC 2
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: PPUSH
3217: LD_STRING D4Fb-FSci1-1
3219: PPUSH
3220: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3224: LD_EXP 35
3228: PPUSH
3229: LD_STRING D4Fb-Frank-2
3231: PPUSH
3232: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3236: LD_EXP 31
3240: PPUSH
3241: LD_STRING D4Fb-JMM-2
3243: PPUSH
3244: CALL_OW 88
// end ; DialogueOff ;
3248: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3252: LD_EXP 35
3256: PUSH
3257: EMPTY
3258: LIST
3259: PPUSH
3260: CALL_OW 85
// end ;
3264: LD_VAR 0 1
3268: RET
// export function fuspech3 ; begin
3269: LD_INT 0
3271: PPUSH
// end ;
3272: LD_VAR 0 1
3276: RET
// export function dialog_yamoko ; begin
3277: LD_INT 0
3279: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3280: LD_EXP 38
3284: PPUSH
3285: LD_STRING D3Y-Yam-1
3287: PPUSH
3288: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3292: LD_EXP 31
3296: PPUSH
3297: LD_STRING D3Y-JMM-1
3299: PPUSH
3300: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3304: LD_EXP 38
3308: PPUSH
3309: LD_STRING D3Y-Yam-2
3311: PPUSH
3312: CALL_OW 88
// pom = Query ( QYamoko ) ;
3316: LD_ADDR_LOC 2
3320: PUSH
3321: LD_STRING QYamoko
3323: PPUSH
3324: CALL_OW 97
3328: ST_TO_ADDR
// if pom = 1 then
3329: LD_LOC 2
3333: PUSH
3334: LD_INT 1
3336: EQUAL
3337: IFFALSE 3365
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3339: LD_EXP 31
3343: PPUSH
3344: LD_STRING D3Ya-JMM-1
3346: PPUSH
3347: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3351: LD_EXP 38
3355: PPUSH
3356: LD_STRING D3Ya-Yam-1
3358: PPUSH
3359: CALL_OW 88
// end else
3363: GO 3377
// Say ( JMM , D3Yb-JMM-1 ) ;
3365: LD_EXP 31
3369: PPUSH
3370: LD_STRING D3Yb-JMM-1
3372: PPUSH
3373: CALL_OW 88
// result := pom ;
3377: LD_ADDR_VAR 0 1
3381: PUSH
3382: LD_LOC 2
3386: ST_TO_ADDR
// end ;
3387: LD_VAR 0 1
3391: RET
// export function yuspech1 ; begin
3392: LD_INT 0
3394: PPUSH
// DialogueOn ;
3395: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3399: LD_EXP 38
3403: PPUSH
3404: LD_STRING D4Ya-Yam-1
3406: PPUSH
3407: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3411: LD_EXP 31
3415: PPUSH
3416: LD_STRING D4Ya-JMM-1
3418: PPUSH
3419: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3423: LD_EXP 1
3427: PPUSH
3428: LD_INT 6
3430: PPUSH
3431: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3435: LD_INT 111
3437: PPUSH
3438: LD_INT 123
3440: PPUSH
3441: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3445: LD_INT 32
3447: PPUSH
3448: LD_INT 39
3450: PPUSH
3451: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3455: LD_EXP 38
3459: PPUSH
3460: LD_STRING D4Ya-Yam-2
3462: PPUSH
3463: CALL_OW 88
// wait ( 0 0$3 ) ;
3467: LD_INT 105
3469: PPUSH
3470: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3474: LD_EXP 1
3478: PPUSH
3479: LD_INT 7
3481: PPUSH
3482: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3486: LD_INT 122
3488: PPUSH
3489: LD_INT 68
3491: PPUSH
3492: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3496: LD_EXP 31
3500: PPUSH
3501: LD_STRING D4Ya-JMM-2
3503: PPUSH
3504: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3508: LD_EXP 38
3512: PPUSH
3513: LD_STRING D4Ya-Yam-3
3515: PPUSH
3516: CALL_OW 88
// DialogueOff ;
3520: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3524: LD_EXP 38
3528: PUSH
3529: EMPTY
3530: LIST
3531: PPUSH
3532: CALL_OW 85
// end ;
3536: LD_VAR 0 1
3540: RET
// export function yuspech2 ; begin
3541: LD_INT 0
3543: PPUSH
// DialogueOn ;
3544: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3548: LD_EXP 1
3552: PPUSH
3553: LD_INT 8
3555: PPUSH
3556: CALL_OW 332
// if IsOK ( Yamoko ) then
3560: LD_EXP 38
3564: PPUSH
3565: CALL_OW 302
3569: IFFALSE 3619
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3571: LD_EXP 38
3575: PPUSH
3576: LD_STRING D4Yc-Yam-1
3578: PPUSH
3579: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3583: LD_EXP 31
3587: PPUSH
3588: LD_STRING D4Yc-JMM-1
3590: PPUSH
3591: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3595: LD_EXP 38
3599: PPUSH
3600: LD_STRING D4Yc-Yam-2
3602: PPUSH
3603: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3607: LD_EXP 31
3611: PPUSH
3612: LD_STRING D4Yc-JMM-2
3614: PPUSH
3615: CALL_OW 88
// end ; DialogueOff ;
3619: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3623: LD_EXP 38
3627: PUSH
3628: EMPTY
3629: LIST
3630: PPUSH
3631: CALL_OW 85
// end ;
3635: LD_VAR 0 1
3639: RET
// export function yuspech3 ; begin
3640: LD_INT 0
3642: PPUSH
// end ;
3643: LD_VAR 0 1
3647: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3648: LD_EXP 1
3652: PPUSH
3653: LD_INT 86
3655: PPUSH
3656: CALL_OW 292
3660: PUSH
3661: LD_EXP 1
3665: PPUSH
3666: LD_INT 85
3668: PPUSH
3669: CALL_OW 292
3673: OR
3674: PUSH
3675: LD_EXP 1
3679: PPUSH
3680: LD_INT 84
3682: PPUSH
3683: CALL_OW 292
3687: OR
3688: IFFALSE 4006
3690: GO 3692
3692: DISABLE
// begin while kecy do
3693: LD_LOC 7
3697: IFFALSE 3708
// wait ( 0 0$1 ) ;
3699: LD_INT 35
3701: PPUSH
3702: CALL_OW 67
3706: GO 3693
// kecy = true ;
3708: LD_ADDR_LOC 7
3712: PUSH
3713: LD_INT 1
3715: ST_TO_ADDR
// DialogueOn ;
3716: CALL_OW 6
// if See ( You , A2_kam1 ) then
3720: LD_EXP 1
3724: PPUSH
3725: LD_INT 86
3727: PPUSH
3728: CALL_OW 292
3732: IFFALSE 3743
// CenterNowOnUnits ( A2_kam1 ) else
3734: LD_INT 86
3736: PPUSH
3737: CALL_OW 87
3741: GO 3807
// if See ( You , A2_kam2 ) then
3743: LD_EXP 1
3747: PPUSH
3748: LD_INT 85
3750: PPUSH
3751: CALL_OW 292
3755: IFFALSE 3766
// CenterNowOnUnits ( A2_kam2 ) else
3757: LD_INT 85
3759: PPUSH
3760: CALL_OW 87
3764: GO 3807
// if See ( You , A2_kam3 ) then
3766: LD_EXP 1
3770: PPUSH
3771: LD_INT 84
3773: PPUSH
3774: CALL_OW 292
3778: IFFALSE 3789
// CenterNowOnUnits ( A2_kam3 ) else
3780: LD_INT 84
3782: PPUSH
3783: CALL_OW 87
3787: GO 3807
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
3789: LD_INT 86
3791: PUSH
3792: LD_INT 85
3794: PUSH
3795: LD_INT 84
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
3807: LD_ADDR_LOC 2
3811: PUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 1
3817: PPUSH
3818: LD_EXP 31
3822: PUSH
3823: EMPTY
3824: LIST
3825: PPUSH
3826: CALL 6326 0 3
3830: ST_TO_ADDR
// if pom < 0 then
3831: LD_LOC 2
3835: PUSH
3836: LD_INT 0
3838: LESS
3839: IFFALSE 3852
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
3841: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
3843: PPUSH
3844: CALL_OW 100
// konec_mise ;
3848: CALL 466 0 0
// end ; case pom of 0 :
3852: LD_LOC 2
3856: PUSH
3857: LD_INT 0
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3888
3865: POP
// begin pom = JMM ;
3866: LD_ADDR_LOC 2
3870: PUSH
3871: LD_EXP 31
3875: ST_TO_ADDR
// pom1 = JMM ;
3876: LD_ADDR_LOC 3
3880: PUSH
3881: LD_EXP 31
3885: ST_TO_ADDR
// end ; 1 :
3886: GO 3952
3888: LD_INT 1
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 3923
3896: POP
// begin pom = pom [ 1 ] ;
3897: LD_ADDR_LOC 2
3901: PUSH
3902: LD_LOC 2
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: ST_TO_ADDR
// pom1 = JMM ;
3911: LD_ADDR_LOC 3
3915: PUSH
3916: LD_EXP 31
3920: ST_TO_ADDR
// end ; else
3921: GO 3952
3923: POP
// begin pom1 = pom [ 2 ] ;
3924: LD_ADDR_LOC 3
3928: PUSH
3929: LD_LOC 2
3933: PUSH
3934: LD_INT 2
3936: ARRAY
3937: ST_TO_ADDR
// pom = pom [ 1 ] ;
3938: LD_ADDR_LOC 2
3942: PUSH
3943: LD_LOC 2
3947: PUSH
3948: LD_INT 1
3950: ARRAY
3951: ST_TO_ADDR
// end ; end ; DialogueOn ;
3952: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
3956: LD_LOC 2
3960: PPUSH
3961: LD_STRING D5b-Sol1-1
3963: PPUSH
3964: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
3968: LD_LOC 3
3972: PPUSH
3973: LD_STRING D5b-Sol2-1
3975: PPUSH
3976: CALL_OW 88
// DialogueOff ;
3980: CALL_OW 7
// if not disable_kecy_5D then
3984: LD_LOC 9
3988: NOT
3989: IFFALSE 3994
// enable ( 1 ) ;
3991: LD_INT 1
3993: ENABLE_MARKED
// DialogueOff ;
3994: CALL_OW 7
// kecy = false ;
3998: LD_ADDR_LOC 7
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// end ;
4006: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4007: LD_LOC 8
4011: NOT
4012: IFFALSE 4208
// begin KAMI = true ;
4014: LD_ADDR_LOC 8
4018: PUSH
4019: LD_INT 1
4021: ST_TO_ADDR
// while kecy do
4022: LD_LOC 7
4026: IFFALSE 4037
// wait ( 0 0$1 ) ;
4028: LD_INT 35
4030: PPUSH
4031: CALL_OW 67
4035: GO 4022
// kecy = true ;
4037: LD_ADDR_LOC 7
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4045: LD_INT 52
4047: PPUSH
4048: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_EXP 1
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 21
4071: PUSH
4072: LD_INT 1
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PPUSH
4083: CALL_OW 69
4087: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4088: LD_ADDR_LOC 2
4092: PUSH
4093: LD_LOC 2
4097: PUSH
4098: LD_EXP 31
4102: PUSH
4103: EMPTY
4104: LIST
4105: DIFF
4106: ST_TO_ADDR
// if pom > 0 then
4107: LD_LOC 2
4111: PUSH
4112: LD_INT 0
4114: GREATER
4115: IFFALSE 4190
// begin DialogueOn ;
4117: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4121: LD_LOC 2
4125: PUSH
4126: LD_INT 1
4128: ARRAY
4129: PPUSH
4130: CALL_OW 258
4134: PUSH
4135: LD_INT 1
4137: EQUAL
4138: IFFALSE 4158
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4140: LD_LOC 2
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: PPUSH
4149: LD_STRING D5c-Sol1-1
4151: PPUSH
4152: CALL_OW 88
4156: GO 4174
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4158: LD_LOC 2
4162: PUSH
4163: LD_INT 1
4165: ARRAY
4166: PPUSH
4167: LD_STRING D5c-FSol1-1
4169: PPUSH
4170: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4174: LD_EXP 31
4178: PPUSH
4179: LD_STRING D5c-JMM-1
4181: PPUSH
4182: CALL_OW 88
// DialogueOff ;
4186: CALL_OW 7
// end ; if not disable_kecy_5D then
4190: LD_LOC 9
4194: NOT
4195: IFFALSE 4200
// enable ( 1 ) ;
4197: LD_INT 1
4199: ENABLE_MARKED
// kecy = false ;
4200: LD_ADDR_LOC 7
4204: PUSH
4205: LD_INT 0
4207: ST_TO_ADDR
// end ; enable ;
4208: ENABLE
// end ;
4209: PPOPN 1
4211: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4212: LD_EXP 1
4216: PPUSH
4217: LD_INT 89
4219: PPUSH
4220: CALL_OW 292
4224: PUSH
4225: LD_EXP 1
4229: PPUSH
4230: LD_INT 90
4232: PPUSH
4233: CALL_OW 292
4237: OR
4238: PUSH
4239: LD_EXP 1
4243: PPUSH
4244: LD_INT 91
4246: PPUSH
4247: CALL_OW 292
4251: OR
4252: IFFALSE 4551
4254: GO 4256
4256: DISABLE
// begin while kecy do
4257: LD_LOC 7
4261: IFFALSE 4272
// wait ( 0 0$1 ) ;
4263: LD_INT 35
4265: PPUSH
4266: CALL_OW 67
4270: GO 4257
// kecy = true ;
4272: LD_ADDR_LOC 7
4276: PUSH
4277: LD_INT 1
4279: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4280: LD_INT 89
4282: PUSH
4283: LD_INT 90
4285: PUSH
4286: LD_INT 91
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: PPUSH
4294: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4298: LD_ADDR_LOC 2
4302: PUSH
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: LD_EXP 31
4313: PUSH
4314: EMPTY
4315: LIST
4316: PPUSH
4317: CALL 6326 0 3
4321: ST_TO_ADDR
// if pom < 0 then
4322: LD_LOC 2
4326: PUSH
4327: LD_INT 0
4329: LESS
4330: IFFALSE 4343
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4332: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4334: PPUSH
4335: CALL_OW 100
// konec_mise ;
4339: CALL 466 0 0
// end ; case pom of 0 :
4343: LD_LOC 2
4347: PUSH
4348: LD_INT 0
4350: DOUBLE
4351: EQUAL
4352: IFTRUE 4356
4354: GO 4379
4356: POP
// begin pom = JMM ;
4357: LD_ADDR_LOC 2
4361: PUSH
4362: LD_EXP 31
4366: ST_TO_ADDR
// pom1 = JMM ;
4367: LD_ADDR_LOC 3
4371: PUSH
4372: LD_EXP 31
4376: ST_TO_ADDR
// end ; 1 :
4377: GO 4443
4379: LD_INT 1
4381: DOUBLE
4382: EQUAL
4383: IFTRUE 4387
4385: GO 4414
4387: POP
// begin pom = pom [ 1 ] ;
4388: LD_ADDR_LOC 2
4392: PUSH
4393: LD_LOC 2
4397: PUSH
4398: LD_INT 1
4400: ARRAY
4401: ST_TO_ADDR
// pom1 = JMM ;
4402: LD_ADDR_LOC 3
4406: PUSH
4407: LD_EXP 31
4411: ST_TO_ADDR
// end ; else
4412: GO 4443
4414: POP
// begin pom1 = pom [ 2 ] ;
4415: LD_ADDR_LOC 3
4419: PUSH
4420: LD_LOC 2
4424: PUSH
4425: LD_INT 2
4427: ARRAY
4428: ST_TO_ADDR
// pom = pom [ 1 ] ;
4429: LD_ADDR_LOC 2
4433: PUSH
4434: LD_LOC 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// end ; end ; DialogueOn ;
4443: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4447: LD_LOC 2
4451: PPUSH
4452: CALL_OW 258
4456: PUSH
4457: LD_INT 1
4459: EQUAL
4460: IFFALSE 4476
// Say ( pom , D5a-Sol1-1 ) else
4462: LD_LOC 2
4466: PPUSH
4467: LD_STRING D5a-Sol1-1
4469: PPUSH
4470: CALL_OW 88
4474: GO 4488
// Say ( pom , D5a-FSol1-1 ) ;
4476: LD_LOC 2
4480: PPUSH
4481: LD_STRING D5a-FSol1-1
4483: PPUSH
4484: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4488: LD_LOC 3
4492: PPUSH
4493: CALL_OW 258
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: IFFALSE 4517
// Say ( pom1 , D5a-Sol2-1 ) else
4503: LD_LOC 3
4507: PPUSH
4508: LD_STRING D5a-Sol2-1
4510: PPUSH
4511: CALL_OW 88
4515: GO 4529
// Say ( pom1 , D5a-FSol2-1 ) ;
4517: LD_LOC 3
4521: PPUSH
4522: LD_STRING D5a-FSol2-1
4524: PPUSH
4525: CALL_OW 88
// DialogueOff ;
4529: CALL_OW 7
// if not disable_kecy_5D then
4533: LD_LOC 9
4537: NOT
4538: IFFALSE 4543
// enable ( 1 ) ;
4540: LD_INT 1
4542: ENABLE_MARKED
// kecy = false ;
4543: LD_ADDR_LOC 7
4547: PUSH
4548: LD_INT 0
4550: ST_TO_ADDR
// end ;
4551: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4552: LD_LOC 9
4556: NOT
4557: IFFALSE 4750
4559: GO 4561
4561: DISABLE
// begin while kecy do
4562: LD_LOC 7
4566: IFFALSE 4577
// wait ( 0 0$1 ) ;
4568: LD_INT 35
4570: PPUSH
4571: CALL_OW 67
4575: GO 4562
// kecy = true ;
4577: LD_ADDR_LOC 7
4581: PUSH
4582: LD_INT 1
4584: ST_TO_ADDR
// if IsOK ( Lisa ) then
4585: LD_EXP 36
4589: PPUSH
4590: CALL_OW 302
4594: IFFALSE 4610
// Say ( Lisa , D5d-Lisa-1 ) else
4596: LD_EXP 36
4600: PPUSH
4601: LD_STRING D5d-Lisa-1
4603: PPUSH
4604: CALL_OW 88
4608: GO 4722
// if IsOK ( Cyrus ) then
4610: LD_EXP 39
4614: PPUSH
4615: CALL_OW 302
4619: IFFALSE 4635
// Say ( Cyrus , D5d-Cyrus-1 ) else
4621: LD_EXP 39
4625: PPUSH
4626: LD_STRING D5d-Cyrus-1
4628: PPUSH
4629: CALL_OW 88
4633: GO 4722
// if IsOK ( Gary ) then
4635: LD_EXP 33
4639: PPUSH
4640: CALL_OW 302
4644: IFFALSE 4660
// Say ( Gary , D5d-Gary-1 ) else
4646: LD_EXP 33
4650: PPUSH
4651: LD_STRING D5d-Gary-1
4653: PPUSH
4654: CALL_OW 88
4658: GO 4722
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4660: LD_ADDR_LOC 2
4664: PUSH
4665: LD_INT 22
4667: PUSH
4668: LD_EXP 1
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 69
4695: ST_TO_ADDR
// if pom > 0 then
4696: LD_LOC 2
4700: PUSH
4701: LD_INT 0
4703: GREATER
4704: IFFALSE 4722
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4706: LD_LOC 2
4710: PUSH
4711: LD_INT 1
4713: ARRAY
4714: PPUSH
4715: LD_STRING D5d-Sol1-1
4717: PPUSH
4718: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
4722: LD_EXP 31
4726: PPUSH
4727: LD_STRING D5d-JMM-1
4729: PPUSH
4730: CALL_OW 88
// disable_kecy_5D = true ;
4734: LD_ADDR_LOC 9
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// kecy = false ;
4742: LD_ADDR_LOC 7
4746: PUSH
4747: LD_INT 0
4749: ST_TO_ADDR
// end ;
4750: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci1 ;
4751: LD_INT 46
4753: PPUSH
4754: CALL_OW 255
4758: PUSH
4759: LD_EXP 1
4763: EQUAL
4764: PUSH
4765: LD_INT 46
4767: PPUSH
4768: CALL_OW 301
4772: OR
4773: IFFALSE 4978
4775: GO 4777
4777: DISABLE
4778: LD_INT 0
4780: PPUSH
// begin wait ( 0 0$1 ) ;
4781: LD_INT 35
4783: PPUSH
4784: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
4788: LD_INT 4
4790: PPUSH
4791: LD_INT 5
4793: PPUSH
4794: LD_INT 31
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
4804: LD_INT 16
4806: PPUSH
4807: LD_INT 9
4809: PPUSH
4810: LD_EXP 1
4814: PPUSH
4815: LD_INT 5
4817: NEG
4818: PPUSH
4819: CALL_OW 330
// wait ( 0 0$1 ) ;
4823: LD_INT 35
4825: PPUSH
4826: CALL_OW 67
// DialogueOn ;
4830: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
4834: LD_INT 17
4836: PPUSH
4837: LD_INT 10
4839: PPUSH
4840: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
4844: LD_ADDR_LOC 2
4848: PUSH
4849: LD_INT 1
4851: PPUSH
4852: LD_INT 4
4854: PPUSH
4855: LD_EXP 31
4859: PUSH
4860: EMPTY
4861: LIST
4862: PPUSH
4863: CALL 6326 0 3
4867: ST_TO_ADDR
// if pom > 0 then
4868: LD_LOC 2
4872: PUSH
4873: LD_INT 0
4875: GREATER
4876: IFFALSE 4894
// sci1 = pom [ 1 ] else
4878: LD_ADDR_VAR 0 1
4882: PUSH
4883: LD_LOC 2
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: ST_TO_ADDR
4892: GO 4896
// exit ;
4894: GO 4978
// Say ( sci1 , D6-Sci1-1 ) ;
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_STRING D6-Sci1-1
4903: PPUSH
4904: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
4908: LD_EXP 31
4912: PPUSH
4913: LD_STRING D6-JMM-1
4915: PPUSH
4916: CALL_OW 88
// Say ( sci1 , D6-Sci1-2 ) ;
4920: LD_VAR 0 1
4924: PPUSH
4925: LD_STRING D6-Sci1-2
4927: PPUSH
4928: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4932: LD_EXP 31
4936: PPUSH
4937: LD_STRING D6-JMM-2
4939: PPUSH
4940: CALL_OW 88
// DialogueOff ;
4944: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
4948: LD_STRING M3
4950: PPUSH
4951: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
4955: LD_INT 16
4957: PPUSH
4958: LD_INT 9
4960: PPUSH
4961: LD_EXP 1
4965: PPUSH
4966: CALL_OW 331
// A2_dobyta = true ;
4970: LD_ADDR_EXP 28
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// end ;
4978: PPOPN 1
4980: END
// every 0 0$20 trigger A2_dobyta do
4981: LD_EXP 28
4985: IFFALSE 5324
4987: GO 4989
4989: DISABLE
// begin if A1_dobyta and A3_dobyta then
4990: LD_EXP 27
4994: PUSH
4995: LD_EXP 29
4999: AND
5000: IFFALSE 5004
// exit ;
5002: GO 5324
// wait ( 0 0$10 ) ;
5004: LD_INT 350
5006: PPUSH
5007: CALL_OW 67
// if not IsOK ( A3_solop ) then
5011: LD_INT 102
5013: PPUSH
5014: CALL_OW 302
5018: NOT
5019: IFFALSE 5023
// exit ;
5021: GO 5324
// DialogueOn ;
5023: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5027: LD_ADDR_LOC 2
5031: PUSH
5032: LD_INT 1
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: LD_EXP 31
5042: PUSH
5043: LD_EXP 39
5047: PUSH
5048: LD_EXP 33
5052: PUSH
5053: LD_EXP 34
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL 6326 0 3
5068: ST_TO_ADDR
// if pom = 0 then
5069: LD_LOC 2
5073: PUSH
5074: LD_INT 0
5076: EQUAL
5077: IFFALSE 5103
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5079: LD_ADDR_LOC 2
5083: PUSH
5084: LD_INT 1
5086: PPUSH
5087: LD_INT 1
5089: PPUSH
5090: LD_EXP 31
5094: PUSH
5095: EMPTY
5096: LIST
5097: PPUSH
5098: CALL 6326 0 3
5102: ST_TO_ADDR
// if pom = 0 then
5103: LD_LOC 2
5107: PUSH
5108: LD_INT 0
5110: EQUAL
5111: IFFALSE 5125
// pom = JMM else
5113: LD_ADDR_LOC 2
5117: PUSH
5118: LD_EXP 31
5122: ST_TO_ADDR
5123: GO 5139
// pom = pom [ 1 ] ;
5125: LD_ADDR_LOC 2
5129: PUSH
5130: LD_LOC 2
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5139: LD_LOC 2
5143: PPUSH
5144: LD_STRING D7-Sol1-1
5146: PPUSH
5147: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5151: LD_EXP 31
5155: PPUSH
5156: LD_STRING D7-JMM-1
5158: PPUSH
5159: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5163: LD_INT 102
5165: PPUSH
5166: LD_STRING D7-Ar1-1
5168: PPUSH
5169: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5173: LD_EXP 31
5177: PPUSH
5178: LD_STRING D7-JMM-2
5180: PPUSH
5181: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5185: LD_INT 102
5187: PPUSH
5188: LD_STRING D7-Ar1-2
5190: PPUSH
5191: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5195: LD_EXP 31
5199: PPUSH
5200: LD_STRING D7-JMM-3
5202: PPUSH
5203: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5207: LD_INT 102
5209: PPUSH
5210: LD_STRING D7-Ar1-3
5212: PPUSH
5213: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5217: LD_EXP 31
5221: PPUSH
5222: LD_STRING D7-JMM-4
5224: PPUSH
5225: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5229: LD_INT 126
5231: PPUSH
5232: LD_INT 93
5234: PPUSH
5235: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5239: LD_EXP 1
5243: PPUSH
5244: LD_INT 12
5246: PPUSH
5247: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5251: LD_INT 102
5253: PPUSH
5254: LD_STRING D7-Ar1-4
5256: PPUSH
5257: CALL_OW 94
// pom = Query ( QCameras ) ;
5261: LD_ADDR_LOC 2
5265: PUSH
5266: LD_STRING QCameras
5268: PPUSH
5269: CALL_OW 97
5273: ST_TO_ADDR
// if pom = 1 then
5274: LD_LOC 2
5278: PUSH
5279: LD_INT 1
5281: EQUAL
5282: IFFALSE 5311
// begin oposoldier = 1 ;
5284: LD_ADDR_EXP 45
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5292: LD_STRING MCar
5294: PPUSH
5295: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5299: LD_INT 12
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 424
// end else
5309: GO 5320
// oposoldier = - 1 ;
5311: LD_ADDR_EXP 45
5315: PUSH
5316: LD_INT 1
5318: NEG
5319: ST_TO_ADDR
// DialogueOff ;
5320: CALL_OW 7
// end ;
5324: END
// export function dialog_kamery ; begin
5325: LD_INT 0
5327: PPUSH
// if not IsOK ( A3_solop ) then
5328: LD_INT 102
5330: PPUSH
5331: CALL_OW 302
5335: NOT
5336: IFFALSE 5340
// exit ;
5338: GO 5442
// Say ( A3_solop , D7a-Ar1-1 ) ;
5340: LD_INT 102
5342: PPUSH
5343: LD_STRING D7a-Ar1-1
5345: PPUSH
5346: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5350: LD_INT 87
5352: PPUSH
5353: LD_INT 3
5355: PPUSH
5356: LD_EXP 1
5360: PPUSH
5361: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5365: LD_INT 105
5367: PPUSH
5368: LD_INT 39
5370: PPUSH
5371: LD_EXP 1
5375: PPUSH
5376: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5380: LD_INT 134
5382: PPUSH
5383: LD_INT 56
5385: PPUSH
5386: LD_EXP 1
5390: PPUSH
5391: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5395: LD_INT 122
5397: PPUSH
5398: LD_INT 51
5400: PPUSH
5401: LD_EXP 1
5405: PPUSH
5406: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5410: LD_INT 91
5412: PPUSH
5413: LD_INT 8
5415: PPUSH
5416: LD_EXP 1
5420: PPUSH
5421: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5425: LD_STRING MCarOut
5427: PPUSH
5428: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5432: LD_INT 12
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 424
// end ;
5442: LD_VAR 0 1
5446: RET
// every 1 1$0 do
5447: GO 5449
5449: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5450: LD_EXP 49
5454: PUSH
5455: LD_OWVAR 67
5459: ARRAY
5460: PPUSH
5461: CALL_OW 67
// InGameOn ;
5465: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5469: LD_EXP 32
5473: PPUSH
5474: LD_STRING D9-Pow-1
5476: PPUSH
5477: CALL_OW 88
// InGameOff ;
5481: CALL_OW 9
// wait ( 10 10$0 ) ;
5485: LD_INT 21000
5487: PPUSH
5488: CALL_OW 67
// DialogueOn ;
5492: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5496: LD_EXP 32
5500: PPUSH
5501: LD_STRING D9a-Pow-1
5503: PPUSH
5504: CALL_OW 88
// end_of_mission_time ;
5508: CALL 421 0 0
// end ;
5512: END
// every 0 0$3 do
5513: GO 5515
5515: DISABLE
// begin pom1 = false ;
5516: LD_ADDR_LOC 3
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5524: LD_ADDR_LOC 2
5528: PUSH
5529: LD_INT 23
5531: PUSH
5532: LD_INT 18
5534: PUSH
5535: LD_INT 44
5537: PUSH
5538: LD_INT 19
5540: PUSH
5541: LD_INT 24
5543: PUSH
5544: LD_INT 20
5546: PUSH
5547: LD_INT 21
5549: PUSH
5550: LD_INT 93
5552: PUSH
5553: LD_INT 22
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// for i in pom do
5567: LD_ADDR_LOC 1
5571: PUSH
5572: LD_LOC 2
5576: PUSH
5577: FOR_IN
5578: IFFALSE 5606
// if See ( You , i ) then
5580: LD_EXP 1
5584: PPUSH
5585: LD_LOC 1
5589: PPUSH
5590: CALL_OW 292
5594: IFFALSE 5604
// pom1 = true ;
5596: LD_ADDR_LOC 3
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
5604: GO 5577
5606: POP
5607: POP
// if not pom1 then
5608: LD_LOC 3
5612: NOT
5613: IFFALSE 5618
// enable else
5615: ENABLE
5616: GO 5845
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5618: LD_INT 26
5620: PPUSH
5621: CALL_OW 302
5625: PUSH
5626: LD_INT 25
5628: PPUSH
5629: CALL_OW 302
5633: OR
5634: PUSH
5635: LD_INT 27
5637: PPUSH
5638: CALL_OW 302
5642: OR
5643: NOT
5644: IFFALSE 5649
// begin disable ;
5646: DISABLE
// exit ;
5647: GO 5845
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5649: LD_ADDR_LOC 2
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_EXP 1
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 25
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PPUSH
5680: CALL_OW 69
5684: ST_TO_ADDR
// if pom = 0 then
5685: LD_LOC 2
5689: PUSH
5690: LD_INT 0
5692: EQUAL
5693: IFFALSE 5719
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5695: LD_ADDR_LOC 2
5699: PUSH
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 1
5705: PPUSH
5706: LD_EXP 31
5710: PUSH
5711: EMPTY
5712: LIST
5713: PPUSH
5714: CALL 6326 0 3
5718: ST_TO_ADDR
// if pom = 0 then
5719: LD_LOC 2
5723: PUSH
5724: LD_INT 0
5726: EQUAL
5727: IFFALSE 5747
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
5729: LD_ADDR_LOC 2
5733: PUSH
5734: LD_INT 2
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: EMPTY
5741: PPUSH
5742: CALL 6326 0 3
5746: ST_TO_ADDR
// if pom = 0 then
5747: LD_LOC 2
5751: PUSH
5752: LD_INT 0
5754: EQUAL
5755: IFFALSE 5770
// pom = [ JMM ] ;
5757: LD_ADDR_LOC 2
5761: PUSH
5762: LD_EXP 31
5766: PUSH
5767: EMPTY
5768: LIST
5769: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
5770: LD_LOC 2
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: CALL_OW 258
5783: PUSH
5784: LD_INT 1
5786: EQUAL
5787: IFFALSE 5807
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
5789: LD_LOC 2
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: LD_STRING D8-Sol1-1
5800: PPUSH
5801: CALL_OW 88
5805: GO 5823
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
5807: LD_LOC 2
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_STRING D8-FSol1-1
5818: PPUSH
5819: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5823: LD_EXP 31
5827: PPUSH
5828: LD_STRING D8-JMM-1
5830: PPUSH
5831: CALL_OW 88
// wait ( 0 0$20 ) ;
5835: LD_INT 700
5837: PPUSH
5838: CALL_OW 67
// enable ( 2 ) ;
5842: LD_INT 2
5844: ENABLE_MARKED
// end ; end ;
5845: END
// every 0 0$5 marked 2 do
5846: GO 5848
5848: DISABLE
// begin pom1 = false ;
5849: LD_ADDR_LOC 3
5853: PUSH
5854: LD_INT 0
5856: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
5857: LD_ADDR_LOC 2
5861: PUSH
5862: LD_INT 26
5864: PUSH
5865: LD_INT 25
5867: PUSH
5868: LD_INT 27
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: ST_TO_ADDR
// for i in pom do
5876: LD_ADDR_LOC 1
5880: PUSH
5881: LD_LOC 2
5885: PUSH
5886: FOR_IN
5887: IFFALSE 5915
// if See ( You , i ) then
5889: LD_EXP 1
5893: PPUSH
5894: LD_LOC 1
5898: PPUSH
5899: CALL_OW 292
5903: IFFALSE 5913
// pom1 = true ;
5905: LD_ADDR_LOC 3
5909: PUSH
5910: LD_INT 1
5912: ST_TO_ADDR
5913: GO 5886
5915: POP
5916: POP
// if not pom1 then
5917: LD_LOC 3
5921: NOT
5922: IFFALSE 5927
// enable else
5924: ENABLE
5925: GO 6192
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
5927: LD_ADDR_LOC 2
5931: PUSH
5932: LD_INT 22
5934: PUSH
5935: LD_EXP 1
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 25
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 69
5962: PUSH
5963: LD_EXP 31
5967: DIFF
5968: ST_TO_ADDR
// if pom = 0 then
5969: LD_LOC 2
5973: PUSH
5974: LD_INT 0
5976: EQUAL
5977: IFFALSE 6003
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5979: LD_ADDR_LOC 2
5983: PUSH
5984: LD_INT 1
5986: PPUSH
5987: LD_INT 1
5989: PPUSH
5990: LD_EXP 31
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL 6326 0 3
6002: ST_TO_ADDR
// if pom = 0 then
6003: LD_LOC 2
6007: PUSH
6008: LD_INT 0
6010: EQUAL
6011: IFFALSE 6037
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6013: LD_ADDR_LOC 2
6017: PUSH
6018: LD_INT 2
6020: PPUSH
6021: LD_INT 1
6023: PPUSH
6024: LD_EXP 31
6028: PUSH
6029: EMPTY
6030: LIST
6031: PPUSH
6032: CALL 6326 0 3
6036: ST_TO_ADDR
// if pom = 0 then
6037: LD_LOC 2
6041: PUSH
6042: LD_INT 0
6044: EQUAL
6045: IFFALSE 6089
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6047: LD_ADDR_LOC 2
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_EXP 1
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 21
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PPUSH
6078: CALL_OW 69
6082: PUSH
6083: LD_EXP 31
6087: DIFF
6088: ST_TO_ADDR
// if pom = 0 then
6089: LD_LOC 2
6093: PUSH
6094: LD_INT 0
6096: EQUAL
6097: IFFALSE 6101
// exit ;
6099: GO 6192
// DialogueOn ;
6101: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6105: LD_INT 26
6107: PUSH
6108: LD_INT 25
6110: PUSH
6111: LD_INT 27
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6123: LD_LOC 2
6127: PUSH
6128: LD_INT 1
6130: ARRAY
6131: PPUSH
6132: CALL_OW 258
6136: PUSH
6137: LD_INT 1
6139: EQUAL
6140: IFFALSE 6160
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6142: LD_LOC 2
6146: PUSH
6147: LD_INT 1
6149: ARRAY
6150: PPUSH
6151: LD_STRING D8a-Sol2-1
6153: PPUSH
6154: CALL_OW 88
6158: GO 6176
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6160: LD_LOC 2
6164: PUSH
6165: LD_INT 1
6167: ARRAY
6168: PPUSH
6169: LD_STRING D8a-FSol2-1
6171: PPUSH
6172: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6176: LD_EXP 31
6180: PPUSH
6181: LD_STRING D8a-JMM-1
6183: PPUSH
6184: CALL_OW 88
// DialogueOff ;
6188: CALL_OW 7
// end ; end ;
6192: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6193: LD_INT 3
6195: PPUSH
6196: LD_INT 22
6198: PUSH
6199: LD_EXP 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: PPUSH
6211: CALL_OW 70
6215: PUSH
6216: LD_INT 0
6218: GREATER
6219: IFFALSE 6323
6221: GO 6223
6223: DISABLE
6224: LD_INT 0
6226: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 3
6232: PPUSH
6233: CALL_OW 12
6237: PUSH
6238: LD_INT 1
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6246
6244: GO 6257
6246: POP
// pom = A1_vo1 ; 2 :
6247: LD_ADDR_VAR 0 1
6251: PUSH
6252: LD_INT 72
6254: ST_TO_ADDR
6255: GO 6296
6257: LD_INT 2
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// pom = A1_ve1 ; 3 :
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 87
6273: ST_TO_ADDR
6274: GO 6296
6276: LD_INT 3
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6284
6282: GO 6295
6284: POP
// pom = A1_vo4 ; end ;
6285: LD_ADDR_VAR 0 1
6289: PUSH
6290: LD_INT 76
6292: ST_TO_ADDR
6293: GO 6296
6295: POP
// if IsOK ( pom ) then
6296: LD_VAR 0 1
6300: PPUSH
6301: CALL_OW 302
6305: IFFALSE 6319
// Say ( pom , D2aa-Ar1-1 ) ;
6307: LD_VAR 0 1
6311: PPUSH
6312: LD_STRING D2aa-Ar1-1
6314: PPUSH
6315: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6319: CALL 22902 0 0
// end ;
6323: PPOPN 1
6325: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6326: LD_INT 0
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
6335: PPUSH
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_EXP 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: PPUSH
6387: CALL_OW 69
6391: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6392: LD_ADDR_VAR 0 12
6396: PUSH
6397: LD_INT 22
6399: PUSH
6400: LD_EXP 1
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 21
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 33
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: ST_TO_ADDR
// for j in pom1a do
6439: LD_ADDR_VAR 0 18
6443: PUSH
6444: LD_VAR 0 12
6448: PUSH
6449: FOR_IN
6450: IFFALSE 6490
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6452: LD_VAR 0 18
6456: PPUSH
6457: CALL_OW 311
6461: PPUSH
6462: CALL_OW 257
6466: PUSH
6467: LD_INT 4
6469: EQUAL
6470: IFFALSE 6488
// pom1 = pom1 ^ j ;
6472: LD_ADDR_VAR 0 6
6476: PUSH
6477: LD_VAR 0 6
6481: PUSH
6482: LD_VAR 0 18
6486: ADD
6487: ST_TO_ADDR
6488: GO 6449
6490: POP
6491: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6492: LD_ADDR_VAR 0 7
6496: PUSH
6497: LD_INT 22
6499: PUSH
6500: LD_EXP 1
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 25
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 26
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: PPUSH
6536: CALL_OW 69
6540: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6541: LD_ADDR_VAR 0 13
6545: PUSH
6546: LD_INT 22
6548: PUSH
6549: LD_EXP 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 33
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 69
6587: ST_TO_ADDR
// for j in pom2a do
6588: LD_ADDR_VAR 0 18
6592: PUSH
6593: LD_VAR 0 13
6597: PUSH
6598: FOR_IN
6599: IFFALSE 6639
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6601: LD_VAR 0 18
6605: PPUSH
6606: CALL_OW 311
6610: PPUSH
6611: CALL_OW 257
6615: PUSH
6616: LD_INT 3
6618: EQUAL
6619: IFFALSE 6637
// pom2 = pom2 ^ j ;
6621: LD_ADDR_VAR 0 7
6625: PUSH
6626: LD_VAR 0 7
6630: PUSH
6631: LD_VAR 0 18
6635: ADD
6636: ST_TO_ADDR
6637: GO 6598
6639: POP
6640: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6641: LD_ADDR_VAR 0 8
6645: PUSH
6646: LD_INT 22
6648: PUSH
6649: LD_EXP 1
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 25
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 26
6670: PUSH
6671: LD_VAR 0 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6690: LD_ADDR_VAR 0 14
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_EXP 1
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 21
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 33
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 69
6736: ST_TO_ADDR
// for j in pom3a do
6737: LD_ADDR_VAR 0 18
6741: PUSH
6742: LD_VAR 0 14
6746: PUSH
6747: FOR_IN
6748: IFFALSE 6788
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
6750: LD_VAR 0 18
6754: PPUSH
6755: CALL_OW 311
6759: PPUSH
6760: CALL_OW 257
6764: PUSH
6765: LD_INT 2
6767: EQUAL
6768: IFFALSE 6786
// pom3 = pom3 ^ j ;
6770: LD_ADDR_VAR 0 8
6774: PUSH
6775: LD_VAR 0 8
6779: PUSH
6780: LD_VAR 0 18
6784: ADD
6785: ST_TO_ADDR
6786: GO 6747
6788: POP
6789: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
6790: LD_ADDR_VAR 0 9
6794: PUSH
6795: LD_INT 22
6797: PUSH
6798: LD_EXP 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 25
6809: PUSH
6810: LD_INT 1
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 26
6819: PUSH
6820: LD_VAR 0 1
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: PPUSH
6834: CALL_OW 69
6838: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6839: LD_ADDR_VAR 0 15
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_EXP 1
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 21
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 33
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: ST_TO_ADDR
// for j in pom4a do
6886: LD_ADDR_VAR 0 18
6890: PUSH
6891: LD_VAR 0 15
6895: PUSH
6896: FOR_IN
6897: IFFALSE 6937
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
6899: LD_VAR 0 18
6903: PPUSH
6904: CALL_OW 311
6908: PPUSH
6909: CALL_OW 257
6913: PUSH
6914: LD_INT 1
6916: EQUAL
6917: IFFALSE 6935
// pom4 = pom4 ^ j ;
6919: LD_ADDR_VAR 0 9
6923: PUSH
6924: LD_VAR 0 9
6928: PUSH
6929: LD_VAR 0 18
6933: ADD
6934: ST_TO_ADDR
6935: GO 6896
6937: POP
6938: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
6939: LD_ADDR_VAR 0 10
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_EXP 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 5
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 26
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6988: LD_ADDR_VAR 0 16
6992: PUSH
6993: LD_INT 22
6995: PUSH
6996: LD_EXP 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 33
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ST_TO_ADDR
// for j in pom5a do
7035: LD_ADDR_VAR 0 18
7039: PUSH
7040: LD_VAR 0 16
7044: PUSH
7045: FOR_IN
7046: IFFALSE 7086
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7048: LD_VAR 0 18
7052: PPUSH
7053: CALL_OW 311
7057: PPUSH
7058: CALL_OW 257
7062: PUSH
7063: LD_INT 5
7065: EQUAL
7066: IFFALSE 7084
// pom5 = pom5 ^ j ;
7068: LD_ADDR_VAR 0 10
7072: PUSH
7073: LD_VAR 0 10
7077: PUSH
7078: LD_VAR 0 18
7082: ADD
7083: ST_TO_ADDR
7084: GO 7045
7086: POP
7087: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7088: LD_ADDR_VAR 0 11
7092: PUSH
7093: LD_INT 22
7095: PUSH
7096: LD_EXP 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 25
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 26
7117: PUSH
7118: LD_VAR 0 1
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7137: LD_ADDR_VAR 0 17
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_EXP 1
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 33
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 69
7183: ST_TO_ADDR
// for j in pom6a do
7184: LD_ADDR_VAR 0 18
7188: PUSH
7189: LD_VAR 0 17
7193: PUSH
7194: FOR_IN
7195: IFFALSE 7235
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7197: LD_VAR 0 18
7201: PPUSH
7202: CALL_OW 311
7206: PPUSH
7207: CALL_OW 257
7211: PUSH
7212: LD_INT 8
7214: EQUAL
7215: IFFALSE 7233
// pom6 = pom6 ^ j ;
7217: LD_ADDR_VAR 0 11
7221: PUSH
7222: LD_VAR 0 11
7226: PUSH
7227: LD_VAR 0 18
7231: ADD
7232: ST_TO_ADDR
7233: GO 7194
7235: POP
7236: POP
// case povolani of class_scientistic :
7237: LD_VAR 0 2
7241: PUSH
7242: LD_INT 4
7244: DOUBLE
7245: EQUAL
7246: IFTRUE 7250
7248: GO 7263
7250: POP
// pom = pom1 ; class_mechanic :
7251: LD_ADDR_VAR 0 5
7255: PUSH
7256: LD_VAR 0 6
7260: ST_TO_ADDR
7261: GO 7369
7263: LD_INT 3
7265: DOUBLE
7266: EQUAL
7267: IFTRUE 7271
7269: GO 7284
7271: POP
// pom = pom2 ; class_engineer :
7272: LD_ADDR_VAR 0 5
7276: PUSH
7277: LD_VAR 0 7
7281: ST_TO_ADDR
7282: GO 7369
7284: LD_INT 2
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7305
7292: POP
// pom = pom3 ; class_soldier :
7293: LD_ADDR_VAR 0 5
7297: PUSH
7298: LD_VAR 0 8
7302: ST_TO_ADDR
7303: GO 7369
7305: LD_INT 1
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7326
7313: POP
// pom = pom4 ; class_sniper :
7314: LD_ADDR_VAR 0 5
7318: PUSH
7319: LD_VAR 0 9
7323: ST_TO_ADDR
7324: GO 7369
7326: LD_INT 5
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7347
7334: POP
// pom = pom5 ; class_mortar :
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_VAR 0 10
7344: ST_TO_ADDR
7345: GO 7369
7347: LD_INT 8
7349: DOUBLE
7350: EQUAL
7351: IFTRUE 7355
7353: GO 7368
7355: POP
// pom = pom6 ; end ;
7356: LD_ADDR_VAR 0 5
7360: PUSH
7361: LD_VAR 0 11
7365: ST_TO_ADDR
7366: GO 7369
7368: POP
// if povolani <> class_scientistic then
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 4
7376: NONEQUAL
7377: IFFALSE 7395
// pom = pom ^ pom1 ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_VAR 0 6
7393: ADD
7394: ST_TO_ADDR
// if povolani <> class_mechanic then
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 3
7402: NONEQUAL
7403: IFFALSE 7421
// pom = pom ^ pom2 ;
7405: LD_ADDR_VAR 0 5
7409: PUSH
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 7
7419: ADD
7420: ST_TO_ADDR
// if povolani <> class_engineer then
7421: LD_VAR 0 2
7425: PUSH
7426: LD_INT 2
7428: NONEQUAL
7429: IFFALSE 7447
// pom = pom ^ pom3 ;
7431: LD_ADDR_VAR 0 5
7435: PUSH
7436: LD_VAR 0 5
7440: PUSH
7441: LD_VAR 0 8
7445: ADD
7446: ST_TO_ADDR
// if povolani <> class_soldier then
7447: LD_VAR 0 2
7451: PUSH
7452: LD_INT 1
7454: NONEQUAL
7455: IFFALSE 7473
// pom = pom ^ pom4 ;
7457: LD_ADDR_VAR 0 5
7461: PUSH
7462: LD_VAR 0 5
7466: PUSH
7467: LD_VAR 0 9
7471: ADD
7472: ST_TO_ADDR
// if povolani <> class_sniper then
7473: LD_VAR 0 2
7477: PUSH
7478: LD_INT 5
7480: NONEQUAL
7481: IFFALSE 7499
// pom = pom ^ pom5 ;
7483: LD_ADDR_VAR 0 5
7487: PUSH
7488: LD_VAR 0 5
7492: PUSH
7493: LD_VAR 0 10
7497: ADD
7498: ST_TO_ADDR
// if povolani <> class_mortar then
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 8
7506: NONEQUAL
7507: IFFALSE 7525
// pom = pom ^ pom6 ;
7509: LD_ADDR_VAR 0 5
7513: PUSH
7514: LD_VAR 0 5
7518: PUSH
7519: LD_VAR 0 11
7523: ADD
7524: ST_TO_ADDR
// result := pom diff diffseznam ;
7525: LD_ADDR_VAR 0 4
7529: PUSH
7530: LD_VAR 0 5
7534: PUSH
7535: LD_VAR 0 3
7539: DIFF
7540: ST_TO_ADDR
// end ;
7541: LD_VAR 0 4
7545: RET
// export function query_konec_mise ; var pom ; begin
7546: LD_INT 0
7548: PPUSH
7549: PPUSH
// pom = Query ( QEndMission ) ;
7550: LD_ADDR_VAR 0 2
7554: PUSH
7555: LD_STRING QEndMission
7557: PPUSH
7558: CALL_OW 97
7562: ST_TO_ADDR
// result := pom ;
7563: LD_ADDR_VAR 0 1
7567: PUSH
7568: LD_VAR 0 2
7572: ST_TO_ADDR
// end ;
7573: LD_VAR 0 1
7577: RET
// every 0 0$1 do var pom ; var jedn ;
7578: GO 7580
7580: DISABLE
7581: LD_INT 0
7583: PPUSH
7584: PPUSH
// begin jedn = 0 ;
7585: LD_ADDR_VAR 0 2
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7593: LD_ADDR_VAR 0 1
7597: PUSH
7598: LD_INT 22
7600: PUSH
7601: LD_EXP 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 1
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 101
7622: PUSH
7623: LD_EXP 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// for i in pom do
7642: LD_ADDR_LOC 1
7646: PUSH
7647: LD_VAR 0 1
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7682
// if GetLives ( i ) < 250 then
7655: LD_LOC 1
7659: PPUSH
7660: CALL_OW 256
7664: PUSH
7665: LD_INT 250
7667: LESS
7668: IFFALSE 7680
// jedn = i ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_LOC 1
7679: ST_TO_ADDR
7680: GO 7652
7682: POP
7683: POP
// if jedn <> 0 then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 0
7691: NONEQUAL
7692: IFFALSE 7703
// Hint ( stimulationdrugs ) else
7694: LD_STRING stimulationdrugs
7696: PPUSH
7697: CALL_OW 339
7701: GO 7704
// enable ;
7703: ENABLE
// end ; end_of_file
7704: PPOPN 2
7706: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
7707: LD_INT 0
7709: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7710: LD_VAR 0 1
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: LD_VAR 0 3
7724: PPUSH
7725: CALL_OW 380
// hc_name := name ;
7729: LD_ADDR_OWVAR 26
7733: PUSH
7734: LD_VAR 0 4
7738: ST_TO_ADDR
// end ;
7739: LD_VAR 0 5
7743: RET
// export function nacti_osobu ( ident ) ; begin
7744: LD_INT 0
7746: PPUSH
// if CheckCharacterSet ( ident ) then
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 29
7756: IFFALSE 7775
// result := CreateCharacter ( ident ) else
7758: LD_ADDR_VAR 0 2
7762: PUSH
7763: LD_VAR 0 1
7767: PPUSH
7768: CALL_OW 34
7772: ST_TO_ADDR
7773: GO 7783
// result := 0 ;
7775: LD_ADDR_VAR 0 2
7779: PUSH
7780: LD_INT 0
7782: ST_TO_ADDR
// end ;
7783: LD_VAR 0 2
7787: RET
// export function create_amici ; var i ; begin
7788: LD_INT 0
7790: PPUSH
7791: PPUSH
// uc_side = You ;
7792: LD_ADDR_OWVAR 20
7796: PUSH
7797: LD_EXP 1
7801: ST_TO_ADDR
// uc_nation = nation_american ;
7802: LD_ADDR_OWVAR 21
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
7810: LD_ADDR_OWVAR 37
7814: PUSH
7815: LD_INT 3
7817: ST_TO_ADDR
// vc_control = control_computer ;
7818: LD_ADDR_OWVAR 38
7822: PUSH
7823: LD_INT 3
7825: ST_TO_ADDR
// vc_engine = engine_solar ;
7826: LD_ADDR_OWVAR 39
7830: PUSH
7831: LD_INT 2
7833: ST_TO_ADDR
// vc_weapon = us_radar ;
7834: LD_ADDR_OWVAR 40
7838: PUSH
7839: LD_INT 11
7841: ST_TO_ADDR
// av = CreateVehicle ;
7842: LD_ADDR_LOC 11
7846: PUSH
7847: CALL_OW 45
7851: ST_TO_ADDR
// Radar_enter := av ;
7852: LD_ADDR_EXP 43
7856: PUSH
7857: LD_LOC 11
7861: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
7862: LD_LOC 11
7866: PPUSH
7867: LD_INT 85
7869: PPUSH
7870: LD_INT 145
7872: PPUSH
7873: LD_INT 0
7875: PPUSH
7876: CALL_OW 48
// for i in Amici_enter do
7880: LD_ADDR_VAR 0 2
7884: PUSH
7885: LD_EXP 42
7889: PUSH
7890: FOR_IN
7891: IFFALSE 7910
// PlaceUnitArea ( i , AMEnter , false ) ;
7893: LD_VAR 0 2
7897: PPUSH
7898: LD_INT 1
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL_OW 49
7908: GO 7890
7910: POP
7911: POP
// end ;
7912: LD_VAR 0 1
7916: RET
// export function create_ar_protiofenzivu ; var pom ; begin
7917: LD_INT 0
7919: PPUSH
7920: PPUSH
// pom = [ ] ;
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: EMPTY
7927: ST_TO_ADDR
// uc_side := Arabi ;
7928: LD_ADDR_OWVAR 20
7932: PUSH
7933: LD_EXP 3
7937: ST_TO_ADDR
// uc_nation := nation_arabian ;
7938: LD_ADDR_OWVAR 21
7942: PUSH
7943: LD_INT 2
7945: ST_TO_ADDR
// uc_direction := 3 ;
7946: LD_ADDR_OWVAR 24
7950: PUSH
7951: LD_INT 3
7953: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
7954: LD_INT 1
7956: PPUSH
7957: LD_INT 3
7959: PPUSH
7960: LD_EXP 48
7964: PUSH
7965: LD_OWVAR 67
7969: ARRAY
7970: PPUSH
7971: LD_STRING Hasam El Azis
7973: PPUSH
7974: CALL 7707 0 4
// ah = CreateHuman ;
7978: LD_ADDR_LOC 10
7982: PUSH
7983: CALL_OW 44
7987: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7988: LD_ADDR_OWVAR 37
7992: PUSH
7993: LD_INT 14
7995: ST_TO_ADDR
// vc_control := control_manual ;
7996: LD_ADDR_OWVAR 38
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// vc_engine := engine_combustion ;
8004: LD_ADDR_OWVAR 39
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// vc_weapon := ar_gun ;
8012: LD_ADDR_OWVAR 40
8016: PUSH
8017: LD_INT 27
8019: ST_TO_ADDR
// av = CreateVehicle ;
8020: LD_ADDR_LOC 11
8024: PUSH
8025: CALL_OW 45
8029: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8030: LD_LOC 10
8034: PPUSH
8035: LD_LOC 11
8039: PPUSH
8040: CALL_OW 52
// pom = pom ^ av ;
8044: LD_ADDR_VAR 0 2
8048: PUSH
8049: LD_VAR 0 2
8053: PUSH
8054: LD_LOC 11
8058: ADD
8059: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 3
8065: PPUSH
8066: LD_EXP 48
8070: PUSH
8071: LD_OWVAR 67
8075: ARRAY
8076: PUSH
8077: LD_INT 2
8079: MINUS
8080: PPUSH
8081: LD_STRING 
8083: PPUSH
8084: CALL 7707 0 4
// ah = CreateHuman ;
8088: LD_ADDR_LOC 10
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8098: LD_ADDR_OWVAR 37
8102: PUSH
8103: LD_INT 12
8105: ST_TO_ADDR
// vc_control := control_manual ;
8106: LD_ADDR_OWVAR 38
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// vc_engine := engine_solar ;
8114: LD_ADDR_OWVAR 39
8118: PUSH
8119: LD_INT 2
8121: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8122: LD_ADDR_OWVAR 40
8126: PUSH
8127: LD_INT 24
8129: ST_TO_ADDR
// av = CreateVehicle ;
8130: LD_ADDR_LOC 11
8134: PUSH
8135: CALL_OW 45
8139: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8140: LD_LOC 10
8144: PPUSH
8145: LD_LOC 11
8149: PPUSH
8150: CALL_OW 52
// pom = pom ^ av ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_VAR 0 2
8163: PUSH
8164: LD_LOC 11
8168: ADD
8169: ST_TO_ADDR
// if difficulty > 1 then
8170: LD_OWVAR 67
8174: PUSH
8175: LD_INT 1
8177: GREATER
8178: IFFALSE 8212
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8180: LD_ADDR_LOC 10
8184: PUSH
8185: CALL 10244 0 0
8189: PPUSH
8190: LD_INT 1
8192: PPUSH
8193: LD_EXP 48
8197: PUSH
8198: LD_OWVAR 67
8202: ARRAY
8203: PPUSH
8204: LD_STRING 
8206: PPUSH
8207: CALL 13808 0 4
8211: ST_TO_ADDR
// end ; if difficulty > 2 then
8212: LD_OWVAR 67
8216: PUSH
8217: LD_INT 2
8219: GREATER
8220: IFFALSE 8280
// begin vc_chassis := ar_medium_trike ;
8222: LD_ADDR_OWVAR 37
8226: PUSH
8227: LD_INT 13
8229: ST_TO_ADDR
// vc_control := control_apeman ;
8230: LD_ADDR_OWVAR 38
8234: PUSH
8235: LD_INT 5
8237: ST_TO_ADDR
// vc_engine := engine_siberite ;
8238: LD_ADDR_OWVAR 39
8242: PUSH
8243: LD_INT 3
8245: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8246: LD_ADDR_OWVAR 40
8250: PUSH
8251: LD_INT 22
8253: ST_TO_ADDR
// av = CreateVehicle ;
8254: LD_ADDR_LOC 11
8258: PUSH
8259: CALL_OW 45
8263: ST_TO_ADDR
// pom = pom ^ av ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_VAR 0 2
8273: PUSH
8274: LD_LOC 11
8278: ADD
8279: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8280: LD_ADDR_EXP 9
8284: PUSH
8285: LD_VAR 0 2
8289: ST_TO_ADDR
// end ;
8290: LD_VAR 0 1
8294: RET
// export function create_auto_pro_solopa ; begin
8295: LD_INT 0
8297: PPUSH
// uc_side := Arabi ;
8298: LD_ADDR_OWVAR 20
8302: PUSH
8303: LD_EXP 3
8307: ST_TO_ADDR
// uc_nation := nation_arabian ;
8308: LD_ADDR_OWVAR 21
8312: PUSH
8313: LD_INT 2
8315: ST_TO_ADDR
// uc_direction := 3 ;
8316: LD_ADDR_OWVAR 24
8320: PUSH
8321: LD_INT 3
8323: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8324: LD_ADDR_OWVAR 37
8328: PUSH
8329: LD_INT 14
8331: ST_TO_ADDR
// vc_control := control_manual ;
8332: LD_ADDR_OWVAR 38
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// vc_engine := engine_siberite ;
8340: LD_ADDR_OWVAR 39
8344: PUSH
8345: LD_INT 3
8347: ST_TO_ADDR
// vc_weapon := ar_gun ;
8348: LD_ADDR_OWVAR 40
8352: PUSH
8353: LD_INT 27
8355: ST_TO_ADDR
// av := CreateVehicle ;
8356: LD_ADDR_LOC 11
8360: PUSH
8361: CALL_OW 45
8365: ST_TO_ADDR
// result := av ;
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_LOC 11
8375: ST_TO_ADDR
// end ;
8376: LD_VAR 0 1
8380: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8381: LD_INT 0
8383: PPUSH
8384: PPUSH
8385: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8386: LD_INT 92
8388: PPUSH
8389: LD_INT 8
8391: PPUSH
8392: LD_EXP 48
8396: PUSH
8397: LD_OWVAR 67
8401: ARRAY
8402: PPUSH
8403: CALL 8647 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8407: LD_INT 82
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: LD_EXP 48
8417: PUSH
8418: LD_OWVAR 67
8422: ARRAY
8423: PPUSH
8424: CALL 8647 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8428: LD_INT 83
8430: PPUSH
8431: LD_INT 1
8433: PPUSH
8434: LD_EXP 48
8438: PUSH
8439: LD_OWVAR 67
8443: ARRAY
8444: PPUSH
8445: CALL 8647 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8449: LD_INT 101
8451: PPUSH
8452: LD_INT 1
8454: PPUSH
8455: LD_EXP 48
8459: PUSH
8460: LD_OWVAR 67
8464: ARRAY
8465: PPUSH
8466: CALL 8647 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8470: LD_INT 102
8472: PPUSH
8473: LD_INT 2
8475: PPUSH
8476: LD_EXP 48
8480: PUSH
8481: LD_OWVAR 67
8485: ARRAY
8486: PPUSH
8487: CALL 8647 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8491: LD_ADDR_VAR 0 2
8495: PUSH
8496: LD_INT 96
8498: PUSH
8499: LD_INT 95
8501: PUSH
8502: LD_INT 94
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: ST_TO_ADDR
// for i in pom do
8510: LD_ADDR_VAR 0 3
8514: PUSH
8515: LD_VAR 0 2
8519: PUSH
8520: FOR_IN
8521: IFFALSE 8548
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8523: LD_VAR 0 3
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: LD_EXP 48
8535: PUSH
8536: LD_OWVAR 67
8540: ARRAY
8541: PPUSH
8542: CALL 8647 0 3
8546: GO 8520
8548: POP
8549: POP
// end ;
8550: LD_VAR 0 1
8554: RET
// function set_skills ( un , skills ) ; begin
8555: LD_INT 0
8557: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8558: LD_VAR 0 1
8562: PPUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 2
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8579: LD_VAR 0 1
8583: PPUSH
8584: LD_INT 2
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 2
8594: ARRAY
8595: PPUSH
8596: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_INT 3
8607: PPUSH
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 3
8615: ARRAY
8616: PPUSH
8617: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: LD_INT 4
8628: PPUSH
8629: LD_VAR 0 2
8633: PUSH
8634: LD_INT 4
8636: ARRAY
8637: PPUSH
8638: CALL_OW 237
// end ;
8642: LD_VAR 0 3
8646: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8647: LD_INT 0
8649: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_VAR 0 3
8662: PPUSH
8663: LD_STRING 
8665: PPUSH
8666: CALL 7707 0 4
// ah = CreateHuman ;
8670: LD_ADDR_LOC 10
8674: PUSH
8675: CALL_OW 44
8679: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
8680: LD_ADDR_LOC 16
8684: PUSH
8685: LD_LOC 10
8689: PPUSH
8690: CALL 12211 0 1
8694: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
8695: LD_VAR 0 1
8699: PPUSH
8700: LD_LOC 10
8704: PPUSH
8705: CALL 12211 0 1
8709: PPUSH
8710: CALL 8555 0 2
// DestroyUnit ( ah ) ;
8714: LD_LOC 10
8718: PPUSH
8719: CALL_OW 65
// end ;
8723: LD_VAR 0 4
8727: RET
// export function vytvor_opravare ; var pom ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
// uc_side := Arabi ;
8732: LD_ADDR_OWVAR 20
8736: PUSH
8737: LD_EXP 3
8741: ST_TO_ADDR
// uc_nation := nation_arabian ;
8742: LD_ADDR_OWVAR 21
8746: PUSH
8747: LD_INT 2
8749: ST_TO_ADDR
// uc_direction := 3 ;
8750: LD_ADDR_OWVAR 24
8754: PUSH
8755: LD_INT 3
8757: ST_TO_ADDR
// pom = [ ] ;
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: EMPTY
8764: ST_TO_ADDR
// if difficulty < 3 then
8765: LD_OWVAR 67
8769: PUSH
8770: LD_INT 3
8772: LESS
8773: IFFALSE 8847
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
8775: LD_INT 1
8777: PPUSH
8778: LD_INT 2
8780: PPUSH
8781: LD_EXP 48
8785: PUSH
8786: LD_OWVAR 67
8790: ARRAY
8791: PUSH
8792: LD_INT 1
8794: PLUS
8795: PPUSH
8796: LD_STRING Gru Pakansu
8798: PPUSH
8799: CALL 7707 0 4
// ah = CreateHuman ;
8803: LD_ADDR_LOC 10
8807: PUSH
8808: CALL_OW 44
8812: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
8813: LD_LOC 10
8817: PPUSH
8818: LD_INT 19
8820: PPUSH
8821: LD_INT 6
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 48
// pom = pom ^ ah ;
8831: LD_ADDR_VAR 0 2
8835: PUSH
8836: LD_VAR 0 2
8840: PUSH
8841: LD_LOC 10
8845: ADD
8846: ST_TO_ADDR
// end ; if difficulty < 2 then
8847: LD_OWVAR 67
8851: PUSH
8852: LD_INT 2
8854: LESS
8855: IFFALSE 8931
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
8857: CALL 10244 0 0
8861: PPUSH
8862: LD_INT 2
8864: PPUSH
8865: LD_EXP 48
8869: PUSH
8870: LD_OWVAR 67
8874: ARRAY
8875: PUSH
8876: LD_INT 2
8878: PLUS
8879: PPUSH
8880: LD_STRING 
8882: PPUSH
8883: CALL 7707 0 4
// ah = CreateHuman ;
8887: LD_ADDR_LOC 10
8891: PUSH
8892: CALL_OW 44
8896: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
8897: LD_LOC 10
8901: PPUSH
8902: LD_INT 25
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: LD_INT 0
8910: PPUSH
8911: CALL_OW 48
// pom = pom ^ ah ;
8915: LD_ADDR_VAR 0 2
8919: PUSH
8920: LD_VAR 0 2
8924: PUSH
8925: LD_LOC 10
8929: ADD
8930: ST_TO_ADDR
// end ; result := pom ;
8931: LD_ADDR_VAR 0 1
8935: PUSH
8936: LD_VAR 0 2
8940: ST_TO_ADDR
// end ;
8941: LD_VAR 0 1
8945: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
8946: LD_INT 0
8948: PPUSH
8949: PPUSH
8950: PPUSH
8951: PPUSH
// pom = [ ] ;
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// uc_side := Arabi ;
8959: LD_ADDR_OWVAR 20
8963: PUSH
8964: LD_EXP 3
8968: ST_TO_ADDR
// uc_nation := nation_arabian ;
8969: LD_ADDR_OWVAR 21
8973: PUSH
8974: LD_INT 2
8976: ST_TO_ADDR
// uc_direction := 0 ;
8977: LD_ADDR_OWVAR 24
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// for i = 1 to 7 do
8985: LD_ADDR_VAR 0 3
8989: PUSH
8990: DOUBLE
8991: LD_INT 1
8993: DEC
8994: ST_TO_ADDR
8995: LD_INT 7
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9073
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 3
9008: PPUSH
9009: CALL 10279 0 2
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: LD_EXP 48
9021: PUSH
9022: LD_OWVAR 67
9026: ARRAY
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: CALL 10495 0 2
9040: PPUSH
9041: CALL 7707 0 4
// ah = CreateHuman ;
9045: LD_ADDR_LOC 10
9049: PUSH
9050: CALL_OW 44
9054: ST_TO_ADDR
// pom = pom ^ ah ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_VAR 0 2
9064: PUSH
9065: LD_LOC 10
9069: ADD
9070: ST_TO_ADDR
// end ;
9071: GO 8998
9073: POP
9074: POP
// for i = 1 to 3 do
9075: LD_ADDR_VAR 0 3
9079: PUSH
9080: DOUBLE
9081: LD_INT 1
9083: DEC
9084: ST_TO_ADDR
9085: LD_INT 3
9087: PUSH
9088: FOR_TO
9089: IFFALSE 9163
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9091: LD_INT 1
9093: PPUSH
9094: LD_VAR 0 3
9098: PPUSH
9099: CALL 10279 0 2
9103: PPUSH
9104: LD_INT 8
9106: PPUSH
9107: LD_EXP 48
9111: PUSH
9112: LD_OWVAR 67
9116: ARRAY
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: CALL 10495 0 2
9130: PPUSH
9131: CALL 7707 0 4
// ah = CreateHuman ;
9135: LD_ADDR_LOC 10
9139: PUSH
9140: CALL_OW 44
9144: ST_TO_ADDR
// pom = pom ^ ah ;
9145: LD_ADDR_VAR 0 2
9149: PUSH
9150: LD_VAR 0 2
9154: PUSH
9155: LD_LOC 10
9159: ADD
9160: ST_TO_ADDR
// end ;
9161: GO 9088
9163: POP
9164: POP
// for i = 1 to 2 do
9165: LD_ADDR_VAR 0 3
9169: PUSH
9170: DOUBLE
9171: LD_INT 1
9173: DEC
9174: ST_TO_ADDR
9175: LD_INT 2
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9235
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9181: CALL 10244 0 0
9185: PPUSH
9186: LD_INT 4
9188: PPUSH
9189: LD_EXP 48
9193: PUSH
9194: LD_OWVAR 67
9198: ARRAY
9199: PPUSH
9200: LD_STRING 
9202: PPUSH
9203: CALL 7707 0 4
// ah = CreateHuman ;
9207: LD_ADDR_LOC 10
9211: PUSH
9212: CALL_OW 44
9216: ST_TO_ADDR
// pom = pom ^ ah ;
9217: LD_ADDR_VAR 0 2
9221: PUSH
9222: LD_VAR 0 2
9226: PUSH
9227: LD_LOC 10
9231: ADD
9232: ST_TO_ADDR
// end ;
9233: GO 9178
9235: POP
9236: POP
// for i = 1 to 2 do
9237: LD_ADDR_VAR 0 3
9241: PUSH
9242: DOUBLE
9243: LD_INT 1
9245: DEC
9246: ST_TO_ADDR
9247: LD_INT 2
9249: PUSH
9250: FOR_TO
9251: IFFALSE 9333
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9253: LD_INT 1
9255: PPUSH
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 12
9263: PLUS
9264: PPUSH
9265: CALL 10279 0 2
9269: PPUSH
9270: LD_INT 8
9272: PPUSH
9273: LD_EXP 48
9277: PUSH
9278: LD_OWVAR 67
9282: ARRAY
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: LD_VAR 0 3
9291: PUSH
9292: LD_INT 12
9294: PLUS
9295: PPUSH
9296: CALL 10495 0 2
9300: PPUSH
9301: CALL 7707 0 4
// ah = CreateHuman ;
9305: LD_ADDR_LOC 10
9309: PUSH
9310: CALL_OW 44
9314: ST_TO_ADDR
// pom = pom ^ ah ;
9315: LD_ADDR_VAR 0 2
9319: PUSH
9320: LD_VAR 0 2
9324: PUSH
9325: LD_LOC 10
9329: ADD
9330: ST_TO_ADDR
// end ;
9331: GO 9250
9333: POP
9334: POP
// for i = 1 to 2 do
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: DOUBLE
9341: LD_INT 1
9343: DEC
9344: ST_TO_ADDR
9345: LD_INT 2
9347: PUSH
9348: FOR_TO
9349: IFFALSE 9431
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9351: LD_INT 1
9353: PPUSH
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 14
9361: PLUS
9362: PPUSH
9363: CALL 10279 0 2
9367: PPUSH
9368: LD_INT 2
9370: PPUSH
9371: LD_EXP 48
9375: PUSH
9376: LD_OWVAR 67
9380: ARRAY
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 3
9389: PUSH
9390: LD_INT 14
9392: PLUS
9393: PPUSH
9394: CALL 10495 0 2
9398: PPUSH
9399: CALL 7707 0 4
// ah = CreateHuman ;
9403: LD_ADDR_LOC 10
9407: PUSH
9408: CALL_OW 44
9412: ST_TO_ADDR
// pom = pom ^ ah ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_VAR 0 2
9422: PUSH
9423: LD_LOC 10
9427: ADD
9428: ST_TO_ADDR
// end ;
9429: GO 9348
9431: POP
9432: POP
// for i = 1 to 4 do
9433: LD_ADDR_VAR 0 3
9437: PUSH
9438: DOUBLE
9439: LD_INT 1
9441: DEC
9442: ST_TO_ADDR
9443: LD_INT 4
9445: PUSH
9446: FOR_TO
9447: IFFALSE 9529
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9449: LD_INT 1
9451: PPUSH
9452: LD_VAR 0 3
9456: PUSH
9457: LD_INT 16
9459: PLUS
9460: PPUSH
9461: CALL 10279 0 2
9465: PPUSH
9466: LD_INT 3
9468: PPUSH
9469: LD_EXP 48
9473: PUSH
9474: LD_OWVAR 67
9478: ARRAY
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 16
9490: PLUS
9491: PPUSH
9492: CALL 10495 0 2
9496: PPUSH
9497: CALL 7707 0 4
// ah = CreateHuman ;
9501: LD_ADDR_LOC 10
9505: PUSH
9506: CALL_OW 44
9510: ST_TO_ADDR
// pom = pom ^ ah ;
9511: LD_ADDR_VAR 0 2
9515: PUSH
9516: LD_VAR 0 2
9520: PUSH
9521: LD_LOC 10
9525: ADD
9526: ST_TO_ADDR
// end ;
9527: GO 9446
9529: POP
9530: POP
// for i = 1 to 3 do
9531: LD_ADDR_VAR 0 3
9535: PUSH
9536: DOUBLE
9537: LD_INT 1
9539: DEC
9540: ST_TO_ADDR
9541: LD_INT 3
9543: PUSH
9544: FOR_TO
9545: IFFALSE 9627
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9547: LD_INT 1
9549: PPUSH
9550: LD_VAR 0 3
9554: PUSH
9555: LD_INT 20
9557: PLUS
9558: PPUSH
9559: CALL 10279 0 2
9563: PPUSH
9564: LD_INT 3
9566: PPUSH
9567: LD_EXP 48
9571: PUSH
9572: LD_OWVAR 67
9576: ARRAY
9577: PPUSH
9578: LD_INT 1
9580: PPUSH
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 20
9588: PLUS
9589: PPUSH
9590: CALL 10495 0 2
9594: PPUSH
9595: CALL 7707 0 4
// ah = CreateHuman ;
9599: LD_ADDR_LOC 10
9603: PUSH
9604: CALL_OW 44
9608: ST_TO_ADDR
// pom = pom ^ ah ;
9609: LD_ADDR_VAR 0 2
9613: PUSH
9614: LD_VAR 0 2
9618: PUSH
9619: LD_LOC 10
9623: ADD
9624: ST_TO_ADDR
// end ;
9625: GO 9544
9627: POP
9628: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9629: LD_ADDR_EXP 10
9633: PUSH
9634: LD_VAR 0 2
9638: ST_TO_ADDR
// end ;
9639: LD_VAR 0 1
9643: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9644: LD_INT 0
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
// pom = [ ] ;
9650: LD_ADDR_VAR 0 2
9654: PUSH
9655: EMPTY
9656: ST_TO_ADDR
// uc_side := Arabi ;
9657: LD_ADDR_OWVAR 20
9661: PUSH
9662: LD_EXP 3
9666: ST_TO_ADDR
// uc_nation := nation_arabian ;
9667: LD_ADDR_OWVAR 21
9671: PUSH
9672: LD_INT 2
9674: ST_TO_ADDR
// uc_direction := 0 ;
9675: LD_ADDR_OWVAR 24
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// for i = 1 to 4 do
9683: LD_ADDR_VAR 0 3
9687: PUSH
9688: DOUBLE
9689: LD_INT 1
9691: DEC
9692: ST_TO_ADDR
9693: LD_INT 4
9695: PUSH
9696: FOR_TO
9697: IFFALSE 9771
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9699: LD_INT 2
9701: PPUSH
9702: LD_VAR 0 3
9706: PPUSH
9707: CALL 10279 0 2
9711: PPUSH
9712: LD_INT 1
9714: PPUSH
9715: LD_EXP 48
9719: PUSH
9720: LD_OWVAR 67
9724: ARRAY
9725: PPUSH
9726: LD_INT 2
9728: PPUSH
9729: LD_VAR 0 3
9733: PPUSH
9734: CALL 10495 0 2
9738: PPUSH
9739: CALL 7707 0 4
// ah = CreateHuman ;
9743: LD_ADDR_LOC 10
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// pom = pom ^ ah ;
9753: LD_ADDR_VAR 0 2
9757: PUSH
9758: LD_VAR 0 2
9762: PUSH
9763: LD_LOC 10
9767: ADD
9768: ST_TO_ADDR
// end ;
9769: GO 9696
9771: POP
9772: POP
// for i = 1 to 3 do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 3
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9861
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
9789: LD_INT 2
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: CALL 10279 0 2
9801: PPUSH
9802: LD_INT 8
9804: PPUSH
9805: LD_EXP 48
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: PPUSH
9816: LD_INT 2
9818: PPUSH
9819: LD_VAR 0 3
9823: PPUSH
9824: CALL 10495 0 2
9828: PPUSH
9829: CALL 7707 0 4
// ah = CreateHuman ;
9833: LD_ADDR_LOC 10
9837: PUSH
9838: CALL_OW 44
9842: ST_TO_ADDR
// pom = pom ^ ah ;
9843: LD_ADDR_VAR 0 2
9847: PUSH
9848: LD_VAR 0 2
9852: PUSH
9853: LD_LOC 10
9857: ADD
9858: ST_TO_ADDR
// end ;
9859: GO 9786
9861: POP
9862: POP
// for i = 1 to 4 do
9863: LD_ADDR_VAR 0 3
9867: PUSH
9868: DOUBLE
9869: LD_INT 1
9871: DEC
9872: ST_TO_ADDR
9873: LD_INT 4
9875: PUSH
9876: FOR_TO
9877: IFFALSE 9959
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
9879: LD_INT 2
9881: PPUSH
9882: LD_VAR 0 3
9886: PUSH
9887: LD_INT 7
9889: PLUS
9890: PPUSH
9891: CALL 10279 0 2
9895: PPUSH
9896: LD_INT 3
9898: PPUSH
9899: LD_EXP 48
9903: PUSH
9904: LD_OWVAR 67
9908: ARRAY
9909: PPUSH
9910: LD_INT 2
9912: PPUSH
9913: LD_VAR 0 3
9917: PUSH
9918: LD_INT 7
9920: PLUS
9921: PPUSH
9922: CALL 10495 0 2
9926: PPUSH
9927: CALL 7707 0 4
// ah = CreateHuman ;
9931: LD_ADDR_LOC 10
9935: PUSH
9936: CALL_OW 44
9940: ST_TO_ADDR
// pom = pom ^ ah ;
9941: LD_ADDR_VAR 0 2
9945: PUSH
9946: LD_VAR 0 2
9950: PUSH
9951: LD_LOC 10
9955: ADD
9956: ST_TO_ADDR
// end ;
9957: GO 9876
9959: POP
9960: POP
// for i = 1 to 2 do
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: DOUBLE
9967: LD_INT 1
9969: DEC
9970: ST_TO_ADDR
9971: LD_INT 2
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10031
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9977: CALL 10244 0 0
9981: PPUSH
9982: LD_INT 4
9984: PPUSH
9985: LD_EXP 48
9989: PUSH
9990: LD_OWVAR 67
9994: ARRAY
9995: PPUSH
9996: LD_STRING 
9998: PPUSH
9999: CALL 7707 0 4
// ah = CreateHuman ;
10003: LD_ADDR_LOC 10
10007: PUSH
10008: CALL_OW 44
10012: ST_TO_ADDR
// pom = pom ^ ah ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: LD_VAR 0 2
10022: PUSH
10023: LD_LOC 10
10027: ADD
10028: ST_TO_ADDR
// end ;
10029: GO 9974
10031: POP
10032: POP
// for i = 1 to 2 do
10033: LD_ADDR_VAR 0 3
10037: PUSH
10038: DOUBLE
10039: LD_INT 1
10041: DEC
10042: ST_TO_ADDR
10043: LD_INT 2
10045: PUSH
10046: FOR_TO
10047: IFFALSE 10129
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10049: LD_INT 2
10051: PPUSH
10052: LD_VAR 0 3
10056: PUSH
10057: LD_INT 13
10059: PLUS
10060: PPUSH
10061: CALL 10279 0 2
10065: PPUSH
10066: LD_INT 8
10068: PPUSH
10069: LD_EXP 48
10073: PUSH
10074: LD_OWVAR 67
10078: ARRAY
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: LD_VAR 0 3
10087: PUSH
10088: LD_INT 13
10090: PLUS
10091: PPUSH
10092: CALL 10495 0 2
10096: PPUSH
10097: CALL 7707 0 4
// ah = CreateHuman ;
10101: LD_ADDR_LOC 10
10105: PUSH
10106: CALL_OW 44
10110: ST_TO_ADDR
// pom = pom ^ ah ;
10111: LD_ADDR_VAR 0 2
10115: PUSH
10116: LD_VAR 0 2
10120: PUSH
10121: LD_LOC 10
10125: ADD
10126: ST_TO_ADDR
// end ;
10127: GO 10046
10129: POP
10130: POP
// for i = 1 to 2 do
10131: LD_ADDR_VAR 0 3
10135: PUSH
10136: DOUBLE
10137: LD_INT 1
10139: DEC
10140: ST_TO_ADDR
10141: LD_INT 2
10143: PUSH
10144: FOR_TO
10145: IFFALSE 10227
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10147: LD_INT 2
10149: PPUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 15
10157: PLUS
10158: PPUSH
10159: CALL 10279 0 2
10163: PPUSH
10164: LD_INT 2
10166: PPUSH
10167: LD_EXP 48
10171: PUSH
10172: LD_OWVAR 67
10176: ARRAY
10177: PPUSH
10178: LD_INT 2
10180: PPUSH
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 15
10188: PLUS
10189: PPUSH
10190: CALL 10495 0 2
10194: PPUSH
10195: CALL 7707 0 4
// ah = CreateHuman ;
10199: LD_ADDR_LOC 10
10203: PUSH
10204: CALL_OW 44
10208: ST_TO_ADDR
// pom = pom ^ ah ;
10209: LD_ADDR_VAR 0 2
10213: PUSH
10214: LD_VAR 0 2
10218: PUSH
10219: LD_LOC 10
10223: ADD
10224: ST_TO_ADDR
// end ;
10225: GO 10144
10227: POP
10228: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10229: LD_ADDR_EXP 11
10233: PUSH
10234: LD_VAR 0 2
10238: ST_TO_ADDR
// end ;
10239: LD_VAR 0 1
10243: RET
// function get_sex ; begin
10244: LD_INT 0
10246: PPUSH
// if Prob ( 20 ) then
10247: LD_INT 20
10249: PPUSH
10250: CALL_OW 13
10254: IFFALSE 10266
// result = sex_female else
10256: LD_ADDR_VAR 0 1
10260: PUSH
10261: LD_INT 2
10263: ST_TO_ADDR
10264: GO 10274
// result = sex_male ;
10266: LD_ADDR_VAR 0 1
10270: PUSH
10271: LD_INT 1
10273: ST_TO_ADDR
// end ;
10274: LD_VAR 0 1
10278: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
// case ser of 1 :
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 1
10290: DOUBLE
10291: EQUAL
10292: IFTRUE 10296
10294: GO 10388
10296: POP
// if cis = 1 then
10297: LD_VAR 0 2
10301: PUSH
10302: LD_INT 1
10304: EQUAL
10305: IFFALSE 10317
// a = sex_female else
10307: LD_ADDR_VAR 0 4
10311: PUSH
10312: LD_INT 2
10314: ST_TO_ADDR
10315: GO 10386
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10317: LD_VAR 0 2
10321: PUSH
10322: LD_INT 3
10324: PUSH
10325: LD_INT 4
10327: PUSH
10328: LD_INT 5
10330: PUSH
10331: LD_INT 7
10333: PUSH
10334: LD_INT 8
10336: PUSH
10337: LD_INT 13
10339: PUSH
10340: LD_INT 14
10342: PUSH
10343: LD_INT 15
10345: PUSH
10346: LD_INT 20
10348: PUSH
10349: LD_INT 23
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: IN
10364: IFFALSE 10376
// a = sex_male else
10366: LD_ADDR_VAR 0 4
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
10374: GO 10386
// a = get_sex ; 2 :
10376: LD_ADDR_VAR 0 4
10380: PUSH
10381: CALL 10244 0 0
10385: ST_TO_ADDR
10386: GO 10480
10388: LD_INT 2
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10479
10396: POP
// if cis in [ 5 ] then
10397: LD_VAR 0 2
10401: PUSH
10402: LD_INT 5
10404: PUSH
10405: EMPTY
10406: LIST
10407: IN
10408: IFFALSE 10420
// a = sex_female else
10410: LD_ADDR_VAR 0 4
10414: PUSH
10415: LD_INT 2
10417: ST_TO_ADDR
10418: GO 10477
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10420: LD_VAR 0 2
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: LD_INT 3
10430: PUSH
10431: LD_INT 4
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: LD_INT 11
10439: PUSH
10440: LD_INT 14
10442: PUSH
10443: LD_INT 17
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: IN
10455: IFFALSE 10467
// a = sex_male else
10457: LD_ADDR_VAR 0 4
10461: PUSH
10462: LD_INT 1
10464: ST_TO_ADDR
10465: GO 10477
// a = get_sex ; end ;
10467: LD_ADDR_VAR 0 4
10471: PUSH
10472: CALL 10244 0 0
10476: ST_TO_ADDR
10477: GO 10480
10479: POP
// result = a ;
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_VAR 0 4
10489: ST_TO_ADDR
// end ;
10490: LD_VAR 0 3
10494: RET
// function get_name ( serie , cislo ) ; var a ; begin
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
// a =  ;
10499: LD_ADDR_VAR 0 4
10503: PUSH
10504: LD_STRING 
10506: ST_TO_ADDR
// case serie of 1 :
10507: LD_VAR 0 1
10511: PUSH
10512: LD_INT 1
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 10738
10520: POP
// case cislo of 1 :
10521: LD_VAR 0 2
10525: PUSH
10526: LD_INT 1
10528: DOUBLE
10529: EQUAL
10530: IFTRUE 10534
10532: GO 10545
10534: POP
// a = Petronela Fagan ; 3 :
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_STRING Petronela Fagan
10542: ST_TO_ADDR
10543: GO 10736
10545: LD_INT 3
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10564
10553: POP
// a = Jaryn Floryk ; 4 :
10554: LD_ADDR_VAR 0 4
10558: PUSH
10559: LD_STRING Jaryn Floryk
10561: ST_TO_ADDR
10562: GO 10736
10564: LD_INT 4
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10583
10572: POP
// a = Ira Smailer ; 5 :
10573: LD_ADDR_VAR 0 4
10577: PUSH
10578: LD_STRING Ira Smailer
10580: ST_TO_ADDR
10581: GO 10736
10583: LD_INT 5
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10602
10591: POP
// a = Soren Rafin ; 7 :
10592: LD_ADDR_VAR 0 4
10596: PUSH
10597: LD_STRING Soren Rafin
10599: ST_TO_ADDR
10600: GO 10736
10602: LD_INT 7
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10621
10610: POP
// a = Mark Kent ; 8 :
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_STRING Mark Kent
10618: ST_TO_ADDR
10619: GO 10736
10621: LD_INT 8
10623: DOUBLE
10624: EQUAL
10625: IFTRUE 10629
10627: GO 10640
10629: POP
// a = Patrick Bull ; 13 :
10630: LD_ADDR_VAR 0 4
10634: PUSH
10635: LD_STRING Patrick Bull
10637: ST_TO_ADDR
10638: GO 10736
10640: LD_INT 13
10642: DOUBLE
10643: EQUAL
10644: IFTRUE 10648
10646: GO 10659
10648: POP
// a = Muzhid Galabi ; 14 :
10649: LD_ADDR_VAR 0 4
10653: PUSH
10654: LD_STRING Muzhid Galabi
10656: ST_TO_ADDR
10657: GO 10736
10659: LD_INT 14
10661: DOUBLE
10662: EQUAL
10663: IFTRUE 10667
10665: GO 10678
10667: POP
// a = Maxim Daigle ; 15 :
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_STRING Maxim Daigle
10675: ST_TO_ADDR
10676: GO 10736
10678: LD_INT 15
10680: DOUBLE
10681: EQUAL
10682: IFTRUE 10686
10684: GO 10697
10686: POP
// a = Rick C. West ; 20 :
10687: LD_ADDR_VAR 0 4
10691: PUSH
10692: LD_STRING Rick C. West
10694: ST_TO_ADDR
10695: GO 10736
10697: LD_INT 20
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10716
10705: POP
// a = Sinisa Mikhailovic ; 23 :
10706: LD_ADDR_VAR 0 4
10710: PUSH
10711: LD_STRING Sinisa Mikhailovic
10713: ST_TO_ADDR
10714: GO 10736
10716: LD_INT 23
10718: DOUBLE
10719: EQUAL
10720: IFTRUE 10724
10722: GO 10735
10724: POP
// a = Wayne Kettlewell ; end ; 2 :
10725: LD_ADDR_VAR 0 4
10729: PUSH
10730: LD_STRING Wayne Kettlewell
10732: ST_TO_ADDR
10733: GO 10736
10735: POP
10736: GO 10908
10738: LD_INT 2
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10907
10746: POP
// case cislo of 2 :
10747: LD_VAR 0 2
10751: PUSH
10752: LD_INT 2
10754: DOUBLE
10755: EQUAL
10756: IFTRUE 10760
10758: GO 10771
10760: POP
// a = Danne Rydrgren ; 3 :
10761: LD_ADDR_VAR 0 4
10765: PUSH
10766: LD_STRING Danne Rydrgren
10768: ST_TO_ADDR
10769: GO 10905
10771: LD_INT 3
10773: DOUBLE
10774: EQUAL
10775: IFTRUE 10779
10777: GO 10790
10779: POP
// a = Alfred Van der Poel ; 4 :
10780: LD_ADDR_VAR 0 4
10784: PUSH
10785: LD_STRING Alfred Van der Poel
10787: ST_TO_ADDR
10788: GO 10905
10790: LD_INT 4
10792: DOUBLE
10793: EQUAL
10794: IFTRUE 10798
10796: GO 10809
10798: POP
// a = Muhammad Ali ; 5 :
10799: LD_ADDR_VAR 0 4
10803: PUSH
10804: LD_STRING Muhammad Ali
10806: ST_TO_ADDR
10807: GO 10905
10809: LD_INT 5
10811: DOUBLE
10812: EQUAL
10813: IFTRUE 10817
10815: GO 10828
10817: POP
// a = Elena Grubina ; 8 :
10818: LD_ADDR_VAR 0 4
10822: PUSH
10823: LD_STRING Elena Grubina
10825: ST_TO_ADDR
10826: GO 10905
10828: LD_INT 8
10830: DOUBLE
10831: EQUAL
10832: IFTRUE 10836
10834: GO 10847
10836: POP
// a = Oto Zimmerman ; 11 :
10837: LD_ADDR_VAR 0 4
10841: PUSH
10842: LD_STRING Oto Zimmerman
10844: ST_TO_ADDR
10845: GO 10905
10847: LD_INT 11
10849: DOUBLE
10850: EQUAL
10851: IFTRUE 10855
10853: GO 10866
10855: POP
// a = Neil Hoss ; 14 :
10856: LD_ADDR_VAR 0 4
10860: PUSH
10861: LD_STRING Neil Hoss
10863: ST_TO_ADDR
10864: GO 10905
10866: LD_INT 14
10868: DOUBLE
10869: EQUAL
10870: IFTRUE 10874
10872: GO 10885
10874: POP
// a = Cardi Nowitzke ; 17 :
10875: LD_ADDR_VAR 0 4
10879: PUSH
10880: LD_STRING Cardi Nowitzke
10882: ST_TO_ADDR
10883: GO 10905
10885: LD_INT 17
10887: DOUBLE
10888: EQUAL
10889: IFTRUE 10893
10891: GO 10904
10893: POP
// a = Leonard Van Horn ; end ; end ;
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_STRING Leonard Van Horn
10901: ST_TO_ADDR
10902: GO 10905
10904: POP
10905: GO 10908
10907: POP
// result = a ;
10908: LD_ADDR_VAR 0 3
10912: PUSH
10913: LD_VAR 0 4
10917: ST_TO_ADDR
// end ;
10918: LD_VAR 0 3
10922: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
10923: LD_INT 0
10925: PPUSH
10926: PPUSH
10927: PPUSH
10928: PPUSH
10929: PPUSH
// SetClass ( JMM , class_soldier ) ;
10930: LD_EXP 31
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 336
// if Gary > 0 then
10942: LD_EXP 33
10946: PUSH
10947: LD_INT 0
10949: GREATER
10950: IFFALSE 10964
// SetClass ( Gary , class_soldier ) ;
10952: LD_EXP 33
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 336
// if Lisa > 0 then
10964: LD_EXP 36
10968: PUSH
10969: LD_INT 0
10971: GREATER
10972: IFFALSE 10986
// SetClass ( Lisa , class_soldier ) ;
10974: LD_EXP 36
10978: PPUSH
10979: LD_INT 1
10981: PPUSH
10982: CALL_OW 336
// if Yamoko > 0 then
10986: LD_EXP 38
10990: PUSH
10991: LD_INT 0
10993: GREATER
10994: IFFALSE 11008
// SetClass ( Yamoko , class_soldier ) ;
10996: LD_EXP 38
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 336
// if Frank > 0 then
11008: LD_EXP 35
11012: PUSH
11013: LD_INT 0
11015: GREATER
11016: IFFALSE 11030
// SetClass ( Frank , class_soldier ) ;
11018: LD_EXP 35
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 336
// if Cornel > 0 then
11030: LD_EXP 37
11034: PUSH
11035: LD_INT 0
11037: GREATER
11038: IFFALSE 11052
// SetClass ( Cornel , class_soldier ) ;
11040: LD_EXP 37
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: CALL_OW 336
// if Bobby > 0 then
11052: LD_EXP 34
11056: PUSH
11057: LD_INT 0
11059: GREATER
11060: IFFALSE 11074
// SetClass ( Bobby , class_soldier ) ;
11062: LD_EXP 34
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 336
// if Cyrus > 0 then
11074: LD_EXP 39
11078: PUSH
11079: LD_INT 0
11081: GREATER
11082: IFFALSE 11096
// SetClass ( Cyrus , class_soldier ) ;
11084: LD_EXP 39
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 336
// if Don > 0 then
11096: LD_EXP 40
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11118
// SetClass ( Don , class_engineer ) ;
11106: LD_EXP 40
11110: PPUSH
11111: LD_INT 2
11113: PPUSH
11114: CALL_OW 336
// if Brown > 0 then
11118: LD_EXP 41
11122: PUSH
11123: LD_INT 0
11125: GREATER
11126: IFFALSE 11140
// SetClass ( Brown , class_soldier ) ;
11128: LD_EXP 41
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11140: LD_ADDR_VAR 0 4
11144: PUSH
11145: LD_INT -4
11147: PUSH
11148: LD_INT -1
11150: PUSH
11151: LD_INT -6
11153: PUSH
11154: LD_EXP 31
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11165: LD_ADDR_VAR 0 4
11169: PUSH
11170: LD_VAR 0 4
11174: PUSH
11175: LD_INT -2
11177: PUSH
11178: LD_EXP 32
11182: PUSH
11183: LD_INT -3
11185: PUSH
11186: LD_INT -5
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: ADD
11195: ST_TO_ADDR
// poc = 0 ;
11196: LD_ADDR_VAR 0 5
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11204: LD_EXP 33
11208: PUSH
11209: LD_INT 0
11211: NONEQUAL
11212: PUSH
11213: LD_EXP 18
11217: PUSH
11218: LD_INT 7
11220: NONEQUAL
11221: AND
11222: IFFALSE 11254
// begin ovyb = ovyb ^ Gary ;
11224: LD_ADDR_VAR 0 4
11228: PUSH
11229: LD_VAR 0 4
11233: PUSH
11234: LD_EXP 33
11238: ADD
11239: ST_TO_ADDR
// poc = poc + 1 ;
11240: LD_ADDR_VAR 0 5
11244: PUSH
11245: LD_VAR 0 5
11249: PUSH
11250: LD_INT 1
11252: PLUS
11253: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11254: LD_EXP 36
11258: PUSH
11259: LD_INT 0
11261: NONEQUAL
11262: PUSH
11263: LD_EXP 19
11267: PUSH
11268: LD_INT 7
11270: NONEQUAL
11271: AND
11272: IFFALSE 11304
// begin ovyb = ovyb ^ Lisa ;
11274: LD_ADDR_VAR 0 4
11278: PUSH
11279: LD_VAR 0 4
11283: PUSH
11284: LD_EXP 36
11288: ADD
11289: ST_TO_ADDR
// poc = poc + 1 ;
11290: LD_ADDR_VAR 0 5
11294: PUSH
11295: LD_VAR 0 5
11299: PUSH
11300: LD_INT 1
11302: PLUS
11303: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11304: LD_EXP 37
11308: PUSH
11309: LD_INT 0
11311: NONEQUAL
11312: PUSH
11313: LD_EXP 22
11317: PUSH
11318: LD_INT 7
11320: NONEQUAL
11321: AND
11322: IFFALSE 11354
// begin ovyb = ovyb ^ Cornel ;
11324: LD_ADDR_VAR 0 4
11328: PUSH
11329: LD_VAR 0 4
11333: PUSH
11334: LD_EXP 37
11338: ADD
11339: ST_TO_ADDR
// poc = poc + 1 ;
11340: LD_ADDR_VAR 0 5
11344: PUSH
11345: LD_VAR 0 5
11349: PUSH
11350: LD_INT 1
11352: PLUS
11353: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11354: LD_EXP 35
11358: PUSH
11359: LD_INT 0
11361: NONEQUAL
11362: PUSH
11363: LD_EXP 21
11367: PUSH
11368: LD_INT 7
11370: NONEQUAL
11371: AND
11372: IFFALSE 11404
// begin ovyb = ovyb ^ Frank ;
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_VAR 0 4
11383: PUSH
11384: LD_EXP 35
11388: ADD
11389: ST_TO_ADDR
// poc = poc + 1 ;
11390: LD_ADDR_VAR 0 5
11394: PUSH
11395: LD_VAR 0 5
11399: PUSH
11400: LD_INT 1
11402: PLUS
11403: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11404: LD_EXP 38
11408: PUSH
11409: LD_INT 0
11411: NONEQUAL
11412: PUSH
11413: LD_EXP 35
11417: PUSH
11418: LD_INT 0
11420: EQUAL
11421: PUSH
11422: LD_EXP 21
11426: PUSH
11427: LD_INT 7
11429: EQUAL
11430: OR
11431: AND
11432: IFFALSE 11464
// begin ovyb = ovyb ^ Yamoko ;
11434: LD_ADDR_VAR 0 4
11438: PUSH
11439: LD_VAR 0 4
11443: PUSH
11444: LD_EXP 38
11448: ADD
11449: ST_TO_ADDR
// poc = poc + 1 ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_VAR 0 5
11459: PUSH
11460: LD_INT 1
11462: PLUS
11463: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11464: LD_EXP 34
11468: PUSH
11469: LD_INT 0
11471: NONEQUAL
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_INT 7
11480: NONEQUAL
11481: AND
11482: IFFALSE 11514
// begin ovyb = ovyb ^ Bobby ;
11484: LD_ADDR_VAR 0 4
11488: PUSH
11489: LD_VAR 0 4
11493: PUSH
11494: LD_EXP 34
11498: ADD
11499: ST_TO_ADDR
// poc = poc + 1 ;
11500: LD_ADDR_VAR 0 5
11504: PUSH
11505: LD_VAR 0 5
11509: PUSH
11510: LD_INT 1
11512: PLUS
11513: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11514: LD_EXP 39
11518: PUSH
11519: LD_INT 0
11521: NONEQUAL
11522: PUSH
11523: LD_EXP 24
11527: PUSH
11528: LD_INT 7
11530: NONEQUAL
11531: AND
11532: IFFALSE 11564
// begin ovyb = ovyb ^ Cyrus ;
11534: LD_ADDR_VAR 0 4
11538: PUSH
11539: LD_VAR 0 4
11543: PUSH
11544: LD_EXP 39
11548: ADD
11549: ST_TO_ADDR
// poc = poc + 1 ;
11550: LD_ADDR_VAR 0 5
11554: PUSH
11555: LD_VAR 0 5
11559: PUSH
11560: LD_INT 1
11562: PLUS
11563: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11564: LD_EXP 40
11568: PUSH
11569: LD_INT 0
11571: NONEQUAL
11572: PUSH
11573: LD_EXP 25
11577: PUSH
11578: LD_INT 7
11580: NONEQUAL
11581: AND
11582: IFFALSE 11614
// begin ovyb = ovyb ^ Don ;
11584: LD_ADDR_VAR 0 4
11588: PUSH
11589: LD_VAR 0 4
11593: PUSH
11594: LD_EXP 40
11598: ADD
11599: ST_TO_ADDR
// poc = poc + 1 ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_VAR 0 5
11609: PUSH
11610: LD_INT 1
11612: PLUS
11613: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11614: LD_EXP 41
11618: PUSH
11619: LD_INT 0
11621: NONEQUAL
11622: PUSH
11623: LD_EXP 26
11627: AND
11628: IFFALSE 11660
// begin ovyb = ovyb ^ Brown ;
11630: LD_ADDR_VAR 0 4
11634: PUSH
11635: LD_VAR 0 4
11639: PUSH
11640: LD_EXP 41
11644: ADD
11645: ST_TO_ADDR
// poc = poc + 1 ;
11646: LD_ADDR_VAR 0 5
11650: PUSH
11651: LD_VAR 0 5
11655: PUSH
11656: LD_INT 1
11658: PLUS
11659: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
11660: LD_ADDR_VAR 0 2
11664: PUSH
11665: LD_EXP 51
11669: PPUSH
11670: CALL 12027 0 1
11674: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11675: LD_ADDR_VAR 0 4
11679: PUSH
11680: LD_VAR 0 4
11684: PUSH
11685: LD_VAR 0 2
11689: ADD
11690: ST_TO_ADDR
// poc = poc + pom + 0 ;
11691: LD_ADDR_VAR 0 5
11695: PUSH
11696: LD_VAR 0 5
11700: PUSH
11701: LD_VAR 0 2
11705: PLUS
11706: PUSH
11707: LD_INT 0
11709: PLUS
11710: ST_TO_ADDR
// uc_side := You ;
11711: LD_ADDR_OWVAR 20
11715: PUSH
11716: LD_EXP 1
11720: ST_TO_ADDR
// uc_nation := nation_american ;
11721: LD_ADDR_OWVAR 21
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// uc_direction := 0 ;
11729: LD_ADDR_OWVAR 24
11733: PUSH
11734: LD_INT 0
11736: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
11737: LD_INT 1
11739: PPUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_INT 6
11745: PPUSH
11746: LD_STRING 
11748: PPUSH
11749: CALL 7707 0 4
// pom = CreateHuman ;
11753: LD_ADDR_VAR 0 2
11757: PUSH
11758: CALL_OW 44
11762: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11763: LD_ADDR_VAR 0 4
11767: PUSH
11768: LD_VAR 0 4
11772: PUSH
11773: LD_VAR 0 2
11777: ADD
11778: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11779: LD_INT 1
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: LD_INT 6
11787: PPUSH
11788: LD_STRING 
11790: PPUSH
11791: CALL 7707 0 4
// pom = CreateHuman ;
11795: LD_ADDR_VAR 0 2
11799: PUSH
11800: CALL_OW 44
11804: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11805: LD_ADDR_VAR 0 4
11809: PUSH
11810: LD_VAR 0 4
11814: PUSH
11815: LD_VAR 0 2
11819: ADD
11820: ST_TO_ADDR
// poc = poc + 2 ;
11821: LD_ADDR_VAR 0 5
11825: PUSH
11826: LD_VAR 0 5
11830: PUSH
11831: LD_INT 2
11833: PLUS
11834: ST_TO_ADDR
// if poc < 20 then
11835: LD_VAR 0 5
11839: PUSH
11840: LD_INT 20
11842: LESS
11843: IFFALSE 11947
// for i := 1 to 20 - poc do
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: DOUBLE
11851: LD_INT 1
11853: DEC
11854: ST_TO_ADDR
11855: LD_INT 20
11857: PUSH
11858: LD_VAR 0 5
11862: MINUS
11863: PUSH
11864: FOR_TO
11865: IFFALSE 11945
// begin if Rand ( 1 , 2 ) = 1 then
11867: LD_INT 1
11869: PPUSH
11870: LD_INT 2
11872: PPUSH
11873: CALL_OW 12
11877: PUSH
11878: LD_INT 1
11880: EQUAL
11881: IFFALSE 11901
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
11883: LD_INT 1
11885: PPUSH
11886: LD_INT 2
11888: PPUSH
11889: LD_INT 6
11891: PPUSH
11892: LD_STRING 
11894: PPUSH
11895: CALL 7707 0 4
11899: GO 11917
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
11901: LD_INT 1
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: LD_INT 6
11909: PPUSH
11910: LD_STRING 
11912: PPUSH
11913: CALL 7707 0 4
// pom = CreateHuman ;
11917: LD_ADDR_VAR 0 2
11921: PUSH
11922: CALL_OW 44
11926: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
11927: LD_ADDR_VAR 0 4
11931: PUSH
11932: LD_VAR 0 4
11936: PUSH
11937: LD_VAR 0 2
11941: ADD
11942: ST_TO_ADDR
// end ;
11943: GO 11864
11945: POP
11946: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
11947: LD_ADDR_EXP 42
11951: PUSH
11952: LD_STRING Choose 11 people
11954: PPUSH
11955: LD_INT 11
11957: PPUSH
11958: LD_INT 11
11960: PPUSH
11961: LD_VAR 0 4
11965: PPUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 1
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 0
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 42
12005: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12006: LD_ADDR_EXP 42
12010: PUSH
12011: LD_EXP 42
12015: PUSH
12016: LD_EXP 31
12020: ADD
12021: ST_TO_ADDR
// end ;
12022: LD_VAR 0 1
12026: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12027: LD_INT 0
12029: PPUSH
12030: PPUSH
12031: PPUSH
12032: PPUSH
// pom = [ ] ;
12033: LD_ADDR_VAR 0 3
12037: PUSH
12038: EMPTY
12039: ST_TO_ADDR
// for i in lidi do
12040: LD_ADDR_VAR 0 4
12044: PUSH
12045: LD_VAR 0 1
12049: PUSH
12050: FOR_IN
12051: IFFALSE 12194
// begin sk = get_skills ( i ) ;
12053: LD_ADDR_VAR 0 5
12057: PUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: CALL 12211 0 1
12067: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12068: LD_VAR 0 5
12072: PUSH
12073: LD_INT 4
12075: ARRAY
12076: PUSH
12077: LD_VAR 0 5
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: GREATER
12086: PUSH
12087: LD_VAR 0 5
12091: PUSH
12092: LD_INT 4
12094: ARRAY
12095: PUSH
12096: LD_VAR 0 5
12100: PUSH
12101: LD_INT 2
12103: ARRAY
12104: GREATER
12105: AND
12106: PUSH
12107: LD_VAR 0 5
12111: PUSH
12112: LD_INT 4
12114: ARRAY
12115: PUSH
12116: LD_VAR 0 5
12120: PUSH
12121: LD_INT 3
12123: ARRAY
12124: GREATER
12125: AND
12126: IFFALSE 12130
// continue ;
12128: GO 12050
// if sk [ 1 ] > sk [ 2 ] then
12130: LD_VAR 0 5
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PUSH
12139: LD_VAR 0 5
12143: PUSH
12144: LD_INT 2
12146: ARRAY
12147: GREATER
12148: IFFALSE 12164
// SetClass ( i , class_soldier ) else
12150: LD_VAR 0 4
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 336
12162: GO 12176
// SetClass ( i , class_engineer ) ;
12164: LD_VAR 0 4
12168: PPUSH
12169: LD_INT 2
12171: PPUSH
12172: CALL_OW 336
// pom = pom ^ i ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: LD_VAR 0 3
12185: PUSH
12186: LD_VAR 0 4
12190: ADD
12191: ST_TO_ADDR
// end ;
12192: GO 12050
12194: POP
12195: POP
// result := pom ;
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_VAR 0 3
12205: ST_TO_ADDR
// end ;
12206: LD_VAR 0 2
12210: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12211: LD_INT 0
12213: PPUSH
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12218: LD_ADDR_VAR 0 3
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 259
12235: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12236: LD_ADDR_VAR 0 4
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: LD_INT 2
12248: PPUSH
12249: CALL_OW 259
12253: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12254: LD_ADDR_VAR 0 5
12258: PUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_INT 3
12266: PPUSH
12267: CALL_OW 259
12271: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12272: LD_ADDR_VAR 0 6
12276: PUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_INT 4
12284: PPUSH
12285: CALL_OW 259
12289: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: LD_VAR 0 3
12299: PUSH
12300: LD_VAR 0 4
12304: PUSH
12305: LD_VAR 0 5
12309: PUSH
12310: LD_VAR 0 6
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: ST_TO_ADDR
12321: LD_VAR 0 2
12325: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12326: LD_INT 0
12328: PPUSH
12329: PPUSH
// uc_side = Arabi ;
12330: LD_ADDR_OWVAR 20
12334: PUSH
12335: LD_EXP 3
12339: ST_TO_ADDR
// uc_nation = nation_arabian ;
12340: LD_ADDR_OWVAR 21
12344: PUSH
12345: LD_INT 2
12347: ST_TO_ADDR
// pom = [ ] ;
12348: LD_ADDR_VAR 0 2
12352: PUSH
12353: EMPTY
12354: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12355: LD_ADDR_VAR 0 2
12359: PUSH
12360: CALL 10244 0 0
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: LD_INT 4
12370: PPUSH
12371: LD_STRING 
12373: PPUSH
12374: CALL 13808 0 4
12378: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_VAR 0 2
12388: PUSH
12389: CALL 10244 0 0
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: LD_INT 4
12399: PPUSH
12400: LD_STRING 
12402: PPUSH
12403: CALL 13808 0 4
12407: ADD
12408: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12409: LD_ADDR_VAR 0 2
12413: PUSH
12414: LD_VAR 0 2
12418: PUSH
12419: CALL 10244 0 0
12423: PPUSH
12424: LD_INT 8
12426: PPUSH
12427: LD_INT 5
12429: PPUSH
12430: LD_STRING 
12432: PPUSH
12433: CALL 13808 0 4
12437: ADD
12438: ST_TO_ADDR
// if difficulty > 1 then
12439: LD_OWVAR 67
12443: PUSH
12444: LD_INT 1
12446: GREATER
12447: IFFALSE 12479
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12449: LD_ADDR_VAR 0 2
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: CALL 10244 0 0
12463: PPUSH
12464: LD_INT 8
12466: PPUSH
12467: LD_INT 5
12469: PPUSH
12470: LD_STRING 
12472: PPUSH
12473: CALL 13808 0 4
12477: ADD
12478: ST_TO_ADDR
// if difficulty > 2 then
12479: LD_OWVAR 67
12483: PUSH
12484: LD_INT 2
12486: GREATER
12487: IFFALSE 12519
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12489: LD_ADDR_VAR 0 2
12493: PUSH
12494: LD_VAR 0 2
12498: PUSH
12499: CALL 10244 0 0
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: LD_INT 5
12509: PPUSH
12510: LD_STRING 
12512: PPUSH
12513: CALL 13808 0 4
12517: ADD
12518: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12519: LD_ADDR_EXP 12
12523: PUSH
12524: LD_VAR 0 2
12528: ST_TO_ADDR
// pom = [ ] ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: EMPTY
12535: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12536: LD_ADDR_OWVAR 37
12540: PUSH
12541: LD_INT 14
12543: ST_TO_ADDR
// vc_weapon = ar_gun ;
12544: LD_ADDR_OWVAR 40
12548: PUSH
12549: LD_INT 27
12551: ST_TO_ADDR
// vc_control = control_apeman ;
12552: LD_ADDR_OWVAR 38
12556: PUSH
12557: LD_INT 5
12559: ST_TO_ADDR
// vc_engine = engine_siberite ;
12560: LD_ADDR_OWVAR 39
12564: PUSH
12565: LD_INT 3
12567: ST_TO_ADDR
// av = CreateVehicle ;
12568: LD_ADDR_LOC 11
12572: PUSH
12573: CALL_OW 45
12577: ST_TO_ADDR
// pom = av ;
12578: LD_ADDR_VAR 0 2
12582: PUSH
12583: LD_LOC 11
12587: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12588: LD_ADDR_LOC 10
12592: PUSH
12593: CALL 10244 0 0
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 4
12603: PPUSH
12604: LD_STRING 
12606: PPUSH
12607: CALL 13808 0 4
12611: ST_TO_ADDR
// vc_control = control_manual ;
12612: LD_ADDR_OWVAR 38
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12620: LD_ADDR_OWVAR 40
12624: PUSH
12625: LD_INT 25
12627: ST_TO_ADDR
// av = CreateVehicle ;
12628: LD_ADDR_LOC 11
12632: PUSH
12633: CALL_OW 45
12637: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12638: LD_LOC 10
12642: PPUSH
12643: LD_LOC 11
12647: PPUSH
12648: CALL_OW 52
// pom = pom ^ av ;
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: LD_VAR 0 2
12661: PUSH
12662: LD_LOC 11
12666: ADD
12667: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12668: LD_ADDR_VAR 0 2
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: CALL 10244 0 0
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_INT 4
12688: PPUSH
12689: LD_STRING 
12691: PPUSH
12692: CALL 13808 0 4
12696: ADD
12697: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: LD_VAR 0 2
12707: PUSH
12708: CALL 10244 0 0
12712: PPUSH
12713: LD_INT 2
12715: PPUSH
12716: LD_EXP 48
12720: PUSH
12721: LD_OWVAR 67
12725: ARRAY
12726: PPUSH
12727: LD_STRING 
12729: PPUSH
12730: CALL 13808 0 4
12734: ADD
12735: ST_TO_ADDR
// if difficulty > 1 then
12736: LD_OWVAR 67
12740: PUSH
12741: LD_INT 1
12743: GREATER
12744: IFFALSE 12822
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_VAR 0 2
12755: PUSH
12756: CALL 10244 0 0
12760: PPUSH
12761: LD_INT 2
12763: PPUSH
12764: LD_EXP 48
12768: PUSH
12769: LD_OWVAR 67
12773: ARRAY
12774: PPUSH
12775: LD_STRING 
12777: PPUSH
12778: CALL 13808 0 4
12782: ADD
12783: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
12784: LD_ADDR_VAR 0 2
12788: PUSH
12789: LD_VAR 0 2
12793: PUSH
12794: CALL 10244 0 0
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: LD_EXP 48
12806: PUSH
12807: LD_OWVAR 67
12811: ARRAY
12812: PPUSH
12813: LD_STRING 
12815: PPUSH
12816: CALL 13808 0 4
12820: ADD
12821: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
12822: LD_ADDR_EXP 13
12826: PUSH
12827: LD_VAR 0 2
12831: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12832: LD_ADDR_VAR 0 2
12836: PUSH
12837: CALL 10244 0 0
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: LD_INT 4
12847: PPUSH
12848: LD_STRING 
12850: PPUSH
12851: CALL 13808 0 4
12855: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: LD_VAR 0 2
12865: PUSH
12866: CALL 10244 0 0
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: LD_INT 4
12876: PPUSH
12877: LD_STRING 
12879: PPUSH
12880: CALL 13808 0 4
12884: ADD
12885: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_VAR 0 2
12895: PUSH
12896: CALL 10244 0 0
12900: PPUSH
12901: LD_INT 8
12903: PPUSH
12904: LD_EXP 48
12908: PUSH
12909: LD_OWVAR 67
12913: ARRAY
12914: PPUSH
12915: LD_STRING 
12917: PPUSH
12918: CALL 13808 0 4
12922: ADD
12923: ST_TO_ADDR
// if difficulty > 1 then
12924: LD_OWVAR 67
12928: PUSH
12929: LD_INT 1
12931: GREATER
12932: IFFALSE 13060
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12934: LD_ADDR_VAR 0 2
12938: PUSH
12939: LD_VAR 0 2
12943: PUSH
12944: CALL 10244 0 0
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 4
12954: PPUSH
12955: LD_STRING 
12957: PPUSH
12958: CALL 13808 0 4
12962: ADD
12963: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
12964: LD_ADDR_VAR 0 2
12968: PUSH
12969: LD_VAR 0 2
12973: PUSH
12974: CALL 10244 0 0
12978: PPUSH
12979: LD_INT 2
12981: PPUSH
12982: LD_EXP 48
12986: PUSH
12987: LD_OWVAR 67
12991: ARRAY
12992: PPUSH
12993: LD_STRING 
12995: PPUSH
12996: CALL 13808 0 4
13000: ADD
13001: ST_TO_ADDR
// vc_control = control_apeman ;
13002: LD_ADDR_OWVAR 38
13006: PUSH
13007: LD_INT 5
13009: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13010: LD_ADDR_OWVAR 37
13014: PUSH
13015: LD_INT 11
13017: ST_TO_ADDR
// vc_engine = engine_combustion ;
13018: LD_ADDR_OWVAR 39
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13026: LD_ADDR_OWVAR 40
13030: PUSH
13031: LD_INT 23
13033: ST_TO_ADDR
// av = CreateVehicle ;
13034: LD_ADDR_LOC 11
13038: PUSH
13039: CALL_OW 45
13043: ST_TO_ADDR
// pom = pom ^ av ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_VAR 0 2
13053: PUSH
13054: LD_LOC 11
13058: ADD
13059: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13060: LD_ADDR_EXP 14
13064: PUSH
13065: LD_VAR 0 2
13069: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: CALL 10244 0 0
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: LD_INT 6
13085: PPUSH
13086: LD_STRING 
13088: PPUSH
13089: CALL 13808 0 4
13093: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13094: LD_ADDR_OWVAR 37
13098: PUSH
13099: LD_INT 14
13101: ST_TO_ADDR
// vc_weapon = ar_gun ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 27
13109: ST_TO_ADDR
// vc_control = control_apeman ;
13110: LD_ADDR_OWVAR 38
13114: PUSH
13115: LD_INT 5
13117: ST_TO_ADDR
// vc_engine = engine_siberite ;
13118: LD_ADDR_OWVAR 39
13122: PUSH
13123: LD_INT 3
13125: ST_TO_ADDR
// av = CreateVehicle ;
13126: LD_ADDR_LOC 11
13130: PUSH
13131: CALL_OW 45
13135: ST_TO_ADDR
// pom = pom ^ av ;
13136: LD_ADDR_VAR 0 2
13140: PUSH
13141: LD_VAR 0 2
13145: PUSH
13146: LD_LOC 11
13150: ADD
13151: ST_TO_ADDR
// av = CreateVehicle ;
13152: LD_ADDR_LOC 11
13156: PUSH
13157: CALL_OW 45
13161: ST_TO_ADDR
// pom = pom ^ av ;
13162: LD_ADDR_VAR 0 2
13166: PUSH
13167: LD_VAR 0 2
13171: PUSH
13172: LD_LOC 11
13176: ADD
13177: ST_TO_ADDR
// av = CreateVehicle ;
13178: LD_ADDR_LOC 11
13182: PUSH
13183: CALL_OW 45
13187: ST_TO_ADDR
// pom = pom ^ av ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 2
13197: PUSH
13198: LD_LOC 11
13202: ADD
13203: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13204: LD_ADDR_EXP 15
13208: PUSH
13209: LD_VAR 0 2
13213: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: CALL 10244 0 0
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: LD_EXP 48
13231: PUSH
13232: LD_OWVAR 67
13236: ARRAY
13237: PPUSH
13238: LD_STRING 
13240: PPUSH
13241: CALL 13808 0 4
13245: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13246: LD_ADDR_LOC 10
13250: PUSH
13251: CALL 10244 0 0
13255: PPUSH
13256: LD_INT 3
13258: PPUSH
13259: LD_EXP 48
13263: PUSH
13264: LD_OWVAR 67
13268: ARRAY
13269: PPUSH
13270: LD_STRING 
13272: PPUSH
13273: CALL 13808 0 4
13277: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13278: LD_ADDR_OWVAR 40
13282: PUSH
13283: LD_INT 28
13285: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13286: LD_ADDR_OWVAR 37
13290: PUSH
13291: LD_INT 13
13293: ST_TO_ADDR
// vc_control = control_manual ;
13294: LD_ADDR_OWVAR 38
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// vc_engine = engine_siberite ;
13302: LD_ADDR_OWVAR 39
13306: PUSH
13307: LD_INT 3
13309: ST_TO_ADDR
// av = CreateVehicle ;
13310: LD_ADDR_LOC 11
13314: PUSH
13315: CALL_OW 45
13319: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13320: LD_LOC 10
13324: PPUSH
13325: LD_LOC 11
13329: PPUSH
13330: CALL_OW 52
// pom = pom ^ av ;
13334: LD_ADDR_VAR 0 2
13338: PUSH
13339: LD_VAR 0 2
13343: PUSH
13344: LD_LOC 11
13348: ADD
13349: ST_TO_ADDR
// if difficulty > 1 then
13350: LD_OWVAR 67
13354: PUSH
13355: LD_INT 1
13357: GREATER
13358: IFFALSE 13395
// begin vc_weapon = ar_selfpropelled_bomb ;
13360: LD_ADDR_OWVAR 40
13364: PUSH
13365: LD_INT 29
13367: ST_TO_ADDR
// av = CreateVehicle ;
13368: LD_ADDR_LOC 11
13372: PUSH
13373: CALL_OW 45
13377: ST_TO_ADDR
// pom = - pom ^ av ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_VAR 0 2
13387: NEG
13388: PUSH
13389: LD_LOC 11
13393: ADD
13394: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13395: LD_ADDR_VAR 0 2
13399: PUSH
13400: LD_VAR 0 2
13404: PUSH
13405: CALL 10244 0 0
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: LD_EXP 48
13417: PUSH
13418: LD_OWVAR 67
13422: ARRAY
13423: PPUSH
13424: LD_STRING 
13426: PPUSH
13427: CALL 13808 0 4
13431: ADD
13432: ST_TO_ADDR
// if difficulty > 2 then
13433: LD_OWVAR 67
13437: PUSH
13438: LD_INT 2
13440: GREATER
13441: IFFALSE 13557
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13443: LD_ADDR_VAR 0 2
13447: PUSH
13448: LD_VAR 0 2
13452: PUSH
13453: CALL 10244 0 0
13457: PPUSH
13458: LD_INT 4
13460: PPUSH
13461: LD_EXP 48
13465: PUSH
13466: LD_OWVAR 67
13470: ARRAY
13471: PPUSH
13472: LD_STRING 
13474: PPUSH
13475: CALL 13808 0 4
13479: ADD
13480: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_VAR 0 2
13490: PUSH
13491: CALL 10244 0 0
13495: PPUSH
13496: LD_INT 8
13498: PPUSH
13499: LD_EXP 48
13503: PUSH
13504: LD_OWVAR 67
13508: ARRAY
13509: PPUSH
13510: LD_STRING 
13512: PPUSH
13513: CALL 13808 0 4
13517: ADD
13518: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_VAR 0 2
13528: PUSH
13529: CALL 10244 0 0
13533: PPUSH
13534: LD_INT 8
13536: PPUSH
13537: LD_EXP 48
13541: PUSH
13542: LD_OWVAR 67
13546: ARRAY
13547: PPUSH
13548: LD_STRING 
13550: PPUSH
13551: CALL 13808 0 4
13555: ADD
13556: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13557: LD_ADDR_EXP 16
13561: PUSH
13562: LD_VAR 0 2
13566: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: CALL 10244 0 0
13576: PPUSH
13577: LD_INT 8
13579: PPUSH
13580: LD_INT 4
13582: PPUSH
13583: LD_STRING 
13585: PPUSH
13586: CALL 13808 0 4
13590: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13591: LD_ADDR_OWVAR 40
13595: PUSH
13596: LD_INT 28
13598: ST_TO_ADDR
// vc_engine = engine_combustion ;
13599: LD_ADDR_OWVAR 39
13603: PUSH
13604: LD_INT 1
13606: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13607: LD_ADDR_OWVAR 37
13611: PUSH
13612: LD_INT 13
13614: ST_TO_ADDR
// if difficulty = 1 then
13615: LD_OWVAR 67
13619: PUSH
13620: LD_INT 1
13622: EQUAL
13623: IFFALSE 13645
// begin vc_control = control_apeman ;
13625: LD_ADDR_OWVAR 38
13629: PUSH
13630: LD_INT 5
13632: ST_TO_ADDR
// av = CreateVehicle ;
13633: LD_ADDR_LOC 11
13637: PUSH
13638: CALL_OW 45
13642: ST_TO_ADDR
// end else
13643: GO 13709
// begin vc_control = control_manual ;
13645: LD_ADDR_OWVAR 38
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// av = CreateVehicle ;
13653: LD_ADDR_LOC 11
13657: PUSH
13658: CALL_OW 45
13662: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13663: LD_ADDR_LOC 10
13667: PUSH
13668: CALL 10244 0 0
13672: PPUSH
13673: LD_INT 3
13675: PPUSH
13676: LD_EXP 48
13680: PUSH
13681: LD_OWVAR 67
13685: ARRAY
13686: PPUSH
13687: LD_STRING 
13689: PPUSH
13690: CALL 13808 0 4
13694: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13695: LD_LOC 10
13699: PPUSH
13700: LD_LOC 11
13704: PPUSH
13705: CALL_OW 52
// end ; pom = pom ^ av ;
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: LD_VAR 0 2
13718: PUSH
13719: LD_LOC 11
13723: ADD
13724: ST_TO_ADDR
// vc_control = control_apeman ;
13725: LD_ADDR_OWVAR 38
13729: PUSH
13730: LD_INT 5
13732: ST_TO_ADDR
// av = CreateVehicle ;
13733: LD_ADDR_LOC 11
13737: PUSH
13738: CALL_OW 45
13742: ST_TO_ADDR
// pom = pom ^ av ;
13743: LD_ADDR_VAR 0 2
13747: PUSH
13748: LD_VAR 0 2
13752: PUSH
13753: LD_LOC 11
13757: ADD
13758: ST_TO_ADDR
// vc_weapon = ar_radar ;
13759: LD_ADDR_OWVAR 40
13763: PUSH
13764: LD_INT 30
13766: ST_TO_ADDR
// av = CreateVehicle ;
13767: LD_ADDR_LOC 11
13771: PUSH
13772: CALL_OW 45
13776: ST_TO_ADDR
// pom = pom ^ av ;
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_VAR 0 2
13786: PUSH
13787: LD_LOC 11
13791: ADD
13792: ST_TO_ADDR
// Ar_backa_LIST = pom ;
13793: LD_ADDR_EXP 17
13797: PUSH
13798: LD_VAR 0 2
13802: ST_TO_ADDR
// end ;
13803: LD_VAR 0 1
13807: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
// PrepareHuman ( sex , clas , level ) ;
13812: LD_VAR 0 1
13816: PPUSH
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_VAR 0 3
13826: PPUSH
13827: CALL_OW 380
// hc_name := name ;
13831: LD_ADDR_OWVAR 26
13835: PUSH
13836: LD_VAR 0 4
13840: ST_TO_ADDR
// pom = CreateHuman ;
13841: LD_ADDR_VAR 0 6
13845: PUSH
13846: CALL_OW 44
13850: ST_TO_ADDR
// result := pom ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: LD_VAR 0 6
13860: ST_TO_ADDR
// end ; end_of_file
13861: LD_VAR 0 5
13865: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
13866: GO 13868
13868: DISABLE
// begin pocet_spadlych_beden = 0 ;
13869: LD_ADDR_LOC 22
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// end ;
13877: END
// every 0 0$0.1 do var sold ;
13878: GO 13880
13880: DISABLE
13881: LD_INT 0
13883: PPUSH
// begin navrat := false ;
13884: LD_ADDR_LOC 18
13888: PUSH
13889: LD_INT 0
13891: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
13892: LD_ADDR_VAR 0 1
13896: PUSH
13897: LD_EXP 42
13901: PPUSH
13902: LD_INT 25
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: PPUSH
13915: CALL_OW 72
13919: ST_TO_ADDR
// if sold < 4 then
13920: LD_VAR 0 1
13924: PUSH
13925: LD_INT 4
13927: LESS
13928: IFFALSE 13939
// msg ( ERROR: malo vojaku . je to v prdeli ) else
13930: LD_STRING ERROR: malo vojaku . je to v prdeli
13932: PPUSH
13933: CALL_OW 100
13937: GO 13986
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
13939: LD_ADDR_LOC 17
13943: PUSH
13944: LD_VAR 0 1
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PUSH
13953: LD_VAR 0 1
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: PUSH
13962: LD_VAR 0 1
13966: PUSH
13967: LD_INT 3
13969: ARRAY
13970: PUSH
13971: LD_VAR 0 1
13975: PUSH
13976: LD_INT 4
13978: ARRAY
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
13986: LD_EXP 43
13990: PPUSH
13991: LD_INT 87
13993: PPUSH
13994: LD_INT 137
13996: PPUSH
13997: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14001: LD_EXP 43
14005: PPUSH
14006: LD_INT 89
14008: PPUSH
14009: LD_INT 134
14011: PPUSH
14012: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14016: LD_EXP 43
14020: PPUSH
14021: LD_INT 91
14023: PPUSH
14024: LD_INT 131
14026: PPUSH
14027: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14031: LD_EXP 43
14035: PPUSH
14036: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14040: LD_LOC 17
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: LD_INT 84
14051: PPUSH
14052: LD_INT 127
14054: PPUSH
14055: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14059: LD_LOC 17
14063: PUSH
14064: LD_INT 1
14066: ARRAY
14067: PPUSH
14068: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14072: LD_LOC 17
14076: PUSH
14077: LD_INT 1
14079: ARRAY
14080: PPUSH
14081: LD_INT 91
14083: PPUSH
14084: LD_INT 126
14086: PPUSH
14087: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14091: LD_LOC 17
14095: PUSH
14096: LD_INT 2
14098: ARRAY
14099: PPUSH
14100: LD_INT 85
14102: PPUSH
14103: LD_INT 127
14105: PPUSH
14106: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14110: LD_LOC 17
14114: PUSH
14115: LD_INT 2
14117: ARRAY
14118: PPUSH
14119: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14123: LD_LOC 17
14127: PUSH
14128: LD_INT 2
14130: ARRAY
14131: PPUSH
14132: LD_INT 93
14134: PPUSH
14135: LD_INT 128
14137: PPUSH
14138: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14142: LD_LOC 17
14146: PUSH
14147: LD_INT 3
14149: ARRAY
14150: PPUSH
14151: LD_INT 83
14153: PPUSH
14154: LD_INT 126
14156: PPUSH
14157: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14161: LD_LOC 17
14165: PUSH
14166: LD_INT 3
14168: ARRAY
14169: PPUSH
14170: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14174: LD_LOC 17
14178: PUSH
14179: LD_INT 3
14181: ARRAY
14182: PPUSH
14183: LD_INT 92
14185: PPUSH
14186: LD_INT 128
14188: PPUSH
14189: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14193: LD_LOC 17
14197: PUSH
14198: LD_INT 4
14200: ARRAY
14201: PPUSH
14202: LD_INT 82
14204: PPUSH
14205: LD_INT 125
14207: PPUSH
14208: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14212: LD_LOC 17
14216: PUSH
14217: LD_INT 4
14219: ARRAY
14220: PPUSH
14221: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14225: LD_LOC 17
14229: PUSH
14230: LD_INT 4
14232: ARRAY
14233: PPUSH
14234: LD_INT 90
14236: PPUSH
14237: LD_INT 127
14239: PPUSH
14240: CALL_OW 171
// AddComHold ( plazici ) ;
14244: LD_LOC 17
14248: PPUSH
14249: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14253: LD_INT 92
14255: PPUSH
14256: LD_INT 135
14258: PPUSH
14259: CALL_OW 86
// end ;
14263: PPOPN 1
14265: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14266: LD_EXP 43
14270: PPUSH
14271: LD_INT 91
14273: PPUSH
14274: LD_INT 131
14276: PPUSH
14277: CALL_OW 307
14281: IFFALSE 14322
14283: GO 14285
14285: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14286: LD_INT 64
14288: PPUSH
14289: LD_INT 105
14291: PPUSH
14292: LD_INT 139
14294: PPUSH
14295: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14299: LD_INT 64
14301: PPUSH
14302: LD_INT 103
14304: PPUSH
14305: LD_INT 137
14307: PPUSH
14308: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14312: LD_INT 97
14314: PPUSH
14315: LD_INT 132
14317: PPUSH
14318: CALL_OW 84
// end ;
14322: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14323: LD_INT 64
14325: PPUSH
14326: LD_INT 105
14328: PPUSH
14329: LD_INT 139
14331: PPUSH
14332: CALL_OW 307
14336: IFFALSE 14361
14338: GO 14340
14340: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14341: LD_INT 65
14343: PPUSH
14344: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14348: LD_INT 65
14350: PPUSH
14351: LD_INT 107
14353: PPUSH
14354: LD_INT 138
14356: PPUSH
14357: CALL_OW 111
// end ;
14361: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14362: LD_INT 65
14364: PPUSH
14365: LD_INT 107
14367: PPUSH
14368: LD_INT 138
14370: PPUSH
14371: CALL_OW 307
14375: IFFALSE 14815
14377: GO 14379
14379: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14380: LD_INT 64
14382: PPUSH
14383: LD_INT 65
14385: PPUSH
14386: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14390: LD_INT 64
14392: PPUSH
14393: LD_STRING D1a-Merc1-1
14395: PPUSH
14396: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14400: LD_INT 65
14402: PPUSH
14403: LD_STRING D1a-FMerc2-1
14405: PPUSH
14406: CALL_OW 89
// ComMoveUnit ( zradce1 , mrtvola ) ;
14410: LD_INT 65
14412: PPUSH
14413: LD_INT 64
14415: PPUSH
14416: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14420: LD_INT 64
14422: PPUSH
14423: LD_INT 300
14425: PPUSH
14426: CALL_OW 234
// wait ( 0 0$1 ) ;
14430: LD_INT 35
14432: PPUSH
14433: CALL_OW 67
// AddComTurnXY ( mrtvola , 101 , 141 ) ;
14437: LD_INT 64
14439: PPUSH
14440: LD_INT 101
14442: PPUSH
14443: LD_INT 141
14445: PPUSH
14446: CALL_OW 178
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14450: LD_INT 65
14452: PPUSH
14453: LD_INT 64
14455: PPUSH
14456: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14460: LD_INT 65
14462: PPUSH
14463: LD_INT 64
14465: PPUSH
14466: CALL_OW 188
// wait ( 0 0$2 ) ;
14470: LD_INT 70
14472: PPUSH
14473: CALL_OW 67
// SetLives ( mrtvola , 40 ) ;
14477: LD_INT 64
14479: PPUSH
14480: LD_INT 40
14482: PPUSH
14483: CALL_OW 234
// wait ( 0 0$0.5 ) ;
14487: LD_INT 18
14489: PPUSH
14490: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14494: LD_INT 64
14496: PPUSH
14497: LD_STRING D1a-Merc1-2
14499: PPUSH
14500: CALL_OW 93
// KillUnit ( mrtvola ) ;
14504: LD_INT 64
14506: PPUSH
14507: CALL_OW 66
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14511: LD_INT 65
14513: PPUSH
14514: LD_STRING D1a-FMerc2-2
14516: PPUSH
14517: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14521: LD_INT 70
14523: PUSH
14524: LD_INT 71
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14535: LD_INT 68
14537: PUSH
14538: LD_INT 69
14540: PUSH
14541: LD_INT 75
14543: PUSH
14544: LD_INT 77
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: PPUSH
14553: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14557: LD_INT 68
14559: PUSH
14560: LD_INT 69
14562: PUSH
14563: LD_INT 75
14565: PUSH
14566: LD_INT 77
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PPUSH
14575: LD_INT 165
14577: PPUSH
14578: LD_INT 141
14580: PPUSH
14581: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
14585: LD_INT 78
14587: PPUSH
14588: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
14592: LD_INT 70
14594: PPUSH
14595: LD_INT 67
14597: PPUSH
14598: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
14602: LD_INT 71
14604: PPUSH
14605: LD_INT 66
14607: PPUSH
14608: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
14612: LD_INT 66
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
14622: LD_INT 67
14624: PPUSH
14625: LD_INT 0
14627: PPUSH
14628: CALL_OW 240
// wait ( 0 0$1 ) ;
14632: LD_INT 35
14634: PPUSH
14635: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
14639: LD_INT 66
14641: PPUSH
14642: LD_INT 162
14644: PPUSH
14645: LD_INT 142
14647: PPUSH
14648: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
14652: LD_INT 67
14654: PPUSH
14655: LD_INT 162
14657: PPUSH
14658: LD_INT 139
14660: PPUSH
14661: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
14665: LD_INT 65
14667: PPUSH
14668: LD_INT 162
14670: PPUSH
14671: LD_INT 140
14673: PPUSH
14674: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
14678: LD_INT 65
14680: PUSH
14681: LD_INT 68
14683: PUSH
14684: LD_INT 69
14686: PUSH
14687: LD_INT 75
14689: PUSH
14690: LD_INT 77
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PPUSH
14700: LD_INT 175
14702: PPUSH
14703: LD_INT 128
14705: PPUSH
14706: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
14710: LD_INT 65
14712: PUSH
14713: LD_INT 68
14715: PUSH
14716: LD_INT 69
14718: PUSH
14719: LD_INT 75
14721: PUSH
14722: LD_INT 77
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PPUSH
14732: LD_INT 126
14734: PPUSH
14735: LD_INT 94
14737: PPUSH
14738: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
14742: LD_INT 65
14744: PUSH
14745: LD_INT 68
14747: PUSH
14748: LD_INT 69
14750: PUSH
14751: LD_INT 75
14753: PUSH
14754: LD_INT 77
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: PPUSH
14764: LD_INT 165
14766: PPUSH
14767: LD_INT 92
14769: PPUSH
14770: CALL_OW 171
// ComFree ( plazici ) ;
14774: LD_LOC 17
14778: PPUSH
14779: CALL_OW 139
// ComFree ( Radar_enter ) ;
14783: LD_EXP 43
14787: PPUSH
14788: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
14792: LD_LOC 17
14796: PPUSH
14797: LD_INT 86
14799: PPUSH
14800: LD_INT 133
14802: PPUSH
14803: CALL_OW 111
// navrat := true ;
14807: LD_ADDR_LOC 18
14811: PUSH
14812: LD_INT 1
14814: ST_TO_ADDR
// end ;
14815: END
// every 0 0$5 do
14816: GO 14818
14818: DISABLE
// begin if IsInArea ( utek1 , Benal ) and IsInArea ( utek2 , Benal ) then
14819: LD_INT 66
14821: PPUSH
14822: LD_INT 4
14824: PPUSH
14825: CALL_OW 308
14829: PUSH
14830: LD_INT 67
14832: PPUSH
14833: LD_INT 4
14835: PPUSH
14836: CALL_OW 308
14840: AND
14841: IFFALSE 15013
// begin SetFuel ( [ utek1 , utek2 ] , 100 ) ;
14843: LD_INT 66
14845: PUSH
14846: LD_INT 67
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: LD_INT 100
14855: PPUSH
14856: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
14860: LD_INT 71
14862: PPUSH
14863: LD_INT 66
14865: PPUSH
14866: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
14870: LD_INT 70
14872: PPUSH
14873: LD_INT 67
14875: PPUSH
14876: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
14880: LD_INT 70
14882: PUSH
14883: LD_INT 71
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: LD_INT 179
14892: PPUSH
14893: LD_INT 136
14895: PPUSH
14896: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
14900: LD_INT 70
14902: PUSH
14903: LD_INT 71
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PPUSH
14910: LD_INT 153
14912: PPUSH
14913: LD_INT 108
14915: PPUSH
14916: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
14920: LD_INT 70
14922: PUSH
14923: LD_INT 71
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: LD_INT 126
14932: PPUSH
14933: LD_INT 91
14935: PPUSH
14936: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
14940: LD_INT 70
14942: PUSH
14943: LD_INT 71
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PPUSH
14950: LD_INT 165
14952: PPUSH
14953: LD_INT 92
14955: PPUSH
14956: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
14960: LD_ADDR_LOC 19
14964: PUSH
14965: LD_INT 65
14967: PUSH
14968: LD_INT 68
14970: PUSH
14971: LD_INT 69
14973: PUSH
14974: LD_INT 70
14976: PUSH
14977: LD_INT 71
14979: PUSH
14980: LD_INT 75
14982: PUSH
14983: LD_INT 77
14985: PUSH
14986: LD_INT 66
14988: PUSH
14989: LD_INT 67
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: ST_TO_ADDR
// Odebirani = true ;
15003: LD_ADDR_EXP 44
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// end else
15011: GO 15014
// enable ;
15013: ENABLE
// end ;
15014: END
// every 0 0$1 trigger Odebirani do
15015: LD_EXP 44
15019: IFFALSE 15113
15021: GO 15023
15023: DISABLE
// begin pom = FilterUnitsInArea ( ExitAR , [ [ f_side , Arabi ] ] ) ;
15024: LD_ADDR_LOC 20
15028: PUSH
15029: LD_INT 5
15031: PPUSH
15032: LD_INT 22
15034: PUSH
15035: LD_EXP 3
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: PPUSH
15047: CALL_OW 70
15051: ST_TO_ADDR
// for i in pom do
15052: LD_ADDR_LOC 21
15056: PUSH
15057: LD_LOC 20
15061: PUSH
15062: FOR_IN
15063: IFFALSE 15076
// RemoveUnit ( i ) ;
15065: LD_LOC 21
15069: PPUSH
15070: CALL_OW 64
15074: GO 15062
15076: POP
15077: POP
// if UnitFIlter ( zradci , [ [ f_ok ] ] ) > 0 then
15078: LD_LOC 19
15082: PPUSH
15083: LD_INT 50
15085: PUSH
15086: EMPTY
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: PPUSH
15092: CALL_OW 72
15096: PUSH
15097: LD_INT 0
15099: GREATER
15100: IFFALSE 15105
// enable else
15102: ENABLE
15103: GO 15113
// Odebirani = false ;
15105: LD_ADDR_EXP 44
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// end ;
15113: END
// every 0 0$1 trigger navrat do
15114: LD_LOC 18
15118: IFFALSE 15249
15120: GO 15122
15122: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15123: LD_LOC 17
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: LD_INT 86
15134: PPUSH
15135: LD_INT 133
15137: PPUSH
15138: CALL_OW 307
15142: PUSH
15143: LD_LOC 17
15147: PUSH
15148: LD_INT 2
15150: ARRAY
15151: PPUSH
15152: LD_INT 86
15154: PPUSH
15155: LD_INT 133
15157: PPUSH
15158: CALL_OW 307
15162: OR
15163: PUSH
15164: LD_LOC 17
15168: PUSH
15169: LD_INT 3
15171: ARRAY
15172: PPUSH
15173: LD_INT 86
15175: PPUSH
15176: LD_INT 133
15178: PPUSH
15179: CALL_OW 307
15183: OR
15184: PUSH
15185: LD_LOC 17
15189: PUSH
15190: LD_INT 4
15192: ARRAY
15193: PPUSH
15194: LD_INT 86
15196: PPUSH
15197: LD_INT 133
15199: PPUSH
15200: CALL_OW 307
15204: OR
15205: IFFALSE 15248
// begin ComWalk ( plazici ) ;
15207: LD_LOC 17
15211: PPUSH
15212: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15216: LD_LOC 17
15220: PPUSH
15221: LD_INT 83
15223: PPUSH
15224: LD_INT 148
15226: PPUSH
15227: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15231: LD_EXP 43
15235: PPUSH
15236: LD_INT 87
15238: PPUSH
15239: LD_INT 152
15241: PPUSH
15242: CALL_OW 111
// end else
15246: GO 15249
// enable ;
15248: ENABLE
// end ;
15249: END
// every 0 0$0.5 trigger navrat do
15250: LD_LOC 18
15254: IFFALSE 15288
15256: GO 15258
15258: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15259: LD_LOC 17
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: PPUSH
15268: LD_INT 2
15270: PPUSH
15271: CALL_OW 308
15275: IFFALSE 15287
// begin chmo1 ;
15277: CALL 2050 0 0
// InGameOff ;
15281: CALL_OW 9
// end else
15285: GO 15288
// enable ;
15287: ENABLE
// end ;
15288: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15289: LD_EXP 27
15293: IFFALSE 15388
15295: GO 15297
15297: DISABLE
15298: LD_INT 0
15300: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15301: LD_INT 2100
15303: PPUSH
15304: LD_INT 4900
15306: PPUSH
15307: CALL_OW 12
15311: PPUSH
15312: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15316: LD_ADDR_VAR 0 1
15320: PUSH
15321: LD_INT 4
15323: PUSH
15324: LD_OWVAR 67
15328: MINUS
15329: PPUSH
15330: LD_INT 5
15332: PPUSH
15333: CALL_OW 12
15337: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: LD_INT 3
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15353: LD_ADDR_LOC 22
15357: PUSH
15358: LD_LOC 22
15362: PUSH
15363: LD_VAR 0 1
15367: PLUS
15368: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15369: LD_LOC 22
15373: PUSH
15374: LD_EXP 50
15378: PUSH
15379: LD_OWVAR 67
15383: ARRAY
15384: LESS
15385: IFFALSE 15388
// enable ;
15387: ENABLE
// end ;
15388: PPOPN 1
15390: END
// every 0 0$10 trigger A2_dobyta do
15391: LD_EXP 28
15395: IFFALSE 15420
15397: GO 15399
15399: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15400: LD_ADDR_LOC 22
15404: PUSH
15405: LD_LOC 22
15409: PUSH
15410: LD_INT 10
15412: MINUS
15413: PUSH
15414: LD_OWVAR 67
15418: PLUS
15419: ST_TO_ADDR
// end ; end_of_file
15420: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15421: LD_EXP 27
15425: IFFALSE 15748
15427: GO 15429
15429: DISABLE
// begin if IsOK ( Frank ) then
15430: LD_EXP 35
15434: PPUSH
15435: CALL_OW 302
15439: IFFALSE 15747
// begin wait ( 0 0$10 ) ;
15441: LD_INT 350
15443: PPUSH
15444: CALL_OW 67
// vysl := dialog_frank ;
15448: LD_ADDR_LOC 23
15452: PUSH
15453: CALL 2740 0 0
15457: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15458: LD_ADDR_LOC 24
15462: PUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_INT 100
15468: PPUSH
15469: CALL_OW 12
15473: ST_TO_ADDR
// case vysl of 1 :
15474: LD_LOC 23
15478: PUSH
15479: LD_INT 1
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 15517
15487: POP
// begin i = [ 50 , 30 , 20 ] ;
15488: LD_ADDR_LOC 25
15492: PUSH
15493: LD_INT 50
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 20
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: ST_TO_ADDR
// Pruzkumnik = true ;
15507: LD_ADDR_EXP 30
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// end ; 21 :
15515: GO 15564
15517: LD_INT 21
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15555
15525: POP
// begin i = [ 80 , 15 , 5 ] ;
15526: LD_ADDR_LOC 25
15530: PUSH
15531: LD_INT 80
15533: PUSH
15534: LD_INT 15
15536: PUSH
15537: LD_INT 5
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: ST_TO_ADDR
// Pruzkumnik = true ;
15545: LD_ADDR_EXP 30
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// end ; else
15553: GO 15564
15555: POP
// uspech = 0 ; end ;
15556: LD_ADDR_LOC 26
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
// if Pruzkumnik then
15564: LD_EXP 30
15568: IFFALSE 15649
// begin jdi_na_pruzkum ( Frank ) ;
15570: LD_EXP 35
15574: PPUSH
15575: CALL 16069 0 1
// if pom <= i [ 1 ] then
15579: LD_LOC 24
15583: PUSH
15584: LD_LOC 25
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: LESSEQUAL
15593: IFFALSE 15605
// uspech = 1 else
15595: LD_ADDR_LOC 26
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
15603: GO 15649
// if pom <= i [ 1 ] + i [ 2 ] then
15605: LD_LOC 24
15609: PUSH
15610: LD_LOC 25
15614: PUSH
15615: LD_INT 1
15617: ARRAY
15618: PUSH
15619: LD_LOC 25
15623: PUSH
15624: LD_INT 2
15626: ARRAY
15627: PLUS
15628: LESSEQUAL
15629: IFFALSE 15641
// uspech = 2 else
15631: LD_ADDR_LOC 26
15635: PUSH
15636: LD_INT 2
15638: ST_TO_ADDR
15639: GO 15649
// uspech = 3 ;
15641: LD_ADDR_LOC 26
15645: PUSH
15646: LD_INT 3
15648: ST_TO_ADDR
// end ; case uspech of 1 :
15649: LD_LOC 26
15653: PUSH
15654: LD_INT 1
15656: DOUBLE
15657: EQUAL
15658: IFTRUE 15662
15660: GO 15688
15662: POP
// begin wait ( 3 3$0 ) ;
15663: LD_INT 6300
15665: PPUSH
15666: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
15670: LD_EXP 35
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL 16317 0 2
// fuspech1 ;
15682: CALL 2989 0 0
// end ; 2 :
15686: GO 15745
15688: LD_INT 2
15690: DOUBLE
15691: EQUAL
15692: IFTRUE 15696
15694: GO 15722
15696: POP
// begin wait ( 1 1$0 ) ;
15697: LD_INT 2100
15699: PPUSH
15700: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
15704: LD_EXP 35
15708: PPUSH
15709: LD_INT 2
15711: PPUSH
15712: CALL 16317 0 2
// fuspech2 ;
15716: CALL 3126 0 0
// end ; 3 :
15720: GO 15745
15722: LD_INT 3
15724: DOUBLE
15725: EQUAL
15726: IFTRUE 15730
15728: GO 15744
15730: POP
// begin wait ( 5 5$0 ) ;
15731: LD_INT 10500
15733: PPUSH
15734: CALL_OW 67
// fuspech3 ;
15738: CALL 3269 0 0
// end ; end ;
15742: GO 15745
15744: POP
// end else
15745: GO 15748
// enable ;
15747: ENABLE
// end ;
15748: END
// every 0 0$30 trigger A1_dobyta do
15749: LD_EXP 27
15753: IFFALSE 16068
15755: GO 15757
15757: DISABLE
// begin if IsOK ( Yamoko ) then
15758: LD_EXP 38
15762: PPUSH
15763: CALL_OW 302
15767: IFFALSE 16067
// begin wait ( 0 0$10 ) ;
15769: LD_INT 350
15771: PPUSH
15772: CALL_OW 67
// vysl := dialog_yamoko ;
15776: LD_ADDR_LOC 23
15780: PUSH
15781: CALL 3277 0 0
15785: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15786: LD_ADDR_LOC 24
15790: PUSH
15791: LD_INT 1
15793: PPUSH
15794: LD_INT 100
15796: PPUSH
15797: CALL_OW 12
15801: ST_TO_ADDR
// case vysl of 1 :
15802: LD_LOC 23
15806: PUSH
15807: LD_INT 1
15809: DOUBLE
15810: EQUAL
15811: IFTRUE 15815
15813: GO 15845
15815: POP
// begin i = [ 50 , 20 , 30 ] ;
15816: LD_ADDR_LOC 25
15820: PUSH
15821: LD_INT 50
15823: PUSH
15824: LD_INT 20
15826: PUSH
15827: LD_INT 30
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// Pruzkumnik = true ;
15835: LD_ADDR_EXP 30
15839: PUSH
15840: LD_INT 1
15842: ST_TO_ADDR
// end ; 21 :
15843: GO 15884
15845: LD_INT 21
15847: DOUBLE
15848: EQUAL
15849: IFTRUE 15853
15851: GO 15883
15853: POP
// begin i = [ 70 , 25 , 5 ] ;
15854: LD_ADDR_LOC 25
15858: PUSH
15859: LD_INT 70
15861: PUSH
15862: LD_INT 25
15864: PUSH
15865: LD_INT 5
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
// Pruzkumnik = true ;
15873: LD_ADDR_EXP 30
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// end ; end ;
15881: GO 15884
15883: POP
// if Pruzkumnik then
15884: LD_EXP 30
15888: IFFALSE 15969
// begin jdi_na_pruzkum ( Yamoko ) ;
15890: LD_EXP 38
15894: PPUSH
15895: CALL 16069 0 1
// if pom <= i [ 1 ] then
15899: LD_LOC 24
15903: PUSH
15904: LD_LOC 25
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: LESSEQUAL
15913: IFFALSE 15925
// uspech = 1 else
15915: LD_ADDR_LOC 26
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
15923: GO 15969
// if pom <= i [ 1 ] + i [ 2 ] then
15925: LD_LOC 24
15929: PUSH
15930: LD_LOC 25
15934: PUSH
15935: LD_INT 1
15937: ARRAY
15938: PUSH
15939: LD_LOC 25
15943: PUSH
15944: LD_INT 2
15946: ARRAY
15947: PLUS
15948: LESSEQUAL
15949: IFFALSE 15961
// uspech = 2 else
15951: LD_ADDR_LOC 26
15955: PUSH
15956: LD_INT 2
15958: ST_TO_ADDR
15959: GO 15969
// uspech = 3 ;
15961: LD_ADDR_LOC 26
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; case uspech of 1 :
15969: LD_LOC 26
15973: PUSH
15974: LD_INT 1
15976: DOUBLE
15977: EQUAL
15978: IFTRUE 15982
15980: GO 16008
15982: POP
// begin wait ( 2 2$0 ) ;
15983: LD_INT 4200
15985: PPUSH
15986: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
15990: LD_EXP 38
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL 16317 0 2
// yuspech1 ;
16002: CALL 3392 0 0
// end ; 2 :
16006: GO 16065
16008: LD_INT 2
16010: DOUBLE
16011: EQUAL
16012: IFTRUE 16016
16014: GO 16042
16016: POP
// begin wait ( 1 1$0 ) ;
16017: LD_INT 2100
16019: PPUSH
16020: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16024: LD_EXP 38
16028: PPUSH
16029: LD_INT 2
16031: PPUSH
16032: CALL 16317 0 2
// yuspech2 ;
16036: CALL 3541 0 0
// end ; 3 :
16040: GO 16065
16042: LD_INT 3
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16064
16050: POP
// begin wait ( 5 5$0 ) ;
16051: LD_INT 10500
16053: PPUSH
16054: CALL_OW 67
// yuspech3 ;
16058: CALL 3640 0 0
// end ; end ;
16062: GO 16065
16064: POP
// end else
16065: GO 16068
// enable ;
16067: ENABLE
// end ;
16068: END
// function jdi_na_pruzkum ( pru ) ; begin
16069: LD_INT 0
16071: PPUSH
// ComStop ( pru ) ;
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 181
// AddComStop ( pru ) ;
16099: LD_VAR 0 1
16103: PPUSH
16104: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 310
16117: PUSH
16118: LD_INT 0
16120: NONEQUAL
16121: IFFALSE 16157
// begin wait ( 0 0$0.5 ) ;
16123: LD_INT 18
16125: PPUSH
16126: CALL_OW 67
// ComExitBuilding ( pru ) ;
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16139: LD_INT 18
16141: PPUSH
16142: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 181
// end ;
16155: GO 16108
// ComStop ( pru ) ;
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 141
// SetSide ( pru , You2 ) ;
16166: LD_VAR 0 1
16170: PPUSH
16171: LD_EXP 2
16175: PPUSH
16176: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16180: LD_VAR 0 1
16184: PPUSH
16185: LD_INT 1
16187: PPUSH
16188: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16192: LD_VAR 0 1
16196: PPUSH
16197: LD_INT 91
16199: PPUSH
16200: LD_INT 110
16202: PPUSH
16203: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 59
16214: PPUSH
16215: LD_INT 103
16217: PPUSH
16218: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 59
16229: PPUSH
16230: LD_INT 103
16232: PPUSH
16233: CALL_OW 307
16237: NOT
16238: IFFALSE 16264
// begin wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16247: LD_VAR 0 1
16251: PPUSH
16252: LD_INT 59
16254: PPUSH
16255: LD_INT 103
16257: PPUSH
16258: CALL_OW 171
// end ;
16262: GO 16222
// ComMoveXY ( pru , 51 , 101 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 51
16271: PPUSH
16272: LD_INT 101
16274: PPUSH
16275: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16279: LD_VAR 0 1
16283: PPUSH
16284: LD_INT 24
16286: PPUSH
16287: CALL_OW 308
16291: NOT
16292: IFFALSE 16303
// wait ( 0 0$1 ) ;
16294: LD_INT 35
16296: PPUSH
16297: CALL_OW 67
16301: GO 16279
// RemoveUnit ( pru ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 64
// end ;
16312: LD_VAR 0 2
16316: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16317: LD_INT 0
16319: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_INT 20
16327: PPUSH
16328: LD_INT 0
16330: PPUSH
16331: CALL_OW 49
// if usp = 1 then
16335: LD_VAR 0 2
16339: PUSH
16340: LD_INT 1
16342: EQUAL
16343: IFFALSE 16360
// AddComMoveXY ( pru , 47 , 87 ) ;
16345: LD_VAR 0 1
16349: PPUSH
16350: LD_INT 47
16352: PPUSH
16353: LD_INT 87
16355: PPUSH
16356: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 68
16367: PPUSH
16368: LD_INT 106
16370: PPUSH
16371: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_INT 118
16382: PPUSH
16383: LD_INT 129
16385: PPUSH
16386: CALL_OW 171
// if usp <> 1 then
16390: LD_VAR 0 2
16394: PUSH
16395: LD_INT 1
16397: NONEQUAL
16398: IFFALSE 16412
// SetLives ( pru , 300 ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 300
16407: PPUSH
16408: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16412: LD_VAR 0 1
16416: PPUSH
16417: LD_INT 3
16419: PPUSH
16420: CALL_OW 308
16424: NOT
16425: IFFALSE 16436
// wait ( 0 0$2 ) ;
16427: LD_INT 70
16429: PPUSH
16430: CALL_OW 67
16434: GO 16412
// SetSide ( pru , You ) ;
16436: LD_VAR 0 1
16440: PPUSH
16441: LD_EXP 1
16445: PPUSH
16446: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16450: LD_VAR 0 1
16454: PPUSH
16455: LD_EXP 31
16459: PPUSH
16460: CALL_OW 112
// end ;
16464: LD_VAR 0 3
16468: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
16469: LD_INT 110
16471: PPUSH
16472: CALL_OW 255
16476: PUSH
16477: LD_INT 110
16479: PPUSH
16480: CALL_OW 301
16484: OR
16485: IFFALSE 16550
16487: GO 16489
16489: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
16490: LD_INT 70
16492: PPUSH
16493: LD_EXP 1
16497: PPUSH
16498: LD_INT 2
16500: PPUSH
16501: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
16505: LD_INT 21
16507: PPUSH
16508: LD_EXP 1
16512: PPUSH
16513: LD_INT 2
16515: PPUSH
16516: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
16520: LD_INT 22
16522: PPUSH
16523: LD_EXP 1
16527: PPUSH
16528: LD_INT 2
16530: PPUSH
16531: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
16535: LD_INT 41
16537: PPUSH
16538: LD_EXP 1
16542: PPUSH
16543: LD_INT 2
16545: PPUSH
16546: CALL_OW 322
// end ;
16550: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
16551: LD_INT 22
16553: PUSH
16554: LD_EXP 3
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 30
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: PUSH
16582: LD_INT 0
16584: EQUAL
16585: IFFALSE 16754
16587: GO 16589
16589: DISABLE
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16596: LD_ADDR_VAR 0 1
16600: PUSH
16601: LD_INT 22
16603: PUSH
16604: LD_EXP 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 34
16618: PUSH
16619: LD_INT 12
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 34
16628: PUSH
16629: LD_INT 32
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: ST_TO_ADDR
// art = false ;
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// for i in pomauta do
16658: LD_ADDR_VAR 0 3
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: FOR_IN
16669: IFFALSE 16699
// if GetCargo ( i , mat_artefact ) > 0 then
16671: LD_VAR 0 3
16675: PPUSH
16676: LD_INT 4
16678: PPUSH
16679: CALL_OW 289
16683: PUSH
16684: LD_INT 0
16686: GREATER
16687: IFFALSE 16697
// art = true ;
16689: LD_ADDR_VAR 0 2
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
16697: GO 16668
16699: POP
16700: POP
// if art then
16701: LD_VAR 0 2
16705: IFFALSE 16713
// konec_mise else
16707: CALL 466 0 0
16711: GO 16754
// begin pom = query_konec_mise ;
16713: LD_ADDR_VAR 0 4
16717: PUSH
16718: CALL 7546 0 0
16722: ST_TO_ADDR
// if pom = 2 then
16723: LD_VAR 0 4
16727: PUSH
16728: LD_INT 2
16730: EQUAL
16731: IFFALSE 16739
// konec_mise else
16733: CALL 466 0 0
16737: GO 16754
// begin end_the_mission_allowed = true ;
16739: LD_ADDR_OWVAR 57
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
16747: LD_STRING MDestroyOut
16749: PPUSH
16750: CALL_OW 337
// end ; end ; end ; end_of_file
16754: PPOPN 4
16756: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
16757: GO 16759
16759: DISABLE
// begin utok1 := false ;
16760: LD_ADDR_LOC 27
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// bum2 = false ;
16768: LD_ADDR_EXP 46
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
16776: LD_ADDR_LOC 31
16780: PUSH
16781: LD_INT 112
16783: PUSH
16784: LD_INT 63
16786: PUSH
16787: LD_INT 47
16789: PUSH
16790: LD_INT 60
16792: PUSH
16793: LD_INT 60
16795: PUSH
16796: LD_INT 62
16798: PUSH
16799: LD_INT 59
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
16811: LD_ADDR_LOC 32
16815: PUSH
16816: LD_EXP 10
16820: PUSH
16821: LD_INT 15
16823: ARRAY
16824: PUSH
16825: LD_EXP 10
16829: PUSH
16830: LD_INT 16
16832: ARRAY
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// pom = vytvor_opravare ;
16838: LD_ADDR_LOC 34
16842: PUSH
16843: CALL 8728 0 0
16847: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
16848: LD_ADDR_LOC 32
16852: PUSH
16853: LD_LOC 32
16857: PUSH
16858: LD_LOC 34
16862: ADD
16863: ST_TO_ADDR
// Utok1_over = false ;
16864: LD_ADDR_LOC 28
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// utok3_over = false ;
16872: LD_ADDR_LOC 29
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// utok4_over = false ;
16880: LD_ADDR_LOC 30
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
16888: LD_ADDR_LOC 36
16892: PUSH
16893: LD_INT 28
16895: PUSH
16896: LD_INT 16
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 22
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 29
16915: PUSH
16916: LD_INT 20
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 19
16925: PUSH
16926: LD_INT 33
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: ST_TO_ADDR
// disable ( 998 ) ;
16939: LD_INT 998
16941: DISABLE_MARKED
// disable ( 997 ) ;
16942: LD_INT 997
16944: DISABLE_MARKED
// disable ( 996 ) ;
16945: LD_INT 996
16947: DISABLE_MARKED
// disable ( 995 ) ;
16948: LD_INT 995
16950: DISABLE_MARKED
// if difficulty < 3 then
16951: LD_OWVAR 67
16955: PUSH
16956: LD_INT 3
16958: LESS
16959: IFFALSE 16968
// RemoveUnit ( sui1 ) ;
16961: LD_INT 118
16963: PPUSH
16964: CALL_OW 64
// if difficulty < 2 then
16968: LD_OWVAR 67
16972: PUSH
16973: LD_INT 2
16975: LESS
16976: IFFALSE 16992
// begin RemoveUnit ( sui2 ) ;
16978: LD_INT 119
16980: PPUSH
16981: CALL_OW 64
// RemoveUnit ( sui3 ) ;
16985: LD_INT 121
16987: PPUSH
16988: CALL_OW 64
// end ; end ;
16992: END
// export function uklid_arabu ; begin
16993: LD_INT 0
16995: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
16996: LD_INT 65
16998: PPUSH
16999: LD_INT 15
17001: PPUSH
17002: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17006: LD_INT 68
17008: PPUSH
17009: LD_INT 9
17011: PPUSH
17012: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17016: LD_INT 69
17018: PPUSH
17019: LD_INT 8
17021: PPUSH
17022: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17026: LD_INT 70
17028: PPUSH
17029: LD_INT 14
17031: PPUSH
17032: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17036: LD_INT 71
17038: PPUSH
17039: LD_INT 14
17041: PPUSH
17042: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17046: LD_INT 72
17048: PPUSH
17049: LD_INT 11
17051: PPUSH
17052: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17056: LD_INT 73
17058: PPUSH
17059: LD_INT 4
17061: PPUSH
17062: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17066: LD_INT 76
17068: PPUSH
17069: LD_INT 4
17071: PPUSH
17072: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17076: LD_INT 87
17078: PPUSH
17079: LD_INT 15
17081: PPUSH
17082: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17086: LD_INT 74
17088: PPUSH
17089: LD_INT 15
17091: PPUSH
17092: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17096: LD_INT 75
17098: PPUSH
17099: LD_INT 10
17101: PPUSH
17102: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17106: LD_INT 77
17108: PPUSH
17109: LD_INT 12
17111: PPUSH
17112: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17116: LD_INT 78
17118: PPUSH
17119: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17123: LD_INT 79
17125: PPUSH
17126: LD_INT 4
17128: PPUSH
17129: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17133: LD_INT 81
17135: PPUSH
17136: LD_INT 110
17138: PPUSH
17139: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17143: LD_INT 80
17145: PPUSH
17146: LD_INT 110
17148: PPUSH
17149: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17153: LD_INT 82
17155: PPUSH
17156: LD_INT 52
17158: PPUSH
17159: LD_INT 62
17161: PPUSH
17162: LD_INT 0
17164: PPUSH
17165: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17169: LD_INT 83
17171: PPUSH
17172: LD_INT 55
17174: PPUSH
17175: LD_INT 64
17177: PPUSH
17178: LD_INT 0
17180: PPUSH
17181: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17185: LD_INT 82
17187: PUSH
17188: LD_INT 83
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: LD_INT 44
17197: PPUSH
17198: LD_INT 24
17200: PPUSH
17201: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17205: LD_INT 82
17207: PUSH
17208: LD_INT 83
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: LD_INT 30
17217: PPUSH
17218: LD_INT 11
17220: PPUSH
17221: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17225: LD_INT 82
17227: PUSH
17228: LD_INT 83
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: LD_INT 24
17237: PPUSH
17238: LD_INT 37
17240: PPUSH
17241: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17245: LD_INT 82
17247: PPUSH
17248: LD_INT 32
17250: PPUSH
17251: LD_INT 60
17253: PPUSH
17254: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17258: LD_INT 83
17260: PPUSH
17261: LD_INT 37
17263: PPUSH
17264: LD_INT 58
17266: PPUSH
17267: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17271: LD_INT 82
17273: PUSH
17274: LD_INT 83
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17285: LD_INT 96
17287: PPUSH
17288: LD_INT 26
17290: PPUSH
17291: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17295: LD_INT 95
17297: PPUSH
17298: LD_INT 25
17300: PPUSH
17301: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17305: LD_INT 94
17307: PPUSH
17308: LD_INT 27
17310: PPUSH
17311: CALL_OW 120
// wait ( 0 0$5 ) ;
17315: LD_INT 175
17317: PPUSH
17318: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17322: LD_INT 23
17324: PUSH
17325: LD_INT 18
17327: PUSH
17328: LD_INT 44
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: PPUSH
17336: LD_INT 96
17338: PPUSH
17339: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17343: LD_INT 19
17345: PUSH
17346: LD_INT 24
17348: PUSH
17349: LD_INT 20
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: LD_INT 95
17359: PPUSH
17360: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17364: LD_INT 21
17366: PUSH
17367: LD_INT 93
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: PPUSH
17378: LD_INT 94
17380: PPUSH
17381: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17385: LD_INT 101
17387: PPUSH
17388: LD_INT 103
17390: PPUSH
17391: LD_INT 19
17393: PPUSH
17394: LD_INT 0
17396: PPUSH
17397: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17401: LD_INT 101
17403: PPUSH
17404: LD_INT 104
17406: PPUSH
17407: LD_INT 3
17409: PPUSH
17410: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17414: LD_INT 101
17416: PPUSH
17417: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17421: LD_INT 101
17423: PPUSH
17424: LD_INT 102
17426: PPUSH
17427: LD_INT 8
17429: PPUSH
17430: CALL_OW 178
// end ;
17434: LD_VAR 0 1
17438: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17439: LD_INT 0
17441: PPUSH
17442: PPUSH
17443: PPUSH
// MD1_un = [ ] ;
17444: LD_ADDR_VAR 0 2
17448: PUSH
17449: EMPTY
17450: ST_TO_ADDR
// MD2_un = [ ] ;
17451: LD_ADDR_VAR 0 3
17455: PUSH
17456: EMPTY
17457: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
17458: LD_EXP 10
17462: PUSH
17463: LD_INT 1
17465: ARRAY
17466: PPUSH
17467: LD_INT 112
17469: PPUSH
17470: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
17474: LD_ADDR_LOC 36
17478: PUSH
17479: LD_LOC 36
17483: PUSH
17484: LD_INT 112
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: ADD
17501: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
17502: LD_EXP 10
17506: PUSH
17507: LD_INT 2
17509: ARRAY
17510: PPUSH
17511: LD_INT 63
17513: PPUSH
17514: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_VAR 0 2
17527: PUSH
17528: LD_EXP 10
17532: PUSH
17533: LD_INT 2
17535: ARRAY
17536: ADD
17537: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
17538: LD_ADDR_LOC 36
17542: PUSH
17543: LD_LOC 36
17547: PUSH
17548: LD_INT 63
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 0
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: ADD
17565: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
17566: LD_EXP 10
17570: PUSH
17571: LD_INT 3
17573: ARRAY
17574: PPUSH
17575: LD_INT 47
17577: PPUSH
17578: CALL_OW 120
// if difficulty > 1 then
17582: LD_OWVAR 67
17586: PUSH
17587: LD_INT 1
17589: GREATER
17590: IFFALSE 17612
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_EXP 10
17606: PUSH
17607: LD_INT 3
17609: ARRAY
17610: ADD
17611: ST_TO_ADDR
// if difficulty > 1 then
17612: LD_OWVAR 67
17616: PUSH
17617: LD_INT 1
17619: GREATER
17620: IFFALSE 17642
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
17622: LD_ADDR_VAR 0 3
17626: PUSH
17627: LD_VAR 0 3
17631: PUSH
17632: LD_EXP 10
17636: PUSH
17637: LD_INT 3
17639: ARRAY
17640: ADD
17641: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
17642: LD_ADDR_LOC 36
17646: PUSH
17647: LD_LOC 36
17651: PUSH
17652: LD_INT 47
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: EMPTY
17667: LIST
17668: ADD
17669: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
17670: LD_EXP 10
17674: PUSH
17675: LD_INT 4
17677: ARRAY
17678: PPUSH
17679: LD_INT 60
17681: PPUSH
17682: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
17686: LD_ADDR_LOC 36
17690: PUSH
17691: LD_LOC 36
17695: PUSH
17696: LD_INT 60
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: ADD
17713: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
17714: LD_EXP 10
17718: PUSH
17719: LD_INT 5
17721: ARRAY
17722: PPUSH
17723: LD_INT 62
17725: PPUSH
17726: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
17730: LD_ADDR_VAR 0 3
17734: PUSH
17735: LD_VAR 0 3
17739: PUSH
17740: LD_EXP 10
17744: PUSH
17745: LD_INT 5
17747: ARRAY
17748: ADD
17749: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
17750: LD_ADDR_LOC 36
17754: PUSH
17755: LD_LOC 36
17759: PUSH
17760: LD_INT 62
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: ADD
17777: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
17778: LD_EXP 10
17782: PUSH
17783: LD_INT 6
17785: ARRAY
17786: PPUSH
17787: LD_INT 59
17789: PPUSH
17790: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_VAR 0 3
17803: PUSH
17804: LD_EXP 10
17808: PUSH
17809: LD_INT 6
17811: ARRAY
17812: ADD
17813: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
17814: LD_ADDR_LOC 36
17818: PUSH
17819: LD_LOC 36
17823: PUSH
17824: LD_INT 59
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: EMPTY
17839: LIST
17840: ADD
17841: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
17842: LD_EXP 10
17846: PUSH
17847: LD_INT 17
17849: ARRAY
17850: PPUSH
17851: LD_INT 50
17853: PPUSH
17854: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
17858: LD_ADDR_VAR 0 2
17862: PUSH
17863: LD_VAR 0 2
17867: PUSH
17868: LD_EXP 10
17872: PUSH
17873: LD_INT 17
17875: ARRAY
17876: ADD
17877: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_VAR 0 3
17887: PUSH
17888: LD_EXP 10
17892: PUSH
17893: LD_INT 17
17895: ARRAY
17896: ADD
17897: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
17898: LD_ADDR_LOC 36
17902: PUSH
17903: LD_LOC 36
17907: PUSH
17908: LD_INT 50
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: LD_INT 3
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: ADD
17925: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
17926: LD_EXP 10
17930: PUSH
17931: LD_INT 18
17933: ARRAY
17934: PPUSH
17935: LD_INT 50
17937: PPUSH
17938: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
17942: LD_ADDR_VAR 0 2
17946: PUSH
17947: LD_VAR 0 2
17951: PUSH
17952: LD_EXP 10
17956: PUSH
17957: LD_INT 18
17959: ARRAY
17960: ADD
17961: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
17962: LD_ADDR_LOC 36
17966: PUSH
17967: LD_LOC 36
17971: PUSH
17972: LD_INT 50
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: ADD
17989: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
17990: LD_EXP 10
17994: PUSH
17995: LD_INT 19
17997: ARRAY
17998: PPUSH
17999: LD_INT 50
18001: PPUSH
18002: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18006: LD_EXP 10
18010: PUSH
18011: LD_INT 20
18013: ARRAY
18014: PPUSH
18015: LD_INT 50
18017: PPUSH
18018: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18022: LD_EXP 10
18026: PUSH
18027: LD_INT 15
18029: ARRAY
18030: PPUSH
18031: LD_INT 46
18033: PPUSH
18034: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18038: LD_EXP 10
18042: PUSH
18043: LD_INT 16
18045: ARRAY
18046: PPUSH
18047: LD_INT 46
18049: PPUSH
18050: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18054: LD_ADDR_VAR 0 3
18058: PUSH
18059: LD_VAR 0 3
18063: PUSH
18064: LD_EXP 10
18068: PUSH
18069: LD_INT 16
18071: ARRAY
18072: ADD
18073: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18074: LD_ADDR_LOC 36
18078: PUSH
18079: LD_LOC 36
18083: PUSH
18084: LD_INT 46
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: ADD
18101: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18102: LD_EXP 10
18106: PUSH
18107: LD_INT 7
18109: ARRAY
18110: PPUSH
18111: LD_INT 48
18113: PPUSH
18114: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18118: LD_ADDR_VAR 0 2
18122: PUSH
18123: LD_VAR 0 2
18127: PUSH
18128: LD_EXP 10
18132: PUSH
18133: LD_INT 7
18135: ARRAY
18136: ADD
18137: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18138: LD_ADDR_LOC 36
18142: PUSH
18143: LD_LOC 36
18147: PUSH
18148: LD_INT 48
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: LD_INT 8
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: ADD
18165: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18166: LD_EXP 10
18170: PUSH
18171: LD_INT 8
18173: ARRAY
18174: PPUSH
18175: LD_INT 48
18177: PPUSH
18178: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18182: LD_ADDR_VAR 0 3
18186: PUSH
18187: LD_VAR 0 3
18191: PUSH
18192: LD_EXP 10
18196: PUSH
18197: LD_INT 8
18199: ARRAY
18200: ADD
18201: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18202: LD_ADDR_LOC 36
18206: PUSH
18207: LD_LOC 36
18211: PUSH
18212: LD_INT 48
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: ADD
18229: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18230: LD_EXP 10
18234: PUSH
18235: LD_INT 9
18237: ARRAY
18238: PPUSH
18239: LD_INT 48
18241: PPUSH
18242: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18246: LD_ADDR_LOC 36
18250: PUSH
18251: LD_LOC 36
18255: PUSH
18256: LD_INT 48
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: LD_INT 8
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: ADD
18273: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18274: LD_EXP 10
18278: PUSH
18279: LD_INT 10
18281: ARRAY
18282: PPUSH
18283: LD_INT 48
18285: PPUSH
18286: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18290: LD_EXP 10
18294: PUSH
18295: LD_INT 11
18297: ARRAY
18298: PPUSH
18299: LD_INT 61
18301: PPUSH
18302: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18306: LD_ADDR_VAR 0 2
18310: PUSH
18311: LD_VAR 0 2
18315: PUSH
18316: LD_EXP 10
18320: PUSH
18321: LD_INT 10
18323: ARRAY
18324: ADD
18325: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18326: LD_ADDR_VAR 0 3
18330: PUSH
18331: LD_VAR 0 3
18335: PUSH
18336: LD_EXP 10
18340: PUSH
18341: LD_INT 10
18343: ARRAY
18344: ADD
18345: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18346: LD_ADDR_LOC 36
18350: PUSH
18351: LD_LOC 36
18355: PUSH
18356: LD_INT 61
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: LD_INT 4
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: ADD
18373: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18374: LD_EXP 10
18378: PUSH
18379: LD_INT 12
18381: ARRAY
18382: PPUSH
18383: LD_INT 61
18385: PPUSH
18386: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18390: LD_EXP 10
18394: PUSH
18395: LD_INT 23
18397: ARRAY
18398: PPUSH
18399: LD_INT 88
18401: PPUSH
18402: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18406: LD_EXP 10
18410: PUSH
18411: LD_INT 21
18413: ARRAY
18414: PPUSH
18415: LD_INT 107
18417: PPUSH
18418: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18422: LD_ADDR_VAR 0 2
18426: PUSH
18427: LD_VAR 0 2
18431: PUSH
18432: LD_EXP 10
18436: PUSH
18437: LD_INT 21
18439: ARRAY
18440: ADD
18441: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18442: LD_ADDR_VAR 0 3
18446: PUSH
18447: LD_VAR 0 3
18451: PUSH
18452: LD_EXP 10
18456: PUSH
18457: LD_INT 21
18459: ARRAY
18460: ADD
18461: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
18462: LD_ADDR_LOC 36
18466: PUSH
18467: LD_LOC 36
18471: PUSH
18472: LD_INT 107
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: ADD
18489: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
18490: LD_EXP 10
18494: PUSH
18495: LD_INT 22
18497: ARRAY
18498: PPUSH
18499: LD_INT 108
18501: PPUSH
18502: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18506: LD_ADDR_VAR 0 2
18510: PUSH
18511: LD_VAR 0 2
18515: PUSH
18516: LD_EXP 10
18520: PUSH
18521: LD_INT 22
18523: ARRAY
18524: ADD
18525: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_VAR 0 3
18535: PUSH
18536: LD_EXP 10
18540: PUSH
18541: LD_INT 22
18543: ARRAY
18544: ADD
18545: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
18546: LD_ADDR_LOC 36
18550: PUSH
18551: LD_LOC 36
18555: PUSH
18556: LD_INT 108
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: ADD
18573: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
18574: LD_LOC 32
18578: PPUSH
18579: LD_INT 46
18581: PPUSH
18582: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
18586: LD_EXP 6
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
18600: LD_EXP 8
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: CALL_OW 390
// end ;
18614: LD_VAR 0 1
18618: RET
// export function uklid_arabu3 ; begin
18619: LD_INT 0
18621: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
18622: LD_EXP 11
18626: PUSH
18627: LD_INT 1
18629: ARRAY
18630: PPUSH
18631: LD_INT 30
18633: PPUSH
18634: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
18638: LD_EXP 11
18642: PUSH
18643: LD_INT 2
18645: ARRAY
18646: PPUSH
18647: LD_INT 43
18649: PPUSH
18650: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
18654: LD_EXP 11
18658: PUSH
18659: LD_INT 3
18661: ARRAY
18662: PPUSH
18663: LD_INT 31
18665: PPUSH
18666: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
18670: LD_EXP 11
18674: PUSH
18675: LD_INT 7
18677: ARRAY
18678: PPUSH
18679: LD_INT 40
18681: PPUSH
18682: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
18686: LD_EXP 11
18690: PUSH
18691: LD_INT 5
18693: ARRAY
18694: PPUSH
18695: LD_INT 40
18697: PPUSH
18698: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
18702: LD_EXP 11
18706: PUSH
18707: LD_INT 6
18709: ARRAY
18710: PPUSH
18711: LD_INT 40
18713: PPUSH
18714: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
18718: LD_EXP 11
18722: PUSH
18723: LD_INT 4
18725: ARRAY
18726: PPUSH
18727: LD_INT 28
18729: PPUSH
18730: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
18734: LD_EXP 11
18738: PUSH
18739: LD_INT 8
18741: ARRAY
18742: PPUSH
18743: LD_INT 34
18745: PPUSH
18746: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
18750: LD_EXP 11
18754: PUSH
18755: LD_INT 9
18757: ARRAY
18758: PPUSH
18759: LD_INT 34
18761: PPUSH
18762: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
18766: LD_EXP 11
18770: PUSH
18771: LD_INT 10
18773: ARRAY
18774: PPUSH
18775: LD_INT 34
18777: PPUSH
18778: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
18782: LD_EXP 11
18786: PUSH
18787: LD_INT 11
18789: ARRAY
18790: PPUSH
18791: LD_INT 34
18793: PPUSH
18794: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
18798: LD_EXP 11
18802: PUSH
18803: LD_INT 12
18805: ARRAY
18806: PPUSH
18807: LD_INT 41
18809: PPUSH
18810: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
18814: LD_EXP 11
18818: PUSH
18819: LD_INT 13
18821: ARRAY
18822: PPUSH
18823: LD_INT 41
18825: PPUSH
18826: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
18830: LD_EXP 11
18834: PUSH
18835: LD_INT 16
18837: ARRAY
18838: PPUSH
18839: LD_INT 28
18841: PPUSH
18842: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
18846: LD_EXP 11
18850: PUSH
18851: LD_INT 17
18853: ARRAY
18854: PPUSH
18855: LD_INT 28
18857: PPUSH
18858: CALL_OW 120
// end ;
18862: LD_VAR 0 1
18866: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
18867: LD_INT 3
18869: PPUSH
18870: LD_INT 22
18872: PUSH
18873: LD_EXP 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: EMPTY
18883: LIST
18884: PPUSH
18885: CALL_OW 70
18889: PUSH
18890: LD_INT 0
18892: GREATER
18893: IFFALSE 19039
18895: GO 18897
18897: DISABLE
// begin wait ( 0 0$2 ) ;
18898: LD_INT 70
18900: PPUSH
18901: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
18905: LD_INT 73
18907: PPUSH
18908: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
18912: LD_INT 87
18914: PUSH
18915: LD_INT 74
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
18926: LD_INT 87
18928: PPUSH
18929: LD_INT 121
18931: PPUSH
18932: LD_INT 147
18934: PPUSH
18935: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
18939: LD_INT 87
18941: PPUSH
18942: LD_INT 113
18944: PPUSH
18945: LD_INT 141
18947: PPUSH
18948: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
18952: LD_INT 87
18954: PPUSH
18955: LD_INT 9
18957: PPUSH
18958: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
18962: LD_INT 79
18964: PPUSH
18965: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
18969: LD_INT 81
18971: PUSH
18972: LD_INT 80
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
18983: LD_INT 81
18985: PPUSH
18986: LD_INT 113
18988: PPUSH
18989: LD_INT 128
18991: PPUSH
18992: CALL_OW 174
// if difficulty = 3 then
18996: LD_OWVAR 67
19000: PUSH
19001: LD_INT 3
19003: EQUAL
19004: IFFALSE 19016
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19006: LD_INT 81
19008: PPUSH
19009: LD_INT 109
19011: PPUSH
19012: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19016: LD_INT 80
19018: PPUSH
19019: LD_INT 117
19021: PPUSH
19022: LD_INT 125
19024: PPUSH
19025: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19029: LD_INT 80
19031: PPUSH
19032: LD_INT 105
19034: PPUSH
19035: CALL_OW 180
// end ;
19039: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19040: LD_LOC 28
19044: IFFALSE 19277
19046: GO 19048
19048: DISABLE
19049: LD_INT 0
19051: PPUSH
19052: PPUSH
19053: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19054: LD_EXP 53
19058: PUSH
19059: LD_OWVAR 67
19063: ARRAY
19064: PPUSH
19065: CALL_OW 67
// for i in Ar_utok3_LIST do
19069: LD_ADDR_VAR 0 2
19073: PUSH
19074: LD_EXP 14
19078: PUSH
19079: FOR_IN
19080: IFFALSE 19099
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: LD_INT 25
19089: PPUSH
19090: LD_INT 0
19092: PPUSH
19093: CALL_OW 49
19097: GO 19079
19099: POP
19100: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_INT 22
19108: PUSH
19109: LD_EXP 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: PPUSH
19121: CALL_OW 69
19125: ST_TO_ADDR
// if pom > 0 then
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 0
19133: GREATER
19134: IFFALSE 19175
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_VAR 0 1
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: CALL_OW 250
19154: PUSH
19155: LD_VAR 0 1
19159: PUSH
19160: LD_INT 1
19162: ARRAY
19163: PPUSH
19164: CALL_OW 251
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: ST_TO_ADDR
19173: GO 19190
// souradnice = [ 102 , 125 ] ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 102
19182: PUSH
19183: LD_INT 125
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19190: LD_INT 35
19192: PPUSH
19193: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19197: LD_ADDR_LOC 37
19201: PUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_EXP 14
19209: PPUSH
19210: LD_INT 128
19212: PUSH
19213: LD_INT 91
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 128
19222: PUSH
19223: LD_INT 108
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 126
19232: PUSH
19233: LD_INT 121
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 120
19242: PUSH
19243: LD_INT 131
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_VAR 0 3
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: PPUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 6
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 398
19276: ST_TO_ADDR
// end ;
19277: PPOPN 3
19279: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19280: LD_INT 112
19282: PPUSH
19283: CALL_OW 302
19287: NOT
19288: PUSH
19289: LD_INT 63
19291: PPUSH
19292: CALL_OW 302
19296: NOT
19297: AND
19298: IFFALSE 19532
19300: GO 19302
19302: DISABLE
19303: LD_INT 0
19305: PPUSH
19306: PPUSH
19307: PPUSH
// begin for i in Ar_utok2_LIST do
19308: LD_ADDR_VAR 0 2
19312: PUSH
19313: LD_EXP 13
19317: PUSH
19318: FOR_IN
19319: IFFALSE 19338
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19321: LD_VAR 0 2
19325: PPUSH
19326: LD_INT 25
19328: PPUSH
19329: LD_INT 0
19331: PPUSH
19332: CALL_OW 49
19336: GO 19318
19338: POP
19339: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19340: LD_ADDR_VAR 0 1
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_EXP 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 21
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: ST_TO_ADDR
// if pom > 0 then
19376: LD_VAR 0 1
19380: PUSH
19381: LD_INT 0
19383: GREATER
19384: IFFALSE 19425
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19386: LD_ADDR_VAR 0 3
19390: PUSH
19391: LD_VAR 0 1
19395: PUSH
19396: LD_INT 1
19398: ARRAY
19399: PPUSH
19400: CALL_OW 250
19404: PUSH
19405: LD_VAR 0 1
19409: PUSH
19410: LD_INT 1
19412: ARRAY
19413: PPUSH
19414: CALL_OW 251
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: ST_TO_ADDR
19423: GO 19440
// souradnice = [ 39 , 16 ] ;
19425: LD_ADDR_VAR 0 3
19429: PUSH
19430: LD_INT 39
19432: PUSH
19433: LD_INT 16
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19440: LD_ADDR_LOC 38
19444: PUSH
19445: LD_INT 1
19447: PPUSH
19448: LD_EXP 13
19452: PPUSH
19453: LD_INT 128
19455: PUSH
19456: LD_INT 91
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 128
19465: PUSH
19466: LD_INT 108
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 126
19475: PUSH
19476: LD_INT 121
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 120
19485: PUSH
19486: LD_INT 131
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_VAR 0 3
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: PPUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 6
19510: PUSH
19511: LD_INT 5
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 398
19523: ST_TO_ADDR
// utok3_over = true ;
19524: LD_ADDR_LOC 29
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// end ;
19532: PPOPN 3
19534: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
19535: LD_EXP 28
19539: IFFALSE 19804
19541: GO 19543
19543: DISABLE
19544: LD_INT 0
19546: PPUSH
19547: PPUSH
19548: PPUSH
// begin wait ( 2 2$0 ) ;
19549: LD_INT 4200
19551: PPUSH
19552: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19556: LD_ADDR_VAR 0 1
19560: PUSH
19561: LD_INT 22
19563: PUSH
19564: LD_EXP 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 34
19578: PUSH
19579: LD_INT 12
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 34
19588: PUSH
19589: LD_INT 32
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PPUSH
19605: CALL_OW 69
19609: ST_TO_ADDR
// for i in Ar_utok4_LIST do
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_EXP 15
19619: PUSH
19620: FOR_IN
19621: IFFALSE 19640
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_INT 25
19630: PPUSH
19631: LD_INT 0
19633: PPUSH
19634: CALL_OW 49
19638: GO 19620
19640: POP
19641: POP
// if pom > 0 then
19642: LD_VAR 0 1
19646: PUSH
19647: LD_INT 0
19649: GREATER
19650: IFFALSE 19724
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
19652: LD_EXP 15
19656: PPUSH
19657: LD_VAR 0 1
19661: PUSH
19662: LD_INT 1
19664: ARRAY
19665: PPUSH
19666: CALL_OW 250
19670: PPUSH
19671: LD_VAR 0 1
19675: PUSH
19676: LD_INT 1
19678: ARRAY
19679: PPUSH
19680: CALL_OW 251
19684: PPUSH
19685: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
19689: LD_EXP 15
19693: PPUSH
19694: LD_VAR 0 1
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: PPUSH
19703: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
19707: LD_EXP 15
19711: PPUSH
19712: LD_INT 59
19714: PPUSH
19715: LD_INT 7
19717: PPUSH
19718: CALL_OW 174
// end else
19722: GO 19796
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19724: LD_INT 1
19726: PPUSH
19727: LD_EXP 13
19731: PPUSH
19732: LD_INT 128
19734: PUSH
19735: LD_INT 91
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 128
19744: PUSH
19745: LD_INT 108
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 126
19754: PUSH
19755: LD_INT 121
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 120
19764: PUSH
19765: LD_INT 123
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: PPUSH
19778: LD_INT 1
19780: PUSH
19781: LD_INT 6
19783: PUSH
19784: LD_INT 5
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 398
// utok4_over = true ;
19796: LD_ADDR_LOC 30
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// end ;
19804: PPOPN 3
19806: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
19807: LD_INT 35
19809: PPUSH
19810: LD_INT 22
19812: PUSH
19813: LD_EXP 3
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL_OW 70
19829: PUSH
19830: LD_INT 0
19832: EQUAL
19833: IFFALSE 19926
19835: GO 19837
19837: DISABLE
19838: LD_INT 0
19840: PPUSH
// begin for i in Ar_backa_LIST do
19841: LD_ADDR_VAR 0 1
19845: PUSH
19846: LD_EXP 17
19850: PUSH
19851: FOR_IN
19852: IFFALSE 19871
// PlaceUnitArea ( i , backa1 , false ) ;
19854: LD_VAR 0 1
19858: PPUSH
19859: LD_INT 36
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: CALL_OW 49
19869: GO 19851
19871: POP
19872: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
19873: LD_INT 1
19875: PPUSH
19876: LD_EXP 17
19880: PPUSH
19881: LD_INT 59
19883: PUSH
19884: LD_INT 7
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 76
19893: PUSH
19894: LD_INT 11
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 95
19903: PUSH
19904: LD_INT 19
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: PPUSH
19916: LD_INT 6
19918: PUSH
19919: EMPTY
19920: LIST
19921: PPUSH
19922: CALL_OW 398
// end ;
19926: PPOPN 1
19928: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
19929: LD_LOC 30
19933: IFFALSE 20156
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
19941: PPUSH
19942: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
19943: LD_EXP 54
19947: PUSH
19948: LD_OWVAR 67
19952: ARRAY
19953: PPUSH
19954: CALL_OW 67
// wait ( 2 2$0 ) ;
19958: LD_INT 4200
19960: PPUSH
19961: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_EXP 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 34
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 34
19997: PUSH
19998: LD_INT 32
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20019: LD_ADDR_VAR 0 2
20023: PUSH
20024: LD_EXP 16
20028: PUSH
20029: FOR_IN
20030: IFFALSE 20049
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20032: LD_VAR 0 2
20036: PPUSH
20037: LD_INT 25
20039: PPUSH
20040: LD_INT 0
20042: PPUSH
20043: CALL_OW 49
20047: GO 20029
20049: POP
20050: POP
// for i in pom do
20051: LD_ADDR_VAR 0 2
20055: PUSH
20056: LD_VAR 0 1
20060: PUSH
20061: FOR_IN
20062: IFFALSE 20109
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20064: LD_EXP 16
20068: PPUSH
20069: LD_VAR 0 2
20073: PPUSH
20074: CALL_OW 250
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: CALL_OW 251
20088: PPUSH
20089: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20093: LD_EXP 16
20097: PPUSH
20098: LD_VAR 0 2
20102: PPUSH
20103: CALL_OW 175
// end ;
20107: GO 20061
20109: POP
20110: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20111: LD_EXP 16
20115: PPUSH
20116: LD_INT 18
20118: PPUSH
20119: LD_INT 17
20121: PPUSH
20122: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20126: LD_EXP 16
20130: PPUSH
20131: LD_INT 72
20133: PPUSH
20134: LD_INT 10
20136: PPUSH
20137: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20141: LD_EXP 16
20145: PPUSH
20146: LD_INT 116
20148: PPUSH
20149: LD_INT 126
20151: PPUSH
20152: CALL_OW 174
// end ;
20156: PPOPN 3
20158: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20159: LD_EXP 27
20163: IFFALSE 20590
20165: GO 20167
20167: DISABLE
20168: LD_INT 0
20170: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_INT 3
20178: PPUSH
20179: LD_INT 22
20181: PUSH
20182: LD_EXP 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: PPUSH
20194: CALL_OW 70
20198: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20199: LD_EXP 47
20203: PUSH
20204: LD_OWVAR 67
20208: ARRAY
20209: PPUSH
20210: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20214: LD_INT 86
20216: PUSH
20217: LD_INT 85
20219: PUSH
20220: LD_INT 84
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PPUSH
20228: LD_INT 66
20230: PPUSH
20231: LD_INT 110
20233: PPUSH
20234: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20238: LD_INT 86
20240: PPUSH
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_INT 102
20248: PPUSH
20249: LD_INT 112
20251: PPUSH
20252: CALL_OW 73
20256: PPUSH
20257: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20261: LD_INT 86
20263: PPUSH
20264: LD_VAR 0 1
20268: PUSH
20269: LD_INT 1
20271: PPUSH
20272: LD_VAR 0 1
20276: PUSH
20277: LD_INT 0
20279: PLUS
20280: PPUSH
20281: CALL_OW 12
20285: ARRAY
20286: PPUSH
20287: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20291: LD_INT 85
20293: PPUSH
20294: LD_VAR 0 1
20298: PPUSH
20299: LD_INT 90
20301: PPUSH
20302: LD_INT 121
20304: PPUSH
20305: CALL_OW 73
20309: PPUSH
20310: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20314: LD_INT 85
20316: PPUSH
20317: LD_VAR 0 1
20321: PUSH
20322: LD_INT 1
20324: PPUSH
20325: LD_VAR 0 1
20329: PUSH
20330: LD_INT 0
20332: PLUS
20333: PPUSH
20334: CALL_OW 12
20338: ARRAY
20339: PPUSH
20340: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20344: LD_INT 84
20346: PPUSH
20347: LD_INT 4
20349: PPUSH
20350: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20354: LD_INT 84
20356: PPUSH
20357: LD_VAR 0 1
20361: PUSH
20362: LD_INT 1
20364: PPUSH
20365: LD_VAR 0 1
20369: PUSH
20370: LD_INT 0
20372: PLUS
20373: PPUSH
20374: CALL_OW 12
20378: ARRAY
20379: PPUSH
20380: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20384: LD_INT 1
20386: PPUSH
20387: LD_INT 89
20389: PUSH
20390: LD_INT 90
20392: PUSH
20393: LD_INT 91
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: PPUSH
20401: LD_INT 44
20403: PUSH
20404: LD_INT 25
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 50
20413: PUSH
20414: LD_INT 54
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 92
20423: PUSH
20424: LD_INT 101
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 112
20433: PUSH
20434: LD_INT 124
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: PPUSH
20447: LD_INT 6
20449: PUSH
20450: LD_INT 5
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
20461: LD_INT 92
20463: PPUSH
20464: LD_INT 91
20466: PPUSH
20467: LD_INT 128
20469: PPUSH
20470: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
20474: LD_ADDR_LOC 33
20478: PUSH
20479: LD_EXP 9
20483: PUSH
20484: FOR_IN
20485: IFFALSE 20504
// PlaceUnitArea ( i , protiEN , false ) ;
20487: LD_LOC 33
20491: PPUSH
20492: LD_INT 21
20494: PPUSH
20495: LD_INT 0
20497: PPUSH
20498: CALL_OW 49
20502: GO 20484
20504: POP
20505: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20506: LD_INT 1
20508: PPUSH
20509: LD_EXP 9
20513: PPUSH
20514: LD_INT 49
20516: PUSH
20517: LD_INT 31
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 55
20526: PUSH
20527: LD_INT 76
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 100
20536: PUSH
20537: LD_INT 109
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 122
20546: PUSH
20547: LD_INT 132
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: PPUSH
20560: LD_INT 6
20562: PUSH
20563: LD_INT 5
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PPUSH
20570: CALL_OW 398
// utok1 := true ;
20574: LD_ADDR_LOC 27
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// utok1_over = true ;
20582: LD_ADDR_LOC 28
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// end ;
20590: PPOPN 1
20592: END
// every 0 0$17 trigger oposoldier = - 1 do
20593: LD_EXP 45
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: EQUAL
20602: IFFALSE 20679
20604: GO 20606
20606: DISABLE
// begin if not See ( You , A3_solop ) then
20607: LD_EXP 1
20611: PPUSH
20612: LD_INT 102
20614: PPUSH
20615: CALL_OW 292
20619: NOT
20620: IFFALSE 20679
// begin SetClass ( A3_solop , class_mechanic ) ;
20622: LD_INT 102
20624: PPUSH
20625: LD_INT 3
20627: PPUSH
20628: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
20632: LD_INT 102
20634: PPUSH
20635: CALL_OW 64
// pom := create_auto_pro_solopa ;
20639: LD_ADDR_LOC 34
20643: PUSH
20644: CALL 8295 0 0
20648: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
20649: LD_INT 102
20651: PPUSH
20652: LD_LOC 34
20656: PPUSH
20657: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
20661: LD_LOC 34
20665: PPUSH
20666: LD_INT 111
20668: PPUSH
20669: LD_INT 16
20671: PPUSH
20672: LD_INT 0
20674: PPUSH
20675: CALL_OW 48
// end ; end ;
20679: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
20680: LD_EXP 45
20684: PUSH
20685: LD_INT 1
20687: EQUAL
20688: IFFALSE 20722
20690: GO 20692
20692: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
20693: LD_INT 102
20695: PPUSH
20696: LD_INT 127
20698: PPUSH
20699: LD_INT 89
20701: PPUSH
20702: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
20706: LD_INT 103
20708: PPUSH
20709: LD_INT 127
20711: PPUSH
20712: LD_INT 89
20714: PPUSH
20715: CALL_OW 111
// enable ( 997 ) ;
20719: LD_INT 997
20721: ENABLE_MARKED
// end ;
20722: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
20723: LD_INT 102
20725: PPUSH
20726: LD_INT 12
20728: PPUSH
20729: CALL_OW 308
20733: IFFALSE 20748
20735: GO 20737
20737: DISABLE
// begin wait ( 0 0$5 ) ;
20738: LD_INT 175
20740: PPUSH
20741: CALL_OW 67
// enable ( 998 ) ;
20745: LD_INT 998
20747: ENABLE_MARKED
// end ;
20748: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
20749: LD_EXP 45
20753: PUSH
20754: LD_INT 1
20756: EQUAL
20757: IFFALSE 20975
20759: GO 20761
20761: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
20762: LD_ADDR_LOC 34
20766: PUSH
20767: LD_INT 12
20769: PPUSH
20770: LD_INT 21
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 33
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: LD_INT 34
20795: PUSH
20796: LD_INT 12
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 34
20805: PUSH
20806: LD_INT 32
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 59
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: PPUSH
20837: CALL_OW 70
20841: ST_TO_ADDR
// if pom > 0 then
20842: LD_LOC 34
20846: PUSH
20847: LD_INT 0
20849: GREATER
20850: IFFALSE 20952
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
20852: LD_INT 102
20854: PPUSH
20855: LD_LOC 34
20859: PUSH
20860: LD_INT 1
20862: ARRAY
20863: PPUSH
20864: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
20868: LD_INT 102
20870: PPUSH
20871: LD_INT 165
20873: PPUSH
20874: LD_INT 92
20876: PPUSH
20877: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
20881: LD_INT 103
20883: PPUSH
20884: LD_INT 165
20886: PPUSH
20887: LD_INT 92
20889: PPUSH
20890: CALL_OW 171
// oposoldier = 2 ;
20894: LD_ADDR_EXP 45
20898: PUSH
20899: LD_INT 2
20901: ST_TO_ADDR
// wait ( 0 0$15 ) ;
20902: LD_INT 525
20904: PPUSH
20905: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
20909: LD_INT 102
20911: PPUSH
20912: CALL_OW 310
20916: NOT
20917: IFFALSE 20950
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
20919: LD_INT 102
20921: PUSH
20922: LD_INT 103
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: LD_INT 116
20931: PPUSH
20932: LD_INT 23
20934: PPUSH
20935: CALL_OW 111
// enable ( 996 ) ;
20939: LD_INT 996
20941: ENABLE_MARKED
// oposoldier = 1 ;
20942: LD_ADDR_EXP 45
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// end ; end else
20950: GO 20975
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
20952: LD_INT 102
20954: PUSH
20955: LD_INT 103
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: LD_INT 116
20964: PPUSH
20965: LD_INT 23
20967: PPUSH
20968: CALL_OW 171
// enable ( 996 ) ;
20972: LD_INT 996
20974: ENABLE_MARKED
// end ; end ;
20975: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
20976: LD_INT 102
20978: PPUSH
20979: LD_INT 34
20981: PPUSH
20982: CALL_OW 308
20986: IFFALSE 20994
20988: GO 20990
20990: DISABLE
// begin enable ( 999 ) ;
20991: LD_INT 999
20993: ENABLE_MARKED
// end ;
20994: END
// every 0 0$3 trigger oposoldier = 2 do
20995: LD_EXP 45
20999: PUSH
21000: LD_INT 2
21002: EQUAL
21003: IFFALSE 21134
21005: GO 21007
21007: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21008: LD_ADDR_LOC 34
21012: PUSH
21013: LD_INT 13
21015: PPUSH
21016: LD_INT 22
21018: PUSH
21019: LD_EXP 4
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: EMPTY
21029: LIST
21030: PPUSH
21031: CALL_OW 70
21035: ST_TO_ADDR
// if pom > 0 then
21036: LD_LOC 34
21040: PUSH
21041: LD_INT 0
21043: GREATER
21044: IFFALSE 21133
// for i in pom do
21046: LD_ADDR_LOC 33
21050: PUSH
21051: LD_LOC 34
21055: PUSH
21056: FOR_IN
21057: IFFALSE 21131
// begin if GetType ( i ) = unit_vehicle then
21059: LD_LOC 33
21063: PPUSH
21064: CALL_OW 247
21068: PUSH
21069: LD_INT 2
21071: EQUAL
21072: IFFALSE 21120
// if IsDrivenBy ( i ) = A3_solop then
21074: LD_LOC 33
21078: PPUSH
21079: CALL_OW 311
21083: PUSH
21084: LD_INT 102
21086: EQUAL
21087: IFFALSE 21120
// begin oposoldier = 3 ;
21089: LD_ADDR_EXP 45
21093: PUSH
21094: LD_INT 3
21096: ST_TO_ADDR
// dialog_kamery ;
21097: CALL 5325 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21101: LD_INT 102
21103: PPUSH
21104: CALL_OW 310
21108: PPUSH
21109: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21113: LD_INT 103
21115: PPUSH
21116: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21120: LD_LOC 33
21124: PPUSH
21125: CALL_OW 64
// end ;
21129: GO 21056
21131: POP
21132: POP
// enable ;
21133: ENABLE
// end ;
21134: END
// every 0 0$1 do
21135: GO 21137
21137: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21138: LD_ADDR_LOC 34
21142: PUSH
21143: LD_INT 14
21145: PPUSH
21146: LD_INT 22
21148: PUSH
21149: LD_EXP 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: PPUSH
21161: CALL_OW 70
21165: ST_TO_ADDR
// if pom > 0 then
21166: LD_LOC 34
21170: PUSH
21171: LD_INT 0
21173: GREATER
21174: IFFALSE 21366
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21176: LD_INT 15
21178: PPUSH
21179: LD_INT 22
21181: PUSH
21182: LD_EXP 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: PPUSH
21194: CALL_OW 70
21198: PUSH
21199: LD_INT 0
21201: EQUAL
21202: IFFALSE 21213
// wait ( 0 0$0.5 ) ;
21204: LD_INT 18
21206: PPUSH
21207: CALL_OW 67
21211: GO 21176
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21213: LD_INT 82
21215: PUSH
21216: LD_INT 83
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21227: LD_INT 82
21229: PUSH
21230: LD_INT 83
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PPUSH
21237: LD_INT 33
21239: PPUSH
21240: LD_INT 55
21242: PPUSH
21243: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21247: LD_INT 82
21249: PUSH
21250: LD_INT 83
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PPUSH
21257: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21261: LD_INT 82
21263: PPUSH
21264: LD_INT 39
21266: PPUSH
21267: LD_INT 15
21269: PPUSH
21270: LD_INT 0
21272: PPUSH
21273: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21277: LD_INT 83
21279: PPUSH
21280: LD_INT 37
21282: PPUSH
21283: LD_INT 14
21285: PPUSH
21286: LD_INT 0
21288: PPUSH
21289: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21293: LD_INT 82
21295: PUSH
21296: LD_INT 83
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PPUSH
21303: LD_INT 25
21305: PPUSH
21306: LD_INT 13
21308: PPUSH
21309: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21313: LD_INT 15
21315: PPUSH
21316: LD_INT 22
21318: PUSH
21319: LD_EXP 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: PPUSH
21331: CALL_OW 70
21335: PUSH
21336: LD_INT 0
21338: EQUAL
21339: IFFALSE 21350
// wait ( 0 0$0.5 ) ;
21341: LD_INT 18
21343: PPUSH
21344: CALL_OW 67
21348: GO 21313
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21350: LD_INT 82
21352: PUSH
21353: LD_INT 83
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 134
// end else
21364: GO 21367
// enable ;
21366: ENABLE
// end ;
21367: END
// every 0 0$1 do
21368: GO 21370
21370: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21371: LD_ADDR_LOC 34
21375: PUSH
21376: LD_INT 18
21378: PPUSH
21379: LD_INT 22
21381: PUSH
21382: LD_EXP 1
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: PPUSH
21394: CALL_OW 70
21398: ST_TO_ADDR
// if pom > 0 then
21399: LD_LOC 34
21403: PUSH
21404: LD_INT 0
21406: GREATER
21407: IFFALSE 21572
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21409: LD_INT 19
21411: PPUSH
21412: LD_INT 22
21414: PUSH
21415: LD_EXP 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: PPUSH
21427: CALL_OW 70
21431: PUSH
21432: LD_INT 0
21434: EQUAL
21435: IFFALSE 21446
// wait ( 0 0$0.5 ) ;
21437: LD_INT 18
21439: PPUSH
21440: CALL_OW 67
21444: GO 21409
// ComFireExplosives ( A3_zas1 ) ;
21446: LD_INT 101
21448: PPUSH
21449: CALL_OW 134
// bum2 := true ;
21453: LD_ADDR_EXP 46
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
21461: LD_INT 101
21463: PPUSH
21464: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
21468: LD_ADDR_LOC 34
21472: PUSH
21473: LD_INT 17
21475: PPUSH
21476: LD_INT 22
21478: PUSH
21479: LD_EXP 1
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: PPUSH
21491: CALL_OW 70
21495: ST_TO_ADDR
// if pom > 0 then
21496: LD_LOC 34
21500: PUSH
21501: LD_INT 0
21503: GREATER
21504: IFFALSE 21540
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
21506: LD_INT 101
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: LD_INT 0
21514: PPUSH
21515: LD_LOC 34
21519: PUSH
21520: LD_INT 1
21522: ARRAY
21523: PPUSH
21524: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
21528: LD_INT 101
21530: PPUSH
21531: LD_INT 40
21533: PPUSH
21534: CALL_OW 180
// end else
21538: GO 21570
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
21540: LD_INT 101
21542: PPUSH
21543: LD_INT 102
21545: PPUSH
21546: LD_INT 19
21548: PPUSH
21549: LD_INT 0
21551: PPUSH
21552: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
21556: LD_INT 101
21558: PPUSH
21559: LD_INT 99
21561: PPUSH
21562: LD_INT 3
21564: PPUSH
21565: CALL_OW 171
// enable ;
21569: ENABLE
// end ; end else
21570: GO 21573
// enable ;
21572: ENABLE
// end ;
21573: END
// every 0 0$2 do
21574: GO 21576
21576: DISABLE
// begin pom = [ ] ;
21577: LD_ADDR_LOC 34
21581: PUSH
21582: EMPTY
21583: ST_TO_ADDR
// pom1 = [ ] ;
21584: LD_ADDR_LOC 35
21588: PUSH
21589: EMPTY
21590: ST_TO_ADDR
// for i in Veze_2 do
21591: LD_ADDR_LOC 33
21595: PUSH
21596: LD_LOC 31
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21637
// if GetLives ( i ) <> 1000 then
21604: LD_LOC 33
21608: PPUSH
21609: CALL_OW 256
21613: PUSH
21614: LD_INT 1000
21616: NONEQUAL
21617: IFFALSE 21635
// pom = pom ^ i ;
21619: LD_ADDR_LOC 34
21623: PUSH
21624: LD_LOC 34
21628: PUSH
21629: LD_LOC 33
21633: ADD
21634: ST_TO_ADDR
21635: GO 21601
21637: POP
21638: POP
// for i in Opr_2 do
21639: LD_ADDR_LOC 33
21643: PUSH
21644: LD_LOC 32
21648: PUSH
21649: FOR_IN
21650: IFFALSE 21681
// if IsOK ( i ) then
21652: LD_LOC 33
21656: PPUSH
21657: CALL_OW 302
21661: IFFALSE 21679
// pom1 = pom1 ^ i ;
21663: LD_ADDR_LOC 35
21667: PUSH
21668: LD_LOC 35
21672: PUSH
21673: LD_LOC 33
21677: ADD
21678: ST_TO_ADDR
21679: GO 21649
21681: POP
21682: POP
// if pom1 > 0 and pom > 0 then
21683: LD_LOC 35
21687: PUSH
21688: LD_INT 0
21690: GREATER
21691: PUSH
21692: LD_LOC 34
21696: PUSH
21697: LD_INT 0
21699: GREATER
21700: AND
21701: IFFALSE 21859
// begin if pom + 0 <= pom1 + 0 then
21703: LD_LOC 34
21707: PUSH
21708: LD_INT 0
21710: PLUS
21711: PUSH
21712: LD_LOC 35
21716: PUSH
21717: LD_INT 0
21719: PLUS
21720: LESSEQUAL
21721: IFFALSE 21792
// for i := 1 to pom + 0 do
21723: LD_ADDR_LOC 33
21727: PUSH
21728: DOUBLE
21729: LD_INT 1
21731: DEC
21732: ST_TO_ADDR
21733: LD_LOC 34
21737: PUSH
21738: LD_INT 0
21740: PLUS
21741: PUSH
21742: FOR_TO
21743: IFFALSE 21788
// begin AddComExitBuilding ( pom1 [ i ] ) ;
21745: LD_LOC 35
21749: PUSH
21750: LD_LOC 33
21754: ARRAY
21755: PPUSH
21756: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
21760: LD_LOC 35
21764: PUSH
21765: LD_LOC 33
21769: ARRAY
21770: PPUSH
21771: LD_LOC 34
21775: PUSH
21776: LD_LOC 33
21780: ARRAY
21781: PPUSH
21782: CALL_OW 190
// end else
21786: GO 21742
21788: POP
21789: POP
21790: GO 21859
// for i := 1 to pom1 + 0 do
21792: LD_ADDR_LOC 33
21796: PUSH
21797: DOUBLE
21798: LD_INT 1
21800: DEC
21801: ST_TO_ADDR
21802: LD_LOC 35
21806: PUSH
21807: LD_INT 0
21809: PLUS
21810: PUSH
21811: FOR_TO
21812: IFFALSE 21857
// begin AddComExitBuilding ( pom1 [ i ] ) ;
21814: LD_LOC 35
21818: PUSH
21819: LD_LOC 33
21823: ARRAY
21824: PPUSH
21825: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
21829: LD_LOC 35
21833: PUSH
21834: LD_LOC 33
21838: ARRAY
21839: PPUSH
21840: LD_LOC 34
21844: PUSH
21845: LD_LOC 33
21849: ARRAY
21850: PPUSH
21851: CALL_OW 190
// end ;
21855: GO 21811
21857: POP
21858: POP
// end ; enable ;
21859: ENABLE
// end ;
21860: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
21861: LD_INT 22
21863: PPUSH
21864: LD_INT 22
21866: PUSH
21867: LD_EXP 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: PPUSH
21879: CALL_OW 70
21883: PUSH
21884: LD_INT 0
21886: GREATER
21887: IFFALSE 22484
21889: GO 21891
21891: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
21892: LD_EXP 10
21896: PUSH
21897: LD_INT 1
21899: ARRAY
21900: PPUSH
21901: LD_INT 28
21903: PPUSH
21904: LD_INT 39
21906: PPUSH
21907: LD_INT 0
21909: PPUSH
21910: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
21914: LD_EXP 10
21918: PUSH
21919: LD_INT 2
21921: ARRAY
21922: PPUSH
21923: LD_INT 23
21925: PPUSH
21926: LD_INT 38
21928: PPUSH
21929: LD_INT 0
21931: PPUSH
21932: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
21936: LD_EXP 10
21940: PUSH
21941: LD_INT 3
21943: ARRAY
21944: PPUSH
21945: LD_INT 32
21947: PPUSH
21948: LD_INT 20
21950: PPUSH
21951: LD_INT 0
21953: PPUSH
21954: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
21958: LD_EXP 10
21962: PUSH
21963: LD_INT 4
21965: ARRAY
21966: PPUSH
21967: LD_INT 32
21969: PPUSH
21970: LD_INT 17
21972: PPUSH
21973: LD_INT 0
21975: PPUSH
21976: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
21980: LD_EXP 10
21984: PUSH
21985: LD_INT 5
21987: ARRAY
21988: PPUSH
21989: LD_INT 38
21991: PPUSH
21992: LD_INT 8
21994: PPUSH
21995: LD_INT 0
21997: PPUSH
21998: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22002: LD_EXP 10
22006: PUSH
22007: LD_INT 6
22009: ARRAY
22010: PPUSH
22011: LD_INT 40
22013: PPUSH
22014: LD_INT 7
22016: PPUSH
22017: LD_INT 0
22019: PPUSH
22020: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22024: LD_EXP 10
22028: PUSH
22029: LD_INT 7
22031: ARRAY
22032: PPUSH
22033: LD_INT 24
22035: PPUSH
22036: LD_INT 8
22038: PPUSH
22039: LD_INT 0
22041: PPUSH
22042: CALL_OW 48
// if difficulty > 1 then
22046: LD_OWVAR 67
22050: PUSH
22051: LD_INT 1
22053: GREATER
22054: IFFALSE 22080
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22056: LD_EXP 10
22060: PUSH
22061: LD_INT 8
22063: ARRAY
22064: PPUSH
22065: LD_INT 26
22067: PPUSH
22068: LD_INT 10
22070: PPUSH
22071: LD_INT 0
22073: PPUSH
22074: CALL_OW 48
22078: GO 22093
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22080: LD_EXP 10
22084: PUSH
22085: LD_INT 8
22087: ARRAY
22088: PPUSH
22089: CALL_OW 65
// if difficulty > 2 then
22093: LD_OWVAR 67
22097: PUSH
22098: LD_INT 2
22100: GREATER
22101: IFFALSE 22127
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22103: LD_EXP 10
22107: PUSH
22108: LD_INT 9
22110: ARRAY
22111: PPUSH
22112: LD_INT 25
22114: PPUSH
22115: LD_INT 11
22117: PPUSH
22118: LD_INT 0
22120: PPUSH
22121: CALL_OW 48
22125: GO 22140
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22127: LD_EXP 10
22131: PUSH
22132: LD_INT 9
22134: ARRAY
22135: PPUSH
22136: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22140: LD_EXP 10
22144: PUSH
22145: LD_INT 10
22147: ARRAY
22148: PPUSH
22149: LD_INT 24
22151: PPUSH
22152: LD_INT 10
22154: PPUSH
22155: LD_INT 0
22157: PPUSH
22158: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22162: LD_EXP 10
22166: PUSH
22167: LD_INT 11
22169: ARRAY
22170: PPUSH
22171: LD_INT 31
22173: PPUSH
22174: LD_INT 9
22176: PPUSH
22177: LD_INT 0
22179: PPUSH
22180: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22184: LD_EXP 10
22188: PUSH
22189: LD_INT 12
22191: ARRAY
22192: PPUSH
22193: LD_INT 33
22195: PPUSH
22196: LD_INT 9
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22206: LD_EXP 10
22210: PUSH
22211: LD_INT 13
22213: ARRAY
22214: PPUSH
22215: LD_INT 38
22217: PPUSH
22218: LD_INT 40
22220: PPUSH
22221: LD_INT 0
22223: PPUSH
22224: CALL_OW 48
// if difficulty > 1 then
22228: LD_OWVAR 67
22232: PUSH
22233: LD_INT 1
22235: GREATER
22236: IFFALSE 22262
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22238: LD_EXP 10
22242: PUSH
22243: LD_INT 14
22245: ARRAY
22246: PPUSH
22247: LD_INT 36
22249: PPUSH
22250: LD_INT 39
22252: PPUSH
22253: LD_INT 0
22255: PPUSH
22256: CALL_OW 48
22260: GO 22275
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22262: LD_EXP 10
22266: PUSH
22267: LD_INT 14
22269: ARRAY
22270: PPUSH
22271: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22275: LD_EXP 10
22279: PUSH
22280: LD_INT 15
22282: ARRAY
22283: PPUSH
22284: LD_INT 21
22286: PPUSH
22287: LD_INT 12
22289: PPUSH
22290: LD_INT 0
22292: PPUSH
22293: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22297: LD_EXP 10
22301: PUSH
22302: LD_INT 16
22304: ARRAY
22305: PPUSH
22306: LD_INT 21
22308: PPUSH
22309: LD_INT 13
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22319: LD_EXP 10
22323: PUSH
22324: LD_INT 17
22326: ARRAY
22327: PPUSH
22328: LD_INT 23
22330: PPUSH
22331: LD_INT 19
22333: PPUSH
22334: LD_INT 0
22336: PPUSH
22337: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22341: LD_EXP 10
22345: PUSH
22346: LD_INT 18
22348: ARRAY
22349: PPUSH
22350: LD_INT 23
22352: PPUSH
22353: LD_INT 20
22355: PPUSH
22356: LD_INT 0
22358: PPUSH
22359: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22363: LD_EXP 10
22367: PUSH
22368: LD_INT 19
22370: ARRAY
22371: PPUSH
22372: LD_INT 21
22374: PPUSH
22375: LD_INT 19
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22385: LD_EXP 10
22389: PUSH
22390: LD_INT 20
22392: ARRAY
22393: PPUSH
22394: LD_INT 24
22396: PPUSH
22397: LD_INT 20
22399: PPUSH
22400: LD_INT 0
22402: PPUSH
22403: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22407: LD_EXP 10
22411: PUSH
22412: LD_INT 22
22414: ARRAY
22415: PPUSH
22416: LD_INT 21
22418: PPUSH
22419: LD_INT 34
22421: PPUSH
22422: LD_INT 0
22424: PPUSH
22425: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22429: LD_EXP 10
22433: PUSH
22434: LD_INT 21
22436: ARRAY
22437: PPUSH
22438: LD_INT 27
22440: PPUSH
22441: LD_INT 17
22443: PPUSH
22444: LD_INT 0
22446: PPUSH
22447: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22451: LD_EXP 10
22455: PUSH
22456: LD_INT 23
22458: ARRAY
22459: PPUSH
22460: LD_INT 28
22462: PPUSH
22463: LD_INT 21
22465: PPUSH
22466: LD_INT 0
22468: PPUSH
22469: CALL_OW 48
// wait ( 0 0$1 ) ;
22473: LD_INT 35
22475: PPUSH
22476: CALL_OW 67
// uklid_arabu2 ;
22480: CALL 17439 0 0
// end ;
22484: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
22485: LD_INT 23
22487: PPUSH
22488: LD_INT 22
22490: PUSH
22491: LD_EXP 1
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: PPUSH
22503: CALL_OW 70
22507: PUSH
22508: LD_INT 0
22510: GREATER
22511: IFFALSE 22901
22513: GO 22515
22515: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
22516: LD_EXP 11
22520: PUSH
22521: LD_INT 1
22523: ARRAY
22524: PPUSH
22525: LD_INT 103
22527: PPUSH
22528: LD_INT 11
22530: PPUSH
22531: LD_INT 0
22533: PPUSH
22534: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
22538: LD_EXP 11
22542: PUSH
22543: LD_INT 2
22545: ARRAY
22546: PPUSH
22547: LD_INT 108
22549: PPUSH
22550: LD_INT 18
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
22560: LD_EXP 11
22564: PUSH
22565: LD_INT 3
22567: ARRAY
22568: PPUSH
22569: LD_INT 107
22571: PPUSH
22572: LD_INT 21
22574: PPUSH
22575: LD_INT 0
22577: PPUSH
22578: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
22582: LD_EXP 11
22586: PUSH
22587: LD_INT 4
22589: ARRAY
22590: PPUSH
22591: LD_INT 118
22593: PPUSH
22594: LD_INT 11
22596: PPUSH
22597: LD_INT 0
22599: PPUSH
22600: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
22604: LD_EXP 11
22608: PUSH
22609: LD_INT 5
22611: ARRAY
22612: PPUSH
22613: LD_INT 118
22615: PPUSH
22616: LD_INT 12
22618: PPUSH
22619: LD_INT 0
22621: PPUSH
22622: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
22626: LD_EXP 11
22630: PUSH
22631: LD_INT 6
22633: ARRAY
22634: PPUSH
22635: LD_INT 119
22637: PPUSH
22638: LD_INT 13
22640: PPUSH
22641: LD_INT 0
22643: PPUSH
22644: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
22648: LD_EXP 11
22652: PUSH
22653: LD_INT 7
22655: ARRAY
22656: PPUSH
22657: LD_INT 115
22659: PPUSH
22660: LD_INT 9
22662: PPUSH
22663: LD_INT 0
22665: PPUSH
22666: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
22670: LD_EXP 11
22674: PUSH
22675: LD_INT 8
22677: ARRAY
22678: PPUSH
22679: LD_INT 119
22681: PPUSH
22682: LD_INT 18
22684: PPUSH
22685: LD_INT 0
22687: PPUSH
22688: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
22692: LD_EXP 11
22696: PUSH
22697: LD_INT 9
22699: ARRAY
22700: PPUSH
22701: LD_INT 118
22703: PPUSH
22704: LD_INT 18
22706: PPUSH
22707: LD_INT 0
22709: PPUSH
22710: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
22714: LD_EXP 11
22718: PUSH
22719: LD_INT 10
22721: ARRAY
22722: PPUSH
22723: LD_INT 118
22725: PPUSH
22726: LD_INT 17
22728: PPUSH
22729: LD_INT 0
22731: PPUSH
22732: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
22736: LD_EXP 11
22740: PUSH
22741: LD_INT 11
22743: ARRAY
22744: PPUSH
22745: LD_INT 118
22747: PPUSH
22748: LD_INT 16
22750: PPUSH
22751: LD_INT 0
22753: PPUSH
22754: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
22758: LD_EXP 11
22762: PUSH
22763: LD_INT 12
22765: ARRAY
22766: PPUSH
22767: LD_INT 111
22769: PPUSH
22770: LD_INT 13
22772: PPUSH
22773: LD_INT 0
22775: PPUSH
22776: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
22780: LD_EXP 11
22784: PUSH
22785: LD_INT 13
22787: ARRAY
22788: PPUSH
22789: LD_INT 112
22791: PPUSH
22792: LD_INT 12
22794: PPUSH
22795: LD_INT 0
22797: PPUSH
22798: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
22802: LD_EXP 11
22806: PUSH
22807: LD_INT 14
22809: ARRAY
22810: PPUSH
22811: LD_INT 113
22813: PPUSH
22814: LD_INT 25
22816: PPUSH
22817: LD_INT 0
22819: PPUSH
22820: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
22824: LD_EXP 11
22828: PUSH
22829: LD_INT 15
22831: ARRAY
22832: PPUSH
22833: LD_INT 113
22835: PPUSH
22836: LD_INT 27
22838: PPUSH
22839: LD_INT 0
22841: PPUSH
22842: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
22846: LD_EXP 11
22850: PUSH
22851: LD_INT 16
22853: ARRAY
22854: PPUSH
22855: LD_INT 114
22857: PPUSH
22858: LD_INT 9
22860: PPUSH
22861: LD_INT 0
22863: PPUSH
22864: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
22868: LD_EXP 11
22872: PUSH
22873: LD_INT 17
22875: ARRAY
22876: PPUSH
22877: LD_INT 114
22879: PPUSH
22880: LD_INT 10
22882: PPUSH
22883: LD_INT 0
22885: PPUSH
22886: CALL_OW 48
// wait ( 0 0$1 ) ;
22890: LD_INT 35
22892: PPUSH
22893: CALL_OW 67
// uklid_arabu3 ;
22897: CALL 18619 0 0
// end ;
22901: END
// export function uprav_zivoty_arabskych_budov ; begin
22902: LD_INT 0
22904: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
22905: LD_INT 11
22907: PPUSH
22908: LD_EXP 52
22912: PUSH
22913: LD_OWVAR 67
22917: ARRAY
22918: PPUSH
22919: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
22923: LD_INT 9
22925: PPUSH
22926: LD_EXP 52
22930: PUSH
22931: LD_OWVAR 67
22935: ARRAY
22936: PPUSH
22937: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
22941: LD_INT 109
22943: PPUSH
22944: LD_EXP 52
22948: PUSH
22949: LD_OWVAR 67
22953: ARRAY
22954: PPUSH
22955: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
22959: LD_INT 72
22961: PPUSH
22962: LD_EXP 52
22966: PUSH
22967: LD_OWVAR 67
22971: ARRAY
22972: PPUSH
22973: CALL_OW 234
// end ;
22977: LD_VAR 0 1
22981: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
22982: LD_INT 26
22984: PPUSH
22985: LD_INT 22
22987: PUSH
22988: LD_EXP 1
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: PPUSH
23000: CALL_OW 70
23004: IFFALSE 23073
23006: GO 23008
23008: DISABLE
23009: LD_INT 0
23011: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23012: LD_ADDR_VAR 0 1
23016: PUSH
23017: LD_INT 26
23019: PPUSH
23020: LD_INT 22
23022: PUSH
23023: LD_EXP 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: PPUSH
23035: CALL_OW 70
23039: ST_TO_ADDR
// if pom > 0 then
23040: LD_VAR 0 1
23044: PUSH
23045: LD_INT 0
23047: GREATER
23048: IFFALSE 23073
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23050: LD_INT 114
23052: PUSH
23053: LD_INT 115
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: LD_VAR 0 1
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: PPUSH
23069: CALL_OW 175
// end ;
23073: PPOPN 1
23075: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23076: LD_INT 112
23078: PPUSH
23079: CALL_OW 256
23083: PUSH
23084: LD_INT 700
23086: LESS
23087: IFFALSE 23335
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
23095: PPUSH
23096: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23097: LD_INT 118
23099: PPUSH
23100: CALL_OW 302
23104: PUSH
23105: LD_INT 121
23107: PPUSH
23108: CALL_OW 302
23112: OR
23113: NOT
23114: IFFALSE 23118
// exit ;
23116: GO 23335
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23118: LD_ADDR_VAR 0 1
23122: PUSH
23123: LD_INT 22
23125: PUSH
23126: LD_EXP 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: LD_INT 21
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 21
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: ST_TO_ADDR
// for i in pom do
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_VAR 0 1
23181: PUSH
23182: FOR_IN
23183: IFFALSE 23218
// if Attacks ( i ) = A2_bu1 then
23185: LD_VAR 0 2
23189: PPUSH
23190: CALL_OW 320
23194: PUSH
23195: LD_INT 112
23197: EQUAL
23198: IFFALSE 23216
// atakers = atakers ^ i ;
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_VAR 0 3
23209: PUSH
23210: LD_VAR 0 2
23214: ADD
23215: ST_TO_ADDR
23216: GO 23182
23218: POP
23219: POP
// if atakers > 0 then
23220: LD_VAR 0 3
23224: PUSH
23225: LD_INT 0
23227: GREATER
23228: IFFALSE 23255
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23230: LD_INT 118
23232: PUSH
23233: LD_INT 121
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PPUSH
23240: LD_VAR 0 3
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PPUSH
23249: CALL_OW 175
23253: GO 23316
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23255: LD_ADDR_VAR 0 1
23259: PUSH
23260: LD_INT 37
23262: PPUSH
23263: LD_INT 22
23265: PUSH
23266: LD_EXP 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: PPUSH
23278: CALL_OW 70
23282: ST_TO_ADDR
// if pom > 0 then
23283: LD_VAR 0 1
23287: PUSH
23288: LD_INT 0
23290: GREATER
23291: IFFALSE 23316
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23293: LD_INT 118
23295: PUSH
23296: LD_INT 121
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PPUSH
23303: LD_VAR 0 1
23307: PUSH
23308: LD_INT 1
23310: ARRAY
23311: PPUSH
23312: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23316: LD_INT 118
23318: PPUSH
23319: CALL_OW 302
23323: PUSH
23324: LD_INT 121
23326: PPUSH
23327: CALL_OW 302
23331: OR
23332: IFFALSE 23335
// enable ;
23334: ENABLE
// end ;
23335: PPOPN 3
23337: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23338: LD_INT 47
23340: PPUSH
23341: CALL_OW 256
23345: PUSH
23346: LD_INT 700
23348: LESS
23349: IFFALSE 23597
23351: GO 23353
23353: DISABLE
23354: LD_INT 0
23356: PPUSH
23357: PPUSH
23358: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23359: LD_INT 119
23361: PPUSH
23362: CALL_OW 302
23366: PUSH
23367: LD_INT 120
23369: PPUSH
23370: CALL_OW 302
23374: OR
23375: NOT
23376: IFFALSE 23380
// exit ;
23378: GO 23597
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23380: LD_ADDR_VAR 0 1
23384: PUSH
23385: LD_INT 22
23387: PUSH
23388: LD_EXP 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 21
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 21
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PPUSH
23429: CALL_OW 69
23433: ST_TO_ADDR
// for i in pom do
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_VAR 0 1
23443: PUSH
23444: FOR_IN
23445: IFFALSE 23480
// if Attacks ( i ) = A2_bu3 then
23447: LD_VAR 0 2
23451: PPUSH
23452: CALL_OW 320
23456: PUSH
23457: LD_INT 47
23459: EQUAL
23460: IFFALSE 23478
// atakers = atakers ^ i ;
23462: LD_ADDR_VAR 0 3
23466: PUSH
23467: LD_VAR 0 3
23471: PUSH
23472: LD_VAR 0 2
23476: ADD
23477: ST_TO_ADDR
23478: GO 23444
23480: POP
23481: POP
// if atakers > 0 then
23482: LD_VAR 0 3
23486: PUSH
23487: LD_INT 0
23489: GREATER
23490: IFFALSE 23517
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
23492: LD_INT 119
23494: PUSH
23495: LD_INT 120
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PPUSH
23502: LD_VAR 0 3
23506: PUSH
23507: LD_INT 1
23509: ARRAY
23510: PPUSH
23511: CALL_OW 175
23515: GO 23578
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23517: LD_ADDR_VAR 0 1
23521: PUSH
23522: LD_INT 37
23524: PPUSH
23525: LD_INT 22
23527: PUSH
23528: LD_EXP 1
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: EMPTY
23538: LIST
23539: PPUSH
23540: CALL_OW 70
23544: ST_TO_ADDR
// if pom > 1 then
23545: LD_VAR 0 1
23549: PUSH
23550: LD_INT 1
23552: GREATER
23553: IFFALSE 23578
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
23555: LD_INT 119
23557: PUSH
23558: LD_INT 120
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PPUSH
23565: LD_LOC 35
23569: PUSH
23570: LD_INT 2
23572: ARRAY
23573: PPUSH
23574: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23578: LD_INT 118
23580: PPUSH
23581: CALL_OW 302
23585: PUSH
23586: LD_INT 121
23588: PPUSH
23589: CALL_OW 302
23593: OR
23594: IFFALSE 23597
// enable ;
23596: ENABLE
// end ;
23597: PPOPN 3
23599: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
23600: LD_INT 0
23602: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
23603: LD_ADDR_VAR 0 3
23607: PUSH
23608: LD_EXP 10
23612: ST_TO_ADDR
// case un of a [ 1 ] :
23613: LD_VAR 0 2
23617: PUSH
23618: LD_VAR 0 3
23622: PUSH
23623: LD_INT 1
23625: ARRAY
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23647
23632: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
23633: LD_VAR 0 2
23637: PPUSH
23638: LD_INT 5
23640: PPUSH
23641: CALL 24149 0 2
23645: GO 24146
23647: LD_VAR 0 3
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: DOUBLE
23656: EQUAL
23657: IFTRUE 23661
23659: GO 23676
23661: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
23662: LD_VAR 0 2
23666: PPUSH
23667: LD_INT 6
23669: PPUSH
23670: CALL 24149 0 2
23674: GO 24146
23676: LD_VAR 0 3
23680: PUSH
23681: LD_INT 3
23683: ARRAY
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23705
23690: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_INT 7
23698: PPUSH
23699: CALL 24149 0 2
23703: GO 24146
23705: LD_VAR 0 3
23709: PUSH
23710: LD_INT 3
23712: ARRAY
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23734
23719: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
23720: LD_VAR 0 2
23724: PPUSH
23725: LD_INT 8
23727: PPUSH
23728: CALL 24149 0 2
23732: GO 24146
23734: LD_VAR 0 3
23738: PUSH
23739: LD_INT 3
23741: ARRAY
23742: DOUBLE
23743: EQUAL
23744: IFTRUE 23748
23746: GO 23763
23748: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
23749: LD_VAR 0 2
23753: PPUSH
23754: LD_INT 9
23756: PPUSH
23757: CALL 24149 0 2
23761: GO 24146
23763: LD_VAR 0 3
23767: PUSH
23768: LD_INT 3
23770: ARRAY
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 23792
23777: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
23778: LD_VAR 0 2
23782: PPUSH
23783: LD_INT 10
23785: PPUSH
23786: CALL 24149 0 2
23790: GO 24146
23792: LD_VAR 0 3
23796: PUSH
23797: LD_INT 17
23799: ARRAY
23800: DOUBLE
23801: EQUAL
23802: IFTRUE 23806
23804: GO 23821
23806: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
23807: LD_VAR 0 2
23811: PPUSH
23812: LD_INT 11
23814: PPUSH
23815: CALL 24149 0 2
23819: GO 24146
23821: LD_VAR 0 3
23825: PUSH
23826: LD_INT 18
23828: ARRAY
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23850
23835: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
23836: LD_VAR 0 2
23840: PPUSH
23841: LD_INT 12
23843: PPUSH
23844: CALL 24149 0 2
23848: GO 24146
23850: LD_VAR 0 3
23854: PUSH
23855: LD_INT 16
23857: ARRAY
23858: DOUBLE
23859: EQUAL
23860: IFTRUE 23864
23862: GO 23879
23864: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
23865: LD_VAR 0 2
23869: PPUSH
23870: LD_INT 13
23872: PPUSH
23873: CALL 24149 0 2
23877: GO 24146
23879: LD_VAR 0 3
23883: PUSH
23884: LD_INT 7
23886: ARRAY
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23908
23893: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_INT 14
23901: PPUSH
23902: CALL 24149 0 2
23906: GO 24146
23908: LD_VAR 0 3
23912: PUSH
23913: LD_INT 8
23915: ARRAY
23916: DOUBLE
23917: EQUAL
23918: IFTRUE 23922
23920: GO 23937
23922: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
23923: LD_VAR 0 2
23927: PPUSH
23928: LD_INT 15
23930: PPUSH
23931: CALL 24149 0 2
23935: GO 24146
23937: LD_VAR 0 3
23941: PUSH
23942: LD_INT 9
23944: ARRAY
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23966
23951: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_INT 16
23959: PPUSH
23960: CALL 24149 0 2
23964: GO 24146
23966: LD_VAR 0 3
23970: PUSH
23971: LD_INT 10
23973: ARRAY
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 23995
23980: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
23981: LD_VAR 0 2
23985: PPUSH
23986: LD_INT 17
23988: PPUSH
23989: CALL 24149 0 2
23993: GO 24146
23995: LD_VAR 0 3
23999: PUSH
24000: LD_INT 21
24002: ARRAY
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24024
24009: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24010: LD_VAR 0 2
24014: PPUSH
24015: LD_INT 18
24017: PPUSH
24018: CALL 24149 0 2
24022: GO 24146
24024: LD_VAR 0 3
24028: PUSH
24029: LD_INT 22
24031: ARRAY
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24053
24038: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24039: LD_VAR 0 2
24043: PPUSH
24044: LD_INT 19
24046: PPUSH
24047: CALL 24149 0 2
24051: GO 24146
24053: LD_INT 108
24055: DOUBLE
24056: EQUAL
24057: IFTRUE 24061
24059: GO 24076
24061: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24062: LD_VAR 0 2
24066: PPUSH
24067: LD_INT 3
24069: PPUSH
24070: CALL 24256 0 2
24074: GO 24146
24076: LD_INT 107
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24099
24084: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24085: LD_VAR 0 2
24089: PPUSH
24090: LD_INT 4
24092: PPUSH
24093: CALL 24256 0 2
24097: GO 24146
24099: LD_INT 117
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24122
24107: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24108: LD_VAR 0 2
24112: PPUSH
24113: LD_INT 1
24115: PPUSH
24116: CALL 24256 0 2
24120: GO 24146
24122: LD_INT 116
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24145
24130: POP
// posli_unit2 ( un , 2 ) ; end ;
24131: LD_VAR 0 2
24135: PPUSH
24136: LD_INT 2
24138: PPUSH
24139: CALL 24256 0 2
24143: GO 24146
24145: POP
// end ;
24146: PPOPN 3
24148: END
// function posli_unit ( un , cz ) ; var a ; begin
24149: LD_INT 0
24151: PPUSH
24152: PPUSH
// a = uklizejici_mista [ cz ] ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_LOC 36
24162: PUSH
24163: LD_VAR 0 2
24167: ARRAY
24168: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24169: LD_ADDR_OWVAR 48
24173: PUSH
24174: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24176: PUSH
24177: LD_VAR 0 4
24181: PUSH
24182: LD_VAR 0 1
24186: PUSH
24187: LD_VAR 0 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: ST_TO_ADDR
// wait ( 3 ) ;
24198: LD_INT 3
24200: PPUSH
24201: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24205: LD_VAR 0 1
24209: PPUSH
24210: LD_VAR 0 4
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: CALL_OW 120
// if a [ 2 ] then
24223: LD_VAR 0 4
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: IFFALSE 24251
// AddComChangeProfession ( un , a [ 3 ] ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_VAR 0 4
24242: PUSH
24243: LD_INT 3
24245: ARRAY
24246: PPUSH
24247: CALL_OW 183
// end ;
24251: LD_VAR 0 3
24255: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24256: LD_INT 0
24258: PPUSH
24259: PPUSH
// a = uklizejici_mista [ cz ] ;
24260: LD_ADDR_VAR 0 4
24264: PUSH
24265: LD_LOC 36
24269: PUSH
24270: LD_VAR 0 2
24274: ARRAY
24275: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24276: LD_ADDR_OWVAR 48
24280: PUSH
24281: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24283: PUSH
24284: LD_VAR 0 4
24288: PUSH
24289: LD_VAR 0 1
24293: PUSH
24294: LD_VAR 0 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24305: LD_VAR 0 1
24309: PPUSH
24310: LD_VAR 0 4
24314: PUSH
24315: LD_INT 1
24317: ARRAY
24318: PPUSH
24319: LD_VAR 0 4
24323: PUSH
24324: LD_INT 2
24326: ARRAY
24327: PPUSH
24328: CALL_OW 111
// end ;
24332: LD_VAR 0 3
24336: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24337: LD_VAR 0 1
24341: PUSH
24342: LD_INT 1
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24360
24350: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24351: LD_INT 1
24353: PPUSH
24354: CALL 24383 0 1
24358: GO 24379
24360: LD_INT 2
24362: DOUBLE
24363: EQUAL
24364: IFTRUE 24368
24366: GO 24378
24368: POP
// zabijeni_1_baze ( 2 ) ; end ;
24369: LD_INT 2
24371: PPUSH
24372: CALL 24383 0 1
24376: GO 24379
24378: POP
// enable ;
24379: ENABLE
// end ;
24380: PPOPN 2
24382: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24383: LD_INT 0
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
// case jj of 1 :
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 1
24396: DOUBLE
24397: EQUAL
24398: IFTRUE 24402
24400: GO 24415
24402: POP
// jedn = Ar_utok3_LIST ; 2 :
24403: LD_ADDR_VAR 0 5
24407: PUSH
24408: LD_EXP 14
24412: ST_TO_ADDR
24413: GO 24437
24415: LD_INT 2
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24436
24423: POP
// jedn = Ar_utok2_LIST ; end ;
24424: LD_ADDR_VAR 0 5
24428: PUSH
24429: LD_EXP 13
24433: ST_TO_ADDR
24434: GO 24437
24436: POP
// for i in jedn do
24437: LD_ADDR_VAR 0 4
24441: PUSH
24442: LD_VAR 0 5
24446: PUSH
24447: FOR_IN
24448: IFFALSE 24488
// if GetClass ( i ) = class_engineer then
24450: LD_VAR 0 4
24454: PPUSH
24455: CALL_OW 257
24459: PUSH
24460: LD_INT 2
24462: EQUAL
24463: IFFALSE 24486
// if IsOK ( A1_dep ) then
24465: LD_INT 4
24467: PPUSH
24468: CALL_OW 302
24472: IFFALSE 24486
// ComEnterUnit ( i , A1_dep ) ;
24474: LD_VAR 0 4
24478: PPUSH
24479: LD_INT 4
24481: PPUSH
24482: CALL_OW 120
24486: GO 24447
24488: POP
24489: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: LD_INT 3
24497: PPUSH
24498: LD_INT 22
24500: PUSH
24501: LD_EXP 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: PPUSH
24513: CALL_OW 70
24517: ST_TO_ADDR
// for i in pom do
24518: LD_ADDR_VAR 0 4
24522: PUSH
24523: LD_VAR 0 3
24527: PUSH
24528: FOR_IN
24529: IFFALSE 24547
// PriorityAttack ( Arabi , i ) ;
24531: LD_EXP 3
24535: PPUSH
24536: LD_VAR 0 4
24540: PPUSH
24541: CALL_OW 470
24545: GO 24528
24547: POP
24548: POP
// enable ( 995 ) ;
24549: LD_INT 995
24551: ENABLE_MARKED
// end ;
24552: LD_VAR 0 2
24556: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
24557: GO 24559
24559: DISABLE
24560: LD_INT 0
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
24566: LD_ADDR_VAR 0 1
24570: PUSH
24571: LD_INT 3
24573: PPUSH
24574: LD_INT 22
24576: PUSH
24577: LD_EXP 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 21
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 53
24611: PUSH
24612: EMPTY
24613: LIST
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PPUSH
24628: CALL_OW 70
24632: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 3
24640: PPUSH
24641: LD_INT 22
24643: PUSH
24644: LD_EXP 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: PPUSH
24656: CALL_OW 70
24660: ST_TO_ADDR
// pomat = pom1 diff pom ;
24661: LD_ADDR_VAR 0 4
24665: PUSH
24666: LD_VAR 0 2
24670: PUSH
24671: LD_VAR 0 1
24675: DIFF
24676: ST_TO_ADDR
// if pomat = 0 then
24677: LD_VAR 0 4
24681: PUSH
24682: LD_INT 0
24684: EQUAL
24685: IFFALSE 24720
// for i in pom1 do
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_VAR 0 2
24696: PUSH
24697: FOR_IN
24698: IFFALSE 24716
// PriorityAttack ( Arabi , i ) else
24700: LD_EXP 3
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: CALL_OW 470
24714: GO 24697
24716: POP
24717: POP
24718: GO 24782
// begin for i in pom do
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: LD_VAR 0 1
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24749
// PriorityAttack ( Arabi , i ) ;
24733: LD_EXP 3
24737: PPUSH
24738: LD_VAR 0 3
24742: PPUSH
24743: CALL_OW 470
24747: GO 24730
24749: POP
24750: POP
// for i in pomat do
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_VAR 0 4
24760: PUSH
24761: FOR_IN
24762: IFFALSE 24780
// NormalAttack ( Arabi , i ) ;
24764: LD_EXP 3
24768: PPUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: CALL_OW 472
24778: GO 24761
24780: POP
24781: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
24782: LD_VAR 0 1
24786: PUSH
24787: LD_INT 0
24789: NONEQUAL
24790: PUSH
24791: LD_INT 3
24793: PPUSH
24794: LD_INT 22
24796: PUSH
24797: LD_EXP 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: PPUSH
24809: CALL_OW 70
24813: PUSH
24814: LD_INT 0
24816: NONEQUAL
24817: AND
24818: IFFALSE 24821
// enable ;
24820: ENABLE
// end ; end_of_file
24821: PPOPN 4
24823: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
24824: LD_INT 0
24826: PPUSH
24827: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
24828: LD_ADDR_EXP 47
24832: PUSH
24833: LD_INT 21000
24835: PUSH
24836: LD_INT 15750
24838: PUSH
24839: LD_INT 11550
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
24847: LD_ADDR_EXP 53
24851: PUSH
24852: LD_INT 21000
24854: PUSH
24855: LD_INT 16800
24857: PUSH
24858: LD_INT 12600
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
24866: LD_ADDR_EXP 48
24870: PUSH
24871: LD_INT 4
24873: PUSH
24874: LD_INT 6
24876: PUSH
24877: LD_INT 8
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
24885: LD_ADDR_EXP 49
24889: PUSH
24890: LD_INT 336000
24892: PUSH
24893: LD_INT 315000
24895: PUSH
24896: LD_INT 294000
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
24904: LD_ADDR_EXP 55
24908: PUSH
24909: LD_INT 120
24911: PUSH
24912: LD_INT 100
24914: PUSH
24915: LD_INT 90
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
24923: LD_ADDR_EXP 56
24927: PUSH
24928: LD_INT 100
24930: PUSH
24931: LD_INT 90
24933: PUSH
24934: LD_INT 80
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
24942: LD_ADDR_EXP 50
24946: PUSH
24947: LD_INT 55
24949: PUSH
24950: LD_INT 40
24952: PUSH
24953: LD_INT 30
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
24961: LD_ADDR_EXP 52
24965: PUSH
24966: LD_INT 700
24968: PUSH
24969: LD_INT 850
24971: PUSH
24972: LD_INT 1000
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
24980: LD_ADDR_EXP 54
24984: PUSH
24985: LD_INT 21000
24987: PUSH
24988: LD_INT 16800
24990: PUSH
24991: LD_INT 10500
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: LIST
24998: ST_TO_ADDR
// Timecounter = 0 ;
24999: LD_ADDR_EXP 57
25003: PUSH
25004: LD_INT 0
25006: ST_TO_ADDR
// end ;
25007: LD_VAR 0 1
25011: RET
// export cas ; every 0 0$10 do var pom ;
25012: GO 25014
25014: DISABLE
25015: LD_INT 0
25017: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25018: LD_EXP 58
25022: PUSH
25023: LD_INT 3
25025: ARRAY
25026: PUSH
25027: LD_INT 10
25029: PLUS
25030: PUSH
25031: LD_INT 60
25033: EQUAL
25034: IFFALSE 25070
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25036: LD_ADDR_EXP 58
25040: PUSH
25041: LD_EXP 58
25045: PUSH
25046: LD_INT 1
25048: ARRAY
25049: PUSH
25050: LD_INT 1
25052: PLUS
25053: PUSH
25054: LD_EXP 58
25058: PUSH
25059: LD_INT 2
25061: ARRAY
25062: ADD
25063: PUSH
25064: LD_INT 0
25066: ADD
25067: ST_TO_ADDR
25068: GO 25108
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25070: LD_ADDR_EXP 58
25074: PUSH
25075: LD_EXP 58
25079: PUSH
25080: LD_INT 1
25082: ARRAY
25083: PUSH
25084: LD_EXP 58
25088: PUSH
25089: LD_INT 2
25091: ARRAY
25092: ADD
25093: PUSH
25094: LD_EXP 58
25098: PUSH
25099: LD_INT 3
25101: ARRAY
25102: PUSH
25103: LD_INT 10
25105: PLUS
25106: ADD
25107: ST_TO_ADDR
// debug_strings = [ cas ] ;
25108: LD_ADDR_OWVAR 48
25112: PUSH
25113: LD_EXP 58
25117: PUSH
25118: EMPTY
25119: LIST
25120: ST_TO_ADDR
// enable ;
25121: ENABLE
// end ;
25122: PPOPN 1
25124: END
// every 1 1$0 do
25125: GO 25127
25127: DISABLE
// begin Timecounter = Timecounter + 1 ;
25128: LD_ADDR_EXP 57
25132: PUSH
25133: LD_EXP 57
25137: PUSH
25138: LD_INT 1
25140: PLUS
25141: ST_TO_ADDR
// enable ;
25142: ENABLE
// end ;
25143: END
