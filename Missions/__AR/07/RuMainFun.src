// Russian Main Function
Export Function PrepareRussian;
begin
RuInitVar; // sta³e
SetRuBNames;
PrepareMorozovStaff;

// baza niebieska
PrepareBase(ru_west_dep, ru6_spawn, Difficulty);
SetResourceType(GetBase(ru_west_dep), mat_cans, [2000, 1500, 1200][Difficulty]);
SetResourceType(GetBase(ru_west_dep), mat_oil,  [400, 500, 500][Difficulty]);

// baza zielona
PrepareBase(ru_east_dep, ru7_spawn, Difficulty);
SetResourceType(GetBase(ru_east_dep), mat_cans, [2000, 1500, 1200][Difficulty]);
SetResourceType(GetBase(ru_east_dep), mat_oil,  [400, 500, 500][Difficulty]);

// baza niebieski
PrepareBase(ru_north_dep, ru1_spawn, 2);
SetResourceType(GetBase(ru_north_dep), mat_cans, [2000, 1500, 1200][Difficulty]);
SetResourceType(GetBase(ru_north_dep), mat_oil,  [400, 500, 500][Difficulty]);

// baza czerwona (LENIN)
PrepareBase(ru_m2_dep, ru3_spawn, 0);
PrepareBase(ru_m3_dep, ru3_spawn, 0);
PrepareBase(ru_main_dep, ru3_spawn, 5-Difficulty);
SetResourceType(GetBase(ru_main_dep), mat_cans, [2000, 1500, 1200][Difficulty]);
SetResourceType(GetBase(ru_main_dep), mat_oil,  [400, 500, 500][Difficulty]);
End;


Export Function RuInitVar;
begin
ru6_blist := [];
ru6_bweap := [];
ru7_blist := [];
ru7_bweap := [];
ru1_blist := [];
ru1_bweap := [];
ru3_blist := [];
ru3_bweap := [];
End;


Export Function SetRuBNames;
begin
SetBName(ru_main_dep, 'lenin');
SetBName(ru_east_dep, 'dzierz');
SetBName(ru_north_dep, 'borodin');
SetBName(ru_west_dep, 'bucharin');
End;


Export morozov, ru_staff, officer1, officer2;
Export Function PrepareMorozovStaff;
begin
uc_side := 3;
uc_nation := 3;


ru_staff := [];

// Morozov
{hc_gallery := 'ru';
hc_face_number := 32;
hc_name := 'Gen. P. A. Morozov';
hc_skills := [9, 6, 8, 4];
hc_class := 1;
hc_sex := sex_male;
hc_attr := [10, 10];

morozov := CreateHuman;}
morozov := NewCharacter('Morozov');
PlaceHumanInUnit(morozov, ru_m2_dep);
ru_staff := ru_staff ^ morozov;


// Officer 1
hc_gallery := ''; // mo¿e w przyszlosci
hc_name := 'Yuri Kowass';
hc_skills := [8, 3, 1, 4];
hc_attr := [9, 11];

officer1 := CreateHuman;
PlaceHumanInUnit(officer1, ru_m2_dep);
ru_staff := ru_staff ^ officer1;

// Officer 2
hc_gallery := ''; // mo¿e w przyszlosci
hc_name := 'Wasilij Zaicev';
hc_class := class_sniper;
hc_skills := [10, 5, 3, 1];
hc_attr := [12, 12];

officer2 := CreateHuman;
PlaceHumanInUnit(officer2, ru_m2_dep);
ru_staff := ru_staff ^ officer1;
End;


//  &&&&
Export Function PrepareBase(base, area, power);
var side, c, d, i, p, list, skill, un, veh, towers, pep, crane_allow, hg_allow, vehs;
begin

     side := GetSide(base);

     // check power
        Case power of
        0: begin
           pep := [];
           //skill := 5;
           vehs := 0;
           crane_allow := false;
           hg_allow := false;
           end;

        1: begin
           pep := [class_soldier, class_engineer, class_scientistic, class_bazooker];
           //skill := 6;
           vehs := 1;
           crane_allow := false;
           hg_allow := false;
           end;
        2: begin
           pep := [class_soldier, class_engineer, class_mechanic, class_scientistic, class_bazooker];
           //skill := 7;
           vehs := 3;
           crane_allow := false;
           hg_allow := true;
           end;
        3: begin
           pep := [class_soldier, class_engineer, class_mechanic, class_scientistic, class_bazooker];
           //skill := 8;
           vehs := 5;
           crane_allow := true;
           hg_allow := true;
           end;

        end;

        // SKILL
        skill := [4,5,6][Difficulty];


     // weapon list
        Case Difficulty of
        1: begin
           if hg_allow then
              list := [ru_gatling_gun, ru_gun, ru_rocket_launcher, ru_heavy_gun]
               else
                list := [ru_gatling_gun, ru_gun, ru_rocket_launcher];
           end;
        2: begin
           if hg_allow then
              list := [ru_gatling_gun, ru_gun, ru_rocket_launcher, ru_rocket_launcher, ru_heavy_gun]
               else
                list := [ru_gatling_gun, ru_gun, ru_rocket_launcher, ru_rocket_launcher];
           end;
        3: begin
           if hg_allow then
              list := [ru_heavy_gun, ru_rocket_launcher, ru_rocket_launcher, ru_heavy_gun]
               else
                list := [ru_gatling_gun, ru_gun, ru_rocket_launcher, ru_rocket_launcher];
           end;

        end;

     // place weapon on towers
        PlaceWeaponOnTowers(base, list);

     // people
        uc_side := side;
        uc_nation := nation_russian;
        
        towers := FilterAllUnits([[f_side, side], [f_btype, b_bunker]]);

        for i = 1 to towers do
            PlaceHumanInUnit(CreateHumanWithClass(1, skill), towers[i]);

     
        // p := 1;
        
        if GetSide(base) = 3 or GetSide(base) = 6 then
           c := [2, 3, 4][Difficulty]
            else
             c := [1, 2, 3][Difficulty];

        for p = 1 to pep do
            begin
            if p = 1 or p > 4 then
               d := 1
                else
                 d := 0;

        for i = 1 to c+d do
            begin
            un := CreateHumanWithClass(pep[p], skill);
            PlaceUnitArea(un, area, false);
            end;

            end;

        if crane_allow then
           begin
           vc_chassis := ru_medium_tracked;
           vc_engine  := engine_combustion;
           vc_control := control_manual;
           vc_weapon  := ru_crane;

           for i = 1 to Difficulty-1 do
           begin
           veh := CreateVehicle;
           PlaceUnitArea(veh, area, false);
           end;

           end;

        if vehs then
           for i = 1 to vehs do
           begin
           vc_engine  := engine_combustion;
           vc_control := control_manual;
           vc_weapon  := list[Rand(1, list)];

           if vc_weapon = ru_heavy_gun then
              vc_chassis := ru_heavy_tracked
               else
              vc_chassis := [ru_medium_tracked, ru_medium_wheeled, ru_heavy_tracked][Rand(1,3)];

           veh := CreateVehicle;
           PlaceUnitArea(veh, area, false);
           end;

           


End;


Every 0$01 do
var filter, i;
begin

     filter := FilterAllUnits([f_type, unit_building]);

     for i in filter do
         SetBLevel(i, [5, 6, 7][Difficulty]);

End;



Export Function ProtectArea(un, base);
var range, enemy;
begin

     if un = false then
        result := false
         else
          begin
           range := [41, 43, 45][Difficulty];

           if FilterAllUnits([[f_enemy, GetSide(un)], [f_distxy, GetX(base), GetY(base), range]]) > 0 then
              begin
              enemy := FilterAllUnits([[f_enemy, GetSide(un)], [f_distxy, GetX(base), GetY(base), range]]);

              ComAttackUnit(un, NearestUnitToUnit(enemy, un));
              end
               else
                if GetDistUnits(un, base) > 8 then
                   ComMoveXY(un, GetX(base)-2, GetY(base)-2);

          end;


End;


Export jaszyn;
Export Function PrepareJaszyn;
begin
uc_side := 3;
uc_nation := 3;

jaszyn := NewCharacter('Yashyn');
End;



Export Function AddAttack(val);
var veh, un, i;
begin
uc_side := 4;
uc_nation := 3;


for i = 1 to val do
begin

vc_chassis := ru_medium_tracked;
vc_engine := engine_combustion;
vc_control := control_manual;
vc_weapon := [ru_gatling_gun, ru_gun, ru_rocket_launcher][Rand(1,3)];

veh := CreateVehicle;
un := CreateHumanWithClass(3, [4,5,6][Difficulty]);

SetDir(veh, 2);
PlaceUnitArea(veh, ru_north_spawn, false);
PlaceHumanInUnit(un, veh);
end;

End;


Every 0$01 do
var i, enemy, filter;
begin
enable;

filter := FilterAllUnits([f_side, 4]);
enemy := FilterAllUnits([f_side, 2]);

if filter > 0 then
   for i = 1 to filter do
       ComAttackUnit(filter[i], NearestUnitToUnit(enemy, filter[i]));

End;


Export Function AddUnits(val, area);
var i;
begin
uc_side := 3;
uc_nation := 3;

for i = 1 to val do
PlaceUnitArea(CreateHumanWithClass(class_bazooker, [6,7,8][Difficulty]), area, false);

for i = 1 to 3 do
PlaceUnitArea(CreateHumanWithClass(class_mechanic, [6,7,8][Difficulty]), area, false);


End;


Every 0$30 trigger ru_east_dep = false or GetSide(ru_east_dep) <> 7 do
AddUnits([6,8,9][Difficulty], ru3_spawn);