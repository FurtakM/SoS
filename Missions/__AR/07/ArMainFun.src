// Ar
// Load Units
Export Louis, Martin, Karla, Dwein, Joachim, Olaf,
       Mmark, Herczeg, Mia, Kantor, Ronn, Gunther,
       ot1, ot2, ot3, ot4, ot5, ot6, ot7;
Export AllPeo;
Export Function LoadUnits;
var list, i, p, un, driver, filter;
begin


    AllPeo := [];

    uc_side := 2;
    uc_nation := 2;

    Louis := CreateCharacter('Louis');
    AllPeo = AllPeo ^ Louis;


    If TestCharacters('Martin_06') then
    begin
    Martin := CreateCharacter('Martin_06');
    AllPeo = AllPeo ^ Martin;
    end else
    begin
    Martin = false;
    end;

    If TestCharacters('Karla_06') then
    begin
    Karla := CreateCharacter('Karla_06');
    AllPeo = AllPeo ^ Karla;
    end else
    begin
    Karla = false;
    end;

    If TestCharacters('Mmark_06') then
    begin
    Mmark := CreateCharacter('Mmark_06');
    AllPeo = AllPeo ^ Mmark;
    end else
    begin
    Mmark = false;
    end;

    If TestCharacters('Joachim_06') then
    begin
    Joachim := CreateCharacter('Joachim_06');
    AllPeo = AllPeo ^ Joachim;
    end else
    begin
    Joachim = false;
    end;

    If TestCharacters('Olaf_06') then
    begin
    Olaf:= CreateCharacter('Olaf_06');
    AllPeo = AllPeo ^ Olaf;
    end else
    begin
    Olaf = false;
    end;

    If TestCharacters('Dwein_06') then
    begin
    Dwein := CreateCharacter('Dwein_06');
    AllPeo = AllPeo ^ Dwein;
    end else
    begin
    Dwein = false;
    end;


    If TestCharacters('Herczeg_06') then
    begin
    Herczeg := CreateCharacter('Herczeg_06');
    AllPeo = AllPeo ^ Herczeg;
    end else
    begin
    Herczeg = false;
    end;


    If TestCharacters('Mia_06') then
    begin
    Mia := CreateCharacter('Mia_06');
    AllPeo = AllPeo ^ Mia;
    end else
    begin
    Mia = false;
    end;

    If TestCharacters('Gunther_06') then
    begin
    Gunther := CreateCharacter('Gunther_06');
    AllPeo = AllPeo ^ Gunther;
    end else
    begin
    Gunther = false;
    end;


    If TestCharacters('Kantor_06') then
    begin
    Kantor := CreateCharacter('Kantor_06');
    AllPeo = AllPeo ^ Kantor;
    end else
    begin
    Kantor = false;
    end;


    If TestCharacters('Ronn_06') then
    begin
    Ronn := CreateCharacter('Ronn_06');
    AllPeo = AllPeo ^ Ronn;
    end;


    // load other's
    If TestCharacters('ot1_06') then
    begin
    ot1 := CreateCharacter('ot1_06');
    AllPeo = AllPeo ^ ot1;
    end else
    begin
    ot1 = false;
    end;

    If TestCharacters('ot2_06') then
    begin
    ot2 := CreateCharacter('ot2_06');
    AllPeo = AllPeo ^ ot2;
    end else
    begin
    ot2 = false;
    end;

    If TestCharacters('ot3_06') then
    begin
    ot3 := CreateCharacter('ot3_06');
    AllPeo = AllPeo ^ ot3;
    end else
    begin
    ot3 = false;
    end;

    If TestCharacters('ot4_06') then
    begin
    ot4 := CreateCharacter('ot4_06');
    AllPeo = AllPeo ^ ot4;
    end else
    begin
    ot4 = false;
    end;

    If TestCharacters('ot5_06') then
    begin
    ot5 := CreateCharacter('ot5_06');
    AllPeo = AllPeo ^ ot5;
    end else
    begin
    ot5 = false;
    end;

    If TestCharacters('ot6_06') then
    begin
    ot6 := CreateCharacter('ot6_06');
    AllPeo = AllPeo ^ ot6;
    end else
    begin
    ot6 = false;
    end;

    If TestCharacters('ot7_06') then
    begin
    ot7 := CreateCharacter('ot7_06');
    AllPeo = AllPeo ^ ot7;
    end else
    begin
    ot7 = false;
    end;


  // MORTAR
    if LoadVariable('mortar', 0) > 0 then
       begin
       SetTech(tech_mortar, 2, state_researched);
       AllPeo := CharacterSelection('', AllPeo, AllPeo,[sel_change_class, sel_changeable, sel_not_hired]^AllPeo, [class_soldier, class_mechanic, [class_engineer, 1], [class_scientistic, 1], class_mortar]);
       end else
         AllPeo := CharacterSelection('', AllPeo, AllPeo,[sel_change_class, sel_changeable, sel_not_hired]^AllPeo, [class_soldier, class_mechanic, [class_engineer, 1], [class_scientistic, 1], [class_mortar, 0]]);
   

    list := AreaToList(player_spawn, 0);
    p := 1;

    if LoadVariable('control_tower', 0) > 0 then
       begin
       vc_chassis := ar_half_tracked;
       vc_engine := engine_solar;
       vc_control := control_manual;
       vc_weapon := ar_control_tower;
       PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
       p := p + 1;

       CreateRocketXY(2, 2, list[1][p], list[2][p], 0);
       p := p + 1;
       CreateRocketXY(2, 2, list[1][p], list[2][p], 0);
       p := p + 1;

       if UnitFilter(AllPeo, [f_class, 3]) > 0 then
          PlaceHumanInUnit(UnitFilter(AllPeo, [f_class, 3])[1], FilterAllUnits([[f_side, 2], [f_weapon, ar_control_tower]])[1])
           else
            begin
            driver := SortListByListAsc([AllPeo], [GetSkill(AllPeo[1], 3), GetSkill(AllPeo[2], 3), GetSkill(AllPeo[3], 3), GetSkill(AllPeo[4], 3), GetSkill(AllPeo[5], 3), GetSkill(AllPeo[6], 3), GetSkill(AllPeo[7], 3)]);
            SetClass(driver[1], 3);
            PlaceHumanInUnit(driver[1], FilterAllUnits([[f_side, 2], [f_weapon, ar_control_tower]])[1]);
            end;

       end;


    vc_chassis := ar_half_tracked;
    vc_engine := engine_combustion;
    vc_control := control_manual;

    Case Difficulty of
    1: begin
        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_radar;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_gun;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;
       end;
    2: begin
        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_radar;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_flame_thrower;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_gun;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;
       end;
    3: begin
        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_rocket_launcher;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_radar;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_flame_thrower;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;

        vc_weapon := ar_gun;
        PlaceUnitXY(CreateVehicle, list[1][p], list[2][p], 0);
        p := p + 1;
       end;

    End;


    filter := FilterAllUnits([[f_side, 2], [f_control, control_manual]]);

    if filter > 0 then
       for i = 1 to filter do
           if not IsInUnit(AllPeo[i]) then
              PlaceHumanInUnit(AllPeo[i], filter[i]);

    for i = 1 to AllPeo do
        if not IsInUnit(AllPeo[i]) then
           begin
           PlaceUnitXY(AllPeo[i], list[1][p], list[2][p], false);
           p := p + 1;
           end;




End;



Export Function CreateRocketXY(side, c, x, y, d);
var un, veh;
begin

uc_side := side;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_control := c;
vc_engine  := engine_combustion;
vc_weapon  := ar_rocket_launcher;

veh := CreateVehicle;
SetDir(veh, d);
PlaceUnitXY(veh, x, y, false);
PlaceHumanInUnit(CreateHumanWithClass(3, [7,6,5][Difficulty]), veh);

End;


Export Function CreateGunXY(side, c, x, y, d);
var un, veh;
begin

uc_side := side;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_control := c;
vc_engine  := engine_combustion;
vc_weapon  := ar_gun;

veh := CreateVehicle;
SetDir(veh, d);
PlaceUnitXY(veh, x, y, false);
PlaceHumanInUnit(CreateHumanWithClass(3, [7,6,5][Difficulty]), veh);

End;


Export Function CreateFlameXY(side, c, x, y, d);
var un, veh;
begin

uc_side := side;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_control := c;
vc_engine  := engine_combustion;
vc_weapon  := ar_flame_thrower;

veh := CreateVehicle;
SetDir(veh, d);
PlaceUnitXY(veh, x, y, false);
PlaceHumanInUnit(CreateHumanWithClass(3, [7,6,5][Difficulty]), veh);

End;


Export Function CreateRadarXY(side, c, x, y, d);
var un, veh;
begin

uc_side := side;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_control := c;
vc_engine  := engine_combustion;
vc_weapon  := ar_radar;

veh := CreateVehicle;
SetDir(veh, d);
PlaceUnitXY(veh, x, y, false);
PlaceHumanInUnit(CreateHumanWithClass(3, [7,6,5][Difficulty]), veh);

End;


Export Function CreateRemTowerXY(side, x, y, d);
var un, veh;
begin

uc_side := side;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_control := control_manual;
vc_engine  := engine_combustion;
vc_weapon  := ar_control_tower;

veh := CreateVehicle;
SetDir(veh, d);
PlaceUnitXY(veh, x, y, false);
PlaceHumanInUnit(CreateHumanWithClass(3, [7,6,5][Difficulty]), veh);

End;

