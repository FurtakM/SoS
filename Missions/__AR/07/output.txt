// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Triggers ;
   8: CALL 1279 0 0
// PrepareRussian ;
  12: CALL 3135 0 0
// LoadUnits ;
  16: CALL 21081 0 0
// Action ;
  20: CALL 30350 0 0
// end ; end_of_file
  24: END
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
  25: LD_INT 0
  27: PPUSH
  28: PPUSH
  29: PPUSH
  30: PPUSH
  31: PPUSH
  32: PPUSH
// hc_class := clas ;
  33: LD_ADDR_OWVAR 28
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
  43: LD_ADDR_VAR 0 4
  47: PUSH
  48: LD_VAR 0 2
  52: PUSH
  53: LD_INT 1
  55: NEG
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: CALL_OW 12
  64: PLUS
  65: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
  66: LD_ADDR_VAR 0 5
  70: PUSH
  71: LD_VAR 0 2
  75: PUSH
  76: LD_INT 1
  78: NEG
  79: PPUSH
  80: LD_INT 1
  82: PPUSH
  83: CALL_OW 12
  87: PLUS
  88: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
  89: LD_ADDR_VAR 0 6
  93: PUSH
  94: LD_VAR 0 2
  98: PUSH
  99: LD_INT 1
 101: NEG
 102: PPUSH
 103: LD_INT 1
 105: PPUSH
 106: CALL_OW 12
 110: PLUS
 111: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 112: LD_ADDR_VAR 0 7
 116: PUSH
 117: LD_VAR 0 2
 121: PUSH
 122: LD_INT 1
 124: NEG
 125: PPUSH
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 12
 133: PLUS
 134: ST_TO_ADDR
// if clas = 1 or clas = 5 or clas = 8 or clas = 9 then
 135: LD_VAR 0 1
 139: PUSH
 140: LD_INT 1
 142: EQUAL
 143: PUSH
 144: LD_VAR 0 1
 148: PUSH
 149: LD_INT 5
 151: EQUAL
 152: OR
 153: PUSH
 154: LD_VAR 0 1
 158: PUSH
 159: LD_INT 8
 161: EQUAL
 162: OR
 163: PUSH
 164: LD_VAR 0 1
 168: PUSH
 169: LD_INT 9
 171: EQUAL
 172: OR
 173: IFFALSE 198
// bonus := [ 2 , 0 , 0 , 0 ] ;
 175: LD_ADDR_VAR 0 8
 179: PUSH
 180: LD_INT 2
 182: PUSH
 183: LD_INT 0
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: ST_TO_ADDR
// if clas = 2 then
 198: LD_VAR 0 1
 202: PUSH
 203: LD_INT 2
 205: EQUAL
 206: IFFALSE 231
// bonus := [ 0 , 2 , 0 , 0 ] ;
 208: LD_ADDR_VAR 0 8
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: ST_TO_ADDR
// if clas = 3 then
 231: LD_VAR 0 1
 235: PUSH
 236: LD_INT 3
 238: EQUAL
 239: IFFALSE 264
// bonus := [ 0 , 0 , 2 , 0 ] ;
 241: LD_ADDR_VAR 0 8
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 0
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// if clas = 4 then
 264: LD_VAR 0 1
 268: PUSH
 269: LD_INT 4
 271: EQUAL
 272: IFFALSE 297
// bonus := [ 0 , 0 , 0 , 2 ] ;
 274: LD_ADDR_VAR 0 8
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: LD_INT 0
 287: PUSH
 288: LD_INT 2
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: ST_TO_ADDR
// if clas > 4 and not clas = 5 and not clas = 8 and not clas = 9 then
 297: LD_VAR 0 1
 301: PUSH
 302: LD_INT 4
 304: GREATER
 305: PUSH
 306: LD_VAR 0 1
 310: PUSH
 311: LD_INT 5
 313: EQUAL
 314: NOT
 315: AND
 316: PUSH
 317: LD_VAR 0 1
 321: PUSH
 322: LD_INT 8
 324: EQUAL
 325: NOT
 326: AND
 327: PUSH
 328: LD_VAR 0 1
 332: PUSH
 333: LD_INT 9
 335: EQUAL
 336: NOT
 337: AND
 338: IFFALSE 363
// bonus := [ 0 , 0 , 0 , 0 ] ;
 340: LD_ADDR_VAR 0 8
 344: PUSH
 345: LD_INT 0
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
 363: LD_ADDR_OWVAR 31
 367: PUSH
 368: LD_VAR 0 4
 372: PUSH
 373: LD_VAR 0 8
 377: PUSH
 378: LD_INT 1
 380: ARRAY
 381: PLUS
 382: PUSH
 383: LD_VAR 0 5
 387: PUSH
 388: LD_VAR 0 8
 392: PUSH
 393: LD_INT 2
 395: ARRAY
 396: PLUS
 397: PUSH
 398: LD_VAR 0 6
 402: PUSH
 403: LD_VAR 0 8
 407: PUSH
 408: LD_INT 3
 410: ARRAY
 411: PLUS
 412: PUSH
 413: LD_VAR 0 7
 417: PUSH
 418: LD_VAR 0 8
 422: PUSH
 423: LD_INT 4
 425: ARRAY
 426: PLUS
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
 434: LD_ADDR_OWVAR 27
 438: PUSH
 439: LD_INT 1
 441: PPUSH
 442: LD_INT 2
 444: PPUSH
 445: CALL_OW 12
 449: ST_TO_ADDR
// hc_gallery :=  ;
 450: LD_ADDR_OWVAR 33
 454: PUSH
 455: LD_STRING 
 457: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
 458: LD_ADDR_OWVAR 29
 462: PUSH
 463: LD_INT 8
 465: PPUSH
 466: LD_INT 12
 468: PPUSH
 469: CALL_OW 12
 473: PUSH
 474: LD_INT 9
 476: PPUSH
 477: LD_INT 11
 479: PPUSH
 480: CALL_OW 12
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: ST_TO_ADDR
// hc_name :=  ;
 489: LD_ADDR_OWVAR 26
 493: PUSH
 494: LD_STRING 
 496: ST_TO_ADDR
// result := CreateHuman ;
 497: LD_ADDR_VAR 0 3
 501: PUSH
 502: CALL_OW 44
 506: ST_TO_ADDR
// end ;
 507: LD_VAR 0 3
 511: RET
// export function PrepareNature ( area , num1 , num2 , num3 , num4 ) ; var l , apeman , tiger , bird , horse ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// uc_nation = nation_nature ;
 520: LD_ADDR_OWVAR 21
 524: PUSH
 525: LD_INT 0
 527: ST_TO_ADDR
// uc_side = 0 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// l = 0 ;
 536: LD_ADDR_VAR 0 7
 540: PUSH
 541: LD_INT 0
 543: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
 544: LD_ADDR_OWVAR 24
 548: PUSH
 549: LD_INT 0
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
 560: LD_ADDR_OWVAR 35
 564: PUSH
 565: LD_INT 5
 567: NEG
 568: PPUSH
 569: LD_INT 0
 571: PPUSH
 572: CALL_OW 12
 576: ST_TO_ADDR
// hc_gallery =  ;
 577: LD_ADDR_OWVAR 33
 581: PUSH
 582: LD_STRING 
 584: ST_TO_ADDR
// hc_class = class_apeman ;
 585: LD_ADDR_OWVAR 28
 589: PUSH
 590: LD_INT 12
 592: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 593: LD_ADDR_OWVAR 29
 597: PUSH
 598: LD_INT 11
 600: PPUSH
 601: LD_INT 13
 603: PPUSH
 604: CALL_OW 12
 608: PUSH
 609: LD_INT 10
 611: PPUSH
 612: LD_INT 11
 614: PPUSH
 615: CALL_OW 12
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// hc_sex = sex_male ;
 624: LD_ADDR_OWVAR 27
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 632: LD_ADDR_OWVAR 31
 636: PUSH
 637: LD_INT 0
 639: PPUSH
 640: LD_INT 2
 642: PPUSH
 643: CALL_OW 12
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// apeman = CreateHuman ;
 663: LD_ADDR_VAR 0 8
 667: PUSH
 668: CALL_OW 44
 672: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 673: LD_VAR 0 8
 677: PPUSH
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// l = l + 1 ;
 690: LD_ADDR_VAR 0 7
 694: PUSH
 695: LD_VAR 0 7
 699: PUSH
 700: LD_INT 1
 702: PLUS
 703: ST_TO_ADDR
// end until l = num1 ;
 704: LD_VAR 0 7
 708: PUSH
 709: LD_VAR 0 2
 713: EQUAL
 714: IFFALSE 544
// l = 0 ;
 716: LD_ADDR_VAR 0 7
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 724: LD_ADDR_OWVAR 35
 728: PUSH
 729: LD_INT 0
 731: PPUSH
 732: LD_INT 25
 734: PPUSH
 735: CALL_OW 12
 739: ST_TO_ADDR
// hc_class = class_tiger ;
 740: LD_ADDR_OWVAR 28
 744: PUSH
 745: LD_INT 14
 747: ST_TO_ADDR
// hc_sex = sex_male ;
 748: LD_ADDR_OWVAR 27
 752: PUSH
 753: LD_INT 1
 755: ST_TO_ADDR
// hc_gallery = sandnature ;
 756: LD_ADDR_OWVAR 33
 760: PUSH
 761: LD_STRING sandnature
 763: ST_TO_ADDR
// hc_face_number = 3 ;
 764: LD_ADDR_OWVAR 34
 768: PUSH
 769: LD_INT 3
 771: ST_TO_ADDR
// tiger = CreateHuman ;
 772: LD_ADDR_VAR 0 9
 776: PUSH
 777: CALL_OW 44
 781: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 782: LD_VAR 0 9
 786: PPUSH
 787: LD_VAR 0 1
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// l = l + 1 ;
 799: LD_ADDR_VAR 0 7
 803: PUSH
 804: LD_VAR 0 7
 808: PUSH
 809: LD_INT 1
 811: PLUS
 812: ST_TO_ADDR
// end until l = num2 ;
 813: LD_VAR 0 7
 817: PUSH
 818: LD_VAR 0 3
 822: EQUAL
 823: IFFALSE 724
// l = 0 ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery = sandnature ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING sandnature
 848: ST_TO_ADDR
// hc_face_number = 1 ;
 849: LD_ADDR_OWVAR 34
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// bird = CreateHuman ;
 857: LD_ADDR_VAR 0 10
 861: PUSH
 862: CALL_OW 44
 866: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 867: LD_VAR 0 10
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: CALL_OW 51
// l = l + 1 ;
 879: LD_ADDR_VAR 0 7
 883: PUSH
 884: LD_VAR 0 7
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ST_TO_ADDR
// end until l = num3 ;
 893: LD_VAR 0 7
 897: PUSH
 898: LD_VAR 0 4
 902: EQUAL
 903: IFFALSE 833
// repeat begin hc_class = 21 ;
 905: LD_ADDR_OWVAR 28
 909: PUSH
 910: LD_INT 21
 912: ST_TO_ADDR
// hc_gallery = sandnature ;
 913: LD_ADDR_OWVAR 33
 917: PUSH
 918: LD_STRING sandnature
 920: ST_TO_ADDR
// hc_face_number = 5 ;
 921: LD_ADDR_OWVAR 34
 925: PUSH
 926: LD_INT 5
 928: ST_TO_ADDR
// horse := CreateHuman ;
 929: LD_ADDR_VAR 0 11
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// PlaceUnitArea ( horse , area , false ) ;
 939: LD_VAR 0 11
 943: PPUSH
 944: LD_VAR 0 1
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// l = l + 1 ;
 956: LD_ADDR_VAR 0 7
 960: PUSH
 961: LD_VAR 0 7
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ST_TO_ADDR
// end until l = num4 ;
 970: LD_VAR 0 7
 974: PUSH
 975: LD_VAR 0 5
 979: EQUAL
 980: IFFALSE 905
// end ;
 982: LD_VAR 0 6
 986: RET
// export function PlaceWeaponOnTowers ( base , list ) ; var i , filter ; begin
 987: LD_INT 0
 989: PPUSH
 990: PPUSH
 991: PPUSH
// filter := FilterAllUnits ( [ [ [ f_side , GetSide ( base ) ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ] ) ;
 992: LD_ADDR_VAR 0 5
 996: PUSH
 997: LD_INT 22
 999: PUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 255
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 32
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 30
1029: PUSH
1030: LD_INT 33
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: PPUSH
1049: CALL_OW 69
1053: ST_TO_ADDR
// if filter > 0 then
1054: LD_VAR 0 5
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1171
// begin for i = 1 to filter do
1064: LD_ADDR_VAR 0 4
1068: PUSH
1069: DOUBLE
1070: LD_INT 1
1072: DEC
1073: ST_TO_ADDR
1074: LD_VAR 0 5
1078: PUSH
1079: FOR_TO
1080: IFFALSE 1167
// if GetBase ( base ) = GetBase ( filter [ i ] ) and GetBWeapon ( filter [ i ] ) = 0 then
1082: LD_VAR 0 1
1086: PPUSH
1087: CALL_OW 274
1091: PUSH
1092: LD_VAR 0 5
1096: PUSH
1097: LD_VAR 0 4
1101: ARRAY
1102: PPUSH
1103: CALL_OW 274
1107: EQUAL
1108: PUSH
1109: LD_VAR 0 5
1113: PUSH
1114: LD_VAR 0 4
1118: ARRAY
1119: PPUSH
1120: CALL_OW 269
1124: PUSH
1125: LD_INT 0
1127: EQUAL
1128: AND
1129: IFFALSE 1165
// PlaceWeaponTurret ( filter [ i ] , list [ Rand ( 1 , list ) ] ) ;
1131: LD_VAR 0 5
1135: PUSH
1136: LD_VAR 0 4
1140: ARRAY
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_INT 1
1149: PPUSH
1150: LD_VAR 0 2
1154: PPUSH
1155: CALL_OW 12
1159: ARRAY
1160: PPUSH
1161: CALL_OW 431
1165: GO 1079
1167: POP
1168: POP
// end else
1169: GO 1179
// result := false ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: LD_INT 0
1178: ST_TO_ADDR
// end ;
1179: LD_VAR 0 3
1183: RET
// export function RandX ( min_val , max_val , x ) ; var i ; begin
1184: LD_INT 0
1186: PPUSH
1187: PPUSH
// for i = 1 to x do
1188: LD_ADDR_VAR 0 5
1192: PUSH
1193: DOUBLE
1194: LD_INT 1
1196: DEC
1197: ST_TO_ADDR
1198: LD_VAR 0 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1228
// result := Rand ( min_val , max_val ) ;
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_VAR 0 1
1215: PPUSH
1216: LD_VAR 0 2
1220: PPUSH
1221: CALL_OW 12
1225: ST_TO_ADDR
1226: GO 1203
1228: POP
1229: POP
// end ;
1230: LD_VAR 0 4
1234: RET
// export function IsDriver ( un ) ; begin
1235: LD_INT 0
1237: PPUSH
// if un in FilterAllUnits ( [ f_driving ] ) then
1238: LD_VAR 0 1
1242: PUSH
1243: LD_INT 55
1245: PUSH
1246: EMPTY
1247: LIST
1248: PPUSH
1249: CALL_OW 69
1253: IN
1254: IFFALSE 1266
// result := true else
1256: LD_ADDR_VAR 0 2
1260: PUSH
1261: LD_INT 1
1263: ST_TO_ADDR
1264: GO 1274
// result := false ;
1266: LD_ADDR_VAR 0 2
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// end ;
1274: LD_VAR 0 2
1278: RET
// export player_count , omar_count , omar_return , medal_omar , heike_count , heike_return , heike_counter , morozov_die , jaszyn_count , jaszyn_activ , jaszyn_time , lenin_des ; export function Triggers ; begin
1279: LD_INT 0
1281: PPUSH
// player_count := 0 ;
1282: LD_ADDR_EXP 1
1286: PUSH
1287: LD_INT 0
1289: ST_TO_ADDR
// omar_count := 0 ;
1290: LD_ADDR_EXP 2
1294: PUSH
1295: LD_INT 0
1297: ST_TO_ADDR
// omar_return := false ;
1298: LD_ADDR_EXP 3
1302: PUSH
1303: LD_INT 0
1305: ST_TO_ADDR
// medal_omar := true ;
1306: LD_ADDR_EXP 4
1310: PUSH
1311: LD_INT 1
1313: ST_TO_ADDR
// heike_count := 0 ;
1314: LD_ADDR_EXP 5
1318: PUSH
1319: LD_INT 0
1321: ST_TO_ADDR
// heike_return := false ;
1322: LD_ADDR_EXP 6
1326: PUSH
1327: LD_INT 0
1329: ST_TO_ADDR
// heike_counter := 0 ;
1330: LD_ADDR_EXP 7
1334: PUSH
1335: LD_INT 0
1337: ST_TO_ADDR
// jaszyn_count := 0 ;
1338: LD_ADDR_EXP 9
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// jaszyn_activ := false ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: LD_INT 0
1353: ST_TO_ADDR
// jaszyn_time := [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
1354: LD_ADDR_EXP 11
1358: PUSH
1359: LD_INT 52500
1361: PUSH
1362: LD_INT 46200
1364: PUSH
1365: LD_INT 42000
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PUSH
1373: LD_OWVAR 67
1377: ARRAY
1378: ST_TO_ADDR
// lenin_des := false ;
1379: LD_ADDR_EXP 12
1383: PUSH
1384: LD_INT 0
1386: ST_TO_ADDR
// morozov_die := false ;
1387: LD_ADDR_EXP 8
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// end ; end_of_file
1395: LD_VAR 0 1
1399: RET
// on UnitDestroyed ( un ) do begin if un = Louis then
1400: LD_VAR 0 1
1404: PUSH
1405: LD_EXP 58
1409: EQUAL
1410: IFFALSE 1419
// YouLost ( lostl ) ;
1412: LD_STRING lostl
1414: PPUSH
1415: CALL_OW 104
// if un = heike or un = omar then
1419: LD_VAR 0 1
1423: PUSH
1424: LD_EXP 80
1428: EQUAL
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: LD_EXP 78
1439: EQUAL
1440: OR
1441: IFFALSE 1450
// YouLost ( lostho ) ;
1443: LD_STRING lostho
1445: PPUSH
1446: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) then
1450: LD_VAR 0 1
1454: PUSH
1455: LD_INT 22
1457: PUSH
1458: LD_INT 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: LD_INT 3
1467: PUSH
1468: LD_INT 21
1470: PUSH
1471: LD_INT 3
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PPUSH
1486: CALL_OW 69
1490: IN
1491: IFFALSE 1507
// player_count := player_count + 1 ;
1493: LD_ADDR_EXP 1
1497: PUSH
1498: LD_EXP 1
1502: PUSH
1503: LD_INT 1
1505: PLUS
1506: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_side , 5 ] ) then
1507: LD_VAR 0 1
1511: PUSH
1512: LD_INT 22
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: IN
1527: IFFALSE 1543
// omar_count := omar_count + 1 ;
1529: LD_ADDR_EXP 2
1533: PUSH
1534: LD_EXP 2
1538: PUSH
1539: LD_INT 1
1541: PLUS
1542: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_side , 8 ] ) then
1543: LD_VAR 0 1
1547: PUSH
1548: LD_INT 22
1550: PUSH
1551: LD_INT 8
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: IN
1563: IFFALSE 1579
// heike_count := heike_count + 1 ;
1565: LD_ADDR_EXP 5
1569: PUSH
1570: LD_EXP 5
1574: PUSH
1575: LD_INT 1
1577: PLUS
1578: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_side , 3 ] ) then
1579: LD_VAR 0 1
1583: PUSH
1584: LD_INT 22
1586: PUSH
1587: LD_INT 3
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: IN
1599: IFFALSE 1615
// jaszyn_count := jaszyn_count + 1 ;
1601: LD_ADDR_EXP 9
1605: PUSH
1606: LD_EXP 9
1610: PUSH
1611: LD_INT 1
1613: PLUS
1614: ST_TO_ADDR
// if un = ru_main_dep then
1615: LD_VAR 0 1
1619: PUSH
1620: LD_INT 152
1622: EQUAL
1623: IFFALSE 1633
// lenin_des := true ;
1625: LD_ADDR_EXP 12
1629: PUSH
1630: LD_INT 1
1632: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) then
1633: LD_VAR 0 1
1637: PUSH
1638: LD_INT 22
1640: PUSH
1641: LD_INT 6
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: LD_INT 21
1650: PUSH
1651: LD_INT 3
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 69
1666: IN
1667: IFFALSE 1911
// begin if un in FilterAllUnits ( [ f_btype , b_barracks ] ) then
1669: LD_VAR 0 1
1673: PUSH
1674: LD_INT 30
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PPUSH
1684: CALL_OW 69
1688: IN
1689: IFFALSE 1707
// ru6_blist := ru6_blist ^ b_armoury else
1691: LD_ADDR_EXP 26
1695: PUSH
1696: LD_EXP 26
1700: PUSH
1701: LD_INT 4
1703: ADD
1704: ST_TO_ADDR
1705: GO 1784
// if un in FilterAllUnits ( [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ) then
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 2
1714: PUSH
1715: LD_INT 30
1717: PUSH
1718: LD_INT 8
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 30
1727: PUSH
1728: LD_INT 7
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: IN
1745: IFFALSE 1763
// ru6_blist := ru6_blist ^ b_lab else
1747: LD_ADDR_EXP 26
1751: PUSH
1752: LD_EXP 26
1756: PUSH
1757: LD_INT 6
1759: ADD
1760: ST_TO_ADDR
1761: GO 1784
// ru6_blist := ru6_blist ^ GetBType ( un ) ;
1763: LD_ADDR_EXP 26
1767: PUSH
1768: LD_EXP 26
1772: PUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: CALL_OW 266
1782: ADD
1783: ST_TO_ADDR
// ru6_blist := ru6_blist ^ GetX ( un ) ;
1784: LD_ADDR_EXP 26
1788: PUSH
1789: LD_EXP 26
1793: PUSH
1794: LD_VAR 0 1
1798: PPUSH
1799: CALL_OW 250
1803: ADD
1804: ST_TO_ADDR
// ru6_blist := ru6_blist ^ GetY ( un ) ;
1805: LD_ADDR_EXP 26
1809: PUSH
1810: LD_EXP 26
1814: PUSH
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 251
1824: ADD
1825: ST_TO_ADDR
// ru6_blist := ru6_blist ^ GetDir ( un ) ;
1826: LD_ADDR_EXP 26
1830: PUSH
1831: LD_EXP 26
1835: PUSH
1836: LD_VAR 0 1
1840: PPUSH
1841: CALL_OW 254
1845: ADD
1846: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
1847: LD_VAR 0 1
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 30
1857: PUSH
1858: LD_INT 32
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 30
1867: PUSH
1868: LD_INT 33
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: IN
1888: IFFALSE 1911
// ru6_bweap := ru6_bweap ^ GetBWeapon ( un ) ;
1890: LD_ADDR_EXP 27
1894: PUSH
1895: LD_EXP 27
1899: PUSH
1900: LD_VAR 0 1
1904: PPUSH
1905: CALL_OW 269
1909: ADD
1910: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
1911: LD_VAR 0 1
1915: PUSH
1916: LD_INT 22
1918: PUSH
1919: LD_INT 7
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: LD_INT 21
1928: PUSH
1929: LD_INT 3
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 69
1944: IN
1945: IFFALSE 2189
// begin if un in FilterAllUnits ( [ f_btype , b_barracks ] ) then
1947: LD_VAR 0 1
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 5
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PPUSH
1962: CALL_OW 69
1966: IN
1967: IFFALSE 1985
// ru7_blist := ru7_blist ^ b_armoury else
1969: LD_ADDR_EXP 36
1973: PUSH
1974: LD_EXP 36
1978: PUSH
1979: LD_INT 4
1981: ADD
1982: ST_TO_ADDR
1983: GO 2062
// if un in FilterAllUnits ( [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ) then
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 30
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 30
2005: PUSH
2006: LD_INT 7
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PPUSH
2018: CALL_OW 69
2022: IN
2023: IFFALSE 2041
// ru7_blist := ru7_blist ^ b_lab else
2025: LD_ADDR_EXP 36
2029: PUSH
2030: LD_EXP 36
2034: PUSH
2035: LD_INT 6
2037: ADD
2038: ST_TO_ADDR
2039: GO 2062
// ru7_blist := ru7_blist ^ GetBType ( un ) ;
2041: LD_ADDR_EXP 36
2045: PUSH
2046: LD_EXP 36
2050: PUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 266
2060: ADD
2061: ST_TO_ADDR
// ru7_blist := ru7_blist ^ GetX ( un ) ;
2062: LD_ADDR_EXP 36
2066: PUSH
2067: LD_EXP 36
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: CALL_OW 250
2081: ADD
2082: ST_TO_ADDR
// ru7_blist := ru7_blist ^ GetY ( un ) ;
2083: LD_ADDR_EXP 36
2087: PUSH
2088: LD_EXP 36
2092: PUSH
2093: LD_VAR 0 1
2097: PPUSH
2098: CALL_OW 251
2102: ADD
2103: ST_TO_ADDR
// ru7_blist := ru7_blist ^ GetDir ( un ) ;
2104: LD_ADDR_EXP 36
2108: PUSH
2109: LD_EXP 36
2113: PUSH
2114: LD_VAR 0 1
2118: PPUSH
2119: CALL_OW 254
2123: ADD
2124: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
2125: LD_VAR 0 1
2129: PUSH
2130: LD_INT 2
2132: PUSH
2133: LD_INT 30
2135: PUSH
2136: LD_INT 32
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 30
2145: PUSH
2146: LD_INT 33
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: PPUSH
2161: CALL_OW 69
2165: IN
2166: IFFALSE 2189
// ru7_bweap := ru7_bweap ^ GetBWeapon ( un ) ;
2168: LD_ADDR_EXP 37
2172: PUSH
2173: LD_EXP 37
2177: PUSH
2178: LD_VAR 0 1
2182: PPUSH
2183: CALL_OW 269
2187: ADD
2188: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
2189: LD_VAR 0 1
2193: PUSH
2194: LD_INT 22
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 21
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: IN
2223: IFFALSE 2467
// begin if un in FilterAllUnits ( [ f_btype , b_barracks ] ) then
2225: LD_VAR 0 1
2229: PUSH
2230: LD_INT 30
2232: PUSH
2233: LD_INT 5
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: IN
2245: IFFALSE 2263
// ru1_blist := ru1_blist ^ b_armoury else
2247: LD_ADDR_EXP 46
2251: PUSH
2252: LD_EXP 46
2256: PUSH
2257: LD_INT 4
2259: ADD
2260: ST_TO_ADDR
2261: GO 2340
// if un in FilterAllUnits ( [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ) then
2263: LD_VAR 0 1
2267: PUSH
2268: LD_INT 2
2270: PUSH
2271: LD_INT 30
2273: PUSH
2274: LD_INT 8
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 30
2283: PUSH
2284: LD_INT 7
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: IN
2301: IFFALSE 2319
// ru1_blist := ru1_blist ^ b_lab else
2303: LD_ADDR_EXP 46
2307: PUSH
2308: LD_EXP 46
2312: PUSH
2313: LD_INT 6
2315: ADD
2316: ST_TO_ADDR
2317: GO 2340
// ru1_blist := ru1_blist ^ GetBType ( un ) ;
2319: LD_ADDR_EXP 46
2323: PUSH
2324: LD_EXP 46
2328: PUSH
2329: LD_VAR 0 1
2333: PPUSH
2334: CALL_OW 266
2338: ADD
2339: ST_TO_ADDR
// ru1_blist := ru1_blist ^ GetX ( un ) ;
2340: LD_ADDR_EXP 46
2344: PUSH
2345: LD_EXP 46
2349: PUSH
2350: LD_VAR 0 1
2354: PPUSH
2355: CALL_OW 250
2359: ADD
2360: ST_TO_ADDR
// ru1_blist := ru1_blist ^ GetY ( un ) ;
2361: LD_ADDR_EXP 46
2365: PUSH
2366: LD_EXP 46
2370: PUSH
2371: LD_VAR 0 1
2375: PPUSH
2376: CALL_OW 251
2380: ADD
2381: ST_TO_ADDR
// ru1_blist := ru1_blist ^ GetDir ( un ) ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 46
2391: PUSH
2392: LD_VAR 0 1
2396: PPUSH
2397: CALL_OW 254
2401: ADD
2402: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
2403: LD_VAR 0 1
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 30
2413: PUSH
2414: LD_INT 32
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 30
2423: PUSH
2424: LD_INT 33
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: PUSH
2436: EMPTY
2437: LIST
2438: PPUSH
2439: CALL_OW 69
2443: IN
2444: IFFALSE 2467
// ru1_bweap := ru1_bweap ^ GetBWeapon ( un ) ;
2446: LD_ADDR_EXP 47
2450: PUSH
2451: LD_EXP 47
2455: PUSH
2456: LD_VAR 0 1
2460: PPUSH
2461: CALL_OW 269
2465: ADD
2466: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2467: LD_VAR 0 1
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 3
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 21
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PPUSH
2496: CALL_OW 69
2500: IN
2501: IFFALSE 2745
// begin if un in FilterAllUnits ( [ f_btype , b_barracks ] ) then
2503: LD_VAR 0 1
2507: PUSH
2508: LD_INT 30
2510: PUSH
2511: LD_INT 5
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 69
2522: IN
2523: IFFALSE 2541
// ru3_blist := ru3_blist ^ b_armoury else
2525: LD_ADDR_EXP 56
2529: PUSH
2530: LD_EXP 56
2534: PUSH
2535: LD_INT 4
2537: ADD
2538: ST_TO_ADDR
2539: GO 2618
// if un in FilterAllUnits ( [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ) then
2541: LD_VAR 0 1
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: LD_INT 30
2551: PUSH
2552: LD_INT 8
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 30
2561: PUSH
2562: LD_INT 7
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: IN
2579: IFFALSE 2597
// ru3_blist := ru3_blist ^ b_lab else
2581: LD_ADDR_EXP 56
2585: PUSH
2586: LD_EXP 56
2590: PUSH
2591: LD_INT 6
2593: ADD
2594: ST_TO_ADDR
2595: GO 2618
// ru3_blist := ru3_blist ^ GetBType ( un ) ;
2597: LD_ADDR_EXP 56
2601: PUSH
2602: LD_EXP 56
2606: PUSH
2607: LD_VAR 0 1
2611: PPUSH
2612: CALL_OW 266
2616: ADD
2617: ST_TO_ADDR
// ru3_blist := ru3_blist ^ GetX ( un ) ;
2618: LD_ADDR_EXP 56
2622: PUSH
2623: LD_EXP 56
2627: PUSH
2628: LD_VAR 0 1
2632: PPUSH
2633: CALL_OW 250
2637: ADD
2638: ST_TO_ADDR
// ru3_blist := ru3_blist ^ GetY ( un ) ;
2639: LD_ADDR_EXP 56
2643: PUSH
2644: LD_EXP 56
2648: PUSH
2649: LD_VAR 0 1
2653: PPUSH
2654: CALL_OW 251
2658: ADD
2659: ST_TO_ADDR
// ru3_blist := ru3_blist ^ GetDir ( un ) ;
2660: LD_ADDR_EXP 56
2664: PUSH
2665: LD_EXP 56
2669: PUSH
2670: LD_VAR 0 1
2674: PPUSH
2675: CALL_OW 254
2679: ADD
2680: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
2681: LD_VAR 0 1
2685: PUSH
2686: LD_INT 2
2688: PUSH
2689: LD_INT 30
2691: PUSH
2692: LD_INT 32
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 33
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: PPUSH
2717: CALL_OW 69
2721: IN
2722: IFFALSE 2745
// ru3_bweap := ru3_bweap ^ GetBWeapon ( un ) ;
2724: LD_ADDR_EXP 57
2728: PUSH
2729: LD_EXP 57
2733: PUSH
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 269
2743: ADD
2744: ST_TO_ADDR
// end ; end ;
2745: PPOPN 1
2747: END
// on WeaponPlaced ( b , fac ) do begin if fac in ru6_fac then
2748: LD_VAR 0 2
2752: PUSH
2753: LD_EXP 25
2757: IN
2758: IFFALSE 2778
// ru6_bweap := Delete ( ru6_bweap , 1 ) ;
2760: LD_ADDR_EXP 27
2764: PUSH
2765: LD_EXP 27
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 3
2777: ST_TO_ADDR
// if fac in ru7_fac then
2778: LD_VAR 0 2
2782: PUSH
2783: LD_EXP 35
2787: IN
2788: IFFALSE 2808
// ru7_bweap := Delete ( ru7_bweap , 1 ) ;
2790: LD_ADDR_EXP 37
2794: PUSH
2795: LD_EXP 37
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 3
2807: ST_TO_ADDR
// if fac in ru1_fac then
2808: LD_VAR 0 2
2812: PUSH
2813: LD_EXP 45
2817: IN
2818: IFFALSE 2838
// ru1_bweap := Delete ( ru1_bweap , 1 ) ;
2820: LD_ADDR_EXP 47
2824: PUSH
2825: LD_EXP 47
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: CALL_OW 3
2837: ST_TO_ADDR
// if fac in ru3_fac then
2838: LD_VAR 0 2
2842: PUSH
2843: LD_EXP 55
2847: IN
2848: IFFALSE 2868
// ru3_bweap := Delete ( ru3_bweap , 1 ) ;
2850: LD_ADDR_EXP 57
2854: PUSH
2855: LD_EXP 57
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: CALL_OW 3
2867: ST_TO_ADDR
// end ;
2868: PPOPN 2
2870: END
// on BuildingComplete ( b ) do var i ;
2871: LD_INT 0
2873: PPUSH
// begin if GetSide ( b ) = 6 then
2874: LD_VAR 0 1
2878: PPUSH
2879: CALL_OW 255
2883: PUSH
2884: LD_INT 6
2886: EQUAL
2887: IFFALSE 2927
// for i = 1 to 4 do
2889: LD_ADDR_VAR 0 2
2893: PUSH
2894: DOUBLE
2895: LD_INT 1
2897: DEC
2898: ST_TO_ADDR
2899: LD_INT 4
2901: PUSH
2902: FOR_TO
2903: IFFALSE 2925
// ru6_blist := Delete ( ru6_blist , 1 ) ;
2905: LD_ADDR_EXP 26
2909: PUSH
2910: LD_EXP 26
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: CALL_OW 3
2922: ST_TO_ADDR
2923: GO 2902
2925: POP
2926: POP
// if GetSide ( b ) = 7 then
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 255
2936: PUSH
2937: LD_INT 7
2939: EQUAL
2940: IFFALSE 2980
// for i = 1 to 4 do
2942: LD_ADDR_VAR 0 2
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_INT 4
2954: PUSH
2955: FOR_TO
2956: IFFALSE 2978
// ru7_blist := Delete ( ru7_blist , 1 ) ;
2958: LD_ADDR_EXP 36
2962: PUSH
2963: LD_EXP 36
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: CALL_OW 3
2975: ST_TO_ADDR
2976: GO 2955
2978: POP
2979: POP
// if GetSide ( b ) = 1 then
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 255
2989: PUSH
2990: LD_INT 1
2992: EQUAL
2993: IFFALSE 3033
// for i = 1 to 4 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 4
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3031
// ru1_blist := Delete ( ru1_blist , 1 ) ;
3011: LD_ADDR_EXP 46
3015: PUSH
3016: LD_EXP 46
3020: PPUSH
3021: LD_INT 1
3023: PPUSH
3024: CALL_OW 3
3028: ST_TO_ADDR
3029: GO 3008
3031: POP
3032: POP
// if GetSide ( b ) = 3 then
3033: LD_VAR 0 1
3037: PPUSH
3038: CALL_OW 255
3042: PUSH
3043: LD_INT 3
3045: EQUAL
3046: IFFALSE 3086
// for i = 1 to 4 do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: DOUBLE
3054: LD_INT 1
3056: DEC
3057: ST_TO_ADDR
3058: LD_INT 4
3060: PUSH
3061: FOR_TO
3062: IFFALSE 3084
// ru3_blist := Delete ( ru3_blist , 1 ) ;
3064: LD_ADDR_EXP 56
3068: PUSH
3069: LD_EXP 56
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: CALL_OW 3
3081: ST_TO_ADDR
3082: GO 3061
3084: POP
3085: POP
// if GetSide ( b ) <> 2 and GetBType ( b ) in [ b_armoury , b_depot ] then
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 255
3095: PUSH
3096: LD_INT 2
3098: NONEQUAL
3099: PUSH
3100: LD_VAR 0 1
3104: PPUSH
3105: CALL_OW 266
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 0
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: IN
3120: AND
3121: IFFALSE 3132
// ComUpgrade ( b ) ;
3123: LD_VAR 0 1
3127: PPUSH
3128: CALL_OW 146
// end ; end_of_file
3132: PPOPN 2
3134: END
// export function PrepareRussian ; begin
3135: LD_INT 0
3137: PPUSH
// RuInitVar ;
3138: CALL 3523 0 0
// SetRuBNames ;
3142: CALL 3587 0 0
// PrepareMorozovStaff ;
3146: CALL 3635 0 0
// PrepareBase ( ru_west_dep , ru6_spawn , Difficulty ) ;
3150: LD_INT 2
3152: PPUSH
3153: LD_INT 2
3155: PPUSH
3156: LD_OWVAR 67
3160: PPUSH
3161: CALL 3899 0 3
// SetResourceType ( GetBase ( ru_west_dep ) , mat_cans , [ 2000 , 1500 , 1200 ] [ Difficulty ] ) ;
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 274
3172: PPUSH
3173: LD_INT 1
3175: PPUSH
3176: LD_INT 2000
3178: PUSH
3179: LD_INT 1500
3181: PUSH
3182: LD_INT 1200
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_OWVAR 67
3194: ARRAY
3195: PPUSH
3196: CALL_OW 277
// SetResourceType ( GetBase ( ru_west_dep ) , mat_oil , [ 400 , 500 , 500 ] [ Difficulty ] ) ;
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 274
3207: PPUSH
3208: LD_INT 2
3210: PPUSH
3211: LD_INT 400
3213: PUSH
3214: LD_INT 500
3216: PUSH
3217: LD_INT 500
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: LD_OWVAR 67
3229: ARRAY
3230: PPUSH
3231: CALL_OW 277
// PrepareBase ( ru_east_dep , ru7_spawn , Difficulty ) ;
3235: LD_INT 52
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: LD_OWVAR 67
3245: PPUSH
3246: CALL 3899 0 3
// SetResourceType ( GetBase ( ru_east_dep ) , mat_cans , [ 2000 , 1500 , 1200 ] [ Difficulty ] ) ;
3250: LD_INT 52
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 2000
3263: PUSH
3264: LD_INT 1500
3266: PUSH
3267: LD_INT 1200
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_OWVAR 67
3279: ARRAY
3280: PPUSH
3281: CALL_OW 277
// SetResourceType ( GetBase ( ru_east_dep ) , mat_oil , [ 400 , 500 , 500 ] [ Difficulty ] ) ;
3285: LD_INT 52
3287: PPUSH
3288: CALL_OW 274
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: LD_INT 400
3298: PUSH
3299: LD_INT 500
3301: PUSH
3302: LD_INT 500
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: PPUSH
3316: CALL_OW 277
// PrepareBase ( ru_north_dep , ru1_spawn , 2 ) ;
3320: LD_INT 120
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: LD_INT 2
3328: PPUSH
3329: CALL 3899 0 3
// SetResourceType ( GetBase ( ru_north_dep ) , mat_cans , [ 2000 , 1500 , 1200 ] [ Difficulty ] ) ;
3333: LD_INT 120
3335: PPUSH
3336: CALL_OW 274
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: LD_INT 2000
3346: PUSH
3347: LD_INT 1500
3349: PUSH
3350: LD_INT 1200
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: PUSH
3358: LD_OWVAR 67
3362: ARRAY
3363: PPUSH
3364: CALL_OW 277
// SetResourceType ( GetBase ( ru_north_dep ) , mat_oil , [ 400 , 500 , 500 ] [ Difficulty ] ) ;
3368: LD_INT 120
3370: PPUSH
3371: CALL_OW 274
3375: PPUSH
3376: LD_INT 2
3378: PPUSH
3379: LD_INT 400
3381: PUSH
3382: LD_INT 500
3384: PUSH
3385: LD_INT 500
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_OWVAR 67
3397: ARRAY
3398: PPUSH
3399: CALL_OW 277
// PrepareBase ( ru_m2_dep , ru3_spawn , 0 ) ;
3403: LD_INT 133
3405: PPUSH
3406: LD_INT 7
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL 3899 0 3
// PrepareBase ( ru_m3_dep , ru3_spawn , 0 ) ;
3416: LD_INT 161
3418: PPUSH
3419: LD_INT 7
3421: PPUSH
3422: LD_INT 0
3424: PPUSH
3425: CALL 3899 0 3
// PrepareBase ( ru_main_dep , ru3_spawn , 5 - Difficulty ) ;
3429: LD_INT 152
3431: PPUSH
3432: LD_INT 7
3434: PPUSH
3435: LD_INT 5
3437: PUSH
3438: LD_OWVAR 67
3442: MINUS
3443: PPUSH
3444: CALL 3899 0 3
// SetResourceType ( GetBase ( ru_main_dep ) , mat_cans , [ 2000 , 1500 , 1200 ] [ Difficulty ] ) ;
3448: LD_INT 152
3450: PPUSH
3451: CALL_OW 274
3455: PPUSH
3456: LD_INT 1
3458: PPUSH
3459: LD_INT 2000
3461: PUSH
3462: LD_INT 1500
3464: PUSH
3465: LD_INT 1200
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_OWVAR 67
3477: ARRAY
3478: PPUSH
3479: CALL_OW 277
// SetResourceType ( GetBase ( ru_main_dep ) , mat_oil , [ 400 , 500 , 500 ] [ Difficulty ] ) ;
3483: LD_INT 152
3485: PPUSH
3486: CALL_OW 274
3490: PPUSH
3491: LD_INT 2
3493: PPUSH
3494: LD_INT 400
3496: PUSH
3497: LD_INT 500
3499: PUSH
3500: LD_INT 500
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PPUSH
3514: CALL_OW 277
// end ;
3518: LD_VAR 0 1
3522: RET
// export function RuInitVar ; begin
3523: LD_INT 0
3525: PPUSH
// ru6_blist := [ ] ;
3526: LD_ADDR_EXP 26
3530: PUSH
3531: EMPTY
3532: ST_TO_ADDR
// ru6_bweap := [ ] ;
3533: LD_ADDR_EXP 27
3537: PUSH
3538: EMPTY
3539: ST_TO_ADDR
// ru7_blist := [ ] ;
3540: LD_ADDR_EXP 36
3544: PUSH
3545: EMPTY
3546: ST_TO_ADDR
// ru7_bweap := [ ] ;
3547: LD_ADDR_EXP 37
3551: PUSH
3552: EMPTY
3553: ST_TO_ADDR
// ru1_blist := [ ] ;
3554: LD_ADDR_EXP 46
3558: PUSH
3559: EMPTY
3560: ST_TO_ADDR
// ru1_bweap := [ ] ;
3561: LD_ADDR_EXP 47
3565: PUSH
3566: EMPTY
3567: ST_TO_ADDR
// ru3_blist := [ ] ;
3568: LD_ADDR_EXP 56
3572: PUSH
3573: EMPTY
3574: ST_TO_ADDR
// ru3_bweap := [ ] ;
3575: LD_ADDR_EXP 57
3579: PUSH
3580: EMPTY
3581: ST_TO_ADDR
// end ;
3582: LD_VAR 0 1
3586: RET
// export function SetRuBNames ; begin
3587: LD_INT 0
3589: PPUSH
// SetBName ( ru_main_dep , lenin ) ;
3590: LD_INT 152
3592: PPUSH
3593: LD_STRING lenin
3595: PPUSH
3596: CALL_OW 500
// SetBName ( ru_east_dep , dzierz ) ;
3600: LD_INT 52
3602: PPUSH
3603: LD_STRING dzierz
3605: PPUSH
3606: CALL_OW 500
// SetBName ( ru_north_dep , borodin ) ;
3610: LD_INT 120
3612: PPUSH
3613: LD_STRING borodin
3615: PPUSH
3616: CALL_OW 500
// SetBName ( ru_west_dep , bucharin ) ;
3620: LD_INT 2
3622: PPUSH
3623: LD_STRING bucharin
3625: PPUSH
3626: CALL_OW 500
// end ;
3630: LD_VAR 0 1
3634: RET
// export morozov , ru_staff , officer1 , officer2 ; export function PrepareMorozovStaff ; begin
3635: LD_INT 0
3637: PPUSH
// uc_side := 3 ;
3638: LD_ADDR_OWVAR 20
3642: PUSH
3643: LD_INT 3
3645: ST_TO_ADDR
// uc_nation := 3 ;
3646: LD_ADDR_OWVAR 21
3650: PUSH
3651: LD_INT 3
3653: ST_TO_ADDR
// ru_staff := [ ] ;
3654: LD_ADDR_EXP 14
3658: PUSH
3659: EMPTY
3660: ST_TO_ADDR
// morozov := NewCharacter ( Morozov ) ;
3661: LD_ADDR_EXP 13
3665: PUSH
3666: LD_STRING Morozov
3668: PPUSH
3669: CALL_OW 25
3673: ST_TO_ADDR
// PlaceHumanInUnit ( morozov , ru_m2_dep ) ;
3674: LD_EXP 13
3678: PPUSH
3679: LD_INT 133
3681: PPUSH
3682: CALL_OW 52
// ru_staff := ru_staff ^ morozov ;
3686: LD_ADDR_EXP 14
3690: PUSH
3691: LD_EXP 14
3695: PUSH
3696: LD_EXP 13
3700: ADD
3701: ST_TO_ADDR
// hc_gallery :=  ;
3702: LD_ADDR_OWVAR 33
3706: PUSH
3707: LD_STRING 
3709: ST_TO_ADDR
// hc_name := Yuri Kowass ;
3710: LD_ADDR_OWVAR 26
3714: PUSH
3715: LD_STRING Yuri Kowass
3717: ST_TO_ADDR
// hc_skills := [ 8 , 3 , 1 , 4 ] ;
3718: LD_ADDR_OWVAR 31
3722: PUSH
3723: LD_INT 8
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 1
3731: PUSH
3732: LD_INT 4
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3741: LD_ADDR_OWVAR 29
3745: PUSH
3746: LD_INT 9
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: ST_TO_ADDR
// officer1 := CreateHuman ;
3756: LD_ADDR_EXP 15
3760: PUSH
3761: CALL_OW 44
3765: ST_TO_ADDR
// PlaceHumanInUnit ( officer1 , ru_m2_dep ) ;
3766: LD_EXP 15
3770: PPUSH
3771: LD_INT 133
3773: PPUSH
3774: CALL_OW 52
// ru_staff := ru_staff ^ officer1 ;
3778: LD_ADDR_EXP 14
3782: PUSH
3783: LD_EXP 14
3787: PUSH
3788: LD_EXP 15
3792: ADD
3793: ST_TO_ADDR
// hc_gallery :=  ;
3794: LD_ADDR_OWVAR 33
3798: PUSH
3799: LD_STRING 
3801: ST_TO_ADDR
// hc_name := Wasilij Zaicev ;
3802: LD_ADDR_OWVAR 26
3806: PUSH
3807: LD_STRING Wasilij Zaicev
3809: ST_TO_ADDR
// hc_class := class_sniper ;
3810: LD_ADDR_OWVAR 28
3814: PUSH
3815: LD_INT 5
3817: ST_TO_ADDR
// hc_skills := [ 10 , 5 , 3 , 1 ] ;
3818: LD_ADDR_OWVAR 31
3822: PUSH
3823: LD_INT 10
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: LD_INT 3
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
3841: LD_ADDR_OWVAR 29
3845: PUSH
3846: LD_INT 12
3848: PUSH
3849: LD_INT 12
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: ST_TO_ADDR
// officer2 := CreateHuman ;
3856: LD_ADDR_EXP 16
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( officer2 , ru_m2_dep ) ;
3866: LD_EXP 16
3870: PPUSH
3871: LD_INT 133
3873: PPUSH
3874: CALL_OW 52
// ru_staff := ru_staff ^ officer1 ;
3878: LD_ADDR_EXP 14
3882: PUSH
3883: LD_EXP 14
3887: PUSH
3888: LD_EXP 15
3892: ADD
3893: ST_TO_ADDR
// end ;
3894: LD_VAR 0 1
3898: RET
// export function PrepareBase ( base , area , power ) ; var side , c , d , i , p , list , skill , un , veh , towers , pep , crane_allow , hg_allow , vehs ; begin
3899: LD_INT 0
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
3910: PPUSH
3911: PPUSH
3912: PPUSH
3913: PPUSH
3914: PPUSH
3915: PPUSH
// side := GetSide ( base ) ;
3916: LD_ADDR_VAR 0 5
3920: PUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: CALL_OW 255
3930: ST_TO_ADDR
// case power of 0 :
3931: LD_VAR 0 3
3935: PUSH
3936: LD_INT 0
3938: DOUBLE
3939: EQUAL
3940: IFTRUE 3944
3942: GO 3978
3944: POP
// begin pep := [ ] ;
3945: LD_ADDR_VAR 0 15
3949: PUSH
3950: EMPTY
3951: ST_TO_ADDR
// vehs := 0 ;
3952: LD_ADDR_VAR 0 18
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// crane_allow := false ;
3960: LD_ADDR_VAR 0 16
3964: PUSH
3965: LD_INT 0
3967: ST_TO_ADDR
// hg_allow := false ;
3968: LD_ADDR_VAR 0 17
3972: PUSH
3973: LD_INT 0
3975: ST_TO_ADDR
// end ; 1 :
3976: GO 4161
3978: LD_INT 1
3980: DOUBLE
3981: EQUAL
3982: IFTRUE 3986
3984: GO 4036
3986: POP
// begin pep := [ class_soldier , class_engineer , class_scientistic , class_bazooker ] ;
3987: LD_ADDR_VAR 0 15
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: LD_INT 4
4000: PUSH
4001: LD_INT 9
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: ST_TO_ADDR
// vehs := 1 ;
4010: LD_ADDR_VAR 0 18
4014: PUSH
4015: LD_INT 1
4017: ST_TO_ADDR
// crane_allow := false ;
4018: LD_ADDR_VAR 0 16
4022: PUSH
4023: LD_INT 0
4025: ST_TO_ADDR
// hg_allow := false ;
4026: LD_ADDR_VAR 0 17
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// end ; 2 :
4034: GO 4161
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4098
4044: POP
// begin pep := [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_bazooker ] ;
4045: LD_ADDR_VAR 0 15
4049: PUSH
4050: LD_INT 1
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: LD_INT 9
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: ST_TO_ADDR
// vehs := 3 ;
4072: LD_ADDR_VAR 0 18
4076: PUSH
4077: LD_INT 3
4079: ST_TO_ADDR
// crane_allow := false ;
4080: LD_ADDR_VAR 0 16
4084: PUSH
4085: LD_INT 0
4087: ST_TO_ADDR
// hg_allow := true ;
4088: LD_ADDR_VAR 0 17
4092: PUSH
4093: LD_INT 1
4095: ST_TO_ADDR
// end ; 3 :
4096: GO 4161
4098: LD_INT 3
4100: DOUBLE
4101: EQUAL
4102: IFTRUE 4106
4104: GO 4160
4106: POP
// begin pep := [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_bazooker ] ;
4107: LD_ADDR_VAR 0 15
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 4
4123: PUSH
4124: LD_INT 9
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// vehs := 5 ;
4134: LD_ADDR_VAR 0 18
4138: PUSH
4139: LD_INT 5
4141: ST_TO_ADDR
// crane_allow := true ;
4142: LD_ADDR_VAR 0 16
4146: PUSH
4147: LD_INT 1
4149: ST_TO_ADDR
// hg_allow := true ;
4150: LD_ADDR_VAR 0 17
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// end ; end ;
4158: GO 4161
4160: POP
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
4161: LD_ADDR_VAR 0 11
4165: PUSH
4166: LD_INT 4
4168: PUSH
4169: LD_INT 5
4171: PUSH
4172: LD_INT 6
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_OWVAR 67
4184: ARRAY
4185: ST_TO_ADDR
// case Difficulty of 1 :
4186: LD_OWVAR 67
4190: PUSH
4191: LD_INT 1
4193: DOUBLE
4194: EQUAL
4195: IFTRUE 4199
4197: GO 4252
4199: POP
// begin if hg_allow then
4200: LD_VAR 0 17
4204: IFFALSE 4231
// list := [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_heavy_gun ] else
4206: LD_ADDR_VAR 0 10
4210: PUSH
4211: LD_INT 43
4213: PUSH
4214: LD_INT 44
4216: PUSH
4217: LD_INT 45
4219: PUSH
4220: LD_INT 46
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: ST_TO_ADDR
4229: GO 4250
// list := [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ;
4231: LD_ADDR_VAR 0 10
4235: PUSH
4236: LD_INT 43
4238: PUSH
4239: LD_INT 44
4241: PUSH
4242: LD_INT 45
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: ST_TO_ADDR
// end ; 2 :
4250: GO 4387
4252: LD_INT 2
4254: DOUBLE
4255: EQUAL
4256: IFTRUE 4260
4258: GO 4321
4260: POP
// begin if hg_allow then
4261: LD_VAR 0 17
4265: IFFALSE 4296
// list := [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun ] else
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: LD_INT 43
4274: PUSH
4275: LD_INT 44
4277: PUSH
4278: LD_INT 45
4280: PUSH
4281: LD_INT 45
4283: PUSH
4284: LD_INT 46
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: ST_TO_ADDR
4294: GO 4319
// list := [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_rocket_launcher ] ;
4296: LD_ADDR_VAR 0 10
4300: PUSH
4301: LD_INT 43
4303: PUSH
4304: LD_INT 44
4306: PUSH
4307: LD_INT 45
4309: PUSH
4310: LD_INT 45
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
// end ; 3 :
4319: GO 4387
4321: LD_INT 3
4323: DOUBLE
4324: EQUAL
4325: IFTRUE 4329
4327: GO 4386
4329: POP
// begin if hg_allow then
4330: LD_VAR 0 17
4334: IFFALSE 4361
// list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket_launcher , ru_heavy_gun ] else
4336: LD_ADDR_VAR 0 10
4340: PUSH
4341: LD_INT 46
4343: PUSH
4344: LD_INT 45
4346: PUSH
4347: LD_INT 45
4349: PUSH
4350: LD_INT 46
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: ST_TO_ADDR
4359: GO 4384
// list := [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_rocket_launcher ] ;
4361: LD_ADDR_VAR 0 10
4365: PUSH
4366: LD_INT 43
4368: PUSH
4369: LD_INT 44
4371: PUSH
4372: LD_INT 45
4374: PUSH
4375: LD_INT 45
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// end ; end ;
4384: GO 4387
4386: POP
// PlaceWeaponOnTowers ( base , list ) ;
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_VAR 0 10
4396: PPUSH
4397: CALL 987 0 2
// uc_side := side ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_VAR 0 5
4410: ST_TO_ADDR
// uc_nation := nation_russian ;
4411: LD_ADDR_OWVAR 21
4415: PUSH
4416: LD_INT 3
4418: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
4419: LD_ADDR_VAR 0 14
4423: PUSH
4424: LD_INT 22
4426: PUSH
4427: LD_VAR 0 5
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 30
4438: PUSH
4439: LD_INT 32
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: ST_TO_ADDR
// for i = 1 to towers do
4455: LD_ADDR_VAR 0 8
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 14
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4503
// PlaceHumanInUnit ( CreateHumanWithClass ( 1 , skill ) , towers [ i ] ) ;
4473: LD_INT 1
4475: PPUSH
4476: LD_VAR 0 11
4480: PPUSH
4481: CALL 25 0 2
4485: PPUSH
4486: LD_VAR 0 14
4490: PUSH
4491: LD_VAR 0 8
4495: ARRAY
4496: PPUSH
4497: CALL_OW 52
4501: GO 4470
4503: POP
4504: POP
// if GetSide ( base ) = 3 or GetSide ( base ) = 6 then
4505: LD_VAR 0 1
4509: PPUSH
4510: CALL_OW 255
4514: PUSH
4515: LD_INT 3
4517: EQUAL
4518: PUSH
4519: LD_VAR 0 1
4523: PPUSH
4524: CALL_OW 255
4528: PUSH
4529: LD_INT 6
4531: EQUAL
4532: OR
4533: IFFALSE 4562
// c := [ 2 , 3 , 4 ] [ Difficulty ] else
4535: LD_ADDR_VAR 0 6
4539: PUSH
4540: LD_INT 2
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 4
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: PUSH
4554: LD_OWVAR 67
4558: ARRAY
4559: ST_TO_ADDR
4560: GO 4587
// c := [ 1 , 2 , 3 ] [ Difficulty ] ;
4562: LD_ADDR_VAR 0 6
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 2
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_OWVAR 67
4585: ARRAY
4586: ST_TO_ADDR
// for p = 1 to pep do
4587: LD_ADDR_VAR 0 9
4591: PUSH
4592: DOUBLE
4593: LD_INT 1
4595: DEC
4596: ST_TO_ADDR
4597: LD_VAR 0 15
4601: PUSH
4602: FOR_TO
4603: IFFALSE 4716
// begin if p = 1 or p > 4 then
4605: LD_VAR 0 9
4609: PUSH
4610: LD_INT 1
4612: EQUAL
4613: PUSH
4614: LD_VAR 0 9
4618: PUSH
4619: LD_INT 4
4621: GREATER
4622: OR
4623: IFFALSE 4635
// d := 1 else
4625: LD_ADDR_VAR 0 7
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
4633: GO 4643
// d := 0 ;
4635: LD_ADDR_VAR 0 7
4639: PUSH
4640: LD_INT 0
4642: ST_TO_ADDR
// for i = 1 to c + d do
4643: LD_ADDR_VAR 0 8
4647: PUSH
4648: DOUBLE
4649: LD_INT 1
4651: DEC
4652: ST_TO_ADDR
4653: LD_VAR 0 6
4657: PUSH
4658: LD_VAR 0 7
4662: PLUS
4663: PUSH
4664: FOR_TO
4665: IFFALSE 4712
// begin un := CreateHumanWithClass ( pep [ p ] , skill ) ;
4667: LD_ADDR_VAR 0 12
4671: PUSH
4672: LD_VAR 0 15
4676: PUSH
4677: LD_VAR 0 9
4681: ARRAY
4682: PPUSH
4683: LD_VAR 0 11
4687: PPUSH
4688: CALL 25 0 2
4692: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4693: LD_VAR 0 12
4697: PPUSH
4698: LD_VAR 0 2
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 49
// end ;
4710: GO 4664
4712: POP
4713: POP
// end ;
4714: GO 4602
4716: POP
4717: POP
// if crane_allow then
4718: LD_VAR 0 16
4722: IFFALSE 4809
// begin vc_chassis := ru_medium_tracked ;
4724: LD_ADDR_OWVAR 37
4728: PUSH
4729: LD_INT 22
4731: ST_TO_ADDR
// vc_engine := engine_combustion ;
4732: LD_ADDR_OWVAR 39
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// vc_control := control_manual ;
4740: LD_ADDR_OWVAR 38
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// vc_weapon := ru_crane ;
4748: LD_ADDR_OWVAR 40
4752: PUSH
4753: LD_INT 52
4755: ST_TO_ADDR
// for i = 1 to Difficulty - 1 do
4756: LD_ADDR_VAR 0 8
4760: PUSH
4761: DOUBLE
4762: LD_INT 1
4764: DEC
4765: ST_TO_ADDR
4766: LD_OWVAR 67
4770: PUSH
4771: LD_INT 1
4773: MINUS
4774: PUSH
4775: FOR_TO
4776: IFFALSE 4807
// begin veh := CreateVehicle ;
4778: LD_ADDR_VAR 0 13
4782: PUSH
4783: CALL_OW 45
4787: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4788: LD_VAR 0 13
4792: PPUSH
4793: LD_VAR 0 2
4797: PPUSH
4798: LD_INT 0
4800: PPUSH
4801: CALL_OW 49
// end ;
4805: GO 4775
4807: POP
4808: POP
// end ; if vehs then
4809: LD_VAR 0 18
4813: IFFALSE 4955
// for i = 1 to vehs do
4815: LD_ADDR_VAR 0 8
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_VAR 0 18
4829: PUSH
4830: FOR_TO
4831: IFFALSE 4953
// begin vc_engine := engine_combustion ;
4833: LD_ADDR_OWVAR 39
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// vc_control := control_manual ;
4841: LD_ADDR_OWVAR 38
4845: PUSH
4846: LD_INT 1
4848: ST_TO_ADDR
// vc_weapon := list [ Rand ( 1 , list ) ] ;
4849: LD_ADDR_OWVAR 40
4853: PUSH
4854: LD_VAR 0 10
4858: PUSH
4859: LD_INT 1
4861: PPUSH
4862: LD_VAR 0 10
4866: PPUSH
4867: CALL_OW 12
4871: ARRAY
4872: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4873: LD_OWVAR 40
4877: PUSH
4878: LD_INT 46
4880: EQUAL
4881: IFFALSE 4893
// vc_chassis := ru_heavy_tracked else
4883: LD_ADDR_OWVAR 37
4887: PUSH
4888: LD_INT 24
4890: ST_TO_ADDR
4891: GO 4924
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled , ru_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
4893: LD_ADDR_OWVAR 37
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 21
4903: PUSH
4904: LD_INT 24
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 3
4917: PPUSH
4918: CALL_OW 12
4922: ARRAY
4923: ST_TO_ADDR
// veh := CreateVehicle ;
4924: LD_ADDR_VAR 0 13
4928: PUSH
4929: CALL_OW 45
4933: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4934: LD_VAR 0 13
4938: PPUSH
4939: LD_VAR 0 2
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 49
// end ;
4951: GO 4830
4953: POP
4954: POP
// end ;
4955: LD_VAR 0 4
4959: RET
// every 0 0$01 do var filter , i ;
4960: GO 4962
4962: DISABLE
4963: LD_INT 0
4965: PPUSH
4966: PPUSH
// begin filter := FilterAllUnits ( [ f_type , unit_building ] ) ;
4967: LD_ADDR_VAR 0 1
4971: PUSH
4972: LD_INT 21
4974: PUSH
4975: LD_INT 3
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 69
4986: ST_TO_ADDR
// for i in filter do
4987: LD_ADDR_VAR 0 2
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: FOR_IN
4998: IFFALSE 5031
// SetBLevel ( i , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_INT 5
5007: PUSH
5008: LD_INT 6
5010: PUSH
5011: LD_INT 7
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: PUSH
5019: LD_OWVAR 67
5023: ARRAY
5024: PPUSH
5025: CALL_OW 241
5029: GO 4997
5031: POP
5032: POP
// end ;
5033: PPOPN 2
5035: END
// export function ProtectArea ( un , base ) ; var range , enemy ; begin
5036: LD_INT 0
5038: PPUSH
5039: PPUSH
5040: PPUSH
// if un = false then
5041: LD_VAR 0 1
5045: PUSH
5046: LD_INT 0
5048: EQUAL
5049: IFFALSE 5061
// result := false else
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 0
5058: ST_TO_ADDR
5059: GO 5299
// begin range := [ 41 , 43 , 45 ] [ Difficulty ] ;
5061: LD_ADDR_VAR 0 4
5065: PUSH
5066: LD_INT 41
5068: PUSH
5069: LD_INT 43
5071: PUSH
5072: LD_INT 45
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_OWVAR 67
5084: ARRAY
5085: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_enemy , GetSide ( un ) ] , [ f_distxy , GetX ( base ) , GetY ( base ) , range ] ] ) > 0 then
5086: LD_INT 81
5088: PUSH
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 255
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 92
5105: PUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 250
5115: PUSH
5116: LD_VAR 0 2
5120: PPUSH
5121: CALL_OW 251
5125: PUSH
5126: LD_VAR 0 4
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PPUSH
5141: CALL_OW 69
5145: PUSH
5146: LD_INT 0
5148: GREATER
5149: IFFALSE 5242
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( un ) ] , [ f_distxy , GetX ( base ) , GetY ( base ) , range ] ] ) ;
5151: LD_ADDR_VAR 0 5
5155: PUSH
5156: LD_INT 81
5158: PUSH
5159: LD_VAR 0 1
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 92
5175: PUSH
5176: LD_VAR 0 2
5180: PPUSH
5181: CALL_OW 250
5185: PUSH
5186: LD_VAR 0 2
5190: PPUSH
5191: CALL_OW 251
5195: PUSH
5196: LD_VAR 0 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
5216: LD_VAR 0 1
5220: PPUSH
5221: LD_VAR 0 5
5225: PPUSH
5226: LD_VAR 0 1
5230: PPUSH
5231: CALL_OW 74
5235: PPUSH
5236: CALL_OW 115
// end else
5240: GO 5299
// if GetDistUnits ( un , base ) > 8 then
5242: LD_VAR 0 1
5246: PPUSH
5247: LD_VAR 0 2
5251: PPUSH
5252: CALL_OW 296
5256: PUSH
5257: LD_INT 8
5259: GREATER
5260: IFFALSE 5299
// ComMoveXY ( un , GetX ( base ) - 2 , GetY ( base ) - 2 ) ;
5262: LD_VAR 0 1
5266: PPUSH
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 250
5276: PUSH
5277: LD_INT 2
5279: MINUS
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 251
5290: PUSH
5291: LD_INT 2
5293: MINUS
5294: PPUSH
5295: CALL_OW 111
// end ; end ;
5299: LD_VAR 0 3
5303: RET
// export jaszyn ; export function PrepareJaszyn ; begin
5304: LD_INT 0
5306: PPUSH
// uc_side := 3 ;
5307: LD_ADDR_OWVAR 20
5311: PUSH
5312: LD_INT 3
5314: ST_TO_ADDR
// uc_nation := 3 ;
5315: LD_ADDR_OWVAR 21
5319: PUSH
5320: LD_INT 3
5322: ST_TO_ADDR
// jaszyn := NewCharacter ( Yashyn ) ;
5323: LD_ADDR_EXP 17
5327: PUSH
5328: LD_STRING Yashyn
5330: PPUSH
5331: CALL_OW 25
5335: ST_TO_ADDR
// end ;
5336: LD_VAR 0 1
5340: RET
// export function AddAttack ( val ) ; var veh , un , i ; begin
5341: LD_INT 0
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
// uc_side := 4 ;
5347: LD_ADDR_OWVAR 20
5351: PUSH
5352: LD_INT 4
5354: ST_TO_ADDR
// uc_nation := 3 ;
5355: LD_ADDR_OWVAR 21
5359: PUSH
5360: LD_INT 3
5362: ST_TO_ADDR
// for i = 1 to val do
5363: LD_ADDR_VAR 0 5
5367: PUSH
5368: DOUBLE
5369: LD_INT 1
5371: DEC
5372: ST_TO_ADDR
5373: LD_VAR 0 1
5377: PUSH
5378: FOR_TO
5379: IFFALSE 5522
// begin vc_chassis := ru_medium_tracked ;
5381: LD_ADDR_OWVAR 37
5385: PUSH
5386: LD_INT 22
5388: ST_TO_ADDR
// vc_engine := engine_combustion ;
5389: LD_ADDR_OWVAR 39
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// vc_control := control_manual ;
5397: LD_ADDR_OWVAR 38
5401: PUSH
5402: LD_INT 1
5404: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ Rand ( 1 , 3 ) ] ;
5405: LD_ADDR_OWVAR 40
5409: PUSH
5410: LD_INT 43
5412: PUSH
5413: LD_INT 44
5415: PUSH
5416: LD_INT 45
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 1
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 12
5434: ARRAY
5435: ST_TO_ADDR
// veh := CreateVehicle ;
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: CALL_OW 45
5445: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5446: LD_ADDR_VAR 0 4
5450: PUSH
5451: LD_INT 3
5453: PPUSH
5454: LD_INT 4
5456: PUSH
5457: LD_INT 5
5459: PUSH
5460: LD_INT 6
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: LD_OWVAR 67
5472: ARRAY
5473: PPUSH
5474: CALL 25 0 2
5478: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 2
5486: PPUSH
5487: CALL_OW 233
// PlaceUnitArea ( veh , ru_north_spawn , false ) ;
5491: LD_VAR 0 3
5495: PPUSH
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5506: LD_VAR 0 4
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 52
// end ;
5520: GO 5378
5522: POP
5523: POP
// end ;
5524: LD_VAR 0 2
5528: RET
// every 0 0$01 do var i , enemy , filter ;
5529: GO 5531
5531: DISABLE
5532: LD_INT 0
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin enable ;
5537: ENABLE
// filter := FilterAllUnits ( [ f_side , 4 ] ) ;
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: LD_INT 22
5545: PUSH
5546: LD_INT 4
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
5558: LD_ADDR_VAR 0 2
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 2
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL_OW 69
5577: ST_TO_ADDR
// if filter > 0 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 0
5585: GREATER
5586: IFFALSE 5646
// for i = 1 to filter do
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: DOUBLE
5594: LD_INT 1
5596: DEC
5597: ST_TO_ADDR
5598: LD_VAR 0 3
5602: PUSH
5603: FOR_TO
5604: IFFALSE 5644
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
5606: LD_VAR 0 3
5610: PUSH
5611: LD_VAR 0 1
5615: ARRAY
5616: PPUSH
5617: LD_VAR 0 2
5621: PPUSH
5622: LD_VAR 0 3
5626: PUSH
5627: LD_VAR 0 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 74
5637: PPUSH
5638: CALL_OW 115
5642: GO 5603
5644: POP
5645: POP
// end ;
5646: PPOPN 3
5648: END
// export function AddUnits ( val , area ) ; var i ; begin
5649: LD_INT 0
5651: PPUSH
5652: PPUSH
// uc_side := 3 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 3
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// for i = 1 to val do
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: DOUBLE
5675: LD_INT 1
5677: DEC
5678: ST_TO_ADDR
5679: LD_VAR 0 1
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5729
// PlaceUnitArea ( CreateHumanWithClass ( class_bazooker , [ 6 , 7 , 8 ] [ Difficulty ] ) , area , false ) ;
5687: LD_INT 9
5689: PPUSH
5690: LD_INT 6
5692: PUSH
5693: LD_INT 7
5695: PUSH
5696: LD_INT 8
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: PUSH
5704: LD_OWVAR 67
5708: ARRAY
5709: PPUSH
5710: CALL 25 0 2
5714: PPUSH
5715: LD_VAR 0 2
5719: PPUSH
5720: LD_INT 0
5722: PPUSH
5723: CALL_OW 49
5727: GO 5684
5729: POP
5730: POP
// for i = 1 to 3 do
5731: LD_ADDR_VAR 0 4
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_INT 3
5743: PUSH
5744: FOR_TO
5745: IFFALSE 5789
// PlaceUnitArea ( CreateHumanWithClass ( class_mechanic , [ 6 , 7 , 8 ] [ Difficulty ] ) , area , false ) ;
5747: LD_INT 3
5749: PPUSH
5750: LD_INT 6
5752: PUSH
5753: LD_INT 7
5755: PUSH
5756: LD_INT 8
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: LD_OWVAR 67
5768: ARRAY
5769: PPUSH
5770: CALL 25 0 2
5774: PPUSH
5775: LD_VAR 0 2
5779: PPUSH
5780: LD_INT 0
5782: PPUSH
5783: CALL_OW 49
5787: GO 5744
5789: POP
5790: POP
// end ;
5791: LD_VAR 0 3
5795: RET
// every 0 0$30 trigger ru_east_dep = false or GetSide ( ru_east_dep ) <> 7 do
5796: LD_INT 52
5798: PUSH
5799: LD_INT 0
5801: EQUAL
5802: PUSH
5803: LD_INT 52
5805: PPUSH
5806: CALL_OW 255
5810: PUSH
5811: LD_INT 7
5813: NONEQUAL
5814: OR
5815: IFFALSE 5847
5817: GO 5819
5819: DISABLE
// AddUnits ( [ 6 , 8 , 9 ] [ Difficulty ] , ru3_spawn ) ; end_of_file
5820: LD_INT 6
5822: PUSH
5823: LD_INT 8
5825: PUSH
5826: LD_INT 9
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: PUSH
5834: LD_OWVAR 67
5838: ARRAY
5839: PPUSH
5840: LD_INT 7
5842: PPUSH
5843: CALL 5649 0 2
5847: END
// export ru6_sold , ru6_eng , ru6_mech , ru6_sci , ru6_bazz , ru6_veh , ru6_lab , ru6_fac , ru6_blist , ru6_bweap ; every 0 0$01 trigger FilterAllUnits ( [ f_side , 6 ] ) > 0 do var i , filter , list , p , l , range , al_build , buildings , towers , is_hurt , un , vehicles , cranes ;
5848: LD_INT 22
5850: PUSH
5851: LD_INT 6
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 69
5862: PUSH
5863: LD_INT 0
5865: GREATER
5866: IFFALSE 9557
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// begin enable ;
5886: ENABLE
// ru6_sold := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 1 ] ] ) ;
5887: LD_ADDR_EXP 18
5891: PUSH
5892: LD_INT 22
5894: PUSH
5895: LD_INT 6
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: ST_TO_ADDR
// ru6_eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
5921: LD_ADDR_EXP 19
5925: PUSH
5926: LD_INT 22
5928: PUSH
5929: LD_INT 6
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 25
5938: PUSH
5939: LD_INT 2
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 69
5954: ST_TO_ADDR
// ru6_mech := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) ;
5955: LD_ADDR_EXP 20
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_INT 6
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 25
5972: PUSH
5973: LD_INT 3
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PPUSH
5984: CALL_OW 69
5988: ST_TO_ADDR
// ru6_sci := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) ;
5989: LD_ADDR_EXP 21
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 6
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 25
6006: PUSH
6007: LD_INT 4
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: ST_TO_ADDR
// ru6_bazz := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 9 ] ] ) ;
6023: LD_ADDR_EXP 22
6027: PUSH
6028: LD_INT 22
6030: PUSH
6031: LD_INT 6
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 25
6040: PUSH
6041: LD_INT 9
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PPUSH
6052: CALL_OW 69
6056: ST_TO_ADDR
// ru6_veh := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
6057: LD_ADDR_EXP 23
6061: PUSH
6062: LD_INT 22
6064: PUSH
6065: LD_INT 6
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 21
6074: PUSH
6075: LD_INT 2
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 34
6087: PUSH
6088: LD_INT 52
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: PPUSH
6104: CALL_OW 69
6108: ST_TO_ADDR
// ru6_lab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
6109: LD_ADDR_EXP 24
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_INT 6
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 2
6126: PUSH
6127: LD_INT 30
6129: PUSH
6130: LD_INT 8
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 30
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PPUSH
6156: CALL_OW 69
6160: ST_TO_ADDR
// ru6_fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 2
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 30
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PPUSH
6208: CALL_OW 69
6212: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
6213: LD_ADDR_VAR 0 9
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_INT 6
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 2
6230: PUSH
6231: LD_INT 30
6233: PUSH
6234: LD_INT 31
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 30
6243: PUSH
6244: LD_INT 32
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6265: LD_ADDR_VAR 0 8
6269: PUSH
6270: LD_INT 22
6272: PUSH
6273: LD_INT 6
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 30
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 30
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: ST_TO_ADDR
// al_build := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) ;
6317: LD_ADDR_VAR 0 7
6321: PUSH
6322: LD_INT 22
6324: PUSH
6325: LD_INT 6
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 21
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PPUSH
6346: CALL_OW 69
6350: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
6351: LD_ADDR_VAR 0 12
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 21
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 69
6384: ST_TO_ADDR
// is_hurt := [ 500 , 510 , 520 ] [ Difficulty ] ;
6385: LD_ADDR_VAR 0 10
6389: PUSH
6390: LD_INT 500
6392: PUSH
6393: LD_INT 510
6395: PUSH
6396: LD_INT 520
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: LD_OWVAR 67
6408: ARRAY
6409: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) > 0 and ru6_fac > 0 then
6410: LD_INT 22
6412: PUSH
6413: LD_INT 6
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 35
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 2
6432: PUSH
6433: LD_INT 30
6435: PUSH
6436: LD_INT 32
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 30
6445: PUSH
6446: LD_INT 33
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 69
6467: PUSH
6468: LD_INT 0
6470: GREATER
6471: PUSH
6472: LD_EXP 25
6476: PUSH
6477: LD_INT 0
6479: GREATER
6480: AND
6481: IFFALSE 6592
// begin filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6483: LD_ADDR_VAR 0 2
6487: PUSH
6488: LD_INT 22
6490: PUSH
6491: LD_INT 6
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 35
6500: PUSH
6501: LD_INT 0
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 2
6510: PUSH
6511: LD_INT 30
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 33
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: PPUSH
6541: CALL_OW 69
6545: ST_TO_ADDR
// for i = 1 to filter do
6546: LD_ADDR_VAR 0 1
6550: PUSH
6551: DOUBLE
6552: LD_INT 1
6554: DEC
6555: ST_TO_ADDR
6556: LD_VAR 0 2
6560: PUSH
6561: FOR_TO
6562: IFFALSE 6590
// ComPlaceWeapon ( filter [ i ] , ru6_bweap [ 1 ] ) ;
6564: LD_VAR 0 2
6568: PUSH
6569: LD_VAR 0 1
6573: ARRAY
6574: PPUSH
6575: LD_EXP 27
6579: PUSH
6580: LD_INT 1
6582: ARRAY
6583: PPUSH
6584: CALL_OW 148
6588: GO 6561
6590: POP
6591: POP
// end ; if UnitsInside ( ru6_fac [ 1 ] ) = 0 and BuildingStatus ( ru6_fac ) = bs_working then
6592: LD_EXP 25
6596: PUSH
6597: LD_INT 1
6599: ARRAY
6600: PPUSH
6601: CALL_OW 313
6605: PUSH
6606: LD_INT 0
6608: EQUAL
6609: PUSH
6610: LD_EXP 25
6614: PPUSH
6615: CALL_OW 461
6619: PUSH
6620: LD_INT 3
6622: EQUAL
6623: AND
6624: IFFALSE 6639
// ComCancel ( ru6_fac [ 1 ] ) ;
6626: LD_EXP 25
6630: PUSH
6631: LD_INT 1
6633: ARRAY
6634: PPUSH
6635: CALL_OW 127
// if ru6_sold > 0 then
6639: LD_EXP 18
6643: PUSH
6644: LD_INT 0
6646: GREATER
6647: IFFALSE 7172
// begin for i = 1 to ru6_sold do
6649: LD_ADDR_VAR 0 1
6653: PUSH
6654: DOUBLE
6655: LD_INT 1
6657: DEC
6658: ST_TO_ADDR
6659: LD_EXP 18
6663: PUSH
6664: FOR_TO
6665: IFFALSE 7170
// begin if GetLives ( ru6_sold [ i ] ) <= is_hurt then
6667: LD_EXP 18
6671: PUSH
6672: LD_VAR 0 1
6676: ARRAY
6677: PPUSH
6678: CALL_OW 256
6682: PUSH
6683: LD_VAR 0 10
6687: LESSEQUAL
6688: IFFALSE 6761
// begin if IsInUnit ( ru6_sold [ i ] ) then
6690: LD_EXP 18
6694: PUSH
6695: LD_VAR 0 1
6699: ARRAY
6700: PPUSH
6701: CALL_OW 310
6705: IFFALSE 6722
// ComExitBuilding ( ru6_sold [ i ] ) ;
6707: LD_EXP 18
6711: PUSH
6712: LD_VAR 0 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 122
// ComMoveXY ( ru6_sold [ i ] , GetX ( ru_west_dep ) - 1 , GetY ( ru_west_dep ) + 2 ) ;
6722: LD_EXP 18
6726: PUSH
6727: LD_VAR 0 1
6731: ARRAY
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 250
6740: PUSH
6741: LD_INT 1
6743: MINUS
6744: PPUSH
6745: LD_INT 2
6747: PPUSH
6748: CALL_OW 251
6752: PUSH
6753: LD_INT 2
6755: PLUS
6756: PPUSH
6757: CALL_OW 111
// end ; if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 and UnitFilter ( ru6_sold , [ f_outside ] ) = 0 then
6761: LD_VAR 0 9
6765: PPUSH
6766: LD_INT 24
6768: PUSH
6769: LD_INT 300
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 58
6778: PUSH
6779: EMPTY
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 72
6790: PUSH
6791: LD_INT 0
6793: GREATER
6794: PUSH
6795: LD_EXP 18
6799: PPUSH
6800: LD_INT 56
6802: PUSH
6803: EMPTY
6804: LIST
6805: PPUSH
6806: CALL_OW 72
6810: PUSH
6811: LD_INT 0
6813: EQUAL
6814: AND
6815: IFFALSE 6849
// begin filter := UnitsInside ( buildings [ 1 ] ) ;
6817: LD_ADDR_VAR 0 2
6821: PUSH
6822: LD_VAR 0 8
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: CALL_OW 313
6835: ST_TO_ADDR
// ComExitBuilding ( filter [ 1 ] ) ;
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 1
6843: ARRAY
6844: PPUSH
6845: CALL_OW 122
// end ; if GetLives ( ru6_sold [ i ] ) > is_hurt and not HasTask ( ru6_sold [ i ] ) and not IsInUnit ( ru6_sold [ i ] ) then
6849: LD_EXP 18
6853: PUSH
6854: LD_VAR 0 1
6858: ARRAY
6859: PPUSH
6860: CALL_OW 256
6864: PUSH
6865: LD_VAR 0 10
6869: GREATER
6870: PUSH
6871: LD_EXP 18
6875: PUSH
6876: LD_VAR 0 1
6880: ARRAY
6881: PPUSH
6882: CALL_OW 314
6886: NOT
6887: AND
6888: PUSH
6889: LD_EXP 18
6893: PUSH
6894: LD_VAR 0 1
6898: ARRAY
6899: PPUSH
6900: CALL_OW 310
6904: NOT
6905: AND
6906: IFFALSE 7168
// begin if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 then
6908: LD_VAR 0 9
6912: PPUSH
6913: LD_INT 24
6915: PUSH
6916: LD_INT 300
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 58
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 72
6937: PUSH
6938: LD_INT 0
6940: GREATER
6941: IFFALSE 6994
// begin ComEnterUnit ( ru6_sold [ i ] , UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) [ 1 ] ) end else
6943: LD_EXP 18
6947: PUSH
6948: LD_VAR 0 1
6952: ARRAY
6953: PPUSH
6954: LD_VAR 0 9
6958: PPUSH
6959: LD_INT 24
6961: PUSH
6962: LD_INT 300
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 58
6971: PUSH
6972: EMPTY
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 72
6983: PUSH
6984: LD_INT 1
6986: ARRAY
6987: PPUSH
6988: CALL_OW 120
6992: GO 7168
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
6994: LD_VAR 0 8
6998: PPUSH
6999: LD_INT 24
7001: PUSH
7002: LD_INT 251
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 72
7013: PUSH
7014: LD_INT 0
7016: GREATER
7017: IFFALSE 7105
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
7019: LD_ADDR_VAR 0 5
7023: PUSH
7024: DOUBLE
7025: LD_INT 1
7027: DEC
7028: ST_TO_ADDR
7029: LD_VAR 0 8
7033: PPUSH
7034: LD_INT 24
7036: PUSH
7037: LD_INT 251
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 72
7048: PUSH
7049: FOR_TO
7050: IFFALSE 7101
// if UnitsInside ( buildings [ l ] ) < 6 then
7052: LD_VAR 0 8
7056: PUSH
7057: LD_VAR 0 5
7061: ARRAY
7062: PPUSH
7063: CALL_OW 313
7067: PUSH
7068: LD_INT 6
7070: LESS
7071: IFFALSE 7099
// ComEnterUnit ( ru6_sold [ i ] , buildings [ l ] ) ;
7073: LD_EXP 18
7077: PUSH
7078: LD_VAR 0 1
7082: ARRAY
7083: PPUSH
7084: LD_VAR 0 8
7088: PUSH
7089: LD_VAR 0 5
7093: ARRAY
7094: PPUSH
7095: CALL_OW 120
7099: GO 7049
7101: POP
7102: POP
// end else
7103: GO 7168
// if GetDistUnits ( ru6_sold [ i ] , ru_west_dep ) >= 12 then
7105: LD_EXP 18
7109: PUSH
7110: LD_VAR 0 1
7114: ARRAY
7115: PPUSH
7116: LD_INT 2
7118: PPUSH
7119: CALL_OW 296
7123: PUSH
7124: LD_INT 12
7126: GREATEREQUAL
7127: IFFALSE 7168
// ComMoveXY ( ru6_sold [ i ] , GetX ( ru_west_dep ) - 1 , GetX ( ru_west_dep ) + 1 ) ;
7129: LD_EXP 18
7133: PUSH
7134: LD_VAR 0 1
7138: ARRAY
7139: PPUSH
7140: LD_INT 2
7142: PPUSH
7143: CALL_OW 250
7147: PUSH
7148: LD_INT 1
7150: MINUS
7151: PPUSH
7152: LD_INT 2
7154: PPUSH
7155: CALL_OW 250
7159: PUSH
7160: LD_INT 1
7162: PLUS
7163: PPUSH
7164: CALL_OW 111
// end ; end ;
7168: GO 6664
7170: POP
7171: POP
// end ; if ru6_bazz > 0 then
7172: LD_EXP 22
7176: PUSH
7177: LD_INT 0
7179: GREATER
7180: IFFALSE 7507
// begin for i = 1 to ru6_bazz do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: DOUBLE
7188: LD_INT 1
7190: DEC
7191: ST_TO_ADDR
7192: LD_EXP 22
7196: PUSH
7197: FOR_TO
7198: IFFALSE 7505
// begin if GetLives ( ru6_bazz ) <= is_hurt then
7200: LD_EXP 22
7204: PPUSH
7205: CALL_OW 256
7209: PUSH
7210: LD_VAR 0 10
7214: LESSEQUAL
7215: IFFALSE 7288
// begin if IsInUnit ( ru6_bazz [ i ] ) then
7217: LD_EXP 22
7221: PUSH
7222: LD_VAR 0 1
7226: ARRAY
7227: PPUSH
7228: CALL_OW 310
7232: IFFALSE 7249
// ComExitBuilding ( ru6_bazz [ i ] ) ;
7234: LD_EXP 22
7238: PUSH
7239: LD_VAR 0 1
7243: ARRAY
7244: PPUSH
7245: CALL_OW 122
// ComMoveXY ( ru6_bazz [ i ] , GetX ( ru_west_dep ) - 1 , GetY ( ru_west_dep ) + 2 ) ;
7249: LD_EXP 22
7253: PUSH
7254: LD_VAR 0 1
7258: ARRAY
7259: PPUSH
7260: LD_INT 2
7262: PPUSH
7263: CALL_OW 250
7267: PUSH
7268: LD_INT 1
7270: MINUS
7271: PPUSH
7272: LD_INT 2
7274: PPUSH
7275: CALL_OW 251
7279: PUSH
7280: LD_INT 2
7282: PLUS
7283: PPUSH
7284: CALL_OW 111
// end ; if GetLives ( ru6_bazz [ i ] ) > is_hurt then
7288: LD_EXP 22
7292: PUSH
7293: LD_VAR 0 1
7297: ARRAY
7298: PPUSH
7299: CALL_OW 256
7303: PUSH
7304: LD_VAR 0 10
7308: GREATER
7309: IFFALSE 7503
// if not IsInUnit ( ru6_bazz [ i ] ) then
7311: LD_EXP 22
7315: PUSH
7316: LD_VAR 0 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 310
7326: NOT
7327: IFFALSE 7503
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
7329: LD_VAR 0 8
7333: PPUSH
7334: LD_INT 24
7336: PUSH
7337: LD_INT 251
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 72
7348: PUSH
7349: LD_INT 0
7351: GREATER
7352: IFFALSE 7440
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
7354: LD_ADDR_VAR 0 5
7358: PUSH
7359: DOUBLE
7360: LD_INT 1
7362: DEC
7363: ST_TO_ADDR
7364: LD_VAR 0 8
7368: PPUSH
7369: LD_INT 24
7371: PUSH
7372: LD_INT 251
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 72
7383: PUSH
7384: FOR_TO
7385: IFFALSE 7436
// if UnitsInside ( buildings [ l ] ) < 6 then
7387: LD_VAR 0 8
7391: PUSH
7392: LD_VAR 0 5
7396: ARRAY
7397: PPUSH
7398: CALL_OW 313
7402: PUSH
7403: LD_INT 6
7405: LESS
7406: IFFALSE 7434
// ComEnterUnit ( ru6_bazz [ i ] , buildings [ l ] ) ;
7408: LD_EXP 22
7412: PUSH
7413: LD_VAR 0 1
7417: ARRAY
7418: PPUSH
7419: LD_VAR 0 8
7423: PUSH
7424: LD_VAR 0 5
7428: ARRAY
7429: PPUSH
7430: CALL_OW 120
7434: GO 7384
7436: POP
7437: POP
// end else
7438: GO 7503
// if GetDistUnits ( ru6_bazz [ i ] , ru_west_dep ) < 12 then
7440: LD_EXP 22
7444: PUSH
7445: LD_VAR 0 1
7449: ARRAY
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 296
7458: PUSH
7459: LD_INT 12
7461: LESS
7462: IFFALSE 7503
// ComMoveXY ( ru6_bazz [ i ] , GetX ( ru_west_dep ) - 1 , GetX ( ru_west_dep ) + 1 ) ;
7464: LD_EXP 22
7468: PUSH
7469: LD_VAR 0 1
7473: ARRAY
7474: PPUSH
7475: LD_INT 2
7477: PPUSH
7478: CALL_OW 250
7482: PUSH
7483: LD_INT 1
7485: MINUS
7486: PPUSH
7487: LD_INT 2
7489: PPUSH
7490: CALL_OW 250
7494: PUSH
7495: LD_INT 1
7497: PLUS
7498: PPUSH
7499: CALL_OW 111
// end ;
7503: GO 7197
7505: POP
7506: POP
// end ; if ru6_sci > 0 then
7507: LD_EXP 21
7511: PUSH
7512: LD_INT 0
7514: GREATER
7515: IFFALSE 8055
// begin for i = 1 to ru6_sci do
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: DOUBLE
7523: LD_INT 1
7525: DEC
7526: ST_TO_ADDR
7527: LD_EXP 21
7531: PUSH
7532: FOR_TO
7533: IFFALSE 8053
// begin if not HasTask ( ru6_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) = 0 then
7535: LD_EXP 21
7539: PUSH
7540: LD_VAR 0 1
7544: ARRAY
7545: PPUSH
7546: CALL_OW 314
7550: NOT
7551: PUSH
7552: LD_INT 22
7554: PUSH
7555: LD_INT 6
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 21
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_VAR 0 10
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 25
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: PPUSH
7617: CALL_OW 69
7621: PUSH
7622: LD_INT 0
7624: EQUAL
7625: AND
7626: IFFALSE 7805
// begin if ru6_lab > 0 then
7628: LD_EXP 24
7632: PUSH
7633: LD_INT 0
7635: GREATER
7636: IFFALSE 7664
// ComEnterUnit ( ru6_sci [ i ] , ru6_lab [ 1 ] ) else
7638: LD_EXP 21
7642: PUSH
7643: LD_VAR 0 1
7647: ARRAY
7648: PPUSH
7649: LD_EXP 24
7653: PUSH
7654: LD_INT 1
7656: ARRAY
7657: PPUSH
7658: CALL_OW 120
7662: GO 7709
// if GetDistUnits ( ru6_sci [ i ] , ru_west_dep ) > 10 then
7664: LD_EXP 21
7668: PUSH
7669: LD_VAR 0 1
7673: ARRAY
7674: PPUSH
7675: LD_INT 2
7677: PPUSH
7678: CALL_OW 296
7682: PUSH
7683: LD_INT 10
7685: GREATER
7686: IFFALSE 7709
// ComMoveXY ( ru6_sci [ i ] , 96 , 104 ) ;
7688: LD_EXP 21
7692: PUSH
7693: LD_VAR 0 1
7697: ARRAY
7698: PPUSH
7699: LD_INT 96
7701: PPUSH
7702: LD_INT 104
7704: PPUSH
7705: CALL_OW 111
// if ru6_mech = 0 and ru6_fac > 0 and ru6_sci > 2 then
7709: LD_EXP 20
7713: PUSH
7714: LD_INT 0
7716: EQUAL
7717: PUSH
7718: LD_EXP 25
7722: PUSH
7723: LD_INT 0
7725: GREATER
7726: AND
7727: PUSH
7728: LD_EXP 21
7732: PUSH
7733: LD_INT 2
7735: GREATER
7736: AND
7737: IFFALSE 7805
// begin if IsInUnit ( ru6_sci [ 1 ] ) then
7739: LD_EXP 21
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: CALL_OW 310
7752: IFFALSE 7767
// ComExitBuilding ( ru6_sci [ 1 ] ) ;
7754: LD_EXP 21
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: CALL_OW 122
// ComEnterUnit ( ru6_sci [ 1 ] , ru6_fac [ 1 ] ) ;
7767: LD_EXP 21
7771: PUSH
7772: LD_INT 1
7774: ARRAY
7775: PPUSH
7776: LD_EXP 25
7780: PUSH
7781: LD_INT 1
7783: ARRAY
7784: PPUSH
7785: CALL_OW 120
// AddComChangeProfession ( ru6_sci [ 1 ] , class_mechanic ) ;
7789: LD_EXP 21
7793: PUSH
7794: LD_INT 1
7796: ARRAY
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 183
// end ; end ; if not HasTask ( ru6_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) > 0 then
7805: LD_EXP 21
7809: PUSH
7810: LD_VAR 0 1
7814: ARRAY
7815: PPUSH
7816: CALL_OW 314
7820: NOT
7821: PUSH
7822: LD_INT 22
7824: PUSH
7825: LD_INT 6
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 21
7834: PUSH
7835: LD_INT 1
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: LD_VAR 0 10
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 25
7866: PUSH
7867: LD_INT 4
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: PPUSH
7887: CALL_OW 69
7891: PUSH
7892: LD_INT 0
7894: GREATER
7895: AND
7896: IFFALSE 8051
// begin if IsInUnit ( ru6_sci [ i ] ) then
7898: LD_EXP 21
7902: PUSH
7903: LD_VAR 0 1
7907: ARRAY
7908: PPUSH
7909: CALL_OW 310
7913: IFFALSE 7930
// ComExitBuilding ( ru6_sci [ i ] ) ;
7915: LD_EXP 21
7919: PUSH
7920: LD_VAR 0 1
7924: ARRAY
7925: PPUSH
7926: CALL_OW 122
// filter := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) ;
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_INT 22
7937: PUSH
7938: LD_INT 6
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 21
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: LD_INT 24
7960: PUSH
7961: LD_VAR 0 10
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 4
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: PPUSH
8000: CALL_OW 69
8004: ST_TO_ADDR
// if filter > 0 then
8005: LD_VAR 0 2
8009: PUSH
8010: LD_INT 0
8012: GREATER
8013: IFFALSE 8051
// ComHeal ( ru6_sci [ i ] , NearestUnitToUnit ( filter , ru6_sci [ i ] ) ) ;
8015: LD_EXP 21
8019: PUSH
8020: LD_VAR 0 1
8024: ARRAY
8025: PPUSH
8026: LD_VAR 0 2
8030: PPUSH
8031: LD_EXP 21
8035: PUSH
8036: LD_VAR 0 1
8040: ARRAY
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: CALL_OW 128
// end ; end ;
8051: GO 7532
8053: POP
8054: POP
// end ; if ru6_mech > 0 then
8055: LD_EXP 20
8059: PUSH
8060: LD_INT 0
8062: GREATER
8063: IFFALSE 8580
// begin for i = 1 to ru6_mech do
8065: LD_ADDR_VAR 0 1
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_EXP 20
8079: PUSH
8080: FOR_TO
8081: IFFALSE 8578
// begin if not HasTask ( ru6_mech ) then
8083: LD_EXP 20
8087: PPUSH
8088: CALL_OW 314
8092: NOT
8093: IFFALSE 8576
// begin if ru6_bweap > 0 and ru6_fac > 0 then
8095: LD_EXP 27
8099: PUSH
8100: LD_INT 0
8102: GREATER
8103: PUSH
8104: LD_EXP 25
8108: PUSH
8109: LD_INT 0
8111: GREATER
8112: AND
8113: IFFALSE 8230
// begin if GetDistUnits ( ru6_mech [ i ] , ru_west_dep ) > 11 then
8115: LD_EXP 20
8119: PUSH
8120: LD_VAR 0 1
8124: ARRAY
8125: PPUSH
8126: LD_INT 2
8128: PPUSH
8129: CALL_OW 296
8133: PUSH
8134: LD_INT 11
8136: GREATER
8137: IFFALSE 8162
// ComMoveXY ( ru6_mech [ i ] , 96 , 104 ) else
8139: LD_EXP 20
8143: PUSH
8144: LD_VAR 0 1
8148: ARRAY
8149: PPUSH
8150: LD_INT 96
8152: PPUSH
8153: LD_INT 104
8155: PPUSH
8156: CALL_OW 111
8160: GO 8194
// if IsDriver ( ru6_mech [ i ] ) then
8162: LD_EXP 20
8166: PUSH
8167: LD_VAR 0 1
8171: ARRAY
8172: PPUSH
8173: CALL 1235 0 1
8177: IFFALSE 8194
// ComExitVehicle ( ru6_mech [ i ] ) ;
8179: LD_EXP 20
8183: PUSH
8184: LD_VAR 0 1
8188: ARRAY
8189: PPUSH
8190: CALL_OW 121
// ComEnterUnit ( ru6_mech [ i ] , NearestUnitToUnit ( ru6_fac , ru6_mech [ i ] ) ) ;
8194: LD_EXP 20
8198: PUSH
8199: LD_VAR 0 1
8203: ARRAY
8204: PPUSH
8205: LD_EXP 25
8209: PPUSH
8210: LD_EXP 20
8214: PUSH
8215: LD_VAR 0 1
8219: ARRAY
8220: PPUSH
8221: CALL_OW 74
8225: PPUSH
8226: CALL_OW 120
// end ; if UnitFilter ( vehicles , [ f_empty ] ) > 0 and ru6_bweap = 0 then
8230: LD_VAR 0 12
8234: PPUSH
8235: LD_INT 58
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 72
8245: PUSH
8246: LD_INT 0
8248: GREATER
8249: PUSH
8250: LD_EXP 27
8254: PUSH
8255: LD_INT 0
8257: EQUAL
8258: AND
8259: IFFALSE 8486
// begin if not IsDriver ( ru6_mech [ i ] ) then
8261: LD_EXP 20
8265: PUSH
8266: LD_VAR 0 1
8270: ARRAY
8271: PPUSH
8272: CALL 1235 0 1
8276: NOT
8277: IFFALSE 8484
// begin if UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) > 0 then
8279: LD_VAR 0 12
8283: PPUSH
8284: LD_INT 3
8286: PUSH
8287: LD_INT 24
8289: PUSH
8290: LD_VAR 0 10
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 72
8307: PUSH
8308: LD_INT 0
8310: GREATER
8311: IFFALSE 8373
// ComRepairVehicle ( ru6_mech [ i ] , NearestUnitToUnit ( ru6_mech [ i ] , UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) ) ) ;
8313: LD_EXP 20
8317: PUSH
8318: LD_VAR 0 1
8322: ARRAY
8323: PPUSH
8324: LD_EXP 20
8328: PUSH
8329: LD_VAR 0 1
8333: ARRAY
8334: PPUSH
8335: LD_VAR 0 12
8339: PPUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 24
8345: PUSH
8346: LD_VAR 0 10
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 72
8363: PPUSH
8364: CALL_OW 74
8368: PPUSH
8369: CALL_OW 129
// if IsInUnit ( ru6_mech [ i ] ) then
8373: LD_EXP 20
8377: PUSH
8378: LD_VAR 0 1
8382: ARRAY
8383: PPUSH
8384: CALL_OW 310
8388: IFFALSE 8405
// ComExitBuilding ( ru6_mech [ i ] ) ;
8390: LD_EXP 20
8394: PUSH
8395: LD_VAR 0 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 122
// if UnitFilter ( vehicles , [ f_not , [ f_lives , 1000 ] ] ) = 0 then
8405: LD_VAR 0 12
8409: PPUSH
8410: LD_INT 3
8412: PUSH
8413: LD_INT 24
8415: PUSH
8416: LD_INT 1000
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 72
8431: PUSH
8432: LD_INT 0
8434: EQUAL
8435: IFFALSE 8484
// ComEnterUnit ( ru6_mech [ i ] , NearestUnitToUnit ( UnitFilter ( vehicles , [ f_empty ] ) , ru6_mech [ i ] ) ) end ;
8437: LD_EXP 20
8441: PUSH
8442: LD_VAR 0 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 12
8452: PPUSH
8453: LD_INT 58
8455: PUSH
8456: EMPTY
8457: LIST
8458: PPUSH
8459: CALL_OW 72
8463: PPUSH
8464: LD_EXP 20
8468: PUSH
8469: LD_VAR 0 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 74
8479: PPUSH
8480: CALL_OW 120
// end else
8484: GO 8576
// if ru6_fac > 0 then
8486: LD_EXP 25
8490: PUSH
8491: LD_INT 0
8493: GREATER
8494: IFFALSE 8522
// ComEnterUnit ( ru6_mech [ i ] , ru6_fac [ 1 ] ) else
8496: LD_EXP 20
8500: PUSH
8501: LD_VAR 0 1
8505: ARRAY
8506: PPUSH
8507: LD_EXP 25
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: CALL_OW 120
8520: GO 8576
// begin ComEnterUnit ( ru6_mech [ i ] , NearestUnitToUnit ( buildings , ru6_mech [ i ] ) ) ;
8522: LD_EXP 20
8526: PUSH
8527: LD_VAR 0 1
8531: ARRAY
8532: PPUSH
8533: LD_VAR 0 8
8537: PPUSH
8538: LD_EXP 20
8542: PUSH
8543: LD_VAR 0 1
8547: ARRAY
8548: PPUSH
8549: CALL_OW 74
8553: PPUSH
8554: CALL_OW 120
// AddComChangeProfession ( ru6_mech [ i ] , class_soldier ) ;
8558: LD_EXP 20
8562: PUSH
8563: LD_VAR 0 1
8567: ARRAY
8568: PPUSH
8569: LD_INT 1
8571: PPUSH
8572: CALL_OW 183
// end ; end ; end ;
8576: GO 8080
8578: POP
8579: POP
// end ; if ru6_eng > 0 then
8580: LD_EXP 19
8584: PUSH
8585: LD_INT 0
8587: GREATER
8588: IFFALSE 9262
// begin for i = 1 to ru6_eng do
8590: LD_ADDR_VAR 0 1
8594: PUSH
8595: DOUBLE
8596: LD_INT 1
8598: DEC
8599: ST_TO_ADDR
8600: LD_EXP 19
8604: PUSH
8605: FOR_TO
8606: IFFALSE 9260
// begin if UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8608: LD_VAR 0 7
8612: PPUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 24
8618: PUSH
8619: LD_INT 1000
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PPUSH
8630: CALL_OW 72
8634: PUSH
8635: LD_INT 0
8637: GREATER
8638: IFFALSE 9060
// begin if IsInUnit ( ru6_eng [ i ] ) then
8640: LD_EXP 19
8644: PUSH
8645: LD_VAR 0 1
8649: ARRAY
8650: PPUSH
8651: CALL_OW 310
8655: IFFALSE 8672
// ComExitBuilding ( ru6_eng [ i ] ) ;
8657: LD_EXP 19
8661: PUSH
8662: LD_VAR 0 1
8666: ARRAY
8667: PPUSH
8668: CALL_OW 122
// if not HasTask ( ru6_eng [ i ] ) then
8672: LD_EXP 19
8676: PUSH
8677: LD_VAR 0 1
8681: ARRAY
8682: PPUSH
8683: CALL_OW 314
8687: NOT
8688: IFFALSE 8748
// ComRepairBuilding ( ru6_eng [ i ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , ru6_eng [ i ] ) ) ;
8690: LD_EXP 19
8694: PUSH
8695: LD_VAR 0 1
8699: ARRAY
8700: PPUSH
8701: LD_VAR 0 7
8705: PPUSH
8706: LD_INT 3
8708: PUSH
8709: LD_INT 24
8711: PUSH
8712: LD_INT 1000
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PPUSH
8728: LD_EXP 19
8732: PUSH
8733: LD_VAR 0 1
8737: ARRAY
8738: PPUSH
8739: CALL_OW 74
8743: PPUSH
8744: CALL_OW 130
// if FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_weapon , ru_crane ] , [ f_not , [ f_empty ] ] ] ] ) > 0 then
8748: LD_INT 22
8750: PUSH
8751: LD_INT 6
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 34
8760: PUSH
8761: LD_INT 52
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 3
8770: PUSH
8771: LD_INT 58
8773: PUSH
8774: EMPTY
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: PUSH
8794: LD_INT 0
8796: GREATER
8797: IFFALSE 9058
// begin filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 34
8816: PUSH
8817: LD_INT 52
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: ST_TO_ADDR
// for p = 1 to filter do
8833: LD_ADDR_VAR 0 4
8837: PUSH
8838: DOUBLE
8839: LD_INT 1
8841: DEC
8842: ST_TO_ADDR
8843: LD_VAR 0 2
8847: PUSH
8848: FOR_TO
8849: IFFALSE 9056
// if GetLives ( filter [ p ] ) >= is_hurt + 100 then
8851: LD_VAR 0 2
8855: PUSH
8856: LD_VAR 0 4
8860: ARRAY
8861: PPUSH
8862: CALL_OW 256
8866: PUSH
8867: LD_VAR 0 10
8871: PUSH
8872: LD_INT 100
8874: PLUS
8875: GREATEREQUAL
8876: IFFALSE 8938
// ComRepairBuilding ( filter [ p ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , filter [ p ] ) ) else
8878: LD_VAR 0 2
8882: PUSH
8883: LD_VAR 0 4
8887: ARRAY
8888: PPUSH
8889: LD_VAR 0 7
8893: PPUSH
8894: LD_INT 3
8896: PUSH
8897: LD_INT 24
8899: PUSH
8900: LD_INT 1000
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PPUSH
8911: CALL_OW 72
8915: PPUSH
8916: LD_VAR 0 2
8920: PUSH
8921: LD_VAR 0 4
8925: ARRAY
8926: PPUSH
8927: CALL_OW 74
8931: PPUSH
8932: CALL_OW 130
8936: GO 9054
// begin ComMoveXY ( filter [ p ] , 94 , 103 ) ;
8938: LD_VAR 0 2
8942: PUSH
8943: LD_VAR 0 4
8947: ARRAY
8948: PPUSH
8949: LD_INT 94
8951: PPUSH
8952: LD_INT 103
8954: PPUSH
8955: CALL_OW 111
// un := IsDrivenBy ( filter [ p ] ) ;
8959: LD_ADDR_VAR 0 11
8963: PUSH
8964: LD_VAR 0 2
8968: PUSH
8969: LD_VAR 0 4
8973: ARRAY
8974: PPUSH
8975: CALL_OW 311
8979: ST_TO_ADDR
// if GetDistUnits ( filter [ p ] , ru_west_dep ) <= 8 and GetLives ( filter [ p ] ) < is_hurt then
8980: LD_VAR 0 2
8984: PUSH
8985: LD_VAR 0 4
8989: ARRAY
8990: PPUSH
8991: LD_INT 2
8993: PPUSH
8994: CALL_OW 296
8998: PUSH
8999: LD_INT 8
9001: LESSEQUAL
9002: PUSH
9003: LD_VAR 0 2
9007: PUSH
9008: LD_VAR 0 4
9012: ARRAY
9013: PPUSH
9014: CALL_OW 256
9018: PUSH
9019: LD_VAR 0 10
9023: LESS
9024: AND
9025: IFFALSE 9054
// begin SetFuel ( filter [ p ] , 100 ) ;
9027: LD_VAR 0 2
9031: PUSH
9032: LD_VAR 0 4
9036: ARRAY
9037: PPUSH
9038: LD_INT 100
9040: PPUSH
9041: CALL_OW 240
// ComExitVehicle ( un ) ;
9045: LD_VAR 0 11
9049: PPUSH
9050: CALL_OW 121
// end ; end ;
9054: GO 8848
9056: POP
9057: POP
// end ; end else
9058: GO 9258
// begin if not IsInUnit ( ru6_eng [ i ] ) and not HasTask ( ru6_eng [ i ] ) and ru6_blist = 0 then
9060: LD_EXP 19
9064: PUSH
9065: LD_VAR 0 1
9069: ARRAY
9070: PPUSH
9071: CALL_OW 310
9075: NOT
9076: PUSH
9077: LD_EXP 19
9081: PUSH
9082: LD_VAR 0 1
9086: ARRAY
9087: PPUSH
9088: CALL_OW 314
9092: NOT
9093: AND
9094: PUSH
9095: LD_EXP 26
9099: PUSH
9100: LD_INT 0
9102: EQUAL
9103: AND
9104: IFFALSE 9124
// ComEnterUnit ( ru6_eng [ i ] , ru_west_dep ) ;
9106: LD_EXP 19
9110: PUSH
9111: LD_VAR 0 1
9115: ARRAY
9116: PPUSH
9117: LD_INT 2
9119: PPUSH
9120: CALL_OW 120
// if ru6_blist > 0 and GetResourceType ( GetBase ( ru_west_dep ) , mat_cans >= 100 ) and FilterAllUnits ( [ [ f_enemy , 6 ] , [ f_distxy , GetX ( ru_west_dep ) , GetY ( ru_west_dep ) , 40 ] ] ) = 0 then
9124: LD_EXP 26
9128: PUSH
9129: LD_INT 0
9131: GREATER
9132: PUSH
9133: LD_INT 2
9135: PPUSH
9136: CALL_OW 274
9140: PPUSH
9141: LD_INT 1
9143: PUSH
9144: LD_INT 100
9146: GREATEREQUAL
9147: PPUSH
9148: CALL_OW 275
9152: AND
9153: PUSH
9154: LD_INT 81
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 92
9166: PUSH
9167: LD_INT 2
9169: PPUSH
9170: CALL_OW 250
9174: PUSH
9175: LD_INT 2
9177: PPUSH
9178: CALL_OW 251
9182: PUSH
9183: LD_INT 40
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 69
9200: PUSH
9201: LD_INT 0
9203: EQUAL
9204: AND
9205: IFFALSE 9258
// begin ComBuild ( ru6_eng [ i ] , ru6_blist [ 1 ] , ru6_blist [ 2 ] , ru6_blist [ 3 ] , ru6_blist [ 4 ] ) ;
9207: LD_EXP 19
9211: PUSH
9212: LD_VAR 0 1
9216: ARRAY
9217: PPUSH
9218: LD_EXP 26
9222: PUSH
9223: LD_INT 1
9225: ARRAY
9226: PPUSH
9227: LD_EXP 26
9231: PUSH
9232: LD_INT 2
9234: ARRAY
9235: PPUSH
9236: LD_EXP 26
9240: PUSH
9241: LD_INT 3
9243: ARRAY
9244: PPUSH
9245: LD_EXP 26
9249: PUSH
9250: LD_INT 4
9252: ARRAY
9253: PPUSH
9254: CALL_OW 145
// end ; end ; end ;
9258: GO 8605
9260: POP
9261: POP
// end ; if vehicles > 0 then
9262: LD_VAR 0 12
9266: PUSH
9267: LD_INT 0
9269: GREATER
9270: IFFALSE 9557
// begin filter := UnitFilter ( vehicles , [ [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
9272: LD_ADDR_VAR 0 2
9276: PUSH
9277: LD_VAR 0 12
9281: PPUSH
9282: LD_INT 3
9284: PUSH
9285: LD_INT 58
9287: PUSH
9288: EMPTY
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 3
9297: PUSH
9298: LD_INT 34
9300: PUSH
9301: LD_INT 52
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 72
9320: ST_TO_ADDR
// if filter > 0 then
9321: LD_VAR 0 2
9325: PUSH
9326: LD_INT 0
9328: GREATER
9329: IFFALSE 9557
// begin for i = 1 to filter do
9331: LD_ADDR_VAR 0 1
9335: PUSH
9336: DOUBLE
9337: LD_INT 1
9339: DEC
9340: ST_TO_ADDR
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_TO
9347: IFFALSE 9555
// begin if GetDistUnits ( filter [ i ] , ru_west_dep ) <= 8 and GetFuel ( filter [ i ] ) <= 67 then
9349: LD_VAR 0 2
9353: PUSH
9354: LD_VAR 0 1
9358: ARRAY
9359: PPUSH
9360: LD_INT 2
9362: PPUSH
9363: CALL_OW 296
9367: PUSH
9368: LD_INT 8
9370: LESSEQUAL
9371: PUSH
9372: LD_VAR 0 2
9376: PUSH
9377: LD_VAR 0 1
9381: ARRAY
9382: PPUSH
9383: CALL_OW 261
9387: PUSH
9388: LD_INT 67
9390: LESSEQUAL
9391: AND
9392: IFFALSE 9412
// SetFuel ( filter [ i ] , 100 ) ;
9394: LD_VAR 0 2
9398: PUSH
9399: LD_VAR 0 1
9403: ARRAY
9404: PPUSH
9405: LD_INT 100
9407: PPUSH
9408: CALL_OW 240
// if GetLives ( filter [ i ] ) > is_hurt then
9412: LD_VAR 0 2
9416: PUSH
9417: LD_VAR 0 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 256
9427: PUSH
9428: LD_VAR 0 10
9432: GREATER
9433: IFFALSE 9455
// ProtectArea ( filter [ i ] , ru_west_dep ) else
9435: LD_VAR 0 2
9439: PUSH
9440: LD_VAR 0 1
9444: ARRAY
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: CALL 5036 0 2
9453: GO 9553
// begin ComMoveXY ( filter [ i ] , 94 , 103 ) ;
9455: LD_VAR 0 2
9459: PUSH
9460: LD_VAR 0 1
9464: ARRAY
9465: PPUSH
9466: LD_INT 94
9468: PPUSH
9469: LD_INT 103
9471: PPUSH
9472: CALL_OW 111
// un := IsDrivenBy ( filter [ i ] ) ;
9476: LD_ADDR_VAR 0 11
9480: PUSH
9481: LD_VAR 0 2
9485: PUSH
9486: LD_VAR 0 1
9490: ARRAY
9491: PPUSH
9492: CALL_OW 311
9496: ST_TO_ADDR
// if GetDistUnits ( filter [ i ] , ru_west_dep ) <= 8 and GetLives ( filter [ i ] ) < is_hurt then
9497: LD_VAR 0 2
9501: PUSH
9502: LD_VAR 0 1
9506: ARRAY
9507: PPUSH
9508: LD_INT 2
9510: PPUSH
9511: CALL_OW 296
9515: PUSH
9516: LD_INT 8
9518: LESSEQUAL
9519: PUSH
9520: LD_VAR 0 2
9524: PUSH
9525: LD_VAR 0 1
9529: ARRAY
9530: PPUSH
9531: CALL_OW 256
9535: PUSH
9536: LD_VAR 0 10
9540: LESS
9541: AND
9542: IFFALSE 9553
// begin ComExitVehicle ( un ) ;
9544: LD_VAR 0 11
9548: PPUSH
9549: CALL_OW 121
// end ; end ; end ;
9553: GO 9346
9555: POP
9556: POP
// end ; end ; end ; end_of_file
9557: PPOPN 13
9559: END
// export ru7_sold , ru7_eng , ru7_mech , ru7_sci , ru7_bazz , ru7_veh , ru7_lab , ru7_fac , ru7_blist , ru7_bweap ; every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) > 0 do var i , filter , list , p , l , range , al_build , buildings , towers , is_hurt , un , vehicles , cranes ;
9560: LD_INT 22
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 69
9574: PUSH
9575: LD_INT 0
9577: GREATER
9578: IFFALSE 13341
9580: GO 9582
9582: DISABLE
9583: LD_INT 0
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
// begin enable ;
9598: ENABLE
// ru7_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 1 ] ] ) ;
9599: LD_ADDR_EXP 28
9603: PUSH
9604: LD_INT 22
9606: PUSH
9607: LD_INT 7
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: ST_TO_ADDR
// ru7_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
9633: LD_ADDR_EXP 29
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 7
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 2
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: ST_TO_ADDR
// ru7_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
9667: LD_ADDR_EXP 30
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_INT 7
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 25
9684: PUSH
9685: LD_INT 3
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 69
9700: ST_TO_ADDR
// ru7_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
9701: LD_ADDR_EXP 31
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 7
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 25
9718: PUSH
9719: LD_INT 4
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// ru7_bazz := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 9 ] ] ) ;
9735: LD_ADDR_EXP 32
9739: PUSH
9740: LD_INT 22
9742: PUSH
9743: LD_INT 7
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 25
9752: PUSH
9753: LD_INT 9
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// ru7_veh := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
9769: LD_ADDR_EXP 33
9773: PUSH
9774: LD_INT 22
9776: PUSH
9777: LD_INT 7
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 21
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 3
9796: PUSH
9797: LD_INT 34
9799: PUSH
9800: LD_INT 52
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: PPUSH
9816: CALL_OW 69
9820: ST_TO_ADDR
// ru7_lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
9821: LD_ADDR_EXP 34
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_INT 7
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 7
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PPUSH
9868: CALL_OW 69
9872: ST_TO_ADDR
// ru7_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
9873: LD_ADDR_EXP 35
9877: PUSH
9878: LD_INT 22
9880: PUSH
9881: LD_INT 7
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 2
9890: PUSH
9891: LD_INT 30
9893: PUSH
9894: LD_INT 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 30
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
9925: LD_ADDR_VAR 0 9
9929: PUSH
9930: LD_INT 22
9932: PUSH
9933: LD_INT 7
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: LD_INT 30
9945: PUSH
9946: LD_INT 31
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 30
9955: PUSH
9956: LD_INT 32
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 69
9976: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
9977: LD_ADDR_VAR 0 8
9981: PUSH
9982: LD_INT 22
9984: PUSH
9985: LD_INT 7
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: LD_INT 30
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 30
10007: PUSH
10008: LD_INT 5
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: ST_TO_ADDR
// al_build := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 7
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 3
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
10063: LD_ADDR_VAR 0 12
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_INT 7
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 21
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: ST_TO_ADDR
// is_hurt := [ 500 , 510 , 520 ] [ Difficulty ] ;
10097: LD_ADDR_VAR 0 10
10101: PUSH
10102: LD_INT 500
10104: PUSH
10105: LD_INT 510
10107: PUSH
10108: LD_INT 520
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: LD_OWVAR 67
10120: ARRAY
10121: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) > 0 and ru7_fac > 0 then
10122: LD_INT 22
10124: PUSH
10125: LD_INT 7
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 35
10134: PUSH
10135: LD_INT 0
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: LD_INT 30
10147: PUSH
10148: LD_INT 32
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 30
10157: PUSH
10158: LD_INT 33
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 69
10179: PUSH
10180: LD_INT 0
10182: GREATER
10183: PUSH
10184: LD_EXP 35
10188: PUSH
10189: LD_INT 0
10191: GREATER
10192: AND
10193: IFFALSE 10304
// begin filter := FilterAllUnits ( [ [ f_side , 7 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
10195: LD_ADDR_VAR 0 2
10199: PUSH
10200: LD_INT 22
10202: PUSH
10203: LD_INT 7
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 35
10212: PUSH
10213: LD_INT 0
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 32
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 30
10235: PUSH
10236: LD_INT 33
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: ST_TO_ADDR
// for i = 1 to filter do
10258: LD_ADDR_VAR 0 1
10262: PUSH
10263: DOUBLE
10264: LD_INT 1
10266: DEC
10267: ST_TO_ADDR
10268: LD_VAR 0 2
10272: PUSH
10273: FOR_TO
10274: IFFALSE 10302
// ComPlaceWeapon ( filter [ i ] , ru7_bweap [ 1 ] ) ;
10276: LD_VAR 0 2
10280: PUSH
10281: LD_VAR 0 1
10285: ARRAY
10286: PPUSH
10287: LD_EXP 37
10291: PUSH
10292: LD_INT 1
10294: ARRAY
10295: PPUSH
10296: CALL_OW 148
10300: GO 10273
10302: POP
10303: POP
// end ; if UnitsInside ( ru7_fac [ 1 ] ) = 0 and BuildingStatus ( ru7_fac ) = bs_working then
10304: LD_EXP 35
10308: PUSH
10309: LD_INT 1
10311: ARRAY
10312: PPUSH
10313: CALL_OW 313
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: PUSH
10322: LD_EXP 35
10326: PPUSH
10327: CALL_OW 461
10331: PUSH
10332: LD_INT 3
10334: EQUAL
10335: AND
10336: IFFALSE 10351
// ComCancel ( ru7_fac [ 1 ] ) ;
10338: LD_EXP 35
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PPUSH
10347: CALL_OW 127
// if ru7_sold > 0 then
10351: LD_EXP 28
10355: PUSH
10356: LD_INT 0
10358: GREATER
10359: IFFALSE 10884
// begin for i = 1 to ru7_sold do
10361: LD_ADDR_VAR 0 1
10365: PUSH
10366: DOUBLE
10367: LD_INT 1
10369: DEC
10370: ST_TO_ADDR
10371: LD_EXP 28
10375: PUSH
10376: FOR_TO
10377: IFFALSE 10882
// begin if GetLives ( ru7_sold [ i ] ) <= is_hurt then
10379: LD_EXP 28
10383: PUSH
10384: LD_VAR 0 1
10388: ARRAY
10389: PPUSH
10390: CALL_OW 256
10394: PUSH
10395: LD_VAR 0 10
10399: LESSEQUAL
10400: IFFALSE 10473
// begin if IsInUnit ( ru7_sold [ i ] ) then
10402: LD_EXP 28
10406: PUSH
10407: LD_VAR 0 1
10411: ARRAY
10412: PPUSH
10413: CALL_OW 310
10417: IFFALSE 10434
// ComExitBuilding ( ru7_sold [ i ] ) ;
10419: LD_EXP 28
10423: PUSH
10424: LD_VAR 0 1
10428: ARRAY
10429: PPUSH
10430: CALL_OW 122
// ComMoveXY ( ru7_sold [ i ] , GetX ( ru_east_dep ) - 1 , GetY ( ru_east_dep ) + 2 ) ;
10434: LD_EXP 28
10438: PUSH
10439: LD_VAR 0 1
10443: ARRAY
10444: PPUSH
10445: LD_INT 52
10447: PPUSH
10448: CALL_OW 250
10452: PUSH
10453: LD_INT 1
10455: MINUS
10456: PPUSH
10457: LD_INT 52
10459: PPUSH
10460: CALL_OW 251
10464: PUSH
10465: LD_INT 2
10467: PLUS
10468: PPUSH
10469: CALL_OW 111
// end ; if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 and UnitFilter ( ru7_sold , [ f_outside ] ) = 0 then
10473: LD_VAR 0 9
10477: PPUSH
10478: LD_INT 24
10480: PUSH
10481: LD_INT 300
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 58
10490: PUSH
10491: EMPTY
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 72
10502: PUSH
10503: LD_INT 0
10505: GREATER
10506: PUSH
10507: LD_EXP 28
10511: PPUSH
10512: LD_INT 56
10514: PUSH
10515: EMPTY
10516: LIST
10517: PPUSH
10518: CALL_OW 72
10522: PUSH
10523: LD_INT 0
10525: EQUAL
10526: AND
10527: IFFALSE 10561
// begin filter := UnitsInside ( buildings [ 1 ] ) ;
10529: LD_ADDR_VAR 0 2
10533: PUSH
10534: LD_VAR 0 8
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: CALL_OW 313
10547: ST_TO_ADDR
// ComExitBuilding ( filter [ 1 ] ) ;
10548: LD_VAR 0 2
10552: PUSH
10553: LD_INT 1
10555: ARRAY
10556: PPUSH
10557: CALL_OW 122
// end ; if GetLives ( ru7_sold [ i ] ) > is_hurt and not HasTask ( ru7_sold [ i ] ) and not IsInUnit ( ru7_sold [ i ] ) then
10561: LD_EXP 28
10565: PUSH
10566: LD_VAR 0 1
10570: ARRAY
10571: PPUSH
10572: CALL_OW 256
10576: PUSH
10577: LD_VAR 0 10
10581: GREATER
10582: PUSH
10583: LD_EXP 28
10587: PUSH
10588: LD_VAR 0 1
10592: ARRAY
10593: PPUSH
10594: CALL_OW 314
10598: NOT
10599: AND
10600: PUSH
10601: LD_EXP 28
10605: PUSH
10606: LD_VAR 0 1
10610: ARRAY
10611: PPUSH
10612: CALL_OW 310
10616: NOT
10617: AND
10618: IFFALSE 10880
// begin if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 then
10620: LD_VAR 0 9
10624: PPUSH
10625: LD_INT 24
10627: PUSH
10628: LD_INT 300
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 58
10637: PUSH
10638: EMPTY
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PPUSH
10645: CALL_OW 72
10649: PUSH
10650: LD_INT 0
10652: GREATER
10653: IFFALSE 10706
// begin ComEnterUnit ( ru7_sold [ i ] , UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) [ 1 ] ) end else
10655: LD_EXP 28
10659: PUSH
10660: LD_VAR 0 1
10664: ARRAY
10665: PPUSH
10666: LD_VAR 0 9
10670: PPUSH
10671: LD_INT 24
10673: PUSH
10674: LD_INT 300
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 58
10683: PUSH
10684: EMPTY
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 72
10695: PUSH
10696: LD_INT 1
10698: ARRAY
10699: PPUSH
10700: CALL_OW 120
10704: GO 10880
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
10706: LD_VAR 0 8
10710: PPUSH
10711: LD_INT 24
10713: PUSH
10714: LD_INT 251
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 72
10725: PUSH
10726: LD_INT 0
10728: GREATER
10729: IFFALSE 10817
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: DOUBLE
10737: LD_INT 1
10739: DEC
10740: ST_TO_ADDR
10741: LD_VAR 0 8
10745: PPUSH
10746: LD_INT 24
10748: PUSH
10749: LD_INT 251
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 72
10760: PUSH
10761: FOR_TO
10762: IFFALSE 10813
// if UnitsInside ( buildings [ l ] ) < 6 then
10764: LD_VAR 0 8
10768: PUSH
10769: LD_VAR 0 5
10773: ARRAY
10774: PPUSH
10775: CALL_OW 313
10779: PUSH
10780: LD_INT 6
10782: LESS
10783: IFFALSE 10811
// ComEnterUnit ( ru7_sold [ i ] , buildings [ l ] ) ;
10785: LD_EXP 28
10789: PUSH
10790: LD_VAR 0 1
10794: ARRAY
10795: PPUSH
10796: LD_VAR 0 8
10800: PUSH
10801: LD_VAR 0 5
10805: ARRAY
10806: PPUSH
10807: CALL_OW 120
10811: GO 10761
10813: POP
10814: POP
// end else
10815: GO 10880
// if GetDistUnits ( ru7_sold [ i ] , ru_east_dep ) >= 12 then
10817: LD_EXP 28
10821: PUSH
10822: LD_VAR 0 1
10826: ARRAY
10827: PPUSH
10828: LD_INT 52
10830: PPUSH
10831: CALL_OW 296
10835: PUSH
10836: LD_INT 12
10838: GREATEREQUAL
10839: IFFALSE 10880
// ComMoveXY ( ru7_sold [ i ] , GetX ( ru_east_dep ) - 1 , GetX ( ru_east_dep ) + 1 ) ;
10841: LD_EXP 28
10845: PUSH
10846: LD_VAR 0 1
10850: ARRAY
10851: PPUSH
10852: LD_INT 52
10854: PPUSH
10855: CALL_OW 250
10859: PUSH
10860: LD_INT 1
10862: MINUS
10863: PPUSH
10864: LD_INT 52
10866: PPUSH
10867: CALL_OW 250
10871: PUSH
10872: LD_INT 1
10874: PLUS
10875: PPUSH
10876: CALL_OW 111
// end ; end ;
10880: GO 10376
10882: POP
10883: POP
// end ; if ru7_bazz > 0 then
10884: LD_EXP 32
10888: PUSH
10889: LD_INT 0
10891: GREATER
10892: IFFALSE 11219
// begin for i = 1 to ru7_bazz do
10894: LD_ADDR_VAR 0 1
10898: PUSH
10899: DOUBLE
10900: LD_INT 1
10902: DEC
10903: ST_TO_ADDR
10904: LD_EXP 32
10908: PUSH
10909: FOR_TO
10910: IFFALSE 11217
// begin if GetLives ( ru7_bazz ) <= is_hurt then
10912: LD_EXP 32
10916: PPUSH
10917: CALL_OW 256
10921: PUSH
10922: LD_VAR 0 10
10926: LESSEQUAL
10927: IFFALSE 11000
// begin if IsInUnit ( ru7_bazz [ i ] ) then
10929: LD_EXP 32
10933: PUSH
10934: LD_VAR 0 1
10938: ARRAY
10939: PPUSH
10940: CALL_OW 310
10944: IFFALSE 10961
// ComExitBuilding ( ru7_bazz [ i ] ) ;
10946: LD_EXP 32
10950: PUSH
10951: LD_VAR 0 1
10955: ARRAY
10956: PPUSH
10957: CALL_OW 122
// ComMoveXY ( ru7_bazz [ i ] , GetX ( ru_east_dep ) - 1 , GetY ( ru_east_dep ) + 2 ) ;
10961: LD_EXP 32
10965: PUSH
10966: LD_VAR 0 1
10970: ARRAY
10971: PPUSH
10972: LD_INT 52
10974: PPUSH
10975: CALL_OW 250
10979: PUSH
10980: LD_INT 1
10982: MINUS
10983: PPUSH
10984: LD_INT 52
10986: PPUSH
10987: CALL_OW 251
10991: PUSH
10992: LD_INT 2
10994: PLUS
10995: PPUSH
10996: CALL_OW 111
// end ; if GetLives ( ru7_bazz [ i ] ) > is_hurt then
11000: LD_EXP 32
11004: PUSH
11005: LD_VAR 0 1
11009: ARRAY
11010: PPUSH
11011: CALL_OW 256
11015: PUSH
11016: LD_VAR 0 10
11020: GREATER
11021: IFFALSE 11215
// if not IsInUnit ( ru7_bazz [ i ] ) then
11023: LD_EXP 32
11027: PUSH
11028: LD_VAR 0 1
11032: ARRAY
11033: PPUSH
11034: CALL_OW 310
11038: NOT
11039: IFFALSE 11215
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
11041: LD_VAR 0 8
11045: PPUSH
11046: LD_INT 24
11048: PUSH
11049: LD_INT 251
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 72
11060: PUSH
11061: LD_INT 0
11063: GREATER
11064: IFFALSE 11152
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: DOUBLE
11072: LD_INT 1
11074: DEC
11075: ST_TO_ADDR
11076: LD_VAR 0 8
11080: PPUSH
11081: LD_INT 24
11083: PUSH
11084: LD_INT 251
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 72
11095: PUSH
11096: FOR_TO
11097: IFFALSE 11148
// if UnitsInside ( buildings [ l ] ) < 6 then
11099: LD_VAR 0 8
11103: PUSH
11104: LD_VAR 0 5
11108: ARRAY
11109: PPUSH
11110: CALL_OW 313
11114: PUSH
11115: LD_INT 6
11117: LESS
11118: IFFALSE 11146
// ComEnterUnit ( ru7_bazz [ i ] , buildings [ l ] ) ;
11120: LD_EXP 32
11124: PUSH
11125: LD_VAR 0 1
11129: ARRAY
11130: PPUSH
11131: LD_VAR 0 8
11135: PUSH
11136: LD_VAR 0 5
11140: ARRAY
11141: PPUSH
11142: CALL_OW 120
11146: GO 11096
11148: POP
11149: POP
// end else
11150: GO 11215
// if GetDistUnits ( ru7_bazz [ i ] , ru_east_dep ) < 12 then
11152: LD_EXP 32
11156: PUSH
11157: LD_VAR 0 1
11161: ARRAY
11162: PPUSH
11163: LD_INT 52
11165: PPUSH
11166: CALL_OW 296
11170: PUSH
11171: LD_INT 12
11173: LESS
11174: IFFALSE 11215
// ComMoveXY ( ru7_bazz [ i ] , GetX ( ru_east_dep ) - 1 , GetX ( ru_east_dep ) + 1 ) ;
11176: LD_EXP 32
11180: PUSH
11181: LD_VAR 0 1
11185: ARRAY
11186: PPUSH
11187: LD_INT 52
11189: PPUSH
11190: CALL_OW 250
11194: PUSH
11195: LD_INT 1
11197: MINUS
11198: PPUSH
11199: LD_INT 52
11201: PPUSH
11202: CALL_OW 250
11206: PUSH
11207: LD_INT 1
11209: PLUS
11210: PPUSH
11211: CALL_OW 111
// end ;
11215: GO 10909
11217: POP
11218: POP
// end ; if ru7_sci > 0 then
11219: LD_EXP 31
11223: PUSH
11224: LD_INT 0
11226: GREATER
11227: IFFALSE 11785
// begin for i = 1 to ru7_sci do
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: DOUBLE
11235: LD_INT 1
11237: DEC
11238: ST_TO_ADDR
11239: LD_EXP 31
11243: PUSH
11244: FOR_TO
11245: IFFALSE 11783
// begin if not HasTask ( ru7_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) = 0 then
11247: LD_EXP 31
11251: PUSH
11252: LD_VAR 0 1
11256: ARRAY
11257: PPUSH
11258: CALL_OW 314
11262: NOT
11263: PUSH
11264: LD_INT 22
11266: PUSH
11267: LD_INT 7
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 21
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 3
11286: PUSH
11287: LD_INT 24
11289: PUSH
11290: LD_VAR 0 10
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 3
11305: PUSH
11306: LD_INT 25
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: PUSH
11334: LD_INT 0
11336: EQUAL
11337: AND
11338: IFFALSE 11535
// begin if ru7_lab > 0 then
11340: LD_EXP 34
11344: PUSH
11345: LD_INT 0
11347: GREATER
11348: IFFALSE 11376
// ComEnterUnit ( ru7_sci [ i ] , ru7_lab [ 1 ] ) else
11350: LD_EXP 31
11354: PUSH
11355: LD_VAR 0 1
11359: ARRAY
11360: PPUSH
11361: LD_EXP 34
11365: PUSH
11366: LD_INT 1
11368: ARRAY
11369: PPUSH
11370: CALL_OW 120
11374: GO 11439
// if GetDistUnits ( ru7_sci [ i ] , ru_east_dep ) > 10 then
11376: LD_EXP 31
11380: PUSH
11381: LD_VAR 0 1
11385: ARRAY
11386: PPUSH
11387: LD_INT 52
11389: PPUSH
11390: CALL_OW 296
11394: PUSH
11395: LD_INT 10
11397: GREATER
11398: IFFALSE 11439
// ComMoveXY ( ru7_sci [ i ] , GetX ( ru_east_dep ) - 2 , GetY ( ru_east_dep ) - 2 ) ;
11400: LD_EXP 31
11404: PUSH
11405: LD_VAR 0 1
11409: ARRAY
11410: PPUSH
11411: LD_INT 52
11413: PPUSH
11414: CALL_OW 250
11418: PUSH
11419: LD_INT 2
11421: MINUS
11422: PPUSH
11423: LD_INT 52
11425: PPUSH
11426: CALL_OW 251
11430: PUSH
11431: LD_INT 2
11433: MINUS
11434: PPUSH
11435: CALL_OW 111
// if ru7_mech = 0 and ru7_fac > 0 and ru7_sci > 2 then
11439: LD_EXP 30
11443: PUSH
11444: LD_INT 0
11446: EQUAL
11447: PUSH
11448: LD_EXP 35
11452: PUSH
11453: LD_INT 0
11455: GREATER
11456: AND
11457: PUSH
11458: LD_EXP 31
11462: PUSH
11463: LD_INT 2
11465: GREATER
11466: AND
11467: IFFALSE 11535
// begin if IsInUnit ( ru7_sci [ 1 ] ) then
11469: LD_EXP 31
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: CALL_OW 310
11482: IFFALSE 11497
// ComExitBuilding ( ru7_sci [ 1 ] ) ;
11484: LD_EXP 31
11488: PUSH
11489: LD_INT 1
11491: ARRAY
11492: PPUSH
11493: CALL_OW 122
// ComEnterUnit ( ru7_sci [ 1 ] , ru7_fac [ 1 ] ) ;
11497: LD_EXP 31
11501: PUSH
11502: LD_INT 1
11504: ARRAY
11505: PPUSH
11506: LD_EXP 35
11510: PUSH
11511: LD_INT 1
11513: ARRAY
11514: PPUSH
11515: CALL_OW 120
// AddComChangeProfession ( ru7_sci [ 1 ] , class_mechanic ) ;
11519: LD_EXP 31
11523: PUSH
11524: LD_INT 1
11526: ARRAY
11527: PPUSH
11528: LD_INT 3
11530: PPUSH
11531: CALL_OW 183
// end ; end ; if not HasTask ( ru7_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) > 0 then
11535: LD_EXP 31
11539: PUSH
11540: LD_VAR 0 1
11544: ARRAY
11545: PPUSH
11546: CALL_OW 314
11550: NOT
11551: PUSH
11552: LD_INT 22
11554: PUSH
11555: LD_INT 7
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 21
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: LD_INT 24
11577: PUSH
11578: LD_VAR 0 10
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 4
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: PUSH
11622: LD_INT 0
11624: GREATER
11625: AND
11626: IFFALSE 11781
// begin if IsInUnit ( ru7_sci [ i ] ) then
11628: LD_EXP 31
11632: PUSH
11633: LD_VAR 0 1
11637: ARRAY
11638: PPUSH
11639: CALL_OW 310
11643: IFFALSE 11660
// ComExitBuilding ( ru7_sci [ i ] ) ;
11645: LD_EXP 31
11649: PUSH
11650: LD_VAR 0 1
11654: ARRAY
11655: PPUSH
11656: CALL_OW 122
// filter := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) ;
11660: LD_ADDR_VAR 0 2
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_INT 7
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 21
11677: PUSH
11678: LD_INT 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: LD_INT 24
11690: PUSH
11691: LD_VAR 0 10
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: ST_TO_ADDR
// if filter > 0 then
11735: LD_VAR 0 2
11739: PUSH
11740: LD_INT 0
11742: GREATER
11743: IFFALSE 11781
// ComHeal ( ru7_sci [ i ] , NearestUnitToUnit ( filter , ru7_sci [ i ] ) ) ;
11745: LD_EXP 31
11749: PUSH
11750: LD_VAR 0 1
11754: ARRAY
11755: PPUSH
11756: LD_VAR 0 2
11760: PPUSH
11761: LD_EXP 31
11765: PUSH
11766: LD_VAR 0 1
11770: ARRAY
11771: PPUSH
11772: CALL_OW 74
11776: PPUSH
11777: CALL_OW 128
// end ; end ;
11781: GO 11244
11783: POP
11784: POP
// end ; if ru7_mech > 0 then
11785: LD_EXP 30
11789: PUSH
11790: LD_INT 0
11792: GREATER
11793: IFFALSE 12328
// begin for i = 1 to ru7_mech do
11795: LD_ADDR_VAR 0 1
11799: PUSH
11800: DOUBLE
11801: LD_INT 1
11803: DEC
11804: ST_TO_ADDR
11805: LD_EXP 30
11809: PUSH
11810: FOR_TO
11811: IFFALSE 12326
// begin if not HasTask ( ru7_mech ) then
11813: LD_EXP 30
11817: PPUSH
11818: CALL_OW 314
11822: NOT
11823: IFFALSE 12324
// begin if ru7_bweap > 0 and ru7_fac > 0 then
11825: LD_EXP 37
11829: PUSH
11830: LD_INT 0
11832: GREATER
11833: PUSH
11834: LD_EXP 35
11838: PUSH
11839: LD_INT 0
11841: GREATER
11842: AND
11843: IFFALSE 11978
// begin if GetDistUnits ( ru7_mech [ i ] , ru_east_dep ) > 11 then
11845: LD_EXP 30
11849: PUSH
11850: LD_VAR 0 1
11854: ARRAY
11855: PPUSH
11856: LD_INT 52
11858: PPUSH
11859: CALL_OW 296
11863: PUSH
11864: LD_INT 11
11866: GREATER
11867: IFFALSE 11910
// ComMoveXY ( ru7_mech [ i ] , GetX ( ru_east_dep ) - 2 , GetY ( ru_east_dep ) - 2 ) else
11869: LD_EXP 30
11873: PUSH
11874: LD_VAR 0 1
11878: ARRAY
11879: PPUSH
11880: LD_INT 52
11882: PPUSH
11883: CALL_OW 250
11887: PUSH
11888: LD_INT 2
11890: MINUS
11891: PPUSH
11892: LD_INT 52
11894: PPUSH
11895: CALL_OW 251
11899: PUSH
11900: LD_INT 2
11902: MINUS
11903: PPUSH
11904: CALL_OW 111
11908: GO 11942
// if IsDriver ( ru7_mech [ i ] ) then
11910: LD_EXP 30
11914: PUSH
11915: LD_VAR 0 1
11919: ARRAY
11920: PPUSH
11921: CALL 1235 0 1
11925: IFFALSE 11942
// ComExitVehicle ( ru7_mech [ i ] ) ;
11927: LD_EXP 30
11931: PUSH
11932: LD_VAR 0 1
11936: ARRAY
11937: PPUSH
11938: CALL_OW 121
// ComEnterUnit ( ru7_mech [ i ] , NearestUnitToUnit ( ru7_fac , ru7_mech [ i ] ) ) ;
11942: LD_EXP 30
11946: PUSH
11947: LD_VAR 0 1
11951: ARRAY
11952: PPUSH
11953: LD_EXP 35
11957: PPUSH
11958: LD_EXP 30
11962: PUSH
11963: LD_VAR 0 1
11967: ARRAY
11968: PPUSH
11969: CALL_OW 74
11973: PPUSH
11974: CALL_OW 120
// end ; if UnitFilter ( vehicles , [ f_empty ] ) > 0 and ru7_bweap = 0 then
11978: LD_VAR 0 12
11982: PPUSH
11983: LD_INT 58
11985: PUSH
11986: EMPTY
11987: LIST
11988: PPUSH
11989: CALL_OW 72
11993: PUSH
11994: LD_INT 0
11996: GREATER
11997: PUSH
11998: LD_EXP 37
12002: PUSH
12003: LD_INT 0
12005: EQUAL
12006: AND
12007: IFFALSE 12234
// begin if not IsDriver ( ru7_mech [ i ] ) then
12009: LD_EXP 30
12013: PUSH
12014: LD_VAR 0 1
12018: ARRAY
12019: PPUSH
12020: CALL 1235 0 1
12024: NOT
12025: IFFALSE 12232
// begin if UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) > 0 then
12027: LD_VAR 0 12
12031: PPUSH
12032: LD_INT 3
12034: PUSH
12035: LD_INT 24
12037: PUSH
12038: LD_VAR 0 10
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 72
12055: PUSH
12056: LD_INT 0
12058: GREATER
12059: IFFALSE 12121
// ComRepairVehicle ( ru7_mech [ i ] , NearestUnitToUnit ( ru7_mech [ i ] , UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) ) ) ;
12061: LD_EXP 30
12065: PUSH
12066: LD_VAR 0 1
12070: ARRAY
12071: PPUSH
12072: LD_EXP 30
12076: PUSH
12077: LD_VAR 0 1
12081: ARRAY
12082: PPUSH
12083: LD_VAR 0 12
12087: PPUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 24
12093: PUSH
12094: LD_VAR 0 10
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 72
12111: PPUSH
12112: CALL_OW 74
12116: PPUSH
12117: CALL_OW 129
// if IsInUnit ( ru7_mech [ i ] ) then
12121: LD_EXP 30
12125: PUSH
12126: LD_VAR 0 1
12130: ARRAY
12131: PPUSH
12132: CALL_OW 310
12136: IFFALSE 12153
// ComExitBuilding ( ru7_mech [ i ] ) ;
12138: LD_EXP 30
12142: PUSH
12143: LD_VAR 0 1
12147: ARRAY
12148: PPUSH
12149: CALL_OW 122
// if UnitFilter ( vehicles , [ f_not , [ f_lives , 1000 ] ] ) = 0 then
12153: LD_VAR 0 12
12157: PPUSH
12158: LD_INT 3
12160: PUSH
12161: LD_INT 24
12163: PUSH
12164: LD_INT 1000
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 72
12179: PUSH
12180: LD_INT 0
12182: EQUAL
12183: IFFALSE 12232
// ComEnterUnit ( ru7_mech [ i ] , NearestUnitToUnit ( UnitFilter ( vehicles , [ f_empty ] ) , ru7_mech [ i ] ) ) end ;
12185: LD_EXP 30
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: LD_VAR 0 12
12200: PPUSH
12201: LD_INT 58
12203: PUSH
12204: EMPTY
12205: LIST
12206: PPUSH
12207: CALL_OW 72
12211: PPUSH
12212: LD_EXP 30
12216: PUSH
12217: LD_VAR 0 1
12221: ARRAY
12222: PPUSH
12223: CALL_OW 74
12227: PPUSH
12228: CALL_OW 120
// end else
12232: GO 12324
// if ru7_fac > 0 then
12234: LD_EXP 35
12238: PUSH
12239: LD_INT 0
12241: GREATER
12242: IFFALSE 12270
// ComEnterUnit ( ru7_mech [ i ] , ru7_fac [ 1 ] ) else
12244: LD_EXP 30
12248: PUSH
12249: LD_VAR 0 1
12253: ARRAY
12254: PPUSH
12255: LD_EXP 35
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: CALL_OW 120
12268: GO 12324
// begin ComEnterUnit ( ru7_mech [ i ] , NearestUnitToUnit ( buildings , ru7_mech [ i ] ) ) ;
12270: LD_EXP 30
12274: PUSH
12275: LD_VAR 0 1
12279: ARRAY
12280: PPUSH
12281: LD_VAR 0 8
12285: PPUSH
12286: LD_EXP 30
12290: PUSH
12291: LD_VAR 0 1
12295: ARRAY
12296: PPUSH
12297: CALL_OW 74
12301: PPUSH
12302: CALL_OW 120
// AddComChangeProfession ( ru7_mech [ i ] , class_soldier ) ;
12306: LD_EXP 30
12310: PUSH
12311: LD_VAR 0 1
12315: ARRAY
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 183
// end ; end ; end ;
12324: GO 11810
12326: POP
12327: POP
// end ; if ru7_eng > 0 then
12328: LD_EXP 29
12332: PUSH
12333: LD_INT 0
12335: GREATER
12336: IFFALSE 13028
// begin for i = 1 to ru7_eng do
12338: LD_ADDR_VAR 0 1
12342: PUSH
12343: DOUBLE
12344: LD_INT 1
12346: DEC
12347: ST_TO_ADDR
12348: LD_EXP 29
12352: PUSH
12353: FOR_TO
12354: IFFALSE 13026
// begin if UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
12356: LD_VAR 0 7
12360: PPUSH
12361: LD_INT 3
12363: PUSH
12364: LD_INT 24
12366: PUSH
12367: LD_INT 1000
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: PUSH
12383: LD_INT 0
12385: GREATER
12386: IFFALSE 12826
// begin if IsInUnit ( ru7_eng [ i ] ) then
12388: LD_EXP 29
12392: PUSH
12393: LD_VAR 0 1
12397: ARRAY
12398: PPUSH
12399: CALL_OW 310
12403: IFFALSE 12420
// ComExitBuilding ( ru7_eng [ i ] ) ;
12405: LD_EXP 29
12409: PUSH
12410: LD_VAR 0 1
12414: ARRAY
12415: PPUSH
12416: CALL_OW 122
// if not HasTask ( ru7_eng [ i ] ) then
12420: LD_EXP 29
12424: PUSH
12425: LD_VAR 0 1
12429: ARRAY
12430: PPUSH
12431: CALL_OW 314
12435: NOT
12436: IFFALSE 12496
// ComRepairBuilding ( ru7_eng [ i ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , ru7_eng [ i ] ) ) ;
12438: LD_EXP 29
12442: PUSH
12443: LD_VAR 0 1
12447: ARRAY
12448: PPUSH
12449: LD_VAR 0 7
12453: PPUSH
12454: LD_INT 3
12456: PUSH
12457: LD_INT 24
12459: PUSH
12460: LD_INT 1000
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 72
12475: PPUSH
12476: LD_EXP 29
12480: PUSH
12481: LD_VAR 0 1
12485: ARRAY
12486: PPUSH
12487: CALL_OW 74
12491: PPUSH
12492: CALL_OW 130
// if FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_weapon , ru_crane ] , [ f_not , [ f_empty ] ] ] ] ) > 0 then
12496: LD_INT 22
12498: PUSH
12499: LD_INT 7
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 34
12508: PUSH
12509: LD_INT 52
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: LD_INT 58
12521: PUSH
12522: EMPTY
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: PPUSH
12537: CALL_OW 69
12541: PUSH
12542: LD_INT 0
12544: GREATER
12545: IFFALSE 12824
// begin filter := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_crane ] ] ) ;
12547: LD_ADDR_VAR 0 2
12551: PUSH
12552: LD_INT 22
12554: PUSH
12555: LD_INT 7
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 34
12564: PUSH
12565: LD_INT 52
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: ST_TO_ADDR
// for p = 1 to filter do
12581: LD_ADDR_VAR 0 4
12585: PUSH
12586: DOUBLE
12587: LD_INT 1
12589: DEC
12590: ST_TO_ADDR
12591: LD_VAR 0 2
12595: PUSH
12596: FOR_TO
12597: IFFALSE 12822
// if GetLives ( filter [ p ] ) >= is_hurt + 100 then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 4
12608: ARRAY
12609: PPUSH
12610: CALL_OW 256
12614: PUSH
12615: LD_VAR 0 10
12619: PUSH
12620: LD_INT 100
12622: PLUS
12623: GREATEREQUAL
12624: IFFALSE 12686
// ComRepairBuilding ( filter [ p ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , filter [ p ] ) ) else
12626: LD_VAR 0 2
12630: PUSH
12631: LD_VAR 0 4
12635: ARRAY
12636: PPUSH
12637: LD_VAR 0 7
12641: PPUSH
12642: LD_INT 3
12644: PUSH
12645: LD_INT 24
12647: PUSH
12648: LD_INT 1000
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 72
12663: PPUSH
12664: LD_VAR 0 2
12668: PUSH
12669: LD_VAR 0 4
12673: ARRAY
12674: PPUSH
12675: CALL_OW 74
12679: PPUSH
12680: CALL_OW 130
12684: GO 12820
// begin ComMoveXY ( filter [ p ] , GetX ( ru_east_dep ) - 2 , GetY ( ru_east_dep ) - 2 ) ;
12686: LD_VAR 0 2
12690: PUSH
12691: LD_VAR 0 4
12695: ARRAY
12696: PPUSH
12697: LD_INT 52
12699: PPUSH
12700: CALL_OW 250
12704: PUSH
12705: LD_INT 2
12707: MINUS
12708: PPUSH
12709: LD_INT 52
12711: PPUSH
12712: CALL_OW 251
12716: PUSH
12717: LD_INT 2
12719: MINUS
12720: PPUSH
12721: CALL_OW 111
// un := IsDrivenBy ( filter [ p ] ) ;
12725: LD_ADDR_VAR 0 11
12729: PUSH
12730: LD_VAR 0 2
12734: PUSH
12735: LD_VAR 0 4
12739: ARRAY
12740: PPUSH
12741: CALL_OW 311
12745: ST_TO_ADDR
// if GetDistUnits ( filter [ p ] , ru_east_dep ) <= 8 and GetLives ( filter [ p ] ) < is_hurt then
12746: LD_VAR 0 2
12750: PUSH
12751: LD_VAR 0 4
12755: ARRAY
12756: PPUSH
12757: LD_INT 52
12759: PPUSH
12760: CALL_OW 296
12764: PUSH
12765: LD_INT 8
12767: LESSEQUAL
12768: PUSH
12769: LD_VAR 0 2
12773: PUSH
12774: LD_VAR 0 4
12778: ARRAY
12779: PPUSH
12780: CALL_OW 256
12784: PUSH
12785: LD_VAR 0 10
12789: LESS
12790: AND
12791: IFFALSE 12820
// begin SetFuel ( filter [ p ] , 100 ) ;
12793: LD_VAR 0 2
12797: PUSH
12798: LD_VAR 0 4
12802: ARRAY
12803: PPUSH
12804: LD_INT 100
12806: PPUSH
12807: CALL_OW 240
// ComExitVehicle ( un ) ;
12811: LD_VAR 0 11
12815: PPUSH
12816: CALL_OW 121
// end ; end ;
12820: GO 12596
12822: POP
12823: POP
// end ; end else
12824: GO 13024
// begin if not IsInUnit ( ru7_eng [ i ] ) and not HasTask ( ru7_eng [ i ] ) and ru7_blist = 0 then
12826: LD_EXP 29
12830: PUSH
12831: LD_VAR 0 1
12835: ARRAY
12836: PPUSH
12837: CALL_OW 310
12841: NOT
12842: PUSH
12843: LD_EXP 29
12847: PUSH
12848: LD_VAR 0 1
12852: ARRAY
12853: PPUSH
12854: CALL_OW 314
12858: NOT
12859: AND
12860: PUSH
12861: LD_EXP 36
12865: PUSH
12866: LD_INT 0
12868: EQUAL
12869: AND
12870: IFFALSE 12890
// ComEnterUnit ( ru7_eng [ i ] , ru_east_dep ) ;
12872: LD_EXP 29
12876: PUSH
12877: LD_VAR 0 1
12881: ARRAY
12882: PPUSH
12883: LD_INT 52
12885: PPUSH
12886: CALL_OW 120
// if ru7_blist > 0 and GetResourceType ( GetBase ( ru_east_dep ) , mat_cans >= 100 ) and FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( ru_east_dep ) , GetY ( ru_east_dep ) , 70 ] ] ) = 0 then
12890: LD_EXP 36
12894: PUSH
12895: LD_INT 0
12897: GREATER
12898: PUSH
12899: LD_INT 52
12901: PPUSH
12902: CALL_OW 274
12906: PPUSH
12907: LD_INT 1
12909: PUSH
12910: LD_INT 100
12912: GREATEREQUAL
12913: PPUSH
12914: CALL_OW 275
12918: AND
12919: PUSH
12920: LD_INT 81
12922: PUSH
12923: LD_INT 7
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 92
12932: PUSH
12933: LD_INT 52
12935: PPUSH
12936: CALL_OW 250
12940: PUSH
12941: LD_INT 52
12943: PPUSH
12944: CALL_OW 251
12948: PUSH
12949: LD_INT 70
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: AND
12971: IFFALSE 13024
// begin ComBuild ( ru7_eng [ i ] , ru7_blist [ 1 ] , ru7_blist [ 2 ] , ru7_blist [ 3 ] , ru7_blist [ 4 ] ) ;
12973: LD_EXP 29
12977: PUSH
12978: LD_VAR 0 1
12982: ARRAY
12983: PPUSH
12984: LD_EXP 36
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: LD_EXP 36
12997: PUSH
12998: LD_INT 2
13000: ARRAY
13001: PPUSH
13002: LD_EXP 36
13006: PUSH
13007: LD_INT 3
13009: ARRAY
13010: PPUSH
13011: LD_EXP 36
13015: PUSH
13016: LD_INT 4
13018: ARRAY
13019: PPUSH
13020: CALL_OW 145
// end ; end ; end ;
13024: GO 12353
13026: POP
13027: POP
// end ; if vehicles > 0 then
13028: LD_VAR 0 12
13032: PUSH
13033: LD_INT 0
13035: GREATER
13036: IFFALSE 13341
// begin filter := UnitFilter ( vehicles , [ [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_VAR 0 12
13047: PPUSH
13048: LD_INT 3
13050: PUSH
13051: LD_INT 58
13053: PUSH
13054: EMPTY
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 34
13066: PUSH
13067: LD_INT 52
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 72
13086: ST_TO_ADDR
// if filter > 0 then
13087: LD_VAR 0 2
13091: PUSH
13092: LD_INT 0
13094: GREATER
13095: IFFALSE 13341
// begin for i = 1 to filter do
13097: LD_ADDR_VAR 0 1
13101: PUSH
13102: DOUBLE
13103: LD_INT 1
13105: DEC
13106: ST_TO_ADDR
13107: LD_VAR 0 2
13111: PUSH
13112: FOR_TO
13113: IFFALSE 13339
// begin if GetDistUnits ( filter [ i ] , ru_east_dep ) <= 8 and GetFuel ( filter [ i ] ) <= 67 then
13115: LD_VAR 0 2
13119: PUSH
13120: LD_VAR 0 1
13124: ARRAY
13125: PPUSH
13126: LD_INT 52
13128: PPUSH
13129: CALL_OW 296
13133: PUSH
13134: LD_INT 8
13136: LESSEQUAL
13137: PUSH
13138: LD_VAR 0 2
13142: PUSH
13143: LD_VAR 0 1
13147: ARRAY
13148: PPUSH
13149: CALL_OW 261
13153: PUSH
13154: LD_INT 67
13156: LESSEQUAL
13157: AND
13158: IFFALSE 13178
// SetFuel ( filter [ i ] , 100 ) ;
13160: LD_VAR 0 2
13164: PUSH
13165: LD_VAR 0 1
13169: ARRAY
13170: PPUSH
13171: LD_INT 100
13173: PPUSH
13174: CALL_OW 240
// if GetLives ( filter [ i ] ) > is_hurt then
13178: LD_VAR 0 2
13182: PUSH
13183: LD_VAR 0 1
13187: ARRAY
13188: PPUSH
13189: CALL_OW 256
13193: PUSH
13194: LD_VAR 0 10
13198: GREATER
13199: IFFALSE 13221
// ProtectArea ( filter [ i ] , ru_east_dep ) else
13201: LD_VAR 0 2
13205: PUSH
13206: LD_VAR 0 1
13210: ARRAY
13211: PPUSH
13212: LD_INT 52
13214: PPUSH
13215: CALL 5036 0 2
13219: GO 13337
// begin ComMoveXY ( filter [ i ] , GetX ( ru_east_dep ) - 2 , GetY ( ru_east_dep ) - 2 ) ;
13221: LD_VAR 0 2
13225: PUSH
13226: LD_VAR 0 1
13230: ARRAY
13231: PPUSH
13232: LD_INT 52
13234: PPUSH
13235: CALL_OW 250
13239: PUSH
13240: LD_INT 2
13242: MINUS
13243: PPUSH
13244: LD_INT 52
13246: PPUSH
13247: CALL_OW 251
13251: PUSH
13252: LD_INT 2
13254: MINUS
13255: PPUSH
13256: CALL_OW 111
// un := IsDrivenBy ( filter [ i ] ) ;
13260: LD_ADDR_VAR 0 11
13264: PUSH
13265: LD_VAR 0 2
13269: PUSH
13270: LD_VAR 0 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 311
13280: ST_TO_ADDR
// if GetDistUnits ( filter [ i ] , ru_east_dep ) <= 8 and GetLives ( filter [ i ] ) < is_hurt then
13281: LD_VAR 0 2
13285: PUSH
13286: LD_VAR 0 1
13290: ARRAY
13291: PPUSH
13292: LD_INT 52
13294: PPUSH
13295: CALL_OW 296
13299: PUSH
13300: LD_INT 8
13302: LESSEQUAL
13303: PUSH
13304: LD_VAR 0 2
13308: PUSH
13309: LD_VAR 0 1
13313: ARRAY
13314: PPUSH
13315: CALL_OW 256
13319: PUSH
13320: LD_VAR 0 10
13324: LESS
13325: AND
13326: IFFALSE 13337
// begin ComExitVehicle ( un ) ;
13328: LD_VAR 0 11
13332: PPUSH
13333: CALL_OW 121
// end ; end ; end ;
13337: GO 13112
13339: POP
13340: POP
// end ; end ; end ; end_of_file
13341: PPOPN 13
13343: END
// export ru1_sold , ru1_eng , ru1_mech , ru1_sci , ru1_bazz , ru1_veh , ru1_lab , ru1_fac , ru1_blist , ru1_bweap ; every 0 0$01 trigger FilterAllUnits ( [ f_side , 1 ] ) > 0 do var i , filter , list , p , l , range , al_build , buildings , towers , is_hurt , un , vehicles , cranes ;
13344: LD_INT 22
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 69
13358: PUSH
13359: LD_INT 0
13361: GREATER
13362: IFFALSE 17125
13364: GO 13366
13366: DISABLE
13367: LD_INT 0
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
// begin enable ;
13382: ENABLE
// ru1_sold := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
13383: LD_ADDR_EXP 38
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_INT 1
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: ST_TO_ADDR
// ru1_eng := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13417: LD_ADDR_EXP 39
13421: PUSH
13422: LD_INT 22
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 69
13450: ST_TO_ADDR
// ru1_mech := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] ] ) ;
13451: LD_ADDR_EXP 40
13455: PUSH
13456: LD_INT 22
13458: PUSH
13459: LD_INT 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// ru1_sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
13485: LD_ADDR_EXP 41
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 4
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: ST_TO_ADDR
// ru1_bazz := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 9 ] ] ) ;
13519: LD_ADDR_EXP 42
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 25
13536: PUSH
13537: LD_INT 9
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PPUSH
13548: CALL_OW 69
13552: ST_TO_ADDR
// ru1_veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
13553: LD_ADDR_EXP 43
13557: PUSH
13558: LD_INT 22
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: LD_INT 34
13583: PUSH
13584: LD_INT 52
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: ST_TO_ADDR
// ru1_lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
13605: LD_ADDR_EXP 44
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 8
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 7
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PPUSH
13652: CALL_OW 69
13656: ST_TO_ADDR
// ru1_fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
13657: LD_ADDR_EXP 45
13661: PUSH
13662: LD_INT 22
13664: PUSH
13665: LD_INT 1
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 30
13687: PUSH
13688: LD_INT 3
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 69
13708: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
13709: LD_ADDR_VAR 0 9
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 30
13729: PUSH
13730: LD_INT 31
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 30
13739: PUSH
13740: LD_INT 32
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PPUSH
13756: CALL_OW 69
13760: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13761: LD_ADDR_VAR 0 8
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 30
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 30
13791: PUSH
13792: LD_INT 5
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: ST_TO_ADDR
// al_build := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
13813: LD_ADDR_VAR 0 7
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 3
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
13847: LD_ADDR_VAR 0 12
13851: PUSH
13852: LD_INT 22
13854: PUSH
13855: LD_INT 1
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 2
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: ST_TO_ADDR
// is_hurt := [ 500 , 510 , 520 ] [ Difficulty ] ;
13881: LD_ADDR_VAR 0 10
13885: PUSH
13886: LD_INT 500
13888: PUSH
13889: LD_INT 510
13891: PUSH
13892: LD_INT 520
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: PUSH
13900: LD_OWVAR 67
13904: ARRAY
13905: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) > 0 and ru1_fac > 0 then
13906: LD_INT 22
13908: PUSH
13909: LD_INT 1
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 35
13918: PUSH
13919: LD_INT 0
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 2
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_INT 32
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 30
13941: PUSH
13942: LD_INT 33
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: PUSH
13964: LD_INT 0
13966: GREATER
13967: PUSH
13968: LD_EXP 45
13972: PUSH
13973: LD_INT 0
13975: GREATER
13976: AND
13977: IFFALSE 14088
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
13979: LD_ADDR_VAR 0 2
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_INT 1
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 35
13996: PUSH
13997: LD_INT 0
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 32
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 33
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: PPUSH
14037: CALL_OW 69
14041: ST_TO_ADDR
// for i = 1 to filter do
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: DOUBLE
14048: LD_INT 1
14050: DEC
14051: ST_TO_ADDR
14052: LD_VAR 0 2
14056: PUSH
14057: FOR_TO
14058: IFFALSE 14086
// ComPlaceWeapon ( filter [ i ] , ru1_bweap [ 1 ] ) ;
14060: LD_VAR 0 2
14064: PUSH
14065: LD_VAR 0 1
14069: ARRAY
14070: PPUSH
14071: LD_EXP 47
14075: PUSH
14076: LD_INT 1
14078: ARRAY
14079: PPUSH
14080: CALL_OW 148
14084: GO 14057
14086: POP
14087: POP
// end ; if UnitsInside ( ru1_fac [ 1 ] ) = 0 and BuildingStatus ( ru1_fac ) = bs_working then
14088: LD_EXP 45
14092: PUSH
14093: LD_INT 1
14095: ARRAY
14096: PPUSH
14097: CALL_OW 313
14101: PUSH
14102: LD_INT 0
14104: EQUAL
14105: PUSH
14106: LD_EXP 45
14110: PPUSH
14111: CALL_OW 461
14115: PUSH
14116: LD_INT 3
14118: EQUAL
14119: AND
14120: IFFALSE 14135
// ComCancel ( ru1_fac [ 1 ] ) ;
14122: LD_EXP 45
14126: PUSH
14127: LD_INT 1
14129: ARRAY
14130: PPUSH
14131: CALL_OW 127
// if ru1_sold > 0 then
14135: LD_EXP 38
14139: PUSH
14140: LD_INT 0
14142: GREATER
14143: IFFALSE 14668
// begin for i = 1 to ru1_sold do
14145: LD_ADDR_VAR 0 1
14149: PUSH
14150: DOUBLE
14151: LD_INT 1
14153: DEC
14154: ST_TO_ADDR
14155: LD_EXP 38
14159: PUSH
14160: FOR_TO
14161: IFFALSE 14666
// begin if GetLives ( ru1_sold [ i ] ) <= is_hurt then
14163: LD_EXP 38
14167: PUSH
14168: LD_VAR 0 1
14172: ARRAY
14173: PPUSH
14174: CALL_OW 256
14178: PUSH
14179: LD_VAR 0 10
14183: LESSEQUAL
14184: IFFALSE 14257
// begin if IsInUnit ( ru1_sold [ i ] ) then
14186: LD_EXP 38
14190: PUSH
14191: LD_VAR 0 1
14195: ARRAY
14196: PPUSH
14197: CALL_OW 310
14201: IFFALSE 14218
// ComExitBuilding ( ru1_sold [ i ] ) ;
14203: LD_EXP 38
14207: PUSH
14208: LD_VAR 0 1
14212: ARRAY
14213: PPUSH
14214: CALL_OW 122
// ComMoveXY ( ru1_sold [ i ] , GetX ( ru_north_dep ) - 1 , GetY ( ru_north_dep ) + 2 ) ;
14218: LD_EXP 38
14222: PUSH
14223: LD_VAR 0 1
14227: ARRAY
14228: PPUSH
14229: LD_INT 120
14231: PPUSH
14232: CALL_OW 250
14236: PUSH
14237: LD_INT 1
14239: MINUS
14240: PPUSH
14241: LD_INT 120
14243: PPUSH
14244: CALL_OW 251
14248: PUSH
14249: LD_INT 2
14251: PLUS
14252: PPUSH
14253: CALL_OW 111
// end ; if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 and UnitFilter ( ru1_sold , [ f_outside ] ) = 0 then
14257: LD_VAR 0 9
14261: PPUSH
14262: LD_INT 24
14264: PUSH
14265: LD_INT 300
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 58
14274: PUSH
14275: EMPTY
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 72
14286: PUSH
14287: LD_INT 0
14289: GREATER
14290: PUSH
14291: LD_EXP 38
14295: PPUSH
14296: LD_INT 56
14298: PUSH
14299: EMPTY
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: PUSH
14307: LD_INT 0
14309: EQUAL
14310: AND
14311: IFFALSE 14345
// begin filter := UnitsInside ( buildings [ 1 ] ) ;
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: LD_VAR 0 8
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: CALL_OW 313
14331: ST_TO_ADDR
// ComExitBuilding ( filter [ 1 ] ) ;
14332: LD_VAR 0 2
14336: PUSH
14337: LD_INT 1
14339: ARRAY
14340: PPUSH
14341: CALL_OW 122
// end ; if GetLives ( ru1_sold [ i ] ) > is_hurt and not HasTask ( ru1_sold [ i ] ) and not IsInUnit ( ru1_sold [ i ] ) then
14345: LD_EXP 38
14349: PUSH
14350: LD_VAR 0 1
14354: ARRAY
14355: PPUSH
14356: CALL_OW 256
14360: PUSH
14361: LD_VAR 0 10
14365: GREATER
14366: PUSH
14367: LD_EXP 38
14371: PUSH
14372: LD_VAR 0 1
14376: ARRAY
14377: PPUSH
14378: CALL_OW 314
14382: NOT
14383: AND
14384: PUSH
14385: LD_EXP 38
14389: PUSH
14390: LD_VAR 0 1
14394: ARRAY
14395: PPUSH
14396: CALL_OW 310
14400: NOT
14401: AND
14402: IFFALSE 14664
// begin if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 then
14404: LD_VAR 0 9
14408: PPUSH
14409: LD_INT 24
14411: PUSH
14412: LD_INT 300
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 58
14421: PUSH
14422: EMPTY
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 72
14433: PUSH
14434: LD_INT 0
14436: GREATER
14437: IFFALSE 14490
// begin ComEnterUnit ( ru1_sold [ i ] , UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) [ 1 ] ) end else
14439: LD_EXP 38
14443: PUSH
14444: LD_VAR 0 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 9
14454: PPUSH
14455: LD_INT 24
14457: PUSH
14458: LD_INT 300
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 58
14467: PUSH
14468: EMPTY
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 72
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: CALL_OW 120
14488: GO 14664
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
14490: LD_VAR 0 8
14494: PPUSH
14495: LD_INT 24
14497: PUSH
14498: LD_INT 251
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 72
14509: PUSH
14510: LD_INT 0
14512: GREATER
14513: IFFALSE 14601
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
14515: LD_ADDR_VAR 0 5
14519: PUSH
14520: DOUBLE
14521: LD_INT 1
14523: DEC
14524: ST_TO_ADDR
14525: LD_VAR 0 8
14529: PPUSH
14530: LD_INT 24
14532: PUSH
14533: LD_INT 251
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 72
14544: PUSH
14545: FOR_TO
14546: IFFALSE 14597
// if UnitsInside ( buildings [ l ] ) < 6 then
14548: LD_VAR 0 8
14552: PUSH
14553: LD_VAR 0 5
14557: ARRAY
14558: PPUSH
14559: CALL_OW 313
14563: PUSH
14564: LD_INT 6
14566: LESS
14567: IFFALSE 14595
// ComEnterUnit ( ru1_sold [ i ] , buildings [ l ] ) ;
14569: LD_EXP 38
14573: PUSH
14574: LD_VAR 0 1
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 8
14584: PUSH
14585: LD_VAR 0 5
14589: ARRAY
14590: PPUSH
14591: CALL_OW 120
14595: GO 14545
14597: POP
14598: POP
// end else
14599: GO 14664
// if GetDistUnits ( ru1_sold [ i ] , ru_north_dep ) >= 12 then
14601: LD_EXP 38
14605: PUSH
14606: LD_VAR 0 1
14610: ARRAY
14611: PPUSH
14612: LD_INT 120
14614: PPUSH
14615: CALL_OW 296
14619: PUSH
14620: LD_INT 12
14622: GREATEREQUAL
14623: IFFALSE 14664
// ComMoveXY ( ru1_sold [ i ] , GetX ( ru_north_dep ) - 1 , GetX ( ru_north_dep ) + 1 ) ;
14625: LD_EXP 38
14629: PUSH
14630: LD_VAR 0 1
14634: ARRAY
14635: PPUSH
14636: LD_INT 120
14638: PPUSH
14639: CALL_OW 250
14643: PUSH
14644: LD_INT 1
14646: MINUS
14647: PPUSH
14648: LD_INT 120
14650: PPUSH
14651: CALL_OW 250
14655: PUSH
14656: LD_INT 1
14658: PLUS
14659: PPUSH
14660: CALL_OW 111
// end ; end ;
14664: GO 14160
14666: POP
14667: POP
// end ; if ru1_bazz > 0 then
14668: LD_EXP 42
14672: PUSH
14673: LD_INT 0
14675: GREATER
14676: IFFALSE 15003
// begin for i = 1 to ru1_bazz do
14678: LD_ADDR_VAR 0 1
14682: PUSH
14683: DOUBLE
14684: LD_INT 1
14686: DEC
14687: ST_TO_ADDR
14688: LD_EXP 42
14692: PUSH
14693: FOR_TO
14694: IFFALSE 15001
// begin if GetLives ( ru1_bazz ) <= is_hurt then
14696: LD_EXP 42
14700: PPUSH
14701: CALL_OW 256
14705: PUSH
14706: LD_VAR 0 10
14710: LESSEQUAL
14711: IFFALSE 14784
// begin if IsInUnit ( ru1_bazz [ i ] ) then
14713: LD_EXP 42
14717: PUSH
14718: LD_VAR 0 1
14722: ARRAY
14723: PPUSH
14724: CALL_OW 310
14728: IFFALSE 14745
// ComExitBuilding ( ru1_bazz [ i ] ) ;
14730: LD_EXP 42
14734: PUSH
14735: LD_VAR 0 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 122
// ComMoveXY ( ru1_bazz [ i ] , GetX ( ru_north_dep ) - 1 , GetY ( ru_north_dep ) + 2 ) ;
14745: LD_EXP 42
14749: PUSH
14750: LD_VAR 0 1
14754: ARRAY
14755: PPUSH
14756: LD_INT 120
14758: PPUSH
14759: CALL_OW 250
14763: PUSH
14764: LD_INT 1
14766: MINUS
14767: PPUSH
14768: LD_INT 120
14770: PPUSH
14771: CALL_OW 251
14775: PUSH
14776: LD_INT 2
14778: PLUS
14779: PPUSH
14780: CALL_OW 111
// end ; if GetLives ( ru1_bazz [ i ] ) > is_hurt then
14784: LD_EXP 42
14788: PUSH
14789: LD_VAR 0 1
14793: ARRAY
14794: PPUSH
14795: CALL_OW 256
14799: PUSH
14800: LD_VAR 0 10
14804: GREATER
14805: IFFALSE 14999
// if not IsInUnit ( ru1_bazz [ i ] ) then
14807: LD_EXP 42
14811: PUSH
14812: LD_VAR 0 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 310
14822: NOT
14823: IFFALSE 14999
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
14825: LD_VAR 0 8
14829: PPUSH
14830: LD_INT 24
14832: PUSH
14833: LD_INT 251
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 72
14844: PUSH
14845: LD_INT 0
14847: GREATER
14848: IFFALSE 14936
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
14850: LD_ADDR_VAR 0 5
14854: PUSH
14855: DOUBLE
14856: LD_INT 1
14858: DEC
14859: ST_TO_ADDR
14860: LD_VAR 0 8
14864: PPUSH
14865: LD_INT 24
14867: PUSH
14868: LD_INT 251
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 72
14879: PUSH
14880: FOR_TO
14881: IFFALSE 14932
// if UnitsInside ( buildings [ l ] ) < 6 then
14883: LD_VAR 0 8
14887: PUSH
14888: LD_VAR 0 5
14892: ARRAY
14893: PPUSH
14894: CALL_OW 313
14898: PUSH
14899: LD_INT 6
14901: LESS
14902: IFFALSE 14930
// ComEnterUnit ( ru1_bazz [ i ] , buildings [ l ] ) ;
14904: LD_EXP 42
14908: PUSH
14909: LD_VAR 0 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 8
14919: PUSH
14920: LD_VAR 0 5
14924: ARRAY
14925: PPUSH
14926: CALL_OW 120
14930: GO 14880
14932: POP
14933: POP
// end else
14934: GO 14999
// if GetDistUnits ( ru1_bazz [ i ] , ru_north_dep ) < 12 then
14936: LD_EXP 42
14940: PUSH
14941: LD_VAR 0 1
14945: ARRAY
14946: PPUSH
14947: LD_INT 120
14949: PPUSH
14950: CALL_OW 296
14954: PUSH
14955: LD_INT 12
14957: LESS
14958: IFFALSE 14999
// ComMoveXY ( ru1_bazz [ i ] , GetX ( ru_north_dep ) - 1 , GetX ( ru_north_dep ) + 1 ) ;
14960: LD_EXP 42
14964: PUSH
14965: LD_VAR 0 1
14969: ARRAY
14970: PPUSH
14971: LD_INT 120
14973: PPUSH
14974: CALL_OW 250
14978: PUSH
14979: LD_INT 1
14981: MINUS
14982: PPUSH
14983: LD_INT 120
14985: PPUSH
14986: CALL_OW 250
14990: PUSH
14991: LD_INT 1
14993: PLUS
14994: PPUSH
14995: CALL_OW 111
// end ;
14999: GO 14693
15001: POP
15002: POP
// end ; if ru1_sci > 0 then
15003: LD_EXP 41
15007: PUSH
15008: LD_INT 0
15010: GREATER
15011: IFFALSE 15569
// begin for i = 1 to ru1_sci do
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: DOUBLE
15019: LD_INT 1
15021: DEC
15022: ST_TO_ADDR
15023: LD_EXP 41
15027: PUSH
15028: FOR_TO
15029: IFFALSE 15567
// begin if not HasTask ( ru1_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) = 0 then
15031: LD_EXP 41
15035: PUSH
15036: LD_VAR 0 1
15040: ARRAY
15041: PPUSH
15042: CALL_OW 314
15046: NOT
15047: PUSH
15048: LD_INT 22
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 24
15073: PUSH
15074: LD_VAR 0 10
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_INT 0
15120: EQUAL
15121: AND
15122: IFFALSE 15319
// begin if ru1_lab > 0 then
15124: LD_EXP 44
15128: PUSH
15129: LD_INT 0
15131: GREATER
15132: IFFALSE 15160
// ComEnterUnit ( ru1_sci [ i ] , ru1_lab [ 1 ] ) else
15134: LD_EXP 41
15138: PUSH
15139: LD_VAR 0 1
15143: ARRAY
15144: PPUSH
15145: LD_EXP 44
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: CALL_OW 120
15158: GO 15223
// if GetDistUnits ( ru1_sci [ i ] , ru_north_dep ) > 10 then
15160: LD_EXP 41
15164: PUSH
15165: LD_VAR 0 1
15169: ARRAY
15170: PPUSH
15171: LD_INT 120
15173: PPUSH
15174: CALL_OW 296
15178: PUSH
15179: LD_INT 10
15181: GREATER
15182: IFFALSE 15223
// ComMoveXY ( ru1_sci [ i ] , GetX ( ru_north_dep ) - 2 , GetY ( ru_north_dep ) - 2 ) ;
15184: LD_EXP 41
15188: PUSH
15189: LD_VAR 0 1
15193: ARRAY
15194: PPUSH
15195: LD_INT 120
15197: PPUSH
15198: CALL_OW 250
15202: PUSH
15203: LD_INT 2
15205: MINUS
15206: PPUSH
15207: LD_INT 120
15209: PPUSH
15210: CALL_OW 251
15214: PUSH
15215: LD_INT 2
15217: MINUS
15218: PPUSH
15219: CALL_OW 111
// if ru1_mech = 0 and ru1_fac > 0 and ru1_sci > 2 then
15223: LD_EXP 40
15227: PUSH
15228: LD_INT 0
15230: EQUAL
15231: PUSH
15232: LD_EXP 45
15236: PUSH
15237: LD_INT 0
15239: GREATER
15240: AND
15241: PUSH
15242: LD_EXP 41
15246: PUSH
15247: LD_INT 2
15249: GREATER
15250: AND
15251: IFFALSE 15319
// begin if IsInUnit ( ru1_sci [ 1 ] ) then
15253: LD_EXP 41
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: CALL_OW 310
15266: IFFALSE 15281
// ComExitBuilding ( ru1_sci [ 1 ] ) ;
15268: LD_EXP 41
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: CALL_OW 122
// ComEnterUnit ( ru1_sci [ 1 ] , ru1_fac [ 1 ] ) ;
15281: LD_EXP 41
15285: PUSH
15286: LD_INT 1
15288: ARRAY
15289: PPUSH
15290: LD_EXP 45
15294: PUSH
15295: LD_INT 1
15297: ARRAY
15298: PPUSH
15299: CALL_OW 120
// AddComChangeProfession ( ru1_sci [ 1 ] , class_mechanic ) ;
15303: LD_EXP 41
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: LD_INT 3
15314: PPUSH
15315: CALL_OW 183
// end ; end ; if not HasTask ( ru1_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) > 0 then
15319: LD_EXP 41
15323: PUSH
15324: LD_VAR 0 1
15328: ARRAY
15329: PPUSH
15330: CALL_OW 314
15334: NOT
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 3
15358: PUSH
15359: LD_INT 24
15361: PUSH
15362: LD_VAR 0 10
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 3
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 4
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_INT 0
15408: GREATER
15409: AND
15410: IFFALSE 15565
// begin if IsInUnit ( ru1_sci [ i ] ) then
15412: LD_EXP 41
15416: PUSH
15417: LD_VAR 0 1
15421: ARRAY
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15444
// ComExitBuilding ( ru1_sci [ i ] ) ;
15429: LD_EXP 41
15433: PUSH
15434: LD_VAR 0 1
15438: ARRAY
15439: PPUSH
15440: CALL_OW 122
// filter := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) ;
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: LD_INT 22
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 3
15471: PUSH
15472: LD_INT 24
15474: PUSH
15475: LD_VAR 0 10
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 3
15490: PUSH
15491: LD_INT 25
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: PPUSH
15514: CALL_OW 69
15518: ST_TO_ADDR
// if filter > 0 then
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 0
15526: GREATER
15527: IFFALSE 15565
// ComHeal ( ru1_sci [ i ] , NearestUnitToUnit ( filter , ru1_sci [ i ] ) ) ;
15529: LD_EXP 41
15533: PUSH
15534: LD_VAR 0 1
15538: ARRAY
15539: PPUSH
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_EXP 41
15549: PUSH
15550: LD_VAR 0 1
15554: ARRAY
15555: PPUSH
15556: CALL_OW 74
15560: PPUSH
15561: CALL_OW 128
// end ; end ;
15565: GO 15028
15567: POP
15568: POP
// end ; if ru1_mech > 0 then
15569: LD_EXP 40
15573: PUSH
15574: LD_INT 0
15576: GREATER
15577: IFFALSE 16112
// begin for i = 1 to ru1_mech do
15579: LD_ADDR_VAR 0 1
15583: PUSH
15584: DOUBLE
15585: LD_INT 1
15587: DEC
15588: ST_TO_ADDR
15589: LD_EXP 40
15593: PUSH
15594: FOR_TO
15595: IFFALSE 16110
// begin if not HasTask ( ru1_mech ) then
15597: LD_EXP 40
15601: PPUSH
15602: CALL_OW 314
15606: NOT
15607: IFFALSE 16108
// begin if ru1_bweap > 0 and ru1_fac > 0 then
15609: LD_EXP 47
15613: PUSH
15614: LD_INT 0
15616: GREATER
15617: PUSH
15618: LD_EXP 45
15622: PUSH
15623: LD_INT 0
15625: GREATER
15626: AND
15627: IFFALSE 15762
// begin if GetDistUnits ( ru1_mech [ i ] , ru_north_dep ) > 11 then
15629: LD_EXP 40
15633: PUSH
15634: LD_VAR 0 1
15638: ARRAY
15639: PPUSH
15640: LD_INT 120
15642: PPUSH
15643: CALL_OW 296
15647: PUSH
15648: LD_INT 11
15650: GREATER
15651: IFFALSE 15694
// ComMoveXY ( ru1_mech [ i ] , GetX ( ru_north_dep ) - 2 , GetY ( ru_north_dep ) - 2 ) else
15653: LD_EXP 40
15657: PUSH
15658: LD_VAR 0 1
15662: ARRAY
15663: PPUSH
15664: LD_INT 120
15666: PPUSH
15667: CALL_OW 250
15671: PUSH
15672: LD_INT 2
15674: MINUS
15675: PPUSH
15676: LD_INT 120
15678: PPUSH
15679: CALL_OW 251
15683: PUSH
15684: LD_INT 2
15686: MINUS
15687: PPUSH
15688: CALL_OW 111
15692: GO 15726
// if IsDriver ( ru1_mech [ i ] ) then
15694: LD_EXP 40
15698: PUSH
15699: LD_VAR 0 1
15703: ARRAY
15704: PPUSH
15705: CALL 1235 0 1
15709: IFFALSE 15726
// ComExitVehicle ( ru1_mech [ i ] ) ;
15711: LD_EXP 40
15715: PUSH
15716: LD_VAR 0 1
15720: ARRAY
15721: PPUSH
15722: CALL_OW 121
// ComEnterUnit ( ru1_mech [ i ] , NearestUnitToUnit ( ru1_fac , ru1_mech [ i ] ) ) ;
15726: LD_EXP 40
15730: PUSH
15731: LD_VAR 0 1
15735: ARRAY
15736: PPUSH
15737: LD_EXP 45
15741: PPUSH
15742: LD_EXP 40
15746: PUSH
15747: LD_VAR 0 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 74
15757: PPUSH
15758: CALL_OW 120
// end ; if UnitFilter ( vehicles , [ f_empty ] ) > 0 and ru7_bweap = 0 then
15762: LD_VAR 0 12
15766: PPUSH
15767: LD_INT 58
15769: PUSH
15770: EMPTY
15771: LIST
15772: PPUSH
15773: CALL_OW 72
15777: PUSH
15778: LD_INT 0
15780: GREATER
15781: PUSH
15782: LD_EXP 37
15786: PUSH
15787: LD_INT 0
15789: EQUAL
15790: AND
15791: IFFALSE 16018
// begin if not IsDriver ( ru1_mech [ i ] ) then
15793: LD_EXP 40
15797: PUSH
15798: LD_VAR 0 1
15802: ARRAY
15803: PPUSH
15804: CALL 1235 0 1
15808: NOT
15809: IFFALSE 16016
// begin if UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) > 0 then
15811: LD_VAR 0 12
15815: PPUSH
15816: LD_INT 3
15818: PUSH
15819: LD_INT 24
15821: PUSH
15822: LD_VAR 0 10
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 72
15839: PUSH
15840: LD_INT 0
15842: GREATER
15843: IFFALSE 15905
// ComRepairVehicle ( ru1_mech [ i ] , NearestUnitToUnit ( ru1_mech [ i ] , UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) ) ) ;
15845: LD_EXP 40
15849: PUSH
15850: LD_VAR 0 1
15854: ARRAY
15855: PPUSH
15856: LD_EXP 40
15860: PUSH
15861: LD_VAR 0 1
15865: ARRAY
15866: PPUSH
15867: LD_VAR 0 12
15871: PPUSH
15872: LD_INT 3
15874: PUSH
15875: LD_INT 24
15877: PUSH
15878: LD_VAR 0 10
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PPUSH
15891: CALL_OW 72
15895: PPUSH
15896: CALL_OW 74
15900: PPUSH
15901: CALL_OW 129
// if IsInUnit ( ru1_mech [ i ] ) then
15905: LD_EXP 40
15909: PUSH
15910: LD_VAR 0 1
15914: ARRAY
15915: PPUSH
15916: CALL_OW 310
15920: IFFALSE 15937
// ComExitBuilding ( ru1_mech [ i ] ) ;
15922: LD_EXP 40
15926: PUSH
15927: LD_VAR 0 1
15931: ARRAY
15932: PPUSH
15933: CALL_OW 122
// if UnitFilter ( vehicles , [ f_not , [ f_lives , 1000 ] ] ) = 0 then
15937: LD_VAR 0 12
15941: PPUSH
15942: LD_INT 3
15944: PUSH
15945: LD_INT 24
15947: PUSH
15948: LD_INT 1000
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 72
15963: PUSH
15964: LD_INT 0
15966: EQUAL
15967: IFFALSE 16016
// ComEnterUnit ( ru1_mech [ i ] , NearestUnitToUnit ( UnitFilter ( vehicles , [ f_empty ] ) , ru1_mech [ i ] ) ) end ;
15969: LD_EXP 40
15973: PUSH
15974: LD_VAR 0 1
15978: ARRAY
15979: PPUSH
15980: LD_VAR 0 12
15984: PPUSH
15985: LD_INT 58
15987: PUSH
15988: EMPTY
15989: LIST
15990: PPUSH
15991: CALL_OW 72
15995: PPUSH
15996: LD_EXP 40
16000: PUSH
16001: LD_VAR 0 1
16005: ARRAY
16006: PPUSH
16007: CALL_OW 74
16011: PPUSH
16012: CALL_OW 120
// end else
16016: GO 16108
// if ru1_fac > 0 then
16018: LD_EXP 45
16022: PUSH
16023: LD_INT 0
16025: GREATER
16026: IFFALSE 16054
// ComEnterUnit ( ru1_mech [ i ] , ru1_fac [ 1 ] ) else
16028: LD_EXP 40
16032: PUSH
16033: LD_VAR 0 1
16037: ARRAY
16038: PPUSH
16039: LD_EXP 45
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: CALL_OW 120
16052: GO 16108
// begin ComEnterUnit ( ru1_mech [ i ] , NearestUnitToUnit ( buildings , ru1_mech [ i ] ) ) ;
16054: LD_EXP 40
16058: PUSH
16059: LD_VAR 0 1
16063: ARRAY
16064: PPUSH
16065: LD_VAR 0 8
16069: PPUSH
16070: LD_EXP 40
16074: PUSH
16075: LD_VAR 0 1
16079: ARRAY
16080: PPUSH
16081: CALL_OW 74
16085: PPUSH
16086: CALL_OW 120
// AddComChangeProfession ( ru1_mech [ i ] , class_soldier ) ;
16090: LD_EXP 40
16094: PUSH
16095: LD_VAR 0 1
16099: ARRAY
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: CALL_OW 183
// end ; end ; end ;
16108: GO 15594
16110: POP
16111: POP
// end ; if ru1_eng > 0 then
16112: LD_EXP 39
16116: PUSH
16117: LD_INT 0
16119: GREATER
16120: IFFALSE 16812
// begin for i = 1 to ru1_eng do
16122: LD_ADDR_VAR 0 1
16126: PUSH
16127: DOUBLE
16128: LD_INT 1
16130: DEC
16131: ST_TO_ADDR
16132: LD_EXP 39
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16810
// begin if UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
16140: LD_VAR 0 7
16144: PPUSH
16145: LD_INT 3
16147: PUSH
16148: LD_INT 24
16150: PUSH
16151: LD_INT 1000
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL_OW 72
16166: PUSH
16167: LD_INT 0
16169: GREATER
16170: IFFALSE 16610
// begin if IsInUnit ( ru1_eng [ i ] ) then
16172: LD_EXP 39
16176: PUSH
16177: LD_VAR 0 1
16181: ARRAY
16182: PPUSH
16183: CALL_OW 310
16187: IFFALSE 16204
// ComExitBuilding ( ru1_eng [ i ] ) ;
16189: LD_EXP 39
16193: PUSH
16194: LD_VAR 0 1
16198: ARRAY
16199: PPUSH
16200: CALL_OW 122
// if not HasTask ( ru1_eng [ i ] ) then
16204: LD_EXP 39
16208: PUSH
16209: LD_VAR 0 1
16213: ARRAY
16214: PPUSH
16215: CALL_OW 314
16219: NOT
16220: IFFALSE 16280
// ComRepairBuilding ( ru1_eng [ i ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , ru1_eng [ i ] ) ) ;
16222: LD_EXP 39
16226: PUSH
16227: LD_VAR 0 1
16231: ARRAY
16232: PPUSH
16233: LD_VAR 0 7
16237: PPUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 24
16243: PUSH
16244: LD_INT 1000
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 72
16259: PPUSH
16260: LD_EXP 39
16264: PUSH
16265: LD_VAR 0 1
16269: ARRAY
16270: PPUSH
16271: CALL_OW 74
16275: PPUSH
16276: CALL_OW 130
// if FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_weapon , ru_crane ] , [ f_not , [ f_empty ] ] ] ] ) > 0 then
16280: LD_INT 22
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 34
16292: PUSH
16293: LD_INT 52
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: LD_INT 58
16305: PUSH
16306: EMPTY
16307: LIST
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: LD_INT 0
16328: GREATER
16329: IFFALSE 16608
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_crane ] ] ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 34
16348: PUSH
16349: LD_INT 52
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PPUSH
16360: CALL_OW 69
16364: ST_TO_ADDR
// for p = 1 to filter do
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: DOUBLE
16371: LD_INT 1
16373: DEC
16374: ST_TO_ADDR
16375: LD_VAR 0 2
16379: PUSH
16380: FOR_TO
16381: IFFALSE 16606
// if GetLives ( filter [ p ] ) >= is_hurt + 100 then
16383: LD_VAR 0 2
16387: PUSH
16388: LD_VAR 0 4
16392: ARRAY
16393: PPUSH
16394: CALL_OW 256
16398: PUSH
16399: LD_VAR 0 10
16403: PUSH
16404: LD_INT 100
16406: PLUS
16407: GREATEREQUAL
16408: IFFALSE 16470
// ComRepairBuilding ( filter [ p ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , filter [ p ] ) ) else
16410: LD_VAR 0 2
16414: PUSH
16415: LD_VAR 0 4
16419: ARRAY
16420: PPUSH
16421: LD_VAR 0 7
16425: PPUSH
16426: LD_INT 3
16428: PUSH
16429: LD_INT 24
16431: PUSH
16432: LD_INT 1000
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL_OW 72
16447: PPUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_VAR 0 4
16457: ARRAY
16458: PPUSH
16459: CALL_OW 74
16463: PPUSH
16464: CALL_OW 130
16468: GO 16604
// begin ComMoveXY ( filter [ p ] , GetX ( ru_north_dep ) - 2 , GetY ( ru_north_dep ) - 2 ) ;
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 4
16479: ARRAY
16480: PPUSH
16481: LD_INT 120
16483: PPUSH
16484: CALL_OW 250
16488: PUSH
16489: LD_INT 2
16491: MINUS
16492: PPUSH
16493: LD_INT 120
16495: PPUSH
16496: CALL_OW 251
16500: PUSH
16501: LD_INT 2
16503: MINUS
16504: PPUSH
16505: CALL_OW 111
// un := IsDrivenBy ( filter [ p ] ) ;
16509: LD_ADDR_VAR 0 11
16513: PUSH
16514: LD_VAR 0 2
16518: PUSH
16519: LD_VAR 0 4
16523: ARRAY
16524: PPUSH
16525: CALL_OW 311
16529: ST_TO_ADDR
// if GetDistUnits ( filter [ p ] , ru_north_dep ) <= 8 and GetLives ( filter [ p ] ) < is_hurt then
16530: LD_VAR 0 2
16534: PUSH
16535: LD_VAR 0 4
16539: ARRAY
16540: PPUSH
16541: LD_INT 120
16543: PPUSH
16544: CALL_OW 296
16548: PUSH
16549: LD_INT 8
16551: LESSEQUAL
16552: PUSH
16553: LD_VAR 0 2
16557: PUSH
16558: LD_VAR 0 4
16562: ARRAY
16563: PPUSH
16564: CALL_OW 256
16568: PUSH
16569: LD_VAR 0 10
16573: LESS
16574: AND
16575: IFFALSE 16604
// begin SetFuel ( filter [ p ] , 100 ) ;
16577: LD_VAR 0 2
16581: PUSH
16582: LD_VAR 0 4
16586: ARRAY
16587: PPUSH
16588: LD_INT 100
16590: PPUSH
16591: CALL_OW 240
// ComExitVehicle ( un ) ;
16595: LD_VAR 0 11
16599: PPUSH
16600: CALL_OW 121
// end ; end ;
16604: GO 16380
16606: POP
16607: POP
// end ; end else
16608: GO 16808
// begin if not IsInUnit ( ru1_eng [ i ] ) and not HasTask ( ru1_eng [ i ] ) and ru1_blist = 0 then
16610: LD_EXP 39
16614: PUSH
16615: LD_VAR 0 1
16619: ARRAY
16620: PPUSH
16621: CALL_OW 310
16625: NOT
16626: PUSH
16627: LD_EXP 39
16631: PUSH
16632: LD_VAR 0 1
16636: ARRAY
16637: PPUSH
16638: CALL_OW 314
16642: NOT
16643: AND
16644: PUSH
16645: LD_EXP 46
16649: PUSH
16650: LD_INT 0
16652: EQUAL
16653: AND
16654: IFFALSE 16674
// ComEnterUnit ( ru1_eng [ i ] , ru_north_dep ) ;
16656: LD_EXP 39
16660: PUSH
16661: LD_VAR 0 1
16665: ARRAY
16666: PPUSH
16667: LD_INT 120
16669: PPUSH
16670: CALL_OW 120
// if ru1_blist > 0 and GetResourceType ( GetBase ( ru_north_dep ) , mat_cans >= 100 ) and FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( ru_north_dep ) , GetY ( ru_north_dep ) , 70 ] ] ) = 0 then
16674: LD_EXP 46
16678: PUSH
16679: LD_INT 0
16681: GREATER
16682: PUSH
16683: LD_INT 120
16685: PPUSH
16686: CALL_OW 274
16690: PPUSH
16691: LD_INT 1
16693: PUSH
16694: LD_INT 100
16696: GREATEREQUAL
16697: PPUSH
16698: CALL_OW 275
16702: AND
16703: PUSH
16704: LD_INT 81
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 92
16716: PUSH
16717: LD_INT 120
16719: PPUSH
16720: CALL_OW 250
16724: PUSH
16725: LD_INT 120
16727: PPUSH
16728: CALL_OW 251
16732: PUSH
16733: LD_INT 70
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: PUSH
16751: LD_INT 0
16753: EQUAL
16754: AND
16755: IFFALSE 16808
// begin ComBuild ( ru1_eng [ i ] , ru1_blist [ 1 ] , ru1_blist [ 2 ] , ru1_blist [ 3 ] , ru1_blist [ 4 ] ) ;
16757: LD_EXP 39
16761: PUSH
16762: LD_VAR 0 1
16766: ARRAY
16767: PPUSH
16768: LD_EXP 46
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: PPUSH
16777: LD_EXP 46
16781: PUSH
16782: LD_INT 2
16784: ARRAY
16785: PPUSH
16786: LD_EXP 46
16790: PUSH
16791: LD_INT 3
16793: ARRAY
16794: PPUSH
16795: LD_EXP 46
16799: PUSH
16800: LD_INT 4
16802: ARRAY
16803: PPUSH
16804: CALL_OW 145
// end ; end ; end ;
16808: GO 16137
16810: POP
16811: POP
// end ; if vehicles > 0 then
16812: LD_VAR 0 12
16816: PUSH
16817: LD_INT 0
16819: GREATER
16820: IFFALSE 17125
// begin filter := UnitFilter ( vehicles , [ [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_VAR 0 12
16831: PPUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 58
16837: PUSH
16838: EMPTY
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 3
16847: PUSH
16848: LD_INT 34
16850: PUSH
16851: LD_INT 52
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 72
16870: ST_TO_ADDR
// if filter > 0 then
16871: LD_VAR 0 2
16875: PUSH
16876: LD_INT 0
16878: GREATER
16879: IFFALSE 17125
// begin for i = 1 to filter do
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: DOUBLE
16887: LD_INT 1
16889: DEC
16890: ST_TO_ADDR
16891: LD_VAR 0 2
16895: PUSH
16896: FOR_TO
16897: IFFALSE 17123
// begin if GetDistUnits ( filter [ i ] , ru_north_dep ) <= 8 and GetFuel ( filter [ i ] ) <= 67 then
16899: LD_VAR 0 2
16903: PUSH
16904: LD_VAR 0 1
16908: ARRAY
16909: PPUSH
16910: LD_INT 120
16912: PPUSH
16913: CALL_OW 296
16917: PUSH
16918: LD_INT 8
16920: LESSEQUAL
16921: PUSH
16922: LD_VAR 0 2
16926: PUSH
16927: LD_VAR 0 1
16931: ARRAY
16932: PPUSH
16933: CALL_OW 261
16937: PUSH
16938: LD_INT 67
16940: LESSEQUAL
16941: AND
16942: IFFALSE 16962
// SetFuel ( filter [ i ] , 100 ) ;
16944: LD_VAR 0 2
16948: PUSH
16949: LD_VAR 0 1
16953: ARRAY
16954: PPUSH
16955: LD_INT 100
16957: PPUSH
16958: CALL_OW 240
// if GetLives ( filter [ i ] ) > is_hurt then
16962: LD_VAR 0 2
16966: PUSH
16967: LD_VAR 0 1
16971: ARRAY
16972: PPUSH
16973: CALL_OW 256
16977: PUSH
16978: LD_VAR 0 10
16982: GREATER
16983: IFFALSE 17005
// ProtectArea ( filter [ i ] , ru_north_dep ) else
16985: LD_VAR 0 2
16989: PUSH
16990: LD_VAR 0 1
16994: ARRAY
16995: PPUSH
16996: LD_INT 120
16998: PPUSH
16999: CALL 5036 0 2
17003: GO 17121
// begin ComMoveXY ( filter [ i ] , GetX ( ru_north_dep ) - 2 , GetY ( ru_north_dep ) - 2 ) ;
17005: LD_VAR 0 2
17009: PUSH
17010: LD_VAR 0 1
17014: ARRAY
17015: PPUSH
17016: LD_INT 120
17018: PPUSH
17019: CALL_OW 250
17023: PUSH
17024: LD_INT 2
17026: MINUS
17027: PPUSH
17028: LD_INT 120
17030: PPUSH
17031: CALL_OW 251
17035: PUSH
17036: LD_INT 2
17038: MINUS
17039: PPUSH
17040: CALL_OW 111
// un := IsDrivenBy ( filter [ i ] ) ;
17044: LD_ADDR_VAR 0 11
17048: PUSH
17049: LD_VAR 0 2
17053: PUSH
17054: LD_VAR 0 1
17058: ARRAY
17059: PPUSH
17060: CALL_OW 311
17064: ST_TO_ADDR
// if GetDistUnits ( filter [ i ] , ru_north_dep ) <= 10 and GetLives ( filter [ i ] ) < is_hurt then
17065: LD_VAR 0 2
17069: PUSH
17070: LD_VAR 0 1
17074: ARRAY
17075: PPUSH
17076: LD_INT 120
17078: PPUSH
17079: CALL_OW 296
17083: PUSH
17084: LD_INT 10
17086: LESSEQUAL
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: LD_VAR 0 1
17097: ARRAY
17098: PPUSH
17099: CALL_OW 256
17103: PUSH
17104: LD_VAR 0 10
17108: LESS
17109: AND
17110: IFFALSE 17121
// begin ComExitVehicle ( un ) ;
17112: LD_VAR 0 11
17116: PPUSH
17117: CALL_OW 121
// end ; end ; end ;
17121: GO 16896
17123: POP
17124: POP
// end ; end ; end ; end_of_file
17125: PPOPN 13
17127: END
// export ru3_sold , ru3_eng , ru3_mech , ru3_sci , ru3_bazz , ru3_veh , ru3_lab , ru3_fac , ru3_blist , ru3_bweap ; every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 do var i , filter , list , p , l , range , al_build , buildings , towers , is_hurt , un , vehicles , cranes ;
17128: LD_INT 22
17130: PUSH
17131: LD_INT 3
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: PUSH
17143: LD_INT 0
17145: GREATER
17146: IFFALSE 20948
17148: GO 17150
17150: DISABLE
17151: LD_INT 0
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
// begin enable ;
17166: ENABLE
// ru3_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) diff [ ru_staff ] ;
17167: LD_ADDR_EXP 48
17171: PUSH
17172: LD_INT 22
17174: PUSH
17175: LD_INT 3
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 25
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: PUSH
17201: LD_EXP 14
17205: PUSH
17206: EMPTY
17207: LIST
17208: DIFF
17209: ST_TO_ADDR
// ru3_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
17210: LD_ADDR_EXP 49
17214: PUSH
17215: LD_INT 22
17217: PUSH
17218: LD_INT 3
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 25
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PPUSH
17239: CALL_OW 69
17243: ST_TO_ADDR
// ru3_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
17244: LD_ADDR_EXP 50
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 25
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: ST_TO_ADDR
// ru3_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
17278: LD_ADDR_EXP 51
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 25
17295: PUSH
17296: LD_INT 4
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PPUSH
17307: CALL_OW 69
17311: ST_TO_ADDR
// ru3_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
17312: LD_ADDR_EXP 52
17316: PUSH
17317: LD_INT 22
17319: PUSH
17320: LD_INT 3
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 25
17329: PUSH
17330: LD_INT 9
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: ST_TO_ADDR
// ru3_veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
17346: LD_ADDR_EXP 53
17350: PUSH
17351: LD_INT 22
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 21
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: LD_INT 34
17376: PUSH
17377: LD_INT 52
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: PPUSH
17393: CALL_OW 69
17397: ST_TO_ADDR
// ru3_lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
17398: LD_ADDR_EXP 54
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: LD_INT 30
17418: PUSH
17419: LD_INT 8
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 30
17428: PUSH
17429: LD_INT 7
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PPUSH
17445: CALL_OW 69
17449: ST_TO_ADDR
// ru3_fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
17450: LD_ADDR_EXP 55
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 2
17467: PUSH
17468: LD_INT 30
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 30
17480: PUSH
17481: LD_INT 3
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 69
17501: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
17502: LD_ADDR_VAR 0 9
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 30
17522: PUSH
17523: LD_INT 31
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 32
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17554: LD_ADDR_VAR 0 8
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 30
17574: PUSH
17575: LD_INT 4
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 30
17584: PUSH
17585: LD_INT 5
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: ST_TO_ADDR
// al_build := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
17606: LD_ADDR_VAR 0 7
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: LD_INT 3
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
17640: LD_ADDR_VAR 0 12
17644: PUSH
17645: LD_INT 22
17647: PUSH
17648: LD_INT 3
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 21
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: ST_TO_ADDR
// is_hurt := [ 500 , 510 , 520 ] [ Difficulty ] ;
17674: LD_ADDR_VAR 0 10
17678: PUSH
17679: LD_INT 500
17681: PUSH
17682: LD_INT 510
17684: PUSH
17685: LD_INT 520
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: LD_OWVAR 67
17697: ARRAY
17698: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) > 0 and ru3_fac > 0 then
17699: LD_INT 22
17701: PUSH
17702: LD_INT 3
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 35
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 30
17724: PUSH
17725: LD_INT 32
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 30
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: PPUSH
17752: CALL_OW 69
17756: PUSH
17757: LD_INT 0
17759: GREATER
17760: PUSH
17761: LD_EXP 55
17765: PUSH
17766: LD_INT 0
17768: GREATER
17769: AND
17770: IFFALSE 17881
// begin filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_bweapon , 0 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_INT 3
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 35
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: LD_INT 30
17802: PUSH
17803: LD_INT 32
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 30
17812: PUSH
17813: LD_INT 33
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: ST_TO_ADDR
// for i = 1 to filter do
17835: LD_ADDR_VAR 0 1
17839: PUSH
17840: DOUBLE
17841: LD_INT 1
17843: DEC
17844: ST_TO_ADDR
17845: LD_VAR 0 2
17849: PUSH
17850: FOR_TO
17851: IFFALSE 17879
// ComPlaceWeapon ( filter [ i ] , ru3_bweap [ 1 ] ) ;
17853: LD_VAR 0 2
17857: PUSH
17858: LD_VAR 0 1
17862: ARRAY
17863: PPUSH
17864: LD_EXP 57
17868: PUSH
17869: LD_INT 1
17871: ARRAY
17872: PPUSH
17873: CALL_OW 148
17877: GO 17850
17879: POP
17880: POP
// end ; if UnitsInside ( ru3_fac [ 1 ] ) = 0 and BuildingStatus ( ru3_fac ) = bs_working then
17881: LD_EXP 55
17885: PUSH
17886: LD_INT 1
17888: ARRAY
17889: PPUSH
17890: CALL_OW 313
17894: PUSH
17895: LD_INT 0
17897: EQUAL
17898: PUSH
17899: LD_EXP 55
17903: PPUSH
17904: CALL_OW 461
17908: PUSH
17909: LD_INT 3
17911: EQUAL
17912: AND
17913: IFFALSE 17928
// ComCancel ( ru3_fac [ 1 ] ) ;
17915: LD_EXP 55
17919: PUSH
17920: LD_INT 1
17922: ARRAY
17923: PPUSH
17924: CALL_OW 127
// if ru3_sold > 0 then
17928: LD_EXP 48
17932: PUSH
17933: LD_INT 0
17935: GREATER
17936: IFFALSE 18476
// begin for i = 1 to ru3_sold do
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: DOUBLE
17944: LD_INT 1
17946: DEC
17947: ST_TO_ADDR
17948: LD_EXP 48
17952: PUSH
17953: FOR_TO
17954: IFFALSE 18474
// begin if GetLives ( ru3_sold [ i ] ) <= is_hurt then
17956: LD_EXP 48
17960: PUSH
17961: LD_VAR 0 1
17965: ARRAY
17966: PPUSH
17967: CALL_OW 256
17971: PUSH
17972: LD_VAR 0 10
17976: LESSEQUAL
17977: IFFALSE 18050
// begin if IsInUnit ( ru3_sold [ i ] ) then
17979: LD_EXP 48
17983: PUSH
17984: LD_VAR 0 1
17988: ARRAY
17989: PPUSH
17990: CALL_OW 310
17994: IFFALSE 18011
// ComExitBuilding ( ru3_sold [ i ] ) ;
17996: LD_EXP 48
18000: PUSH
18001: LD_VAR 0 1
18005: ARRAY
18006: PPUSH
18007: CALL_OW 122
// ComMoveXY ( ru3_sold [ i ] , GetX ( ru_main_dep ) - 1 , GetY ( ru_main_dep ) + 2 ) ;
18011: LD_EXP 48
18015: PUSH
18016: LD_VAR 0 1
18020: ARRAY
18021: PPUSH
18022: LD_INT 152
18024: PPUSH
18025: CALL_OW 250
18029: PUSH
18030: LD_INT 1
18032: MINUS
18033: PPUSH
18034: LD_INT 152
18036: PPUSH
18037: CALL_OW 251
18041: PUSH
18042: LD_INT 2
18044: PLUS
18045: PPUSH
18046: CALL_OW 111
// end ; if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 and UnitFilter ( ru3_sold , [ f_outside ] ) = 0 then
18050: LD_VAR 0 9
18054: PPUSH
18055: LD_INT 24
18057: PUSH
18058: LD_INT 300
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 58
18067: PUSH
18068: EMPTY
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PPUSH
18075: CALL_OW 72
18079: PUSH
18080: LD_INT 0
18082: GREATER
18083: PUSH
18084: LD_EXP 48
18088: PPUSH
18089: LD_INT 56
18091: PUSH
18092: EMPTY
18093: LIST
18094: PPUSH
18095: CALL_OW 72
18099: PUSH
18100: LD_INT 0
18102: EQUAL
18103: AND
18104: IFFALSE 18138
// begin filter := UnitsInside ( buildings [ 1 ] ) ;
18106: LD_ADDR_VAR 0 2
18110: PUSH
18111: LD_VAR 0 8
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 313
18124: ST_TO_ADDR
// ComExitBuilding ( filter [ 1 ] ) ;
18125: LD_VAR 0 2
18129: PUSH
18130: LD_INT 1
18132: ARRAY
18133: PPUSH
18134: CALL_OW 122
// end ; if GetLives ( ru3_sold [ i ] ) > is_hurt and not HasTask ( ru3_sold [ i ] ) and not IsInUnit ( ru3_sold [ i ] ) then
18138: LD_EXP 48
18142: PUSH
18143: LD_VAR 0 1
18147: ARRAY
18148: PPUSH
18149: CALL_OW 256
18153: PUSH
18154: LD_VAR 0 10
18158: GREATER
18159: PUSH
18160: LD_EXP 48
18164: PUSH
18165: LD_VAR 0 1
18169: ARRAY
18170: PPUSH
18171: CALL_OW 314
18175: NOT
18176: AND
18177: PUSH
18178: LD_EXP 48
18182: PUSH
18183: LD_VAR 0 1
18187: ARRAY
18188: PPUSH
18189: CALL_OW 310
18193: NOT
18194: AND
18195: IFFALSE 18472
// begin if UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) > 0 then
18197: LD_VAR 0 9
18201: PPUSH
18202: LD_INT 24
18204: PUSH
18205: LD_INT 300
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 58
18214: PUSH
18215: EMPTY
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 72
18226: PUSH
18227: LD_INT 0
18229: GREATER
18230: IFFALSE 18283
// begin ComEnterUnit ( ru3_sold [ i ] , UnitFilter ( towers , [ [ f_lives , 300 ] , [ f_empty ] ] ) [ 1 ] ) end else
18232: LD_EXP 48
18236: PUSH
18237: LD_VAR 0 1
18241: ARRAY
18242: PPUSH
18243: LD_VAR 0 9
18247: PPUSH
18248: LD_INT 24
18250: PUSH
18251: LD_INT 300
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 58
18260: PUSH
18261: EMPTY
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 72
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PPUSH
18277: CALL_OW 120
18281: GO 18472
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
18283: LD_VAR 0 8
18287: PPUSH
18288: LD_INT 24
18290: PUSH
18291: LD_INT 251
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PPUSH
18298: CALL_OW 72
18302: PUSH
18303: LD_INT 0
18305: GREATER
18306: IFFALSE 18409
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
18308: LD_ADDR_VAR 0 5
18312: PUSH
18313: DOUBLE
18314: LD_INT 1
18316: DEC
18317: ST_TO_ADDR
18318: LD_VAR 0 8
18322: PPUSH
18323: LD_INT 24
18325: PUSH
18326: LD_INT 251
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 72
18337: PUSH
18338: FOR_TO
18339: IFFALSE 18405
// if UnitsInside ( buildings [ l ] ) < 6 then
18341: LD_VAR 0 8
18345: PUSH
18346: LD_VAR 0 5
18350: ARRAY
18351: PPUSH
18352: CALL_OW 313
18356: PUSH
18357: LD_INT 6
18359: LESS
18360: IFFALSE 18403
// ComEnterUnit ( ru3_sold [ i ] , UnitFilter ( buildings , [ f_lives , 251 ] ) [ l ] ) ;
18362: LD_EXP 48
18366: PUSH
18367: LD_VAR 0 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 8
18377: PPUSH
18378: LD_INT 24
18380: PUSH
18381: LD_INT 251
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 72
18392: PUSH
18393: LD_VAR 0 5
18397: ARRAY
18398: PPUSH
18399: CALL_OW 120
18403: GO 18338
18405: POP
18406: POP
// end else
18407: GO 18472
// if GetDistUnits ( ru3_sold [ i ] , ru_main_dep ) >= 12 then
18409: LD_EXP 48
18413: PUSH
18414: LD_VAR 0 1
18418: ARRAY
18419: PPUSH
18420: LD_INT 152
18422: PPUSH
18423: CALL_OW 296
18427: PUSH
18428: LD_INT 12
18430: GREATEREQUAL
18431: IFFALSE 18472
// ComMoveXY ( ru3_sold [ i ] , GetX ( ru_main_dep ) - 1 , GetX ( ru_main_dep ) + 1 ) ;
18433: LD_EXP 48
18437: PUSH
18438: LD_VAR 0 1
18442: ARRAY
18443: PPUSH
18444: LD_INT 152
18446: PPUSH
18447: CALL_OW 250
18451: PUSH
18452: LD_INT 1
18454: MINUS
18455: PPUSH
18456: LD_INT 152
18458: PPUSH
18459: CALL_OW 250
18463: PUSH
18464: LD_INT 1
18466: PLUS
18467: PPUSH
18468: CALL_OW 111
// end ; end ;
18472: GO 17953
18474: POP
18475: POP
// end ; if ru3_bazz > 0 then
18476: LD_EXP 52
18480: PUSH
18481: LD_INT 0
18483: GREATER
18484: IFFALSE 18826
// begin for i = 1 to ru3_bazz do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: DOUBLE
18492: LD_INT 1
18494: DEC
18495: ST_TO_ADDR
18496: LD_EXP 52
18500: PUSH
18501: FOR_TO
18502: IFFALSE 18824
// begin if GetLives ( ru3_bazz ) <= is_hurt then
18504: LD_EXP 52
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_VAR 0 10
18518: LESSEQUAL
18519: IFFALSE 18592
// begin if IsInUnit ( ru3_bazz [ i ] ) then
18521: LD_EXP 52
18525: PUSH
18526: LD_VAR 0 1
18530: ARRAY
18531: PPUSH
18532: CALL_OW 310
18536: IFFALSE 18553
// ComExitBuilding ( ru3_bazz [ i ] ) ;
18538: LD_EXP 52
18542: PUSH
18543: LD_VAR 0 1
18547: ARRAY
18548: PPUSH
18549: CALL_OW 122
// ComMoveXY ( ru3_bazz [ i ] , GetX ( ru_main_dep ) - 1 , GetY ( ru_main_dep ) + 2 ) ;
18553: LD_EXP 52
18557: PUSH
18558: LD_VAR 0 1
18562: ARRAY
18563: PPUSH
18564: LD_INT 152
18566: PPUSH
18567: CALL_OW 250
18571: PUSH
18572: LD_INT 1
18574: MINUS
18575: PPUSH
18576: LD_INT 152
18578: PPUSH
18579: CALL_OW 251
18583: PUSH
18584: LD_INT 2
18586: PLUS
18587: PPUSH
18588: CALL_OW 111
// end ; if GetLives ( ru3_bazz [ i ] ) > is_hurt then
18592: LD_EXP 52
18596: PUSH
18597: LD_VAR 0 1
18601: ARRAY
18602: PPUSH
18603: CALL_OW 256
18607: PUSH
18608: LD_VAR 0 10
18612: GREATER
18613: IFFALSE 18822
// if not IsInUnit ( ru3_bazz [ i ] ) then
18615: LD_EXP 52
18619: PUSH
18620: LD_VAR 0 1
18624: ARRAY
18625: PPUSH
18626: CALL_OW 310
18630: NOT
18631: IFFALSE 18822
// if UnitFilter ( buildings , [ f_lives , 251 ] ) > 0 then
18633: LD_VAR 0 8
18637: PPUSH
18638: LD_INT 24
18640: PUSH
18641: LD_INT 251
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 72
18652: PUSH
18653: LD_INT 0
18655: GREATER
18656: IFFALSE 18759
// begin for l = 1 to UnitFilter ( buildings , [ f_lives , 251 ] ) do
18658: LD_ADDR_VAR 0 5
18662: PUSH
18663: DOUBLE
18664: LD_INT 1
18666: DEC
18667: ST_TO_ADDR
18668: LD_VAR 0 8
18672: PPUSH
18673: LD_INT 24
18675: PUSH
18676: LD_INT 251
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 72
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18755
// if UnitsInside ( buildings [ l ] ) < 6 then
18691: LD_VAR 0 8
18695: PUSH
18696: LD_VAR 0 5
18700: ARRAY
18701: PPUSH
18702: CALL_OW 313
18706: PUSH
18707: LD_INT 6
18709: LESS
18710: IFFALSE 18753
// ComEnterUnit ( ru3_bazz [ i ] , UnitFilter ( buildings , [ f_lives , 251 ] ) [ l ] ) ;
18712: LD_EXP 52
18716: PUSH
18717: LD_VAR 0 1
18721: ARRAY
18722: PPUSH
18723: LD_VAR 0 8
18727: PPUSH
18728: LD_INT 24
18730: PUSH
18731: LD_INT 251
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 72
18742: PUSH
18743: LD_VAR 0 5
18747: ARRAY
18748: PPUSH
18749: CALL_OW 120
18753: GO 18688
18755: POP
18756: POP
// end else
18757: GO 18822
// if GetDistUnits ( ru3_bazz [ i ] , ru_main_dep ) < 12 then
18759: LD_EXP 52
18763: PUSH
18764: LD_VAR 0 1
18768: ARRAY
18769: PPUSH
18770: LD_INT 152
18772: PPUSH
18773: CALL_OW 296
18777: PUSH
18778: LD_INT 12
18780: LESS
18781: IFFALSE 18822
// ComMoveXY ( ru3_bazz [ i ] , GetX ( ru_main_dep ) - 1 , GetX ( ru_main_dep ) + 1 ) ;
18783: LD_EXP 52
18787: PUSH
18788: LD_VAR 0 1
18792: ARRAY
18793: PPUSH
18794: LD_INT 152
18796: PPUSH
18797: CALL_OW 250
18801: PUSH
18802: LD_INT 1
18804: MINUS
18805: PPUSH
18806: LD_INT 152
18808: PPUSH
18809: CALL_OW 250
18813: PUSH
18814: LD_INT 1
18816: PLUS
18817: PPUSH
18818: CALL_OW 111
// end ;
18822: GO 18501
18824: POP
18825: POP
// end ; if ru3_sci > 0 then
18826: LD_EXP 51
18830: PUSH
18831: LD_INT 0
18833: GREATER
18834: IFFALSE 19392
// begin for i = 1 to ru3_sci do
18836: LD_ADDR_VAR 0 1
18840: PUSH
18841: DOUBLE
18842: LD_INT 1
18844: DEC
18845: ST_TO_ADDR
18846: LD_EXP 51
18850: PUSH
18851: FOR_TO
18852: IFFALSE 19390
// begin if not HasTask ( ru3_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) = 0 then
18854: LD_EXP 51
18858: PUSH
18859: LD_VAR 0 1
18863: ARRAY
18864: PPUSH
18865: CALL_OW 314
18869: NOT
18870: PUSH
18871: LD_INT 22
18873: PUSH
18874: LD_INT 3
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 21
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: LD_INT 24
18896: PUSH
18897: LD_VAR 0 10
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 3
18912: PUSH
18913: LD_INT 25
18915: PUSH
18916: LD_INT 4
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: PPUSH
18936: CALL_OW 69
18940: PUSH
18941: LD_INT 0
18943: EQUAL
18944: AND
18945: IFFALSE 19142
// begin if ru3_lab > 0 then
18947: LD_EXP 54
18951: PUSH
18952: LD_INT 0
18954: GREATER
18955: IFFALSE 18983
// ComEnterUnit ( ru3_sci [ i ] , ru3_lab [ 1 ] ) else
18957: LD_EXP 51
18961: PUSH
18962: LD_VAR 0 1
18966: ARRAY
18967: PPUSH
18968: LD_EXP 54
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: CALL_OW 120
18981: GO 19046
// if GetDistUnits ( ru3_sci [ i ] , ru_main_dep ) > 10 then
18983: LD_EXP 51
18987: PUSH
18988: LD_VAR 0 1
18992: ARRAY
18993: PPUSH
18994: LD_INT 152
18996: PPUSH
18997: CALL_OW 296
19001: PUSH
19002: LD_INT 10
19004: GREATER
19005: IFFALSE 19046
// ComMoveXY ( ru3_sci [ i ] , GetX ( ru_main_dep ) - 2 , GetY ( ru_main_dep ) - 2 ) ;
19007: LD_EXP 51
19011: PUSH
19012: LD_VAR 0 1
19016: ARRAY
19017: PPUSH
19018: LD_INT 152
19020: PPUSH
19021: CALL_OW 250
19025: PUSH
19026: LD_INT 2
19028: MINUS
19029: PPUSH
19030: LD_INT 152
19032: PPUSH
19033: CALL_OW 251
19037: PUSH
19038: LD_INT 2
19040: MINUS
19041: PPUSH
19042: CALL_OW 111
// if ru3_mech = 0 and ru3_fac > 0 and ru3_sci > 2 then
19046: LD_EXP 50
19050: PUSH
19051: LD_INT 0
19053: EQUAL
19054: PUSH
19055: LD_EXP 55
19059: PUSH
19060: LD_INT 0
19062: GREATER
19063: AND
19064: PUSH
19065: LD_EXP 51
19069: PUSH
19070: LD_INT 2
19072: GREATER
19073: AND
19074: IFFALSE 19142
// begin if IsInUnit ( ru3_sci [ 1 ] ) then
19076: LD_EXP 51
19080: PUSH
19081: LD_INT 1
19083: ARRAY
19084: PPUSH
19085: CALL_OW 310
19089: IFFALSE 19104
// ComExitBuilding ( ru3_sci [ 1 ] ) ;
19091: LD_EXP 51
19095: PUSH
19096: LD_INT 1
19098: ARRAY
19099: PPUSH
19100: CALL_OW 122
// ComEnterUnit ( ru3_sci [ 1 ] , ru3_fac [ 1 ] ) ;
19104: LD_EXP 51
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: LD_EXP 55
19117: PUSH
19118: LD_INT 1
19120: ARRAY
19121: PPUSH
19122: CALL_OW 120
// AddComChangeProfession ( ru3_sci [ 1 ] , class_mechanic ) ;
19126: LD_EXP 51
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: LD_INT 3
19137: PPUSH
19138: CALL_OW 183
// end ; end ; if not HasTask ( ru3_sci [ i ] ) and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) > 0 then
19142: LD_EXP 51
19146: PUSH
19147: LD_VAR 0 1
19151: ARRAY
19152: PPUSH
19153: CALL_OW 314
19157: NOT
19158: PUSH
19159: LD_INT 22
19161: PUSH
19162: LD_INT 3
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: LD_INT 24
19184: PUSH
19185: LD_VAR 0 10
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 3
19200: PUSH
19201: LD_INT 25
19203: PUSH
19204: LD_INT 4
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: PPUSH
19224: CALL_OW 69
19228: PUSH
19229: LD_INT 0
19231: GREATER
19232: AND
19233: IFFALSE 19388
// begin if IsInUnit ( ru3_sci [ i ] ) then
19235: LD_EXP 51
19239: PUSH
19240: LD_VAR 0 1
19244: ARRAY
19245: PPUSH
19246: CALL_OW 310
19250: IFFALSE 19267
// ComExitBuilding ( ru3_sci [ i ] ) ;
19252: LD_EXP 51
19256: PUSH
19257: LD_VAR 0 1
19261: ARRAY
19262: PPUSH
19263: CALL_OW 122
// filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , is_hurt ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) ;
19267: LD_ADDR_VAR 0 2
19271: PUSH
19272: LD_INT 22
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 21
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: LD_INT 24
19297: PUSH
19298: LD_VAR 0 10
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: LD_INT 25
19316: PUSH
19317: LD_INT 4
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: PPUSH
19337: CALL_OW 69
19341: ST_TO_ADDR
// if filter > 0 then
19342: LD_VAR 0 2
19346: PUSH
19347: LD_INT 0
19349: GREATER
19350: IFFALSE 19388
// ComHeal ( ru3_sci [ i ] , NearestUnitToUnit ( filter , ru3_sci [ i ] ) ) ;
19352: LD_EXP 51
19356: PUSH
19357: LD_VAR 0 1
19361: ARRAY
19362: PPUSH
19363: LD_VAR 0 2
19367: PPUSH
19368: LD_EXP 51
19372: PUSH
19373: LD_VAR 0 1
19377: ARRAY
19378: PPUSH
19379: CALL_OW 74
19383: PPUSH
19384: CALL_OW 128
// end ; end ;
19388: GO 18851
19390: POP
19391: POP
// end ; if ru3_mech > 0 then
19392: LD_EXP 50
19396: PUSH
19397: LD_INT 0
19399: GREATER
19400: IFFALSE 19935
// begin for i = 1 to ru3_mech do
19402: LD_ADDR_VAR 0 1
19406: PUSH
19407: DOUBLE
19408: LD_INT 1
19410: DEC
19411: ST_TO_ADDR
19412: LD_EXP 50
19416: PUSH
19417: FOR_TO
19418: IFFALSE 19933
// begin if not HasTask ( ru3_mech ) then
19420: LD_EXP 50
19424: PPUSH
19425: CALL_OW 314
19429: NOT
19430: IFFALSE 19931
// begin if ru3_bweap > 0 and ru3_fac > 0 then
19432: LD_EXP 57
19436: PUSH
19437: LD_INT 0
19439: GREATER
19440: PUSH
19441: LD_EXP 55
19445: PUSH
19446: LD_INT 0
19448: GREATER
19449: AND
19450: IFFALSE 19585
// begin if GetDistUnits ( ru3_mech [ i ] , ru_main_dep ) > 11 then
19452: LD_EXP 50
19456: PUSH
19457: LD_VAR 0 1
19461: ARRAY
19462: PPUSH
19463: LD_INT 152
19465: PPUSH
19466: CALL_OW 296
19470: PUSH
19471: LD_INT 11
19473: GREATER
19474: IFFALSE 19517
// ComMoveXY ( ru3_mech [ i ] , GetX ( ru_main_dep ) - 2 , GetY ( ru_main_dep ) - 2 ) else
19476: LD_EXP 50
19480: PUSH
19481: LD_VAR 0 1
19485: ARRAY
19486: PPUSH
19487: LD_INT 152
19489: PPUSH
19490: CALL_OW 250
19494: PUSH
19495: LD_INT 2
19497: MINUS
19498: PPUSH
19499: LD_INT 152
19501: PPUSH
19502: CALL_OW 251
19506: PUSH
19507: LD_INT 2
19509: MINUS
19510: PPUSH
19511: CALL_OW 111
19515: GO 19549
// if IsDriver ( ru3_mech [ i ] ) then
19517: LD_EXP 50
19521: PUSH
19522: LD_VAR 0 1
19526: ARRAY
19527: PPUSH
19528: CALL 1235 0 1
19532: IFFALSE 19549
// ComExitVehicle ( ru3_mech [ i ] ) ;
19534: LD_EXP 50
19538: PUSH
19539: LD_VAR 0 1
19543: ARRAY
19544: PPUSH
19545: CALL_OW 121
// ComEnterUnit ( ru3_mech [ i ] , NearestUnitToUnit ( ru3_fac , ru3_mech [ i ] ) ) ;
19549: LD_EXP 50
19553: PUSH
19554: LD_VAR 0 1
19558: ARRAY
19559: PPUSH
19560: LD_EXP 55
19564: PPUSH
19565: LD_EXP 50
19569: PUSH
19570: LD_VAR 0 1
19574: ARRAY
19575: PPUSH
19576: CALL_OW 74
19580: PPUSH
19581: CALL_OW 120
// end ; if UnitFilter ( vehicles , [ f_empty ] ) > 0 and ru3_bweap = 0 then
19585: LD_VAR 0 12
19589: PPUSH
19590: LD_INT 58
19592: PUSH
19593: EMPTY
19594: LIST
19595: PPUSH
19596: CALL_OW 72
19600: PUSH
19601: LD_INT 0
19603: GREATER
19604: PUSH
19605: LD_EXP 57
19609: PUSH
19610: LD_INT 0
19612: EQUAL
19613: AND
19614: IFFALSE 19841
// begin if not IsDriver ( ru3_mech [ i ] ) then
19616: LD_EXP 50
19620: PUSH
19621: LD_VAR 0 1
19625: ARRAY
19626: PPUSH
19627: CALL 1235 0 1
19631: NOT
19632: IFFALSE 19839
// begin if UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) > 0 then
19634: LD_VAR 0 12
19638: PPUSH
19639: LD_INT 3
19641: PUSH
19642: LD_INT 24
19644: PUSH
19645: LD_VAR 0 10
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 72
19662: PUSH
19663: LD_INT 0
19665: GREATER
19666: IFFALSE 19728
// ComRepairVehicle ( ru3_mech [ i ] , NearestUnitToUnit ( ru3_mech [ i ] , UnitFilter ( vehicles , [ f_not , [ f_lives , is_hurt ] ] ) ) ) ;
19668: LD_EXP 50
19672: PUSH
19673: LD_VAR 0 1
19677: ARRAY
19678: PPUSH
19679: LD_EXP 50
19683: PUSH
19684: LD_VAR 0 1
19688: ARRAY
19689: PPUSH
19690: LD_VAR 0 12
19694: PPUSH
19695: LD_INT 3
19697: PUSH
19698: LD_INT 24
19700: PUSH
19701: LD_VAR 0 10
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 72
19718: PPUSH
19719: CALL_OW 74
19723: PPUSH
19724: CALL_OW 129
// if IsInUnit ( ru3_mech [ i ] ) then
19728: LD_EXP 50
19732: PUSH
19733: LD_VAR 0 1
19737: ARRAY
19738: PPUSH
19739: CALL_OW 310
19743: IFFALSE 19760
// ComExitBuilding ( ru3_mech [ i ] ) ;
19745: LD_EXP 50
19749: PUSH
19750: LD_VAR 0 1
19754: ARRAY
19755: PPUSH
19756: CALL_OW 122
// if UnitFilter ( vehicles , [ f_not , [ f_lives , 1000 ] ] ) = 0 then
19760: LD_VAR 0 12
19764: PPUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 24
19770: PUSH
19771: LD_INT 1000
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PPUSH
19782: CALL_OW 72
19786: PUSH
19787: LD_INT 0
19789: EQUAL
19790: IFFALSE 19839
// ComEnterUnit ( ru3_mech [ i ] , NearestUnitToUnit ( UnitFilter ( vehicles , [ f_empty ] ) , ru3_mech [ i ] ) ) end ;
19792: LD_EXP 50
19796: PUSH
19797: LD_VAR 0 1
19801: ARRAY
19802: PPUSH
19803: LD_VAR 0 12
19807: PPUSH
19808: LD_INT 58
19810: PUSH
19811: EMPTY
19812: LIST
19813: PPUSH
19814: CALL_OW 72
19818: PPUSH
19819: LD_EXP 50
19823: PUSH
19824: LD_VAR 0 1
19828: ARRAY
19829: PPUSH
19830: CALL_OW 74
19834: PPUSH
19835: CALL_OW 120
// end else
19839: GO 19931
// if ru3_fac > 0 then
19841: LD_EXP 55
19845: PUSH
19846: LD_INT 0
19848: GREATER
19849: IFFALSE 19877
// ComEnterUnit ( ru3_mech [ i ] , ru3_fac [ 1 ] ) else
19851: LD_EXP 50
19855: PUSH
19856: LD_VAR 0 1
19860: ARRAY
19861: PPUSH
19862: LD_EXP 55
19866: PUSH
19867: LD_INT 1
19869: ARRAY
19870: PPUSH
19871: CALL_OW 120
19875: GO 19931
// begin ComEnterUnit ( ru3_mech [ i ] , NearestUnitToUnit ( buildings , ru3_mech [ i ] ) ) ;
19877: LD_EXP 50
19881: PUSH
19882: LD_VAR 0 1
19886: ARRAY
19887: PPUSH
19888: LD_VAR 0 8
19892: PPUSH
19893: LD_EXP 50
19897: PUSH
19898: LD_VAR 0 1
19902: ARRAY
19903: PPUSH
19904: CALL_OW 74
19908: PPUSH
19909: CALL_OW 120
// AddComChangeProfession ( ru3_mech [ i ] , class_soldier ) ;
19913: LD_EXP 50
19917: PUSH
19918: LD_VAR 0 1
19922: ARRAY
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL_OW 183
// end ; end ; end ;
19931: GO 19417
19933: POP
19934: POP
// end ; if ru3_eng > 0 then
19935: LD_EXP 49
19939: PUSH
19940: LD_INT 0
19942: GREATER
19943: IFFALSE 20635
// begin for i = 1 to ru3_eng do
19945: LD_ADDR_VAR 0 1
19949: PUSH
19950: DOUBLE
19951: LD_INT 1
19953: DEC
19954: ST_TO_ADDR
19955: LD_EXP 49
19959: PUSH
19960: FOR_TO
19961: IFFALSE 20633
// begin if UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
19963: LD_VAR 0 7
19967: PPUSH
19968: LD_INT 3
19970: PUSH
19971: LD_INT 24
19973: PUSH
19974: LD_INT 1000
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 72
19989: PUSH
19990: LD_INT 0
19992: GREATER
19993: IFFALSE 20433
// begin if IsInUnit ( ru3_eng [ i ] ) then
19995: LD_EXP 49
19999: PUSH
20000: LD_VAR 0 1
20004: ARRAY
20005: PPUSH
20006: CALL_OW 310
20010: IFFALSE 20027
// ComExitBuilding ( ru3_eng [ i ] ) ;
20012: LD_EXP 49
20016: PUSH
20017: LD_VAR 0 1
20021: ARRAY
20022: PPUSH
20023: CALL_OW 122
// if not HasTask ( ru3_eng [ i ] ) then
20027: LD_EXP 49
20031: PUSH
20032: LD_VAR 0 1
20036: ARRAY
20037: PPUSH
20038: CALL_OW 314
20042: NOT
20043: IFFALSE 20103
// ComRepairBuilding ( ru3_eng [ i ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , ru3_eng [ i ] ) ) ;
20045: LD_EXP 49
20049: PUSH
20050: LD_VAR 0 1
20054: ARRAY
20055: PPUSH
20056: LD_VAR 0 7
20060: PPUSH
20061: LD_INT 3
20063: PUSH
20064: LD_INT 24
20066: PUSH
20067: LD_INT 1000
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PPUSH
20078: CALL_OW 72
20082: PPUSH
20083: LD_EXP 49
20087: PUSH
20088: LD_VAR 0 1
20092: ARRAY
20093: PPUSH
20094: CALL_OW 74
20098: PPUSH
20099: CALL_OW 130
// if FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_weapon , ru_crane ] , [ f_not , [ f_empty ] ] ] ] ) > 0 then
20103: LD_INT 22
20105: PUSH
20106: LD_INT 3
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 34
20115: PUSH
20116: LD_INT 52
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 3
20125: PUSH
20126: LD_INT 58
20128: PUSH
20129: EMPTY
20130: LIST
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: PUSH
20149: LD_INT 0
20151: GREATER
20152: IFFALSE 20431
// begin filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
20154: LD_ADDR_VAR 0 2
20158: PUSH
20159: LD_INT 22
20161: PUSH
20162: LD_INT 3
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 34
20171: PUSH
20172: LD_INT 52
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PPUSH
20183: CALL_OW 69
20187: ST_TO_ADDR
// for p = 1 to filter do
20188: LD_ADDR_VAR 0 4
20192: PUSH
20193: DOUBLE
20194: LD_INT 1
20196: DEC
20197: ST_TO_ADDR
20198: LD_VAR 0 2
20202: PUSH
20203: FOR_TO
20204: IFFALSE 20429
// if GetLives ( filter [ p ] ) >= is_hurt + 100 then
20206: LD_VAR 0 2
20210: PUSH
20211: LD_VAR 0 4
20215: ARRAY
20216: PPUSH
20217: CALL_OW 256
20221: PUSH
20222: LD_VAR 0 10
20226: PUSH
20227: LD_INT 100
20229: PLUS
20230: GREATEREQUAL
20231: IFFALSE 20293
// ComRepairBuilding ( filter [ p ] , NearestUnitToUnit ( UnitFilter ( al_build , [ f_not , [ f_lives , 1000 ] ] ) , filter [ p ] ) ) else
20233: LD_VAR 0 2
20237: PUSH
20238: LD_VAR 0 4
20242: ARRAY
20243: PPUSH
20244: LD_VAR 0 7
20248: PPUSH
20249: LD_INT 3
20251: PUSH
20252: LD_INT 24
20254: PUSH
20255: LD_INT 1000
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 72
20270: PPUSH
20271: LD_VAR 0 2
20275: PUSH
20276: LD_VAR 0 4
20280: ARRAY
20281: PPUSH
20282: CALL_OW 74
20286: PPUSH
20287: CALL_OW 130
20291: GO 20427
// begin ComMoveXY ( filter [ p ] , GetX ( ru_main_dep ) - 2 , GetY ( ru_main_dep ) - 2 ) ;
20293: LD_VAR 0 2
20297: PUSH
20298: LD_VAR 0 4
20302: ARRAY
20303: PPUSH
20304: LD_INT 152
20306: PPUSH
20307: CALL_OW 250
20311: PUSH
20312: LD_INT 2
20314: MINUS
20315: PPUSH
20316: LD_INT 152
20318: PPUSH
20319: CALL_OW 251
20323: PUSH
20324: LD_INT 2
20326: MINUS
20327: PPUSH
20328: CALL_OW 111
// un := IsDrivenBy ( filter [ p ] ) ;
20332: LD_ADDR_VAR 0 11
20336: PUSH
20337: LD_VAR 0 2
20341: PUSH
20342: LD_VAR 0 4
20346: ARRAY
20347: PPUSH
20348: CALL_OW 311
20352: ST_TO_ADDR
// if GetDistUnits ( filter [ p ] , ru_main_dep ) <= 8 and GetLives ( filter [ p ] ) < is_hurt then
20353: LD_VAR 0 2
20357: PUSH
20358: LD_VAR 0 4
20362: ARRAY
20363: PPUSH
20364: LD_INT 152
20366: PPUSH
20367: CALL_OW 296
20371: PUSH
20372: LD_INT 8
20374: LESSEQUAL
20375: PUSH
20376: LD_VAR 0 2
20380: PUSH
20381: LD_VAR 0 4
20385: ARRAY
20386: PPUSH
20387: CALL_OW 256
20391: PUSH
20392: LD_VAR 0 10
20396: LESS
20397: AND
20398: IFFALSE 20427
// begin SetFuel ( filter [ p ] , 100 ) ;
20400: LD_VAR 0 2
20404: PUSH
20405: LD_VAR 0 4
20409: ARRAY
20410: PPUSH
20411: LD_INT 100
20413: PPUSH
20414: CALL_OW 240
// ComExitVehicle ( un ) ;
20418: LD_VAR 0 11
20422: PPUSH
20423: CALL_OW 121
// end ; end ;
20427: GO 20203
20429: POP
20430: POP
// end ; end else
20431: GO 20631
// begin if not IsInUnit ( ru3_eng [ i ] ) and not HasTask ( ru3_eng [ i ] ) and ru3_blist = 0 then
20433: LD_EXP 49
20437: PUSH
20438: LD_VAR 0 1
20442: ARRAY
20443: PPUSH
20444: CALL_OW 310
20448: NOT
20449: PUSH
20450: LD_EXP 49
20454: PUSH
20455: LD_VAR 0 1
20459: ARRAY
20460: PPUSH
20461: CALL_OW 314
20465: NOT
20466: AND
20467: PUSH
20468: LD_EXP 56
20472: PUSH
20473: LD_INT 0
20475: EQUAL
20476: AND
20477: IFFALSE 20497
// ComEnterUnit ( ru3_eng [ i ] , ru_main_dep ) ;
20479: LD_EXP 49
20483: PUSH
20484: LD_VAR 0 1
20488: ARRAY
20489: PPUSH
20490: LD_INT 152
20492: PPUSH
20493: CALL_OW 120
// if ru3_blist > 0 and GetResourceType ( GetBase ( ru_main_dep ) , mat_cans >= 100 ) and FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , GetX ( ru_main_dep ) , GetY ( ru_main_dep ) , 70 ] ] ) = 0 then
20497: LD_EXP 56
20501: PUSH
20502: LD_INT 0
20504: GREATER
20505: PUSH
20506: LD_INT 152
20508: PPUSH
20509: CALL_OW 274
20513: PPUSH
20514: LD_INT 1
20516: PUSH
20517: LD_INT 100
20519: GREATEREQUAL
20520: PPUSH
20521: CALL_OW 275
20525: AND
20526: PUSH
20527: LD_INT 81
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 92
20539: PUSH
20540: LD_INT 152
20542: PPUSH
20543: CALL_OW 250
20547: PUSH
20548: LD_INT 152
20550: PPUSH
20551: CALL_OW 251
20555: PUSH
20556: LD_INT 70
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 69
20573: PUSH
20574: LD_INT 0
20576: EQUAL
20577: AND
20578: IFFALSE 20631
// begin ComBuild ( ru3_eng [ i ] , ru3_blist [ 1 ] , ru3_blist [ 2 ] , ru3_blist [ 3 ] , ru3_blist [ 4 ] ) ;
20580: LD_EXP 49
20584: PUSH
20585: LD_VAR 0 1
20589: ARRAY
20590: PPUSH
20591: LD_EXP 56
20595: PUSH
20596: LD_INT 1
20598: ARRAY
20599: PPUSH
20600: LD_EXP 56
20604: PUSH
20605: LD_INT 2
20607: ARRAY
20608: PPUSH
20609: LD_EXP 56
20613: PUSH
20614: LD_INT 3
20616: ARRAY
20617: PPUSH
20618: LD_EXP 56
20622: PUSH
20623: LD_INT 4
20625: ARRAY
20626: PPUSH
20627: CALL_OW 145
// end ; end ; end ;
20631: GO 19960
20633: POP
20634: POP
// end ; if vehicles > 0 then
20635: LD_VAR 0 12
20639: PUSH
20640: LD_INT 0
20642: GREATER
20643: IFFALSE 20948
// begin filter := UnitFilter ( vehicles , [ [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , ru_crane ] ] ] ) ;
20645: LD_ADDR_VAR 0 2
20649: PUSH
20650: LD_VAR 0 12
20654: PPUSH
20655: LD_INT 3
20657: PUSH
20658: LD_INT 58
20660: PUSH
20661: EMPTY
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 3
20670: PUSH
20671: LD_INT 34
20673: PUSH
20674: LD_INT 52
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 72
20693: ST_TO_ADDR
// if filter > 0 then
20694: LD_VAR 0 2
20698: PUSH
20699: LD_INT 0
20701: GREATER
20702: IFFALSE 20948
// begin for i = 1 to filter do
20704: LD_ADDR_VAR 0 1
20708: PUSH
20709: DOUBLE
20710: LD_INT 1
20712: DEC
20713: ST_TO_ADDR
20714: LD_VAR 0 2
20718: PUSH
20719: FOR_TO
20720: IFFALSE 20946
// begin if GetDistUnits ( filter [ i ] , ru_main_dep ) <= 8 and GetFuel ( filter [ i ] ) <= 63 then
20722: LD_VAR 0 2
20726: PUSH
20727: LD_VAR 0 1
20731: ARRAY
20732: PPUSH
20733: LD_INT 152
20735: PPUSH
20736: CALL_OW 296
20740: PUSH
20741: LD_INT 8
20743: LESSEQUAL
20744: PUSH
20745: LD_VAR 0 2
20749: PUSH
20750: LD_VAR 0 1
20754: ARRAY
20755: PPUSH
20756: CALL_OW 261
20760: PUSH
20761: LD_INT 63
20763: LESSEQUAL
20764: AND
20765: IFFALSE 20785
// SetFuel ( filter [ i ] , 100 ) ;
20767: LD_VAR 0 2
20771: PUSH
20772: LD_VAR 0 1
20776: ARRAY
20777: PPUSH
20778: LD_INT 100
20780: PPUSH
20781: CALL_OW 240
// if GetLives ( filter [ i ] ) > is_hurt then
20785: LD_VAR 0 2
20789: PUSH
20790: LD_VAR 0 1
20794: ARRAY
20795: PPUSH
20796: CALL_OW 256
20800: PUSH
20801: LD_VAR 0 10
20805: GREATER
20806: IFFALSE 20828
// ProtectArea ( filter [ i ] , ru_main_dep ) else
20808: LD_VAR 0 2
20812: PUSH
20813: LD_VAR 0 1
20817: ARRAY
20818: PPUSH
20819: LD_INT 152
20821: PPUSH
20822: CALL 5036 0 2
20826: GO 20944
// begin ComMoveXY ( filter [ i ] , GetX ( ru_main_dep ) - 2 , GetY ( ru_main_dep ) - 2 ) ;
20828: LD_VAR 0 2
20832: PUSH
20833: LD_VAR 0 1
20837: ARRAY
20838: PPUSH
20839: LD_INT 152
20841: PPUSH
20842: CALL_OW 250
20846: PUSH
20847: LD_INT 2
20849: MINUS
20850: PPUSH
20851: LD_INT 152
20853: PPUSH
20854: CALL_OW 251
20858: PUSH
20859: LD_INT 2
20861: MINUS
20862: PPUSH
20863: CALL_OW 111
// un := IsDrivenBy ( filter [ i ] ) ;
20867: LD_ADDR_VAR 0 11
20871: PUSH
20872: LD_VAR 0 2
20876: PUSH
20877: LD_VAR 0 1
20881: ARRAY
20882: PPUSH
20883: CALL_OW 311
20887: ST_TO_ADDR
// if GetDistUnits ( filter [ i ] , ru_main_dep ) <= 8 and GetLives ( filter [ i ] ) < is_hurt then
20888: LD_VAR 0 2
20892: PUSH
20893: LD_VAR 0 1
20897: ARRAY
20898: PPUSH
20899: LD_INT 152
20901: PPUSH
20902: CALL_OW 296
20906: PUSH
20907: LD_INT 8
20909: LESSEQUAL
20910: PUSH
20911: LD_VAR 0 2
20915: PUSH
20916: LD_VAR 0 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 256
20926: PUSH
20927: LD_VAR 0 10
20931: LESS
20932: AND
20933: IFFALSE 20944
// begin ComExitVehicle ( un ) ;
20935: LD_VAR 0 11
20939: PPUSH
20940: CALL_OW 121
// end ; end ; end ;
20944: GO 20719
20946: POP
20947: POP
// end ; end ; end ;
20948: PPOPN 13
20950: END
// every 0 0$01 trigger FilterUnitsInArea ( m1 , [ f_side , 2 ] ) > 0 do var i ;
20951: LD_INT 13
20953: PPUSH
20954: LD_INT 22
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PPUSH
20964: CALL_OW 70
20968: PUSH
20969: LD_INT 0
20971: GREATER
20972: IFFALSE 21013
20974: GO 20976
20976: DISABLE
20977: LD_INT 0
20979: PPUSH
// begin for i = 1 to 6 do
20980: LD_ADDR_VAR 0 1
20984: PUSH
20985: DOUBLE
20986: LD_INT 1
20988: DEC
20989: ST_TO_ADDR
20990: LD_INT 6
20992: PUSH
20993: FOR_TO
20994: IFFALSE 21011
// MineExplosion ( 58 , 63 , 1 ) ;
20996: LD_INT 58
20998: PPUSH
20999: LD_INT 63
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 453
21009: GO 20993
21011: POP
21012: POP
// end ;
21013: PPOPN 1
21015: END
// every 0 0$01 trigger FilterUnitsInArea ( m2 , [ f_side , 2 ] ) > 0 do var i ;
21016: LD_INT 14
21018: PPUSH
21019: LD_INT 22
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PPUSH
21029: CALL_OW 70
21033: PUSH
21034: LD_INT 0
21036: GREATER
21037: IFFALSE 21078
21039: GO 21041
21041: DISABLE
21042: LD_INT 0
21044: PPUSH
// begin for i = 1 to 6 do
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: DOUBLE
21051: LD_INT 1
21053: DEC
21054: ST_TO_ADDR
21055: LD_INT 6
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21076
// MineExplosion ( 63 , 64 , 1 ) ;
21061: LD_INT 63
21063: PPUSH
21064: LD_INT 64
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL_OW 453
21074: GO 21058
21076: POP
21077: POP
// end ; end_of_file
21078: PPOPN 1
21080: END
// export Louis , Martin , Karla , Dwein , Joachim , Olaf , Mmark , Herczeg , Mia , Kantor , Ronn , Gunther , ot1 , ot2 , ot3 , ot4 , ot5 , ot6 , ot7 ; export AllPeo ; export function LoadUnits ; var list , i , p , un , driver , filter ; begin
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
21086: PPUSH
21087: PPUSH
21088: PPUSH
21089: PPUSH
// AllPeo := [ ] ;
21090: LD_ADDR_EXP 77
21094: PUSH
21095: EMPTY
21096: ST_TO_ADDR
// uc_side := 2 ;
21097: LD_ADDR_OWVAR 20
21101: PUSH
21102: LD_INT 2
21104: ST_TO_ADDR
// uc_nation := 2 ;
21105: LD_ADDR_OWVAR 21
21109: PUSH
21110: LD_INT 2
21112: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
21113: LD_ADDR_EXP 58
21117: PUSH
21118: LD_STRING Louis
21120: PPUSH
21121: CALL_OW 34
21125: ST_TO_ADDR
// AllPeo = AllPeo ^ Louis ;
21126: LD_ADDR_EXP 77
21130: PUSH
21131: LD_EXP 77
21135: PUSH
21136: LD_EXP 58
21140: ADD
21141: ST_TO_ADDR
// if TestCharacters ( Martin_06 ) then
21142: LD_STRING Martin_06
21144: PPUSH
21145: CALL_OW 28
21149: IFFALSE 21182
// begin Martin := CreateCharacter ( Martin_06 ) ;
21151: LD_ADDR_EXP 59
21155: PUSH
21156: LD_STRING Martin_06
21158: PPUSH
21159: CALL_OW 34
21163: ST_TO_ADDR
// AllPeo = AllPeo ^ Martin ;
21164: LD_ADDR_EXP 77
21168: PUSH
21169: LD_EXP 77
21173: PUSH
21174: LD_EXP 59
21178: ADD
21179: ST_TO_ADDR
// end else
21180: GO 21190
// begin Martin = false ;
21182: LD_ADDR_EXP 59
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// end ; if TestCharacters ( Karla_06 ) then
21190: LD_STRING Karla_06
21192: PPUSH
21193: CALL_OW 28
21197: IFFALSE 21230
// begin Karla := CreateCharacter ( Karla_06 ) ;
21199: LD_ADDR_EXP 60
21203: PUSH
21204: LD_STRING Karla_06
21206: PPUSH
21207: CALL_OW 34
21211: ST_TO_ADDR
// AllPeo = AllPeo ^ Karla ;
21212: LD_ADDR_EXP 77
21216: PUSH
21217: LD_EXP 77
21221: PUSH
21222: LD_EXP 60
21226: ADD
21227: ST_TO_ADDR
// end else
21228: GO 21238
// begin Karla = false ;
21230: LD_ADDR_EXP 60
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// end ; if TestCharacters ( Mmark_06 ) then
21238: LD_STRING Mmark_06
21240: PPUSH
21241: CALL_OW 28
21245: IFFALSE 21278
// begin Mmark := CreateCharacter ( Mmark_06 ) ;
21247: LD_ADDR_EXP 64
21251: PUSH
21252: LD_STRING Mmark_06
21254: PPUSH
21255: CALL_OW 34
21259: ST_TO_ADDR
// AllPeo = AllPeo ^ Mmark ;
21260: LD_ADDR_EXP 77
21264: PUSH
21265: LD_EXP 77
21269: PUSH
21270: LD_EXP 64
21274: ADD
21275: ST_TO_ADDR
// end else
21276: GO 21286
// begin Mmark = false ;
21278: LD_ADDR_EXP 64
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// end ; if TestCharacters ( Joachim_06 ) then
21286: LD_STRING Joachim_06
21288: PPUSH
21289: CALL_OW 28
21293: IFFALSE 21326
// begin Joachim := CreateCharacter ( Joachim_06 ) ;
21295: LD_ADDR_EXP 62
21299: PUSH
21300: LD_STRING Joachim_06
21302: PPUSH
21303: CALL_OW 34
21307: ST_TO_ADDR
// AllPeo = AllPeo ^ Joachim ;
21308: LD_ADDR_EXP 77
21312: PUSH
21313: LD_EXP 77
21317: PUSH
21318: LD_EXP 62
21322: ADD
21323: ST_TO_ADDR
// end else
21324: GO 21334
// begin Joachim = false ;
21326: LD_ADDR_EXP 62
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// end ; if TestCharacters ( Olaf_06 ) then
21334: LD_STRING Olaf_06
21336: PPUSH
21337: CALL_OW 28
21341: IFFALSE 21374
// begin Olaf := CreateCharacter ( Olaf_06 ) ;
21343: LD_ADDR_EXP 63
21347: PUSH
21348: LD_STRING Olaf_06
21350: PPUSH
21351: CALL_OW 34
21355: ST_TO_ADDR
// AllPeo = AllPeo ^ Olaf ;
21356: LD_ADDR_EXP 77
21360: PUSH
21361: LD_EXP 77
21365: PUSH
21366: LD_EXP 63
21370: ADD
21371: ST_TO_ADDR
// end else
21372: GO 21382
// begin Olaf = false ;
21374: LD_ADDR_EXP 63
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// end ; if TestCharacters ( Dwein_06 ) then
21382: LD_STRING Dwein_06
21384: PPUSH
21385: CALL_OW 28
21389: IFFALSE 21422
// begin Dwein := CreateCharacter ( Dwein_06 ) ;
21391: LD_ADDR_EXP 61
21395: PUSH
21396: LD_STRING Dwein_06
21398: PPUSH
21399: CALL_OW 34
21403: ST_TO_ADDR
// AllPeo = AllPeo ^ Dwein ;
21404: LD_ADDR_EXP 77
21408: PUSH
21409: LD_EXP 77
21413: PUSH
21414: LD_EXP 61
21418: ADD
21419: ST_TO_ADDR
// end else
21420: GO 21430
// begin Dwein = false ;
21422: LD_ADDR_EXP 61
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// end ; if TestCharacters ( Herczeg_06 ) then
21430: LD_STRING Herczeg_06
21432: PPUSH
21433: CALL_OW 28
21437: IFFALSE 21470
// begin Herczeg := CreateCharacter ( Herczeg_06 ) ;
21439: LD_ADDR_EXP 65
21443: PUSH
21444: LD_STRING Herczeg_06
21446: PPUSH
21447: CALL_OW 34
21451: ST_TO_ADDR
// AllPeo = AllPeo ^ Herczeg ;
21452: LD_ADDR_EXP 77
21456: PUSH
21457: LD_EXP 77
21461: PUSH
21462: LD_EXP 65
21466: ADD
21467: ST_TO_ADDR
// end else
21468: GO 21478
// begin Herczeg = false ;
21470: LD_ADDR_EXP 65
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// end ; if TestCharacters ( Mia_06 ) then
21478: LD_STRING Mia_06
21480: PPUSH
21481: CALL_OW 28
21485: IFFALSE 21518
// begin Mia := CreateCharacter ( Mia_06 ) ;
21487: LD_ADDR_EXP 66
21491: PUSH
21492: LD_STRING Mia_06
21494: PPUSH
21495: CALL_OW 34
21499: ST_TO_ADDR
// AllPeo = AllPeo ^ Mia ;
21500: LD_ADDR_EXP 77
21504: PUSH
21505: LD_EXP 77
21509: PUSH
21510: LD_EXP 66
21514: ADD
21515: ST_TO_ADDR
// end else
21516: GO 21526
// begin Mia = false ;
21518: LD_ADDR_EXP 66
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// end ; if TestCharacters ( Gunther_06 ) then
21526: LD_STRING Gunther_06
21528: PPUSH
21529: CALL_OW 28
21533: IFFALSE 21566
// begin Gunther := CreateCharacter ( Gunther_06 ) ;
21535: LD_ADDR_EXP 69
21539: PUSH
21540: LD_STRING Gunther_06
21542: PPUSH
21543: CALL_OW 34
21547: ST_TO_ADDR
// AllPeo = AllPeo ^ Gunther ;
21548: LD_ADDR_EXP 77
21552: PUSH
21553: LD_EXP 77
21557: PUSH
21558: LD_EXP 69
21562: ADD
21563: ST_TO_ADDR
// end else
21564: GO 21574
// begin Gunther = false ;
21566: LD_ADDR_EXP 69
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// end ; if TestCharacters ( Kantor_06 ) then
21574: LD_STRING Kantor_06
21576: PPUSH
21577: CALL_OW 28
21581: IFFALSE 21614
// begin Kantor := CreateCharacter ( Kantor_06 ) ;
21583: LD_ADDR_EXP 67
21587: PUSH
21588: LD_STRING Kantor_06
21590: PPUSH
21591: CALL_OW 34
21595: ST_TO_ADDR
// AllPeo = AllPeo ^ Kantor ;
21596: LD_ADDR_EXP 77
21600: PUSH
21601: LD_EXP 77
21605: PUSH
21606: LD_EXP 67
21610: ADD
21611: ST_TO_ADDR
// end else
21612: GO 21622
// begin Kantor = false ;
21614: LD_ADDR_EXP 67
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// end ; if TestCharacters ( Ronn_06 ) then
21622: LD_STRING Ronn_06
21624: PPUSH
21625: CALL_OW 28
21629: IFFALSE 21660
// begin Ronn := CreateCharacter ( Ronn_06 ) ;
21631: LD_ADDR_EXP 68
21635: PUSH
21636: LD_STRING Ronn_06
21638: PPUSH
21639: CALL_OW 34
21643: ST_TO_ADDR
// AllPeo = AllPeo ^ Ronn ;
21644: LD_ADDR_EXP 77
21648: PUSH
21649: LD_EXP 77
21653: PUSH
21654: LD_EXP 68
21658: ADD
21659: ST_TO_ADDR
// end ; if TestCharacters ( ot1_06 ) then
21660: LD_STRING ot1_06
21662: PPUSH
21663: CALL_OW 28
21667: IFFALSE 21700
// begin ot1 := CreateCharacter ( ot1_06 ) ;
21669: LD_ADDR_EXP 70
21673: PUSH
21674: LD_STRING ot1_06
21676: PPUSH
21677: CALL_OW 34
21681: ST_TO_ADDR
// AllPeo = AllPeo ^ ot1 ;
21682: LD_ADDR_EXP 77
21686: PUSH
21687: LD_EXP 77
21691: PUSH
21692: LD_EXP 70
21696: ADD
21697: ST_TO_ADDR
// end else
21698: GO 21708
// begin ot1 = false ;
21700: LD_ADDR_EXP 70
21704: PUSH
21705: LD_INT 0
21707: ST_TO_ADDR
// end ; if TestCharacters ( ot2_06 ) then
21708: LD_STRING ot2_06
21710: PPUSH
21711: CALL_OW 28
21715: IFFALSE 21748
// begin ot2 := CreateCharacter ( ot2_06 ) ;
21717: LD_ADDR_EXP 71
21721: PUSH
21722: LD_STRING ot2_06
21724: PPUSH
21725: CALL_OW 34
21729: ST_TO_ADDR
// AllPeo = AllPeo ^ ot2 ;
21730: LD_ADDR_EXP 77
21734: PUSH
21735: LD_EXP 77
21739: PUSH
21740: LD_EXP 71
21744: ADD
21745: ST_TO_ADDR
// end else
21746: GO 21756
// begin ot2 = false ;
21748: LD_ADDR_EXP 71
21752: PUSH
21753: LD_INT 0
21755: ST_TO_ADDR
// end ; if TestCharacters ( ot3_06 ) then
21756: LD_STRING ot3_06
21758: PPUSH
21759: CALL_OW 28
21763: IFFALSE 21796
// begin ot3 := CreateCharacter ( ot3_06 ) ;
21765: LD_ADDR_EXP 72
21769: PUSH
21770: LD_STRING ot3_06
21772: PPUSH
21773: CALL_OW 34
21777: ST_TO_ADDR
// AllPeo = AllPeo ^ ot3 ;
21778: LD_ADDR_EXP 77
21782: PUSH
21783: LD_EXP 77
21787: PUSH
21788: LD_EXP 72
21792: ADD
21793: ST_TO_ADDR
// end else
21794: GO 21804
// begin ot3 = false ;
21796: LD_ADDR_EXP 72
21800: PUSH
21801: LD_INT 0
21803: ST_TO_ADDR
// end ; if TestCharacters ( ot4_06 ) then
21804: LD_STRING ot4_06
21806: PPUSH
21807: CALL_OW 28
21811: IFFALSE 21844
// begin ot4 := CreateCharacter ( ot4_06 ) ;
21813: LD_ADDR_EXP 73
21817: PUSH
21818: LD_STRING ot4_06
21820: PPUSH
21821: CALL_OW 34
21825: ST_TO_ADDR
// AllPeo = AllPeo ^ ot4 ;
21826: LD_ADDR_EXP 77
21830: PUSH
21831: LD_EXP 77
21835: PUSH
21836: LD_EXP 73
21840: ADD
21841: ST_TO_ADDR
// end else
21842: GO 21852
// begin ot4 = false ;
21844: LD_ADDR_EXP 73
21848: PUSH
21849: LD_INT 0
21851: ST_TO_ADDR
// end ; if TestCharacters ( ot5_06 ) then
21852: LD_STRING ot5_06
21854: PPUSH
21855: CALL_OW 28
21859: IFFALSE 21892
// begin ot5 := CreateCharacter ( ot5_06 ) ;
21861: LD_ADDR_EXP 74
21865: PUSH
21866: LD_STRING ot5_06
21868: PPUSH
21869: CALL_OW 34
21873: ST_TO_ADDR
// AllPeo = AllPeo ^ ot5 ;
21874: LD_ADDR_EXP 77
21878: PUSH
21879: LD_EXP 77
21883: PUSH
21884: LD_EXP 74
21888: ADD
21889: ST_TO_ADDR
// end else
21890: GO 21900
// begin ot5 = false ;
21892: LD_ADDR_EXP 74
21896: PUSH
21897: LD_INT 0
21899: ST_TO_ADDR
// end ; if TestCharacters ( ot6_06 ) then
21900: LD_STRING ot6_06
21902: PPUSH
21903: CALL_OW 28
21907: IFFALSE 21940
// begin ot6 := CreateCharacter ( ot6_06 ) ;
21909: LD_ADDR_EXP 75
21913: PUSH
21914: LD_STRING ot6_06
21916: PPUSH
21917: CALL_OW 34
21921: ST_TO_ADDR
// AllPeo = AllPeo ^ ot6 ;
21922: LD_ADDR_EXP 77
21926: PUSH
21927: LD_EXP 77
21931: PUSH
21932: LD_EXP 75
21936: ADD
21937: ST_TO_ADDR
// end else
21938: GO 21948
// begin ot6 = false ;
21940: LD_ADDR_EXP 75
21944: PUSH
21945: LD_INT 0
21947: ST_TO_ADDR
// end ; if TestCharacters ( ot7_06 ) then
21948: LD_STRING ot7_06
21950: PPUSH
21951: CALL_OW 28
21955: IFFALSE 21988
// begin ot7 := CreateCharacter ( ot7_06 ) ;
21957: LD_ADDR_EXP 76
21961: PUSH
21962: LD_STRING ot7_06
21964: PPUSH
21965: CALL_OW 34
21969: ST_TO_ADDR
// AllPeo = AllPeo ^ ot7 ;
21970: LD_ADDR_EXP 77
21974: PUSH
21975: LD_EXP 77
21979: PUSH
21980: LD_EXP 76
21984: ADD
21985: ST_TO_ADDR
// end else
21986: GO 21996
// begin ot7 = false ;
21988: LD_ADDR_EXP 76
21992: PUSH
21993: LD_INT 0
21995: ST_TO_ADDR
// end ; if LoadVariable ( mortar , 0 ) > 0 then
21996: LD_STRING mortar
21998: PPUSH
21999: LD_INT 0
22001: PPUSH
22002: CALL_OW 30
22006: PUSH
22007: LD_INT 0
22009: GREATER
22010: IFFALSE 22106
// begin SetTech ( tech_mortar , 2 , state_researched ) ;
22012: LD_INT 41
22014: PPUSH
22015: LD_INT 2
22017: PPUSH
22018: LD_INT 2
22020: PPUSH
22021: CALL_OW 322
// AllPeo := CharacterSelection (  , AllPeo , AllPeo , [ sel_change_class , sel_changeable , sel_not_hired ] ^ AllPeo , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
22025: LD_ADDR_EXP 77
22029: PUSH
22030: LD_STRING 
22032: PPUSH
22033: LD_EXP 77
22037: PPUSH
22038: LD_EXP 77
22042: PPUSH
22043: LD_INT -5
22045: PUSH
22046: LD_INT -3
22048: PUSH
22049: LD_INT -2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: PUSH
22057: LD_EXP 77
22061: ADD
22062: PPUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 4
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 8
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 42
22103: ST_TO_ADDR
// end else
22104: GO 22192
// AllPeo := CharacterSelection (  , AllPeo , AllPeo , [ sel_change_class , sel_changeable , sel_not_hired ] ^ AllPeo , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mortar , 0 ] ] ) ;
22106: LD_ADDR_EXP 77
22110: PUSH
22111: LD_STRING 
22113: PPUSH
22114: LD_EXP 77
22118: PPUSH
22119: LD_EXP 77
22123: PPUSH
22124: LD_INT -5
22126: PUSH
22127: LD_INT -3
22129: PUSH
22130: LD_INT -2
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_EXP 77
22142: ADD
22143: PPUSH
22144: LD_INT 1
22146: PUSH
22147: LD_INT 3
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 4
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 8
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 42
22191: ST_TO_ADDR
// list := AreaToList ( player_spawn , 0 ) ;
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 1
22199: PPUSH
22200: LD_INT 0
22202: PPUSH
22203: CALL_OW 517
22207: ST_TO_ADDR
// p := 1 ;
22208: LD_ADDR_VAR 0 4
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// if LoadVariable ( control_tower , 0 ) > 0 then
22216: LD_STRING control_tower
22218: PPUSH
22219: LD_INT 0
22221: PPUSH
22222: CALL_OW 30
22226: PUSH
22227: LD_INT 0
22229: GREATER
22230: IFFALSE 22730
// begin vc_chassis := ar_half_tracked ;
22232: LD_ADDR_OWVAR 37
22236: PUSH
22237: LD_INT 14
22239: ST_TO_ADDR
// vc_engine := engine_solar ;
22240: LD_ADDR_OWVAR 39
22244: PUSH
22245: LD_INT 2
22247: ST_TO_ADDR
// vc_control := control_manual ;
22248: LD_ADDR_OWVAR 38
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
22256: LD_ADDR_OWVAR 40
22260: PUSH
22261: LD_INT 31
22263: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22264: CALL_OW 45
22268: PPUSH
22269: LD_VAR 0 2
22273: PUSH
22274: LD_INT 1
22276: ARRAY
22277: PUSH
22278: LD_VAR 0 4
22282: ARRAY
22283: PPUSH
22284: LD_VAR 0 2
22288: PUSH
22289: LD_INT 2
22291: ARRAY
22292: PUSH
22293: LD_VAR 0 4
22297: ARRAY
22298: PPUSH
22299: LD_INT 0
22301: PPUSH
22302: CALL_OW 48
// p := p + 1 ;
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: LD_VAR 0 4
22315: PUSH
22316: LD_INT 1
22318: PLUS
22319: ST_TO_ADDR
// CreateRocketXY ( 2 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22320: LD_INT 2
22322: PPUSH
22323: LD_INT 2
22325: PPUSH
22326: LD_VAR 0 2
22330: PUSH
22331: LD_INT 1
22333: ARRAY
22334: PUSH
22335: LD_VAR 0 4
22339: ARRAY
22340: PPUSH
22341: LD_VAR 0 2
22345: PUSH
22346: LD_INT 2
22348: ARRAY
22349: PUSH
22350: LD_VAR 0 4
22354: ARRAY
22355: PPUSH
22356: LD_INT 0
22358: PPUSH
22359: CALL 24098 0 5
// p := p + 1 ;
22363: LD_ADDR_VAR 0 4
22367: PUSH
22368: LD_VAR 0 4
22372: PUSH
22373: LD_INT 1
22375: PLUS
22376: ST_TO_ADDR
// CreateRocketXY ( 2 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22377: LD_INT 2
22379: PPUSH
22380: LD_INT 2
22382: PPUSH
22383: LD_VAR 0 2
22387: PUSH
22388: LD_INT 1
22390: ARRAY
22391: PUSH
22392: LD_VAR 0 4
22396: ARRAY
22397: PPUSH
22398: LD_VAR 0 2
22402: PUSH
22403: LD_INT 2
22405: ARRAY
22406: PUSH
22407: LD_VAR 0 4
22411: ARRAY
22412: PPUSH
22413: LD_INT 0
22415: PPUSH
22416: CALL 24098 0 5
// p := p + 1 ;
22420: LD_ADDR_VAR 0 4
22424: PUSH
22425: LD_VAR 0 4
22429: PUSH
22430: LD_INT 1
22432: PLUS
22433: ST_TO_ADDR
// if UnitFilter ( AllPeo , [ f_class , 3 ] ) > 0 then
22434: LD_EXP 77
22438: PPUSH
22439: LD_INT 25
22441: PUSH
22442: LD_INT 3
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PPUSH
22449: CALL_OW 72
22453: PUSH
22454: LD_INT 0
22456: GREATER
22457: IFFALSE 22522
// PlaceHumanInUnit ( UnitFilter ( AllPeo , [ f_class , 3 ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) [ 1 ] ) else
22459: LD_EXP 77
22463: PPUSH
22464: LD_INT 25
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 72
22478: PUSH
22479: LD_INT 1
22481: ARRAY
22482: PPUSH
22483: LD_INT 22
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 34
22495: PUSH
22496: LD_INT 31
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PUSH
22512: LD_INT 1
22514: ARRAY
22515: PPUSH
22516: CALL_OW 52
22520: GO 22730
// begin driver := SortListByListAsc ( [ AllPeo ] , [ GetSkill ( AllPeo [ 1 ] , 3 ) , GetSkill ( AllPeo [ 2 ] , 3 ) , GetSkill ( AllPeo [ 3 ] , 3 ) , GetSkill ( AllPeo [ 4 ] , 3 ) , GetSkill ( AllPeo [ 5 ] , 3 ) , GetSkill ( AllPeo [ 6 ] , 3 ) , GetSkill ( AllPeo [ 7 ] , 3 ) ] ) ;
22522: LD_ADDR_VAR 0 6
22526: PUSH
22527: LD_EXP 77
22531: PUSH
22532: EMPTY
22533: LIST
22534: PPUSH
22535: LD_EXP 77
22539: PUSH
22540: LD_INT 1
22542: ARRAY
22543: PPUSH
22544: LD_INT 3
22546: PPUSH
22547: CALL_OW 259
22551: PUSH
22552: LD_EXP 77
22556: PUSH
22557: LD_INT 2
22559: ARRAY
22560: PPUSH
22561: LD_INT 3
22563: PPUSH
22564: CALL_OW 259
22568: PUSH
22569: LD_EXP 77
22573: PUSH
22574: LD_INT 3
22576: ARRAY
22577: PPUSH
22578: LD_INT 3
22580: PPUSH
22581: CALL_OW 259
22585: PUSH
22586: LD_EXP 77
22590: PUSH
22591: LD_INT 4
22593: ARRAY
22594: PPUSH
22595: LD_INT 3
22597: PPUSH
22598: CALL_OW 259
22602: PUSH
22603: LD_EXP 77
22607: PUSH
22608: LD_INT 5
22610: ARRAY
22611: PPUSH
22612: LD_INT 3
22614: PPUSH
22615: CALL_OW 259
22619: PUSH
22620: LD_EXP 77
22624: PUSH
22625: LD_INT 6
22627: ARRAY
22628: PPUSH
22629: LD_INT 3
22631: PPUSH
22632: CALL_OW 259
22636: PUSH
22637: LD_EXP 77
22641: PUSH
22642: LD_INT 7
22644: ARRAY
22645: PPUSH
22646: LD_INT 3
22648: PPUSH
22649: CALL_OW 259
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL_OW 76
22667: ST_TO_ADDR
// SetClass ( driver [ 1 ] , 3 ) ;
22668: LD_VAR 0 6
22672: PUSH
22673: LD_INT 1
22675: ARRAY
22676: PPUSH
22677: LD_INT 3
22679: PPUSH
22680: CALL_OW 336
// PlaceHumanInUnit ( driver [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) [ 1 ] ) ;
22684: LD_VAR 0 6
22688: PUSH
22689: LD_INT 1
22691: ARRAY
22692: PPUSH
22693: LD_INT 22
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 34
22705: PUSH
22706: LD_INT 31
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: PUSH
22722: LD_INT 1
22724: ARRAY
22725: PPUSH
22726: CALL_OW 52
// end ; end ; vc_chassis := ar_half_tracked ;
22730: LD_ADDR_OWVAR 37
22734: PUSH
22735: LD_INT 14
22737: ST_TO_ADDR
// vc_engine := engine_combustion ;
22738: LD_ADDR_OWVAR 39
22742: PUSH
22743: LD_INT 1
22745: ST_TO_ADDR
// vc_control := control_manual ;
22746: LD_ADDR_OWVAR 38
22750: PUSH
22751: LD_INT 1
22753: ST_TO_ADDR
// case Difficulty of 1 :
22754: LD_OWVAR 67
22758: PUSH
22759: LD_INT 1
22761: DOUBLE
22762: EQUAL
22763: IFTRUE 22767
22765: GO 23090
22767: POP
// begin vc_weapon := ar_rocket_launcher ;
22768: LD_ADDR_OWVAR 40
22772: PUSH
22773: LD_INT 28
22775: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22776: CALL_OW 45
22780: PPUSH
22781: LD_VAR 0 2
22785: PUSH
22786: LD_INT 1
22788: ARRAY
22789: PUSH
22790: LD_VAR 0 4
22794: ARRAY
22795: PPUSH
22796: LD_VAR 0 2
22800: PUSH
22801: LD_INT 2
22803: ARRAY
22804: PUSH
22805: LD_VAR 0 4
22809: ARRAY
22810: PPUSH
22811: LD_INT 0
22813: PPUSH
22814: CALL_OW 48
// p := p + 1 ;
22818: LD_ADDR_VAR 0 4
22822: PUSH
22823: LD_VAR 0 4
22827: PUSH
22828: LD_INT 1
22830: PLUS
22831: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
22832: LD_ADDR_OWVAR 40
22836: PUSH
22837: LD_INT 28
22839: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22840: CALL_OW 45
22844: PPUSH
22845: LD_VAR 0 2
22849: PUSH
22850: LD_INT 1
22852: ARRAY
22853: PUSH
22854: LD_VAR 0 4
22858: ARRAY
22859: PPUSH
22860: LD_VAR 0 2
22864: PUSH
22865: LD_INT 2
22867: ARRAY
22868: PUSH
22869: LD_VAR 0 4
22873: ARRAY
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 48
// p := p + 1 ;
22882: LD_ADDR_VAR 0 4
22886: PUSH
22887: LD_VAR 0 4
22891: PUSH
22892: LD_INT 1
22894: PLUS
22895: ST_TO_ADDR
// vc_weapon := ar_radar ;
22896: LD_ADDR_OWVAR 40
22900: PUSH
22901: LD_INT 30
22903: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22904: CALL_OW 45
22908: PPUSH
22909: LD_VAR 0 2
22913: PUSH
22914: LD_INT 1
22916: ARRAY
22917: PUSH
22918: LD_VAR 0 4
22922: ARRAY
22923: PPUSH
22924: LD_VAR 0 2
22928: PUSH
22929: LD_INT 2
22931: ARRAY
22932: PUSH
22933: LD_VAR 0 4
22937: ARRAY
22938: PPUSH
22939: LD_INT 0
22941: PPUSH
22942: CALL_OW 48
// p := p + 1 ;
22946: LD_ADDR_VAR 0 4
22950: PUSH
22951: LD_VAR 0 4
22955: PUSH
22956: LD_INT 1
22958: PLUS
22959: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
22960: LD_ADDR_OWVAR 40
22964: PUSH
22965: LD_INT 28
22967: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
22968: CALL_OW 45
22972: PPUSH
22973: LD_VAR 0 2
22977: PUSH
22978: LD_INT 1
22980: ARRAY
22981: PUSH
22982: LD_VAR 0 4
22986: ARRAY
22987: PPUSH
22988: LD_VAR 0 2
22992: PUSH
22993: LD_INT 2
22995: ARRAY
22996: PUSH
22997: LD_VAR 0 4
23001: ARRAY
23002: PPUSH
23003: LD_INT 0
23005: PPUSH
23006: CALL_OW 48
// p := p + 1 ;
23010: LD_ADDR_VAR 0 4
23014: PUSH
23015: LD_VAR 0 4
23019: PUSH
23020: LD_INT 1
23022: PLUS
23023: ST_TO_ADDR
// vc_weapon := ar_gun ;
23024: LD_ADDR_OWVAR 40
23028: PUSH
23029: LD_INT 27
23031: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23032: CALL_OW 45
23036: PPUSH
23037: LD_VAR 0 2
23041: PUSH
23042: LD_INT 1
23044: ARRAY
23045: PUSH
23046: LD_VAR 0 4
23050: ARRAY
23051: PPUSH
23052: LD_VAR 0 2
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PUSH
23061: LD_VAR 0 4
23065: ARRAY
23066: PPUSH
23067: LD_INT 0
23069: PPUSH
23070: CALL_OW 48
// p := p + 1 ;
23074: LD_ADDR_VAR 0 4
23078: PUSH
23079: LD_VAR 0 4
23083: PUSH
23084: LD_INT 1
23086: PLUS
23087: ST_TO_ADDR
// end ; 2 :
23088: GO 23881
23090: LD_INT 2
23092: DOUBLE
23093: EQUAL
23094: IFTRUE 23098
23096: GO 23485
23098: POP
// begin vc_weapon := ar_rocket_launcher ;
23099: LD_ADDR_OWVAR 40
23103: PUSH
23104: LD_INT 28
23106: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23107: CALL_OW 45
23111: PPUSH
23112: LD_VAR 0 2
23116: PUSH
23117: LD_INT 1
23119: ARRAY
23120: PUSH
23121: LD_VAR 0 4
23125: ARRAY
23126: PPUSH
23127: LD_VAR 0 2
23131: PUSH
23132: LD_INT 2
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 4
23140: ARRAY
23141: PPUSH
23142: LD_INT 0
23144: PPUSH
23145: CALL_OW 48
// p := p + 1 ;
23149: LD_ADDR_VAR 0 4
23153: PUSH
23154: LD_VAR 0 4
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
23163: LD_ADDR_OWVAR 40
23167: PUSH
23168: LD_INT 28
23170: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23171: CALL_OW 45
23175: PPUSH
23176: LD_VAR 0 2
23180: PUSH
23181: LD_INT 1
23183: ARRAY
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: PPUSH
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 2
23198: ARRAY
23199: PUSH
23200: LD_VAR 0 4
23204: ARRAY
23205: PPUSH
23206: LD_INT 0
23208: PPUSH
23209: CALL_OW 48
// p := p + 1 ;
23213: LD_ADDR_VAR 0 4
23217: PUSH
23218: LD_VAR 0 4
23222: PUSH
23223: LD_INT 1
23225: PLUS
23226: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
23227: LD_ADDR_OWVAR 40
23231: PUSH
23232: LD_INT 28
23234: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23235: CALL_OW 45
23239: PPUSH
23240: LD_VAR 0 2
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PUSH
23249: LD_VAR 0 4
23253: ARRAY
23254: PPUSH
23255: LD_VAR 0 2
23259: PUSH
23260: LD_INT 2
23262: ARRAY
23263: PUSH
23264: LD_VAR 0 4
23268: ARRAY
23269: PPUSH
23270: LD_INT 0
23272: PPUSH
23273: CALL_OW 48
// p := p + 1 ;
23277: LD_ADDR_VAR 0 4
23281: PUSH
23282: LD_VAR 0 4
23286: PUSH
23287: LD_INT 1
23289: PLUS
23290: ST_TO_ADDR
// vc_weapon := ar_radar ;
23291: LD_ADDR_OWVAR 40
23295: PUSH
23296: LD_INT 30
23298: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23299: CALL_OW 45
23303: PPUSH
23304: LD_VAR 0 2
23308: PUSH
23309: LD_INT 1
23311: ARRAY
23312: PUSH
23313: LD_VAR 0 4
23317: ARRAY
23318: PPUSH
23319: LD_VAR 0 2
23323: PUSH
23324: LD_INT 2
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 4
23332: ARRAY
23333: PPUSH
23334: LD_INT 0
23336: PPUSH
23337: CALL_OW 48
// p := p + 1 ;
23341: LD_ADDR_VAR 0 4
23345: PUSH
23346: LD_VAR 0 4
23350: PUSH
23351: LD_INT 1
23353: PLUS
23354: ST_TO_ADDR
// vc_weapon := ar_flame_thrower ;
23355: LD_ADDR_OWVAR 40
23359: PUSH
23360: LD_INT 26
23362: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23363: CALL_OW 45
23367: PPUSH
23368: LD_VAR 0 2
23372: PUSH
23373: LD_INT 1
23375: ARRAY
23376: PUSH
23377: LD_VAR 0 4
23381: ARRAY
23382: PPUSH
23383: LD_VAR 0 2
23387: PUSH
23388: LD_INT 2
23390: ARRAY
23391: PUSH
23392: LD_VAR 0 4
23396: ARRAY
23397: PPUSH
23398: LD_INT 0
23400: PPUSH
23401: CALL_OW 48
// p := p + 1 ;
23405: LD_ADDR_VAR 0 4
23409: PUSH
23410: LD_VAR 0 4
23414: PUSH
23415: LD_INT 1
23417: PLUS
23418: ST_TO_ADDR
// vc_weapon := ar_gun ;
23419: LD_ADDR_OWVAR 40
23423: PUSH
23424: LD_INT 27
23426: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23427: CALL_OW 45
23431: PPUSH
23432: LD_VAR 0 2
23436: PUSH
23437: LD_INT 1
23439: ARRAY
23440: PUSH
23441: LD_VAR 0 4
23445: ARRAY
23446: PPUSH
23447: LD_VAR 0 2
23451: PUSH
23452: LD_INT 2
23454: ARRAY
23455: PUSH
23456: LD_VAR 0 4
23460: ARRAY
23461: PPUSH
23462: LD_INT 0
23464: PPUSH
23465: CALL_OW 48
// p := p + 1 ;
23469: LD_ADDR_VAR 0 4
23473: PUSH
23474: LD_VAR 0 4
23478: PUSH
23479: LD_INT 1
23481: PLUS
23482: ST_TO_ADDR
// end ; 3 :
23483: GO 23881
23485: LD_INT 3
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23880
23493: POP
// begin vc_weapon := ar_rocket_launcher ;
23494: LD_ADDR_OWVAR 40
23498: PUSH
23499: LD_INT 28
23501: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23502: CALL_OW 45
23506: PPUSH
23507: LD_VAR 0 2
23511: PUSH
23512: LD_INT 1
23514: ARRAY
23515: PUSH
23516: LD_VAR 0 4
23520: ARRAY
23521: PPUSH
23522: LD_VAR 0 2
23526: PUSH
23527: LD_INT 2
23529: ARRAY
23530: PUSH
23531: LD_VAR 0 4
23535: ARRAY
23536: PPUSH
23537: LD_INT 0
23539: PPUSH
23540: CALL_OW 48
// p := p + 1 ;
23544: LD_ADDR_VAR 0 4
23548: PUSH
23549: LD_VAR 0 4
23553: PUSH
23554: LD_INT 1
23556: PLUS
23557: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
23558: LD_ADDR_OWVAR 40
23562: PUSH
23563: LD_INT 28
23565: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23566: CALL_OW 45
23570: PPUSH
23571: LD_VAR 0 2
23575: PUSH
23576: LD_INT 1
23578: ARRAY
23579: PUSH
23580: LD_VAR 0 4
23584: ARRAY
23585: PPUSH
23586: LD_VAR 0 2
23590: PUSH
23591: LD_INT 2
23593: ARRAY
23594: PUSH
23595: LD_VAR 0 4
23599: ARRAY
23600: PPUSH
23601: LD_INT 0
23603: PPUSH
23604: CALL_OW 48
// p := p + 1 ;
23608: LD_ADDR_VAR 0 4
23612: PUSH
23613: LD_VAR 0 4
23617: PUSH
23618: LD_INT 1
23620: PLUS
23621: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
23622: LD_ADDR_OWVAR 40
23626: PUSH
23627: LD_INT 28
23629: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23630: CALL_OW 45
23634: PPUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_INT 1
23642: ARRAY
23643: PUSH
23644: LD_VAR 0 4
23648: ARRAY
23649: PPUSH
23650: LD_VAR 0 2
23654: PUSH
23655: LD_INT 2
23657: ARRAY
23658: PUSH
23659: LD_VAR 0 4
23663: ARRAY
23664: PPUSH
23665: LD_INT 0
23667: PPUSH
23668: CALL_OW 48
// p := p + 1 ;
23672: LD_ADDR_VAR 0 4
23676: PUSH
23677: LD_VAR 0 4
23681: PUSH
23682: LD_INT 1
23684: PLUS
23685: ST_TO_ADDR
// vc_weapon := ar_radar ;
23686: LD_ADDR_OWVAR 40
23690: PUSH
23691: LD_INT 30
23693: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23694: CALL_OW 45
23698: PPUSH
23699: LD_VAR 0 2
23703: PUSH
23704: LD_INT 1
23706: ARRAY
23707: PUSH
23708: LD_VAR 0 4
23712: ARRAY
23713: PPUSH
23714: LD_VAR 0 2
23718: PUSH
23719: LD_INT 2
23721: ARRAY
23722: PUSH
23723: LD_VAR 0 4
23727: ARRAY
23728: PPUSH
23729: LD_INT 0
23731: PPUSH
23732: CALL_OW 48
// p := p + 1 ;
23736: LD_ADDR_VAR 0 4
23740: PUSH
23741: LD_VAR 0 4
23745: PUSH
23746: LD_INT 1
23748: PLUS
23749: ST_TO_ADDR
// vc_weapon := ar_flame_thrower ;
23750: LD_ADDR_OWVAR 40
23754: PUSH
23755: LD_INT 26
23757: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23758: CALL_OW 45
23762: PPUSH
23763: LD_VAR 0 2
23767: PUSH
23768: LD_INT 1
23770: ARRAY
23771: PUSH
23772: LD_VAR 0 4
23776: ARRAY
23777: PPUSH
23778: LD_VAR 0 2
23782: PUSH
23783: LD_INT 2
23785: ARRAY
23786: PUSH
23787: LD_VAR 0 4
23791: ARRAY
23792: PPUSH
23793: LD_INT 0
23795: PPUSH
23796: CALL_OW 48
// p := p + 1 ;
23800: LD_ADDR_VAR 0 4
23804: PUSH
23805: LD_VAR 0 4
23809: PUSH
23810: LD_INT 1
23812: PLUS
23813: ST_TO_ADDR
// vc_weapon := ar_gun ;
23814: LD_ADDR_OWVAR 40
23818: PUSH
23819: LD_INT 27
23821: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 0 ) ;
23822: CALL_OW 45
23826: PPUSH
23827: LD_VAR 0 2
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PUSH
23836: LD_VAR 0 4
23840: ARRAY
23841: PPUSH
23842: LD_VAR 0 2
23846: PUSH
23847: LD_INT 2
23849: ARRAY
23850: PUSH
23851: LD_VAR 0 4
23855: ARRAY
23856: PPUSH
23857: LD_INT 0
23859: PPUSH
23860: CALL_OW 48
// p := p + 1 ;
23864: LD_ADDR_VAR 0 4
23868: PUSH
23869: LD_VAR 0 4
23873: PUSH
23874: LD_INT 1
23876: PLUS
23877: ST_TO_ADDR
// end ; end ;
23878: GO 23881
23880: POP
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) ;
23881: LD_ADDR_VAR 0 7
23885: PUSH
23886: LD_INT 22
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 33
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PPUSH
23910: CALL_OW 69
23914: ST_TO_ADDR
// if filter > 0 then
23915: LD_VAR 0 7
23919: PUSH
23920: LD_INT 0
23922: GREATER
23923: IFFALSE 23991
// for i = 1 to filter do
23925: LD_ADDR_VAR 0 3
23929: PUSH
23930: DOUBLE
23931: LD_INT 1
23933: DEC
23934: ST_TO_ADDR
23935: LD_VAR 0 7
23939: PUSH
23940: FOR_TO
23941: IFFALSE 23989
// if not IsInUnit ( AllPeo [ i ] ) then
23943: LD_EXP 77
23947: PUSH
23948: LD_VAR 0 3
23952: ARRAY
23953: PPUSH
23954: CALL_OW 310
23958: NOT
23959: IFFALSE 23987
// PlaceHumanInUnit ( AllPeo [ i ] , filter [ i ] ) ;
23961: LD_EXP 77
23965: PUSH
23966: LD_VAR 0 3
23970: ARRAY
23971: PPUSH
23972: LD_VAR 0 7
23976: PUSH
23977: LD_VAR 0 3
23981: ARRAY
23982: PPUSH
23983: CALL_OW 52
23987: GO 23940
23989: POP
23990: POP
// for i = 1 to AllPeo do
23991: LD_ADDR_VAR 0 3
23995: PUSH
23996: DOUBLE
23997: LD_INT 1
23999: DEC
24000: ST_TO_ADDR
24001: LD_EXP 77
24005: PUSH
24006: FOR_TO
24007: IFFALSE 24091
// if not IsInUnit ( AllPeo [ i ] ) then
24009: LD_EXP 77
24013: PUSH
24014: LD_VAR 0 3
24018: ARRAY
24019: PPUSH
24020: CALL_OW 310
24024: NOT
24025: IFFALSE 24089
// begin PlaceUnitXY ( AllPeo [ i ] , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
24027: LD_EXP 77
24031: PUSH
24032: LD_VAR 0 3
24036: ARRAY
24037: PPUSH
24038: LD_VAR 0 2
24042: PUSH
24043: LD_INT 1
24045: ARRAY
24046: PUSH
24047: LD_VAR 0 4
24051: ARRAY
24052: PPUSH
24053: LD_VAR 0 2
24057: PUSH
24058: LD_INT 2
24060: ARRAY
24061: PUSH
24062: LD_VAR 0 4
24066: ARRAY
24067: PPUSH
24068: LD_INT 0
24070: PPUSH
24071: CALL_OW 48
// p := p + 1 ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_VAR 0 4
24084: PUSH
24085: LD_INT 1
24087: PLUS
24088: ST_TO_ADDR
// end ;
24089: GO 24006
24091: POP
24092: POP
// end ;
24093: LD_VAR 0 1
24097: RET
// export function CreateRocketXY ( side , c , x , y , d ) ; var un , veh ; begin
24098: LD_INT 0
24100: PPUSH
24101: PPUSH
24102: PPUSH
// uc_side := side ;
24103: LD_ADDR_OWVAR 20
24107: PUSH
24108: LD_VAR 0 1
24112: ST_TO_ADDR
// uc_nation := 2 ;
24113: LD_ADDR_OWVAR 21
24117: PUSH
24118: LD_INT 2
24120: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24121: LD_ADDR_OWVAR 37
24125: PUSH
24126: LD_INT 14
24128: ST_TO_ADDR
// vc_control := c ;
24129: LD_ADDR_OWVAR 38
24133: PUSH
24134: LD_VAR 0 2
24138: ST_TO_ADDR
// vc_engine := engine_combustion ;
24139: LD_ADDR_OWVAR 39
24143: PUSH
24144: LD_INT 1
24146: ST_TO_ADDR
// vc_weapon := ar_rocket_launcher ;
24147: LD_ADDR_OWVAR 40
24151: PUSH
24152: LD_INT 28
24154: ST_TO_ADDR
// veh := CreateVehicle ;
24155: LD_ADDR_VAR 0 8
24159: PUSH
24160: CALL_OW 45
24164: ST_TO_ADDR
// SetDir ( veh , d ) ;
24165: LD_VAR 0 8
24169: PPUSH
24170: LD_VAR 0 5
24174: PPUSH
24175: CALL_OW 233
// PlaceUnitXY ( veh , x , y , false ) ;
24179: LD_VAR 0 8
24183: PPUSH
24184: LD_VAR 0 3
24188: PPUSH
24189: LD_VAR 0 4
24193: PPUSH
24194: LD_INT 0
24196: PPUSH
24197: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) , veh ) ;
24201: LD_INT 3
24203: PPUSH
24204: LD_INT 7
24206: PUSH
24207: LD_INT 6
24209: PUSH
24210: LD_INT 5
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: PUSH
24218: LD_OWVAR 67
24222: ARRAY
24223: PPUSH
24224: CALL 25 0 2
24228: PPUSH
24229: LD_VAR 0 8
24233: PPUSH
24234: CALL_OW 52
// end ;
24238: LD_VAR 0 6
24242: RET
// export function CreateGunXY ( side , c , x , y , d ) ; var un , veh ; begin
24243: LD_INT 0
24245: PPUSH
24246: PPUSH
24247: PPUSH
// uc_side := side ;
24248: LD_ADDR_OWVAR 20
24252: PUSH
24253: LD_VAR 0 1
24257: ST_TO_ADDR
// uc_nation := 2 ;
24258: LD_ADDR_OWVAR 21
24262: PUSH
24263: LD_INT 2
24265: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24266: LD_ADDR_OWVAR 37
24270: PUSH
24271: LD_INT 14
24273: ST_TO_ADDR
// vc_control := c ;
24274: LD_ADDR_OWVAR 38
24278: PUSH
24279: LD_VAR 0 2
24283: ST_TO_ADDR
// vc_engine := engine_combustion ;
24284: LD_ADDR_OWVAR 39
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
// vc_weapon := ar_gun ;
24292: LD_ADDR_OWVAR 40
24296: PUSH
24297: LD_INT 27
24299: ST_TO_ADDR
// veh := CreateVehicle ;
24300: LD_ADDR_VAR 0 8
24304: PUSH
24305: CALL_OW 45
24309: ST_TO_ADDR
// SetDir ( veh , d ) ;
24310: LD_VAR 0 8
24314: PPUSH
24315: LD_VAR 0 5
24319: PPUSH
24320: CALL_OW 233
// PlaceUnitXY ( veh , x , y , false ) ;
24324: LD_VAR 0 8
24328: PPUSH
24329: LD_VAR 0 3
24333: PPUSH
24334: LD_VAR 0 4
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) , veh ) ;
24346: LD_INT 3
24348: PPUSH
24349: LD_INT 7
24351: PUSH
24352: LD_INT 6
24354: PUSH
24355: LD_INT 5
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: LD_OWVAR 67
24367: ARRAY
24368: PPUSH
24369: CALL 25 0 2
24373: PPUSH
24374: LD_VAR 0 8
24378: PPUSH
24379: CALL_OW 52
// end ;
24383: LD_VAR 0 6
24387: RET
// export function CreateFlameXY ( side , c , x , y , d ) ; var un , veh ; begin
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
24392: PPUSH
// uc_side := side ;
24393: LD_ADDR_OWVAR 20
24397: PUSH
24398: LD_VAR 0 1
24402: ST_TO_ADDR
// uc_nation := 2 ;
24403: LD_ADDR_OWVAR 21
24407: PUSH
24408: LD_INT 2
24410: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24411: LD_ADDR_OWVAR 37
24415: PUSH
24416: LD_INT 14
24418: ST_TO_ADDR
// vc_control := c ;
24419: LD_ADDR_OWVAR 38
24423: PUSH
24424: LD_VAR 0 2
24428: ST_TO_ADDR
// vc_engine := engine_combustion ;
24429: LD_ADDR_OWVAR 39
24433: PUSH
24434: LD_INT 1
24436: ST_TO_ADDR
// vc_weapon := ar_flame_thrower ;
24437: LD_ADDR_OWVAR 40
24441: PUSH
24442: LD_INT 26
24444: ST_TO_ADDR
// veh := CreateVehicle ;
24445: LD_ADDR_VAR 0 8
24449: PUSH
24450: CALL_OW 45
24454: ST_TO_ADDR
// SetDir ( veh , d ) ;
24455: LD_VAR 0 8
24459: PPUSH
24460: LD_VAR 0 5
24464: PPUSH
24465: CALL_OW 233
// PlaceUnitXY ( veh , x , y , false ) ;
24469: LD_VAR 0 8
24473: PPUSH
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_VAR 0 4
24483: PPUSH
24484: LD_INT 0
24486: PPUSH
24487: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) , veh ) ;
24491: LD_INT 3
24493: PPUSH
24494: LD_INT 7
24496: PUSH
24497: LD_INT 6
24499: PUSH
24500: LD_INT 5
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: LD_OWVAR 67
24512: ARRAY
24513: PPUSH
24514: CALL 25 0 2
24518: PPUSH
24519: LD_VAR 0 8
24523: PPUSH
24524: CALL_OW 52
// end ;
24528: LD_VAR 0 6
24532: RET
// export function CreateRadarXY ( side , c , x , y , d ) ; var un , veh ; begin
24533: LD_INT 0
24535: PPUSH
24536: PPUSH
24537: PPUSH
// uc_side := side ;
24538: LD_ADDR_OWVAR 20
24542: PUSH
24543: LD_VAR 0 1
24547: ST_TO_ADDR
// uc_nation := 2 ;
24548: LD_ADDR_OWVAR 21
24552: PUSH
24553: LD_INT 2
24555: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24556: LD_ADDR_OWVAR 37
24560: PUSH
24561: LD_INT 14
24563: ST_TO_ADDR
// vc_control := c ;
24564: LD_ADDR_OWVAR 38
24568: PUSH
24569: LD_VAR 0 2
24573: ST_TO_ADDR
// vc_engine := engine_combustion ;
24574: LD_ADDR_OWVAR 39
24578: PUSH
24579: LD_INT 1
24581: ST_TO_ADDR
// vc_weapon := ar_radar ;
24582: LD_ADDR_OWVAR 40
24586: PUSH
24587: LD_INT 30
24589: ST_TO_ADDR
// veh := CreateVehicle ;
24590: LD_ADDR_VAR 0 8
24594: PUSH
24595: CALL_OW 45
24599: ST_TO_ADDR
// SetDir ( veh , d ) ;
24600: LD_VAR 0 8
24604: PPUSH
24605: LD_VAR 0 5
24609: PPUSH
24610: CALL_OW 233
// PlaceUnitXY ( veh , x , y , false ) ;
24614: LD_VAR 0 8
24618: PPUSH
24619: LD_VAR 0 3
24623: PPUSH
24624: LD_VAR 0 4
24628: PPUSH
24629: LD_INT 0
24631: PPUSH
24632: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) , veh ) ;
24636: LD_INT 3
24638: PPUSH
24639: LD_INT 7
24641: PUSH
24642: LD_INT 6
24644: PUSH
24645: LD_INT 5
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: PUSH
24653: LD_OWVAR 67
24657: ARRAY
24658: PPUSH
24659: CALL 25 0 2
24663: PPUSH
24664: LD_VAR 0 8
24668: PPUSH
24669: CALL_OW 52
// end ;
24673: LD_VAR 0 6
24677: RET
// export function CreateRemTowerXY ( side , x , y , d ) ; var un , veh ; begin
24678: LD_INT 0
24680: PPUSH
24681: PPUSH
24682: PPUSH
// uc_side := side ;
24683: LD_ADDR_OWVAR 20
24687: PUSH
24688: LD_VAR 0 1
24692: ST_TO_ADDR
// uc_nation := 2 ;
24693: LD_ADDR_OWVAR 21
24697: PUSH
24698: LD_INT 2
24700: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24701: LD_ADDR_OWVAR 37
24705: PUSH
24706: LD_INT 14
24708: ST_TO_ADDR
// vc_control := control_manual ;
24709: LD_ADDR_OWVAR 38
24713: PUSH
24714: LD_INT 1
24716: ST_TO_ADDR
// vc_engine := engine_combustion ;
24717: LD_ADDR_OWVAR 39
24721: PUSH
24722: LD_INT 1
24724: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
24725: LD_ADDR_OWVAR 40
24729: PUSH
24730: LD_INT 31
24732: ST_TO_ADDR
// veh := CreateVehicle ;
24733: LD_ADDR_VAR 0 7
24737: PUSH
24738: CALL_OW 45
24742: ST_TO_ADDR
// SetDir ( veh , d ) ;
24743: LD_VAR 0 7
24747: PPUSH
24748: LD_VAR 0 4
24752: PPUSH
24753: CALL_OW 233
// PlaceUnitXY ( veh , x , y , false ) ;
24757: LD_VAR 0 7
24761: PPUSH
24762: LD_VAR 0 2
24766: PPUSH
24767: LD_VAR 0 3
24771: PPUSH
24772: LD_INT 0
24774: PPUSH
24775: CALL_OW 48
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) , veh ) ;
24779: LD_INT 3
24781: PPUSH
24782: LD_INT 7
24784: PUSH
24785: LD_INT 6
24787: PUSH
24788: LD_INT 5
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: PUSH
24796: LD_OWVAR 67
24800: ARRAY
24801: PPUSH
24802: CALL 25 0 2
24806: PPUSH
24807: LD_VAR 0 7
24811: PPUSH
24812: CALL_OW 52
// end ; end_of_file
24816: LD_VAR 0 5
24820: RET
// export Omar ; export function PrepareOmarAli ; var un ; begin
24821: LD_INT 0
24823: PPUSH
24824: PPUSH
// uc_side := 5 ;
24825: LD_ADDR_OWVAR 20
24829: PUSH
24830: LD_INT 5
24832: ST_TO_ADDR
// uc_nation := 2 ;
24833: LD_ADDR_OWVAR 21
24837: PUSH
24838: LD_INT 2
24840: ST_TO_ADDR
// hc_gallery := sandar ;
24841: LD_ADDR_OWVAR 33
24845: PUSH
24846: LD_STRING sandar
24848: ST_TO_ADDR
// hc_face_number := 6 ;
24849: LD_ADDR_OWVAR 34
24853: PUSH
24854: LD_INT 6
24856: ST_TO_ADDR
// hc_class := 11 ;
24857: LD_ADDR_OWVAR 28
24861: PUSH
24862: LD_INT 11
24864: ST_TO_ADDR
// hc_skills := [ 7 , 5 , 3 , 6 ] ;
24865: LD_ADDR_OWVAR 31
24869: PUSH
24870: LD_INT 7
24872: PUSH
24873: LD_INT 5
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: LD_INT 6
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
24888: LD_ADDR_OWVAR 29
24892: PUSH
24893: LD_INT 12
24895: PUSH
24896: LD_INT 11
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: ST_TO_ADDR
// hc_sex := sex_male ;
24903: LD_ADDR_OWVAR 27
24907: PUSH
24908: LD_INT 1
24910: ST_TO_ADDR
// hc_name := Omar Ali ;
24911: LD_ADDR_OWVAR 26
24915: PUSH
24916: LD_STRING Omar Ali
24918: ST_TO_ADDR
// Omar := CreateHuman ;
24919: LD_ADDR_EXP 78
24923: PUSH
24924: CALL_OW 44
24928: ST_TO_ADDR
// uc_nation := 0 ;
24929: LD_ADDR_OWVAR 21
24933: PUSH
24934: LD_INT 0
24936: ST_TO_ADDR
// vc_chassis := 15 ;
24937: LD_ADDR_OWVAR 37
24941: PUSH
24942: LD_INT 15
24944: ST_TO_ADDR
// vc_control := control_rider ;
24945: LD_ADDR_OWVAR 38
24949: PUSH
24950: LD_INT 4
24952: ST_TO_ADDR
// un := CreateVehicle ;
24953: LD_ADDR_VAR 0 2
24957: PUSH
24958: CALL_OW 45
24962: ST_TO_ADDR
// SetDir ( un , 5 ) ;
24963: LD_VAR 0 2
24967: PPUSH
24968: LD_INT 5
24970: PPUSH
24971: CALL_OW 233
// PlaceUnitXY ( un , 216 , 167 , false ) ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_INT 216
24982: PPUSH
24983: LD_INT 167
24985: PPUSH
24986: LD_INT 0
24988: PPUSH
24989: CALL_OW 48
// PlaceHumanInUnit ( Omar , un ) ;
24993: LD_EXP 78
24997: PPUSH
24998: LD_VAR 0 2
25002: PPUSH
25003: CALL_OW 52
// end ;
25007: LD_VAR 0 1
25011: RET
// export Ar5_Force ; export function PrepareSouthArForces ; var area , list , i , p ; begin
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
25018: PPUSH
// uc_side := 5 ;
25019: LD_ADDR_OWVAR 20
25023: PUSH
25024: LD_INT 5
25026: ST_TO_ADDR
// uc_nation := 2 ;
25027: LD_ADDR_OWVAR 21
25031: PUSH
25032: LD_INT 2
25034: ST_TO_ADDR
// Ar5_Force := [ ] ;
25035: LD_ADDR_EXP 79
25039: PUSH
25040: EMPTY
25041: ST_TO_ADDR
// PrepareOmarAli ;
25042: CALL 24821 0 0
// list := AreaToList ( ar_south_spawn , 0 ) ;
25046: LD_ADDR_VAR 0 3
25050: PUSH
25051: LD_INT 5
25053: PPUSH
25054: LD_INT 0
25056: PPUSH
25057: CALL_OW 517
25061: ST_TO_ADDR
// p := 1 ;
25062: LD_ADDR_VAR 0 5
25066: PUSH
25067: LD_INT 1
25069: ST_TO_ADDR
// case Difficulty of 1 , 2 :
25070: LD_OWVAR 67
25074: PUSH
25075: LD_INT 1
25077: DOUBLE
25078: EQUAL
25079: IFTRUE 25089
25081: LD_INT 2
25083: DOUBLE
25084: EQUAL
25085: IFTRUE 25089
25087: GO 25671
25089: POP
// begin for i = 1 to 2 do
25090: LD_ADDR_VAR 0 4
25094: PUSH
25095: DOUBLE
25096: LD_INT 1
25098: DEC
25099: ST_TO_ADDR
25100: LD_INT 2
25102: PUSH
25103: FOR_TO
25104: IFFALSE 25165
// begin CreateRocketXY ( 5 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25106: LD_INT 5
25108: PPUSH
25109: LD_INT 2
25111: PPUSH
25112: LD_VAR 0 3
25116: PUSH
25117: LD_INT 1
25119: ARRAY
25120: PUSH
25121: LD_VAR 0 5
25125: ARRAY
25126: PPUSH
25127: LD_VAR 0 3
25131: PUSH
25132: LD_INT 2
25134: ARRAY
25135: PUSH
25136: LD_VAR 0 5
25140: ARRAY
25141: PPUSH
25142: LD_INT 5
25144: PPUSH
25145: CALL 24098 0 5
// p = p + 1 ;
25149: LD_ADDR_VAR 0 5
25153: PUSH
25154: LD_VAR 0 5
25158: PUSH
25159: LD_INT 1
25161: PLUS
25162: ST_TO_ADDR
// end ;
25163: GO 25103
25165: POP
25166: POP
// for i = 1 to 2 do
25167: LD_ADDR_VAR 0 4
25171: PUSH
25172: DOUBLE
25173: LD_INT 1
25175: DEC
25176: ST_TO_ADDR
25177: LD_INT 2
25179: PUSH
25180: FOR_TO
25181: IFFALSE 25242
// begin CreateGunXY ( 5 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25183: LD_INT 5
25185: PPUSH
25186: LD_INT 1
25188: PPUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_INT 1
25196: ARRAY
25197: PUSH
25198: LD_VAR 0 5
25202: ARRAY
25203: PPUSH
25204: LD_VAR 0 3
25208: PUSH
25209: LD_INT 2
25211: ARRAY
25212: PUSH
25213: LD_VAR 0 5
25217: ARRAY
25218: PPUSH
25219: LD_INT 5
25221: PPUSH
25222: CALL 24243 0 5
// p = p + 1 ;
25226: LD_ADDR_VAR 0 5
25230: PUSH
25231: LD_VAR 0 5
25235: PUSH
25236: LD_INT 1
25238: PLUS
25239: ST_TO_ADDR
// end ;
25240: GO 25180
25242: POP
25243: POP
// for i = 1 to 2 do
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: DOUBLE
25250: LD_INT 1
25252: DEC
25253: ST_TO_ADDR
25254: LD_INT 2
25256: PUSH
25257: FOR_TO
25258: IFFALSE 25316
// begin CreateRemTowerXY ( 5 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25260: LD_INT 5
25262: PPUSH
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: PUSH
25272: LD_VAR 0 5
25276: ARRAY
25277: PPUSH
25278: LD_VAR 0 3
25282: PUSH
25283: LD_INT 2
25285: ARRAY
25286: PUSH
25287: LD_VAR 0 5
25291: ARRAY
25292: PPUSH
25293: LD_INT 5
25295: PPUSH
25296: CALL 24678 0 4
// p = p + 1 ;
25300: LD_ADDR_VAR 0 5
25304: PUSH
25305: LD_VAR 0 5
25309: PUSH
25310: LD_INT 1
25312: PLUS
25313: ST_TO_ADDR
// end ;
25314: GO 25257
25316: POP
25317: POP
// CreateRadarXY ( 5 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25318: LD_INT 5
25320: PPUSH
25321: LD_INT 2
25323: PPUSH
25324: LD_VAR 0 3
25328: PUSH
25329: LD_INT 1
25331: ARRAY
25332: PUSH
25333: LD_VAR 0 5
25337: ARRAY
25338: PPUSH
25339: LD_VAR 0 3
25343: PUSH
25344: LD_INT 2
25346: ARRAY
25347: PUSH
25348: LD_VAR 0 5
25352: ARRAY
25353: PPUSH
25354: LD_INT 5
25356: PPUSH
25357: CALL 24533 0 5
// p := p + 1 ;
25361: LD_ADDR_VAR 0 5
25365: PUSH
25366: LD_VAR 0 5
25370: PUSH
25371: LD_INT 1
25373: PLUS
25374: ST_TO_ADDR
// CreateFlameXY ( 5 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25375: LD_INT 5
25377: PPUSH
25378: LD_INT 1
25380: PPUSH
25381: LD_VAR 0 3
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PUSH
25390: LD_VAR 0 5
25394: ARRAY
25395: PPUSH
25396: LD_VAR 0 3
25400: PUSH
25401: LD_INT 2
25403: ARRAY
25404: PUSH
25405: LD_VAR 0 5
25409: ARRAY
25410: PPUSH
25411: LD_INT 5
25413: PPUSH
25414: CALL 24388 0 5
// p := p + 1 ;
25418: LD_ADDR_VAR 0 5
25422: PUSH
25423: LD_VAR 0 5
25427: PUSH
25428: LD_INT 1
25430: PLUS
25431: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mortar , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
25432: LD_INT 8
25434: PPUSH
25435: LD_INT 7
25437: PUSH
25438: LD_INT 6
25440: PUSH
25441: LD_INT 5
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: PUSH
25449: LD_OWVAR 67
25453: ARRAY
25454: PPUSH
25455: CALL 25 0 2
25459: PPUSH
25460: LD_VAR 0 3
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PUSH
25469: LD_VAR 0 5
25473: ARRAY
25474: PPUSH
25475: LD_VAR 0 3
25479: PUSH
25480: LD_INT 2
25482: ARRAY
25483: PUSH
25484: LD_VAR 0 5
25488: ARRAY
25489: PPUSH
25490: LD_INT 0
25492: PPUSH
25493: CALL_OW 48
// p := p + 1 ;
25497: LD_ADDR_VAR 0 5
25501: PUSH
25502: LD_VAR 0 5
25506: PUSH
25507: LD_INT 1
25509: PLUS
25510: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_scientistic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
25511: LD_INT 4
25513: PPUSH
25514: LD_INT 7
25516: PUSH
25517: LD_INT 6
25519: PUSH
25520: LD_INT 5
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: PUSH
25528: LD_OWVAR 67
25532: ARRAY
25533: PPUSH
25534: CALL 25 0 2
25538: PPUSH
25539: LD_VAR 0 3
25543: PUSH
25544: LD_INT 1
25546: ARRAY
25547: PUSH
25548: LD_VAR 0 5
25552: ARRAY
25553: PPUSH
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 2
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 5
25567: ARRAY
25568: PPUSH
25569: LD_INT 0
25571: PPUSH
25572: CALL_OW 48
// p := p + 1 ;
25576: LD_ADDR_VAR 0 5
25580: PUSH
25581: LD_VAR 0 5
25585: PUSH
25586: LD_INT 1
25588: PLUS
25589: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mechanic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
25590: LD_INT 3
25592: PPUSH
25593: LD_INT 7
25595: PUSH
25596: LD_INT 6
25598: PUSH
25599: LD_INT 5
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: PUSH
25607: LD_OWVAR 67
25611: ARRAY
25612: PPUSH
25613: CALL 25 0 2
25617: PPUSH
25618: LD_VAR 0 3
25622: PUSH
25623: LD_INT 1
25625: ARRAY
25626: PUSH
25627: LD_VAR 0 5
25631: ARRAY
25632: PPUSH
25633: LD_VAR 0 3
25637: PUSH
25638: LD_INT 2
25640: ARRAY
25641: PUSH
25642: LD_VAR 0 5
25646: ARRAY
25647: PPUSH
25648: LD_INT 0
25650: PPUSH
25651: CALL_OW 48
// p := p + 1 ;
25655: LD_ADDR_VAR 0 5
25659: PUSH
25660: LD_VAR 0 5
25664: PUSH
25665: LD_INT 1
25667: PLUS
25668: ST_TO_ADDR
// end ; 3 :
25669: GO 26238
25671: LD_INT 3
25673: DOUBLE
25674: EQUAL
25675: IFTRUE 25679
25677: GO 26237
25679: POP
// begin for i = 1 to 2 do
25680: LD_ADDR_VAR 0 4
25684: PUSH
25685: DOUBLE
25686: LD_INT 1
25688: DEC
25689: ST_TO_ADDR
25690: LD_INT 2
25692: PUSH
25693: FOR_TO
25694: IFFALSE 25755
// begin CreateRocketXY ( 5 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25696: LD_INT 5
25698: PPUSH
25699: LD_INT 2
25701: PPUSH
25702: LD_VAR 0 3
25706: PUSH
25707: LD_INT 1
25709: ARRAY
25710: PUSH
25711: LD_VAR 0 5
25715: ARRAY
25716: PPUSH
25717: LD_VAR 0 3
25721: PUSH
25722: LD_INT 2
25724: ARRAY
25725: PUSH
25726: LD_VAR 0 5
25730: ARRAY
25731: PPUSH
25732: LD_INT 5
25734: PPUSH
25735: CALL 24098 0 5
// p = p + 1 ;
25739: LD_ADDR_VAR 0 5
25743: PUSH
25744: LD_VAR 0 5
25748: PUSH
25749: LD_INT 1
25751: PLUS
25752: ST_TO_ADDR
// end ;
25753: GO 25693
25755: POP
25756: POP
// for i = 1 to 2 do
25757: LD_ADDR_VAR 0 4
25761: PUSH
25762: DOUBLE
25763: LD_INT 1
25765: DEC
25766: ST_TO_ADDR
25767: LD_INT 2
25769: PUSH
25770: FOR_TO
25771: IFFALSE 25832
// begin CreateGunXY ( 5 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25773: LD_INT 5
25775: PPUSH
25776: LD_INT 1
25778: PPUSH
25779: LD_VAR 0 3
25783: PUSH
25784: LD_INT 1
25786: ARRAY
25787: PUSH
25788: LD_VAR 0 5
25792: ARRAY
25793: PPUSH
25794: LD_VAR 0 3
25798: PUSH
25799: LD_INT 2
25801: ARRAY
25802: PUSH
25803: LD_VAR 0 5
25807: ARRAY
25808: PPUSH
25809: LD_INT 5
25811: PPUSH
25812: CALL 24243 0 5
// p = p + 1 ;
25816: LD_ADDR_VAR 0 5
25820: PUSH
25821: LD_VAR 0 5
25825: PUSH
25826: LD_INT 1
25828: PLUS
25829: ST_TO_ADDR
// end ;
25830: GO 25770
25832: POP
25833: POP
// CreateRemTowerXY ( 5 , list [ p ] , list [ p + 1 ] , 5 ) ;
25834: LD_INT 5
25836: PPUSH
25837: LD_VAR 0 3
25841: PUSH
25842: LD_VAR 0 5
25846: ARRAY
25847: PPUSH
25848: LD_VAR 0 3
25852: PUSH
25853: LD_VAR 0 5
25857: PUSH
25858: LD_INT 1
25860: PLUS
25861: ARRAY
25862: PPUSH
25863: LD_INT 5
25865: PPUSH
25866: CALL 24678 0 4
// p = p + 1 ;
25870: LD_ADDR_VAR 0 5
25874: PUSH
25875: LD_VAR 0 5
25879: PUSH
25880: LD_INT 1
25882: PLUS
25883: ST_TO_ADDR
// CreateRadarXY ( 5 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25884: LD_INT 5
25886: PPUSH
25887: LD_INT 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PUSH
25895: LD_INT 1
25897: ARRAY
25898: PUSH
25899: LD_VAR 0 5
25903: ARRAY
25904: PPUSH
25905: LD_VAR 0 3
25909: PUSH
25910: LD_INT 2
25912: ARRAY
25913: PUSH
25914: LD_VAR 0 5
25918: ARRAY
25919: PPUSH
25920: LD_INT 5
25922: PPUSH
25923: CALL 24533 0 5
// p := p + 1 ;
25927: LD_ADDR_VAR 0 5
25931: PUSH
25932: LD_VAR 0 5
25936: PUSH
25937: LD_INT 1
25939: PLUS
25940: ST_TO_ADDR
// CreateFlameXY ( 5 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 5 ) ;
25941: LD_INT 5
25943: PPUSH
25944: LD_INT 1
25946: PPUSH
25947: LD_VAR 0 3
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: PUSH
25956: LD_VAR 0 5
25960: ARRAY
25961: PPUSH
25962: LD_VAR 0 3
25966: PUSH
25967: LD_INT 2
25969: ARRAY
25970: PUSH
25971: LD_VAR 0 5
25975: ARRAY
25976: PPUSH
25977: LD_INT 5
25979: PPUSH
25980: CALL 24388 0 5
// p := p + 1 ;
25984: LD_ADDR_VAR 0 5
25988: PUSH
25989: LD_VAR 0 5
25993: PUSH
25994: LD_INT 1
25996: PLUS
25997: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mortar , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
25998: LD_INT 8
26000: PPUSH
26001: LD_INT 7
26003: PUSH
26004: LD_INT 6
26006: PUSH
26007: LD_INT 5
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: PUSH
26015: LD_OWVAR 67
26019: ARRAY
26020: PPUSH
26021: CALL 25 0 2
26025: PPUSH
26026: LD_VAR 0 3
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PUSH
26035: LD_VAR 0 5
26039: ARRAY
26040: PPUSH
26041: LD_VAR 0 3
26045: PUSH
26046: LD_INT 2
26048: ARRAY
26049: PUSH
26050: LD_VAR 0 5
26054: ARRAY
26055: PPUSH
26056: LD_INT 0
26058: PPUSH
26059: CALL_OW 48
// p := p + 1 ;
26063: LD_ADDR_VAR 0 5
26067: PUSH
26068: LD_VAR 0 5
26072: PUSH
26073: LD_INT 1
26075: PLUS
26076: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_scientistic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
26077: LD_INT 4
26079: PPUSH
26080: LD_INT 7
26082: PUSH
26083: LD_INT 6
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: LIST
26093: PUSH
26094: LD_OWVAR 67
26098: ARRAY
26099: PPUSH
26100: CALL 25 0 2
26104: PPUSH
26105: LD_VAR 0 3
26109: PUSH
26110: LD_INT 1
26112: ARRAY
26113: PUSH
26114: LD_VAR 0 5
26118: ARRAY
26119: PPUSH
26120: LD_VAR 0 3
26124: PUSH
26125: LD_INT 2
26127: ARRAY
26128: PUSH
26129: LD_VAR 0 5
26133: ARRAY
26134: PPUSH
26135: LD_INT 0
26137: PPUSH
26138: CALL_OW 48
// p := p + 1 ;
26142: LD_ADDR_VAR 0 5
26146: PUSH
26147: LD_VAR 0 5
26151: PUSH
26152: LD_INT 1
26154: PLUS
26155: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mechanic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
26156: LD_INT 3
26158: PPUSH
26159: LD_INT 7
26161: PUSH
26162: LD_INT 6
26164: PUSH
26165: LD_INT 5
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: PUSH
26173: LD_OWVAR 67
26177: ARRAY
26178: PPUSH
26179: CALL 25 0 2
26183: PPUSH
26184: LD_VAR 0 3
26188: PUSH
26189: LD_INT 1
26191: ARRAY
26192: PUSH
26193: LD_VAR 0 5
26197: ARRAY
26198: PPUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_INT 2
26206: ARRAY
26207: PUSH
26208: LD_VAR 0 5
26212: ARRAY
26213: PPUSH
26214: LD_INT 0
26216: PPUSH
26217: CALL_OW 48
// p := p + 1 ;
26221: LD_ADDR_VAR 0 5
26225: PUSH
26226: LD_VAR 0 5
26230: PUSH
26231: LD_INT 1
26233: PLUS
26234: ST_TO_ADDR
// end ; end ;
26235: GO 26238
26237: POP
// end ;
26238: LD_VAR 0 1
26242: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) > 0 and omar_return = false do var i , x , enemy , sci , radar , un , units , vehs , free_mechanic ;
26243: LD_INT 22
26245: PUSH
26246: LD_INT 5
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 69
26257: PUSH
26258: LD_INT 0
26260: GREATER
26261: PUSH
26262: LD_EXP 3
26266: PUSH
26267: LD_INT 0
26269: EQUAL
26270: AND
26271: IFFALSE 27484
26273: GO 26275
26275: DISABLE
26276: LD_INT 0
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
// begin enable ;
26287: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 5 ] ) ;
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: LD_INT 81
26295: PUSH
26296: LD_INT 5
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PPUSH
26303: CALL_OW 69
26307: ST_TO_ADDR
// if ar5_force > 0 and enemy > 0 then
26308: LD_EXP 79
26312: PUSH
26313: LD_INT 0
26315: GREATER
26316: PUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_INT 0
26324: GREATER
26325: AND
26326: IFFALSE 26636
// for i = 1 to ar5_force do
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_EXP 79
26342: PUSH
26343: FOR_TO
26344: IFFALSE 26634
// begin if not HasTask ( ar5_force [ i ] ) and GetLives ( ar5_force [ i ] ) = 1000 then
26346: LD_EXP 79
26350: PUSH
26351: LD_VAR 0 1
26355: ARRAY
26356: PPUSH
26357: CALL_OW 314
26361: NOT
26362: PUSH
26363: LD_EXP 79
26367: PUSH
26368: LD_VAR 0 1
26372: ARRAY
26373: PPUSH
26374: CALL_OW 256
26378: PUSH
26379: LD_INT 1000
26381: EQUAL
26382: AND
26383: IFFALSE 26421
// ComAttackUnit ( ar5_force [ i ] , NearestUnitToUnit ( enemy , ar5_force [ i ] ) ) ;
26385: LD_EXP 79
26389: PUSH
26390: LD_VAR 0 1
26394: ARRAY
26395: PPUSH
26396: LD_VAR 0 3
26400: PPUSH
26401: LD_EXP 79
26405: PUSH
26406: LD_VAR 0 1
26410: ARRAY
26411: PPUSH
26412: CALL_OW 74
26416: PPUSH
26417: CALL_OW 115
// if UnitFilter ( ar5_force , [ f_weapon , ar_radar ] ) > 0 then
26421: LD_EXP 79
26425: PPUSH
26426: LD_INT 34
26428: PUSH
26429: LD_INT 30
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PPUSH
26436: CALL_OW 72
26440: PUSH
26441: LD_INT 0
26443: GREATER
26444: IFFALSE 26632
// begin radar := UnitFilter ( ar5_force , [ f_weapon , ar_radar ] ) [ 1 ] ;
26446: LD_ADDR_VAR 0 5
26450: PUSH
26451: LD_EXP 79
26455: PPUSH
26456: LD_INT 34
26458: PUSH
26459: LD_INT 30
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 72
26470: PUSH
26471: LD_INT 1
26473: ARRAY
26474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_weapon , ar_rocket_launcher ] ] ) > 0 then
26475: LD_INT 22
26477: PUSH
26478: LD_INT 5
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 34
26487: PUSH
26488: LD_INT 28
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PPUSH
26499: CALL_OW 69
26503: PUSH
26504: LD_INT 0
26506: GREATER
26507: IFFALSE 26632
// if GetDistUnits ( radar , NearestUnitToUnit ( UnitFilter ( ar5_force , [ f_weapon , ar_rocket_launcher ] ) , radar ) ) <= 3 then
26509: LD_VAR 0 5
26513: PPUSH
26514: LD_EXP 79
26518: PPUSH
26519: LD_INT 34
26521: PUSH
26522: LD_INT 28
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PPUSH
26529: CALL_OW 72
26533: PPUSH
26534: LD_VAR 0 5
26538: PPUSH
26539: CALL_OW 74
26543: PPUSH
26544: CALL_OW 296
26548: PUSH
26549: LD_INT 3
26551: LESSEQUAL
26552: IFFALSE 26565
// ComHold ( radar ) else
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 140
26563: GO 26632
// ComMoveXY ( radar , GetX ( UnitFilter ( ar5_force , [ f_weapon , ar_rocket_launcher ] ) [ 1 ] ) , GetY ( UnitFilter ( ar5_force , [ f_weapon , ar_rocket_launcher ] ) [ 1 ] ) ) ;
26565: LD_VAR 0 5
26569: PPUSH
26570: LD_EXP 79
26574: PPUSH
26575: LD_INT 34
26577: PUSH
26578: LD_INT 28
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PPUSH
26585: CALL_OW 72
26589: PUSH
26590: LD_INT 1
26592: ARRAY
26593: PPUSH
26594: CALL_OW 250
26598: PPUSH
26599: LD_EXP 79
26603: PPUSH
26604: LD_INT 34
26606: PUSH
26607: LD_INT 28
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 72
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: CALL_OW 251
26627: PPUSH
26628: CALL_OW 111
// end ; end ;
26632: GO 26343
26634: POP
26635: POP
// for un in FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_class , class_mortar ] , [ f_lives , 1000 ] ] ] ) ^ FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ] ) diff FilterAllUnits ( [ f_control , control_rider ] ) do
26636: LD_ADDR_VAR 0 6
26640: PUSH
26641: LD_INT 22
26643: PUSH
26644: LD_INT 5
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 25
26653: PUSH
26654: LD_INT 8
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 24
26663: PUSH
26664: LD_INT 1000
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: PPUSH
26679: CALL_OW 69
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_INT 5
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 24
26706: PUSH
26707: LD_INT 1000
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: PPUSH
26722: CALL_OW 69
26726: ADD
26727: PUSH
26728: LD_INT 33
26730: PUSH
26731: LD_INT 4
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 69
26742: DIFF
26743: PUSH
26744: FOR_IN
26745: IFFALSE 26813
// begin if not un in ar5_force then
26747: LD_VAR 0 6
26751: PUSH
26752: LD_EXP 79
26756: IN
26757: NOT
26758: IFFALSE 26776
// ar5_force := ar5_force ^ un ;
26760: LD_ADDR_EXP 79
26764: PUSH
26765: LD_EXP 79
26769: PUSH
26770: LD_VAR 0 6
26774: ADD
26775: ST_TO_ADDR
// if GetLives ( un ) <= 700 then
26776: LD_VAR 0 6
26780: PPUSH
26781: CALL_OW 256
26785: PUSH
26786: LD_INT 700
26788: LESSEQUAL
26789: IFFALSE 26811
// ar5_force := Delete ( ar5_force , un ) ;
26791: LD_ADDR_EXP 79
26795: PUSH
26796: LD_EXP 79
26800: PPUSH
26801: LD_VAR 0 6
26805: PPUSH
26806: CALL_OW 3
26810: ST_TO_ADDR
// end ;
26811: GO 26744
26813: POP
26814: POP
// vehs := FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
26815: LD_ADDR_VAR 0 8
26819: PUSH
26820: LD_INT 22
26822: PUSH
26823: LD_INT 5
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 21
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 3
26842: PUSH
26843: LD_INT 24
26845: PUSH
26846: LD_INT 700
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: PPUSH
26865: CALL_OW 69
26869: ST_TO_ADDR
// free_mechanic := FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_class , 3 ] , [ f_outside ] ] ] ) ;
26870: LD_ADDR_VAR 0 9
26874: PUSH
26875: LD_INT 22
26877: PUSH
26878: LD_INT 5
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 25
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 56
26897: PUSH
26898: EMPTY
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if vehs > 0 then
26914: LD_VAR 0 8
26918: PUSH
26919: LD_INT 0
26921: GREATER
26922: IFFALSE 27046
// begin for i = 1 to vehs do
26924: LD_ADDR_VAR 0 1
26928: PUSH
26929: DOUBLE
26930: LD_INT 1
26932: DEC
26933: ST_TO_ADDR
26934: LD_VAR 0 8
26938: PUSH
26939: FOR_TO
26940: IFFALSE 27042
// begin if GetDistUnitXY ( vehs [ i ] , 211 , 161 ) > 8 then
26942: LD_VAR 0 8
26946: PUSH
26947: LD_VAR 0 1
26951: ARRAY
26952: PPUSH
26953: LD_INT 211
26955: PPUSH
26956: LD_INT 161
26958: PPUSH
26959: CALL_OW 297
26963: PUSH
26964: LD_INT 8
26966: GREATER
26967: IFFALSE 26992
// ComMoveXY ( vehs [ i ] , 211 , 161 ) else
26969: LD_VAR 0 8
26973: PUSH
26974: LD_VAR 0 1
26978: ARRAY
26979: PPUSH
26980: LD_INT 211
26982: PPUSH
26983: LD_INT 161
26985: PPUSH
26986: CALL_OW 111
26990: GO 27040
// for x = 1 to free_mechanic do
26992: LD_ADDR_VAR 0 2
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_VAR 0 9
27006: PUSH
27007: FOR_TO
27008: IFFALSE 27038
// ComRepairVehicle ( free_mechanic [ x ] , vehs [ i ] ) ;
27010: LD_VAR 0 9
27014: PUSH
27015: LD_VAR 0 2
27019: ARRAY
27020: PPUSH
27021: LD_VAR 0 8
27025: PUSH
27026: LD_VAR 0 1
27030: ARRAY
27031: PPUSH
27032: CALL_OW 129
27036: GO 27007
27038: POP
27039: POP
// end ;
27040: GO 26939
27042: POP
27043: POP
// end else
27044: GO 27126
// begin if free_mechanic > 0 then
27046: LD_VAR 0 9
27050: PUSH
27051: LD_INT 0
27053: GREATER
27054: IFFALSE 27126
// for x = 1 to free_mechanic do
27056: LD_ADDR_VAR 0 2
27060: PUSH
27061: DOUBLE
27062: LD_INT 1
27064: DEC
27065: ST_TO_ADDR
27066: LD_VAR 0 9
27070: PUSH
27071: FOR_TO
27072: IFFALSE 27124
// if GetDistUnitXY ( free_mechanic [ x ] , 214 , 166 ) > 8 then
27074: LD_VAR 0 9
27078: PUSH
27079: LD_VAR 0 2
27083: ARRAY
27084: PPUSH
27085: LD_INT 214
27087: PPUSH
27088: LD_INT 166
27090: PPUSH
27091: CALL_OW 297
27095: PUSH
27096: LD_INT 8
27098: GREATER
27099: IFFALSE 27122
// ComMoveXY ( free_mechanic [ x ] , 214 , 166 ) ;
27101: LD_VAR 0 9
27105: PUSH
27106: LD_VAR 0 2
27110: ARRAY
27111: PPUSH
27112: LD_INT 214
27114: PPUSH
27115: LD_INT 166
27117: PPUSH
27118: CALL_OW 111
27122: GO 27071
27124: POP
27125: POP
// end ; units := FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
27126: LD_ADDR_VAR 0 7
27130: PUSH
27131: LD_INT 22
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 21
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: LD_INT 24
27156: PUSH
27157: LD_INT 700
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 5 ] , [ f_class , 4 ] , [ f_lives , 700 ] ] ] ) ;
27181: LD_ADDR_VAR 0 4
27185: PUSH
27186: LD_INT 22
27188: PUSH
27189: LD_INT 5
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 25
27198: PUSH
27199: LD_INT 4
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 24
27208: PUSH
27209: LD_INT 700
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: PPUSH
27224: CALL_OW 69
27228: ST_TO_ADDR
// if units = 0 and sci > 0 then
27229: LD_VAR 0 7
27233: PUSH
27234: LD_INT 0
27236: EQUAL
27237: PUSH
27238: LD_VAR 0 4
27242: PUSH
27243: LD_INT 0
27245: GREATER
27246: AND
27247: IFFALSE 27319
// for x = 1 to sci do
27249: LD_ADDR_VAR 0 2
27253: PUSH
27254: DOUBLE
27255: LD_INT 1
27257: DEC
27258: ST_TO_ADDR
27259: LD_VAR 0 4
27263: PUSH
27264: FOR_TO
27265: IFFALSE 27317
// if GetDistUnitXY ( sci [ x ] , 221 , 159 ) > 6 then
27267: LD_VAR 0 4
27271: PUSH
27272: LD_VAR 0 2
27276: ARRAY
27277: PPUSH
27278: LD_INT 221
27280: PPUSH
27281: LD_INT 159
27283: PPUSH
27284: CALL_OW 297
27288: PUSH
27289: LD_INT 6
27291: GREATER
27292: IFFALSE 27315
// ComMoveXY ( sci [ x ] , 221 , 159 ) ;
27294: LD_VAR 0 4
27298: PUSH
27299: LD_VAR 0 2
27303: ARRAY
27304: PPUSH
27305: LD_INT 221
27307: PPUSH
27308: LD_INT 159
27310: PPUSH
27311: CALL_OW 111
27315: GO 27264
27317: POP
27318: POP
// if units > 0 and sci > 0 then
27319: LD_VAR 0 7
27323: PUSH
27324: LD_INT 0
27326: GREATER
27327: PUSH
27328: LD_VAR 0 4
27332: PUSH
27333: LD_INT 0
27335: GREATER
27336: AND
27337: IFFALSE 27484
// begin for i = 1 to units do
27339: LD_ADDR_VAR 0 1
27343: PUSH
27344: DOUBLE
27345: LD_INT 1
27347: DEC
27348: ST_TO_ADDR
27349: LD_VAR 0 7
27353: PUSH
27354: FOR_TO
27355: IFFALSE 27482
// begin if GetDistUnits ( units [ i ] , sci [ 1 ] ) > 4 then
27357: LD_VAR 0 7
27361: PUSH
27362: LD_VAR 0 1
27366: ARRAY
27367: PPUSH
27368: LD_VAR 0 4
27372: PUSH
27373: LD_INT 1
27375: ARRAY
27376: PPUSH
27377: CALL_OW 296
27381: PUSH
27382: LD_INT 4
27384: GREATER
27385: IFFALSE 27432
// ComMoveXY ( units [ i ] , GetX ( sci [ 1 ] ) , GetY ( sci [ 1 ] ) ) else
27387: LD_VAR 0 7
27391: PUSH
27392: LD_VAR 0 1
27396: ARRAY
27397: PPUSH
27398: LD_VAR 0 4
27402: PUSH
27403: LD_INT 1
27405: ARRAY
27406: PPUSH
27407: CALL_OW 250
27411: PPUSH
27412: LD_VAR 0 4
27416: PUSH
27417: LD_INT 1
27419: ARRAY
27420: PPUSH
27421: CALL_OW 251
27425: PPUSH
27426: CALL_OW 111
27430: GO 27480
// for x = 1 to sci do
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: DOUBLE
27438: LD_INT 1
27440: DEC
27441: ST_TO_ADDR
27442: LD_VAR 0 4
27446: PUSH
27447: FOR_TO
27448: IFFALSE 27478
// ComHeal ( sci [ x ] , units [ i ] ) ;
27450: LD_VAR 0 4
27454: PUSH
27455: LD_VAR 0 2
27459: ARRAY
27460: PPUSH
27461: LD_VAR 0 7
27465: PUSH
27466: LD_VAR 0 1
27470: ARRAY
27471: PPUSH
27472: CALL_OW 128
27476: GO 27447
27478: POP
27479: POP
// end ;
27480: GO 27354
27482: POP
27483: POP
// end ; end ;
27484: PPOPN 9
27486: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) > 0 do var filter , cont , i ;
27487: LD_INT 22
27489: PUSH
27490: LD_INT 5
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PPUSH
27497: CALL_OW 69
27501: PUSH
27502: LD_INT 0
27504: GREATER
27505: IFFALSE 27774
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
27514: PPUSH
// begin enable ;
27515: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 5 ] , [ f_control , control_remote ] ] ) ;
27516: LD_ADDR_VAR 0 1
27520: PUSH
27521: LD_INT 22
27523: PUSH
27524: LD_INT 5
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 33
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: ST_TO_ADDR
// cont := FilterAllUnits ( [ [ f_side , 5 ] , [ f_weapon , ar_control_tower ] ] ) ;
27550: LD_ADDR_VAR 0 2
27554: PUSH
27555: LD_INT 22
27557: PUSH
27558: LD_INT 5
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 34
27567: PUSH
27568: LD_INT 31
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 69
27583: ST_TO_ADDR
// if filter > 0 and cont > 0 then
27584: LD_VAR 0 1
27588: PUSH
27589: LD_INT 0
27591: GREATER
27592: PUSH
27593: LD_VAR 0 2
27597: PUSH
27598: LD_INT 0
27600: GREATER
27601: AND
27602: IFFALSE 27774
// begin for i = 1 to filter do
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: DOUBLE
27610: LD_INT 1
27612: DEC
27613: ST_TO_ADDR
27614: LD_VAR 0 1
27618: PUSH
27619: FOR_TO
27620: IFFALSE 27772
// begin if not IsControledBy ( filter [ i ] ) and IsOk ( filter [ i ] ) then
27622: LD_VAR 0 1
27626: PUSH
27627: LD_VAR 0 3
27631: ARRAY
27632: PPUSH
27633: CALL_OW 312
27637: NOT
27638: PUSH
27639: LD_VAR 0 1
27643: PUSH
27644: LD_VAR 0 3
27648: ARRAY
27649: PPUSH
27650: CALL_OW 302
27654: AND
27655: IFFALSE 27717
// if i <= 2 then
27657: LD_VAR 0 3
27661: PUSH
27662: LD_INT 2
27664: LESSEQUAL
27665: IFFALSE 27693
// ComLinkTo ( filter [ i ] , cont [ 1 ] ) else
27667: LD_VAR 0 1
27671: PUSH
27672: LD_VAR 0 3
27676: ARRAY
27677: PPUSH
27678: LD_VAR 0 2
27682: PUSH
27683: LD_INT 1
27685: ARRAY
27686: PPUSH
27687: CALL_OW 135
27691: GO 27717
// ComLinkTo ( filter [ i ] , cont [ 2 ] ) ;
27693: LD_VAR 0 1
27697: PUSH
27698: LD_VAR 0 3
27702: ARRAY
27703: PPUSH
27704: LD_VAR 0 2
27708: PUSH
27709: LD_INT 2
27711: ARRAY
27712: PPUSH
27713: CALL_OW 135
// if GetLives ( filter [ i ] ) < 250 and IsControledBy ( filter [ i ] ) then
27717: LD_VAR 0 1
27721: PUSH
27722: LD_VAR 0 3
27726: ARRAY
27727: PPUSH
27728: CALL_OW 256
27732: PUSH
27733: LD_INT 250
27735: LESS
27736: PUSH
27737: LD_VAR 0 1
27741: PUSH
27742: LD_VAR 0 3
27746: ARRAY
27747: PPUSH
27748: CALL_OW 312
27752: AND
27753: IFFALSE 27770
// ComUnLink ( filter [ i ] ) ;
27755: LD_VAR 0 1
27759: PUSH
27760: LD_VAR 0 3
27764: ARRAY
27765: PPUSH
27766: CALL_OW 136
// end ;
27770: GO 27619
27772: POP
27773: POP
// end ; end ;
27774: PPOPN 3
27776: END
// every 0 0$01 trigger omar_return do var i , c ;
27777: LD_EXP 3
27781: IFFALSE 27892
27783: GO 27785
27785: DISABLE
27786: LD_INT 0
27788: PPUSH
27789: PPUSH
// begin enable ;
27790: ENABLE
// if filterallunits ( [ f_side , 5 ] ) > 0 then
27791: LD_INT 22
27793: PUSH
27794: LD_INT 5
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: PUSH
27806: LD_INT 0
27808: GREATER
27809: IFFALSE 27853
// for c in filterallunits ( [ f_side , 5 ] ) do
27811: LD_ADDR_VAR 0 2
27815: PUSH
27816: LD_INT 22
27818: PUSH
27819: LD_INT 5
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: PUSH
27831: FOR_IN
27832: IFFALSE 27851
// ComMoveXY ( c , 205 , 168 ) ;
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_INT 205
27841: PPUSH
27842: LD_INT 168
27844: PPUSH
27845: CALL_OW 111
27849: GO 27831
27851: POP
27852: POP
// for i in FilterUnitsInArea ( escape_area , [ f_side , 5 ] ) do
27853: LD_ADDR_VAR 0 1
27857: PUSH
27858: LD_INT 11
27860: PPUSH
27861: LD_INT 22
27863: PUSH
27864: LD_INT 5
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 70
27875: PUSH
27876: FOR_IN
27877: IFFALSE 27890
// RemoveUnit ( i ) ;
27879: LD_VAR 0 1
27883: PPUSH
27884: CALL_OW 64
27888: GO 27876
27890: POP
27891: POP
// end ; end_of_file
27892: PPOPN 2
27894: END
// export Heike ; export function PrepareHeike ; var un ; begin
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
// uc_side := 8 ;
27899: LD_ADDR_OWVAR 20
27903: PUSH
27904: LD_INT 8
27906: ST_TO_ADDR
// uc_nation := 2 ;
27907: LD_ADDR_OWVAR 21
27911: PUSH
27912: LD_INT 2
27914: ST_TO_ADDR
// hc_gallery := sandar ;
27915: LD_ADDR_OWVAR 33
27919: PUSH
27920: LD_STRING sandar
27922: ST_TO_ADDR
// hc_face_number := 2 ;
27923: LD_ADDR_OWVAR 34
27927: PUSH
27928: LD_INT 2
27930: ST_TO_ADDR
// hc_class := 1 ;
27931: LD_ADDR_OWVAR 28
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// hc_skills := [ 8 , 3 , 6 , 2 ] ;
27939: LD_ADDR_OWVAR 31
27943: PUSH
27944: LD_INT 8
27946: PUSH
27947: LD_INT 3
27949: PUSH
27950: LD_INT 6
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
27962: LD_ADDR_OWVAR 29
27966: PUSH
27967: LD_INT 12
27969: PUSH
27970: LD_INT 11
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// hc_sex := sex_female ;
27977: LD_ADDR_OWVAR 27
27981: PUSH
27982: LD_INT 2
27984: ST_TO_ADDR
// hc_name := Heike Steyer ;
27985: LD_ADDR_OWVAR 26
27989: PUSH
27990: LD_STRING Heike Steyer
27992: ST_TO_ADDR
// Heike := CreateHuman ;
27993: LD_ADDR_EXP 80
27997: PUSH
27998: CALL_OW 44
28002: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28003: LD_ADDR_OWVAR 37
28007: PUSH
28008: LD_INT 14
28010: ST_TO_ADDR
// vc_engine := engine_combustion ;
28011: LD_ADDR_OWVAR 39
28015: PUSH
28016: LD_INT 1
28018: ST_TO_ADDR
// vc_control := control_manual ;
28019: LD_ADDR_OWVAR 38
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
// vc_weapon := ar_gun ;
28027: LD_ADDR_OWVAR 40
28031: PUSH
28032: LD_INT 27
28034: ST_TO_ADDR
// un := CreateVehicle ;
28035: LD_ADDR_VAR 0 2
28039: PUSH
28040: CALL_OW 45
28044: ST_TO_ADDR
// SetDir ( un , 4 ) ;
28045: LD_VAR 0 2
28049: PPUSH
28050: LD_INT 4
28052: PPUSH
28053: CALL_OW 233
// PlaceUnitXY ( un , 166 , 38 , false ) ;
28057: LD_VAR 0 2
28061: PPUSH
28062: LD_INT 166
28064: PPUSH
28065: LD_INT 38
28067: PPUSH
28068: LD_INT 0
28070: PPUSH
28071: CALL_OW 48
// PlaceHumanInUnit ( heike , un ) ;
28075: LD_EXP 80
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 52
// SetMark ( un , true ) ;
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL_OW 242
// end ;
28101: LD_VAR 0 1
28105: RET
// export Ar8_Force ; export function PrepareEastArForces ; var area , list , i , p ; begin
28106: LD_INT 0
28108: PPUSH
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
// uc_side := 8 ;
28113: LD_ADDR_OWVAR 20
28117: PUSH
28118: LD_INT 8
28120: ST_TO_ADDR
// uc_nation := 2 ;
28121: LD_ADDR_OWVAR 21
28125: PUSH
28126: LD_INT 2
28128: ST_TO_ADDR
// Ar8_Force := [ ] ;
28129: LD_ADDR_EXP 81
28133: PUSH
28134: EMPTY
28135: ST_TO_ADDR
// PrepareHeike ;
28136: CALL 27895 0 0
// list := AreaToList ( ar_east_spawn , 0 ) ;
28140: LD_ADDR_VAR 0 3
28144: PUSH
28145: LD_INT 8
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL_OW 517
28155: ST_TO_ADDR
// p := 1 ;
28156: LD_ADDR_VAR 0 5
28160: PUSH
28161: LD_INT 1
28163: ST_TO_ADDR
// for i = 1 to 2 do
28164: LD_ADDR_VAR 0 4
28168: PUSH
28169: DOUBLE
28170: LD_INT 1
28172: DEC
28173: ST_TO_ADDR
28174: LD_INT 2
28176: PUSH
28177: FOR_TO
28178: IFFALSE 28239
// begin CreateRocketXY ( 8 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 4 ) ;
28180: LD_INT 8
28182: PPUSH
28183: LD_INT 2
28185: PPUSH
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 1
28193: ARRAY
28194: PUSH
28195: LD_VAR 0 5
28199: ARRAY
28200: PPUSH
28201: LD_VAR 0 3
28205: PUSH
28206: LD_INT 2
28208: ARRAY
28209: PUSH
28210: LD_VAR 0 5
28214: ARRAY
28215: PPUSH
28216: LD_INT 4
28218: PPUSH
28219: CALL 24098 0 5
// p = p + 1 ;
28223: LD_ADDR_VAR 0 5
28227: PUSH
28228: LD_VAR 0 5
28232: PUSH
28233: LD_INT 1
28235: PLUS
28236: ST_TO_ADDR
// end ;
28237: GO 28177
28239: POP
28240: POP
// for i = 1 to 2 do
28241: LD_ADDR_VAR 0 4
28245: PUSH
28246: DOUBLE
28247: LD_INT 1
28249: DEC
28250: ST_TO_ADDR
28251: LD_INT 2
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28316
// begin CreateGunXY ( 8 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 4 ) ;
28257: LD_INT 8
28259: PPUSH
28260: LD_INT 1
28262: PPUSH
28263: LD_VAR 0 3
28267: PUSH
28268: LD_INT 1
28270: ARRAY
28271: PUSH
28272: LD_VAR 0 5
28276: ARRAY
28277: PPUSH
28278: LD_VAR 0 3
28282: PUSH
28283: LD_INT 2
28285: ARRAY
28286: PUSH
28287: LD_VAR 0 5
28291: ARRAY
28292: PPUSH
28293: LD_INT 4
28295: PPUSH
28296: CALL 24243 0 5
// p = p + 1 ;
28300: LD_ADDR_VAR 0 5
28304: PUSH
28305: LD_VAR 0 5
28309: PUSH
28310: LD_INT 1
28312: PLUS
28313: ST_TO_ADDR
// end ;
28314: GO 28254
28316: POP
28317: POP
// CreateRemTowerXY ( 8 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 4 ) ;
28318: LD_INT 8
28320: PPUSH
28321: LD_VAR 0 3
28325: PUSH
28326: LD_INT 1
28328: ARRAY
28329: PUSH
28330: LD_VAR 0 5
28334: ARRAY
28335: PPUSH
28336: LD_VAR 0 3
28340: PUSH
28341: LD_INT 2
28343: ARRAY
28344: PUSH
28345: LD_VAR 0 5
28349: ARRAY
28350: PPUSH
28351: LD_INT 4
28353: PPUSH
28354: CALL 24678 0 4
// p = p + 1 ;
28358: LD_ADDR_VAR 0 5
28362: PUSH
28363: LD_VAR 0 5
28367: PUSH
28368: LD_INT 1
28370: PLUS
28371: ST_TO_ADDR
// CreateRadarXY ( 8 , 2 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 4 ) ;
28372: LD_INT 8
28374: PPUSH
28375: LD_INT 2
28377: PPUSH
28378: LD_VAR 0 3
28382: PUSH
28383: LD_INT 1
28385: ARRAY
28386: PUSH
28387: LD_VAR 0 5
28391: ARRAY
28392: PPUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_INT 2
28400: ARRAY
28401: PUSH
28402: LD_VAR 0 5
28406: ARRAY
28407: PPUSH
28408: LD_INT 4
28410: PPUSH
28411: CALL 24533 0 5
// p := p + 1 ;
28415: LD_ADDR_VAR 0 5
28419: PUSH
28420: LD_VAR 0 5
28424: PUSH
28425: LD_INT 1
28427: PLUS
28428: ST_TO_ADDR
// CreateFlameXY ( 8 , 1 , list [ 1 ] [ p ] , list [ 2 ] [ p ] , 4 ) ;
28429: LD_INT 8
28431: PPUSH
28432: LD_INT 1
28434: PPUSH
28435: LD_VAR 0 3
28439: PUSH
28440: LD_INT 1
28442: ARRAY
28443: PUSH
28444: LD_VAR 0 5
28448: ARRAY
28449: PPUSH
28450: LD_VAR 0 3
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: PUSH
28459: LD_VAR 0 5
28463: ARRAY
28464: PPUSH
28465: LD_INT 4
28467: PPUSH
28468: CALL 24388 0 5
// p := p + 1 ;
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_VAR 0 5
28481: PUSH
28482: LD_INT 1
28484: PLUS
28485: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mortar , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
28486: LD_INT 8
28488: PPUSH
28489: LD_INT 7
28491: PUSH
28492: LD_INT 6
28494: PUSH
28495: LD_INT 5
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PUSH
28503: LD_OWVAR 67
28507: ARRAY
28508: PPUSH
28509: CALL 25 0 2
28513: PPUSH
28514: LD_VAR 0 3
28518: PUSH
28519: LD_INT 1
28521: ARRAY
28522: PUSH
28523: LD_VAR 0 5
28527: ARRAY
28528: PPUSH
28529: LD_VAR 0 3
28533: PUSH
28534: LD_INT 2
28536: ARRAY
28537: PUSH
28538: LD_VAR 0 5
28542: ARRAY
28543: PPUSH
28544: LD_INT 0
28546: PPUSH
28547: CALL_OW 48
// p := p + 1 ;
28551: LD_ADDR_VAR 0 5
28555: PUSH
28556: LD_VAR 0 5
28560: PUSH
28561: LD_INT 1
28563: PLUS
28564: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_scientistic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
28565: LD_INT 4
28567: PPUSH
28568: LD_INT 7
28570: PUSH
28571: LD_INT 6
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: PUSH
28582: LD_OWVAR 67
28586: ARRAY
28587: PPUSH
28588: CALL 25 0 2
28592: PPUSH
28593: LD_VAR 0 3
28597: PUSH
28598: LD_INT 1
28600: ARRAY
28601: PUSH
28602: LD_VAR 0 5
28606: ARRAY
28607: PPUSH
28608: LD_VAR 0 3
28612: PUSH
28613: LD_INT 2
28615: ARRAY
28616: PUSH
28617: LD_VAR 0 5
28621: ARRAY
28622: PPUSH
28623: LD_INT 0
28625: PPUSH
28626: CALL_OW 48
// p := p + 1 ;
28630: LD_ADDR_VAR 0 5
28634: PUSH
28635: LD_VAR 0 5
28639: PUSH
28640: LD_INT 1
28642: PLUS
28643: ST_TO_ADDR
// PlaceUnitXY ( CreateHumanWithClass ( class_mechanic , [ 7 , 6 , 5 ] [ Difficulty ] ) , list [ 1 ] [ p ] , list [ 2 ] [ p ] , false ) ;
28644: LD_INT 3
28646: PPUSH
28647: LD_INT 7
28649: PUSH
28650: LD_INT 6
28652: PUSH
28653: LD_INT 5
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: PUSH
28661: LD_OWVAR 67
28665: ARRAY
28666: PPUSH
28667: CALL 25 0 2
28671: PPUSH
28672: LD_VAR 0 3
28676: PUSH
28677: LD_INT 1
28679: ARRAY
28680: PUSH
28681: LD_VAR 0 5
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 3
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PUSH
28696: LD_VAR 0 5
28700: ARRAY
28701: PPUSH
28702: LD_INT 0
28704: PPUSH
28705: CALL_OW 48
// p := p + 1 ;
28709: LD_ADDR_VAR 0 5
28713: PUSH
28714: LD_VAR 0 5
28718: PUSH
28719: LD_INT 1
28721: PLUS
28722: ST_TO_ADDR
// end ;
28723: LD_VAR 0 1
28727: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 and heike_return = false do var i , x , enemy , sci , radar , un , units , vehs , free_mechanic ;
28728: LD_INT 22
28730: PUSH
28731: LD_INT 8
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 69
28742: PUSH
28743: LD_INT 0
28745: GREATER
28746: PUSH
28747: LD_EXP 6
28751: PUSH
28752: LD_INT 0
28754: EQUAL
28755: AND
28756: IFFALSE 29975
28758: GO 28760
28760: DISABLE
28761: LD_INT 0
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
// begin enable ;
28772: ENABLE
// enemy := FilterAllUnits ( [ f_enemy , 8 ] ) diff FilterAllUnits ( [ f_side , 7 ] ) ;
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 81
28780: PUSH
28781: LD_INT 8
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PPUSH
28788: CALL_OW 69
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_INT 7
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PPUSH
28803: CALL_OW 69
28807: DIFF
28808: ST_TO_ADDR
// if ar8_force > 0 and enemy > 0 then
28809: LD_EXP 81
28813: PUSH
28814: LD_INT 0
28816: GREATER
28817: PUSH
28818: LD_VAR 0 3
28822: PUSH
28823: LD_INT 0
28825: GREATER
28826: AND
28827: IFFALSE 29137
// for i = 1 to ar8_force do
28829: LD_ADDR_VAR 0 1
28833: PUSH
28834: DOUBLE
28835: LD_INT 1
28837: DEC
28838: ST_TO_ADDR
28839: LD_EXP 81
28843: PUSH
28844: FOR_TO
28845: IFFALSE 29135
// begin if not HasTask ( ar8_force [ i ] ) and GetLives ( ar8_force [ i ] ) = 1000 then
28847: LD_EXP 81
28851: PUSH
28852: LD_VAR 0 1
28856: ARRAY
28857: PPUSH
28858: CALL_OW 314
28862: NOT
28863: PUSH
28864: LD_EXP 81
28868: PUSH
28869: LD_VAR 0 1
28873: ARRAY
28874: PPUSH
28875: CALL_OW 256
28879: PUSH
28880: LD_INT 1000
28882: EQUAL
28883: AND
28884: IFFALSE 28922
// ComAttackUnit ( ar8_force [ i ] , NearestUnitToUnit ( enemy , ar8_force [ i ] ) ) ;
28886: LD_EXP 81
28890: PUSH
28891: LD_VAR 0 1
28895: ARRAY
28896: PPUSH
28897: LD_VAR 0 3
28901: PPUSH
28902: LD_EXP 81
28906: PUSH
28907: LD_VAR 0 1
28911: ARRAY
28912: PPUSH
28913: CALL_OW 74
28917: PPUSH
28918: CALL_OW 115
// if UnitFilter ( ar8_force , [ f_weapon , ar_radar ] ) > 0 then
28922: LD_EXP 81
28926: PPUSH
28927: LD_INT 34
28929: PUSH
28930: LD_INT 30
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PPUSH
28937: CALL_OW 72
28941: PUSH
28942: LD_INT 0
28944: GREATER
28945: IFFALSE 29133
// begin radar := UnitFilter ( ar8_force , [ f_weapon , ar_radar ] ) [ 1 ] ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_EXP 81
28956: PPUSH
28957: LD_INT 34
28959: PUSH
28960: LD_INT 30
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PPUSH
28967: CALL_OW 72
28971: PUSH
28972: LD_INT 1
28974: ARRAY
28975: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_rocket_launcher ] ] ) > 0 then
28976: LD_INT 22
28978: PUSH
28979: LD_INT 8
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 34
28988: PUSH
28989: LD_INT 28
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: PUSH
29005: LD_INT 0
29007: GREATER
29008: IFFALSE 29133
// if GetDistUnits ( radar , NearestUnitToUnit ( UnitFilter ( ar8_force , [ f_weapon , ar_rocket_launcher ] ) , radar ) ) <= 3 then
29010: LD_VAR 0 5
29014: PPUSH
29015: LD_EXP 81
29019: PPUSH
29020: LD_INT 34
29022: PUSH
29023: LD_INT 28
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 72
29034: PPUSH
29035: LD_VAR 0 5
29039: PPUSH
29040: CALL_OW 74
29044: PPUSH
29045: CALL_OW 296
29049: PUSH
29050: LD_INT 3
29052: LESSEQUAL
29053: IFFALSE 29066
// ComHold ( radar ) else
29055: LD_VAR 0 5
29059: PPUSH
29060: CALL_OW 140
29064: GO 29133
// ComMoveXY ( radar , GetX ( UnitFilter ( ar8_force , [ f_weapon , ar_rocket_launcher ] ) [ 1 ] ) , GetY ( UnitFilter ( ar8_force , [ f_weapon , ar_rocket_launcher ] ) [ 1 ] ) ) ;
29066: LD_VAR 0 5
29070: PPUSH
29071: LD_EXP 81
29075: PPUSH
29076: LD_INT 34
29078: PUSH
29079: LD_INT 28
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 72
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 250
29099: PPUSH
29100: LD_EXP 81
29104: PPUSH
29105: LD_INT 34
29107: PUSH
29108: LD_INT 28
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PPUSH
29115: CALL_OW 72
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: CALL_OW 251
29128: PPUSH
29129: CALL_OW 111
// end ; end ;
29133: GO 28844
29135: POP
29136: POP
// for un in FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_class , class_mortar ] , [ f_lives , 1000 ] ] ] ) ^ FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ] ) diff Heike do
29137: LD_ADDR_VAR 0 6
29141: PUSH
29142: LD_INT 22
29144: PUSH
29145: LD_INT 8
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 25
29154: PUSH
29155: LD_INT 8
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 24
29164: PUSH
29165: LD_INT 1000
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: PUSH
29185: LD_INT 22
29187: PUSH
29188: LD_INT 8
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 21
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 24
29207: PUSH
29208: LD_INT 1000
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: PPUSH
29223: CALL_OW 69
29227: ADD
29228: PUSH
29229: LD_EXP 80
29233: DIFF
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29304
// begin if not un in ar8_force then
29238: LD_VAR 0 6
29242: PUSH
29243: LD_EXP 81
29247: IN
29248: NOT
29249: IFFALSE 29267
// ar8_force := ar8_force ^ un ;
29251: LD_ADDR_EXP 81
29255: PUSH
29256: LD_EXP 81
29260: PUSH
29261: LD_VAR 0 6
29265: ADD
29266: ST_TO_ADDR
// if GetLives ( un ) <= 700 then
29267: LD_VAR 0 6
29271: PPUSH
29272: CALL_OW 256
29276: PUSH
29277: LD_INT 700
29279: LESSEQUAL
29280: IFFALSE 29302
// ar8_force := Delete ( ar8_force , un ) ;
29282: LD_ADDR_EXP 81
29286: PUSH
29287: LD_EXP 81
29291: PPUSH
29292: LD_VAR 0 6
29296: PPUSH
29297: CALL_OW 3
29301: ST_TO_ADDR
// end ;
29302: GO 29235
29304: POP
29305: POP
// vehs := FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
29306: LD_ADDR_VAR 0 8
29310: PUSH
29311: LD_INT 22
29313: PUSH
29314: LD_INT 8
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 21
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 24
29336: PUSH
29337: LD_INT 700
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: PPUSH
29356: CALL_OW 69
29360: ST_TO_ADDR
// free_mechanic := FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_class , 3 ] , [ f_outside ] ] ] ) ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_INT 8
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 25
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 56
29388: PUSH
29389: EMPTY
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: PPUSH
29400: CALL_OW 69
29404: ST_TO_ADDR
// if vehs > 0 then
29405: LD_VAR 0 8
29409: PUSH
29410: LD_INT 0
29412: GREATER
29413: IFFALSE 29537
// begin for i = 1 to vehs do
29415: LD_ADDR_VAR 0 1
29419: PUSH
29420: DOUBLE
29421: LD_INT 1
29423: DEC
29424: ST_TO_ADDR
29425: LD_VAR 0 8
29429: PUSH
29430: FOR_TO
29431: IFFALSE 29533
// begin if GetDistUnitXY ( vehs [ i ] , 179 , 71 ) > 8 then
29433: LD_VAR 0 8
29437: PUSH
29438: LD_VAR 0 1
29442: ARRAY
29443: PPUSH
29444: LD_INT 179
29446: PPUSH
29447: LD_INT 71
29449: PPUSH
29450: CALL_OW 297
29454: PUSH
29455: LD_INT 8
29457: GREATER
29458: IFFALSE 29483
// ComMoveXY ( vehs [ i ] , 179 , 71 ) else
29460: LD_VAR 0 8
29464: PUSH
29465: LD_VAR 0 1
29469: ARRAY
29470: PPUSH
29471: LD_INT 179
29473: PPUSH
29474: LD_INT 71
29476: PPUSH
29477: CALL_OW 111
29481: GO 29531
// for x = 1 to free_mechanic do
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: DOUBLE
29489: LD_INT 1
29491: DEC
29492: ST_TO_ADDR
29493: LD_VAR 0 9
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29529
// ComRepairVehicle ( free_mechanic [ x ] , vehs [ i ] ) ;
29501: LD_VAR 0 9
29505: PUSH
29506: LD_VAR 0 2
29510: ARRAY
29511: PPUSH
29512: LD_VAR 0 8
29516: PUSH
29517: LD_VAR 0 1
29521: ARRAY
29522: PPUSH
29523: CALL_OW 129
29527: GO 29498
29529: POP
29530: POP
// end ;
29531: GO 29430
29533: POP
29534: POP
// end else
29535: GO 29617
// begin if free_mechanic > 0 then
29537: LD_VAR 0 9
29541: PUSH
29542: LD_INT 0
29544: GREATER
29545: IFFALSE 29617
// for x = 1 to free_mechanic do
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: DOUBLE
29553: LD_INT 1
29555: DEC
29556: ST_TO_ADDR
29557: LD_VAR 0 9
29561: PUSH
29562: FOR_TO
29563: IFFALSE 29615
// if GetDistUnitXY ( free_mechanic [ x ] , 179 , 71 ) > 8 then
29565: LD_VAR 0 9
29569: PUSH
29570: LD_VAR 0 2
29574: ARRAY
29575: PPUSH
29576: LD_INT 179
29578: PPUSH
29579: LD_INT 71
29581: PPUSH
29582: CALL_OW 297
29586: PUSH
29587: LD_INT 8
29589: GREATER
29590: IFFALSE 29613
// ComMoveXY ( free_mechanic [ x ] , 179 , 71 ) ;
29592: LD_VAR 0 9
29596: PUSH
29597: LD_VAR 0 2
29601: ARRAY
29602: PPUSH
29603: LD_INT 179
29605: PPUSH
29606: LD_INT 71
29608: PPUSH
29609: CALL_OW 111
29613: GO 29562
29615: POP
29616: POP
// end ; units := FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
29617: LD_ADDR_VAR 0 7
29621: PUSH
29622: LD_INT 22
29624: PUSH
29625: LD_INT 8
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 21
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: PUSH
29645: LD_INT 24
29647: PUSH
29648: LD_INT 700
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ [ f_side , 8 ] , [ f_class , 4 ] , [ f_lives , 700 ] ] ] ) ;
29672: LD_ADDR_VAR 0 4
29676: PUSH
29677: LD_INT 22
29679: PUSH
29680: LD_INT 8
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 25
29689: PUSH
29690: LD_INT 4
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 24
29699: PUSH
29700: LD_INT 700
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: PPUSH
29715: CALL_OW 69
29719: ST_TO_ADDR
// if units = 0 and sci > 0 then
29720: LD_VAR 0 7
29724: PUSH
29725: LD_INT 0
29727: EQUAL
29728: PUSH
29729: LD_VAR 0 4
29733: PUSH
29734: LD_INT 0
29736: GREATER
29737: AND
29738: IFFALSE 29810
// for x = 1 to sci do
29740: LD_ADDR_VAR 0 2
29744: PUSH
29745: DOUBLE
29746: LD_INT 1
29748: DEC
29749: ST_TO_ADDR
29750: LD_VAR 0 4
29754: PUSH
29755: FOR_TO
29756: IFFALSE 29808
// if GetDistUnitXY ( sci [ x ] , 179 , 71 ) > 6 then
29758: LD_VAR 0 4
29762: PUSH
29763: LD_VAR 0 2
29767: ARRAY
29768: PPUSH
29769: LD_INT 179
29771: PPUSH
29772: LD_INT 71
29774: PPUSH
29775: CALL_OW 297
29779: PUSH
29780: LD_INT 6
29782: GREATER
29783: IFFALSE 29806
// ComMoveXY ( sci [ x ] , 179 , 71 ) ;
29785: LD_VAR 0 4
29789: PUSH
29790: LD_VAR 0 2
29794: ARRAY
29795: PPUSH
29796: LD_INT 179
29798: PPUSH
29799: LD_INT 71
29801: PPUSH
29802: CALL_OW 111
29806: GO 29755
29808: POP
29809: POP
// if units > 0 and sci > 0 then
29810: LD_VAR 0 7
29814: PUSH
29815: LD_INT 0
29817: GREATER
29818: PUSH
29819: LD_VAR 0 4
29823: PUSH
29824: LD_INT 0
29826: GREATER
29827: AND
29828: IFFALSE 29975
// begin for i = 1 to units do
29830: LD_ADDR_VAR 0 1
29834: PUSH
29835: DOUBLE
29836: LD_INT 1
29838: DEC
29839: ST_TO_ADDR
29840: LD_VAR 0 7
29844: PUSH
29845: FOR_TO
29846: IFFALSE 29973
// begin if GetDistUnits ( units [ i ] , sci [ 1 ] ) > 4 then
29848: LD_VAR 0 7
29852: PUSH
29853: LD_VAR 0 1
29857: ARRAY
29858: PPUSH
29859: LD_VAR 0 4
29863: PUSH
29864: LD_INT 1
29866: ARRAY
29867: PPUSH
29868: CALL_OW 296
29872: PUSH
29873: LD_INT 4
29875: GREATER
29876: IFFALSE 29923
// ComMoveXY ( units [ i ] , GetX ( sci [ 1 ] ) , GetY ( sci [ 1 ] ) ) else
29878: LD_VAR 0 7
29882: PUSH
29883: LD_VAR 0 1
29887: ARRAY
29888: PPUSH
29889: LD_VAR 0 4
29893: PUSH
29894: LD_INT 1
29896: ARRAY
29897: PPUSH
29898: CALL_OW 250
29902: PPUSH
29903: LD_VAR 0 4
29907: PUSH
29908: LD_INT 1
29910: ARRAY
29911: PPUSH
29912: CALL_OW 251
29916: PPUSH
29917: CALL_OW 111
29921: GO 29971
// for x = 1 to sci do
29923: LD_ADDR_VAR 0 2
29927: PUSH
29928: DOUBLE
29929: LD_INT 1
29931: DEC
29932: ST_TO_ADDR
29933: LD_VAR 0 4
29937: PUSH
29938: FOR_TO
29939: IFFALSE 29969
// ComHeal ( sci [ x ] , units [ i ] ) ;
29941: LD_VAR 0 4
29945: PUSH
29946: LD_VAR 0 2
29950: ARRAY
29951: PPUSH
29952: LD_VAR 0 7
29956: PUSH
29957: LD_VAR 0 1
29961: ARRAY
29962: PPUSH
29963: CALL_OW 128
29967: GO 29938
29969: POP
29970: POP
// end ;
29971: GO 29845
29973: POP
29974: POP
// end ; end ;
29975: PPOPN 9
29977: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var filter , cont , i ;
29978: LD_INT 22
29980: PUSH
29981: LD_INT 8
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PPUSH
29988: CALL_OW 69
29992: PUSH
29993: LD_INT 0
29995: GREATER
29996: IFFALSE 30229
29998: GO 30000
30000: DISABLE
30001: LD_INT 0
30003: PPUSH
30004: PPUSH
30005: PPUSH
// begin enable ;
30006: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] ] ) ;
30007: LD_ADDR_VAR 0 1
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_INT 8
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 33
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PPUSH
30036: CALL_OW 69
30040: ST_TO_ADDR
// cont := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ;
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_INT 22
30048: PUSH
30049: LD_INT 8
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 34
30058: PUSH
30059: LD_INT 31
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PPUSH
30070: CALL_OW 69
30074: ST_TO_ADDR
// if filter > 0 and cont > 0 then
30075: LD_VAR 0 1
30079: PUSH
30080: LD_INT 0
30082: GREATER
30083: PUSH
30084: LD_VAR 0 2
30088: PUSH
30089: LD_INT 0
30091: GREATER
30092: AND
30093: IFFALSE 30229
// begin for i = 1 to filter do
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: DOUBLE
30101: LD_INT 1
30103: DEC
30104: ST_TO_ADDR
30105: LD_VAR 0 1
30109: PUSH
30110: FOR_TO
30111: IFFALSE 30227
// begin if not IsControledBy ( filter [ i ] ) and IsOk ( filter [ i ] ) then
30113: LD_VAR 0 1
30117: PUSH
30118: LD_VAR 0 3
30122: ARRAY
30123: PPUSH
30124: CALL_OW 312
30128: NOT
30129: PUSH
30130: LD_VAR 0 1
30134: PUSH
30135: LD_VAR 0 3
30139: ARRAY
30140: PPUSH
30141: CALL_OW 302
30145: AND
30146: IFFALSE 30172
// ComLinkTo ( filter [ i ] , cont [ 1 ] ) ;
30148: LD_VAR 0 1
30152: PUSH
30153: LD_VAR 0 3
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 2
30163: PUSH
30164: LD_INT 1
30166: ARRAY
30167: PPUSH
30168: CALL_OW 135
// if GetLives ( filter [ i ] ) < 250 and IsControledBy ( filter [ i ] ) then
30172: LD_VAR 0 1
30176: PUSH
30177: LD_VAR 0 3
30181: ARRAY
30182: PPUSH
30183: CALL_OW 256
30187: PUSH
30188: LD_INT 250
30190: LESS
30191: PUSH
30192: LD_VAR 0 1
30196: PUSH
30197: LD_VAR 0 3
30201: ARRAY
30202: PPUSH
30203: CALL_OW 312
30207: AND
30208: IFFALSE 30225
// ComUnLink ( filter [ i ] ) ;
30210: LD_VAR 0 1
30214: PUSH
30215: LD_VAR 0 3
30219: ARRAY
30220: PPUSH
30221: CALL_OW 136
// end ;
30225: GO 30110
30227: POP
30228: POP
// end ; end ;
30229: PPOPN 3
30231: END
// every 0 0$01 trigger heike_return do var i , c ;
30232: LD_EXP 6
30236: IFFALSE 30347
30238: GO 30240
30240: DISABLE
30241: LD_INT 0
30243: PPUSH
30244: PPUSH
// begin enable ;
30245: ENABLE
// if filterallunits ( [ f_side , 8 ] ) > 0 then
30246: LD_INT 22
30248: PUSH
30249: LD_INT 8
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PPUSH
30256: CALL_OW 69
30260: PUSH
30261: LD_INT 0
30263: GREATER
30264: IFFALSE 30308
// for c in filterallunits ( [ f_side , 8 ] ) do
30266: LD_ADDR_VAR 0 2
30270: PUSH
30271: LD_INT 22
30273: PUSH
30274: LD_INT 8
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 69
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30306
// ComMoveXY ( c , 171 , 47 ) ;
30289: LD_VAR 0 2
30293: PPUSH
30294: LD_INT 171
30296: PPUSH
30297: LD_INT 47
30299: PPUSH
30300: CALL_OW 111
30304: GO 30286
30306: POP
30307: POP
// for i in FilterUnitsInArea ( heike_back , [ f_side , 8 ] ) do
30308: LD_ADDR_VAR 0 1
30312: PUSH
30313: LD_INT 12
30315: PPUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 8
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PPUSH
30326: CALL_OW 70
30330: PUSH
30331: FOR_IN
30332: IFFALSE 30345
// RemoveUnit ( i ) ;
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL_OW 64
30343: GO 30331
30345: POP
30346: POP
// end ; end_of_file
30347: PPOPN 2
30349: END
// export Er , Abdul ; export function Action ; begin
30350: LD_INT 0
30352: PPUSH
// uc_side := 5 ;
30353: LD_ADDR_OWVAR 20
30357: PUSH
30358: LD_INT 5
30360: ST_TO_ADDR
// uc_nation := 2 ;
30361: LD_ADDR_OWVAR 21
30365: PUSH
30366: LD_INT 2
30368: ST_TO_ADDR
// hc_gallery := sandar ;
30369: LD_ADDR_OWVAR 33
30373: PUSH
30374: LD_STRING sandar
30376: ST_TO_ADDR
// hc_face_number := 5 ;
30377: LD_ADDR_OWVAR 34
30381: PUSH
30382: LD_INT 5
30384: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30385: LD_ADDR_OWVAR 31
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: ST_TO_ADDR
// hc_name := Abdul Shariff ;
30408: LD_ADDR_OWVAR 26
30412: PUSH
30413: LD_STRING Abdul Shariff
30415: ST_TO_ADDR
// hc_sex := sex_male ;
30416: LD_ADDR_OWVAR 27
30420: PUSH
30421: LD_INT 1
30423: ST_TO_ADDR
// hc_class := class_desert_warior ;
30424: LD_ADDR_OWVAR 28
30428: PUSH
30429: LD_INT 11
30431: ST_TO_ADDR
// Abdul := CreateHuman ;
30432: LD_ADDR_EXP 83
30436: PUSH
30437: CALL_OW 44
30441: ST_TO_ADDR
// uc_side := 2 ;
30442: LD_ADDR_OWVAR 20
30446: PUSH
30447: LD_INT 2
30449: ST_TO_ADDR
// hc_class := 3 ;
30450: LD_ADDR_OWVAR 28
30454: PUSH
30455: LD_INT 3
30457: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 5 , 3 ] ;
30458: LD_ADDR_OWVAR 31
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 5
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
30481: LD_ADDR_OWVAR 29
30485: PUSH
30486: LD_INT 10
30488: PUSH
30489: LD_INT 11
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: ST_TO_ADDR
// hc_name :=  ;
30496: LD_ADDR_OWVAR 26
30500: PUSH
30501: LD_STRING 
30503: ST_TO_ADDR
// hc_sex := 1 ;
30504: LD_ADDR_OWVAR 27
30508: PUSH
30509: LD_INT 1
30511: ST_TO_ADDR
// hc_gallery :=  ;
30512: LD_ADDR_OWVAR 33
30516: PUSH
30517: LD_STRING 
30519: ST_TO_ADDR
// Er := CreateHuman ;
30520: LD_ADDR_EXP 82
30524: PUSH
30525: CALL_OW 44
30529: ST_TO_ADDR
// PlaceUnitXY ( Er , 96 , 141 , 0 ) ;
30530: LD_EXP 82
30534: PPUSH
30535: LD_INT 96
30537: PPUSH
30538: LD_INT 141
30540: PPUSH
30541: LD_INT 0
30543: PPUSH
30544: CALL_OW 48
// ComHold ( Er ) ;
30548: LD_EXP 82
30552: PPUSH
30553: CALL_OW 140
// SetLives ( Er , 450 ) ;
30557: LD_EXP 82
30561: PPUSH
30562: LD_INT 450
30564: PPUSH
30565: CALL_OW 234
// CenterNowOnXY ( 88 , 144 ) ;
30569: LD_INT 88
30571: PPUSH
30572: LD_INT 144
30574: PPUSH
30575: CALL_OW 86
// InGameOn ;
30579: CALL_OW 8
// Say ( Louis , DL-1 ) ;
30583: LD_EXP 58
30587: PPUSH
30588: LD_STRING DL-1
30590: PPUSH
30591: CALL_OW 88
// ComMoveXY ( Er , 89 , 150 ) ;
30595: LD_EXP 82
30599: PPUSH
30600: LD_INT 89
30602: PPUSH
30603: LD_INT 150
30605: PPUSH
30606: CALL_OW 111
// Wait ( 0 0$03 ) ;
30610: LD_INT 105
30612: PPUSH
30613: CALL_OW 67
// ComTurnXY ( er , 85 , 167 ) ;
30617: LD_EXP 82
30621: PPUSH
30622: LD_INT 85
30624: PPUSH
30625: LD_INT 167
30627: PPUSH
30628: CALL_OW 118
// Say ( UnitFilter ( AllPeo , [ f_sex , sex_female ] ) [ 1 ] , DPf-1 ) ;
30632: LD_EXP 77
30636: PPUSH
30637: LD_INT 26
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 72
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PPUSH
30656: LD_STRING DPf-1
30658: PPUSH
30659: CALL_OW 88
// Say ( Er , DE-1 ) ;
30663: LD_EXP 82
30667: PPUSH
30668: LD_STRING DE-1
30670: PPUSH
30671: CALL_OW 88
// Say ( Louis , DL-2 ) ;
30675: LD_EXP 58
30679: PPUSH
30680: LD_STRING DL-2
30682: PPUSH
30683: CALL_OW 88
// Say ( Er , DE-2 ) ;
30687: LD_EXP 82
30691: PPUSH
30692: LD_STRING DE-2
30694: PPUSH
30695: CALL_OW 88
// Say ( Louis , DL-3 ) ;
30699: LD_EXP 58
30703: PPUSH
30704: LD_STRING DL-3
30706: PPUSH
30707: CALL_OW 88
// Say ( Er , DE-3 ) ;
30711: LD_EXP 82
30715: PPUSH
30716: LD_STRING DE-3
30718: PPUSH
30719: CALL_OW 88
// if Martin then
30723: LD_EXP 59
30727: IFFALSE 30743
// Say ( Martin , DM-1 ) else
30729: LD_EXP 59
30733: PPUSH
30734: LD_STRING DM-1
30736: PPUSH
30737: CALL_OW 88
30741: GO 30774
// Say ( UnitFilter ( AllPeo , [ f_class , 4 ] ) [ 1 ] , DP-2 ) ;
30743: LD_EXP 77
30747: PPUSH
30748: LD_INT 25
30750: PUSH
30751: LD_INT 4
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PPUSH
30758: CALL_OW 72
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: PPUSH
30767: LD_STRING DP-2
30769: PPUSH
30770: CALL_OW 88
// Say ( Louis , DL-4 ) ;
30774: LD_EXP 58
30778: PPUSH
30779: LD_STRING DL-4
30781: PPUSH
30782: CALL_OW 88
// ComMoveXY ( er , 88 , 150 ) ;
30786: LD_EXP 82
30790: PPUSH
30791: LD_INT 88
30793: PPUSH
30794: LD_INT 150
30796: PPUSH
30797: CALL_OW 111
// AddComHold ( er ) ;
30801: LD_EXP 82
30805: PPUSH
30806: CALL_OW 200
// if IsInUnit ( UnitFilter ( AllPeo , [ f_class , 4 ] ) [ 1 ] ) then
30810: LD_EXP 77
30814: PPUSH
30815: LD_INT 25
30817: PUSH
30818: LD_INT 4
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 72
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PPUSH
30834: CALL_OW 310
30838: IFFALSE 30868
// ComExitVehicle ( UnitFilter ( AllPeo , [ f_class , 4 ] ) [ 1 ] ) ;
30840: LD_EXP 77
30844: PPUSH
30845: LD_INT 25
30847: PUSH
30848: LD_INT 4
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PPUSH
30855: CALL_OW 72
30859: PUSH
30860: LD_INT 1
30862: ARRAY
30863: PPUSH
30864: CALL_OW 121
// Wait ( 0 0$02 ) ;
30868: LD_INT 70
30870: PPUSH
30871: CALL_OW 67
// ComHeal ( UnitFilter ( AllPeo , [ f_class , 4 ] ) [ 1 ] , er ) ;
30875: LD_EXP 77
30879: PPUSH
30880: LD_INT 25
30882: PUSH
30883: LD_INT 4
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL_OW 72
30894: PUSH
30895: LD_INT 1
30897: ARRAY
30898: PPUSH
30899: LD_EXP 82
30903: PPUSH
30904: CALL_OW 128
// Say ( Louis , DL-5 ) ;
30908: LD_EXP 58
30912: PPUSH
30913: LD_STRING DL-5
30915: PPUSH
30916: CALL_OW 88
// SayRadio ( Abdul , DS-1 ) ;
30920: LD_EXP 83
30924: PPUSH
30925: LD_STRING DS-1
30927: PPUSH
30928: CALL_OW 94
// Say ( Louis , DL-6 ) ;
30932: LD_EXP 58
30936: PPUSH
30937: LD_STRING DL-6
30939: PPUSH
30940: CALL_OW 88
// SayRadio ( Abdul , DS-2 ) ;
30944: LD_EXP 83
30948: PPUSH
30949: LD_STRING DS-2
30951: PPUSH
30952: CALL_OW 94
// Say ( Louis , DL-7 ) ;
30956: LD_EXP 58
30960: PPUSH
30961: LD_STRING DL-7
30963: PPUSH
30964: CALL_OW 88
// SayRadio ( Abdul , DS-3 ) ;
30968: LD_EXP 83
30972: PPUSH
30973: LD_STRING DS-3
30975: PPUSH
30976: CALL_OW 94
// Wait ( 0 0$01 ) ;
30980: LD_INT 35
30982: PPUSH
30983: CALL_OW 67
// SayRadio ( Abdul , DS-4 ) ;
30987: LD_EXP 83
30991: PPUSH
30992: LD_STRING DS-4
30994: PPUSH
30995: CALL_OW 94
// Say ( Louis , DL-8 ) ;
30999: LD_EXP 58
31003: PPUSH
31004: LD_STRING DL-8
31006: PPUSH
31007: CALL_OW 88
// SayRadio ( Abdul , DS-5 ) ;
31011: LD_EXP 83
31015: PPUSH
31016: LD_STRING DS-5
31018: PPUSH
31019: CALL_OW 94
// Say ( Louis , DL-9 ) ;
31023: LD_EXP 58
31027: PPUSH
31028: LD_STRING DL-9
31030: PPUSH
31031: CALL_OW 88
// SayRadio ( Abdul , DS-6 ) ;
31035: LD_EXP 83
31039: PPUSH
31040: LD_STRING DS-6
31042: PPUSH
31043: CALL_OW 94
// Say ( Louis , DL-10 ) ;
31047: LD_EXP 58
31051: PPUSH
31052: LD_STRING DL-10
31054: PPUSH
31055: CALL_OW 88
// SayRadio ( Abdul , DS-7 ) ;
31059: LD_EXP 83
31063: PPUSH
31064: LD_STRING DS-7
31066: PPUSH
31067: CALL_OW 94
// InGameOff ;
31071: CALL_OW 9
// ChangeMissionObjectives ( Ob1 ) ;
31075: LD_STRING Ob1
31077: PPUSH
31078: CALL_OW 337
// SaveForQuickRestart ;
31082: CALL_OW 22
// end ;
31086: LD_VAR 0 1
31090: RET
// every 0 0$01 trigger FilterUnitsInArea ( secret_tunnel , [ f_side , 2 ] ) > 0 do
31091: LD_INT 10
31093: PPUSH
31094: LD_INT 22
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PPUSH
31104: CALL_OW 70
31108: PUSH
31109: LD_INT 0
31111: GREATER
31112: IFFALSE 31158
31114: GO 31116
31116: DISABLE
// begin Say ( UnitFilter ( AllPeo , [ f_sex , sex_male ] ) [ 1 ] , DPm-tunnel ) ;
31117: LD_EXP 77
31121: PPUSH
31122: LD_INT 26
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 72
31136: PUSH
31137: LD_INT 1
31139: ARRAY
31140: PPUSH
31141: LD_STRING DPm-tunnel
31143: PPUSH
31144: CALL_OW 88
// CenterNowOnXY ( 58 , 64 ) ;
31148: LD_INT 58
31150: PPUSH
31151: LD_INT 64
31153: PPUSH
31154: CALL_OW 86
// end ;
31158: END
// every 0 0$10 trigger GetSide ( ru_west_dep ) = 2 or IsDead ( ru_west_dep ) do
31159: LD_INT 2
31161: PPUSH
31162: CALL_OW 255
31166: PUSH
31167: LD_INT 2
31169: EQUAL
31170: PUSH
31171: LD_INT 2
31173: PPUSH
31174: CALL_OW 301
31178: OR
31179: IFFALSE 31229
31181: GO 31183
31183: DISABLE
// begin Wait ( Rand ( 1 1$00 , 2 2$00 ) ) ;
31184: LD_INT 2100
31186: PPUSH
31187: LD_INT 4200
31189: PPUSH
31190: CALL_OW 12
31194: PPUSH
31195: CALL_OW 67
// PrepareSouthArForces ;
31199: CALL 25012 0 0
// Wait ( 0 0$01 ) ;
31203: LD_INT 35
31205: PPUSH
31206: CALL_OW 67
// SayRadio ( Omar , DO-1 ) ;
31210: LD_EXP 78
31214: PPUSH
31215: LD_STRING DO-1
31217: PPUSH
31218: CALL_OW 94
// ChangeMissionObjectives ( Ob2 ) ;
31222: LD_STRING Ob2
31224: PPUSH
31225: CALL_OW 337
// end ;
31229: END
// every 4 4$45 trigger GetLives ( Morozov ) = 1000 and jaszyn_activ = false do var i ;
31230: LD_EXP 13
31234: PPUSH
31235: CALL_OW 256
31239: PUSH
31240: LD_INT 1000
31242: EQUAL
31243: PUSH
31244: LD_EXP 10
31248: PUSH
31249: LD_INT 0
31251: EQUAL
31252: AND
31253: IFFALSE 31452
31255: GO 31257
31257: DISABLE
31258: LD_INT 0
31260: PPUSH
// begin enable ;
31261: ENABLE
// Wait ( Rand ( 0 0$00 , 0 0$22 ) ) ;
31262: LD_INT 0
31264: PPUSH
31265: LD_INT 770
31267: PPUSH
31268: CALL_OW 12
31272: PPUSH
31273: CALL_OW 67
// i := Rand ( 0 , 5 ) ;
31277: LD_ADDR_VAR 0 1
31281: PUSH
31282: LD_INT 0
31284: PPUSH
31285: LD_INT 5
31287: PPUSH
31288: CALL_OW 12
31292: ST_TO_ADDR
// case i of 0 :
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 0
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31309
31306: POP
// ; 1 :
31307: GO 31425
31309: LD_INT 1
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31332
31317: POP
// SayRadio ( Morozov , DMor-1 ) ; 2 :
31318: LD_EXP 13
31322: PPUSH
31323: LD_STRING DMor-1
31325: PPUSH
31326: CALL_OW 94
31330: GO 31425
31332: LD_INT 2
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31355
31340: POP
// SayRadio ( Morozov , DMor-2 ) ; 3 :
31341: LD_EXP 13
31345: PPUSH
31346: LD_STRING DMor-2
31348: PPUSH
31349: CALL_OW 94
31353: GO 31425
31355: LD_INT 3
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31378
31363: POP
// SayRadio ( Morozov , DMor-3 ) ; 4 :
31364: LD_EXP 13
31368: PPUSH
31369: LD_STRING DMor-3
31371: PPUSH
31372: CALL_OW 94
31376: GO 31425
31378: LD_INT 4
31380: DOUBLE
31381: EQUAL
31382: IFTRUE 31386
31384: GO 31401
31386: POP
// SayRadio ( Morozov , DMor-4 ) ; 5 :
31387: LD_EXP 13
31391: PPUSH
31392: LD_STRING DMor-4
31394: PPUSH
31395: CALL_OW 94
31399: GO 31425
31401: LD_INT 5
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31424
31409: POP
// SayRadio ( Morozov , DMor-5 ) ; end ;
31410: LD_EXP 13
31414: PPUSH
31415: LD_STRING DMor-5
31417: PPUSH
31418: CALL_OW 94
31422: GO 31425
31424: POP
// AddAttack ( Rand ( 0 + Difficulty , 1 + Difficulty ) ) ;
31425: LD_INT 0
31427: PUSH
31428: LD_OWVAR 67
31432: PLUS
31433: PPUSH
31434: LD_INT 1
31436: PUSH
31437: LD_OWVAR 67
31441: PLUS
31442: PPUSH
31443: CALL_OW 12
31447: PPUSH
31448: CALL 5341 0 1
// end ;
31452: PPOPN 1
31454: END
// every 0 0$01 trigger omar_count > 6 do
31455: LD_EXP 2
31459: PUSH
31460: LD_INT 6
31462: GREATER
31463: IFFALSE 31520
31465: GO 31467
31467: DISABLE
// begin SayRadio ( Omar , DO-2 ) ;
31468: LD_EXP 78
31472: PPUSH
31473: LD_STRING DO-2
31475: PPUSH
31476: CALL_OW 94
// if omar_count = 9 then
31480: LD_EXP 2
31484: PUSH
31485: LD_INT 9
31487: EQUAL
31488: IFFALSE 31502
// SayRadio ( Omar , DO-3 ) ;
31490: LD_EXP 78
31494: PPUSH
31495: LD_STRING DO-3
31497: PPUSH
31498: CALL_OW 94
// if omar_count > 9 then
31502: LD_EXP 2
31506: PUSH
31507: LD_INT 9
31509: GREATER
31510: IFFALSE 31520
// medal_omar := false ;
31512: LD_ADDR_EXP 4
31516: PUSH
31517: LD_INT 0
31519: ST_TO_ADDR
// end ;
31520: END
// every 0 0$01 trigger GetSide ( ru_east_dep ) <> 7 or IsDead ( ru_east_dep ) do
31521: LD_INT 52
31523: PPUSH
31524: CALL_OW 255
31528: PUSH
31529: LD_INT 7
31531: NONEQUAL
31532: PUSH
31533: LD_INT 52
31535: PPUSH
31536: CALL_OW 301
31540: OR
31541: IFFALSE 31612
31543: GO 31545
31545: DISABLE
// begin Wait ( 0 0$37 ) ;
31546: LD_INT 1295
31548: PPUSH
31549: CALL_OW 67
// DialogueOn ;
31553: CALL_OW 6
// SayRadio ( Omar , DO-4 ) ;
31557: LD_EXP 78
31561: PPUSH
31562: LD_STRING DO-4
31564: PPUSH
31565: CALL_OW 94
// Say ( Louis , DL-O1 ) ;
31569: LD_EXP 58
31573: PPUSH
31574: LD_STRING DL-O1
31576: PPUSH
31577: CALL_OW 88
// SayRadio ( Omar , DO-5 ) ;
31581: LD_EXP 78
31585: PPUSH
31586: LD_STRING DO-5
31588: PPUSH
31589: CALL_OW 94
// DialogueOff ;
31593: CALL_OW 7
// ChangeMissionObjectives ( Ob3 ) ;
31597: LD_STRING Ob3
31599: PPUSH
31600: CALL_OW 337
// omar_return := true ;
31604: LD_ADDR_EXP 3
31608: PUSH
31609: LD_INT 1
31611: ST_TO_ADDR
// end ;
31612: END
// every 1 1$30 trigger omar_return do
31613: LD_EXP 3
31617: IFFALSE 31687
31619: GO 31621
31621: DISABLE
// begin SayRadio ( Abdul , DS-O1 ) ;
31622: LD_EXP 83
31626: PPUSH
31627: LD_STRING DS-O1
31629: PPUSH
31630: CALL_OW 94
// Wait ( Rand ( 5 5$00 , 5 5$30 ) ) ;
31634: LD_INT 10500
31636: PPUSH
31637: LD_INT 11550
31639: PPUSH
31640: CALL_OW 12
31644: PPUSH
31645: CALL_OW 67
// PrepareEastArForces ;
31649: CALL 28106 0 0
// Wait ( 0 0$01 ) ;
31653: LD_INT 35
31655: PPUSH
31656: CALL_OW 67
// SayRadio ( Heike , DH-1 ) ;
31660: LD_EXP 80
31664: PPUSH
31665: LD_STRING DH-1
31667: PPUSH
31668: CALL_OW 94
// ChangeMissionObjectives ( Ob4 ) ;
31672: LD_STRING Ob4
31674: PPUSH
31675: CALL_OW 337
// heike_counter := 1 ;
31679: LD_ADDR_EXP 7
31683: PUSH
31684: LD_INT 1
31686: ST_TO_ADDR
// end ;
31687: END
// every 0 0$01 trigger heike_counter > 0 and heike_counter < 324 do var i ;
31688: LD_EXP 7
31692: PUSH
31693: LD_INT 0
31695: GREATER
31696: PUSH
31697: LD_EXP 7
31701: PUSH
31702: LD_INT 324
31704: LESS
31705: AND
31706: IFFALSE 31729
31708: GO 31710
31710: DISABLE
31711: LD_INT 0
31713: PPUSH
// begin enable ;
31714: ENABLE
// heike_counter := heike_counter + 1 ;
31715: LD_ADDR_EXP 7
31719: PUSH
31720: LD_EXP 7
31724: PUSH
31725: LD_INT 1
31727: PLUS
31728: ST_TO_ADDR
// end ;
31729: PPOPN 1
31731: END
// every 0 0$01 trigger heike_counter > 322 do
31732: LD_EXP 7
31736: PUSH
31737: LD_INT 322
31739: GREATER
31740: IFFALSE 31784
31742: GO 31744
31744: DISABLE
// begin SayRadio ( Abdul , DS-H1 ) ;
31745: LD_EXP 83
31749: PPUSH
31750: LD_STRING DS-H1
31752: PPUSH
31753: CALL_OW 94
// SayRadio ( Heike , DH-2 ) ;
31757: LD_EXP 80
31761: PPUSH
31762: LD_STRING DH-2
31764: PPUSH
31765: CALL_OW 94
// heike_return := true ;
31769: LD_ADDR_EXP 6
31773: PUSH
31774: LD_INT 1
31776: ST_TO_ADDR
// ChangeMissionObjectives ( Ob5 ) ;
31777: LD_STRING Ob5
31779: PPUSH
31780: CALL_OW 337
// end ;
31784: END
// every 0 0$01 trigger jaszyn_count = 3 do
31785: LD_EXP 9
31789: PUSH
31790: LD_INT 3
31792: EQUAL
31793: IFFALSE 31879
31795: GO 31797
31797: DISABLE
// begin jaszyn_activ := true ;
31798: LD_ADDR_EXP 10
31802: PUSH
31803: LD_INT 1
31805: ST_TO_ADDR
// PrepareJaszyn ;
31806: CALL 5304 0 0
// SayRadio ( morozov , DMor-J0 ) ;
31810: LD_EXP 13
31814: PPUSH
31815: LD_STRING DMor-J0
31817: PPUSH
31818: CALL_OW 94
// SayRadio ( jaszyn , DJ-1 ) ;
31822: LD_EXP 17
31826: PPUSH
31827: LD_STRING DJ-1
31829: PPUSH
31830: CALL_OW 94
// SayRadio ( morozov , DMor-J1 ) ;
31834: LD_EXP 13
31838: PPUSH
31839: LD_STRING DMor-J1
31841: PPUSH
31842: CALL_OW 94
// while ( jaszyn_time > 0 ) do
31846: LD_EXP 11
31850: PUSH
31851: LD_INT 0
31853: GREATER
31854: IFFALSE 31879
// begin jaszyn_time := jaszyn_time - 0 0$01 ;
31856: LD_ADDR_EXP 11
31860: PUSH
31861: LD_EXP 11
31865: PUSH
31866: LD_INT 35
31868: MINUS
31869: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
31870: LD_INT 35
31872: PPUSH
31873: CALL_OW 67
// end ;
31877: GO 31846
// end ;
31879: END
// every 0 0$01 trigger lenin_des do
31880: LD_EXP 12
31884: IFFALSE 31926
31886: GO 31888
31888: DISABLE
// begin DialogueOn ;
31889: CALL_OW 6
// Say ( Louis , DL-lenin ) ;
31893: LD_EXP 58
31897: PPUSH
31898: LD_STRING DL-lenin
31900: PPUSH
31901: CALL_OW 88
// ChangeMissionObjectives ( Ob6 ) ;
31905: LD_STRING Ob6
31907: PPUSH
31908: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
31912: LD_INT 11
31914: PPUSH
31915: LD_INT 1
31917: PPUSH
31918: CALL_OW 424
// DialogueOff ;
31922: CALL_OW 7
// end ;
31926: END
// every 0 0$01 trigger IsDead ( morozov ) do
31927: LD_EXP 13
31931: PPUSH
31932: CALL_OW 301
31936: IFFALSE 31956
31938: GO 31940
31940: DISABLE
// begin morozov_die := true ;
31941: LD_ADDR_EXP 8
31945: PUSH
31946: LD_INT 1
31948: ST_TO_ADDR
// ChangeMissionObjectives ( Ob7 ) ;
31949: LD_STRING Ob7
31951: PPUSH
31952: CALL_OW 337
// end ;
31956: END
// every 0 0$01 trigger FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) > 1 and lenin_des do
31957: LD_INT 11
31959: PPUSH
31960: LD_INT 22
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 70
31974: PUSH
31975: LD_INT 1
31977: GREATER
31978: PUSH
31979: LD_EXP 12
31983: AND
31984: IFFALSE 32166
31986: GO 31988
31988: DISABLE
// begin if player_count <= [ 10 , 8 , 6 ] [ Difficulty ] then
31989: LD_EXP 1
31993: PUSH
31994: LD_INT 10
31996: PUSH
31997: LD_INT 8
31999: PUSH
32000: LD_INT 6
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: PUSH
32008: LD_OWVAR 67
32012: ARRAY
32013: LESSEQUAL
32014: IFFALSE 32028
// AddMedal ( lose_mat , 1 ) else
32016: LD_STRING lose_mat
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 101
32026: GO 32039
// AddMedal ( lose_mat , - 1 ) ;
32028: LD_STRING lose_mat
32030: PPUSH
32031: LD_INT 1
32033: NEG
32034: PPUSH
32035: CALL_OW 101
// if morozov_die then
32039: LD_EXP 8
32043: IFFALSE 32067
// begin AddMedal ( morozov_die , 1 ) ;
32045: LD_STRING morozov_die
32047: PPUSH
32048: LD_INT 1
32050: PPUSH
32051: CALL_OW 101
// SaveVariable ( 1 , morozov_die ) ;
32055: LD_INT 1
32057: PPUSH
32058: LD_STRING morozov_die
32060: PPUSH
32061: CALL_OW 39
// end else
32065: GO 32088
// begin AddMedal ( morozov_die , - 1 ) ;
32067: LD_STRING morozov_die
32069: PPUSH
32070: LD_INT 1
32072: NEG
32073: PPUSH
32074: CALL_OW 101
// SaveVariable ( 0 , morozov_die ) ;
32078: LD_INT 0
32080: PPUSH
32081: LD_STRING morozov_die
32083: PPUSH
32084: CALL_OW 39
// end ; if heike_count + omar_count < [ 9 , 7 , 6 ] [ Difficulty ] then
32088: LD_EXP 5
32092: PUSH
32093: LD_EXP 2
32097: PLUS
32098: PUSH
32099: LD_INT 9
32101: PUSH
32102: LD_INT 7
32104: PUSH
32105: LD_INT 6
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: PUSH
32113: LD_OWVAR 67
32117: ARRAY
32118: LESS
32119: IFFALSE 32133
// AddMedal ( aliance , 1 ) else
32121: LD_STRING aliance
32123: PPUSH
32124: LD_INT 1
32126: PPUSH
32127: CALL_OW 101
32131: GO 32144
// AddMedal ( aliance , - 1 ) ;
32133: LD_STRING aliance
32135: PPUSH
32136: LD_INT 1
32138: NEG
32139: PPUSH
32140: CALL_OW 101
// GiveMedals ( MAIN ) ;
32144: LD_STRING MAIN
32146: PPUSH
32147: CALL_OW 102
// SaveFunction ;
32151: CALL 32382 0 0
// YouWin ;
32155: CALL_OW 103
// SetNextMission ( 1 ) ;
32159: LD_INT 1
32161: PPUSH
32162: CALL_OW 536
// end ;
32166: END
// every 0 0$05 trigger jaszyn_time = 0 0$00 do
32167: LD_EXP 11
32171: PUSH
32172: LD_INT 0
32174: EQUAL
32175: IFFALSE 32187
32177: GO 32179
32179: DISABLE
// begin YouLost ( lostj ) ;
32180: LD_STRING lostj
32182: PPUSH
32183: CALL_OW 104
// end ; end_of_file
32187: END
// export time ; every 0 0$01 do
32188: GO 32190
32190: DISABLE
// begin enable ;
32191: ENABLE
// if tick <= 25 then
32192: LD_OWVAR 1
32196: PUSH
32197: LD_INT 25
32199: LESSEQUAL
32200: IFFALSE 32210
// time := 0 0$00 ;
32202: LD_ADDR_EXP 84
32206: PUSH
32207: LD_INT 0
32209: ST_TO_ADDR
// if jaszyn_activ = false then
32210: LD_EXP 10
32214: PUSH
32215: LD_INT 0
32217: EQUAL
32218: IFFALSE 32239
// Display_Strings := [ #Ar07-1 , time ] else
32220: LD_ADDR_OWVAR 47
32224: PUSH
32225: LD_STRING #Ar07-1
32227: PUSH
32228: LD_EXP 84
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: ST_TO_ADDR
32237: GO 32266
// Display_Strings := [ #Ar07-1 , time , #Ar07-2 , jaszyn_time ] ;
32239: LD_ADDR_OWVAR 47
32243: PUSH
32244: LD_STRING #Ar07-1
32246: PUSH
32247: LD_EXP 84
32251: PUSH
32252: LD_STRING #Ar07-2
32254: PUSH
32255: LD_EXP 11
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: ST_TO_ADDR
// time := time + 0 0$01 ;
32266: LD_ADDR_EXP 84
32270: PUSH
32271: LD_EXP 84
32275: PUSH
32276: LD_INT 35
32278: PLUS
32279: ST_TO_ADDR
// end ;
32280: END
// every 3 3$50 trigger time <= [ 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] do
32281: LD_EXP 84
32285: PUSH
32286: LD_INT 52500
32288: PUSH
32289: LD_INT 42000
32291: PUSH
32292: LD_INT 31500
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: LD_OWVAR 67
32304: ARRAY
32305: LESSEQUAL
32306: IFFALSE 32381
32308: GO 32310
32310: DISABLE
// begin enable ;
32311: ENABLE
// CreateCratesArea ( Rand ( 1 , 6 - Difficulty ) , mat_cans , crates_area ) ;
32312: LD_INT 1
32314: PPUSH
32315: LD_INT 6
32317: PUSH
32318: LD_OWVAR 67
32322: MINUS
32323: PPUSH
32324: CALL_OW 12
32328: PPUSH
32329: LD_INT 1
32331: PPUSH
32332: LD_INT 9
32334: PPUSH
32335: CALL_OW 55
// Wait ( Rand ( 0 0$10 , 2 2$30 ) ) ;
32339: LD_INT 350
32341: PPUSH
32342: LD_INT 5250
32344: PPUSH
32345: CALL_OW 12
32349: PPUSH
32350: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 6 - Difficulty ) , mat_cans , crates_area ) ;
32354: LD_INT 1
32356: PPUSH
32357: LD_INT 6
32359: PUSH
32360: LD_OWVAR 67
32364: MINUS
32365: PPUSH
32366: CALL_OW 12
32370: PPUSH
32371: LD_INT 1
32373: PPUSH
32374: LD_INT 9
32376: PPUSH
32377: CALL_OW 55
// end ; end_of_file
32381: END
// export function SaveFunction ; begin
32382: LD_INT 0
32384: PPUSH
// RewardPeople ( AllPeo ^ er ) ;
32385: LD_EXP 77
32389: PUSH
32390: LD_EXP 82
32394: ADD
32395: PPUSH
32396: CALL_OW 43
// SaveCharacters ( Louis , Louis ) ;
32400: LD_EXP 58
32404: PPUSH
32405: LD_STRING Louis
32407: PPUSH
32408: CALL_OW 38
// if IsLive ( er ) then
32412: LD_EXP 82
32416: PPUSH
32417: CALL_OW 300
32421: IFFALSE 32435
// begin SaveCharacters ( er , er_07 ) ;
32423: LD_EXP 82
32427: PPUSH
32428: LD_STRING er_07
32430: PPUSH
32431: CALL_OW 38
// end ; if IsLive ( Martin ) then
32435: LD_EXP 59
32439: PPUSH
32440: CALL_OW 300
32444: IFFALSE 32458
// begin SaveCharacters ( Martin , Martin_07 ) ;
32446: LD_EXP 59
32450: PPUSH
32451: LD_STRING Martin_07
32453: PPUSH
32454: CALL_OW 38
// end ; if IsLive ( Karla ) then
32458: LD_EXP 60
32462: PPUSH
32463: CALL_OW 300
32467: IFFALSE 32481
// begin SaveCharacters ( Karla , Karla_07 ) ;
32469: LD_EXP 60
32473: PPUSH
32474: LD_STRING Karla_07
32476: PPUSH
32477: CALL_OW 38
// end ; if IsLive ( Dwein ) then
32481: LD_EXP 61
32485: PPUSH
32486: CALL_OW 300
32490: IFFALSE 32504
// begin SaveCharacters ( Dwein , Dwein_07 ) ;
32492: LD_EXP 61
32496: PPUSH
32497: LD_STRING Dwein_07
32499: PPUSH
32500: CALL_OW 38
// end ; if IsLive ( Joachim ) then
32504: LD_EXP 62
32508: PPUSH
32509: CALL_OW 300
32513: IFFALSE 32527
// begin SaveCharacters ( Joachim , Joachim_07 ) ;
32515: LD_EXP 62
32519: PPUSH
32520: LD_STRING Joachim_07
32522: PPUSH
32523: CALL_OW 38
// end ; if IsLive ( Olaf ) then
32527: LD_EXP 63
32531: PPUSH
32532: CALL_OW 300
32536: IFFALSE 32550
// begin SaveCharacters ( Olaf , Olaf_07 ) ;
32538: LD_EXP 63
32542: PPUSH
32543: LD_STRING Olaf_07
32545: PPUSH
32546: CALL_OW 38
// end ; if IsLive ( Mmark ) then
32550: LD_EXP 64
32554: PPUSH
32555: CALL_OW 300
32559: IFFALSE 32573
// begin SaveCharacters ( Mmark , Mmark_07 ) ;
32561: LD_EXP 64
32565: PPUSH
32566: LD_STRING Mmark_07
32568: PPUSH
32569: CALL_OW 38
// end ; if IsLive ( Herczeg ) then
32573: LD_EXP 65
32577: PPUSH
32578: CALL_OW 300
32582: IFFALSE 32596
// begin SaveCharacters ( Herczeg , Herczeg_07 ) ;
32584: LD_EXP 65
32588: PPUSH
32589: LD_STRING Herczeg_07
32591: PPUSH
32592: CALL_OW 38
// end ; if IsLive ( Kantor ) then
32596: LD_EXP 67
32600: PPUSH
32601: CALL_OW 300
32605: IFFALSE 32619
// begin SaveCharacters ( Kantor , Kantor_07 ) ;
32607: LD_EXP 67
32611: PPUSH
32612: LD_STRING Kantor_07
32614: PPUSH
32615: CALL_OW 38
// end ; if IsLive ( Ronn ) then
32619: LD_EXP 68
32623: PPUSH
32624: CALL_OW 300
32628: IFFALSE 32642
// begin SaveCharacters ( Ronn , Ronn_07 ) ;
32630: LD_EXP 68
32634: PPUSH
32635: LD_STRING Ronn_07
32637: PPUSH
32638: CALL_OW 38
// end ; if IsLive ( Mia ) then
32642: LD_EXP 66
32646: PPUSH
32647: CALL_OW 300
32651: IFFALSE 32665
// begin SaveCharacters ( Mia , Mia_07 ) ;
32653: LD_EXP 66
32657: PPUSH
32658: LD_STRING Mia_07
32660: PPUSH
32661: CALL_OW 38
// end ; if IsLive ( Gunther ) then
32665: LD_EXP 69
32669: PPUSH
32670: CALL_OW 300
32674: IFFALSE 32688
// begin SaveCharacters ( Gunther , Gunther_07 ) ;
32676: LD_EXP 69
32680: PPUSH
32681: LD_STRING Gunther_07
32683: PPUSH
32684: CALL_OW 38
// end ; if IsLive ( ot1 ) then
32688: LD_EXP 70
32692: PPUSH
32693: CALL_OW 300
32697: IFFALSE 32711
// begin SaveCharacters ( ot1 , ot1_07 ) ;
32699: LD_EXP 70
32703: PPUSH
32704: LD_STRING ot1_07
32706: PPUSH
32707: CALL_OW 38
// end ; if IsLive ( ot2 ) then
32711: LD_EXP 71
32715: PPUSH
32716: CALL_OW 300
32720: IFFALSE 32734
// begin SaveCharacters ( ot2 , ot2_07 ) ;
32722: LD_EXP 71
32726: PPUSH
32727: LD_STRING ot2_07
32729: PPUSH
32730: CALL_OW 38
// end ; if IsLive ( ot3 ) then
32734: LD_EXP 72
32738: PPUSH
32739: CALL_OW 300
32743: IFFALSE 32757
// begin SaveCharacters ( ot3 , ot3_07 ) ;
32745: LD_EXP 72
32749: PPUSH
32750: LD_STRING ot3_07
32752: PPUSH
32753: CALL_OW 38
// end ; if IsLive ( ot4 ) then
32757: LD_EXP 73
32761: PPUSH
32762: CALL_OW 300
32766: IFFALSE 32780
// begin SaveCharacters ( ot4 , ot4_07 ) ;
32768: LD_EXP 73
32772: PPUSH
32773: LD_STRING ot4_07
32775: PPUSH
32776: CALL_OW 38
// end ; if IsLive ( ot5 ) then
32780: LD_EXP 74
32784: PPUSH
32785: CALL_OW 300
32789: IFFALSE 32803
// begin SaveCharacters ( ot5 , ot5_07 ) ;
32791: LD_EXP 74
32795: PPUSH
32796: LD_STRING ot5_07
32798: PPUSH
32799: CALL_OW 38
// end ; if IsLive ( ot6 ) then
32803: LD_EXP 75
32807: PPUSH
32808: CALL_OW 300
32812: IFFALSE 32826
// begin SaveCharacters ( ot6 , ot6_07 ) ;
32814: LD_EXP 75
32818: PPUSH
32819: LD_STRING ot6_07
32821: PPUSH
32822: CALL_OW 38
// end ; if IsLive ( ot7 ) then
32826: LD_EXP 76
32830: PPUSH
32831: CALL_OW 300
32835: IFFALSE 32849
// begin SaveCharacters ( ot7 , ot7_07 ) ;
32837: LD_EXP 76
32841: PPUSH
32842: LD_STRING ot7_07
32844: PPUSH
32845: CALL_OW 38
// end ; end ;
32849: LD_VAR 0 1
32853: RET
