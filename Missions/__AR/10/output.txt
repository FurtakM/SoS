// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareTriggers ;
   4: CALL 29 0 0
// PrepareBases ;
   8: CALL 166 0 0
// PrepareSheiks ;
  12: CALL 1183 0 0
// PreparePom ;
  16: CALL 1456 0 0
// PrepareLouis ;
  20: CALL 61 0 0
// Action ;
  24: CALL 1586 0 0
// end ;
  28: END
// export patrol , meeting , debug ; function PrepareTriggers ; begin
  29: LD_INT 0
  31: PPUSH
// patrol := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// meeting := false ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// debug := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// end ; end_of_file
  56: LD_VAR 0 1
  60: RET
// export Louis ; export function PrepareLouis ; begin
  61: LD_INT 0
  63: PPUSH
// uc_side := 2 ;
  64: LD_ADDR_OWVAR 20
  68: PUSH
  69: LD_INT 2
  71: ST_TO_ADDR
// uc_nation := nation_arabian ;
  72: LD_ADDR_OWVAR 21
  76: PUSH
  77: LD_INT 2
  79: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING Louis
  87: PPUSH
  88: CALL_OW 34
  92: ST_TO_ADDR
// if Louis = false then
  93: LD_EXP 4
  97: PUSH
  98: LD_INT 0
 100: EQUAL
 101: IFFALSE 142
// begin PrepareHuman ( sex_male , 1 , 6 ) ;
 103: LD_INT 1
 105: PPUSH
 106: LD_INT 1
 108: PPUSH
 109: LD_INT 6
 111: PPUSH
 112: CALL_OW 380
// hc_name := Louis Tester ;
 116: LD_ADDR_OWVAR 26
 120: PUSH
 121: LD_STRING Louis Tester
 123: ST_TO_ADDR
// hc_gallery :=  ;
 124: LD_ADDR_OWVAR 33
 128: PUSH
 129: LD_STRING 
 131: ST_TO_ADDR
// Louis := CreateHuman ;
 132: LD_ADDR_EXP 4
 136: PUSH
 137: CALL_OW 44
 141: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Louis , ar_depot1 ) ;
 142: LD_EXP 4
 146: PPUSH
 147: LD_INT 32
 149: PPUSH
 150: CALL_OW 52
// CenterNowOnUnits ( ar_depot1 ) ;
 154: LD_INT 32
 156: PPUSH
 157: CALL_OW 87
// end ; end_of_file
 161: LD_VAR 0 1
 165: RET
// export function PrepareBases ; var un , i , j , t , f , l , d , b , vehicles ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
 170: PPUSH
 171: PPUSH
 172: PPUSH
 173: PPUSH
 174: PPUSH
 175: PPUSH
 176: PPUSH
 177: PPUSH
// uc_side := 5 ;
 178: LD_ADDR_OWVAR 20
 182: PUSH
 183: LD_INT 5
 185: ST_TO_ADDR
// uc_nation := nation_arabian ;
 186: LD_ADDR_OWVAR 21
 190: PUSH
 191: LD_INT 2
 193: ST_TO_ADDR
// t := FilterAllUnits ( [ f_btype , b_bunker ] ) ;
 194: LD_ADDR_VAR 0 5
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 32
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PPUSH
 209: CALL_OW 69
 213: ST_TO_ADDR
// f := FilterAllUnits ( [ f_btype , b_factory ] ) ;
 214: LD_ADDR_VAR 0 6
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PPUSH
 229: CALL_OW 69
 233: ST_TO_ADDR
// l := FilterAllUnits ( [ f_btype , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
 234: LD_ADDR_VAR 0 7
 238: PUSH
 239: LD_INT 30
 241: PUSH
 242: LD_INT 2
 244: PUSH
 245: LD_INT 30
 247: PUSH
 248: LD_INT 6
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 30
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 30
 267: PUSH
 268: LD_INT 7
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PPUSH
 285: CALL_OW 69
 289: ST_TO_ADDR
// d := FilterAllUnits ( [ f_btype , b_warehouse ] ) ;
 290: LD_ADDR_VAR 0 8
 294: PUSH
 295: LD_INT 30
 297: PUSH
 298: LD_INT 1
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PPUSH
 305: CALL_OW 69
 309: ST_TO_ADDR
// b := FilterAllUnits ( [ f_btype , b_barracks ] ) ;
 310: LD_ADDR_VAR 0 9
 314: PUSH
 315: LD_INT 30
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PPUSH
 325: CALL_OW 69
 329: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
 330: LD_ADDR_VAR 0 10
 334: PUSH
 335: LD_INT 21
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PPUSH
 345: CALL_OW 69
 349: ST_TO_ADDR
// for i = 1 to t do
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: DOUBLE
 356: LD_INT 1
 358: DEC
 359: ST_TO_ADDR
 360: LD_VAR 0 5
 364: PUSH
 365: FOR_TO
 366: IFFALSE 500
// if IsInUnit ( t [ i ] ) = 0 then
 368: LD_VAR 0 5
 372: PUSH
 373: LD_VAR 0 3
 377: ARRAY
 378: PPUSH
 379: CALL_OW 310
 383: PUSH
 384: LD_INT 0
 386: EQUAL
 387: IFFALSE 498
// begin PrepareHuman ( false , 1 , 6 ) ;
 389: LD_INT 0
 391: PPUSH
 392: LD_INT 1
 394: PPUSH
 395: LD_INT 6
 397: PPUSH
 398: CALL_OW 380
// un := CreateHuman ;
 402: LD_ADDR_VAR 0 2
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceHumanInUnit ( un , t [ i ] ) ;
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_VAR 0 5
 421: PUSH
 422: LD_VAR 0 3
 426: ARRAY
 427: PPUSH
 428: CALL_OW 52
// if GetBWeapon ( t [ i ] ) = 0 then
 432: LD_VAR 0 5
 436: PUSH
 437: LD_VAR 0 3
 441: ARRAY
 442: PPUSH
 443: CALL_OW 269
 447: PUSH
 448: LD_INT 0
 450: EQUAL
 451: IFFALSE 498
// PlaceWeaponTurret ( t [ i ] , [ ar_light_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher ] [ Rand ( 1 , 4 ) ] ) ;
 453: LD_VAR 0 5
 457: PUSH
 458: LD_VAR 0 3
 462: ARRAY
 463: PPUSH
 464: LD_INT 23
 466: PUSH
 467: LD_INT 25
 469: PUSH
 470: LD_INT 27
 472: PUSH
 473: LD_INT 28
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 1
 484: PPUSH
 485: LD_INT 4
 487: PPUSH
 488: CALL_OW 12
 492: ARRAY
 493: PPUSH
 494: CALL_OW 431
// end ;
 498: GO 365
 500: POP
 501: POP
// for i = 1 to f do
 502: LD_ADDR_VAR 0 3
 506: PUSH
 507: DOUBLE
 508: LD_INT 1
 510: DEC
 511: ST_TO_ADDR
 512: LD_VAR 0 6
 516: PUSH
 517: FOR_TO
 518: IFFALSE 585
// for j = 1 to 4 do
 520: LD_ADDR_VAR 0 4
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 4
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// begin PrepareHuman ( false , 3 , 6 ) ;
 536: LD_INT 0
 538: PPUSH
 539: LD_INT 3
 541: PPUSH
 542: LD_INT 6
 544: PPUSH
 545: CALL_OW 380
// un := CreateHuman ;
 549: LD_ADDR_VAR 0 2
 553: PUSH
 554: CALL_OW 44
 558: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ i ] ) ;
 559: LD_VAR 0 2
 563: PPUSH
 564: LD_VAR 0 6
 568: PUSH
 569: LD_VAR 0 3
 573: ARRAY
 574: PPUSH
 575: CALL_OW 52
// end ;
 579: GO 533
 581: POP
 582: POP
 583: GO 517
 585: POP
 586: POP
// for i = 1 to d do
 587: LD_ADDR_VAR 0 3
 591: PUSH
 592: DOUBLE
 593: LD_INT 1
 595: DEC
 596: ST_TO_ADDR
 597: LD_VAR 0 8
 601: PUSH
 602: FOR_TO
 603: IFFALSE 670
// for j = 1 to 2 do
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 2
 617: PUSH
 618: FOR_TO
 619: IFFALSE 666
// begin PrepareHuman ( false , 2 , 6 ) ;
 621: LD_INT 0
 623: PPUSH
 624: LD_INT 2
 626: PPUSH
 627: LD_INT 6
 629: PPUSH
 630: CALL_OW 380
// un := CreateHuman ;
 634: LD_ADDR_VAR 0 2
 638: PUSH
 639: CALL_OW 44
 643: ST_TO_ADDR
// PlaceHumanInUnit ( un , d [ i ] ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: LD_VAR 0 8
 653: PUSH
 654: LD_VAR 0 3
 658: ARRAY
 659: PPUSH
 660: CALL_OW 52
// end ;
 664: GO 618
 666: POP
 667: POP
 668: GO 602
 670: POP
 671: POP
// for i = 1 to b do
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: DOUBLE
 678: LD_INT 1
 680: DEC
 681: ST_TO_ADDR
 682: LD_VAR 0 9
 686: PUSH
 687: FOR_TO
 688: IFFALSE 763
// for j = 1 to Rand ( 2 , 4 ) do
 690: LD_ADDR_VAR 0 4
 694: PUSH
 695: DOUBLE
 696: LD_INT 1
 698: DEC
 699: ST_TO_ADDR
 700: LD_INT 2
 702: PPUSH
 703: LD_INT 4
 705: PPUSH
 706: CALL_OW 12
 710: PUSH
 711: FOR_TO
 712: IFFALSE 759
// begin PrepareHuman ( false , 1 , 6 ) ;
 714: LD_INT 0
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: LD_INT 6
 722: PPUSH
 723: CALL_OW 380
// un := CreateHuman ;
 727: LD_ADDR_VAR 0 2
 731: PUSH
 732: CALL_OW 44
 736: ST_TO_ADDR
// PlaceHumanInUnit ( un , b [ i ] ) ;
 737: LD_VAR 0 2
 741: PPUSH
 742: LD_VAR 0 9
 746: PUSH
 747: LD_VAR 0 3
 751: ARRAY
 752: PPUSH
 753: CALL_OW 52
// end ;
 757: GO 711
 759: POP
 760: POP
 761: GO 687
 763: POP
 764: POP
// for i = 1 to vehicles do
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: DOUBLE
 771: LD_INT 1
 773: DEC
 774: ST_TO_ADDR
 775: LD_VAR 0 10
 779: PUSH
 780: FOR_TO
 781: IFFALSE 828
// begin PrepareHuman ( false , 3 , 5 ) ;
 783: LD_INT 0
 785: PPUSH
 786: LD_INT 3
 788: PPUSH
 789: LD_INT 5
 791: PPUSH
 792: CALL_OW 380
// un := CreateHuman ;
 796: LD_ADDR_VAR 0 2
 800: PUSH
 801: CALL_OW 44
 805: ST_TO_ADDR
// PlaceHumanInUnit ( un , vehicles [ i ] ) ;
 806: LD_VAR 0 2
 810: PPUSH
 811: LD_VAR 0 10
 815: PUSH
 816: LD_VAR 0 3
 820: ARRAY
 821: PPUSH
 822: CALL_OW 52
// end ;
 826: GO 780
 828: POP
 829: POP
// ComMoveXY ( IsDrivenBy ( vehicles [ 3 ] ) , 22 , 18 ) ;
 830: LD_VAR 0 10
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: PPUSH
 839: CALL_OW 311
 843: PPUSH
 844: LD_INT 22
 846: PPUSH
 847: LD_INT 18
 849: PPUSH
 850: CALL_OW 111
// AddComWait ( IsDrivenBy ( vehicles [ 3 ] ) , 0 0$30 ) ;
 854: LD_VAR 0 10
 858: PUSH
 859: LD_INT 3
 861: ARRAY
 862: PPUSH
 863: CALL_OW 311
 867: PPUSH
 868: LD_INT 1050
 870: PPUSH
 871: CALL_OW 202
// AddComMoveXY ( IsDrivenBy ( vehicles [ 3 ] ) , 125 , 34 ) ;
 875: LD_VAR 0 10
 879: PUSH
 880: LD_INT 3
 882: ARRAY
 883: PPUSH
 884: CALL_OW 311
 888: PPUSH
 889: LD_INT 125
 891: PPUSH
 892: LD_INT 34
 894: PPUSH
 895: CALL_OW 171
// AddComExitVehicle ( IsDrivenBy ( vehicles [ 3 ] ) ) ;
 899: LD_VAR 0 10
 903: PUSH
 904: LD_INT 3
 906: ARRAY
 907: PPUSH
 908: CALL_OW 311
 912: PPUSH
 913: CALL_OW 181
// AddComEnterUnit ( IsDrivenBy ( vehicles [ 3 ] ) , ar_depot2 ) ;
 917: LD_VAR 0 10
 921: PUSH
 922: LD_INT 3
 924: ARRAY
 925: PPUSH
 926: CALL_OW 311
 930: PPUSH
 931: LD_INT 5
 933: PPUSH
 934: CALL_OW 180
// end ;
 938: LD_VAR 0 1
 942: RET
// every 0 0$01 trigger patrol do var filters , i , areas ;
 943: LD_EXP 1
 947: IFFALSE 1180
 949: GO 951
 951: DISABLE
 952: LD_INT 0
 954: PPUSH
 955: PPUSH
 956: PPUSH
// begin enable ;
 957: ENABLE
// filters := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) ;
 958: LD_ADDR_VAR 0 1
 962: PUSH
 963: LD_INT 22
 965: PUSH
 966: LD_INT 5
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 21
 975: PUSH
 976: LD_INT 2
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PPUSH
 987: CALL_OW 69
 991: ST_TO_ADDR
// areas := [ a1 , a2 , a1 ] ;
 992: LD_ADDR_VAR 0 3
 996: PUSH
 997: LD_INT 1
 999: PUSH
1000: LD_INT 2
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: ST_TO_ADDR
// for i = 1 to 2 do
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: DOUBLE
1017: LD_INT 1
1019: DEC
1020: ST_TO_ADDR
1021: LD_INT 2
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1178
// begin if GetFuel ( filters [ i ] ) < 20 then
1027: LD_VAR 0 1
1031: PUSH
1032: LD_VAR 0 2
1036: ARRAY
1037: PPUSH
1038: CALL_OW 261
1042: PUSH
1043: LD_INT 20
1045: LESS
1046: IFFALSE 1087
// if not See ( 2 , filters [ i ] ) then
1048: LD_INT 2
1050: PPUSH
1051: LD_VAR 0 1
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: PPUSH
1062: CALL_OW 292
1066: NOT
1067: IFFALSE 1087
// SetFuel ( filters [ i ] , 100 ) ;
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 2
1078: ARRAY
1079: PPUSH
1080: LD_INT 100
1082: PPUSH
1083: CALL_OW 240
// if not HasTask ( IsDrivenBy ( filters [ i ] ) ) then
1087: LD_VAR 0 1
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: CALL_OW 311
1102: PPUSH
1103: CALL_OW 314
1107: NOT
1108: IFFALSE 1176
// begin ComMoveToArea ( IsDrivenBy ( filters [ i ] ) , areas [ i ] ) ;
1110: LD_VAR 0 1
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PPUSH
1121: CALL_OW 311
1125: PPUSH
1126: LD_VAR 0 3
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PPUSH
1137: CALL_OW 113
// AddComMoveToArea ( IsDrivenBy ( filters [ i ] ) , areas [ i + 1 ] ) ;
1141: LD_VAR 0 1
1145: PUSH
1146: LD_VAR 0 2
1150: ARRAY
1151: PPUSH
1152: CALL_OW 311
1156: PPUSH
1157: LD_VAR 0 3
1161: PUSH
1162: LD_VAR 0 2
1166: PUSH
1167: LD_INT 1
1169: PLUS
1170: ARRAY
1171: PPUSH
1172: CALL_OW 173
// end ; end ;
1176: GO 1024
1178: POP
1179: POP
// end ; end_of_file
1180: PPOPN 3
1182: END
// export Shariff , Abdul , Gensher , Omar ; export function PrepareSheiks ; begin
1183: LD_INT 0
1185: PPUSH
// uc_side := 5 ;
1186: LD_ADDR_OWVAR 20
1190: PUSH
1191: LD_INT 5
1193: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
1194: LD_ADDR_EXP 5
1198: PUSH
1199: LD_STRING Abdul
1201: PPUSH
1202: CALL_OW 25
1206: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_depot2 ) ;
1207: LD_EXP 5
1211: PPUSH
1212: LD_INT 5
1214: PPUSH
1215: CALL_OW 52
// SetClass ( Shariff , class_desert_warior ) ;
1219: LD_EXP 5
1223: PPUSH
1224: LD_INT 11
1226: PPUSH
1227: CALL_OW 336
// Abdul := CreateCharacter ( Abdul ) ;
1231: LD_ADDR_EXP 6
1235: PUSH
1236: LD_STRING Abdul
1238: PPUSH
1239: CALL_OW 34
1243: ST_TO_ADDR
// PlaceHumanInUnit ( Abdul , ar_depot2 ) ;
1244: LD_EXP 6
1248: PPUSH
1249: LD_INT 5
1251: PPUSH
1252: CALL_OW 52
// Gensher := CreateCharacter ( Dietrich ) ;
1256: LD_ADDR_EXP 7
1260: PUSH
1261: LD_STRING Dietrich
1263: PPUSH
1264: CALL_OW 34
1268: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_depot2 ) ;
1269: LD_EXP 7
1273: PPUSH
1274: LD_INT 5
1276: PPUSH
1277: CALL_OW 52
// Omar := CreateCharacter ( Omar ) ;
1281: LD_ADDR_EXP 8
1285: PUSH
1286: LD_STRING Omar
1288: PPUSH
1289: CALL_OW 34
1293: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , ar_depot2 ) ;
1294: LD_EXP 8
1298: PPUSH
1299: LD_INT 5
1301: PPUSH
1302: CALL_OW 52
// end ;
1306: LD_VAR 0 1
1310: RET
// export Kurt ; export function PrepareKurt ; begin
1311: LD_INT 0
1313: PPUSH
// uc_side := 8 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 8
1321: ST_TO_ADDR
// hc_class = 1 ;
1322: LD_ADDR_OWVAR 28
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// hc_name = Kurt Schmidt ;
1330: LD_ADDR_OWVAR 26
1334: PUSH
1335: LD_STRING Kurt Schmidt
1337: ST_TO_ADDR
// hc_gallery = us ;
1338: LD_ADDR_OWVAR 33
1342: PUSH
1343: LD_STRING us
1345: ST_TO_ADDR
// hc_face_number = 18 ;
1346: LD_ADDR_OWVAR 34
1350: PUSH
1351: LD_INT 18
1353: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 1 ] ;
1354: LD_ADDR_OWVAR 30
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: ST_TO_ADDR
// hc_skills = [ 7 , 4 , 3 , 1 ] ;
1377: LD_ADDR_OWVAR 31
1381: PUSH
1382: LD_INT 7
1384: PUSH
1385: LD_INT 4
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: ST_TO_ADDR
// hc_sex = sex_male ;
1400: LD_ADDR_OWVAR 27
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
1408: LD_ADDR_OWVAR 29
1412: PUSH
1413: LD_INT 9
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: ST_TO_ADDR
// Kurt = CreateHuman ;
1423: LD_ADDR_EXP 9
1427: PUSH
1428: CALL_OW 44
1432: ST_TO_ADDR
// PlaceUnitXY ( Kurt , 52 , 100 , false ) ;
1433: LD_EXP 9
1437: PPUSH
1438: LD_INT 52
1440: PPUSH
1441: LD_INT 100
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 48
// end ;
1451: LD_VAR 0 1
1455: RET
// export Rolf , Gali , Pom ; export function PreparePom ; var un ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
// uc_side := 5 ;
1460: LD_ADDR_OWVAR 20
1464: PUSH
1465: LD_INT 5
1467: ST_TO_ADDR
// Rolf := CreateCharacter ( Rolf_09c ) ;
1468: LD_ADDR_EXP 10
1472: PUSH
1473: LD_STRING Rolf_09c
1475: PPUSH
1476: CALL_OW 34
1480: ST_TO_ADDR
// if Rolf then
1481: LD_EXP 10
1485: IFFALSE 1499
// un := Rolf else
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: LD_EXP 10
1496: ST_TO_ADDR
1497: GO 1512
// Gali := CreateCharacter ( Gali_09c ) ;
1499: LD_ADDR_EXP 11
1503: PUSH
1504: LD_STRING Gali_09c
1506: PPUSH
1507: CALL_OW 34
1511: ST_TO_ADDR
// if Gali then
1512: LD_EXP 11
1516: IFFALSE 1530
// un := Gali else
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: LD_EXP 11
1527: ST_TO_ADDR
1528: GO 1553
// begin PrepareHuman ( false , 1 , 4 ) ;
1530: LD_INT 0
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 380
// un := CreateHuman ;
1543: LD_ADDR_VAR 0 2
1547: PUSH
1548: CALL_OW 44
1552: ST_TO_ADDR
// end ; PlaceUnitXY ( un , 97 , 131 , false ) ;
1553: LD_VAR 0 2
1557: PPUSH
1558: LD_INT 97
1560: PPUSH
1561: LD_INT 131
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 48
// Pom := un ;
1571: LD_ADDR_EXP 12
1575: PUSH
1576: LD_VAR 0 2
1580: ST_TO_ADDR
// end ; end_of_file
1581: LD_VAR 0 1
1585: RET
// export function Action ; begin
1586: LD_INT 0
1588: PPUSH
// InGameOn ;
1589: CALL_OW 8
// PlaceSeeing ( 119 , 128 , 2 , 10 ) ;
1593: LD_INT 119
1595: PPUSH
1596: LD_INT 128
1598: PPUSH
1599: LD_INT 2
1601: PPUSH
1602: LD_INT 10
1604: PPUSH
1605: CALL_OW 330
// CenterNowOnUnits ( ar_depot1 ) ;
1609: LD_INT 32
1611: PPUSH
1612: CALL_OW 87
// Wait ( 0 0$01 ) ;
1616: LD_INT 35
1618: PPUSH
1619: CALL_OW 67
// case Query ( intro1 ) of 1 :
1623: LD_STRING intro1
1625: PPUSH
1626: CALL_OW 97
1630: PUSH
1631: LD_INT 1
1633: DOUBLE
1634: EQUAL
1635: IFTRUE 1639
1637: GO 1650
1639: POP
// patrol := true ; end ;
1640: LD_ADDR_EXP 1
1644: PUSH
1645: LD_INT 1
1647: ST_TO_ADDR
1648: GO 1651
1650: POP
// Wait ( 1 ) ;
1651: LD_INT 1
1653: PPUSH
1654: CALL_OW 67
// ComMoveXY ( Pom , 120 , 129 ) ;
1658: LD_EXP 12
1662: PPUSH
1663: LD_INT 120
1665: PPUSH
1666: LD_INT 129
1668: PPUSH
1669: CALL_OW 111
// AddComTurnUnit ( Pom , ar_depot1 ) ;
1673: LD_EXP 12
1677: PPUSH
1678: LD_INT 32
1680: PPUSH
1681: CALL_OW 179
// repeat Wait ( 0 0$01 ) ;
1685: LD_INT 35
1687: PPUSH
1688: CALL_OW 67
// until GetX ( pom ) = 120 and GetY ( pom ) = 129 ;
1692: LD_EXP 12
1696: PPUSH
1697: CALL_OW 250
1701: PUSH
1702: LD_INT 120
1704: EQUAL
1705: PUSH
1706: LD_EXP 12
1710: PPUSH
1711: CALL_OW 251
1715: PUSH
1716: LD_INT 129
1718: EQUAL
1719: AND
1720: IFFALSE 1685
// Say ( pom , 10_DPom1 ) ;
1722: LD_EXP 12
1726: PPUSH
1727: LD_STRING 10_DPom1
1729: PPUSH
1730: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
1734: LD_INT 10
1736: PPUSH
1737: CALL_OW 67
// ComExitBuilding ( Louis ) ;
1741: LD_EXP 4
1745: PPUSH
1746: CALL_OW 122
// AddComTurnUnit ( Louis , Pom ) ;
1750: LD_EXP 4
1754: PPUSH
1755: LD_EXP 12
1759: PPUSH
1760: CALL_OW 179
// ComTurnUnit ( pom , Louis ) ;
1764: LD_EXP 12
1768: PPUSH
1769: LD_EXP 4
1773: PPUSH
1774: CALL_OW 119
// Wait ( 0 0$0.1 ) ;
1778: LD_INT 4
1780: PPUSH
1781: CALL_OW 67
// Say ( Louis , 10_DL1 ) ;
1785: LD_EXP 4
1789: PPUSH
1790: LD_STRING 10_DL1
1792: PPUSH
1793: CALL_OW 88
// Say ( pom , 10_DPom2 ) ;
1797: LD_EXP 12
1801: PPUSH
1802: LD_STRING 10_DPom2
1804: PPUSH
1805: CALL_OW 88
// Say ( Louis , 10_DL2 ) ;
1809: LD_EXP 4
1813: PPUSH
1814: LD_STRING 10_DL2
1816: PPUSH
1817: CALL_OW 88
// InGameOff ;
1821: CALL_OW 9
// ChangeMissionObjectives ( Meeting ) ;
1825: LD_STRING Meeting
1827: PPUSH
1828: CALL_OW 337
// ComEnterUnit ( pom , ar_depot1 ) ;
1832: LD_EXP 12
1836: PPUSH
1837: LD_INT 32
1839: PPUSH
1840: CALL_OW 120
// PrepareKurt ;
1844: CALL 1311 0 0
// if debug then
1848: LD_EXP 3
1852: IFFALSE 1864
// ChangeMap ( 1 , %_cont ) ;
1854: LD_INT 1
1856: PPUSH
1857: LD_STRING %_cont
1859: PPUSH
1860: CALL_OW 340
// end ;
1864: LD_VAR 0 1
1868: RET
// every 0 0$01 trigger See ( 8 , Louis ) do var un , veh ;
1869: LD_INT 8
1871: PPUSH
1872: LD_EXP 4
1876: PPUSH
1877: CALL_OW 292
1881: IFFALSE 2544
1883: GO 1885
1885: DISABLE
1886: LD_INT 0
1888: PPUSH
1889: PPUSH
// begin InGameOn ;
1890: CALL_OW 8
// Say ( Kurt , 10_DK1 ) ;
1894: LD_EXP 9
1898: PPUSH
1899: LD_STRING 10_DK1
1901: PPUSH
1902: CALL_OW 88
// Say ( Louis , 10_DL3 ) ;
1906: LD_EXP 4
1910: PPUSH
1911: LD_STRING 10_DL3
1913: PPUSH
1914: CALL_OW 88
// ComMoveXY ( Kurt , GetX ( Louis ) - 2 , GetY ( Louis ) - 2 ) ;
1918: LD_EXP 9
1922: PPUSH
1923: LD_EXP 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_INT 2
1935: MINUS
1936: PPUSH
1937: LD_EXP 4
1941: PPUSH
1942: CALL_OW 251
1946: PUSH
1947: LD_INT 2
1949: MINUS
1950: PPUSH
1951: CALL_OW 111
// AddComTurnUnit ( Kurt , Louis ) ;
1955: LD_EXP 9
1959: PPUSH
1960: LD_EXP 4
1964: PPUSH
1965: CALL_OW 179
// ComTurnUnit ( Louis , Kurt ) ;
1969: LD_EXP 4
1973: PPUSH
1974: LD_EXP 9
1978: PPUSH
1979: CALL_OW 119
// Say ( Kurt , 10_DK2 ) ;
1983: LD_EXP 9
1987: PPUSH
1988: LD_STRING 10_DK2
1990: PPUSH
1991: CALL_OW 88
// Say ( Louis , 10_DL4 ) ;
1995: LD_EXP 4
1999: PPUSH
2000: LD_STRING 10_DL4
2002: PPUSH
2003: CALL_OW 88
// Say ( Kurt , 10_DK3 ) ;
2007: LD_EXP 9
2011: PPUSH
2012: LD_STRING 10_DK3
2014: PPUSH
2015: CALL_OW 88
// Say ( Louis , 10_DL5 ) ;
2019: LD_EXP 4
2023: PPUSH
2024: LD_STRING 10_DL5
2026: PPUSH
2027: CALL_OW 88
// Say ( Kurt , 10_DK4 ) ;
2031: LD_EXP 9
2035: PPUSH
2036: LD_STRING 10_DK4
2038: PPUSH
2039: CALL_OW 88
// Say ( Kurt , 10_DK5 ) ;
2043: LD_EXP 9
2047: PPUSH
2048: LD_STRING 10_DK5
2050: PPUSH
2051: CALL_OW 88
// Say ( Louis , 10_DL6 ) ;
2055: LD_EXP 4
2059: PPUSH
2060: LD_STRING 10_DL6
2062: PPUSH
2063: CALL_OW 88
// Say ( Kurt , 10_DK6 ) ;
2067: LD_EXP 9
2071: PPUSH
2072: LD_STRING 10_DK6
2074: PPUSH
2075: CALL_OW 88
// ComMoveXY ( Kurt , 65 , 127 ) ;
2079: LD_EXP 9
2083: PPUSH
2084: LD_INT 65
2086: PPUSH
2087: LD_INT 127
2089: PPUSH
2090: CALL_OW 111
// Say ( Louis , 10_DL7 ) ;
2094: LD_EXP 4
2098: PPUSH
2099: LD_STRING 10_DL7
2101: PPUSH
2102: CALL_OW 88
// uc_side := 5 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 5
2113: ST_TO_ADDR
// hc_gallery :=  ;
2114: LD_ADDR_OWVAR 33
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// hc_name :=  ;
2122: LD_ADDR_OWVAR 26
2126: PUSH
2127: LD_STRING 
2129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 4 ) ;
2130: LD_INT 1
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: LD_INT 4
2138: PPUSH
2139: CALL_OW 380
// un := CreateHuman ;
2143: LD_ADDR_VAR 0 1
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitXY ( un , 66 , 105 , false ) ;
2153: LD_VAR 0 1
2157: PPUSH
2158: LD_INT 66
2160: PPUSH
2161: LD_INT 105
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 48
// ComMoveXY ( un , GetX ( Louis ) + 2 , GetY ( Louis ) ) ;
2171: LD_VAR 0 1
2175: PPUSH
2176: LD_EXP 4
2180: PPUSH
2181: CALL_OW 250
2185: PUSH
2186: LD_INT 2
2188: PLUS
2189: PPUSH
2190: LD_EXP 4
2194: PPUSH
2195: CALL_OW 251
2199: PPUSH
2200: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
2204: LD_INT 35
2206: PPUSH
2207: CALL_OW 67
// until GetDistUnits ( un , Louis ) < 3 ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_EXP 4
2220: PPUSH
2221: CALL_OW 296
2225: PUSH
2226: LD_INT 3
2228: LESS
2229: IFFALSE 2204
// ComTurnUnit ( un , Louis ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: LD_EXP 4
2240: PPUSH
2241: CALL_OW 119
// ComTurnUnit ( Louis , un ) ;
2245: LD_EXP 4
2249: PPUSH
2250: LD_VAR 0 1
2254: PPUSH
2255: CALL_OW 119
// Say ( un , 10_DI1 ) ;
2259: LD_VAR 0 1
2263: PPUSH
2264: LD_STRING 10_DI1
2266: PPUSH
2267: CALL_OW 88
// vc_chassis := ar_half_tracked ;
2271: LD_ADDR_OWVAR 37
2275: PUSH
2276: LD_INT 14
2278: ST_TO_ADDR
// vc_control := control_manual ;
2279: LD_ADDR_OWVAR 38
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// vc_engine := engine_combustion ;
2287: LD_ADDR_OWVAR 39
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// vc_weapon := ar_light_gun ;
2295: LD_ADDR_OWVAR 40
2299: PUSH
2300: LD_INT 23
2302: ST_TO_ADDR
// uc_side := 5 ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_INT 5
2310: ST_TO_ADDR
// veh := CreateVehicle ;
2311: LD_ADDR_VAR 0 2
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2321: LD_VAR 0 2
2325: PPUSH
2326: LD_INT 4
2328: PPUSH
2329: CALL_OW 233
// PlaceUnitXY ( veh , 122 , 133 , false ) ;
2333: LD_VAR 0 2
2337: PPUSH
2338: LD_INT 122
2340: PPUSH
2341: LD_INT 133
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 48
// InGameOff ;
2351: CALL_OW 9
// ChangeMissionObjectives ( Sharifff ) ;
2355: LD_STRING Sharifff
2357: PPUSH
2358: CALL_OW 337
// meeting := true ;
2362: LD_ADDR_EXP 2
2366: PUSH
2367: LD_INT 1
2369: ST_TO_ADDR
// RemoveUnit ( Kurt ) ;
2370: LD_EXP 9
2374: PPUSH
2375: CALL_OW 64
// Wait ( 0 0$01 ) ;
2379: LD_INT 35
2381: PPUSH
2382: CALL_OW 67
// ComEnterUnit ( un , ar_depot1 ) ;
2386: LD_VAR 0 1
2390: PPUSH
2391: LD_INT 32
2393: PPUSH
2394: CALL_OW 120
// ComExitBuilding ( [ Shariff , Abdul , Gensher , Omar ] ) ;
2398: LD_EXP 5
2402: PUSH
2403: LD_EXP 6
2407: PUSH
2408: LD_EXP 7
2412: PUSH
2413: LD_EXP 8
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PPUSH
2424: CALL_OW 122
// AddComMoveXY ( Shariff , 115 , 18 ) ;
2428: LD_EXP 5
2432: PPUSH
2433: LD_INT 115
2435: PPUSH
2436: LD_INT 18
2438: PPUSH
2439: CALL_OW 171
// AddComTurnUnit ( Shariff , Abdul ) ;
2443: LD_EXP 5
2447: PPUSH
2448: LD_EXP 6
2452: PPUSH
2453: CALL_OW 179
// AddComMoveXY ( Abdul , 120 , 18 ) ;
2457: LD_EXP 6
2461: PPUSH
2462: LD_INT 120
2464: PPUSH
2465: LD_INT 18
2467: PPUSH
2468: CALL_OW 171
// AddComTurnUnit ( Abdul , Shariff ) ;
2472: LD_EXP 6
2476: PPUSH
2477: LD_EXP 5
2481: PPUSH
2482: CALL_OW 179
// AddComMoveXY ( Gensher , 199 , 16 ) ;
2486: LD_EXP 7
2490: PPUSH
2491: LD_INT 199
2493: PPUSH
2494: LD_INT 16
2496: PPUSH
2497: CALL_OW 171
// AddComTurnUnit ( Gensher , Shariff ) ;
2501: LD_EXP 7
2505: PPUSH
2506: LD_EXP 5
2510: PPUSH
2511: CALL_OW 179
// AddComMoveXY ( Omar , 116 , 13 ) ;
2515: LD_EXP 8
2519: PPUSH
2520: LD_INT 116
2522: PPUSH
2523: LD_INT 13
2525: PPUSH
2526: CALL_OW 171
// AddComTurnUnit ( Omar , Shariff ) ;
2530: LD_EXP 8
2534: PPUSH
2535: LD_EXP 5
2539: PPUSH
2540: CALL_OW 179
// end ;
2544: PPOPN 2
2546: END
// every 0 0$01 trigger See ( 2 , Shariff ) do
2547: LD_INT 2
2549: PPUSH
2550: LD_EXP 5
2554: PPUSH
2555: CALL_OW 292
2559: IFFALSE 3022
2561: GO 2563
2563: DISABLE
// begin InGameOn ;
2564: CALL_OW 8
// ComMoveXY ( Louis , GetX ( Shariff ) - 2 , GetY ( Shariff ) - 3 ) ;
2568: LD_EXP 4
2572: PPUSH
2573: LD_EXP 5
2577: PPUSH
2578: CALL_OW 250
2582: PUSH
2583: LD_INT 2
2585: MINUS
2586: PPUSH
2587: LD_EXP 5
2591: PPUSH
2592: CALL_OW 251
2596: PUSH
2597: LD_INT 3
2599: MINUS
2600: PPUSH
2601: CALL_OW 111
// AddComTurnUnit ( Louis , Shariff ) ;
2605: LD_EXP 4
2609: PPUSH
2610: LD_EXP 5
2614: PPUSH
2615: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
2619: LD_INT 10
2621: PPUSH
2622: CALL_OW 67
// Say ( Louis , 10_DL8 ) ;
2626: LD_EXP 4
2630: PPUSH
2631: LD_STRING 10_DL8
2633: PPUSH
2634: CALL_OW 88
// ComTurnUnit ( Shariff , Louis ) ;
2638: LD_EXP 5
2642: PPUSH
2643: LD_EXP 4
2647: PPUSH
2648: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
2652: LD_INT 10
2654: PPUSH
2655: CALL_OW 67
// Say ( Shariff , 10_DS1 ) ;
2659: LD_EXP 5
2663: PPUSH
2664: LD_STRING 10_DS1
2666: PPUSH
2667: CALL_OW 88
// case Query ( Kurt ) of 1 :
2671: LD_STRING Kurt
2673: PPUSH
2674: CALL_OW 97
2678: PUSH
2679: LD_INT 1
2681: DOUBLE
2682: EQUAL
2683: IFTRUE 2687
2685: GO 2748
2687: POP
// begin Say ( Louis , 10_DLK1 ) ;
2688: LD_EXP 4
2692: PPUSH
2693: LD_STRING 10_DLK1
2695: PPUSH
2696: CALL_OW 88
// Say ( Shariff , 10_DSK1 ) ;
2700: LD_EXP 5
2704: PPUSH
2705: LD_STRING 10_DSK1
2707: PPUSH
2708: CALL_OW 88
// Say ( Louis , 10_DLK2 ) ;
2712: LD_EXP 4
2716: PPUSH
2717: LD_STRING 10_DLK2
2719: PPUSH
2720: CALL_OW 88
// Say ( Shariff , 10_DSK2 ) ;
2724: LD_EXP 5
2728: PPUSH
2729: LD_STRING 10_DSK2
2731: PPUSH
2732: CALL_OW 88
// SaveVariable ( 1 , shariff_know ) ;
2736: LD_INT 1
2738: PPUSH
2739: LD_STRING shariff_know
2741: PPUSH
2742: CALL_OW 39
// end ; 2 :
2746: GO 2794
2748: LD_INT 2
2750: DOUBLE
2751: EQUAL
2752: IFTRUE 2756
2754: GO 2793
2756: POP
// begin Say ( Louis , 10_DLN1 ) ;
2757: LD_EXP 4
2761: PPUSH
2762: LD_STRING 10_DLN1
2764: PPUSH
2765: CALL_OW 88
// Say ( Shariff , 10_DSN1 ) ;
2769: LD_EXP 5
2773: PPUSH
2774: LD_STRING 10_DSN1
2776: PPUSH
2777: CALL_OW 88
// SaveVariable ( 0 , shariff_know ) ;
2781: LD_INT 0
2783: PPUSH
2784: LD_STRING shariff_know
2786: PPUSH
2787: CALL_OW 39
// end ; end ;
2791: GO 2794
2793: POP
// Wait ( 0 0$0.3 ) ;
2794: LD_INT 10
2796: PPUSH
2797: CALL_OW 67
// ComTurnUnit ( Shariff , Gensher ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_EXP 7
2810: PPUSH
2811: CALL_OW 119
// Say ( Shariff , 10_DS2 ) ;
2815: LD_EXP 5
2819: PPUSH
2820: LD_STRING 10_DS2
2822: PPUSH
2823: CALL_OW 88
// Say ( Gensher , 10_DG1 ) ;
2827: LD_EXP 7
2831: PPUSH
2832: LD_STRING 10_DG1
2834: PPUSH
2835: CALL_OW 88
// Say ( Louis , 10_DL9 ) ;
2839: LD_EXP 4
2843: PPUSH
2844: LD_STRING 10_DL9
2846: PPUSH
2847: CALL_OW 88
// Say ( Shariff , 10_DS3 ) ;
2851: LD_EXP 5
2855: PPUSH
2856: LD_STRING 10_DS3
2858: PPUSH
2859: CALL_OW 88
// Say ( Shariff , 10_DS4 ) ;
2863: LD_EXP 5
2867: PPUSH
2868: LD_STRING 10_DS4
2870: PPUSH
2871: CALL_OW 88
// Say ( Louis , 10_DL10 ) ;
2875: LD_EXP 4
2879: PPUSH
2880: LD_STRING 10_DL10
2882: PPUSH
2883: CALL_OW 88
// Say ( Gensher , 10_DG3 ) ;
2887: LD_EXP 7
2891: PPUSH
2892: LD_STRING 10_DG3
2894: PPUSH
2895: CALL_OW 88
// Say ( Louis , 10_DL11 ) ;
2899: LD_EXP 4
2903: PPUSH
2904: LD_STRING 10_DL11
2906: PPUSH
2907: CALL_OW 88
// Say ( Gensher , 10_DG4 ) ;
2911: LD_EXP 7
2915: PPUSH
2916: LD_STRING 10_DG4
2918: PPUSH
2919: CALL_OW 88
// Say ( Shariff , 10_DS5 ) ;
2923: LD_EXP 5
2927: PPUSH
2928: LD_STRING 10_DS5
2930: PPUSH
2931: CALL_OW 88
// Say ( Shariff , 10_DS6 ) ;
2935: LD_EXP 5
2939: PPUSH
2940: LD_STRING 10_DS6
2942: PPUSH
2943: CALL_OW 88
// Say ( Omar , 10_DO1 ) ;
2947: LD_EXP 8
2951: PPUSH
2952: LD_STRING 10_DO1
2954: PPUSH
2955: CALL_OW 88
// Say ( Shariff , 10_DS7 ) ;
2959: LD_EXP 5
2963: PPUSH
2964: LD_STRING 10_DS7
2966: PPUSH
2967: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2971: LD_INT 10
2973: PPUSH
2974: CALL_OW 67
// ComEnterUnit ( [ Gensher , Omar , Shariff ] , ar_depot2 ) ;
2978: LD_EXP 7
2982: PUSH
2983: LD_EXP 8
2987: PUSH
2988: LD_EXP 5
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PPUSH
2998: LD_INT 5
3000: PPUSH
3001: CALL_OW 120
// Wait ( 0 0$01 ) ;
3005: LD_INT 35
3007: PPUSH
3008: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
3012: LD_INT 1
3014: PPUSH
3015: LD_STRING %_cont
3017: PPUSH
3018: CALL_OW 340
// end ;
3022: END
