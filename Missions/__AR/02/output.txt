// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareNature ;
   4: CALL 5336 0 0
// PreparePeople ;
   8: CALL 335 0 0
// PrepareArabian ;
  12: CALL 726 0 0
// PrepareTriggers ;
  16: CALL 25 0 0
// MissionStart ;
  20: CALL 1630 0 0
// end ;
  24: END
// export RussianTimeStart , FarmerGone , Rulmt , MissEnd , FirstContact , FirstWorkShop , MedalAtVeh , ThisIsFirstVeh , WasCatch , CountTech , RussianIsHere , Fabric , Counter , SpyIsHere ; function PrepareTriggers ; begin
  25: LD_INT 0
  27: PPUSH
// RussianTimeStart = false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// FarmerGone = false ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// Rulmt = 1 ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// MissEnd = [ 25 25$0 , 30 30$0 , 37 37$0 ] [ Difficulty ] ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 52500
  59: PUSH
  60: LD_INT 63000
  62: PUSH
  63: LD_INT 77700
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: LIST
  70: PUSH
  71: LD_OWVAR 67
  75: ARRAY
  76: ST_TO_ADDR
// FirstContact = true ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 1
  84: ST_TO_ADDR
// FirstWorkShop = true ;
  85: LD_ADDR_EXP 6
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// MedalAtVeh = false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ThisIsFirstVeh = true ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// CountOfDead = 0 ;
 109: LD_ADDR_EXP 29
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// WasCatch = false ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// CountTech = 0 ;
 125: LD_ADDR_EXP 10
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// RussianIsHere = false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// Fabric = 0 ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// Counter = 0 0$00 ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// SpyIsHere = false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// RuDead = 0 ;
 165: LD_ADDR_EXP 30
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger FarmerGone = true do
 178: LD_EXP 2
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 247
 188: GO 190
 190: DISABLE
// begin while true do
 191: LD_INT 1
 193: IFFALSE 247
// begin Wait ( 0 0$01 ) ;
 195: LD_INT 35
 197: PPUSH
 198: CALL_OW 67
// Counter = Counter + 0 0$01 ;
 202: LD_ADDR_EXP 13
 206: PUSH
 207: LD_EXP 13
 211: PUSH
 212: LD_INT 35
 214: PLUS
 215: ST_TO_ADDR
// Display_Strings := [ #Ar02-1 , Counter ] ;
 216: LD_ADDR_OWVAR 47
 220: PUSH
 221: LD_STRING #Ar02-1
 223: PUSH
 224: LD_EXP 13
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: ST_TO_ADDR
// if MissEnd = true then
 233: LD_EXP 4
 237: PUSH
 238: LD_INT 1
 240: EQUAL
 241: IFFALSE 245
// break ;
 243: GO 247
// end ;
 245: GO 191
// end ;
 247: END
// every 0 0$03 do
 248: GO 250
 250: DISABLE
// begin enable ;
 251: ENABLE
// if FilterAllUnits ( [ f_side , 3 ] ) > 0 then
 252: LD_INT 22
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 69
 266: PUSH
 267: LD_INT 0
 269: GREATER
 270: IFFALSE 282
// music_nat = 3 else
 272: LD_ADDR_OWVAR 71
 276: PUSH
 277: LD_INT 3
 279: ST_TO_ADDR
 280: GO 298
// music_nat = Rand ( 2 , 4 ) ;
 282: LD_ADDR_OWVAR 71
 286: PUSH
 287: LD_INT 2
 289: PPUSH
 290: LD_INT 4
 292: PPUSH
 293: CALL_OW 12
 297: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 1 ] ) > 0 then
 298: LD_INT 22
 300: PUSH
 301: LD_INT 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: LD_INT 0
 315: GREATER
 316: IFFALSE 334
// music_nat = Rand ( 1 , 4 ) ;
 318: LD_ADDR_OWVAR 71
 322: PUSH
 323: LD_INT 1
 325: PPUSH
 326: LD_INT 4
 328: PPUSH
 329: CALL_OW 12
 333: ST_TO_ADDR
// end ; end_of_file
 334: END
// export Louis , Karla , Joachim , Olaf , Dwein , Gunther , Abdul , Mmark ; export function PreparePeople ; begin
 335: LD_INT 0
 337: PPUSH
// uc_side = 2 ;
 338: LD_ADDR_OWVAR 20
 342: PUSH
 343: LD_INT 2
 345: ST_TO_ADDR
// uc_nation = 2 ;
 346: LD_ADDR_OWVAR 21
 350: PUSH
 351: LD_INT 2
 353: ST_TO_ADDR
// if TestCharacters ( Louis ) then
 354: LD_STRING Louis
 356: PPUSH
 357: CALL_OW 28
 361: IFFALSE 393
// begin Louis := CreateCharacter ( Louis ) ;
 363: LD_ADDR_EXP 15
 367: PUSH
 368: LD_STRING Louis
 370: PPUSH
 371: CALL_OW 34
 375: ST_TO_ADDR
// PlaceUnitArea ( Louis , StartA , false ) ;
 376: LD_EXP 15
 380: PPUSH
 381: LD_INT 1
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL_OW 49
// end else
 391: GO 450
// begin hc_sex = sex_male ;
 393: LD_ADDR_OWVAR 27
 397: PUSH
 398: LD_INT 1
 400: ST_TO_ADDR
// hc_class = 1 ;
 401: LD_ADDR_OWVAR 28
 405: PUSH
 406: LD_INT 1
 408: ST_TO_ADDR
// hc_gallery = sandar ;
 409: LD_ADDR_OWVAR 33
 413: PUSH
 414: LD_STRING sandar
 416: ST_TO_ADDR
// hc_face_number = 1 ;
 417: LD_ADDR_OWVAR 34
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// louis = createhuman ;
 425: LD_ADDR_EXP 15
 429: PUSH
 430: CALL_OW 44
 434: ST_TO_ADDR
// placeunitarea ( louis , starta , false ) ;
 435: LD_EXP 15
 439: PPUSH
 440: LD_INT 1
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ; if TestCharacters ( Karla_01 ) then
 450: LD_STRING Karla_01
 452: PPUSH
 453: CALL_OW 28
 457: IFFALSE 487
// begin Karla := CreateCharacter ( Karla_01 ) ;
 459: LD_ADDR_EXP 16
 463: PUSH
 464: LD_STRING Karla_01
 466: PPUSH
 467: CALL_OW 34
 471: ST_TO_ADDR
// PlaceUnitArea ( Karla , StartA , false ) ;
 472: LD_EXP 16
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 49
// end ; if TestCharacters ( Joachim_01 ) then
 487: LD_STRING Joachim_01
 489: PPUSH
 490: CALL_OW 28
 494: IFFALSE 524
// begin Joachim := CreateCharacter ( Joachim_01 ) ;
 496: LD_ADDR_EXP 17
 500: PUSH
 501: LD_STRING Joachim_01
 503: PPUSH
 504: CALL_OW 34
 508: ST_TO_ADDR
// PlaceUnitArea ( Joachim , StartA , false ) ;
 509: LD_EXP 17
 513: PPUSH
 514: LD_INT 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ; if TestCharacters ( Olaf_01 ) then
 524: LD_STRING Olaf_01
 526: PPUSH
 527: CALL_OW 28
 531: IFFALSE 561
// begin Olaf := CreateCharacter ( Olaf_01 ) ;
 533: LD_ADDR_EXP 18
 537: PUSH
 538: LD_STRING Olaf_01
 540: PPUSH
 541: CALL_OW 34
 545: ST_TO_ADDR
// PlaceUnitArea ( Olaf , StartA , false ) ;
 546: LD_EXP 18
 550: PPUSH
 551: LD_INT 1
 553: PPUSH
 554: LD_INT 0
 556: PPUSH
 557: CALL_OW 49
// end ; if TestCharacters ( Dwein_01 ) then
 561: LD_STRING Dwein_01
 563: PPUSH
 564: CALL_OW 28
 568: IFFALSE 598
// begin Dwein := CreateCharacter ( Dwein_01 ) ;
 570: LD_ADDR_EXP 19
 574: PUSH
 575: LD_STRING Dwein_01
 577: PPUSH
 578: CALL_OW 34
 582: ST_TO_ADDR
// PlaceUnitArea ( Dwein , StartA , false ) ;
 583: LD_EXP 19
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ; if TestCharacters ( Gunther_01 ) then
 598: LD_STRING Gunther_01
 600: PPUSH
 601: CALL_OW 28
 605: IFFALSE 635
// begin Gunther := CreateCharacter ( Gunther_01 ) ;
 607: LD_ADDR_EXP 20
 611: PUSH
 612: LD_STRING Gunther_01
 614: PPUSH
 615: CALL_OW 34
 619: ST_TO_ADDR
// PlaceUnitArea ( Gunther , StartA , false ) ;
 620: LD_EXP 20
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: LD_INT 0
 630: PPUSH
 631: CALL_OW 49
// end ; if TestCharacters ( Abdul ) then
 635: LD_STRING Abdul
 637: PPUSH
 638: CALL_OW 28
 642: IFFALSE 672
// begin Abdul := CreateCharacter ( Abdul ) ;
 644: LD_ADDR_EXP 21
 648: PUSH
 649: LD_STRING Abdul
 651: PPUSH
 652: CALL_OW 34
 656: ST_TO_ADDR
// PlaceUnitArea ( Abdul , StartA , false ) ;
 657: LD_EXP 21
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: CALL_OW 49
// end ; if TestCharacters ( Mmark_01 ) then
 672: LD_STRING Mmark_01
 674: PPUSH
 675: CALL_OW 28
 679: IFFALSE 721
// begin Mmark := CreateCharacter ( Mmark_01 ) ;
 681: LD_ADDR_EXP 22
 685: PUSH
 686: LD_STRING Mmark_01
 688: PPUSH
 689: CALL_OW 34
 693: ST_TO_ADDR
// PlaceUnitArea ( Mmark , StartA , false ) ;
 694: LD_EXP 22
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 0
 704: PPUSH
 705: CALL_OW 49
// SetClass ( Mmark , 1 ) ;
 709: LD_EXP 22
 713: PPUSH
 714: LD_INT 1
 716: PPUSH
 717: CALL_OW 336
// end ; end ; end_of_file
 721: LD_VAR 0 1
 725: RET
// export Farmer , Gensher , Martin ; export function PrepareArabian ; var l , un ; begin
 726: LD_INT 0
 728: PPUSH
 729: PPUSH
 730: PPUSH
// SetBName ( ar_dep1 , Farmer1 ) ;
 731: LD_INT 64
 733: PPUSH
 734: LD_STRING Farmer1
 736: PPUSH
 737: CALL_OW 500
// SetBName ( ar_dep2 , Farmer2 ) ;
 741: LD_INT 39
 743: PPUSH
 744: LD_STRING Farmer2
 746: PPUSH
 747: CALL_OW 500
// if Difficulty = 2 then
 751: LD_OWVAR 67
 755: PUSH
 756: LD_INT 2
 758: EQUAL
 759: IFFALSE 775
// begin RemoveUnit ( ar_arm2 ) ;
 761: LD_INT 10
 763: PPUSH
 764: CALL_OW 64
// RemoveUnit ( tower_dif ) ;
 768: LD_INT 96
 770: PPUSH
 771: CALL_OW 64
// end ; if Difficulty = 3 then
 775: LD_OWVAR 67
 779: PUSH
 780: LD_INT 3
 782: EQUAL
 783: IFFALSE 806
// begin RemoveUnit ( ar_arm1 ) ;
 785: LD_INT 61
 787: PPUSH
 788: CALL_OW 64
// RemoveUnit ( ar_arm2 ) ;
 792: LD_INT 10
 794: PPUSH
 795: CALL_OW 64
// RemoveUnit ( tower_dif ) ;
 799: LD_INT 96
 801: PPUSH
 802: CALL_OW 64
// end ; uc_side = 8 ;
 806: LD_ADDR_OWVAR 20
 810: PUSH
 811: LD_INT 8
 813: ST_TO_ADDR
// uc_nation = 2 ;
 814: LD_ADDR_OWVAR 21
 818: PUSH
 819: LD_INT 2
 821: ST_TO_ADDR
// hc_class = 1 ;
 822: LD_ADDR_OWVAR 28
 826: PUSH
 827: LD_INT 1
 829: ST_TO_ADDR
// hc_name = Dietrich Gensher ;
 830: LD_ADDR_OWVAR 26
 834: PUSH
 835: LD_STRING Dietrich Gensher
 837: ST_TO_ADDR
// hc_gallery = sandar ;
 838: LD_ADDR_OWVAR 33
 842: PUSH
 843: LD_STRING sandar
 845: ST_TO_ADDR
// hc_face_number = 3 ;
 846: LD_ADDR_OWVAR 34
 850: PUSH
 851: LD_INT 3
 853: ST_TO_ADDR
// hc_sex = sex_male ;
 854: LD_ADDR_OWVAR 27
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// Gensher = CreateHuman ;
 862: LD_ADDR_EXP 24
 866: PUSH
 867: CALL_OW 44
 871: ST_TO_ADDR
// uc_side = 5 ;
 872: LD_ADDR_OWVAR 20
 876: PUSH
 877: LD_INT 5
 879: ST_TO_ADDR
// uc_nation = 2 ;
 880: LD_ADDR_OWVAR 21
 884: PUSH
 885: LD_INT 2
 887: ST_TO_ADDR
// hc_class = 1 ;
 888: LD_ADDR_OWVAR 28
 892: PUSH
 893: LD_INT 1
 895: ST_TO_ADDR
// hc_name = Robert Farmer ;
 896: LD_ADDR_OWVAR 26
 900: PUSH
 901: LD_STRING Robert Farmer
 903: ST_TO_ADDR
// hc_gallery = sandar ;
 904: LD_ADDR_OWVAR 33
 908: PUSH
 909: LD_STRING sandar
 911: ST_TO_ADDR
// hc_face_number = 4 ;
 912: LD_ADDR_OWVAR 34
 916: PUSH
 917: LD_INT 4
 919: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 1 , 0 ] ;
 920: LD_ADDR_OWVAR 31
 924: PUSH
 925: LD_INT 4
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: LD_INT 1
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: ST_TO_ADDR
// hc_sex = sex_male ;
 943: LD_ADDR_OWVAR 27
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
 951: LD_ADDR_OWVAR 29
 955: PUSH
 956: LD_INT 9
 958: PUSH
 959: LD_INT 10
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// Farmer = CreateHuman ;
 966: LD_ADDR_EXP 23
 970: PUSH
 971: CALL_OW 44
 975: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 78 , 71 , false ) ;
 976: LD_EXP 23
 980: PPUSH
 981: LD_INT 78
 983: PPUSH
 984: LD_INT 71
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 48
// ComTurnXY ( Farmer , 77 , 71 ) ;
 994: LD_EXP 23
 998: PPUSH
 999: LD_INT 77
1001: PPUSH
1002: LD_INT 71
1004: PPUSH
1005: CALL_OW 118
// l = 0 ;
1009: LD_ADDR_VAR 0 2
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// repeat begin hc_class = 2 ;
1017: LD_ADDR_OWVAR 28
1021: PUSH
1022: LD_INT 2
1024: ST_TO_ADDR
// hc_name =  ;
1025: LD_ADDR_OWVAR 26
1029: PUSH
1030: LD_STRING 
1032: ST_TO_ADDR
// hc_gallery =  ;
1033: LD_ADDR_OWVAR 33
1037: PUSH
1038: LD_STRING 
1040: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) , 0 , 0 ] ;
1041: LD_ADDR_OWVAR 30
1045: PUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: CALL_OW 12
1056: PUSH
1057: LD_INT 0
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 12
1067: PUSH
1068: LD_INT 0
1070: PUSH
1071: LD_INT 0
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) , Rand ( 3 , 4 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1080: LD_ADDR_OWVAR 31
1084: PUSH
1085: LD_INT 1
1087: PPUSH
1088: LD_INT 3
1090: PPUSH
1091: CALL_OW 12
1095: PUSH
1096: LD_INT 3
1098: PPUSH
1099: LD_INT 4
1101: PPUSH
1102: CALL_OW 12
1106: PUSH
1107: LD_INT 0
1109: PPUSH
1110: LD_INT 2
1112: PPUSH
1113: CALL_OW 12
1117: PUSH
1118: LD_INT 0
1120: PPUSH
1121: LD_INT 2
1123: PPUSH
1124: CALL_OW 12
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1135: LD_ADDR_OWVAR 27
1139: PUSH
1140: LD_INT 1
1142: PPUSH
1143: LD_INT 2
1145: PPUSH
1146: CALL_OW 12
1150: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 12 ) , Rand ( 10 , 12 ) ] ;
1151: LD_ADDR_OWVAR 29
1155: PUSH
1156: LD_INT 9
1158: PPUSH
1159: LD_INT 12
1161: PPUSH
1162: CALL_OW 12
1166: PUSH
1167: LD_INT 10
1169: PPUSH
1170: LD_INT 12
1172: PPUSH
1173: CALL_OW 12
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: ST_TO_ADDR
// un = CreateHuman ;
1182: LD_ADDR_VAR 0 3
1186: PUSH
1187: CALL_OW 44
1191: ST_TO_ADDR
// PlaceUnitArea ( un , Base , false ) ;
1192: LD_VAR 0 3
1196: PPUSH
1197: LD_INT 3
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// ComFree ( un ) ;
1207: LD_VAR 0 3
1211: PPUSH
1212: CALL_OW 139
// l = l + 1 ;
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_VAR 0 2
1225: PUSH
1226: LD_INT 1
1228: PLUS
1229: ST_TO_ADDR
// end until l = 3 ;
1230: LD_VAR 0 2
1234: PUSH
1235: LD_INT 3
1237: EQUAL
1238: IFFALSE 1017
// l = 0 ;
1240: LD_ADDR_VAR 0 2
1244: PUSH
1245: LD_INT 0
1247: ST_TO_ADDR
// repeat begin hc_class = 1 ;
1248: LD_ADDR_OWVAR 28
1252: PUSH
1253: LD_INT 1
1255: ST_TO_ADDR
// hc_name =  ;
1256: LD_ADDR_OWVAR 26
1260: PUSH
1261: LD_STRING 
1263: ST_TO_ADDR
// hc_gallery =  ;
1264: LD_ADDR_OWVAR 33
1268: PUSH
1269: LD_STRING 
1271: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 1 ) , 0 , 0 , 0 ] ;
1272: LD_ADDR_OWVAR 30
1276: PUSH
1277: LD_INT 0
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: CALL_OW 12
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1303: LD_ADDR_OWVAR 31
1307: PUSH
1308: LD_INT 1
1310: PPUSH
1311: LD_INT 3
1313: PPUSH
1314: CALL_OW 12
1318: PUSH
1319: LD_INT 0
1321: PPUSH
1322: LD_INT 3
1324: PPUSH
1325: CALL_OW 12
1329: PUSH
1330: LD_INT 0
1332: PPUSH
1333: LD_INT 2
1335: PPUSH
1336: CALL_OW 12
1340: PUSH
1341: LD_INT 0
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL_OW 12
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1358: LD_ADDR_OWVAR 27
1362: PUSH
1363: LD_INT 1
1365: PPUSH
1366: LD_INT 2
1368: PPUSH
1369: CALL_OW 12
1373: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 12 ) , Rand ( 10 , 12 ) ] ;
1374: LD_ADDR_OWVAR 29
1378: PUSH
1379: LD_INT 9
1381: PPUSH
1382: LD_INT 12
1384: PPUSH
1385: CALL_OW 12
1389: PUSH
1390: LD_INT 10
1392: PPUSH
1393: LD_INT 12
1395: PPUSH
1396: CALL_OW 12
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: ST_TO_ADDR
// un = CreateHuman ;
1405: LD_ADDR_VAR 0 3
1409: PUSH
1410: CALL_OW 44
1414: ST_TO_ADDR
// PlaceUnitArea ( un , Base , false ) ;
1415: LD_VAR 0 3
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: LD_INT 0
1425: PPUSH
1426: CALL_OW 49
// ComFree ( un ) ;
1430: LD_VAR 0 3
1434: PPUSH
1435: CALL_OW 139
// l = l + 1 ;
1439: LD_ADDR_VAR 0 2
1443: PUSH
1444: LD_VAR 0 2
1448: PUSH
1449: LD_INT 1
1451: PLUS
1452: ST_TO_ADDR
// end until l = 4 ;
1453: LD_VAR 0 2
1457: PUSH
1458: LD_INT 4
1460: EQUAL
1461: IFFALSE 1248
// end ;
1463: LD_VAR 0 1
1467: RET
// export function PrepareMartin ; begin
1468: LD_INT 0
1470: PPUSH
// uc_side = 2 ;
1471: LD_ADDR_OWVAR 20
1475: PUSH
1476: LD_INT 2
1478: ST_TO_ADDR
// uc_nation = 2 ;
1479: LD_ADDR_OWVAR 21
1483: PUSH
1484: LD_INT 2
1486: ST_TO_ADDR
// hc_class = 2 ;
1487: LD_ADDR_OWVAR 28
1491: PUSH
1492: LD_INT 2
1494: ST_TO_ADDR
// hc_name = Martin Schmidt ;
1495: LD_ADDR_OWVAR 26
1499: PUSH
1500: LD_STRING Martin Schmidt
1502: ST_TO_ADDR
// hc_gallery = sandar ;
1503: LD_ADDR_OWVAR 33
1507: PUSH
1508: LD_STRING sandar
1510: ST_TO_ADDR
// hc_face_number = 10 ;
1511: LD_ADDR_OWVAR 34
1515: PUSH
1516: LD_INT 10
1518: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
1519: LD_ADDR_OWVAR 30
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: LD_INT 2
1532: PUSH
1533: LD_INT 1
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: ST_TO_ADDR
// hc_skills = [ 0 , 3 , 3 , 3 ] ;
1542: LD_ADDR_OWVAR 31
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: ST_TO_ADDR
// hc_sex = sex_male ;
1565: LD_ADDR_OWVAR 27
1569: PUSH
1570: LD_INT 1
1572: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
1573: LD_ADDR_OWVAR 29
1577: PUSH
1578: LD_INT 11
1580: PUSH
1581: LD_INT 10
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: ST_TO_ADDR
// Martin = CreateHuman ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: CALL_OW 44
1597: ST_TO_ADDR
// PlaceUnitXY ( Martin , 39 , 49 , false ) ;
1598: LD_EXP 25
1602: PPUSH
1603: LD_INT 39
1605: PPUSH
1606: LD_INT 49
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 48
// ComFree ( Martin ) ;
1616: LD_EXP 25
1620: PPUSH
1621: CALL_OW 139
// end ; end_of_file
1625: LD_VAR 0 1
1629: RET
// export function MissionStart ; begin
1630: LD_INT 0
1632: PPUSH
// InGameOn ;
1633: CALL_OW 8
// CenterNowOnXY ( 130 , 74 ) ;
1637: LD_INT 130
1639: PPUSH
1640: LD_INT 74
1642: PPUSH
1643: CALL_OW 86
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) , 139 , 76 ) ;
1647: LD_INT 22
1649: PUSH
1650: LD_INT 2
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 69
1661: PPUSH
1662: LD_INT 139
1664: PPUSH
1665: LD_INT 76
1667: PPUSH
1668: CALL_OW 111
// ComMoveXY ( Karla , 140 , 77 ) ;
1672: LD_EXP 16
1676: PPUSH
1677: LD_INT 140
1679: PPUSH
1680: LD_INT 77
1682: PPUSH
1683: CALL_OW 111
// ComMoveXY ( Dwein , 141 , 79 ) ;
1687: LD_EXP 19
1691: PPUSH
1692: LD_INT 141
1694: PPUSH
1695: LD_INT 79
1697: PPUSH
1698: CALL_OW 111
// ComMoveXY ( Abdul , 142 , 76 ) ;
1702: LD_EXP 21
1706: PPUSH
1707: LD_INT 142
1709: PPUSH
1710: LD_INT 76
1712: PPUSH
1713: CALL_OW 111
// AddComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) , Louis ) ;
1717: LD_INT 22
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL_OW 69
1731: PPUSH
1732: LD_EXP 15
1736: PPUSH
1737: CALL_OW 179
// ComMoveXY ( Louis , 141 , 84 ) ;
1741: LD_EXP 15
1745: PPUSH
1746: LD_INT 141
1748: PPUSH
1749: LD_INT 84
1751: PPUSH
1752: CALL_OW 111
// AddComTurnUnit ( Louis , Abdul ) ;
1756: LD_EXP 15
1760: PPUSH
1761: LD_EXP 21
1765: PPUSH
1766: CALL_OW 179
// Wait ( 0 0$04 ) ;
1770: LD_INT 140
1772: PPUSH
1773: CALL_OW 67
// Say ( Louis , Dl-1 ) ;
1777: LD_EXP 15
1781: PPUSH
1782: LD_STRING Dl-1
1784: PPUSH
1785: CALL_OW 88
// Say ( Abdul , Da-1 ) ;
1789: LD_EXP 21
1793: PPUSH
1794: LD_STRING Da-1
1796: PPUSH
1797: CALL_OW 88
// if IsOk ( Mmark ) then
1801: LD_EXP 22
1805: PPUSH
1806: CALL_OW 302
1810: IFFALSE 1850
// begin Say ( Mmark , Dm-1 ) ;
1812: LD_EXP 22
1816: PPUSH
1817: LD_STRING Dm-1
1819: PPUSH
1820: CALL_OW 88
// Say ( Louis , Dl-2a ) ;
1824: LD_EXP 15
1828: PPUSH
1829: LD_STRING Dl-2a
1831: PPUSH
1832: CALL_OW 88
// Say ( Mmark , Dm-2 ) ;
1836: LD_EXP 22
1840: PPUSH
1841: LD_STRING Dm-2
1843: PPUSH
1844: CALL_OW 88
// end else
1848: GO 1874
// begin Say ( Dwein , Dd-1 ) ;
1850: LD_EXP 19
1854: PPUSH
1855: LD_STRING Dd-1
1857: PPUSH
1858: CALL_OW 88
// Say ( Louis , Dl-2b ) ;
1862: LD_EXP 15
1866: PPUSH
1867: LD_STRING Dl-2b
1869: PPUSH
1870: CALL_OW 88
// end ; if IsOk ( Karla ) then
1874: LD_EXP 16
1878: PPUSH
1879: CALL_OW 302
1883: IFFALSE 1899
// begin Say ( Karla , Dk-1 ) ;
1885: LD_EXP 16
1889: PPUSH
1890: LD_STRING Dk-1
1892: PPUSH
1893: CALL_OW 88
// end else
1897: GO 1911
// begin Say ( Louis , Dk-1 ) ;
1899: LD_EXP 15
1903: PPUSH
1904: LD_STRING Dk-1
1906: PPUSH
1907: CALL_OW 88
// end ; Say ( Abdul , Da-2 ) ;
1911: LD_EXP 21
1915: PPUSH
1916: LD_STRING Da-2
1918: PPUSH
1919: CALL_OW 88
// InGameOff ;
1923: CALL_OW 9
// SaveForQuickRestart ;
1927: CALL_OW 22
// ChangeMissionObjectives ( FindBase ) ;
1931: LD_STRING FindBase
1933: PPUSH
1934: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
1938: LD_INT 22
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PPUSH
1948: CALL_OW 69
1952: PPUSH
1953: CALL_OW 139
// end ;
1957: LD_VAR 0 1
1961: RET
// every 0 0$01 trigger GetDistUnits ( Louis , Farmer ) < 5 do var Team , Arabs2 , Arabs5 , FarmerGroup , the_team , un , eng ;
1962: LD_EXP 15
1966: PPUSH
1967: LD_EXP 23
1971: PPUSH
1972: CALL_OW 296
1976: PUSH
1977: LD_INT 5
1979: LESS
1980: IFFALSE 2956
1982: GO 1984
1984: DISABLE
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
1990: PPUSH
1991: PPUSH
1992: PPUSH
1993: PPUSH
// begin InGameOn ;
1994: CALL_OW 8
// ISeeBase ;
1998: CALL 8023 0 0
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
2002: LD_INT 22
2004: PUSH
2005: LD_INT 2
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: CALL_OW 139
// ComTurnUnit ( Louis , Farmer ) ;
2021: LD_EXP 15
2025: PPUSH
2026: LD_EXP 23
2030: PPUSH
2031: CALL_OW 119
// ComTurnUnit ( Farmer , Louis ) ;
2035: LD_EXP 23
2039: PPUSH
2040: LD_EXP 15
2044: PPUSH
2045: CALL_OW 119
// Say ( Farmer , DF-1 ) ;
2049: LD_EXP 23
2053: PPUSH
2054: LD_STRING DF-1
2056: PPUSH
2057: CALL_OW 88
// Say ( Louis , Dl-1F ) ;
2061: LD_EXP 15
2065: PPUSH
2066: LD_STRING Dl-1F
2068: PPUSH
2069: CALL_OW 88
// Say ( Farmer , DF-2 ) ;
2073: LD_EXP 23
2077: PPUSH
2078: LD_STRING DF-2
2080: PPUSH
2081: CALL_OW 88
// Say ( Louis , Dl-2F ) ;
2085: LD_EXP 15
2089: PPUSH
2090: LD_STRING Dl-2F
2092: PPUSH
2093: CALL_OW 88
// Say ( Farmer , DF-3 ) ;
2097: LD_EXP 23
2101: PPUSH
2102: LD_STRING DF-3
2104: PPUSH
2105: CALL_OW 88
// Say ( Louis , Dl-3F ) ;
2109: LD_EXP 15
2113: PPUSH
2114: LD_STRING Dl-3F
2116: PPUSH
2117: CALL_OW 88
// Say ( Farmer , DF-4 ) ;
2121: LD_EXP 23
2125: PPUSH
2126: LD_STRING DF-4
2128: PPUSH
2129: CALL_OW 88
// Say ( Farmer , DF-5 ) ;
2133: LD_EXP 23
2137: PPUSH
2138: LD_STRING DF-5
2140: PPUSH
2141: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
2145: LD_INT 7
2147: PPUSH
2148: CALL_OW 67
// Say ( Farmer , DF-6 ) ;
2152: LD_EXP 23
2156: PPUSH
2157: LD_STRING DF-6
2159: PPUSH
2160: CALL_OW 88
// Say ( Louis , Dl-4F ) ;
2164: LD_EXP 15
2168: PPUSH
2169: LD_STRING Dl-4F
2171: PPUSH
2172: CALL_OW 88
// Say ( Farmer , DF-7 ) ;
2176: LD_EXP 23
2180: PPUSH
2181: LD_STRING DF-7
2183: PPUSH
2184: CALL_OW 88
// Say ( Louis , Dl-5F ) ;
2188: LD_EXP 15
2192: PPUSH
2193: LD_STRING Dl-5F
2195: PPUSH
2196: CALL_OW 88
// Say ( Farmer , DF-8 ) ;
2200: LD_EXP 23
2204: PPUSH
2205: LD_STRING DF-8
2207: PPUSH
2208: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
2212: LD_INT 18
2214: PPUSH
2215: CALL_OW 67
// SayRadio ( Gensher , DG-1 ) ;
2219: LD_EXP 24
2223: PPUSH
2224: LD_STRING DG-1
2226: PPUSH
2227: CALL_OW 94
// Say ( Farmer , DF-1G ) ;
2231: LD_EXP 23
2235: PPUSH
2236: LD_STRING DF-1G
2238: PPUSH
2239: CALL_OW 88
// Say ( Farmer , DF-2G ) ;
2243: LD_EXP 23
2247: PPUSH
2248: LD_STRING DF-2G
2250: PPUSH
2251: CALL_OW 88
// SayRadio ( Gensher , DG-2 ) ;
2255: LD_EXP 24
2259: PPUSH
2260: LD_STRING DG-2
2262: PPUSH
2263: CALL_OW 94
// Say ( Farmer , DF-3G ) ;
2267: LD_EXP 23
2271: PPUSH
2272: LD_STRING DF-3G
2274: PPUSH
2275: CALL_OW 88
// Say ( Louis , Dl-2G ) ;
2279: LD_EXP 15
2283: PPUSH
2284: LD_STRING Dl-2G
2286: PPUSH
2287: CALL_OW 88
// Say ( Farmer , DF-4G ) ;
2291: LD_EXP 23
2295: PPUSH
2296: LD_STRING DF-4G
2298: PPUSH
2299: CALL_OW 88
// InGameOff ;
2303: CALL_OW 9
// PrepareMartin ;
2307: CALL 1468 0 0
// Arabs5 := FilterAllUnits ( [ f_side , 5 ] ) ;
2311: LD_ADDR_VAR 0 3
2315: PUSH
2316: LD_INT 22
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PPUSH
2326: CALL_OW 69
2330: ST_TO_ADDR
// SetSide ( Arabs5 , 2 ) ;
2331: LD_VAR 0 3
2335: PPUSH
2336: LD_INT 2
2338: PPUSH
2339: CALL_OW 235
// SetSide ( Farmer , 5 ) ;
2343: LD_EXP 23
2347: PPUSH
2348: LD_INT 5
2350: PPUSH
2351: CALL_OW 235
// SetSide ( Abdul , 5 ) ;
2355: LD_EXP 21
2359: PPUSH
2360: LD_INT 5
2362: PPUSH
2363: CALL_OW 235
// Arabs2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Louis , Martin ] ;
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_INT 22
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 21
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PPUSH
2396: CALL_OW 69
2400: PUSH
2401: LD_EXP 15
2405: PUSH
2406: LD_EXP 25
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: DIFF
2415: ST_TO_ADDR
// Team := CharacterSelection ( text , [ 5 , 5 , 6 ] [ Difficulty ] , [ 7 , 7 , 8 ] [ Difficulty ] , [ sel_change_class , Louis , Martin , sel_changeable , sel_not_hired ] ^ Arabs2 ^ [ sel_not_changeable , Farmer , Abdul ] , [ [ 1 , 2 ] , [ 2 , 1 ] ] ) ;
2416: LD_ADDR_VAR 0 1
2420: PUSH
2421: LD_STRING text
2423: PPUSH
2424: LD_INT 5
2426: PUSH
2427: LD_INT 5
2429: PUSH
2430: LD_INT 6
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: LD_OWVAR 67
2442: ARRAY
2443: PPUSH
2444: LD_INT 7
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 8
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_OWVAR 67
2462: ARRAY
2463: PPUSH
2464: LD_INT -5
2466: PUSH
2467: LD_EXP 15
2471: PUSH
2472: LD_EXP 25
2476: PUSH
2477: LD_INT -3
2479: PUSH
2480: LD_INT -2
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: PUSH
2490: LD_VAR 0 2
2494: ADD
2495: PUSH
2496: LD_INT -4
2498: PUSH
2499: LD_EXP 23
2503: PUSH
2504: LD_EXP 21
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: ADD
2514: PPUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 2
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 42
2543: ST_TO_ADDR
// SetSide ( Team , 2 ) ;
2544: LD_VAR 0 1
2548: PPUSH
2549: LD_INT 2
2551: PPUSH
2552: CALL_OW 235
// SetSide ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Team , 5 ) ;
2556: LD_INT 22
2558: PUSH
2559: LD_INT 2
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 21
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 69
2584: PUSH
2585: LD_VAR 0 1
2589: DIFF
2590: PPUSH
2591: LD_INT 5
2593: PPUSH
2594: CALL_OW 235
// SetSide ( Louis , 2 ) ;
2598: LD_EXP 15
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: CALL_OW 235
// SetSide ( Martin , 2 ) ;
2610: LD_EXP 25
2614: PPUSH
2615: LD_INT 2
2617: PPUSH
2618: CALL_OW 235
// FarmerGroup := FilterAllUnits ( [ f_side , 5 ] ) ;
2622: LD_ADDR_VAR 0 4
2626: PUSH
2627: LD_INT 22
2629: PUSH
2630: LD_INT 5
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 69
2641: ST_TO_ADDR
// Say ( Farmer , Goodbye ) ;
2642: LD_EXP 23
2646: PPUSH
2647: LD_STRING Goodbye
2649: PPUSH
2650: CALL_OW 88
// ComMoveXY ( FarmerGroup , 53 , 104 ) ;
2654: LD_VAR 0 4
2658: PPUSH
2659: LD_INT 53
2661: PPUSH
2662: LD_INT 104
2664: PPUSH
2665: CALL_OW 111
// enable ( 01 ) ;
2669: LD_INT 1
2671: ENABLE_MARKED
// Wait ( 0 0$03 ) ;
2672: LD_INT 105
2674: PPUSH
2675: CALL_OW 67
// InGameOn ;
2679: CALL_OW 8
// SayRadio ( Gensher , DG-1m ) ;
2683: LD_EXP 24
2687: PPUSH
2688: LD_STRING DG-1m
2690: PPUSH
2691: CALL_OW 94
// Say ( Louis , DL-1l ) ;
2695: LD_EXP 15
2699: PPUSH
2700: LD_STRING DL-1l
2702: PPUSH
2703: CALL_OW 88
// SayRadio ( Gensher , DG-2m ) ;
2707: LD_EXP 24
2711: PPUSH
2712: LD_STRING DG-2m
2714: PPUSH
2715: CALL_OW 94
// Say ( Louis , DL-2l ) ;
2719: LD_EXP 15
2723: PPUSH
2724: LD_STRING DL-2l
2726: PPUSH
2727: CALL_OW 88
// SayRadio ( Gensher , DG-3m ) ;
2731: LD_EXP 24
2735: PPUSH
2736: LD_STRING DG-3m
2738: PPUSH
2739: CALL_OW 94
// InGameOff ;
2743: CALL_OW 9
// Wait ( 0 0$0.3 ) ;
2747: LD_INT 10
2749: PPUSH
2750: CALL_OW 67
// ChangeMissionObjectives ( DefendBase ) ;
2754: LD_STRING DefendBase
2756: PPUSH
2757: CALL_OW 337
// Wait ( 0 0$02 ) ;
2761: LD_INT 70
2763: PPUSH
2764: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
2768: LD_ADDR_VAR 0 7
2772: PUSH
2773: LD_INT 22
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 25
2785: PUSH
2786: LD_INT 2
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PPUSH
2797: CALL_OW 69
2801: ST_TO_ADDR
// Say ( Louis , Dl-build1 ) ;
2802: LD_EXP 15
2806: PPUSH
2807: LD_STRING Dl-build1
2809: PPUSH
2810: CALL_OW 88
// un := eng [ Rand ( 1 , eng ) ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_VAR 0 7
2823: PUSH
2824: LD_INT 1
2826: PPUSH
2827: LD_VAR 0 7
2831: PPUSH
2832: CALL_OW 12
2836: ARRAY
2837: ST_TO_ADDR
// Say ( un , Du-build1 ) ;
2838: LD_VAR 0 6
2842: PPUSH
2843: LD_STRING Du-build1
2845: PPUSH
2846: CALL_OW 88
// un := eng [ Rand ( 1 , eng ) ] ;
2850: LD_ADDR_VAR 0 6
2854: PUSH
2855: LD_VAR 0 7
2859: PUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_VAR 0 7
2867: PPUSH
2868: CALL_OW 12
2872: ARRAY
2873: ST_TO_ADDR
// Say ( un , Du-build2 ) ;
2874: LD_VAR 0 6
2878: PPUSH
2879: LD_STRING Du-build2
2881: PPUSH
2882: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2886: LD_INT 10
2888: PPUSH
2889: CALL_OW 67
// ChangeMissionObjectives ( BuildLab ) ;
2893: LD_STRING BuildLab
2895: PPUSH
2896: CALL_OW 337
// SetRestrict ( 6 , 2 , state_enabled ) ;
2900: LD_INT 6
2902: PPUSH
2903: LD_INT 2
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: CALL_OW 324
// SetTech ( 48 , 2 , state_enabled ) ;
2913: LD_INT 48
2915: PPUSH
2916: LD_INT 2
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: CALL_OW 322
// FarmerGone = true ;
2926: LD_ADDR_EXP 2
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// RussianTimeStart = true ;
2934: LD_ADDR_EXP 1
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// Hint ( Hill ) ;
2942: LD_STRING Hill
2944: PPUSH
2945: CALL_OW 339
// Hint ( Oil ) ;
2949: LD_STRING Oil
2951: PPUSH
2952: CALL_OW 339
// end ;
2956: PPOPN 7
2958: END
// every 0 0$01 trigger GetSide ( ar_dep1 ) = 2 marked 01 do
2959: LD_INT 64
2961: PPUSH
2962: CALL_OW 255
2966: PUSH
2967: LD_INT 2
2969: EQUAL
2970: IFFALSE 3203
2972: GO 2974
2974: DISABLE
// begin if GetSide ( Karla ) = 5 and IsOK ( Karla ) then
2975: LD_EXP 16
2979: PPUSH
2980: CALL_OW 255
2984: PUSH
2985: LD_INT 5
2987: EQUAL
2988: PUSH
2989: LD_EXP 16
2993: PPUSH
2994: CALL_OW 302
2998: AND
2999: IFFALSE 3013
// begin SaveCharacters ( Karla , Karla_02_FarmerTeam ) ;
3001: LD_EXP 16
3005: PPUSH
3006: LD_STRING Karla_02_FarmerTeam
3008: PPUSH
3009: CALL_OW 38
// end ; if GetSide ( Dwein ) = 5 and IsOK ( Dwein ) then
3013: LD_EXP 19
3017: PPUSH
3018: CALL_OW 255
3022: PUSH
3023: LD_INT 5
3025: EQUAL
3026: PUSH
3027: LD_EXP 19
3031: PPUSH
3032: CALL_OW 302
3036: AND
3037: IFFALSE 3051
// begin SaveCharacters ( Dwein , Dwein_02_FarmerTeam ) ;
3039: LD_EXP 19
3043: PPUSH
3044: LD_STRING Dwein_02_FarmerTeam
3046: PPUSH
3047: CALL_OW 38
// end ; if GetSide ( Gunther ) = 5 and IsOK ( Gunther ) then
3051: LD_EXP 20
3055: PPUSH
3056: CALL_OW 255
3060: PUSH
3061: LD_INT 5
3063: EQUAL
3064: PUSH
3065: LD_EXP 20
3069: PPUSH
3070: CALL_OW 302
3074: AND
3075: IFFALSE 3089
// begin SaveCharacters ( Gunther , Gunther_02_FarmerTeam ) ;
3077: LD_EXP 20
3081: PPUSH
3082: LD_STRING Gunther_02_FarmerTeam
3084: PPUSH
3085: CALL_OW 38
// end ; if GetSide ( Olaf ) = 5 and IsOK ( Olaf ) then
3089: LD_EXP 18
3093: PPUSH
3094: CALL_OW 255
3098: PUSH
3099: LD_INT 5
3101: EQUAL
3102: PUSH
3103: LD_EXP 18
3107: PPUSH
3108: CALL_OW 302
3112: AND
3113: IFFALSE 3127
// begin SaveCharacters ( Olaf , Olaf_02_FarmerTeam ) ;
3115: LD_EXP 18
3119: PPUSH
3120: LD_STRING Olaf_02_FarmerTeam
3122: PPUSH
3123: CALL_OW 38
// end ; if GetSide ( Joachim ) = 5 and IsOK ( Joachim ) then
3127: LD_EXP 17
3131: PPUSH
3132: CALL_OW 255
3136: PUSH
3137: LD_INT 5
3139: EQUAL
3140: PUSH
3141: LD_EXP 17
3145: PPUSH
3146: CALL_OW 302
3150: AND
3151: IFFALSE 3165
// begin SaveCharacters ( Joachim , Joachim_02_FarmerTeam ) ;
3153: LD_EXP 17
3157: PPUSH
3158: LD_STRING Joachim_02_FarmerTeam
3160: PPUSH
3161: CALL_OW 38
// end ; if GetSide ( Mmark ) = 5 and IsOK ( Mmark ) then
3165: LD_EXP 22
3169: PPUSH
3170: CALL_OW 255
3174: PUSH
3175: LD_INT 5
3177: EQUAL
3178: PUSH
3179: LD_EXP 22
3183: PPUSH
3184: CALL_OW 302
3188: AND
3189: IFFALSE 3203
// begin SaveCharacters ( Mmark , Mark_02_FarmerTeam ) ;
3191: LD_EXP 22
3195: PPUSH
3196: LD_STRING Mark_02_FarmerTeam
3198: PPUSH
3199: CALL_OW 38
// end ; end ;
3203: END
// every 0 0$03 trigger FilterUnitsInArea ( tigerevent , [ [ f_class , 2 ] , [ f_ok ] ] ) do
3204: LD_INT 17
3206: PPUSH
3207: LD_INT 25
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 50
3219: PUSH
3220: EMPTY
3221: LIST
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: IFFALSE 3287
3233: GO 3235
3235: DISABLE
// begin Say ( FilterUnitsInArea ( tigerevent , [ [ f_class , 2 ] , [ f_ok ] ] ) [ 1 ] , D-TE ) ;
3236: LD_INT 17
3238: PPUSH
3239: LD_INT 25
3241: PUSH
3242: LD_INT 2
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 50
3251: PUSH
3252: EMPTY
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 70
3263: PUSH
3264: LD_INT 1
3266: ARRAY
3267: PPUSH
3268: LD_STRING D-TE
3270: PPUSH
3271: CALL_OW 88
// Say ( Louis , D-TE2 ) ;
3275: LD_EXP 15
3279: PPUSH
3280: LD_STRING D-TE2
3282: PPUSH
3283: CALL_OW 88
// end ;
3287: END
// every 0 0$01 marked 01 do var list , un ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
// begin enable ;
3295: ENABLE
// list = FilterAllUnits ( [ f_side , 5 ] ) ;
3296: LD_ADDR_VAR 0 1
3300: PUSH
3301: LD_INT 22
3303: PUSH
3304: LD_INT 5
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PPUSH
3311: CALL_OW 69
3315: ST_TO_ADDR
// un = list [ Rand ( 1 , list ) ] ;
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: LD_VAR 0 1
3325: PUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 12
3338: ARRAY
3339: ST_TO_ADDR
// if IsInArea ( un , River ) then
3340: LD_VAR 0 2
3344: PPUSH
3345: LD_INT 4
3347: PPUSH
3348: CALL_OW 308
3352: IFFALSE 3363
// RemoveUnit ( un ) ;
3354: LD_VAR 0 2
3358: PPUSH
3359: CALL_OW 64
// if FilterAllUnits ( [ f_side , 5 ] ) = 0 then
3363: LD_INT 22
3365: PUSH
3366: LD_INT 5
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: PUSH
3378: LD_INT 0
3380: EQUAL
3381: IFFALSE 3386
// disable ( 01 ) ;
3383: LD_INT 1
3385: DISABLE_MARKED
// end ;
3386: PPOPN 2
3388: END
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 do
3389: LD_INT 22
3391: PUSH
3392: LD_INT 3
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PUSH
3404: LD_INT 0
3406: GREATER
3407: IFFALSE 3432
3409: GO 3411
3411: DISABLE
// begin SayRadio ( Gensher , AttackCome ) ;
3412: LD_EXP 24
3416: PPUSH
3417: LD_STRING AttackCome
3419: PPUSH
3420: CALL_OW 94
// RussianIsHere = true ;
3424: LD_ADDR_EXP 11
3428: PUSH
3429: LD_INT 1
3431: ST_TO_ADDR
// end ;
3432: END
// every 0 0$03 trigger RussianIsHere = true and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var hum ;
3433: LD_EXP 11
3437: PUSH
3438: LD_INT 1
3440: EQUAL
3441: PUSH
3442: LD_INT 22
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 21
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 69
3470: PUSH
3471: LD_INT 0
3473: EQUAL
3474: AND
3475: IFFALSE 3621
3477: GO 3479
3479: DISABLE
3480: LD_INT 0
3482: PPUSH
// begin hum = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Louis ;
3483: LD_ADDR_VAR 0 1
3487: PUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 2
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 25
3500: PUSH
3501: LD_INT 1
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PPUSH
3512: CALL_OW 69
3516: PUSH
3517: LD_EXP 15
3521: DIFF
3522: ST_TO_ADDR
// if IsLive ( Louis ) then
3523: LD_EXP 15
3527: PPUSH
3528: CALL_OW 300
3532: IFFALSE 3538
// DialogueOn ;
3534: CALL_OW 6
// DWait ( 0 0$0.2 ) ;
3538: LD_INT 7
3540: PPUSH
3541: CALL_OW 68
// Say ( Louis , RuAttack1 ) ;
3545: LD_EXP 15
3549: PPUSH
3550: LD_STRING RuAttack1
3552: PPUSH
3553: CALL_OW 88
// Say ( hum [ Rand ( 1 , 2 ) ] , RuAttack2 ) ;
3557: LD_VAR 0 1
3561: PUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 12
3572: ARRAY
3573: PPUSH
3574: LD_STRING RuAttack2
3576: PPUSH
3577: CALL_OW 88
// Say ( hum [ Rand ( 3 , 4 ) ] , RuAttack3 ) ;
3581: LD_VAR 0 1
3585: PUSH
3586: LD_INT 3
3588: PPUSH
3589: LD_INT 4
3591: PPUSH
3592: CALL_OW 12
3596: ARRAY
3597: PPUSH
3598: LD_STRING RuAttack3
3600: PPUSH
3601: CALL_OW 88
// Say ( Louis , RuAttack4 ) ;
3605: LD_EXP 15
3609: PPUSH
3610: LD_STRING RuAttack4
3612: PPUSH
3613: CALL_OW 88
// DialogueOff ;
3617: CALL_OW 7
// end ;
3621: PPOPN 1
3623: END
// every 0 0$35 trigger Counter > 9 9$00 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
3624: LD_EXP 13
3628: PUSH
3629: LD_INT 18900
3631: GREATER
3632: PUSH
3633: LD_INT 22
3635: PUSH
3636: LD_INT 3
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: PUSH
3648: LD_INT 0
3650: EQUAL
3651: AND
3652: IFFALSE 3661
3654: GO 3656
3656: DISABLE
// begin PrepareAmericanInMyBase ;
3657: CALL 8118 0 0
// end ;
3661: END
// export Spy ; every 1 1$10 trigger Counter > 16 16$0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var ar_units ;
3662: LD_EXP 13
3666: PUSH
3667: LD_INT 33600
3669: GREATER
3670: PUSH
3671: LD_INT 22
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PPUSH
3681: CALL_OW 69
3685: PUSH
3686: LD_INT 0
3688: EQUAL
3689: AND
3690: IFFALSE 4067
3692: GO 3694
3694: DISABLE
3695: LD_INT 0
3697: PPUSH
// begin ar_units = FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ] ) diff [ Louis , Martin , Mmark , Karla , Joachim , Olaf , Dwein , Gunther ] ;
3698: LD_ADDR_VAR 0 1
3702: PUSH
3703: LD_INT 22
3705: PUSH
3706: LD_INT 2
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 21
3715: PUSH
3716: LD_INT 1
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 50
3725: PUSH
3726: EMPTY
3727: LIST
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: PPUSH
3737: CALL_OW 69
3741: PUSH
3742: LD_EXP 15
3746: PUSH
3747: LD_EXP 25
3751: PUSH
3752: LD_EXP 22
3756: PUSH
3757: LD_EXP 16
3761: PUSH
3762: LD_EXP 17
3766: PUSH
3767: LD_EXP 18
3771: PUSH
3772: LD_EXP 19
3776: PUSH
3777: LD_EXP 20
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: DIFF
3792: ST_TO_ADDR
// spy := ar_units [ Rand ( 1 , ar_units ) ] ;
3793: LD_ADDR_EXP 26
3797: PUSH
3798: LD_VAR 0 1
3802: PUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 12
3815: ARRAY
3816: ST_TO_ADDR
// InGameOn ;
3817: CALL_OW 8
// DialogueOn ;
3821: CALL_OW 6
// Say ( Spy , DM-MG1 ) ;
3825: LD_EXP 26
3829: PPUSH
3830: LD_STRING DM-MG1
3832: PPUSH
3833: CALL_OW 88
// case Query ( SpyQ ) of 1 :
3837: LD_STRING SpyQ
3839: PPUSH
3840: CALL_OW 97
3844: PUSH
3845: LD_INT 1
3847: DOUBLE
3848: EQUAL
3849: IFTRUE 3853
3851: GO 4035
3853: POP
// begin Say ( Louis , DL-MG2 ) ;
3854: LD_EXP 15
3858: PPUSH
3859: LD_STRING DL-MG2
3861: PPUSH
3862: CALL_OW 88
// Say ( Spy , DM-MG2 ) ;
3866: LD_EXP 26
3870: PPUSH
3871: LD_STRING DM-MG2
3873: PPUSH
3874: CALL_OW 88
// DialogueOff ;
3878: CALL_OW 7
// InGameOff ;
3882: CALL_OW 9
// SetSide ( Spy , 5 ) ;
3886: LD_EXP 26
3890: PPUSH
3891: LD_INT 5
3893: PPUSH
3894: CALL_OW 235
// ComExitBuilding ( Spy ) ;
3898: LD_EXP 26
3902: PPUSH
3903: CALL_OW 122
// ComExitVehicle ( Spy ) ;
3907: LD_EXP 26
3911: PPUSH
3912: CALL_OW 121
// if GetClass ( Spy ) > 1 then
3916: LD_EXP 26
3920: PPUSH
3921: CALL_OW 257
3925: PUSH
3926: LD_INT 1
3928: GREATER
3929: IFFALSE 3970
// begin ComMoveXY ( Spy , 80 , 71 ) ;
3931: LD_EXP 26
3935: PPUSH
3936: LD_INT 80
3938: PPUSH
3939: LD_INT 71
3941: PPUSH
3942: CALL_OW 111
// AddComWait ( Spy , 0 0$02 ) ;
3946: LD_EXP 26
3950: PPUSH
3951: LD_INT 70
3953: PPUSH
3954: CALL_OW 202
// SetClass ( Spy , 1 ) ;
3958: LD_EXP 26
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: CALL_OW 336
// end ; AddComMoveXY ( Spy , 45 , 86 ) ;
3970: LD_EXP 26
3974: PPUSH
3975: LD_INT 45
3977: PPUSH
3978: LD_INT 86
3980: PPUSH
3981: CALL_OW 171
// AddComHold ( Spy ) ;
3985: LD_EXP 26
3989: PPUSH
3990: CALL_OW 200
// AddComWait ( Spy , 0 0$25 ) ;
3994: LD_EXP 26
3998: PPUSH
3999: LD_INT 875
4001: PPUSH
4002: CALL_OW 202
// AddComMoveToArea ( Spy , SB ) ;
4006: LD_EXP 26
4010: PPUSH
4011: LD_INT 6
4013: PPUSH
4014: CALL_OW 173
// Wait ( 0 0$10 ) ;
4018: LD_INT 350
4020: PPUSH
4021: CALL_OW 67
// SpyIsHere = true ;
4025: LD_ADDR_EXP 14
4029: PUSH
4030: LD_INT 1
4032: ST_TO_ADDR
// end ; 2 :
4033: GO 4067
4035: LD_INT 2
4037: DOUBLE
4038: EQUAL
4039: IFTRUE 4043
4041: GO 4066
4043: POP
// begin Say ( Louis , DL-MG3 ) ;
4044: LD_EXP 15
4048: PPUSH
4049: LD_STRING DL-MG3
4051: PPUSH
4052: CALL_OW 88
// DialogueOff ;
4056: CALL_OW 7
// InGameOff ;
4060: CALL_OW 9
// end ; end ;
4064: GO 4067
4066: POP
// end ;
4067: PPOPN 1
4069: END
// every 0 0$01 trigger IsInArea ( Spy , SB ) and SpyIsHere = true do
4070: LD_EXP 26
4074: PPUSH
4075: LD_INT 6
4077: PPUSH
4078: CALL_OW 308
4082: PUSH
4083: LD_EXP 14
4087: PUSH
4088: LD_INT 1
4090: EQUAL
4091: AND
4092: IFFALSE 4109
4094: GO 4096
4096: DISABLE
// begin SetSide ( Spy , 2 ) ;
4097: LD_EXP 26
4101: PPUSH
4102: LD_INT 2
4104: PPUSH
4105: CALL_OW 235
// end ;
4109: END
// every 0 0$0.2 do var list , enemy ;
4110: GO 4112
4112: DISABLE
4113: LD_INT 0
4115: PPUSH
4116: PPUSH
// begin list = FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 2 ] ] ) ;
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 22
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 101
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PPUSH
4146: CALL_OW 69
4150: ST_TO_ADDR
// if list = 0 then
4151: LD_VAR 0 1
4155: PUSH
4156: LD_INT 0
4158: EQUAL
4159: IFFALSE 4164
// begin enable ;
4161: ENABLE
// exit ;
4162: GO 4214
// end ; DialogueOn ;
4164: CALL_OW 6
// enemy = list [ 1 ] ;
4168: LD_ADDR_VAR 0 2
4172: PUSH
4173: LD_VAR 0 1
4177: PUSH
4178: LD_INT 1
4180: ARRAY
4181: ST_TO_ADDR
// CenterNowOnUnits ( enemy ) ;
4182: LD_VAR 0 2
4186: PPUSH
4187: CALL_OW 87
// DWait ( 0 0$0.2 ) ;
4191: LD_INT 7
4193: PPUSH
4194: CALL_OW 68
// Say ( Louis , enemy ) ;
4198: LD_EXP 15
4202: PPUSH
4203: LD_STRING enemy
4205: PPUSH
4206: CALL_OW 88
// DialogueOff ;
4210: CALL_OW 7
// end ;
4214: PPOPN 2
4216: END
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and RuDead > 0 do
4217: LD_INT 22
4219: PUSH
4220: LD_INT 3
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 0
4234: EQUAL
4235: PUSH
4236: LD_EXP 30
4240: PUSH
4241: LD_INT 0
4243: GREATER
4244: AND
4245: IFFALSE 4358
4247: GO 4249
4249: DISABLE
// begin PrepareRussianComand ;
4250: CALL 7908 0 0
// InGameOn ;
4254: CALL_OW 8
// DialogueOn ;
4258: CALL_OW 6
// CenterOnUnits ( Louis ) ;
4262: LD_EXP 15
4266: PPUSH
4267: CALL_OW 85
// Say ( Martin , RuD-1 ) ;
4271: LD_EXP 25
4275: PPUSH
4276: LD_STRING RuD-1
4278: PPUSH
4279: CALL_OW 88
// SayRadio ( Sejenevich , RuD-2 ) ;
4283: LD_EXP 32
4287: PPUSH
4288: LD_STRING RuD-2
4290: PPUSH
4291: CALL_OW 94
// SayRadio ( Lotysz , RuD-3 ) ;
4295: LD_EXP 31
4299: PPUSH
4300: LD_STRING RuD-3
4302: PPUSH
4303: CALL_OW 94
// SayRadio ( Sejenevich , RuD-4 ) ;
4307: LD_EXP 32
4311: PPUSH
4312: LD_STRING RuD-4
4314: PPUSH
4315: CALL_OW 94
// SayRadio ( Lotysz , RuD-5 ) ;
4319: LD_EXP 31
4323: PPUSH
4324: LD_STRING RuD-5
4326: PPUSH
4327: CALL_OW 94
// DWait ( 0 0$0.3 ) ;
4331: LD_INT 10
4333: PPUSH
4334: CALL_OW 68
// Say ( Louis , RuD-6 ) ;
4338: LD_EXP 15
4342: PPUSH
4343: LD_STRING RuD-6
4345: PPUSH
4346: CALL_OW 88
// DialogueOff ;
4350: CALL_OW 7
// InGameOff ;
4354: CALL_OW 9
// end ;
4358: END
// every 0 0$1 trigger Counter = MissEnd do
4359: LD_EXP 13
4363: PUSH
4364: LD_EXP 4
4368: EQUAL
4369: IFFALSE 4984
4371: GO 4373
4373: DISABLE
// begin RemoveUnit ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
4374: LD_INT 22
4376: PUSH
4377: LD_INT 3
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PPUSH
4384: CALL_OW 69
4388: PPUSH
4389: CALL_OW 64
// Wait ( 0 0$0.3 ) ;
4393: LD_INT 10
4395: PPUSH
4396: CALL_OW 67
// InGameOn ;
4400: CALL_OW 8
// CenterNowOnUnits ( Louis ) ;
4404: LD_EXP 15
4408: PPUSH
4409: CALL_OW 87
// DialogueOn ;
4413: CALL_OW 6
// SayRadio ( Gensher , FarmerCom ) ;
4417: LD_EXP 24
4421: PPUSH
4422: LD_STRING FarmerCom
4424: PPUSH
4425: CALL_OW 94
// music_nat = 4 ;
4429: LD_ADDR_OWVAR 71
4433: PUSH
4434: LD_INT 4
4436: ST_TO_ADDR
// if MedalAtVeh = false or FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_multimissile_ballista ] ] ) = 0 then
4437: LD_EXP 7
4441: PUSH
4442: LD_INT 0
4444: EQUAL
4445: PUSH
4446: LD_INT 22
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 34
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: CALL_OW 69
4474: PUSH
4475: LD_INT 0
4477: EQUAL
4478: OR
4479: IFFALSE 4492
// begin AddMedal ( vehicle , - 1 ) ;
4481: LD_STRING vehicle
4483: PPUSH
4484: LD_INT 1
4486: NEG
4487: PPUSH
4488: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_multimissile_ballista ] ] ) > 0 then
4492: LD_INT 22
4494: PUSH
4495: LD_INT 2
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 34
4504: PUSH
4505: LD_INT 22
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: GREATER
4524: IFFALSE 4538
// begin SaveVariable ( balista , vehready ) ;
4526: LD_EXP 28
4530: PPUSH
4531: LD_STRING vehready
4533: PPUSH
4534: CALL_OW 39
// end ; if CountOfDead >= [ 4 , 3 , 2 ] [ Difficulty ] then
4538: LD_EXP 29
4542: PUSH
4543: LD_INT 4
4545: PUSH
4546: LD_INT 3
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: LD_OWVAR 67
4561: ARRAY
4562: GREATEREQUAL
4563: IFFALSE 4578
// begin AddMedal ( pep_live , - 1 ) ;
4565: LD_STRING pep_live
4567: PPUSH
4568: LD_INT 1
4570: NEG
4571: PPUSH
4572: CALL_OW 101
// end else
4576: GO 4588
// begin AddMedal ( pep_live , 1 ) ;
4578: LD_STRING pep_live
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 101
// end ; if IsOk ( Martin ) then
4588: LD_EXP 25
4592: PPUSH
4593: CALL_OW 302
4597: IFFALSE 4611
// begin AddMedal ( martin_live , 1 ) ;
4599: LD_STRING martin_live
4601: PPUSH
4602: LD_INT 1
4604: PPUSH
4605: CALL_OW 101
// end else
4609: GO 4622
// begin AddMedal ( martin_live , - 1 ) ;
4611: LD_STRING martin_live
4613: PPUSH
4614: LD_INT 1
4616: NEG
4617: PPUSH
4618: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
4622: LD_STRING MAIN
4624: PPUSH
4625: CALL_OW 102
// SetSide ( Cathy , 5 ) ;
4629: LD_EXP 33
4633: PPUSH
4634: LD_INT 5
4636: PPUSH
4637: CALL_OW 235
// RewardPeople ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
4641: LD_INT 22
4643: PUSH
4644: LD_INT 2
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 69
4655: PPUSH
4656: CALL_OW 43
// SaveCharacters ( Louis , Louis ) ;
4660: LD_EXP 15
4664: PPUSH
4665: LD_STRING Louis
4667: PPUSH
4668: CALL_OW 38
// if IsLive ( Cathy ) then
4672: LD_EXP 33
4676: PPUSH
4677: CALL_OW 300
4681: IFFALSE 4695
// begin SaveCharacters ( Cathy , Cathy ) ;
4683: LD_EXP 33
4687: PPUSH
4688: LD_STRING Cathy
4690: PPUSH
4691: CALL_OW 38
// end ; if GetSide ( Karla ) = 2 and IsOK ( Karla ) then
4695: LD_EXP 16
4699: PPUSH
4700: CALL_OW 255
4704: PUSH
4705: LD_INT 2
4707: EQUAL
4708: PUSH
4709: LD_EXP 16
4713: PPUSH
4714: CALL_OW 302
4718: AND
4719: IFFALSE 4733
// begin SaveCharacters ( Karla , Karla_02 ) ;
4721: LD_EXP 16
4725: PPUSH
4726: LD_STRING Karla_02
4728: PPUSH
4729: CALL_OW 38
// end ; if GetSide ( Dwein ) = 2 and IsOK ( Dwein ) then
4733: LD_EXP 19
4737: PPUSH
4738: CALL_OW 255
4742: PUSH
4743: LD_INT 2
4745: EQUAL
4746: PUSH
4747: LD_EXP 19
4751: PPUSH
4752: CALL_OW 302
4756: AND
4757: IFFALSE 4771
// begin SaveCharacters ( Dwein , Dwein_02 ) ;
4759: LD_EXP 19
4763: PPUSH
4764: LD_STRING Dwein_02
4766: PPUSH
4767: CALL_OW 38
// end ; if GetSide ( Gunther ) = 2 and IsOK ( Gunther ) then
4771: LD_EXP 20
4775: PPUSH
4776: CALL_OW 255
4780: PUSH
4781: LD_INT 2
4783: EQUAL
4784: PUSH
4785: LD_EXP 20
4789: PPUSH
4790: CALL_OW 302
4794: AND
4795: IFFALSE 4809
// begin SaveCharacters ( Gunther , Gunther_02 ) ;
4797: LD_EXP 20
4801: PPUSH
4802: LD_STRING Gunther_02
4804: PPUSH
4805: CALL_OW 38
// end ; if GetSide ( Olaf ) = 2 and IsOK ( Olaf ) then
4809: LD_EXP 18
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 2
4821: EQUAL
4822: PUSH
4823: LD_EXP 18
4827: PPUSH
4828: CALL_OW 302
4832: AND
4833: IFFALSE 4847
// begin SaveCharacters ( Olaf , Olaf_02 ) ;
4835: LD_EXP 18
4839: PPUSH
4840: LD_STRING Olaf_02
4842: PPUSH
4843: CALL_OW 38
// end ; if GetSide ( Joachim ) = 2 and IsOK ( Joachim ) then
4847: LD_EXP 17
4851: PPUSH
4852: CALL_OW 255
4856: PUSH
4857: LD_INT 2
4859: EQUAL
4860: PUSH
4861: LD_EXP 17
4865: PPUSH
4866: CALL_OW 302
4870: AND
4871: IFFALSE 4885
// begin SaveCharacters ( Joachim , Joachim_02 ) ;
4873: LD_EXP 17
4877: PPUSH
4878: LD_STRING Joachim_02
4880: PPUSH
4881: CALL_OW 38
// end ; if GetSide ( Mmark ) = 2 and IsOK ( Mmark ) then
4885: LD_EXP 22
4889: PPUSH
4890: CALL_OW 255
4894: PUSH
4895: LD_INT 2
4897: EQUAL
4898: PUSH
4899: LD_EXP 22
4903: PPUSH
4904: CALL_OW 302
4908: AND
4909: IFFALSE 4923
// begin SaveCharacters ( Mmark , Mmark_02 ) ;
4911: LD_EXP 22
4915: PPUSH
4916: LD_STRING Mmark_02
4918: PPUSH
4919: CALL_OW 38
// end ; if GetSide ( Andreas ) = 2 and IsOk ( Andreas ) then
4923: LD_EXP 27
4927: PPUSH
4928: CALL_OW 255
4932: PUSH
4933: LD_INT 2
4935: EQUAL
4936: PUSH
4937: LD_EXP 27
4941: PPUSH
4942: CALL_OW 302
4946: AND
4947: IFFALSE 4961
// begin SaveCharacters ( Andreas , Andreas_02 ) ;
4949: LD_EXP 27
4953: PPUSH
4954: LD_STRING Andreas_02
4956: PPUSH
4957: CALL_OW 38
// end ; SaveCharacters ( Martin , Martin_02 ) ;
4961: LD_EXP 25
4965: PPUSH
4966: LD_STRING Martin_02
4968: PPUSH
4969: CALL_OW 38
// YouWin ;
4973: CALL_OW 103
// SetNextMission ( 1 ) ;
4977: LD_INT 1
4979: PPUSH
4980: CALL_OW 536
// end ;
4984: END
// export Andreas ; every 0 0$33 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and tick > 35 * 60 * 21 do
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 69
4999: PUSH
5000: LD_INT 0
5002: EQUAL
5003: PUSH
5004: LD_OWVAR 1
5008: PUSH
5009: LD_INT 35
5011: PUSH
5012: LD_INT 60
5014: MUL
5015: PUSH
5016: LD_INT 21
5018: MUL
5019: GREATER
5020: AND
5021: IFFALSE 5230
5023: GO 5025
5025: DISABLE
// begin uc_side := 5 ;
5026: LD_ADDR_OWVAR 20
5030: PUSH
5031: LD_INT 5
5033: ST_TO_ADDR
// uc_nation := 2 ;
5034: LD_ADDR_OWVAR 21
5038: PUSH
5039: LD_INT 2
5041: ST_TO_ADDR
// hc_gallery := sandar ;
5042: LD_ADDR_OWVAR 33
5046: PUSH
5047: LD_STRING sandar
5049: ST_TO_ADDR
// hc_face_number := 36 ;
5050: LD_ADDR_OWVAR 34
5054: PUSH
5055: LD_INT 36
5057: ST_TO_ADDR
// hc_name := Andreas L. Kristiansen ;
5058: LD_ADDR_OWVAR 26
5062: PUSH
5063: LD_STRING Andreas L. Kristiansen
5065: ST_TO_ADDR
// hc_sex := sex_male ;
5066: LD_ADDR_OWVAR 27
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 1 , 0 ] ;
5074: LD_ADDR_OWVAR 30
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: LD_INT 1
5084: PUSH
5085: LD_INT 1
5087: PUSH
5088: LD_INT 0
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5097: LD_ADDR_OWVAR 31
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 0
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_class := 2 ;
5120: LD_ADDR_OWVAR 28
5124: PUSH
5125: LD_INT 2
5127: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5128: LD_ADDR_OWVAR 29
5132: PUSH
5133: LD_INT 10
5135: PUSH
5136: LD_INT 10
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_importance := 0 ;
5143: LD_ADDR_OWVAR 32
5147: PUSH
5148: LD_INT 0
5150: ST_TO_ADDR
// Andreas := CreateHuman ;
5151: LD_ADDR_EXP 27
5155: PUSH
5156: CALL_OW 44
5160: ST_TO_ADDR
// PlaceUnitXY ( Andreas , 118 , 2 , true ) ;
5161: LD_EXP 27
5165: PPUSH
5166: LD_INT 118
5168: PPUSH
5169: LD_INT 2
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 48
// Wait ( 0 0$04 ) ;
5179: LD_INT 140
5181: PPUSH
5182: CALL_OW 67
// DialogueOn ;
5186: CALL_OW 6
// SayRadio ( Andreas , DA-1A ) ;
5190: LD_EXP 27
5194: PPUSH
5195: LD_STRING DA-1A
5197: PPUSH
5198: CALL_OW 94
// Say ( Karla , DK-A ) ;
5202: LD_EXP 16
5206: PPUSH
5207: LD_STRING DK-A
5209: PPUSH
5210: CALL_OW 88
// Say ( Louis , DL-A ) ;
5214: LD_EXP 15
5218: PPUSH
5219: LD_STRING DL-A
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// end ;
5230: END
// every 0 0$01 trigger See ( 2 , Andreas ) do
5231: LD_INT 2
5233: PPUSH
5234: LD_EXP 27
5238: PPUSH
5239: CALL_OW 292
5243: IFFALSE 5272
5245: GO 5247
5247: DISABLE
// begin Say ( Andreas , DA-2A ) ;
5248: LD_EXP 27
5252: PPUSH
5253: LD_STRING DA-2A
5255: PPUSH
5256: CALL_OW 88
// SetSide ( Andreas , 2 ) ;
5260: LD_EXP 27
5264: PPUSH
5265: LD_INT 2
5267: PPUSH
5268: CALL_OW 235
// end ;
5272: END
// every 0 0$02 trigger IsInUnit ( Andreas ) do
5273: LD_EXP 27
5277: PPUSH
5278: CALL_OW 310
5282: IFFALSE 5335
5284: GO 5286
5286: DISABLE
// begin Say ( Andreas , DA-B ) ;
5287: LD_EXP 27
5291: PPUSH
5292: LD_STRING DA-B
5294: PPUSH
5295: CALL_OW 88
// Say ( Karla , DK-A2 ) ;
5299: LD_EXP 16
5303: PPUSH
5304: LD_STRING DK-A2
5306: PPUSH
5307: CALL_OW 88
// Say ( Andreas , DA-B1 ) ;
5311: LD_EXP 27
5315: PPUSH
5316: LD_STRING DA-B1
5318: PPUSH
5319: CALL_OW 88
// Say ( Louis , DL-B1 ) ;
5323: LD_EXP 15
5327: PPUSH
5328: LD_STRING DL-B1
5330: PPUSH
5331: CALL_OW 88
// end ; end_of_file
5335: END
// export function PrepareNature ; var i , l , apeman , tiger , bird , fish ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
5344: PPUSH
// uc_nation = nation_nature ;
5345: LD_ADDR_OWVAR 21
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
// uc_side = 0 ;
5353: LD_ADDR_OWVAR 20
5357: PUSH
5358: LD_INT 0
5360: ST_TO_ADDR
// l = 0 ;
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 0
5368: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
5369: LD_ADDR_OWVAR 24
5373: PUSH
5374: LD_INT 0
5376: PPUSH
5377: LD_INT 5
5379: PPUSH
5380: CALL_OW 12
5384: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 20 ) ;
5385: LD_ADDR_OWVAR 35
5389: PUSH
5390: LD_INT 0
5392: PPUSH
5393: LD_INT 20
5395: PPUSH
5396: CALL_OW 12
5400: ST_TO_ADDR
// hc_gallery =  ;
5401: LD_ADDR_OWVAR 33
5405: PUSH
5406: LD_STRING 
5408: ST_TO_ADDR
// hc_class = class_apeman ;
5409: LD_ADDR_OWVAR 28
5413: PUSH
5414: LD_INT 12
5416: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
5417: LD_ADDR_OWVAR 29
5421: PUSH
5422: LD_INT 11
5424: PPUSH
5425: LD_INT 13
5427: PPUSH
5428: CALL_OW 12
5432: PUSH
5433: LD_INT 10
5435: PPUSH
5436: LD_INT 11
5438: PPUSH
5439: CALL_OW 12
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: ST_TO_ADDR
// hc_sex = sex_male ;
5448: LD_ADDR_OWVAR 27
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
5456: LD_ADDR_OWVAR 31
5460: PUSH
5461: LD_INT 0
5463: PPUSH
5464: LD_INT 2
5466: PPUSH
5467: CALL_OW 12
5471: PUSH
5472: LD_INT 0
5474: PUSH
5475: LD_INT 0
5477: PUSH
5478: LD_INT 0
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: ST_TO_ADDR
// apeman = CreateHuman ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: CALL_OW 44
5496: ST_TO_ADDR
// PlaceUnitArea ( apeman , apespawn , false ) ;
5497: LD_VAR 0 4
5501: PPUSH
5502: LD_INT 16
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: CALL_OW 49
// l = l + 1 ;
5512: LD_ADDR_VAR 0 3
5516: PUSH
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: ST_TO_ADDR
// end until l = 5 ;
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 5
5533: EQUAL
5534: IFFALSE 5369
// l = 0 ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
5544: LD_ADDR_OWVAR 35
5548: PUSH
5549: LD_INT 0
5551: PPUSH
5552: LD_INT 25
5554: PPUSH
5555: CALL_OW 12
5559: ST_TO_ADDR
// hc_class = class_tiger ;
5560: LD_ADDR_OWVAR 28
5564: PUSH
5565: LD_INT 14
5567: ST_TO_ADDR
// hc_sex = sex_male ;
5568: LD_ADDR_OWVAR 27
5572: PUSH
5573: LD_INT 1
5575: ST_TO_ADDR
// hc_gallery = sandnature ;
5576: LD_ADDR_OWVAR 33
5580: PUSH
5581: LD_STRING sandnature
5583: ST_TO_ADDR
// hc_face_number = 3 ;
5584: LD_ADDR_OWVAR 34
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// tiger = CreateHuman ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: CALL_OW 44
5601: ST_TO_ADDR
// PlaceUnitArea ( tiger , tigerspawn , false ) ;
5602: LD_VAR 0 5
5606: PPUSH
5607: LD_INT 15
5609: PPUSH
5610: LD_INT 0
5612: PPUSH
5613: CALL_OW 49
// l = l + 1 ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_VAR 0 3
5626: PUSH
5627: LD_INT 1
5629: PLUS
5630: ST_TO_ADDR
// end until l = 5 ;
5631: LD_VAR 0 3
5635: PUSH
5636: LD_INT 5
5638: EQUAL
5639: IFFALSE 5544
// l = 0 ;
5641: LD_ADDR_VAR 0 3
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
5649: LD_ADDR_OWVAR 28
5653: PUSH
5654: LD_INT 18
5656: ST_TO_ADDR
// hc_gallery = sandnature ;
5657: LD_ADDR_OWVAR 33
5661: PUSH
5662: LD_STRING sandnature
5664: ST_TO_ADDR
// hc_face_number = 1 ;
5665: LD_ADDR_OWVAR 34
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// bird = CreateHuman ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: CALL_OW 44
5682: ST_TO_ADDR
// PlaceUnitArea ( bird , apespawn , false ) ;
5683: LD_VAR 0 6
5687: PPUSH
5688: LD_INT 16
5690: PPUSH
5691: LD_INT 0
5693: PPUSH
5694: CALL_OW 49
// l = l + 1 ;
5698: LD_ADDR_VAR 0 3
5702: PUSH
5703: LD_VAR 0 3
5707: PUSH
5708: LD_INT 1
5710: PLUS
5711: ST_TO_ADDR
// end until l = 6 ;
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 6
5719: EQUAL
5720: IFFALSE 5649
// for i = 1 to 4 do
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: DOUBLE
5728: LD_INT 1
5730: DEC
5731: ST_TO_ADDR
5732: LD_INT 4
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5789
// begin hc_class = 20 ;
5738: LD_ADDR_OWVAR 28
5742: PUSH
5743: LD_INT 20
5745: ST_TO_ADDR
// hc_gallery = sandnature ;
5746: LD_ADDR_OWVAR 33
5750: PUSH
5751: LD_STRING sandnature
5753: ST_TO_ADDR
// hc_face_number = 2 ;
5754: LD_ADDR_OWVAR 34
5758: PUSH
5759: LD_INT 2
5761: ST_TO_ADDR
// fish := CreateHuman ;
5762: LD_ADDR_VAR 0 7
5766: PUSH
5767: CALL_OW 44
5771: ST_TO_ADDR
// PlaceUnitArea ( fish , fishspawn , false ) ;
5772: LD_VAR 0 7
5776: PPUSH
5777: LD_INT 14
5779: PPUSH
5780: LD_INT 0
5782: PPUSH
5783: CALL_OW 49
// end ;
5787: GO 5735
5789: POP
5790: POP
// end ;
5791: LD_VAR 0 1
5795: RET
// every 2 2$50 do
5796: GO 5798
5798: DISABLE
// begin CreateCratesArea ( Rand ( 2 , 5 ) , CrtA , true ) ;
5799: LD_INT 2
5801: PPUSH
5802: LD_INT 5
5804: PPUSH
5805: CALL_OW 12
5809: PPUSH
5810: LD_INT 2
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 55
// Wait ( Rand ( 0 0$30 , 1 1$20 ) ) ;
5820: LD_INT 1050
5822: PPUSH
5823: LD_INT 2800
5825: PPUSH
5826: CALL_OW 12
5830: PPUSH
5831: CALL_OW 67
// CreateCratesAnywhere ( Rand ( 1 , 3 ) , true ) ;
5835: LD_INT 1
5837: PPUSH
5838: LD_INT 3
5840: PPUSH
5841: CALL_OW 12
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: CALL_OW 57
// enable ;
5853: ENABLE
// end ; end_of_file
5854: END
// on ResearchComplete ( tech , lab ) do var sci , eng , sol ;
5855: LD_INT 0
5857: PPUSH
5858: PPUSH
5859: PPUSH
// begin counttech = counttech + 1 ;
5860: LD_ADDR_EXP 10
5864: PUSH
5865: LD_EXP 10
5869: PUSH
5870: LD_INT 1
5872: PLUS
5873: ST_TO_ADDR
// if counttech = 3 then
5874: LD_EXP 10
5878: PUSH
5879: LD_INT 3
5881: EQUAL
5882: IFFALSE 5891
// begin ChangeMissionObjectives ( TechsEnd ) ;
5884: LD_STRING TechsEnd
5886: PPUSH
5887: CALL_OW 337
// end ; if tech = 48 then
5891: LD_VAR 0 1
5895: PUSH
5896: LD_INT 48
5898: EQUAL
5899: IFFALSE 6258
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Louis ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 25
5918: PUSH
5919: LD_INT 1
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 69
5934: PUSH
5935: LD_EXP 15
5939: DIFF
5940: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff Louis ;
5941: LD_ADDR_VAR 0 3
5945: PUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 2
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 4
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 69
5974: PUSH
5975: LD_EXP 15
5979: DIFF
5980: ST_TO_ADDR
// DialogueOn ;
5981: CALL_OW 6
// Say ( sci [ Rand ( 1 , sci ) ] , Dsci-1 ) ;
5985: LD_VAR 0 3
5989: PUSH
5990: LD_INT 1
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 12
6002: ARRAY
6003: PPUSH
6004: LD_STRING Dsci-1
6006: PPUSH
6007: CALL_OW 88
// Say ( Louis , Dlsci-1 ) ;
6011: LD_EXP 15
6015: PPUSH
6016: LD_STRING Dlsci-1
6018: PPUSH
6019: CALL_OW 88
// Say ( sci [ Rand ( 1 , sci ) ] , Dsci-2 ) ;
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 1
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: CALL_OW 12
6040: ARRAY
6041: PPUSH
6042: LD_STRING Dsci-2
6044: PPUSH
6045: CALL_OW 88
// if sol > 0 then
6049: LD_VAR 0 5
6053: PUSH
6054: LD_INT 0
6056: GREATER
6057: IFFALSE 6169
// begin Say ( sol [ 1 ] , Dsol-1 ) ;
6059: LD_VAR 0 5
6063: PUSH
6064: LD_INT 1
6066: ARRAY
6067: PPUSH
6068: LD_STRING Dsol-1
6070: PPUSH
6071: CALL_OW 88
// Say ( sci [ 1 ] , Dsci-3 ) ;
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_STRING Dsci-3
6086: PPUSH
6087: CALL_OW 88
// DialogueOff ;
6091: CALL_OW 7
// ChangeMissionObjectives ( Techs ) ;
6095: LD_STRING Techs
6097: PPUSH
6098: CALL_OW 337
// SetTech ( tech_oilpow , 2 , state_enabled ) ;
6102: LD_INT 46
6104: PPUSH
6105: LD_INT 2
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: CALL_OW 322
// SetTech ( tech_oileng , 2 , state_enabled ) ;
6115: LD_INT 47
6117: PPUSH
6118: LD_INT 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 322
// SetRestrict ( 4 , 2 , state_enabled ) ;
6128: LD_INT 4
6130: PPUSH
6131: LD_INT 2
6133: PPUSH
6134: LD_INT 1
6136: PPUSH
6137: CALL_OW 324
// SetRestrict ( 31 , 2 , state_enabled ) ;
6141: LD_INT 31
6143: PPUSH
6144: LD_INT 2
6146: PPUSH
6147: LD_INT 1
6149: PPUSH
6150: CALL_OW 324
// SetRestrict ( 29 , 2 , state_enabled ) ;
6154: LD_INT 29
6156: PPUSH
6157: LD_INT 2
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 324
// end else
6167: GO 6258
// begin DialogueOff ;
6169: CALL_OW 7
// ChangeMissionObjectives ( Techs ) ;
6173: LD_STRING Techs
6175: PPUSH
6176: CALL_OW 337
// SetTech ( tech_oilpow , 2 , state_enabled ) ;
6180: LD_INT 46
6182: PPUSH
6183: LD_INT 2
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: CALL_OW 322
// SetTech ( tech_oileng , 2 , state_enabled ) ;
6193: LD_INT 47
6195: PPUSH
6196: LD_INT 2
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 322
// SetRestrict ( 2 , 2 , state_enabled ) ;
6206: LD_INT 2
6208: PPUSH
6209: LD_INT 2
6211: PPUSH
6212: LD_INT 1
6214: PPUSH
6215: CALL_OW 324
// SetRestrict ( 4 , 2 , state_enabled ) ;
6219: LD_INT 4
6221: PPUSH
6222: LD_INT 2
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL_OW 324
// SetRestrict ( 31 , 2 , state_enabled ) ;
6232: LD_INT 31
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: LD_INT 1
6240: PPUSH
6241: CALL_OW 324
// SetRestrict ( 29 , 2 , state_enabled ) ;
6245: LD_INT 29
6247: PPUSH
6248: LD_INT 2
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 324
// end ; end ; end ;
6258: PPOPN 5
6260: END
// on VehicleCaptured ( new_identifier , old_identifier , old_side , human ) do begin if FirstContact = true then
6261: LD_EXP 5
6265: PUSH
6266: LD_INT 1
6268: EQUAL
6269: IFFALSE 6412
// begin SetRestrict ( 2 , 2 , state_enabled ) ;
6271: LD_INT 2
6273: PPUSH
6274: LD_INT 2
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: CALL_OW 324
// if human = Louis or human = Martin then
6284: LD_VAR 0 4
6288: PUSH
6289: LD_EXP 15
6293: EQUAL
6294: PUSH
6295: LD_VAR 0 4
6299: PUSH
6300: LD_EXP 25
6304: EQUAL
6305: OR
6306: IFFALSE 6349
// begin Say ( Martin , DV-4a ) ;
6308: LD_EXP 25
6312: PPUSH
6313: LD_STRING DV-4a
6315: PPUSH
6316: CALL_OW 88
// Say ( Louis , DV-4 ) ;
6320: LD_EXP 15
6324: PPUSH
6325: LD_STRING DV-4
6327: PPUSH
6328: CALL_OW 88
// FirstContact = false ;
6332: LD_ADDR_EXP 5
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// ChangeMissionObjectives ( BuildWorkShop ) ;
6340: LD_STRING BuildWorkShop
6342: PPUSH
6343: CALL_OW 337
// end else
6347: GO 6412
// begin Say ( human , DV-1 ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_STRING DV-1
6356: PPUSH
6357: CALL_OW 88
// Say ( Louis , DV-2 ) ;
6361: LD_EXP 15
6365: PPUSH
6366: LD_STRING DV-2
6368: PPUSH
6369: CALL_OW 88
// Say ( Martin , DV-3 ) ;
6373: LD_EXP 25
6377: PPUSH
6378: LD_STRING DV-3
6380: PPUSH
6381: CALL_OW 88
// Say ( Louis , DV-4 ) ;
6385: LD_EXP 15
6389: PPUSH
6390: LD_STRING DV-4
6392: PPUSH
6393: CALL_OW 88
// FirstContact = false ;
6397: LD_ADDR_EXP 5
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// ChangeMissionObjectives ( BuildWorkShop ) ;
6405: LD_STRING BuildWorkShop
6407: PPUSH
6408: CALL_OW 337
// end ; end ; end ;
6412: PPOPN 4
6414: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_workshop then
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 266
6424: PUSH
6425: LD_INT 2
6427: EQUAL
6428: IFFALSE 6498
// begin if FirstWorkShop = true then
6430: LD_EXP 6
6434: PUSH
6435: LD_INT 1
6437: EQUAL
6438: IFFALSE 6498
// begin FirstWorkShop = false ;
6440: LD_ADDR_EXP 6
6444: PUSH
6445: LD_INT 0
6447: ST_TO_ADDR
// Say ( Martin , DV-5 ) ;
6448: LD_EXP 25
6452: PPUSH
6453: LD_STRING DV-5
6455: PPUSH
6456: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
6460: LD_INT 7
6462: PPUSH
6463: CALL_OW 67
// Say ( Martin , DV-6 ) ;
6467: LD_EXP 25
6471: PPUSH
6472: LD_STRING DV-6
6474: PPUSH
6475: CALL_OW 88
// Say ( Martin , DV-7 ) ;
6479: LD_EXP 25
6483: PPUSH
6484: LD_STRING DV-7
6486: PPUSH
6487: CALL_OW 88
// ChangeMissionObjectives ( BuildVeh ) ;
6491: LD_STRING BuildVeh
6493: PPUSH
6494: CALL_OW 337
// end ; end ; end ;
6498: PPOPN 1
6500: END
// export balista ; on VehicleConstructed ( un , fac ) do begin if ThisIsFirstVeh = true then
6501: LD_EXP 8
6505: PUSH
6506: LD_INT 1
6508: EQUAL
6509: IFFALSE 6658
// begin Wait ( 0 0$02 ) ;
6511: LD_INT 70
6513: PPUSH
6514: CALL_OW 67
// DialogueOn ;
6518: CALL_OW 6
// Say ( Martin , DP-1 ) ;
6522: LD_EXP 25
6526: PPUSH
6527: LD_STRING DP-1
6529: PPUSH
6530: CALL_OW 88
// Say ( Louis , DP-2 ) ;
6534: LD_EXP 15
6538: PPUSH
6539: LD_STRING DP-2
6541: PPUSH
6542: CALL_OW 88
// Say ( Martin , DP-3 ) ;
6546: LD_EXP 25
6550: PPUSH
6551: LD_STRING DP-3
6553: PPUSH
6554: CALL_OW 88
// Say ( Louis , DP-4 ) ;
6558: LD_EXP 15
6562: PPUSH
6563: LD_STRING DP-4
6565: PPUSH
6566: CALL_OW 88
// DialogueOff ;
6570: CALL_OW 7
// balista := [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ;
6574: LD_ADDR_EXP 28
6578: PUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: CALL_OW 265
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 262
6598: PUSH
6599: LD_VAR 0 1
6603: PPUSH
6604: CALL_OW 263
6608: PUSH
6609: LD_VAR 0 1
6613: PPUSH
6614: CALL_OW 264
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: ST_TO_ADDR
// ChangeMissionObjectives ( VehOk ) ;
6625: LD_STRING VehOk
6627: PPUSH
6628: CALL_OW 337
// MedalAtVeh = true ;
6632: LD_ADDR_EXP 7
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// ThisIsFirstVeh = false ;
6640: LD_ADDR_EXP 8
6644: PUSH
6645: LD_INT 0
6647: ST_TO_ADDR
// AddMedal ( vehicle , 1 ) ;
6648: LD_STRING vehicle
6650: PPUSH
6651: LD_INT 1
6653: PPUSH
6654: CALL_OW 101
// end ; end ;
6658: PPOPN 2
6660: END
// on Contact ( you , other_side ) do begin if you = 2 and other_side = 5 then
6661: LD_VAR 0 1
6665: PUSH
6666: LD_INT 2
6668: EQUAL
6669: PUSH
6670: LD_VAR 0 2
6674: PUSH
6675: LD_INT 5
6677: EQUAL
6678: AND
6679: IFFALSE 6695
// begin Wait ( 0 0$0.3 ) ;
6681: LD_INT 10
6683: PPUSH
6684: CALL_OW 67
// YouLost ( AllyAt ) ;
6688: LD_STRING AllyAt
6690: PPUSH
6691: CALL_OW 104
// end ; if you = 2 and other_side = 1 or GetLives ( Cathy ) < 1000 then
6695: LD_VAR 0 1
6699: PUSH
6700: LD_INT 2
6702: EQUAL
6703: PUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: EQUAL
6712: AND
6713: PUSH
6714: LD_EXP 33
6718: PPUSH
6719: CALL_OW 256
6723: PUSH
6724: LD_INT 1000
6726: LESS
6727: OR
6728: IFFALSE 6752
// begin Wait ( 0 0$0.3 ) ;
6730: LD_INT 10
6732: PPUSH
6733: CALL_OW 67
// ComMoveXY ( Cathy , 52 , 103 ) ;
6737: LD_EXP 33
6741: PPUSH
6742: LD_INT 52
6744: PPUSH
6745: LD_INT 103
6747: PPUSH
6748: CALL_OW 111
// end ; end ;
6752: PPOPN 2
6754: END
// export CountOfDead , RuDead ; on UnitDestroyed ( un ) do begin if GetSide ( un ) = 3 then
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 255
6764: PUSH
6765: LD_INT 3
6767: EQUAL
6768: IFFALSE 6784
// begin RuDead = RuDead + 1 ;
6770: LD_ADDR_EXP 30
6774: PUSH
6775: LD_EXP 30
6779: PUSH
6780: LD_INT 1
6782: PLUS
6783: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) then
6784: LD_VAR 0 1
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_INT 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 21
6801: PUSH
6802: LD_INT 1
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PPUSH
6813: CALL_OW 69
6817: IN
6818: IFFALSE 6834
// begin CountOfDead = CountOfDead + 1 ;
6820: LD_ADDR_EXP 29
6824: PUSH
6825: LD_EXP 29
6829: PUSH
6830: LD_INT 1
6832: PLUS
6833: ST_TO_ADDR
// end ; if un = Louis then
6834: LD_VAR 0 1
6838: PUSH
6839: LD_EXP 15
6843: EQUAL
6844: IFFALSE 6853
// begin YouLost ( Dead ) ;
6846: LD_STRING Dead
6848: PPUSH
6849: CALL_OW 104
// end ; if un = Abdul then
6853: LD_VAR 0 1
6857: PUSH
6858: LD_EXP 21
6862: EQUAL
6863: IFFALSE 6872
// begin YouLost ( SDead ) ;
6865: LD_STRING SDead
6867: PPUSH
6868: CALL_OW 104
// end ; if GetBType ( un ) = b_depot then
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 266
6881: PUSH
6882: LD_INT 0
6884: EQUAL
6885: IFFALSE 6894
// begin YouLost ( BaseDestroy ) ;
6887: LD_STRING BaseDestroy
6889: PPUSH
6890: CALL_OW 104
// end ; end ;
6894: PPOPN 1
6896: END
// on LeaveBuilding ( b , un ) do begin if un = Cathy then
6897: LD_VAR 0 2
6901: PUSH
6902: LD_EXP 33
6906: EQUAL
6907: IFFALSE 6921
// begin ComEnterUnit ( Cathy , ar_dep1 ) ;
6909: LD_EXP 33
6913: PPUSH
6914: LD_INT 64
6916: PPUSH
6917: CALL_OW 120
// end ; end ; end_of_file
6921: PPOPN 2
6923: END
// every 6 6$10 trigger RussianTimeStart = true do var veh , un , l , i , RuAtTeam , RuWeapon , Level , fabric , rux , ruy , ar_units , ar_build , ar , dri , YouCanAttack , units , target1 , target2 , enemy ;
6924: LD_EXP 1
6928: PUSH
6929: LD_INT 1
6931: EQUAL
6932: IFFALSE 7827
6934: GO 6936
6936: DISABLE
6937: LD_INT 0
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// begin enable ;
6958: ENABLE
// if Difficulty = 1 then
6959: LD_OWVAR 67
6963: PUSH
6964: LD_INT 1
6966: EQUAL
6967: IFFALSE 6984
// begin Wait ( Rand ( 6 6$00 , 8 8$00 ) ) ;
6969: LD_INT 12600
6971: PPUSH
6972: LD_INT 16800
6974: PPUSH
6975: CALL_OW 12
6979: PPUSH
6980: CALL_OW 67
// end ; if Difficulty = 2 then
6984: LD_OWVAR 67
6988: PUSH
6989: LD_INT 2
6991: EQUAL
6992: IFFALSE 7009
// begin Wait ( Rand ( 4 4$00 , 6 6$00 ) ) ;
6994: LD_INT 8400
6996: PPUSH
6997: LD_INT 12600
6999: PPUSH
7000: CALL_OW 12
7004: PPUSH
7005: CALL_OW 67
// end ; if Difficulty = 3 then
7009: LD_OWVAR 67
7013: PUSH
7014: LD_INT 3
7016: EQUAL
7017: IFFALSE 7034
// begin Wait ( Rand ( 3 3$00 , 4 4$30 ) ) ;
7019: LD_INT 6300
7021: PPUSH
7022: LD_INT 9450
7024: PPUSH
7025: CALL_OW 12
7029: PPUSH
7030: CALL_OW 67
// end ; if RuAtTeam > 0 then
7034: LD_VAR 0 5
7038: PUSH
7039: LD_INT 0
7041: GREATER
7042: IFFALSE 7070
// begin for i in RuAtTeam do
7044: LD_ADDR_VAR 0 4
7048: PUSH
7049: LD_VAR 0 5
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7068
// begin RemoveUnit ( i ) ;
7057: LD_VAR 0 4
7061: PPUSH
7062: CALL_OW 64
// end ;
7066: GO 7054
7068: POP
7069: POP
// end ; RuAtTeam = [ ] ;
7070: LD_ADDR_VAR 0 5
7074: PUSH
7075: EMPTY
7076: ST_TO_ADDR
// RuWeapon = [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] ;
7077: LD_ADDR_VAR 0 6
7081: PUSH
7082: LD_INT 42
7084: PUSH
7085: LD_INT 42
7087: PUSH
7088: LD_INT 43
7090: PUSH
7091: LD_INT 44
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: ST_TO_ADDR
// Level = [ 1 , 2 , 4 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 7
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 4
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// fabric = fabric + [ 0 , 1 , 2 ] [ Difficulty ] ;
7125: LD_ADDR_VAR 0 8
7129: PUSH
7130: LD_VAR 0 8
7134: PUSH
7135: LD_INT 0
7137: PUSH
7138: LD_INT 1
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_OWVAR 67
7153: ARRAY
7154: PLUS
7155: ST_TO_ADDR
// l = 0 ;
7156: LD_ADDR_VAR 0 3
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// uc_side = 3 ;
7164: LD_ADDR_OWVAR 20
7168: PUSH
7169: LD_INT 3
7171: ST_TO_ADDR
// uc_nation = 3 ;
7172: LD_ADDR_OWVAR 21
7176: PUSH
7177: LD_INT 3
7179: ST_TO_ADDR
// repeat begin vc_chassis = ru_medium_tracked ;
7180: LD_ADDR_OWVAR 37
7184: PUSH
7185: LD_INT 22
7187: ST_TO_ADDR
// vc_engine = engine_combustion ;
7188: LD_ADDR_OWVAR 39
7192: PUSH
7193: LD_INT 1
7195: ST_TO_ADDR
// vc_control = control_manual ;
7196: LD_ADDR_OWVAR 38
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// vc_weapon = RuWeapon [ Rand ( 1 , 4 ) ] ;
7204: LD_ADDR_OWVAR 40
7208: PUSH
7209: LD_VAR 0 6
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 4
7219: PPUSH
7220: CALL_OW 12
7224: ARRAY
7225: ST_TO_ADDR
// veh = CreateVehicle ;
7226: LD_ADDR_VAR 0 1
7230: PUSH
7231: CALL_OW 45
7235: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianCom , false ) ;
7236: LD_VAR 0 1
7240: PPUSH
7241: LD_INT 5
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 49
// RuAtTeam = RuAtTeam ^ veh ;
7251: LD_ADDR_VAR 0 5
7255: PUSH
7256: LD_VAR 0 5
7260: PUSH
7261: LD_VAR 0 1
7265: ADD
7266: ST_TO_ADDR
// hc_class = 1 ;
7267: LD_ADDR_OWVAR 28
7271: PUSH
7272: LD_INT 1
7274: ST_TO_ADDR
// hc_name =  ;
7275: LD_ADDR_OWVAR 26
7279: PUSH
7280: LD_STRING 
7282: ST_TO_ADDR
// hc_gallery =  ;
7283: LD_ADDR_OWVAR 33
7287: PUSH
7288: LD_STRING 
7290: ST_TO_ADDR
// hc_sex = sex_male ;
7291: LD_ADDR_OWVAR 27
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) + Level , Rand ( 0 , 1 ) + Level , Rand ( 2 , 3 ) + Level , Rand ( 0 , 2 ) + Level ] ;
7299: LD_ADDR_OWVAR 31
7303: PUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 3
7309: PPUSH
7310: CALL_OW 12
7314: PUSH
7315: LD_VAR 0 7
7319: PLUS
7320: PUSH
7321: LD_INT 0
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 12
7331: PUSH
7332: LD_VAR 0 7
7336: PLUS
7337: PUSH
7338: LD_INT 2
7340: PPUSH
7341: LD_INT 3
7343: PPUSH
7344: CALL_OW 12
7348: PUSH
7349: LD_VAR 0 7
7353: PLUS
7354: PUSH
7355: LD_INT 0
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 12
7365: PUSH
7366: LD_VAR 0 7
7370: PLUS
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: ST_TO_ADDR
// un := CreateHuman ;
7378: LD_ADDR_VAR 0 2
7382: PUSH
7383: CALL_OW 44
7387: ST_TO_ADDR
// RuAtTeam := RuAtTeam ^ un ;
7388: LD_ADDR_VAR 0 5
7392: PUSH
7393: LD_VAR 0 5
7397: PUSH
7398: LD_VAR 0 2
7402: ADD
7403: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7404: LD_VAR 0 2
7408: PPUSH
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 52
// l = l + 1 ;
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 1
7430: PLUS
7431: ST_TO_ADDR
// end until l = [ 4 + fabric , 4 + fabric , 4 + fabric ] [ Difficulty ] ;
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 4
7439: PUSH
7440: LD_VAR 0 8
7444: PLUS
7445: PUSH
7446: LD_INT 4
7448: PUSH
7449: LD_VAR 0 8
7453: PLUS
7454: PUSH
7455: LD_INT 4
7457: PUSH
7458: LD_VAR 0 8
7462: PLUS
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: LD_OWVAR 67
7473: ARRAY
7474: EQUAL
7475: IFFALSE 7180
// Wait ( 0 0$0.3 ) ;
7477: LD_INT 10
7479: PPUSH
7480: CALL_OW 67
// rux = [ 35 , 52 , 110 ] ;
7484: LD_ADDR_VAR 0 9
7488: PUSH
7489: LD_INT 35
7491: PUSH
7492: LD_INT 52
7494: PUSH
7495: LD_INT 110
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: ST_TO_ADDR
// ruy = [ 10 , 19 , 84 ] ;
7503: LD_ADDR_VAR 0 10
7507: PUSH
7508: LD_INT 10
7510: PUSH
7511: LD_INT 19
7513: PUSH
7514: LD_INT 84
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: ST_TO_ADDR
// if rulmt > 3 then
7522: LD_EXP 3
7526: PUSH
7527: LD_INT 3
7529: GREATER
7530: IFFALSE 7540
// begin rulmt = 1 ;
7532: LD_ADDR_EXP 3
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// end ; ComMoveXY ( RuAtTeam , rux [ rulmt ] , ruy [ rulmt ] ) ;
7540: LD_VAR 0 5
7544: PPUSH
7545: LD_VAR 0 9
7549: PUSH
7550: LD_EXP 3
7554: ARRAY
7555: PPUSH
7556: LD_VAR 0 10
7560: PUSH
7561: LD_EXP 3
7565: ARRAY
7566: PPUSH
7567: CALL_OW 111
// rulmt = rulmt + 1 ;
7571: LD_ADDR_EXP 3
7575: PUSH
7576: LD_EXP 3
7580: PUSH
7581: LD_INT 1
7583: PLUS
7584: ST_TO_ADDR
// Wait ( 0 0$55 ) ;
7585: LD_INT 1925
7587: PPUSH
7588: CALL_OW 67
// repeat begin Wait ( 0 0$02 ) ;
7592: LD_INT 70
7594: PPUSH
7595: CALL_OW 67
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
7599: LD_ADDR_VAR 0 19
7603: PUSH
7604: LD_INT 22
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PPUSH
7614: CALL_OW 69
7618: ST_TO_ADDR
// units := RuAtTeam ;
7619: LD_ADDR_VAR 0 16
7623: PUSH
7624: LD_VAR 0 5
7628: ST_TO_ADDR
// for un in units do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: LD_VAR 0 16
7638: PUSH
7639: FOR_IN
7640: IFFALSE 7806
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , un ) ;
7642: LD_ADDR_VAR 0 17
7646: PUSH
7647: LD_INT 22
7649: PUSH
7650: LD_INT 2
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PPUSH
7657: CALL_OW 69
7661: PPUSH
7662: LD_VAR 0 2
7666: PPUSH
7667: CALL_OW 74
7671: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ] ) , un ) ;
7672: LD_ADDR_VAR 0 18
7676: PUSH
7677: LD_INT 22
7679: PUSH
7680: LD_INT 2
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 30
7689: PUSH
7690: LD_INT 32
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 59
7699: PUSH
7700: EMPTY
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: PUSH
7708: EMPTY
7709: LIST
7710: PPUSH
7711: CALL_OW 69
7715: PPUSH
7716: LD_VAR 0 2
7720: PPUSH
7721: CALL_OW 74
7725: ST_TO_ADDR
// if GetDistUnits ( un , target1 ) + 3 < GetDistUnits ( un , target2 ) then
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_VAR 0 17
7735: PPUSH
7736: CALL_OW 296
7740: PUSH
7741: LD_INT 3
7743: PLUS
7744: PUSH
7745: LD_VAR 0 2
7749: PPUSH
7750: LD_VAR 0 18
7754: PPUSH
7755: CALL_OW 296
7759: LESS
7760: IFFALSE 7778
// begin ComAttackUnit ( un , target1 ) ;
7762: LD_VAR 0 2
7766: PPUSH
7767: LD_VAR 0 17
7771: PPUSH
7772: CALL_OW 115
// end else
7776: GO 7804
// if not HasTask ( un ) then
7778: LD_VAR 0 2
7782: PPUSH
7783: CALL_OW 314
7787: NOT
7788: IFFALSE 7804
// begin ComAttackUnit ( un , target2 ) ;
7790: LD_VAR 0 2
7794: PPUSH
7795: LD_VAR 0 18
7799: PPUSH
7800: CALL_OW 115
// end ; end ;
7804: GO 7639
7806: POP
7807: POP
// end until RuAtTeam = [ ] or RuAtTeam = 0 ;
7808: LD_VAR 0 5
7812: PUSH
7813: EMPTY
7814: EQUAL
7815: PUSH
7816: LD_VAR 0 5
7820: PUSH
7821: LD_INT 0
7823: EQUAL
7824: OR
7825: IFFALSE 7592
// end ;
7827: PPOPN 19
7829: END
// every 0 0$01 do var un ;
7830: GO 7832
7832: DISABLE
7833: LD_INT 0
7835: PPUSH
// begin enable ;
7836: ENABLE
// for un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
7837: LD_ADDR_VAR 0 1
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 2
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 69
7870: PUSH
7871: FOR_IN
7872: IFFALSE 7903
// begin if not See ( 2 , un ) then
7874: LD_INT 2
7876: PPUSH
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 292
7886: NOT
7887: IFFALSE 7901
// SetFuel ( un , 100 ) ;
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_INT 100
7896: PPUSH
7897: CALL_OW 240
// end ;
7901: GO 7871
7903: POP
7904: POP
// end ;
7905: PPOPN 1
7907: END
// export Lotysz , Sejenevich ; export function PrepareRussianComand ; begin
7908: LD_INT 0
7910: PPUSH
// uc_side = 3 ;
7911: LD_ADDR_OWVAR 20
7915: PUSH
7916: LD_INT 3
7918: ST_TO_ADDR
// uc_nation = 3 ;
7919: LD_ADDR_OWVAR 21
7923: PUSH
7924: LD_INT 3
7926: ST_TO_ADDR
// hc_class = 1 ;
7927: LD_ADDR_OWVAR 28
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// hc_name = Litivin Lotysz ;
7935: LD_ADDR_OWVAR 26
7939: PUSH
7940: LD_STRING Litivin Lotysz
7942: ST_TO_ADDR
// hc_gallery =  ;
7943: LD_ADDR_OWVAR 33
7947: PUSH
7948: LD_STRING 
7950: ST_TO_ADDR
// hc_sex = sex_male ;
7951: LD_ADDR_OWVAR 27
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
7959: LD_ADDR_OWVAR 31
7963: PUSH
7964: LD_INT 0
7966: PUSH
7967: LD_INT 0
7969: PUSH
7970: LD_INT 0
7972: PUSH
7973: LD_INT 0
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: ST_TO_ADDR
// Lotysz = CreateHuman ;
7982: LD_ADDR_EXP 31
7986: PUSH
7987: CALL_OW 44
7991: ST_TO_ADDR
// hc_name = Andriej Sejenevich ;
7992: LD_ADDR_OWVAR 26
7996: PUSH
7997: LD_STRING Andriej Sejenevich
7999: ST_TO_ADDR
// hc_gallery =  ;
8000: LD_ADDR_OWVAR 33
8004: PUSH
8005: LD_STRING 
8007: ST_TO_ADDR
// Sejenevich = CreateHuman ;
8008: LD_ADDR_EXP 32
8012: PUSH
8013: CALL_OW 44
8017: ST_TO_ADDR
// end ; end_of_file
8018: LD_VAR 0 1
8022: RET
// export function ISeeBase ; begin
8023: LD_INT 0
8025: PPUSH
// PlaceSeeing ( 51 , 60 , 2 , 10 ) ;
8026: LD_INT 51
8028: PPUSH
8029: LD_INT 60
8031: PPUSH
8032: LD_INT 2
8034: PPUSH
8035: LD_INT 10
8037: PPUSH
8038: CALL_OW 330
// PlaceSeeing ( 37 , 47 , 2 , 10 ) ;
8042: LD_INT 37
8044: PPUSH
8045: LD_INT 47
8047: PPUSH
8048: LD_INT 2
8050: PPUSH
8051: LD_INT 10
8053: PPUSH
8054: CALL_OW 330
// PlaceSeeing ( 21 , 24 , 2 , 10 ) ;
8058: LD_INT 21
8060: PPUSH
8061: LD_INT 24
8063: PPUSH
8064: LD_INT 2
8066: PPUSH
8067: LD_INT 10
8069: PPUSH
8070: CALL_OW 330
// RemoveSeeing ( 51 , 60 , 2 ) ;
8074: LD_INT 51
8076: PPUSH
8077: LD_INT 60
8079: PPUSH
8080: LD_INT 2
8082: PPUSH
8083: CALL_OW 331
// RemoveSeeing ( 37 , 47 , 2 ) ;
8087: LD_INT 37
8089: PPUSH
8090: LD_INT 47
8092: PPUSH
8093: LD_INT 2
8095: PPUSH
8096: CALL_OW 331
// RemoveSeeing ( 21 , 24 , 2 ) ;
8100: LD_INT 21
8102: PPUSH
8103: LD_INT 24
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: CALL_OW 331
// end ;
8113: LD_VAR 0 1
8117: RET
// export Cathy ; export function PrepareAmericanInMyBase ; var hum , ar_units ; begin
8118: LD_INT 0
8120: PPUSH
8121: PPUSH
8122: PPUSH
// music_nat = 1 ;
8123: LD_ADDR_OWVAR 71
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// uc_side = 1 ;
8131: LD_ADDR_OWVAR 20
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// uc_nation = 1 ;
8139: LD_ADDR_OWVAR 21
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// hc_sex = sex_female ;
8147: LD_ADDR_OWVAR 27
8151: PUSH
8152: LD_INT 2
8154: ST_TO_ADDR
// hc_class = 4 ;
8155: LD_ADDR_OWVAR 28
8159: PUSH
8160: LD_INT 4
8162: ST_TO_ADDR
// hc_skills = [ 1 , 4 , 3 , 6 ] ;
8163: LD_ADDR_OWVAR 31
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: LD_INT 4
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: LD_INT 6
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: ST_TO_ADDR
// hc_name = Cathy Simms ;
8186: LD_ADDR_OWVAR 26
8190: PUSH
8191: LD_STRING Cathy Simms
8193: ST_TO_ADDR
// hc_gallery = us ;
8194: LD_ADDR_OWVAR 33
8198: PUSH
8199: LD_STRING us
8201: ST_TO_ADDR
// hc_face_number = 21 ;
8202: LD_ADDR_OWVAR 34
8206: PUSH
8207: LD_INT 21
8209: ST_TO_ADDR
// Cathy = CreateHuman ;
8210: LD_ADDR_EXP 33
8214: PUSH
8215: CALL_OW 44
8219: ST_TO_ADDR
// PlaceUnitXY ( Cathy , 63 , 71 , true ) ;
8220: LD_EXP 33
8224: PPUSH
8225: LD_INT 63
8227: PPUSH
8228: LD_INT 71
8230: PPUSH
8231: LD_INT 1
8233: PPUSH
8234: CALL_OW 48
// ar_units = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Louis ] ;
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 22
8245: PUSH
8246: LD_INT 2
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PPUSH
8267: CALL_OW 69
8271: PUSH
8272: LD_EXP 15
8276: PUSH
8277: EMPTY
8278: LIST
8279: DIFF
8280: ST_TO_ADDR
// hum = ar_units [ Rand ( 1 , ar_units ) ] ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 3
8290: PUSH
8291: LD_INT 1
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: CALL_OW 12
8303: ARRAY
8304: ST_TO_ADDR
// InGameOn ;
8305: CALL_OW 8
// ComHold ( Cathy ) ;
8309: LD_EXP 33
8313: PPUSH
8314: CALL_OW 140
// CenterNowOnUnits ( Cathy ) ;
8318: LD_EXP 33
8322: PPUSH
8323: CALL_OW 87
// Say ( hum , DH-1 ) ;
8327: LD_VAR 0 2
8331: PPUSH
8332: LD_STRING DH-1
8334: PPUSH
8335: CALL_OW 88
// Say ( Cathy , DC-1 ) ;
8339: LD_EXP 33
8343: PPUSH
8344: LD_STRING DC-1
8346: PPUSH
8347: CALL_OW 88
// ComExitBuilding ( Louis ) ;
8351: LD_EXP 15
8355: PPUSH
8356: CALL_OW 122
// ComMoveXY ( Louis , GetX ( Cathy ) + Rand ( - 3 , 3 ) , GetY ( Cathy ) + Rand ( - 3 , 3 ) ) ;
8360: LD_EXP 15
8364: PPUSH
8365: LD_EXP 33
8369: PPUSH
8370: CALL_OW 250
8374: PUSH
8375: LD_INT 3
8377: NEG
8378: PPUSH
8379: LD_INT 3
8381: PPUSH
8382: CALL_OW 12
8386: PLUS
8387: PPUSH
8388: LD_EXP 33
8392: PPUSH
8393: CALL_OW 251
8397: PUSH
8398: LD_INT 3
8400: NEG
8401: PPUSH
8402: LD_INT 3
8404: PPUSH
8405: CALL_OW 12
8409: PLUS
8410: PPUSH
8411: CALL_OW 111
// ComTurnUnit ( Cathy , Louis ) ;
8415: LD_EXP 33
8419: PPUSH
8420: LD_EXP 15
8424: PPUSH
8425: CALL_OW 119
// repeat begin Wait ( 0 0$01 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// CenterOnUnits ( Louis ) ;
8436: LD_EXP 15
8440: PPUSH
8441: CALL_OW 85
// end until GetDistUnits ( Louis , Cathy ) < 6 ;
8445: LD_EXP 15
8449: PPUSH
8450: LD_EXP 33
8454: PPUSH
8455: CALL_OW 296
8459: PUSH
8460: LD_INT 6
8462: LESS
8463: IFFALSE 8429
// AddComTurnUnit ( Louis , Cathy ) ;
8465: LD_EXP 15
8469: PPUSH
8470: LD_EXP 33
8474: PPUSH
8475: CALL_OW 179
// Say ( Louis , DC-2 ) ;
8479: LD_EXP 15
8483: PPUSH
8484: LD_STRING DC-2
8486: PPUSH
8487: CALL_OW 88
// Say ( Cathy , DC-3 ) ;
8491: LD_EXP 33
8495: PPUSH
8496: LD_STRING DC-3
8498: PPUSH
8499: CALL_OW 88
// Say ( Louis , DC-4 ) ;
8503: LD_EXP 15
8507: PPUSH
8508: LD_STRING DC-4
8510: PPUSH
8511: CALL_OW 88
// Say ( Cathy , DC-5 ) ;
8515: LD_EXP 33
8519: PPUSH
8520: LD_STRING DC-5
8522: PPUSH
8523: CALL_OW 88
// case Query ( CathyInBase ) of 1 :
8527: LD_STRING CathyInBase
8529: PPUSH
8530: CALL_OW 97
8534: PUSH
8535: LD_INT 1
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8612
8543: POP
// begin Say ( Louis , DC-kill1 ) ;
8544: LD_EXP 15
8548: PPUSH
8549: LD_STRING DC-kill1
8551: PPUSH
8552: CALL_OW 88
// Say ( Cathy , DC-kill2 ) ;
8556: LD_EXP 33
8560: PPUSH
8561: LD_STRING DC-kill2
8563: PPUSH
8564: CALL_OW 88
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8568: LD_INT 1
8570: PPUSH
8571: LD_INT 2
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: LD_INT 1
8579: PPUSH
8580: CALL_OW 80
// InGameOff ;
8584: CALL_OW 9
// ComMoveXY ( Cathy , 52 , 103 ) ;
8588: LD_EXP 33
8592: PPUSH
8593: LD_INT 52
8595: PPUSH
8596: LD_INT 103
8598: PPUSH
8599: CALL_OW 111
// Wait ( 0 0$03 ) ;
8603: LD_INT 105
8605: PPUSH
8606: CALL_OW 67
// end ; 2 :
8610: GO 8663
8612: LD_INT 2
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8662
8620: POP
// begin WasCatch = true ;
8621: LD_ADDR_EXP 9
8625: PUSH
8626: LD_INT 1
8628: ST_TO_ADDR
// Say ( Louis , DC-close ) ;
8629: LD_EXP 15
8633: PPUSH
8634: LD_STRING DC-close
8636: PPUSH
8637: CALL_OW 88
// ComMoveXY ( Cathy , 80 , 71 ) ;
8641: LD_EXP 33
8645: PPUSH
8646: LD_INT 80
8648: PPUSH
8649: LD_INT 71
8651: PPUSH
8652: CALL_OW 111
// InGameOff ;
8656: CALL_OW 9
// end ; end ;
8660: GO 8663
8662: POP
// end ;
8663: LD_VAR 0 1
8667: RET
// every 0 0$01 trigger IsInArea ( Cathy , depaaa ) or GetDistUnits ( Cathy , ar_dep1 ) < 4 do
8668: LD_EXP 33
8672: PPUSH
8673: LD_INT 13
8675: PPUSH
8676: CALL_OW 308
8680: PUSH
8681: LD_EXP 33
8685: PPUSH
8686: LD_INT 64
8688: PPUSH
8689: CALL_OW 296
8693: PUSH
8694: LD_INT 4
8696: LESS
8697: OR
8698: IFFALSE 8727
8700: GO 8702
8702: DISABLE
// begin SetSide ( Cathy , 2 ) ;
8703: LD_EXP 33
8707: PPUSH
8708: LD_INT 2
8710: PPUSH
8711: CALL_OW 235
// ComEnterUnit ( Cathy , ar_dep1 ) ;
8715: LD_EXP 33
8719: PPUSH
8720: LD_INT 64
8722: PPUSH
8723: CALL_OW 120
// end ;
8727: END
// every 0 0$0.3 trigger GetClass ( Cathy ) <> 4 do
8728: LD_EXP 33
8732: PPUSH
8733: CALL_OW 257
8737: PUSH
8738: LD_INT 4
8740: NONEQUAL
8741: IFFALSE 8759
8743: GO 8745
8745: DISABLE
// begin enable ;
8746: ENABLE
// SetClass ( Cathy , 4 ) ;
8747: LD_EXP 33
8751: PPUSH
8752: LD_INT 4
8754: PPUSH
8755: CALL_OW 336
// end ;
8759: END
// every 0 0$01 trigger not IsInUnit ( Cathy ) and WasCatch and not UnitGoingToBuilding ( Cathy , ar_dep1 ) do
8760: LD_EXP 33
8764: PPUSH
8765: CALL_OW 310
8769: NOT
8770: PUSH
8771: LD_EXP 9
8775: AND
8776: PUSH
8777: LD_EXP 33
8781: PPUSH
8782: LD_INT 64
8784: PPUSH
8785: CALL 8837 0 2
8789: NOT
8790: AND
8791: IFFALSE 8809
8793: GO 8795
8795: DISABLE
// begin enable ;
8796: ENABLE
// ComEnterUnit ( Cathy , ar_dep1 ) ;
8797: LD_EXP 33
8801: PPUSH
8802: LD_INT 64
8804: PPUSH
8805: CALL_OW 120
// end ;
8809: END
// every 0 0$01 trigger IsInArea ( Cathy , River ) do
8810: LD_EXP 33
8814: PPUSH
8815: LD_INT 4
8817: PPUSH
8818: CALL_OW 308
8822: IFFALSE 8836
8824: GO 8826
8826: DISABLE
// begin RemoveUnit ( Cathy ) ;
8827: LD_EXP 33
8831: PPUSH
8832: CALL_OW 64
// end ;
8836: END
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
8837: LD_INT 0
8839: PPUSH
8840: PPUSH
8841: PPUSH
// x := GetX ( building ) ;
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: CALL_OW 250
8856: ST_TO_ADDR
// y := GetY ( building ) ;
8857: LD_ADDR_VAR 0 5
8861: PUSH
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 251
8871: ST_TO_ADDR
// if GetTaskList ( unit ) then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 437
8881: IFFALSE 8976
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
8883: LD_STRING e
8885: PUSH
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 437
8895: PUSH
8896: LD_INT 1
8898: ARRAY
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: EQUAL
8904: PUSH
8905: LD_VAR 0 4
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: CALL_OW 437
8919: PUSH
8920: LD_INT 1
8922: ARRAY
8923: PUSH
8924: LD_INT 2
8926: ARRAY
8927: EQUAL
8928: AND
8929: PUSH
8930: LD_VAR 0 5
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: CALL_OW 437
8944: PUSH
8945: LD_INT 1
8947: ARRAY
8948: PUSH
8949: LD_INT 3
8951: ARRAY
8952: EQUAL
8953: AND
8954: IFFALSE 8966
// result := true else
8956: LD_ADDR_VAR 0 3
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
8964: GO 8974
// result := false ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// end else
8974: GO 8984
// result := false ;
8976: LD_ADDR_VAR 0 3
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// end ;
8984: LD_VAR 0 3
8988: RET
