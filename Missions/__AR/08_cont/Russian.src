Export rupatrol, ruforce, rskill, rvehlist, rbullist, r2vehlist, r2bullist;
Export ruamo, ru_sforce, ru_angry, Gladkov, Platonov, CanUseBazooka, main_sci_dead, dont_attack;
Export Function PrepareRussian;
var i, p, un, towers, filter, list;
begin

     uc_side := 3;
     uc_nation := 3;

     CanUseBazooka = false;
     main_sci_dead = false;
     dont_attack   = false;

     rskill := [5, 6, 7][Difficulty];

     rupatrol := [];
     ruforce  := [];
     ru_sforce:= [];
     rvehlist := [];
     rbullist := [];
     r2vehlist := [];
     r2bullist := [];
     ru_angry := [0, 0, 49][Difficulty];

     ruamo := [3, 4, 5][Difficulty];

     ChangeSideFog(3, 6);

     Gladkov := NewCharacter('Gladkov');
     PlaceHumanInUnit(Gladkov, ru_depot2);

     Platonov := NewCharacter('Platonov');

     // patrol
        for i = 1 to [4, 5, 6][Difficulty] do
            begin
            if i < 4 then
               un := CreateHumanWithClass(1, rskill)
                else
               un := CreateHumanWithClass(9, rskill);

            ruforce := ruforce ^ un;
            PlaceUnitArea(un, forest_spawn, false);
            end;

        for i = 1 to 2 do
            begin
            vc_chassis := ru_medium_tracked;
            vc_engine  := engine_combustion;
            vc_control := control_computer;

            if i = 2 then
               vc_weapon  := ru_gun
            else
               vc_weapon := ru_gatling_gun;

            un := CreateVehicle;

            rupatrol := rupatrol ^ un;
            PlaceUnitArea(un, ru_patrol, false);
            end;


     // towers
        towers := FilterAllUnits([[[f_side, 3], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]], [f_empty]]);

        for i = 1 to towers do
            PlaceHumanInUnit(CreateHumanWithClass(1, rskill), towers[i]);
           

     // lab
        for i = 1 to 3 do
            begin
            PlaceHumanInUnit(CreateHumanWithClass(4, rskill), ru_lab1);
            PlaceHumanInUnit(CreateHumanWithClass(4, rskill), ru_lab2);
            end;

     // depot
        for i = 1 to 6 do
            PlaceHumanInUnit(CreateHumanWithClass(2, rskill), ru_depot2);

     // factory
        for i = 1 to 6 do
            PlaceHumanInUnit(CreateHumanWithClass(3, rskill), ru_fac);

     // barracks
        for p = 1 to 2 do
            for i = 1 to 6 do
                if i < [3, 4, 5][Difficulty] then
                   PlaceHumanInUnit(CreateHumanWithClass(9, rskill), FilterAllUnits([[f_side, 3], [f_btype, b_barracks]])[p])
                    else
                     PlaceHumanInUnit(CreateHumanWithClass(1, rskill), FilterAllUnits([[f_side, 3], [f_btype, b_barracks]])[p]);

     uc_side := 6;

        for i = 1 to 3 do
            PlaceHumanInUnit(CreateHumanWithClass(4, rskill), ru2_lab);

     // barracks
        for p = 1 to 4 do
            for i = 1 to 6 do
                if i < [3, 4, 5][Difficulty] then
                   PlaceHumanInUnit(CreateHumanWithClass(9, rskill), FilterAllUnits([[f_side, 6], [f_btype, b_barracks]])[p])
                    else
                     PlaceHumanInUnit(CreateHumanWithClass(1, rskill), FilterAllUnits([[f_side, 6], [f_btype, b_barracks]])[p]);

     // depot
        for i = 1 to 6 do
            PlaceHumanInUnit(CreateHumanWithClass(2, rskill), ru_depot1);

     // factory
        for i = 1 to 6 do
            PlaceHumanInUnit(CreateHumanWithClass(3, rskill), ru_fac2);

     // towers
        towers := FilterAllUnits([[[f_side, 6], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]], [f_empty]]);

        for i = 1 to towers do
            PlaceHumanInUnit(CreateHumanWithClass(1, rskill), towers[i]);

     // proceed
        rbullist := [b_oil_power, 84, 141, 2];

        if Difficulty > 1 then
           begin
           ComResearch(ru_lab2, tech_weap2);
           ComResearch(ru_lab1, tech_comp2);
           if Difficulty > 2 then
              AddComResearch(ru_lab2, tech_weap3);
           end;

       

End;



// CutTreeInArea(FilterAllUnits([f_weapon, ru_bulldozer]), tree2);

Every 0$01 trigger FilterAllUnits([f_side, 3]) > 0 do
var i, p, un, list, list2, list3, dep, lab, fac, towers, crane, bar, eng, sol, mech, sci, filter, live,
    crane_parking, enemy, doc, hurts;
begin
enable;


    live := 675;
    dep  := FilterAllUnits([[f_side, 3], [f_btype, b_warehouse]])[1];
    fac  := FilterAllUnits([[f_side, 3], [f_btype, b_factory]])[1];
    lab  := FilterAllUnits([[f_side, 3], [f_or, [f_btype, b_lab], [f_btype, b_lab_full]]])[1];

    crane_parking := ru1_crane_parking;

    // heal
       doc := FilterAllUnits([[[f_side, 3], [f_class, 4], [f_lives, live]]]);
       hurts := FilterAllUnits([[[f_side, 3], [f_type, unit_human], [f_not, [f_lives, live]]]]) diff UnitFilter(ru_sforce, [f_class, class_bazooker]);

       if hurts then
          begin
          for i = 1 to hurts do
              if GetDistUnits(hurts[i], dep) > 10 then
                 ComMoveXY(hurts[i], 89, 137);

          list := UnitFilter(hurts, [f_distxy, 93, 137, 20]);

          if doc = 0 then
             begin
             filter := FilterAllUnits([[[f_side, 3], [f_class, 3]]]);
             if IsInUnit(filter[1]) then
                ComExitBuilding(filter[1]);

             ComEnterUnit(filter[1], lab);
             AddComChangeProfession(filter[1], 4);
             end
              else
               if doc > 4 then
                  begin
                  for i = 1 to 4 do
                      if IsInUnit(doc[i]) then
                         ComExitBuilding(doc[i])
                          else
                         if list then
                            ComHeal(doc[i], list[1]);
                  end
                   else
                    begin
                    for i = 1 to doc do
                        if IsInUnit(doc[i]) then
                           ComExitBuilding(doc[i])
                            else
                           if list then
                              ComHeal(doc[i], list[1]);
                    end;
          end
           else
            begin
            filter := FilterAllUnits([[[f_side, 3], [f_class, 4], [f_outside]]]);

            if filter then
               for i = 1 to filter do
                   ComEnterUnit(filter[i], lab);
            end;


    // bazookers
       list   := FilterAllUnits([[f_side, 3], [f_class, class_bazooker]]);
       filter := FilterAllUnits([[f_side, 2], [f_not, [f_type, unit_building]]]);

       if CanUseBazooka then
          IntBazooka(list, filter);

    // factory proceed
       if BuildingStatus(fac) = bs_idle then
          begin
          if FilterAllUnits([[f_side, 3], [f_weapon, ru_crane]]) = 0 then
             ProduceCrane(fac);
          if FilterAllUnits([[f_side, 3], [f_weapon, ru_cargo_bay]]) = 0 then
             ProduceCargoBay(fac);
          if rvehlist >= 4 then
             ComConstruct(fac, rvehlist[1], rvehlist[2], rvehlist[3], rvehlist[4]);
          if FilterAllUnits([[f_side, 3], [f_bweapon, 0], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]]) then
             begin
             towers := FilterAllUnits([[f_side, 3], [f_bweapon, 0], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]]);
             ComPlaceWeapon(towers[1], [ru_heavy_gun, ru_rocket_launcher][Rand(1,2)]);
             end; 
          end;

    // weponary personel
       sol := FilterAllUnits([[f_side, 3], [f_outside], [f_or, [f_class, 1], [f_class, 9]]]) diff ruforce;

       if sol then
          begin
          list := FilterAllUnits([[f_side, 3], [f_btype, b_barracks]]);
          towers := FilterAllUnits([[[f_side, 3], [f_empty], [f_btype, b_bunker]]]);

          if towers then
             ComEnterUnit(sol[1], towers[1])
              else
               if list then
                  begin
                  for i = 1 to list do
                      begin
                      p := UnitsInside(list[i]);

                      if p < 6 then
                         begin
                         ComEnterUnit(sol[1], list[i]);
                         end;
                      end;
                  end;
          end;

    // buildings
       filter := FilterAllUnits([[f_side, 3], [f_type, unit_building], [f_not, [f_lives, 1000]]]);
       eng := FilterAllUnits([[[f_side, 3], [f_class, 2], [f_lives, live]]]);
       crane := FilterAllUnits([[[f_side, 3], [f_weapon, ru_crane], [f_lives, live]]]);

       if rbullist > 0 and filter = 0 and eng and FilterAllUnits([[f_side, 3], [f_btype, b_warehouse]]) then
          begin
          for i = 1 to eng do
              if not HasTask(eng[i]) then
                 ComBuild(eng[i], rbullist[1], rbullist[2], rbullist[3], rbullist[4]);
          end;

       if FilterAllUnits([[f_side, 3], [f_or, [f_btype, b_depot], [f_btype, b_workshop], [f_btype, b_armoury]]]) then
          begin
          p := FilterAllUnits([[f_side, 3], [f_or, [f_btype, b_depot], [f_btype, b_workshop], [f_btype, b_armoury]]])[1];
          ComUpgrade(p);
          end;

       if filter > 0 then
          begin

          if crane then
             for i = 1 to crane do
                 if not HasTask(crane[i]) then
                    ComRepairBuilding(crane[i], filter[1]);

          if eng then
             for i = 1 to eng do
                 begin
                 if IsInUnit(eng[i]) then
                    ComExitBuilding(eng[i])
                     else
                 if not HasTask(eng[i]) then
                    if filter < 2 then
                       ComRepairBuilding(eng[i], filter[1])
                        else
                         begin
                         if i <= 3 then
                            ComRepairBuilding(eng[i], filter[1])
                             else
                              ComRepairBuilding(eng[i], filter[2]);
                         end;
                 end;
          end
           else
           if rbullist = 0 then
              begin
              for i = 1 to eng do
                  if not HasTask(eng[i]) and not IsInUnit(eng[i]) then
                     ComEnterUnit(eng[i], FilterAllUnits([[f_side, GetSide(eng[1])], [f_btype, b_warehouse]])[1]);

              for i = 1 to crane do
                  if not IsInArea(crane[i], crane_parking) then
                     ComMoveToArea(crane[i], crane_parking);
              end;
End;


Every 0$01 trigger FilterAllUnits([f_side, 6]) > 0 do
var i, p, un, list, list2, list3, dep, lab, fac, towers, crane, bar, eng, sol, mech, sci, filter, live,
    crane_parking, enemy, doc, hurts;
begin
enable;


    live := 675;
    dep  := FilterAllUnits([[f_side, 6], [f_btype, b_warehouse]])[1];
    fac  := FilterAllUnits([[f_side, 6], [f_btype, b_factory]])[1];
    lab  := FilterAllUnits([[f_side, 6], [f_or, [f_btype, b_lab], [f_btype, b_lab_full]]])[1];

    crane_parking := ru2_crane_parking;

    // heal
       doc := FilterAllUnits([[[f_side, 6], [f_class, 4], [f_lives, live]]]);
       hurts := FilterAllUnits([[[f_side, 6], [f_type, unit_human], [f_not, [f_lives, live]]]]);

       if hurts then
          begin
          for i = 1 to hurts do
              if GetDistUnits(hurts[i], dep) > 10 then
                 ComMoveXY(hurts[i], 122, 89);

          list := UnitFilter(hurts, [f_distxy, 122, 89, 10]);

          if doc = 0 then
             begin
             filter := FilterAllUnits([[[f_side, 6], [f_class, 3]]]);

             if IsInUnit(filter[1]) then
                ComExitBuilding(filter[1]);

             ComEnterUnit(filter[1], FilterAllUnits([[[f_side, 6], [f_or, [f_btype, b_lab], [f_btype, b_lab_full]]]])[1]);
             AddComChangeProfession(filter[1], 4);
             end
              else
               if doc > 4 then
                  begin
                  for i = 1 to 4 do
                      if IsInUnit(doc[i]) then
                         ComExitBuilding(doc[i])
                          else
                         if list then
                            ComHeal(doc[i], list[1]);
                  end
                   else
                    begin
                    for i = 1 to doc do
                        if IsInUnit(doc[i]) then
                           ComExitBuilding(doc[i])
                            else
                           if list then
                              ComHeal(doc[i], list[1]);
                    end;
          end
           else
            begin
            filter := FilterAllUnits([[[f_side, 6], [f_class, 4], [f_outside]]]);

            if filter then
               for i = 1 to filter do
                   ComEnterUnit(filter[i], lab);
            end;


    // bazookers
       list   := FilterAllUnits([[f_side, 6], [f_class, class_bazooker]]);
       filter := FilterAllUnits([[f_side, 2], [f_not, [f_type, unit_building]]]);

       if CanUseBazooka then
          IntBazooka(list, filter);

    // factory proceed
       if BuildingStatus(fac) = bs_idle then
          begin
          if FilterAllUnits([[f_side, 6], [f_weapon, ru_crane]]) = 0 then
             ProduceCrane(fac);
          if FilterAllUnits([[f_side, 6], [f_weapon, ru_cargo_bay]]) = 0 then
             ProduceCargoBay(fac);
          if rvehlist >= 4 then
             ComConstruct(fac, r2vehlist[1], r2vehlist[2], r2vehlist[3], r2vehlist[4]);
          if FilterAllUnits([[f_side, 6], [f_bweapon, 0], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]]) then
             begin
             towers := FilterAllUnits([[f_side, 6], [f_bweapon, 0], [f_or, [f_btype, b_bunker], [f_btype, b_turret]]]);
             ComPlaceWeapon(towers[1], [ru_heavy_gun, ru_rocket_launcher][Rand(1,2)]);
             end;
          end;

    // weponary personel
       sol := FilterAllUnits([[f_side, 6], [f_outside], [f_or, [f_class, 1], [f_class, 9]]]) diff ruforce;

       if sol then
          begin
          list := FilterAllUnits([[f_side, 6], [f_btype, b_barracks]]);
          towers := FilterAllUnits([[[f_side, 6], [f_empty], [f_btype, b_bunker]]]);

          if towers then
             ComEnterUnit(sol[1], towers[1])
              else
               if list then
                  begin
                  for i = 1 to list do
                      begin
                      p := UnitsInside(list[i]);

                      if p < 6 then
                         begin
                         ComEnterUnit(sol[1], list[i]);
                         end;
                      end;
                  end;
          end;

    // buildings
       filter := FilterAllUnits([[f_side, 6], [f_type, unit_building], [f_not, [f_lives, 1000]]]);
       eng := FilterAllUnits([[[f_side, 6], [f_class, 2], [f_lives, live]]]);
       crane := FilterAllUnits([[[f_side, 6], [f_weapon, ru_crane], [f_lives, live]]]);

       if r2bullist > 0 and filter = 0 and eng and FilterAllUnits([[f_side, 6], [f_btype, b_warehouse]]) then
          begin
          for i = 1 to eng do
              if not HasTask(eng[i]) then
                 ComBuild(eng[i], r2bullist[1], r2bullist[2], r2bullist[3], r2bullist[4]);
          end;

       if FilterAllUnits([[f_side, 6], [f_or, [f_btype, b_depot], [f_btype, b_workshop], [f_btype, b_armoury]]]) then
          begin
          p := FilterAllUnits([[f_side, 6], [f_or, [f_btype, b_depot], [f_btype, b_workshop], [f_btype, b_armoury]]])[1];
          ComUpgrade(p);
          end;

       if filter > 0 then
          begin

          if crane then
             for i = 1 to crane do
                 if not HasTask(crane[i]) then
                    ComRepairBuilding(crane[i], filter[1]);

          if eng then
             for i = 1 to eng do
                 begin
                 if IsInUnit(eng[i]) then
                    ComExitBuilding(eng[i])
                     else
                 if not HasTask(eng[i]) then
                    if filter < 2 then
                       ComRepairBuilding(eng[i], filter[1])
                        else
                         begin
                         if i <= 3 then
                            ComRepairBuilding(eng[i], filter[1])
                             else
                              ComRepairBuilding(eng[i], filter[2]);
                         end;
                 end;
          end
           else
           if r2bullist = 0 then
              begin
              for i = 1 to eng do
                  if not HasTask(eng[i]) and not IsInUnit(eng[i]) then
                     ComEnterUnit(eng[i], FilterAllUnits([[f_side, GetSide(eng[1])], [f_btype, b_warehouse]])[1]);

              for i = 1 to crane do
                  if not IsInArea(crane[i], crane_parking) then
                     ComMoveToArea(crane[i], crane_parking);
              end;
End;



Every 0$03 trigger ruforce do
var x, y, i, p;
begin


     x := [81, 108, 145, 108];
     y := [ 7,   4,  20,   4];
     p := 0;

     while(in_base = false) do
      begin
      Wait(0$01);
            
      for i = 1 to ruforce do
          begin
          if not See(2, ruforce[i]) then
             begin

             if not HasTask(ruforce[i]) then
                begin

                if (p < 4) then
                   p = p + 1
                    else
                     p = 1;

                AddComMoveXY(ruforce[i], x[p], y[p]);
                AddComWait(ruforce[i], 0$09);
                end
                 else
                  if GetDistUnitXY(ruforce[i], 76, 12) > 72 then
                     ComMoveXY(ruforce[i], 76, 12);

             end
              else
               ComAttackUnit(ruforce[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), ruforce[i]));
          end;

      end;

End;


Every 0$01 trigger rupatrol do
var i, p, x, y;
begin


     x := [66, 157];
     y := [21, 57];

     while(rupatrol) do
      begin
      Wait(0$01);

      for i = 1 to rupatrol do
          begin
          if GetFuel(rupatrol[i]) < 30 then
             begin
             ComMoveXY(rupatrol[i], 124, 92);
             if GetDistUnits(rupatrol[i], ru_depot1) < 6 then
                SetFuel(rupatrol[i], 100);
             end
              else
          if not HasTask(rupatrol[i]) then
             begin
             AddComMoveXY(rupatrol[i], x[i], y[i]);
             AddComWait(rupatrol[i], Rand(0$01, 0$21));
             AddComMoveToArea(rupatrol[i], ru_patrol);
             AddComWait(rupatrol[i], Rand(0$01, 0$11));
             end
              else
               if See(2, rupatrol[i]) then
                  ComAttackUnit(rupatrol[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), rupatrol[i]));
               
               if GetDistUnitXY(rupatrol[i], 94, 60) > 72 then
                  ComMoveXY(rupatrol[i], 94, 60);
          end;

      end;
           

End;



Export Function ProduceCrane(fac);
begin
if FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_computer]]) and FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_noncombat]]) then
   ComConstruct(fac, ru_medium_wheeled, engine_combustion, control_computer, ru_crane)
    else
     result = false;
End;


Export Function ProduceCargoBay(fac);
begin
if FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_computer]]) and FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_noncombat]]) then
   ComConstruct(fac, ru_medium_wheeled, engine_combustion, control_computer, ru_cargo_bay)
    else
     result = false;
End;


Export Function ProduceBulldozer(fac);
begin
if FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_computer]]) and FilterAllUnits([[f_side, GetSide(fac)], [f_btype, b_ext_noncombat]]) then
   ComConstruct(fac, ru_heavy_wheeled, engine_combustion, control_computer, ru_bulldozer)
    else
     result = false;
End;

Export Function CutTreeInArea(bulldozer, area);
var i;
begin
area = ListEnvironmentArea(area);

if bulldozer > 0 then
for i = 1 to area do
    if IsEnvironment(area[i][1], area[i][2]) then
       if not HasTask(bulldozer) then
          AddComMoveXY(bulldozer, area[i][1], area[i][2]);
End;

Export Function ProduceNewCombatCar(fac);
var chassis, weapon, w1, w2;
begin
weapon := [ru_gun, ru_rocket_launcher, ru_heavy_gun];
chassis:= [ru_medium_tracked, ru_heavy_tracked];

w1 := Rand(1, weapon);
if weapon[w1] <> ru_heavy_gun then
   w2 := Rand(1, chassis)
    else
     w2 := 2;


if fac = FilterAllUnits([[f_side, 3], [f_btype, b_factory]])[1] and FilterAllUnits([[f_side, 3], [f_btype, b_ext_computer]]) then
   begin
   rvehlist := rvehlist ^ chassis[w2];
   rvehlist := rvehlist ^ engine_combustion;
   rvehlist := rvehlist ^ control_computer;
   rvehlist := rvehlist ^ weapon[w1];
   end;

if fac = FilterAllUnits([[f_side, 6], [f_btype, b_factory]])[1] and FilterAllUnits([[f_side, 6], [f_btype, b_ext_computer]]) then
   begin
   r2vehlist := r2vehlist ^ chassis[w2];
   r2vehlist := r2vehlist ^ engine_combustion;
   r2vehlist := r2vehlist ^ control_computer;
   r2vehlist := r2vehlist ^ weapon[w1];
   end;

End;

Export Function IntBazooka(list, filter);
var ta, c, i;
begin

     // list   := FilterAllUnits([[f_side, 3], [f_class, class_bazooker]]);
     // filter := FilterAllUnits([[f_side, side], [f_not, [f_type, unit_building]]]);

     c := Rand(1, 3);
              
         for i = 1 to list do
         for ta in filter do
             begin

              if GetDistUnits(list[i], ta) <= 13 then
                 begin

                      Case c of
                      1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                      2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                      3: ;
                      end;

                 end;
             end;

End;



Every 4$00 trigger FilterAllUnits([[f_or, [f_side, 6], [f_side, 3]], [f_type, unit_vehicle], [f_not, [f_or, [[f_weapon, ru_cargo_bay], [f_weapon, ru_crane], [f_weapon, ru_bulldozer]]]]]) >= ruamo and dont_attack = false do
var i, un, filter;
begin
enable;

filter := FilterAllUnits([[f_or, [f_side, 6], [f_side, 3]], [f_type, unit_vehicle], [f_not, [f_weapon, ru_bulldozer]]]);

for i = 1 to filter do
    if not HasTask(filter[i]) then
       ComAttackUnit(filter[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), filter[i]));


while(UnitFilter(filter, [f_inarea, ru_at]) > 0) do
begin
Wait(0$02);

filter := FilterAllUnits([[f_or, [f_side, 6], [f_side, 3]], [f_type, unit_vehicle], [f_not, [f_weapon, ru_bulldozer]]]);

for i = 1 to filter do
    if not HasTask(filter[i]) then
       ComAttackUnit(filter[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), filter[i]));
end;

End;


Every 0$01 trigger ru_sforce > 0 do
var i, filter;
begin
enable;

for i = 1 to ru_sforce do
    if not HasTask(ru_sforce[i]) then
       ComAttackUnit(ru_sforce[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), ru_sforce[i]));
End;

Every 0$01 trigger tick >= 35*60*7 do
begin
if FilterAllUnits([f_weapon, ru_bulldozer]) = 0 then
   ProduceBulldozer(ru_fac);

Wait(1$00);
CutTreeInArea(FilterAllUnits([[f_side, 3], [f_weapon, ru_bulldozer]])[1], tree1);
end;

Every 0$01 trigger tick >= 35*60*10 do
begin
if FilterAllUnits([f_weapon, ru_bulldozer]) = 0 then
   ProduceBulldozer(ru_fac);

Wait(1$00);
CutTreeInArea(FilterAllUnits([[f_side, 3], [f_weapon, ru_bulldozer]])[1], tree2);
end;

Export bulldog;
Every 0$01 trigger tick >= 35*60*16 do
bulldog := 0;

Every 6$00 trigger tick >= 35*60*16 and bulldog < Difficulty do
begin
enable;

bulldog := bulldog + 1;

if FilterAllUnits([f_weapon, ru_bulldozer]) = 0 then
   ProduceBulldozer(ru_fac);

Wait(2$00);
CutTreeInArea(FilterAllUnits([[f_side, 3], [f_weapon, ru_bulldozer]])[1], tree3);
end;


Every 5$30 trigger in_base and ruamo < [8, 10, 12][Difficulty] do
var i;
begin

     for i = 1 to ruamo do
         begin
         ProduceNewCombatCar(ru_fac);
         ProduceNewCombatCar(ru_fac2);
         end;

End;


Every 30$00 do
var i;
begin

     for i = 1 to [1, 1, 2][Difficulty] do
         begin
         ProduceNewCombatCar(ru_fac);
         ProduceNewCombatCar(ru_fac2);
         end;

End;


Every 50$00 do
var i;
begin

     for i = 1 to [2, 3, 4][Difficulty] do
         begin
         ProduceNewCombatCar(ru_fac);
         ProduceNewCombatCar(ru_fac2);
         end;

End;


Every 16$00 trigger Difficulty > 1 do
var i, un;
begin
enable;

     uc_side := 3;
     uc_nation := 3;

     for i = 1 to [1, 4, 7][Difficulty] do
         begin
         un := CreateHumanWithClass([class_soldier, class_bazooker][Rand(1,2)], rskill-1);
         ru_sforce := ru_sforce ^ un;
         PlaceUnitArea(un, ru_north_spawn, false);
         end;

End;




Every 0$03 do
var i, c, p, skr, filter, cargo, dep;
begin
Enable;

     filter := FilterAllUnits([[f_ok], [f_or, [f_side, 3], [f_side, 6]], [f_or, [f_class, class_engineer], [f_class, class_apeman_engineer]] ]);
     cargo  := FilterAllUnits([[f_or, [f_side, 3], [f_side, 6]], [f_weapon, ru_cargo_bay]]);
     dep    := FilterAllUnits([[f_or, [f_side, 3], [f_side, 6]], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

     skr = GetListOfCratesInArea(super_crates);


     c = 1;


     While c < skr do
     begin

     if cargo = 0 then
        begin

        for p = 1 to 2 do // always send 2 collector's
            if not HasTask(filter[p]) then
            ComCollect(filter[p], skr[c], skr[c+1]);

         c = c + 2;
        end;

     if cargo > 0 then
        begin
        for i = 1 to cargo do
            begin
            if GetFuel(cargo[i]) > 40 then
               ComCollect(cargo[i], skr[c], skr[c+1])
                else
                  if not See(2, cargo[i]) and GetCargo(cargo[i], mat_cans) = 0 then
                     SetFuel(cargo[i], 100);
        end;

        c = c + 2;
        end;


     end;

End;




Every 4$00 trigger ru_angry >= [960, 870, 780] and gladkov_attack and dont_attack = false do
var i, veh;
begin
enable;

ru_angry := ru_angry - 500;

uc_side := 7;
uc_nation := 3;

for i = 1 to 8 do
    begin
    vc_chassis := [ru_medium_tracked, ru_heavy_tracked, ru_heavy_tracked][Difficulty];
    vc_engine  := engine_combustion;
    vc_control := control_manual;
    vc_weapon  := [ru_gun, ru_gatling_gun, ru_rocket_launcher][Rand(1,3)];
    veh := CreateVehicle;
    PlaceHumanInUnit(CreateHumanWithClass(3, rskill), veh);
    PlaceUnitArea(veh, ru_south_spawn, false);
    end;

End;


Every 3$00 trigger gladkov_attack and dont_attack = false do
var i, veh;
begin
uc_side := 7;
uc_nation := 3;

for i = 1 to 8 do
    begin
    vc_chassis := [ru_medium_tracked, ru_heavy_tracked, ru_heavy_tracked][Difficulty];
    vc_engine  := engine_combustion;
    vc_control := control_manual;
    vc_weapon  := [ru_gun, ru_gatling_gun, ru_rocket_launcher][Rand(1,3)];
    veh := CreateVehicle;
    PlaceHumanInUnit(CreateHumanWithClass(3, rskill), veh);
    PlaceUnitArea(veh, ru_south_spawn, false);
    end;

Wait(0$30);

for i = 1 to [2,4,6][Difficulty] do
    begin
    vc_chassis := [ru_medium_tracked, ru_heavy_tracked, ru_heavy_tracked][Difficulty];
    vc_engine  := engine_combustion;
    vc_control := control_manual;
    vc_weapon  := [ru_gun, ru_gatling_gun, ru_rocket_launcher][Rand(1,3)];
    veh := CreateVehicle;
    PlaceHumanInUnit(CreateHumanWithClass(3, rskill), veh);
    PlaceUnitArea(veh, ru_south_spawn, false);
    end;

End;


Every 0$01 trigger FilterAllUnits([f_side, 7]) do
var filter, i;
begin
enable;

filter := FilterAllUnits([f_side, 7]);

       for i = 1 to filter do
           if not HasTask(filter[i]) then
              ComAttackUnit(filter[i], NearestUnitToUnit(FilterAllUnits([f_side, 2]), filter[i]));

end;


Export main_sci;
Export Function AmmoEvent;
var un, i;
begin
uc_side := 3;
uc_nation := 3;

for i = 1 to 3 do
    begin
    PrepareHuman(false, 4, 6);
    un := CreateHuman;
    PlaceUnitArea(un, ru_south_spawn, false);
    ComEnterUnit(un, ru_lab1);
    end;

    hc_sex = sex_male;
    main_sci = CreateHuman;
    PlaceUnitArea(main_sci, ru_south_spawn, false);
    ComEnterUnit(main_sci, ru_lab1);

End;



Every 0$01 trigger IsInUnit(main_sci) do
begin
dont_attack = false;
Wait(6$00);
CanUseBazooka = true;
End;