// export function Attack ( attackers , attackFormula , retreatFormula , captureTanks ) ; var i , j , tag , sol , sci , mech , tanks , veh ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if not attackFormula then
  11: LD_VAR 0 2
  15: NOT
  16: IFFALSE 20
// exit ;
  18: GO 1811
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
  20: LD_ADDR_VAR 0 9
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: LD_INT 25
  32: PUSH
  33: LD_INT 1
  35: PUSH
  36: EMPTY
  37: LIST
  38: LIST
  39: PPUSH
  40: CALL_OW 72
  44: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
  45: LD_ADDR_VAR 0 10
  49: PUSH
  50: LD_VAR 0 1
  54: PPUSH
  55: LD_INT 25
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: PPUSH
  65: CALL_OW 72
  69: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
  70: LD_ADDR_VAR 0 11
  74: PUSH
  75: LD_VAR 0 1
  79: PPUSH
  80: LD_INT 25
  82: PUSH
  83: LD_INT 3
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PPUSH
  90: CALL_OW 72
  94: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
  95: LD_ADDR_VAR 0 12
  99: PUSH
 100: LD_VAR 0 1
 104: PPUSH
 105: LD_INT 21
 107: PUSH
 108: LD_INT 2
 110: PUSH
 111: EMPTY
 112: LIST
 113: LIST
 114: PPUSH
 115: CALL_OW 72
 119: ST_TO_ADDR
// if sci then
 120: LD_VAR 0 10
 124: IFFALSE 161
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 126: LD_VAR 0 10
 130: PPUSH
 131: LD_VAR 0 2
 135: PUSH
 136: LD_INT 2
 138: ARRAY
 139: PUSH
 140: LD_INT 1
 142: ARRAY
 143: PPUSH
 144: LD_VAR 0 2
 148: PUSH
 149: LD_INT 2
 151: ARRAY
 152: PUSH
 153: LD_INT 2
 155: ARRAY
 156: PPUSH
 157: CALL_OW 111
// repeat wait ( 10 ) ;
 161: LD_INT 10
 163: PPUSH
 164: CALL_OW 67
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
 168: LD_ADDR_VAR 0 9
 172: PUSH
 173: LD_VAR 0 1
 177: PPUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 72
 192: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
 193: LD_ADDR_VAR 0 10
 197: PUSH
 198: LD_VAR 0 1
 202: PPUSH
 203: LD_INT 25
 205: PUSH
 206: LD_INT 4
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PPUSH
 213: CALL_OW 72
 217: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
 218: LD_ADDR_VAR 0 11
 222: PUSH
 223: LD_VAR 0 1
 227: PPUSH
 228: LD_INT 25
 230: PUSH
 231: LD_INT 3
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 72
 242: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 243: LD_ADDR_VAR 0 12
 247: PUSH
 248: LD_VAR 0 1
 252: PPUSH
 253: LD_INT 21
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PPUSH
 263: CALL_OW 72
 267: ST_TO_ADDR
// if sol then
 268: LD_VAR 0 9
 272: IFFALSE 842
// begin for i in sol do
 274: LD_ADDR_VAR 0 6
 278: PUSH
 279: LD_VAR 0 9
 283: PUSH
 284: FOR_IN
 285: IFFALSE 840
// begin tag := GetTag ( i ) ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: LD_VAR 0 6
 296: PPUSH
 297: CALL_OW 110
 301: ST_TO_ADDR
// if not tag then
 302: LD_VAR 0 8
 306: NOT
 307: IFFALSE 416
// begin if GetLives ( i ) = 1000 then
 309: LD_VAR 0 6
 313: PPUSH
 314: CALL_OW 256
 318: PUSH
 319: LD_INT 1000
 321: EQUAL
 322: IFFALSE 338
// SetTag ( i , 1 ) else
 324: LD_VAR 0 6
 328: PPUSH
 329: LD_INT 1
 331: PPUSH
 332: CALL_OW 109
 336: GO 414
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 338: LD_VAR 0 6
 342: PPUSH
 343: LD_VAR 0 2
 347: PUSH
 348: LD_INT 2
 350: ARRAY
 351: PUSH
 352: LD_INT 1
 354: ARRAY
 355: PPUSH
 356: LD_VAR 0 2
 360: PUSH
 361: LD_INT 2
 363: ARRAY
 364: PUSH
 365: LD_INT 2
 367: ARRAY
 368: PPUSH
 369: CALL_OW 297
 373: PUSH
 374: LD_INT 10
 376: GREATER
 377: IFFALSE 414
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 379: LD_VAR 0 6
 383: PPUSH
 384: LD_VAR 0 2
 388: PUSH
 389: LD_INT 2
 391: ARRAY
 392: PUSH
 393: LD_INT 1
 395: ARRAY
 396: PPUSH
 397: LD_VAR 0 2
 401: PUSH
 402: LD_INT 2
 404: ARRAY
 405: PUSH
 406: LD_INT 2
 408: ARRAY
 409: PPUSH
 410: CALL_OW 111
// end else
 414: GO 838
// begin if GetLives ( i ) < 720 then
 416: LD_VAR 0 6
 420: PPUSH
 421: CALL_OW 256
 425: PUSH
 426: LD_INT 720
 428: LESS
 429: IFFALSE 480
// begin SetTag ( i , 0 ) ;
 431: LD_VAR 0 6
 435: PPUSH
 436: LD_INT 0
 438: PPUSH
 439: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 443: LD_VAR 0 6
 447: PPUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 2
 455: ARRAY
 456: PUSH
 457: LD_INT 1
 459: ARRAY
 460: PPUSH
 461: LD_VAR 0 2
 465: PUSH
 466: LD_INT 2
 468: ARRAY
 469: PUSH
 470: LD_INT 2
 472: ARRAY
 473: PPUSH
 474: CALL_OW 111
// end else
 478: GO 838
// if tag <= attackFormula [ 1 ] then
 480: LD_VAR 0 8
 484: PUSH
 485: LD_VAR 0 2
 489: PUSH
 490: LD_INT 1
 492: ARRAY
 493: LESSEQUAL
 494: IFFALSE 662
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
 496: LD_VAR 0 6
 500: PPUSH
 501: LD_VAR 0 2
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PUSH
 510: LD_VAR 0 8
 514: ARRAY
 515: PUSH
 516: LD_INT 1
 518: ARRAY
 519: PPUSH
 520: LD_VAR 0 2
 524: PUSH
 525: LD_INT 1
 527: ARRAY
 528: PUSH
 529: LD_VAR 0 8
 533: ARRAY
 534: PUSH
 535: LD_INT 2
 537: ARRAY
 538: PPUSH
 539: CALL_OW 297
 543: PUSH
 544: LD_INT 6
 546: GREATER
 547: IFFALSE 598
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
 549: LD_VAR 0 6
 553: PPUSH
 554: LD_VAR 0 2
 558: PUSH
 559: LD_INT 1
 561: ARRAY
 562: PUSH
 563: LD_VAR 0 8
 567: ARRAY
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: PUSH
 582: LD_VAR 0 8
 586: ARRAY
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: CALL_OW 114
 596: GO 660
// if not FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_dist , i , 10 ] ] ) then
 598: LD_INT 81
 600: PUSH
 601: LD_VAR 0 6
 605: PPUSH
 606: CALL_OW 255
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: PUSH
 615: LD_INT 91
 617: PUSH
 618: LD_VAR 0 6
 622: PUSH
 623: LD_INT 10
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PPUSH
 635: CALL_OW 69
 639: NOT
 640: IFFALSE 660
// SetTag ( i , tag + 1 ) ;
 642: LD_VAR 0 6
 646: PPUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: PLUS
 655: PPUSH
 656: CALL_OW 109
// end else
 660: GO 838
// begin if captureTanks and FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) then
 662: LD_VAR 0 4
 666: PUSH
 667: LD_INT 81
 669: PUSH
 670: LD_VAR 0 6
 674: PPUSH
 675: CALL_OW 255
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 21
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 50
 696: PUSH
 697: EMPTY
 698: LIST
 699: PUSH
 700: LD_INT 91
 702: PUSH
 703: LD_VAR 0 6
 707: PUSH
 708: LD_INT 10
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: AND
 727: IFFALSE 804
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) else
 729: LD_VAR 0 6
 733: PPUSH
 734: LD_INT 81
 736: PUSH
 737: LD_VAR 0 6
 741: PPUSH
 742: CALL_OW 255
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 21
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: LD_INT 50
 763: PUSH
 764: EMPTY
 765: LIST
 766: PUSH
 767: LD_INT 91
 769: PUSH
 770: LD_VAR 0 6
 774: PUSH
 775: LD_INT 10
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PPUSH
 789: CALL_OW 69
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 120
 802: GO 838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
 804: LD_VAR 0 6
 808: PPUSH
 809: LD_INT 81
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PPUSH
 819: CALL_OW 69
 823: PPUSH
 824: LD_VAR 0 6
 828: PPUSH
 829: CALL_OW 74
 833: PPUSH
 834: CALL_OW 115
// end ; end ; end ;
 838: GO 284
 840: POP
 841: POP
// end ; if sci then
 842: LD_VAR 0 10
 846: IFFALSE 1141
// begin if not sol and not mech and retreatFormula then
 848: LD_VAR 0 9
 852: NOT
 853: PUSH
 854: LD_VAR 0 11
 858: NOT
 859: AND
 860: PUSH
 861: LD_VAR 0 3
 865: AND
 866: IFFALSE 938
// begin for i in sci do
 868: LD_ADDR_VAR 0 6
 872: PUSH
 873: LD_VAR 0 10
 877: PUSH
 878: FOR_IN
 879: IFFALSE 934
// begin ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
 881: LD_VAR 0 6
 885: PPUSH
 886: LD_VAR 0 3
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PUSH
 895: LD_INT 1
 897: ARRAY
 898: PPUSH
 899: LD_VAR 0 3
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: CALL_OW 111
// attackers := attackers diff i ;
 916: LD_ADDR_VAR 0 1
 920: PUSH
 921: LD_VAR 0 1
 925: PUSH
 926: LD_VAR 0 6
 930: DIFF
 931: ST_TO_ADDR
// end ;
 932: GO 878
 934: POP
 935: POP
// end else
 936: GO 1141
// for i in sci do
 938: LD_ADDR_VAR 0 6
 942: PUSH
 943: LD_VAR 0 10
 947: PUSH
 948: FOR_IN
 949: IFFALSE 1139
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 951: LD_VAR 0 6
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: CALL_OW 297
 986: PUSH
 987: LD_INT 10
 989: GREATER
 990: IFFALSE 1029
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
 992: LD_VAR 0 6
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PPUSH
1010: LD_VAR 0 2
1014: PUSH
1015: LD_INT 2
1017: ARRAY
1018: PUSH
1019: LD_INT 2
1021: ARRAY
1022: PPUSH
1023: CALL_OW 111
1027: GO 1137
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
1029: LD_VAR 0 9
1033: PPUSH
1034: LD_INT 3
1036: PUSH
1037: LD_INT 24
1039: PUSH
1040: LD_INT 1000
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: PUSH
1051: LD_INT 91
1053: PUSH
1054: LD_VAR 0 6
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 72
1075: IFFALSE 1137
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
1077: LD_VAR 0 6
1081: PPUSH
1082: LD_VAR 0 9
1086: PPUSH
1087: LD_INT 3
1089: PUSH
1090: LD_INT 24
1092: PUSH
1093: LD_INT 1000
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 91
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PPUSH
1124: CALL_OW 72
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 128
1137: GO 948
1139: POP
1140: POP
// end ; if mech then
1141: LD_VAR 0 11
1145: IFFALSE 1793
// begin for i in mech do
1147: LD_ADDR_VAR 0 6
1151: PUSH
1152: LD_VAR 0 11
1156: PUSH
1157: FOR_IN
1158: IFFALSE 1791
// begin tag := GetTag ( i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_VAR 0 6
1169: PPUSH
1170: CALL_OW 110
1174: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
1175: LD_ADDR_VAR 0 13
1179: PUSH
1180: LD_VAR 0 6
1184: PPUSH
1185: CALL_OW 310
1189: ST_TO_ADDR
// if not tag then
1190: LD_VAR 0 8
1194: NOT
1195: IFFALSE 1497
// begin if veh then
1197: LD_VAR 0 13
1201: IFFALSE 1335
// begin if GetLives ( veh ) = 1000 then
1203: LD_VAR 0 13
1207: PPUSH
1208: CALL_OW 256
1212: PUSH
1213: LD_INT 1000
1215: EQUAL
1216: IFFALSE 1232
// SetTag ( i , 1 ) else
1218: LD_VAR 0 6
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: CALL_OW 109
1230: GO 1333
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
1232: LD_VAR 0 13
1236: PPUSH
1237: LD_VAR 0 2
1241: PUSH
1242: LD_INT 3
1244: ARRAY
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 2
1261: ARRAY
1262: PPUSH
1263: CALL_OW 297
1267: PUSH
1268: LD_INT 7
1270: GREATER
1271: IFFALSE 1310
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
1273: LD_VAR 0 13
1277: PPUSH
1278: LD_VAR 0 2
1282: PUSH
1283: LD_INT 3
1285: ARRAY
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 3
1298: ARRAY
1299: PUSH
1300: LD_INT 2
1302: ARRAY
1303: PPUSH
1304: CALL_OW 111
1308: GO 1333
// begin ComExitVehicle ( i ) ;
1310: LD_VAR 0 6
1314: PPUSH
1315: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
1319: LD_VAR 0 6
1323: PPUSH
1324: LD_VAR 0 13
1328: PPUSH
1329: CALL_OW 189
// end ; end else
1333: GO 1495
// if GetLives ( i ) < 400 then
1335: LD_VAR 0 6
1339: PPUSH
1340: CALL_OW 256
1344: PUSH
1345: LD_INT 400
1347: LESS
1348: IFFALSE 1403
// begin attackers := attackers diff i ;
1350: LD_ADDR_VAR 0 1
1354: PUSH
1355: LD_VAR 0 1
1359: PUSH
1360: LD_VAR 0 6
1364: DIFF
1365: ST_TO_ADDR
// ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 3
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_VAR 0 3
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 2
1395: ARRAY
1396: PPUSH
1397: CALL_OW 111
// end else
1401: GO 1495
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
1403: LD_VAR 0 12
1407: PPUSH
1408: LD_INT 58
1410: PUSH
1411: EMPTY
1412: LIST
1413: PUSH
1414: LD_INT 24
1416: PUSH
1417: LD_INT 1000
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 72
1432: PUSH
1433: LD_VAR 0 6
1437: PPUSH
1438: CALL_OW 314
1442: NOT
1443: AND
1444: IFFALSE 1495
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
1446: LD_VAR 0 6
1450: PPUSH
1451: LD_VAR 0 12
1455: PPUSH
1456: LD_INT 58
1458: PUSH
1459: EMPTY
1460: LIST
1461: PUSH
1462: LD_INT 24
1464: PUSH
1465: LD_INT 250
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 72
1480: PPUSH
1481: LD_VAR 0 6
1485: PPUSH
1486: CALL_OW 74
1490: PPUSH
1491: CALL_OW 120
// end else
1495: GO 1789
// begin if veh and GetLives ( veh ) < 720 then
1497: LD_VAR 0 13
1501: PUSH
1502: LD_VAR 0 13
1506: PPUSH
1507: CALL_OW 256
1511: PUSH
1512: LD_INT 720
1514: LESS
1515: AND
1516: IFFALSE 1567
// begin SetTag ( i , 0 ) ;
1518: LD_VAR 0 6
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
1530: LD_VAR 0 13
1534: PPUSH
1535: LD_VAR 0 2
1539: PUSH
1540: LD_INT 3
1542: ARRAY
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 3
1555: ARRAY
1556: PUSH
1557: LD_INT 2
1559: ARRAY
1560: PPUSH
1561: CALL_OW 111
// end else
1565: GO 1789
// if veh then
1567: LD_VAR 0 13
1571: IFFALSE 1789
// if tag <= attackFormula [ 4 ] then
1573: LD_VAR 0 8
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 4
1585: ARRAY
1586: LESSEQUAL
1587: IFFALSE 1748
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
1589: LD_VAR 0 13
1593: PPUSH
1594: LD_VAR 0 2
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PUSH
1603: LD_VAR 0 8
1607: ARRAY
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 4
1620: ARRAY
1621: PUSH
1622: LD_VAR 0 8
1626: ARRAY
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PPUSH
1632: CALL_OW 297
1636: PUSH
1637: LD_INT 6
1639: GREATER
1640: IFFALSE 1691
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
1642: LD_VAR 0 13
1646: PPUSH
1647: LD_VAR 0 2
1651: PUSH
1652: LD_INT 4
1654: ARRAY
1655: PUSH
1656: LD_VAR 0 8
1660: ARRAY
1661: PUSH
1662: LD_INT 1
1664: ARRAY
1665: PPUSH
1666: LD_VAR 0 2
1670: PUSH
1671: LD_INT 4
1673: ARRAY
1674: PUSH
1675: LD_VAR 0 8
1679: ARRAY
1680: PUSH
1681: LD_INT 2
1683: ARRAY
1684: PPUSH
1685: CALL_OW 114
1689: GO 1746
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
1691: LD_INT 81
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 91
1703: PUSH
1704: LD_VAR 0 13
1708: PUSH
1709: LD_INT 10
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PPUSH
1721: CALL_OW 69
1725: NOT
1726: IFFALSE 1746
// SetTag ( i , tag + 1 ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_VAR 0 8
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: PPUSH
1742: CALL_OW 109
// end else
1746: GO 1789
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1748: LD_VAR 0 13
1752: PPUSH
1753: LD_INT 81
1755: PUSH
1756: LD_VAR 0 6
1760: PPUSH
1761: CALL_OW 255
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: PPUSH
1775: LD_VAR 0 6
1779: PPUSH
1780: CALL_OW 74
1784: PPUSH
1785: CALL_OW 115
// end ; end ;
1789: GO 1157
1791: POP
1792: POP
// end ; until not UnitFilter ( attackers , [ f_placed ] ) ;
1793: LD_VAR 0 1
1797: PPUSH
1798: LD_INT 52
1800: PUSH
1801: EMPTY
1802: LIST
1803: PPUSH
1804: CALL_OW 72
1808: NOT
1809: IFFALSE 161
// end ; end_of_file
1811: LD_VAR 0 5
1815: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1816: LD_INT 0
1818: PPUSH
// ar_miner := 81 ;
1819: LD_ADDR_EXP 8
1823: PUSH
1824: LD_INT 81
1826: ST_TO_ADDR
// ar_crane := 88 ;
1827: LD_ADDR_EXP 7
1831: PUSH
1832: LD_INT 88
1834: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1835: LD_ADDR_EXP 2
1839: PUSH
1840: LD_INT 89
1842: ST_TO_ADDR
// us_hack := 99 ;
1843: LD_ADDR_EXP 3
1847: PUSH
1848: LD_INT 99
1850: ST_TO_ADDR
// us_artillery := 97 ;
1851: LD_ADDR_EXP 4
1855: PUSH
1856: LD_INT 97
1858: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1859: LD_ADDR_EXP 5
1863: PUSH
1864: LD_INT 91
1866: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1867: LD_ADDR_EXP 6
1871: PUSH
1872: LD_INT 92
1874: ST_TO_ADDR
// ru_radar := 98 ;
1875: LD_ADDR_EXP 1
1879: PUSH
1880: LD_INT 98
1882: ST_TO_ADDR
// tech_Artillery := 80 ;
1883: LD_ADDR_EXP 9
1887: PUSH
1888: LD_INT 80
1890: ST_TO_ADDR
// tech_RadMat := 81 ;
1891: LD_ADDR_EXP 10
1895: PUSH
1896: LD_INT 81
1898: ST_TO_ADDR
// tech_BasicTools := 82 ;
1899: LD_ADDR_EXP 11
1903: PUSH
1904: LD_INT 82
1906: ST_TO_ADDR
// tech_Cargo := 83 ;
1907: LD_ADDR_EXP 12
1911: PUSH
1912: LD_INT 83
1914: ST_TO_ADDR
// tech_Track := 84 ;
1915: LD_ADDR_EXP 13
1919: PUSH
1920: LD_INT 84
1922: ST_TO_ADDR
// tech_Crane := 85 ;
1923: LD_ADDR_EXP 14
1927: PUSH
1928: LD_INT 85
1930: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1931: LD_ADDR_EXP 15
1935: PUSH
1936: LD_INT 86
1938: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1939: LD_ADDR_EXP 16
1943: PUSH
1944: LD_INT 87
1946: ST_TO_ADDR
// end ;
1947: LD_VAR 0 1
1951: RET
// every 1 do
1952: GO 1954
1954: DISABLE
// InitGlobalVariables ; end_of_file
1955: CALL 1816 0 0
1959: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1960: LD_VAR 0 2
1964: PUSH
1965: LD_INT 100
1967: EQUAL
1968: IFFALSE 2917
// begin if not StreamModeActive then
1970: LD_EXP 17
1974: NOT
1975: IFFALSE 1985
// StreamModeActive := true ;
1977: LD_ADDR_EXP 17
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// if p3 = 0 then
1985: LD_VAR 0 3
1989: PUSH
1990: LD_INT 0
1992: EQUAL
1993: IFFALSE 1999
// InitStreamMode ;
1995: CALL 3075 0 0
// if p3 = 1 then
1999: LD_VAR 0 3
2003: PUSH
2004: LD_INT 1
2006: EQUAL
2007: IFFALSE 2017
// sRocket := true ;
2009: LD_ADDR_EXP 22
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// if p3 = 2 then
2017: LD_VAR 0 3
2021: PUSH
2022: LD_INT 2
2024: EQUAL
2025: IFFALSE 2035
// sSpeed := true ;
2027: LD_ADDR_EXP 21
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if p3 = 3 then
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 3
2042: EQUAL
2043: IFFALSE 2053
// sEngine := true ;
2045: LD_ADDR_EXP 23
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// if p3 = 4 then
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 4
2060: EQUAL
2061: IFFALSE 2071
// sSpec := true ;
2063: LD_ADDR_EXP 20
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// if p3 = 5 then
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 5
2078: EQUAL
2079: IFFALSE 2089
// sLevel := true ;
2081: LD_ADDR_EXP 24
2085: PUSH
2086: LD_INT 1
2088: ST_TO_ADDR
// if p3 = 6 then
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 6
2096: EQUAL
2097: IFFALSE 2107
// sArmoury := true ;
2099: LD_ADDR_EXP 25
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// if p3 = 7 then
2107: LD_VAR 0 3
2111: PUSH
2112: LD_INT 7
2114: EQUAL
2115: IFFALSE 2125
// sRadar := true ;
2117: LD_ADDR_EXP 26
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// if p3 = 8 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 8
2132: EQUAL
2133: IFFALSE 2143
// sBunker := true ;
2135: LD_ADDR_EXP 27
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 9 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 9
2150: EQUAL
2151: IFFALSE 2161
// sHack := true ;
2153: LD_ADDR_EXP 28
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 10 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 10
2168: EQUAL
2169: IFFALSE 2179
// sFire := true ;
2171: LD_ADDR_EXP 29
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 11 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 11
2186: EQUAL
2187: IFFALSE 2197
// sRefresh := true ;
2189: LD_ADDR_EXP 30
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 12 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 12
2204: EQUAL
2205: IFFALSE 2215
// sExp := true ;
2207: LD_ADDR_EXP 31
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 13 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 13
2222: EQUAL
2223: IFFALSE 2233
// sDepot := true ;
2225: LD_ADDR_EXP 32
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 14 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 14
2240: EQUAL
2241: IFFALSE 2251
// sFlag := true ;
2243: LD_ADDR_EXP 33
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 15 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 15
2258: EQUAL
2259: IFFALSE 2269
// sKamikadze := true ;
2261: LD_ADDR_EXP 41
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 16 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 16
2276: EQUAL
2277: IFFALSE 2287
// sTroll := true ;
2279: LD_ADDR_EXP 42
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 17 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 17
2294: EQUAL
2295: IFFALSE 2305
// sSlow := true ;
2297: LD_ADDR_EXP 43
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 18 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 18
2312: EQUAL
2313: IFFALSE 2323
// sLack := true ;
2315: LD_ADDR_EXP 44
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 19 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 19
2330: EQUAL
2331: IFFALSE 2341
// sTank := true ;
2333: LD_ADDR_EXP 46
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 20 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 20
2348: EQUAL
2349: IFFALSE 2359
// sRemote := true ;
2351: LD_ADDR_EXP 47
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 21 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 21
2366: EQUAL
2367: IFFALSE 2377
// sPowell := true ;
2369: LD_ADDR_EXP 48
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 22 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 22
2384: EQUAL
2385: IFFALSE 2395
// sTeleport := true ;
2387: LD_ADDR_EXP 51
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 23 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 23
2402: EQUAL
2403: IFFALSE 2413
// sOilTower := true ;
2405: LD_ADDR_EXP 53
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 24 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 24
2420: EQUAL
2421: IFFALSE 2431
// sShovel := true ;
2423: LD_ADDR_EXP 54
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 25 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 25
2438: EQUAL
2439: IFFALSE 2449
// sSheik := true ;
2441: LD_ADDR_EXP 55
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 26 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 26
2456: EQUAL
2457: IFFALSE 2467
// sEarthquake := true ;
2459: LD_ADDR_EXP 57
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 27 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 27
2474: EQUAL
2475: IFFALSE 2485
// sAI := true ;
2477: LD_ADDR_EXP 58
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 28 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 28
2492: EQUAL
2493: IFFALSE 2503
// sCargo := true ;
2495: LD_ADDR_EXP 61
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 29 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 29
2510: EQUAL
2511: IFFALSE 2521
// sDLaser := true ;
2513: LD_ADDR_EXP 62
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 30 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 30
2528: EQUAL
2529: IFFALSE 2539
// sExchange := true ;
2531: LD_ADDR_EXP 63
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 31 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 31
2546: EQUAL
2547: IFFALSE 2557
// sFac := true ;
2549: LD_ADDR_EXP 64
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 32 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 32
2564: EQUAL
2565: IFFALSE 2575
// sPower := true ;
2567: LD_ADDR_EXP 65
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 33 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 33
2582: EQUAL
2583: IFFALSE 2593
// sRandom := true ;
2585: LD_ADDR_EXP 66
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 34 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 34
2600: EQUAL
2601: IFFALSE 2611
// sShield := true ;
2603: LD_ADDR_EXP 67
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 35 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 35
2618: EQUAL
2619: IFFALSE 2629
// sTime := true ;
2621: LD_ADDR_EXP 68
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 36 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 36
2636: EQUAL
2637: IFFALSE 2647
// sTools := true ;
2639: LD_ADDR_EXP 69
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 101 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 101
2654: EQUAL
2655: IFFALSE 2665
// sSold := true ;
2657: LD_ADDR_EXP 34
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 102 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 102
2672: EQUAL
2673: IFFALSE 2683
// sDiff := true ;
2675: LD_ADDR_EXP 35
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 103 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 103
2690: EQUAL
2691: IFFALSE 2701
// sFog := true ;
2693: LD_ADDR_EXP 38
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 104 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 104
2708: EQUAL
2709: IFFALSE 2719
// sReset := true ;
2711: LD_ADDR_EXP 39
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 105 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 105
2726: EQUAL
2727: IFFALSE 2737
// sSun := true ;
2729: LD_ADDR_EXP 40
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 106 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 106
2744: EQUAL
2745: IFFALSE 2755
// sTiger := true ;
2747: LD_ADDR_EXP 36
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 107 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 107
2762: EQUAL
2763: IFFALSE 2773
// sBomb := true ;
2765: LD_ADDR_EXP 37
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 108 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 108
2780: EQUAL
2781: IFFALSE 2791
// sWound := true ;
2783: LD_ADDR_EXP 45
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 109 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 109
2798: EQUAL
2799: IFFALSE 2809
// sBetray := true ;
2801: LD_ADDR_EXP 49
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 110 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 110
2816: EQUAL
2817: IFFALSE 2827
// sContamin := true ;
2819: LD_ADDR_EXP 50
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 111 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 111
2834: EQUAL
2835: IFFALSE 2845
// sOil := true ;
2837: LD_ADDR_EXP 52
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 112 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 112
2852: EQUAL
2853: IFFALSE 2863
// sStu := true ;
2855: LD_ADDR_EXP 56
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 113 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 113
2870: EQUAL
2871: IFFALSE 2881
// sBazooka := true ;
2873: LD_ADDR_EXP 59
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 114 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 114
2888: EQUAL
2889: IFFALSE 2899
// sMortar := true ;
2891: LD_ADDR_EXP 60
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// if p3 = 115 then
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 115
2906: EQUAL
2907: IFFALSE 2917
// sRanger := true ;
2909: LD_ADDR_EXP 70
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// end ; if p2 = 101 then
2917: LD_VAR 0 2
2921: PUSH
2922: LD_INT 101
2924: EQUAL
2925: IFFALSE 3053
// begin case p3 of 1 :
2927: LD_VAR 0 3
2931: PUSH
2932: LD_INT 1
2934: DOUBLE
2935: EQUAL
2936: IFTRUE 2940
2938: GO 2947
2940: POP
// hHackUnlimitedResources ; 2 :
2941: CALL 14088 0 0
2945: GO 3053
2947: LD_INT 2
2949: DOUBLE
2950: EQUAL
2951: IFTRUE 2955
2953: GO 2962
2955: POP
// hHackSetLevel10 ; 3 :
2956: CALL 14221 0 0
2960: GO 3053
2962: LD_INT 3
2964: DOUBLE
2965: EQUAL
2966: IFTRUE 2970
2968: GO 2977
2970: POP
// hHackSetLevel10YourUnits ; 4 :
2971: CALL 14306 0 0
2975: GO 3053
2977: LD_INT 4
2979: DOUBLE
2980: EQUAL
2981: IFTRUE 2985
2983: GO 2992
2985: POP
// hHackInvincible ; 5 :
2986: CALL 14754 0 0
2990: GO 3053
2992: LD_INT 5
2994: DOUBLE
2995: EQUAL
2996: IFTRUE 3000
2998: GO 3007
3000: POP
// hHackInvisible ; 6 :
3001: CALL 14865 0 0
3005: GO 3053
3007: LD_INT 6
3009: DOUBLE
3010: EQUAL
3011: IFTRUE 3015
3013: GO 3022
3015: POP
// hHackChangeYourSide ; 7 :
3016: CALL 14922 0 0
3020: GO 3053
3022: LD_INT 7
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3037
3030: POP
// hHackChangeUnitSide ; 8 :
3031: CALL 14964 0 0
3035: GO 3053
3037: LD_INT 8
3039: DOUBLE
3040: EQUAL
3041: IFTRUE 3045
3043: GO 3052
3045: POP
// hHackFog ; end ;
3046: CALL 15065 0 0
3050: GO 3053
3052: POP
// end ; end ;
3053: PPOPN 6
3055: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3056: GO 3058
3058: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3059: LD_STRING initStreamRollete();
3061: PPUSH
3062: CALL_OW 559
// InitStreamMode ;
3066: CALL 3075 0 0
// DefineStreamItems ( ) ;
3070: CALL 3515 0 0
// end ;
3074: END
// function InitStreamMode ; begin
3075: LD_INT 0
3077: PPUSH
// streamModeActive := false ;
3078: LD_ADDR_EXP 17
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// normalCounter := 36 ;
3086: LD_ADDR_EXP 18
3090: PUSH
3091: LD_INT 36
3093: ST_TO_ADDR
// hardcoreCounter := 16 ;
3094: LD_ADDR_EXP 19
3098: PUSH
3099: LD_INT 16
3101: ST_TO_ADDR
// sRocket := false ;
3102: LD_ADDR_EXP 22
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sSpeed := false ;
3110: LD_ADDR_EXP 21
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sEngine := false ;
3118: LD_ADDR_EXP 23
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sSpec := false ;
3126: LD_ADDR_EXP 20
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sLevel := false ;
3134: LD_ADDR_EXP 24
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sArmoury := false ;
3142: LD_ADDR_EXP 25
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sRadar := false ;
3150: LD_ADDR_EXP 26
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sBunker := false ;
3158: LD_ADDR_EXP 27
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sHack := false ;
3166: LD_ADDR_EXP 28
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sFire := false ;
3174: LD_ADDR_EXP 29
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sRefresh := false ;
3182: LD_ADDR_EXP 30
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sExp := false ;
3190: LD_ADDR_EXP 31
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sDepot := false ;
3198: LD_ADDR_EXP 32
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sFlag := false ;
3206: LD_ADDR_EXP 33
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sKamikadze := false ;
3214: LD_ADDR_EXP 41
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sTroll := false ;
3222: LD_ADDR_EXP 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sSlow := false ;
3230: LD_ADDR_EXP 43
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sLack := false ;
3238: LD_ADDR_EXP 44
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sTank := false ;
3246: LD_ADDR_EXP 46
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sRemote := false ;
3254: LD_ADDR_EXP 47
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sPowell := false ;
3262: LD_ADDR_EXP 48
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sTeleport := false ;
3270: LD_ADDR_EXP 51
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sOilTower := false ;
3278: LD_ADDR_EXP 53
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sShovel := false ;
3286: LD_ADDR_EXP 54
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sSheik := false ;
3294: LD_ADDR_EXP 55
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sEarthquake := false ;
3302: LD_ADDR_EXP 57
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sAI := false ;
3310: LD_ADDR_EXP 58
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sCargo := false ;
3318: LD_ADDR_EXP 61
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sDLaser := false ;
3326: LD_ADDR_EXP 62
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sExchange := false ;
3334: LD_ADDR_EXP 63
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sFac := false ;
3342: LD_ADDR_EXP 64
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sPower := false ;
3350: LD_ADDR_EXP 65
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sRandom := false ;
3358: LD_ADDR_EXP 66
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sShield := false ;
3366: LD_ADDR_EXP 67
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sTime := false ;
3374: LD_ADDR_EXP 68
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTools := false ;
3382: LD_ADDR_EXP 69
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sSold := false ;
3390: LD_ADDR_EXP 34
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sDiff := false ;
3398: LD_ADDR_EXP 35
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sFog := false ;
3406: LD_ADDR_EXP 38
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sReset := false ;
3414: LD_ADDR_EXP 39
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sSun := false ;
3422: LD_ADDR_EXP 40
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sTiger := false ;
3430: LD_ADDR_EXP 36
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sBomb := false ;
3438: LD_ADDR_EXP 37
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sWound := false ;
3446: LD_ADDR_EXP 45
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sBetray := false ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sContamin := false ;
3462: LD_ADDR_EXP 50
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sOil := false ;
3470: LD_ADDR_EXP 52
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sStu := false ;
3478: LD_ADDR_EXP 56
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sBazooka := false ;
3486: LD_ADDR_EXP 59
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sMortar := false ;
3494: LD_ADDR_EXP 60
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sRanger := false ;
3502: LD_ADDR_EXP 70
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: LD_VAR 0 1
3514: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3515: LD_INT 0
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// result := [ ] ;
3522: LD_ADDR_VAR 0 1
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// if campaign_id = 1 then
3529: LD_OWVAR 69
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: IFFALSE 6475
// begin case mission_number of 1 :
3539: LD_OWVAR 70
3543: PUSH
3544: LD_INT 1
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3616
3552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3553: LD_ADDR_VAR 0 1
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 4
3563: PUSH
3564: LD_INT 11
3566: PUSH
3567: LD_INT 12
3569: PUSH
3570: LD_INT 15
3572: PUSH
3573: LD_INT 16
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 26
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 101
3598: PUSH
3599: LD_INT 102
3601: PUSH
3602: LD_INT 106
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: ST_TO_ADDR
3614: GO 6473
3616: LD_INT 2
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3696
3624: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_INT 2
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: LD_INT 11
3638: PUSH
3639: LD_INT 12
3641: PUSH
3642: LD_INT 15
3644: PUSH
3645: LD_INT 16
3647: PUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 23
3653: PUSH
3654: LD_INT 26
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 102
3673: PUSH
3674: LD_INT 105
3676: PUSH
3677: LD_INT 106
3679: PUSH
3680: LD_INT 108
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: ST_TO_ADDR
3694: GO 6473
3696: LD_INT 3
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3780
3704: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3705: LD_ADDR_VAR 0 1
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 11
3721: PUSH
3722: LD_INT 12
3724: PUSH
3725: LD_INT 15
3727: PUSH
3728: LD_INT 16
3730: PUSH
3731: LD_INT 22
3733: PUSH
3734: LD_INT 26
3736: PUSH
3737: LD_INT 36
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 101
3754: PUSH
3755: LD_INT 102
3757: PUSH
3758: LD_INT 105
3760: PUSH
3761: LD_INT 106
3763: PUSH
3764: LD_INT 108
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: ST_TO_ADDR
3778: GO 6473
3780: LD_INT 4
3782: DOUBLE
3783: EQUAL
3784: IFTRUE 3788
3786: GO 3872
3788: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3789: LD_ADDR_VAR 0 1
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: LD_INT 8
3805: PUSH
3806: LD_INT 11
3808: PUSH
3809: LD_INT 12
3811: PUSH
3812: LD_INT 15
3814: PUSH
3815: LD_INT 16
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 23
3823: PUSH
3824: LD_INT 26
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 101
3846: PUSH
3847: LD_INT 102
3849: PUSH
3850: LD_INT 105
3852: PUSH
3853: LD_INT 106
3855: PUSH
3856: LD_INT 108
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6473
3872: LD_INT 5
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 3980
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3881: LD_ADDR_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 11
3903: PUSH
3904: LD_INT 12
3906: PUSH
3907: LD_INT 15
3909: PUSH
3910: LD_INT 16
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 23
3918: PUSH
3919: LD_INT 25
3921: PUSH
3922: LD_INT 26
3924: PUSH
3925: LD_INT 36
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 101
3946: PUSH
3947: LD_INT 102
3949: PUSH
3950: LD_INT 105
3952: PUSH
3953: LD_INT 106
3955: PUSH
3956: LD_INT 108
3958: PUSH
3959: LD_INT 109
3961: PUSH
3962: LD_INT 112
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 6473
3980: LD_INT 6
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4108
3988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 12
4014: PUSH
4015: LD_INT 15
4017: PUSH
4018: LD_INT 16
4020: PUSH
4021: LD_INT 20
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 22
4029: PUSH
4030: LD_INT 23
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 26
4038: PUSH
4039: LD_INT 30
4041: PUSH
4042: LD_INT 31
4044: PUSH
4045: LD_INT 32
4047: PUSH
4048: LD_INT 36
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 105
4080: PUSH
4081: LD_INT 106
4083: PUSH
4084: LD_INT 108
4086: PUSH
4087: LD_INT 109
4089: PUSH
4090: LD_INT 112
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: ST_TO_ADDR
4106: GO 6473
4108: LD_INT 7
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4216
4116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 7
4133: PUSH
4134: LD_INT 11
4136: PUSH
4137: LD_INT 12
4139: PUSH
4140: LD_INT 15
4142: PUSH
4143: LD_INT 16
4145: PUSH
4146: LD_INT 20
4148: PUSH
4149: LD_INT 21
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 23
4157: PUSH
4158: LD_INT 25
4160: PUSH
4161: LD_INT 26
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 101
4182: PUSH
4183: LD_INT 102
4185: PUSH
4186: LD_INT 103
4188: PUSH
4189: LD_INT 105
4191: PUSH
4192: LD_INT 106
4194: PUSH
4195: LD_INT 108
4197: PUSH
4198: LD_INT 112
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: ST_TO_ADDR
4214: GO 6473
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4352
4224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4225: LD_ADDR_VAR 0 1
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: LD_INT 6
4241: PUSH
4242: LD_INT 7
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 102
4317: PUSH
4318: LD_INT 103
4320: PUSH
4321: LD_INT 105
4323: PUSH
4324: LD_INT 106
4326: PUSH
4327: LD_INT 108
4329: PUSH
4330: LD_INT 109
4332: PUSH
4333: LD_INT 112
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: ST_TO_ADDR
4350: GO 6473
4352: LD_INT 9
4354: DOUBLE
4355: EQUAL
4356: IFTRUE 4360
4358: GO 4496
4360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: LD_INT 6
4377: PUSH
4378: LD_INT 7
4380: PUSH
4381: LD_INT 8
4383: PUSH
4384: LD_INT 11
4386: PUSH
4387: LD_INT 12
4389: PUSH
4390: LD_INT 15
4392: PUSH
4393: LD_INT 16
4395: PUSH
4396: LD_INT 20
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 22
4404: PUSH
4405: LD_INT 23
4407: PUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 26
4413: PUSH
4414: LD_INT 28
4416: PUSH
4417: LD_INT 30
4419: PUSH
4420: LD_INT 31
4422: PUSH
4423: LD_INT 32
4425: PUSH
4426: LD_INT 36
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 101
4454: PUSH
4455: LD_INT 102
4457: PUSH
4458: LD_INT 103
4460: PUSH
4461: LD_INT 105
4463: PUSH
4464: LD_INT 106
4466: PUSH
4467: LD_INT 108
4469: PUSH
4470: LD_INT 109
4472: PUSH
4473: LD_INT 112
4475: PUSH
4476: LD_INT 114
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 6473
4496: LD_INT 10
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4688
4504: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 6
4521: PUSH
4522: LD_INT 7
4524: PUSH
4525: LD_INT 8
4527: PUSH
4528: LD_INT 9
4530: PUSH
4531: LD_INT 10
4533: PUSH
4534: LD_INT 11
4536: PUSH
4537: LD_INT 12
4539: PUSH
4540: LD_INT 13
4542: PUSH
4543: LD_INT 14
4545: PUSH
4546: LD_INT 15
4548: PUSH
4549: LD_INT 16
4551: PUSH
4552: LD_INT 17
4554: PUSH
4555: LD_INT 18
4557: PUSH
4558: LD_INT 19
4560: PUSH
4561: LD_INT 20
4563: PUSH
4564: LD_INT 21
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 26
4581: PUSH
4582: LD_INT 28
4584: PUSH
4585: LD_INT 30
4587: PUSH
4588: LD_INT 31
4590: PUSH
4591: LD_INT 32
4593: PUSH
4594: LD_INT 36
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 101
4630: PUSH
4631: LD_INT 102
4633: PUSH
4634: LD_INT 103
4636: PUSH
4637: LD_INT 104
4639: PUSH
4640: LD_INT 105
4642: PUSH
4643: LD_INT 106
4645: PUSH
4646: LD_INT 107
4648: PUSH
4649: LD_INT 108
4651: PUSH
4652: LD_INT 109
4654: PUSH
4655: LD_INT 110
4657: PUSH
4658: LD_INT 111
4660: PUSH
4661: LD_INT 112
4663: PUSH
4664: LD_INT 114
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: ST_TO_ADDR
4686: GO 6473
4688: LD_INT 11
4690: DOUBLE
4691: EQUAL
4692: IFTRUE 4696
4694: GO 4888
4696: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4697: LD_ADDR_VAR 0 1
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 3
4707: PUSH
4708: LD_INT 4
4710: PUSH
4711: LD_INT 5
4713: PUSH
4714: LD_INT 6
4716: PUSH
4717: LD_INT 7
4719: PUSH
4720: LD_INT 8
4722: PUSH
4723: LD_INT 9
4725: PUSH
4726: LD_INT 10
4728: PUSH
4729: LD_INT 11
4731: PUSH
4732: LD_INT 12
4734: PUSH
4735: LD_INT 13
4737: PUSH
4738: LD_INT 14
4740: PUSH
4741: LD_INT 15
4743: PUSH
4744: LD_INT 16
4746: PUSH
4747: LD_INT 17
4749: PUSH
4750: LD_INT 18
4752: PUSH
4753: LD_INT 19
4755: PUSH
4756: LD_INT 20
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_INT 23
4767: PUSH
4768: LD_INT 24
4770: PUSH
4771: LD_INT 25
4773: PUSH
4774: LD_INT 26
4776: PUSH
4777: LD_INT 28
4779: PUSH
4780: LD_INT 30
4782: PUSH
4783: LD_INT 31
4785: PUSH
4786: LD_INT 32
4788: PUSH
4789: LD_INT 34
4791: PUSH
4792: LD_INT 36
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 101
4830: PUSH
4831: LD_INT 102
4833: PUSH
4834: LD_INT 103
4836: PUSH
4837: LD_INT 104
4839: PUSH
4840: LD_INT 105
4842: PUSH
4843: LD_INT 106
4845: PUSH
4846: LD_INT 107
4848: PUSH
4849: LD_INT 108
4851: PUSH
4852: LD_INT 109
4854: PUSH
4855: LD_INT 110
4857: PUSH
4858: LD_INT 111
4860: PUSH
4861: LD_INT 112
4863: PUSH
4864: LD_INT 114
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 6473
4888: LD_INT 12
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 5104
4896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4897: LD_ADDR_VAR 0 1
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: LD_INT 4
4913: PUSH
4914: LD_INT 5
4916: PUSH
4917: LD_INT 6
4919: PUSH
4920: LD_INT 7
4922: PUSH
4923: LD_INT 8
4925: PUSH
4926: LD_INT 9
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: LD_INT 11
4934: PUSH
4935: LD_INT 12
4937: PUSH
4938: LD_INT 13
4940: PUSH
4941: LD_INT 14
4943: PUSH
4944: LD_INT 15
4946: PUSH
4947: LD_INT 16
4949: PUSH
4950: LD_INT 17
4952: PUSH
4953: LD_INT 18
4955: PUSH
4956: LD_INT 19
4958: PUSH
4959: LD_INT 20
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 23
4970: PUSH
4971: LD_INT 24
4973: PUSH
4974: LD_INT 25
4976: PUSH
4977: LD_INT 26
4979: PUSH
4980: LD_INT 27
4982: PUSH
4983: LD_INT 28
4985: PUSH
4986: LD_INT 30
4988: PUSH
4989: LD_INT 31
4991: PUSH
4992: LD_INT 32
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 34
5000: PUSH
5001: LD_INT 36
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 101
5042: PUSH
5043: LD_INT 102
5045: PUSH
5046: LD_INT 103
5048: PUSH
5049: LD_INT 104
5051: PUSH
5052: LD_INT 105
5054: PUSH
5055: LD_INT 106
5057: PUSH
5058: LD_INT 107
5060: PUSH
5061: LD_INT 108
5063: PUSH
5064: LD_INT 109
5066: PUSH
5067: LD_INT 110
5069: PUSH
5070: LD_INT 111
5072: PUSH
5073: LD_INT 112
5075: PUSH
5076: LD_INT 113
5078: PUSH
5079: LD_INT 114
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 6473
5104: LD_INT 13
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5308
5112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5113: LD_ADDR_VAR 0 1
5117: PUSH
5118: LD_INT 1
5120: PUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: LD_INT 5
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: LD_INT 9
5138: PUSH
5139: LD_INT 10
5141: PUSH
5142: LD_INT 11
5144: PUSH
5145: LD_INT 12
5147: PUSH
5148: LD_INT 14
5150: PUSH
5151: LD_INT 15
5153: PUSH
5154: LD_INT 16
5156: PUSH
5157: LD_INT 17
5159: PUSH
5160: LD_INT 18
5162: PUSH
5163: LD_INT 19
5165: PUSH
5166: LD_INT 20
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 23
5177: PUSH
5178: LD_INT 24
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 26
5186: PUSH
5187: LD_INT 27
5189: PUSH
5190: LD_INT 28
5192: PUSH
5193: LD_INT 30
5195: PUSH
5196: LD_INT 31
5198: PUSH
5199: LD_INT 32
5201: PUSH
5202: LD_INT 33
5204: PUSH
5205: LD_INT 34
5207: PUSH
5208: LD_INT 36
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 101
5246: PUSH
5247: LD_INT 102
5249: PUSH
5250: LD_INT 103
5252: PUSH
5253: LD_INT 104
5255: PUSH
5256: LD_INT 105
5258: PUSH
5259: LD_INT 106
5261: PUSH
5262: LD_INT 107
5264: PUSH
5265: LD_INT 108
5267: PUSH
5268: LD_INT 109
5270: PUSH
5271: LD_INT 110
5273: PUSH
5274: LD_INT 111
5276: PUSH
5277: LD_INT 112
5279: PUSH
5280: LD_INT 113
5282: PUSH
5283: LD_INT 114
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: ST_TO_ADDR
5306: GO 6473
5308: LD_INT 14
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5316
5314: GO 5528
5316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: LD_INT 5
5336: PUSH
5337: LD_INT 6
5339: PUSH
5340: LD_INT 7
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: LD_INT 9
5348: PUSH
5349: LD_INT 10
5351: PUSH
5352: LD_INT 11
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 13
5360: PUSH
5361: LD_INT 14
5363: PUSH
5364: LD_INT 15
5366: PUSH
5367: LD_INT 16
5369: PUSH
5370: LD_INT 17
5372: PUSH
5373: LD_INT 18
5375: PUSH
5376: LD_INT 19
5378: PUSH
5379: LD_INT 20
5381: PUSH
5382: LD_INT 21
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 23
5390: PUSH
5391: LD_INT 24
5393: PUSH
5394: LD_INT 25
5396: PUSH
5397: LD_INT 26
5399: PUSH
5400: LD_INT 27
5402: PUSH
5403: LD_INT 28
5405: PUSH
5406: LD_INT 29
5408: PUSH
5409: LD_INT 30
5411: PUSH
5412: LD_INT 31
5414: PUSH
5415: LD_INT 32
5417: PUSH
5418: LD_INT 33
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_INT 36
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 101
5466: PUSH
5467: LD_INT 102
5469: PUSH
5470: LD_INT 103
5472: PUSH
5473: LD_INT 104
5475: PUSH
5476: LD_INT 105
5478: PUSH
5479: LD_INT 106
5481: PUSH
5482: LD_INT 107
5484: PUSH
5485: LD_INT 108
5487: PUSH
5488: LD_INT 109
5490: PUSH
5491: LD_INT 110
5493: PUSH
5494: LD_INT 111
5496: PUSH
5497: LD_INT 112
5499: PUSH
5500: LD_INT 113
5502: PUSH
5503: LD_INT 114
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: ST_TO_ADDR
5526: GO 6473
5528: LD_INT 15
5530: DOUBLE
5531: EQUAL
5532: IFTRUE 5536
5534: GO 5748
5536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_INT 1
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: LD_INT 7
5562: PUSH
5563: LD_INT 8
5565: PUSH
5566: LD_INT 9
5568: PUSH
5569: LD_INT 10
5571: PUSH
5572: LD_INT 11
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 13
5580: PUSH
5581: LD_INT 14
5583: PUSH
5584: LD_INT 15
5586: PUSH
5587: LD_INT 16
5589: PUSH
5590: LD_INT 17
5592: PUSH
5593: LD_INT 18
5595: PUSH
5596: LD_INT 19
5598: PUSH
5599: LD_INT 20
5601: PUSH
5602: LD_INT 21
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_INT 23
5610: PUSH
5611: LD_INT 24
5613: PUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 26
5619: PUSH
5620: LD_INT 27
5622: PUSH
5623: LD_INT 28
5625: PUSH
5626: LD_INT 29
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 31
5634: PUSH
5635: LD_INT 32
5637: PUSH
5638: LD_INT 33
5640: PUSH
5641: LD_INT 34
5643: PUSH
5644: LD_INT 36
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 101
5686: PUSH
5687: LD_INT 102
5689: PUSH
5690: LD_INT 103
5692: PUSH
5693: LD_INT 104
5695: PUSH
5696: LD_INT 105
5698: PUSH
5699: LD_INT 106
5701: PUSH
5702: LD_INT 107
5704: PUSH
5705: LD_INT 108
5707: PUSH
5708: LD_INT 109
5710: PUSH
5711: LD_INT 110
5713: PUSH
5714: LD_INT 111
5716: PUSH
5717: LD_INT 112
5719: PUSH
5720: LD_INT 113
5722: PUSH
5723: LD_INT 114
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: ST_TO_ADDR
5746: GO 6473
5748: LD_INT 16
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5880
5756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 2
5764: PUSH
5765: LD_INT 4
5767: PUSH
5768: LD_INT 5
5770: PUSH
5771: LD_INT 7
5773: PUSH
5774: LD_INT 11
5776: PUSH
5777: LD_INT 12
5779: PUSH
5780: LD_INT 15
5782: PUSH
5783: LD_INT 16
5785: PUSH
5786: LD_INT 20
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 23
5797: PUSH
5798: LD_INT 25
5800: PUSH
5801: LD_INT 26
5803: PUSH
5804: LD_INT 30
5806: PUSH
5807: LD_INT 31
5809: PUSH
5810: LD_INT 32
5812: PUSH
5813: LD_INT 33
5815: PUSH
5816: LD_INT 34
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 101
5842: PUSH
5843: LD_INT 102
5845: PUSH
5846: LD_INT 103
5848: PUSH
5849: LD_INT 106
5851: PUSH
5852: LD_INT 108
5854: PUSH
5855: LD_INT 112
5857: PUSH
5858: LD_INT 113
5860: PUSH
5861: LD_INT 114
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 6473
5880: LD_INT 17
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 6100
5888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 6
5911: PUSH
5912: LD_INT 7
5914: PUSH
5915: LD_INT 8
5917: PUSH
5918: LD_INT 9
5920: PUSH
5921: LD_INT 10
5923: PUSH
5924: LD_INT 11
5926: PUSH
5927: LD_INT 12
5929: PUSH
5930: LD_INT 13
5932: PUSH
5933: LD_INT 14
5935: PUSH
5936: LD_INT 15
5938: PUSH
5939: LD_INT 16
5941: PUSH
5942: LD_INT 17
5944: PUSH
5945: LD_INT 18
5947: PUSH
5948: LD_INT 19
5950: PUSH
5951: LD_INT 20
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: LD_INT 25
5968: PUSH
5969: LD_INT 26
5971: PUSH
5972: LD_INT 27
5974: PUSH
5975: LD_INT 28
5977: PUSH
5978: LD_INT 29
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 31
5986: PUSH
5987: LD_INT 32
5989: PUSH
5990: LD_INT 33
5992: PUSH
5993: LD_INT 34
5995: PUSH
5996: LD_INT 36
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 103
6044: PUSH
6045: LD_INT 104
6047: PUSH
6048: LD_INT 105
6050: PUSH
6051: LD_INT 106
6053: PUSH
6054: LD_INT 107
6056: PUSH
6057: LD_INT 108
6059: PUSH
6060: LD_INT 109
6062: PUSH
6063: LD_INT 110
6065: PUSH
6066: LD_INT 111
6068: PUSH
6069: LD_INT 112
6071: PUSH
6072: LD_INT 113
6074: PUSH
6075: LD_INT 114
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: ST_TO_ADDR
6098: GO 6473
6100: LD_INT 18
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6244
6108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6109: LD_ADDR_VAR 0 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 4
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 7
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 15
6134: PUSH
6135: LD_INT 16
6137: PUSH
6138: LD_INT 20
6140: PUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 23
6149: PUSH
6150: LD_INT 25
6152: PUSH
6153: LD_INT 26
6155: PUSH
6156: LD_INT 30
6158: PUSH
6159: LD_INT 31
6161: PUSH
6162: LD_INT 32
6164: PUSH
6165: LD_INT 33
6167: PUSH
6168: LD_INT 34
6170: PUSH
6171: LD_INT 35
6173: PUSH
6174: LD_INT 36
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 101
6202: PUSH
6203: LD_INT 102
6205: PUSH
6206: LD_INT 103
6208: PUSH
6209: LD_INT 106
6211: PUSH
6212: LD_INT 108
6214: PUSH
6215: LD_INT 112
6217: PUSH
6218: LD_INT 113
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 115
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: ST_TO_ADDR
6242: GO 6473
6244: LD_INT 19
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6252
6250: GO 6472
6252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 5
6272: PUSH
6273: LD_INT 6
6275: PUSH
6276: LD_INT 7
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 9
6284: PUSH
6285: LD_INT 10
6287: PUSH
6288: LD_INT 11
6290: PUSH
6291: LD_INT 12
6293: PUSH
6294: LD_INT 13
6296: PUSH
6297: LD_INT 14
6299: PUSH
6300: LD_INT 15
6302: PUSH
6303: LD_INT 16
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 18
6311: PUSH
6312: LD_INT 19
6314: PUSH
6315: LD_INT 20
6317: PUSH
6318: LD_INT 21
6320: PUSH
6321: LD_INT 22
6323: PUSH
6324: LD_INT 23
6326: PUSH
6327: LD_INT 24
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 26
6335: PUSH
6336: LD_INT 27
6338: PUSH
6339: LD_INT 28
6341: PUSH
6342: LD_INT 29
6344: PUSH
6345: LD_INT 30
6347: PUSH
6348: LD_INT 31
6350: PUSH
6351: LD_INT 32
6353: PUSH
6354: LD_INT 33
6356: PUSH
6357: LD_INT 34
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 36
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 101
6406: PUSH
6407: LD_INT 102
6409: PUSH
6410: LD_INT 103
6412: PUSH
6413: LD_INT 104
6415: PUSH
6416: LD_INT 105
6418: PUSH
6419: LD_INT 106
6421: PUSH
6422: LD_INT 107
6424: PUSH
6425: LD_INT 108
6427: PUSH
6428: LD_INT 109
6430: PUSH
6431: LD_INT 110
6433: PUSH
6434: LD_INT 111
6436: PUSH
6437: LD_INT 112
6439: PUSH
6440: LD_INT 113
6442: PUSH
6443: LD_INT 114
6445: PUSH
6446: LD_INT 115
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6473
6472: POP
// end else
6473: GO 6692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6475: LD_ADDR_VAR 0 1
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 3
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: LD_INT 6
6497: PUSH
6498: LD_INT 7
6500: PUSH
6501: LD_INT 8
6503: PUSH
6504: LD_INT 9
6506: PUSH
6507: LD_INT 10
6509: PUSH
6510: LD_INT 11
6512: PUSH
6513: LD_INT 12
6515: PUSH
6516: LD_INT 13
6518: PUSH
6519: LD_INT 14
6521: PUSH
6522: LD_INT 15
6524: PUSH
6525: LD_INT 16
6527: PUSH
6528: LD_INT 17
6530: PUSH
6531: LD_INT 18
6533: PUSH
6534: LD_INT 19
6536: PUSH
6537: LD_INT 20
6539: PUSH
6540: LD_INT 21
6542: PUSH
6543: LD_INT 22
6545: PUSH
6546: LD_INT 23
6548: PUSH
6549: LD_INT 24
6551: PUSH
6552: LD_INT 25
6554: PUSH
6555: LD_INT 26
6557: PUSH
6558: LD_INT 27
6560: PUSH
6561: LD_INT 28
6563: PUSH
6564: LD_INT 29
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 31
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 33
6578: PUSH
6579: LD_INT 34
6581: PUSH
6582: LD_INT 35
6584: PUSH
6585: LD_INT 36
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 101
6628: PUSH
6629: LD_INT 102
6631: PUSH
6632: LD_INT 103
6634: PUSH
6635: LD_INT 104
6637: PUSH
6638: LD_INT 105
6640: PUSH
6641: LD_INT 106
6643: PUSH
6644: LD_INT 107
6646: PUSH
6647: LD_INT 108
6649: PUSH
6650: LD_INT 109
6652: PUSH
6653: LD_INT 110
6655: PUSH
6656: LD_INT 111
6658: PUSH
6659: LD_INT 112
6661: PUSH
6662: LD_INT 113
6664: PUSH
6665: LD_INT 114
6667: PUSH
6668: LD_INT 115
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// if result then
6692: LD_VAR 0 1
6696: IFFALSE 6985
// begin normal :=  ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_STRING 
6705: ST_TO_ADDR
// hardcore :=  ;
6706: LD_ADDR_VAR 0 4
6710: PUSH
6711: LD_STRING 
6713: ST_TO_ADDR
// for i = 1 to normalCounter do
6714: LD_ADDR_VAR 0 5
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_EXP 18
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6831
// begin tmp := 0 ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_STRING 0
6739: ST_TO_ADDR
// if result [ 1 ] then
6740: LD_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: IFFALSE 6813
// if result [ 1 ] [ 1 ] = i then
6750: LD_VAR 0 1
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: PUSH
6763: LD_VAR 0 5
6767: EQUAL
6768: IFFALSE 6813
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6770: LD_ADDR_VAR 0 1
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_VAR 0 1
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 3
6799: PPUSH
6800: CALL_OW 1
6804: ST_TO_ADDR
// tmp := 1 ;
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_STRING 1
6812: ST_TO_ADDR
// end ; normal := normal & tmp ;
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_VAR 0 3
6822: PUSH
6823: LD_VAR 0 2
6827: STR
6828: ST_TO_ADDR
// end ;
6829: GO 6729
6831: POP
6832: POP
// for i = 1 to hardcoreCounter do
6833: LD_ADDR_VAR 0 5
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_EXP 19
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6954
// begin tmp := 0 ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_STRING 0
6858: ST_TO_ADDR
// if result [ 2 ] then
6859: LD_VAR 0 1
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: IFFALSE 6936
// if result [ 2 ] [ 1 ] = 100 + i then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_INT 2
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PUSH
6882: LD_INT 100
6884: PUSH
6885: LD_VAR 0 5
6889: PLUS
6890: EQUAL
6891: IFFALSE 6936
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6893: LD_ADDR_VAR 0 1
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: LD_INT 2
6905: PPUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: LD_INT 1
6917: PPUSH
6918: CALL_OW 3
6922: PPUSH
6923: CALL_OW 1
6927: ST_TO_ADDR
// tmp := 1 ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_STRING 1
6935: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_VAR 0 4
6945: PUSH
6946: LD_VAR 0 2
6950: STR
6951: ST_TO_ADDR
// end ;
6952: GO 6848
6954: POP
6955: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6956: LD_STRING getStreamItemsFromMission("
6958: PUSH
6959: LD_VAR 0 3
6963: STR
6964: PUSH
6965: LD_STRING ","
6967: STR
6968: PUSH
6969: LD_VAR 0 4
6973: STR
6974: PUSH
6975: LD_STRING ")
6977: STR
6978: PPUSH
6979: CALL_OW 559
// end else
6983: GO 6992
// ToLua ( getStreamItemsFromMission("","") ) ;
6985: LD_STRING getStreamItemsFromMission("","")
6987: PPUSH
6988: CALL_OW 559
// end ;
6992: LD_VAR 0 1
6996: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6997: LD_EXP 17
7001: PUSH
7002: LD_EXP 22
7006: AND
7007: IFFALSE 7131
7009: GO 7011
7011: DISABLE
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
// begin enable ;
7016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: LD_INT 22
7024: PUSH
7025: LD_OWVAR 2
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 34
7039: PUSH
7040: LD_INT 7
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 34
7049: PUSH
7050: LD_INT 45
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 34
7059: PUSH
7060: LD_INT 28
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 34
7069: PUSH
7070: LD_INT 47
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 69
7092: ST_TO_ADDR
// if not tmp then
7093: LD_VAR 0 2
7097: NOT
7098: IFFALSE 7102
// exit ;
7100: GO 7131
// for i in tmp do
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_VAR 0 2
7111: PUSH
7112: FOR_IN
7113: IFFALSE 7129
// begin SetLives ( i , 0 ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_INT 0
7122: PPUSH
7123: CALL_OW 234
// end ;
7127: GO 7112
7129: POP
7130: POP
// end ;
7131: PPOPN 2
7133: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7134: LD_EXP 17
7138: PUSH
7139: LD_EXP 23
7143: AND
7144: IFFALSE 7228
7146: GO 7148
7148: DISABLE
7149: LD_INT 0
7151: PPUSH
7152: PPUSH
// begin enable ;
7153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_INT 22
7161: PUSH
7162: LD_OWVAR 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 32
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: ST_TO_ADDR
// if not tmp then
7190: LD_VAR 0 2
7194: NOT
7195: IFFALSE 7199
// exit ;
7197: GO 7228
// for i in tmp do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: LD_VAR 0 2
7208: PUSH
7209: FOR_IN
7210: IFFALSE 7226
// begin SetLives ( i , 0 ) ;
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: CALL_OW 234
// end ;
7224: GO 7209
7226: POP
7227: POP
// end ;
7228: PPOPN 2
7230: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7231: LD_EXP 17
7235: PUSH
7236: LD_EXP 20
7240: AND
7241: IFFALSE 7334
7243: GO 7245
7245: DISABLE
7246: LD_INT 0
7248: PPUSH
// begin enable ;
7249: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7250: LD_ADDR_VAR 0 1
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_OWVAR 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 25
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7332
// begin SetClass ( i , 1 ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 336
// end ;
7330: GO 7315
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7337: LD_EXP 17
7341: PUSH
7342: LD_EXP 21
7346: AND
7347: PUSH
7348: LD_OWVAR 65
7352: PUSH
7353: LD_INT 7
7355: LESS
7356: AND
7357: IFFALSE 7371
7359: GO 7361
7361: DISABLE
// begin enable ;
7362: ENABLE
// game_speed := 7 ;
7363: LD_ADDR_OWVAR 65
7367: PUSH
7368: LD_INT 7
7370: ST_TO_ADDR
// end ;
7371: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7372: LD_EXP 17
7376: PUSH
7377: LD_EXP 24
7381: AND
7382: IFFALSE 7584
7384: GO 7386
7386: DISABLE
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_INT 81
7399: PUSH
7400: LD_OWVAR 2
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 69
7427: ST_TO_ADDR
// if not tmp then
7428: LD_VAR 0 3
7432: NOT
7433: IFFALSE 7437
// exit ;
7435: GO 7584
// if tmp > 5 then
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 5
7444: GREATER
7445: IFFALSE 7457
// k := 5 else
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_INT 5
7454: ST_TO_ADDR
7455: GO 7467
// k := tmp ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 3
7466: ST_TO_ADDR
// for i := 1 to k do
7467: LD_ADDR_VAR 0 1
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_VAR 0 2
7481: PUSH
7482: FOR_TO
7483: IFFALSE 7582
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_VAR 0 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 4
7503: MOD
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: PPUSH
7509: CALL_OW 259
7513: PUSH
7514: LD_INT 10
7516: LESS
7517: IFFALSE 7580
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7519: LD_VAR 0 3
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 1
7534: PUSH
7535: LD_INT 4
7537: MOD
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: PPUSH
7543: LD_VAR 0 3
7547: PUSH
7548: LD_VAR 0 1
7552: ARRAY
7553: PPUSH
7554: LD_VAR 0 1
7558: PUSH
7559: LD_INT 4
7561: MOD
7562: PUSH
7563: LD_INT 1
7565: PLUS
7566: PPUSH
7567: CALL_OW 259
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: PPUSH
7576: CALL_OW 237
7580: GO 7482
7582: POP
7583: POP
// end ;
7584: PPOPN 3
7586: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 25
7596: AND
7597: IFFALSE 7617
7599: GO 7601
7601: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7602: LD_INT 4
7604: PPUSH
7605: LD_OWVAR 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 324
7617: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7618: LD_EXP 17
7622: PUSH
7623: LD_EXP 54
7627: AND
7628: IFFALSE 7648
7630: GO 7632
7632: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7633: LD_INT 19
7635: PPUSH
7636: LD_OWVAR 2
7640: PPUSH
7641: LD_INT 0
7643: PPUSH
7644: CALL_OW 324
7648: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7649: LD_EXP 17
7653: PUSH
7654: LD_EXP 26
7658: AND
7659: IFFALSE 7761
7661: GO 7663
7663: DISABLE
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
// begin enable ;
7668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7669: LD_ADDR_VAR 0 2
7673: PUSH
7674: LD_INT 22
7676: PUSH
7677: LD_OWVAR 2
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 34
7691: PUSH
7692: LD_INT 11
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 34
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 2
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7761
// for i in tmp do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_VAR 0 2
7741: PUSH
7742: FOR_IN
7743: IFFALSE 7759
// begin SetLives ( i , 0 ) ;
7745: LD_VAR 0 1
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 234
// end ;
7757: GO 7742
7759: POP
7760: POP
// end ;
7761: PPOPN 2
7763: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7764: LD_EXP 17
7768: PUSH
7769: LD_EXP 27
7773: AND
7774: IFFALSE 7794
7776: GO 7778
7778: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7779: LD_INT 32
7781: PPUSH
7782: LD_OWVAR 2
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 324
7794: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7795: LD_EXP 17
7799: PUSH
7800: LD_EXP 28
7804: AND
7805: IFFALSE 7986
7807: GO 7809
7809: DISABLE
7810: LD_INT 0
7812: PPUSH
7813: PPUSH
7814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7815: LD_ADDR_VAR 0 2
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_OWVAR 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 33
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PPUSH
7846: CALL_OW 69
7850: ST_TO_ADDR
// if not tmp then
7851: LD_VAR 0 2
7855: NOT
7856: IFFALSE 7860
// exit ;
7858: GO 7986
// side := 0 ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// for i := 1 to 8 do
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: DOUBLE
7874: LD_INT 1
7876: DEC
7877: ST_TO_ADDR
7878: LD_INT 8
7880: PUSH
7881: FOR_TO
7882: IFFALSE 7930
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7884: LD_OWVAR 2
7888: PUSH
7889: LD_VAR 0 1
7893: NONEQUAL
7894: PUSH
7895: LD_OWVAR 2
7899: PPUSH
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 81
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: AND
7914: IFFALSE 7928
// begin side := i ;
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_VAR 0 1
7925: ST_TO_ADDR
// break ;
7926: GO 7930
// end ;
7928: GO 7881
7930: POP
7931: POP
// if not side then
7932: LD_VAR 0 3
7936: NOT
7937: IFFALSE 7941
// exit ;
7939: GO 7986
// for i := 1 to tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: DOUBLE
7947: LD_INT 1
7949: DEC
7950: ST_TO_ADDR
7951: LD_VAR 0 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 7984
// if Prob ( 60 ) then
7959: LD_INT 60
7961: PPUSH
7962: CALL_OW 13
7966: IFFALSE 7982
// SetSide ( i , side ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 3
7977: PPUSH
7978: CALL_OW 235
7982: GO 7956
7984: POP
7985: POP
// end ;
7986: PPOPN 3
7988: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7989: LD_EXP 17
7993: PUSH
7994: LD_EXP 30
7998: AND
7999: IFFALSE 8118
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8007: LD_ADDR_VAR 0 1
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_OWVAR 2
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: LD_INT 23
8039: PUSH
8040: LD_INT 0
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8116
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 257
8073: PUSH
8074: LD_INT 1
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: IN
8092: IFFALSE 8114
// SetClass ( un , rand ( 1 , 4 ) ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 4
8104: PPUSH
8105: CALL_OW 12
8109: PPUSH
8110: CALL_OW 336
8114: GO 8061
8116: POP
8117: POP
// end ;
8118: PPOPN 1
8120: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8121: LD_EXP 17
8125: PUSH
8126: LD_EXP 29
8130: AND
8131: IFFALSE 8210
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8139: LD_ADDR_VAR 0 1
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_OWVAR 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 3
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not tmp then
8175: LD_VAR 0 1
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8184: LD_VAR 0 1
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: LD_INT 100
8205: PPUSH
8206: CALL_OW 234
// end ;
8210: PPOPN 1
8212: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8213: LD_EXP 17
8217: PUSH
8218: LD_EXP 31
8222: AND
8223: IFFALSE 8321
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_INT 22
8238: PUSH
8239: LD_OWVAR 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: ST_TO_ADDR
// if not tmp then
8267: LD_VAR 0 1
8271: NOT
8272: IFFALSE 8276
// exit ;
8274: GO 8321
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8276: LD_VAR 0 1
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 12
8293: ARRAY
8294: PPUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 4
8300: PPUSH
8301: CALL_OW 12
8305: PPUSH
8306: LD_INT 3000
8308: PPUSH
8309: LD_INT 9000
8311: PPUSH
8312: CALL_OW 12
8316: PPUSH
8317: CALL_OW 492
// end ;
8321: PPOPN 1
8323: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8324: LD_EXP 17
8328: PUSH
8329: LD_EXP 32
8333: AND
8334: IFFALSE 8354
8336: GO 8338
8338: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8339: LD_INT 1
8341: PPUSH
8342: LD_OWVAR 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 324
8354: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8355: LD_EXP 17
8359: PUSH
8360: LD_EXP 33
8364: AND
8365: IFFALSE 8448
8367: GO 8369
8369: DISABLE
8370: LD_INT 0
8372: PPUSH
8373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8374: LD_ADDR_VAR 0 2
8378: PUSH
8379: LD_INT 22
8381: PUSH
8382: LD_OWVAR 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 21
8393: PUSH
8394: LD_INT 3
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 69
8409: ST_TO_ADDR
// if not tmp then
8410: LD_VAR 0 2
8414: NOT
8415: IFFALSE 8419
// exit ;
8417: GO 8448
// for i in tmp do
8419: LD_ADDR_VAR 0 1
8423: PUSH
8424: LD_VAR 0 2
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8446
// SetBLevel ( i , 10 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 10
8439: PPUSH
8440: CALL_OW 241
8444: GO 8429
8446: POP
8447: POP
// end ;
8448: PPOPN 2
8450: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8451: LD_EXP 17
8455: PUSH
8456: LD_EXP 34
8460: AND
8461: IFFALSE 8572
8463: GO 8465
8465: DISABLE
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_OWVAR 2
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 25
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: ST_TO_ADDR
// if not tmp then
8507: LD_VAR 0 3
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8572
// un := tmp [ rand ( 1 , tmp ) ] ;
8516: LD_ADDR_VAR 0 2
8520: PUSH
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// if Crawls ( un ) then
8540: LD_VAR 0 2
8544: PPUSH
8545: CALL_OW 318
8549: IFFALSE 8560
// ComWalk ( un ) ;
8551: LD_VAR 0 2
8555: PPUSH
8556: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8560: LD_VAR 0 2
8564: PPUSH
8565: LD_INT 5
8567: PPUSH
8568: CALL_OW 336
// end ;
8572: PPOPN 3
8574: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8575: LD_EXP 17
8579: PUSH
8580: LD_EXP 35
8584: AND
8585: PUSH
8586: LD_OWVAR 67
8590: PUSH
8591: LD_INT 3
8593: LESS
8594: AND
8595: IFFALSE 8614
8597: GO 8599
8599: DISABLE
// Difficulty := Difficulty + 1 ;
8600: LD_ADDR_OWVAR 67
8604: PUSH
8605: LD_OWVAR 67
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ST_TO_ADDR
8614: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8615: LD_EXP 17
8619: PUSH
8620: LD_EXP 36
8624: AND
8625: IFFALSE 8728
8627: GO 8629
8629: DISABLE
8630: LD_INT 0
8632: PPUSH
// begin for i := 1 to 5 do
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_INT 5
8645: PUSH
8646: FOR_TO
8647: IFFALSE 8726
// begin uc_nation := nation_nature ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// uc_side := 0 ;
8657: LD_ADDR_OWVAR 20
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8665: LD_ADDR_OWVAR 29
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
// hc_agressivity := 20 ;
8680: LD_ADDR_OWVAR 35
8684: PUSH
8685: LD_INT 20
8687: ST_TO_ADDR
// hc_class := class_tiger ;
8688: LD_ADDR_OWVAR 28
8692: PUSH
8693: LD_INT 14
8695: ST_TO_ADDR
// hc_gallery :=  ;
8696: LD_ADDR_OWVAR 33
8700: PUSH
8701: LD_STRING 
8703: ST_TO_ADDR
// hc_name :=  ;
8704: LD_ADDR_OWVAR 26
8708: PUSH
8709: LD_STRING 
8711: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8712: CALL_OW 44
8716: PPUSH
8717: LD_INT 0
8719: PPUSH
8720: CALL_OW 51
// end ;
8724: GO 8646
8726: POP
8727: POP
// end ;
8728: PPOPN 1
8730: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 37
8740: AND
8741: IFFALSE 8750
8743: GO 8745
8745: DISABLE
// StreamSibBomb ;
8746: CALL 8751 0 0
8750: END
// export function StreamSibBomb ; var i , x , y ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
// result := false ;
8757: LD_ADDR_VAR 0 1
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// for i := 1 to 16 do
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_INT 16
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8978
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8781: LD_ADDR_VAR 0 3
8785: PUSH
8786: LD_INT 10
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 30
8794: PUSH
8795: LD_INT 40
8797: PUSH
8798: LD_INT 50
8800: PUSH
8801: LD_INT 60
8803: PUSH
8804: LD_INT 70
8806: PUSH
8807: LD_INT 80
8809: PUSH
8810: LD_INT 90
8812: PUSH
8813: LD_INT 100
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 120
8821: PUSH
8822: LD_INT 130
8824: PUSH
8825: LD_INT 140
8827: PUSH
8828: LD_INT 150
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 15
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_INT 10
8867: PUSH
8868: LD_INT 20
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 40
8876: PUSH
8877: LD_INT 50
8879: PUSH
8880: LD_INT 60
8882: PUSH
8883: LD_INT 70
8885: PUSH
8886: LD_INT 80
8888: PUSH
8889: LD_INT 90
8891: PUSH
8892: LD_INT 100
8894: PUSH
8895: LD_INT 110
8897: PUSH
8898: LD_INT 120
8900: PUSH
8901: LD_INT 130
8903: PUSH
8904: LD_INT 140
8906: PUSH
8907: LD_INT 150
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_INT 15
8932: PPUSH
8933: CALL_OW 12
8937: ARRAY
8938: ST_TO_ADDR
// if ValidHex ( x , y ) then
8939: LD_VAR 0 3
8943: PPUSH
8944: LD_VAR 0 4
8948: PPUSH
8949: CALL_OW 488
8953: IFFALSE 8976
// begin result := [ x , y ] ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 3
8964: PUSH
8965: LD_VAR 0 4
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: ST_TO_ADDR
// break ;
8974: GO 8978
// end ; end ;
8976: GO 8778
8978: POP
8979: POP
// if result then
8980: LD_VAR 0 1
8984: IFFALSE 9044
// begin ToLua ( playSibBomb() ) ;
8986: LD_STRING playSibBomb()
8988: PPUSH
8989: CALL_OW 559
// wait ( 0 0$14 ) ;
8993: LD_INT 490
8995: PPUSH
8996: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9000: LD_VAR 0 1
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: LD_VAR 0 1
9013: PUSH
9014: LD_INT 2
9016: ARRAY
9017: PPUSH
9018: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9022: LD_VAR 0 1
9026: PUSH
9027: LD_INT 1
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 1
9035: PUSH
9036: LD_INT 2
9038: ARRAY
9039: PPUSH
9040: CALL_OW 429
// end ; end ;
9044: LD_VAR 0 1
9048: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9049: LD_EXP 17
9053: PUSH
9054: LD_EXP 39
9058: AND
9059: IFFALSE 9071
9061: GO 9063
9063: DISABLE
// YouLost (  ) ;
9064: LD_STRING 
9066: PPUSH
9067: CALL_OW 104
9071: END
// every 0 0$1 trigger StreamModeActive and sFog do
9072: LD_EXP 17
9076: PUSH
9077: LD_EXP 38
9081: AND
9082: IFFALSE 9096
9084: GO 9086
9086: DISABLE
// FogOff ( your_side ) ;
9087: LD_OWVAR 2
9091: PPUSH
9092: CALL_OW 344
9096: END
// every 0 0$1 trigger StreamModeActive and sSun do
9097: LD_EXP 17
9101: PUSH
9102: LD_EXP 40
9106: AND
9107: IFFALSE 9135
9109: GO 9111
9111: DISABLE
// begin solar_recharge_percent := 0 ;
9112: LD_ADDR_OWVAR 79
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9120: LD_INT 10500
9122: PPUSH
9123: CALL_OW 67
// solar_recharge_percent := 100 ;
9127: LD_ADDR_OWVAR 79
9131: PUSH
9132: LD_INT 100
9134: ST_TO_ADDR
// end ;
9135: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9136: LD_EXP 17
9140: PUSH
9141: LD_EXP 41
9145: AND
9146: IFFALSE 9385
9148: GO 9150
9150: DISABLE
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
// begin tmp := [ ] ;
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: EMPTY
9162: ST_TO_ADDR
// for i := 1 to 6 do
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 6
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9282
// begin uc_nation := nation_nature ;
9179: LD_ADDR_OWVAR 21
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// uc_side := 0 ;
9187: LD_ADDR_OWVAR 20
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9195: LD_ADDR_OWVAR 29
9199: PUSH
9200: LD_INT 12
9202: PUSH
9203: LD_INT 12
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: ST_TO_ADDR
// hc_agressivity := 20 ;
9210: LD_ADDR_OWVAR 35
9214: PUSH
9215: LD_INT 20
9217: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9218: LD_ADDR_OWVAR 28
9222: PUSH
9223: LD_INT 17
9225: ST_TO_ADDR
// hc_gallery :=  ;
9226: LD_ADDR_OWVAR 33
9230: PUSH
9231: LD_STRING 
9233: ST_TO_ADDR
// hc_name :=  ;
9234: LD_ADDR_OWVAR 26
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// un := CreateHuman ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: CALL_OW 44
9251: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 51
// tmp := tmp ^ un ;
9264: LD_ADDR_VAR 0 3
9268: PUSH
9269: LD_VAR 0 3
9273: PUSH
9274: LD_VAR 0 2
9278: ADD
9279: ST_TO_ADDR
// end ;
9280: GO 9176
9282: POP
9283: POP
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for un in tmp do
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9376
// begin if IsDead ( un ) then
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9333
// begin tmp := tmp diff un ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 2
9329: DIFF
9330: ST_TO_ADDR
// continue ;
9331: GO 9301
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9333: LD_VAR 0 2
9337: PPUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 0
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PPUSH
9360: LD_VAR 0 2
9364: PPUSH
9365: CALL_OW 74
9369: PPUSH
9370: CALL_OW 115
// end ;
9374: GO 9301
9376: POP
9377: POP
// until not tmp ;
9378: LD_VAR 0 3
9382: NOT
9383: IFFALSE 9284
// end ;
9385: PPOPN 3
9387: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9388: LD_EXP 17
9392: PUSH
9393: LD_EXP 42
9397: AND
9398: IFFALSE 9452
9400: GO 9402
9402: DISABLE
// begin ToLua ( displayTroll(); ) ;
9403: LD_STRING displayTroll();
9405: PPUSH
9406: CALL_OW 559
// wait ( 3 3$00 ) ;
9410: LD_INT 6300
9412: PPUSH
9413: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9417: LD_STRING hideTroll();
9419: PPUSH
9420: CALL_OW 559
// wait ( 1 1$00 ) ;
9424: LD_INT 2100
9426: PPUSH
9427: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9431: LD_STRING displayTroll();
9433: PPUSH
9434: CALL_OW 559
// wait ( 1 1$00 ) ;
9438: LD_INT 2100
9440: PPUSH
9441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9445: LD_STRING hideTroll();
9447: PPUSH
9448: CALL_OW 559
// end ;
9452: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9453: LD_EXP 17
9457: PUSH
9458: LD_EXP 43
9462: AND
9463: IFFALSE 9526
9465: GO 9467
9467: DISABLE
9468: LD_INT 0
9470: PPUSH
// begin p := 0 ;
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// repeat game_speed := 1 ;
9479: LD_ADDR_OWVAR 65
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9487: LD_INT 35
9489: PPUSH
9490: CALL_OW 67
// p := p + 1 ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: LD_INT 1
9506: PLUS
9507: ST_TO_ADDR
// until p >= 60 ;
9508: LD_VAR 0 1
9512: PUSH
9513: LD_INT 60
9515: GREATEREQUAL
9516: IFFALSE 9479
// game_speed := 4 ;
9518: LD_ADDR_OWVAR 65
9522: PUSH
9523: LD_INT 4
9525: ST_TO_ADDR
// end ;
9526: PPOPN 1
9528: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9529: LD_EXP 17
9533: PUSH
9534: LD_EXP 44
9538: AND
9539: IFFALSE 9685
9541: GO 9543
9543: DISABLE
9544: LD_INT 0
9546: PPUSH
9547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_INT 22
9555: PUSH
9556: LD_OWVAR 2
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 30
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 69
9601: ST_TO_ADDR
// if not depot then
9602: LD_VAR 0 1
9606: NOT
9607: IFFALSE 9611
// exit ;
9609: GO 9685
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9611: LD_ADDR_VAR 0 2
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: LD_INT 1
9623: PPUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 12
9633: ARRAY
9634: PPUSH
9635: CALL_OW 274
9639: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 0
9650: PPUSH
9651: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9655: LD_VAR 0 2
9659: PPUSH
9660: LD_INT 2
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9670: LD_VAR 0 2
9674: PPUSH
9675: LD_INT 3
9677: PPUSH
9678: LD_INT 0
9680: PPUSH
9681: CALL_OW 277
// end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9688: LD_EXP 17
9692: PUSH
9693: LD_EXP 45
9697: AND
9698: IFFALSE 9795
9700: GO 9702
9702: DISABLE
9703: LD_INT 0
9705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9706: LD_ADDR_VAR 0 1
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 23
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 1
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: LD_INT 200
9790: PPUSH
9791: CALL_OW 234
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9798: LD_EXP 17
9802: PUSH
9803: LD_EXP 46
9807: AND
9808: IFFALSE 9887
9810: GO 9812
9812: DISABLE
9813: LD_INT 0
9815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_OWVAR 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if not tmp then
9852: LD_VAR 0 1
9856: NOT
9857: IFFALSE 9861
// exit ;
9859: GO 9887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PPUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 12
9878: ARRAY
9879: PPUSH
9880: LD_INT 60
9882: PPUSH
9883: CALL_OW 234
// end ;
9887: PPOPN 1
9889: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9890: LD_EXP 17
9894: PUSH
9895: LD_EXP 47
9899: AND
9900: IFFALSE 9999
9902: GO 9904
9904: DISABLE
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// begin enable ;
9909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9910: LD_ADDR_VAR 0 1
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_OWVAR 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 61
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 33
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: ST_TO_ADDR
// if not tmp then
9953: LD_VAR 0 1
9957: NOT
9958: IFFALSE 9962
// exit ;
9960: GO 9999
// for i in tmp do
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_VAR 0 1
9971: PUSH
9972: FOR_IN
9973: IFFALSE 9997
// if IsControledBy ( i ) then
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 312
9984: IFFALSE 9995
// ComUnlink ( i ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: CALL_OW 136
9995: GO 9972
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10002: LD_EXP 17
10006: PUSH
10007: LD_EXP 48
10011: AND
10012: IFFALSE 10152
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
// begin ToLua ( displayPowell(); ) ;
10021: LD_STRING displayPowell();
10023: PPUSH
10024: CALL_OW 559
// uc_side := 0 ;
10028: LD_ADDR_OWVAR 20
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// uc_nation := 2 ;
10036: LD_ADDR_OWVAR 21
10040: PUSH
10041: LD_INT 2
10043: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10044: LD_ADDR_OWVAR 37
10048: PUSH
10049: LD_INT 14
10051: ST_TO_ADDR
// vc_engine := engine_siberite ;
10052: LD_ADDR_OWVAR 39
10056: PUSH
10057: LD_INT 3
10059: ST_TO_ADDR
// vc_control := control_apeman ;
10060: LD_ADDR_OWVAR 38
10064: PUSH
10065: LD_INT 5
10067: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10068: LD_ADDR_OWVAR 40
10072: PUSH
10073: LD_INT 29
10075: ST_TO_ADDR
// un := CreateVehicle ;
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: CALL_OW 45
10085: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10086: LD_VAR 0 2
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10098: LD_INT 35
10100: PPUSH
10101: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10105: LD_VAR 0 2
10109: PPUSH
10110: LD_INT 22
10112: PUSH
10113: LD_OWVAR 2
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 69
10126: PPUSH
10127: LD_VAR 0 2
10131: PPUSH
10132: CALL_OW 74
10136: PPUSH
10137: CALL_OW 115
// until IsDead ( un ) ;
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 301
10150: IFFALSE 10098
// end ;
10152: PPOPN 2
10154: END
// every 0 0$1 trigger StreamModeActive and sStu do
10155: LD_EXP 17
10159: PUSH
10160: LD_EXP 56
10164: AND
10165: IFFALSE 10181
10167: GO 10169
10169: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10170: LD_STRING displayStucuk();
10172: PPUSH
10173: CALL_OW 559
// ResetFog ;
10177: CALL_OW 335
// end ;
10181: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10182: LD_EXP 17
10186: PUSH
10187: LD_EXP 49
10191: AND
10192: IFFALSE 10333
10194: GO 10196
10196: DISABLE
10197: LD_INT 0
10199: PPUSH
10200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: LD_INT 22
10208: PUSH
10209: LD_OWVAR 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if not tmp then
10237: LD_VAR 0 2
10241: NOT
10242: IFFALSE 10246
// exit ;
10244: GO 10333
// un := tmp [ rand ( 1 , tmp ) ] ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_VAR 0 2
10255: PUSH
10256: LD_INT 1
10258: PPUSH
10259: LD_VAR 0 2
10263: PPUSH
10264: CALL_OW 12
10268: ARRAY
10269: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10282: LD_VAR 0 1
10286: PPUSH
10287: LD_OWVAR 3
10291: PUSH
10292: LD_VAR 0 1
10296: DIFF
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 74
10307: PPUSH
10308: CALL_OW 115
// wait ( 0 0$20 ) ;
10312: LD_INT 700
10314: PPUSH
10315: CALL_OW 67
// SetSide ( un , your_side ) ;
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_OWVAR 2
10328: PPUSH
10329: CALL_OW 235
// end ;
10333: PPOPN 2
10335: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10336: LD_EXP 17
10340: PUSH
10341: LD_EXP 50
10345: AND
10346: IFFALSE 10452
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_INT 22
10361: PUSH
10362: LD_OWVAR 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 0
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 30
10386: PUSH
10387: LD_INT 1
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: ST_TO_ADDR
// if not depot then
10408: LD_VAR 0 1
10412: NOT
10413: IFFALSE 10417
// exit ;
10415: GO 10452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: CALL_OW 250
10430: PPUSH
10431: LD_VAR 0 1
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 251
10444: PPUSH
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 495
// end ;
10452: PPOPN 1
10454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10455: LD_EXP 17
10459: PUSH
10460: LD_EXP 51
10464: AND
10465: IFFALSE 10676
10467: GO 10469
10469: DISABLE
10470: LD_INT 0
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_OWVAR 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: ST_TO_ADDR
// if not tmp then
10513: LD_VAR 0 5
10517: NOT
10518: IFFALSE 10522
// exit ;
10520: GO 10676
// for i in tmp do
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_VAR 0 5
10531: PUSH
10532: FOR_IN
10533: IFFALSE 10674
// begin d := rand ( 0 , 5 ) ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_INT 0
10542: PPUSH
10543: LD_INT 5
10545: PPUSH
10546: CALL_OW 12
10550: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10551: LD_ADDR_VAR 0 2
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 250
10565: PPUSH
10566: LD_VAR 0 4
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: LD_INT 12
10576: PPUSH
10577: CALL_OW 12
10581: PPUSH
10582: CALL_OW 272
10586: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: CALL_OW 251
10601: PPUSH
10602: LD_VAR 0 4
10606: PPUSH
10607: LD_INT 3
10609: PPUSH
10610: LD_INT 12
10612: PPUSH
10613: CALL_OW 12
10617: PPUSH
10618: CALL_OW 273
10622: ST_TO_ADDR
// if ValidHex ( x , y ) then
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: IFFALSE 10672
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 3
10656: PPUSH
10657: LD_INT 6
10659: PPUSH
10660: CALL_OW 12
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 483
// end ;
10672: GO 10532
10674: POP
10675: POP
// end ;
10676: PPOPN 5
10678: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10679: LD_EXP 17
10683: PUSH
10684: LD_EXP 52
10688: AND
10689: IFFALSE 10783
10691: GO 10693
10693: DISABLE
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 22
10705: PUSH
10706: LD_OWVAR 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 32
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 21
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10783
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10781
// SetFuel ( i , 0 ) ;
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 0
10774: PPUSH
10775: CALL_OW 240
10779: GO 10764
10781: POP
10782: POP
// end ;
10783: PPOPN 2
10785: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10786: LD_EXP 17
10790: PUSH
10791: LD_EXP 53
10795: AND
10796: IFFALSE 10862
10798: GO 10800
10800: DISABLE
10801: LD_INT 0
10803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10804: LD_ADDR_VAR 0 1
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 30
10823: PUSH
10824: LD_INT 29
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL_OW 69
10839: ST_TO_ADDR
// if not tmp then
10840: LD_VAR 0 1
10844: NOT
10845: IFFALSE 10849
// exit ;
10847: GO 10862
// DestroyUnit ( tmp [ 1 ] ) ;
10849: LD_VAR 0 1
10853: PUSH
10854: LD_INT 1
10856: ARRAY
10857: PPUSH
10858: CALL_OW 65
// end ;
10862: PPOPN 1
10864: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10865: LD_EXP 17
10869: PUSH
10870: LD_EXP 55
10874: AND
10875: IFFALSE 11004
10877: GO 10879
10879: DISABLE
10880: LD_INT 0
10882: PPUSH
// begin uc_side := 0 ;
10883: LD_ADDR_OWVAR 20
10887: PUSH
10888: LD_INT 0
10890: ST_TO_ADDR
// uc_nation := nation_arabian ;
10891: LD_ADDR_OWVAR 21
10895: PUSH
10896: LD_INT 2
10898: ST_TO_ADDR
// hc_gallery :=  ;
10899: LD_ADDR_OWVAR 33
10903: PUSH
10904: LD_STRING 
10906: ST_TO_ADDR
// hc_name :=  ;
10907: LD_ADDR_OWVAR 26
10911: PUSH
10912: LD_STRING 
10914: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10915: LD_INT 1
10917: PPUSH
10918: LD_INT 11
10920: PPUSH
10921: LD_INT 10
10923: PPUSH
10924: CALL_OW 380
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10950: LD_INT 35
10952: PPUSH
10953: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 69
10978: PPUSH
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 74
10988: PPUSH
10989: CALL_OW 115
// until IsDead ( un ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 301
11002: IFFALSE 10950
// end ;
11004: PPOPN 1
11006: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11007: LD_EXP 17
11011: PUSH
11012: LD_EXP 57
11016: AND
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11022: LD_STRING earthquake(getX(game), 0, 32)
11024: PPUSH
11025: CALL_OW 559
11029: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11030: LD_EXP 17
11034: PUSH
11035: LD_EXP 58
11039: AND
11040: IFFALSE 11131
11042: GO 11044
11044: DISABLE
11045: LD_INT 0
11047: PPUSH
// begin enable ;
11048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11049: LD_ADDR_VAR 0 1
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_OWVAR 2
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 21
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 33
11078: PUSH
11079: LD_INT 3
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// if not tmp then
11096: LD_VAR 0 1
11100: NOT
11101: IFFALSE 11105
// exit ;
11103: GO 11131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11105: LD_VAR 0 1
11109: PUSH
11110: LD_INT 1
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 12
11122: ARRAY
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 234
// end ;
11131: PPOPN 1
11133: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11134: LD_EXP 17
11138: PUSH
11139: LD_EXP 59
11143: AND
11144: IFFALSE 11285
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
11153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11154: LD_ADDR_VAR 0 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_OWVAR 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 3
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11285
// un := tmp [ rand ( 1 , tmp ) ] ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 1
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: CALL_OW 12
11221: ARRAY
11222: ST_TO_ADDR
// if Crawls ( un ) then
11223: LD_VAR 0 2
11227: PPUSH
11228: CALL_OW 318
11232: IFFALSE 11243
// ComWalk ( un ) ;
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11243: LD_VAR 0 2
11247: PPUSH
11248: LD_INT 9
11250: PPUSH
11251: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11255: LD_INT 28
11257: PPUSH
11258: LD_OWVAR 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11270: LD_INT 29
11272: PPUSH
11273: LD_OWVAR 2
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: CALL_OW 322
// end ;
11285: PPOPN 3
11287: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11288: LD_EXP 17
11292: PUSH
11293: LD_EXP 60
11297: AND
11298: IFFALSE 11409
11300: GO 11302
11302: DISABLE
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_OWVAR 2
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 3
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11409
// un := tmp [ rand ( 1 , tmp ) ] ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: CALL_OW 12
11375: ARRAY
11376: ST_TO_ADDR
// if Crawls ( un ) then
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL_OW 318
11386: IFFALSE 11397
// ComWalk ( un ) ;
11388: LD_VAR 0 2
11392: PPUSH
11393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11397: LD_VAR 0 2
11401: PPUSH
11402: LD_INT 8
11404: PPUSH
11405: CALL_OW 336
// end ;
11409: PPOPN 3
11411: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11412: LD_EXP 17
11416: PUSH
11417: LD_EXP 61
11421: AND
11422: IFFALSE 11566
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 34
11463: PUSH
11464: LD_INT 12
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 34
11473: PUSH
11474: LD_INT 51
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: LD_INT 32
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: ST_TO_ADDR
// if not tmp then
11507: LD_VAR 0 2
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 11566
// for i in tmp do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11564
// if GetCargo ( i , mat_artifact ) = 0 then
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 4
11536: PPUSH
11537: CALL_OW 289
11541: PUSH
11542: LD_INT 0
11544: EQUAL
11545: IFFALSE 11562
// SetCargo ( i , mat_siberit , 100 ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 3
11554: PPUSH
11555: LD_INT 100
11557: PPUSH
11558: CALL_OW 290
11562: GO 11526
11564: POP
11565: POP
// end ;
11566: PPOPN 2
11568: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11569: LD_EXP 17
11573: PUSH
11574: LD_EXP 62
11578: AND
11579: IFFALSE 11762
11581: GO 11583
11583: DISABLE
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_OWVAR 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 69
11609: ST_TO_ADDR
// if not tmp then
11610: LD_VAR 0 2
11614: NOT
11615: IFFALSE 11619
// exit ;
11617: GO 11762
// for i := 1 to 2 do
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_INT 2
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11760
// begin uc_side := your_side ;
11635: LD_ADDR_OWVAR 20
11639: PUSH
11640: LD_OWVAR 2
11644: ST_TO_ADDR
// uc_nation := nation_american ;
11645: LD_ADDR_OWVAR 21
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// vc_chassis := us_morphling ;
11653: LD_ADDR_OWVAR 37
11657: PUSH
11658: LD_INT 5
11660: ST_TO_ADDR
// vc_engine := engine_siberite ;
11661: LD_ADDR_OWVAR 39
11665: PUSH
11666: LD_INT 3
11668: ST_TO_ADDR
// vc_control := control_computer ;
11669: LD_ADDR_OWVAR 38
11673: PUSH
11674: LD_INT 3
11676: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11677: LD_ADDR_OWVAR 40
11681: PUSH
11682: LD_INT 10
11684: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: ARRAY
11693: PPUSH
11694: CALL_OW 310
11698: NOT
11699: IFFALSE 11746
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11701: CALL_OW 45
11705: PPUSH
11706: LD_VAR 0 2
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PPUSH
11715: CALL_OW 250
11719: PPUSH
11720: LD_VAR 0 2
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: CALL_OW 251
11733: PPUSH
11734: LD_INT 12
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 50
11744: GO 11758
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11746: CALL_OW 45
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 51
// end ;
11758: GO 11632
11760: POP
11761: POP
// end ;
11762: PPOPN 2
11764: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11765: LD_EXP 17
11769: PUSH
11770: LD_EXP 63
11774: AND
11775: IFFALSE 11997
11777: GO 11779
11779: DISABLE
11780: LD_INT 0
11782: PPUSH
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11788: LD_ADDR_VAR 0 6
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_OWVAR 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 1
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 3
11817: PUSH
11818: LD_INT 23
11820: PUSH
11821: LD_INT 0
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// if not tmp then
11842: LD_VAR 0 6
11846: NOT
11847: IFFALSE 11851
// exit ;
11849: GO 11997
// s1 := rand ( 1 , 4 ) ;
11851: LD_ADDR_VAR 0 2
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 4
11861: PPUSH
11862: CALL_OW 12
11866: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11867: LD_ADDR_VAR 0 4
11871: PUSH
11872: LD_VAR 0 6
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: PPUSH
11881: LD_VAR 0 2
11885: PPUSH
11886: CALL_OW 259
11890: ST_TO_ADDR
// if s1 = 1 then
11891: LD_VAR 0 2
11895: PUSH
11896: LD_INT 1
11898: EQUAL
11899: IFFALSE 11919
// s2 := rand ( 2 , 4 ) else
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 2
11908: PPUSH
11909: LD_INT 4
11911: PPUSH
11912: CALL_OW 12
11916: ST_TO_ADDR
11917: GO 11927
// s2 := 1 ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11927: LD_ADDR_VAR 0 5
11931: PUSH
11932: LD_VAR 0 6
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 259
11950: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11951: LD_VAR 0 6
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11974: LD_VAR 0 6
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_VAR 0 4
11992: PPUSH
11993: CALL_OW 237
// end ;
11997: PPOPN 6
11999: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12000: LD_EXP 17
12004: PUSH
12005: LD_EXP 64
12009: AND
12010: IFFALSE 12089
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: ST_TO_ADDR
// if not tmp then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 234
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12092: LD_EXP 17
12096: PUSH
12097: LD_EXP 65
12101: AND
12102: IFFALSE 12214
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12111: LD_ADDR_VAR 0 2
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 27
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 26
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PPUSH
12171: CALL_OW 69
12175: ST_TO_ADDR
// if not tmp then
12176: LD_VAR 0 2
12180: NOT
12181: IFFALSE 12185
// exit ;
12183: GO 12214
// for i in tmp do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_IN
12196: IFFALSE 12212
// SetLives ( i , 1 ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 234
12210: GO 12195
12212: POP
12213: POP
// end ;
12214: PPOPN 2
12216: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12217: LD_EXP 17
12221: PUSH
12222: LD_EXP 66
12226: AND
12227: IFFALSE 12501
12229: GO 12231
12231: DISABLE
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
12236: PPUSH
// begin i := rand ( 1 , 7 ) ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 7
12247: PPUSH
12248: CALL_OW 12
12252: ST_TO_ADDR
// case i of 1 :
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 1
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12276
12266: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12267: LD_STRING earthquake(getX(game), 0, 32)
12269: PPUSH
12270: CALL_OW 559
12274: GO 12501
12276: LD_INT 2
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12298
12284: POP
// begin ToLua ( displayStucuk(); ) ;
12285: LD_STRING displayStucuk();
12287: PPUSH
12288: CALL_OW 559
// ResetFog ;
12292: CALL_OW 335
// end ; 3 :
12296: GO 12501
12298: LD_INT 3
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12410
12306: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_OWVAR 2
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: ST_TO_ADDR
// if not tmp then
12343: LD_VAR 0 2
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 12501
// un := tmp [ rand ( 1 , tmp ) ] ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL_OW 12
12374: ARRAY
12375: ST_TO_ADDR
// if Crawls ( un ) then
12376: LD_VAR 0 3
12380: PPUSH
12381: CALL_OW 318
12385: IFFALSE 12396
// ComWalk ( un ) ;
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 8
12403: PPUSH
12404: CALL_OW 336
// end ; 4 :
12408: GO 12501
12410: LD_INT 4
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 12479
12418: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_OWVAR 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 29
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 2
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12501
// DestroyUnit ( tmp [ 1 ] ) ;
12464: LD_VAR 0 2
12468: PUSH
12469: LD_INT 1
12471: ARRAY
12472: PPUSH
12473: CALL_OW 65
// end ; 5 .. 7 :
12477: GO 12501
12479: LD_INT 5
12481: DOUBLE
12482: GREATEREQUAL
12483: IFFALSE 12491
12485: LD_INT 7
12487: DOUBLE
12488: LESSEQUAL
12489: IFTRUE 12493
12491: GO 12500
12493: POP
// StreamSibBomb ; end ;
12494: CALL 8751 0 0
12498: GO 12501
12500: POP
// end ;
12501: PPOPN 3
12503: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12504: LD_EXP 17
12508: PUSH
12509: LD_EXP 67
12513: AND
12514: IFFALSE 12670
12516: GO 12518
12518: DISABLE
12519: LD_INT 0
12521: PPUSH
12522: PPUSH
12523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_INT 81
12531: PUSH
12532: LD_OWVAR 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 69
12577: ST_TO_ADDR
// if not tmp then
12578: LD_VAR 0 2
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12670
// p := 0 ;
12587: LD_ADDR_VAR 0 3
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12595: LD_INT 35
12597: PPUSH
12598: CALL_OW 67
// p := p + 1 ;
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 1
12614: PLUS
12615: ST_TO_ADDR
// for i in tmp do
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: FOR_IN
12627: IFFALSE 12658
// if GetLives ( i ) < 1000 then
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 256
12638: PUSH
12639: LD_INT 1000
12641: LESS
12642: IFFALSE 12656
// SetLives ( i , 1000 ) ;
12644: LD_VAR 0 1
12648: PPUSH
12649: LD_INT 1000
12651: PPUSH
12652: CALL_OW 234
12656: GO 12626
12658: POP
12659: POP
// until p > 20 ;
12660: LD_VAR 0 3
12664: PUSH
12665: LD_INT 20
12667: GREATER
12668: IFFALSE 12595
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger StreamModeActive and sTime do
12673: LD_EXP 17
12677: PUSH
12678: LD_EXP 68
12682: AND
12683: IFFALSE 12718
12685: GO 12687
12687: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12688: LD_INT 28
12690: PPUSH
12691: LD_OWVAR 2
12695: PPUSH
12696: LD_INT 2
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12703: LD_INT 30
12705: PPUSH
12706: LD_OWVAR 2
12710: PPUSH
12711: LD_INT 2
12713: PPUSH
12714: CALL_OW 322
// end ;
12718: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12719: LD_EXP 17
12723: PUSH
12724: LD_EXP 69
12728: AND
12729: IFFALSE 12850
12731: GO 12733
12733: DISABLE
12734: LD_INT 0
12736: PPUSH
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: LD_INT 23
12770: PUSH
12771: LD_INT 0
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 2
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12850
// for i in tmp do
12801: LD_ADDR_VAR 0 1
12805: PUSH
12806: LD_VAR 0 2
12810: PUSH
12811: FOR_IN
12812: IFFALSE 12848
// begin if Crawls ( i ) then
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 318
12823: IFFALSE 12834
// ComWalk ( i ) ;
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 138
// SetClass ( i , 2 ) ;
12834: LD_VAR 0 1
12838: PPUSH
12839: LD_INT 2
12841: PPUSH
12842: CALL_OW 336
// end ;
12846: GO 12811
12848: POP
12849: POP
// end ;
12850: PPOPN 2
12852: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12853: LD_EXP 17
12857: PUSH
12858: LD_EXP 70
12862: AND
12863: IFFALSE 13144
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
12872: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12873: LD_OWVAR 2
12877: PPUSH
12878: LD_INT 9
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12891: LD_INT 9
12893: PPUSH
12894: LD_OWVAR 2
12898: PPUSH
12899: CALL_OW 343
// uc_side := 9 ;
12903: LD_ADDR_OWVAR 20
12907: PUSH
12908: LD_INT 9
12910: ST_TO_ADDR
// uc_nation := 2 ;
12911: LD_ADDR_OWVAR 21
12915: PUSH
12916: LD_INT 2
12918: ST_TO_ADDR
// hc_name := Dark Warrior ;
12919: LD_ADDR_OWVAR 26
12923: PUSH
12924: LD_STRING Dark Warrior
12926: ST_TO_ADDR
// hc_gallery :=  ;
12927: LD_ADDR_OWVAR 33
12931: PUSH
12932: LD_STRING 
12934: ST_TO_ADDR
// hc_noskilllimit := true ;
12935: LD_ADDR_OWVAR 76
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12943: LD_ADDR_OWVAR 31
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 30
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: ST_TO_ADDR
// un := CreateHuman ;
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: CALL_OW 44
12975: ST_TO_ADDR
// hc_noskilllimit := false ;
12976: LD_ADDR_OWVAR 76
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 51
// p := 0 ;
12996: LD_ADDR_VAR 0 2
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13004: LD_INT 35
13006: PPUSH
13007: CALL_OW 67
// p := p + 1 ;
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_VAR 0 2
13020: PUSH
13021: LD_INT 1
13023: PLUS
13024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13025: LD_VAR 0 3
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: LESS
13038: IFFALSE 13052
// SetLives ( un , 1000 ) ;
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1000
13047: PPUSH
13048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 81
13059: PUSH
13060: LD_OWVAR 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 91
13071: PUSH
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: CALL_OW 74
13103: PPUSH
13104: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13108: LD_VAR 0 2
13112: PUSH
13113: LD_INT 60
13115: GREATER
13116: PUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 301
13126: OR
13127: IFFALSE 13004
// if un then
13129: LD_VAR 0 3
13133: IFFALSE 13144
// RemoveUnit ( un ) ;
13135: LD_VAR 0 3
13139: PPUSH
13140: CALL_OW 64
// end ;
13144: PPOPN 3
13146: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13147: LD_INT 0
13149: PPUSH
// case cmd of 301 :
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 301
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13195
13163: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13164: LD_VAR 0 6
13168: PPUSH
13169: LD_VAR 0 7
13173: PPUSH
13174: LD_VAR 0 8
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_VAR 0 5
13188: PPUSH
13189: CALL 14396 0 5
13193: GO 13316
13195: LD_INT 302
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13240
13203: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13204: LD_VAR 0 6
13208: PPUSH
13209: LD_VAR 0 7
13213: PPUSH
13214: LD_VAR 0 8
13218: PPUSH
13219: LD_VAR 0 9
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: LD_VAR 0 5
13233: PPUSH
13234: CALL 14487 0 6
13238: GO 13316
13240: LD_INT 303
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13285
13248: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13249: LD_VAR 0 6
13253: PPUSH
13254: LD_VAR 0 7
13258: PPUSH
13259: LD_VAR 0 8
13263: PPUSH
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_VAR 0 5
13278: PPUSH
13279: CALL 13321 0 6
13283: GO 13316
13285: LD_INT 304
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13315
13293: POP
// hHackTeleport ( unit , x , y ) ; end ;
13294: LD_VAR 0 2
13298: PPUSH
13299: LD_VAR 0 4
13303: PPUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: CALL 15080 0 3
13313: GO 13316
13315: POP
// end ;
13316: LD_VAR 0 12
13320: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 1
13332: LESS
13333: PUSH
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 3
13341: GREATER
13342: OR
13343: PUSH
13344: LD_VAR 0 5
13348: PPUSH
13349: LD_VAR 0 6
13353: PPUSH
13354: CALL_OW 428
13358: OR
13359: IFFALSE 13363
// exit ;
13361: GO 14083
// uc_side := your_side ;
13363: LD_ADDR_OWVAR 20
13367: PUSH
13368: LD_OWVAR 2
13372: ST_TO_ADDR
// uc_nation := nation ;
13373: LD_ADDR_OWVAR 21
13377: PUSH
13378: LD_VAR 0 1
13382: ST_TO_ADDR
// bc_level = 1 ;
13383: LD_ADDR_OWVAR 43
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// case btype of 1 :
13391: LD_VAR 0 2
13395: PUSH
13396: LD_INT 1
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13415
13404: POP
// bc_type := b_depot ; 2 :
13405: LD_ADDR_OWVAR 42
13409: PUSH
13410: LD_INT 0
13412: ST_TO_ADDR
13413: GO 14027
13415: LD_INT 2
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13434
13423: POP
// bc_type := b_warehouse ; 3 :
13424: LD_ADDR_OWVAR 42
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
13432: GO 14027
13434: LD_INT 3
13436: DOUBLE
13437: EQUAL
13438: IFTRUE 13442
13440: GO 13453
13442: POP
// bc_type := b_lab ; 4 .. 9 :
13443: LD_ADDR_OWVAR 42
13447: PUSH
13448: LD_INT 6
13450: ST_TO_ADDR
13451: GO 14027
13453: LD_INT 4
13455: DOUBLE
13456: GREATEREQUAL
13457: IFFALSE 13465
13459: LD_INT 9
13461: DOUBLE
13462: LESSEQUAL
13463: IFTRUE 13467
13465: GO 13519
13467: POP
// begin bc_type := b_lab_half ;
13468: LD_ADDR_OWVAR 42
13472: PUSH
13473: LD_INT 7
13475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13476: LD_ADDR_OWVAR 44
13480: PUSH
13481: LD_INT 10
13483: PUSH
13484: LD_INT 11
13486: PUSH
13487: LD_INT 12
13489: PUSH
13490: LD_INT 15
13492: PUSH
13493: LD_INT 14
13495: PUSH
13496: LD_INT 13
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_VAR 0 2
13511: PUSH
13512: LD_INT 3
13514: MINUS
13515: ARRAY
13516: ST_TO_ADDR
// end ; 10 .. 13 :
13517: GO 14027
13519: LD_INT 10
13521: DOUBLE
13522: GREATEREQUAL
13523: IFFALSE 13531
13525: LD_INT 13
13527: DOUBLE
13528: LESSEQUAL
13529: IFTRUE 13533
13531: GO 13610
13533: POP
// begin bc_type := b_lab_full ;
13534: LD_ADDR_OWVAR 42
13538: PUSH
13539: LD_INT 8
13541: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13542: LD_ADDR_OWVAR 44
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 12
13552: PUSH
13553: LD_INT 14
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_VAR 0 2
13569: PUSH
13570: LD_INT 9
13572: MINUS
13573: ARRAY
13574: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13575: LD_ADDR_OWVAR 45
13579: PUSH
13580: LD_INT 11
13582: PUSH
13583: LD_INT 15
13585: PUSH
13586: LD_INT 12
13588: PUSH
13589: LD_INT 15
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 9
13605: MINUS
13606: ARRAY
13607: ST_TO_ADDR
// end ; 14 :
13608: GO 14027
13610: LD_INT 14
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13629
13618: POP
// bc_type := b_workshop ; 15 :
13619: LD_ADDR_OWVAR 42
13623: PUSH
13624: LD_INT 2
13626: ST_TO_ADDR
13627: GO 14027
13629: LD_INT 15
13631: DOUBLE
13632: EQUAL
13633: IFTRUE 13637
13635: GO 13648
13637: POP
// bc_type := b_factory ; 16 :
13638: LD_ADDR_OWVAR 42
13642: PUSH
13643: LD_INT 3
13645: ST_TO_ADDR
13646: GO 14027
13648: LD_INT 16
13650: DOUBLE
13651: EQUAL
13652: IFTRUE 13656
13654: GO 13667
13656: POP
// bc_type := b_ext_gun ; 17 :
13657: LD_ADDR_OWVAR 42
13661: PUSH
13662: LD_INT 17
13664: ST_TO_ADDR
13665: GO 14027
13667: LD_INT 17
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13703
13675: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13676: LD_ADDR_OWVAR 42
13680: PUSH
13681: LD_INT 19
13683: PUSH
13684: LD_INT 23
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: LD_VAR 0 1
13699: ARRAY
13700: ST_TO_ADDR
13701: GO 14027
13703: LD_INT 18
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13722
13711: POP
// bc_type := b_ext_radar ; 19 :
13712: LD_ADDR_OWVAR 42
13716: PUSH
13717: LD_INT 20
13719: ST_TO_ADDR
13720: GO 14027
13722: LD_INT 19
13724: DOUBLE
13725: EQUAL
13726: IFTRUE 13730
13728: GO 13741
13730: POP
// bc_type := b_ext_radio ; 20 :
13731: LD_ADDR_OWVAR 42
13735: PUSH
13736: LD_INT 22
13738: ST_TO_ADDR
13739: GO 14027
13741: LD_INT 20
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 13760
13749: POP
// bc_type := b_ext_siberium ; 21 :
13750: LD_ADDR_OWVAR 42
13754: PUSH
13755: LD_INT 21
13757: ST_TO_ADDR
13758: GO 14027
13760: LD_INT 21
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13779
13768: POP
// bc_type := b_ext_computer ; 22 :
13769: LD_ADDR_OWVAR 42
13773: PUSH
13774: LD_INT 24
13776: ST_TO_ADDR
13777: GO 14027
13779: LD_INT 22
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13798
13787: POP
// bc_type := b_ext_track ; 23 :
13788: LD_ADDR_OWVAR 42
13792: PUSH
13793: LD_INT 16
13795: ST_TO_ADDR
13796: GO 14027
13798: LD_INT 23
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13817
13806: POP
// bc_type := b_ext_laser ; 24 :
13807: LD_ADDR_OWVAR 42
13811: PUSH
13812: LD_INT 25
13814: ST_TO_ADDR
13815: GO 14027
13817: LD_INT 24
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 13836
13825: POP
// bc_type := b_control_tower ; 25 :
13826: LD_ADDR_OWVAR 42
13830: PUSH
13831: LD_INT 36
13833: ST_TO_ADDR
13834: GO 14027
13836: LD_INT 25
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13855
13844: POP
// bc_type := b_breastwork ; 26 :
13845: LD_ADDR_OWVAR 42
13849: PUSH
13850: LD_INT 31
13852: ST_TO_ADDR
13853: GO 14027
13855: LD_INT 26
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13874
13863: POP
// bc_type := b_bunker ; 27 :
13864: LD_ADDR_OWVAR 42
13868: PUSH
13869: LD_INT 32
13871: ST_TO_ADDR
13872: GO 14027
13874: LD_INT 27
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13893
13882: POP
// bc_type := b_turret ; 28 :
13883: LD_ADDR_OWVAR 42
13887: PUSH
13888: LD_INT 33
13890: ST_TO_ADDR
13891: GO 14027
13893: LD_INT 28
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13912
13901: POP
// bc_type := b_armoury ; 29 :
13902: LD_ADDR_OWVAR 42
13906: PUSH
13907: LD_INT 4
13909: ST_TO_ADDR
13910: GO 14027
13912: LD_INT 29
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13931
13920: POP
// bc_type := b_barracks ; 30 :
13921: LD_ADDR_OWVAR 42
13925: PUSH
13926: LD_INT 5
13928: ST_TO_ADDR
13929: GO 14027
13931: LD_INT 30
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 13950
13939: POP
// bc_type := b_solar_power ; 31 :
13940: LD_ADDR_OWVAR 42
13944: PUSH
13945: LD_INT 27
13947: ST_TO_ADDR
13948: GO 14027
13950: LD_INT 31
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13969
13958: POP
// bc_type := b_oil_power ; 32 :
13959: LD_ADDR_OWVAR 42
13963: PUSH
13964: LD_INT 26
13966: ST_TO_ADDR
13967: GO 14027
13969: LD_INT 32
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 13988
13977: POP
// bc_type := b_siberite_power ; 33 :
13978: LD_ADDR_OWVAR 42
13982: PUSH
13983: LD_INT 28
13985: ST_TO_ADDR
13986: GO 14027
13988: LD_INT 33
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14007
13996: POP
// bc_type := b_oil_mine ; 34 :
13997: LD_ADDR_OWVAR 42
14001: PUSH
14002: LD_INT 29
14004: ST_TO_ADDR
14005: GO 14027
14007: LD_INT 34
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14026
14015: POP
// bc_type := b_siberite_mine ; end ;
14016: LD_ADDR_OWVAR 42
14020: PUSH
14021: LD_INT 30
14023: ST_TO_ADDR
14024: GO 14027
14026: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: LD_VAR 0 5
14036: PPUSH
14037: LD_VAR 0 6
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 47
14051: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14052: LD_OWVAR 42
14056: PUSH
14057: LD_INT 32
14059: PUSH
14060: LD_INT 33
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: IN
14067: IFFALSE 14083
// PlaceWeaponTurret ( b , weapon ) ;
14069: LD_VAR 0 8
14073: PPUSH
14074: LD_VAR 0 4
14078: PPUSH
14079: CALL_OW 431
// end ;
14083: LD_VAR 0 7
14087: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14088: LD_INT 0
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: ST_TO_ADDR
// if not tmp then
14148: LD_VAR 0 4
14152: NOT
14153: IFFALSE 14157
// exit ;
14155: GO 14216
// for i in tmp do
14157: LD_ADDR_VAR 0 2
14161: PUSH
14162: LD_VAR 0 4
14166: PUSH
14167: FOR_IN
14168: IFFALSE 14214
// for j = 1 to 3 do
14170: LD_ADDR_VAR 0 3
14174: PUSH
14175: DOUBLE
14176: LD_INT 1
14178: DEC
14179: ST_TO_ADDR
14180: LD_INT 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14210
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 274
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 99999
14203: PPUSH
14204: CALL_OW 277
14208: GO 14183
14210: POP
14211: POP
14212: GO 14167
14214: POP
14215: POP
// end ;
14216: LD_VAR 0 1
14220: RET
// export function hHackSetLevel10 ; var i , j ; begin
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14226: LD_ADDR_VAR 0 2
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: PUSH
14246: FOR_IN
14247: IFFALSE 14299
// if IsSelected ( i ) then
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 306
14258: IFFALSE 14297
// begin for j := 1 to 4 do
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_INT 4
14272: PUSH
14273: FOR_TO
14274: IFFALSE 14295
// SetSkill ( i , j , 10 ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 10
14288: PPUSH
14289: CALL_OW 237
14293: GO 14273
14295: POP
14296: POP
// end ;
14297: GO 14246
14299: POP
14300: POP
// end ;
14301: LD_VAR 0 1
14305: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14389
// begin for j := 1 to 4 do
14350: LD_ADDR_VAR 0 3
14354: PUSH
14355: DOUBLE
14356: LD_INT 1
14358: DEC
14359: ST_TO_ADDR
14360: LD_INT 4
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14385
// SetSkill ( i , j , 10 ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 10
14378: PPUSH
14379: CALL_OW 237
14383: GO 14363
14385: POP
14386: POP
// end ;
14387: GO 14347
14389: POP
14390: POP
// end ;
14391: LD_VAR 0 1
14395: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14396: LD_INT 0
14398: PPUSH
// uc_side := your_side ;
14399: LD_ADDR_OWVAR 20
14403: PUSH
14404: LD_OWVAR 2
14408: ST_TO_ADDR
// uc_nation := nation ;
14409: LD_ADDR_OWVAR 21
14413: PUSH
14414: LD_VAR 0 1
14418: ST_TO_ADDR
// InitHc ;
14419: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14423: LD_INT 0
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: CALL_OW 428
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: IFFALSE 14482
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14460: CALL_OW 44
14464: PPUSH
14465: LD_VAR 0 4
14469: PPUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 48
// end ;
14482: LD_VAR 0 6
14486: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
// uc_side := your_side ;
14491: LD_ADDR_OWVAR 20
14495: PUSH
14496: LD_OWVAR 2
14500: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: IN
14528: IFFALSE 14540
// uc_nation := nation_american else
14530: LD_ADDR_OWVAR 21
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
14538: GO 14583
// if chassis in [ 11 , 12 , 13 , 14 ] then
14540: LD_VAR 0 1
14544: PUSH
14545: LD_INT 11
14547: PUSH
14548: LD_INT 12
14550: PUSH
14551: LD_INT 13
14553: PUSH
14554: LD_INT 14
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: IN
14563: IFFALSE 14575
// uc_nation := nation_arabian else
14565: LD_ADDR_OWVAR 21
14569: PUSH
14570: LD_INT 2
14572: ST_TO_ADDR
14573: GO 14583
// uc_nation := nation_russian ;
14575: LD_ADDR_OWVAR 21
14579: PUSH
14580: LD_INT 3
14582: ST_TO_ADDR
// vc_chassis := chassis ;
14583: LD_ADDR_OWVAR 37
14587: PUSH
14588: LD_VAR 0 1
14592: ST_TO_ADDR
// vc_engine := engine ;
14593: LD_ADDR_OWVAR 39
14597: PUSH
14598: LD_VAR 0 2
14602: ST_TO_ADDR
// vc_control := control ;
14603: LD_ADDR_OWVAR 38
14607: PUSH
14608: LD_VAR 0 3
14612: ST_TO_ADDR
// vc_weapon := weapon ;
14613: LD_ADDR_OWVAR 40
14617: PUSH
14618: LD_VAR 0 4
14622: ST_TO_ADDR
// un := CreateVehicle ;
14623: LD_ADDR_VAR 0 8
14627: PUSH
14628: CALL_OW 45
14632: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14633: LD_VAR 0 8
14637: PPUSH
14638: LD_INT 0
14640: PPUSH
14641: LD_INT 5
14643: PPUSH
14644: CALL_OW 12
14648: PPUSH
14649: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14653: LD_VAR 0 8
14657: PPUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 48
// end ;
14675: LD_VAR 0 7
14679: RET
// export hInvincible ; every 1 do
14680: GO 14682
14682: DISABLE
// hInvincible := [ ] ;
14683: LD_ADDR_EXP 71
14687: PUSH
14688: EMPTY
14689: ST_TO_ADDR
14690: END
// every 10 do var i ;
14691: GO 14693
14693: DISABLE
14694: LD_INT 0
14696: PPUSH
// begin enable ;
14697: ENABLE
// if not hInvincible then
14698: LD_EXP 71
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14751
// for i in hInvincible do
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_EXP 71
14716: PUSH
14717: FOR_IN
14718: IFFALSE 14749
// if GetLives ( i ) < 1000 then
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 256
14729: PUSH
14730: LD_INT 1000
14732: LESS
14733: IFFALSE 14747
// SetLives ( i , 1000 ) ;
14735: LD_VAR 0 1
14739: PPUSH
14740: LD_INT 1000
14742: PPUSH
14743: CALL_OW 234
14747: GO 14717
14749: POP
14750: POP
// end ;
14751: PPOPN 1
14753: END
// export function hHackInvincible ; var i ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14758: LD_ADDR_VAR 0 2
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14858
// if IsSelected ( i ) then
14799: LD_VAR 0 2
14803: PPUSH
14804: CALL_OW 306
14808: IFFALSE 14856
// begin if i in hInvincible then
14810: LD_VAR 0 2
14814: PUSH
14815: LD_EXP 71
14819: IN
14820: IFFALSE 14840
// hInvincible := hInvincible diff i else
14822: LD_ADDR_EXP 71
14826: PUSH
14827: LD_EXP 71
14831: PUSH
14832: LD_VAR 0 2
14836: DIFF
14837: ST_TO_ADDR
14838: GO 14856
// hInvincible := hInvincible union i ;
14840: LD_ADDR_EXP 71
14844: PUSH
14845: LD_EXP 71
14849: PUSH
14850: LD_VAR 0 2
14854: UNION
14855: ST_TO_ADDR
// end ;
14856: GO 14796
14858: POP
14859: POP
// end ;
14860: LD_VAR 0 1
14864: RET
// export function hHackInvisible ; var i , j ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14915
// if IsSelected ( i ) then
14893: LD_VAR 0 2
14897: PPUSH
14898: CALL_OW 306
14902: IFFALSE 14913
// ComForceInvisible ( i ) ;
14904: LD_VAR 0 2
14908: PPUSH
14909: CALL_OW 496
14913: GO 14890
14915: POP
14916: POP
// end ;
14917: LD_VAR 0 1
14921: RET
// export function hHackChangeYourSide ; begin
14922: LD_INT 0
14924: PPUSH
// if your_side = 8 then
14925: LD_OWVAR 2
14929: PUSH
14930: LD_INT 8
14932: EQUAL
14933: IFFALSE 14945
// your_side := 0 else
14935: LD_ADDR_OWVAR 2
14939: PUSH
14940: LD_INT 0
14942: ST_TO_ADDR
14943: GO 14959
// your_side := your_side + 1 ;
14945: LD_ADDR_OWVAR 2
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: LD_INT 1
14957: PLUS
14958: ST_TO_ADDR
// end ;
14959: LD_VAR 0 1
14963: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
// for i in all_units do
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_OWVAR 3
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15058
// if IsSelected ( i ) then
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL_OW 306
14991: IFFALSE 15056
// begin j := GetSide ( i ) ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_VAR 0 2
15002: PPUSH
15003: CALL_OW 255
15007: ST_TO_ADDR
// if j = 8 then
15008: LD_VAR 0 3
15012: PUSH
15013: LD_INT 8
15015: EQUAL
15016: IFFALSE 15028
// j := 0 else
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
15026: GO 15042
// j := j + 1 ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_INT 1
15040: PLUS
15041: ST_TO_ADDR
// SetSide ( i , j ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: CALL_OW 235
// end ;
15056: GO 14979
15058: POP
15059: POP
// end ;
15060: LD_VAR 0 1
15064: RET
// export function hHackFog ; begin
15065: LD_INT 0
15067: PPUSH
// FogOff ( true ) ;
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 344
// end ;
15075: LD_VAR 0 1
15079: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15080: LD_INT 0
15082: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_VAR 0 2
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 483
// CenterOnXY ( x , y ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: CALL_OW 84
// end ; end_of_file
15122: LD_VAR 0 4
15126: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15127: LD_VAR 0 1
15131: PUSH
15132: LD_INT 200
15134: DOUBLE
15135: GREATEREQUAL
15136: IFFALSE 15144
15138: LD_INT 299
15140: DOUBLE
15141: LESSEQUAL
15142: IFTRUE 15146
15144: GO 15178
15146: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_VAR 0 4
15166: PPUSH
15167: LD_VAR 0 5
15171: PPUSH
15172: CALL 15372 0 5
15176: GO 15255
15178: LD_INT 300
15180: DOUBLE
15181: GREATEREQUAL
15182: IFFALSE 15190
15184: LD_INT 399
15186: DOUBLE
15187: LESSEQUAL
15188: IFTRUE 15192
15190: GO 15254
15192: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15193: LD_VAR 0 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: LD_VAR 0 5
15217: PPUSH
15218: LD_VAR 0 6
15222: PPUSH
15223: LD_VAR 0 7
15227: PPUSH
15228: LD_VAR 0 8
15232: PPUSH
15233: LD_VAR 0 9
15237: PPUSH
15238: LD_VAR 0 10
15242: PPUSH
15243: LD_VAR 0 11
15247: PPUSH
15248: CALL 13147 0 11
15252: GO 15255
15254: POP
// end ; end_of_file
15255: PPOPN 11
15257: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 264
15273: PUSH
15274: LD_EXP 5
15278: EQUAL
15279: IFFALSE 15351
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15281: LD_INT 68
15283: PPUSH
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PPUSH
15294: CALL_OW 321
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15314
// eff := 70 else
15304: LD_ADDR_VAR 0 4
15308: PUSH
15309: LD_INT 70
15311: ST_TO_ADDR
15312: GO 15322
// eff := 30 ;
15314: LD_ADDR_VAR 0 4
15318: PUSH
15319: LD_INT 30
15321: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 250
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 251
15341: PPUSH
15342: LD_VAR 0 4
15346: PPUSH
15347: CALL_OW 495
// end ; end ;
15351: LD_VAR 0 2
15355: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15356: LD_INT 0
15358: PPUSH
// end ;
15359: LD_VAR 0 4
15363: RET
// export function SOS_Command ( cmd ) ; begin
15364: LD_INT 0
15366: PPUSH
// end ;
15367: LD_VAR 0 2
15371: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15372: LD_INT 0
15374: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 250
15382: EQUAL
15383: PUSH
15384: LD_VAR 0 2
15388: PPUSH
15389: CALL_OW 264
15393: PUSH
15394: LD_EXP 8
15398: EQUAL
15399: AND
15400: IFFALSE 15421
// MinerPlaceMine ( unit , x , y ) ;
15402: LD_VAR 0 2
15406: PPUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: LD_VAR 0 5
15416: PPUSH
15417: CALL 17762 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_INT 251
15428: EQUAL
15429: PUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 264
15439: PUSH
15440: LD_EXP 8
15444: EQUAL
15445: AND
15446: IFFALSE 15467
// MinerDetonateMine ( unit , x , y ) ;
15448: LD_VAR 0 2
15452: PPUSH
15453: LD_VAR 0 4
15457: PPUSH
15458: LD_VAR 0 5
15462: PPUSH
15463: CALL 18039 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 252
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_EXP 8
15490: EQUAL
15491: AND
15492: IFFALSE 15513
// MinerCreateMinefield ( unit , x , y ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 4
15503: PPUSH
15504: LD_VAR 0 5
15508: PPUSH
15509: CALL 18456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 253
15520: EQUAL
15521: PUSH
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 257
15531: PUSH
15532: LD_INT 5
15534: EQUAL
15535: AND
15536: IFFALSE 15557
// ComBinocular ( unit , x , y ) ;
15538: LD_VAR 0 2
15542: PPUSH
15543: LD_VAR 0 4
15547: PPUSH
15548: LD_VAR 0 5
15552: PPUSH
15553: CALL 18827 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15557: LD_VAR 0 1
15561: PUSH
15562: LD_INT 254
15564: EQUAL
15565: PUSH
15566: LD_VAR 0 2
15570: PPUSH
15571: CALL_OW 264
15575: PUSH
15576: LD_EXP 3
15580: EQUAL
15581: AND
15582: PUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: CALL_OW 263
15592: PUSH
15593: LD_INT 3
15595: EQUAL
15596: AND
15597: IFFALSE 15613
// HackDestroyVehicle ( unit , selectedUnit ) ;
15599: LD_VAR 0 2
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: CALL 17122 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 255
15620: EQUAL
15621: PUSH
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 264
15631: PUSH
15632: LD_INT 14
15634: PUSH
15635: LD_INT 53
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: IN
15642: AND
15643: PUSH
15644: LD_VAR 0 4
15648: PPUSH
15649: LD_VAR 0 5
15653: PPUSH
15654: CALL_OW 488
15658: AND
15659: IFFALSE 15683
// CutTreeXYR ( unit , x , y , 12 ) ;
15661: LD_VAR 0 2
15665: PPUSH
15666: LD_VAR 0 4
15670: PPUSH
15671: LD_VAR 0 5
15675: PPUSH
15676: LD_INT 12
15678: PPUSH
15679: CALL 15688 0 4
// end ;
15683: LD_VAR 0 6
15687: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15688: LD_INT 0
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15699: LD_VAR 0 1
15703: NOT
15704: PUSH
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: CALL_OW 488
15719: NOT
15720: OR
15721: PUSH
15722: LD_VAR 0 4
15726: NOT
15727: OR
15728: IFFALSE 15732
// exit ;
15730: GO 16072
// list := [ ] ;
15732: LD_ADDR_VAR 0 13
15736: PUSH
15737: EMPTY
15738: ST_TO_ADDR
// if x - r < 0 then
15739: LD_VAR 0 2
15743: PUSH
15744: LD_VAR 0 4
15748: MINUS
15749: PUSH
15750: LD_INT 0
15752: LESS
15753: IFFALSE 15765
// min_x := 0 else
15755: LD_ADDR_VAR 0 7
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
15763: GO 15781
// min_x := x - r ;
15765: LD_ADDR_VAR 0 7
15769: PUSH
15770: LD_VAR 0 2
15774: PUSH
15775: LD_VAR 0 4
15779: MINUS
15780: ST_TO_ADDR
// if y - r < 0 then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_VAR 0 4
15790: MINUS
15791: PUSH
15792: LD_INT 0
15794: LESS
15795: IFFALSE 15807
// min_y := 0 else
15797: LD_ADDR_VAR 0 8
15801: PUSH
15802: LD_INT 0
15804: ST_TO_ADDR
15805: GO 15823
// min_y := y - r ;
15807: LD_ADDR_VAR 0 8
15811: PUSH
15812: LD_VAR 0 3
15816: PUSH
15817: LD_VAR 0 4
15821: MINUS
15822: ST_TO_ADDR
// max_x := x + r ;
15823: LD_ADDR_VAR 0 9
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: LD_VAR 0 4
15837: PLUS
15838: ST_TO_ADDR
// max_y := y + r ;
15839: LD_ADDR_VAR 0 10
15843: PUSH
15844: LD_VAR 0 3
15848: PUSH
15849: LD_VAR 0 4
15853: PLUS
15854: ST_TO_ADDR
// for _x = min_x to max_x do
15855: LD_ADDR_VAR 0 11
15859: PUSH
15860: DOUBLE
15861: LD_VAR 0 7
15865: DEC
15866: ST_TO_ADDR
15867: LD_VAR 0 9
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15990
// for _y = min_y to max_y do
15875: LD_ADDR_VAR 0 12
15879: PUSH
15880: DOUBLE
15881: LD_VAR 0 8
15885: DEC
15886: ST_TO_ADDR
15887: LD_VAR 0 10
15891: PUSH
15892: FOR_TO
15893: IFFALSE 15986
// begin if not ValidHex ( _x , _y ) then
15895: LD_VAR 0 11
15899: PPUSH
15900: LD_VAR 0 12
15904: PPUSH
15905: CALL_OW 488
15909: NOT
15910: IFFALSE 15914
// continue ;
15912: GO 15892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15914: LD_VAR 0 11
15918: PPUSH
15919: LD_VAR 0 12
15923: PPUSH
15924: CALL_OW 351
15928: PUSH
15929: LD_VAR 0 11
15933: PPUSH
15934: LD_VAR 0 12
15938: PPUSH
15939: CALL_OW 554
15943: AND
15944: IFFALSE 15984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15946: LD_ADDR_VAR 0 13
15950: PUSH
15951: LD_VAR 0 13
15955: PPUSH
15956: LD_VAR 0 13
15960: PUSH
15961: LD_INT 1
15963: PLUS
15964: PPUSH
15965: LD_VAR 0 11
15969: PUSH
15970: LD_VAR 0 12
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 2
15983: ST_TO_ADDR
// end ;
15984: GO 15892
15986: POP
15987: POP
15988: GO 15872
15990: POP
15991: POP
// if not list then
15992: LD_VAR 0 13
15996: NOT
15997: IFFALSE 16001
// exit ;
15999: GO 16072
// for i in list do
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_VAR 0 13
16010: PUSH
16011: FOR_IN
16012: IFFALSE 16070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_STRING M
16021: PUSH
16022: LD_VAR 0 6
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: PUSH
16031: LD_VAR 0 6
16035: PUSH
16036: LD_INT 2
16038: ARRAY
16039: PUSH
16040: LD_INT 0
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: PPUSH
16064: CALL_OW 447
16068: GO 16011
16070: POP
16071: POP
// end ;
16072: LD_VAR 0 5
16076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16077: LD_EXP 72
16081: NOT
16082: IFFALSE 16132
16084: GO 16086
16086: DISABLE
// begin initHack := true ;
16087: LD_ADDR_EXP 72
16091: PUSH
16092: LD_INT 1
16094: ST_TO_ADDR
// hackTanks := [ ] ;
16095: LD_ADDR_EXP 73
16099: PUSH
16100: EMPTY
16101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16102: LD_ADDR_EXP 74
16106: PUSH
16107: EMPTY
16108: ST_TO_ADDR
// hackLimit := 3 ;
16109: LD_ADDR_EXP 75
16113: PUSH
16114: LD_INT 3
16116: ST_TO_ADDR
// hackDist := 12 ;
16117: LD_ADDR_EXP 76
16121: PUSH
16122: LD_INT 12
16124: ST_TO_ADDR
// hackCounter := [ ] ;
16125: LD_ADDR_EXP 77
16129: PUSH
16130: EMPTY
16131: ST_TO_ADDR
// end ;
16132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16133: LD_EXP 72
16137: PUSH
16138: LD_INT 34
16140: PUSH
16141: LD_EXP 3
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 69
16154: AND
16155: IFFALSE 16410
16157: GO 16159
16159: DISABLE
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
// begin enable ;
16164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: LD_INT 34
16172: PUSH
16173: LD_EXP 3
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: PUSH
16187: FOR_IN
16188: IFFALSE 16408
// begin if not i in hackTanks then
16190: LD_VAR 0 1
16194: PUSH
16195: LD_EXP 73
16199: IN
16200: NOT
16201: IFFALSE 16284
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16203: LD_ADDR_EXP 73
16207: PUSH
16208: LD_EXP 73
16212: PPUSH
16213: LD_EXP 73
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 1
16231: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16232: LD_ADDR_EXP 74
16236: PUSH
16237: LD_EXP 74
16241: PPUSH
16242: LD_EXP 74
16246: PUSH
16247: LD_INT 1
16249: PLUS
16250: PPUSH
16251: EMPTY
16252: PPUSH
16253: CALL_OW 1
16257: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16258: LD_ADDR_EXP 77
16262: PUSH
16263: LD_EXP 77
16267: PPUSH
16268: LD_EXP 77
16272: PUSH
16273: LD_INT 1
16275: PLUS
16276: PPUSH
16277: EMPTY
16278: PPUSH
16279: CALL_OW 1
16283: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL_OW 302
16293: NOT
16294: IFFALSE 16307
// begin HackUnlinkAll ( i ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL 16413 0 1
// continue ;
16305: GO 16187
// end ; HackCheckCapturedStatus ( i ) ;
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL 16856 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 81
16323: PUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 255
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 33
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 91
16350: PUSH
16351: LD_VAR 0 1
16355: PUSH
16356: LD_EXP 76
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 50
16368: PUSH
16369: EMPTY
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 69
16382: ST_TO_ADDR
// if not tmp then
16383: LD_VAR 0 2
16387: NOT
16388: IFFALSE 16392
// continue ;
16390: GO 16187
// HackLink ( i , tmp ) ;
16392: LD_VAR 0 1
16396: PPUSH
16397: LD_VAR 0 2
16401: PPUSH
16402: CALL 16549 0 2
// end ;
16406: GO 16187
16408: POP
16409: POP
// end ;
16410: PPOPN 2
16412: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// if not hack in hackTanks then
16418: LD_VAR 0 1
16422: PUSH
16423: LD_EXP 73
16427: IN
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 16544
// index := GetElementIndex ( hackTanks , hack ) ;
16433: LD_ADDR_VAR 0 4
16437: PUSH
16438: LD_EXP 73
16442: PPUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL 23967 0 2
16452: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16453: LD_EXP 74
16457: PUSH
16458: LD_VAR 0 4
16462: ARRAY
16463: IFFALSE 16544
// begin for i in hackTanksCaptured [ index ] do
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_EXP 74
16474: PUSH
16475: LD_VAR 0 4
16479: ARRAY
16480: PUSH
16481: FOR_IN
16482: IFFALSE 16508
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16484: LD_VAR 0 3
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 3
16497: PUSH
16498: LD_INT 2
16500: ARRAY
16501: PPUSH
16502: CALL_OW 235
16506: GO 16481
16508: POP
16509: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16510: LD_ADDR_EXP 74
16514: PUSH
16515: LD_EXP 74
16519: PPUSH
16520: LD_VAR 0 4
16524: PPUSH
16525: EMPTY
16526: PPUSH
16527: CALL_OW 1
16531: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 0
16539: PPUSH
16540: CALL_OW 505
// end ; end ;
16544: LD_VAR 0 2
16548: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
16553: PPUSH
// if not hack in hackTanks or not vehicles then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_EXP 73
16563: IN
16564: NOT
16565: PUSH
16566: LD_VAR 0 2
16570: NOT
16571: OR
16572: IFFALSE 16576
// exit ;
16574: GO 16851
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 1
16596: PPUSH
16597: CALL 24617 0 4
16601: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16602: LD_ADDR_VAR 0 5
16606: PUSH
16607: LD_EXP 73
16611: PPUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL 23967 0 2
16621: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16622: LD_EXP 74
16626: PUSH
16627: LD_VAR 0 5
16631: ARRAY
16632: PUSH
16633: LD_EXP 75
16637: LESS
16638: IFFALSE 16827
// begin for i := 1 to vehicles do
16640: LD_ADDR_VAR 0 4
16644: PUSH
16645: DOUBLE
16646: LD_INT 1
16648: DEC
16649: ST_TO_ADDR
16650: LD_VAR 0 2
16654: PUSH
16655: FOR_TO
16656: IFFALSE 16825
// begin if hackTanksCaptured [ index ] = hackLimit then
16658: LD_EXP 74
16662: PUSH
16663: LD_VAR 0 5
16667: ARRAY
16668: PUSH
16669: LD_EXP 75
16673: EQUAL
16674: IFFALSE 16678
// break ;
16676: GO 16825
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16678: LD_ADDR_EXP 77
16682: PUSH
16683: LD_EXP 77
16687: PPUSH
16688: LD_VAR 0 5
16692: PPUSH
16693: LD_EXP 77
16697: PUSH
16698: LD_VAR 0 5
16702: ARRAY
16703: PUSH
16704: LD_INT 1
16706: PLUS
16707: PPUSH
16708: CALL_OW 1
16712: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16713: LD_ADDR_EXP 74
16717: PUSH
16718: LD_EXP 74
16722: PPUSH
16723: LD_VAR 0 5
16727: PUSH
16728: LD_EXP 74
16732: PUSH
16733: LD_VAR 0 5
16737: ARRAY
16738: PUSH
16739: LD_INT 1
16741: PLUS
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PPUSH
16747: LD_VAR 0 2
16751: PUSH
16752: LD_VAR 0 4
16756: ARRAY
16757: PUSH
16758: LD_VAR 0 2
16762: PUSH
16763: LD_VAR 0 4
16767: ARRAY
16768: PPUSH
16769: CALL_OW 255
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL 24182 0 3
16782: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: ARRAY
16793: PPUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 255
16803: PPUSH
16804: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16808: LD_VAR 0 2
16812: PUSH
16813: LD_VAR 0 4
16817: ARRAY
16818: PPUSH
16819: CALL_OW 141
// end ;
16823: GO 16655
16825: POP
16826: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_EXP 74
16836: PUSH
16837: LD_VAR 0 5
16841: ARRAY
16842: PUSH
16843: LD_INT 0
16845: PLUS
16846: PPUSH
16847: CALL_OW 505
// end ;
16851: LD_VAR 0 3
16855: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
// if not hack in hackTanks then
16862: LD_VAR 0 1
16866: PUSH
16867: LD_EXP 73
16871: IN
16872: NOT
16873: IFFALSE 16877
// exit ;
16875: GO 17117
// index := GetElementIndex ( hackTanks , hack ) ;
16877: LD_ADDR_VAR 0 4
16881: PUSH
16882: LD_EXP 73
16886: PPUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL 23967 0 2
16896: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: DOUBLE
16903: LD_EXP 74
16907: PUSH
16908: LD_VAR 0 4
16912: ARRAY
16913: INC
16914: ST_TO_ADDR
16915: LD_INT 1
16917: PUSH
16918: FOR_DOWNTO
16919: IFFALSE 17091
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16921: LD_ADDR_VAR 0 5
16925: PUSH
16926: LD_EXP 74
16930: PUSH
16931: LD_VAR 0 4
16935: ARRAY
16936: PUSH
16937: LD_VAR 0 3
16941: ARRAY
16942: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16943: LD_VAR 0 5
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PPUSH
16952: CALL_OW 302
16956: NOT
16957: PUSH
16958: LD_VAR 0 5
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: CALL_OW 255
16971: PUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 255
16981: NONEQUAL
16982: OR
16983: IFFALSE 17089
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16985: LD_VAR 0 5
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: CALL_OW 305
16998: PUSH
16999: LD_VAR 0 5
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 255
17012: PUSH
17013: LD_VAR 0 1
17017: PPUSH
17018: CALL_OW 255
17022: EQUAL
17023: AND
17024: IFFALSE 17048
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17026: LD_VAR 0 5
17030: PUSH
17031: LD_INT 1
17033: ARRAY
17034: PPUSH
17035: LD_VAR 0 5
17039: PUSH
17040: LD_INT 2
17042: ARRAY
17043: PPUSH
17044: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17048: LD_ADDR_EXP 74
17052: PUSH
17053: LD_EXP 74
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: LD_EXP 74
17067: PUSH
17068: LD_VAR 0 4
17072: ARRAY
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 3
17083: PPUSH
17084: CALL_OW 1
17088: ST_TO_ADDR
// end ; end ;
17089: GO 16918
17091: POP
17092: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_EXP 74
17102: PUSH
17103: LD_VAR 0 4
17107: ARRAY
17108: PUSH
17109: LD_INT 0
17111: PLUS
17112: PPUSH
17113: CALL_OW 505
// end ;
17117: LD_VAR 0 2
17121: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17122: LD_INT 0
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
// if not hack in hackTanks then
17128: LD_VAR 0 1
17132: PUSH
17133: LD_EXP 73
17137: IN
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17228
// index := GetElementIndex ( hackTanks , hack ) ;
17143: LD_ADDR_VAR 0 5
17147: PUSH
17148: LD_EXP 73
17152: PPUSH
17153: LD_VAR 0 1
17157: PPUSH
17158: CALL 23967 0 2
17162: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17163: LD_ADDR_VAR 0 4
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_EXP 74
17177: PUSH
17178: LD_VAR 0 5
17182: ARRAY
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17226
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17187: LD_EXP 74
17191: PUSH
17192: LD_VAR 0 5
17196: ARRAY
17197: PUSH
17198: LD_VAR 0 4
17202: ARRAY
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PUSH
17208: LD_VAR 0 2
17212: EQUAL
17213: IFFALSE 17224
// KillUnit ( vehicle ) ;
17215: LD_VAR 0 2
17219: PPUSH
17220: CALL_OW 66
17224: GO 17184
17226: POP
17227: POP
// end ;
17228: LD_VAR 0 3
17232: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17233: LD_EXP 78
17237: NOT
17238: IFFALSE 17273
17240: GO 17242
17242: DISABLE
// begin initMiner := true ;
17243: LD_ADDR_EXP 78
17247: PUSH
17248: LD_INT 1
17250: ST_TO_ADDR
// minersList := [ ] ;
17251: LD_ADDR_EXP 79
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// minerMinesList := [ ] ;
17258: LD_ADDR_EXP 80
17262: PUSH
17263: EMPTY
17264: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17265: LD_ADDR_EXP 81
17269: PUSH
17270: LD_INT 5
17272: ST_TO_ADDR
// end ;
17273: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17274: LD_EXP 78
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_EXP 8
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: AND
17296: IFFALSE 17759
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
// begin enable ;
17307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_EXP 8
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 69
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17403
// begin if not i in minersList then
17333: LD_VAR 0 1
17337: PUSH
17338: LD_EXP 79
17342: IN
17343: NOT
17344: IFFALSE 17401
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17346: LD_ADDR_EXP 79
17350: PUSH
17351: LD_EXP 79
17355: PPUSH
17356: LD_EXP 79
17360: PUSH
17361: LD_INT 1
17363: PLUS
17364: PPUSH
17365: LD_VAR 0 1
17369: PPUSH
17370: CALL_OW 1
17374: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17375: LD_ADDR_EXP 80
17379: PUSH
17380: LD_EXP 80
17384: PPUSH
17385: LD_EXP 80
17389: PUSH
17390: LD_INT 1
17392: PLUS
17393: PPUSH
17394: EMPTY
17395: PPUSH
17396: CALL_OW 1
17400: ST_TO_ADDR
// end end ;
17401: GO 17330
17403: POP
17404: POP
// for i := minerMinesList downto 1 do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: DOUBLE
17411: LD_EXP 80
17415: INC
17416: ST_TO_ADDR
17417: LD_INT 1
17419: PUSH
17420: FOR_DOWNTO
17421: IFFALSE 17757
// begin if IsLive ( minersList [ i ] ) then
17423: LD_EXP 79
17427: PUSH
17428: LD_VAR 0 1
17432: ARRAY
17433: PPUSH
17434: CALL_OW 300
17438: IFFALSE 17466
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17440: LD_EXP 79
17444: PUSH
17445: LD_VAR 0 1
17449: ARRAY
17450: PPUSH
17451: LD_EXP 80
17455: PUSH
17456: LD_VAR 0 1
17460: ARRAY
17461: PPUSH
17462: CALL_OW 505
// if not minerMinesList [ i ] then
17466: LD_EXP 80
17470: PUSH
17471: LD_VAR 0 1
17475: ARRAY
17476: NOT
17477: IFFALSE 17481
// continue ;
17479: GO 17420
// for j := minerMinesList [ i ] downto 1 do
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: DOUBLE
17487: LD_EXP 80
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: INC
17498: ST_TO_ADDR
17499: LD_INT 1
17501: PUSH
17502: FOR_DOWNTO
17503: IFFALSE 17753
// begin side := GetSide ( minersList [ i ] ) ;
17505: LD_ADDR_VAR 0 3
17509: PUSH
17510: LD_EXP 79
17514: PUSH
17515: LD_VAR 0 1
17519: ARRAY
17520: PPUSH
17521: CALL_OW 255
17525: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17526: LD_ADDR_VAR 0 4
17530: PUSH
17531: LD_EXP 80
17535: PUSH
17536: LD_VAR 0 1
17540: ARRAY
17541: PUSH
17542: LD_VAR 0 2
17546: ARRAY
17547: PUSH
17548: LD_INT 1
17550: ARRAY
17551: PPUSH
17552: LD_EXP 80
17556: PUSH
17557: LD_VAR 0 1
17561: ARRAY
17562: PUSH
17563: LD_VAR 0 2
17567: ARRAY
17568: PUSH
17569: LD_INT 2
17571: ARRAY
17572: PPUSH
17573: CALL_OW 428
17577: ST_TO_ADDR
// if not tmp then
17578: LD_VAR 0 4
17582: NOT
17583: IFFALSE 17587
// continue ;
17585: GO 17502
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17587: LD_VAR 0 4
17591: PUSH
17592: LD_INT 81
17594: PUSH
17595: LD_VAR 0 3
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: IN
17609: PUSH
17610: LD_EXP 80
17614: PUSH
17615: LD_VAR 0 1
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 2
17625: ARRAY
17626: PUSH
17627: LD_INT 1
17629: ARRAY
17630: PPUSH
17631: LD_EXP 80
17635: PUSH
17636: LD_VAR 0 1
17640: ARRAY
17641: PUSH
17642: LD_VAR 0 2
17646: ARRAY
17647: PUSH
17648: LD_INT 2
17650: ARRAY
17651: PPUSH
17652: CALL_OW 458
17656: AND
17657: IFFALSE 17751
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17659: LD_EXP 80
17663: PUSH
17664: LD_VAR 0 1
17668: ARRAY
17669: PUSH
17670: LD_VAR 0 2
17674: ARRAY
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: PPUSH
17680: LD_EXP 80
17684: PUSH
17685: LD_VAR 0 1
17689: ARRAY
17690: PUSH
17691: LD_VAR 0 2
17695: ARRAY
17696: PUSH
17697: LD_INT 2
17699: ARRAY
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17710: LD_ADDR_EXP 80
17714: PUSH
17715: LD_EXP 80
17719: PPUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_EXP 80
17729: PUSH
17730: LD_VAR 0 1
17734: ARRAY
17735: PPUSH
17736: LD_VAR 0 2
17740: PPUSH
17741: CALL_OW 3
17745: PPUSH
17746: CALL_OW 1
17750: ST_TO_ADDR
// end ; end ;
17751: GO 17502
17753: POP
17754: POP
// end ;
17755: GO 17420
17757: POP
17758: POP
// end ;
17759: PPOPN 4
17761: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17762: LD_INT 0
17764: PPUSH
17765: PPUSH
// result := false ;
17766: LD_ADDR_VAR 0 4
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 264
17783: PUSH
17784: LD_EXP 8
17788: EQUAL
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 18034
// index := GetElementIndex ( minersList , unit ) ;
17794: LD_ADDR_VAR 0 5
17798: PUSH
17799: LD_EXP 79
17803: PPUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL 23967 0 2
17813: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17814: LD_EXP 80
17818: PUSH
17819: LD_VAR 0 5
17823: ARRAY
17824: PUSH
17825: LD_EXP 81
17829: GREATEREQUAL
17830: IFFALSE 17834
// exit ;
17832: GO 18034
// ComMoveXY ( unit , x , y ) ;
17834: LD_VAR 0 1
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17853: LD_INT 35
17855: PPUSH
17856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17860: LD_VAR 0 1
17864: PPUSH
17865: LD_VAR 0 2
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: CALL 54031 0 3
17879: NOT
17880: PUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 314
17890: AND
17891: IFFALSE 17895
// exit ;
17893: GO 18034
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17895: LD_VAR 0 2
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: CALL_OW 428
17909: PUSH
17910: LD_VAR 0 1
17914: EQUAL
17915: PUSH
17916: LD_VAR 0 1
17920: PPUSH
17921: CALL_OW 314
17925: NOT
17926: AND
17927: IFFALSE 17853
// PlaySoundXY ( x , y , PlantMine ) ;
17929: LD_VAR 0 2
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_STRING PlantMine
17941: PPUSH
17942: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17946: LD_VAR 0 2
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 255
17965: PPUSH
17966: LD_INT 0
17968: PPUSH
17969: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17973: LD_ADDR_EXP 80
17977: PUSH
17978: LD_EXP 80
17982: PPUSH
17983: LD_VAR 0 5
17987: PUSH
17988: LD_EXP 80
17992: PUSH
17993: LD_VAR 0 5
17997: ARRAY
17998: PUSH
17999: LD_INT 1
18001: PLUS
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_VAR 0 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL 24182 0 3
18025: ST_TO_ADDR
// result := true ;
18026: LD_ADDR_VAR 0 4
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// end ;
18034: LD_VAR 0 4
18038: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
18043: PPUSH
// if not unit in minersList then
18044: LD_VAR 0 1
18048: PUSH
18049: LD_EXP 79
18053: IN
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18451
// index := GetElementIndex ( minersList , unit ) ;
18059: LD_ADDR_VAR 0 6
18063: PUSH
18064: LD_EXP 79
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL 23967 0 2
18078: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18079: LD_ADDR_VAR 0 5
18083: PUSH
18084: DOUBLE
18085: LD_EXP 80
18089: PUSH
18090: LD_VAR 0 6
18094: ARRAY
18095: INC
18096: ST_TO_ADDR
18097: LD_INT 1
18099: PUSH
18100: FOR_DOWNTO
18101: IFFALSE 18262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18103: LD_EXP 80
18107: PUSH
18108: LD_VAR 0 6
18112: ARRAY
18113: PUSH
18114: LD_VAR 0 5
18118: ARRAY
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PUSH
18124: LD_VAR 0 2
18128: EQUAL
18129: PUSH
18130: LD_EXP 80
18134: PUSH
18135: LD_VAR 0 6
18139: ARRAY
18140: PUSH
18141: LD_VAR 0 5
18145: ARRAY
18146: PUSH
18147: LD_INT 2
18149: ARRAY
18150: PUSH
18151: LD_VAR 0 3
18155: EQUAL
18156: AND
18157: IFFALSE 18260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18159: LD_EXP 80
18163: PUSH
18164: LD_VAR 0 6
18168: ARRAY
18169: PUSH
18170: LD_VAR 0 5
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PPUSH
18180: LD_EXP 80
18184: PUSH
18185: LD_VAR 0 6
18189: ARRAY
18190: PUSH
18191: LD_VAR 0 5
18195: ARRAY
18196: PUSH
18197: LD_INT 2
18199: ARRAY
18200: PPUSH
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 255
18210: PPUSH
18211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18215: LD_ADDR_EXP 80
18219: PUSH
18220: LD_EXP 80
18224: PPUSH
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_EXP 80
18234: PUSH
18235: LD_VAR 0 6
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 5
18245: PPUSH
18246: CALL_OW 3
18250: PPUSH
18251: CALL_OW 1
18255: ST_TO_ADDR
// exit ;
18256: POP
18257: POP
18258: GO 18451
// end ; end ;
18260: GO 18100
18262: POP
18263: POP
// for i := minerMinesList [ index ] downto 1 do
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: DOUBLE
18270: LD_EXP 80
18274: PUSH
18275: LD_VAR 0 6
18279: ARRAY
18280: INC
18281: ST_TO_ADDR
18282: LD_INT 1
18284: PUSH
18285: FOR_DOWNTO
18286: IFFALSE 18449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18288: LD_EXP 80
18292: PUSH
18293: LD_VAR 0 6
18297: ARRAY
18298: PUSH
18299: LD_VAR 0 5
18303: ARRAY
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PPUSH
18309: LD_EXP 80
18313: PUSH
18314: LD_VAR 0 6
18318: ARRAY
18319: PUSH
18320: LD_VAR 0 5
18324: ARRAY
18325: PUSH
18326: LD_INT 2
18328: ARRAY
18329: PPUSH
18330: LD_VAR 0 2
18334: PPUSH
18335: LD_VAR 0 3
18339: PPUSH
18340: CALL_OW 298
18344: PUSH
18345: LD_INT 6
18347: LESS
18348: IFFALSE 18447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18350: LD_EXP 80
18354: PUSH
18355: LD_VAR 0 6
18359: ARRAY
18360: PUSH
18361: LD_VAR 0 5
18365: ARRAY
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: LD_EXP 80
18375: PUSH
18376: LD_VAR 0 6
18380: ARRAY
18381: PUSH
18382: LD_VAR 0 5
18386: ARRAY
18387: PUSH
18388: LD_INT 2
18390: ARRAY
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 255
18401: PPUSH
18402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18406: LD_ADDR_EXP 80
18410: PUSH
18411: LD_EXP 80
18415: PPUSH
18416: LD_VAR 0 6
18420: PPUSH
18421: LD_EXP 80
18425: PUSH
18426: LD_VAR 0 6
18430: ARRAY
18431: PPUSH
18432: LD_VAR 0 5
18436: PPUSH
18437: CALL_OW 3
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// end ; end ;
18447: GO 18285
18449: POP
18450: POP
// end ;
18451: LD_VAR 0 4
18455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18467: LD_VAR 0 1
18471: PPUSH
18472: CALL_OW 264
18476: PUSH
18477: LD_EXP 8
18481: EQUAL
18482: NOT
18483: PUSH
18484: LD_VAR 0 1
18488: PUSH
18489: LD_EXP 79
18493: IN
18494: NOT
18495: OR
18496: IFFALSE 18500
// exit ;
18498: GO 18822
// index := GetElementIndex ( minersList , unit ) ;
18500: LD_ADDR_VAR 0 6
18504: PUSH
18505: LD_EXP 79
18509: PPUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: CALL 23967 0 2
18519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18520: LD_ADDR_VAR 0 8
18524: PUSH
18525: LD_EXP 81
18529: PUSH
18530: LD_EXP 80
18534: PUSH
18535: LD_VAR 0 6
18539: ARRAY
18540: MINUS
18541: ST_TO_ADDR
// if not minesFreeAmount then
18542: LD_VAR 0 8
18546: NOT
18547: IFFALSE 18551
// exit ;
18549: GO 18822
// tmp := [ ] ;
18551: LD_ADDR_VAR 0 7
18555: PUSH
18556: EMPTY
18557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18558: LD_ADDR_VAR 0 5
18562: PUSH
18563: DOUBLE
18564: LD_INT 1
18566: DEC
18567: ST_TO_ADDR
18568: LD_VAR 0 8
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18769
// begin _d := rand ( 0 , 5 ) ;
18576: LD_ADDR_VAR 0 11
18580: PUSH
18581: LD_INT 0
18583: PPUSH
18584: LD_INT 5
18586: PPUSH
18587: CALL_OW 12
18591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18592: LD_ADDR_VAR 0 12
18596: PUSH
18597: LD_INT 2
18599: PPUSH
18600: LD_INT 6
18602: PPUSH
18603: CALL_OW 12
18607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18608: LD_ADDR_VAR 0 9
18612: PUSH
18613: LD_VAR 0 2
18617: PPUSH
18618: LD_VAR 0 11
18622: PPUSH
18623: LD_VAR 0 12
18627: PPUSH
18628: CALL_OW 272
18632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18633: LD_ADDR_VAR 0 10
18637: PUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: LD_VAR 0 11
18647: PPUSH
18648: LD_VAR 0 12
18652: PPUSH
18653: CALL_OW 273
18657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18658: LD_VAR 0 9
18662: PPUSH
18663: LD_VAR 0 10
18667: PPUSH
18668: CALL_OW 488
18672: PUSH
18673: LD_VAR 0 9
18677: PUSH
18678: LD_VAR 0 10
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_VAR 0 7
18691: IN
18692: NOT
18693: AND
18694: PUSH
18695: LD_VAR 0 9
18699: PPUSH
18700: LD_VAR 0 10
18704: PPUSH
18705: CALL_OW 458
18709: NOT
18710: AND
18711: IFFALSE 18753
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18713: LD_ADDR_VAR 0 7
18717: PUSH
18718: LD_VAR 0 7
18722: PPUSH
18723: LD_VAR 0 7
18727: PUSH
18728: LD_INT 1
18730: PLUS
18731: PPUSH
18732: LD_VAR 0 9
18736: PUSH
18737: LD_VAR 0 10
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
18751: GO 18767
// i := i - 1 ;
18753: LD_ADDR_VAR 0 5
18757: PUSH
18758: LD_VAR 0 5
18762: PUSH
18763: LD_INT 1
18765: MINUS
18766: ST_TO_ADDR
// end ;
18767: GO 18573
18769: POP
18770: POP
// for i in tmp do
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_VAR 0 7
18780: PUSH
18781: FOR_IN
18782: IFFALSE 18820
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18784: LD_VAR 0 1
18788: PPUSH
18789: LD_VAR 0 5
18793: PUSH
18794: LD_INT 1
18796: ARRAY
18797: PPUSH
18798: LD_VAR 0 5
18802: PUSH
18803: LD_INT 2
18805: ARRAY
18806: PPUSH
18807: CALL 17762 0 3
18811: NOT
18812: IFFALSE 18818
// exit ;
18814: POP
18815: POP
18816: GO 18822
18818: GO 18781
18820: POP
18821: POP
// end ;
18822: LD_VAR 0 4
18826: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18827: LD_INT 0
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
18835: PPUSH
// if not GetClass ( unit ) = class_sniper then
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 257
18845: PUSH
18846: LD_INT 5
18848: EQUAL
18849: NOT
18850: IFFALSE 18854
// exit ;
18852: GO 19231
// dist := 8 ;
18854: LD_ADDR_VAR 0 5
18858: PUSH
18859: LD_INT 8
18861: ST_TO_ADDR
// viewRange := 12 ;
18862: LD_ADDR_VAR 0 7
18866: PUSH
18867: LD_INT 12
18869: ST_TO_ADDR
// side := GetSide ( unit ) ;
18870: LD_ADDR_VAR 0 6
18874: PUSH
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 255
18884: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18885: LD_INT 61
18887: PPUSH
18888: LD_VAR 0 6
18892: PPUSH
18893: CALL_OW 321
18897: PUSH
18898: LD_INT 2
18900: EQUAL
18901: IFFALSE 18911
// viewRange := 16 ;
18903: LD_ADDR_VAR 0 7
18907: PUSH
18908: LD_INT 16
18910: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18911: LD_VAR 0 1
18915: PPUSH
18916: LD_VAR 0 2
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: CALL_OW 297
18930: PUSH
18931: LD_VAR 0 5
18935: GREATER
18936: IFFALSE 19015
// begin ComMoveXY ( unit , x , y ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_VAR 0 2
18947: PPUSH
18948: LD_VAR 0 3
18952: PPUSH
18953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18957: LD_INT 35
18959: PPUSH
18960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: CALL 54031 0 3
18983: NOT
18984: IFFALSE 18988
// exit ;
18986: GO 19231
// until GetDistUnitXY ( unit , x , y ) < dist ;
18988: LD_VAR 0 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: CALL_OW 297
19007: PUSH
19008: LD_VAR 0 5
19012: LESS
19013: IFFALSE 18957
// end ; ComTurnXY ( unit , x , y ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: LD_VAR 0 3
19029: PPUSH
19030: CALL_OW 118
// wait ( 5 ) ;
19034: LD_INT 5
19036: PPUSH
19037: CALL_OW 67
// _d := GetDir ( unit ) ;
19041: LD_ADDR_VAR 0 10
19045: PUSH
19046: LD_VAR 0 1
19050: PPUSH
19051: CALL_OW 254
19055: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19056: LD_ADDR_VAR 0 8
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 250
19070: PPUSH
19071: LD_VAR 0 10
19075: PPUSH
19076: LD_VAR 0 5
19080: PPUSH
19081: CALL_OW 272
19085: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19086: LD_ADDR_VAR 0 9
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 251
19100: PPUSH
19101: LD_VAR 0 10
19105: PPUSH
19106: LD_VAR 0 5
19110: PPUSH
19111: CALL_OW 273
19115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19116: LD_VAR 0 8
19120: PPUSH
19121: LD_VAR 0 9
19125: PPUSH
19126: CALL_OW 488
19130: NOT
19131: IFFALSE 19135
// exit ;
19133: GO 19231
// ComAnimCustom ( unit , 1 ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19147: LD_VAR 0 8
19151: PPUSH
19152: LD_VAR 0 9
19156: PPUSH
19157: LD_VAR 0 6
19161: PPUSH
19162: LD_VAR 0 7
19166: PPUSH
19167: CALL_OW 330
// repeat wait ( 1 ) ;
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 67
// until IsIdle ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 316
19187: PUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 302
19197: NOT
19198: OR
19199: PUSH
19200: LD_VAR 0 1
19204: PPUSH
19205: CALL_OW 301
19209: OR
19210: IFFALSE 19171
// RemoveSeeing ( _x , _y , side ) ;
19212: LD_VAR 0 8
19216: PPUSH
19217: LD_VAR 0 9
19221: PPUSH
19222: LD_VAR 0 6
19226: PPUSH
19227: CALL_OW 331
// end ; end_of_file end_of_file
19231: LD_VAR 0 4
19235: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19236: LD_INT 0
19238: PPUSH
19239: PPUSH
// if exist_mode then
19240: LD_VAR 0 2
19244: IFFALSE 19269
// unit := CreateCharacter ( prefix & ident ) else
19246: LD_ADDR_VAR 0 5
19250: PUSH
19251: LD_VAR 0 3
19255: PUSH
19256: LD_VAR 0 1
19260: STR
19261: PPUSH
19262: CALL_OW 34
19266: ST_TO_ADDR
19267: GO 19284
// unit := NewCharacter ( ident ) ;
19269: LD_ADDR_VAR 0 5
19273: PUSH
19274: LD_VAR 0 1
19278: PPUSH
19279: CALL_OW 25
19283: ST_TO_ADDR
// result := unit ;
19284: LD_ADDR_VAR 0 4
19288: PUSH
19289: LD_VAR 0 5
19293: ST_TO_ADDR
// end ;
19294: LD_VAR 0 4
19298: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19299: LD_INT 0
19301: PPUSH
19302: PPUSH
// if not side or not nation then
19303: LD_VAR 0 1
19307: NOT
19308: PUSH
19309: LD_VAR 0 2
19313: NOT
19314: OR
19315: IFFALSE 19319
// exit ;
19317: GO 20083
// case nation of nation_american :
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 1
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19546
19332: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: LD_INT 35
19340: PUSH
19341: LD_INT 45
19343: PUSH
19344: LD_INT 46
19346: PUSH
19347: LD_INT 47
19349: PUSH
19350: LD_INT 82
19352: PUSH
19353: LD_INT 83
19355: PUSH
19356: LD_INT 84
19358: PUSH
19359: LD_INT 85
19361: PUSH
19362: LD_INT 86
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 6
19373: PUSH
19374: LD_INT 15
19376: PUSH
19377: LD_INT 16
19379: PUSH
19380: LD_INT 7
19382: PUSH
19383: LD_INT 12
19385: PUSH
19386: LD_INT 13
19388: PUSH
19389: LD_INT 10
19391: PUSH
19392: LD_INT 14
19394: PUSH
19395: LD_INT 20
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 22
19403: PUSH
19404: LD_INT 25
19406: PUSH
19407: LD_INT 32
19409: PUSH
19410: LD_INT 27
19412: PUSH
19413: LD_INT 36
19415: PUSH
19416: LD_INT 69
19418: PUSH
19419: LD_INT 39
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 40
19427: PUSH
19428: LD_INT 48
19430: PUSH
19431: LD_INT 49
19433: PUSH
19434: LD_INT 50
19436: PUSH
19437: LD_INT 51
19439: PUSH
19440: LD_INT 52
19442: PUSH
19443: LD_INT 53
19445: PUSH
19446: LD_INT 54
19448: PUSH
19449: LD_INT 55
19451: PUSH
19452: LD_INT 56
19454: PUSH
19455: LD_INT 57
19457: PUSH
19458: LD_INT 58
19460: PUSH
19461: LD_INT 59
19463: PUSH
19464: LD_INT 60
19466: PUSH
19467: LD_INT 61
19469: PUSH
19470: LD_INT 62
19472: PUSH
19473: LD_INT 80
19475: PUSH
19476: LD_INT 82
19478: PUSH
19479: LD_INT 83
19481: PUSH
19482: LD_INT 84
19484: PUSH
19485: LD_INT 85
19487: PUSH
19488: LD_INT 86
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 20007
19546: LD_INT 2
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19776
19554: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19555: LD_ADDR_VAR 0 4
19559: PUSH
19560: LD_INT 35
19562: PUSH
19563: LD_INT 45
19565: PUSH
19566: LD_INT 46
19568: PUSH
19569: LD_INT 47
19571: PUSH
19572: LD_INT 82
19574: PUSH
19575: LD_INT 83
19577: PUSH
19578: LD_INT 84
19580: PUSH
19581: LD_INT 85
19583: PUSH
19584: LD_INT 87
19586: PUSH
19587: LD_INT 70
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 11
19595: PUSH
19596: LD_INT 3
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: LD_INT 6
19607: PUSH
19608: LD_INT 15
19610: PUSH
19611: LD_INT 18
19613: PUSH
19614: LD_INT 7
19616: PUSH
19617: LD_INT 17
19619: PUSH
19620: LD_INT 8
19622: PUSH
19623: LD_INT 20
19625: PUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_INT 72
19634: PUSH
19635: LD_INT 26
19637: PUSH
19638: LD_INT 69
19640: PUSH
19641: LD_INT 39
19643: PUSH
19644: LD_INT 40
19646: PUSH
19647: LD_INT 41
19649: PUSH
19650: LD_INT 42
19652: PUSH
19653: LD_INT 43
19655: PUSH
19656: LD_INT 48
19658: PUSH
19659: LD_INT 49
19661: PUSH
19662: LD_INT 50
19664: PUSH
19665: LD_INT 51
19667: PUSH
19668: LD_INT 52
19670: PUSH
19671: LD_INT 53
19673: PUSH
19674: LD_INT 54
19676: PUSH
19677: LD_INT 55
19679: PUSH
19680: LD_INT 56
19682: PUSH
19683: LD_INT 60
19685: PUSH
19686: LD_INT 61
19688: PUSH
19689: LD_INT 62
19691: PUSH
19692: LD_INT 66
19694: PUSH
19695: LD_INT 67
19697: PUSH
19698: LD_INT 68
19700: PUSH
19701: LD_INT 81
19703: PUSH
19704: LD_INT 82
19706: PUSH
19707: LD_INT 83
19709: PUSH
19710: LD_INT 84
19712: PUSH
19713: LD_INT 85
19715: PUSH
19716: LD_INT 87
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: ST_TO_ADDR
19774: GO 20007
19776: LD_INT 3
19778: DOUBLE
19779: EQUAL
19780: IFTRUE 19784
19782: GO 20006
19784: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19785: LD_ADDR_VAR 0 4
19789: PUSH
19790: LD_INT 46
19792: PUSH
19793: LD_INT 47
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 82
19804: PUSH
19805: LD_INT 83
19807: PUSH
19808: LD_INT 84
19810: PUSH
19811: LD_INT 85
19813: PUSH
19814: LD_INT 86
19816: PUSH
19817: LD_INT 11
19819: PUSH
19820: LD_INT 9
19822: PUSH
19823: LD_INT 20
19825: PUSH
19826: LD_INT 19
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 24
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_INT 25
19840: PUSH
19841: LD_INT 28
19843: PUSH
19844: LD_INT 29
19846: PUSH
19847: LD_INT 30
19849: PUSH
19850: LD_INT 31
19852: PUSH
19853: LD_INT 37
19855: PUSH
19856: LD_INT 38
19858: PUSH
19859: LD_INT 32
19861: PUSH
19862: LD_INT 27
19864: PUSH
19865: LD_INT 33
19867: PUSH
19868: LD_INT 69
19870: PUSH
19871: LD_INT 39
19873: PUSH
19874: LD_INT 34
19876: PUSH
19877: LD_INT 40
19879: PUSH
19880: LD_INT 71
19882: PUSH
19883: LD_INT 23
19885: PUSH
19886: LD_INT 44
19888: PUSH
19889: LD_INT 48
19891: PUSH
19892: LD_INT 49
19894: PUSH
19895: LD_INT 50
19897: PUSH
19898: LD_INT 51
19900: PUSH
19901: LD_INT 52
19903: PUSH
19904: LD_INT 53
19906: PUSH
19907: LD_INT 54
19909: PUSH
19910: LD_INT 55
19912: PUSH
19913: LD_INT 56
19915: PUSH
19916: LD_INT 57
19918: PUSH
19919: LD_INT 58
19921: PUSH
19922: LD_INT 59
19924: PUSH
19925: LD_INT 63
19927: PUSH
19928: LD_INT 64
19930: PUSH
19931: LD_INT 65
19933: PUSH
19934: LD_INT 82
19936: PUSH
19937: LD_INT 83
19939: PUSH
19940: LD_INT 84
19942: PUSH
19943: LD_INT 85
19945: PUSH
19946: LD_INT 86
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
20004: GO 20007
20006: POP
// if state > - 1 and state < 3 then
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 1
20014: NEG
20015: GREATER
20016: PUSH
20017: LD_VAR 0 3
20021: PUSH
20022: LD_INT 3
20024: LESS
20025: AND
20026: IFFALSE 20083
// for i in result do
20028: LD_ADDR_VAR 0 5
20032: PUSH
20033: LD_VAR 0 4
20037: PUSH
20038: FOR_IN
20039: IFFALSE 20081
// if GetTech ( i , side ) <> state then
20041: LD_VAR 0 5
20045: PPUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 321
20055: PUSH
20056: LD_VAR 0 3
20060: NONEQUAL
20061: IFFALSE 20079
// result := result diff i ;
20063: LD_ADDR_VAR 0 4
20067: PUSH
20068: LD_VAR 0 4
20072: PUSH
20073: LD_VAR 0 5
20077: DIFF
20078: ST_TO_ADDR
20079: GO 20038
20081: POP
20082: POP
// end ;
20083: LD_VAR 0 4
20087: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20088: LD_INT 0
20090: PPUSH
20091: PPUSH
20092: PPUSH
// result := true ;
20093: LD_ADDR_VAR 0 3
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20101: LD_ADDR_VAR 0 5
20105: PUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: CALL_OW 480
20115: ST_TO_ADDR
// if not tmp then
20116: LD_VAR 0 5
20120: NOT
20121: IFFALSE 20125
// exit ;
20123: GO 20174
// for i in tmp do
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_VAR 0 5
20134: PUSH
20135: FOR_IN
20136: IFFALSE 20172
// if GetTech ( i , side ) <> state_researched then
20138: LD_VAR 0 4
20142: PPUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 321
20152: PUSH
20153: LD_INT 2
20155: NONEQUAL
20156: IFFALSE 20170
// begin result := false ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// exit ;
20166: POP
20167: POP
20168: GO 20174
// end ;
20170: GO 20135
20172: POP
20173: POP
// end ;
20174: LD_VAR 0 3
20178: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20179: LD_INT 0
20181: PPUSH
20182: PPUSH
20183: PPUSH
20184: PPUSH
20185: PPUSH
20186: PPUSH
20187: PPUSH
20188: PPUSH
20189: PPUSH
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20194: LD_VAR 0 1
20198: NOT
20199: PUSH
20200: LD_VAR 0 1
20204: PPUSH
20205: CALL_OW 257
20209: PUSH
20210: LD_INT 9
20212: NONEQUAL
20213: OR
20214: IFFALSE 20218
// exit ;
20216: GO 20791
// side := GetSide ( unit ) ;
20218: LD_ADDR_VAR 0 9
20222: PUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 255
20232: ST_TO_ADDR
// tech_space := tech_spacanom ;
20233: LD_ADDR_VAR 0 12
20237: PUSH
20238: LD_INT 29
20240: ST_TO_ADDR
// tech_time := tech_taurad ;
20241: LD_ADDR_VAR 0 13
20245: PUSH
20246: LD_INT 28
20248: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20249: LD_ADDR_VAR 0 11
20253: PUSH
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 310
20263: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20264: LD_VAR 0 11
20268: PPUSH
20269: CALL_OW 247
20273: PUSH
20274: LD_INT 2
20276: EQUAL
20277: IFFALSE 20281
// exit ;
20279: GO 20791
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20281: LD_ADDR_VAR 0 8
20285: PUSH
20286: LD_INT 81
20288: PUSH
20289: LD_VAR 0 9
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 3
20300: PUSH
20301: LD_INT 21
20303: PUSH
20304: LD_INT 3
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 69
20323: ST_TO_ADDR
// if not tmp then
20324: LD_VAR 0 8
20328: NOT
20329: IFFALSE 20333
// exit ;
20331: GO 20791
// if in_unit then
20333: LD_VAR 0 11
20337: IFFALSE 20361
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20339: LD_ADDR_VAR 0 10
20343: PUSH
20344: LD_VAR 0 8
20348: PPUSH
20349: LD_VAR 0 11
20353: PPUSH
20354: CALL_OW 74
20358: ST_TO_ADDR
20359: GO 20381
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20361: LD_ADDR_VAR 0 10
20365: PUSH
20366: LD_VAR 0 8
20370: PPUSH
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 74
20380: ST_TO_ADDR
// if not enemy then
20381: LD_VAR 0 10
20385: NOT
20386: IFFALSE 20390
// exit ;
20388: GO 20791
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20390: LD_VAR 0 11
20394: PUSH
20395: LD_VAR 0 11
20399: PPUSH
20400: LD_VAR 0 10
20404: PPUSH
20405: CALL_OW 296
20409: PUSH
20410: LD_INT 13
20412: GREATER
20413: AND
20414: PUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_VAR 0 10
20424: PPUSH
20425: CALL_OW 296
20429: PUSH
20430: LD_INT 12
20432: GREATER
20433: OR
20434: IFFALSE 20438
// exit ;
20436: GO 20791
// missile := [ 1 ] ;
20438: LD_ADDR_VAR 0 14
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20449: LD_VAR 0 9
20453: PPUSH
20454: LD_VAR 0 12
20458: PPUSH
20459: CALL_OW 325
20463: IFFALSE 20492
// missile := Insert ( missile , missile + 1 , 2 ) ;
20465: LD_ADDR_VAR 0 14
20469: PUSH
20470: LD_VAR 0 14
20474: PPUSH
20475: LD_VAR 0 14
20479: PUSH
20480: LD_INT 1
20482: PLUS
20483: PPUSH
20484: LD_INT 2
20486: PPUSH
20487: CALL_OW 2
20491: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20492: LD_VAR 0 9
20496: PPUSH
20497: LD_VAR 0 13
20501: PPUSH
20502: CALL_OW 325
20506: PUSH
20507: LD_VAR 0 10
20511: PPUSH
20512: CALL_OW 255
20516: PPUSH
20517: LD_VAR 0 13
20521: PPUSH
20522: CALL_OW 325
20526: NOT
20527: AND
20528: IFFALSE 20557
// missile := Insert ( missile , missile + 1 , 3 ) ;
20530: LD_ADDR_VAR 0 14
20534: PUSH
20535: LD_VAR 0 14
20539: PPUSH
20540: LD_VAR 0 14
20544: PUSH
20545: LD_INT 1
20547: PLUS
20548: PPUSH
20549: LD_INT 3
20551: PPUSH
20552: CALL_OW 2
20556: ST_TO_ADDR
// if missile < 2 then
20557: LD_VAR 0 14
20561: PUSH
20562: LD_INT 2
20564: LESS
20565: IFFALSE 20569
// exit ;
20567: GO 20791
// x := GetX ( enemy ) ;
20569: LD_ADDR_VAR 0 4
20573: PUSH
20574: LD_VAR 0 10
20578: PPUSH
20579: CALL_OW 250
20583: ST_TO_ADDR
// y := GetY ( enemy ) ;
20584: LD_ADDR_VAR 0 5
20588: PUSH
20589: LD_VAR 0 10
20593: PPUSH
20594: CALL_OW 251
20598: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20599: LD_ADDR_VAR 0 6
20603: PUSH
20604: LD_VAR 0 4
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PPUSH
20613: LD_INT 1
20615: PPUSH
20616: CALL_OW 12
20620: PLUS
20621: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20622: LD_ADDR_VAR 0 7
20626: PUSH
20627: LD_VAR 0 5
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 12
20643: PLUS
20644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20645: LD_VAR 0 6
20649: PPUSH
20650: LD_VAR 0 7
20654: PPUSH
20655: CALL_OW 488
20659: NOT
20660: IFFALSE 20682
// begin _x := x ;
20662: LD_ADDR_VAR 0 6
20666: PUSH
20667: LD_VAR 0 4
20671: ST_TO_ADDR
// _y := y ;
20672: LD_ADDR_VAR 0 7
20676: PUSH
20677: LD_VAR 0 5
20681: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20682: LD_ADDR_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: PPUSH
20690: LD_VAR 0 14
20694: PPUSH
20695: CALL_OW 12
20699: ST_TO_ADDR
// case i of 1 :
20700: LD_VAR 0 3
20704: PUSH
20705: LD_INT 1
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20730
20713: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20714: LD_VAR 0 1
20718: PPUSH
20719: LD_VAR 0 10
20723: PPUSH
20724: CALL_OW 115
20728: GO 20791
20730: LD_INT 2
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20760
20738: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_VAR 0 6
20748: PPUSH
20749: LD_VAR 0 7
20753: PPUSH
20754: CALL_OW 153
20758: GO 20791
20760: LD_INT 3
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20790
20768: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20769: LD_VAR 0 1
20773: PPUSH
20774: LD_VAR 0 6
20778: PPUSH
20779: LD_VAR 0 7
20783: PPUSH
20784: CALL_OW 154
20788: GO 20791
20790: POP
// end ;
20791: LD_VAR 0 2
20795: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20796: LD_INT 0
20798: PPUSH
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
20803: PPUSH
// if not unit or not building then
20804: LD_VAR 0 1
20808: NOT
20809: PUSH
20810: LD_VAR 0 2
20814: NOT
20815: OR
20816: IFFALSE 20820
// exit ;
20818: GO 20978
// x := GetX ( building ) ;
20820: LD_ADDR_VAR 0 5
20824: PUSH
20825: LD_VAR 0 2
20829: PPUSH
20830: CALL_OW 250
20834: ST_TO_ADDR
// y := GetY ( building ) ;
20835: LD_ADDR_VAR 0 6
20839: PUSH
20840: LD_VAR 0 2
20844: PPUSH
20845: CALL_OW 251
20849: ST_TO_ADDR
// for i = 0 to 5 do
20850: LD_ADDR_VAR 0 4
20854: PUSH
20855: DOUBLE
20856: LD_INT 0
20858: DEC
20859: ST_TO_ADDR
20860: LD_INT 5
20862: PUSH
20863: FOR_TO
20864: IFFALSE 20976
// begin _x := ShiftX ( x , i , 3 ) ;
20866: LD_ADDR_VAR 0 7
20870: PUSH
20871: LD_VAR 0 5
20875: PPUSH
20876: LD_VAR 0 4
20880: PPUSH
20881: LD_INT 3
20883: PPUSH
20884: CALL_OW 272
20888: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20889: LD_ADDR_VAR 0 8
20893: PUSH
20894: LD_VAR 0 6
20898: PPUSH
20899: LD_VAR 0 4
20903: PPUSH
20904: LD_INT 3
20906: PPUSH
20907: CALL_OW 273
20911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20912: LD_VAR 0 7
20916: PPUSH
20917: LD_VAR 0 8
20921: PPUSH
20922: CALL_OW 488
20926: NOT
20927: IFFALSE 20931
// continue ;
20929: GO 20863
// if HexInfo ( _x , _y ) = 0 then
20931: LD_VAR 0 7
20935: PPUSH
20936: LD_VAR 0 8
20940: PPUSH
20941: CALL_OW 428
20945: PUSH
20946: LD_INT 0
20948: EQUAL
20949: IFFALSE 20974
// begin ComMoveXY ( unit , _x , _y ) ;
20951: LD_VAR 0 1
20955: PPUSH
20956: LD_VAR 0 7
20960: PPUSH
20961: LD_VAR 0 8
20965: PPUSH
20966: CALL_OW 111
// exit ;
20970: POP
20971: POP
20972: GO 20978
// end ; end ;
20974: GO 20863
20976: POP
20977: POP
// end ;
20978: LD_VAR 0 3
20982: RET
// export function ScanBase ( side , base_area ) ; begin
20983: LD_INT 0
20985: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20986: LD_ADDR_VAR 0 3
20990: PUSH
20991: LD_VAR 0 2
20995: PPUSH
20996: LD_INT 81
20998: PUSH
20999: LD_VAR 0 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PPUSH
21008: CALL_OW 70
21012: ST_TO_ADDR
// end ;
21013: LD_VAR 0 3
21017: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21018: LD_INT 0
21020: PPUSH
21021: PPUSH
21022: PPUSH
21023: PPUSH
// result := false ;
21024: LD_ADDR_VAR 0 2
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// side := GetSide ( unit ) ;
21032: LD_ADDR_VAR 0 3
21036: PUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 255
21046: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21047: LD_ADDR_VAR 0 4
21051: PUSH
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 248
21061: ST_TO_ADDR
// case nat of 1 :
21062: LD_VAR 0 4
21066: PUSH
21067: LD_INT 1
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21086
21075: POP
// tech := tech_lassight ; 2 :
21076: LD_ADDR_VAR 0 5
21080: PUSH
21081: LD_INT 12
21083: ST_TO_ADDR
21084: GO 21125
21086: LD_INT 2
21088: DOUBLE
21089: EQUAL
21090: IFTRUE 21094
21092: GO 21105
21094: POP
// tech := tech_mortar ; 3 :
21095: LD_ADDR_VAR 0 5
21099: PUSH
21100: LD_INT 41
21102: ST_TO_ADDR
21103: GO 21125
21105: LD_INT 3
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21124
21113: POP
// tech := tech_bazooka ; end ;
21114: LD_ADDR_VAR 0 5
21118: PUSH
21119: LD_INT 44
21121: ST_TO_ADDR
21122: GO 21125
21124: POP
// if Researched ( side , tech ) then
21125: LD_VAR 0 3
21129: PPUSH
21130: LD_VAR 0 5
21134: PPUSH
21135: CALL_OW 325
21139: IFFALSE 21166
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 5
21148: PUSH
21149: LD_INT 8
21151: PUSH
21152: LD_INT 9
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PUSH
21160: LD_VAR 0 4
21164: ARRAY
21165: ST_TO_ADDR
// end ;
21166: LD_VAR 0 2
21170: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21171: LD_INT 0
21173: PPUSH
21174: PPUSH
21175: PPUSH
// if not mines then
21176: LD_VAR 0 2
21180: NOT
21181: IFFALSE 21185
// exit ;
21183: GO 21329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21185: LD_ADDR_VAR 0 5
21189: PUSH
21190: LD_INT 81
21192: PUSH
21193: LD_VAR 0 1
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 3
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: ST_TO_ADDR
// for i in mines do
21228: LD_ADDR_VAR 0 4
21232: PUSH
21233: LD_VAR 0 2
21237: PUSH
21238: FOR_IN
21239: IFFALSE 21327
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21241: LD_VAR 0 4
21245: PUSH
21246: LD_INT 1
21248: ARRAY
21249: PPUSH
21250: LD_VAR 0 4
21254: PUSH
21255: LD_INT 2
21257: ARRAY
21258: PPUSH
21259: CALL_OW 458
21263: NOT
21264: IFFALSE 21268
// continue ;
21266: GO 21238
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21268: LD_VAR 0 4
21272: PUSH
21273: LD_INT 1
21275: ARRAY
21276: PPUSH
21277: LD_VAR 0 4
21281: PUSH
21282: LD_INT 2
21284: ARRAY
21285: PPUSH
21286: CALL_OW 428
21290: PUSH
21291: LD_VAR 0 5
21295: IN
21296: IFFALSE 21325
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21298: LD_VAR 0 4
21302: PUSH
21303: LD_INT 1
21305: ARRAY
21306: PPUSH
21307: LD_VAR 0 4
21311: PUSH
21312: LD_INT 2
21314: ARRAY
21315: PPUSH
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 456
// end ;
21325: GO 21238
21327: POP
21328: POP
// end ;
21329: LD_VAR 0 3
21333: RET
// export function Count ( array ) ; var i ; begin
21334: LD_INT 0
21336: PPUSH
21337: PPUSH
// result := 0 ;
21338: LD_ADDR_VAR 0 2
21342: PUSH
21343: LD_INT 0
21345: ST_TO_ADDR
// for i in array do
21346: LD_ADDR_VAR 0 3
21350: PUSH
21351: LD_VAR 0 1
21355: PUSH
21356: FOR_IN
21357: IFFALSE 21381
// if i then
21359: LD_VAR 0 3
21363: IFFALSE 21379
// result := result + 1 ;
21365: LD_ADDR_VAR 0 2
21369: PUSH
21370: LD_VAR 0 2
21374: PUSH
21375: LD_INT 1
21377: PLUS
21378: ST_TO_ADDR
21379: GO 21356
21381: POP
21382: POP
// end ;
21383: LD_VAR 0 2
21387: RET
// export function IsEmpty ( building ) ; begin
21388: LD_INT 0
21390: PPUSH
// if not building then
21391: LD_VAR 0 1
21395: NOT
21396: IFFALSE 21400
// exit ;
21398: GO 21443
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21400: LD_ADDR_VAR 0 2
21404: PUSH
21405: LD_VAR 0 1
21409: PUSH
21410: LD_INT 22
21412: PUSH
21413: LD_VAR 0 1
21417: PPUSH
21418: CALL_OW 255
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 58
21429: PUSH
21430: EMPTY
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: IN
21442: ST_TO_ADDR
// end ;
21443: LD_VAR 0 2
21447: RET
// export function IsNotFull ( building ) ; begin
21448: LD_INT 0
21450: PPUSH
// if not building then
21451: LD_VAR 0 1
21455: NOT
21456: IFFALSE 21460
// exit ;
21458: GO 21479
// result := UnitsInside ( building ) < 6 ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_VAR 0 1
21469: PPUSH
21470: CALL_OW 313
21474: PUSH
21475: LD_INT 6
21477: LESS
21478: ST_TO_ADDR
// end ;
21479: LD_VAR 0 2
21483: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21484: LD_INT 0
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
// tmp := [ ] ;
21490: LD_ADDR_VAR 0 3
21494: PUSH
21495: EMPTY
21496: ST_TO_ADDR
// list := [ ] ;
21497: LD_ADDR_VAR 0 5
21501: PUSH
21502: EMPTY
21503: ST_TO_ADDR
// for i = 16 to 25 do
21504: LD_ADDR_VAR 0 4
21508: PUSH
21509: DOUBLE
21510: LD_INT 16
21512: DEC
21513: ST_TO_ADDR
21514: LD_INT 25
21516: PUSH
21517: FOR_TO
21518: IFFALSE 21591
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21520: LD_ADDR_VAR 0 3
21524: PUSH
21525: LD_VAR 0 3
21529: PUSH
21530: LD_INT 22
21532: PUSH
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 255
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 91
21549: PUSH
21550: LD_VAR 0 1
21554: PUSH
21555: LD_INT 6
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_VAR 0 4
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: PPUSH
21583: CALL_OW 69
21587: ADD
21588: ST_TO_ADDR
21589: GO 21517
21591: POP
21592: POP
// for i = 1 to tmp do
21593: LD_ADDR_VAR 0 4
21597: PUSH
21598: DOUBLE
21599: LD_INT 1
21601: DEC
21602: ST_TO_ADDR
21603: LD_VAR 0 3
21607: PUSH
21608: FOR_TO
21609: IFFALSE 21697
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21611: LD_ADDR_VAR 0 5
21615: PUSH
21616: LD_VAR 0 5
21620: PUSH
21621: LD_VAR 0 3
21625: PUSH
21626: LD_VAR 0 4
21630: ARRAY
21631: PPUSH
21632: CALL_OW 266
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_VAR 0 4
21646: ARRAY
21647: PPUSH
21648: CALL_OW 250
21652: PUSH
21653: LD_VAR 0 3
21657: PUSH
21658: LD_VAR 0 4
21662: ARRAY
21663: PPUSH
21664: CALL_OW 251
21668: PUSH
21669: LD_VAR 0 3
21673: PUSH
21674: LD_VAR 0 4
21678: ARRAY
21679: PPUSH
21680: CALL_OW 254
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: ADD
21694: ST_TO_ADDR
21695: GO 21608
21697: POP
21698: POP
// result := list ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_VAR 0 5
21708: ST_TO_ADDR
// end ;
21709: LD_VAR 0 2
21713: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21714: LD_INT 0
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
21721: PPUSH
21722: PPUSH
// if not factory then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 22325
// if control = control_apeman then
21732: LD_VAR 0 4
21736: PUSH
21737: LD_INT 5
21739: EQUAL
21740: IFFALSE 21849
// begin tmp := UnitsInside ( factory ) ;
21742: LD_ADDR_VAR 0 8
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 313
21756: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21757: LD_VAR 0 8
21761: PPUSH
21762: LD_INT 25
21764: PUSH
21765: LD_INT 12
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 72
21776: NOT
21777: IFFALSE 21787
// control := control_manual ;
21779: LD_ADDR_VAR 0 4
21783: PUSH
21784: LD_INT 1
21786: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21787: LD_ADDR_VAR 0 8
21791: PUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL 21484 0 1
21801: ST_TO_ADDR
// if tmp then
21802: LD_VAR 0 8
21806: IFFALSE 21849
// begin for i in tmp do
21808: LD_ADDR_VAR 0 7
21812: PUSH
21813: LD_VAR 0 8
21817: PUSH
21818: FOR_IN
21819: IFFALSE 21847
// if i [ 1 ] = b_ext_radio then
21821: LD_VAR 0 7
21825: PUSH
21826: LD_INT 1
21828: ARRAY
21829: PUSH
21830: LD_INT 22
21832: EQUAL
21833: IFFALSE 21845
// begin control := control_remote ;
21835: LD_ADDR_VAR 0 4
21839: PUSH
21840: LD_INT 2
21842: ST_TO_ADDR
// break ;
21843: GO 21847
// end ;
21845: GO 21818
21847: POP
21848: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_VAR 0 2
21858: PPUSH
21859: LD_VAR 0 3
21863: PPUSH
21864: LD_VAR 0 4
21868: PPUSH
21869: LD_VAR 0 5
21873: PPUSH
21874: CALL_OW 448
21878: IFFALSE 21913
// begin result := [ chassis , engine , control , weapon ] ;
21880: LD_ADDR_VAR 0 6
21884: PUSH
21885: LD_VAR 0 2
21889: PUSH
21890: LD_VAR 0 3
21894: PUSH
21895: LD_VAR 0 4
21899: PUSH
21900: LD_VAR 0 5
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: ST_TO_ADDR
// exit ;
21911: GO 22325
// end ; _chassis := AvailableChassisList ( factory ) ;
21913: LD_ADDR_VAR 0 9
21917: PUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 475
21927: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21928: LD_ADDR_VAR 0 11
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 476
21942: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21943: LD_ADDR_VAR 0 12
21947: PUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 477
21957: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21958: LD_ADDR_VAR 0 10
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 478
21972: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21973: LD_VAR 0 9
21977: NOT
21978: PUSH
21979: LD_VAR 0 11
21983: NOT
21984: OR
21985: PUSH
21986: LD_VAR 0 12
21990: NOT
21991: OR
21992: PUSH
21993: LD_VAR 0 10
21997: NOT
21998: OR
21999: IFFALSE 22034
// begin result := [ chassis , engine , control , weapon ] ;
22001: LD_ADDR_VAR 0 6
22005: PUSH
22006: LD_VAR 0 2
22010: PUSH
22011: LD_VAR 0 3
22015: PUSH
22016: LD_VAR 0 4
22020: PUSH
22021: LD_VAR 0 5
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: ST_TO_ADDR
// exit ;
22032: GO 22325
// end ; if not chassis in _chassis then
22034: LD_VAR 0 2
22038: PUSH
22039: LD_VAR 0 9
22043: IN
22044: NOT
22045: IFFALSE 22071
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22047: LD_ADDR_VAR 0 2
22051: PUSH
22052: LD_VAR 0 9
22056: PUSH
22057: LD_INT 1
22059: PPUSH
22060: LD_VAR 0 9
22064: PPUSH
22065: CALL_OW 12
22069: ARRAY
22070: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: CALL 22330 0 2
22085: NOT
22086: IFFALSE 22145
// repeat engine := _engine [ 1 ] ;
22088: LD_ADDR_VAR 0 3
22092: PUSH
22093: LD_VAR 0 11
22097: PUSH
22098: LD_INT 1
22100: ARRAY
22101: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22102: LD_ADDR_VAR 0 11
22106: PUSH
22107: LD_VAR 0 11
22111: PPUSH
22112: LD_INT 1
22114: PPUSH
22115: CALL_OW 3
22119: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: CALL 22330 0 2
22134: PUSH
22135: LD_VAR 0 11
22139: PUSH
22140: EMPTY
22141: EQUAL
22142: OR
22143: IFFALSE 22088
// if not control in _control then
22145: LD_VAR 0 4
22149: PUSH
22150: LD_VAR 0 12
22154: IN
22155: NOT
22156: IFFALSE 22182
// control := _control [ rand ( 1 , _control ) ] ;
22158: LD_ADDR_VAR 0 4
22162: PUSH
22163: LD_VAR 0 12
22167: PUSH
22168: LD_INT 1
22170: PPUSH
22171: LD_VAR 0 12
22175: PPUSH
22176: CALL_OW 12
22180: ARRAY
22181: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22182: LD_VAR 0 2
22186: PPUSH
22187: LD_VAR 0 5
22191: PPUSH
22192: CALL 22550 0 2
22196: NOT
22197: IFFALSE 22256
// repeat weapon := _weapon [ 1 ] ;
22199: LD_ADDR_VAR 0 5
22203: PUSH
22204: LD_VAR 0 10
22208: PUSH
22209: LD_INT 1
22211: ARRAY
22212: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22213: LD_ADDR_VAR 0 10
22217: PUSH
22218: LD_VAR 0 10
22222: PPUSH
22223: LD_INT 1
22225: PPUSH
22226: CALL_OW 3
22230: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_VAR 0 5
22240: PPUSH
22241: CALL 22550 0 2
22245: PUSH
22246: LD_VAR 0 10
22250: PUSH
22251: EMPTY
22252: EQUAL
22253: OR
22254: IFFALSE 22199
// result := [ ] ;
22256: LD_ADDR_VAR 0 6
22260: PUSH
22261: EMPTY
22262: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22263: LD_VAR 0 1
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_VAR 0 4
22282: PPUSH
22283: LD_VAR 0 5
22287: PPUSH
22288: CALL_OW 448
22292: IFFALSE 22325
// result := [ chassis , engine , control , weapon ] ;
22294: LD_ADDR_VAR 0 6
22298: PUSH
22299: LD_VAR 0 2
22303: PUSH
22304: LD_VAR 0 3
22308: PUSH
22309: LD_VAR 0 4
22313: PUSH
22314: LD_VAR 0 5
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: ST_TO_ADDR
// end ;
22325: LD_VAR 0 6
22329: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22330: LD_INT 0
22332: PPUSH
// if not chassis or not engine then
22333: LD_VAR 0 1
22337: NOT
22338: PUSH
22339: LD_VAR 0 2
22343: NOT
22344: OR
22345: IFFALSE 22349
// exit ;
22347: GO 22545
// case engine of engine_solar :
22349: LD_VAR 0 2
22353: PUSH
22354: LD_INT 2
22356: DOUBLE
22357: EQUAL
22358: IFTRUE 22362
22360: GO 22400
22362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_INT 11
22370: PUSH
22371: LD_INT 12
22373: PUSH
22374: LD_INT 13
22376: PUSH
22377: LD_INT 14
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: LD_INT 3
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: ST_TO_ADDR
22398: GO 22529
22400: LD_INT 1
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22408
22406: GO 22470
22408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_INT 11
22416: PUSH
22417: LD_INT 12
22419: PUSH
22420: LD_INT 13
22422: PUSH
22423: LD_INT 14
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: LD_INT 3
22434: PUSH
22435: LD_INT 4
22437: PUSH
22438: LD_INT 5
22440: PUSH
22441: LD_INT 21
22443: PUSH
22444: LD_INT 23
22446: PUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 24
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: ST_TO_ADDR
22468: GO 22529
22470: LD_INT 3
22472: DOUBLE
22473: EQUAL
22474: IFTRUE 22478
22476: GO 22528
22478: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_INT 13
22486: PUSH
22487: LD_INT 14
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: LD_INT 3
22495: PUSH
22496: LD_INT 4
22498: PUSH
22499: LD_INT 5
22501: PUSH
22502: LD_INT 21
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_INT 23
22510: PUSH
22511: LD_INT 24
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: ST_TO_ADDR
22526: GO 22529
22528: POP
// result := ( chassis in result ) ;
22529: LD_ADDR_VAR 0 3
22533: PUSH
22534: LD_VAR 0 1
22538: PUSH
22539: LD_VAR 0 3
22543: IN
22544: ST_TO_ADDR
// end ;
22545: LD_VAR 0 3
22549: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22550: LD_INT 0
22552: PPUSH
// if not chassis or not weapon then
22553: LD_VAR 0 1
22557: NOT
22558: PUSH
22559: LD_VAR 0 2
22563: NOT
22564: OR
22565: IFFALSE 22569
// exit ;
22567: GO 23595
// case weapon of us_machine_gun :
22569: LD_VAR 0 2
22573: PUSH
22574: LD_INT 2
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22612
22582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22583: LD_ADDR_VAR 0 3
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: LD_INT 4
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: ST_TO_ADDR
22610: GO 23579
22612: LD_INT 3
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22650
22620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22621: LD_ADDR_VAR 0 3
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 3
22634: PUSH
22635: LD_INT 4
22637: PUSH
22638: LD_INT 5
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
22648: GO 23579
22650: LD_INT 11
22652: DOUBLE
22653: EQUAL
22654: IFTRUE 22658
22656: GO 22688
22658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22659: LD_ADDR_VAR 0 3
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: LD_INT 4
22675: PUSH
22676: LD_INT 5
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
22686: GO 23579
22688: LD_INT 4
22690: DOUBLE
22691: EQUAL
22692: IFTRUE 22696
22694: GO 22722
22696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22697: LD_ADDR_VAR 0 3
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: LD_INT 4
22710: PUSH
22711: LD_INT 5
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: ST_TO_ADDR
22720: GO 23579
22722: LD_INT 5
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22756
22730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22731: LD_ADDR_VAR 0 3
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 3
22741: PUSH
22742: LD_INT 4
22744: PUSH
22745: LD_INT 5
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: ST_TO_ADDR
22754: GO 23579
22756: LD_INT 9
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22790
22764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22765: LD_ADDR_VAR 0 3
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 4
22778: PUSH
22779: LD_INT 5
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: ST_TO_ADDR
22788: GO 23579
22790: LD_INT 7
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22824
22798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22799: LD_ADDR_VAR 0 3
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: ST_TO_ADDR
22822: GO 23579
22824: LD_INT 12
22826: DOUBLE
22827: EQUAL
22828: IFTRUE 22832
22830: GO 22858
22832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22833: LD_ADDR_VAR 0 3
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 4
22846: PUSH
22847: LD_INT 5
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: ST_TO_ADDR
22856: GO 23579
22858: LD_INT 13
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 22892
22866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22867: LD_ADDR_VAR 0 3
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: LD_INT 4
22880: PUSH
22881: LD_INT 5
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: ST_TO_ADDR
22890: GO 23579
22892: LD_INT 14
22894: DOUBLE
22895: EQUAL
22896: IFTRUE 22900
22898: GO 22918
22900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22901: LD_ADDR_VAR 0 3
22905: PUSH
22906: LD_INT 4
22908: PUSH
22909: LD_INT 5
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: ST_TO_ADDR
22916: GO 23579
22918: LD_INT 6
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 22944
22926: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22927: LD_ADDR_VAR 0 3
22931: PUSH
22932: LD_INT 4
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: ST_TO_ADDR
22942: GO 23579
22944: LD_INT 10
22946: DOUBLE
22947: EQUAL
22948: IFTRUE 22952
22950: GO 22970
22952: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22953: LD_ADDR_VAR 0 3
22957: PUSH
22958: LD_INT 4
22960: PUSH
22961: LD_INT 5
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: ST_TO_ADDR
22968: GO 23579
22970: LD_INT 22
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23004
22978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_INT 11
22986: PUSH
22987: LD_INT 12
22989: PUSH
22990: LD_INT 13
22992: PUSH
22993: LD_INT 14
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 23579
23004: LD_INT 23
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23038
23012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_INT 11
23020: PUSH
23021: LD_INT 12
23023: PUSH
23024: LD_INT 13
23026: PUSH
23027: LD_INT 14
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: ST_TO_ADDR
23036: GO 23579
23038: LD_INT 24
23040: DOUBLE
23041: EQUAL
23042: IFTRUE 23046
23044: GO 23072
23046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23047: LD_ADDR_VAR 0 3
23051: PUSH
23052: LD_INT 11
23054: PUSH
23055: LD_INT 12
23057: PUSH
23058: LD_INT 13
23060: PUSH
23061: LD_INT 14
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 23579
23072: LD_INT 30
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23106
23080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: LD_INT 11
23088: PUSH
23089: LD_INT 12
23091: PUSH
23092: LD_INT 13
23094: PUSH
23095: LD_INT 14
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: ST_TO_ADDR
23104: GO 23579
23106: LD_INT 25
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23132
23114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 13
23122: PUSH
23123: LD_INT 14
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: ST_TO_ADDR
23130: GO 23579
23132: LD_INT 27
23134: DOUBLE
23135: EQUAL
23136: IFTRUE 23140
23138: GO 23158
23140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: LD_INT 14
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: ST_TO_ADDR
23156: GO 23579
23158: LD_INT 28
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23166
23164: GO 23184
23166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23167: LD_ADDR_VAR 0 3
23171: PUSH
23172: LD_INT 13
23174: PUSH
23175: LD_INT 14
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23579
23184: LD_INT 29
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23210
23192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_INT 13
23200: PUSH
23201: LD_INT 14
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: ST_TO_ADDR
23208: GO 23579
23210: LD_INT 31
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23236
23218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23219: LD_ADDR_VAR 0 3
23223: PUSH
23224: LD_INT 13
23226: PUSH
23227: LD_INT 14
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: ST_TO_ADDR
23234: GO 23579
23236: LD_INT 26
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23262
23244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: LD_INT 13
23252: PUSH
23253: LD_INT 14
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: ST_TO_ADDR
23260: GO 23579
23262: LD_INT 42
23264: DOUBLE
23265: EQUAL
23266: IFTRUE 23270
23268: GO 23296
23270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23271: LD_ADDR_VAR 0 3
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 22
23281: PUSH
23282: LD_INT 23
23284: PUSH
23285: LD_INT 24
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23579
23296: LD_INT 43
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23330
23304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 24
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: ST_TO_ADDR
23328: GO 23579
23330: LD_INT 44
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23364
23338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23339: LD_ADDR_VAR 0 3
23343: PUSH
23344: LD_INT 21
23346: PUSH
23347: LD_INT 22
23349: PUSH
23350: LD_INT 23
23352: PUSH
23353: LD_INT 24
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: ST_TO_ADDR
23362: GO 23579
23364: LD_INT 45
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23372
23370: GO 23398
23372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: LD_INT 21
23380: PUSH
23381: LD_INT 22
23383: PUSH
23384: LD_INT 23
23386: PUSH
23387: LD_INT 24
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
23396: GO 23579
23398: LD_INT 49
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23432
23406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_INT 21
23414: PUSH
23415: LD_INT 22
23417: PUSH
23418: LD_INT 23
23420: PUSH
23421: LD_INT 24
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: ST_TO_ADDR
23430: GO 23579
23432: LD_INT 51
23434: DOUBLE
23435: EQUAL
23436: IFTRUE 23440
23438: GO 23466
23440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23441: LD_ADDR_VAR 0 3
23445: PUSH
23446: LD_INT 21
23448: PUSH
23449: LD_INT 22
23451: PUSH
23452: LD_INT 23
23454: PUSH
23455: LD_INT 24
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: ST_TO_ADDR
23464: GO 23579
23466: LD_INT 52
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23500
23474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23475: LD_ADDR_VAR 0 3
23479: PUSH
23480: LD_INT 21
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: ST_TO_ADDR
23498: GO 23579
23500: LD_INT 53
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23526
23508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_INT 23
23516: PUSH
23517: LD_INT 24
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: ST_TO_ADDR
23524: GO 23579
23526: LD_INT 46
23528: DOUBLE
23529: EQUAL
23530: IFTRUE 23534
23532: GO 23552
23534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23535: LD_ADDR_VAR 0 3
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 24
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: ST_TO_ADDR
23550: GO 23579
23552: LD_INT 47
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23578
23560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23561: LD_ADDR_VAR 0 3
23565: PUSH
23566: LD_INT 23
23568: PUSH
23569: LD_INT 24
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23579
23578: POP
// result := ( chassis in result ) ;
23579: LD_ADDR_VAR 0 3
23583: PUSH
23584: LD_VAR 0 1
23588: PUSH
23589: LD_VAR 0 3
23593: IN
23594: ST_TO_ADDR
// end ;
23595: LD_VAR 0 3
23599: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23600: LD_INT 0
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
// result := array ;
23609: LD_ADDR_VAR 0 5
23613: PUSH
23614: LD_VAR 0 1
23618: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23619: LD_VAR 0 1
23623: NOT
23624: PUSH
23625: LD_VAR 0 2
23629: NOT
23630: OR
23631: PUSH
23632: LD_VAR 0 3
23636: NOT
23637: OR
23638: PUSH
23639: LD_VAR 0 2
23643: PUSH
23644: LD_VAR 0 1
23648: GREATER
23649: OR
23650: PUSH
23651: LD_VAR 0 3
23655: PUSH
23656: LD_VAR 0 1
23660: GREATER
23661: OR
23662: IFFALSE 23666
// exit ;
23664: GO 23962
// if direction then
23666: LD_VAR 0 4
23670: IFFALSE 23734
// begin d := 1 ;
23672: LD_ADDR_VAR 0 9
23676: PUSH
23677: LD_INT 1
23679: ST_TO_ADDR
// if i_from > i_to then
23680: LD_VAR 0 2
23684: PUSH
23685: LD_VAR 0 3
23689: GREATER
23690: IFFALSE 23716
// length := ( array - i_from ) + i_to else
23692: LD_ADDR_VAR 0 11
23696: PUSH
23697: LD_VAR 0 1
23701: PUSH
23702: LD_VAR 0 2
23706: MINUS
23707: PUSH
23708: LD_VAR 0 3
23712: PLUS
23713: ST_TO_ADDR
23714: GO 23732
// length := i_to - i_from ;
23716: LD_ADDR_VAR 0 11
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_VAR 0 2
23730: MINUS
23731: ST_TO_ADDR
// end else
23732: GO 23795
// begin d := - 1 ;
23734: LD_ADDR_VAR 0 9
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: ST_TO_ADDR
// if i_from > i_to then
23743: LD_VAR 0 2
23747: PUSH
23748: LD_VAR 0 3
23752: GREATER
23753: IFFALSE 23773
// length := i_from - i_to else
23755: LD_ADDR_VAR 0 11
23759: PUSH
23760: LD_VAR 0 2
23764: PUSH
23765: LD_VAR 0 3
23769: MINUS
23770: ST_TO_ADDR
23771: GO 23795
// length := ( array - i_to ) + i_from ;
23773: LD_ADDR_VAR 0 11
23777: PUSH
23778: LD_VAR 0 1
23782: PUSH
23783: LD_VAR 0 3
23787: MINUS
23788: PUSH
23789: LD_VAR 0 2
23793: PLUS
23794: ST_TO_ADDR
// end ; if not length then
23795: LD_VAR 0 11
23799: NOT
23800: IFFALSE 23804
// exit ;
23802: GO 23962
// tmp := array ;
23804: LD_ADDR_VAR 0 10
23808: PUSH
23809: LD_VAR 0 1
23813: ST_TO_ADDR
// for i = 1 to length do
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: DOUBLE
23820: LD_INT 1
23822: DEC
23823: ST_TO_ADDR
23824: LD_VAR 0 11
23828: PUSH
23829: FOR_TO
23830: IFFALSE 23950
// begin for j = 1 to array do
23832: LD_ADDR_VAR 0 7
23836: PUSH
23837: DOUBLE
23838: LD_INT 1
23840: DEC
23841: ST_TO_ADDR
23842: LD_VAR 0 1
23846: PUSH
23847: FOR_TO
23848: IFFALSE 23936
// begin k := j + d ;
23850: LD_ADDR_VAR 0 8
23854: PUSH
23855: LD_VAR 0 7
23859: PUSH
23860: LD_VAR 0 9
23864: PLUS
23865: ST_TO_ADDR
// if k > array then
23866: LD_VAR 0 8
23870: PUSH
23871: LD_VAR 0 1
23875: GREATER
23876: IFFALSE 23886
// k := 1 ;
23878: LD_ADDR_VAR 0 8
23882: PUSH
23883: LD_INT 1
23885: ST_TO_ADDR
// if not k then
23886: LD_VAR 0 8
23890: NOT
23891: IFFALSE 23903
// k := array ;
23893: LD_ADDR_VAR 0 8
23897: PUSH
23898: LD_VAR 0 1
23902: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23903: LD_ADDR_VAR 0 10
23907: PUSH
23908: LD_VAR 0 10
23912: PPUSH
23913: LD_VAR 0 8
23917: PPUSH
23918: LD_VAR 0 1
23922: PUSH
23923: LD_VAR 0 7
23927: ARRAY
23928: PPUSH
23929: CALL_OW 1
23933: ST_TO_ADDR
// end ;
23934: GO 23847
23936: POP
23937: POP
// array := tmp ;
23938: LD_ADDR_VAR 0 1
23942: PUSH
23943: LD_VAR 0 10
23947: ST_TO_ADDR
// end ;
23948: GO 23829
23950: POP
23951: POP
// result := array ;
23952: LD_ADDR_VAR 0 5
23956: PUSH
23957: LD_VAR 0 1
23961: ST_TO_ADDR
// end ;
23962: LD_VAR 0 5
23966: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23967: LD_INT 0
23969: PPUSH
23970: PPUSH
// result := 0 ;
23971: LD_ADDR_VAR 0 3
23975: PUSH
23976: LD_INT 0
23978: ST_TO_ADDR
// if not array or not value in array then
23979: LD_VAR 0 1
23983: NOT
23984: PUSH
23985: LD_VAR 0 2
23989: PUSH
23990: LD_VAR 0 1
23994: IN
23995: NOT
23996: OR
23997: IFFALSE 24001
// exit ;
23999: GO 24055
// for i = 1 to array do
24001: LD_ADDR_VAR 0 4
24005: PUSH
24006: DOUBLE
24007: LD_INT 1
24009: DEC
24010: ST_TO_ADDR
24011: LD_VAR 0 1
24015: PUSH
24016: FOR_TO
24017: IFFALSE 24053
// if value = array [ i ] then
24019: LD_VAR 0 2
24023: PUSH
24024: LD_VAR 0 1
24028: PUSH
24029: LD_VAR 0 4
24033: ARRAY
24034: EQUAL
24035: IFFALSE 24051
// begin result := i ;
24037: LD_ADDR_VAR 0 3
24041: PUSH
24042: LD_VAR 0 4
24046: ST_TO_ADDR
// exit ;
24047: POP
24048: POP
24049: GO 24055
// end ;
24051: GO 24016
24053: POP
24054: POP
// end ;
24055: LD_VAR 0 3
24059: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24060: LD_INT 0
24062: PPUSH
// vc_chassis := chassis ;
24063: LD_ADDR_OWVAR 37
24067: PUSH
24068: LD_VAR 0 1
24072: ST_TO_ADDR
// vc_engine := engine ;
24073: LD_ADDR_OWVAR 39
24077: PUSH
24078: LD_VAR 0 2
24082: ST_TO_ADDR
// vc_control := control ;
24083: LD_ADDR_OWVAR 38
24087: PUSH
24088: LD_VAR 0 3
24092: ST_TO_ADDR
// vc_weapon := weapon ;
24093: LD_ADDR_OWVAR 40
24097: PUSH
24098: LD_VAR 0 4
24102: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24103: LD_ADDR_OWVAR 41
24107: PUSH
24108: LD_VAR 0 5
24112: ST_TO_ADDR
// end ;
24113: LD_VAR 0 6
24117: RET
// export function WantPlant ( unit ) ; var task ; begin
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
// result := false ;
24122: LD_ADDR_VAR 0 2
24126: PUSH
24127: LD_INT 0
24129: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24130: LD_ADDR_VAR 0 3
24134: PUSH
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 437
24144: ST_TO_ADDR
// if task then
24145: LD_VAR 0 3
24149: IFFALSE 24177
// if task [ 1 ] [ 1 ] = p then
24151: LD_VAR 0 3
24155: PUSH
24156: LD_INT 1
24158: ARRAY
24159: PUSH
24160: LD_INT 1
24162: ARRAY
24163: PUSH
24164: LD_STRING p
24166: EQUAL
24167: IFFALSE 24177
// result := true ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: LD_INT 1
24176: ST_TO_ADDR
// end ;
24177: LD_VAR 0 2
24181: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24182: LD_INT 0
24184: PPUSH
24185: PPUSH
24186: PPUSH
24187: PPUSH
// if pos < 1 then
24188: LD_VAR 0 2
24192: PUSH
24193: LD_INT 1
24195: LESS
24196: IFFALSE 24200
// exit ;
24198: GO 24503
// if pos = 1 then
24200: LD_VAR 0 2
24204: PUSH
24205: LD_INT 1
24207: EQUAL
24208: IFFALSE 24241
// result := Replace ( arr , pos [ 1 ] , value ) else
24210: LD_ADDR_VAR 0 4
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: LD_VAR 0 2
24224: PUSH
24225: LD_INT 1
24227: ARRAY
24228: PPUSH
24229: LD_VAR 0 3
24233: PPUSH
24234: CALL_OW 1
24238: ST_TO_ADDR
24239: GO 24503
// begin tmp := arr ;
24241: LD_ADDR_VAR 0 6
24245: PUSH
24246: LD_VAR 0 1
24250: ST_TO_ADDR
// s_arr := [ tmp ] ;
24251: LD_ADDR_VAR 0 7
24255: PUSH
24256: LD_VAR 0 6
24260: PUSH
24261: EMPTY
24262: LIST
24263: ST_TO_ADDR
// for i = 1 to pos - 1 do
24264: LD_ADDR_VAR 0 5
24268: PUSH
24269: DOUBLE
24270: LD_INT 1
24272: DEC
24273: ST_TO_ADDR
24274: LD_VAR 0 2
24278: PUSH
24279: LD_INT 1
24281: MINUS
24282: PUSH
24283: FOR_TO
24284: IFFALSE 24329
// begin tmp := tmp [ pos [ i ] ] ;
24286: LD_ADDR_VAR 0 6
24290: PUSH
24291: LD_VAR 0 6
24295: PUSH
24296: LD_VAR 0 2
24300: PUSH
24301: LD_VAR 0 5
24305: ARRAY
24306: ARRAY
24307: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24308: LD_ADDR_VAR 0 7
24312: PUSH
24313: LD_VAR 0 7
24317: PUSH
24318: LD_VAR 0 6
24322: PUSH
24323: EMPTY
24324: LIST
24325: ADD
24326: ST_TO_ADDR
// end ;
24327: GO 24283
24329: POP
24330: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24331: LD_ADDR_VAR 0 6
24335: PUSH
24336: LD_VAR 0 6
24340: PPUSH
24341: LD_VAR 0 2
24345: PUSH
24346: LD_VAR 0 2
24350: ARRAY
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: CALL_OW 1
24361: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24362: LD_ADDR_VAR 0 7
24366: PUSH
24367: LD_VAR 0 7
24371: PPUSH
24372: LD_VAR 0 7
24376: PPUSH
24377: LD_VAR 0 6
24381: PPUSH
24382: CALL_OW 1
24386: ST_TO_ADDR
// for i = s_arr downto 2 do
24387: LD_ADDR_VAR 0 5
24391: PUSH
24392: DOUBLE
24393: LD_VAR 0 7
24397: INC
24398: ST_TO_ADDR
24399: LD_INT 2
24401: PUSH
24402: FOR_DOWNTO
24403: IFFALSE 24487
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24405: LD_ADDR_VAR 0 6
24409: PUSH
24410: LD_VAR 0 7
24414: PUSH
24415: LD_VAR 0 5
24419: PUSH
24420: LD_INT 1
24422: MINUS
24423: ARRAY
24424: PPUSH
24425: LD_VAR 0 2
24429: PUSH
24430: LD_VAR 0 5
24434: PUSH
24435: LD_INT 1
24437: MINUS
24438: ARRAY
24439: PPUSH
24440: LD_VAR 0 7
24444: PUSH
24445: LD_VAR 0 5
24449: ARRAY
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24456: LD_ADDR_VAR 0 7
24460: PUSH
24461: LD_VAR 0 7
24465: PPUSH
24466: LD_VAR 0 5
24470: PUSH
24471: LD_INT 1
24473: MINUS
24474: PPUSH
24475: LD_VAR 0 6
24479: PPUSH
24480: CALL_OW 1
24484: ST_TO_ADDR
// end ;
24485: GO 24402
24487: POP
24488: POP
// result := s_arr [ 1 ] ;
24489: LD_ADDR_VAR 0 4
24493: PUSH
24494: LD_VAR 0 7
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: ST_TO_ADDR
// end ; end ;
24503: LD_VAR 0 4
24507: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24508: LD_INT 0
24510: PPUSH
24511: PPUSH
// if not list then
24512: LD_VAR 0 1
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24612
// i := list [ pos1 ] ;
24521: LD_ADDR_VAR 0 5
24525: PUSH
24526: LD_VAR 0 1
24530: PUSH
24531: LD_VAR 0 2
24535: ARRAY
24536: ST_TO_ADDR
// if not i then
24537: LD_VAR 0 5
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24612
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24546: LD_ADDR_VAR 0 1
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 1
24565: PUSH
24566: LD_VAR 0 3
24570: ARRAY
24571: PPUSH
24572: CALL_OW 1
24576: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24577: LD_ADDR_VAR 0 1
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: LD_VAR 0 5
24596: PPUSH
24597: CALL_OW 1
24601: ST_TO_ADDR
// result := list ;
24602: LD_ADDR_VAR 0 4
24606: PUSH
24607: LD_VAR 0 1
24611: ST_TO_ADDR
// end ;
24612: LD_VAR 0 4
24616: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24617: LD_INT 0
24619: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24620: LD_ADDR_VAR 0 5
24624: PUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 250
24634: PPUSH
24635: LD_VAR 0 1
24639: PPUSH
24640: CALL_OW 251
24644: PPUSH
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_VAR 0 4
24659: PPUSH
24660: CALL 24670 0 5
24664: ST_TO_ADDR
// end ;
24665: LD_VAR 0 5
24669: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24670: LD_INT 0
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
// if not list then
24676: LD_VAR 0 3
24680: NOT
24681: IFFALSE 24685
// exit ;
24683: GO 25073
// result := [ ] ;
24685: LD_ADDR_VAR 0 6
24689: PUSH
24690: EMPTY
24691: ST_TO_ADDR
// for i in list do
24692: LD_ADDR_VAR 0 7
24696: PUSH
24697: LD_VAR 0 3
24701: PUSH
24702: FOR_IN
24703: IFFALSE 24905
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24705: LD_ADDR_VAR 0 9
24709: PUSH
24710: LD_VAR 0 7
24714: PPUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 2
24724: PPUSH
24725: CALL_OW 297
24729: ST_TO_ADDR
// if not result then
24730: LD_VAR 0 6
24734: NOT
24735: IFFALSE 24761
// result := [ [ i , tmp ] ] else
24737: LD_ADDR_VAR 0 6
24741: PUSH
24742: LD_VAR 0 7
24746: PUSH
24747: LD_VAR 0 9
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: ST_TO_ADDR
24759: GO 24903
// begin if result [ result ] [ 2 ] < tmp then
24761: LD_VAR 0 6
24765: PUSH
24766: LD_VAR 0 6
24770: ARRAY
24771: PUSH
24772: LD_INT 2
24774: ARRAY
24775: PUSH
24776: LD_VAR 0 9
24780: LESS
24781: IFFALSE 24823
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24783: LD_ADDR_VAR 0 6
24787: PUSH
24788: LD_VAR 0 6
24792: PPUSH
24793: LD_VAR 0 6
24797: PUSH
24798: LD_INT 1
24800: PLUS
24801: PPUSH
24802: LD_VAR 0 7
24806: PUSH
24807: LD_VAR 0 9
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 2
24820: ST_TO_ADDR
24821: GO 24903
// for j = 1 to result do
24823: LD_ADDR_VAR 0 8
24827: PUSH
24828: DOUBLE
24829: LD_INT 1
24831: DEC
24832: ST_TO_ADDR
24833: LD_VAR 0 6
24837: PUSH
24838: FOR_TO
24839: IFFALSE 24901
// begin if tmp < result [ j ] [ 2 ] then
24841: LD_VAR 0 9
24845: PUSH
24846: LD_VAR 0 6
24850: PUSH
24851: LD_VAR 0 8
24855: ARRAY
24856: PUSH
24857: LD_INT 2
24859: ARRAY
24860: LESS
24861: IFFALSE 24899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24863: LD_ADDR_VAR 0 6
24867: PUSH
24868: LD_VAR 0 6
24872: PPUSH
24873: LD_VAR 0 8
24877: PPUSH
24878: LD_VAR 0 7
24882: PUSH
24883: LD_VAR 0 9
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 2
24896: ST_TO_ADDR
// break ;
24897: GO 24901
// end ; end ;
24899: GO 24838
24901: POP
24902: POP
// end ; end ;
24903: GO 24702
24905: POP
24906: POP
// if result and not asc then
24907: LD_VAR 0 6
24911: PUSH
24912: LD_VAR 0 4
24916: NOT
24917: AND
24918: IFFALSE 24993
// begin tmp := result ;
24920: LD_ADDR_VAR 0 9
24924: PUSH
24925: LD_VAR 0 6
24929: ST_TO_ADDR
// for i = tmp downto 1 do
24930: LD_ADDR_VAR 0 7
24934: PUSH
24935: DOUBLE
24936: LD_VAR 0 9
24940: INC
24941: ST_TO_ADDR
24942: LD_INT 1
24944: PUSH
24945: FOR_DOWNTO
24946: IFFALSE 24991
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24948: LD_ADDR_VAR 0 6
24952: PUSH
24953: LD_VAR 0 6
24957: PPUSH
24958: LD_VAR 0 9
24962: PUSH
24963: LD_VAR 0 7
24967: MINUS
24968: PUSH
24969: LD_INT 1
24971: PLUS
24972: PPUSH
24973: LD_VAR 0 9
24977: PUSH
24978: LD_VAR 0 7
24982: ARRAY
24983: PPUSH
24984: CALL_OW 1
24988: ST_TO_ADDR
24989: GO 24945
24991: POP
24992: POP
// end ; tmp := [ ] ;
24993: LD_ADDR_VAR 0 9
24997: PUSH
24998: EMPTY
24999: ST_TO_ADDR
// if mode then
25000: LD_VAR 0 5
25004: IFFALSE 25073
// begin for i = 1 to result do
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: DOUBLE
25012: LD_INT 1
25014: DEC
25015: ST_TO_ADDR
25016: LD_VAR 0 6
25020: PUSH
25021: FOR_TO
25022: IFFALSE 25061
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25024: LD_ADDR_VAR 0 9
25028: PUSH
25029: LD_VAR 0 9
25033: PPUSH
25034: LD_VAR 0 7
25038: PPUSH
25039: LD_VAR 0 6
25043: PUSH
25044: LD_VAR 0 7
25048: ARRAY
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: PPUSH
25054: CALL_OW 1
25058: ST_TO_ADDR
25059: GO 25021
25061: POP
25062: POP
// result := tmp ;
25063: LD_ADDR_VAR 0 6
25067: PUSH
25068: LD_VAR 0 9
25072: ST_TO_ADDR
// end ; end ;
25073: LD_VAR 0 6
25077: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25078: LD_INT 0
25080: PPUSH
25081: PPUSH
25082: PPUSH
25083: PPUSH
25084: PPUSH
25085: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25086: LD_ADDR_VAR 0 5
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: ST_TO_ADDR
// if not x or not y then
25108: LD_VAR 0 2
25112: NOT
25113: PUSH
25114: LD_VAR 0 3
25118: NOT
25119: OR
25120: IFFALSE 25124
// exit ;
25122: GO 26770
// if not range then
25124: LD_VAR 0 4
25128: NOT
25129: IFFALSE 25139
// range := 10 ;
25131: LD_ADDR_VAR 0 4
25135: PUSH
25136: LD_INT 10
25138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25139: LD_ADDR_VAR 0 8
25143: PUSH
25144: LD_INT 81
25146: PUSH
25147: LD_VAR 0 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 92
25158: PUSH
25159: LD_VAR 0 2
25163: PUSH
25164: LD_VAR 0 3
25168: PUSH
25169: LD_VAR 0 4
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 3
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 8
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 26770
// for i in tmp do
25216: LD_ADDR_VAR 0 6
25220: PUSH
25221: LD_VAR 0 8
25225: PUSH
25226: FOR_IN
25227: IFFALSE 26745
// begin points := [ 0 , 0 , 0 ] ;
25229: LD_ADDR_VAR 0 9
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: ST_TO_ADDR
// bpoints := 1 ;
25248: LD_ADDR_VAR 0 10
25252: PUSH
25253: LD_INT 1
25255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25256: LD_VAR 0 6
25260: PPUSH
25261: CALL_OW 247
25265: PUSH
25266: LD_INT 1
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25852
25274: POP
// begin if GetClass ( i ) = 1 then
25275: LD_VAR 0 6
25279: PPUSH
25280: CALL_OW 257
25284: PUSH
25285: LD_INT 1
25287: EQUAL
25288: IFFALSE 25309
// points := [ 10 , 5 , 3 ] ;
25290: LD_ADDR_VAR 0 9
25294: PUSH
25295: LD_INT 10
25297: PUSH
25298: LD_INT 5
25300: PUSH
25301: LD_INT 3
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25309: LD_VAR 0 6
25313: PPUSH
25314: CALL_OW 257
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 3
25324: PUSH
25325: LD_INT 4
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: LIST
25332: IN
25333: IFFALSE 25354
// points := [ 3 , 2 , 1 ] ;
25335: LD_ADDR_VAR 0 9
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25354: LD_VAR 0 6
25358: PPUSH
25359: CALL_OW 257
25363: PUSH
25364: LD_INT 5
25366: EQUAL
25367: IFFALSE 25388
// points := [ 130 , 5 , 2 ] ;
25369: LD_ADDR_VAR 0 9
25373: PUSH
25374: LD_INT 130
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25388: LD_VAR 0 6
25392: PPUSH
25393: CALL_OW 257
25397: PUSH
25398: LD_INT 8
25400: EQUAL
25401: IFFALSE 25422
// points := [ 35 , 35 , 30 ] ;
25403: LD_ADDR_VAR 0 9
25407: PUSH
25408: LD_INT 35
25410: PUSH
25411: LD_INT 35
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25422: LD_VAR 0 6
25426: PPUSH
25427: CALL_OW 257
25431: PUSH
25432: LD_INT 9
25434: EQUAL
25435: IFFALSE 25456
// points := [ 20 , 55 , 40 ] ;
25437: LD_ADDR_VAR 0 9
25441: PUSH
25442: LD_INT 20
25444: PUSH
25445: LD_INT 55
25447: PUSH
25448: LD_INT 40
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25456: LD_VAR 0 6
25460: PPUSH
25461: CALL_OW 257
25465: PUSH
25466: LD_INT 12
25468: PUSH
25469: LD_INT 16
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: IN
25476: IFFALSE 25497
// points := [ 5 , 3 , 2 ] ;
25478: LD_ADDR_VAR 0 9
25482: PUSH
25483: LD_INT 5
25485: PUSH
25486: LD_INT 3
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25497: LD_VAR 0 6
25501: PPUSH
25502: CALL_OW 257
25506: PUSH
25507: LD_INT 17
25509: EQUAL
25510: IFFALSE 25531
// points := [ 100 , 50 , 75 ] ;
25512: LD_ADDR_VAR 0 9
25516: PUSH
25517: LD_INT 100
25519: PUSH
25520: LD_INT 50
25522: PUSH
25523: LD_INT 75
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25531: LD_VAR 0 6
25535: PPUSH
25536: CALL_OW 257
25540: PUSH
25541: LD_INT 15
25543: EQUAL
25544: IFFALSE 25565
// points := [ 10 , 5 , 3 ] ;
25546: LD_ADDR_VAR 0 9
25550: PUSH
25551: LD_INT 10
25553: PUSH
25554: LD_INT 5
25556: PUSH
25557: LD_INT 3
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25565: LD_VAR 0 6
25569: PPUSH
25570: CALL_OW 257
25574: PUSH
25575: LD_INT 14
25577: EQUAL
25578: IFFALSE 25599
// points := [ 10 , 0 , 0 ] ;
25580: LD_ADDR_VAR 0 9
25584: PUSH
25585: LD_INT 10
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25599: LD_VAR 0 6
25603: PPUSH
25604: CALL_OW 257
25608: PUSH
25609: LD_INT 11
25611: EQUAL
25612: IFFALSE 25633
// points := [ 30 , 10 , 5 ] ;
25614: LD_ADDR_VAR 0 9
25618: PUSH
25619: LD_INT 30
25621: PUSH
25622: LD_INT 10
25624: PUSH
25625: LD_INT 5
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25633: LD_VAR 0 1
25637: PPUSH
25638: LD_INT 5
25640: PPUSH
25641: CALL_OW 321
25645: PUSH
25646: LD_INT 2
25648: EQUAL
25649: IFFALSE 25666
// bpoints := bpoints * 1.8 ;
25651: LD_ADDR_VAR 0 10
25655: PUSH
25656: LD_VAR 0 10
25660: PUSH
25661: LD_REAL  1.80000000000000E+0000
25664: MUL
25665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25666: LD_VAR 0 6
25670: PPUSH
25671: CALL_OW 257
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 4
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: IN
25694: PUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: LD_INT 51
25702: PPUSH
25703: CALL_OW 321
25707: PUSH
25708: LD_INT 2
25710: EQUAL
25711: AND
25712: IFFALSE 25729
// bpoints := bpoints * 1.2 ;
25714: LD_ADDR_VAR 0 10
25718: PUSH
25719: LD_VAR 0 10
25723: PUSH
25724: LD_REAL  1.20000000000000E+0000
25727: MUL
25728: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25729: LD_VAR 0 6
25733: PPUSH
25734: CALL_OW 257
25738: PUSH
25739: LD_INT 5
25741: PUSH
25742: LD_INT 7
25744: PUSH
25745: LD_INT 9
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: IN
25753: PUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: LD_INT 52
25761: PPUSH
25762: CALL_OW 321
25766: PUSH
25767: LD_INT 2
25769: EQUAL
25770: AND
25771: IFFALSE 25788
// bpoints := bpoints * 1.5 ;
25773: LD_ADDR_VAR 0 10
25777: PUSH
25778: LD_VAR 0 10
25782: PUSH
25783: LD_REAL  1.50000000000000E+0000
25786: MUL
25787: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25788: LD_VAR 0 1
25792: PPUSH
25793: LD_INT 66
25795: PPUSH
25796: CALL_OW 321
25800: PUSH
25801: LD_INT 2
25803: EQUAL
25804: IFFALSE 25821
// bpoints := bpoints * 1.1 ;
25806: LD_ADDR_VAR 0 10
25810: PUSH
25811: LD_VAR 0 10
25815: PUSH
25816: LD_REAL  1.10000000000000E+0000
25819: MUL
25820: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25821: LD_ADDR_VAR 0 10
25825: PUSH
25826: LD_VAR 0 10
25830: PUSH
25831: LD_VAR 0 6
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 259
25843: PUSH
25844: LD_REAL  1.15000000000000E+0000
25847: MUL
25848: MUL
25849: ST_TO_ADDR
// end ; unit_vehicle :
25850: GO 26674
25852: LD_INT 2
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 26662
25860: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25861: LD_VAR 0 6
25865: PPUSH
25866: CALL_OW 264
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 42
25876: PUSH
25877: LD_INT 24
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: IN
25885: IFFALSE 25906
// points := [ 25 , 5 , 3 ] ;
25887: LD_ADDR_VAR 0 9
25891: PUSH
25892: LD_INT 25
25894: PUSH
25895: LD_INT 5
25897: PUSH
25898: LD_INT 3
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25906: LD_VAR 0 6
25910: PPUSH
25911: CALL_OW 264
25915: PUSH
25916: LD_INT 4
25918: PUSH
25919: LD_INT 43
25921: PUSH
25922: LD_INT 25
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: IN
25930: IFFALSE 25951
// points := [ 40 , 15 , 5 ] ;
25932: LD_ADDR_VAR 0 9
25936: PUSH
25937: LD_INT 40
25939: PUSH
25940: LD_INT 15
25942: PUSH
25943: LD_INT 5
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25951: LD_VAR 0 6
25955: PPUSH
25956: CALL_OW 264
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: LD_INT 23
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: IN
25971: IFFALSE 25992
// points := [ 7 , 25 , 8 ] ;
25973: LD_ADDR_VAR 0 9
25977: PUSH
25978: LD_INT 7
25980: PUSH
25981: LD_INT 25
25983: PUSH
25984: LD_INT 8
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: LIST
25991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
25992: LD_VAR 0 6
25996: PPUSH
25997: CALL_OW 264
26001: PUSH
26002: LD_INT 5
26004: PUSH
26005: LD_INT 27
26007: PUSH
26008: LD_INT 44
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: IN
26016: IFFALSE 26037
// points := [ 14 , 50 , 16 ] ;
26018: LD_ADDR_VAR 0 9
26022: PUSH
26023: LD_INT 14
26025: PUSH
26026: LD_INT 50
26028: PUSH
26029: LD_INT 16
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26037: LD_VAR 0 6
26041: PPUSH
26042: CALL_OW 264
26046: PUSH
26047: LD_INT 6
26049: PUSH
26050: LD_INT 46
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: IN
26057: IFFALSE 26078
// points := [ 32 , 120 , 70 ] ;
26059: LD_ADDR_VAR 0 9
26063: PUSH
26064: LD_INT 32
26066: PUSH
26067: LD_INT 120
26069: PUSH
26070: LD_INT 70
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26078: LD_VAR 0 6
26082: PPUSH
26083: CALL_OW 264
26087: PUSH
26088: LD_INT 7
26090: PUSH
26091: LD_INT 28
26093: PUSH
26094: LD_INT 45
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: IN
26102: IFFALSE 26123
// points := [ 35 , 20 , 45 ] ;
26104: LD_ADDR_VAR 0 9
26108: PUSH
26109: LD_INT 35
26111: PUSH
26112: LD_INT 20
26114: PUSH
26115: LD_INT 45
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26123: LD_VAR 0 6
26127: PPUSH
26128: CALL_OW 264
26132: PUSH
26133: LD_INT 47
26135: PUSH
26136: EMPTY
26137: LIST
26138: IN
26139: IFFALSE 26160
// points := [ 67 , 45 , 75 ] ;
26141: LD_ADDR_VAR 0 9
26145: PUSH
26146: LD_INT 67
26148: PUSH
26149: LD_INT 45
26151: PUSH
26152: LD_INT 75
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26160: LD_VAR 0 6
26164: PPUSH
26165: CALL_OW 264
26169: PUSH
26170: LD_INT 26
26172: PUSH
26173: EMPTY
26174: LIST
26175: IN
26176: IFFALSE 26197
// points := [ 120 , 30 , 80 ] ;
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_INT 120
26185: PUSH
26186: LD_INT 30
26188: PUSH
26189: LD_INT 80
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 264
26206: PUSH
26207: LD_INT 22
26209: PUSH
26210: EMPTY
26211: LIST
26212: IN
26213: IFFALSE 26234
// points := [ 40 , 1 , 1 ] ;
26215: LD_ADDR_VAR 0 9
26219: PUSH
26220: LD_INT 40
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26234: LD_VAR 0 6
26238: PPUSH
26239: CALL_OW 264
26243: PUSH
26244: LD_INT 29
26246: PUSH
26247: EMPTY
26248: LIST
26249: IN
26250: IFFALSE 26271
// points := [ 70 , 200 , 400 ] ;
26252: LD_ADDR_VAR 0 9
26256: PUSH
26257: LD_INT 70
26259: PUSH
26260: LD_INT 200
26262: PUSH
26263: LD_INT 400
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26271: LD_VAR 0 6
26275: PPUSH
26276: CALL_OW 264
26280: PUSH
26281: LD_INT 14
26283: PUSH
26284: LD_INT 53
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: IN
26291: IFFALSE 26312
// points := [ 40 , 10 , 20 ] ;
26293: LD_ADDR_VAR 0 9
26297: PUSH
26298: LD_INT 40
26300: PUSH
26301: LD_INT 10
26303: PUSH
26304: LD_INT 20
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26312: LD_VAR 0 6
26316: PPUSH
26317: CALL_OW 264
26321: PUSH
26322: LD_INT 9
26324: PUSH
26325: EMPTY
26326: LIST
26327: IN
26328: IFFALSE 26349
// points := [ 5 , 70 , 20 ] ;
26330: LD_ADDR_VAR 0 9
26334: PUSH
26335: LD_INT 5
26337: PUSH
26338: LD_INT 70
26340: PUSH
26341: LD_INT 20
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26349: LD_VAR 0 6
26353: PPUSH
26354: CALL_OW 264
26358: PUSH
26359: LD_INT 10
26361: PUSH
26362: EMPTY
26363: LIST
26364: IN
26365: IFFALSE 26386
// points := [ 35 , 110 , 70 ] ;
26367: LD_ADDR_VAR 0 9
26371: PUSH
26372: LD_INT 35
26374: PUSH
26375: LD_INT 110
26377: PUSH
26378: LD_INT 70
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26386: LD_VAR 0 6
26390: PPUSH
26391: CALL_OW 265
26395: PUSH
26396: LD_INT 25
26398: EQUAL
26399: IFFALSE 26420
// points := [ 80 , 65 , 100 ] ;
26401: LD_ADDR_VAR 0 9
26405: PUSH
26406: LD_INT 80
26408: PUSH
26409: LD_INT 65
26411: PUSH
26412: LD_INT 100
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26420: LD_VAR 0 6
26424: PPUSH
26425: CALL_OW 263
26429: PUSH
26430: LD_INT 1
26432: EQUAL
26433: IFFALSE 26468
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26435: LD_ADDR_VAR 0 10
26439: PUSH
26440: LD_VAR 0 10
26444: PUSH
26445: LD_VAR 0 6
26449: PPUSH
26450: CALL_OW 311
26454: PPUSH
26455: LD_INT 3
26457: PPUSH
26458: CALL_OW 259
26462: PUSH
26463: LD_INT 4
26465: MUL
26466: MUL
26467: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26468: LD_VAR 0 6
26472: PPUSH
26473: CALL_OW 263
26477: PUSH
26478: LD_INT 2
26480: EQUAL
26481: IFFALSE 26532
// begin j := IsControledBy ( i ) ;
26483: LD_ADDR_VAR 0 7
26487: PUSH
26488: LD_VAR 0 6
26492: PPUSH
26493: CALL_OW 312
26497: ST_TO_ADDR
// if j then
26498: LD_VAR 0 7
26502: IFFALSE 26532
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26504: LD_ADDR_VAR 0 10
26508: PUSH
26509: LD_VAR 0 10
26513: PUSH
26514: LD_VAR 0 7
26518: PPUSH
26519: LD_INT 3
26521: PPUSH
26522: CALL_OW 259
26526: PUSH
26527: LD_INT 3
26529: MUL
26530: MUL
26531: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 264
26541: PUSH
26542: LD_INT 5
26544: PUSH
26545: LD_INT 6
26547: PUSH
26548: LD_INT 46
26550: PUSH
26551: LD_INT 44
26553: PUSH
26554: LD_INT 47
26556: PUSH
26557: LD_INT 45
26559: PUSH
26560: LD_INT 28
26562: PUSH
26563: LD_INT 7
26565: PUSH
26566: LD_INT 27
26568: PUSH
26569: LD_INT 29
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: IN
26584: PUSH
26585: LD_VAR 0 1
26589: PPUSH
26590: LD_INT 52
26592: PPUSH
26593: CALL_OW 321
26597: PUSH
26598: LD_INT 2
26600: EQUAL
26601: AND
26602: IFFALSE 26619
// bpoints := bpoints * 1.2 ;
26604: LD_ADDR_VAR 0 10
26608: PUSH
26609: LD_VAR 0 10
26613: PUSH
26614: LD_REAL  1.20000000000000E+0000
26617: MUL
26618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26619: LD_VAR 0 6
26623: PPUSH
26624: CALL_OW 264
26628: PUSH
26629: LD_INT 6
26631: PUSH
26632: LD_INT 46
26634: PUSH
26635: LD_INT 47
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: IN
26643: IFFALSE 26660
// bpoints := bpoints * 1.2 ;
26645: LD_ADDR_VAR 0 10
26649: PUSH
26650: LD_VAR 0 10
26654: PUSH
26655: LD_REAL  1.20000000000000E+0000
26658: MUL
26659: ST_TO_ADDR
// end ; unit_building :
26660: GO 26674
26662: LD_INT 3
26664: DOUBLE
26665: EQUAL
26666: IFTRUE 26670
26668: GO 26673
26670: POP
// ; end ;
26671: GO 26674
26673: POP
// for j = 1 to 3 do
26674: LD_ADDR_VAR 0 7
26678: PUSH
26679: DOUBLE
26680: LD_INT 1
26682: DEC
26683: ST_TO_ADDR
26684: LD_INT 3
26686: PUSH
26687: FOR_TO
26688: IFFALSE 26741
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26690: LD_ADDR_VAR 0 5
26694: PUSH
26695: LD_VAR 0 5
26699: PPUSH
26700: LD_VAR 0 7
26704: PPUSH
26705: LD_VAR 0 5
26709: PUSH
26710: LD_VAR 0 7
26714: ARRAY
26715: PUSH
26716: LD_VAR 0 9
26720: PUSH
26721: LD_VAR 0 7
26725: ARRAY
26726: PUSH
26727: LD_VAR 0 10
26731: MUL
26732: PLUS
26733: PPUSH
26734: CALL_OW 1
26738: ST_TO_ADDR
26739: GO 26687
26741: POP
26742: POP
// end ;
26743: GO 25226
26745: POP
26746: POP
// result := Replace ( result , 4 , tmp ) ;
26747: LD_ADDR_VAR 0 5
26751: PUSH
26752: LD_VAR 0 5
26756: PPUSH
26757: LD_INT 4
26759: PPUSH
26760: LD_VAR 0 8
26764: PPUSH
26765: CALL_OW 1
26769: ST_TO_ADDR
// end ;
26770: LD_VAR 0 5
26774: RET
// export function DangerAtRange ( unit , range ) ; begin
26775: LD_INT 0
26777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26778: LD_ADDR_VAR 0 3
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 255
26792: PPUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 250
26802: PPUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 251
26812: PPUSH
26813: LD_VAR 0 2
26817: PPUSH
26818: CALL 25078 0 4
26822: ST_TO_ADDR
// end ;
26823: LD_VAR 0 3
26827: RET
// export function DangerInArea ( side , area ) ; begin
26828: LD_INT 0
26830: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_VAR 0 2
26840: PPUSH
26841: LD_INT 81
26843: PUSH
26844: LD_VAR 0 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PPUSH
26853: CALL_OW 70
26857: ST_TO_ADDR
// end ;
26858: LD_VAR 0 3
26862: RET
// export function IsExtension ( b ) ; begin
26863: LD_INT 0
26865: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26866: LD_ADDR_VAR 0 2
26870: PUSH
26871: LD_VAR 0 1
26875: PUSH
26876: LD_INT 23
26878: PUSH
26879: LD_INT 20
26881: PUSH
26882: LD_INT 22
26884: PUSH
26885: LD_INT 17
26887: PUSH
26888: LD_INT 24
26890: PUSH
26891: LD_INT 21
26893: PUSH
26894: LD_INT 19
26896: PUSH
26897: LD_INT 16
26899: PUSH
26900: LD_INT 25
26902: PUSH
26903: LD_INT 18
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: IN
26918: ST_TO_ADDR
// end ;
26919: LD_VAR 0 2
26923: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26924: LD_INT 0
26926: PPUSH
26927: PPUSH
26928: PPUSH
// result := [ ] ;
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: EMPTY
26935: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26936: LD_ADDR_VAR 0 4
26940: PUSH
26941: LD_VAR 0 2
26945: PPUSH
26946: LD_INT 21
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PPUSH
26956: CALL_OW 70
26960: ST_TO_ADDR
// if not tmp then
26961: LD_VAR 0 4
26965: NOT
26966: IFFALSE 26970
// exit ;
26968: GO 27028
// for i in tmp do
26970: LD_ADDR_VAR 0 5
26974: PUSH
26975: LD_VAR 0 4
26979: PUSH
26980: FOR_IN
26981: IFFALSE 27016
// if GetBase ( i ) <> base then
26983: LD_VAR 0 5
26987: PPUSH
26988: CALL_OW 274
26992: PUSH
26993: LD_VAR 0 1
26997: NONEQUAL
26998: IFFALSE 27014
// ComLinkToBase ( base , i ) ;
27000: LD_VAR 0 1
27004: PPUSH
27005: LD_VAR 0 5
27009: PPUSH
27010: CALL_OW 169
27014: GO 26980
27016: POP
27017: POP
// result := tmp ;
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_VAR 0 4
27027: ST_TO_ADDR
// end ;
27028: LD_VAR 0 3
27032: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27033: LD_INT 0
27035: PPUSH
27036: PPUSH
// if BuildingStatus ( b ) = bs_build then
27037: LD_VAR 0 2
27041: PPUSH
27042: CALL_OW 461
27046: PUSH
27047: LD_INT 1
27049: EQUAL
27050: IFFALSE 27110
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_STRING h
27059: PUSH
27060: LD_VAR 0 2
27064: PPUSH
27065: CALL_OW 250
27069: PUSH
27070: LD_VAR 0 2
27074: PPUSH
27075: CALL_OW 251
27079: PUSH
27080: LD_VAR 0 2
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: PPUSH
27106: CALL_OW 446
// end ;
27110: LD_VAR 0 3
27114: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27115: LD_INT 0
27117: PPUSH
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
27122: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27123: LD_VAR 0 1
27127: NOT
27128: PUSH
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 263
27138: PUSH
27139: LD_INT 2
27141: EQUAL
27142: NOT
27143: OR
27144: IFFALSE 27148
// exit ;
27146: GO 27464
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27148: LD_ADDR_VAR 0 6
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL_OW 255
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 30
27175: PUSH
27176: LD_INT 36
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 34
27185: PUSH
27186: LD_INT 31
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PPUSH
27202: CALL_OW 69
27206: ST_TO_ADDR
// if not tmp then
27207: LD_VAR 0 6
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27464
// result := [ ] ;
27216: LD_ADDR_VAR 0 2
27220: PUSH
27221: EMPTY
27222: ST_TO_ADDR
// for i in tmp do
27223: LD_ADDR_VAR 0 3
27227: PUSH
27228: LD_VAR 0 6
27232: PUSH
27233: FOR_IN
27234: IFFALSE 27305
// begin t := UnitsInside ( i ) ;
27236: LD_ADDR_VAR 0 4
27240: PUSH
27241: LD_VAR 0 3
27245: PPUSH
27246: CALL_OW 313
27250: ST_TO_ADDR
// if t then
27251: LD_VAR 0 4
27255: IFFALSE 27303
// for j in t do
27257: LD_ADDR_VAR 0 7
27261: PUSH
27262: LD_VAR 0 4
27266: PUSH
27267: FOR_IN
27268: IFFALSE 27301
// result := Insert ( result , result + 1 , j ) ;
27270: LD_ADDR_VAR 0 2
27274: PUSH
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_VAR 0 2
27284: PUSH
27285: LD_INT 1
27287: PLUS
27288: PPUSH
27289: LD_VAR 0 7
27293: PPUSH
27294: CALL_OW 2
27298: ST_TO_ADDR
27299: GO 27267
27301: POP
27302: POP
// end ;
27303: GO 27233
27305: POP
27306: POP
// if not result then
27307: LD_VAR 0 2
27311: NOT
27312: IFFALSE 27316
// exit ;
27314: GO 27464
// mech := result [ 1 ] ;
27316: LD_ADDR_VAR 0 5
27320: PUSH
27321: LD_VAR 0 2
27325: PUSH
27326: LD_INT 1
27328: ARRAY
27329: ST_TO_ADDR
// if result > 1 then
27330: LD_VAR 0 2
27334: PUSH
27335: LD_INT 1
27337: GREATER
27338: IFFALSE 27450
// for i = 2 to result do
27340: LD_ADDR_VAR 0 3
27344: PUSH
27345: DOUBLE
27346: LD_INT 2
27348: DEC
27349: ST_TO_ADDR
27350: LD_VAR 0 2
27354: PUSH
27355: FOR_TO
27356: IFFALSE 27448
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27358: LD_ADDR_VAR 0 4
27362: PUSH
27363: LD_VAR 0 2
27367: PUSH
27368: LD_VAR 0 3
27372: ARRAY
27373: PPUSH
27374: LD_INT 3
27376: PPUSH
27377: CALL_OW 259
27381: PUSH
27382: LD_VAR 0 2
27386: PUSH
27387: LD_VAR 0 3
27391: ARRAY
27392: PPUSH
27393: CALL_OW 432
27397: MINUS
27398: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27399: LD_VAR 0 4
27403: PUSH
27404: LD_VAR 0 5
27408: PPUSH
27409: LD_INT 3
27411: PPUSH
27412: CALL_OW 259
27416: PUSH
27417: LD_VAR 0 5
27421: PPUSH
27422: CALL_OW 432
27426: MINUS
27427: GREATEREQUAL
27428: IFFALSE 27446
// mech := result [ i ] ;
27430: LD_ADDR_VAR 0 5
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 3
27444: ARRAY
27445: ST_TO_ADDR
// end ;
27446: GO 27355
27448: POP
27449: POP
// ComLinkTo ( vehicle , mech ) ;
27450: LD_VAR 0 1
27454: PPUSH
27455: LD_VAR 0 5
27459: PPUSH
27460: CALL_OW 135
// end ;
27464: LD_VAR 0 2
27468: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
27473: PPUSH
27474: PPUSH
27475: PPUSH
27476: PPUSH
27477: PPUSH
27478: PPUSH
27479: PPUSH
27480: PPUSH
27481: PPUSH
27482: PPUSH
27483: PPUSH
// result := [ ] ;
27484: LD_ADDR_VAR 0 7
27488: PUSH
27489: EMPTY
27490: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL_OW 266
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: IN
27511: NOT
27512: IFFALSE 27516
// exit ;
27514: GO 29147
// if name then
27516: LD_VAR 0 3
27520: IFFALSE 27536
// SetBName ( base_dep , name ) ;
27522: LD_VAR 0 1
27526: PPUSH
27527: LD_VAR 0 3
27531: PPUSH
27532: CALL_OW 500
// base := GetBase ( base_dep ) ;
27536: LD_ADDR_VAR 0 15
27540: PUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 274
27550: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27551: LD_ADDR_VAR 0 16
27555: PUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 255
27565: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27566: LD_ADDR_VAR 0 17
27570: PUSH
27571: LD_VAR 0 1
27575: PPUSH
27576: CALL_OW 248
27580: ST_TO_ADDR
// if sources then
27581: LD_VAR 0 5
27585: IFFALSE 27632
// for i = 1 to 3 do
27587: LD_ADDR_VAR 0 8
27591: PUSH
27592: DOUBLE
27593: LD_INT 1
27595: DEC
27596: ST_TO_ADDR
27597: LD_INT 3
27599: PUSH
27600: FOR_TO
27601: IFFALSE 27630
// AddResourceType ( base , i , sources [ i ] ) ;
27603: LD_VAR 0 15
27607: PPUSH
27608: LD_VAR 0 8
27612: PPUSH
27613: LD_VAR 0 5
27617: PUSH
27618: LD_VAR 0 8
27622: ARRAY
27623: PPUSH
27624: CALL_OW 276
27628: GO 27600
27630: POP
27631: POP
// buildings := GetBaseBuildings ( base , area ) ;
27632: LD_ADDR_VAR 0 18
27636: PUSH
27637: LD_VAR 0 15
27641: PPUSH
27642: LD_VAR 0 2
27646: PPUSH
27647: CALL 26924 0 2
27651: ST_TO_ADDR
// InitHc ;
27652: CALL_OW 19
// InitUc ;
27656: CALL_OW 18
// uc_side := side ;
27660: LD_ADDR_OWVAR 20
27664: PUSH
27665: LD_VAR 0 16
27669: ST_TO_ADDR
// uc_nation := nation ;
27670: LD_ADDR_OWVAR 21
27674: PUSH
27675: LD_VAR 0 17
27679: ST_TO_ADDR
// if buildings then
27680: LD_VAR 0 18
27684: IFFALSE 29006
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27686: LD_ADDR_VAR 0 19
27690: PUSH
27691: LD_VAR 0 18
27695: PPUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 30
27701: PUSH
27702: LD_INT 29
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 30
27711: PUSH
27712: LD_INT 30
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 72
27728: ST_TO_ADDR
// if tmp then
27729: LD_VAR 0 19
27733: IFFALSE 27781
// for i in tmp do
27735: LD_ADDR_VAR 0 8
27739: PUSH
27740: LD_VAR 0 19
27744: PUSH
27745: FOR_IN
27746: IFFALSE 27779
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27748: LD_VAR 0 8
27752: PPUSH
27753: CALL_OW 250
27757: PPUSH
27758: LD_VAR 0 8
27762: PPUSH
27763: CALL_OW 251
27767: PPUSH
27768: LD_VAR 0 16
27772: PPUSH
27773: CALL_OW 441
27777: GO 27745
27779: POP
27780: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27781: LD_VAR 0 18
27785: PPUSH
27786: LD_INT 2
27788: PUSH
27789: LD_INT 30
27791: PUSH
27792: LD_INT 32
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 30
27801: PUSH
27802: LD_INT 33
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: PPUSH
27814: CALL_OW 72
27818: IFFALSE 27906
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27820: LD_ADDR_VAR 0 8
27824: PUSH
27825: LD_VAR 0 18
27829: PPUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 30
27835: PUSH
27836: LD_INT 32
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 30
27845: PUSH
27846: LD_INT 33
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 72
27862: PUSH
27863: FOR_IN
27864: IFFALSE 27904
// begin if not GetBWeapon ( i ) then
27866: LD_VAR 0 8
27870: PPUSH
27871: CALL_OW 269
27875: NOT
27876: IFFALSE 27902
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27878: LD_VAR 0 8
27882: PPUSH
27883: LD_VAR 0 8
27887: PPUSH
27888: LD_VAR 0 2
27892: PPUSH
27893: CALL 29152 0 2
27897: PPUSH
27898: CALL_OW 431
// end ;
27902: GO 27863
27904: POP
27905: POP
// end ; for i = 1 to personel do
27906: LD_ADDR_VAR 0 8
27910: PUSH
27911: DOUBLE
27912: LD_INT 1
27914: DEC
27915: ST_TO_ADDR
27916: LD_VAR 0 6
27920: PUSH
27921: FOR_TO
27922: IFFALSE 28986
// begin if i > 4 then
27924: LD_VAR 0 8
27928: PUSH
27929: LD_INT 4
27931: GREATER
27932: IFFALSE 27936
// break ;
27934: GO 28986
// case i of 1 :
27936: LD_VAR 0 8
27940: PUSH
27941: LD_INT 1
27943: DOUBLE
27944: EQUAL
27945: IFTRUE 27949
27947: GO 28029
27949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27950: LD_ADDR_VAR 0 12
27954: PUSH
27955: LD_VAR 0 18
27959: PPUSH
27960: LD_INT 22
27962: PUSH
27963: LD_VAR 0 16
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 58
27974: PUSH
27975: EMPTY
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: LD_INT 30
27983: PUSH
27984: LD_INT 32
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 30
27993: PUSH
27994: LD_INT 4
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: LD_INT 5
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: PPUSH
28022: CALL_OW 72
28026: ST_TO_ADDR
28027: GO 28251
28029: LD_INT 2
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28099
28037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28038: LD_ADDR_VAR 0 12
28042: PUSH
28043: LD_VAR 0 18
28047: PPUSH
28048: LD_INT 22
28050: PUSH
28051: LD_VAR 0 16
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 30
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 72
28096: ST_TO_ADDR
28097: GO 28251
28099: LD_INT 3
28101: DOUBLE
28102: EQUAL
28103: IFTRUE 28107
28105: GO 28169
28107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28108: LD_ADDR_VAR 0 12
28112: PUSH
28113: LD_VAR 0 18
28117: PPUSH
28118: LD_INT 22
28120: PUSH
28121: LD_VAR 0 16
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 30
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 72
28166: ST_TO_ADDR
28167: GO 28251
28169: LD_INT 4
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28250
28177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28178: LD_ADDR_VAR 0 12
28182: PUSH
28183: LD_VAR 0 18
28187: PPUSH
28188: LD_INT 22
28190: PUSH
28191: LD_VAR 0 16
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 30
28205: PUSH
28206: LD_INT 6
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 30
28215: PUSH
28216: LD_INT 7
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 30
28225: PUSH
28226: LD_INT 8
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 72
28247: ST_TO_ADDR
28248: GO 28251
28250: POP
// if i = 1 then
28251: LD_VAR 0 8
28255: PUSH
28256: LD_INT 1
28258: EQUAL
28259: IFFALSE 28370
// begin tmp := [ ] ;
28261: LD_ADDR_VAR 0 19
28265: PUSH
28266: EMPTY
28267: ST_TO_ADDR
// for j in f do
28268: LD_ADDR_VAR 0 9
28272: PUSH
28273: LD_VAR 0 12
28277: PUSH
28278: FOR_IN
28279: IFFALSE 28352
// if GetBType ( j ) = b_bunker then
28281: LD_VAR 0 9
28285: PPUSH
28286: CALL_OW 266
28290: PUSH
28291: LD_INT 32
28293: EQUAL
28294: IFFALSE 28321
// tmp := Insert ( tmp , 1 , j ) else
28296: LD_ADDR_VAR 0 19
28300: PUSH
28301: LD_VAR 0 19
28305: PPUSH
28306: LD_INT 1
28308: PPUSH
28309: LD_VAR 0 9
28313: PPUSH
28314: CALL_OW 2
28318: ST_TO_ADDR
28319: GO 28350
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28321: LD_ADDR_VAR 0 19
28325: PUSH
28326: LD_VAR 0 19
28330: PPUSH
28331: LD_VAR 0 19
28335: PUSH
28336: LD_INT 1
28338: PLUS
28339: PPUSH
28340: LD_VAR 0 9
28344: PPUSH
28345: CALL_OW 2
28349: ST_TO_ADDR
28350: GO 28278
28352: POP
28353: POP
// if tmp then
28354: LD_VAR 0 19
28358: IFFALSE 28370
// f := tmp ;
28360: LD_ADDR_VAR 0 12
28364: PUSH
28365: LD_VAR 0 19
28369: ST_TO_ADDR
// end ; x := personel [ i ] ;
28370: LD_ADDR_VAR 0 13
28374: PUSH
28375: LD_VAR 0 6
28379: PUSH
28380: LD_VAR 0 8
28384: ARRAY
28385: ST_TO_ADDR
// if x = - 1 then
28386: LD_VAR 0 13
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: EQUAL
28395: IFFALSE 28604
// begin for j in f do
28397: LD_ADDR_VAR 0 9
28401: PUSH
28402: LD_VAR 0 12
28406: PUSH
28407: FOR_IN
28408: IFFALSE 28600
// repeat InitHc ;
28410: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28414: LD_VAR 0 9
28418: PPUSH
28419: CALL_OW 266
28423: PUSH
28424: LD_INT 5
28426: EQUAL
28427: IFFALSE 28497
// begin if UnitsInside ( j ) < 3 then
28429: LD_VAR 0 9
28433: PPUSH
28434: CALL_OW 313
28438: PUSH
28439: LD_INT 3
28441: LESS
28442: IFFALSE 28478
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28444: LD_INT 0
28446: PPUSH
28447: LD_INT 5
28449: PUSH
28450: LD_INT 8
28452: PUSH
28453: LD_INT 9
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: PUSH
28461: LD_VAR 0 17
28465: ARRAY
28466: PPUSH
28467: LD_VAR 0 4
28471: PPUSH
28472: CALL_OW 380
28476: GO 28495
// PrepareHuman ( false , i , skill ) ;
28478: LD_INT 0
28480: PPUSH
28481: LD_VAR 0 8
28485: PPUSH
28486: LD_VAR 0 4
28490: PPUSH
28491: CALL_OW 380
// end else
28495: GO 28514
// PrepareHuman ( false , i , skill ) ;
28497: LD_INT 0
28499: PPUSH
28500: LD_VAR 0 8
28504: PPUSH
28505: LD_VAR 0 4
28509: PPUSH
28510: CALL_OW 380
// un := CreateHuman ;
28514: LD_ADDR_VAR 0 14
28518: PUSH
28519: CALL_OW 44
28523: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28524: LD_ADDR_VAR 0 7
28528: PUSH
28529: LD_VAR 0 7
28533: PPUSH
28534: LD_INT 1
28536: PPUSH
28537: LD_VAR 0 14
28541: PPUSH
28542: CALL_OW 2
28546: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28547: LD_VAR 0 14
28551: PPUSH
28552: LD_VAR 0 9
28556: PPUSH
28557: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28561: LD_VAR 0 9
28565: PPUSH
28566: CALL_OW 313
28570: PUSH
28571: LD_INT 6
28573: EQUAL
28574: PUSH
28575: LD_VAR 0 9
28579: PPUSH
28580: CALL_OW 266
28584: PUSH
28585: LD_INT 32
28587: PUSH
28588: LD_INT 31
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: IN
28595: OR
28596: IFFALSE 28410
28598: GO 28407
28600: POP
28601: POP
// end else
28602: GO 28984
// for j = 1 to x do
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: DOUBLE
28610: LD_INT 1
28612: DEC
28613: ST_TO_ADDR
28614: LD_VAR 0 13
28618: PUSH
28619: FOR_TO
28620: IFFALSE 28982
// begin InitHc ;
28622: CALL_OW 19
// if not f then
28626: LD_VAR 0 12
28630: NOT
28631: IFFALSE 28720
// begin PrepareHuman ( false , i , skill ) ;
28633: LD_INT 0
28635: PPUSH
28636: LD_VAR 0 8
28640: PPUSH
28641: LD_VAR 0 4
28645: PPUSH
28646: CALL_OW 380
// un := CreateHuman ;
28650: LD_ADDR_VAR 0 14
28654: PUSH
28655: CALL_OW 44
28659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28660: LD_ADDR_VAR 0 7
28664: PUSH
28665: LD_VAR 0 7
28669: PPUSH
28670: LD_INT 1
28672: PPUSH
28673: LD_VAR 0 14
28677: PPUSH
28678: CALL_OW 2
28682: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28683: LD_VAR 0 14
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 250
28697: PPUSH
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 251
28707: PPUSH
28708: LD_INT 10
28710: PPUSH
28711: LD_INT 0
28713: PPUSH
28714: CALL_OW 50
// continue ;
28718: GO 28619
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28720: LD_VAR 0 12
28724: PUSH
28725: LD_INT 1
28727: ARRAY
28728: PPUSH
28729: CALL_OW 313
28733: PUSH
28734: LD_VAR 0 12
28738: PUSH
28739: LD_INT 1
28741: ARRAY
28742: PPUSH
28743: CALL_OW 266
28747: PUSH
28748: LD_INT 32
28750: PUSH
28751: LD_INT 31
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: IN
28758: AND
28759: PUSH
28760: LD_VAR 0 12
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: CALL_OW 313
28773: PUSH
28774: LD_INT 6
28776: EQUAL
28777: OR
28778: IFFALSE 28798
// f := Delete ( f , 1 ) ;
28780: LD_ADDR_VAR 0 12
28784: PUSH
28785: LD_VAR 0 12
28789: PPUSH
28790: LD_INT 1
28792: PPUSH
28793: CALL_OW 3
28797: ST_TO_ADDR
// if not f then
28798: LD_VAR 0 12
28802: NOT
28803: IFFALSE 28821
// begin x := x + 2 ;
28805: LD_ADDR_VAR 0 13
28809: PUSH
28810: LD_VAR 0 13
28814: PUSH
28815: LD_INT 2
28817: PLUS
28818: ST_TO_ADDR
// continue ;
28819: GO 28619
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28821: LD_VAR 0 12
28825: PUSH
28826: LD_INT 1
28828: ARRAY
28829: PPUSH
28830: CALL_OW 266
28834: PUSH
28835: LD_INT 5
28837: EQUAL
28838: IFFALSE 28912
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28840: LD_VAR 0 12
28844: PUSH
28845: LD_INT 1
28847: ARRAY
28848: PPUSH
28849: CALL_OW 313
28853: PUSH
28854: LD_INT 3
28856: LESS
28857: IFFALSE 28893
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28859: LD_INT 0
28861: PPUSH
28862: LD_INT 5
28864: PUSH
28865: LD_INT 8
28867: PUSH
28868: LD_INT 9
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: PUSH
28876: LD_VAR 0 17
28880: ARRAY
28881: PPUSH
28882: LD_VAR 0 4
28886: PPUSH
28887: CALL_OW 380
28891: GO 28910
// PrepareHuman ( false , i , skill ) ;
28893: LD_INT 0
28895: PPUSH
28896: LD_VAR 0 8
28900: PPUSH
28901: LD_VAR 0 4
28905: PPUSH
28906: CALL_OW 380
// end else
28910: GO 28929
// PrepareHuman ( false , i , skill ) ;
28912: LD_INT 0
28914: PPUSH
28915: LD_VAR 0 8
28919: PPUSH
28920: LD_VAR 0 4
28924: PPUSH
28925: CALL_OW 380
// un := CreateHuman ;
28929: LD_ADDR_VAR 0 14
28933: PUSH
28934: CALL_OW 44
28938: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28939: LD_ADDR_VAR 0 7
28943: PUSH
28944: LD_VAR 0 7
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: LD_VAR 0 14
28956: PPUSH
28957: CALL_OW 2
28961: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28962: LD_VAR 0 14
28966: PPUSH
28967: LD_VAR 0 12
28971: PUSH
28972: LD_INT 1
28974: ARRAY
28975: PPUSH
28976: CALL_OW 52
// end ;
28980: GO 28619
28982: POP
28983: POP
// end ;
28984: GO 27921
28986: POP
28987: POP
// result := result ^ buildings ;
28988: LD_ADDR_VAR 0 7
28992: PUSH
28993: LD_VAR 0 7
28997: PUSH
28998: LD_VAR 0 18
29002: ADD
29003: ST_TO_ADDR
// end else
29004: GO 29147
// begin for i = 1 to personel do
29006: LD_ADDR_VAR 0 8
29010: PUSH
29011: DOUBLE
29012: LD_INT 1
29014: DEC
29015: ST_TO_ADDR
29016: LD_VAR 0 6
29020: PUSH
29021: FOR_TO
29022: IFFALSE 29145
// begin if i > 4 then
29024: LD_VAR 0 8
29028: PUSH
29029: LD_INT 4
29031: GREATER
29032: IFFALSE 29036
// break ;
29034: GO 29145
// x := personel [ i ] ;
29036: LD_ADDR_VAR 0 13
29040: PUSH
29041: LD_VAR 0 6
29045: PUSH
29046: LD_VAR 0 8
29050: ARRAY
29051: ST_TO_ADDR
// if x = - 1 then
29052: LD_VAR 0 13
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: EQUAL
29061: IFFALSE 29065
// continue ;
29063: GO 29021
// PrepareHuman ( false , i , skill ) ;
29065: LD_INT 0
29067: PPUSH
29068: LD_VAR 0 8
29072: PPUSH
29073: LD_VAR 0 4
29077: PPUSH
29078: CALL_OW 380
// un := CreateHuman ;
29082: LD_ADDR_VAR 0 14
29086: PUSH
29087: CALL_OW 44
29091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29092: LD_VAR 0 14
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 250
29106: PPUSH
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 251
29116: PPUSH
29117: LD_INT 10
29119: PPUSH
29120: LD_INT 0
29122: PPUSH
29123: CALL_OW 50
// result := result ^ un ;
29127: LD_ADDR_VAR 0 7
29131: PUSH
29132: LD_VAR 0 7
29136: PUSH
29137: LD_VAR 0 14
29141: ADD
29142: ST_TO_ADDR
// end ;
29143: GO 29021
29145: POP
29146: POP
// end ; end ;
29147: LD_VAR 0 7
29151: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29152: LD_INT 0
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
// result := false ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 0
29177: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29178: LD_VAR 0 1
29182: NOT
29183: PUSH
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 266
29193: PUSH
29194: LD_INT 32
29196: PUSH
29197: LD_INT 33
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: IN
29204: NOT
29205: OR
29206: IFFALSE 29210
// exit ;
29208: GO 30346
// nat := GetNation ( tower ) ;
29210: LD_ADDR_VAR 0 12
29214: PUSH
29215: LD_VAR 0 1
29219: PPUSH
29220: CALL_OW 248
29224: ST_TO_ADDR
// side := GetSide ( tower ) ;
29225: LD_ADDR_VAR 0 16
29229: PUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 255
29239: ST_TO_ADDR
// x := GetX ( tower ) ;
29240: LD_ADDR_VAR 0 10
29244: PUSH
29245: LD_VAR 0 1
29249: PPUSH
29250: CALL_OW 250
29254: ST_TO_ADDR
// y := GetY ( tower ) ;
29255: LD_ADDR_VAR 0 11
29259: PUSH
29260: LD_VAR 0 1
29264: PPUSH
29265: CALL_OW 251
29269: ST_TO_ADDR
// if not x or not y then
29270: LD_VAR 0 10
29274: NOT
29275: PUSH
29276: LD_VAR 0 11
29280: NOT
29281: OR
29282: IFFALSE 29286
// exit ;
29284: GO 30346
// weapon := 0 ;
29286: LD_ADDR_VAR 0 18
29290: PUSH
29291: LD_INT 0
29293: ST_TO_ADDR
// fac_list := [ ] ;
29294: LD_ADDR_VAR 0 17
29298: PUSH
29299: EMPTY
29300: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29301: LD_ADDR_VAR 0 6
29305: PUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 274
29315: PPUSH
29316: LD_VAR 0 2
29320: PPUSH
29321: CALL 26924 0 2
29325: PPUSH
29326: LD_INT 30
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PPUSH
29336: CALL_OW 72
29340: ST_TO_ADDR
// if not factories then
29341: LD_VAR 0 6
29345: NOT
29346: IFFALSE 29350
// exit ;
29348: GO 30346
// for i in factories do
29350: LD_ADDR_VAR 0 8
29354: PUSH
29355: LD_VAR 0 6
29359: PUSH
29360: FOR_IN
29361: IFFALSE 29386
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29363: LD_ADDR_VAR 0 17
29367: PUSH
29368: LD_VAR 0 17
29372: PUSH
29373: LD_VAR 0 8
29377: PPUSH
29378: CALL_OW 478
29382: UNION
29383: ST_TO_ADDR
29384: GO 29360
29386: POP
29387: POP
// if not fac_list then
29388: LD_VAR 0 17
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 30346
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: LD_INT 5
29407: PUSH
29408: LD_INT 9
29410: PUSH
29411: LD_INT 10
29413: PUSH
29414: LD_INT 6
29416: PUSH
29417: LD_INT 7
29419: PUSH
29420: LD_INT 11
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 27
29434: PUSH
29435: LD_INT 28
29437: PUSH
29438: LD_INT 26
29440: PUSH
29441: LD_INT 30
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 43
29452: PUSH
29453: LD_INT 44
29455: PUSH
29456: LD_INT 46
29458: PUSH
29459: LD_INT 45
29461: PUSH
29462: LD_INT 47
29464: PUSH
29465: LD_INT 49
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: PUSH
29481: LD_VAR 0 12
29485: ARRAY
29486: ST_TO_ADDR
// for i in list do
29487: LD_ADDR_VAR 0 8
29491: PUSH
29492: LD_VAR 0 5
29496: PUSH
29497: FOR_IN
29498: IFFALSE 29531
// if not i in fac_list then
29500: LD_VAR 0 8
29504: PUSH
29505: LD_VAR 0 17
29509: IN
29510: NOT
29511: IFFALSE 29529
// list := list diff i ;
29513: LD_ADDR_VAR 0 5
29517: PUSH
29518: LD_VAR 0 5
29522: PUSH
29523: LD_VAR 0 8
29527: DIFF
29528: ST_TO_ADDR
29529: GO 29497
29531: POP
29532: POP
// if not list then
29533: LD_VAR 0 5
29537: NOT
29538: IFFALSE 29542
// exit ;
29540: GO 30346
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29542: LD_VAR 0 12
29546: PUSH
29547: LD_INT 3
29549: EQUAL
29550: PUSH
29551: LD_INT 49
29553: PUSH
29554: LD_VAR 0 5
29558: IN
29559: AND
29560: PUSH
29561: LD_INT 31
29563: PPUSH
29564: LD_VAR 0 16
29568: PPUSH
29569: CALL_OW 321
29573: PUSH
29574: LD_INT 2
29576: EQUAL
29577: AND
29578: IFFALSE 29638
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29580: LD_INT 22
29582: PUSH
29583: LD_VAR 0 16
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 35
29594: PUSH
29595: LD_INT 49
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 91
29604: PUSH
29605: LD_VAR 0 1
29609: PUSH
29610: LD_INT 10
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: PPUSH
29623: CALL_OW 69
29627: NOT
29628: IFFALSE 29638
// weapon := ru_time_lapser ;
29630: LD_ADDR_VAR 0 18
29634: PUSH
29635: LD_INT 49
29637: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29638: LD_VAR 0 12
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: IN
29653: PUSH
29654: LD_INT 11
29656: PUSH
29657: LD_VAR 0 5
29661: IN
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_VAR 0 5
29670: IN
29671: OR
29672: AND
29673: PUSH
29674: LD_INT 6
29676: PPUSH
29677: LD_VAR 0 16
29681: PPUSH
29682: CALL_OW 321
29686: PUSH
29687: LD_INT 2
29689: EQUAL
29690: AND
29691: IFFALSE 29856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29693: LD_INT 22
29695: PUSH
29696: LD_VAR 0 16
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: LD_INT 35
29710: PUSH
29711: LD_INT 11
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 35
29720: PUSH
29721: LD_INT 30
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 91
29735: PUSH
29736: LD_VAR 0 1
29740: PUSH
29741: LD_INT 18
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 69
29758: NOT
29759: PUSH
29760: LD_INT 22
29762: PUSH
29763: LD_VAR 0 16
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 30
29777: PUSH
29778: LD_INT 32
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 30
29787: PUSH
29788: LD_INT 33
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 91
29802: PUSH
29803: LD_VAR 0 1
29807: PUSH
29808: LD_INT 12
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: PPUSH
29824: CALL_OW 69
29828: PUSH
29829: LD_INT 2
29831: GREATER
29832: AND
29833: IFFALSE 29856
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29835: LD_ADDR_VAR 0 18
29839: PUSH
29840: LD_INT 11
29842: PUSH
29843: LD_INT 30
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_VAR 0 12
29854: ARRAY
29855: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29856: LD_VAR 0 18
29860: NOT
29861: PUSH
29862: LD_INT 40
29864: PPUSH
29865: LD_VAR 0 16
29869: PPUSH
29870: CALL_OW 321
29874: PUSH
29875: LD_INT 2
29877: EQUAL
29878: AND
29879: PUSH
29880: LD_INT 7
29882: PUSH
29883: LD_VAR 0 5
29887: IN
29888: PUSH
29889: LD_INT 28
29891: PUSH
29892: LD_VAR 0 5
29896: IN
29897: OR
29898: PUSH
29899: LD_INT 45
29901: PUSH
29902: LD_VAR 0 5
29906: IN
29907: OR
29908: AND
29909: IFFALSE 30163
// begin hex := GetHexInfo ( x , y ) ;
29911: LD_ADDR_VAR 0 4
29915: PUSH
29916: LD_VAR 0 10
29920: PPUSH
29921: LD_VAR 0 11
29925: PPUSH
29926: CALL_OW 546
29930: ST_TO_ADDR
// if hex [ 1 ] then
29931: LD_VAR 0 4
29935: PUSH
29936: LD_INT 1
29938: ARRAY
29939: IFFALSE 29943
// exit ;
29941: GO 30346
// height := hex [ 2 ] ;
29943: LD_ADDR_VAR 0 15
29947: PUSH
29948: LD_VAR 0 4
29952: PUSH
29953: LD_INT 2
29955: ARRAY
29956: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29957: LD_ADDR_VAR 0 14
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 3
29970: PUSH
29971: LD_INT 5
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// for i in tmp do
29980: LD_ADDR_VAR 0 8
29984: PUSH
29985: LD_VAR 0 14
29989: PUSH
29990: FOR_IN
29991: IFFALSE 30161
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29993: LD_ADDR_VAR 0 9
29997: PUSH
29998: LD_VAR 0 10
30002: PPUSH
30003: LD_VAR 0 8
30007: PPUSH
30008: LD_INT 5
30010: PPUSH
30011: CALL_OW 272
30015: PUSH
30016: LD_VAR 0 11
30020: PPUSH
30021: LD_VAR 0 8
30025: PPUSH
30026: LD_INT 5
30028: PPUSH
30029: CALL_OW 273
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30038: LD_VAR 0 9
30042: PUSH
30043: LD_INT 1
30045: ARRAY
30046: PPUSH
30047: LD_VAR 0 9
30051: PUSH
30052: LD_INT 2
30054: ARRAY
30055: PPUSH
30056: CALL_OW 488
30060: IFFALSE 30159
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30062: LD_ADDR_VAR 0 4
30066: PUSH
30067: LD_VAR 0 9
30071: PUSH
30072: LD_INT 1
30074: ARRAY
30075: PPUSH
30076: LD_VAR 0 9
30080: PUSH
30081: LD_INT 2
30083: ARRAY
30084: PPUSH
30085: CALL_OW 546
30089: ST_TO_ADDR
// if hex [ 1 ] then
30090: LD_VAR 0 4
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: IFFALSE 30102
// continue ;
30100: GO 29990
// h := hex [ 2 ] ;
30102: LD_ADDR_VAR 0 13
30106: PUSH
30107: LD_VAR 0 4
30111: PUSH
30112: LD_INT 2
30114: ARRAY
30115: ST_TO_ADDR
// if h + 7 < height then
30116: LD_VAR 0 13
30120: PUSH
30121: LD_INT 7
30123: PLUS
30124: PUSH
30125: LD_VAR 0 15
30129: LESS
30130: IFFALSE 30159
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30132: LD_ADDR_VAR 0 18
30136: PUSH
30137: LD_INT 7
30139: PUSH
30140: LD_INT 28
30142: PUSH
30143: LD_INT 45
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: PUSH
30151: LD_VAR 0 12
30155: ARRAY
30156: ST_TO_ADDR
// break ;
30157: GO 30161
// end ; end ; end ;
30159: GO 29990
30161: POP
30162: POP
// end ; if not weapon then
30163: LD_VAR 0 18
30167: NOT
30168: IFFALSE 30228
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30170: LD_ADDR_VAR 0 5
30174: PUSH
30175: LD_VAR 0 5
30179: PUSH
30180: LD_INT 11
30182: PUSH
30183: LD_INT 30
30185: PUSH
30186: LD_INT 49
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: DIFF
30194: ST_TO_ADDR
// if not list then
30195: LD_VAR 0 5
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30346
// weapon := list [ rand ( 1 , list ) ] ;
30204: LD_ADDR_VAR 0 18
30208: PUSH
30209: LD_VAR 0 5
30213: PUSH
30214: LD_INT 1
30216: PPUSH
30217: LD_VAR 0 5
30221: PPUSH
30222: CALL_OW 12
30226: ARRAY
30227: ST_TO_ADDR
// end ; if weapon then
30228: LD_VAR 0 18
30232: IFFALSE 30346
// begin tmp := CostOfWeapon ( weapon ) ;
30234: LD_ADDR_VAR 0 14
30238: PUSH
30239: LD_VAR 0 18
30243: PPUSH
30244: CALL_OW 451
30248: ST_TO_ADDR
// j := GetBase ( tower ) ;
30249: LD_ADDR_VAR 0 9
30253: PUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: CALL_OW 274
30263: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30264: LD_VAR 0 9
30268: PPUSH
30269: LD_INT 1
30271: PPUSH
30272: CALL_OW 275
30276: PUSH
30277: LD_VAR 0 14
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: GREATEREQUAL
30286: PUSH
30287: LD_VAR 0 9
30291: PPUSH
30292: LD_INT 2
30294: PPUSH
30295: CALL_OW 275
30299: PUSH
30300: LD_VAR 0 14
30304: PUSH
30305: LD_INT 2
30307: ARRAY
30308: GREATEREQUAL
30309: AND
30310: PUSH
30311: LD_VAR 0 9
30315: PPUSH
30316: LD_INT 3
30318: PPUSH
30319: CALL_OW 275
30323: PUSH
30324: LD_VAR 0 14
30328: PUSH
30329: LD_INT 3
30331: ARRAY
30332: GREATEREQUAL
30333: AND
30334: IFFALSE 30346
// result := weapon ;
30336: LD_ADDR_VAR 0 3
30340: PUSH
30341: LD_VAR 0 18
30345: ST_TO_ADDR
// end ; end ;
30346: LD_VAR 0 3
30350: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30351: LD_INT 0
30353: PPUSH
30354: PPUSH
// result := true ;
30355: LD_ADDR_VAR 0 3
30359: PUSH
30360: LD_INT 1
30362: ST_TO_ADDR
// if array1 = array2 then
30363: LD_VAR 0 1
30367: PUSH
30368: LD_VAR 0 2
30372: EQUAL
30373: IFFALSE 30433
// begin for i = 1 to array1 do
30375: LD_ADDR_VAR 0 4
30379: PUSH
30380: DOUBLE
30381: LD_INT 1
30383: DEC
30384: ST_TO_ADDR
30385: LD_VAR 0 1
30389: PUSH
30390: FOR_TO
30391: IFFALSE 30429
// if array1 [ i ] <> array2 [ i ] then
30393: LD_VAR 0 1
30397: PUSH
30398: LD_VAR 0 4
30402: ARRAY
30403: PUSH
30404: LD_VAR 0 2
30408: PUSH
30409: LD_VAR 0 4
30413: ARRAY
30414: NONEQUAL
30415: IFFALSE 30427
// begin result := false ;
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_INT 0
30424: ST_TO_ADDR
// break ;
30425: GO 30429
// end ;
30427: GO 30390
30429: POP
30430: POP
// end else
30431: GO 30441
// result := false ;
30433: LD_ADDR_VAR 0 3
30437: PUSH
30438: LD_INT 0
30440: ST_TO_ADDR
// end ;
30441: LD_VAR 0 3
30445: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30446: LD_INT 0
30448: PPUSH
30449: PPUSH
30450: PPUSH
// pom := GetBase ( fac ) ;
30451: LD_ADDR_VAR 0 5
30455: PUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 274
30465: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30466: LD_ADDR_VAR 0 4
30470: PUSH
30471: LD_VAR 0 2
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: PPUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 2
30487: ARRAY
30488: PPUSH
30489: LD_VAR 0 2
30493: PUSH
30494: LD_INT 3
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 2
30502: PUSH
30503: LD_INT 4
30505: ARRAY
30506: PPUSH
30507: CALL_OW 449
30511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30512: LD_ADDR_VAR 0 3
30516: PUSH
30517: LD_VAR 0 5
30521: PPUSH
30522: LD_INT 1
30524: PPUSH
30525: CALL_OW 275
30529: PUSH
30530: LD_VAR 0 4
30534: PUSH
30535: LD_INT 1
30537: ARRAY
30538: GREATEREQUAL
30539: PUSH
30540: LD_VAR 0 5
30544: PPUSH
30545: LD_INT 2
30547: PPUSH
30548: CALL_OW 275
30552: PUSH
30553: LD_VAR 0 4
30557: PUSH
30558: LD_INT 2
30560: ARRAY
30561: GREATEREQUAL
30562: AND
30563: PUSH
30564: LD_VAR 0 5
30568: PPUSH
30569: LD_INT 3
30571: PPUSH
30572: CALL_OW 275
30576: PUSH
30577: LD_VAR 0 4
30581: PUSH
30582: LD_INT 3
30584: ARRAY
30585: GREATEREQUAL
30586: AND
30587: ST_TO_ADDR
// end ;
30588: LD_VAR 0 3
30592: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30593: LD_INT 0
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
// pom := GetBase ( building ) ;
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 274
30613: ST_TO_ADDR
// if not pom then
30614: LD_VAR 0 3
30618: NOT
30619: IFFALSE 30623
// exit ;
30621: GO 30793
// btype := GetBType ( building ) ;
30623: LD_ADDR_VAR 0 5
30627: PUSH
30628: LD_VAR 0 1
30632: PPUSH
30633: CALL_OW 266
30637: ST_TO_ADDR
// if btype = b_armoury then
30638: LD_VAR 0 5
30642: PUSH
30643: LD_INT 4
30645: EQUAL
30646: IFFALSE 30656
// btype := b_barracks ;
30648: LD_ADDR_VAR 0 5
30652: PUSH
30653: LD_INT 5
30655: ST_TO_ADDR
// if btype = b_depot then
30656: LD_VAR 0 5
30660: PUSH
30661: LD_INT 0
30663: EQUAL
30664: IFFALSE 30674
// btype := b_warehouse ;
30666: LD_ADDR_VAR 0 5
30670: PUSH
30671: LD_INT 1
30673: ST_TO_ADDR
// if btype = b_workshop then
30674: LD_VAR 0 5
30678: PUSH
30679: LD_INT 2
30681: EQUAL
30682: IFFALSE 30692
// btype := b_factory ;
30684: LD_ADDR_VAR 0 5
30688: PUSH
30689: LD_INT 3
30691: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30692: LD_ADDR_VAR 0 4
30696: PUSH
30697: LD_VAR 0 5
30701: PPUSH
30702: LD_VAR 0 1
30706: PPUSH
30707: CALL_OW 248
30711: PPUSH
30712: CALL_OW 450
30716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30717: LD_ADDR_VAR 0 2
30721: PUSH
30722: LD_VAR 0 3
30726: PPUSH
30727: LD_INT 1
30729: PPUSH
30730: CALL_OW 275
30734: PUSH
30735: LD_VAR 0 4
30739: PUSH
30740: LD_INT 1
30742: ARRAY
30743: GREATEREQUAL
30744: PUSH
30745: LD_VAR 0 3
30749: PPUSH
30750: LD_INT 2
30752: PPUSH
30753: CALL_OW 275
30757: PUSH
30758: LD_VAR 0 4
30762: PUSH
30763: LD_INT 2
30765: ARRAY
30766: GREATEREQUAL
30767: AND
30768: PUSH
30769: LD_VAR 0 3
30773: PPUSH
30774: LD_INT 3
30776: PPUSH
30777: CALL_OW 275
30781: PUSH
30782: LD_VAR 0 4
30786: PUSH
30787: LD_INT 3
30789: ARRAY
30790: GREATEREQUAL
30791: AND
30792: ST_TO_ADDR
// end ;
30793: LD_VAR 0 2
30797: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30798: LD_INT 0
30800: PPUSH
30801: PPUSH
30802: PPUSH
// pom := GetBase ( building ) ;
30803: LD_ADDR_VAR 0 4
30807: PUSH
30808: LD_VAR 0 1
30812: PPUSH
30813: CALL_OW 274
30817: ST_TO_ADDR
// if not pom then
30818: LD_VAR 0 4
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 30928
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 2
30836: PPUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 248
30846: PPUSH
30847: CALL_OW 450
30851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30852: LD_ADDR_VAR 0 3
30856: PUSH
30857: LD_VAR 0 4
30861: PPUSH
30862: LD_INT 1
30864: PPUSH
30865: CALL_OW 275
30869: PUSH
30870: LD_VAR 0 5
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: GREATEREQUAL
30879: PUSH
30880: LD_VAR 0 4
30884: PPUSH
30885: LD_INT 2
30887: PPUSH
30888: CALL_OW 275
30892: PUSH
30893: LD_VAR 0 5
30897: PUSH
30898: LD_INT 2
30900: ARRAY
30901: GREATEREQUAL
30902: AND
30903: PUSH
30904: LD_VAR 0 4
30908: PPUSH
30909: LD_INT 3
30911: PPUSH
30912: CALL_OW 275
30916: PUSH
30917: LD_VAR 0 5
30921: PUSH
30922: LD_INT 3
30924: ARRAY
30925: GREATEREQUAL
30926: AND
30927: ST_TO_ADDR
// end ;
30928: LD_VAR 0 3
30932: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30933: LD_INT 0
30935: PPUSH
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
30943: PPUSH
30944: PPUSH
// result := false ;
30945: LD_ADDR_VAR 0 6
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// if not base or not btype or not x or not y then
30953: LD_VAR 0 1
30957: NOT
30958: PUSH
30959: LD_VAR 0 2
30963: NOT
30964: OR
30965: PUSH
30966: LD_VAR 0 3
30970: NOT
30971: OR
30972: PUSH
30973: LD_VAR 0 4
30977: NOT
30978: OR
30979: IFFALSE 30983
// exit ;
30981: GO 31592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30983: LD_ADDR_VAR 0 12
30987: PUSH
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_VAR 0 4
31002: PPUSH
31003: LD_VAR 0 5
31007: PPUSH
31008: LD_VAR 0 1
31012: PUSH
31013: LD_INT 1
31015: ARRAY
31016: PPUSH
31017: CALL_OW 248
31021: PPUSH
31022: LD_INT 0
31024: PPUSH
31025: CALL 32429 0 6
31029: ST_TO_ADDR
// if not hexes then
31030: LD_VAR 0 12
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31592
// for i = 1 to hexes do
31039: LD_ADDR_VAR 0 7
31043: PUSH
31044: DOUBLE
31045: LD_INT 1
31047: DEC
31048: ST_TO_ADDR
31049: LD_VAR 0 12
31053: PUSH
31054: FOR_TO
31055: IFFALSE 31590
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31057: LD_ADDR_VAR 0 11
31061: PUSH
31062: LD_VAR 0 12
31066: PUSH
31067: LD_VAR 0 7
31071: ARRAY
31072: PUSH
31073: LD_INT 1
31075: ARRAY
31076: PPUSH
31077: LD_VAR 0 12
31081: PUSH
31082: LD_VAR 0 7
31086: ARRAY
31087: PUSH
31088: LD_INT 2
31090: ARRAY
31091: PPUSH
31092: CALL_OW 428
31096: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31097: LD_VAR 0 12
31101: PUSH
31102: LD_VAR 0 7
31106: ARRAY
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: LD_VAR 0 12
31116: PUSH
31117: LD_VAR 0 7
31121: ARRAY
31122: PUSH
31123: LD_INT 2
31125: ARRAY
31126: PPUSH
31127: CALL_OW 351
31131: PUSH
31132: LD_VAR 0 12
31136: PUSH
31137: LD_VAR 0 7
31141: ARRAY
31142: PUSH
31143: LD_INT 1
31145: ARRAY
31146: PPUSH
31147: LD_VAR 0 12
31151: PUSH
31152: LD_VAR 0 7
31156: ARRAY
31157: PUSH
31158: LD_INT 2
31160: ARRAY
31161: PPUSH
31162: CALL_OW 488
31166: NOT
31167: OR
31168: PUSH
31169: LD_VAR 0 11
31173: PPUSH
31174: CALL_OW 247
31178: PUSH
31179: LD_INT 3
31181: EQUAL
31182: OR
31183: IFFALSE 31189
// exit ;
31185: POP
31186: POP
31187: GO 31592
// if not tmp or not tmp in base then
31189: LD_VAR 0 11
31193: NOT
31194: PUSH
31195: LD_VAR 0 11
31199: PUSH
31200: LD_VAR 0 1
31204: IN
31205: NOT
31206: OR
31207: IFFALSE 31211
// continue ;
31209: GO 31054
// result := true ;
31211: LD_ADDR_VAR 0 6
31215: PUSH
31216: LD_INT 1
31218: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31219: LD_ADDR_VAR 0 15
31223: PUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: LD_INT 22
31231: PUSH
31232: LD_VAR 0 11
31236: PPUSH
31237: CALL_OW 255
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 30
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 72
31282: ST_TO_ADDR
// if dep then
31283: LD_VAR 0 15
31287: IFFALSE 31423
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31289: LD_ADDR_VAR 0 14
31293: PUSH
31294: LD_VAR 0 15
31298: PUSH
31299: LD_INT 1
31301: ARRAY
31302: PPUSH
31303: CALL_OW 250
31307: PPUSH
31308: LD_VAR 0 15
31312: PUSH
31313: LD_INT 1
31315: ARRAY
31316: PPUSH
31317: CALL_OW 254
31321: PPUSH
31322: LD_INT 5
31324: PPUSH
31325: CALL_OW 272
31329: PUSH
31330: LD_VAR 0 15
31334: PUSH
31335: LD_INT 1
31337: ARRAY
31338: PPUSH
31339: CALL_OW 251
31343: PPUSH
31344: LD_VAR 0 15
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: PPUSH
31353: CALL_OW 254
31357: PPUSH
31358: LD_INT 5
31360: PPUSH
31361: CALL_OW 273
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31370: LD_VAR 0 14
31374: PUSH
31375: LD_INT 1
31377: ARRAY
31378: PPUSH
31379: LD_VAR 0 14
31383: PUSH
31384: LD_INT 2
31386: ARRAY
31387: PPUSH
31388: CALL_OW 488
31392: IFFALSE 31423
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31394: LD_VAR 0 11
31398: PPUSH
31399: LD_VAR 0 14
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PPUSH
31408: LD_VAR 0 14
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PPUSH
31417: CALL_OW 111
// continue ;
31421: GO 31054
// end ; end ; r := GetDir ( tmp ) ;
31423: LD_ADDR_VAR 0 13
31427: PUSH
31428: LD_VAR 0 11
31432: PPUSH
31433: CALL_OW 254
31437: ST_TO_ADDR
// if r = 5 then
31438: LD_VAR 0 13
31442: PUSH
31443: LD_INT 5
31445: EQUAL
31446: IFFALSE 31456
// r := 0 ;
31448: LD_ADDR_VAR 0 13
31452: PUSH
31453: LD_INT 0
31455: ST_TO_ADDR
// for j = r to 5 do
31456: LD_ADDR_VAR 0 8
31460: PUSH
31461: DOUBLE
31462: LD_VAR 0 13
31466: DEC
31467: ST_TO_ADDR
31468: LD_INT 5
31470: PUSH
31471: FOR_TO
31472: IFFALSE 31586
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31474: LD_ADDR_VAR 0 9
31478: PUSH
31479: LD_VAR 0 11
31483: PPUSH
31484: CALL_OW 250
31488: PPUSH
31489: LD_VAR 0 8
31493: PPUSH
31494: LD_INT 2
31496: PPUSH
31497: CALL_OW 272
31501: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31502: LD_ADDR_VAR 0 10
31506: PUSH
31507: LD_VAR 0 11
31511: PPUSH
31512: CALL_OW 251
31516: PPUSH
31517: LD_VAR 0 8
31521: PPUSH
31522: LD_INT 2
31524: PPUSH
31525: CALL_OW 273
31529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31530: LD_VAR 0 9
31534: PPUSH
31535: LD_VAR 0 10
31539: PPUSH
31540: CALL_OW 488
31544: PUSH
31545: LD_VAR 0 9
31549: PPUSH
31550: LD_VAR 0 10
31554: PPUSH
31555: CALL_OW 428
31559: NOT
31560: AND
31561: IFFALSE 31584
// begin ComMoveXY ( tmp , _x , _y ) ;
31563: LD_VAR 0 11
31567: PPUSH
31568: LD_VAR 0 9
31572: PPUSH
31573: LD_VAR 0 10
31577: PPUSH
31578: CALL_OW 111
// break ;
31582: GO 31586
// end ; end ;
31584: GO 31471
31586: POP
31587: POP
// end ;
31588: GO 31054
31590: POP
31591: POP
// end ;
31592: LD_VAR 0 6
31596: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31597: LD_INT 0
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
// result := false ;
31609: LD_ADDR_VAR 0 6
31613: PUSH
31614: LD_INT 0
31616: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31617: LD_VAR 0 1
31621: NOT
31622: PUSH
31623: LD_VAR 0 1
31627: PPUSH
31628: CALL_OW 266
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: IN
31643: NOT
31644: OR
31645: PUSH
31646: LD_VAR 0 2
31650: NOT
31651: OR
31652: PUSH
31653: LD_VAR 0 5
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: LD_INT 4
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: IN
31684: NOT
31685: OR
31686: PUSH
31687: LD_VAR 0 3
31691: PPUSH
31692: LD_VAR 0 4
31696: PPUSH
31697: CALL_OW 488
31701: NOT
31702: OR
31703: IFFALSE 31707
// exit ;
31705: GO 32424
// pom := GetBase ( depot ) ;
31707: LD_ADDR_VAR 0 10
31711: PUSH
31712: LD_VAR 0 1
31716: PPUSH
31717: CALL_OW 274
31721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31722: LD_ADDR_VAR 0 11
31726: PUSH
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 248
31741: PPUSH
31742: CALL_OW 450
31746: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31747: LD_VAR 0 10
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 275
31759: PUSH
31760: LD_VAR 0 11
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: GREATEREQUAL
31769: PUSH
31770: LD_VAR 0 10
31774: PPUSH
31775: LD_INT 2
31777: PPUSH
31778: CALL_OW 275
31782: PUSH
31783: LD_VAR 0 11
31787: PUSH
31788: LD_INT 2
31790: ARRAY
31791: GREATEREQUAL
31792: AND
31793: PUSH
31794: LD_VAR 0 10
31798: PPUSH
31799: LD_INT 3
31801: PPUSH
31802: CALL_OW 275
31806: PUSH
31807: LD_VAR 0 11
31811: PUSH
31812: LD_INT 3
31814: ARRAY
31815: GREATEREQUAL
31816: AND
31817: NOT
31818: IFFALSE 31822
// exit ;
31820: GO 32424
// if GetBType ( depot ) = b_depot then
31822: LD_VAR 0 1
31826: PPUSH
31827: CALL_OW 266
31831: PUSH
31832: LD_INT 0
31834: EQUAL
31835: IFFALSE 31847
// dist := 28 else
31837: LD_ADDR_VAR 0 14
31841: PUSH
31842: LD_INT 28
31844: ST_TO_ADDR
31845: GO 31855
// dist := 36 ;
31847: LD_ADDR_VAR 0 14
31851: PUSH
31852: LD_INT 36
31854: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_VAR 0 3
31864: PPUSH
31865: LD_VAR 0 4
31869: PPUSH
31870: CALL_OW 297
31874: PUSH
31875: LD_VAR 0 14
31879: GREATER
31880: IFFALSE 31884
// exit ;
31882: GO 32424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31884: LD_ADDR_VAR 0 12
31888: PUSH
31889: LD_VAR 0 2
31893: PPUSH
31894: LD_VAR 0 3
31898: PPUSH
31899: LD_VAR 0 4
31903: PPUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: LD_VAR 0 1
31913: PPUSH
31914: CALL_OW 248
31918: PPUSH
31919: LD_INT 0
31921: PPUSH
31922: CALL 32429 0 6
31926: ST_TO_ADDR
// if not hexes then
31927: LD_VAR 0 12
31931: NOT
31932: IFFALSE 31936
// exit ;
31934: GO 32424
// hex := GetHexInfo ( x , y ) ;
31936: LD_ADDR_VAR 0 15
31940: PUSH
31941: LD_VAR 0 3
31945: PPUSH
31946: LD_VAR 0 4
31950: PPUSH
31951: CALL_OW 546
31955: ST_TO_ADDR
// if hex [ 1 ] then
31956: LD_VAR 0 15
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: IFFALSE 31968
// exit ;
31966: GO 32424
// height := hex [ 2 ] ;
31968: LD_ADDR_VAR 0 13
31972: PUSH
31973: LD_VAR 0 15
31977: PUSH
31978: LD_INT 2
31980: ARRAY
31981: ST_TO_ADDR
// for i = 1 to hexes do
31982: LD_ADDR_VAR 0 7
31986: PUSH
31987: DOUBLE
31988: LD_INT 1
31990: DEC
31991: ST_TO_ADDR
31992: LD_VAR 0 12
31996: PUSH
31997: FOR_TO
31998: IFFALSE 32328
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32000: LD_VAR 0 12
32004: PUSH
32005: LD_VAR 0 7
32009: ARRAY
32010: PUSH
32011: LD_INT 1
32013: ARRAY
32014: PPUSH
32015: LD_VAR 0 12
32019: PUSH
32020: LD_VAR 0 7
32024: ARRAY
32025: PUSH
32026: LD_INT 2
32028: ARRAY
32029: PPUSH
32030: CALL_OW 488
32034: NOT
32035: PUSH
32036: LD_VAR 0 12
32040: PUSH
32041: LD_VAR 0 7
32045: ARRAY
32046: PUSH
32047: LD_INT 1
32049: ARRAY
32050: PPUSH
32051: LD_VAR 0 12
32055: PUSH
32056: LD_VAR 0 7
32060: ARRAY
32061: PUSH
32062: LD_INT 2
32064: ARRAY
32065: PPUSH
32066: CALL_OW 428
32070: PUSH
32071: LD_INT 0
32073: GREATER
32074: OR
32075: PUSH
32076: LD_VAR 0 12
32080: PUSH
32081: LD_VAR 0 7
32085: ARRAY
32086: PUSH
32087: LD_INT 1
32089: ARRAY
32090: PPUSH
32091: LD_VAR 0 12
32095: PUSH
32096: LD_VAR 0 7
32100: ARRAY
32101: PUSH
32102: LD_INT 2
32104: ARRAY
32105: PPUSH
32106: CALL_OW 351
32110: OR
32111: IFFALSE 32117
// exit ;
32113: POP
32114: POP
32115: GO 32424
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32117: LD_ADDR_VAR 0 8
32121: PUSH
32122: LD_VAR 0 12
32126: PUSH
32127: LD_VAR 0 7
32131: ARRAY
32132: PUSH
32133: LD_INT 1
32135: ARRAY
32136: PPUSH
32137: LD_VAR 0 12
32141: PUSH
32142: LD_VAR 0 7
32146: ARRAY
32147: PUSH
32148: LD_INT 2
32150: ARRAY
32151: PPUSH
32152: CALL_OW 546
32156: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32157: LD_VAR 0 8
32161: PUSH
32162: LD_INT 1
32164: ARRAY
32165: PUSH
32166: LD_VAR 0 8
32170: PUSH
32171: LD_INT 2
32173: ARRAY
32174: PUSH
32175: LD_VAR 0 13
32179: PUSH
32180: LD_INT 2
32182: PLUS
32183: GREATER
32184: OR
32185: PUSH
32186: LD_VAR 0 8
32190: PUSH
32191: LD_INT 2
32193: ARRAY
32194: PUSH
32195: LD_VAR 0 13
32199: PUSH
32200: LD_INT 2
32202: MINUS
32203: LESS
32204: OR
32205: PUSH
32206: LD_VAR 0 8
32210: PUSH
32211: LD_INT 3
32213: ARRAY
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 8
32220: PUSH
32221: LD_INT 9
32223: PUSH
32224: LD_INT 10
32226: PUSH
32227: LD_INT 11
32229: PUSH
32230: LD_INT 12
32232: PUSH
32233: LD_INT 13
32235: PUSH
32236: LD_INT 16
32238: PUSH
32239: LD_INT 17
32241: PUSH
32242: LD_INT 18
32244: PUSH
32245: LD_INT 19
32247: PUSH
32248: LD_INT 20
32250: PUSH
32251: LD_INT 21
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: IN
32269: NOT
32270: OR
32271: PUSH
32272: LD_VAR 0 8
32276: PUSH
32277: LD_INT 5
32279: ARRAY
32280: NOT
32281: OR
32282: PUSH
32283: LD_VAR 0 8
32287: PUSH
32288: LD_INT 6
32290: ARRAY
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 7
32300: PUSH
32301: LD_INT 9
32303: PUSH
32304: LD_INT 10
32306: PUSH
32307: LD_INT 11
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: IN
32318: NOT
32319: OR
32320: IFFALSE 32326
// exit ;
32322: POP
32323: POP
32324: GO 32424
// end ;
32326: GO 31997
32328: POP
32329: POP
// side := GetSide ( depot ) ;
32330: LD_ADDR_VAR 0 9
32334: PUSH
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 255
32344: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32345: LD_VAR 0 9
32349: PPUSH
32350: LD_VAR 0 3
32354: PPUSH
32355: LD_VAR 0 4
32359: PPUSH
32360: LD_INT 20
32362: PPUSH
32363: CALL 25078 0 4
32367: PUSH
32368: LD_INT 4
32370: ARRAY
32371: IFFALSE 32375
// exit ;
32373: GO 32424
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32375: LD_VAR 0 2
32379: PUSH
32380: LD_INT 29
32382: PUSH
32383: LD_INT 30
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: IN
32390: PUSH
32391: LD_VAR 0 3
32395: PPUSH
32396: LD_VAR 0 4
32400: PPUSH
32401: LD_VAR 0 9
32405: PPUSH
32406: CALL_OW 440
32410: NOT
32411: AND
32412: IFFALSE 32416
// exit ;
32414: GO 32424
// result := true ;
32416: LD_ADDR_VAR 0 6
32420: PUSH
32421: LD_INT 1
32423: ST_TO_ADDR
// end ;
32424: LD_VAR 0 6
32428: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32429: LD_INT 0
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
// result = [ ] ;
32489: LD_ADDR_VAR 0 7
32493: PUSH
32494: EMPTY
32495: ST_TO_ADDR
// temp_list = [ ] ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: EMPTY
32502: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32503: LD_VAR 0 4
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: LD_INT 5
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: IN
32534: NOT
32535: PUSH
32536: LD_VAR 0 1
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: IN
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: IN
32571: NOT
32572: AND
32573: OR
32574: IFFALSE 32578
// exit ;
32576: GO 50969
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32578: LD_VAR 0 1
32582: PUSH
32583: LD_INT 6
32585: PUSH
32586: LD_INT 7
32588: PUSH
32589: LD_INT 8
32591: PUSH
32592: LD_INT 13
32594: PUSH
32595: LD_INT 12
32597: PUSH
32598: LD_INT 15
32600: PUSH
32601: LD_INT 11
32603: PUSH
32604: LD_INT 14
32606: PUSH
32607: LD_INT 10
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: IN
32621: IFFALSE 32631
// btype = b_lab ;
32623: LD_ADDR_VAR 0 1
32627: PUSH
32628: LD_INT 6
32630: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32631: LD_VAR 0 6
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: IN
32650: NOT
32651: PUSH
32652: LD_VAR 0 1
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 2
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: LD_INT 6
32671: PUSH
32672: LD_INT 36
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: LD_INT 31
32683: PUSH
32684: LD_INT 32
32686: PUSH
32687: LD_INT 33
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: IN
32703: NOT
32704: PUSH
32705: LD_VAR 0 6
32709: PUSH
32710: LD_INT 1
32712: EQUAL
32713: AND
32714: OR
32715: PUSH
32716: LD_VAR 0 1
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: IN
32731: NOT
32732: PUSH
32733: LD_VAR 0 6
32737: PUSH
32738: LD_INT 2
32740: EQUAL
32741: AND
32742: OR
32743: IFFALSE 32753
// mode = 0 ;
32745: LD_ADDR_VAR 0 6
32749: PUSH
32750: LD_INT 0
32752: ST_TO_ADDR
// case mode of 0 :
32753: LD_VAR 0 6
32757: PUSH
32758: LD_INT 0
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 44219
32766: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32767: LD_ADDR_VAR 0 11
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32960: LD_ADDR_VAR 0 12
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33156: LD_ADDR_VAR 0 13
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 3
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: LD_INT 2
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33355: LD_ADDR_VAR 0 14
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 1
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33551: LD_ADDR_VAR 0 15
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33744: LD_ADDR_VAR 0 16
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33937: LD_ADDR_VAR 0 17
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34167: LD_ADDR_VAR 0 18
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34397: LD_ADDR_VAR 0 19
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: NEG
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: LD_INT 2
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34627: LD_ADDR_VAR 0 20
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34857: LD_ADDR_VAR 0 21
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35087: LD_ADDR_VAR 0 22
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35317: LD_ADDR_VAR 0 23
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: LD_INT 3
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 3
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 2
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35597: LD_ADDR_VAR 0 24
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 3
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35873: LD_ADDR_VAR 0 25
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 2
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36147: LD_ADDR_VAR 0 26
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36423: LD_ADDR_VAR 0 27
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36703: LD_ADDR_VAR 0 28
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 2
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 3
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 3
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 3
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36985: LD_ADDR_VAR 0 29
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 3
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37264: LD_ADDR_VAR 0 30
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 3
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37542: LD_ADDR_VAR 0 31
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 3
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37820: LD_ADDR_VAR 0 32
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 3
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 3
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38098: LD_ADDR_VAR 0 33
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 3
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 3
38342: NEG
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38377: LD_ADDR_VAR 0 34
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 3
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 3
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38657: LD_ADDR_VAR 0 35
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38769: LD_ADDR_VAR 0 36
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38881: LD_ADDR_VAR 0 37
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38993: LD_ADDR_VAR 0 38
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39105: LD_ADDR_VAR 0 39
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39217: LD_ADDR_VAR 0 40
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39329: LD_ADDR_VAR 0 41
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 3
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39679: LD_ADDR_VAR 0 42
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40029: LD_ADDR_VAR 0 43
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 3
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 3
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40377: LD_ADDR_VAR 0 44
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 3
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 3
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40727: LD_ADDR_VAR 0 45
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 3
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 3
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 3
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41077: LD_ADDR_VAR 0 46
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 3
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 3
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 3
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 3
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41425: LD_ADDR_VAR 0 47
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41576: LD_ADDR_VAR 0 48
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41723: LD_ADDR_VAR 0 49
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41867: LD_ADDR_VAR 0 50
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42011: LD_ADDR_VAR 0 51
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42158: LD_ADDR_VAR 0 52
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42309: LD_ADDR_VAR 0 53
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42539: LD_ADDR_VAR 0 54
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42769: LD_ADDR_VAR 0 55
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42999: LD_ADDR_VAR 0 56
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43229: LD_ADDR_VAR 0 57
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43459: LD_ADDR_VAR 0 58
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43689: LD_ADDR_VAR 0 59
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43777: LD_ADDR_VAR 0 60
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43865: LD_ADDR_VAR 0 61
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43953: LD_ADDR_VAR 0 62
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44041: LD_ADDR_VAR 0 63
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44129: LD_ADDR_VAR 0 64
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// end ; 1 :
44217: GO 50114
44219: LD_INT 1
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 46850
44227: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44228: LD_ADDR_VAR 0 11
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44272: LD_ADDR_VAR 0 12
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44313: LD_ADDR_VAR 0 13
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 3
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44353: LD_ADDR_VAR 0 14
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44394: LD_ADDR_VAR 0 15
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44438: LD_ADDR_VAR 0 16
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 3
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44484: LD_ADDR_VAR 0 17
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44528: LD_ADDR_VAR 0 18
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44569: LD_ADDR_VAR 0 19
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44609: LD_ADDR_VAR 0 20
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: LIST
44649: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44650: LD_ADDR_VAR 0 21
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44694: LD_ADDR_VAR 0 22
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44740: LD_ADDR_VAR 0 23
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 4
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 3
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44784: LD_ADDR_VAR 0 24
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44825: LD_ADDR_VAR 0 25
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 4
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 4
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44865: LD_ADDR_VAR 0 26
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 4
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44906: LD_ADDR_VAR 0 27
44910: PUSH
44911: LD_INT 3
44913: NEG
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 3
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 4
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44950: LD_ADDR_VAR 0 28
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: LD_INT 4
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 4
44981: NEG
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44996: LD_ADDR_VAR 0 29
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 3
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 4
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 4
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 3
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 5
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 5
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 4
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 6
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 6
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 5
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45151: LD_ADDR_VAR 0 30
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 4
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 4
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 4
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 5
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 5
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 5
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 6
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 6
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45294: LD_ADDR_VAR 0 31
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 3
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 4
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 4
45341: PUSH
45342: LD_INT 4
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: LD_INT 4
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: LD_INT 4
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: LD_INT 5
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 4
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 6
45391: PUSH
45392: LD_INT 5
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 6
45401: PUSH
45402: LD_INT 6
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 5
45411: PUSH
45412: LD_INT 6
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45433: LD_ADDR_VAR 0 32
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 4
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 5
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 5
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 4
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 6
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 6
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 5
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45576: LD_ADDR_VAR 0 33
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: NEG
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 4
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 4
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 5
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 5
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 6
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 6
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45731: LD_ADDR_VAR 0 34
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 3
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: LD_INT 4
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 4
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 4
45798: NEG
45799: PUSH
45800: LD_INT 4
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: NEG
45811: PUSH
45812: LD_INT 5
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 5
45822: NEG
45823: PUSH
45824: LD_INT 4
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 5
45834: NEG
45835: PUSH
45836: LD_INT 5
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 5
45846: NEG
45847: PUSH
45848: LD_INT 6
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 6
45858: NEG
45859: PUSH
45860: LD_INT 5
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 6
45870: NEG
45871: PUSH
45872: LD_INT 6
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45894: LD_ADDR_VAR 0 41
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45938: LD_ADDR_VAR 0 42
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45979: LD_ADDR_VAR 0 43
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46019: LD_ADDR_VAR 0 44
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 3
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46060: LD_ADDR_VAR 0 45
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46104: LD_ADDR_VAR 0 46
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46150: LD_ADDR_VAR 0 47
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46183: LD_ADDR_VAR 0 48
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46214: LD_ADDR_VAR 0 49
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46243: LD_ADDR_VAR 0 50
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46272: LD_ADDR_VAR 0 51
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46303: LD_ADDR_VAR 0 52
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46336: LD_ADDR_VAR 0 53
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46380: LD_ADDR_VAR 0 54
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46421: LD_ADDR_VAR 0 55
46425: PUSH
46426: LD_INT 3
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46461: LD_ADDR_VAR 0 56
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46502: LD_ADDR_VAR 0 57
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46546: LD_ADDR_VAR 0 58
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46592: LD_ADDR_VAR 0 59
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46636: LD_ADDR_VAR 0 60
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46677: LD_ADDR_VAR 0 61
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46717: LD_ADDR_VAR 0 62
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46758: LD_ADDR_VAR 0 63
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46802: LD_ADDR_VAR 0 64
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// end ; 2 :
46848: GO 50114
46850: LD_INT 2
46852: DOUBLE
46853: EQUAL
46854: IFTRUE 46858
46856: GO 50113
46858: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46859: LD_ADDR_VAR 0 29
46863: PUSH
46864: LD_INT 4
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 4
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 5
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 5
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 4
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 5
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 4
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: LD_INT 4
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: LD_INT 4
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 3
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 4
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 4
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 4
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 5
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 4
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 3
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 5
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 4
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 4
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 4
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 4
47244: NEG
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 4
47256: NEG
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 4
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 5
47304: NEG
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 5
47316: NEG
47317: PUSH
47318: LD_INT 5
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: LD_INT 5
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47397: LD_ADDR_VAR 0 30
47401: PUSH
47402: LD_INT 4
47404: PUSH
47405: LD_INT 4
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 4
47414: PUSH
47415: LD_INT 3
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 5
47424: PUSH
47425: LD_INT 4
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 5
47434: PUSH
47435: LD_INT 5
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 4
47444: PUSH
47445: LD_INT 5
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 4
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 5
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 5
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: LD_INT 4
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 4
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 4
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 4
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 5
47643: NEG
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 5
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 5
47666: NEG
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 4
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 4
47749: NEG
47750: PUSH
47751: LD_INT 3
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 4
47761: NEG
47762: PUSH
47763: LD_INT 4
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 4
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 4
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 4
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 5
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 4
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 4
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 5
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 5
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47944: LD_ADDR_VAR 0 31
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 4
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 5
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 5
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 4
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 5
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 4
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 4
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 4
48146: NEG
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 5
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 4
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 5
48206: NEG
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 5
48218: NEG
48219: PUSH
48220: LD_INT 5
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: LD_INT 5
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 5
48242: NEG
48243: PUSH
48244: LD_INT 3
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 4
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 4
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 4
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 4
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 4
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 5
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 5
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 5
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48494: LD_ADDR_VAR 0 32
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 4
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 4
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 5
48557: NEG
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 5
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 5
48580: NEG
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 4
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 4
48663: NEG
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 4
48675: NEG
48676: PUSH
48677: LD_INT 4
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 4
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 4
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 4
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 5
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 4
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 4
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 5
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 5
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 4
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 4
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 4
48906: PUSH
48907: LD_INT 4
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 4
48916: PUSH
48917: LD_INT 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 5
48926: PUSH
48927: LD_INT 4
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 5
48936: PUSH
48937: LD_INT 5
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 5
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: LD_INT 4
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 3
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 5
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: PUSH
48987: LD_INT 5
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49041: LD_ADDR_VAR 0 33
49045: PUSH
49046: LD_INT 4
49048: NEG
49049: PUSH
49050: LD_INT 4
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 5
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 4
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: LD_INT 4
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: NEG
49121: PUSH
49122: LD_INT 5
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: LD_INT 5
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 5
49144: NEG
49145: PUSH
49146: LD_INT 3
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 4
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 4
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 4
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 4
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 5
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 5
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 4
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 5
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 3
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 4
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 4
49381: PUSH
49382: LD_INT 4
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: LD_INT 4
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 4
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 4
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 4
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 5
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 5
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 4
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49579: LD_ADDR_VAR 0 34
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 4
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 5
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 4
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 5
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 4
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 4
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 5
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 5
49811: PUSH
49812: LD_INT 5
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: LD_INT 5
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 4
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 5
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 4
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 4
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 4
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 5
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 5
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 5
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// end ; end ;
50111: GO 50114
50113: POP
// case btype of b_depot , b_warehouse :
50114: LD_VAR 0 1
50118: PUSH
50119: LD_INT 0
50121: DOUBLE
50122: EQUAL
50123: IFTRUE 50133
50125: LD_INT 1
50127: DOUBLE
50128: EQUAL
50129: IFTRUE 50133
50131: GO 50334
50133: POP
// case nation of nation_american :
50134: LD_VAR 0 5
50138: PUSH
50139: LD_INT 1
50141: DOUBLE
50142: EQUAL
50143: IFTRUE 50147
50145: GO 50203
50147: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50148: LD_ADDR_VAR 0 9
50152: PUSH
50153: LD_VAR 0 11
50157: PUSH
50158: LD_VAR 0 12
50162: PUSH
50163: LD_VAR 0 13
50167: PUSH
50168: LD_VAR 0 14
50172: PUSH
50173: LD_VAR 0 15
50177: PUSH
50178: LD_VAR 0 16
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: PUSH
50191: LD_VAR 0 4
50195: PUSH
50196: LD_INT 1
50198: PLUS
50199: ARRAY
50200: ST_TO_ADDR
50201: GO 50332
50203: LD_INT 2
50205: DOUBLE
50206: EQUAL
50207: IFTRUE 50211
50209: GO 50267
50211: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50212: LD_ADDR_VAR 0 9
50216: PUSH
50217: LD_VAR 0 17
50221: PUSH
50222: LD_VAR 0 18
50226: PUSH
50227: LD_VAR 0 19
50231: PUSH
50232: LD_VAR 0 20
50236: PUSH
50237: LD_VAR 0 21
50241: PUSH
50242: LD_VAR 0 22
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: PUSH
50255: LD_VAR 0 4
50259: PUSH
50260: LD_INT 1
50262: PLUS
50263: ARRAY
50264: ST_TO_ADDR
50265: GO 50332
50267: LD_INT 3
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50275
50273: GO 50331
50275: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50276: LD_ADDR_VAR 0 9
50280: PUSH
50281: LD_VAR 0 23
50285: PUSH
50286: LD_VAR 0 24
50290: PUSH
50291: LD_VAR 0 25
50295: PUSH
50296: LD_VAR 0 26
50300: PUSH
50301: LD_VAR 0 27
50305: PUSH
50306: LD_VAR 0 28
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: PUSH
50319: LD_VAR 0 4
50323: PUSH
50324: LD_INT 1
50326: PLUS
50327: ARRAY
50328: ST_TO_ADDR
50329: GO 50332
50331: POP
50332: GO 50887
50334: LD_INT 2
50336: DOUBLE
50337: EQUAL
50338: IFTRUE 50348
50340: LD_INT 3
50342: DOUBLE
50343: EQUAL
50344: IFTRUE 50348
50346: GO 50404
50348: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50349: LD_ADDR_VAR 0 9
50353: PUSH
50354: LD_VAR 0 29
50358: PUSH
50359: LD_VAR 0 30
50363: PUSH
50364: LD_VAR 0 31
50368: PUSH
50369: LD_VAR 0 32
50373: PUSH
50374: LD_VAR 0 33
50378: PUSH
50379: LD_VAR 0 34
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: PUSH
50392: LD_VAR 0 4
50396: PUSH
50397: LD_INT 1
50399: PLUS
50400: ARRAY
50401: ST_TO_ADDR
50402: GO 50887
50404: LD_INT 16
50406: DOUBLE
50407: EQUAL
50408: IFTRUE 50466
50410: LD_INT 17
50412: DOUBLE
50413: EQUAL
50414: IFTRUE 50466
50416: LD_INT 18
50418: DOUBLE
50419: EQUAL
50420: IFTRUE 50466
50422: LD_INT 19
50424: DOUBLE
50425: EQUAL
50426: IFTRUE 50466
50428: LD_INT 22
50430: DOUBLE
50431: EQUAL
50432: IFTRUE 50466
50434: LD_INT 20
50436: DOUBLE
50437: EQUAL
50438: IFTRUE 50466
50440: LD_INT 21
50442: DOUBLE
50443: EQUAL
50444: IFTRUE 50466
50446: LD_INT 23
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50466
50452: LD_INT 24
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50466
50458: LD_INT 25
50460: DOUBLE
50461: EQUAL
50462: IFTRUE 50466
50464: GO 50522
50466: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50467: LD_ADDR_VAR 0 9
50471: PUSH
50472: LD_VAR 0 35
50476: PUSH
50477: LD_VAR 0 36
50481: PUSH
50482: LD_VAR 0 37
50486: PUSH
50487: LD_VAR 0 38
50491: PUSH
50492: LD_VAR 0 39
50496: PUSH
50497: LD_VAR 0 40
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: PUSH
50510: LD_VAR 0 4
50514: PUSH
50515: LD_INT 1
50517: PLUS
50518: ARRAY
50519: ST_TO_ADDR
50520: GO 50887
50522: LD_INT 6
50524: DOUBLE
50525: EQUAL
50526: IFTRUE 50578
50528: LD_INT 7
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50578
50534: LD_INT 8
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50578
50540: LD_INT 13
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50578
50546: LD_INT 12
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50578
50552: LD_INT 15
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50578
50558: LD_INT 11
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50578
50564: LD_INT 14
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50578
50570: LD_INT 10
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50634
50578: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50579: LD_ADDR_VAR 0 9
50583: PUSH
50584: LD_VAR 0 41
50588: PUSH
50589: LD_VAR 0 42
50593: PUSH
50594: LD_VAR 0 43
50598: PUSH
50599: LD_VAR 0 44
50603: PUSH
50604: LD_VAR 0 45
50608: PUSH
50609: LD_VAR 0 46
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: LD_INT 1
50629: PLUS
50630: ARRAY
50631: ST_TO_ADDR
50632: GO 50887
50634: LD_INT 36
50636: DOUBLE
50637: EQUAL
50638: IFTRUE 50642
50640: GO 50698
50642: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50643: LD_ADDR_VAR 0 9
50647: PUSH
50648: LD_VAR 0 47
50652: PUSH
50653: LD_VAR 0 48
50657: PUSH
50658: LD_VAR 0 49
50662: PUSH
50663: LD_VAR 0 50
50667: PUSH
50668: LD_VAR 0 51
50672: PUSH
50673: LD_VAR 0 52
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: PUSH
50686: LD_VAR 0 4
50690: PUSH
50691: LD_INT 1
50693: PLUS
50694: ARRAY
50695: ST_TO_ADDR
50696: GO 50887
50698: LD_INT 4
50700: DOUBLE
50701: EQUAL
50702: IFTRUE 50724
50704: LD_INT 5
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50724
50710: LD_INT 34
50712: DOUBLE
50713: EQUAL
50714: IFTRUE 50724
50716: LD_INT 37
50718: DOUBLE
50719: EQUAL
50720: IFTRUE 50724
50722: GO 50780
50724: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50725: LD_ADDR_VAR 0 9
50729: PUSH
50730: LD_VAR 0 53
50734: PUSH
50735: LD_VAR 0 54
50739: PUSH
50740: LD_VAR 0 55
50744: PUSH
50745: LD_VAR 0 56
50749: PUSH
50750: LD_VAR 0 57
50754: PUSH
50755: LD_VAR 0 58
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: PUSH
50768: LD_VAR 0 4
50772: PUSH
50773: LD_INT 1
50775: PLUS
50776: ARRAY
50777: ST_TO_ADDR
50778: GO 50887
50780: LD_INT 31
50782: DOUBLE
50783: EQUAL
50784: IFTRUE 50830
50786: LD_INT 32
50788: DOUBLE
50789: EQUAL
50790: IFTRUE 50830
50792: LD_INT 33
50794: DOUBLE
50795: EQUAL
50796: IFTRUE 50830
50798: LD_INT 27
50800: DOUBLE
50801: EQUAL
50802: IFTRUE 50830
50804: LD_INT 26
50806: DOUBLE
50807: EQUAL
50808: IFTRUE 50830
50810: LD_INT 28
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50830
50816: LD_INT 29
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50830
50822: LD_INT 30
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50830
50828: GO 50886
50830: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50831: LD_ADDR_VAR 0 9
50835: PUSH
50836: LD_VAR 0 59
50840: PUSH
50841: LD_VAR 0 60
50845: PUSH
50846: LD_VAR 0 61
50850: PUSH
50851: LD_VAR 0 62
50855: PUSH
50856: LD_VAR 0 63
50860: PUSH
50861: LD_VAR 0 64
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_VAR 0 4
50878: PUSH
50879: LD_INT 1
50881: PLUS
50882: ARRAY
50883: ST_TO_ADDR
50884: GO 50887
50886: POP
// temp_list2 = [ ] ;
50887: LD_ADDR_VAR 0 10
50891: PUSH
50892: EMPTY
50893: ST_TO_ADDR
// for i in temp_list do
50894: LD_ADDR_VAR 0 8
50898: PUSH
50899: LD_VAR 0 9
50903: PUSH
50904: FOR_IN
50905: IFFALSE 50957
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50907: LD_ADDR_VAR 0 10
50911: PUSH
50912: LD_VAR 0 10
50916: PUSH
50917: LD_VAR 0 8
50921: PUSH
50922: LD_INT 1
50924: ARRAY
50925: PUSH
50926: LD_VAR 0 2
50930: PLUS
50931: PUSH
50932: LD_VAR 0 8
50936: PUSH
50937: LD_INT 2
50939: ARRAY
50940: PUSH
50941: LD_VAR 0 3
50945: PLUS
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: ADD
50954: ST_TO_ADDR
50955: GO 50904
50957: POP
50958: POP
// result = temp_list2 ;
50959: LD_ADDR_VAR 0 7
50963: PUSH
50964: LD_VAR 0 10
50968: ST_TO_ADDR
// end ;
50969: LD_VAR 0 7
50973: RET
// export function EnemyInRange ( unit , dist ) ; begin
50974: LD_INT 0
50976: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50977: LD_ADDR_VAR 0 3
50981: PUSH
50982: LD_VAR 0 1
50986: PPUSH
50987: CALL_OW 255
50991: PPUSH
50992: LD_VAR 0 1
50996: PPUSH
50997: CALL_OW 250
51001: PPUSH
51002: LD_VAR 0 1
51006: PPUSH
51007: CALL_OW 251
51011: PPUSH
51012: LD_VAR 0 2
51016: PPUSH
51017: CALL 25078 0 4
51021: PUSH
51022: LD_INT 4
51024: ARRAY
51025: ST_TO_ADDR
// end ;
51026: LD_VAR 0 3
51030: RET
// export function PlayerSeeMe ( unit ) ; begin
51031: LD_INT 0
51033: PPUSH
// result := See ( your_side , unit ) ;
51034: LD_ADDR_VAR 0 2
51038: PUSH
51039: LD_OWVAR 2
51043: PPUSH
51044: LD_VAR 0 1
51048: PPUSH
51049: CALL_OW 292
51053: ST_TO_ADDR
// end ;
51054: LD_VAR 0 2
51058: RET
// export function ReverseDir ( unit ) ; begin
51059: LD_INT 0
51061: PPUSH
// if not unit then
51062: LD_VAR 0 1
51066: NOT
51067: IFFALSE 51071
// exit ;
51069: GO 51094
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51071: LD_ADDR_VAR 0 2
51075: PUSH
51076: LD_VAR 0 1
51080: PPUSH
51081: CALL_OW 254
51085: PUSH
51086: LD_INT 3
51088: PLUS
51089: PUSH
51090: LD_INT 6
51092: MOD
51093: ST_TO_ADDR
// end ;
51094: LD_VAR 0 2
51098: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51099: LD_INT 0
51101: PPUSH
51102: PPUSH
51103: PPUSH
51104: PPUSH
51105: PPUSH
// if not hexes then
51106: LD_VAR 0 2
51110: NOT
51111: IFFALSE 51115
// exit ;
51113: GO 51263
// dist := 9999 ;
51115: LD_ADDR_VAR 0 5
51119: PUSH
51120: LD_INT 9999
51122: ST_TO_ADDR
// for i = 1 to hexes do
51123: LD_ADDR_VAR 0 4
51127: PUSH
51128: DOUBLE
51129: LD_INT 1
51131: DEC
51132: ST_TO_ADDR
51133: LD_VAR 0 2
51137: PUSH
51138: FOR_TO
51139: IFFALSE 51251
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51141: LD_VAR 0 1
51145: PPUSH
51146: LD_VAR 0 2
51150: PUSH
51151: LD_VAR 0 4
51155: ARRAY
51156: PUSH
51157: LD_INT 1
51159: ARRAY
51160: PPUSH
51161: LD_VAR 0 2
51165: PUSH
51166: LD_VAR 0 4
51170: ARRAY
51171: PUSH
51172: LD_INT 2
51174: ARRAY
51175: PPUSH
51176: CALL_OW 297
51180: PUSH
51181: LD_VAR 0 5
51185: LESS
51186: IFFALSE 51249
// begin hex := hexes [ i ] ;
51188: LD_ADDR_VAR 0 7
51192: PUSH
51193: LD_VAR 0 2
51197: PUSH
51198: LD_VAR 0 4
51202: ARRAY
51203: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: LD_VAR 0 2
51218: PUSH
51219: LD_VAR 0 4
51223: ARRAY
51224: PUSH
51225: LD_INT 1
51227: ARRAY
51228: PPUSH
51229: LD_VAR 0 2
51233: PUSH
51234: LD_VAR 0 4
51238: ARRAY
51239: PUSH
51240: LD_INT 2
51242: ARRAY
51243: PPUSH
51244: CALL_OW 297
51248: ST_TO_ADDR
// end ; end ;
51249: GO 51138
51251: POP
51252: POP
// result := hex ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_VAR 0 7
51262: ST_TO_ADDR
// end ;
51263: LD_VAR 0 3
51267: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51268: LD_INT 0
51270: PPUSH
51271: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51272: LD_VAR 0 1
51276: NOT
51277: PUSH
51278: LD_VAR 0 1
51282: PUSH
51283: LD_INT 21
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 23
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PPUSH
51307: CALL_OW 69
51311: IN
51312: NOT
51313: OR
51314: IFFALSE 51318
// exit ;
51316: GO 51365
// for i = 1 to 3 do
51318: LD_ADDR_VAR 0 3
51322: PUSH
51323: DOUBLE
51324: LD_INT 1
51326: DEC
51327: ST_TO_ADDR
51328: LD_INT 3
51330: PUSH
51331: FOR_TO
51332: IFFALSE 51363
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 250
51343: PPUSH
51344: LD_VAR 0 1
51348: PPUSH
51349: CALL_OW 251
51353: PPUSH
51354: LD_INT 1
51356: PPUSH
51357: CALL_OW 453
51361: GO 51331
51363: POP
51364: POP
// end ;
51365: LD_VAR 0 2
51369: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51370: LD_INT 0
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51378: LD_VAR 0 1
51382: NOT
51383: PUSH
51384: LD_VAR 0 2
51388: NOT
51389: OR
51390: PUSH
51391: LD_VAR 0 1
51395: PPUSH
51396: CALL_OW 314
51400: OR
51401: IFFALSE 51405
// exit ;
51403: GO 51846
// x := GetX ( enemy_unit ) ;
51405: LD_ADDR_VAR 0 7
51409: PUSH
51410: LD_VAR 0 2
51414: PPUSH
51415: CALL_OW 250
51419: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51420: LD_ADDR_VAR 0 8
51424: PUSH
51425: LD_VAR 0 2
51429: PPUSH
51430: CALL_OW 251
51434: ST_TO_ADDR
// if not x or not y then
51435: LD_VAR 0 7
51439: NOT
51440: PUSH
51441: LD_VAR 0 8
51445: NOT
51446: OR
51447: IFFALSE 51451
// exit ;
51449: GO 51846
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51451: LD_ADDR_VAR 0 6
51455: PUSH
51456: LD_VAR 0 7
51460: PPUSH
51461: LD_INT 0
51463: PPUSH
51464: LD_INT 4
51466: PPUSH
51467: CALL_OW 272
51471: PUSH
51472: LD_VAR 0 8
51476: PPUSH
51477: LD_INT 0
51479: PPUSH
51480: LD_INT 4
51482: PPUSH
51483: CALL_OW 273
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_VAR 0 7
51496: PPUSH
51497: LD_INT 1
51499: PPUSH
51500: LD_INT 4
51502: PPUSH
51503: CALL_OW 272
51507: PUSH
51508: LD_VAR 0 8
51512: PPUSH
51513: LD_INT 1
51515: PPUSH
51516: LD_INT 4
51518: PPUSH
51519: CALL_OW 273
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_VAR 0 7
51532: PPUSH
51533: LD_INT 2
51535: PPUSH
51536: LD_INT 4
51538: PPUSH
51539: CALL_OW 272
51543: PUSH
51544: LD_VAR 0 8
51548: PPUSH
51549: LD_INT 2
51551: PPUSH
51552: LD_INT 4
51554: PPUSH
51555: CALL_OW 273
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_VAR 0 7
51568: PPUSH
51569: LD_INT 3
51571: PPUSH
51572: LD_INT 4
51574: PPUSH
51575: CALL_OW 272
51579: PUSH
51580: LD_VAR 0 8
51584: PPUSH
51585: LD_INT 3
51587: PPUSH
51588: LD_INT 4
51590: PPUSH
51591: CALL_OW 273
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_VAR 0 7
51604: PPUSH
51605: LD_INT 4
51607: PPUSH
51608: LD_INT 4
51610: PPUSH
51611: CALL_OW 272
51615: PUSH
51616: LD_VAR 0 8
51620: PPUSH
51621: LD_INT 4
51623: PPUSH
51624: LD_INT 4
51626: PPUSH
51627: CALL_OW 273
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_VAR 0 7
51640: PPUSH
51641: LD_INT 5
51643: PPUSH
51644: LD_INT 4
51646: PPUSH
51647: CALL_OW 272
51651: PUSH
51652: LD_VAR 0 8
51656: PPUSH
51657: LD_INT 5
51659: PPUSH
51660: LD_INT 4
51662: PPUSH
51663: CALL_OW 273
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// for i = tmp downto 1 do
51680: LD_ADDR_VAR 0 4
51684: PUSH
51685: DOUBLE
51686: LD_VAR 0 6
51690: INC
51691: ST_TO_ADDR
51692: LD_INT 1
51694: PUSH
51695: FOR_DOWNTO
51696: IFFALSE 51797
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51698: LD_VAR 0 6
51702: PUSH
51703: LD_VAR 0 4
51707: ARRAY
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: PPUSH
51713: LD_VAR 0 6
51717: PUSH
51718: LD_VAR 0 4
51722: ARRAY
51723: PUSH
51724: LD_INT 2
51726: ARRAY
51727: PPUSH
51728: CALL_OW 488
51732: NOT
51733: PUSH
51734: LD_VAR 0 6
51738: PUSH
51739: LD_VAR 0 4
51743: ARRAY
51744: PUSH
51745: LD_INT 1
51747: ARRAY
51748: PPUSH
51749: LD_VAR 0 6
51753: PUSH
51754: LD_VAR 0 4
51758: ARRAY
51759: PUSH
51760: LD_INT 2
51762: ARRAY
51763: PPUSH
51764: CALL_OW 428
51768: PUSH
51769: LD_INT 0
51771: NONEQUAL
51772: OR
51773: IFFALSE 51795
// tmp := Delete ( tmp , i ) ;
51775: LD_ADDR_VAR 0 6
51779: PUSH
51780: LD_VAR 0 6
51784: PPUSH
51785: LD_VAR 0 4
51789: PPUSH
51790: CALL_OW 3
51794: ST_TO_ADDR
51795: GO 51695
51797: POP
51798: POP
// j := GetClosestHex ( unit , tmp ) ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: LD_VAR 0 6
51813: PPUSH
51814: CALL 51099 0 2
51818: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51819: LD_VAR 0 1
51823: PPUSH
51824: LD_VAR 0 5
51828: PUSH
51829: LD_INT 1
51831: ARRAY
51832: PPUSH
51833: LD_VAR 0 5
51837: PUSH
51838: LD_INT 2
51840: ARRAY
51841: PPUSH
51842: CALL_OW 111
// end ;
51846: LD_VAR 0 3
51850: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51851: LD_INT 0
51853: PPUSH
51854: PPUSH
51855: PPUSH
// uc_side = 0 ;
51856: LD_ADDR_OWVAR 20
51860: PUSH
51861: LD_INT 0
51863: ST_TO_ADDR
// uc_nation = 0 ;
51864: LD_ADDR_OWVAR 21
51868: PUSH
51869: LD_INT 0
51871: ST_TO_ADDR
// InitHc ;
51872: CALL_OW 19
// InitVc ;
51876: CALL_OW 20
// if mastodonts then
51880: LD_VAR 0 6
51884: IFFALSE 51951
// for i = 1 to mastodonts do
51886: LD_ADDR_VAR 0 11
51890: PUSH
51891: DOUBLE
51892: LD_INT 1
51894: DEC
51895: ST_TO_ADDR
51896: LD_VAR 0 6
51900: PUSH
51901: FOR_TO
51902: IFFALSE 51949
// begin vc_chassis := 31 ;
51904: LD_ADDR_OWVAR 37
51908: PUSH
51909: LD_INT 31
51911: ST_TO_ADDR
// vc_control := control_rider ;
51912: LD_ADDR_OWVAR 38
51916: PUSH
51917: LD_INT 4
51919: ST_TO_ADDR
// animal := CreateVehicle ;
51920: LD_ADDR_VAR 0 12
51924: PUSH
51925: CALL_OW 45
51929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51930: LD_VAR 0 12
51934: PPUSH
51935: LD_VAR 0 8
51939: PPUSH
51940: LD_INT 0
51942: PPUSH
51943: CALL 54139 0 3
// end ;
51947: GO 51901
51949: POP
51950: POP
// if horses then
51951: LD_VAR 0 5
51955: IFFALSE 52022
// for i = 1 to horses do
51957: LD_ADDR_VAR 0 11
51961: PUSH
51962: DOUBLE
51963: LD_INT 1
51965: DEC
51966: ST_TO_ADDR
51967: LD_VAR 0 5
51971: PUSH
51972: FOR_TO
51973: IFFALSE 52020
// begin hc_class := 21 ;
51975: LD_ADDR_OWVAR 28
51979: PUSH
51980: LD_INT 21
51982: ST_TO_ADDR
// hc_gallery :=  ;
51983: LD_ADDR_OWVAR 33
51987: PUSH
51988: LD_STRING 
51990: ST_TO_ADDR
// animal := CreateHuman ;
51991: LD_ADDR_VAR 0 12
51995: PUSH
51996: CALL_OW 44
52000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52001: LD_VAR 0 12
52005: PPUSH
52006: LD_VAR 0 8
52010: PPUSH
52011: LD_INT 0
52013: PPUSH
52014: CALL 54139 0 3
// end ;
52018: GO 51972
52020: POP
52021: POP
// if birds then
52022: LD_VAR 0 1
52026: IFFALSE 52093
// for i = 1 to birds do
52028: LD_ADDR_VAR 0 11
52032: PUSH
52033: DOUBLE
52034: LD_INT 1
52036: DEC
52037: ST_TO_ADDR
52038: LD_VAR 0 1
52042: PUSH
52043: FOR_TO
52044: IFFALSE 52091
// begin hc_class = 18 ;
52046: LD_ADDR_OWVAR 28
52050: PUSH
52051: LD_INT 18
52053: ST_TO_ADDR
// hc_gallery =  ;
52054: LD_ADDR_OWVAR 33
52058: PUSH
52059: LD_STRING 
52061: ST_TO_ADDR
// animal := CreateHuman ;
52062: LD_ADDR_VAR 0 12
52066: PUSH
52067: CALL_OW 44
52071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52072: LD_VAR 0 12
52076: PPUSH
52077: LD_VAR 0 8
52081: PPUSH
52082: LD_INT 0
52084: PPUSH
52085: CALL 54139 0 3
// end ;
52089: GO 52043
52091: POP
52092: POP
// if tigers then
52093: LD_VAR 0 2
52097: IFFALSE 52181
// for i = 1 to tigers do
52099: LD_ADDR_VAR 0 11
52103: PUSH
52104: DOUBLE
52105: LD_INT 1
52107: DEC
52108: ST_TO_ADDR
52109: LD_VAR 0 2
52113: PUSH
52114: FOR_TO
52115: IFFALSE 52179
// begin hc_class = class_tiger ;
52117: LD_ADDR_OWVAR 28
52121: PUSH
52122: LD_INT 14
52124: ST_TO_ADDR
// hc_gallery =  ;
52125: LD_ADDR_OWVAR 33
52129: PUSH
52130: LD_STRING 
52132: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52133: LD_ADDR_OWVAR 35
52137: PUSH
52138: LD_INT 7
52140: NEG
52141: PPUSH
52142: LD_INT 7
52144: PPUSH
52145: CALL_OW 12
52149: ST_TO_ADDR
// animal := CreateHuman ;
52150: LD_ADDR_VAR 0 12
52154: PUSH
52155: CALL_OW 44
52159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52160: LD_VAR 0 12
52164: PPUSH
52165: LD_VAR 0 8
52169: PPUSH
52170: LD_INT 0
52172: PPUSH
52173: CALL 54139 0 3
// end ;
52177: GO 52114
52179: POP
52180: POP
// if apemans then
52181: LD_VAR 0 3
52185: IFFALSE 52308
// for i = 1 to apemans do
52187: LD_ADDR_VAR 0 11
52191: PUSH
52192: DOUBLE
52193: LD_INT 1
52195: DEC
52196: ST_TO_ADDR
52197: LD_VAR 0 3
52201: PUSH
52202: FOR_TO
52203: IFFALSE 52306
// begin hc_class = class_apeman ;
52205: LD_ADDR_OWVAR 28
52209: PUSH
52210: LD_INT 12
52212: ST_TO_ADDR
// hc_gallery =  ;
52213: LD_ADDR_OWVAR 33
52217: PUSH
52218: LD_STRING 
52220: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52221: LD_ADDR_OWVAR 35
52225: PUSH
52226: LD_INT 5
52228: NEG
52229: PPUSH
52230: LD_INT 5
52232: PPUSH
52233: CALL_OW 12
52237: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52238: LD_ADDR_OWVAR 31
52242: PUSH
52243: LD_INT 1
52245: PPUSH
52246: LD_INT 3
52248: PPUSH
52249: CALL_OW 12
52253: PUSH
52254: LD_INT 1
52256: PPUSH
52257: LD_INT 3
52259: PPUSH
52260: CALL_OW 12
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// animal := CreateHuman ;
52277: LD_ADDR_VAR 0 12
52281: PUSH
52282: CALL_OW 44
52286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52287: LD_VAR 0 12
52291: PPUSH
52292: LD_VAR 0 8
52296: PPUSH
52297: LD_INT 0
52299: PPUSH
52300: CALL 54139 0 3
// end ;
52304: GO 52202
52306: POP
52307: POP
// if enchidnas then
52308: LD_VAR 0 4
52312: IFFALSE 52379
// for i = 1 to enchidnas do
52314: LD_ADDR_VAR 0 11
52318: PUSH
52319: DOUBLE
52320: LD_INT 1
52322: DEC
52323: ST_TO_ADDR
52324: LD_VAR 0 4
52328: PUSH
52329: FOR_TO
52330: IFFALSE 52377
// begin hc_class = 13 ;
52332: LD_ADDR_OWVAR 28
52336: PUSH
52337: LD_INT 13
52339: ST_TO_ADDR
// hc_gallery =  ;
52340: LD_ADDR_OWVAR 33
52344: PUSH
52345: LD_STRING 
52347: ST_TO_ADDR
// animal := CreateHuman ;
52348: LD_ADDR_VAR 0 12
52352: PUSH
52353: CALL_OW 44
52357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52358: LD_VAR 0 12
52362: PPUSH
52363: LD_VAR 0 8
52367: PPUSH
52368: LD_INT 0
52370: PPUSH
52371: CALL 54139 0 3
// end ;
52375: GO 52329
52377: POP
52378: POP
// if fishes then
52379: LD_VAR 0 7
52383: IFFALSE 52450
// for i = 1 to fishes do
52385: LD_ADDR_VAR 0 11
52389: PUSH
52390: DOUBLE
52391: LD_INT 1
52393: DEC
52394: ST_TO_ADDR
52395: LD_VAR 0 7
52399: PUSH
52400: FOR_TO
52401: IFFALSE 52448
// begin hc_class = 20 ;
52403: LD_ADDR_OWVAR 28
52407: PUSH
52408: LD_INT 20
52410: ST_TO_ADDR
// hc_gallery =  ;
52411: LD_ADDR_OWVAR 33
52415: PUSH
52416: LD_STRING 
52418: ST_TO_ADDR
// animal := CreateHuman ;
52419: LD_ADDR_VAR 0 12
52423: PUSH
52424: CALL_OW 44
52428: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52429: LD_VAR 0 12
52433: PPUSH
52434: LD_VAR 0 9
52438: PPUSH
52439: LD_INT 0
52441: PPUSH
52442: CALL 54139 0 3
// end ;
52446: GO 52400
52448: POP
52449: POP
// end ;
52450: LD_VAR 0 10
52454: RET
// export function WantHeal ( sci , unit ) ; begin
52455: LD_INT 0
52457: PPUSH
// if GetTaskList ( sci ) > 0 then
52458: LD_VAR 0 1
52462: PPUSH
52463: CALL_OW 437
52467: PUSH
52468: LD_INT 0
52470: GREATER
52471: IFFALSE 52541
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52473: LD_VAR 0 1
52477: PPUSH
52478: CALL_OW 437
52482: PUSH
52483: LD_INT 1
52485: ARRAY
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: PUSH
52491: LD_STRING l
52493: EQUAL
52494: PUSH
52495: LD_VAR 0 1
52499: PPUSH
52500: CALL_OW 437
52504: PUSH
52505: LD_INT 1
52507: ARRAY
52508: PUSH
52509: LD_INT 4
52511: ARRAY
52512: PUSH
52513: LD_VAR 0 2
52517: EQUAL
52518: AND
52519: IFFALSE 52531
// result := true else
52521: LD_ADDR_VAR 0 3
52525: PUSH
52526: LD_INT 1
52528: ST_TO_ADDR
52529: GO 52539
// result := false ;
52531: LD_ADDR_VAR 0 3
52535: PUSH
52536: LD_INT 0
52538: ST_TO_ADDR
// end else
52539: GO 52549
// result := false ;
52541: LD_ADDR_VAR 0 3
52545: PUSH
52546: LD_INT 0
52548: ST_TO_ADDR
// end ;
52549: LD_VAR 0 3
52553: RET
// export function HealTarget ( sci ) ; begin
52554: LD_INT 0
52556: PPUSH
// if not sci then
52557: LD_VAR 0 1
52561: NOT
52562: IFFALSE 52566
// exit ;
52564: GO 52631
// result := 0 ;
52566: LD_ADDR_VAR 0 2
52570: PUSH
52571: LD_INT 0
52573: ST_TO_ADDR
// if GetTaskList ( sci ) then
52574: LD_VAR 0 1
52578: PPUSH
52579: CALL_OW 437
52583: IFFALSE 52631
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL_OW 437
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PUSH
52603: LD_STRING l
52605: EQUAL
52606: IFFALSE 52631
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52608: LD_ADDR_VAR 0 2
52612: PUSH
52613: LD_VAR 0 1
52617: PPUSH
52618: CALL_OW 437
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: PUSH
52627: LD_INT 4
52629: ARRAY
52630: ST_TO_ADDR
// end ;
52631: LD_VAR 0 2
52635: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52636: LD_INT 0
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
// if not base_units then
52642: LD_VAR 0 1
52646: NOT
52647: IFFALSE 52651
// exit ;
52649: GO 52738
// result := false ;
52651: LD_ADDR_VAR 0 2
52655: PUSH
52656: LD_INT 0
52658: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52659: LD_ADDR_VAR 0 5
52663: PUSH
52664: LD_VAR 0 1
52668: PPUSH
52669: LD_INT 21
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PPUSH
52679: CALL_OW 72
52683: ST_TO_ADDR
// if not tmp then
52684: LD_VAR 0 5
52688: NOT
52689: IFFALSE 52693
// exit ;
52691: GO 52738
// for i in tmp do
52693: LD_ADDR_VAR 0 3
52697: PUSH
52698: LD_VAR 0 5
52702: PUSH
52703: FOR_IN
52704: IFFALSE 52736
// begin result := EnemyInRange ( i , 22 ) ;
52706: LD_ADDR_VAR 0 2
52710: PUSH
52711: LD_VAR 0 3
52715: PPUSH
52716: LD_INT 22
52718: PPUSH
52719: CALL 50974 0 2
52723: ST_TO_ADDR
// if result then
52724: LD_VAR 0 2
52728: IFFALSE 52734
// exit ;
52730: POP
52731: POP
52732: GO 52738
// end ;
52734: GO 52703
52736: POP
52737: POP
// end ;
52738: LD_VAR 0 2
52742: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52743: LD_INT 0
52745: PPUSH
52746: PPUSH
// if not units then
52747: LD_VAR 0 1
52751: NOT
52752: IFFALSE 52756
// exit ;
52754: GO 52826
// result := [ ] ;
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: EMPTY
52762: ST_TO_ADDR
// for i in units do
52763: LD_ADDR_VAR 0 4
52767: PUSH
52768: LD_VAR 0 1
52772: PUSH
52773: FOR_IN
52774: IFFALSE 52824
// if GetTag ( i ) = tag then
52776: LD_VAR 0 4
52780: PPUSH
52781: CALL_OW 110
52785: PUSH
52786: LD_VAR 0 2
52790: EQUAL
52791: IFFALSE 52822
// result := Insert ( result , result + 1 , i ) ;
52793: LD_ADDR_VAR 0 3
52797: PUSH
52798: LD_VAR 0 3
52802: PPUSH
52803: LD_VAR 0 3
52807: PUSH
52808: LD_INT 1
52810: PLUS
52811: PPUSH
52812: LD_VAR 0 4
52816: PPUSH
52817: CALL_OW 2
52821: ST_TO_ADDR
52822: GO 52773
52824: POP
52825: POP
// end ;
52826: LD_VAR 0 3
52830: RET
// export function IsDriver ( un ) ; begin
52831: LD_INT 0
52833: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: LD_VAR 0 1
52843: PUSH
52844: LD_INT 55
52846: PUSH
52847: EMPTY
52848: LIST
52849: PPUSH
52850: CALL_OW 69
52854: IN
52855: ST_TO_ADDR
// end ;
52856: LD_VAR 0 2
52860: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52861: LD_INT 0
52863: PPUSH
52864: PPUSH
// list := [ ] ;
52865: LD_ADDR_VAR 0 5
52869: PUSH
52870: EMPTY
52871: ST_TO_ADDR
// case d of 0 :
52872: LD_VAR 0 3
52876: PUSH
52877: LD_INT 0
52879: DOUBLE
52880: EQUAL
52881: IFTRUE 52885
52883: GO 53018
52885: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52886: LD_ADDR_VAR 0 5
52890: PUSH
52891: LD_VAR 0 1
52895: PUSH
52896: LD_INT 4
52898: MINUS
52899: PUSH
52900: LD_VAR 0 2
52904: PUSH
52905: LD_INT 4
52907: MINUS
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: PUSH
52917: LD_VAR 0 1
52921: PUSH
52922: LD_INT 3
52924: MINUS
52925: PUSH
52926: LD_VAR 0 2
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: PUSH
52939: LD_VAR 0 1
52943: PUSH
52944: LD_INT 4
52946: PLUS
52947: PUSH
52948: LD_VAR 0 2
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: LD_VAR 0 1
52965: PUSH
52966: LD_INT 3
52968: PLUS
52969: PUSH
52970: LD_VAR 0 2
52974: PUSH
52975: LD_INT 3
52977: PLUS
52978: PUSH
52979: LD_INT 5
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: PUSH
52987: LD_VAR 0 1
52991: PUSH
52992: LD_VAR 0 2
52996: PUSH
52997: LD_INT 4
52999: PLUS
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// end ; 1 :
53016: GO 53716
53018: LD_INT 1
53020: DOUBLE
53021: EQUAL
53022: IFTRUE 53026
53024: GO 53159
53026: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53027: LD_ADDR_VAR 0 5
53031: PUSH
53032: LD_VAR 0 1
53036: PUSH
53037: LD_VAR 0 2
53041: PUSH
53042: LD_INT 4
53044: MINUS
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: PUSH
53054: LD_VAR 0 1
53058: PUSH
53059: LD_INT 3
53061: MINUS
53062: PUSH
53063: LD_VAR 0 2
53067: PUSH
53068: LD_INT 3
53070: MINUS
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: PUSH
53080: LD_VAR 0 1
53084: PUSH
53085: LD_INT 4
53087: MINUS
53088: PUSH
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: PUSH
53102: LD_VAR 0 1
53106: PUSH
53107: LD_VAR 0 2
53111: PUSH
53112: LD_INT 3
53114: PLUS
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: PUSH
53124: LD_VAR 0 1
53128: PUSH
53129: LD_INT 4
53131: PLUS
53132: PUSH
53133: LD_VAR 0 2
53137: PUSH
53138: LD_INT 4
53140: PLUS
53141: PUSH
53142: LD_INT 5
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: ST_TO_ADDR
// end ; 2 :
53157: GO 53716
53159: LD_INT 2
53161: DOUBLE
53162: EQUAL
53163: IFTRUE 53167
53165: GO 53296
53167: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53168: LD_ADDR_VAR 0 5
53172: PUSH
53173: LD_VAR 0 1
53177: PUSH
53178: LD_VAR 0 2
53182: PUSH
53183: LD_INT 3
53185: MINUS
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: PUSH
53195: LD_VAR 0 1
53199: PUSH
53200: LD_INT 4
53202: PLUS
53203: PUSH
53204: LD_VAR 0 2
53208: PUSH
53209: LD_INT 4
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: PUSH
53217: LD_VAR 0 1
53221: PUSH
53222: LD_VAR 0 2
53226: PUSH
53227: LD_INT 4
53229: PLUS
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: PUSH
53239: LD_VAR 0 1
53243: PUSH
53244: LD_INT 3
53246: MINUS
53247: PUSH
53248: LD_VAR 0 2
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: PUSH
53261: LD_VAR 0 1
53265: PUSH
53266: LD_INT 4
53268: MINUS
53269: PUSH
53270: LD_VAR 0 2
53274: PUSH
53275: LD_INT 4
53277: MINUS
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// end ; 3 :
53294: GO 53716
53296: LD_INT 3
53298: DOUBLE
53299: EQUAL
53300: IFTRUE 53304
53302: GO 53437
53304: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53305: LD_ADDR_VAR 0 5
53309: PUSH
53310: LD_VAR 0 1
53314: PUSH
53315: LD_INT 3
53317: PLUS
53318: PUSH
53319: LD_VAR 0 2
53323: PUSH
53324: LD_INT 4
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: PUSH
53332: LD_VAR 0 1
53336: PUSH
53337: LD_INT 4
53339: PLUS
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 4
53348: PLUS
53349: PUSH
53350: LD_INT 5
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 1
53362: PUSH
53363: LD_INT 4
53365: MINUS
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_VAR 0 1
53384: PUSH
53385: LD_VAR 0 2
53389: PUSH
53390: LD_INT 4
53392: MINUS
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: PUSH
53402: LD_VAR 0 1
53406: PUSH
53407: LD_INT 3
53409: MINUS
53410: PUSH
53411: LD_VAR 0 2
53415: PUSH
53416: LD_INT 3
53418: MINUS
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// end ; 4 :
53435: GO 53716
53437: LD_INT 4
53439: DOUBLE
53440: EQUAL
53441: IFTRUE 53445
53443: GO 53578
53445: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53446: LD_ADDR_VAR 0 5
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_VAR 0 2
53460: PUSH
53461: LD_INT 4
53463: PLUS
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: LIST
53472: PUSH
53473: LD_VAR 0 1
53477: PUSH
53478: LD_INT 3
53480: PLUS
53481: PUSH
53482: LD_VAR 0 2
53486: PUSH
53487: LD_INT 3
53489: PLUS
53490: PUSH
53491: LD_INT 5
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: LD_VAR 0 1
53503: PUSH
53504: LD_INT 4
53506: PLUS
53507: PUSH
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 4
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_VAR 0 2
53530: PUSH
53531: LD_INT 3
53533: MINUS
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: LD_INT 4
53550: MINUS
53551: PUSH
53552: LD_VAR 0 2
53556: PUSH
53557: LD_INT 4
53559: MINUS
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// end ; 5 :
53576: GO 53716
53578: LD_INT 5
53580: DOUBLE
53581: EQUAL
53582: IFTRUE 53586
53584: GO 53715
53586: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53587: LD_ADDR_VAR 0 5
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_INT 4
53599: MINUS
53600: PUSH
53601: LD_VAR 0 2
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: PUSH
53614: LD_VAR 0 1
53618: PUSH
53619: LD_VAR 0 2
53623: PUSH
53624: LD_INT 4
53626: MINUS
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: PUSH
53636: LD_VAR 0 1
53640: PUSH
53641: LD_INT 4
53643: PLUS
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 4
53652: PLUS
53653: PUSH
53654: LD_INT 5
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_INT 3
53669: PLUS
53670: PUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: PUSH
53684: LD_VAR 0 1
53688: PUSH
53689: LD_VAR 0 2
53693: PUSH
53694: LD_INT 3
53696: PLUS
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// end ; end ;
53713: GO 53716
53715: POP
// result := list ;
53716: LD_ADDR_VAR 0 4
53720: PUSH
53721: LD_VAR 0 5
53725: ST_TO_ADDR
// end ;
53726: LD_VAR 0 4
53730: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53731: LD_INT 0
53733: PPUSH
53734: PPUSH
53735: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53736: LD_VAR 0 1
53740: NOT
53741: PUSH
53742: LD_VAR 0 2
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: IN
53765: NOT
53766: OR
53767: IFFALSE 53771
// exit ;
53769: GO 53863
// tmp := [ ] ;
53771: LD_ADDR_VAR 0 5
53775: PUSH
53776: EMPTY
53777: ST_TO_ADDR
// for i in units do
53778: LD_ADDR_VAR 0 4
53782: PUSH
53783: LD_VAR 0 1
53787: PUSH
53788: FOR_IN
53789: IFFALSE 53832
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53791: LD_ADDR_VAR 0 5
53795: PUSH
53796: LD_VAR 0 5
53800: PPUSH
53801: LD_VAR 0 5
53805: PUSH
53806: LD_INT 1
53808: PLUS
53809: PPUSH
53810: LD_VAR 0 4
53814: PPUSH
53815: LD_VAR 0 2
53819: PPUSH
53820: CALL_OW 259
53824: PPUSH
53825: CALL_OW 2
53829: ST_TO_ADDR
53830: GO 53788
53832: POP
53833: POP
// if not tmp then
53834: LD_VAR 0 5
53838: NOT
53839: IFFALSE 53843
// exit ;
53841: GO 53863
// result := SortListByListDesc ( units , tmp ) ;
53843: LD_ADDR_VAR 0 3
53847: PUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: LD_VAR 0 5
53857: PPUSH
53858: CALL_OW 77
53862: ST_TO_ADDR
// end ;
53863: LD_VAR 0 3
53867: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53868: LD_INT 0
53870: PPUSH
53871: PPUSH
53872: PPUSH
// result := false ;
53873: LD_ADDR_VAR 0 3
53877: PUSH
53878: LD_INT 0
53880: ST_TO_ADDR
// x := GetX ( building ) ;
53881: LD_ADDR_VAR 0 4
53885: PUSH
53886: LD_VAR 0 2
53890: PPUSH
53891: CALL_OW 250
53895: ST_TO_ADDR
// y := GetY ( building ) ;
53896: LD_ADDR_VAR 0 5
53900: PUSH
53901: LD_VAR 0 2
53905: PPUSH
53906: CALL_OW 251
53910: ST_TO_ADDR
// if not building or not x or not y then
53911: LD_VAR 0 2
53915: NOT
53916: PUSH
53917: LD_VAR 0 4
53921: NOT
53922: OR
53923: PUSH
53924: LD_VAR 0 5
53928: NOT
53929: OR
53930: IFFALSE 53934
// exit ;
53932: GO 54026
// if GetTaskList ( unit ) then
53934: LD_VAR 0 1
53938: PPUSH
53939: CALL_OW 437
53943: IFFALSE 54026
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53945: LD_STRING e
53947: PUSH
53948: LD_VAR 0 1
53952: PPUSH
53953: CALL_OW 437
53957: PUSH
53958: LD_INT 1
53960: ARRAY
53961: PUSH
53962: LD_INT 1
53964: ARRAY
53965: EQUAL
53966: PUSH
53967: LD_VAR 0 4
53971: PUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 437
53981: PUSH
53982: LD_INT 1
53984: ARRAY
53985: PUSH
53986: LD_INT 2
53988: ARRAY
53989: EQUAL
53990: AND
53991: PUSH
53992: LD_VAR 0 5
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 437
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: PUSH
54011: LD_INT 3
54013: ARRAY
54014: EQUAL
54015: AND
54016: IFFALSE 54026
// result := true end ;
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_INT 1
54025: ST_TO_ADDR
// end ;
54026: LD_VAR 0 3
54030: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54031: LD_INT 0
54033: PPUSH
// result := false ;
54034: LD_ADDR_VAR 0 4
54038: PUSH
54039: LD_INT 0
54041: ST_TO_ADDR
// if GetTaskList ( unit ) then
54042: LD_VAR 0 1
54046: PPUSH
54047: CALL_OW 437
54051: IFFALSE 54134
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54053: LD_STRING M
54055: PUSH
54056: LD_VAR 0 1
54060: PPUSH
54061: CALL_OW 437
54065: PUSH
54066: LD_INT 1
54068: ARRAY
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: EQUAL
54074: PUSH
54075: LD_VAR 0 2
54079: PUSH
54080: LD_VAR 0 1
54084: PPUSH
54085: CALL_OW 437
54089: PUSH
54090: LD_INT 1
54092: ARRAY
54093: PUSH
54094: LD_INT 2
54096: ARRAY
54097: EQUAL
54098: AND
54099: PUSH
54100: LD_VAR 0 3
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: CALL_OW 437
54114: PUSH
54115: LD_INT 1
54117: ARRAY
54118: PUSH
54119: LD_INT 3
54121: ARRAY
54122: EQUAL
54123: AND
54124: IFFALSE 54134
// result := true ;
54126: LD_ADDR_VAR 0 4
54130: PUSH
54131: LD_INT 1
54133: ST_TO_ADDR
// end ; end ;
54134: LD_VAR 0 4
54138: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
// if not unit or not area then
54145: LD_VAR 0 1
54149: NOT
54150: PUSH
54151: LD_VAR 0 2
54155: NOT
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54325
// tmp := AreaToList ( area , i ) ;
54161: LD_ADDR_VAR 0 6
54165: PUSH
54166: LD_VAR 0 2
54170: PPUSH
54171: LD_VAR 0 5
54175: PPUSH
54176: CALL_OW 517
54180: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54181: LD_ADDR_VAR 0 5
54185: PUSH
54186: DOUBLE
54187: LD_INT 1
54189: DEC
54190: ST_TO_ADDR
54191: LD_VAR 0 6
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: PUSH
54200: FOR_TO
54201: IFFALSE 54323
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54203: LD_ADDR_VAR 0 7
54207: PUSH
54208: LD_VAR 0 6
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PUSH
54217: LD_VAR 0 5
54221: ARRAY
54222: PUSH
54223: LD_VAR 0 6
54227: PUSH
54228: LD_INT 2
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 5
54236: ARRAY
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54242: LD_VAR 0 7
54246: PUSH
54247: LD_INT 1
54249: ARRAY
54250: PPUSH
54251: LD_VAR 0 7
54255: PUSH
54256: LD_INT 2
54258: ARRAY
54259: PPUSH
54260: CALL_OW 428
54264: PUSH
54265: LD_INT 0
54267: EQUAL
54268: IFFALSE 54321
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_VAR 0 7
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: PPUSH
54284: LD_VAR 0 7
54288: PUSH
54289: LD_INT 2
54291: ARRAY
54292: PPUSH
54293: LD_VAR 0 3
54297: PPUSH
54298: CALL_OW 48
// result := IsPlaced ( unit ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 305
54316: ST_TO_ADDR
// exit ;
54317: POP
54318: POP
54319: GO 54325
// end ; end ;
54321: GO 54200
54323: POP
54324: POP
// end ;
54325: LD_VAR 0 4
54329: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
54334: PPUSH
// if not side or side > 8 then
54335: LD_VAR 0 1
54339: NOT
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 8
54348: GREATER
54349: OR
54350: IFFALSE 54354
// exit ;
54352: GO 54541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54354: LD_ADDR_VAR 0 4
54358: PUSH
54359: LD_INT 22
54361: PUSH
54362: LD_VAR 0 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 21
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 69
54389: ST_TO_ADDR
// if not tmp then
54390: LD_VAR 0 4
54394: NOT
54395: IFFALSE 54399
// exit ;
54397: GO 54541
// enable_addtolog := true ;
54399: LD_ADDR_OWVAR 81
54403: PUSH
54404: LD_INT 1
54406: ST_TO_ADDR
// AddToLog ( [ ) ;
54407: LD_STRING [
54409: PPUSH
54410: CALL_OW 561
// for i in tmp do
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: LD_VAR 0 4
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54532
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54427: LD_STRING [
54429: PUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: CALL_OW 266
54439: STR
54440: PUSH
54441: LD_STRING , 
54443: STR
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: CALL_OW 250
54454: STR
54455: PUSH
54456: LD_STRING , 
54458: STR
54459: PUSH
54460: LD_VAR 0 3
54464: PPUSH
54465: CALL_OW 251
54469: STR
54470: PUSH
54471: LD_STRING , 
54473: STR
54474: PUSH
54475: LD_VAR 0 3
54479: PPUSH
54480: CALL_OW 254
54484: STR
54485: PUSH
54486: LD_STRING , 
54488: STR
54489: PUSH
54490: LD_VAR 0 3
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: CALL_OW 268
54502: STR
54503: PUSH
54504: LD_STRING , 
54506: STR
54507: PUSH
54508: LD_VAR 0 3
54512: PPUSH
54513: LD_INT 2
54515: PPUSH
54516: CALL_OW 268
54520: STR
54521: PUSH
54522: LD_STRING ],
54524: STR
54525: PPUSH
54526: CALL_OW 561
// end ;
54530: GO 54424
54532: POP
54533: POP
// AddToLog ( ]; ) ;
54534: LD_STRING ];
54536: PPUSH
54537: CALL_OW 561
// end ;
54541: LD_VAR 0 2
54545: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
// if not area or not rate or not max then
54553: LD_VAR 0 1
54557: NOT
54558: PUSH
54559: LD_VAR 0 2
54563: NOT
54564: OR
54565: PUSH
54566: LD_VAR 0 4
54570: NOT
54571: OR
54572: IFFALSE 54576
// exit ;
54574: GO 54768
// while 1 do
54576: LD_INT 1
54578: IFFALSE 54768
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: CALL_OW 287
54597: PUSH
54598: LD_INT 10
54600: MUL
54601: ST_TO_ADDR
// r := rate / 10 ;
54602: LD_ADDR_VAR 0 7
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 10
54614: DIVREAL
54615: ST_TO_ADDR
// time := 1 1$00 ;
54616: LD_ADDR_VAR 0 8
54620: PUSH
54621: LD_INT 2100
54623: ST_TO_ADDR
// if amount < min then
54624: LD_VAR 0 9
54628: PUSH
54629: LD_VAR 0 3
54633: LESS
54634: IFFALSE 54652
// r := r * 2 else
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 2
54648: MUL
54649: ST_TO_ADDR
54650: GO 54678
// if amount > max then
54652: LD_VAR 0 9
54656: PUSH
54657: LD_VAR 0 4
54661: GREATER
54662: IFFALSE 54678
// r := r / 2 ;
54664: LD_ADDR_VAR 0 7
54668: PUSH
54669: LD_VAR 0 7
54673: PUSH
54674: LD_INT 2
54676: DIVREAL
54677: ST_TO_ADDR
// time := time / r ;
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_VAR 0 8
54687: PUSH
54688: LD_VAR 0 7
54692: DIVREAL
54693: ST_TO_ADDR
// if time < 0 then
54694: LD_VAR 0 8
54698: PUSH
54699: LD_INT 0
54701: LESS
54702: IFFALSE 54719
// time := time * - 1 ;
54704: LD_ADDR_VAR 0 8
54708: PUSH
54709: LD_VAR 0 8
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: MUL
54718: ST_TO_ADDR
// wait ( time ) ;
54719: LD_VAR 0 8
54723: PPUSH
54724: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54728: LD_INT 35
54730: PPUSH
54731: LD_INT 875
54733: PPUSH
54734: CALL_OW 12
54738: PPUSH
54739: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54743: LD_INT 1
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: CALL_OW 12
54753: PPUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: LD_INT 1
54761: PPUSH
54762: CALL_OW 55
// end ;
54766: GO 54576
// end ;
54768: LD_VAR 0 5
54772: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
// if not turrets or not factories then
54783: LD_VAR 0 1
54787: NOT
54788: PUSH
54789: LD_VAR 0 2
54793: NOT
54794: OR
54795: IFFALSE 54799
// exit ;
54797: GO 55106
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54799: LD_ADDR_VAR 0 10
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: LD_INT 6
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 24
54841: PUSH
54842: LD_INT 25
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 23
54851: PUSH
54852: LD_INT 27
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 42
54865: PUSH
54866: LD_INT 43
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 44
54875: PUSH
54876: LD_INT 46
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 45
54885: PUSH
54886: LD_INT 47
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// result := [ ] ;
54903: LD_ADDR_VAR 0 3
54907: PUSH
54908: EMPTY
54909: ST_TO_ADDR
// for i in turrets do
54910: LD_ADDR_VAR 0 4
54914: PUSH
54915: LD_VAR 0 1
54919: PUSH
54920: FOR_IN
54921: IFFALSE 55104
// begin nat := GetNation ( i ) ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 4
54932: PPUSH
54933: CALL_OW 248
54937: ST_TO_ADDR
// weapon := 0 ;
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// if not nat then
54946: LD_VAR 0 7
54950: NOT
54951: IFFALSE 54955
// continue ;
54953: GO 54920
// for j in list [ nat ] do
54955: LD_ADDR_VAR 0 5
54959: PUSH
54960: LD_VAR 0 10
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PUSH
54971: FOR_IN
54972: IFFALSE 55013
// if GetBWeapon ( i ) = j [ 1 ] then
54974: LD_VAR 0 4
54978: PPUSH
54979: CALL_OW 269
54983: PUSH
54984: LD_VAR 0 5
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: EQUAL
54993: IFFALSE 55011
// begin weapon := j [ 2 ] ;
54995: LD_ADDR_VAR 0 8
54999: PUSH
55000: LD_VAR 0 5
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: ST_TO_ADDR
// break ;
55009: GO 55013
// end ;
55011: GO 54971
55013: POP
55014: POP
// if not weapon then
55015: LD_VAR 0 8
55019: NOT
55020: IFFALSE 55024
// continue ;
55022: GO 54920
// for k in factories do
55024: LD_ADDR_VAR 0 6
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: FOR_IN
55035: IFFALSE 55100
// begin weapons := AvailableWeaponList ( k ) ;
55037: LD_ADDR_VAR 0 9
55041: PUSH
55042: LD_VAR 0 6
55046: PPUSH
55047: CALL_OW 478
55051: ST_TO_ADDR
// if not weapons then
55052: LD_VAR 0 9
55056: NOT
55057: IFFALSE 55061
// continue ;
55059: GO 55034
// if weapon in weapons then
55061: LD_VAR 0 8
55065: PUSH
55066: LD_VAR 0 9
55070: IN
55071: IFFALSE 55098
// begin result := [ i , weapon ] ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_VAR 0 4
55082: PUSH
55083: LD_VAR 0 8
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// exit ;
55092: POP
55093: POP
55094: POP
55095: POP
55096: GO 55106
// end ; end ;
55098: GO 55034
55100: POP
55101: POP
// end ;
55102: GO 54920
55104: POP
55105: POP
// end ;
55106: LD_VAR 0 3
55110: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55111: LD_INT 0
55113: PPUSH
// if not side or side > 8 then
55114: LD_VAR 0 3
55118: NOT
55119: PUSH
55120: LD_VAR 0 3
55124: PUSH
55125: LD_INT 8
55127: GREATER
55128: OR
55129: IFFALSE 55133
// exit ;
55131: GO 55192
// if not range then
55133: LD_VAR 0 4
55137: NOT
55138: IFFALSE 55149
// range := - 12 ;
55140: LD_ADDR_VAR 0 4
55144: PUSH
55145: LD_INT 12
55147: NEG
55148: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_VAR 0 2
55182: PPUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 331
// end ;
55192: LD_VAR 0 5
55196: RET
// export function Video ( mode ) ; begin
55197: LD_INT 0
55199: PPUSH
// ingame_video = mode ;
55200: LD_ADDR_OWVAR 52
55204: PUSH
55205: LD_VAR 0 1
55209: ST_TO_ADDR
// interface_hidden = mode ;
55210: LD_ADDR_OWVAR 54
55214: PUSH
55215: LD_VAR 0 1
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 2
55224: RET
// export function Join ( array , element ) ; begin
55225: LD_INT 0
55227: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55228: LD_ADDR_VAR 0 3
55232: PUSH
55233: LD_VAR 0 1
55237: PPUSH
55238: LD_VAR 0 1
55242: PUSH
55243: LD_INT 1
55245: PLUS
55246: PPUSH
55247: LD_VAR 0 2
55251: PPUSH
55252: CALL_OW 1
55256: ST_TO_ADDR
// end ;
55257: LD_VAR 0 3
55261: RET
// export function JoinUnion ( array , element ) ; begin
55262: LD_INT 0
55264: PPUSH
// result := array union element ;
55265: LD_ADDR_VAR 0 3
55269: PUSH
55270: LD_VAR 0 1
55274: PUSH
55275: LD_VAR 0 2
55279: UNION
55280: ST_TO_ADDR
// end ;
55281: LD_VAR 0 3
55285: RET
// export function GetBehemoths ( side ) ; begin
55286: LD_INT 0
55288: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55289: LD_ADDR_VAR 0 2
55293: PUSH
55294: LD_INT 22
55296: PUSH
55297: LD_VAR 0 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 31
55308: PUSH
55309: LD_INT 25
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PPUSH
55320: CALL_OW 69
55324: ST_TO_ADDR
// end ;
55325: LD_VAR 0 2
55329: RET
// export function Shuffle ( array ) ; var i , index ; begin
55330: LD_INT 0
55332: PPUSH
55333: PPUSH
55334: PPUSH
// result := [ ] ;
55335: LD_ADDR_VAR 0 2
55339: PUSH
55340: EMPTY
55341: ST_TO_ADDR
// if not array then
55342: LD_VAR 0 1
55346: NOT
55347: IFFALSE 55351
// exit ;
55349: GO 55450
// Randomize ;
55351: CALL_OW 10
// for i = array downto 1 do
55355: LD_ADDR_VAR 0 3
55359: PUSH
55360: DOUBLE
55361: LD_VAR 0 1
55365: INC
55366: ST_TO_ADDR
55367: LD_INT 1
55369: PUSH
55370: FOR_DOWNTO
55371: IFFALSE 55448
// begin index := rand ( 1 , array ) ;
55373: LD_ADDR_VAR 0 4
55377: PUSH
55378: LD_INT 1
55380: PPUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: CALL_OW 12
55390: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55391: LD_ADDR_VAR 0 2
55395: PUSH
55396: LD_VAR 0 2
55400: PPUSH
55401: LD_VAR 0 2
55405: PUSH
55406: LD_INT 1
55408: PLUS
55409: PPUSH
55410: LD_VAR 0 1
55414: PUSH
55415: LD_VAR 0 4
55419: ARRAY
55420: PPUSH
55421: CALL_OW 2
55425: ST_TO_ADDR
// array := Delete ( array , index ) ;
55426: LD_ADDR_VAR 0 1
55430: PUSH
55431: LD_VAR 0 1
55435: PPUSH
55436: LD_VAR 0 4
55440: PPUSH
55441: CALL_OW 3
55445: ST_TO_ADDR
// end ;
55446: GO 55370
55448: POP
55449: POP
// end ;
55450: LD_VAR 0 2
55454: RET
// export function GetBaseMaterials ( base ) ; begin
55455: LD_INT 0
55457: PPUSH
// result := [ 0 , 0 , 0 ] ;
55458: LD_ADDR_VAR 0 2
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// if not base then
55477: LD_VAR 0 1
55481: NOT
55482: IFFALSE 55486
// exit ;
55484: GO 55535
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55486: LD_ADDR_VAR 0 2
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_INT 1
55498: PPUSH
55499: CALL_OW 275
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 2
55511: PPUSH
55512: CALL_OW 275
55516: PUSH
55517: LD_VAR 0 1
55521: PPUSH
55522: LD_INT 3
55524: PPUSH
55525: CALL_OW 275
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: ST_TO_ADDR
// end ;
55535: LD_VAR 0 2
55539: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55540: LD_INT 0
55542: PPUSH
55543: PPUSH
// result := array ;
55544: LD_ADDR_VAR 0 3
55548: PUSH
55549: LD_VAR 0 1
55553: ST_TO_ADDR
// if size > 0 then
55554: LD_VAR 0 2
55558: PUSH
55559: LD_INT 0
55561: GREATER
55562: IFFALSE 55608
// for i := array downto size do
55564: LD_ADDR_VAR 0 4
55568: PUSH
55569: DOUBLE
55570: LD_VAR 0 1
55574: INC
55575: ST_TO_ADDR
55576: LD_VAR 0 2
55580: PUSH
55581: FOR_DOWNTO
55582: IFFALSE 55606
// result := Delete ( result , result ) ;
55584: LD_ADDR_VAR 0 3
55588: PUSH
55589: LD_VAR 0 3
55593: PPUSH
55594: LD_VAR 0 3
55598: PPUSH
55599: CALL_OW 3
55603: ST_TO_ADDR
55604: GO 55581
55606: POP
55607: POP
// end ;
55608: LD_VAR 0 3
55612: RET
// export function ComExit ( unit ) ; var tmp ; begin
55613: LD_INT 0
55615: PPUSH
55616: PPUSH
// if not IsInUnit ( unit ) then
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 310
55626: NOT
55627: IFFALSE 55631
// exit ;
55629: GO 55691
// tmp := IsInUnit ( unit ) ;
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: LD_VAR 0 1
55640: PPUSH
55641: CALL_OW 310
55645: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55646: LD_VAR 0 3
55650: PPUSH
55651: CALL_OW 247
55655: PUSH
55656: LD_INT 2
55658: EQUAL
55659: IFFALSE 55672
// ComExitVehicle ( unit ) else
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 121
55670: GO 55681
// ComExitBuilding ( unit ) ;
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 122
// result := tmp ;
55681: LD_ADDR_VAR 0 2
55685: PUSH
55686: LD_VAR 0 3
55690: ST_TO_ADDR
// end ;
55691: LD_VAR 0 2
55695: RET
// export function ResetHc ; begin
55696: LD_INT 0
55698: PPUSH
// InitHc ;
55699: CALL_OW 19
// hc_importance := 0 ;
55703: LD_ADDR_OWVAR 32
55707: PUSH
55708: LD_INT 0
55710: ST_TO_ADDR
// end ;
55711: LD_VAR 0 1
55715: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55716: LD_INT 0
55718: PPUSH
55719: PPUSH
55720: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55721: LD_ADDR_VAR 0 6
55725: PUSH
55726: LD_VAR 0 1
55730: PUSH
55731: LD_VAR 0 3
55735: PLUS
55736: PUSH
55737: LD_INT 2
55739: DIV
55740: ST_TO_ADDR
// if _x < 0 then
55741: LD_VAR 0 6
55745: PUSH
55746: LD_INT 0
55748: LESS
55749: IFFALSE 55766
// _x := _x * - 1 ;
55751: LD_ADDR_VAR 0 6
55755: PUSH
55756: LD_VAR 0 6
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: MUL
55765: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55766: LD_ADDR_VAR 0 7
55770: PUSH
55771: LD_VAR 0 2
55775: PUSH
55776: LD_VAR 0 4
55780: PLUS
55781: PUSH
55782: LD_INT 2
55784: DIV
55785: ST_TO_ADDR
// if _y < 0 then
55786: LD_VAR 0 7
55790: PUSH
55791: LD_INT 0
55793: LESS
55794: IFFALSE 55811
// _y := _y * - 1 ;
55796: LD_ADDR_VAR 0 7
55800: PUSH
55801: LD_VAR 0 7
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: MUL
55810: ST_TO_ADDR
// result := [ _x , _y ] ;
55811: LD_ADDR_VAR 0 5
55815: PUSH
55816: LD_VAR 0 6
55820: PUSH
55821: LD_VAR 0 7
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// end ;
55830: LD_VAR 0 5
55834: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
55839: PPUSH
55840: PPUSH
// task := GetTaskList ( unit ) ;
55841: LD_ADDR_VAR 0 7
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 437
55855: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55856: LD_VAR 0 7
55860: NOT
55861: PUSH
55862: LD_VAR 0 1
55866: PPUSH
55867: LD_VAR 0 2
55871: PPUSH
55872: CALL_OW 308
55876: NOT
55877: AND
55878: IFFALSE 55882
// exit ;
55880: GO 56000
// if IsInArea ( unit , area ) then
55882: LD_VAR 0 1
55886: PPUSH
55887: LD_VAR 0 2
55891: PPUSH
55892: CALL_OW 308
55896: IFFALSE 55914
// begin ComMoveToArea ( unit , goAway ) ;
55898: LD_VAR 0 1
55902: PPUSH
55903: LD_VAR 0 3
55907: PPUSH
55908: CALL_OW 113
// exit ;
55912: GO 56000
// end ; if task [ 1 ] [ 1 ] <> M then
55914: LD_VAR 0 7
55918: PUSH
55919: LD_INT 1
55921: ARRAY
55922: PUSH
55923: LD_INT 1
55925: ARRAY
55926: PUSH
55927: LD_STRING M
55929: NONEQUAL
55930: IFFALSE 55934
// exit ;
55932: GO 56000
// x := task [ 1 ] [ 2 ] ;
55934: LD_ADDR_VAR 0 5
55938: PUSH
55939: LD_VAR 0 7
55943: PUSH
55944: LD_INT 1
55946: ARRAY
55947: PUSH
55948: LD_INT 2
55950: ARRAY
55951: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55952: LD_ADDR_VAR 0 6
55956: PUSH
55957: LD_VAR 0 7
55961: PUSH
55962: LD_INT 1
55964: ARRAY
55965: PUSH
55966: LD_INT 3
55968: ARRAY
55969: ST_TO_ADDR
// if InArea ( x , y , area ) then
55970: LD_VAR 0 5
55974: PPUSH
55975: LD_VAR 0 6
55979: PPUSH
55980: LD_VAR 0 2
55984: PPUSH
55985: CALL_OW 309
55989: IFFALSE 56000
// ComStop ( unit ) ;
55991: LD_VAR 0 1
55995: PPUSH
55996: CALL_OW 141
// end ;
56000: LD_VAR 0 4
56004: RET
// export function Abs ( value ) ; begin
56005: LD_INT 0
56007: PPUSH
// result := value ;
56008: LD_ADDR_VAR 0 2
56012: PUSH
56013: LD_VAR 0 1
56017: ST_TO_ADDR
// if value < 0 then
56018: LD_VAR 0 1
56022: PUSH
56023: LD_INT 0
56025: LESS
56026: IFFALSE 56043
// result := value * - 1 ;
56028: LD_ADDR_VAR 0 2
56032: PUSH
56033: LD_VAR 0 1
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: MUL
56042: ST_TO_ADDR
// end ;
56043: LD_VAR 0 2
56047: RET
