// every 0 0$1 do
   0: GO 2
   2: DISABLE
// begin enable ;
   3: ENABLE
// display_strings := GetTaskList ( a4 ) ;
   4: LD_ADDR_OWVAR 47
   8: PUSH
   9: LD_INT 27
  11: PPUSH
  12: CALL_OW 437
  16: ST_TO_ADDR
// end ;
  17: END
// export function Attack ( attackers , attackFormula , retreatFormula , captureTanks ) ; var i , j , tag , sol , sci , mech , tanks , veh ; begin
  18: LD_INT 0
  20: PPUSH
  21: PPUSH
  22: PPUSH
  23: PPUSH
  24: PPUSH
  25: PPUSH
  26: PPUSH
  27: PPUSH
  28: PPUSH
// if not attackFormula then
  29: LD_VAR 0 2
  33: NOT
  34: IFFALSE 38
// exit ;
  36: GO 1829
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
  38: LD_ADDR_VAR 0 9
  42: PUSH
  43: LD_VAR 0 1
  47: PPUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PPUSH
  58: CALL_OW 72
  62: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
  63: LD_ADDR_VAR 0 10
  67: PUSH
  68: LD_VAR 0 1
  72: PPUSH
  73: LD_INT 25
  75: PUSH
  76: LD_INT 4
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: CALL_OW 72
  87: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
  88: LD_ADDR_VAR 0 11
  92: PUSH
  93: LD_VAR 0 1
  97: PPUSH
  98: LD_INT 25
 100: PUSH
 101: LD_INT 3
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 72
 112: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 113: LD_ADDR_VAR 0 12
 117: PUSH
 118: LD_VAR 0 1
 122: PPUSH
 123: LD_INT 21
 125: PUSH
 126: LD_INT 2
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 72
 137: ST_TO_ADDR
// if sci then
 138: LD_VAR 0 10
 142: IFFALSE 179
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 144: LD_VAR 0 10
 148: PPUSH
 149: LD_VAR 0 2
 153: PUSH
 154: LD_INT 2
 156: ARRAY
 157: PUSH
 158: LD_INT 1
 160: ARRAY
 161: PPUSH
 162: LD_VAR 0 2
 166: PUSH
 167: LD_INT 2
 169: ARRAY
 170: PUSH
 171: LD_INT 2
 173: ARRAY
 174: PPUSH
 175: CALL_OW 111
// repeat wait ( 10 ) ;
 179: LD_INT 10
 181: PPUSH
 182: CALL_OW 67
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
 186: LD_ADDR_VAR 0 9
 190: PUSH
 191: LD_VAR 0 1
 195: PPUSH
 196: LD_INT 25
 198: PUSH
 199: LD_INT 1
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: PPUSH
 206: CALL_OW 72
 210: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
 211: LD_ADDR_VAR 0 10
 215: PUSH
 216: LD_VAR 0 1
 220: PPUSH
 221: LD_INT 25
 223: PUSH
 224: LD_INT 4
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PPUSH
 231: CALL_OW 72
 235: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
 236: LD_ADDR_VAR 0 11
 240: PUSH
 241: LD_VAR 0 1
 245: PPUSH
 246: LD_INT 25
 248: PUSH
 249: LD_INT 3
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: PPUSH
 256: CALL_OW 72
 260: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 261: LD_ADDR_VAR 0 12
 265: PUSH
 266: LD_VAR 0 1
 270: PPUSH
 271: LD_INT 21
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PPUSH
 281: CALL_OW 72
 285: ST_TO_ADDR
// if sol then
 286: LD_VAR 0 9
 290: IFFALSE 860
// begin for i in sol do
 292: LD_ADDR_VAR 0 6
 296: PUSH
 297: LD_VAR 0 9
 301: PUSH
 302: FOR_IN
 303: IFFALSE 858
// begin tag := GetTag ( i ) ;
 305: LD_ADDR_VAR 0 8
 309: PUSH
 310: LD_VAR 0 6
 314: PPUSH
 315: CALL_OW 110
 319: ST_TO_ADDR
// if not tag then
 320: LD_VAR 0 8
 324: NOT
 325: IFFALSE 434
// begin if GetLives ( i ) = 1000 then
 327: LD_VAR 0 6
 331: PPUSH
 332: CALL_OW 256
 336: PUSH
 337: LD_INT 1000
 339: EQUAL
 340: IFFALSE 356
// SetTag ( i , 1 ) else
 342: LD_VAR 0 6
 346: PPUSH
 347: LD_INT 1
 349: PPUSH
 350: CALL_OW 109
 354: GO 432
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 356: LD_VAR 0 6
 360: PPUSH
 361: LD_VAR 0 2
 365: PUSH
 366: LD_INT 2
 368: ARRAY
 369: PUSH
 370: LD_INT 1
 372: ARRAY
 373: PPUSH
 374: LD_VAR 0 2
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 2
 385: ARRAY
 386: PPUSH
 387: CALL_OW 297
 391: PUSH
 392: LD_INT 10
 394: GREATER
 395: IFFALSE 432
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 397: LD_VAR 0 6
 401: PPUSH
 402: LD_VAR 0 2
 406: PUSH
 407: LD_INT 2
 409: ARRAY
 410: PUSH
 411: LD_INT 1
 413: ARRAY
 414: PPUSH
 415: LD_VAR 0 2
 419: PUSH
 420: LD_INT 2
 422: ARRAY
 423: PUSH
 424: LD_INT 2
 426: ARRAY
 427: PPUSH
 428: CALL_OW 111
// end else
 432: GO 856
// begin if GetLives ( i ) < 720 then
 434: LD_VAR 0 6
 438: PPUSH
 439: CALL_OW 256
 443: PUSH
 444: LD_INT 720
 446: LESS
 447: IFFALSE 498
// begin SetTag ( i , 0 ) ;
 449: LD_VAR 0 6
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 461: LD_VAR 0 6
 465: PPUSH
 466: LD_VAR 0 2
 470: PUSH
 471: LD_INT 2
 473: ARRAY
 474: PUSH
 475: LD_INT 1
 477: ARRAY
 478: PPUSH
 479: LD_VAR 0 2
 483: PUSH
 484: LD_INT 2
 486: ARRAY
 487: PUSH
 488: LD_INT 2
 490: ARRAY
 491: PPUSH
 492: CALL_OW 111
// end else
 496: GO 856
// if tag <= attackFormula [ 1 ] then
 498: LD_VAR 0 8
 502: PUSH
 503: LD_VAR 0 2
 507: PUSH
 508: LD_INT 1
 510: ARRAY
 511: LESSEQUAL
 512: IFFALSE 680
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
 514: LD_VAR 0 6
 518: PPUSH
 519: LD_VAR 0 2
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: PUSH
 528: LD_VAR 0 8
 532: ARRAY
 533: PUSH
 534: LD_INT 1
 536: ARRAY
 537: PPUSH
 538: LD_VAR 0 2
 542: PUSH
 543: LD_INT 1
 545: ARRAY
 546: PUSH
 547: LD_VAR 0 8
 551: ARRAY
 552: PUSH
 553: LD_INT 2
 555: ARRAY
 556: PPUSH
 557: CALL_OW 297
 561: PUSH
 562: LD_INT 6
 564: GREATER
 565: IFFALSE 616
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
 567: LD_VAR 0 6
 571: PPUSH
 572: LD_VAR 0 2
 576: PUSH
 577: LD_INT 1
 579: ARRAY
 580: PUSH
 581: LD_VAR 0 8
 585: ARRAY
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: LD_VAR 0 2
 595: PUSH
 596: LD_INT 1
 598: ARRAY
 599: PUSH
 600: LD_VAR 0 8
 604: ARRAY
 605: PUSH
 606: LD_INT 2
 608: ARRAY
 609: PPUSH
 610: CALL_OW 114
 614: GO 678
// if not FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_dist , i , 10 ] ] ) then
 616: LD_INT 81
 618: PUSH
 619: LD_VAR 0 6
 623: PPUSH
 624: CALL_OW 255
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: LD_INT 91
 635: PUSH
 636: LD_VAR 0 6
 640: PUSH
 641: LD_INT 10
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: NOT
 658: IFFALSE 678
// SetTag ( i , tag + 1 ) ;
 660: LD_VAR 0 6
 664: PPUSH
 665: LD_VAR 0 8
 669: PUSH
 670: LD_INT 1
 672: PLUS
 673: PPUSH
 674: CALL_OW 109
// end else
 678: GO 856
// begin if captureTanks and FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) then
 680: LD_VAR 0 4
 684: PUSH
 685: LD_INT 81
 687: PUSH
 688: LD_VAR 0 6
 692: PPUSH
 693: CALL_OW 255
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: PUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PUSH
 712: LD_INT 50
 714: PUSH
 715: EMPTY
 716: LIST
 717: PUSH
 718: LD_INT 91
 720: PUSH
 721: LD_VAR 0 6
 725: PUSH
 726: LD_INT 10
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 69
 744: AND
 745: IFFALSE 822
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) else
 747: LD_VAR 0 6
 751: PPUSH
 752: LD_INT 81
 754: PUSH
 755: LD_VAR 0 6
 759: PPUSH
 760: CALL_OW 255
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 21
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: LD_INT 50
 781: PUSH
 782: EMPTY
 783: LIST
 784: PUSH
 785: LD_INT 91
 787: PUSH
 788: LD_VAR 0 6
 792: PUSH
 793: LD_INT 10
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PPUSH
 807: CALL_OW 69
 811: PUSH
 812: LD_INT 1
 814: ARRAY
 815: PPUSH
 816: CALL_OW 120
 820: GO 856
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
 822: LD_VAR 0 6
 826: PPUSH
 827: LD_INT 81
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PPUSH
 837: CALL_OW 69
 841: PPUSH
 842: LD_VAR 0 6
 846: PPUSH
 847: CALL_OW 74
 851: PPUSH
 852: CALL_OW 115
// end ; end ; end ;
 856: GO 302
 858: POP
 859: POP
// end ; if sci then
 860: LD_VAR 0 10
 864: IFFALSE 1159
// begin if not sol and not mech and retreatFormula then
 866: LD_VAR 0 9
 870: NOT
 871: PUSH
 872: LD_VAR 0 11
 876: NOT
 877: AND
 878: PUSH
 879: LD_VAR 0 3
 883: AND
 884: IFFALSE 956
// begin for i in sci do
 886: LD_ADDR_VAR 0 6
 890: PUSH
 891: LD_VAR 0 10
 895: PUSH
 896: FOR_IN
 897: IFFALSE 952
// begin ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
 899: LD_VAR 0 6
 903: PPUSH
 904: LD_VAR 0 3
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: PPUSH
 917: LD_VAR 0 3
 921: PUSH
 922: LD_INT 1
 924: ARRAY
 925: PUSH
 926: LD_INT 2
 928: ARRAY
 929: PPUSH
 930: CALL_OW 111
// attackers := attackers diff i ;
 934: LD_ADDR_VAR 0 1
 938: PUSH
 939: LD_VAR 0 1
 943: PUSH
 944: LD_VAR 0 6
 948: DIFF
 949: ST_TO_ADDR
// end ;
 950: GO 896
 952: POP
 953: POP
// end else
 954: GO 1159
// for i in sci do
 956: LD_ADDR_VAR 0 6
 960: PUSH
 961: LD_VAR 0 10
 965: PUSH
 966: FOR_IN
 967: IFFALSE 1157
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 969: LD_VAR 0 6
 973: PPUSH
 974: LD_VAR 0 2
 978: PUSH
 979: LD_INT 2
 981: ARRAY
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 2
 994: ARRAY
 995: PUSH
 996: LD_INT 2
 998: ARRAY
 999: PPUSH
1000: CALL_OW 297
1004: PUSH
1005: LD_INT 10
1007: GREATER
1008: IFFALSE 1047
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
1010: LD_VAR 0 6
1014: PPUSH
1015: LD_VAR 0 2
1019: PUSH
1020: LD_INT 2
1022: ARRAY
1023: PUSH
1024: LD_INT 1
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 2
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_INT 2
1039: ARRAY
1040: PPUSH
1041: CALL_OW 111
1045: GO 1155
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
1047: LD_VAR 0 9
1051: PPUSH
1052: LD_INT 3
1054: PUSH
1055: LD_INT 24
1057: PUSH
1058: LD_INT 1000
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 91
1071: PUSH
1072: LD_VAR 0 6
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: PPUSH
1089: CALL_OW 72
1093: IFFALSE 1155
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
1095: LD_VAR 0 6
1099: PPUSH
1100: LD_VAR 0 9
1104: PPUSH
1105: LD_INT 3
1107: PUSH
1108: LD_INT 24
1110: PUSH
1111: LD_INT 1000
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PUSH
1122: LD_INT 91
1124: PUSH
1125: LD_VAR 0 6
1129: PUSH
1130: LD_INT 10
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 72
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 128
1155: GO 966
1157: POP
1158: POP
// end ; if mech then
1159: LD_VAR 0 11
1163: IFFALSE 1811
// begin for i in mech do
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_VAR 0 11
1174: PUSH
1175: FOR_IN
1176: IFFALSE 1809
// begin tag := GetTag ( i ) ;
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: LD_VAR 0 6
1187: PPUSH
1188: CALL_OW 110
1192: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
1193: LD_ADDR_VAR 0 13
1197: PUSH
1198: LD_VAR 0 6
1202: PPUSH
1203: CALL_OW 310
1207: ST_TO_ADDR
// if not tag then
1208: LD_VAR 0 8
1212: NOT
1213: IFFALSE 1515
// begin if veh then
1215: LD_VAR 0 13
1219: IFFALSE 1353
// begin if GetLives ( veh ) = 1000 then
1221: LD_VAR 0 13
1225: PPUSH
1226: CALL_OW 256
1230: PUSH
1231: LD_INT 1000
1233: EQUAL
1234: IFFALSE 1250
// SetTag ( i , 1 ) else
1236: LD_VAR 0 6
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: CALL_OW 109
1248: GO 1351
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
1250: LD_VAR 0 13
1254: PPUSH
1255: LD_VAR 0 2
1259: PUSH
1260: LD_INT 3
1262: ARRAY
1263: PUSH
1264: LD_INT 1
1266: ARRAY
1267: PPUSH
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 3
1275: ARRAY
1276: PUSH
1277: LD_INT 2
1279: ARRAY
1280: PPUSH
1281: CALL_OW 297
1285: PUSH
1286: LD_INT 7
1288: GREATER
1289: IFFALSE 1328
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
1291: LD_VAR 0 13
1295: PPUSH
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 3
1303: ARRAY
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: LD_VAR 0 2
1313: PUSH
1314: LD_INT 3
1316: ARRAY
1317: PUSH
1318: LD_INT 2
1320: ARRAY
1321: PPUSH
1322: CALL_OW 111
1326: GO 1351
// begin ComExitVehicle ( i ) ;
1328: LD_VAR 0 6
1332: PPUSH
1333: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
1337: LD_VAR 0 6
1341: PPUSH
1342: LD_VAR 0 13
1346: PPUSH
1347: CALL_OW 189
// end ; end else
1351: GO 1513
// if GetLives ( i ) < 400 then
1353: LD_VAR 0 6
1357: PPUSH
1358: CALL_OW 256
1362: PUSH
1363: LD_INT 400
1365: LESS
1366: IFFALSE 1421
// begin attackers := attackers diff i ;
1368: LD_ADDR_VAR 0 1
1372: PUSH
1373: LD_VAR 0 1
1377: PUSH
1378: LD_VAR 0 6
1382: DIFF
1383: ST_TO_ADDR
// ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
1384: LD_VAR 0 6
1388: PPUSH
1389: LD_VAR 0 3
1393: PUSH
1394: LD_INT 1
1396: ARRAY
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PPUSH
1402: LD_VAR 0 3
1406: PUSH
1407: LD_INT 1
1409: ARRAY
1410: PUSH
1411: LD_INT 2
1413: ARRAY
1414: PPUSH
1415: CALL_OW 111
// end else
1419: GO 1513
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
1421: LD_VAR 0 12
1425: PPUSH
1426: LD_INT 58
1428: PUSH
1429: EMPTY
1430: LIST
1431: PUSH
1432: LD_INT 24
1434: PUSH
1435: LD_INT 1000
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 72
1450: PUSH
1451: LD_VAR 0 6
1455: PPUSH
1456: CALL_OW 314
1460: NOT
1461: AND
1462: IFFALSE 1513
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
1464: LD_VAR 0 6
1468: PPUSH
1469: LD_VAR 0 12
1473: PPUSH
1474: LD_INT 58
1476: PUSH
1477: EMPTY
1478: LIST
1479: PUSH
1480: LD_INT 24
1482: PUSH
1483: LD_INT 250
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PPUSH
1494: CALL_OW 72
1498: PPUSH
1499: LD_VAR 0 6
1503: PPUSH
1504: CALL_OW 74
1508: PPUSH
1509: CALL_OW 120
// end else
1513: GO 1807
// begin if veh and GetLives ( veh ) < 720 then
1515: LD_VAR 0 13
1519: PUSH
1520: LD_VAR 0 13
1524: PPUSH
1525: CALL_OW 256
1529: PUSH
1530: LD_INT 720
1532: LESS
1533: AND
1534: IFFALSE 1585
// begin SetTag ( i , 0 ) ;
1536: LD_VAR 0 6
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
1548: LD_VAR 0 13
1552: PPUSH
1553: LD_VAR 0 2
1557: PUSH
1558: LD_INT 3
1560: ARRAY
1561: PUSH
1562: LD_INT 1
1564: ARRAY
1565: PPUSH
1566: LD_VAR 0 2
1570: PUSH
1571: LD_INT 3
1573: ARRAY
1574: PUSH
1575: LD_INT 2
1577: ARRAY
1578: PPUSH
1579: CALL_OW 111
// end else
1583: GO 1807
// if veh then
1585: LD_VAR 0 13
1589: IFFALSE 1807
// if tag <= attackFormula [ 4 ] then
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 2
1600: PUSH
1601: LD_INT 4
1603: ARRAY
1604: LESSEQUAL
1605: IFFALSE 1766
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
1607: LD_VAR 0 13
1611: PPUSH
1612: LD_VAR 0 2
1616: PUSH
1617: LD_INT 4
1619: ARRAY
1620: PUSH
1621: LD_VAR 0 8
1625: ARRAY
1626: PUSH
1627: LD_INT 1
1629: ARRAY
1630: PPUSH
1631: LD_VAR 0 2
1635: PUSH
1636: LD_INT 4
1638: ARRAY
1639: PUSH
1640: LD_VAR 0 8
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: ARRAY
1649: PPUSH
1650: CALL_OW 297
1654: PUSH
1655: LD_INT 6
1657: GREATER
1658: IFFALSE 1709
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
1660: LD_VAR 0 13
1664: PPUSH
1665: LD_VAR 0 2
1669: PUSH
1670: LD_INT 4
1672: ARRAY
1673: PUSH
1674: LD_VAR 0 8
1678: ARRAY
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_VAR 0 2
1688: PUSH
1689: LD_INT 4
1691: ARRAY
1692: PUSH
1693: LD_VAR 0 8
1697: ARRAY
1698: PUSH
1699: LD_INT 2
1701: ARRAY
1702: PPUSH
1703: CALL_OW 114
1707: GO 1764
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
1709: LD_INT 81
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 91
1721: PUSH
1722: LD_VAR 0 13
1726: PUSH
1727: LD_INT 10
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PPUSH
1739: CALL_OW 69
1743: NOT
1744: IFFALSE 1764
// SetTag ( i , tag + 1 ) ;
1746: LD_VAR 0 6
1750: PPUSH
1751: LD_VAR 0 8
1755: PUSH
1756: LD_INT 1
1758: PLUS
1759: PPUSH
1760: CALL_OW 109
// end else
1764: GO 1807
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1766: LD_VAR 0 13
1770: PPUSH
1771: LD_INT 81
1773: PUSH
1774: LD_VAR 0 6
1778: PPUSH
1779: CALL_OW 255
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PPUSH
1788: CALL_OW 69
1792: PPUSH
1793: LD_VAR 0 6
1797: PPUSH
1798: CALL_OW 74
1802: PPUSH
1803: CALL_OW 115
// end ; end ;
1807: GO 1175
1809: POP
1810: POP
// end ; until not UnitFilter ( attackers , [ f_placed ] ) ;
1811: LD_VAR 0 1
1815: PPUSH
1816: LD_INT 52
1818: PUSH
1819: EMPTY
1820: LIST
1821: PPUSH
1822: CALL_OW 72
1826: NOT
1827: IFFALSE 179
// end ; end_of_file
1829: LD_VAR 0 5
1833: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1834: LD_INT 0
1836: PPUSH
// ar_miner := 81 ;
1837: LD_ADDR_EXP 8
1841: PUSH
1842: LD_INT 81
1844: ST_TO_ADDR
// ar_crane := 88 ;
1845: LD_ADDR_EXP 7
1849: PUSH
1850: LD_INT 88
1852: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1853: LD_ADDR_EXP 2
1857: PUSH
1858: LD_INT 89
1860: ST_TO_ADDR
// us_hack := 99 ;
1861: LD_ADDR_EXP 3
1865: PUSH
1866: LD_INT 99
1868: ST_TO_ADDR
// us_artillery := 97 ;
1869: LD_ADDR_EXP 4
1873: PUSH
1874: LD_INT 97
1876: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1877: LD_ADDR_EXP 5
1881: PUSH
1882: LD_INT 91
1884: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1885: LD_ADDR_EXP 6
1889: PUSH
1890: LD_INT 92
1892: ST_TO_ADDR
// ru_radar := 98 ;
1893: LD_ADDR_EXP 1
1897: PUSH
1898: LD_INT 98
1900: ST_TO_ADDR
// tech_Artillery := 80 ;
1901: LD_ADDR_EXP 9
1905: PUSH
1906: LD_INT 80
1908: ST_TO_ADDR
// tech_RadMat := 81 ;
1909: LD_ADDR_EXP 10
1913: PUSH
1914: LD_INT 81
1916: ST_TO_ADDR
// tech_BasicTools := 82 ;
1917: LD_ADDR_EXP 11
1921: PUSH
1922: LD_INT 82
1924: ST_TO_ADDR
// tech_Cargo := 83 ;
1925: LD_ADDR_EXP 12
1929: PUSH
1930: LD_INT 83
1932: ST_TO_ADDR
// tech_Track := 84 ;
1933: LD_ADDR_EXP 13
1937: PUSH
1938: LD_INT 84
1940: ST_TO_ADDR
// tech_Crane := 85 ;
1941: LD_ADDR_EXP 14
1945: PUSH
1946: LD_INT 85
1948: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1949: LD_ADDR_EXP 15
1953: PUSH
1954: LD_INT 86
1956: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1957: LD_ADDR_EXP 16
1961: PUSH
1962: LD_INT 87
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 1
1969: RET
// every 1 do
1970: GO 1972
1972: DISABLE
// InitGlobalVariables ; end_of_file
1973: CALL 1834 0 0
1977: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1978: LD_VAR 0 2
1982: PUSH
1983: LD_INT 100
1985: EQUAL
1986: IFFALSE 2935
// begin if not StreamModeActive then
1988: LD_EXP 17
1992: NOT
1993: IFFALSE 2003
// StreamModeActive := true ;
1995: LD_ADDR_EXP 17
1999: PUSH
2000: LD_INT 1
2002: ST_TO_ADDR
// if p3 = 0 then
2003: LD_VAR 0 3
2007: PUSH
2008: LD_INT 0
2010: EQUAL
2011: IFFALSE 2017
// InitStreamMode ;
2013: CALL 3093 0 0
// if p3 = 1 then
2017: LD_VAR 0 3
2021: PUSH
2022: LD_INT 1
2024: EQUAL
2025: IFFALSE 2035
// sRocket := true ;
2027: LD_ADDR_EXP 22
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if p3 = 2 then
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 2
2042: EQUAL
2043: IFFALSE 2053
// sSpeed := true ;
2045: LD_ADDR_EXP 21
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// if p3 = 3 then
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: EQUAL
2061: IFFALSE 2071
// sEngine := true ;
2063: LD_ADDR_EXP 23
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// if p3 = 4 then
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 4
2078: EQUAL
2079: IFFALSE 2089
// sSpec := true ;
2081: LD_ADDR_EXP 20
2085: PUSH
2086: LD_INT 1
2088: ST_TO_ADDR
// if p3 = 5 then
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 5
2096: EQUAL
2097: IFFALSE 2107
// sLevel := true ;
2099: LD_ADDR_EXP 24
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// if p3 = 6 then
2107: LD_VAR 0 3
2111: PUSH
2112: LD_INT 6
2114: EQUAL
2115: IFFALSE 2125
// sArmoury := true ;
2117: LD_ADDR_EXP 25
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// if p3 = 7 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 7
2132: EQUAL
2133: IFFALSE 2143
// sRadar := true ;
2135: LD_ADDR_EXP 26
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 8 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 8
2150: EQUAL
2151: IFFALSE 2161
// sBunker := true ;
2153: LD_ADDR_EXP 27
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 9 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 9
2168: EQUAL
2169: IFFALSE 2179
// sHack := true ;
2171: LD_ADDR_EXP 28
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 10 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 10
2186: EQUAL
2187: IFFALSE 2197
// sFire := true ;
2189: LD_ADDR_EXP 29
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 11 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 11
2204: EQUAL
2205: IFFALSE 2215
// sRefresh := true ;
2207: LD_ADDR_EXP 30
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 12 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 12
2222: EQUAL
2223: IFFALSE 2233
// sExp := true ;
2225: LD_ADDR_EXP 31
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 13 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 13
2240: EQUAL
2241: IFFALSE 2251
// sDepot := true ;
2243: LD_ADDR_EXP 32
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 14 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 14
2258: EQUAL
2259: IFFALSE 2269
// sFlag := true ;
2261: LD_ADDR_EXP 33
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 15 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 15
2276: EQUAL
2277: IFFALSE 2287
// sKamikadze := true ;
2279: LD_ADDR_EXP 41
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 16 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 16
2294: EQUAL
2295: IFFALSE 2305
// sTroll := true ;
2297: LD_ADDR_EXP 42
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 17 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 17
2312: EQUAL
2313: IFFALSE 2323
// sSlow := true ;
2315: LD_ADDR_EXP 43
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 18 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 18
2330: EQUAL
2331: IFFALSE 2341
// sLack := true ;
2333: LD_ADDR_EXP 44
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 19 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 19
2348: EQUAL
2349: IFFALSE 2359
// sTank := true ;
2351: LD_ADDR_EXP 46
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 20 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 20
2366: EQUAL
2367: IFFALSE 2377
// sRemote := true ;
2369: LD_ADDR_EXP 47
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 21 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 21
2384: EQUAL
2385: IFFALSE 2395
// sPowell := true ;
2387: LD_ADDR_EXP 48
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 22 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 22
2402: EQUAL
2403: IFFALSE 2413
// sTeleport := true ;
2405: LD_ADDR_EXP 51
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 23 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 23
2420: EQUAL
2421: IFFALSE 2431
// sOilTower := true ;
2423: LD_ADDR_EXP 53
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 24 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 24
2438: EQUAL
2439: IFFALSE 2449
// sShovel := true ;
2441: LD_ADDR_EXP 54
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 25 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 25
2456: EQUAL
2457: IFFALSE 2467
// sSheik := true ;
2459: LD_ADDR_EXP 55
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 26 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 26
2474: EQUAL
2475: IFFALSE 2485
// sEarthquake := true ;
2477: LD_ADDR_EXP 57
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 27 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 27
2492: EQUAL
2493: IFFALSE 2503
// sAI := true ;
2495: LD_ADDR_EXP 58
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 28 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 28
2510: EQUAL
2511: IFFALSE 2521
// sCargo := true ;
2513: LD_ADDR_EXP 61
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 29 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 29
2528: EQUAL
2529: IFFALSE 2539
// sDLaser := true ;
2531: LD_ADDR_EXP 62
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 30 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 30
2546: EQUAL
2547: IFFALSE 2557
// sExchange := true ;
2549: LD_ADDR_EXP 63
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 31 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 31
2564: EQUAL
2565: IFFALSE 2575
// sFac := true ;
2567: LD_ADDR_EXP 64
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 32 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 32
2582: EQUAL
2583: IFFALSE 2593
// sPower := true ;
2585: LD_ADDR_EXP 65
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 33 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 33
2600: EQUAL
2601: IFFALSE 2611
// sRandom := true ;
2603: LD_ADDR_EXP 66
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 34 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 34
2618: EQUAL
2619: IFFALSE 2629
// sShield := true ;
2621: LD_ADDR_EXP 67
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 35 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 35
2636: EQUAL
2637: IFFALSE 2647
// sTime := true ;
2639: LD_ADDR_EXP 68
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 36 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 36
2654: EQUAL
2655: IFFALSE 2665
// sTools := true ;
2657: LD_ADDR_EXP 69
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 101 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 101
2672: EQUAL
2673: IFFALSE 2683
// sSold := true ;
2675: LD_ADDR_EXP 34
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 102 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 102
2690: EQUAL
2691: IFFALSE 2701
// sDiff := true ;
2693: LD_ADDR_EXP 35
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 103 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 103
2708: EQUAL
2709: IFFALSE 2719
// sFog := true ;
2711: LD_ADDR_EXP 38
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 104 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 104
2726: EQUAL
2727: IFFALSE 2737
// sReset := true ;
2729: LD_ADDR_EXP 39
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 105 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 105
2744: EQUAL
2745: IFFALSE 2755
// sSun := true ;
2747: LD_ADDR_EXP 40
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 106 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 106
2762: EQUAL
2763: IFFALSE 2773
// sTiger := true ;
2765: LD_ADDR_EXP 36
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 107 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 107
2780: EQUAL
2781: IFFALSE 2791
// sBomb := true ;
2783: LD_ADDR_EXP 37
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 108 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 108
2798: EQUAL
2799: IFFALSE 2809
// sWound := true ;
2801: LD_ADDR_EXP 45
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 109 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 109
2816: EQUAL
2817: IFFALSE 2827
// sBetray := true ;
2819: LD_ADDR_EXP 49
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 110 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 110
2834: EQUAL
2835: IFFALSE 2845
// sContamin := true ;
2837: LD_ADDR_EXP 50
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 111 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 111
2852: EQUAL
2853: IFFALSE 2863
// sOil := true ;
2855: LD_ADDR_EXP 52
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 112 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 112
2870: EQUAL
2871: IFFALSE 2881
// sStu := true ;
2873: LD_ADDR_EXP 56
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 113 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 113
2888: EQUAL
2889: IFFALSE 2899
// sBazooka := true ;
2891: LD_ADDR_EXP 59
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// if p3 = 114 then
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 114
2906: EQUAL
2907: IFFALSE 2917
// sMortar := true ;
2909: LD_ADDR_EXP 60
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// if p3 = 115 then
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 115
2924: EQUAL
2925: IFFALSE 2935
// sRanger := true ;
2927: LD_ADDR_EXP 70
2931: PUSH
2932: LD_INT 1
2934: ST_TO_ADDR
// end ; if p2 = 101 then
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 101
2942: EQUAL
2943: IFFALSE 3071
// begin case p3 of 1 :
2945: LD_VAR 0 3
2949: PUSH
2950: LD_INT 1
2952: DOUBLE
2953: EQUAL
2954: IFTRUE 2958
2956: GO 2965
2958: POP
// hHackUnlimitedResources ; 2 :
2959: CALL 14106 0 0
2963: GO 3071
2965: LD_INT 2
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2980
2973: POP
// hHackSetLevel10 ; 3 :
2974: CALL 14239 0 0
2978: GO 3071
2980: LD_INT 3
2982: DOUBLE
2983: EQUAL
2984: IFTRUE 2988
2986: GO 2995
2988: POP
// hHackSetLevel10YourUnits ; 4 :
2989: CALL 14324 0 0
2993: GO 3071
2995: LD_INT 4
2997: DOUBLE
2998: EQUAL
2999: IFTRUE 3003
3001: GO 3010
3003: POP
// hHackInvincible ; 5 :
3004: CALL 14772 0 0
3008: GO 3071
3010: LD_INT 5
3012: DOUBLE
3013: EQUAL
3014: IFTRUE 3018
3016: GO 3025
3018: POP
// hHackInvisible ; 6 :
3019: CALL 14883 0 0
3023: GO 3071
3025: LD_INT 6
3027: DOUBLE
3028: EQUAL
3029: IFTRUE 3033
3031: GO 3040
3033: POP
// hHackChangeYourSide ; 7 :
3034: CALL 14940 0 0
3038: GO 3071
3040: LD_INT 7
3042: DOUBLE
3043: EQUAL
3044: IFTRUE 3048
3046: GO 3055
3048: POP
// hHackChangeUnitSide ; 8 :
3049: CALL 14982 0 0
3053: GO 3071
3055: LD_INT 8
3057: DOUBLE
3058: EQUAL
3059: IFTRUE 3063
3061: GO 3070
3063: POP
// hHackFog ; end ;
3064: CALL 15083 0 0
3068: GO 3071
3070: POP
// end ; end ;
3071: PPOPN 6
3073: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3074: GO 3076
3076: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3077: LD_STRING initStreamRollete();
3079: PPUSH
3080: CALL_OW 559
// InitStreamMode ;
3084: CALL 3093 0 0
// DefineStreamItems ( ) ;
3088: CALL 3533 0 0
// end ;
3092: END
// function InitStreamMode ; begin
3093: LD_INT 0
3095: PPUSH
// streamModeActive := false ;
3096: LD_ADDR_EXP 17
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// normalCounter := 36 ;
3104: LD_ADDR_EXP 18
3108: PUSH
3109: LD_INT 36
3111: ST_TO_ADDR
// hardcoreCounter := 16 ;
3112: LD_ADDR_EXP 19
3116: PUSH
3117: LD_INT 16
3119: ST_TO_ADDR
// sRocket := false ;
3120: LD_ADDR_EXP 22
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sSpeed := false ;
3128: LD_ADDR_EXP 21
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sEngine := false ;
3136: LD_ADDR_EXP 23
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sSpec := false ;
3144: LD_ADDR_EXP 20
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sLevel := false ;
3152: LD_ADDR_EXP 24
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sArmoury := false ;
3160: LD_ADDR_EXP 25
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sRadar := false ;
3168: LD_ADDR_EXP 26
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sBunker := false ;
3176: LD_ADDR_EXP 27
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sHack := false ;
3184: LD_ADDR_EXP 28
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sFire := false ;
3192: LD_ADDR_EXP 29
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// sRefresh := false ;
3200: LD_ADDR_EXP 30
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// sExp := false ;
3208: LD_ADDR_EXP 31
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// sDepot := false ;
3216: LD_ADDR_EXP 32
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// sFlag := false ;
3224: LD_ADDR_EXP 33
3228: PUSH
3229: LD_INT 0
3231: ST_TO_ADDR
// sKamikadze := false ;
3232: LD_ADDR_EXP 41
3236: PUSH
3237: LD_INT 0
3239: ST_TO_ADDR
// sTroll := false ;
3240: LD_ADDR_EXP 42
3244: PUSH
3245: LD_INT 0
3247: ST_TO_ADDR
// sSlow := false ;
3248: LD_ADDR_EXP 43
3252: PUSH
3253: LD_INT 0
3255: ST_TO_ADDR
// sLack := false ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_INT 0
3263: ST_TO_ADDR
// sTank := false ;
3264: LD_ADDR_EXP 46
3268: PUSH
3269: LD_INT 0
3271: ST_TO_ADDR
// sRemote := false ;
3272: LD_ADDR_EXP 47
3276: PUSH
3277: LD_INT 0
3279: ST_TO_ADDR
// sPowell := false ;
3280: LD_ADDR_EXP 48
3284: PUSH
3285: LD_INT 0
3287: ST_TO_ADDR
// sTeleport := false ;
3288: LD_ADDR_EXP 51
3292: PUSH
3293: LD_INT 0
3295: ST_TO_ADDR
// sOilTower := false ;
3296: LD_ADDR_EXP 53
3300: PUSH
3301: LD_INT 0
3303: ST_TO_ADDR
// sShovel := false ;
3304: LD_ADDR_EXP 54
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// sSheik := false ;
3312: LD_ADDR_EXP 55
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// sEarthquake := false ;
3320: LD_ADDR_EXP 57
3324: PUSH
3325: LD_INT 0
3327: ST_TO_ADDR
// sAI := false ;
3328: LD_ADDR_EXP 58
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// sCargo := false ;
3336: LD_ADDR_EXP 61
3340: PUSH
3341: LD_INT 0
3343: ST_TO_ADDR
// sDLaser := false ;
3344: LD_ADDR_EXP 62
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// sExchange := false ;
3352: LD_ADDR_EXP 63
3356: PUSH
3357: LD_INT 0
3359: ST_TO_ADDR
// sFac := false ;
3360: LD_ADDR_EXP 64
3364: PUSH
3365: LD_INT 0
3367: ST_TO_ADDR
// sPower := false ;
3368: LD_ADDR_EXP 65
3372: PUSH
3373: LD_INT 0
3375: ST_TO_ADDR
// sRandom := false ;
3376: LD_ADDR_EXP 66
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// sShield := false ;
3384: LD_ADDR_EXP 67
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// sTime := false ;
3392: LD_ADDR_EXP 68
3396: PUSH
3397: LD_INT 0
3399: ST_TO_ADDR
// sTools := false ;
3400: LD_ADDR_EXP 69
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// sSold := false ;
3408: LD_ADDR_EXP 34
3412: PUSH
3413: LD_INT 0
3415: ST_TO_ADDR
// sDiff := false ;
3416: LD_ADDR_EXP 35
3420: PUSH
3421: LD_INT 0
3423: ST_TO_ADDR
// sFog := false ;
3424: LD_ADDR_EXP 38
3428: PUSH
3429: LD_INT 0
3431: ST_TO_ADDR
// sReset := false ;
3432: LD_ADDR_EXP 39
3436: PUSH
3437: LD_INT 0
3439: ST_TO_ADDR
// sSun := false ;
3440: LD_ADDR_EXP 40
3444: PUSH
3445: LD_INT 0
3447: ST_TO_ADDR
// sTiger := false ;
3448: LD_ADDR_EXP 36
3452: PUSH
3453: LD_INT 0
3455: ST_TO_ADDR
// sBomb := false ;
3456: LD_ADDR_EXP 37
3460: PUSH
3461: LD_INT 0
3463: ST_TO_ADDR
// sWound := false ;
3464: LD_ADDR_EXP 45
3468: PUSH
3469: LD_INT 0
3471: ST_TO_ADDR
// sBetray := false ;
3472: LD_ADDR_EXP 49
3476: PUSH
3477: LD_INT 0
3479: ST_TO_ADDR
// sContamin := false ;
3480: LD_ADDR_EXP 50
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// sOil := false ;
3488: LD_ADDR_EXP 52
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// sStu := false ;
3496: LD_ADDR_EXP 56
3500: PUSH
3501: LD_INT 0
3503: ST_TO_ADDR
// sBazooka := false ;
3504: LD_ADDR_EXP 59
3508: PUSH
3509: LD_INT 0
3511: ST_TO_ADDR
// sMortar := false ;
3512: LD_ADDR_EXP 60
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// sRanger := false ;
3520: LD_ADDR_EXP 70
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// end ;
3528: LD_VAR 0 1
3532: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
// result := [ ] ;
3540: LD_ADDR_VAR 0 1
3544: PUSH
3545: EMPTY
3546: ST_TO_ADDR
// if campaign_id = 1 then
3547: LD_OWVAR 69
3551: PUSH
3552: LD_INT 1
3554: EQUAL
3555: IFFALSE 6493
// begin case mission_number of 1 :
3557: LD_OWVAR 70
3561: PUSH
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3634
3570: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3571: LD_ADDR_VAR 0 1
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: LD_INT 11
3584: PUSH
3585: LD_INT 12
3587: PUSH
3588: LD_INT 15
3590: PUSH
3591: LD_INT 16
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 23
3599: PUSH
3600: LD_INT 26
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 101
3616: PUSH
3617: LD_INT 102
3619: PUSH
3620: LD_INT 106
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: ST_TO_ADDR
3632: GO 6491
3634: LD_INT 2
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3714
3642: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 4
3653: PUSH
3654: LD_INT 11
3656: PUSH
3657: LD_INT 12
3659: PUSH
3660: LD_INT 15
3662: PUSH
3663: LD_INT 16
3665: PUSH
3666: LD_INT 22
3668: PUSH
3669: LD_INT 23
3671: PUSH
3672: LD_INT 26
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 101
3688: PUSH
3689: LD_INT 102
3691: PUSH
3692: LD_INT 105
3694: PUSH
3695: LD_INT 106
3697: PUSH
3698: LD_INT 108
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: ST_TO_ADDR
3712: GO 6491
3714: LD_INT 3
3716: DOUBLE
3717: EQUAL
3718: IFTRUE 3722
3720: GO 3798
3722: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3723: LD_ADDR_VAR 0 1
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 4
3733: PUSH
3734: LD_INT 5
3736: PUSH
3737: LD_INT 11
3739: PUSH
3740: LD_INT 12
3742: PUSH
3743: LD_INT 15
3745: PUSH
3746: LD_INT 16
3748: PUSH
3749: LD_INT 22
3751: PUSH
3752: LD_INT 26
3754: PUSH
3755: LD_INT 36
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 101
3772: PUSH
3773: LD_INT 102
3775: PUSH
3776: LD_INT 105
3778: PUSH
3779: LD_INT 106
3781: PUSH
3782: LD_INT 108
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: ST_TO_ADDR
3796: GO 6491
3798: LD_INT 4
3800: DOUBLE
3801: EQUAL
3802: IFTRUE 3806
3804: GO 3890
3806: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3807: LD_ADDR_VAR 0 1
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: LD_INT 4
3817: PUSH
3818: LD_INT 5
3820: PUSH
3821: LD_INT 8
3823: PUSH
3824: LD_INT 11
3826: PUSH
3827: LD_INT 12
3829: PUSH
3830: LD_INT 15
3832: PUSH
3833: LD_INT 16
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 23
3841: PUSH
3842: LD_INT 26
3844: PUSH
3845: LD_INT 36
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 101
3864: PUSH
3865: LD_INT 102
3867: PUSH
3868: LD_INT 105
3870: PUSH
3871: LD_INT 106
3873: PUSH
3874: LD_INT 108
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: ST_TO_ADDR
3888: GO 6491
3890: LD_INT 5
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3898
3896: GO 3998
3898: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3899: LD_ADDR_VAR 0 1
3903: PUSH
3904: LD_INT 2
3906: PUSH
3907: LD_INT 4
3909: PUSH
3910: LD_INT 5
3912: PUSH
3913: LD_INT 6
3915: PUSH
3916: LD_INT 8
3918: PUSH
3919: LD_INT 11
3921: PUSH
3922: LD_INT 12
3924: PUSH
3925: LD_INT 15
3927: PUSH
3928: LD_INT 16
3930: PUSH
3931: LD_INT 22
3933: PUSH
3934: LD_INT 23
3936: PUSH
3937: LD_INT 25
3939: PUSH
3940: LD_INT 26
3942: PUSH
3943: LD_INT 36
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 101
3964: PUSH
3965: LD_INT 102
3967: PUSH
3968: LD_INT 105
3970: PUSH
3971: LD_INT 106
3973: PUSH
3974: LD_INT 108
3976: PUSH
3977: LD_INT 109
3979: PUSH
3980: LD_INT 112
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: ST_TO_ADDR
3996: GO 6491
3998: LD_INT 6
4000: DOUBLE
4001: EQUAL
4002: IFTRUE 4006
4004: GO 4126
4006: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4007: LD_ADDR_VAR 0 1
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: LD_INT 5
4020: PUSH
4021: LD_INT 6
4023: PUSH
4024: LD_INT 8
4026: PUSH
4027: LD_INT 11
4029: PUSH
4030: LD_INT 12
4032: PUSH
4033: LD_INT 15
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 20
4041: PUSH
4042: LD_INT 21
4044: PUSH
4045: LD_INT 22
4047: PUSH
4048: LD_INT 23
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 26
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 31
4062: PUSH
4063: LD_INT 32
4065: PUSH
4066: LD_INT 36
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 101
4092: PUSH
4093: LD_INT 102
4095: PUSH
4096: LD_INT 105
4098: PUSH
4099: LD_INT 106
4101: PUSH
4102: LD_INT 108
4104: PUSH
4105: LD_INT 109
4107: PUSH
4108: LD_INT 112
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: ST_TO_ADDR
4124: GO 6491
4126: LD_INT 7
4128: DOUBLE
4129: EQUAL
4130: IFTRUE 4134
4132: GO 4234
4134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4135: LD_ADDR_VAR 0 1
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 7
4151: PUSH
4152: LD_INT 11
4154: PUSH
4155: LD_INT 12
4157: PUSH
4158: LD_INT 15
4160: PUSH
4161: LD_INT 16
4163: PUSH
4164: LD_INT 20
4166: PUSH
4167: LD_INT 21
4169: PUSH
4170: LD_INT 22
4172: PUSH
4173: LD_INT 23
4175: PUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 26
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 101
4200: PUSH
4201: LD_INT 102
4203: PUSH
4204: LD_INT 103
4206: PUSH
4207: LD_INT 105
4209: PUSH
4210: LD_INT 106
4212: PUSH
4213: LD_INT 108
4215: PUSH
4216: LD_INT 112
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: ST_TO_ADDR
4232: GO 6491
4234: LD_INT 8
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4370
4242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4243: LD_ADDR_VAR 0 1
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: LD_INT 4
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 6
4259: PUSH
4260: LD_INT 7
4262: PUSH
4263: LD_INT 8
4265: PUSH
4266: LD_INT 11
4268: PUSH
4269: LD_INT 12
4271: PUSH
4272: LD_INT 15
4274: PUSH
4275: LD_INT 16
4277: PUSH
4278: LD_INT 20
4280: PUSH
4281: LD_INT 21
4283: PUSH
4284: LD_INT 22
4286: PUSH
4287: LD_INT 23
4289: PUSH
4290: LD_INT 25
4292: PUSH
4293: LD_INT 26
4295: PUSH
4296: LD_INT 30
4298: PUSH
4299: LD_INT 31
4301: PUSH
4302: LD_INT 32
4304: PUSH
4305: LD_INT 36
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_INT 101
4332: PUSH
4333: LD_INT 102
4335: PUSH
4336: LD_INT 103
4338: PUSH
4339: LD_INT 105
4341: PUSH
4342: LD_INT 106
4344: PUSH
4345: LD_INT 108
4347: PUSH
4348: LD_INT 109
4350: PUSH
4351: LD_INT 112
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: ST_TO_ADDR
4368: GO 6491
4370: LD_INT 9
4372: DOUBLE
4373: EQUAL
4374: IFTRUE 4378
4376: GO 4514
4378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4379: LD_ADDR_VAR 0 1
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: LD_INT 4
4389: PUSH
4390: LD_INT 5
4392: PUSH
4393: LD_INT 6
4395: PUSH
4396: LD_INT 7
4398: PUSH
4399: LD_INT 8
4401: PUSH
4402: LD_INT 11
4404: PUSH
4405: LD_INT 12
4407: PUSH
4408: LD_INT 15
4410: PUSH
4411: LD_INT 16
4413: PUSH
4414: LD_INT 20
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 22
4422: PUSH
4423: LD_INT 23
4425: PUSH
4426: LD_INT 25
4428: PUSH
4429: LD_INT 26
4431: PUSH
4432: LD_INT 28
4434: PUSH
4435: LD_INT 30
4437: PUSH
4438: LD_INT 31
4440: PUSH
4441: LD_INT 32
4443: PUSH
4444: LD_INT 36
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 101
4472: PUSH
4473: LD_INT 102
4475: PUSH
4476: LD_INT 103
4478: PUSH
4479: LD_INT 105
4481: PUSH
4482: LD_INT 106
4484: PUSH
4485: LD_INT 108
4487: PUSH
4488: LD_INT 109
4490: PUSH
4491: LD_INT 112
4493: PUSH
4494: LD_INT 114
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: ST_TO_ADDR
4512: GO 6491
4514: LD_INT 10
4516: DOUBLE
4517: EQUAL
4518: IFTRUE 4522
4520: GO 4706
4522: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4523: LD_ADDR_VAR 0 1
4527: PUSH
4528: LD_INT 2
4530: PUSH
4531: LD_INT 4
4533: PUSH
4534: LD_INT 5
4536: PUSH
4537: LD_INT 6
4539: PUSH
4540: LD_INT 7
4542: PUSH
4543: LD_INT 8
4545: PUSH
4546: LD_INT 9
4548: PUSH
4549: LD_INT 10
4551: PUSH
4552: LD_INT 11
4554: PUSH
4555: LD_INT 12
4557: PUSH
4558: LD_INT 13
4560: PUSH
4561: LD_INT 14
4563: PUSH
4564: LD_INT 15
4566: PUSH
4567: LD_INT 16
4569: PUSH
4570: LD_INT 17
4572: PUSH
4573: LD_INT 18
4575: PUSH
4576: LD_INT 19
4578: PUSH
4579: LD_INT 20
4581: PUSH
4582: LD_INT 21
4584: PUSH
4585: LD_INT 22
4587: PUSH
4588: LD_INT 23
4590: PUSH
4591: LD_INT 24
4593: PUSH
4594: LD_INT 25
4596: PUSH
4597: LD_INT 26
4599: PUSH
4600: LD_INT 28
4602: PUSH
4603: LD_INT 30
4605: PUSH
4606: LD_INT 31
4608: PUSH
4609: LD_INT 32
4611: PUSH
4612: LD_INT 36
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 101
4648: PUSH
4649: LD_INT 102
4651: PUSH
4652: LD_INT 103
4654: PUSH
4655: LD_INT 104
4657: PUSH
4658: LD_INT 105
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 107
4666: PUSH
4667: LD_INT 108
4669: PUSH
4670: LD_INT 109
4672: PUSH
4673: LD_INT 110
4675: PUSH
4676: LD_INT 111
4678: PUSH
4679: LD_INT 112
4681: PUSH
4682: LD_INT 114
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
4704: GO 6491
4706: LD_INT 11
4708: DOUBLE
4709: EQUAL
4710: IFTRUE 4714
4712: GO 4906
4714: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4715: LD_ADDR_VAR 0 1
4719: PUSH
4720: LD_INT 2
4722: PUSH
4723: LD_INT 3
4725: PUSH
4726: LD_INT 4
4728: PUSH
4729: LD_INT 5
4731: PUSH
4732: LD_INT 6
4734: PUSH
4735: LD_INT 7
4737: PUSH
4738: LD_INT 8
4740: PUSH
4741: LD_INT 9
4743: PUSH
4744: LD_INT 10
4746: PUSH
4747: LD_INT 11
4749: PUSH
4750: LD_INT 12
4752: PUSH
4753: LD_INT 13
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: LD_INT 15
4761: PUSH
4762: LD_INT 16
4764: PUSH
4765: LD_INT 17
4767: PUSH
4768: LD_INT 18
4770: PUSH
4771: LD_INT 19
4773: PUSH
4774: LD_INT 20
4776: PUSH
4777: LD_INT 21
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 23
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 26
4794: PUSH
4795: LD_INT 28
4797: PUSH
4798: LD_INT 30
4800: PUSH
4801: LD_INT 31
4803: PUSH
4804: LD_INT 32
4806: PUSH
4807: LD_INT 34
4809: PUSH
4810: LD_INT 36
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 101
4848: PUSH
4849: LD_INT 102
4851: PUSH
4852: LD_INT 103
4854: PUSH
4855: LD_INT 104
4857: PUSH
4858: LD_INT 105
4860: PUSH
4861: LD_INT 106
4863: PUSH
4864: LD_INT 107
4866: PUSH
4867: LD_INT 108
4869: PUSH
4870: LD_INT 109
4872: PUSH
4873: LD_INT 110
4875: PUSH
4876: LD_INT 111
4878: PUSH
4879: LD_INT 112
4881: PUSH
4882: LD_INT 114
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: ST_TO_ADDR
4904: GO 6491
4906: LD_INT 12
4908: DOUBLE
4909: EQUAL
4910: IFTRUE 4914
4912: GO 5122
4914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4915: LD_ADDR_VAR 0 1
4919: PUSH
4920: LD_INT 1
4922: PUSH
4923: LD_INT 2
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 4
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: LD_INT 6
4937: PUSH
4938: LD_INT 7
4940: PUSH
4941: LD_INT 8
4943: PUSH
4944: LD_INT 9
4946: PUSH
4947: LD_INT 10
4949: PUSH
4950: LD_INT 11
4952: PUSH
4953: LD_INT 12
4955: PUSH
4956: LD_INT 13
4958: PUSH
4959: LD_INT 14
4961: PUSH
4962: LD_INT 15
4964: PUSH
4965: LD_INT 16
4967: PUSH
4968: LD_INT 17
4970: PUSH
4971: LD_INT 18
4973: PUSH
4974: LD_INT 19
4976: PUSH
4977: LD_INT 20
4979: PUSH
4980: LD_INT 21
4982: PUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 23
4988: PUSH
4989: LD_INT 24
4991: PUSH
4992: LD_INT 25
4994: PUSH
4995: LD_INT 26
4997: PUSH
4998: LD_INT 27
5000: PUSH
5001: LD_INT 28
5003: PUSH
5004: LD_INT 30
5006: PUSH
5007: LD_INT 31
5009: PUSH
5010: LD_INT 32
5012: PUSH
5013: LD_INT 33
5015: PUSH
5016: LD_INT 34
5018: PUSH
5019: LD_INT 36
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 101
5060: PUSH
5061: LD_INT 102
5063: PUSH
5064: LD_INT 103
5066: PUSH
5067: LD_INT 104
5069: PUSH
5070: LD_INT 105
5072: PUSH
5073: LD_INT 106
5075: PUSH
5076: LD_INT 107
5078: PUSH
5079: LD_INT 108
5081: PUSH
5082: LD_INT 109
5084: PUSH
5085: LD_INT 110
5087: PUSH
5088: LD_INT 111
5090: PUSH
5091: LD_INT 112
5093: PUSH
5094: LD_INT 113
5096: PUSH
5097: LD_INT 114
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
5120: GO 6491
5122: LD_INT 13
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5130
5128: GO 5326
5130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5131: LD_ADDR_VAR 0 1
5135: PUSH
5136: LD_INT 1
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 4
5147: PUSH
5148: LD_INT 5
5150: PUSH
5151: LD_INT 8
5153: PUSH
5154: LD_INT 9
5156: PUSH
5157: LD_INT 10
5159: PUSH
5160: LD_INT 11
5162: PUSH
5163: LD_INT 12
5165: PUSH
5166: LD_INT 14
5168: PUSH
5169: LD_INT 15
5171: PUSH
5172: LD_INT 16
5174: PUSH
5175: LD_INT 17
5177: PUSH
5178: LD_INT 18
5180: PUSH
5181: LD_INT 19
5183: PUSH
5184: LD_INT 20
5186: PUSH
5187: LD_INT 21
5189: PUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 23
5195: PUSH
5196: LD_INT 24
5198: PUSH
5199: LD_INT 25
5201: PUSH
5202: LD_INT 26
5204: PUSH
5205: LD_INT 27
5207: PUSH
5208: LD_INT 28
5210: PUSH
5211: LD_INT 30
5213: PUSH
5214: LD_INT 31
5216: PUSH
5217: LD_INT 32
5219: PUSH
5220: LD_INT 33
5222: PUSH
5223: LD_INT 34
5225: PUSH
5226: LD_INT 36
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 101
5264: PUSH
5265: LD_INT 102
5267: PUSH
5268: LD_INT 103
5270: PUSH
5271: LD_INT 104
5273: PUSH
5274: LD_INT 105
5276: PUSH
5277: LD_INT 106
5279: PUSH
5280: LD_INT 107
5282: PUSH
5283: LD_INT 108
5285: PUSH
5286: LD_INT 109
5288: PUSH
5289: LD_INT 110
5291: PUSH
5292: LD_INT 111
5294: PUSH
5295: LD_INT 112
5297: PUSH
5298: LD_INT 113
5300: PUSH
5301: LD_INT 114
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: ST_TO_ADDR
5324: GO 6491
5326: LD_INT 14
5328: DOUBLE
5329: EQUAL
5330: IFTRUE 5334
5332: GO 5546
5334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5335: LD_ADDR_VAR 0 1
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: LD_INT 2
5345: PUSH
5346: LD_INT 3
5348: PUSH
5349: LD_INT 4
5351: PUSH
5352: LD_INT 5
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: LD_INT 7
5360: PUSH
5361: LD_INT 8
5363: PUSH
5364: LD_INT 9
5366: PUSH
5367: LD_INT 10
5369: PUSH
5370: LD_INT 11
5372: PUSH
5373: LD_INT 12
5375: PUSH
5376: LD_INT 13
5378: PUSH
5379: LD_INT 14
5381: PUSH
5382: LD_INT 15
5384: PUSH
5385: LD_INT 16
5387: PUSH
5388: LD_INT 17
5390: PUSH
5391: LD_INT 18
5393: PUSH
5394: LD_INT 19
5396: PUSH
5397: LD_INT 20
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: LD_INT 25
5414: PUSH
5415: LD_INT 26
5417: PUSH
5418: LD_INT 27
5420: PUSH
5421: LD_INT 28
5423: PUSH
5424: LD_INT 29
5426: PUSH
5427: LD_INT 30
5429: PUSH
5430: LD_INT 31
5432: PUSH
5433: LD_INT 32
5435: PUSH
5436: LD_INT 33
5438: PUSH
5439: LD_INT 34
5441: PUSH
5442: LD_INT 36
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 102
5487: PUSH
5488: LD_INT 103
5490: PUSH
5491: LD_INT 104
5493: PUSH
5494: LD_INT 105
5496: PUSH
5497: LD_INT 106
5499: PUSH
5500: LD_INT 107
5502: PUSH
5503: LD_INT 108
5505: PUSH
5506: LD_INT 109
5508: PUSH
5509: LD_INT 110
5511: PUSH
5512: LD_INT 111
5514: PUSH
5515: LD_INT 112
5517: PUSH
5518: LD_INT 113
5520: PUSH
5521: LD_INT 114
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 6491
5546: LD_INT 15
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5766
5554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5555: LD_ADDR_VAR 0 1
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: LD_INT 2
5565: PUSH
5566: LD_INT 3
5568: PUSH
5569: LD_INT 4
5571: PUSH
5572: LD_INT 5
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: LD_INT 7
5580: PUSH
5581: LD_INT 8
5583: PUSH
5584: LD_INT 9
5586: PUSH
5587: LD_INT 10
5589: PUSH
5590: LD_INT 11
5592: PUSH
5593: LD_INT 12
5595: PUSH
5596: LD_INT 13
5598: PUSH
5599: LD_INT 14
5601: PUSH
5602: LD_INT 15
5604: PUSH
5605: LD_INT 16
5607: PUSH
5608: LD_INT 17
5610: PUSH
5611: LD_INT 18
5613: PUSH
5614: LD_INT 19
5616: PUSH
5617: LD_INT 20
5619: PUSH
5620: LD_INT 21
5622: PUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 23
5628: PUSH
5629: LD_INT 24
5631: PUSH
5632: LD_INT 25
5634: PUSH
5635: LD_INT 26
5637: PUSH
5638: LD_INT 27
5640: PUSH
5641: LD_INT 28
5643: PUSH
5644: LD_INT 29
5646: PUSH
5647: LD_INT 30
5649: PUSH
5650: LD_INT 31
5652: PUSH
5653: LD_INT 32
5655: PUSH
5656: LD_INT 33
5658: PUSH
5659: LD_INT 34
5661: PUSH
5662: LD_INT 36
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 101
5704: PUSH
5705: LD_INT 102
5707: PUSH
5708: LD_INT 103
5710: PUSH
5711: LD_INT 104
5713: PUSH
5714: LD_INT 105
5716: PUSH
5717: LD_INT 106
5719: PUSH
5720: LD_INT 107
5722: PUSH
5723: LD_INT 108
5725: PUSH
5726: LD_INT 109
5728: PUSH
5729: LD_INT 110
5731: PUSH
5732: LD_INT 111
5734: PUSH
5735: LD_INT 112
5737: PUSH
5738: LD_INT 113
5740: PUSH
5741: LD_INT 114
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 6491
5766: LD_INT 16
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5898
5774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5775: LD_ADDR_VAR 0 1
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 4
5785: PUSH
5786: LD_INT 5
5788: PUSH
5789: LD_INT 7
5791: PUSH
5792: LD_INT 11
5794: PUSH
5795: LD_INT 12
5797: PUSH
5798: LD_INT 15
5800: PUSH
5801: LD_INT 16
5803: PUSH
5804: LD_INT 20
5806: PUSH
5807: LD_INT 21
5809: PUSH
5810: LD_INT 22
5812: PUSH
5813: LD_INT 23
5815: PUSH
5816: LD_INT 25
5818: PUSH
5819: LD_INT 26
5821: PUSH
5822: LD_INT 30
5824: PUSH
5825: LD_INT 31
5827: PUSH
5828: LD_INT 32
5830: PUSH
5831: LD_INT 33
5833: PUSH
5834: LD_INT 34
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 101
5860: PUSH
5861: LD_INT 102
5863: PUSH
5864: LD_INT 103
5866: PUSH
5867: LD_INT 106
5869: PUSH
5870: LD_INT 108
5872: PUSH
5873: LD_INT 112
5875: PUSH
5876: LD_INT 113
5878: PUSH
5879: LD_INT 114
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: ST_TO_ADDR
5896: GO 6491
5898: LD_INT 17
5900: DOUBLE
5901: EQUAL
5902: IFTRUE 5906
5904: GO 6118
5906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5907: LD_ADDR_VAR 0 1
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: LD_INT 2
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: LD_INT 5
5926: PUSH
5927: LD_INT 6
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 8
5935: PUSH
5936: LD_INT 9
5938: PUSH
5939: LD_INT 10
5941: PUSH
5942: LD_INT 11
5944: PUSH
5945: LD_INT 12
5947: PUSH
5948: LD_INT 13
5950: PUSH
5951: LD_INT 14
5953: PUSH
5954: LD_INT 15
5956: PUSH
5957: LD_INT 16
5959: PUSH
5960: LD_INT 17
5962: PUSH
5963: LD_INT 18
5965: PUSH
5966: LD_INT 19
5968: PUSH
5969: LD_INT 20
5971: PUSH
5972: LD_INT 21
5974: PUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 23
5980: PUSH
5981: LD_INT 24
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 26
5989: PUSH
5990: LD_INT 27
5992: PUSH
5993: LD_INT 28
5995: PUSH
5996: LD_INT 29
5998: PUSH
5999: LD_INT 30
6001: PUSH
6002: LD_INT 31
6004: PUSH
6005: LD_INT 32
6007: PUSH
6008: LD_INT 33
6010: PUSH
6011: LD_INT 34
6013: PUSH
6014: LD_INT 36
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 101
6056: PUSH
6057: LD_INT 102
6059: PUSH
6060: LD_INT 103
6062: PUSH
6063: LD_INT 104
6065: PUSH
6066: LD_INT 105
6068: PUSH
6069: LD_INT 106
6071: PUSH
6072: LD_INT 107
6074: PUSH
6075: LD_INT 108
6077: PUSH
6078: LD_INT 109
6080: PUSH
6081: LD_INT 110
6083: PUSH
6084: LD_INT 111
6086: PUSH
6087: LD_INT 112
6089: PUSH
6090: LD_INT 113
6092: PUSH
6093: LD_INT 114
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: ST_TO_ADDR
6116: GO 6491
6118: LD_INT 18
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6262
6126: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6127: LD_ADDR_VAR 0 1
6131: PUSH
6132: LD_INT 2
6134: PUSH
6135: LD_INT 4
6137: PUSH
6138: LD_INT 5
6140: PUSH
6141: LD_INT 7
6143: PUSH
6144: LD_INT 11
6146: PUSH
6147: LD_INT 12
6149: PUSH
6150: LD_INT 15
6152: PUSH
6153: LD_INT 16
6155: PUSH
6156: LD_INT 20
6158: PUSH
6159: LD_INT 21
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_INT 23
6167: PUSH
6168: LD_INT 25
6170: PUSH
6171: LD_INT 26
6173: PUSH
6174: LD_INT 30
6176: PUSH
6177: LD_INT 31
6179: PUSH
6180: LD_INT 32
6182: PUSH
6183: LD_INT 33
6185: PUSH
6186: LD_INT 34
6188: PUSH
6189: LD_INT 35
6191: PUSH
6192: LD_INT 36
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 101
6220: PUSH
6221: LD_INT 102
6223: PUSH
6224: LD_INT 103
6226: PUSH
6227: LD_INT 106
6229: PUSH
6230: LD_INT 108
6232: PUSH
6233: LD_INT 112
6235: PUSH
6236: LD_INT 113
6238: PUSH
6239: LD_INT 114
6241: PUSH
6242: LD_INT 115
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: ST_TO_ADDR
6260: GO 6491
6262: LD_INT 19
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6490
6270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6271: LD_ADDR_VAR 0 1
6275: PUSH
6276: LD_INT 1
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 5
6290: PUSH
6291: LD_INT 6
6293: PUSH
6294: LD_INT 7
6296: PUSH
6297: LD_INT 8
6299: PUSH
6300: LD_INT 9
6302: PUSH
6303: LD_INT 10
6305: PUSH
6306: LD_INT 11
6308: PUSH
6309: LD_INT 12
6311: PUSH
6312: LD_INT 13
6314: PUSH
6315: LD_INT 14
6317: PUSH
6318: LD_INT 15
6320: PUSH
6321: LD_INT 16
6323: PUSH
6324: LD_INT 17
6326: PUSH
6327: LD_INT 18
6329: PUSH
6330: LD_INT 19
6332: PUSH
6333: LD_INT 20
6335: PUSH
6336: LD_INT 21
6338: PUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 24
6347: PUSH
6348: LD_INT 25
6350: PUSH
6351: LD_INT 26
6353: PUSH
6354: LD_INT 27
6356: PUSH
6357: LD_INT 28
6359: PUSH
6360: LD_INT 29
6362: PUSH
6363: LD_INT 30
6365: PUSH
6366: LD_INT 31
6368: PUSH
6369: LD_INT 32
6371: PUSH
6372: LD_INT 33
6374: PUSH
6375: LD_INT 34
6377: PUSH
6378: LD_INT 35
6380: PUSH
6381: LD_INT 36
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 101
6424: PUSH
6425: LD_INT 102
6427: PUSH
6428: LD_INT 103
6430: PUSH
6431: LD_INT 104
6433: PUSH
6434: LD_INT 105
6436: PUSH
6437: LD_INT 106
6439: PUSH
6440: LD_INT 107
6442: PUSH
6443: LD_INT 108
6445: PUSH
6446: LD_INT 109
6448: PUSH
6449: LD_INT 110
6451: PUSH
6452: LD_INT 111
6454: PUSH
6455: LD_INT 112
6457: PUSH
6458: LD_INT 113
6460: PUSH
6461: LD_INT 114
6463: PUSH
6464: LD_INT 115
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: ST_TO_ADDR
6488: GO 6491
6490: POP
// end else
6491: GO 6710
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6493: LD_ADDR_VAR 0 1
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: LD_INT 6
6515: PUSH
6516: LD_INT 7
6518: PUSH
6519: LD_INT 8
6521: PUSH
6522: LD_INT 9
6524: PUSH
6525: LD_INT 10
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: LD_INT 15
6542: PUSH
6543: LD_INT 16
6545: PUSH
6546: LD_INT 17
6548: PUSH
6549: LD_INT 18
6551: PUSH
6552: LD_INT 19
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 24
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 26
6575: PUSH
6576: LD_INT 27
6578: PUSH
6579: LD_INT 28
6581: PUSH
6582: LD_INT 29
6584: PUSH
6585: LD_INT 30
6587: PUSH
6588: LD_INT 31
6590: PUSH
6591: LD_INT 32
6593: PUSH
6594: LD_INT 33
6596: PUSH
6597: LD_INT 34
6599: PUSH
6600: LD_INT 35
6602: PUSH
6603: LD_INT 36
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 101
6646: PUSH
6647: LD_INT 102
6649: PUSH
6650: LD_INT 103
6652: PUSH
6653: LD_INT 104
6655: PUSH
6656: LD_INT 105
6658: PUSH
6659: LD_INT 106
6661: PUSH
6662: LD_INT 107
6664: PUSH
6665: LD_INT 108
6667: PUSH
6668: LD_INT 109
6670: PUSH
6671: LD_INT 110
6673: PUSH
6674: LD_INT 111
6676: PUSH
6677: LD_INT 112
6679: PUSH
6680: LD_INT 113
6682: PUSH
6683: LD_INT 114
6685: PUSH
6686: LD_INT 115
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// if result then
6710: LD_VAR 0 1
6714: IFFALSE 7003
// begin normal :=  ;
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: LD_STRING 
6723: ST_TO_ADDR
// hardcore :=  ;
6724: LD_ADDR_VAR 0 4
6728: PUSH
6729: LD_STRING 
6731: ST_TO_ADDR
// for i = 1 to normalCounter do
6732: LD_ADDR_VAR 0 5
6736: PUSH
6737: DOUBLE
6738: LD_INT 1
6740: DEC
6741: ST_TO_ADDR
6742: LD_EXP 18
6746: PUSH
6747: FOR_TO
6748: IFFALSE 6849
// begin tmp := 0 ;
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: LD_STRING 0
6757: ST_TO_ADDR
// if result [ 1 ] then
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: IFFALSE 6831
// if result [ 1 ] [ 1 ] = i then
6768: LD_VAR 0 1
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PUSH
6781: LD_VAR 0 5
6785: EQUAL
6786: IFFALSE 6831
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_VAR 0 1
6797: PPUSH
6798: LD_INT 1
6800: PPUSH
6801: LD_VAR 0 1
6805: PUSH
6806: LD_INT 1
6808: ARRAY
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: CALL_OW 3
6817: PPUSH
6818: CALL_OW 1
6822: ST_TO_ADDR
// tmp := 1 ;
6823: LD_ADDR_VAR 0 2
6827: PUSH
6828: LD_STRING 1
6830: ST_TO_ADDR
// end ; normal := normal & tmp ;
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: LD_VAR 0 3
6840: PUSH
6841: LD_VAR 0 2
6845: STR
6846: ST_TO_ADDR
// end ;
6847: GO 6747
6849: POP
6850: POP
// for i = 1 to hardcoreCounter do
6851: LD_ADDR_VAR 0 5
6855: PUSH
6856: DOUBLE
6857: LD_INT 1
6859: DEC
6860: ST_TO_ADDR
6861: LD_EXP 19
6865: PUSH
6866: FOR_TO
6867: IFFALSE 6972
// begin tmp := 0 ;
6869: LD_ADDR_VAR 0 2
6873: PUSH
6874: LD_STRING 0
6876: ST_TO_ADDR
// if result [ 2 ] then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: IFFALSE 6954
// if result [ 2 ] [ 1 ] = 100 + i then
6887: LD_VAR 0 1
6891: PUSH
6892: LD_INT 2
6894: ARRAY
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PUSH
6900: LD_INT 100
6902: PUSH
6903: LD_VAR 0 5
6907: PLUS
6908: EQUAL
6909: IFFALSE 6954
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6911: LD_ADDR_VAR 0 1
6915: PUSH
6916: LD_VAR 0 1
6920: PPUSH
6921: LD_INT 2
6923: PPUSH
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 2
6931: ARRAY
6932: PPUSH
6933: LD_INT 1
6935: PPUSH
6936: CALL_OW 3
6940: PPUSH
6941: CALL_OW 1
6945: ST_TO_ADDR
// tmp := 1 ;
6946: LD_ADDR_VAR 0 2
6950: PUSH
6951: LD_STRING 1
6953: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6954: LD_ADDR_VAR 0 4
6958: PUSH
6959: LD_VAR 0 4
6963: PUSH
6964: LD_VAR 0 2
6968: STR
6969: ST_TO_ADDR
// end ;
6970: GO 6866
6972: POP
6973: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6974: LD_STRING getStreamItemsFromMission("
6976: PUSH
6977: LD_VAR 0 3
6981: STR
6982: PUSH
6983: LD_STRING ","
6985: STR
6986: PUSH
6987: LD_VAR 0 4
6991: STR
6992: PUSH
6993: LD_STRING ")
6995: STR
6996: PPUSH
6997: CALL_OW 559
// end else
7001: GO 7010
// ToLua ( getStreamItemsFromMission("","") ) ;
7003: LD_STRING getStreamItemsFromMission("","")
7005: PPUSH
7006: CALL_OW 559
// end ;
7010: LD_VAR 0 1
7014: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7015: LD_EXP 17
7019: PUSH
7020: LD_EXP 22
7024: AND
7025: IFFALSE 7149
7027: GO 7029
7029: DISABLE
7030: LD_INT 0
7032: PPUSH
7033: PPUSH
// begin enable ;
7034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_OWVAR 2
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 2
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 7
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 34
7067: PUSH
7068: LD_INT 45
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 34
7077: PUSH
7078: LD_INT 28
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 34
7087: PUSH
7088: LD_INT 47
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: ST_TO_ADDR
// if not tmp then
7111: LD_VAR 0 2
7115: NOT
7116: IFFALSE 7120
// exit ;
7118: GO 7149
// for i in tmp do
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_VAR 0 2
7129: PUSH
7130: FOR_IN
7131: IFFALSE 7147
// begin SetLives ( i , 0 ) ;
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 234
// end ;
7145: GO 7130
7147: POP
7148: POP
// end ;
7149: PPOPN 2
7151: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7152: LD_EXP 17
7156: PUSH
7157: LD_EXP 23
7161: AND
7162: IFFALSE 7246
7164: GO 7166
7166: DISABLE
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
// begin enable ;
7171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_OWVAR 2
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 32
7191: PUSH
7192: LD_INT 3
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: ST_TO_ADDR
// if not tmp then
7208: LD_VAR 0 2
7212: NOT
7213: IFFALSE 7217
// exit ;
7215: GO 7246
// for i in tmp do
7217: LD_ADDR_VAR 0 1
7221: PUSH
7222: LD_VAR 0 2
7226: PUSH
7227: FOR_IN
7228: IFFALSE 7244
// begin SetLives ( i , 0 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: CALL_OW 234
// end ;
7242: GO 7227
7244: POP
7245: POP
// end ;
7246: PPOPN 2
7248: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7249: LD_EXP 17
7253: PUSH
7254: LD_EXP 20
7258: AND
7259: IFFALSE 7352
7261: GO 7263
7263: DISABLE
7264: LD_INT 0
7266: PPUSH
// begin enable ;
7267: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7268: LD_ADDR_VAR 0 1
7272: PUSH
7273: LD_INT 22
7275: PUSH
7276: LD_OWVAR 2
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 2
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 5
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 9
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 8
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 69
7332: PUSH
7333: FOR_IN
7334: IFFALSE 7350
// begin SetClass ( i , 1 ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 336
// end ;
7348: GO 7333
7350: POP
7351: POP
// end ;
7352: PPOPN 1
7354: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7355: LD_EXP 17
7359: PUSH
7360: LD_EXP 21
7364: AND
7365: PUSH
7366: LD_OWVAR 65
7370: PUSH
7371: LD_INT 7
7373: LESS
7374: AND
7375: IFFALSE 7389
7377: GO 7379
7379: DISABLE
// begin enable ;
7380: ENABLE
// game_speed := 7 ;
7381: LD_ADDR_OWVAR 65
7385: PUSH
7386: LD_INT 7
7388: ST_TO_ADDR
// end ;
7389: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7390: LD_EXP 17
7394: PUSH
7395: LD_EXP 24
7399: AND
7400: IFFALSE 7602
7402: GO 7404
7404: DISABLE
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
7409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7410: LD_ADDR_VAR 0 3
7414: PUSH
7415: LD_INT 81
7417: PUSH
7418: LD_OWVAR 2
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 1
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PPUSH
7441: CALL_OW 69
7445: ST_TO_ADDR
// if not tmp then
7446: LD_VAR 0 3
7450: NOT
7451: IFFALSE 7455
// exit ;
7453: GO 7602
// if tmp > 5 then
7455: LD_VAR 0 3
7459: PUSH
7460: LD_INT 5
7462: GREATER
7463: IFFALSE 7475
// k := 5 else
7465: LD_ADDR_VAR 0 2
7469: PUSH
7470: LD_INT 5
7472: ST_TO_ADDR
7473: GO 7485
// k := tmp ;
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 3
7484: ST_TO_ADDR
// for i := 1 to k do
7485: LD_ADDR_VAR 0 1
7489: PUSH
7490: DOUBLE
7491: LD_INT 1
7493: DEC
7494: ST_TO_ADDR
7495: LD_VAR 0 2
7499: PUSH
7500: FOR_TO
7501: IFFALSE 7600
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_VAR 0 1
7512: ARRAY
7513: PPUSH
7514: LD_VAR 0 1
7518: PUSH
7519: LD_INT 4
7521: MOD
7522: PUSH
7523: LD_INT 1
7525: PLUS
7526: PPUSH
7527: CALL_OW 259
7531: PUSH
7532: LD_INT 10
7534: LESS
7535: IFFALSE 7598
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7537: LD_VAR 0 3
7541: PUSH
7542: LD_VAR 0 1
7546: ARRAY
7547: PPUSH
7548: LD_VAR 0 1
7552: PUSH
7553: LD_INT 4
7555: MOD
7556: PUSH
7557: LD_INT 1
7559: PLUS
7560: PPUSH
7561: LD_VAR 0 3
7565: PUSH
7566: LD_VAR 0 1
7570: ARRAY
7571: PPUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 4
7579: MOD
7580: PUSH
7581: LD_INT 1
7583: PLUS
7584: PPUSH
7585: CALL_OW 259
7589: PUSH
7590: LD_INT 1
7592: PLUS
7593: PPUSH
7594: CALL_OW 237
7598: GO 7500
7600: POP
7601: POP
// end ;
7602: PPOPN 3
7604: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7605: LD_EXP 17
7609: PUSH
7610: LD_EXP 25
7614: AND
7615: IFFALSE 7635
7617: GO 7619
7619: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7620: LD_INT 4
7622: PPUSH
7623: LD_OWVAR 2
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: CALL_OW 324
7635: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7636: LD_EXP 17
7640: PUSH
7641: LD_EXP 54
7645: AND
7646: IFFALSE 7666
7648: GO 7650
7650: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7651: LD_INT 19
7653: PPUSH
7654: LD_OWVAR 2
7658: PPUSH
7659: LD_INT 0
7661: PPUSH
7662: CALL_OW 324
7666: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7667: LD_EXP 17
7671: PUSH
7672: LD_EXP 26
7676: AND
7677: IFFALSE 7779
7679: GO 7681
7681: DISABLE
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
// begin enable ;
7686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7687: LD_ADDR_VAR 0 2
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 34
7709: PUSH
7710: LD_INT 11
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 34
7719: PUSH
7720: LD_INT 30
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PPUSH
7736: CALL_OW 69
7740: ST_TO_ADDR
// if not tmp then
7741: LD_VAR 0 2
7745: NOT
7746: IFFALSE 7750
// exit ;
7748: GO 7779
// for i in tmp do
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: LD_VAR 0 2
7759: PUSH
7760: FOR_IN
7761: IFFALSE 7777
// begin SetLives ( i , 0 ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 0
7770: PPUSH
7771: CALL_OW 234
// end ;
7775: GO 7760
7777: POP
7778: POP
// end ;
7779: PPOPN 2
7781: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7782: LD_EXP 17
7786: PUSH
7787: LD_EXP 27
7791: AND
7792: IFFALSE 7812
7794: GO 7796
7796: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7797: LD_INT 32
7799: PPUSH
7800: LD_OWVAR 2
7804: PPUSH
7805: LD_INT 0
7807: PPUSH
7808: CALL_OW 324
7812: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7813: LD_EXP 17
7817: PUSH
7818: LD_EXP 28
7822: AND
7823: IFFALSE 8004
7825: GO 7827
7827: DISABLE
7828: LD_INT 0
7830: PPUSH
7831: PPUSH
7832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_INT 22
7840: PUSH
7841: LD_OWVAR 2
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 33
7852: PUSH
7853: LD_INT 3
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: ST_TO_ADDR
// if not tmp then
7869: LD_VAR 0 2
7873: NOT
7874: IFFALSE 7878
// exit ;
7876: GO 8004
// side := 0 ;
7878: LD_ADDR_VAR 0 3
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// for i := 1 to 8 do
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: DOUBLE
7892: LD_INT 1
7894: DEC
7895: ST_TO_ADDR
7896: LD_INT 8
7898: PUSH
7899: FOR_TO
7900: IFFALSE 7948
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7902: LD_OWVAR 2
7906: PUSH
7907: LD_VAR 0 1
7911: NONEQUAL
7912: PUSH
7913: LD_OWVAR 2
7917: PPUSH
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 81
7927: PUSH
7928: LD_INT 2
7930: EQUAL
7931: AND
7932: IFFALSE 7946
// begin side := i ;
7934: LD_ADDR_VAR 0 3
7938: PUSH
7939: LD_VAR 0 1
7943: ST_TO_ADDR
// break ;
7944: GO 7948
// end ;
7946: GO 7899
7948: POP
7949: POP
// if not side then
7950: LD_VAR 0 3
7954: NOT
7955: IFFALSE 7959
// exit ;
7957: GO 8004
// for i := 1 to tmp do
7959: LD_ADDR_VAR 0 1
7963: PUSH
7964: DOUBLE
7965: LD_INT 1
7967: DEC
7968: ST_TO_ADDR
7969: LD_VAR 0 2
7973: PUSH
7974: FOR_TO
7975: IFFALSE 8002
// if Prob ( 60 ) then
7977: LD_INT 60
7979: PPUSH
7980: CALL_OW 13
7984: IFFALSE 8000
// SetSide ( i , side ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_VAR 0 3
7995: PPUSH
7996: CALL_OW 235
8000: GO 7974
8002: POP
8003: POP
// end ;
8004: PPOPN 3
8006: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8007: LD_EXP 17
8011: PUSH
8012: LD_EXP 30
8016: AND
8017: IFFALSE 8136
8019: GO 8021
8021: DISABLE
8022: LD_INT 0
8024: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8025: LD_ADDR_VAR 0 1
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_OWVAR 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 21
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: LD_INT 23
8057: PUSH
8058: LD_INT 0
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: PPUSH
8074: CALL_OW 69
8078: PUSH
8079: FOR_IN
8080: IFFALSE 8134
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 257
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 4
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: IN
8110: IFFALSE 8132
// SetClass ( un , rand ( 1 , 4 ) ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: LD_INT 4
8122: PPUSH
8123: CALL_OW 12
8127: PPUSH
8128: CALL_OW 336
8132: GO 8079
8134: POP
8135: POP
// end ;
8136: PPOPN 1
8138: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8139: LD_EXP 17
8143: PUSH
8144: LD_EXP 29
8148: AND
8149: IFFALSE 8228
8151: GO 8153
8153: DISABLE
8154: LD_INT 0
8156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8157: LD_ADDR_VAR 0 1
8161: PUSH
8162: LD_INT 22
8164: PUSH
8165: LD_OWVAR 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 21
8176: PUSH
8177: LD_INT 3
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: ST_TO_ADDR
// if not tmp then
8193: LD_VAR 0 1
8197: NOT
8198: IFFALSE 8202
// exit ;
8200: GO 8228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8202: LD_VAR 0 1
8206: PUSH
8207: LD_INT 1
8209: PPUSH
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 12
8219: ARRAY
8220: PPUSH
8221: LD_INT 100
8223: PPUSH
8224: CALL_OW 234
// end ;
8228: PPOPN 1
8230: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8231: LD_EXP 17
8235: PUSH
8236: LD_EXP 31
8240: AND
8241: IFFALSE 8339
8243: GO 8245
8245: DISABLE
8246: LD_INT 0
8248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8249: LD_ADDR_VAR 0 1
8253: PUSH
8254: LD_INT 22
8256: PUSH
8257: LD_OWVAR 2
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 21
8268: PUSH
8269: LD_INT 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 69
8284: ST_TO_ADDR
// if not tmp then
8285: LD_VAR 0 1
8289: NOT
8290: IFFALSE 8294
// exit ;
8292: GO 8339
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8294: LD_VAR 0 1
8298: PUSH
8299: LD_INT 1
8301: PPUSH
8302: LD_VAR 0 1
8306: PPUSH
8307: CALL_OW 12
8311: ARRAY
8312: PPUSH
8313: LD_INT 1
8315: PPUSH
8316: LD_INT 4
8318: PPUSH
8319: CALL_OW 12
8323: PPUSH
8324: LD_INT 3000
8326: PPUSH
8327: LD_INT 9000
8329: PPUSH
8330: CALL_OW 12
8334: PPUSH
8335: CALL_OW 492
// end ;
8339: PPOPN 1
8341: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8342: LD_EXP 17
8346: PUSH
8347: LD_EXP 32
8351: AND
8352: IFFALSE 8372
8354: GO 8356
8356: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8357: LD_INT 1
8359: PPUSH
8360: LD_OWVAR 2
8364: PPUSH
8365: LD_INT 0
8367: PPUSH
8368: CALL_OW 324
8372: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8373: LD_EXP 17
8377: PUSH
8378: LD_EXP 33
8382: AND
8383: IFFALSE 8466
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8392: LD_ADDR_VAR 0 2
8396: PUSH
8397: LD_INT 22
8399: PUSH
8400: LD_OWVAR 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 3
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 69
8427: ST_TO_ADDR
// if not tmp then
8428: LD_VAR 0 2
8432: NOT
8433: IFFALSE 8437
// exit ;
8435: GO 8466
// for i in tmp do
8437: LD_ADDR_VAR 0 1
8441: PUSH
8442: LD_VAR 0 2
8446: PUSH
8447: FOR_IN
8448: IFFALSE 8464
// SetBLevel ( i , 10 ) ;
8450: LD_VAR 0 1
8454: PPUSH
8455: LD_INT 10
8457: PPUSH
8458: CALL_OW 241
8462: GO 8447
8464: POP
8465: POP
// end ;
8466: PPOPN 2
8468: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8469: LD_EXP 17
8473: PUSH
8474: LD_EXP 34
8478: AND
8479: IFFALSE 8590
8481: GO 8483
8483: DISABLE
8484: LD_INT 0
8486: PPUSH
8487: PPUSH
8488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8489: LD_ADDR_VAR 0 3
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_OWVAR 2
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 25
8508: PUSH
8509: LD_INT 1
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 69
8524: ST_TO_ADDR
// if not tmp then
8525: LD_VAR 0 3
8529: NOT
8530: IFFALSE 8534
// exit ;
8532: GO 8590
// un := tmp [ rand ( 1 , tmp ) ] ;
8534: LD_ADDR_VAR 0 2
8538: PUSH
8539: LD_VAR 0 3
8543: PUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: CALL_OW 12
8556: ARRAY
8557: ST_TO_ADDR
// if Crawls ( un ) then
8558: LD_VAR 0 2
8562: PPUSH
8563: CALL_OW 318
8567: IFFALSE 8578
// ComWalk ( un ) ;
8569: LD_VAR 0 2
8573: PPUSH
8574: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8578: LD_VAR 0 2
8582: PPUSH
8583: LD_INT 5
8585: PPUSH
8586: CALL_OW 336
// end ;
8590: PPOPN 3
8592: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8593: LD_EXP 17
8597: PUSH
8598: LD_EXP 35
8602: AND
8603: PUSH
8604: LD_OWVAR 67
8608: PUSH
8609: LD_INT 3
8611: LESS
8612: AND
8613: IFFALSE 8632
8615: GO 8617
8617: DISABLE
// Difficulty := Difficulty + 1 ;
8618: LD_ADDR_OWVAR 67
8622: PUSH
8623: LD_OWVAR 67
8627: PUSH
8628: LD_INT 1
8630: PLUS
8631: ST_TO_ADDR
8632: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8633: LD_EXP 17
8637: PUSH
8638: LD_EXP 36
8642: AND
8643: IFFALSE 8746
8645: GO 8647
8647: DISABLE
8648: LD_INT 0
8650: PPUSH
// begin for i := 1 to 5 do
8651: LD_ADDR_VAR 0 1
8655: PUSH
8656: DOUBLE
8657: LD_INT 1
8659: DEC
8660: ST_TO_ADDR
8661: LD_INT 5
8663: PUSH
8664: FOR_TO
8665: IFFALSE 8744
// begin uc_nation := nation_nature ;
8667: LD_ADDR_OWVAR 21
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// uc_side := 0 ;
8675: LD_ADDR_OWVAR 20
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8683: LD_ADDR_OWVAR 29
8687: PUSH
8688: LD_INT 12
8690: PUSH
8691: LD_INT 12
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: ST_TO_ADDR
// hc_agressivity := 20 ;
8698: LD_ADDR_OWVAR 35
8702: PUSH
8703: LD_INT 20
8705: ST_TO_ADDR
// hc_class := class_tiger ;
8706: LD_ADDR_OWVAR 28
8710: PUSH
8711: LD_INT 14
8713: ST_TO_ADDR
// hc_gallery :=  ;
8714: LD_ADDR_OWVAR 33
8718: PUSH
8719: LD_STRING 
8721: ST_TO_ADDR
// hc_name :=  ;
8722: LD_ADDR_OWVAR 26
8726: PUSH
8727: LD_STRING 
8729: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8730: CALL_OW 44
8734: PPUSH
8735: LD_INT 0
8737: PPUSH
8738: CALL_OW 51
// end ;
8742: GO 8664
8744: POP
8745: POP
// end ;
8746: PPOPN 1
8748: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8749: LD_EXP 17
8753: PUSH
8754: LD_EXP 37
8758: AND
8759: IFFALSE 8768
8761: GO 8763
8763: DISABLE
// StreamSibBomb ;
8764: CALL 8769 0 0
8768: END
// export function StreamSibBomb ; var i , x , y ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
// result := false ;
8775: LD_ADDR_VAR 0 1
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// for i := 1 to 16 do
8783: LD_ADDR_VAR 0 2
8787: PUSH
8788: DOUBLE
8789: LD_INT 1
8791: DEC
8792: ST_TO_ADDR
8793: LD_INT 16
8795: PUSH
8796: FOR_TO
8797: IFFALSE 8996
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: LD_INT 10
8806: PUSH
8807: LD_INT 20
8809: PUSH
8810: LD_INT 30
8812: PUSH
8813: LD_INT 40
8815: PUSH
8816: LD_INT 50
8818: PUSH
8819: LD_INT 60
8821: PUSH
8822: LD_INT 70
8824: PUSH
8825: LD_INT 80
8827: PUSH
8828: LD_INT 90
8830: PUSH
8831: LD_INT 100
8833: PUSH
8834: LD_INT 110
8836: PUSH
8837: LD_INT 120
8839: PUSH
8840: LD_INT 130
8842: PUSH
8843: LD_INT 140
8845: PUSH
8846: LD_INT 150
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 1
8868: PPUSH
8869: LD_INT 15
8871: PPUSH
8872: CALL_OW 12
8876: ARRAY
8877: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8878: LD_ADDR_VAR 0 4
8882: PUSH
8883: LD_INT 10
8885: PUSH
8886: LD_INT 20
8888: PUSH
8889: LD_INT 30
8891: PUSH
8892: LD_INT 40
8894: PUSH
8895: LD_INT 50
8897: PUSH
8898: LD_INT 60
8900: PUSH
8901: LD_INT 70
8903: PUSH
8904: LD_INT 80
8906: PUSH
8907: LD_INT 90
8909: PUSH
8910: LD_INT 100
8912: PUSH
8913: LD_INT 110
8915: PUSH
8916: LD_INT 120
8918: PUSH
8919: LD_INT 130
8921: PUSH
8922: LD_INT 140
8924: PUSH
8925: LD_INT 150
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 1
8947: PPUSH
8948: LD_INT 15
8950: PPUSH
8951: CALL_OW 12
8955: ARRAY
8956: ST_TO_ADDR
// if ValidHex ( x , y ) then
8957: LD_VAR 0 3
8961: PPUSH
8962: LD_VAR 0 4
8966: PPUSH
8967: CALL_OW 488
8971: IFFALSE 8994
// begin result := [ x , y ] ;
8973: LD_ADDR_VAR 0 1
8977: PUSH
8978: LD_VAR 0 3
8982: PUSH
8983: LD_VAR 0 4
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: ST_TO_ADDR
// break ;
8992: GO 8996
// end ; end ;
8994: GO 8796
8996: POP
8997: POP
// if result then
8998: LD_VAR 0 1
9002: IFFALSE 9062
// begin ToLua ( playSibBomb() ) ;
9004: LD_STRING playSibBomb()
9006: PPUSH
9007: CALL_OW 559
// wait ( 0 0$14 ) ;
9011: LD_INT 490
9013: PPUSH
9014: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9018: LD_VAR 0 1
9022: PUSH
9023: LD_INT 1
9025: ARRAY
9026: PPUSH
9027: LD_VAR 0 1
9031: PUSH
9032: LD_INT 2
9034: ARRAY
9035: PPUSH
9036: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9040: LD_VAR 0 1
9044: PUSH
9045: LD_INT 1
9047: ARRAY
9048: PPUSH
9049: LD_VAR 0 1
9053: PUSH
9054: LD_INT 2
9056: ARRAY
9057: PPUSH
9058: CALL_OW 429
// end ; end ;
9062: LD_VAR 0 1
9066: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9067: LD_EXP 17
9071: PUSH
9072: LD_EXP 39
9076: AND
9077: IFFALSE 9089
9079: GO 9081
9081: DISABLE
// YouLost (  ) ;
9082: LD_STRING 
9084: PPUSH
9085: CALL_OW 104
9089: END
// every 0 0$1 trigger StreamModeActive and sFog do
9090: LD_EXP 17
9094: PUSH
9095: LD_EXP 38
9099: AND
9100: IFFALSE 9114
9102: GO 9104
9104: DISABLE
// FogOff ( your_side ) ;
9105: LD_OWVAR 2
9109: PPUSH
9110: CALL_OW 344
9114: END
// every 0 0$1 trigger StreamModeActive and sSun do
9115: LD_EXP 17
9119: PUSH
9120: LD_EXP 40
9124: AND
9125: IFFALSE 9153
9127: GO 9129
9129: DISABLE
// begin solar_recharge_percent := 0 ;
9130: LD_ADDR_OWVAR 79
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9138: LD_INT 10500
9140: PPUSH
9141: CALL_OW 67
// solar_recharge_percent := 100 ;
9145: LD_ADDR_OWVAR 79
9149: PUSH
9150: LD_INT 100
9152: ST_TO_ADDR
// end ;
9153: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9154: LD_EXP 17
9158: PUSH
9159: LD_EXP 41
9163: AND
9164: IFFALSE 9403
9166: GO 9168
9168: DISABLE
9169: LD_INT 0
9171: PPUSH
9172: PPUSH
9173: PPUSH
// begin tmp := [ ] ;
9174: LD_ADDR_VAR 0 3
9178: PUSH
9179: EMPTY
9180: ST_TO_ADDR
// for i := 1 to 6 do
9181: LD_ADDR_VAR 0 1
9185: PUSH
9186: DOUBLE
9187: LD_INT 1
9189: DEC
9190: ST_TO_ADDR
9191: LD_INT 6
9193: PUSH
9194: FOR_TO
9195: IFFALSE 9300
// begin uc_nation := nation_nature ;
9197: LD_ADDR_OWVAR 21
9201: PUSH
9202: LD_INT 0
9204: ST_TO_ADDR
// uc_side := 0 ;
9205: LD_ADDR_OWVAR 20
9209: PUSH
9210: LD_INT 0
9212: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9213: LD_ADDR_OWVAR 29
9217: PUSH
9218: LD_INT 12
9220: PUSH
9221: LD_INT 12
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: ST_TO_ADDR
// hc_agressivity := 20 ;
9228: LD_ADDR_OWVAR 35
9232: PUSH
9233: LD_INT 20
9235: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9236: LD_ADDR_OWVAR 28
9240: PUSH
9241: LD_INT 17
9243: ST_TO_ADDR
// hc_gallery :=  ;
9244: LD_ADDR_OWVAR 33
9248: PUSH
9249: LD_STRING 
9251: ST_TO_ADDR
// hc_name :=  ;
9252: LD_ADDR_OWVAR 26
9256: PUSH
9257: LD_STRING 
9259: ST_TO_ADDR
// un := CreateHuman ;
9260: LD_ADDR_VAR 0 2
9264: PUSH
9265: CALL_OW 44
9269: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9270: LD_VAR 0 2
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 51
// tmp := tmp ^ un ;
9282: LD_ADDR_VAR 0 3
9286: PUSH
9287: LD_VAR 0 3
9291: PUSH
9292: LD_VAR 0 2
9296: ADD
9297: ST_TO_ADDR
// end ;
9298: GO 9194
9300: POP
9301: POP
// repeat wait ( 0 0$1 ) ;
9302: LD_INT 35
9304: PPUSH
9305: CALL_OW 67
// for un in tmp do
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: LD_VAR 0 3
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9394
// begin if IsDead ( un ) then
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 301
9331: IFFALSE 9351
// begin tmp := tmp diff un ;
9333: LD_ADDR_VAR 0 3
9337: PUSH
9338: LD_VAR 0 3
9342: PUSH
9343: LD_VAR 0 2
9347: DIFF
9348: ST_TO_ADDR
// continue ;
9349: GO 9319
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9351: LD_VAR 0 2
9355: PPUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_INT 0
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 69
9377: PPUSH
9378: LD_VAR 0 2
9382: PPUSH
9383: CALL_OW 74
9387: PPUSH
9388: CALL_OW 115
// end ;
9392: GO 9319
9394: POP
9395: POP
// until not tmp ;
9396: LD_VAR 0 3
9400: NOT
9401: IFFALSE 9302
// end ;
9403: PPOPN 3
9405: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9406: LD_EXP 17
9410: PUSH
9411: LD_EXP 42
9415: AND
9416: IFFALSE 9470
9418: GO 9420
9420: DISABLE
// begin ToLua ( displayTroll(); ) ;
9421: LD_STRING displayTroll();
9423: PPUSH
9424: CALL_OW 559
// wait ( 3 3$00 ) ;
9428: LD_INT 6300
9430: PPUSH
9431: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9435: LD_STRING hideTroll();
9437: PPUSH
9438: CALL_OW 559
// wait ( 1 1$00 ) ;
9442: LD_INT 2100
9444: PPUSH
9445: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9449: LD_STRING displayTroll();
9451: PPUSH
9452: CALL_OW 559
// wait ( 1 1$00 ) ;
9456: LD_INT 2100
9458: PPUSH
9459: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9463: LD_STRING hideTroll();
9465: PPUSH
9466: CALL_OW 559
// end ;
9470: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9471: LD_EXP 17
9475: PUSH
9476: LD_EXP 43
9480: AND
9481: IFFALSE 9544
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
// begin p := 0 ;
9489: LD_ADDR_VAR 0 1
9493: PUSH
9494: LD_INT 0
9496: ST_TO_ADDR
// repeat game_speed := 1 ;
9497: LD_ADDR_OWVAR 65
9501: PUSH
9502: LD_INT 1
9504: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9505: LD_INT 35
9507: PPUSH
9508: CALL_OW 67
// p := p + 1 ;
9512: LD_ADDR_VAR 0 1
9516: PUSH
9517: LD_VAR 0 1
9521: PUSH
9522: LD_INT 1
9524: PLUS
9525: ST_TO_ADDR
// until p >= 60 ;
9526: LD_VAR 0 1
9530: PUSH
9531: LD_INT 60
9533: GREATEREQUAL
9534: IFFALSE 9497
// game_speed := 4 ;
9536: LD_ADDR_OWVAR 65
9540: PUSH
9541: LD_INT 4
9543: ST_TO_ADDR
// end ;
9544: PPOPN 1
9546: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9547: LD_EXP 17
9551: PUSH
9552: LD_EXP 44
9556: AND
9557: IFFALSE 9703
9559: GO 9561
9561: DISABLE
9562: LD_INT 0
9564: PPUSH
9565: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 22
9573: PUSH
9574: LD_OWVAR 2
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 0
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 1
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: ST_TO_ADDR
// if not depot then
9620: LD_VAR 0 1
9624: NOT
9625: IFFALSE 9629
// exit ;
9627: GO 9703
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: LD_VAR 0 1
9638: PUSH
9639: LD_INT 1
9641: PPUSH
9642: LD_VAR 0 1
9646: PPUSH
9647: CALL_OW 12
9651: ARRAY
9652: PPUSH
9653: CALL_OW 274
9657: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9658: LD_VAR 0 2
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: LD_INT 0
9668: PPUSH
9669: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9673: LD_VAR 0 2
9677: PPUSH
9678: LD_INT 2
9680: PPUSH
9681: LD_INT 0
9683: PPUSH
9684: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9688: LD_VAR 0 2
9692: PPUSH
9693: LD_INT 3
9695: PPUSH
9696: LD_INT 0
9698: PPUSH
9699: CALL_OW 277
// end ;
9703: PPOPN 2
9705: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9706: LD_EXP 17
9710: PUSH
9711: LD_EXP 45
9715: AND
9716: IFFALSE 9813
9718: GO 9720
9720: DISABLE
9721: LD_INT 0
9723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9724: LD_ADDR_VAR 0 1
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_OWVAR 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 23
9756: PUSH
9757: LD_INT 0
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: ST_TO_ADDR
// if not tmp then
9778: LD_VAR 0 1
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 9813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9787: LD_VAR 0 1
9791: PUSH
9792: LD_INT 1
9794: PPUSH
9795: LD_VAR 0 1
9799: PPUSH
9800: CALL_OW 12
9804: ARRAY
9805: PPUSH
9806: LD_INT 200
9808: PPUSH
9809: CALL_OW 234
// end ;
9813: PPOPN 1
9815: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9816: LD_EXP 17
9820: PUSH
9821: LD_EXP 46
9825: AND
9826: IFFALSE 9905
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9834: LD_ADDR_VAR 0 1
9838: PUSH
9839: LD_INT 22
9841: PUSH
9842: LD_OWVAR 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 2
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: ST_TO_ADDR
// if not tmp then
9870: LD_VAR 0 1
9874: NOT
9875: IFFALSE 9879
// exit ;
9877: GO 9905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9879: LD_VAR 0 1
9883: PUSH
9884: LD_INT 1
9886: PPUSH
9887: LD_VAR 0 1
9891: PPUSH
9892: CALL_OW 12
9896: ARRAY
9897: PPUSH
9898: LD_INT 60
9900: PPUSH
9901: CALL_OW 234
// end ;
9905: PPOPN 1
9907: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9908: LD_EXP 17
9912: PUSH
9913: LD_EXP 47
9917: AND
9918: IFFALSE 10017
9920: GO 9922
9922: DISABLE
9923: LD_INT 0
9925: PPUSH
9926: PPUSH
// begin enable ;
9927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9928: LD_ADDR_VAR 0 1
9932: PUSH
9933: LD_INT 22
9935: PUSH
9936: LD_OWVAR 2
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 61
9947: PUSH
9948: EMPTY
9949: LIST
9950: PUSH
9951: LD_INT 33
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 69
9970: ST_TO_ADDR
// if not tmp then
9971: LD_VAR 0 1
9975: NOT
9976: IFFALSE 9980
// exit ;
9978: GO 10017
// for i in tmp do
9980: LD_ADDR_VAR 0 2
9984: PUSH
9985: LD_VAR 0 1
9989: PUSH
9990: FOR_IN
9991: IFFALSE 10015
// if IsControledBy ( i ) then
9993: LD_VAR 0 2
9997: PPUSH
9998: CALL_OW 312
10002: IFFALSE 10013
// ComUnlink ( i ) ;
10004: LD_VAR 0 2
10008: PPUSH
10009: CALL_OW 136
10013: GO 9990
10015: POP
10016: POP
// end ;
10017: PPOPN 2
10019: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10020: LD_EXP 17
10024: PUSH
10025: LD_EXP 48
10029: AND
10030: IFFALSE 10170
10032: GO 10034
10034: DISABLE
10035: LD_INT 0
10037: PPUSH
10038: PPUSH
// begin ToLua ( displayPowell(); ) ;
10039: LD_STRING displayPowell();
10041: PPUSH
10042: CALL_OW 559
// uc_side := 0 ;
10046: LD_ADDR_OWVAR 20
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// uc_nation := 2 ;
10054: LD_ADDR_OWVAR 21
10058: PUSH
10059: LD_INT 2
10061: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10062: LD_ADDR_OWVAR 37
10066: PUSH
10067: LD_INT 14
10069: ST_TO_ADDR
// vc_engine := engine_siberite ;
10070: LD_ADDR_OWVAR 39
10074: PUSH
10075: LD_INT 3
10077: ST_TO_ADDR
// vc_control := control_apeman ;
10078: LD_ADDR_OWVAR 38
10082: PUSH
10083: LD_INT 5
10085: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10086: LD_ADDR_OWVAR 40
10090: PUSH
10091: LD_INT 29
10093: ST_TO_ADDR
// un := CreateVehicle ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: CALL_OW 45
10103: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10104: LD_VAR 0 2
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10116: LD_INT 35
10118: PPUSH
10119: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10123: LD_VAR 0 2
10127: PPUSH
10128: LD_INT 22
10130: PUSH
10131: LD_OWVAR 2
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: PPUSH
10145: LD_VAR 0 2
10149: PPUSH
10150: CALL_OW 74
10154: PPUSH
10155: CALL_OW 115
// until IsDead ( un ) ;
10159: LD_VAR 0 2
10163: PPUSH
10164: CALL_OW 301
10168: IFFALSE 10116
// end ;
10170: PPOPN 2
10172: END
// every 0 0$1 trigger StreamModeActive and sStu do
10173: LD_EXP 17
10177: PUSH
10178: LD_EXP 56
10182: AND
10183: IFFALSE 10199
10185: GO 10187
10187: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10188: LD_STRING displayStucuk();
10190: PPUSH
10191: CALL_OW 559
// ResetFog ;
10195: CALL_OW 335
// end ;
10199: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10200: LD_EXP 17
10204: PUSH
10205: LD_EXP 49
10209: AND
10210: IFFALSE 10351
10212: GO 10214
10214: DISABLE
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10219: LD_ADDR_VAR 0 2
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_OWVAR 2
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PPUSH
10250: CALL_OW 69
10254: ST_TO_ADDR
// if not tmp then
10255: LD_VAR 0 2
10259: NOT
10260: IFFALSE 10264
// exit ;
10262: GO 10351
// un := tmp [ rand ( 1 , tmp ) ] ;
10264: LD_ADDR_VAR 0 1
10268: PUSH
10269: LD_VAR 0 2
10273: PUSH
10274: LD_INT 1
10276: PPUSH
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 12
10286: ARRAY
10287: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: LD_INT 0
10295: PPUSH
10296: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10300: LD_VAR 0 1
10304: PPUSH
10305: LD_OWVAR 3
10309: PUSH
10310: LD_VAR 0 1
10314: DIFF
10315: PPUSH
10316: LD_VAR 0 1
10320: PPUSH
10321: CALL_OW 74
10325: PPUSH
10326: CALL_OW 115
// wait ( 0 0$20 ) ;
10330: LD_INT 700
10332: PPUSH
10333: CALL_OW 67
// SetSide ( un , your_side ) ;
10337: LD_VAR 0 1
10341: PPUSH
10342: LD_OWVAR 2
10346: PPUSH
10347: CALL_OW 235
// end ;
10351: PPOPN 2
10353: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10354: LD_EXP 17
10358: PUSH
10359: LD_EXP 50
10363: AND
10364: IFFALSE 10470
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10372: LD_ADDR_VAR 0 1
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_OWVAR 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: LD_INT 30
10394: PUSH
10395: LD_INT 0
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: ST_TO_ADDR
// if not depot then
10426: LD_VAR 0 1
10430: NOT
10431: IFFALSE 10435
// exit ;
10433: GO 10470
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10435: LD_VAR 0 1
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: CALL_OW 250
10448: PPUSH
10449: LD_VAR 0 1
10453: PUSH
10454: LD_INT 1
10456: ARRAY
10457: PPUSH
10458: CALL_OW 251
10462: PPUSH
10463: LD_INT 70
10465: PPUSH
10466: CALL_OW 495
// end ;
10470: PPOPN 1
10472: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10473: LD_EXP 17
10477: PUSH
10478: LD_EXP 51
10482: AND
10483: IFFALSE 10694
10485: GO 10487
10487: DISABLE
10488: LD_INT 0
10490: PPUSH
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: LD_INT 22
10502: PUSH
10503: LD_OWVAR 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 21
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: ST_TO_ADDR
// if not tmp then
10531: LD_VAR 0 5
10535: NOT
10536: IFFALSE 10540
// exit ;
10538: GO 10694
// for i in tmp do
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_VAR 0 5
10549: PUSH
10550: FOR_IN
10551: IFFALSE 10692
// begin d := rand ( 0 , 5 ) ;
10553: LD_ADDR_VAR 0 4
10557: PUSH
10558: LD_INT 0
10560: PPUSH
10561: LD_INT 5
10563: PPUSH
10564: CALL_OW 12
10568: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_VAR 0 1
10578: PPUSH
10579: CALL_OW 250
10583: PPUSH
10584: LD_VAR 0 4
10588: PPUSH
10589: LD_INT 3
10591: PPUSH
10592: LD_INT 12
10594: PPUSH
10595: CALL_OW 12
10599: PPUSH
10600: CALL_OW 272
10604: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: LD_VAR 0 1
10614: PPUSH
10615: CALL_OW 251
10619: PPUSH
10620: LD_VAR 0 4
10624: PPUSH
10625: LD_INT 3
10627: PPUSH
10628: LD_INT 12
10630: PPUSH
10631: CALL_OW 12
10635: PPUSH
10636: CALL_OW 273
10640: ST_TO_ADDR
// if ValidHex ( x , y ) then
10641: LD_VAR 0 2
10645: PPUSH
10646: LD_VAR 0 3
10650: PPUSH
10651: CALL_OW 488
10655: IFFALSE 10690
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: LD_VAR 0 2
10666: PPUSH
10667: LD_VAR 0 3
10671: PPUSH
10672: LD_INT 3
10674: PPUSH
10675: LD_INT 6
10677: PPUSH
10678: CALL_OW 12
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 483
// end ;
10690: GO 10550
10692: POP
10693: POP
// end ;
10694: PPOPN 5
10696: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10697: LD_EXP 17
10701: PUSH
10702: LD_EXP 52
10706: AND
10707: IFFALSE 10801
10709: GO 10711
10711: DISABLE
10712: LD_INT 0
10714: PPUSH
10715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10716: LD_ADDR_VAR 0 2
10720: PUSH
10721: LD_INT 22
10723: PUSH
10724: LD_OWVAR 2
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 32
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 21
10745: PUSH
10746: LD_INT 2
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PPUSH
10758: CALL_OW 69
10762: ST_TO_ADDR
// if not tmp then
10763: LD_VAR 0 2
10767: NOT
10768: IFFALSE 10772
// exit ;
10770: GO 10801
// for i in tmp do
10772: LD_ADDR_VAR 0 1
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: FOR_IN
10783: IFFALSE 10799
// SetFuel ( i , 0 ) ;
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 240
10797: GO 10782
10799: POP
10800: POP
// end ;
10801: PPOPN 2
10803: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10804: LD_EXP 17
10808: PUSH
10809: LD_EXP 53
10813: AND
10814: IFFALSE 10880
10816: GO 10818
10818: DISABLE
10819: LD_INT 0
10821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10822: LD_ADDR_VAR 0 1
10826: PUSH
10827: LD_INT 22
10829: PUSH
10830: LD_OWVAR 2
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 30
10841: PUSH
10842: LD_INT 29
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: ST_TO_ADDR
// if not tmp then
10858: LD_VAR 0 1
10862: NOT
10863: IFFALSE 10867
// exit ;
10865: GO 10880
// DestroyUnit ( tmp [ 1 ] ) ;
10867: LD_VAR 0 1
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: CALL_OW 65
// end ;
10880: PPOPN 1
10882: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10883: LD_EXP 17
10887: PUSH
10888: LD_EXP 55
10892: AND
10893: IFFALSE 11022
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
// begin uc_side := 0 ;
10901: LD_ADDR_OWVAR 20
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// uc_nation := nation_arabian ;
10909: LD_ADDR_OWVAR 21
10913: PUSH
10914: LD_INT 2
10916: ST_TO_ADDR
// hc_gallery :=  ;
10917: LD_ADDR_OWVAR 33
10921: PUSH
10922: LD_STRING 
10924: ST_TO_ADDR
// hc_name :=  ;
10925: LD_ADDR_OWVAR 26
10929: PUSH
10930: LD_STRING 
10932: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10933: LD_INT 1
10935: PPUSH
10936: LD_INT 11
10938: PPUSH
10939: LD_INT 10
10941: PPUSH
10942: CALL_OW 380
// un := CreateHuman ;
10946: LD_ADDR_VAR 0 1
10950: PUSH
10951: CALL_OW 44
10955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10956: LD_VAR 0 1
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10968: LD_INT 35
10970: PPUSH
10971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: LD_INT 22
10982: PUSH
10983: LD_OWVAR 2
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PPUSH
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 74
11006: PPUSH
11007: CALL_OW 115
// until IsDead ( un ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 301
11020: IFFALSE 10968
// end ;
11022: PPOPN 1
11024: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11025: LD_EXP 17
11029: PUSH
11030: LD_EXP 57
11034: AND
11035: IFFALSE 11047
11037: GO 11039
11039: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11040: LD_STRING earthquake(getX(game), 0, 32)
11042: PPUSH
11043: CALL_OW 559
11047: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11048: LD_EXP 17
11052: PUSH
11053: LD_EXP 58
11057: AND
11058: IFFALSE 11149
11060: GO 11062
11062: DISABLE
11063: LD_INT 0
11065: PPUSH
// begin enable ;
11066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11067: LD_ADDR_VAR 0 1
11071: PUSH
11072: LD_INT 22
11074: PUSH
11075: LD_OWVAR 2
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 21
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 33
11096: PUSH
11097: LD_INT 3
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL_OW 69
11113: ST_TO_ADDR
// if not tmp then
11114: LD_VAR 0 1
11118: NOT
11119: IFFALSE 11123
// exit ;
11121: GO 11149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11123: LD_VAR 0 1
11127: PUSH
11128: LD_INT 1
11130: PPUSH
11131: LD_VAR 0 1
11135: PPUSH
11136: CALL_OW 12
11140: ARRAY
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 234
// end ;
11149: PPOPN 1
11151: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11152: LD_EXP 17
11156: PUSH
11157: LD_EXP 59
11161: AND
11162: IFFALSE 11303
11164: GO 11166
11166: DISABLE
11167: LD_INT 0
11169: PPUSH
11170: PPUSH
11171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11172: LD_ADDR_VAR 0 3
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_OWVAR 2
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 25
11191: PUSH
11192: LD_INT 1
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: ST_TO_ADDR
// if not tmp then
11208: LD_VAR 0 3
11212: NOT
11213: IFFALSE 11217
// exit ;
11215: GO 11303
// un := tmp [ rand ( 1 , tmp ) ] ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_VAR 0 3
11226: PUSH
11227: LD_INT 1
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: CALL_OW 12
11239: ARRAY
11240: ST_TO_ADDR
// if Crawls ( un ) then
11241: LD_VAR 0 2
11245: PPUSH
11246: CALL_OW 318
11250: IFFALSE 11261
// ComWalk ( un ) ;
11252: LD_VAR 0 2
11256: PPUSH
11257: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11261: LD_VAR 0 2
11265: PPUSH
11266: LD_INT 9
11268: PPUSH
11269: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11273: LD_INT 28
11275: PPUSH
11276: LD_OWVAR 2
11280: PPUSH
11281: LD_INT 2
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11288: LD_INT 29
11290: PPUSH
11291: LD_OWVAR 2
11295: PPUSH
11296: LD_INT 2
11298: PPUSH
11299: CALL_OW 322
// end ;
11303: PPOPN 3
11305: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11306: LD_EXP 17
11310: PUSH
11311: LD_EXP 60
11315: AND
11316: IFFALSE 11427
11318: GO 11320
11320: DISABLE
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
11325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: LD_INT 22
11333: PUSH
11334: LD_OWVAR 2
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: ST_TO_ADDR
// if not tmp then
11362: LD_VAR 0 3
11366: NOT
11367: IFFALSE 11371
// exit ;
11369: GO 11427
// un := tmp [ rand ( 1 , tmp ) ] ;
11371: LD_ADDR_VAR 0 2
11375: PUSH
11376: LD_VAR 0 3
11380: PUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: CALL_OW 12
11393: ARRAY
11394: ST_TO_ADDR
// if Crawls ( un ) then
11395: LD_VAR 0 2
11399: PPUSH
11400: CALL_OW 318
11404: IFFALSE 11415
// ComWalk ( un ) ;
11406: LD_VAR 0 2
11410: PPUSH
11411: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11415: LD_VAR 0 2
11419: PPUSH
11420: LD_INT 8
11422: PPUSH
11423: CALL_OW 336
// end ;
11427: PPOPN 3
11429: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11430: LD_EXP 17
11434: PUSH
11435: LD_EXP 61
11439: AND
11440: IFFALSE 11584
11442: GO 11444
11444: DISABLE
11445: LD_INT 0
11447: PPUSH
11448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11449: LD_ADDR_VAR 0 2
11453: PUSH
11454: LD_INT 22
11456: PUSH
11457: LD_OWVAR 2
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 21
11468: PUSH
11469: LD_INT 2
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 34
11481: PUSH
11482: LD_INT 12
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 34
11491: PUSH
11492: LD_INT 51
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 34
11501: PUSH
11502: LD_INT 32
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 69
11524: ST_TO_ADDR
// if not tmp then
11525: LD_VAR 0 2
11529: NOT
11530: IFFALSE 11534
// exit ;
11532: GO 11584
// for i in tmp do
11534: LD_ADDR_VAR 0 1
11538: PUSH
11539: LD_VAR 0 2
11543: PUSH
11544: FOR_IN
11545: IFFALSE 11582
// if GetCargo ( i , mat_artifact ) = 0 then
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 4
11554: PPUSH
11555: CALL_OW 289
11559: PUSH
11560: LD_INT 0
11562: EQUAL
11563: IFFALSE 11580
// SetCargo ( i , mat_siberit , 100 ) ;
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_INT 3
11572: PPUSH
11573: LD_INT 100
11575: PPUSH
11576: CALL_OW 290
11580: GO 11544
11582: POP
11583: POP
// end ;
11584: PPOPN 2
11586: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11587: LD_EXP 17
11591: PUSH
11592: LD_EXP 62
11596: AND
11597: IFFALSE 11780
11599: GO 11601
11601: DISABLE
11602: LD_INT 0
11604: PPUSH
11605: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11606: LD_ADDR_VAR 0 2
11610: PUSH
11611: LD_INT 22
11613: PUSH
11614: LD_OWVAR 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 69
11627: ST_TO_ADDR
// if not tmp then
11628: LD_VAR 0 2
11632: NOT
11633: IFFALSE 11637
// exit ;
11635: GO 11780
// for i := 1 to 2 do
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: DOUBLE
11643: LD_INT 1
11645: DEC
11646: ST_TO_ADDR
11647: LD_INT 2
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11778
// begin uc_side := your_side ;
11653: LD_ADDR_OWVAR 20
11657: PUSH
11658: LD_OWVAR 2
11662: ST_TO_ADDR
// uc_nation := nation_american ;
11663: LD_ADDR_OWVAR 21
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// vc_chassis := us_morphling ;
11671: LD_ADDR_OWVAR 37
11675: PUSH
11676: LD_INT 5
11678: ST_TO_ADDR
// vc_engine := engine_siberite ;
11679: LD_ADDR_OWVAR 39
11683: PUSH
11684: LD_INT 3
11686: ST_TO_ADDR
// vc_control := control_computer ;
11687: LD_ADDR_OWVAR 38
11691: PUSH
11692: LD_INT 3
11694: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11695: LD_ADDR_OWVAR 40
11699: PUSH
11700: LD_INT 10
11702: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: ARRAY
11711: PPUSH
11712: CALL_OW 310
11716: NOT
11717: IFFALSE 11764
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11719: CALL_OW 45
11723: PPUSH
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 1
11731: ARRAY
11732: PPUSH
11733: CALL_OW 250
11737: PPUSH
11738: LD_VAR 0 2
11742: PUSH
11743: LD_INT 1
11745: ARRAY
11746: PPUSH
11747: CALL_OW 251
11751: PPUSH
11752: LD_INT 12
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: CALL_OW 50
11762: GO 11776
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11764: CALL_OW 45
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 51
// end ;
11776: GO 11650
11778: POP
11779: POP
// end ;
11780: PPOPN 2
11782: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11783: LD_EXP 17
11787: PUSH
11788: LD_EXP 63
11792: AND
11793: IFFALSE 12015
11795: GO 11797
11797: DISABLE
11798: LD_INT 0
11800: PPUSH
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
11805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11806: LD_ADDR_VAR 0 6
11810: PUSH
11811: LD_INT 22
11813: PUSH
11814: LD_OWVAR 2
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 3
11835: PUSH
11836: LD_INT 23
11838: PUSH
11839: LD_INT 0
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// if not tmp then
11860: LD_VAR 0 6
11864: NOT
11865: IFFALSE 11869
// exit ;
11867: GO 12015
// s1 := rand ( 1 , 4 ) ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_INT 1
11876: PPUSH
11877: LD_INT 4
11879: PPUSH
11880: CALL_OW 12
11884: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11885: LD_ADDR_VAR 0 4
11889: PUSH
11890: LD_VAR 0 6
11894: PUSH
11895: LD_INT 1
11897: ARRAY
11898: PPUSH
11899: LD_VAR 0 2
11903: PPUSH
11904: CALL_OW 259
11908: ST_TO_ADDR
// if s1 = 1 then
11909: LD_VAR 0 2
11913: PUSH
11914: LD_INT 1
11916: EQUAL
11917: IFFALSE 11937
// s2 := rand ( 2 , 4 ) else
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 2
11926: PPUSH
11927: LD_INT 4
11929: PPUSH
11930: CALL_OW 12
11934: ST_TO_ADDR
11935: GO 11945
// s2 := 1 ;
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11945: LD_ADDR_VAR 0 5
11949: PUSH
11950: LD_VAR 0 6
11954: PUSH
11955: LD_INT 1
11957: ARRAY
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: CALL_OW 259
11968: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11969: LD_VAR 0 6
11973: PUSH
11974: LD_INT 1
11976: ARRAY
11977: PPUSH
11978: LD_VAR 0 2
11982: PPUSH
11983: LD_VAR 0 5
11987: PPUSH
11988: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11992: LD_VAR 0 6
11996: PUSH
11997: LD_INT 1
11999: ARRAY
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_VAR 0 4
12010: PPUSH
12011: CALL_OW 237
// end ;
12015: PPOPN 6
12017: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12018: LD_EXP 17
12022: PUSH
12023: LD_EXP 64
12027: AND
12028: IFFALSE 12107
12030: GO 12032
12032: DISABLE
12033: LD_INT 0
12035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_OWVAR 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 69
12071: ST_TO_ADDR
// if not tmp then
12072: LD_VAR 0 1
12076: NOT
12077: IFFALSE 12081
// exit ;
12079: GO 12107
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12081: LD_VAR 0 1
12085: PUSH
12086: LD_INT 1
12088: PPUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 12
12098: ARRAY
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: CALL_OW 234
// end ;
12107: PPOPN 1
12109: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12110: LD_EXP 17
12114: PUSH
12115: LD_EXP 65
12119: AND
12120: IFFALSE 12232
12122: GO 12124
12124: DISABLE
12125: LD_INT 0
12127: PPUSH
12128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12129: LD_ADDR_VAR 0 2
12133: PUSH
12134: LD_INT 22
12136: PUSH
12137: LD_OWVAR 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 2
12148: PUSH
12149: LD_INT 30
12151: PUSH
12152: LD_INT 27
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 30
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: LD_INT 28
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 69
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 2
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12232
// for i in tmp do
12203: LD_ADDR_VAR 0 1
12207: PUSH
12208: LD_VAR 0 2
12212: PUSH
12213: FOR_IN
12214: IFFALSE 12230
// SetLives ( i , 1 ) ;
12216: LD_VAR 0 1
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 234
12228: GO 12213
12230: POP
12231: POP
// end ;
12232: PPOPN 2
12234: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12235: LD_EXP 17
12239: PUSH
12240: LD_EXP 66
12244: AND
12245: IFFALSE 12519
12247: GO 12249
12249: DISABLE
12250: LD_INT 0
12252: PPUSH
12253: PPUSH
12254: PPUSH
// begin i := rand ( 1 , 7 ) ;
12255: LD_ADDR_VAR 0 1
12259: PUSH
12260: LD_INT 1
12262: PPUSH
12263: LD_INT 7
12265: PPUSH
12266: CALL_OW 12
12270: ST_TO_ADDR
// case i of 1 :
12271: LD_VAR 0 1
12275: PUSH
12276: LD_INT 1
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12294
12284: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12285: LD_STRING earthquake(getX(game), 0, 32)
12287: PPUSH
12288: CALL_OW 559
12292: GO 12519
12294: LD_INT 2
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12316
12302: POP
// begin ToLua ( displayStucuk(); ) ;
12303: LD_STRING displayStucuk();
12305: PPUSH
12306: CALL_OW 559
// ResetFog ;
12310: CALL_OW 335
// end ; 3 :
12314: GO 12519
12316: LD_INT 3
12318: DOUBLE
12319: EQUAL
12320: IFTRUE 12324
12322: GO 12428
12324: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12325: LD_ADDR_VAR 0 2
12329: PUSH
12330: LD_INT 22
12332: PUSH
12333: LD_OWVAR 2
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: ST_TO_ADDR
// if not tmp then
12361: LD_VAR 0 2
12365: NOT
12366: IFFALSE 12370
// exit ;
12368: GO 12519
// un := tmp [ rand ( 1 , tmp ) ] ;
12370: LD_ADDR_VAR 0 3
12374: PUSH
12375: LD_VAR 0 2
12379: PUSH
12380: LD_INT 1
12382: PPUSH
12383: LD_VAR 0 2
12387: PPUSH
12388: CALL_OW 12
12392: ARRAY
12393: ST_TO_ADDR
// if Crawls ( un ) then
12394: LD_VAR 0 3
12398: PPUSH
12399: CALL_OW 318
12403: IFFALSE 12414
// ComWalk ( un ) ;
12405: LD_VAR 0 3
12409: PPUSH
12410: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 8
12421: PPUSH
12422: CALL_OW 336
// end ; 4 :
12426: GO 12519
12428: LD_INT 4
12430: DOUBLE
12431: EQUAL
12432: IFTRUE 12436
12434: GO 12497
12436: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12437: LD_ADDR_VAR 0 2
12441: PUSH
12442: LD_INT 22
12444: PUSH
12445: LD_OWVAR 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 30
12456: PUSH
12457: LD_INT 29
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 69
12472: ST_TO_ADDR
// if not tmp then
12473: LD_VAR 0 2
12477: NOT
12478: IFFALSE 12482
// exit ;
12480: GO 12519
// DestroyUnit ( tmp [ 1 ] ) ;
12482: LD_VAR 0 2
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: CALL_OW 65
// end ; 5 .. 7 :
12495: GO 12519
12497: LD_INT 5
12499: DOUBLE
12500: GREATEREQUAL
12501: IFFALSE 12509
12503: LD_INT 7
12505: DOUBLE
12506: LESSEQUAL
12507: IFTRUE 12511
12509: GO 12518
12511: POP
// StreamSibBomb ; end ;
12512: CALL 8769 0 0
12516: GO 12519
12518: POP
// end ;
12519: PPOPN 3
12521: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12522: LD_EXP 17
12526: PUSH
12527: LD_EXP 67
12531: AND
12532: IFFALSE 12688
12534: GO 12536
12536: DISABLE
12537: LD_INT 0
12539: PPUSH
12540: PPUSH
12541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_INT 81
12549: PUSH
12550: LD_OWVAR 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: ST_TO_ADDR
// if not tmp then
12596: LD_VAR 0 2
12600: NOT
12601: IFFALSE 12605
// exit ;
12603: GO 12688
// p := 0 ;
12605: LD_ADDR_VAR 0 3
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12613: LD_INT 35
12615: PPUSH
12616: CALL_OW 67
// p := p + 1 ;
12620: LD_ADDR_VAR 0 3
12624: PUSH
12625: LD_VAR 0 3
12629: PUSH
12630: LD_INT 1
12632: PLUS
12633: ST_TO_ADDR
// for i in tmp do
12634: LD_ADDR_VAR 0 1
12638: PUSH
12639: LD_VAR 0 2
12643: PUSH
12644: FOR_IN
12645: IFFALSE 12676
// if GetLives ( i ) < 1000 then
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 256
12656: PUSH
12657: LD_INT 1000
12659: LESS
12660: IFFALSE 12674
// SetLives ( i , 1000 ) ;
12662: LD_VAR 0 1
12666: PPUSH
12667: LD_INT 1000
12669: PPUSH
12670: CALL_OW 234
12674: GO 12644
12676: POP
12677: POP
// until p > 20 ;
12678: LD_VAR 0 3
12682: PUSH
12683: LD_INT 20
12685: GREATER
12686: IFFALSE 12613
// end ;
12688: PPOPN 3
12690: END
// every 0 0$1 trigger StreamModeActive and sTime do
12691: LD_EXP 17
12695: PUSH
12696: LD_EXP 68
12700: AND
12701: IFFALSE 12736
12703: GO 12705
12705: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12706: LD_INT 28
12708: PPUSH
12709: LD_OWVAR 2
12713: PPUSH
12714: LD_INT 2
12716: PPUSH
12717: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12721: LD_INT 30
12723: PPUSH
12724: LD_OWVAR 2
12728: PPUSH
12729: LD_INT 2
12731: PPUSH
12732: CALL_OW 322
// end ;
12736: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12737: LD_EXP 17
12741: PUSH
12742: LD_EXP 69
12746: AND
12747: IFFALSE 12868
12749: GO 12751
12751: DISABLE
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_INT 22
12763: PUSH
12764: LD_OWVAR 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 3
12785: PUSH
12786: LD_INT 23
12788: PUSH
12789: LD_INT 0
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 69
12809: ST_TO_ADDR
// if not tmp then
12810: LD_VAR 0 2
12814: NOT
12815: IFFALSE 12819
// exit ;
12817: GO 12868
// for i in tmp do
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_VAR 0 2
12828: PUSH
12829: FOR_IN
12830: IFFALSE 12866
// begin if Crawls ( i ) then
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 318
12841: IFFALSE 12852
// ComWalk ( i ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 138
// SetClass ( i , 2 ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 2
12859: PPUSH
12860: CALL_OW 336
// end ;
12864: GO 12829
12866: POP
12867: POP
// end ;
12868: PPOPN 2
12870: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12871: LD_EXP 17
12875: PUSH
12876: LD_EXP 70
12880: AND
12881: IFFALSE 13162
12883: GO 12885
12885: DISABLE
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12891: LD_OWVAR 2
12895: PPUSH
12896: LD_INT 9
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12909: LD_INT 9
12911: PPUSH
12912: LD_OWVAR 2
12916: PPUSH
12917: CALL_OW 343
// uc_side := 9 ;
12921: LD_ADDR_OWVAR 20
12925: PUSH
12926: LD_INT 9
12928: ST_TO_ADDR
// uc_nation := 2 ;
12929: LD_ADDR_OWVAR 21
12933: PUSH
12934: LD_INT 2
12936: ST_TO_ADDR
// hc_name := Dark Warrior ;
12937: LD_ADDR_OWVAR 26
12941: PUSH
12942: LD_STRING Dark Warrior
12944: ST_TO_ADDR
// hc_gallery :=  ;
12945: LD_ADDR_OWVAR 33
12949: PUSH
12950: LD_STRING 
12952: ST_TO_ADDR
// hc_noskilllimit := true ;
12953: LD_ADDR_OWVAR 76
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12961: LD_ADDR_OWVAR 31
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: LD_INT 30
12974: PUSH
12975: LD_INT 30
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: ST_TO_ADDR
// un := CreateHuman ;
12984: LD_ADDR_VAR 0 3
12988: PUSH
12989: CALL_OW 44
12993: ST_TO_ADDR
// hc_noskilllimit := false ;
12994: LD_ADDR_OWVAR 76
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 51
// p := 0 ;
13014: LD_ADDR_VAR 0 2
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13022: LD_INT 35
13024: PPUSH
13025: CALL_OW 67
// p := p + 1 ;
13029: LD_ADDR_VAR 0 2
13033: PUSH
13034: LD_VAR 0 2
13038: PUSH
13039: LD_INT 1
13041: PLUS
13042: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13043: LD_VAR 0 3
13047: PPUSH
13048: CALL_OW 256
13052: PUSH
13053: LD_INT 1000
13055: LESS
13056: IFFALSE 13070
// SetLives ( un , 1000 ) ;
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_INT 1000
13065: PPUSH
13066: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 81
13077: PUSH
13078: LD_OWVAR 2
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 91
13089: PUSH
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 30
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: PPUSH
13112: LD_VAR 0 3
13116: PPUSH
13117: CALL_OW 74
13121: PPUSH
13122: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13126: LD_VAR 0 2
13130: PUSH
13131: LD_INT 60
13133: GREATER
13134: PUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: CALL_OW 301
13144: OR
13145: IFFALSE 13022
// if un then
13147: LD_VAR 0 3
13151: IFFALSE 13162
// RemoveUnit ( un ) ;
13153: LD_VAR 0 3
13157: PPUSH
13158: CALL_OW 64
// end ;
13162: PPOPN 3
13164: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13165: LD_INT 0
13167: PPUSH
// case cmd of 301 :
13168: LD_VAR 0 1
13172: PUSH
13173: LD_INT 301
13175: DOUBLE
13176: EQUAL
13177: IFTRUE 13181
13179: GO 13213
13181: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13182: LD_VAR 0 6
13186: PPUSH
13187: LD_VAR 0 7
13191: PPUSH
13192: LD_VAR 0 8
13196: PPUSH
13197: LD_VAR 0 4
13201: PPUSH
13202: LD_VAR 0 5
13206: PPUSH
13207: CALL 14414 0 5
13211: GO 13334
13213: LD_INT 302
13215: DOUBLE
13216: EQUAL
13217: IFTRUE 13221
13219: GO 13258
13221: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13222: LD_VAR 0 6
13226: PPUSH
13227: LD_VAR 0 7
13231: PPUSH
13232: LD_VAR 0 8
13236: PPUSH
13237: LD_VAR 0 9
13241: PPUSH
13242: LD_VAR 0 4
13246: PPUSH
13247: LD_VAR 0 5
13251: PPUSH
13252: CALL 14505 0 6
13256: GO 13334
13258: LD_INT 303
13260: DOUBLE
13261: EQUAL
13262: IFTRUE 13266
13264: GO 13303
13266: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13267: LD_VAR 0 6
13271: PPUSH
13272: LD_VAR 0 7
13276: PPUSH
13277: LD_VAR 0 8
13281: PPUSH
13282: LD_VAR 0 9
13286: PPUSH
13287: LD_VAR 0 4
13291: PPUSH
13292: LD_VAR 0 5
13296: PPUSH
13297: CALL 13339 0 6
13301: GO 13334
13303: LD_INT 304
13305: DOUBLE
13306: EQUAL
13307: IFTRUE 13311
13309: GO 13333
13311: POP
// hHackTeleport ( unit , x , y ) ; end ;
13312: LD_VAR 0 2
13316: PPUSH
13317: LD_VAR 0 4
13321: PPUSH
13322: LD_VAR 0 5
13326: PPUSH
13327: CALL 15098 0 3
13331: GO 13334
13333: POP
// end ;
13334: LD_VAR 0 12
13338: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13339: LD_INT 0
13341: PPUSH
13342: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13343: LD_VAR 0 1
13347: PUSH
13348: LD_INT 1
13350: LESS
13351: PUSH
13352: LD_VAR 0 1
13356: PUSH
13357: LD_INT 3
13359: GREATER
13360: OR
13361: PUSH
13362: LD_VAR 0 5
13366: PPUSH
13367: LD_VAR 0 6
13371: PPUSH
13372: CALL_OW 428
13376: OR
13377: IFFALSE 13381
// exit ;
13379: GO 14101
// uc_side := your_side ;
13381: LD_ADDR_OWVAR 20
13385: PUSH
13386: LD_OWVAR 2
13390: ST_TO_ADDR
// uc_nation := nation ;
13391: LD_ADDR_OWVAR 21
13395: PUSH
13396: LD_VAR 0 1
13400: ST_TO_ADDR
// bc_level = 1 ;
13401: LD_ADDR_OWVAR 43
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// case btype of 1 :
13409: LD_VAR 0 2
13413: PUSH
13414: LD_INT 1
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13433
13422: POP
// bc_type := b_depot ; 2 :
13423: LD_ADDR_OWVAR 42
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
13431: GO 14045
13433: LD_INT 2
13435: DOUBLE
13436: EQUAL
13437: IFTRUE 13441
13439: GO 13452
13441: POP
// bc_type := b_warehouse ; 3 :
13442: LD_ADDR_OWVAR 42
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
13450: GO 14045
13452: LD_INT 3
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13471
13460: POP
// bc_type := b_lab ; 4 .. 9 :
13461: LD_ADDR_OWVAR 42
13465: PUSH
13466: LD_INT 6
13468: ST_TO_ADDR
13469: GO 14045
13471: LD_INT 4
13473: DOUBLE
13474: GREATEREQUAL
13475: IFFALSE 13483
13477: LD_INT 9
13479: DOUBLE
13480: LESSEQUAL
13481: IFTRUE 13485
13483: GO 13537
13485: POP
// begin bc_type := b_lab_half ;
13486: LD_ADDR_OWVAR 42
13490: PUSH
13491: LD_INT 7
13493: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13494: LD_ADDR_OWVAR 44
13498: PUSH
13499: LD_INT 10
13501: PUSH
13502: LD_INT 11
13504: PUSH
13505: LD_INT 12
13507: PUSH
13508: LD_INT 15
13510: PUSH
13511: LD_INT 14
13513: PUSH
13514: LD_INT 13
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: PUSH
13525: LD_VAR 0 2
13529: PUSH
13530: LD_INT 3
13532: MINUS
13533: ARRAY
13534: ST_TO_ADDR
// end ; 10 .. 13 :
13535: GO 14045
13537: LD_INT 10
13539: DOUBLE
13540: GREATEREQUAL
13541: IFFALSE 13549
13543: LD_INT 13
13545: DOUBLE
13546: LESSEQUAL
13547: IFTRUE 13551
13549: GO 13628
13551: POP
// begin bc_type := b_lab_full ;
13552: LD_ADDR_OWVAR 42
13556: PUSH
13557: LD_INT 8
13559: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13560: LD_ADDR_OWVAR 44
13564: PUSH
13565: LD_INT 10
13567: PUSH
13568: LD_INT 12
13570: PUSH
13571: LD_INT 14
13573: PUSH
13574: LD_INT 13
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_VAR 0 2
13587: PUSH
13588: LD_INT 9
13590: MINUS
13591: ARRAY
13592: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13593: LD_ADDR_OWVAR 45
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 15
13603: PUSH
13604: LD_INT 12
13606: PUSH
13607: LD_INT 15
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_VAR 0 2
13620: PUSH
13621: LD_INT 9
13623: MINUS
13624: ARRAY
13625: ST_TO_ADDR
// end ; 14 :
13626: GO 14045
13628: LD_INT 14
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13647
13636: POP
// bc_type := b_workshop ; 15 :
13637: LD_ADDR_OWVAR 42
13641: PUSH
13642: LD_INT 2
13644: ST_TO_ADDR
13645: GO 14045
13647: LD_INT 15
13649: DOUBLE
13650: EQUAL
13651: IFTRUE 13655
13653: GO 13666
13655: POP
// bc_type := b_factory ; 16 :
13656: LD_ADDR_OWVAR 42
13660: PUSH
13661: LD_INT 3
13663: ST_TO_ADDR
13664: GO 14045
13666: LD_INT 16
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13685
13674: POP
// bc_type := b_ext_gun ; 17 :
13675: LD_ADDR_OWVAR 42
13679: PUSH
13680: LD_INT 17
13682: ST_TO_ADDR
13683: GO 14045
13685: LD_INT 17
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13721
13693: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13694: LD_ADDR_OWVAR 42
13698: PUSH
13699: LD_INT 19
13701: PUSH
13702: LD_INT 23
13704: PUSH
13705: LD_INT 19
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_VAR 0 1
13717: ARRAY
13718: ST_TO_ADDR
13719: GO 14045
13721: LD_INT 18
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13740
13729: POP
// bc_type := b_ext_radar ; 19 :
13730: LD_ADDR_OWVAR 42
13734: PUSH
13735: LD_INT 20
13737: ST_TO_ADDR
13738: GO 14045
13740: LD_INT 19
13742: DOUBLE
13743: EQUAL
13744: IFTRUE 13748
13746: GO 13759
13748: POP
// bc_type := b_ext_radio ; 20 :
13749: LD_ADDR_OWVAR 42
13753: PUSH
13754: LD_INT 22
13756: ST_TO_ADDR
13757: GO 14045
13759: LD_INT 20
13761: DOUBLE
13762: EQUAL
13763: IFTRUE 13767
13765: GO 13778
13767: POP
// bc_type := b_ext_siberium ; 21 :
13768: LD_ADDR_OWVAR 42
13772: PUSH
13773: LD_INT 21
13775: ST_TO_ADDR
13776: GO 14045
13778: LD_INT 21
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13786
13784: GO 13797
13786: POP
// bc_type := b_ext_computer ; 22 :
13787: LD_ADDR_OWVAR 42
13791: PUSH
13792: LD_INT 24
13794: ST_TO_ADDR
13795: GO 14045
13797: LD_INT 22
13799: DOUBLE
13800: EQUAL
13801: IFTRUE 13805
13803: GO 13816
13805: POP
// bc_type := b_ext_track ; 23 :
13806: LD_ADDR_OWVAR 42
13810: PUSH
13811: LD_INT 16
13813: ST_TO_ADDR
13814: GO 14045
13816: LD_INT 23
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13835
13824: POP
// bc_type := b_ext_laser ; 24 :
13825: LD_ADDR_OWVAR 42
13829: PUSH
13830: LD_INT 25
13832: ST_TO_ADDR
13833: GO 14045
13835: LD_INT 24
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13854
13843: POP
// bc_type := b_control_tower ; 25 :
13844: LD_ADDR_OWVAR 42
13848: PUSH
13849: LD_INT 36
13851: ST_TO_ADDR
13852: GO 14045
13854: LD_INT 25
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 13873
13862: POP
// bc_type := b_breastwork ; 26 :
13863: LD_ADDR_OWVAR 42
13867: PUSH
13868: LD_INT 31
13870: ST_TO_ADDR
13871: GO 14045
13873: LD_INT 26
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 13892
13881: POP
// bc_type := b_bunker ; 27 :
13882: LD_ADDR_OWVAR 42
13886: PUSH
13887: LD_INT 32
13889: ST_TO_ADDR
13890: GO 14045
13892: LD_INT 27
13894: DOUBLE
13895: EQUAL
13896: IFTRUE 13900
13898: GO 13911
13900: POP
// bc_type := b_turret ; 28 :
13901: LD_ADDR_OWVAR 42
13905: PUSH
13906: LD_INT 33
13908: ST_TO_ADDR
13909: GO 14045
13911: LD_INT 28
13913: DOUBLE
13914: EQUAL
13915: IFTRUE 13919
13917: GO 13930
13919: POP
// bc_type := b_armoury ; 29 :
13920: LD_ADDR_OWVAR 42
13924: PUSH
13925: LD_INT 4
13927: ST_TO_ADDR
13928: GO 14045
13930: LD_INT 29
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 13949
13938: POP
// bc_type := b_barracks ; 30 :
13939: LD_ADDR_OWVAR 42
13943: PUSH
13944: LD_INT 5
13946: ST_TO_ADDR
13947: GO 14045
13949: LD_INT 30
13951: DOUBLE
13952: EQUAL
13953: IFTRUE 13957
13955: GO 13968
13957: POP
// bc_type := b_solar_power ; 31 :
13958: LD_ADDR_OWVAR 42
13962: PUSH
13963: LD_INT 27
13965: ST_TO_ADDR
13966: GO 14045
13968: LD_INT 31
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 13987
13976: POP
// bc_type := b_oil_power ; 32 :
13977: LD_ADDR_OWVAR 42
13981: PUSH
13982: LD_INT 26
13984: ST_TO_ADDR
13985: GO 14045
13987: LD_INT 32
13989: DOUBLE
13990: EQUAL
13991: IFTRUE 13995
13993: GO 14006
13995: POP
// bc_type := b_siberite_power ; 33 :
13996: LD_ADDR_OWVAR 42
14000: PUSH
14001: LD_INT 28
14003: ST_TO_ADDR
14004: GO 14045
14006: LD_INT 33
14008: DOUBLE
14009: EQUAL
14010: IFTRUE 14014
14012: GO 14025
14014: POP
// bc_type := b_oil_mine ; 34 :
14015: LD_ADDR_OWVAR 42
14019: PUSH
14020: LD_INT 29
14022: ST_TO_ADDR
14023: GO 14045
14025: LD_INT 34
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14044
14033: POP
// bc_type := b_siberite_mine ; end ;
14034: LD_ADDR_OWVAR 42
14038: PUSH
14039: LD_INT 30
14041: ST_TO_ADDR
14042: GO 14045
14044: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14045: LD_ADDR_VAR 0 8
14049: PUSH
14050: LD_VAR 0 5
14054: PPUSH
14055: LD_VAR 0 6
14059: PPUSH
14060: LD_VAR 0 3
14064: PPUSH
14065: CALL_OW 47
14069: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14070: LD_OWVAR 42
14074: PUSH
14075: LD_INT 32
14077: PUSH
14078: LD_INT 33
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: IN
14085: IFFALSE 14101
// PlaceWeaponTurret ( b , weapon ) ;
14087: LD_VAR 0 8
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: CALL_OW 431
// end ;
14101: LD_VAR 0 7
14105: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14106: LD_INT 0
14108: PPUSH
14109: PPUSH
14110: PPUSH
14111: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14112: LD_ADDR_VAR 0 4
14116: PUSH
14117: LD_INT 22
14119: PUSH
14120: LD_OWVAR 2
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: LD_INT 0
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 30
14144: PUSH
14145: LD_INT 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PPUSH
14161: CALL_OW 69
14165: ST_TO_ADDR
// if not tmp then
14166: LD_VAR 0 4
14170: NOT
14171: IFFALSE 14175
// exit ;
14173: GO 14234
// for i in tmp do
14175: LD_ADDR_VAR 0 2
14179: PUSH
14180: LD_VAR 0 4
14184: PUSH
14185: FOR_IN
14186: IFFALSE 14232
// for j = 1 to 3 do
14188: LD_ADDR_VAR 0 3
14192: PUSH
14193: DOUBLE
14194: LD_INT 1
14196: DEC
14197: ST_TO_ADDR
14198: LD_INT 3
14200: PUSH
14201: FOR_TO
14202: IFFALSE 14228
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14204: LD_VAR 0 2
14208: PPUSH
14209: CALL_OW 274
14213: PPUSH
14214: LD_VAR 0 3
14218: PPUSH
14219: LD_INT 99999
14221: PPUSH
14222: CALL_OW 277
14226: GO 14201
14228: POP
14229: POP
14230: GO 14185
14232: POP
14233: POP
// end ;
14234: LD_VAR 0 1
14238: RET
// export function hHackSetLevel10 ; var i , j ; begin
14239: LD_INT 0
14241: PPUSH
14242: PPUSH
14243: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14244: LD_ADDR_VAR 0 2
14248: PUSH
14249: LD_INT 21
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL_OW 69
14263: PUSH
14264: FOR_IN
14265: IFFALSE 14317
// if IsSelected ( i ) then
14267: LD_VAR 0 2
14271: PPUSH
14272: CALL_OW 306
14276: IFFALSE 14315
// begin for j := 1 to 4 do
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: DOUBLE
14284: LD_INT 1
14286: DEC
14287: ST_TO_ADDR
14288: LD_INT 4
14290: PUSH
14291: FOR_TO
14292: IFFALSE 14313
// SetSkill ( i , j , 10 ) ;
14294: LD_VAR 0 2
14298: PPUSH
14299: LD_VAR 0 3
14303: PPUSH
14304: LD_INT 10
14306: PPUSH
14307: CALL_OW 237
14311: GO 14291
14313: POP
14314: POP
// end ;
14315: GO 14264
14317: POP
14318: POP
// end ;
14319: LD_VAR 0 1
14323: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14324: LD_INT 0
14326: PPUSH
14327: PPUSH
14328: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14329: LD_ADDR_VAR 0 2
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_OWVAR 2
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 21
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: FOR_IN
14366: IFFALSE 14407
// begin for j := 1 to 4 do
14368: LD_ADDR_VAR 0 3
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_INT 4
14380: PUSH
14381: FOR_TO
14382: IFFALSE 14403
// SetSkill ( i , j , 10 ) ;
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_VAR 0 3
14393: PPUSH
14394: LD_INT 10
14396: PPUSH
14397: CALL_OW 237
14401: GO 14381
14403: POP
14404: POP
// end ;
14405: GO 14365
14407: POP
14408: POP
// end ;
14409: LD_VAR 0 1
14413: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14414: LD_INT 0
14416: PPUSH
// uc_side := your_side ;
14417: LD_ADDR_OWVAR 20
14421: PUSH
14422: LD_OWVAR 2
14426: ST_TO_ADDR
// uc_nation := nation ;
14427: LD_ADDR_OWVAR 21
14431: PUSH
14432: LD_VAR 0 1
14436: ST_TO_ADDR
// InitHc ;
14437: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14441: LD_INT 0
14443: PPUSH
14444: LD_VAR 0 2
14448: PPUSH
14449: LD_VAR 0 3
14453: PPUSH
14454: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14458: LD_VAR 0 4
14462: PPUSH
14463: LD_VAR 0 5
14467: PPUSH
14468: CALL_OW 428
14472: PUSH
14473: LD_INT 0
14475: EQUAL
14476: IFFALSE 14500
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14478: CALL_OW 44
14482: PPUSH
14483: LD_VAR 0 4
14487: PPUSH
14488: LD_VAR 0 5
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 48
// end ;
14500: LD_VAR 0 6
14504: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// uc_side := your_side ;
14509: LD_ADDR_OWVAR 20
14513: PUSH
14514: LD_OWVAR 2
14518: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14519: LD_VAR 0 1
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: LD_INT 4
14535: PUSH
14536: LD_INT 5
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: IN
14546: IFFALSE 14558
// uc_nation := nation_american else
14548: LD_ADDR_OWVAR 21
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
14556: GO 14601
// if chassis in [ 11 , 12 , 13 , 14 ] then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 11
14565: PUSH
14566: LD_INT 12
14568: PUSH
14569: LD_INT 13
14571: PUSH
14572: LD_INT 14
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: IN
14581: IFFALSE 14593
// uc_nation := nation_arabian else
14583: LD_ADDR_OWVAR 21
14587: PUSH
14588: LD_INT 2
14590: ST_TO_ADDR
14591: GO 14601
// uc_nation := nation_russian ;
14593: LD_ADDR_OWVAR 21
14597: PUSH
14598: LD_INT 3
14600: ST_TO_ADDR
// vc_chassis := chassis ;
14601: LD_ADDR_OWVAR 37
14605: PUSH
14606: LD_VAR 0 1
14610: ST_TO_ADDR
// vc_engine := engine ;
14611: LD_ADDR_OWVAR 39
14615: PUSH
14616: LD_VAR 0 2
14620: ST_TO_ADDR
// vc_control := control ;
14621: LD_ADDR_OWVAR 38
14625: PUSH
14626: LD_VAR 0 3
14630: ST_TO_ADDR
// vc_weapon := weapon ;
14631: LD_ADDR_OWVAR 40
14635: PUSH
14636: LD_VAR 0 4
14640: ST_TO_ADDR
// un := CreateVehicle ;
14641: LD_ADDR_VAR 0 8
14645: PUSH
14646: CALL_OW 45
14650: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14651: LD_VAR 0 8
14655: PPUSH
14656: LD_INT 0
14658: PPUSH
14659: LD_INT 5
14661: PPUSH
14662: CALL_OW 12
14666: PPUSH
14667: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14671: LD_VAR 0 8
14675: PPUSH
14676: LD_VAR 0 5
14680: PPUSH
14681: LD_VAR 0 6
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 48
// end ;
14693: LD_VAR 0 7
14697: RET
// export hInvincible ; every 1 do
14698: GO 14700
14700: DISABLE
// hInvincible := [ ] ;
14701: LD_ADDR_EXP 71
14705: PUSH
14706: EMPTY
14707: ST_TO_ADDR
14708: END
// every 10 do var i ;
14709: GO 14711
14711: DISABLE
14712: LD_INT 0
14714: PPUSH
// begin enable ;
14715: ENABLE
// if not hInvincible then
14716: LD_EXP 71
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14769
// for i in hInvincible do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_EXP 71
14734: PUSH
14735: FOR_IN
14736: IFFALSE 14767
// if GetLives ( i ) < 1000 then
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 256
14747: PUSH
14748: LD_INT 1000
14750: LESS
14751: IFFALSE 14765
// SetLives ( i , 1000 ) ;
14753: LD_VAR 0 1
14757: PPUSH
14758: LD_INT 1000
14760: PPUSH
14761: CALL_OW 234
14765: GO 14735
14767: POP
14768: POP
// end ;
14769: PPOPN 1
14771: END
// export function hHackInvincible ; var i ; begin
14772: LD_INT 0
14774: PPUSH
14775: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14776: LD_ADDR_VAR 0 2
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 21
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 21
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: PPUSH
14809: CALL_OW 69
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14876
// if IsSelected ( i ) then
14817: LD_VAR 0 2
14821: PPUSH
14822: CALL_OW 306
14826: IFFALSE 14874
// begin if i in hInvincible then
14828: LD_VAR 0 2
14832: PUSH
14833: LD_EXP 71
14837: IN
14838: IFFALSE 14858
// hInvincible := hInvincible diff i else
14840: LD_ADDR_EXP 71
14844: PUSH
14845: LD_EXP 71
14849: PUSH
14850: LD_VAR 0 2
14854: DIFF
14855: ST_TO_ADDR
14856: GO 14874
// hInvincible := hInvincible union i ;
14858: LD_ADDR_EXP 71
14862: PUSH
14863: LD_EXP 71
14867: PUSH
14868: LD_VAR 0 2
14872: UNION
14873: ST_TO_ADDR
// end ;
14874: GO 14814
14876: POP
14877: POP
// end ;
14878: LD_VAR 0 1
14882: RET
// export function hHackInvisible ; var i , j ; begin
14883: LD_INT 0
14885: PPUSH
14886: PPUSH
14887: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: PUSH
14908: FOR_IN
14909: IFFALSE 14933
// if IsSelected ( i ) then
14911: LD_VAR 0 2
14915: PPUSH
14916: CALL_OW 306
14920: IFFALSE 14931
// ComForceInvisible ( i ) ;
14922: LD_VAR 0 2
14926: PPUSH
14927: CALL_OW 496
14931: GO 14908
14933: POP
14934: POP
// end ;
14935: LD_VAR 0 1
14939: RET
// export function hHackChangeYourSide ; begin
14940: LD_INT 0
14942: PPUSH
// if your_side = 8 then
14943: LD_OWVAR 2
14947: PUSH
14948: LD_INT 8
14950: EQUAL
14951: IFFALSE 14963
// your_side := 0 else
14953: LD_ADDR_OWVAR 2
14957: PUSH
14958: LD_INT 0
14960: ST_TO_ADDR
14961: GO 14977
// your_side := your_side + 1 ;
14963: LD_ADDR_OWVAR 2
14967: PUSH
14968: LD_OWVAR 2
14972: PUSH
14973: LD_INT 1
14975: PLUS
14976: ST_TO_ADDR
// end ;
14977: LD_VAR 0 1
14981: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
// for i in all_units do
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_OWVAR 3
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15076
// if IsSelected ( i ) then
15000: LD_VAR 0 2
15004: PPUSH
15005: CALL_OW 306
15009: IFFALSE 15074
// begin j := GetSide ( i ) ;
15011: LD_ADDR_VAR 0 3
15015: PUSH
15016: LD_VAR 0 2
15020: PPUSH
15021: CALL_OW 255
15025: ST_TO_ADDR
// if j = 8 then
15026: LD_VAR 0 3
15030: PUSH
15031: LD_INT 8
15033: EQUAL
15034: IFFALSE 15046
// j := 0 else
15036: LD_ADDR_VAR 0 3
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
15044: GO 15060
// j := j + 1 ;
15046: LD_ADDR_VAR 0 3
15050: PUSH
15051: LD_VAR 0 3
15055: PUSH
15056: LD_INT 1
15058: PLUS
15059: ST_TO_ADDR
// SetSide ( i , j ) ;
15060: LD_VAR 0 2
15064: PPUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: CALL_OW 235
// end ;
15074: GO 14997
15076: POP
15077: POP
// end ;
15078: LD_VAR 0 1
15082: RET
// export function hHackFog ; begin
15083: LD_INT 0
15085: PPUSH
// FogOff ( true ) ;
15086: LD_INT 1
15088: PPUSH
15089: CALL_OW 344
// end ;
15093: LD_VAR 0 1
15097: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15098: LD_INT 0
15100: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_INT 1
15121: PPUSH
15122: CALL_OW 483
// CenterOnXY ( x , y ) ;
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_VAR 0 3
15135: PPUSH
15136: CALL_OW 84
// end ; end_of_file
15140: LD_VAR 0 4
15144: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 200
15152: DOUBLE
15153: GREATEREQUAL
15154: IFFALSE 15162
15156: LD_INT 299
15158: DOUBLE
15159: LESSEQUAL
15160: IFTRUE 15164
15162: GO 15196
15164: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15165: LD_VAR 0 1
15169: PPUSH
15170: LD_VAR 0 2
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_VAR 0 4
15184: PPUSH
15185: LD_VAR 0 5
15189: PPUSH
15190: CALL 15390 0 5
15194: GO 15273
15196: LD_INT 300
15198: DOUBLE
15199: GREATEREQUAL
15200: IFFALSE 15208
15202: LD_INT 399
15204: DOUBLE
15205: LESSEQUAL
15206: IFTRUE 15210
15208: GO 15272
15210: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15211: LD_VAR 0 1
15215: PPUSH
15216: LD_VAR 0 2
15220: PPUSH
15221: LD_VAR 0 3
15225: PPUSH
15226: LD_VAR 0 4
15230: PPUSH
15231: LD_VAR 0 5
15235: PPUSH
15236: LD_VAR 0 6
15240: PPUSH
15241: LD_VAR 0 7
15245: PPUSH
15246: LD_VAR 0 8
15250: PPUSH
15251: LD_VAR 0 9
15255: PPUSH
15256: LD_VAR 0 10
15260: PPUSH
15261: LD_VAR 0 11
15265: PPUSH
15266: CALL 13165 0 11
15270: GO 15273
15272: POP
// end ; end_of_file
15273: PPOPN 11
15275: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15276: LD_INT 0
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 264
15291: PUSH
15292: LD_EXP 5
15296: EQUAL
15297: IFFALSE 15369
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15299: LD_INT 68
15301: PPUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 255
15311: PPUSH
15312: CALL_OW 321
15316: PUSH
15317: LD_INT 2
15319: EQUAL
15320: IFFALSE 15332
// eff := 70 else
15322: LD_ADDR_VAR 0 4
15326: PUSH
15327: LD_INT 70
15329: ST_TO_ADDR
15330: GO 15340
// eff := 30 ;
15332: LD_ADDR_VAR 0 4
15336: PUSH
15337: LD_INT 30
15339: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15340: LD_VAR 0 1
15344: PPUSH
15345: CALL_OW 250
15349: PPUSH
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 251
15359: PPUSH
15360: LD_VAR 0 4
15364: PPUSH
15365: CALL_OW 495
// end ; end ;
15369: LD_VAR 0 2
15373: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15374: LD_INT 0
15376: PPUSH
// end ;
15377: LD_VAR 0 4
15381: RET
// export function SOS_Command ( cmd ) ; begin
15382: LD_INT 0
15384: PPUSH
// end ;
15385: LD_VAR 0 2
15389: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15390: LD_INT 0
15392: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15393: LD_VAR 0 1
15397: PUSH
15398: LD_INT 250
15400: EQUAL
15401: PUSH
15402: LD_VAR 0 2
15406: PPUSH
15407: CALL_OW 264
15411: PUSH
15412: LD_EXP 8
15416: EQUAL
15417: AND
15418: IFFALSE 15439
// MinerPlaceMine ( unit , x , y ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: LD_VAR 0 4
15429: PPUSH
15430: LD_VAR 0 5
15434: PPUSH
15435: CALL 17780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15439: LD_VAR 0 1
15443: PUSH
15444: LD_INT 251
15446: EQUAL
15447: PUSH
15448: LD_VAR 0 2
15452: PPUSH
15453: CALL_OW 264
15457: PUSH
15458: LD_EXP 8
15462: EQUAL
15463: AND
15464: IFFALSE 15485
// MinerDetonateMine ( unit , x , y ) ;
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_VAR 0 4
15475: PPUSH
15476: LD_VAR 0 5
15480: PPUSH
15481: CALL 18057 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15485: LD_VAR 0 1
15489: PUSH
15490: LD_INT 252
15492: EQUAL
15493: PUSH
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 264
15503: PUSH
15504: LD_EXP 8
15508: EQUAL
15509: AND
15510: IFFALSE 15531
// MinerCreateMinefield ( unit , x , y ) ;
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 4
15521: PPUSH
15522: LD_VAR 0 5
15526: PPUSH
15527: CALL 18474 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 253
15538: EQUAL
15539: PUSH
15540: LD_VAR 0 2
15544: PPUSH
15545: CALL_OW 257
15549: PUSH
15550: LD_INT 5
15552: EQUAL
15553: AND
15554: IFFALSE 15575
// ComBinocular ( unit , x , y ) ;
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: LD_VAR 0 5
15570: PPUSH
15571: CALL 18845 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15575: LD_VAR 0 1
15579: PUSH
15580: LD_INT 254
15582: EQUAL
15583: PUSH
15584: LD_VAR 0 2
15588: PPUSH
15589: CALL_OW 264
15593: PUSH
15594: LD_EXP 3
15598: EQUAL
15599: AND
15600: PUSH
15601: LD_VAR 0 3
15605: PPUSH
15606: CALL_OW 263
15610: PUSH
15611: LD_INT 3
15613: EQUAL
15614: AND
15615: IFFALSE 15631
// HackDestroyVehicle ( unit , selectedUnit ) ;
15617: LD_VAR 0 2
15621: PPUSH
15622: LD_VAR 0 3
15626: PPUSH
15627: CALL 17140 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15631: LD_VAR 0 1
15635: PUSH
15636: LD_INT 255
15638: EQUAL
15639: PUSH
15640: LD_VAR 0 2
15644: PPUSH
15645: CALL_OW 264
15649: PUSH
15650: LD_INT 14
15652: PUSH
15653: LD_INT 53
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: IN
15660: AND
15661: PUSH
15662: LD_VAR 0 4
15666: PPUSH
15667: LD_VAR 0 5
15671: PPUSH
15672: CALL_OW 488
15676: AND
15677: IFFALSE 15701
// CutTreeXYR ( unit , x , y , 12 ) ;
15679: LD_VAR 0 2
15683: PPUSH
15684: LD_VAR 0 4
15688: PPUSH
15689: LD_VAR 0 5
15693: PPUSH
15694: LD_INT 12
15696: PPUSH
15697: CALL 15706 0 4
// end ;
15701: LD_VAR 0 6
15705: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
15715: PPUSH
15716: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15717: LD_VAR 0 1
15721: NOT
15722: PUSH
15723: LD_VAR 0 2
15727: PPUSH
15728: LD_VAR 0 3
15732: PPUSH
15733: CALL_OW 488
15737: NOT
15738: OR
15739: PUSH
15740: LD_VAR 0 4
15744: NOT
15745: OR
15746: IFFALSE 15750
// exit ;
15748: GO 16090
// list := [ ] ;
15750: LD_ADDR_VAR 0 13
15754: PUSH
15755: EMPTY
15756: ST_TO_ADDR
// if x - r < 0 then
15757: LD_VAR 0 2
15761: PUSH
15762: LD_VAR 0 4
15766: MINUS
15767: PUSH
15768: LD_INT 0
15770: LESS
15771: IFFALSE 15783
// min_x := 0 else
15773: LD_ADDR_VAR 0 7
15777: PUSH
15778: LD_INT 0
15780: ST_TO_ADDR
15781: GO 15799
// min_x := x - r ;
15783: LD_ADDR_VAR 0 7
15787: PUSH
15788: LD_VAR 0 2
15792: PUSH
15793: LD_VAR 0 4
15797: MINUS
15798: ST_TO_ADDR
// if y - r < 0 then
15799: LD_VAR 0 3
15803: PUSH
15804: LD_VAR 0 4
15808: MINUS
15809: PUSH
15810: LD_INT 0
15812: LESS
15813: IFFALSE 15825
// min_y := 0 else
15815: LD_ADDR_VAR 0 8
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
15823: GO 15841
// min_y := y - r ;
15825: LD_ADDR_VAR 0 8
15829: PUSH
15830: LD_VAR 0 3
15834: PUSH
15835: LD_VAR 0 4
15839: MINUS
15840: ST_TO_ADDR
// max_x := x + r ;
15841: LD_ADDR_VAR 0 9
15845: PUSH
15846: LD_VAR 0 2
15850: PUSH
15851: LD_VAR 0 4
15855: PLUS
15856: ST_TO_ADDR
// max_y := y + r ;
15857: LD_ADDR_VAR 0 10
15861: PUSH
15862: LD_VAR 0 3
15866: PUSH
15867: LD_VAR 0 4
15871: PLUS
15872: ST_TO_ADDR
// for _x = min_x to max_x do
15873: LD_ADDR_VAR 0 11
15877: PUSH
15878: DOUBLE
15879: LD_VAR 0 7
15883: DEC
15884: ST_TO_ADDR
15885: LD_VAR 0 9
15889: PUSH
15890: FOR_TO
15891: IFFALSE 16008
// for _y = min_y to max_y do
15893: LD_ADDR_VAR 0 12
15897: PUSH
15898: DOUBLE
15899: LD_VAR 0 8
15903: DEC
15904: ST_TO_ADDR
15905: LD_VAR 0 10
15909: PUSH
15910: FOR_TO
15911: IFFALSE 16004
// begin if not ValidHex ( _x , _y ) then
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 12
15922: PPUSH
15923: CALL_OW 488
15927: NOT
15928: IFFALSE 15932
// continue ;
15930: GO 15910
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15932: LD_VAR 0 11
15936: PPUSH
15937: LD_VAR 0 12
15941: PPUSH
15942: CALL_OW 351
15946: PUSH
15947: LD_VAR 0 11
15951: PPUSH
15952: LD_VAR 0 12
15956: PPUSH
15957: CALL_OW 554
15961: AND
15962: IFFALSE 16002
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15964: LD_ADDR_VAR 0 13
15968: PUSH
15969: LD_VAR 0 13
15973: PPUSH
15974: LD_VAR 0 13
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: PPUSH
15983: LD_VAR 0 11
15987: PUSH
15988: LD_VAR 0 12
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 2
16001: ST_TO_ADDR
// end ;
16002: GO 15910
16004: POP
16005: POP
16006: GO 15890
16008: POP
16009: POP
// if not list then
16010: LD_VAR 0 13
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16090
// for i in list do
16019: LD_ADDR_VAR 0 6
16023: PUSH
16024: LD_VAR 0 13
16028: PUSH
16029: FOR_IN
16030: IFFALSE 16088
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: LD_STRING M
16039: PUSH
16040: LD_VAR 0 6
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PUSH
16049: LD_VAR 0 6
16053: PUSH
16054: LD_INT 2
16056: ARRAY
16057: PUSH
16058: LD_INT 0
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: LD_INT 0
16066: PUSH
16067: LD_INT 0
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: PPUSH
16082: CALL_OW 447
16086: GO 16029
16088: POP
16089: POP
// end ;
16090: LD_VAR 0 5
16094: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16095: LD_EXP 72
16099: NOT
16100: IFFALSE 16150
16102: GO 16104
16104: DISABLE
// begin initHack := true ;
16105: LD_ADDR_EXP 72
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// hackTanks := [ ] ;
16113: LD_ADDR_EXP 73
16117: PUSH
16118: EMPTY
16119: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16120: LD_ADDR_EXP 74
16124: PUSH
16125: EMPTY
16126: ST_TO_ADDR
// hackLimit := 3 ;
16127: LD_ADDR_EXP 75
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// hackDist := 12 ;
16135: LD_ADDR_EXP 76
16139: PUSH
16140: LD_INT 12
16142: ST_TO_ADDR
// hackCounter := [ ] ;
16143: LD_ADDR_EXP 77
16147: PUSH
16148: EMPTY
16149: ST_TO_ADDR
// end ;
16150: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16151: LD_EXP 72
16155: PUSH
16156: LD_INT 34
16158: PUSH
16159: LD_EXP 3
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 69
16172: AND
16173: IFFALSE 16428
16175: GO 16177
16177: DISABLE
16178: LD_INT 0
16180: PPUSH
16181: PPUSH
// begin enable ;
16182: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16183: LD_ADDR_VAR 0 1
16187: PUSH
16188: LD_INT 34
16190: PUSH
16191: LD_EXP 3
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: PUSH
16205: FOR_IN
16206: IFFALSE 16426
// begin if not i in hackTanks then
16208: LD_VAR 0 1
16212: PUSH
16213: LD_EXP 73
16217: IN
16218: NOT
16219: IFFALSE 16302
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16221: LD_ADDR_EXP 73
16225: PUSH
16226: LD_EXP 73
16230: PPUSH
16231: LD_EXP 73
16235: PUSH
16236: LD_INT 1
16238: PLUS
16239: PPUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 1
16249: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16250: LD_ADDR_EXP 74
16254: PUSH
16255: LD_EXP 74
16259: PPUSH
16260: LD_EXP 74
16264: PUSH
16265: LD_INT 1
16267: PLUS
16268: PPUSH
16269: EMPTY
16270: PPUSH
16271: CALL_OW 1
16275: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16276: LD_ADDR_EXP 77
16280: PUSH
16281: LD_EXP 77
16285: PPUSH
16286: LD_EXP 77
16290: PUSH
16291: LD_INT 1
16293: PLUS
16294: PPUSH
16295: EMPTY
16296: PPUSH
16297: CALL_OW 1
16301: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 302
16311: NOT
16312: IFFALSE 16325
// begin HackUnlinkAll ( i ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL 16431 0 1
// continue ;
16323: GO 16205
// end ; HackCheckCapturedStatus ( i ) ;
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL 16874 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16334: LD_ADDR_VAR 0 2
16338: PUSH
16339: LD_INT 81
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 33
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 91
16368: PUSH
16369: LD_VAR 0 1
16373: PUSH
16374: LD_EXP 76
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 50
16386: PUSH
16387: EMPTY
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: ST_TO_ADDR
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// continue ;
16408: GO 16205
// HackLink ( i , tmp ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_VAR 0 2
16419: PPUSH
16420: CALL 16567 0 2
// end ;
16424: GO 16205
16426: POP
16427: POP
// end ;
16428: PPOPN 2
16430: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
// if not hack in hackTanks then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_EXP 73
16445: IN
16446: NOT
16447: IFFALSE 16451
// exit ;
16449: GO 16562
// index := GetElementIndex ( hackTanks , hack ) ;
16451: LD_ADDR_VAR 0 4
16455: PUSH
16456: LD_EXP 73
16460: PPUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL 23996 0 2
16470: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16471: LD_EXP 74
16475: PUSH
16476: LD_VAR 0 4
16480: ARRAY
16481: IFFALSE 16562
// begin for i in hackTanksCaptured [ index ] do
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_EXP 74
16492: PUSH
16493: LD_VAR 0 4
16497: ARRAY
16498: PUSH
16499: FOR_IN
16500: IFFALSE 16526
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16502: LD_VAR 0 3
16506: PUSH
16507: LD_INT 1
16509: ARRAY
16510: PPUSH
16511: LD_VAR 0 3
16515: PUSH
16516: LD_INT 2
16518: ARRAY
16519: PPUSH
16520: CALL_OW 235
16524: GO 16499
16526: POP
16527: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16528: LD_ADDR_EXP 74
16532: PUSH
16533: LD_EXP 74
16537: PPUSH
16538: LD_VAR 0 4
16542: PPUSH
16543: EMPTY
16544: PPUSH
16545: CALL_OW 1
16549: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16550: LD_VAR 0 1
16554: PPUSH
16555: LD_INT 0
16557: PPUSH
16558: CALL_OW 505
// end ; end ;
16562: LD_VAR 0 2
16566: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16567: LD_INT 0
16569: PPUSH
16570: PPUSH
16571: PPUSH
// if not hack in hackTanks or not vehicles then
16572: LD_VAR 0 1
16576: PUSH
16577: LD_EXP 73
16581: IN
16582: NOT
16583: PUSH
16584: LD_VAR 0 2
16588: NOT
16589: OR
16590: IFFALSE 16594
// exit ;
16592: GO 16869
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: LD_INT 1
16614: PPUSH
16615: CALL 24646 0 4
16619: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16620: LD_ADDR_VAR 0 5
16624: PUSH
16625: LD_EXP 73
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL 23996 0 2
16639: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16640: LD_EXP 74
16644: PUSH
16645: LD_VAR 0 5
16649: ARRAY
16650: PUSH
16651: LD_EXP 75
16655: LESS
16656: IFFALSE 16845
// begin for i := 1 to vehicles do
16658: LD_ADDR_VAR 0 4
16662: PUSH
16663: DOUBLE
16664: LD_INT 1
16666: DEC
16667: ST_TO_ADDR
16668: LD_VAR 0 2
16672: PUSH
16673: FOR_TO
16674: IFFALSE 16843
// begin if hackTanksCaptured [ index ] = hackLimit then
16676: LD_EXP 74
16680: PUSH
16681: LD_VAR 0 5
16685: ARRAY
16686: PUSH
16687: LD_EXP 75
16691: EQUAL
16692: IFFALSE 16696
// break ;
16694: GO 16843
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16696: LD_ADDR_EXP 77
16700: PUSH
16701: LD_EXP 77
16705: PPUSH
16706: LD_VAR 0 5
16710: PPUSH
16711: LD_EXP 77
16715: PUSH
16716: LD_VAR 0 5
16720: ARRAY
16721: PUSH
16722: LD_INT 1
16724: PLUS
16725: PPUSH
16726: CALL_OW 1
16730: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16731: LD_ADDR_EXP 74
16735: PUSH
16736: LD_EXP 74
16740: PPUSH
16741: LD_VAR 0 5
16745: PUSH
16746: LD_EXP 74
16750: PUSH
16751: LD_VAR 0 5
16755: ARRAY
16756: PUSH
16757: LD_INT 1
16759: PLUS
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PPUSH
16765: LD_VAR 0 2
16769: PUSH
16770: LD_VAR 0 4
16774: ARRAY
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_VAR 0 4
16785: ARRAY
16786: PPUSH
16787: CALL_OW 255
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PPUSH
16796: CALL 24211 0 3
16800: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16801: LD_VAR 0 2
16805: PUSH
16806: LD_VAR 0 4
16810: ARRAY
16811: PPUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 255
16821: PPUSH
16822: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16826: LD_VAR 0 2
16830: PUSH
16831: LD_VAR 0 4
16835: ARRAY
16836: PPUSH
16837: CALL_OW 141
// end ;
16841: GO 16673
16843: POP
16844: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_EXP 74
16854: PUSH
16855: LD_VAR 0 5
16859: ARRAY
16860: PUSH
16861: LD_INT 0
16863: PLUS
16864: PPUSH
16865: CALL_OW 505
// end ;
16869: LD_VAR 0 3
16873: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
// if not hack in hackTanks then
16880: LD_VAR 0 1
16884: PUSH
16885: LD_EXP 73
16889: IN
16890: NOT
16891: IFFALSE 16895
// exit ;
16893: GO 17135
// index := GetElementIndex ( hackTanks , hack ) ;
16895: LD_ADDR_VAR 0 4
16899: PUSH
16900: LD_EXP 73
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL 23996 0 2
16914: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: DOUBLE
16921: LD_EXP 74
16925: PUSH
16926: LD_VAR 0 4
16930: ARRAY
16931: INC
16932: ST_TO_ADDR
16933: LD_INT 1
16935: PUSH
16936: FOR_DOWNTO
16937: IFFALSE 17109
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16939: LD_ADDR_VAR 0 5
16943: PUSH
16944: LD_EXP 74
16948: PUSH
16949: LD_VAR 0 4
16953: ARRAY
16954: PUSH
16955: LD_VAR 0 3
16959: ARRAY
16960: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16961: LD_VAR 0 5
16965: PUSH
16966: LD_INT 1
16968: ARRAY
16969: PPUSH
16970: CALL_OW 302
16974: NOT
16975: PUSH
16976: LD_VAR 0 5
16980: PUSH
16981: LD_INT 1
16983: ARRAY
16984: PPUSH
16985: CALL_OW 255
16989: PUSH
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 255
16999: NONEQUAL
17000: OR
17001: IFFALSE 17107
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17003: LD_VAR 0 5
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: PPUSH
17012: CALL_OW 305
17016: PUSH
17017: LD_VAR 0 5
17021: PUSH
17022: LD_INT 1
17024: ARRAY
17025: PPUSH
17026: CALL_OW 255
17030: PUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 255
17040: EQUAL
17041: AND
17042: IFFALSE 17066
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17044: LD_VAR 0 5
17048: PUSH
17049: LD_INT 1
17051: ARRAY
17052: PPUSH
17053: LD_VAR 0 5
17057: PUSH
17058: LD_INT 2
17060: ARRAY
17061: PPUSH
17062: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17066: LD_ADDR_EXP 74
17070: PUSH
17071: LD_EXP 74
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: LD_EXP 74
17085: PUSH
17086: LD_VAR 0 4
17090: ARRAY
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: CALL_OW 3
17101: PPUSH
17102: CALL_OW 1
17106: ST_TO_ADDR
// end ; end ;
17107: GO 16936
17109: POP
17110: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17111: LD_VAR 0 1
17115: PPUSH
17116: LD_EXP 74
17120: PUSH
17121: LD_VAR 0 4
17125: ARRAY
17126: PUSH
17127: LD_INT 0
17129: PLUS
17130: PPUSH
17131: CALL_OW 505
// end ;
17135: LD_VAR 0 2
17139: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
// if not hack in hackTanks then
17146: LD_VAR 0 1
17150: PUSH
17151: LD_EXP 73
17155: IN
17156: NOT
17157: IFFALSE 17161
// exit ;
17159: GO 17246
// index := GetElementIndex ( hackTanks , hack ) ;
17161: LD_ADDR_VAR 0 5
17165: PUSH
17166: LD_EXP 73
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL 23996 0 2
17180: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: DOUBLE
17187: LD_INT 1
17189: DEC
17190: ST_TO_ADDR
17191: LD_EXP 74
17195: PUSH
17196: LD_VAR 0 5
17200: ARRAY
17201: PUSH
17202: FOR_TO
17203: IFFALSE 17244
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17205: LD_EXP 74
17209: PUSH
17210: LD_VAR 0 5
17214: ARRAY
17215: PUSH
17216: LD_VAR 0 4
17220: ARRAY
17221: PUSH
17222: LD_INT 1
17224: ARRAY
17225: PUSH
17226: LD_VAR 0 2
17230: EQUAL
17231: IFFALSE 17242
// KillUnit ( vehicle ) ;
17233: LD_VAR 0 2
17237: PPUSH
17238: CALL_OW 66
17242: GO 17202
17244: POP
17245: POP
// end ;
17246: LD_VAR 0 3
17250: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17251: LD_EXP 78
17255: NOT
17256: IFFALSE 17291
17258: GO 17260
17260: DISABLE
// begin initMiner := true ;
17261: LD_ADDR_EXP 78
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// minersList := [ ] ;
17269: LD_ADDR_EXP 79
17273: PUSH
17274: EMPTY
17275: ST_TO_ADDR
// minerMinesList := [ ] ;
17276: LD_ADDR_EXP 80
17280: PUSH
17281: EMPTY
17282: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17283: LD_ADDR_EXP 81
17287: PUSH
17288: LD_INT 5
17290: ST_TO_ADDR
// end ;
17291: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17292: LD_EXP 78
17296: PUSH
17297: LD_INT 34
17299: PUSH
17300: LD_EXP 8
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: AND
17314: IFFALSE 17777
17316: GO 17318
17318: DISABLE
17319: LD_INT 0
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
// begin enable ;
17325: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17326: LD_ADDR_VAR 0 1
17330: PUSH
17331: LD_INT 34
17333: PUSH
17334: LD_EXP 8
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PPUSH
17343: CALL_OW 69
17347: PUSH
17348: FOR_IN
17349: IFFALSE 17421
// begin if not i in minersList then
17351: LD_VAR 0 1
17355: PUSH
17356: LD_EXP 79
17360: IN
17361: NOT
17362: IFFALSE 17419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17364: LD_ADDR_EXP 79
17368: PUSH
17369: LD_EXP 79
17373: PPUSH
17374: LD_EXP 79
17378: PUSH
17379: LD_INT 1
17381: PLUS
17382: PPUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 1
17392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17393: LD_ADDR_EXP 80
17397: PUSH
17398: LD_EXP 80
17402: PPUSH
17403: LD_EXP 80
17407: PUSH
17408: LD_INT 1
17410: PLUS
17411: PPUSH
17412: EMPTY
17413: PPUSH
17414: CALL_OW 1
17418: ST_TO_ADDR
// end end ;
17419: GO 17348
17421: POP
17422: POP
// for i := minerMinesList downto 1 do
17423: LD_ADDR_VAR 0 1
17427: PUSH
17428: DOUBLE
17429: LD_EXP 80
17433: INC
17434: ST_TO_ADDR
17435: LD_INT 1
17437: PUSH
17438: FOR_DOWNTO
17439: IFFALSE 17775
// begin if IsLive ( minersList [ i ] ) then
17441: LD_EXP 79
17445: PUSH
17446: LD_VAR 0 1
17450: ARRAY
17451: PPUSH
17452: CALL_OW 300
17456: IFFALSE 17484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17458: LD_EXP 79
17462: PUSH
17463: LD_VAR 0 1
17467: ARRAY
17468: PPUSH
17469: LD_EXP 80
17473: PUSH
17474: LD_VAR 0 1
17478: ARRAY
17479: PPUSH
17480: CALL_OW 505
// if not minerMinesList [ i ] then
17484: LD_EXP 80
17488: PUSH
17489: LD_VAR 0 1
17493: ARRAY
17494: NOT
17495: IFFALSE 17499
// continue ;
17497: GO 17438
// for j := minerMinesList [ i ] downto 1 do
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: DOUBLE
17505: LD_EXP 80
17509: PUSH
17510: LD_VAR 0 1
17514: ARRAY
17515: INC
17516: ST_TO_ADDR
17517: LD_INT 1
17519: PUSH
17520: FOR_DOWNTO
17521: IFFALSE 17771
// begin side := GetSide ( minersList [ i ] ) ;
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: LD_EXP 79
17532: PUSH
17533: LD_VAR 0 1
17537: ARRAY
17538: PPUSH
17539: CALL_OW 255
17543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17544: LD_ADDR_VAR 0 4
17548: PUSH
17549: LD_EXP 80
17553: PUSH
17554: LD_VAR 0 1
17558: ARRAY
17559: PUSH
17560: LD_VAR 0 2
17564: ARRAY
17565: PUSH
17566: LD_INT 1
17568: ARRAY
17569: PPUSH
17570: LD_EXP 80
17574: PUSH
17575: LD_VAR 0 1
17579: ARRAY
17580: PUSH
17581: LD_VAR 0 2
17585: ARRAY
17586: PUSH
17587: LD_INT 2
17589: ARRAY
17590: PPUSH
17591: CALL_OW 428
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 4
17600: NOT
17601: IFFALSE 17605
// continue ;
17603: GO 17520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17605: LD_VAR 0 4
17609: PUSH
17610: LD_INT 81
17612: PUSH
17613: LD_VAR 0 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PPUSH
17622: CALL_OW 69
17626: IN
17627: PUSH
17628: LD_EXP 80
17632: PUSH
17633: LD_VAR 0 1
17637: ARRAY
17638: PUSH
17639: LD_VAR 0 2
17643: ARRAY
17644: PUSH
17645: LD_INT 1
17647: ARRAY
17648: PPUSH
17649: LD_EXP 80
17653: PUSH
17654: LD_VAR 0 1
17658: ARRAY
17659: PUSH
17660: LD_VAR 0 2
17664: ARRAY
17665: PUSH
17666: LD_INT 2
17668: ARRAY
17669: PPUSH
17670: CALL_OW 458
17674: AND
17675: IFFALSE 17769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17677: LD_EXP 80
17681: PUSH
17682: LD_VAR 0 1
17686: ARRAY
17687: PUSH
17688: LD_VAR 0 2
17692: ARRAY
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PPUSH
17698: LD_EXP 80
17702: PUSH
17703: LD_VAR 0 1
17707: ARRAY
17708: PUSH
17709: LD_VAR 0 2
17713: ARRAY
17714: PUSH
17715: LD_INT 2
17717: ARRAY
17718: PPUSH
17719: LD_VAR 0 3
17723: PPUSH
17724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17728: LD_ADDR_EXP 80
17732: PUSH
17733: LD_EXP 80
17737: PPUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_EXP 80
17747: PUSH
17748: LD_VAR 0 1
17752: ARRAY
17753: PPUSH
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 3
17763: PPUSH
17764: CALL_OW 1
17768: ST_TO_ADDR
// end ; end ;
17769: GO 17520
17771: POP
17772: POP
// end ;
17773: GO 17438
17775: POP
17776: POP
// end ;
17777: PPOPN 4
17779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17780: LD_INT 0
17782: PPUSH
17783: PPUSH
// result := false ;
17784: LD_ADDR_VAR 0 4
17788: PUSH
17789: LD_INT 0
17791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 264
17801: PUSH
17802: LD_EXP 8
17806: EQUAL
17807: NOT
17808: IFFALSE 17812
// exit ;
17810: GO 18052
// index := GetElementIndex ( minersList , unit ) ;
17812: LD_ADDR_VAR 0 5
17816: PUSH
17817: LD_EXP 79
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL 23996 0 2
17831: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17832: LD_EXP 80
17836: PUSH
17837: LD_VAR 0 5
17841: ARRAY
17842: PUSH
17843: LD_EXP 81
17847: GREATEREQUAL
17848: IFFALSE 17852
// exit ;
17850: GO 18052
// ComMoveXY ( unit , x , y ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17871: LD_INT 35
17873: PPUSH
17874: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17878: LD_VAR 0 1
17882: PPUSH
17883: LD_VAR 0 2
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: CALL 54060 0 3
17897: NOT
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 314
17908: AND
17909: IFFALSE 17913
// exit ;
17911: GO 18052
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17913: LD_VAR 0 2
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: CALL_OW 428
17927: PUSH
17928: LD_VAR 0 1
17932: EQUAL
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 314
17943: NOT
17944: AND
17945: IFFALSE 17871
// PlaySoundXY ( x , y , PlantMine ) ;
17947: LD_VAR 0 2
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_STRING PlantMine
17959: PPUSH
17960: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17964: LD_VAR 0 2
17968: PPUSH
17969: LD_VAR 0 3
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 255
17983: PPUSH
17984: LD_INT 0
17986: PPUSH
17987: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17991: LD_ADDR_EXP 80
17995: PUSH
17996: LD_EXP 80
18000: PPUSH
18001: LD_VAR 0 5
18005: PUSH
18006: LD_EXP 80
18010: PUSH
18011: LD_VAR 0 5
18015: ARRAY
18016: PUSH
18017: LD_INT 1
18019: PLUS
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: LD_VAR 0 2
18029: PUSH
18030: LD_VAR 0 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL 24211 0 3
18043: ST_TO_ADDR
// result := true ;
18044: LD_ADDR_VAR 0 4
18048: PUSH
18049: LD_INT 1
18051: ST_TO_ADDR
// end ;
18052: LD_VAR 0 4
18056: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
18061: PPUSH
// if not unit in minersList then
18062: LD_VAR 0 1
18066: PUSH
18067: LD_EXP 79
18071: IN
18072: NOT
18073: IFFALSE 18077
// exit ;
18075: GO 18469
// index := GetElementIndex ( minersList , unit ) ;
18077: LD_ADDR_VAR 0 6
18081: PUSH
18082: LD_EXP 79
18086: PPUSH
18087: LD_VAR 0 1
18091: PPUSH
18092: CALL 23996 0 2
18096: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18097: LD_ADDR_VAR 0 5
18101: PUSH
18102: DOUBLE
18103: LD_EXP 80
18107: PUSH
18108: LD_VAR 0 6
18112: ARRAY
18113: INC
18114: ST_TO_ADDR
18115: LD_INT 1
18117: PUSH
18118: FOR_DOWNTO
18119: IFFALSE 18280
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18121: LD_EXP 80
18125: PUSH
18126: LD_VAR 0 6
18130: ARRAY
18131: PUSH
18132: LD_VAR 0 5
18136: ARRAY
18137: PUSH
18138: LD_INT 1
18140: ARRAY
18141: PUSH
18142: LD_VAR 0 2
18146: EQUAL
18147: PUSH
18148: LD_EXP 80
18152: PUSH
18153: LD_VAR 0 6
18157: ARRAY
18158: PUSH
18159: LD_VAR 0 5
18163: ARRAY
18164: PUSH
18165: LD_INT 2
18167: ARRAY
18168: PUSH
18169: LD_VAR 0 3
18173: EQUAL
18174: AND
18175: IFFALSE 18278
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18177: LD_EXP 80
18181: PUSH
18182: LD_VAR 0 6
18186: ARRAY
18187: PUSH
18188: LD_VAR 0 5
18192: ARRAY
18193: PUSH
18194: LD_INT 1
18196: ARRAY
18197: PPUSH
18198: LD_EXP 80
18202: PUSH
18203: LD_VAR 0 6
18207: ARRAY
18208: PUSH
18209: LD_VAR 0 5
18213: ARRAY
18214: PUSH
18215: LD_INT 2
18217: ARRAY
18218: PPUSH
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 255
18228: PPUSH
18229: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18233: LD_ADDR_EXP 80
18237: PUSH
18238: LD_EXP 80
18242: PPUSH
18243: LD_VAR 0 6
18247: PPUSH
18248: LD_EXP 80
18252: PUSH
18253: LD_VAR 0 6
18257: ARRAY
18258: PPUSH
18259: LD_VAR 0 5
18263: PPUSH
18264: CALL_OW 3
18268: PPUSH
18269: CALL_OW 1
18273: ST_TO_ADDR
// exit ;
18274: POP
18275: POP
18276: GO 18469
// end ; end ;
18278: GO 18118
18280: POP
18281: POP
// for i := minerMinesList [ index ] downto 1 do
18282: LD_ADDR_VAR 0 5
18286: PUSH
18287: DOUBLE
18288: LD_EXP 80
18292: PUSH
18293: LD_VAR 0 6
18297: ARRAY
18298: INC
18299: ST_TO_ADDR
18300: LD_INT 1
18302: PUSH
18303: FOR_DOWNTO
18304: IFFALSE 18467
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18306: LD_EXP 80
18310: PUSH
18311: LD_VAR 0 6
18315: ARRAY
18316: PUSH
18317: LD_VAR 0 5
18321: ARRAY
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: LD_EXP 80
18331: PUSH
18332: LD_VAR 0 6
18336: ARRAY
18337: PUSH
18338: LD_VAR 0 5
18342: ARRAY
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: CALL_OW 298
18362: PUSH
18363: LD_INT 6
18365: LESS
18366: IFFALSE 18465
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18368: LD_EXP 80
18372: PUSH
18373: LD_VAR 0 6
18377: ARRAY
18378: PUSH
18379: LD_VAR 0 5
18383: ARRAY
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: LD_EXP 80
18393: PUSH
18394: LD_VAR 0 6
18398: ARRAY
18399: PUSH
18400: LD_VAR 0 5
18404: ARRAY
18405: PUSH
18406: LD_INT 2
18408: ARRAY
18409: PPUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 255
18419: PPUSH
18420: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18424: LD_ADDR_EXP 80
18428: PUSH
18429: LD_EXP 80
18433: PPUSH
18434: LD_VAR 0 6
18438: PPUSH
18439: LD_EXP 80
18443: PUSH
18444: LD_VAR 0 6
18448: ARRAY
18449: PPUSH
18450: LD_VAR 0 5
18454: PPUSH
18455: CALL_OW 3
18459: PPUSH
18460: CALL_OW 1
18464: ST_TO_ADDR
// end ; end ;
18465: GO 18303
18467: POP
18468: POP
// end ;
18469: LD_VAR 0 4
18473: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 264
18494: PUSH
18495: LD_EXP 8
18499: EQUAL
18500: NOT
18501: PUSH
18502: LD_VAR 0 1
18506: PUSH
18507: LD_EXP 79
18511: IN
18512: NOT
18513: OR
18514: IFFALSE 18518
// exit ;
18516: GO 18840
// index := GetElementIndex ( minersList , unit ) ;
18518: LD_ADDR_VAR 0 6
18522: PUSH
18523: LD_EXP 79
18527: PPUSH
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL 23996 0 2
18537: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18538: LD_ADDR_VAR 0 8
18542: PUSH
18543: LD_EXP 81
18547: PUSH
18548: LD_EXP 80
18552: PUSH
18553: LD_VAR 0 6
18557: ARRAY
18558: MINUS
18559: ST_TO_ADDR
// if not minesFreeAmount then
18560: LD_VAR 0 8
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18840
// tmp := [ ] ;
18569: LD_ADDR_VAR 0 7
18573: PUSH
18574: EMPTY
18575: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18576: LD_ADDR_VAR 0 5
18580: PUSH
18581: DOUBLE
18582: LD_INT 1
18584: DEC
18585: ST_TO_ADDR
18586: LD_VAR 0 8
18590: PUSH
18591: FOR_TO
18592: IFFALSE 18787
// begin _d := rand ( 0 , 5 ) ;
18594: LD_ADDR_VAR 0 11
18598: PUSH
18599: LD_INT 0
18601: PPUSH
18602: LD_INT 5
18604: PPUSH
18605: CALL_OW 12
18609: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18610: LD_ADDR_VAR 0 12
18614: PUSH
18615: LD_INT 2
18617: PPUSH
18618: LD_INT 6
18620: PPUSH
18621: CALL_OW 12
18625: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18626: LD_ADDR_VAR 0 9
18630: PUSH
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_VAR 0 11
18640: PPUSH
18641: LD_VAR 0 12
18645: PPUSH
18646: CALL_OW 272
18650: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18651: LD_ADDR_VAR 0 10
18655: PUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: LD_VAR 0 11
18665: PPUSH
18666: LD_VAR 0 12
18670: PPUSH
18671: CALL_OW 273
18675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18676: LD_VAR 0 9
18680: PPUSH
18681: LD_VAR 0 10
18685: PPUSH
18686: CALL_OW 488
18690: PUSH
18691: LD_VAR 0 9
18695: PUSH
18696: LD_VAR 0 10
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_VAR 0 7
18709: IN
18710: NOT
18711: AND
18712: PUSH
18713: LD_VAR 0 9
18717: PPUSH
18718: LD_VAR 0 10
18722: PPUSH
18723: CALL_OW 458
18727: NOT
18728: AND
18729: IFFALSE 18771
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18731: LD_ADDR_VAR 0 7
18735: PUSH
18736: LD_VAR 0 7
18740: PPUSH
18741: LD_VAR 0 7
18745: PUSH
18746: LD_INT 1
18748: PLUS
18749: PPUSH
18750: LD_VAR 0 9
18754: PUSH
18755: LD_VAR 0 10
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL_OW 1
18768: ST_TO_ADDR
18769: GO 18785
// i := i - 1 ;
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_VAR 0 5
18780: PUSH
18781: LD_INT 1
18783: MINUS
18784: ST_TO_ADDR
// end ;
18785: GO 18591
18787: POP
18788: POP
// for i in tmp do
18789: LD_ADDR_VAR 0 5
18793: PUSH
18794: LD_VAR 0 7
18798: PUSH
18799: FOR_IN
18800: IFFALSE 18838
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18802: LD_VAR 0 1
18806: PPUSH
18807: LD_VAR 0 5
18811: PUSH
18812: LD_INT 1
18814: ARRAY
18815: PPUSH
18816: LD_VAR 0 5
18820: PUSH
18821: LD_INT 2
18823: ARRAY
18824: PPUSH
18825: CALL 17780 0 3
18829: NOT
18830: IFFALSE 18836
// exit ;
18832: POP
18833: POP
18834: GO 18840
18836: GO 18799
18838: POP
18839: POP
// end ;
18840: LD_VAR 0 4
18844: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18845: LD_INT 0
18847: PPUSH
18848: PPUSH
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
18853: PPUSH
// if not GetClass ( unit ) = class_sniper then
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 257
18863: PUSH
18864: LD_INT 5
18866: EQUAL
18867: NOT
18868: IFFALSE 18872
// exit ;
18870: GO 19260
// dist := 8 ;
18872: LD_ADDR_VAR 0 5
18876: PUSH
18877: LD_INT 8
18879: ST_TO_ADDR
// viewRange := 12 ;
18880: LD_ADDR_VAR 0 7
18884: PUSH
18885: LD_INT 12
18887: ST_TO_ADDR
// side := GetSide ( unit ) ;
18888: LD_ADDR_VAR 0 6
18892: PUSH
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 255
18902: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18903: LD_INT 61
18905: PPUSH
18906: LD_VAR 0 6
18910: PPUSH
18911: CALL_OW 321
18915: PUSH
18916: LD_INT 2
18918: EQUAL
18919: IFFALSE 18929
// viewRange := 16 ;
18921: LD_ADDR_VAR 0 7
18925: PUSH
18926: LD_INT 16
18928: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18929: LD_VAR 0 1
18933: PPUSH
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: CALL_OW 297
18948: PUSH
18949: LD_VAR 0 5
18953: GREATER
18954: IFFALSE 19033
// begin ComMoveXY ( unit , x , y ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_VAR 0 3
18970: PPUSH
18971: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18975: LD_INT 35
18977: PPUSH
18978: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18982: LD_VAR 0 1
18986: PPUSH
18987: LD_VAR 0 2
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: CALL 54060 0 3
19001: NOT
19002: IFFALSE 19006
// exit ;
19004: GO 19260
// until GetDistUnitXY ( unit , x , y ) < dist ;
19006: LD_VAR 0 1
19010: PPUSH
19011: LD_VAR 0 2
19015: PPUSH
19016: LD_VAR 0 3
19020: PPUSH
19021: CALL_OW 297
19025: PUSH
19026: LD_VAR 0 5
19030: LESS
19031: IFFALSE 18975
// end ; ComTurnXY ( unit , x , y ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: LD_VAR 0 2
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: CALL_OW 118
// wait ( 5 ) ;
19052: LD_INT 5
19054: PPUSH
19055: CALL_OW 67
// _d := GetDir ( unit ) ;
19059: LD_ADDR_VAR 0 10
19063: PUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 254
19073: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19074: LD_ADDR_VAR 0 8
19078: PUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL_OW 250
19088: PPUSH
19089: LD_VAR 0 10
19093: PPUSH
19094: LD_VAR 0 5
19098: PPUSH
19099: CALL_OW 272
19103: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19104: LD_ADDR_VAR 0 9
19108: PUSH
19109: LD_VAR 0 1
19113: PPUSH
19114: CALL_OW 251
19118: PPUSH
19119: LD_VAR 0 10
19123: PPUSH
19124: LD_VAR 0 5
19128: PPUSH
19129: CALL_OW 273
19133: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19134: LD_VAR 0 8
19138: PPUSH
19139: LD_VAR 0 9
19143: PPUSH
19144: CALL_OW 488
19148: NOT
19149: IFFALSE 19153
// exit ;
19151: GO 19260
// ComAnimCustom ( unit , 1 ) ;
19153: LD_VAR 0 1
19157: PPUSH
19158: LD_INT 1
19160: PPUSH
19161: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19165: LD_VAR 0 8
19169: PPUSH
19170: LD_VAR 0 9
19174: PPUSH
19175: LD_VAR 0 6
19179: PPUSH
19180: LD_VAR 0 7
19184: PPUSH
19185: CALL_OW 330
// repeat wait ( 1 ) ;
19189: LD_INT 1
19191: PPUSH
19192: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 316
19205: PUSH
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 314
19215: OR
19216: PUSH
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 302
19226: NOT
19227: OR
19228: PUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 301
19238: OR
19239: IFFALSE 19189
// RemoveSeeing ( _x , _y , side ) ;
19241: LD_VAR 0 8
19245: PPUSH
19246: LD_VAR 0 9
19250: PPUSH
19251: LD_VAR 0 6
19255: PPUSH
19256: CALL_OW 331
// end ; end_of_file end_of_file
19260: LD_VAR 0 4
19264: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19265: LD_INT 0
19267: PPUSH
19268: PPUSH
// if exist_mode then
19269: LD_VAR 0 2
19273: IFFALSE 19298
// unit := CreateCharacter ( prefix & ident ) else
19275: LD_ADDR_VAR 0 5
19279: PUSH
19280: LD_VAR 0 3
19284: PUSH
19285: LD_VAR 0 1
19289: STR
19290: PPUSH
19291: CALL_OW 34
19295: ST_TO_ADDR
19296: GO 19313
// unit := NewCharacter ( ident ) ;
19298: LD_ADDR_VAR 0 5
19302: PUSH
19303: LD_VAR 0 1
19307: PPUSH
19308: CALL_OW 25
19312: ST_TO_ADDR
// result := unit ;
19313: LD_ADDR_VAR 0 4
19317: PUSH
19318: LD_VAR 0 5
19322: ST_TO_ADDR
// end ;
19323: LD_VAR 0 4
19327: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19328: LD_INT 0
19330: PPUSH
19331: PPUSH
// if not side or not nation then
19332: LD_VAR 0 1
19336: NOT
19337: PUSH
19338: LD_VAR 0 2
19342: NOT
19343: OR
19344: IFFALSE 19348
// exit ;
19346: GO 20112
// case nation of nation_american :
19348: LD_VAR 0 2
19352: PUSH
19353: LD_INT 1
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19575
19361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19362: LD_ADDR_VAR 0 4
19366: PUSH
19367: LD_INT 35
19369: PUSH
19370: LD_INT 45
19372: PUSH
19373: LD_INT 46
19375: PUSH
19376: LD_INT 47
19378: PUSH
19379: LD_INT 82
19381: PUSH
19382: LD_INT 83
19384: PUSH
19385: LD_INT 84
19387: PUSH
19388: LD_INT 85
19390: PUSH
19391: LD_INT 86
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 6
19402: PUSH
19403: LD_INT 15
19405: PUSH
19406: LD_INT 16
19408: PUSH
19409: LD_INT 7
19411: PUSH
19412: LD_INT 12
19414: PUSH
19415: LD_INT 13
19417: PUSH
19418: LD_INT 10
19420: PUSH
19421: LD_INT 14
19423: PUSH
19424: LD_INT 20
19426: PUSH
19427: LD_INT 21
19429: PUSH
19430: LD_INT 22
19432: PUSH
19433: LD_INT 25
19435: PUSH
19436: LD_INT 32
19438: PUSH
19439: LD_INT 27
19441: PUSH
19442: LD_INT 36
19444: PUSH
19445: LD_INT 69
19447: PUSH
19448: LD_INT 39
19450: PUSH
19451: LD_INT 34
19453: PUSH
19454: LD_INT 40
19456: PUSH
19457: LD_INT 48
19459: PUSH
19460: LD_INT 49
19462: PUSH
19463: LD_INT 50
19465: PUSH
19466: LD_INT 51
19468: PUSH
19469: LD_INT 52
19471: PUSH
19472: LD_INT 53
19474: PUSH
19475: LD_INT 54
19477: PUSH
19478: LD_INT 55
19480: PUSH
19481: LD_INT 56
19483: PUSH
19484: LD_INT 57
19486: PUSH
19487: LD_INT 58
19489: PUSH
19490: LD_INT 59
19492: PUSH
19493: LD_INT 60
19495: PUSH
19496: LD_INT 61
19498: PUSH
19499: LD_INT 62
19501: PUSH
19502: LD_INT 80
19504: PUSH
19505: LD_INT 82
19507: PUSH
19508: LD_INT 83
19510: PUSH
19511: LD_INT 84
19513: PUSH
19514: LD_INT 85
19516: PUSH
19517: LD_INT 86
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: ST_TO_ADDR
19573: GO 20036
19575: LD_INT 2
19577: DOUBLE
19578: EQUAL
19579: IFTRUE 19583
19581: GO 19805
19583: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19584: LD_ADDR_VAR 0 4
19588: PUSH
19589: LD_INT 35
19591: PUSH
19592: LD_INT 45
19594: PUSH
19595: LD_INT 46
19597: PUSH
19598: LD_INT 47
19600: PUSH
19601: LD_INT 82
19603: PUSH
19604: LD_INT 83
19606: PUSH
19607: LD_INT 84
19609: PUSH
19610: LD_INT 85
19612: PUSH
19613: LD_INT 87
19615: PUSH
19616: LD_INT 70
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: LD_INT 11
19624: PUSH
19625: LD_INT 3
19627: PUSH
19628: LD_INT 4
19630: PUSH
19631: LD_INT 5
19633: PUSH
19634: LD_INT 6
19636: PUSH
19637: LD_INT 15
19639: PUSH
19640: LD_INT 18
19642: PUSH
19643: LD_INT 7
19645: PUSH
19646: LD_INT 17
19648: PUSH
19649: LD_INT 8
19651: PUSH
19652: LD_INT 20
19654: PUSH
19655: LD_INT 21
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_INT 72
19663: PUSH
19664: LD_INT 26
19666: PUSH
19667: LD_INT 69
19669: PUSH
19670: LD_INT 39
19672: PUSH
19673: LD_INT 40
19675: PUSH
19676: LD_INT 41
19678: PUSH
19679: LD_INT 42
19681: PUSH
19682: LD_INT 43
19684: PUSH
19685: LD_INT 48
19687: PUSH
19688: LD_INT 49
19690: PUSH
19691: LD_INT 50
19693: PUSH
19694: LD_INT 51
19696: PUSH
19697: LD_INT 52
19699: PUSH
19700: LD_INT 53
19702: PUSH
19703: LD_INT 54
19705: PUSH
19706: LD_INT 55
19708: PUSH
19709: LD_INT 56
19711: PUSH
19712: LD_INT 60
19714: PUSH
19715: LD_INT 61
19717: PUSH
19718: LD_INT 62
19720: PUSH
19721: LD_INT 66
19723: PUSH
19724: LD_INT 67
19726: PUSH
19727: LD_INT 68
19729: PUSH
19730: LD_INT 81
19732: PUSH
19733: LD_INT 82
19735: PUSH
19736: LD_INT 83
19738: PUSH
19739: LD_INT 84
19741: PUSH
19742: LD_INT 85
19744: PUSH
19745: LD_INT 87
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: ST_TO_ADDR
19803: GO 20036
19805: LD_INT 3
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 20035
19813: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19814: LD_ADDR_VAR 0 4
19818: PUSH
19819: LD_INT 46
19821: PUSH
19822: LD_INT 47
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: LD_INT 82
19833: PUSH
19834: LD_INT 83
19836: PUSH
19837: LD_INT 84
19839: PUSH
19840: LD_INT 85
19842: PUSH
19843: LD_INT 86
19845: PUSH
19846: LD_INT 11
19848: PUSH
19849: LD_INT 9
19851: PUSH
19852: LD_INT 20
19854: PUSH
19855: LD_INT 19
19857: PUSH
19858: LD_INT 21
19860: PUSH
19861: LD_INT 24
19863: PUSH
19864: LD_INT 22
19866: PUSH
19867: LD_INT 25
19869: PUSH
19870: LD_INT 28
19872: PUSH
19873: LD_INT 29
19875: PUSH
19876: LD_INT 30
19878: PUSH
19879: LD_INT 31
19881: PUSH
19882: LD_INT 37
19884: PUSH
19885: LD_INT 38
19887: PUSH
19888: LD_INT 32
19890: PUSH
19891: LD_INT 27
19893: PUSH
19894: LD_INT 33
19896: PUSH
19897: LD_INT 69
19899: PUSH
19900: LD_INT 39
19902: PUSH
19903: LD_INT 34
19905: PUSH
19906: LD_INT 40
19908: PUSH
19909: LD_INT 71
19911: PUSH
19912: LD_INT 23
19914: PUSH
19915: LD_INT 44
19917: PUSH
19918: LD_INT 48
19920: PUSH
19921: LD_INT 49
19923: PUSH
19924: LD_INT 50
19926: PUSH
19927: LD_INT 51
19929: PUSH
19930: LD_INT 52
19932: PUSH
19933: LD_INT 53
19935: PUSH
19936: LD_INT 54
19938: PUSH
19939: LD_INT 55
19941: PUSH
19942: LD_INT 56
19944: PUSH
19945: LD_INT 57
19947: PUSH
19948: LD_INT 58
19950: PUSH
19951: LD_INT 59
19953: PUSH
19954: LD_INT 63
19956: PUSH
19957: LD_INT 64
19959: PUSH
19960: LD_INT 65
19962: PUSH
19963: LD_INT 82
19965: PUSH
19966: LD_INT 83
19968: PUSH
19969: LD_INT 84
19971: PUSH
19972: LD_INT 85
19974: PUSH
19975: LD_INT 86
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
20033: GO 20036
20035: POP
// if state > - 1 and state < 3 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: GREATER
20045: PUSH
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 3
20053: LESS
20054: AND
20055: IFFALSE 20112
// for i in result do
20057: LD_ADDR_VAR 0 5
20061: PUSH
20062: LD_VAR 0 4
20066: PUSH
20067: FOR_IN
20068: IFFALSE 20110
// if GetTech ( i , side ) <> state then
20070: LD_VAR 0 5
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: CALL_OW 321
20084: PUSH
20085: LD_VAR 0 3
20089: NONEQUAL
20090: IFFALSE 20108
// result := result diff i ;
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: LD_VAR 0 4
20101: PUSH
20102: LD_VAR 0 5
20106: DIFF
20107: ST_TO_ADDR
20108: GO 20067
20110: POP
20111: POP
// end ;
20112: LD_VAR 0 4
20116: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20117: LD_INT 0
20119: PPUSH
20120: PPUSH
20121: PPUSH
// result := true ;
20122: LD_ADDR_VAR 0 3
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20130: LD_ADDR_VAR 0 5
20134: PUSH
20135: LD_VAR 0 2
20139: PPUSH
20140: CALL_OW 480
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 5
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20203
// for i in tmp do
20154: LD_ADDR_VAR 0 4
20158: PUSH
20159: LD_VAR 0 5
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20201
// if GetTech ( i , side ) <> state_researched then
20167: LD_VAR 0 4
20171: PPUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 321
20181: PUSH
20182: LD_INT 2
20184: NONEQUAL
20185: IFFALSE 20199
// begin result := false ;
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// exit ;
20195: POP
20196: POP
20197: GO 20203
// end ;
20199: GO 20164
20201: POP
20202: POP
// end ;
20203: LD_VAR 0 3
20207: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
20222: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20223: LD_VAR 0 1
20227: NOT
20228: PUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 257
20238: PUSH
20239: LD_INT 9
20241: NONEQUAL
20242: OR
20243: IFFALSE 20247
// exit ;
20245: GO 20820
// side := GetSide ( unit ) ;
20247: LD_ADDR_VAR 0 9
20251: PUSH
20252: LD_VAR 0 1
20256: PPUSH
20257: CALL_OW 255
20261: ST_TO_ADDR
// tech_space := tech_spacanom ;
20262: LD_ADDR_VAR 0 12
20266: PUSH
20267: LD_INT 29
20269: ST_TO_ADDR
// tech_time := tech_taurad ;
20270: LD_ADDR_VAR 0 13
20274: PUSH
20275: LD_INT 28
20277: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20278: LD_ADDR_VAR 0 11
20282: PUSH
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 310
20292: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20293: LD_VAR 0 11
20297: PPUSH
20298: CALL_OW 247
20302: PUSH
20303: LD_INT 2
20305: EQUAL
20306: IFFALSE 20310
// exit ;
20308: GO 20820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20310: LD_ADDR_VAR 0 8
20314: PUSH
20315: LD_INT 81
20317: PUSH
20318: LD_VAR 0 9
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: LD_INT 21
20332: PUSH
20333: LD_INT 3
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: ST_TO_ADDR
// if not tmp then
20353: LD_VAR 0 8
20357: NOT
20358: IFFALSE 20362
// exit ;
20360: GO 20820
// if in_unit then
20362: LD_VAR 0 11
20366: IFFALSE 20390
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20368: LD_ADDR_VAR 0 10
20372: PUSH
20373: LD_VAR 0 8
20377: PPUSH
20378: LD_VAR 0 11
20382: PPUSH
20383: CALL_OW 74
20387: ST_TO_ADDR
20388: GO 20410
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20390: LD_ADDR_VAR 0 10
20394: PUSH
20395: LD_VAR 0 8
20399: PPUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 74
20409: ST_TO_ADDR
// if not enemy then
20410: LD_VAR 0 10
20414: NOT
20415: IFFALSE 20419
// exit ;
20417: GO 20820
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20419: LD_VAR 0 11
20423: PUSH
20424: LD_VAR 0 11
20428: PPUSH
20429: LD_VAR 0 10
20433: PPUSH
20434: CALL_OW 296
20438: PUSH
20439: LD_INT 13
20441: GREATER
20442: AND
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: LD_VAR 0 10
20453: PPUSH
20454: CALL_OW 296
20458: PUSH
20459: LD_INT 12
20461: GREATER
20462: OR
20463: IFFALSE 20467
// exit ;
20465: GO 20820
// missile := [ 1 ] ;
20467: LD_ADDR_VAR 0 14
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20478: LD_VAR 0 9
20482: PPUSH
20483: LD_VAR 0 12
20487: PPUSH
20488: CALL_OW 325
20492: IFFALSE 20521
// missile := Insert ( missile , missile + 1 , 2 ) ;
20494: LD_ADDR_VAR 0 14
20498: PUSH
20499: LD_VAR 0 14
20503: PPUSH
20504: LD_VAR 0 14
20508: PUSH
20509: LD_INT 1
20511: PLUS
20512: PPUSH
20513: LD_INT 2
20515: PPUSH
20516: CALL_OW 2
20520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20521: LD_VAR 0 9
20525: PPUSH
20526: LD_VAR 0 13
20530: PPUSH
20531: CALL_OW 325
20535: PUSH
20536: LD_VAR 0 10
20540: PPUSH
20541: CALL_OW 255
20545: PPUSH
20546: LD_VAR 0 13
20550: PPUSH
20551: CALL_OW 325
20555: NOT
20556: AND
20557: IFFALSE 20586
// missile := Insert ( missile , missile + 1 , 3 ) ;
20559: LD_ADDR_VAR 0 14
20563: PUSH
20564: LD_VAR 0 14
20568: PPUSH
20569: LD_VAR 0 14
20573: PUSH
20574: LD_INT 1
20576: PLUS
20577: PPUSH
20578: LD_INT 3
20580: PPUSH
20581: CALL_OW 2
20585: ST_TO_ADDR
// if missile < 2 then
20586: LD_VAR 0 14
20590: PUSH
20591: LD_INT 2
20593: LESS
20594: IFFALSE 20598
// exit ;
20596: GO 20820
// x := GetX ( enemy ) ;
20598: LD_ADDR_VAR 0 4
20602: PUSH
20603: LD_VAR 0 10
20607: PPUSH
20608: CALL_OW 250
20612: ST_TO_ADDR
// y := GetY ( enemy ) ;
20613: LD_ADDR_VAR 0 5
20617: PUSH
20618: LD_VAR 0 10
20622: PPUSH
20623: CALL_OW 251
20627: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20628: LD_ADDR_VAR 0 6
20632: PUSH
20633: LD_VAR 0 4
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PPUSH
20642: LD_INT 1
20644: PPUSH
20645: CALL_OW 12
20649: PLUS
20650: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20651: LD_ADDR_VAR 0 7
20655: PUSH
20656: LD_VAR 0 5
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PPUSH
20665: LD_INT 1
20667: PPUSH
20668: CALL_OW 12
20672: PLUS
20673: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20674: LD_VAR 0 6
20678: PPUSH
20679: LD_VAR 0 7
20683: PPUSH
20684: CALL_OW 488
20688: NOT
20689: IFFALSE 20711
// begin _x := x ;
20691: LD_ADDR_VAR 0 6
20695: PUSH
20696: LD_VAR 0 4
20700: ST_TO_ADDR
// _y := y ;
20701: LD_ADDR_VAR 0 7
20705: PUSH
20706: LD_VAR 0 5
20710: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 1
20718: PPUSH
20719: LD_VAR 0 14
20723: PPUSH
20724: CALL_OW 12
20728: ST_TO_ADDR
// case i of 1 :
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 1
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20759
20742: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20743: LD_VAR 0 1
20747: PPUSH
20748: LD_VAR 0 10
20752: PPUSH
20753: CALL_OW 115
20757: GO 20820
20759: LD_INT 2
20761: DOUBLE
20762: EQUAL
20763: IFTRUE 20767
20765: GO 20789
20767: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_VAR 0 6
20777: PPUSH
20778: LD_VAR 0 7
20782: PPUSH
20783: CALL_OW 153
20787: GO 20820
20789: LD_INT 3
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20819
20797: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_VAR 0 6
20807: PPUSH
20808: LD_VAR 0 7
20812: PPUSH
20813: CALL_OW 154
20817: GO 20820
20819: POP
// end ;
20820: LD_VAR 0 2
20824: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20825: LD_INT 0
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
// if not unit or not building then
20833: LD_VAR 0 1
20837: NOT
20838: PUSH
20839: LD_VAR 0 2
20843: NOT
20844: OR
20845: IFFALSE 20849
// exit ;
20847: GO 21007
// x := GetX ( building ) ;
20849: LD_ADDR_VAR 0 5
20853: PUSH
20854: LD_VAR 0 2
20858: PPUSH
20859: CALL_OW 250
20863: ST_TO_ADDR
// y := GetY ( building ) ;
20864: LD_ADDR_VAR 0 6
20868: PUSH
20869: LD_VAR 0 2
20873: PPUSH
20874: CALL_OW 251
20878: ST_TO_ADDR
// for i = 0 to 5 do
20879: LD_ADDR_VAR 0 4
20883: PUSH
20884: DOUBLE
20885: LD_INT 0
20887: DEC
20888: ST_TO_ADDR
20889: LD_INT 5
20891: PUSH
20892: FOR_TO
20893: IFFALSE 21005
// begin _x := ShiftX ( x , i , 3 ) ;
20895: LD_ADDR_VAR 0 7
20899: PUSH
20900: LD_VAR 0 5
20904: PPUSH
20905: LD_VAR 0 4
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: CALL_OW 272
20917: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20918: LD_ADDR_VAR 0 8
20922: PUSH
20923: LD_VAR 0 6
20927: PPUSH
20928: LD_VAR 0 4
20932: PPUSH
20933: LD_INT 3
20935: PPUSH
20936: CALL_OW 273
20940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20941: LD_VAR 0 7
20945: PPUSH
20946: LD_VAR 0 8
20950: PPUSH
20951: CALL_OW 488
20955: NOT
20956: IFFALSE 20960
// continue ;
20958: GO 20892
// if HexInfo ( _x , _y ) = 0 then
20960: LD_VAR 0 7
20964: PPUSH
20965: LD_VAR 0 8
20969: PPUSH
20970: CALL_OW 428
20974: PUSH
20975: LD_INT 0
20977: EQUAL
20978: IFFALSE 21003
// begin ComMoveXY ( unit , _x , _y ) ;
20980: LD_VAR 0 1
20984: PPUSH
20985: LD_VAR 0 7
20989: PPUSH
20990: LD_VAR 0 8
20994: PPUSH
20995: CALL_OW 111
// exit ;
20999: POP
21000: POP
21001: GO 21007
// end ; end ;
21003: GO 20892
21005: POP
21006: POP
// end ;
21007: LD_VAR 0 3
21011: RET
// export function ScanBase ( side , base_area ) ; begin
21012: LD_INT 0
21014: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21015: LD_ADDR_VAR 0 3
21019: PUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_INT 81
21027: PUSH
21028: LD_VAR 0 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 70
21041: ST_TO_ADDR
// end ;
21042: LD_VAR 0 3
21046: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21047: LD_INT 0
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
// result := false ;
21053: LD_ADDR_VAR 0 2
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// side := GetSide ( unit ) ;
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_VAR 0 1
21070: PPUSH
21071: CALL_OW 255
21075: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21076: LD_ADDR_VAR 0 4
21080: PUSH
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 248
21090: ST_TO_ADDR
// case nat of 1 :
21091: LD_VAR 0 4
21095: PUSH
21096: LD_INT 1
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21115
21104: POP
// tech := tech_lassight ; 2 :
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_INT 12
21112: ST_TO_ADDR
21113: GO 21154
21115: LD_INT 2
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21134
21123: POP
// tech := tech_mortar ; 3 :
21124: LD_ADDR_VAR 0 5
21128: PUSH
21129: LD_INT 41
21131: ST_TO_ADDR
21132: GO 21154
21134: LD_INT 3
21136: DOUBLE
21137: EQUAL
21138: IFTRUE 21142
21140: GO 21153
21142: POP
// tech := tech_bazooka ; end ;
21143: LD_ADDR_VAR 0 5
21147: PUSH
21148: LD_INT 44
21150: ST_TO_ADDR
21151: GO 21154
21153: POP
// if Researched ( side , tech ) then
21154: LD_VAR 0 3
21158: PPUSH
21159: LD_VAR 0 5
21163: PPUSH
21164: CALL_OW 325
21168: IFFALSE 21195
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21170: LD_ADDR_VAR 0 2
21174: PUSH
21175: LD_INT 5
21177: PUSH
21178: LD_INT 8
21180: PUSH
21181: LD_INT 9
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: LD_VAR 0 4
21193: ARRAY
21194: ST_TO_ADDR
// end ;
21195: LD_VAR 0 2
21199: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21200: LD_INT 0
21202: PPUSH
21203: PPUSH
21204: PPUSH
// if not mines then
21205: LD_VAR 0 2
21209: NOT
21210: IFFALSE 21214
// exit ;
21212: GO 21358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21214: LD_ADDR_VAR 0 5
21218: PUSH
21219: LD_INT 81
21221: PUSH
21222: LD_VAR 0 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 3
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 3
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// for i in mines do
21257: LD_ADDR_VAR 0 4
21261: PUSH
21262: LD_VAR 0 2
21266: PUSH
21267: FOR_IN
21268: IFFALSE 21356
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21270: LD_VAR 0 4
21274: PUSH
21275: LD_INT 1
21277: ARRAY
21278: PPUSH
21279: LD_VAR 0 4
21283: PUSH
21284: LD_INT 2
21286: ARRAY
21287: PPUSH
21288: CALL_OW 458
21292: NOT
21293: IFFALSE 21297
// continue ;
21295: GO 21267
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21297: LD_VAR 0 4
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: LD_VAR 0 4
21310: PUSH
21311: LD_INT 2
21313: ARRAY
21314: PPUSH
21315: CALL_OW 428
21319: PUSH
21320: LD_VAR 0 5
21324: IN
21325: IFFALSE 21354
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21327: LD_VAR 0 4
21331: PUSH
21332: LD_INT 1
21334: ARRAY
21335: PPUSH
21336: LD_VAR 0 4
21340: PUSH
21341: LD_INT 2
21343: ARRAY
21344: PPUSH
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 456
// end ;
21354: GO 21267
21356: POP
21357: POP
// end ;
21358: LD_VAR 0 3
21362: RET
// export function Count ( array ) ; var i ; begin
21363: LD_INT 0
21365: PPUSH
21366: PPUSH
// result := 0 ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// for i in array do
21375: LD_ADDR_VAR 0 3
21379: PUSH
21380: LD_VAR 0 1
21384: PUSH
21385: FOR_IN
21386: IFFALSE 21410
// if i then
21388: LD_VAR 0 3
21392: IFFALSE 21408
// result := result + 1 ;
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_VAR 0 2
21403: PUSH
21404: LD_INT 1
21406: PLUS
21407: ST_TO_ADDR
21408: GO 21385
21410: POP
21411: POP
// end ;
21412: LD_VAR 0 2
21416: RET
// export function IsEmpty ( building ) ; begin
21417: LD_INT 0
21419: PPUSH
// if not building then
21420: LD_VAR 0 1
21424: NOT
21425: IFFALSE 21429
// exit ;
21427: GO 21472
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21429: LD_ADDR_VAR 0 2
21433: PUSH
21434: LD_VAR 0 1
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 255
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 58
21458: PUSH
21459: EMPTY
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: IN
21471: ST_TO_ADDR
// end ;
21472: LD_VAR 0 2
21476: RET
// export function IsNotFull ( building ) ; begin
21477: LD_INT 0
21479: PPUSH
// if not building then
21480: LD_VAR 0 1
21484: NOT
21485: IFFALSE 21489
// exit ;
21487: GO 21508
// result := UnitsInside ( building ) < 6 ;
21489: LD_ADDR_VAR 0 2
21493: PUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 313
21503: PUSH
21504: LD_INT 6
21506: LESS
21507: ST_TO_ADDR
// end ;
21508: LD_VAR 0 2
21512: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21513: LD_INT 0
21515: PPUSH
21516: PPUSH
21517: PPUSH
21518: PPUSH
// tmp := [ ] ;
21519: LD_ADDR_VAR 0 3
21523: PUSH
21524: EMPTY
21525: ST_TO_ADDR
// list := [ ] ;
21526: LD_ADDR_VAR 0 5
21530: PUSH
21531: EMPTY
21532: ST_TO_ADDR
// for i = 16 to 25 do
21533: LD_ADDR_VAR 0 4
21537: PUSH
21538: DOUBLE
21539: LD_INT 16
21541: DEC
21542: ST_TO_ADDR
21543: LD_INT 25
21545: PUSH
21546: FOR_TO
21547: IFFALSE 21620
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21549: LD_ADDR_VAR 0 3
21553: PUSH
21554: LD_VAR 0 3
21558: PUSH
21559: LD_INT 22
21561: PUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 255
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 91
21578: PUSH
21579: LD_VAR 0 1
21583: PUSH
21584: LD_INT 6
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 30
21594: PUSH
21595: LD_VAR 0 4
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: PPUSH
21612: CALL_OW 69
21616: ADD
21617: ST_TO_ADDR
21618: GO 21546
21620: POP
21621: POP
// for i = 1 to tmp do
21622: LD_ADDR_VAR 0 4
21626: PUSH
21627: DOUBLE
21628: LD_INT 1
21630: DEC
21631: ST_TO_ADDR
21632: LD_VAR 0 3
21636: PUSH
21637: FOR_TO
21638: IFFALSE 21726
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21640: LD_ADDR_VAR 0 5
21644: PUSH
21645: LD_VAR 0 5
21649: PUSH
21650: LD_VAR 0 3
21654: PUSH
21655: LD_VAR 0 4
21659: ARRAY
21660: PPUSH
21661: CALL_OW 266
21665: PUSH
21666: LD_VAR 0 3
21670: PUSH
21671: LD_VAR 0 4
21675: ARRAY
21676: PPUSH
21677: CALL_OW 250
21681: PUSH
21682: LD_VAR 0 3
21686: PUSH
21687: LD_VAR 0 4
21691: ARRAY
21692: PPUSH
21693: CALL_OW 251
21697: PUSH
21698: LD_VAR 0 3
21702: PUSH
21703: LD_VAR 0 4
21707: ARRAY
21708: PPUSH
21709: CALL_OW 254
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: ADD
21723: ST_TO_ADDR
21724: GO 21637
21726: POP
21727: POP
// result := list ;
21728: LD_ADDR_VAR 0 2
21732: PUSH
21733: LD_VAR 0 5
21737: ST_TO_ADDR
// end ;
21738: LD_VAR 0 2
21742: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21743: LD_INT 0
21745: PPUSH
21746: PPUSH
21747: PPUSH
21748: PPUSH
21749: PPUSH
21750: PPUSH
21751: PPUSH
// if not factory then
21752: LD_VAR 0 1
21756: NOT
21757: IFFALSE 21761
// exit ;
21759: GO 22354
// if control = control_apeman then
21761: LD_VAR 0 4
21765: PUSH
21766: LD_INT 5
21768: EQUAL
21769: IFFALSE 21878
// begin tmp := UnitsInside ( factory ) ;
21771: LD_ADDR_VAR 0 8
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 313
21785: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21786: LD_VAR 0 8
21790: PPUSH
21791: LD_INT 25
21793: PUSH
21794: LD_INT 12
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: CALL_OW 72
21805: NOT
21806: IFFALSE 21816
// control := control_manual ;
21808: LD_ADDR_VAR 0 4
21812: PUSH
21813: LD_INT 1
21815: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21816: LD_ADDR_VAR 0 8
21820: PUSH
21821: LD_VAR 0 1
21825: PPUSH
21826: CALL 21513 0 1
21830: ST_TO_ADDR
// if tmp then
21831: LD_VAR 0 8
21835: IFFALSE 21878
// begin for i in tmp do
21837: LD_ADDR_VAR 0 7
21841: PUSH
21842: LD_VAR 0 8
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21876
// if i [ 1 ] = b_ext_radio then
21850: LD_VAR 0 7
21854: PUSH
21855: LD_INT 1
21857: ARRAY
21858: PUSH
21859: LD_INT 22
21861: EQUAL
21862: IFFALSE 21874
// begin control := control_remote ;
21864: LD_ADDR_VAR 0 4
21868: PUSH
21869: LD_INT 2
21871: ST_TO_ADDR
// break ;
21872: GO 21876
// end ;
21874: GO 21847
21876: POP
21877: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21878: LD_VAR 0 1
21882: PPUSH
21883: LD_VAR 0 2
21887: PPUSH
21888: LD_VAR 0 3
21892: PPUSH
21893: LD_VAR 0 4
21897: PPUSH
21898: LD_VAR 0 5
21902: PPUSH
21903: CALL_OW 448
21907: IFFALSE 21942
// begin result := [ chassis , engine , control , weapon ] ;
21909: LD_ADDR_VAR 0 6
21913: PUSH
21914: LD_VAR 0 2
21918: PUSH
21919: LD_VAR 0 3
21923: PUSH
21924: LD_VAR 0 4
21928: PUSH
21929: LD_VAR 0 5
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// exit ;
21940: GO 22354
// end ; _chassis := AvailableChassisList ( factory ) ;
21942: LD_ADDR_VAR 0 9
21946: PUSH
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 475
21956: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21957: LD_ADDR_VAR 0 11
21961: PUSH
21962: LD_VAR 0 1
21966: PPUSH
21967: CALL_OW 476
21971: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21972: LD_ADDR_VAR 0 12
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 477
21986: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21987: LD_ADDR_VAR 0 10
21991: PUSH
21992: LD_VAR 0 1
21996: PPUSH
21997: CALL_OW 478
22001: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22002: LD_VAR 0 9
22006: NOT
22007: PUSH
22008: LD_VAR 0 11
22012: NOT
22013: OR
22014: PUSH
22015: LD_VAR 0 12
22019: NOT
22020: OR
22021: PUSH
22022: LD_VAR 0 10
22026: NOT
22027: OR
22028: IFFALSE 22063
// begin result := [ chassis , engine , control , weapon ] ;
22030: LD_ADDR_VAR 0 6
22034: PUSH
22035: LD_VAR 0 2
22039: PUSH
22040: LD_VAR 0 3
22044: PUSH
22045: LD_VAR 0 4
22049: PUSH
22050: LD_VAR 0 5
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: ST_TO_ADDR
// exit ;
22061: GO 22354
// end ; if not chassis in _chassis then
22063: LD_VAR 0 2
22067: PUSH
22068: LD_VAR 0 9
22072: IN
22073: NOT
22074: IFFALSE 22100
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_VAR 0 9
22085: PUSH
22086: LD_INT 1
22088: PPUSH
22089: LD_VAR 0 9
22093: PPUSH
22094: CALL_OW 12
22098: ARRAY
22099: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22100: LD_VAR 0 2
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL 22359 0 2
22114: NOT
22115: IFFALSE 22174
// repeat engine := _engine [ 1 ] ;
22117: LD_ADDR_VAR 0 3
22121: PUSH
22122: LD_VAR 0 11
22126: PUSH
22127: LD_INT 1
22129: ARRAY
22130: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22131: LD_ADDR_VAR 0 11
22135: PUSH
22136: LD_VAR 0 11
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 3
22148: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22149: LD_VAR 0 2
22153: PPUSH
22154: LD_VAR 0 3
22158: PPUSH
22159: CALL 22359 0 2
22163: PUSH
22164: LD_VAR 0 11
22168: PUSH
22169: EMPTY
22170: EQUAL
22171: OR
22172: IFFALSE 22117
// if not control in _control then
22174: LD_VAR 0 4
22178: PUSH
22179: LD_VAR 0 12
22183: IN
22184: NOT
22185: IFFALSE 22211
// control := _control [ rand ( 1 , _control ) ] ;
22187: LD_ADDR_VAR 0 4
22191: PUSH
22192: LD_VAR 0 12
22196: PUSH
22197: LD_INT 1
22199: PPUSH
22200: LD_VAR 0 12
22204: PPUSH
22205: CALL_OW 12
22209: ARRAY
22210: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22211: LD_VAR 0 2
22215: PPUSH
22216: LD_VAR 0 5
22220: PPUSH
22221: CALL 22579 0 2
22225: NOT
22226: IFFALSE 22285
// repeat weapon := _weapon [ 1 ] ;
22228: LD_ADDR_VAR 0 5
22232: PUSH
22233: LD_VAR 0 10
22237: PUSH
22238: LD_INT 1
22240: ARRAY
22241: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22242: LD_ADDR_VAR 0 10
22246: PUSH
22247: LD_VAR 0 10
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 3
22259: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22260: LD_VAR 0 2
22264: PPUSH
22265: LD_VAR 0 5
22269: PPUSH
22270: CALL 22579 0 2
22274: PUSH
22275: LD_VAR 0 10
22279: PUSH
22280: EMPTY
22281: EQUAL
22282: OR
22283: IFFALSE 22228
// result := [ ] ;
22285: LD_ADDR_VAR 0 6
22289: PUSH
22290: EMPTY
22291: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22292: LD_VAR 0 1
22296: PPUSH
22297: LD_VAR 0 2
22301: PPUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: LD_VAR 0 4
22311: PPUSH
22312: LD_VAR 0 5
22316: PPUSH
22317: CALL_OW 448
22321: IFFALSE 22354
// result := [ chassis , engine , control , weapon ] ;
22323: LD_ADDR_VAR 0 6
22327: PUSH
22328: LD_VAR 0 2
22332: PUSH
22333: LD_VAR 0 3
22337: PUSH
22338: LD_VAR 0 4
22342: PUSH
22343: LD_VAR 0 5
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// end ;
22354: LD_VAR 0 6
22358: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22359: LD_INT 0
22361: PPUSH
// if not chassis or not engine then
22362: LD_VAR 0 1
22366: NOT
22367: PUSH
22368: LD_VAR 0 2
22372: NOT
22373: OR
22374: IFFALSE 22378
// exit ;
22376: GO 22574
// case engine of engine_solar :
22378: LD_VAR 0 2
22382: PUSH
22383: LD_INT 2
22385: DOUBLE
22386: EQUAL
22387: IFTRUE 22391
22389: GO 22429
22391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22392: LD_ADDR_VAR 0 3
22396: PUSH
22397: LD_INT 11
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 13
22405: PUSH
22406: LD_INT 14
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: ST_TO_ADDR
22427: GO 22558
22429: LD_INT 1
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22437
22435: GO 22499
22437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22438: LD_ADDR_VAR 0 3
22442: PUSH
22443: LD_INT 11
22445: PUSH
22446: LD_INT 12
22448: PUSH
22449: LD_INT 13
22451: PUSH
22452: LD_INT 14
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 3
22463: PUSH
22464: LD_INT 4
22466: PUSH
22467: LD_INT 5
22469: PUSH
22470: LD_INT 21
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 22
22478: PUSH
22479: LD_INT 24
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: ST_TO_ADDR
22497: GO 22558
22499: LD_INT 3
22501: DOUBLE
22502: EQUAL
22503: IFTRUE 22507
22505: GO 22557
22507: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22508: LD_ADDR_VAR 0 3
22512: PUSH
22513: LD_INT 13
22515: PUSH
22516: LD_INT 14
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 21
22533: PUSH
22534: LD_INT 22
22536: PUSH
22537: LD_INT 23
22539: PUSH
22540: LD_INT 24
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: ST_TO_ADDR
22555: GO 22558
22557: POP
// result := ( chassis in result ) ;
22558: LD_ADDR_VAR 0 3
22562: PUSH
22563: LD_VAR 0 1
22567: PUSH
22568: LD_VAR 0 3
22572: IN
22573: ST_TO_ADDR
// end ;
22574: LD_VAR 0 3
22578: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22579: LD_INT 0
22581: PPUSH
// if not chassis or not weapon then
22582: LD_VAR 0 1
22586: NOT
22587: PUSH
22588: LD_VAR 0 2
22592: NOT
22593: OR
22594: IFFALSE 22598
// exit ;
22596: GO 23624
// case weapon of us_machine_gun :
22598: LD_VAR 0 2
22602: PUSH
22603: LD_INT 2
22605: DOUBLE
22606: EQUAL
22607: IFTRUE 22611
22609: GO 22641
22611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22612: LD_ADDR_VAR 0 3
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 4
22628: PUSH
22629: LD_INT 5
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 23608
22641: LD_INT 3
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22679
22649: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22650: LD_ADDR_VAR 0 3
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: LD_INT 4
22666: PUSH
22667: LD_INT 5
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: ST_TO_ADDR
22677: GO 23608
22679: LD_INT 11
22681: DOUBLE
22682: EQUAL
22683: IFTRUE 22687
22685: GO 22717
22687: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22688: LD_ADDR_VAR 0 3
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: LD_INT 3
22701: PUSH
22702: LD_INT 4
22704: PUSH
22705: LD_INT 5
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: ST_TO_ADDR
22715: GO 23608
22717: LD_INT 4
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 22751
22725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22726: LD_ADDR_VAR 0 3
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: LD_INT 4
22739: PUSH
22740: LD_INT 5
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: ST_TO_ADDR
22749: GO 23608
22751: LD_INT 5
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22785
22759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22760: LD_ADDR_VAR 0 3
22764: PUSH
22765: LD_INT 2
22767: PUSH
22768: LD_INT 3
22770: PUSH
22771: LD_INT 4
22773: PUSH
22774: LD_INT 5
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: ST_TO_ADDR
22783: GO 23608
22785: LD_INT 9
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22819
22793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22794: LD_ADDR_VAR 0 3
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 4
22807: PUSH
22808: LD_INT 5
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
22817: GO 23608
22819: LD_INT 7
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22853
22827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22828: LD_ADDR_VAR 0 3
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: LD_INT 3
22838: PUSH
22839: LD_INT 4
22841: PUSH
22842: LD_INT 5
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: ST_TO_ADDR
22851: GO 23608
22853: LD_INT 12
22855: DOUBLE
22856: EQUAL
22857: IFTRUE 22861
22859: GO 22887
22861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22862: LD_ADDR_VAR 0 3
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: LD_INT 3
22872: PUSH
22873: LD_INT 4
22875: PUSH
22876: LD_INT 5
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: ST_TO_ADDR
22885: GO 23608
22887: LD_INT 13
22889: DOUBLE
22890: EQUAL
22891: IFTRUE 22895
22893: GO 22921
22895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22896: LD_ADDR_VAR 0 3
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 3
22906: PUSH
22907: LD_INT 4
22909: PUSH
22910: LD_INT 5
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: ST_TO_ADDR
22919: GO 23608
22921: LD_INT 14
22923: DOUBLE
22924: EQUAL
22925: IFTRUE 22929
22927: GO 22947
22929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22930: LD_ADDR_VAR 0 3
22934: PUSH
22935: LD_INT 4
22937: PUSH
22938: LD_INT 5
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: ST_TO_ADDR
22945: GO 23608
22947: LD_INT 6
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 22973
22955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22956: LD_ADDR_VAR 0 3
22960: PUSH
22961: LD_INT 4
22963: PUSH
22964: LD_INT 5
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: ST_TO_ADDR
22971: GO 23608
22973: LD_INT 10
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22999
22981: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22982: LD_ADDR_VAR 0 3
22986: PUSH
22987: LD_INT 4
22989: PUSH
22990: LD_INT 5
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: ST_TO_ADDR
22997: GO 23608
22999: LD_INT 22
23001: DOUBLE
23002: EQUAL
23003: IFTRUE 23007
23005: GO 23033
23007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23008: LD_ADDR_VAR 0 3
23012: PUSH
23013: LD_INT 11
23015: PUSH
23016: LD_INT 12
23018: PUSH
23019: LD_INT 13
23021: PUSH
23022: LD_INT 14
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
23031: GO 23608
23033: LD_INT 23
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23067
23041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23042: LD_ADDR_VAR 0 3
23046: PUSH
23047: LD_INT 11
23049: PUSH
23050: LD_INT 12
23052: PUSH
23053: LD_INT 13
23055: PUSH
23056: LD_INT 14
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: ST_TO_ADDR
23065: GO 23608
23067: LD_INT 24
23069: DOUBLE
23070: EQUAL
23071: IFTRUE 23075
23073: GO 23101
23075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23076: LD_ADDR_VAR 0 3
23080: PUSH
23081: LD_INT 11
23083: PUSH
23084: LD_INT 12
23086: PUSH
23087: LD_INT 13
23089: PUSH
23090: LD_INT 14
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: ST_TO_ADDR
23099: GO 23608
23101: LD_INT 30
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23135
23109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23110: LD_ADDR_VAR 0 3
23114: PUSH
23115: LD_INT 11
23117: PUSH
23118: LD_INT 12
23120: PUSH
23121: LD_INT 13
23123: PUSH
23124: LD_INT 14
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: ST_TO_ADDR
23133: GO 23608
23135: LD_INT 25
23137: DOUBLE
23138: EQUAL
23139: IFTRUE 23143
23141: GO 23161
23143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_INT 13
23151: PUSH
23152: LD_INT 14
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: ST_TO_ADDR
23159: GO 23608
23161: LD_INT 27
23163: DOUBLE
23164: EQUAL
23165: IFTRUE 23169
23167: GO 23187
23169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: LD_INT 13
23177: PUSH
23178: LD_INT 14
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: ST_TO_ADDR
23185: GO 23608
23187: LD_INT 28
23189: DOUBLE
23190: EQUAL
23191: IFTRUE 23195
23193: GO 23213
23195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23196: LD_ADDR_VAR 0 3
23200: PUSH
23201: LD_INT 13
23203: PUSH
23204: LD_INT 14
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: ST_TO_ADDR
23211: GO 23608
23213: LD_INT 29
23215: DOUBLE
23216: EQUAL
23217: IFTRUE 23221
23219: GO 23239
23221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23222: LD_ADDR_VAR 0 3
23226: PUSH
23227: LD_INT 13
23229: PUSH
23230: LD_INT 14
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 23608
23239: LD_INT 31
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23265
23247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: LD_INT 13
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: ST_TO_ADDR
23263: GO 23608
23265: LD_INT 26
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23291
23273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_INT 13
23281: PUSH
23282: LD_INT 14
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: ST_TO_ADDR
23289: GO 23608
23291: LD_INT 42
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23325
23299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23300: LD_ADDR_VAR 0 3
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 22
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 23608
23325: LD_INT 43
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23359
23333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23334: LD_ADDR_VAR 0 3
23338: PUSH
23339: LD_INT 21
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_INT 23
23347: PUSH
23348: LD_INT 24
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: ST_TO_ADDR
23357: GO 23608
23359: LD_INT 44
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23393
23367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_INT 21
23375: PUSH
23376: LD_INT 22
23378: PUSH
23379: LD_INT 23
23381: PUSH
23382: LD_INT 24
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
23391: GO 23608
23393: LD_INT 45
23395: DOUBLE
23396: EQUAL
23397: IFTRUE 23401
23399: GO 23427
23401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23402: LD_ADDR_VAR 0 3
23406: PUSH
23407: LD_INT 21
23409: PUSH
23410: LD_INT 22
23412: PUSH
23413: LD_INT 23
23415: PUSH
23416: LD_INT 24
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: ST_TO_ADDR
23425: GO 23608
23427: LD_INT 49
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23461
23435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 23
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
23459: GO 23608
23461: LD_INT 51
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23495
23469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23470: LD_ADDR_VAR 0 3
23474: PUSH
23475: LD_INT 21
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_INT 23
23483: PUSH
23484: LD_INT 24
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: ST_TO_ADDR
23493: GO 23608
23495: LD_INT 52
23497: DOUBLE
23498: EQUAL
23499: IFTRUE 23503
23501: GO 23529
23503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23504: LD_ADDR_VAR 0 3
23508: PUSH
23509: LD_INT 21
23511: PUSH
23512: LD_INT 22
23514: PUSH
23515: LD_INT 23
23517: PUSH
23518: LD_INT 24
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 23608
23529: LD_INT 53
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23555
23537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23538: LD_ADDR_VAR 0 3
23542: PUSH
23543: LD_INT 23
23545: PUSH
23546: LD_INT 24
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: ST_TO_ADDR
23553: GO 23608
23555: LD_INT 46
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23581
23563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23564: LD_ADDR_VAR 0 3
23568: PUSH
23569: LD_INT 23
23571: PUSH
23572: LD_INT 24
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: ST_TO_ADDR
23579: GO 23608
23581: LD_INT 47
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23607
23589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23590: LD_ADDR_VAR 0 3
23594: PUSH
23595: LD_INT 23
23597: PUSH
23598: LD_INT 24
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: ST_TO_ADDR
23605: GO 23608
23607: POP
// result := ( chassis in result ) ;
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: LD_VAR 0 1
23617: PUSH
23618: LD_VAR 0 3
23622: IN
23623: ST_TO_ADDR
// end ;
23624: LD_VAR 0 3
23628: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23629: LD_INT 0
23631: PPUSH
23632: PPUSH
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
// result := array ;
23638: LD_ADDR_VAR 0 5
23642: PUSH
23643: LD_VAR 0 1
23647: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23648: LD_VAR 0 1
23652: NOT
23653: PUSH
23654: LD_VAR 0 2
23658: NOT
23659: OR
23660: PUSH
23661: LD_VAR 0 3
23665: NOT
23666: OR
23667: PUSH
23668: LD_VAR 0 2
23672: PUSH
23673: LD_VAR 0 1
23677: GREATER
23678: OR
23679: PUSH
23680: LD_VAR 0 3
23684: PUSH
23685: LD_VAR 0 1
23689: GREATER
23690: OR
23691: IFFALSE 23695
// exit ;
23693: GO 23991
// if direction then
23695: LD_VAR 0 4
23699: IFFALSE 23763
// begin d := 1 ;
23701: LD_ADDR_VAR 0 9
23705: PUSH
23706: LD_INT 1
23708: ST_TO_ADDR
// if i_from > i_to then
23709: LD_VAR 0 2
23713: PUSH
23714: LD_VAR 0 3
23718: GREATER
23719: IFFALSE 23745
// length := ( array - i_from ) + i_to else
23721: LD_ADDR_VAR 0 11
23725: PUSH
23726: LD_VAR 0 1
23730: PUSH
23731: LD_VAR 0 2
23735: MINUS
23736: PUSH
23737: LD_VAR 0 3
23741: PLUS
23742: ST_TO_ADDR
23743: GO 23761
// length := i_to - i_from ;
23745: LD_ADDR_VAR 0 11
23749: PUSH
23750: LD_VAR 0 3
23754: PUSH
23755: LD_VAR 0 2
23759: MINUS
23760: ST_TO_ADDR
// end else
23761: GO 23824
// begin d := - 1 ;
23763: LD_ADDR_VAR 0 9
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: ST_TO_ADDR
// if i_from > i_to then
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 3
23781: GREATER
23782: IFFALSE 23802
// length := i_from - i_to else
23784: LD_ADDR_VAR 0 11
23788: PUSH
23789: LD_VAR 0 2
23793: PUSH
23794: LD_VAR 0 3
23798: MINUS
23799: ST_TO_ADDR
23800: GO 23824
// length := ( array - i_to ) + i_from ;
23802: LD_ADDR_VAR 0 11
23806: PUSH
23807: LD_VAR 0 1
23811: PUSH
23812: LD_VAR 0 3
23816: MINUS
23817: PUSH
23818: LD_VAR 0 2
23822: PLUS
23823: ST_TO_ADDR
// end ; if not length then
23824: LD_VAR 0 11
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 23991
// tmp := array ;
23833: LD_ADDR_VAR 0 10
23837: PUSH
23838: LD_VAR 0 1
23842: ST_TO_ADDR
// for i = 1 to length do
23843: LD_ADDR_VAR 0 6
23847: PUSH
23848: DOUBLE
23849: LD_INT 1
23851: DEC
23852: ST_TO_ADDR
23853: LD_VAR 0 11
23857: PUSH
23858: FOR_TO
23859: IFFALSE 23979
// begin for j = 1 to array do
23861: LD_ADDR_VAR 0 7
23865: PUSH
23866: DOUBLE
23867: LD_INT 1
23869: DEC
23870: ST_TO_ADDR
23871: LD_VAR 0 1
23875: PUSH
23876: FOR_TO
23877: IFFALSE 23965
// begin k := j + d ;
23879: LD_ADDR_VAR 0 8
23883: PUSH
23884: LD_VAR 0 7
23888: PUSH
23889: LD_VAR 0 9
23893: PLUS
23894: ST_TO_ADDR
// if k > array then
23895: LD_VAR 0 8
23899: PUSH
23900: LD_VAR 0 1
23904: GREATER
23905: IFFALSE 23915
// k := 1 ;
23907: LD_ADDR_VAR 0 8
23911: PUSH
23912: LD_INT 1
23914: ST_TO_ADDR
// if not k then
23915: LD_VAR 0 8
23919: NOT
23920: IFFALSE 23932
// k := array ;
23922: LD_ADDR_VAR 0 8
23926: PUSH
23927: LD_VAR 0 1
23931: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23932: LD_ADDR_VAR 0 10
23936: PUSH
23937: LD_VAR 0 10
23941: PPUSH
23942: LD_VAR 0 8
23946: PPUSH
23947: LD_VAR 0 1
23951: PUSH
23952: LD_VAR 0 7
23956: ARRAY
23957: PPUSH
23958: CALL_OW 1
23962: ST_TO_ADDR
// end ;
23963: GO 23876
23965: POP
23966: POP
// array := tmp ;
23967: LD_ADDR_VAR 0 1
23971: PUSH
23972: LD_VAR 0 10
23976: ST_TO_ADDR
// end ;
23977: GO 23858
23979: POP
23980: POP
// result := array ;
23981: LD_ADDR_VAR 0 5
23985: PUSH
23986: LD_VAR 0 1
23990: ST_TO_ADDR
// end ;
23991: LD_VAR 0 5
23995: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23996: LD_INT 0
23998: PPUSH
23999: PPUSH
// result := 0 ;
24000: LD_ADDR_VAR 0 3
24004: PUSH
24005: LD_INT 0
24007: ST_TO_ADDR
// if not array or not value in array then
24008: LD_VAR 0 1
24012: NOT
24013: PUSH
24014: LD_VAR 0 2
24018: PUSH
24019: LD_VAR 0 1
24023: IN
24024: NOT
24025: OR
24026: IFFALSE 24030
// exit ;
24028: GO 24084
// for i = 1 to array do
24030: LD_ADDR_VAR 0 4
24034: PUSH
24035: DOUBLE
24036: LD_INT 1
24038: DEC
24039: ST_TO_ADDR
24040: LD_VAR 0 1
24044: PUSH
24045: FOR_TO
24046: IFFALSE 24082
// if value = array [ i ] then
24048: LD_VAR 0 2
24052: PUSH
24053: LD_VAR 0 1
24057: PUSH
24058: LD_VAR 0 4
24062: ARRAY
24063: EQUAL
24064: IFFALSE 24080
// begin result := i ;
24066: LD_ADDR_VAR 0 3
24070: PUSH
24071: LD_VAR 0 4
24075: ST_TO_ADDR
// exit ;
24076: POP
24077: POP
24078: GO 24084
// end ;
24080: GO 24045
24082: POP
24083: POP
// end ;
24084: LD_VAR 0 3
24088: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24089: LD_INT 0
24091: PPUSH
// vc_chassis := chassis ;
24092: LD_ADDR_OWVAR 37
24096: PUSH
24097: LD_VAR 0 1
24101: ST_TO_ADDR
// vc_engine := engine ;
24102: LD_ADDR_OWVAR 39
24106: PUSH
24107: LD_VAR 0 2
24111: ST_TO_ADDR
// vc_control := control ;
24112: LD_ADDR_OWVAR 38
24116: PUSH
24117: LD_VAR 0 3
24121: ST_TO_ADDR
// vc_weapon := weapon ;
24122: LD_ADDR_OWVAR 40
24126: PUSH
24127: LD_VAR 0 4
24131: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24132: LD_ADDR_OWVAR 41
24136: PUSH
24137: LD_VAR 0 5
24141: ST_TO_ADDR
// end ;
24142: LD_VAR 0 6
24146: RET
// export function WantPlant ( unit ) ; var task ; begin
24147: LD_INT 0
24149: PPUSH
24150: PPUSH
// result := false ;
24151: LD_ADDR_VAR 0 2
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24159: LD_ADDR_VAR 0 3
24163: PUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL_OW 437
24173: ST_TO_ADDR
// if task then
24174: LD_VAR 0 3
24178: IFFALSE 24206
// if task [ 1 ] [ 1 ] = p then
24180: LD_VAR 0 3
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PUSH
24193: LD_STRING p
24195: EQUAL
24196: IFFALSE 24206
// result := true ;
24198: LD_ADDR_VAR 0 2
24202: PUSH
24203: LD_INT 1
24205: ST_TO_ADDR
// end ;
24206: LD_VAR 0 2
24210: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
// if pos < 1 then
24217: LD_VAR 0 2
24221: PUSH
24222: LD_INT 1
24224: LESS
24225: IFFALSE 24229
// exit ;
24227: GO 24532
// if pos = 1 then
24229: LD_VAR 0 2
24233: PUSH
24234: LD_INT 1
24236: EQUAL
24237: IFFALSE 24270
// result := Replace ( arr , pos [ 1 ] , value ) else
24239: LD_ADDR_VAR 0 4
24243: PUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: LD_VAR 0 2
24253: PUSH
24254: LD_INT 1
24256: ARRAY
24257: PPUSH
24258: LD_VAR 0 3
24262: PPUSH
24263: CALL_OW 1
24267: ST_TO_ADDR
24268: GO 24532
// begin tmp := arr ;
24270: LD_ADDR_VAR 0 6
24274: PUSH
24275: LD_VAR 0 1
24279: ST_TO_ADDR
// s_arr := [ tmp ] ;
24280: LD_ADDR_VAR 0 7
24284: PUSH
24285: LD_VAR 0 6
24289: PUSH
24290: EMPTY
24291: LIST
24292: ST_TO_ADDR
// for i = 1 to pos - 1 do
24293: LD_ADDR_VAR 0 5
24297: PUSH
24298: DOUBLE
24299: LD_INT 1
24301: DEC
24302: ST_TO_ADDR
24303: LD_VAR 0 2
24307: PUSH
24308: LD_INT 1
24310: MINUS
24311: PUSH
24312: FOR_TO
24313: IFFALSE 24358
// begin tmp := tmp [ pos [ i ] ] ;
24315: LD_ADDR_VAR 0 6
24319: PUSH
24320: LD_VAR 0 6
24324: PUSH
24325: LD_VAR 0 2
24329: PUSH
24330: LD_VAR 0 5
24334: ARRAY
24335: ARRAY
24336: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24337: LD_ADDR_VAR 0 7
24341: PUSH
24342: LD_VAR 0 7
24346: PUSH
24347: LD_VAR 0 6
24351: PUSH
24352: EMPTY
24353: LIST
24354: ADD
24355: ST_TO_ADDR
// end ;
24356: GO 24312
24358: POP
24359: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24360: LD_ADDR_VAR 0 6
24364: PUSH
24365: LD_VAR 0 6
24369: PPUSH
24370: LD_VAR 0 2
24374: PUSH
24375: LD_VAR 0 2
24379: ARRAY
24380: PPUSH
24381: LD_VAR 0 3
24385: PPUSH
24386: CALL_OW 1
24390: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24391: LD_ADDR_VAR 0 7
24395: PUSH
24396: LD_VAR 0 7
24400: PPUSH
24401: LD_VAR 0 7
24405: PPUSH
24406: LD_VAR 0 6
24410: PPUSH
24411: CALL_OW 1
24415: ST_TO_ADDR
// for i = s_arr downto 2 do
24416: LD_ADDR_VAR 0 5
24420: PUSH
24421: DOUBLE
24422: LD_VAR 0 7
24426: INC
24427: ST_TO_ADDR
24428: LD_INT 2
24430: PUSH
24431: FOR_DOWNTO
24432: IFFALSE 24516
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24434: LD_ADDR_VAR 0 6
24438: PUSH
24439: LD_VAR 0 7
24443: PUSH
24444: LD_VAR 0 5
24448: PUSH
24449: LD_INT 1
24451: MINUS
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 2
24458: PUSH
24459: LD_VAR 0 5
24463: PUSH
24464: LD_INT 1
24466: MINUS
24467: ARRAY
24468: PPUSH
24469: LD_VAR 0 7
24473: PUSH
24474: LD_VAR 0 5
24478: ARRAY
24479: PPUSH
24480: CALL_OW 1
24484: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24485: LD_ADDR_VAR 0 7
24489: PUSH
24490: LD_VAR 0 7
24494: PPUSH
24495: LD_VAR 0 5
24499: PUSH
24500: LD_INT 1
24502: MINUS
24503: PPUSH
24504: LD_VAR 0 6
24508: PPUSH
24509: CALL_OW 1
24513: ST_TO_ADDR
// end ;
24514: GO 24431
24516: POP
24517: POP
// result := s_arr [ 1 ] ;
24518: LD_ADDR_VAR 0 4
24522: PUSH
24523: LD_VAR 0 7
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: ST_TO_ADDR
// end ; end ;
24532: LD_VAR 0 4
24536: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24537: LD_INT 0
24539: PPUSH
24540: PPUSH
// if not list then
24541: LD_VAR 0 1
24545: NOT
24546: IFFALSE 24550
// exit ;
24548: GO 24641
// i := list [ pos1 ] ;
24550: LD_ADDR_VAR 0 5
24554: PUSH
24555: LD_VAR 0 1
24559: PUSH
24560: LD_VAR 0 2
24564: ARRAY
24565: ST_TO_ADDR
// if not i then
24566: LD_VAR 0 5
24570: NOT
24571: IFFALSE 24575
// exit ;
24573: GO 24641
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24575: LD_ADDR_VAR 0 1
24579: PUSH
24580: LD_VAR 0 1
24584: PPUSH
24585: LD_VAR 0 2
24589: PPUSH
24590: LD_VAR 0 1
24594: PUSH
24595: LD_VAR 0 3
24599: ARRAY
24600: PPUSH
24601: CALL_OW 1
24605: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_VAR 0 1
24615: PPUSH
24616: LD_VAR 0 3
24620: PPUSH
24621: LD_VAR 0 5
24625: PPUSH
24626: CALL_OW 1
24630: ST_TO_ADDR
// result := list ;
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: LD_VAR 0 1
24640: ST_TO_ADDR
// end ;
24641: LD_VAR 0 4
24645: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24646: LD_INT 0
24648: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24649: LD_ADDR_VAR 0 5
24653: PUSH
24654: LD_VAR 0 1
24658: PPUSH
24659: CALL_OW 250
24663: PPUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 251
24673: PPUSH
24674: LD_VAR 0 2
24678: PPUSH
24679: LD_VAR 0 3
24683: PPUSH
24684: LD_VAR 0 4
24688: PPUSH
24689: CALL 24699 0 5
24693: ST_TO_ADDR
// end ;
24694: LD_VAR 0 5
24698: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
24703: PPUSH
24704: PPUSH
// if not list then
24705: LD_VAR 0 3
24709: NOT
24710: IFFALSE 24714
// exit ;
24712: GO 25102
// result := [ ] ;
24714: LD_ADDR_VAR 0 6
24718: PUSH
24719: EMPTY
24720: ST_TO_ADDR
// for i in list do
24721: LD_ADDR_VAR 0 7
24725: PUSH
24726: LD_VAR 0 3
24730: PUSH
24731: FOR_IN
24732: IFFALSE 24934
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24734: LD_ADDR_VAR 0 9
24738: PUSH
24739: LD_VAR 0 7
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: LD_VAR 0 2
24753: PPUSH
24754: CALL_OW 297
24758: ST_TO_ADDR
// if not result then
24759: LD_VAR 0 6
24763: NOT
24764: IFFALSE 24790
// result := [ [ i , tmp ] ] else
24766: LD_ADDR_VAR 0 6
24770: PUSH
24771: LD_VAR 0 7
24775: PUSH
24776: LD_VAR 0 9
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: ST_TO_ADDR
24788: GO 24932
// begin if result [ result ] [ 2 ] < tmp then
24790: LD_VAR 0 6
24794: PUSH
24795: LD_VAR 0 6
24799: ARRAY
24800: PUSH
24801: LD_INT 2
24803: ARRAY
24804: PUSH
24805: LD_VAR 0 9
24809: LESS
24810: IFFALSE 24852
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24812: LD_ADDR_VAR 0 6
24816: PUSH
24817: LD_VAR 0 6
24821: PPUSH
24822: LD_VAR 0 6
24826: PUSH
24827: LD_INT 1
24829: PLUS
24830: PPUSH
24831: LD_VAR 0 7
24835: PUSH
24836: LD_VAR 0 9
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 2
24849: ST_TO_ADDR
24850: GO 24932
// for j = 1 to result do
24852: LD_ADDR_VAR 0 8
24856: PUSH
24857: DOUBLE
24858: LD_INT 1
24860: DEC
24861: ST_TO_ADDR
24862: LD_VAR 0 6
24866: PUSH
24867: FOR_TO
24868: IFFALSE 24930
// begin if tmp < result [ j ] [ 2 ] then
24870: LD_VAR 0 9
24874: PUSH
24875: LD_VAR 0 6
24879: PUSH
24880: LD_VAR 0 8
24884: ARRAY
24885: PUSH
24886: LD_INT 2
24888: ARRAY
24889: LESS
24890: IFFALSE 24928
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 6
24901: PPUSH
24902: LD_VAR 0 8
24906: PPUSH
24907: LD_VAR 0 7
24911: PUSH
24912: LD_VAR 0 9
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PPUSH
24921: CALL_OW 2
24925: ST_TO_ADDR
// break ;
24926: GO 24930
// end ; end ;
24928: GO 24867
24930: POP
24931: POP
// end ; end ;
24932: GO 24731
24934: POP
24935: POP
// if result and not asc then
24936: LD_VAR 0 6
24940: PUSH
24941: LD_VAR 0 4
24945: NOT
24946: AND
24947: IFFALSE 25022
// begin tmp := result ;
24949: LD_ADDR_VAR 0 9
24953: PUSH
24954: LD_VAR 0 6
24958: ST_TO_ADDR
// for i = tmp downto 1 do
24959: LD_ADDR_VAR 0 7
24963: PUSH
24964: DOUBLE
24965: LD_VAR 0 9
24969: INC
24970: ST_TO_ADDR
24971: LD_INT 1
24973: PUSH
24974: FOR_DOWNTO
24975: IFFALSE 25020
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24977: LD_ADDR_VAR 0 6
24981: PUSH
24982: LD_VAR 0 6
24986: PPUSH
24987: LD_VAR 0 9
24991: PUSH
24992: LD_VAR 0 7
24996: MINUS
24997: PUSH
24998: LD_INT 1
25000: PLUS
25001: PPUSH
25002: LD_VAR 0 9
25006: PUSH
25007: LD_VAR 0 7
25011: ARRAY
25012: PPUSH
25013: CALL_OW 1
25017: ST_TO_ADDR
25018: GO 24974
25020: POP
25021: POP
// end ; tmp := [ ] ;
25022: LD_ADDR_VAR 0 9
25026: PUSH
25027: EMPTY
25028: ST_TO_ADDR
// if mode then
25029: LD_VAR 0 5
25033: IFFALSE 25102
// begin for i = 1 to result do
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: DOUBLE
25041: LD_INT 1
25043: DEC
25044: ST_TO_ADDR
25045: LD_VAR 0 6
25049: PUSH
25050: FOR_TO
25051: IFFALSE 25090
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25053: LD_ADDR_VAR 0 9
25057: PUSH
25058: LD_VAR 0 9
25062: PPUSH
25063: LD_VAR 0 7
25067: PPUSH
25068: LD_VAR 0 6
25072: PUSH
25073: LD_VAR 0 7
25077: ARRAY
25078: PUSH
25079: LD_INT 1
25081: ARRAY
25082: PPUSH
25083: CALL_OW 1
25087: ST_TO_ADDR
25088: GO 25050
25090: POP
25091: POP
// result := tmp ;
25092: LD_ADDR_VAR 0 6
25096: PUSH
25097: LD_VAR 0 9
25101: ST_TO_ADDR
// end ; end ;
25102: LD_VAR 0 6
25106: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25107: LD_INT 0
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25115: LD_ADDR_VAR 0 5
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: ST_TO_ADDR
// if not x or not y then
25137: LD_VAR 0 2
25141: NOT
25142: PUSH
25143: LD_VAR 0 3
25147: NOT
25148: OR
25149: IFFALSE 25153
// exit ;
25151: GO 26799
// if not range then
25153: LD_VAR 0 4
25157: NOT
25158: IFFALSE 25168
// range := 10 ;
25160: LD_ADDR_VAR 0 4
25164: PUSH
25165: LD_INT 10
25167: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25168: LD_ADDR_VAR 0 8
25172: PUSH
25173: LD_INT 81
25175: PUSH
25176: LD_VAR 0 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 92
25187: PUSH
25188: LD_VAR 0 2
25192: PUSH
25193: LD_VAR 0 3
25197: PUSH
25198: LD_VAR 0 4
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: LD_INT 21
25214: PUSH
25215: LD_INT 3
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 8
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 26799
// for i in tmp do
25245: LD_ADDR_VAR 0 6
25249: PUSH
25250: LD_VAR 0 8
25254: PUSH
25255: FOR_IN
25256: IFFALSE 26774
// begin points := [ 0 , 0 , 0 ] ;
25258: LD_ADDR_VAR 0 9
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: ST_TO_ADDR
// bpoints := 1 ;
25277: LD_ADDR_VAR 0 10
25281: PUSH
25282: LD_INT 1
25284: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25285: LD_VAR 0 6
25289: PPUSH
25290: CALL_OW 247
25294: PUSH
25295: LD_INT 1
25297: DOUBLE
25298: EQUAL
25299: IFTRUE 25303
25301: GO 25881
25303: POP
// begin if GetClass ( i ) = 1 then
25304: LD_VAR 0 6
25308: PPUSH
25309: CALL_OW 257
25313: PUSH
25314: LD_INT 1
25316: EQUAL
25317: IFFALSE 25338
// points := [ 10 , 5 , 3 ] ;
25319: LD_ADDR_VAR 0 9
25323: PUSH
25324: LD_INT 10
25326: PUSH
25327: LD_INT 5
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25338: LD_VAR 0 6
25342: PPUSH
25343: CALL_OW 257
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 4
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: IN
25362: IFFALSE 25383
// points := [ 3 , 2 , 1 ] ;
25364: LD_ADDR_VAR 0 9
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25383: LD_VAR 0 6
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 5
25395: EQUAL
25396: IFFALSE 25417
// points := [ 130 , 5 , 2 ] ;
25398: LD_ADDR_VAR 0 9
25402: PUSH
25403: LD_INT 130
25405: PUSH
25406: LD_INT 5
25408: PUSH
25409: LD_INT 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: LIST
25416: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25417: LD_VAR 0 6
25421: PPUSH
25422: CALL_OW 257
25426: PUSH
25427: LD_INT 8
25429: EQUAL
25430: IFFALSE 25451
// points := [ 35 , 35 , 30 ] ;
25432: LD_ADDR_VAR 0 9
25436: PUSH
25437: LD_INT 35
25439: PUSH
25440: LD_INT 35
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25451: LD_VAR 0 6
25455: PPUSH
25456: CALL_OW 257
25460: PUSH
25461: LD_INT 9
25463: EQUAL
25464: IFFALSE 25485
// points := [ 20 , 55 , 40 ] ;
25466: LD_ADDR_VAR 0 9
25470: PUSH
25471: LD_INT 20
25473: PUSH
25474: LD_INT 55
25476: PUSH
25477: LD_INT 40
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25485: LD_VAR 0 6
25489: PPUSH
25490: CALL_OW 257
25494: PUSH
25495: LD_INT 12
25497: PUSH
25498: LD_INT 16
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: IN
25505: IFFALSE 25526
// points := [ 5 , 3 , 2 ] ;
25507: LD_ADDR_VAR 0 9
25511: PUSH
25512: LD_INT 5
25514: PUSH
25515: LD_INT 3
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25526: LD_VAR 0 6
25530: PPUSH
25531: CALL_OW 257
25535: PUSH
25536: LD_INT 17
25538: EQUAL
25539: IFFALSE 25560
// points := [ 100 , 50 , 75 ] ;
25541: LD_ADDR_VAR 0 9
25545: PUSH
25546: LD_INT 100
25548: PUSH
25549: LD_INT 50
25551: PUSH
25552: LD_INT 75
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25560: LD_VAR 0 6
25564: PPUSH
25565: CALL_OW 257
25569: PUSH
25570: LD_INT 15
25572: EQUAL
25573: IFFALSE 25594
// points := [ 10 , 5 , 3 ] ;
25575: LD_ADDR_VAR 0 9
25579: PUSH
25580: LD_INT 10
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: LD_INT 3
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25594: LD_VAR 0 6
25598: PPUSH
25599: CALL_OW 257
25603: PUSH
25604: LD_INT 14
25606: EQUAL
25607: IFFALSE 25628
// points := [ 10 , 0 , 0 ] ;
25609: LD_ADDR_VAR 0 9
25613: PUSH
25614: LD_INT 10
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25628: LD_VAR 0 6
25632: PPUSH
25633: CALL_OW 257
25637: PUSH
25638: LD_INT 11
25640: EQUAL
25641: IFFALSE 25662
// points := [ 30 , 10 , 5 ] ;
25643: LD_ADDR_VAR 0 9
25647: PUSH
25648: LD_INT 30
25650: PUSH
25651: LD_INT 10
25653: PUSH
25654: LD_INT 5
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25662: LD_VAR 0 1
25666: PPUSH
25667: LD_INT 5
25669: PPUSH
25670: CALL_OW 321
25674: PUSH
25675: LD_INT 2
25677: EQUAL
25678: IFFALSE 25695
// bpoints := bpoints * 1.8 ;
25680: LD_ADDR_VAR 0 10
25684: PUSH
25685: LD_VAR 0 10
25689: PUSH
25690: LD_REAL  1.80000000000000E+0000
25693: MUL
25694: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25695: LD_VAR 0 6
25699: PPUSH
25700: CALL_OW 257
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: LD_INT 4
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: IN
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: LD_INT 51
25731: PPUSH
25732: CALL_OW 321
25736: PUSH
25737: LD_INT 2
25739: EQUAL
25740: AND
25741: IFFALSE 25758
// bpoints := bpoints * 1.2 ;
25743: LD_ADDR_VAR 0 10
25747: PUSH
25748: LD_VAR 0 10
25752: PUSH
25753: LD_REAL  1.20000000000000E+0000
25756: MUL
25757: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25758: LD_VAR 0 6
25762: PPUSH
25763: CALL_OW 257
25767: PUSH
25768: LD_INT 5
25770: PUSH
25771: LD_INT 7
25773: PUSH
25774: LD_INT 9
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: IN
25782: PUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_INT 52
25790: PPUSH
25791: CALL_OW 321
25795: PUSH
25796: LD_INT 2
25798: EQUAL
25799: AND
25800: IFFALSE 25817
// bpoints := bpoints * 1.5 ;
25802: LD_ADDR_VAR 0 10
25806: PUSH
25807: LD_VAR 0 10
25811: PUSH
25812: LD_REAL  1.50000000000000E+0000
25815: MUL
25816: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25817: LD_VAR 0 1
25821: PPUSH
25822: LD_INT 66
25824: PPUSH
25825: CALL_OW 321
25829: PUSH
25830: LD_INT 2
25832: EQUAL
25833: IFFALSE 25850
// bpoints := bpoints * 1.1 ;
25835: LD_ADDR_VAR 0 10
25839: PUSH
25840: LD_VAR 0 10
25844: PUSH
25845: LD_REAL  1.10000000000000E+0000
25848: MUL
25849: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25850: LD_ADDR_VAR 0 10
25854: PUSH
25855: LD_VAR 0 10
25859: PUSH
25860: LD_VAR 0 6
25864: PPUSH
25865: LD_INT 1
25867: PPUSH
25868: CALL_OW 259
25872: PUSH
25873: LD_REAL  1.15000000000000E+0000
25876: MUL
25877: MUL
25878: ST_TO_ADDR
// end ; unit_vehicle :
25879: GO 26703
25881: LD_INT 2
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 26691
25889: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25890: LD_VAR 0 6
25894: PPUSH
25895: CALL_OW 264
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 42
25905: PUSH
25906: LD_INT 24
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: IN
25914: IFFALSE 25935
// points := [ 25 , 5 , 3 ] ;
25916: LD_ADDR_VAR 0 9
25920: PUSH
25921: LD_INT 25
25923: PUSH
25924: LD_INT 5
25926: PUSH
25927: LD_INT 3
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25935: LD_VAR 0 6
25939: PPUSH
25940: CALL_OW 264
25944: PUSH
25945: LD_INT 4
25947: PUSH
25948: LD_INT 43
25950: PUSH
25951: LD_INT 25
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: IN
25959: IFFALSE 25980
// points := [ 40 , 15 , 5 ] ;
25961: LD_ADDR_VAR 0 9
25965: PUSH
25966: LD_INT 40
25968: PUSH
25969: LD_INT 15
25971: PUSH
25972: LD_INT 5
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25980: LD_VAR 0 6
25984: PPUSH
25985: CALL_OW 264
25989: PUSH
25990: LD_INT 3
25992: PUSH
25993: LD_INT 23
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: IN
26000: IFFALSE 26021
// points := [ 7 , 25 , 8 ] ;
26002: LD_ADDR_VAR 0 9
26006: PUSH
26007: LD_INT 7
26009: PUSH
26010: LD_INT 25
26012: PUSH
26013: LD_INT 8
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26021: LD_VAR 0 6
26025: PPUSH
26026: CALL_OW 264
26030: PUSH
26031: LD_INT 5
26033: PUSH
26034: LD_INT 27
26036: PUSH
26037: LD_INT 44
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: IN
26045: IFFALSE 26066
// points := [ 14 , 50 , 16 ] ;
26047: LD_ADDR_VAR 0 9
26051: PUSH
26052: LD_INT 14
26054: PUSH
26055: LD_INT 50
26057: PUSH
26058: LD_INT 16
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26066: LD_VAR 0 6
26070: PPUSH
26071: CALL_OW 264
26075: PUSH
26076: LD_INT 6
26078: PUSH
26079: LD_INT 46
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: IN
26086: IFFALSE 26107
// points := [ 32 , 120 , 70 ] ;
26088: LD_ADDR_VAR 0 9
26092: PUSH
26093: LD_INT 32
26095: PUSH
26096: LD_INT 120
26098: PUSH
26099: LD_INT 70
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26107: LD_VAR 0 6
26111: PPUSH
26112: CALL_OW 264
26116: PUSH
26117: LD_INT 7
26119: PUSH
26120: LD_INT 28
26122: PUSH
26123: LD_INT 45
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: IN
26131: IFFALSE 26152
// points := [ 35 , 20 , 45 ] ;
26133: LD_ADDR_VAR 0 9
26137: PUSH
26138: LD_INT 35
26140: PUSH
26141: LD_INT 20
26143: PUSH
26144: LD_INT 45
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26152: LD_VAR 0 6
26156: PPUSH
26157: CALL_OW 264
26161: PUSH
26162: LD_INT 47
26164: PUSH
26165: EMPTY
26166: LIST
26167: IN
26168: IFFALSE 26189
// points := [ 67 , 45 , 75 ] ;
26170: LD_ADDR_VAR 0 9
26174: PUSH
26175: LD_INT 67
26177: PUSH
26178: LD_INT 45
26180: PUSH
26181: LD_INT 75
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26189: LD_VAR 0 6
26193: PPUSH
26194: CALL_OW 264
26198: PUSH
26199: LD_INT 26
26201: PUSH
26202: EMPTY
26203: LIST
26204: IN
26205: IFFALSE 26226
// points := [ 120 , 30 , 80 ] ;
26207: LD_ADDR_VAR 0 9
26211: PUSH
26212: LD_INT 120
26214: PUSH
26215: LD_INT 30
26217: PUSH
26218: LD_INT 80
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26226: LD_VAR 0 6
26230: PPUSH
26231: CALL_OW 264
26235: PUSH
26236: LD_INT 22
26238: PUSH
26239: EMPTY
26240: LIST
26241: IN
26242: IFFALSE 26263
// points := [ 40 , 1 , 1 ] ;
26244: LD_ADDR_VAR 0 9
26248: PUSH
26249: LD_INT 40
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26263: LD_VAR 0 6
26267: PPUSH
26268: CALL_OW 264
26272: PUSH
26273: LD_INT 29
26275: PUSH
26276: EMPTY
26277: LIST
26278: IN
26279: IFFALSE 26300
// points := [ 70 , 200 , 400 ] ;
26281: LD_ADDR_VAR 0 9
26285: PUSH
26286: LD_INT 70
26288: PUSH
26289: LD_INT 200
26291: PUSH
26292: LD_INT 400
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26300: LD_VAR 0 6
26304: PPUSH
26305: CALL_OW 264
26309: PUSH
26310: LD_INT 14
26312: PUSH
26313: LD_INT 53
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: IN
26320: IFFALSE 26341
// points := [ 40 , 10 , 20 ] ;
26322: LD_ADDR_VAR 0 9
26326: PUSH
26327: LD_INT 40
26329: PUSH
26330: LD_INT 10
26332: PUSH
26333: LD_INT 20
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26341: LD_VAR 0 6
26345: PPUSH
26346: CALL_OW 264
26350: PUSH
26351: LD_INT 9
26353: PUSH
26354: EMPTY
26355: LIST
26356: IN
26357: IFFALSE 26378
// points := [ 5 , 70 , 20 ] ;
26359: LD_ADDR_VAR 0 9
26363: PUSH
26364: LD_INT 5
26366: PUSH
26367: LD_INT 70
26369: PUSH
26370: LD_INT 20
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26378: LD_VAR 0 6
26382: PPUSH
26383: CALL_OW 264
26387: PUSH
26388: LD_INT 10
26390: PUSH
26391: EMPTY
26392: LIST
26393: IN
26394: IFFALSE 26415
// points := [ 35 , 110 , 70 ] ;
26396: LD_ADDR_VAR 0 9
26400: PUSH
26401: LD_INT 35
26403: PUSH
26404: LD_INT 110
26406: PUSH
26407: LD_INT 70
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26415: LD_VAR 0 6
26419: PPUSH
26420: CALL_OW 265
26424: PUSH
26425: LD_INT 25
26427: EQUAL
26428: IFFALSE 26449
// points := [ 80 , 65 , 100 ] ;
26430: LD_ADDR_VAR 0 9
26434: PUSH
26435: LD_INT 80
26437: PUSH
26438: LD_INT 65
26440: PUSH
26441: LD_INT 100
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26449: LD_VAR 0 6
26453: PPUSH
26454: CALL_OW 263
26458: PUSH
26459: LD_INT 1
26461: EQUAL
26462: IFFALSE 26497
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26464: LD_ADDR_VAR 0 10
26468: PUSH
26469: LD_VAR 0 10
26473: PUSH
26474: LD_VAR 0 6
26478: PPUSH
26479: CALL_OW 311
26483: PPUSH
26484: LD_INT 3
26486: PPUSH
26487: CALL_OW 259
26491: PUSH
26492: LD_INT 4
26494: MUL
26495: MUL
26496: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26497: LD_VAR 0 6
26501: PPUSH
26502: CALL_OW 263
26506: PUSH
26507: LD_INT 2
26509: EQUAL
26510: IFFALSE 26561
// begin j := IsControledBy ( i ) ;
26512: LD_ADDR_VAR 0 7
26516: PUSH
26517: LD_VAR 0 6
26521: PPUSH
26522: CALL_OW 312
26526: ST_TO_ADDR
// if j then
26527: LD_VAR 0 7
26531: IFFALSE 26561
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26533: LD_ADDR_VAR 0 10
26537: PUSH
26538: LD_VAR 0 10
26542: PUSH
26543: LD_VAR 0 7
26547: PPUSH
26548: LD_INT 3
26550: PPUSH
26551: CALL_OW 259
26555: PUSH
26556: LD_INT 3
26558: MUL
26559: MUL
26560: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26561: LD_VAR 0 6
26565: PPUSH
26566: CALL_OW 264
26570: PUSH
26571: LD_INT 5
26573: PUSH
26574: LD_INT 6
26576: PUSH
26577: LD_INT 46
26579: PUSH
26580: LD_INT 44
26582: PUSH
26583: LD_INT 47
26585: PUSH
26586: LD_INT 45
26588: PUSH
26589: LD_INT 28
26591: PUSH
26592: LD_INT 7
26594: PUSH
26595: LD_INT 27
26597: PUSH
26598: LD_INT 29
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: IN
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_INT 52
26621: PPUSH
26622: CALL_OW 321
26626: PUSH
26627: LD_INT 2
26629: EQUAL
26630: AND
26631: IFFALSE 26648
// bpoints := bpoints * 1.2 ;
26633: LD_ADDR_VAR 0 10
26637: PUSH
26638: LD_VAR 0 10
26642: PUSH
26643: LD_REAL  1.20000000000000E+0000
26646: MUL
26647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26648: LD_VAR 0 6
26652: PPUSH
26653: CALL_OW 264
26657: PUSH
26658: LD_INT 6
26660: PUSH
26661: LD_INT 46
26663: PUSH
26664: LD_INT 47
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: IN
26672: IFFALSE 26689
// bpoints := bpoints * 1.2 ;
26674: LD_ADDR_VAR 0 10
26678: PUSH
26679: LD_VAR 0 10
26683: PUSH
26684: LD_REAL  1.20000000000000E+0000
26687: MUL
26688: ST_TO_ADDR
// end ; unit_building :
26689: GO 26703
26691: LD_INT 3
26693: DOUBLE
26694: EQUAL
26695: IFTRUE 26699
26697: GO 26702
26699: POP
// ; end ;
26700: GO 26703
26702: POP
// for j = 1 to 3 do
26703: LD_ADDR_VAR 0 7
26707: PUSH
26708: DOUBLE
26709: LD_INT 1
26711: DEC
26712: ST_TO_ADDR
26713: LD_INT 3
26715: PUSH
26716: FOR_TO
26717: IFFALSE 26770
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26719: LD_ADDR_VAR 0 5
26723: PUSH
26724: LD_VAR 0 5
26728: PPUSH
26729: LD_VAR 0 7
26733: PPUSH
26734: LD_VAR 0 5
26738: PUSH
26739: LD_VAR 0 7
26743: ARRAY
26744: PUSH
26745: LD_VAR 0 9
26749: PUSH
26750: LD_VAR 0 7
26754: ARRAY
26755: PUSH
26756: LD_VAR 0 10
26760: MUL
26761: PLUS
26762: PPUSH
26763: CALL_OW 1
26767: ST_TO_ADDR
26768: GO 26716
26770: POP
26771: POP
// end ;
26772: GO 25255
26774: POP
26775: POP
// result := Replace ( result , 4 , tmp ) ;
26776: LD_ADDR_VAR 0 5
26780: PUSH
26781: LD_VAR 0 5
26785: PPUSH
26786: LD_INT 4
26788: PPUSH
26789: LD_VAR 0 8
26793: PPUSH
26794: CALL_OW 1
26798: ST_TO_ADDR
// end ;
26799: LD_VAR 0 5
26803: RET
// export function DangerAtRange ( unit , range ) ; begin
26804: LD_INT 0
26806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26807: LD_ADDR_VAR 0 3
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 255
26821: PPUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 250
26831: PPUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 251
26841: PPUSH
26842: LD_VAR 0 2
26846: PPUSH
26847: CALL 25107 0 4
26851: ST_TO_ADDR
// end ;
26852: LD_VAR 0 3
26856: RET
// export function DangerInArea ( side , area ) ; begin
26857: LD_INT 0
26859: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26860: LD_ADDR_VAR 0 3
26864: PUSH
26865: LD_VAR 0 2
26869: PPUSH
26870: LD_INT 81
26872: PUSH
26873: LD_VAR 0 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 70
26886: ST_TO_ADDR
// end ;
26887: LD_VAR 0 3
26891: RET
// export function IsExtension ( b ) ; begin
26892: LD_INT 0
26894: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26895: LD_ADDR_VAR 0 2
26899: PUSH
26900: LD_VAR 0 1
26904: PUSH
26905: LD_INT 23
26907: PUSH
26908: LD_INT 20
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_INT 17
26916: PUSH
26917: LD_INT 24
26919: PUSH
26920: LD_INT 21
26922: PUSH
26923: LD_INT 19
26925: PUSH
26926: LD_INT 16
26928: PUSH
26929: LD_INT 25
26931: PUSH
26932: LD_INT 18
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: IN
26947: ST_TO_ADDR
// end ;
26948: LD_VAR 0 2
26952: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26953: LD_INT 0
26955: PPUSH
26956: PPUSH
26957: PPUSH
// result := [ ] ;
26958: LD_ADDR_VAR 0 3
26962: PUSH
26963: EMPTY
26964: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26965: LD_ADDR_VAR 0 4
26969: PUSH
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 70
26989: ST_TO_ADDR
// if not tmp then
26990: LD_VAR 0 4
26994: NOT
26995: IFFALSE 26999
// exit ;
26997: GO 27057
// for i in tmp do
26999: LD_ADDR_VAR 0 5
27003: PUSH
27004: LD_VAR 0 4
27008: PUSH
27009: FOR_IN
27010: IFFALSE 27045
// if GetBase ( i ) <> base then
27012: LD_VAR 0 5
27016: PPUSH
27017: CALL_OW 274
27021: PUSH
27022: LD_VAR 0 1
27026: NONEQUAL
27027: IFFALSE 27043
// ComLinkToBase ( base , i ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: LD_VAR 0 5
27038: PPUSH
27039: CALL_OW 169
27043: GO 27009
27045: POP
27046: POP
// result := tmp ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 4
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 3
27061: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
// if BuildingStatus ( b ) = bs_build then
27066: LD_VAR 0 2
27070: PPUSH
27071: CALL_OW 461
27075: PUSH
27076: LD_INT 1
27078: EQUAL
27079: IFFALSE 27139
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27081: LD_VAR 0 1
27085: PPUSH
27086: LD_STRING h
27088: PUSH
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 250
27098: PUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 251
27108: PUSH
27109: LD_VAR 0 2
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: PPUSH
27135: CALL_OW 446
// end ;
27139: LD_VAR 0 3
27143: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27152: LD_VAR 0 1
27156: NOT
27157: PUSH
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 263
27167: PUSH
27168: LD_INT 2
27170: EQUAL
27171: NOT
27172: OR
27173: IFFALSE 27177
// exit ;
27175: GO 27493
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27177: LD_ADDR_VAR 0 6
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL_OW 255
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: PUSH
27202: LD_INT 30
27204: PUSH
27205: LD_INT 36
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 34
27214: PUSH
27215: LD_INT 31
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 69
27235: ST_TO_ADDR
// if not tmp then
27236: LD_VAR 0 6
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 27493
// result := [ ] ;
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: EMPTY
27251: ST_TO_ADDR
// for i in tmp do
27252: LD_ADDR_VAR 0 3
27256: PUSH
27257: LD_VAR 0 6
27261: PUSH
27262: FOR_IN
27263: IFFALSE 27334
// begin t := UnitsInside ( i ) ;
27265: LD_ADDR_VAR 0 4
27269: PUSH
27270: LD_VAR 0 3
27274: PPUSH
27275: CALL_OW 313
27279: ST_TO_ADDR
// if t then
27280: LD_VAR 0 4
27284: IFFALSE 27332
// for j in t do
27286: LD_ADDR_VAR 0 7
27290: PUSH
27291: LD_VAR 0 4
27295: PUSH
27296: FOR_IN
27297: IFFALSE 27330
// result := Insert ( result , result + 1 , j ) ;
27299: LD_ADDR_VAR 0 2
27303: PUSH
27304: LD_VAR 0 2
27308: PPUSH
27309: LD_VAR 0 2
27313: PUSH
27314: LD_INT 1
27316: PLUS
27317: PPUSH
27318: LD_VAR 0 7
27322: PPUSH
27323: CALL_OW 2
27327: ST_TO_ADDR
27328: GO 27296
27330: POP
27331: POP
// end ;
27332: GO 27262
27334: POP
27335: POP
// if not result then
27336: LD_VAR 0 2
27340: NOT
27341: IFFALSE 27345
// exit ;
27343: GO 27493
// mech := result [ 1 ] ;
27345: LD_ADDR_VAR 0 5
27349: PUSH
27350: LD_VAR 0 2
27354: PUSH
27355: LD_INT 1
27357: ARRAY
27358: ST_TO_ADDR
// if result > 1 then
27359: LD_VAR 0 2
27363: PUSH
27364: LD_INT 1
27366: GREATER
27367: IFFALSE 27479
// for i = 2 to result do
27369: LD_ADDR_VAR 0 3
27373: PUSH
27374: DOUBLE
27375: LD_INT 2
27377: DEC
27378: ST_TO_ADDR
27379: LD_VAR 0 2
27383: PUSH
27384: FOR_TO
27385: IFFALSE 27477
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27387: LD_ADDR_VAR 0 4
27391: PUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_VAR 0 3
27401: ARRAY
27402: PPUSH
27403: LD_INT 3
27405: PPUSH
27406: CALL_OW 259
27410: PUSH
27411: LD_VAR 0 2
27415: PUSH
27416: LD_VAR 0 3
27420: ARRAY
27421: PPUSH
27422: CALL_OW 432
27426: MINUS
27427: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27428: LD_VAR 0 4
27432: PUSH
27433: LD_VAR 0 5
27437: PPUSH
27438: LD_INT 3
27440: PPUSH
27441: CALL_OW 259
27445: PUSH
27446: LD_VAR 0 5
27450: PPUSH
27451: CALL_OW 432
27455: MINUS
27456: GREATEREQUAL
27457: IFFALSE 27475
// mech := result [ i ] ;
27459: LD_ADDR_VAR 0 5
27463: PUSH
27464: LD_VAR 0 2
27468: PUSH
27469: LD_VAR 0 3
27473: ARRAY
27474: ST_TO_ADDR
// end ;
27475: GO 27384
27477: POP
27478: POP
// ComLinkTo ( vehicle , mech ) ;
27479: LD_VAR 0 1
27483: PPUSH
27484: LD_VAR 0 5
27488: PPUSH
27489: CALL_OW 135
// end ;
27493: LD_VAR 0 2
27497: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
27508: PPUSH
27509: PPUSH
27510: PPUSH
27511: PPUSH
27512: PPUSH
// result := [ ] ;
27513: LD_ADDR_VAR 0 7
27517: PUSH
27518: EMPTY
27519: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27520: LD_VAR 0 1
27524: PPUSH
27525: CALL_OW 266
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: IN
27540: NOT
27541: IFFALSE 27545
// exit ;
27543: GO 29176
// if name then
27545: LD_VAR 0 3
27549: IFFALSE 27565
// SetBName ( base_dep , name ) ;
27551: LD_VAR 0 1
27555: PPUSH
27556: LD_VAR 0 3
27560: PPUSH
27561: CALL_OW 500
// base := GetBase ( base_dep ) ;
27565: LD_ADDR_VAR 0 15
27569: PUSH
27570: LD_VAR 0 1
27574: PPUSH
27575: CALL_OW 274
27579: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27580: LD_ADDR_VAR 0 16
27584: PUSH
27585: LD_VAR 0 1
27589: PPUSH
27590: CALL_OW 255
27594: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27595: LD_ADDR_VAR 0 17
27599: PUSH
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 248
27609: ST_TO_ADDR
// if sources then
27610: LD_VAR 0 5
27614: IFFALSE 27661
// for i = 1 to 3 do
27616: LD_ADDR_VAR 0 8
27620: PUSH
27621: DOUBLE
27622: LD_INT 1
27624: DEC
27625: ST_TO_ADDR
27626: LD_INT 3
27628: PUSH
27629: FOR_TO
27630: IFFALSE 27659
// AddResourceType ( base , i , sources [ i ] ) ;
27632: LD_VAR 0 15
27636: PPUSH
27637: LD_VAR 0 8
27641: PPUSH
27642: LD_VAR 0 5
27646: PUSH
27647: LD_VAR 0 8
27651: ARRAY
27652: PPUSH
27653: CALL_OW 276
27657: GO 27629
27659: POP
27660: POP
// buildings := GetBaseBuildings ( base , area ) ;
27661: LD_ADDR_VAR 0 18
27665: PUSH
27666: LD_VAR 0 15
27670: PPUSH
27671: LD_VAR 0 2
27675: PPUSH
27676: CALL 26953 0 2
27680: ST_TO_ADDR
// InitHc ;
27681: CALL_OW 19
// InitUc ;
27685: CALL_OW 18
// uc_side := side ;
27689: LD_ADDR_OWVAR 20
27693: PUSH
27694: LD_VAR 0 16
27698: ST_TO_ADDR
// uc_nation := nation ;
27699: LD_ADDR_OWVAR 21
27703: PUSH
27704: LD_VAR 0 17
27708: ST_TO_ADDR
// if buildings then
27709: LD_VAR 0 18
27713: IFFALSE 29035
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27715: LD_ADDR_VAR 0 19
27719: PUSH
27720: LD_VAR 0 18
27724: PPUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 30
27730: PUSH
27731: LD_INT 29
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: LD_INT 30
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: PPUSH
27753: CALL_OW 72
27757: ST_TO_ADDR
// if tmp then
27758: LD_VAR 0 19
27762: IFFALSE 27810
// for i in tmp do
27764: LD_ADDR_VAR 0 8
27768: PUSH
27769: LD_VAR 0 19
27773: PUSH
27774: FOR_IN
27775: IFFALSE 27808
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27777: LD_VAR 0 8
27781: PPUSH
27782: CALL_OW 250
27786: PPUSH
27787: LD_VAR 0 8
27791: PPUSH
27792: CALL_OW 251
27796: PPUSH
27797: LD_VAR 0 16
27801: PPUSH
27802: CALL_OW 441
27806: GO 27774
27808: POP
27809: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27810: LD_VAR 0 18
27814: PPUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 32
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 33
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 72
27847: IFFALSE 27935
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27849: LD_ADDR_VAR 0 8
27853: PUSH
27854: LD_VAR 0 18
27858: PPUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 30
27864: PUSH
27865: LD_INT 32
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 30
27874: PUSH
27875: LD_INT 33
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: PPUSH
27887: CALL_OW 72
27891: PUSH
27892: FOR_IN
27893: IFFALSE 27933
// begin if not GetBWeapon ( i ) then
27895: LD_VAR 0 8
27899: PPUSH
27900: CALL_OW 269
27904: NOT
27905: IFFALSE 27931
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27907: LD_VAR 0 8
27911: PPUSH
27912: LD_VAR 0 8
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: CALL 29181 0 2
27926: PPUSH
27927: CALL_OW 431
// end ;
27931: GO 27892
27933: POP
27934: POP
// end ; for i = 1 to personel do
27935: LD_ADDR_VAR 0 8
27939: PUSH
27940: DOUBLE
27941: LD_INT 1
27943: DEC
27944: ST_TO_ADDR
27945: LD_VAR 0 6
27949: PUSH
27950: FOR_TO
27951: IFFALSE 29015
// begin if i > 4 then
27953: LD_VAR 0 8
27957: PUSH
27958: LD_INT 4
27960: GREATER
27961: IFFALSE 27965
// break ;
27963: GO 29015
// case i of 1 :
27965: LD_VAR 0 8
27969: PUSH
27970: LD_INT 1
27972: DOUBLE
27973: EQUAL
27974: IFTRUE 27978
27976: GO 28058
27978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27979: LD_ADDR_VAR 0 12
27983: PUSH
27984: LD_VAR 0 18
27988: PPUSH
27989: LD_INT 22
27991: PUSH
27992: LD_VAR 0 16
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 58
28003: PUSH
28004: EMPTY
28005: LIST
28006: PUSH
28007: LD_INT 2
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: LD_INT 32
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 4
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 30
28032: PUSH
28033: LD_INT 5
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: PPUSH
28051: CALL_OW 72
28055: ST_TO_ADDR
28056: GO 28280
28058: LD_INT 2
28060: DOUBLE
28061: EQUAL
28062: IFTRUE 28066
28064: GO 28128
28066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28067: LD_ADDR_VAR 0 12
28071: PUSH
28072: LD_VAR 0 18
28076: PPUSH
28077: LD_INT 22
28079: PUSH
28080: LD_VAR 0 16
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 30
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 30
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 72
28125: ST_TO_ADDR
28126: GO 28280
28128: LD_INT 3
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28198
28136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28137: LD_ADDR_VAR 0 12
28141: PUSH
28142: LD_VAR 0 18
28146: PPUSH
28147: LD_INT 22
28149: PUSH
28150: LD_VAR 0 16
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 30
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 30
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: LIST
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 72
28195: ST_TO_ADDR
28196: GO 28280
28198: LD_INT 4
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28279
28206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28207: LD_ADDR_VAR 0 12
28211: PUSH
28212: LD_VAR 0 18
28216: PPUSH
28217: LD_INT 22
28219: PUSH
28220: LD_VAR 0 16
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: LD_INT 30
28234: PUSH
28235: LD_INT 6
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 30
28244: PUSH
28245: LD_INT 7
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 8
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 72
28276: ST_TO_ADDR
28277: GO 28280
28279: POP
// if i = 1 then
28280: LD_VAR 0 8
28284: PUSH
28285: LD_INT 1
28287: EQUAL
28288: IFFALSE 28399
// begin tmp := [ ] ;
28290: LD_ADDR_VAR 0 19
28294: PUSH
28295: EMPTY
28296: ST_TO_ADDR
// for j in f do
28297: LD_ADDR_VAR 0 9
28301: PUSH
28302: LD_VAR 0 12
28306: PUSH
28307: FOR_IN
28308: IFFALSE 28381
// if GetBType ( j ) = b_bunker then
28310: LD_VAR 0 9
28314: PPUSH
28315: CALL_OW 266
28319: PUSH
28320: LD_INT 32
28322: EQUAL
28323: IFFALSE 28350
// tmp := Insert ( tmp , 1 , j ) else
28325: LD_ADDR_VAR 0 19
28329: PUSH
28330: LD_VAR 0 19
28334: PPUSH
28335: LD_INT 1
28337: PPUSH
28338: LD_VAR 0 9
28342: PPUSH
28343: CALL_OW 2
28347: ST_TO_ADDR
28348: GO 28379
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28350: LD_ADDR_VAR 0 19
28354: PUSH
28355: LD_VAR 0 19
28359: PPUSH
28360: LD_VAR 0 19
28364: PUSH
28365: LD_INT 1
28367: PLUS
28368: PPUSH
28369: LD_VAR 0 9
28373: PPUSH
28374: CALL_OW 2
28378: ST_TO_ADDR
28379: GO 28307
28381: POP
28382: POP
// if tmp then
28383: LD_VAR 0 19
28387: IFFALSE 28399
// f := tmp ;
28389: LD_ADDR_VAR 0 12
28393: PUSH
28394: LD_VAR 0 19
28398: ST_TO_ADDR
// end ; x := personel [ i ] ;
28399: LD_ADDR_VAR 0 13
28403: PUSH
28404: LD_VAR 0 6
28408: PUSH
28409: LD_VAR 0 8
28413: ARRAY
28414: ST_TO_ADDR
// if x = - 1 then
28415: LD_VAR 0 13
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: EQUAL
28424: IFFALSE 28633
// begin for j in f do
28426: LD_ADDR_VAR 0 9
28430: PUSH
28431: LD_VAR 0 12
28435: PUSH
28436: FOR_IN
28437: IFFALSE 28629
// repeat InitHc ;
28439: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28443: LD_VAR 0 9
28447: PPUSH
28448: CALL_OW 266
28452: PUSH
28453: LD_INT 5
28455: EQUAL
28456: IFFALSE 28526
// begin if UnitsInside ( j ) < 3 then
28458: LD_VAR 0 9
28462: PPUSH
28463: CALL_OW 313
28467: PUSH
28468: LD_INT 3
28470: LESS
28471: IFFALSE 28507
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28473: LD_INT 0
28475: PPUSH
28476: LD_INT 5
28478: PUSH
28479: LD_INT 8
28481: PUSH
28482: LD_INT 9
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: PUSH
28490: LD_VAR 0 17
28494: ARRAY
28495: PPUSH
28496: LD_VAR 0 4
28500: PPUSH
28501: CALL_OW 380
28505: GO 28524
// PrepareHuman ( false , i , skill ) ;
28507: LD_INT 0
28509: PPUSH
28510: LD_VAR 0 8
28514: PPUSH
28515: LD_VAR 0 4
28519: PPUSH
28520: CALL_OW 380
// end else
28524: GO 28543
// PrepareHuman ( false , i , skill ) ;
28526: LD_INT 0
28528: PPUSH
28529: LD_VAR 0 8
28533: PPUSH
28534: LD_VAR 0 4
28538: PPUSH
28539: CALL_OW 380
// un := CreateHuman ;
28543: LD_ADDR_VAR 0 14
28547: PUSH
28548: CALL_OW 44
28552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28553: LD_ADDR_VAR 0 7
28557: PUSH
28558: LD_VAR 0 7
28562: PPUSH
28563: LD_INT 1
28565: PPUSH
28566: LD_VAR 0 14
28570: PPUSH
28571: CALL_OW 2
28575: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28576: LD_VAR 0 14
28580: PPUSH
28581: LD_VAR 0 9
28585: PPUSH
28586: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28590: LD_VAR 0 9
28594: PPUSH
28595: CALL_OW 313
28599: PUSH
28600: LD_INT 6
28602: EQUAL
28603: PUSH
28604: LD_VAR 0 9
28608: PPUSH
28609: CALL_OW 266
28613: PUSH
28614: LD_INT 32
28616: PUSH
28617: LD_INT 31
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: IN
28624: OR
28625: IFFALSE 28439
28627: GO 28436
28629: POP
28630: POP
// end else
28631: GO 29013
// for j = 1 to x do
28633: LD_ADDR_VAR 0 9
28637: PUSH
28638: DOUBLE
28639: LD_INT 1
28641: DEC
28642: ST_TO_ADDR
28643: LD_VAR 0 13
28647: PUSH
28648: FOR_TO
28649: IFFALSE 29011
// begin InitHc ;
28651: CALL_OW 19
// if not f then
28655: LD_VAR 0 12
28659: NOT
28660: IFFALSE 28749
// begin PrepareHuman ( false , i , skill ) ;
28662: LD_INT 0
28664: PPUSH
28665: LD_VAR 0 8
28669: PPUSH
28670: LD_VAR 0 4
28674: PPUSH
28675: CALL_OW 380
// un := CreateHuman ;
28679: LD_ADDR_VAR 0 14
28683: PUSH
28684: CALL_OW 44
28688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28689: LD_ADDR_VAR 0 7
28693: PUSH
28694: LD_VAR 0 7
28698: PPUSH
28699: LD_INT 1
28701: PPUSH
28702: LD_VAR 0 14
28706: PPUSH
28707: CALL_OW 2
28711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28712: LD_VAR 0 14
28716: PPUSH
28717: LD_VAR 0 1
28721: PPUSH
28722: CALL_OW 250
28726: PPUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 251
28736: PPUSH
28737: LD_INT 10
28739: PPUSH
28740: LD_INT 0
28742: PPUSH
28743: CALL_OW 50
// continue ;
28747: GO 28648
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28749: LD_VAR 0 12
28753: PUSH
28754: LD_INT 1
28756: ARRAY
28757: PPUSH
28758: CALL_OW 313
28762: PUSH
28763: LD_VAR 0 12
28767: PUSH
28768: LD_INT 1
28770: ARRAY
28771: PPUSH
28772: CALL_OW 266
28776: PUSH
28777: LD_INT 32
28779: PUSH
28780: LD_INT 31
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: IN
28787: AND
28788: PUSH
28789: LD_VAR 0 12
28793: PUSH
28794: LD_INT 1
28796: ARRAY
28797: PPUSH
28798: CALL_OW 313
28802: PUSH
28803: LD_INT 6
28805: EQUAL
28806: OR
28807: IFFALSE 28827
// f := Delete ( f , 1 ) ;
28809: LD_ADDR_VAR 0 12
28813: PUSH
28814: LD_VAR 0 12
28818: PPUSH
28819: LD_INT 1
28821: PPUSH
28822: CALL_OW 3
28826: ST_TO_ADDR
// if not f then
28827: LD_VAR 0 12
28831: NOT
28832: IFFALSE 28850
// begin x := x + 2 ;
28834: LD_ADDR_VAR 0 13
28838: PUSH
28839: LD_VAR 0 13
28843: PUSH
28844: LD_INT 2
28846: PLUS
28847: ST_TO_ADDR
// continue ;
28848: GO 28648
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28850: LD_VAR 0 12
28854: PUSH
28855: LD_INT 1
28857: ARRAY
28858: PPUSH
28859: CALL_OW 266
28863: PUSH
28864: LD_INT 5
28866: EQUAL
28867: IFFALSE 28941
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28869: LD_VAR 0 12
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: PPUSH
28878: CALL_OW 313
28882: PUSH
28883: LD_INT 3
28885: LESS
28886: IFFALSE 28922
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28888: LD_INT 0
28890: PPUSH
28891: LD_INT 5
28893: PUSH
28894: LD_INT 8
28896: PUSH
28897: LD_INT 9
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: PUSH
28905: LD_VAR 0 17
28909: ARRAY
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: CALL_OW 380
28920: GO 28939
// PrepareHuman ( false , i , skill ) ;
28922: LD_INT 0
28924: PPUSH
28925: LD_VAR 0 8
28929: PPUSH
28930: LD_VAR 0 4
28934: PPUSH
28935: CALL_OW 380
// end else
28939: GO 28958
// PrepareHuman ( false , i , skill ) ;
28941: LD_INT 0
28943: PPUSH
28944: LD_VAR 0 8
28948: PPUSH
28949: LD_VAR 0 4
28953: PPUSH
28954: CALL_OW 380
// un := CreateHuman ;
28958: LD_ADDR_VAR 0 14
28962: PUSH
28963: CALL_OW 44
28967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28968: LD_ADDR_VAR 0 7
28972: PUSH
28973: LD_VAR 0 7
28977: PPUSH
28978: LD_INT 1
28980: PPUSH
28981: LD_VAR 0 14
28985: PPUSH
28986: CALL_OW 2
28990: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28991: LD_VAR 0 14
28995: PPUSH
28996: LD_VAR 0 12
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PPUSH
29005: CALL_OW 52
// end ;
29009: GO 28648
29011: POP
29012: POP
// end ;
29013: GO 27950
29015: POP
29016: POP
// result := result ^ buildings ;
29017: LD_ADDR_VAR 0 7
29021: PUSH
29022: LD_VAR 0 7
29026: PUSH
29027: LD_VAR 0 18
29031: ADD
29032: ST_TO_ADDR
// end else
29033: GO 29176
// begin for i = 1 to personel do
29035: LD_ADDR_VAR 0 8
29039: PUSH
29040: DOUBLE
29041: LD_INT 1
29043: DEC
29044: ST_TO_ADDR
29045: LD_VAR 0 6
29049: PUSH
29050: FOR_TO
29051: IFFALSE 29174
// begin if i > 4 then
29053: LD_VAR 0 8
29057: PUSH
29058: LD_INT 4
29060: GREATER
29061: IFFALSE 29065
// break ;
29063: GO 29174
// x := personel [ i ] ;
29065: LD_ADDR_VAR 0 13
29069: PUSH
29070: LD_VAR 0 6
29074: PUSH
29075: LD_VAR 0 8
29079: ARRAY
29080: ST_TO_ADDR
// if x = - 1 then
29081: LD_VAR 0 13
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: EQUAL
29090: IFFALSE 29094
// continue ;
29092: GO 29050
// PrepareHuman ( false , i , skill ) ;
29094: LD_INT 0
29096: PPUSH
29097: LD_VAR 0 8
29101: PPUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: CALL_OW 380
// un := CreateHuman ;
29111: LD_ADDR_VAR 0 14
29115: PUSH
29116: CALL_OW 44
29120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29121: LD_VAR 0 14
29125: PPUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 250
29135: PPUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 251
29145: PPUSH
29146: LD_INT 10
29148: PPUSH
29149: LD_INT 0
29151: PPUSH
29152: CALL_OW 50
// result := result ^ un ;
29156: LD_ADDR_VAR 0 7
29160: PUSH
29161: LD_VAR 0 7
29165: PUSH
29166: LD_VAR 0 14
29170: ADD
29171: ST_TO_ADDR
// end ;
29172: GO 29050
29174: POP
29175: POP
// end ; end ;
29176: LD_VAR 0 7
29180: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29181: LD_INT 0
29183: PPUSH
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
// result := false ;
29199: LD_ADDR_VAR 0 3
29203: PUSH
29204: LD_INT 0
29206: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29207: LD_VAR 0 1
29211: NOT
29212: PUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 266
29222: PUSH
29223: LD_INT 32
29225: PUSH
29226: LD_INT 33
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: IN
29233: NOT
29234: OR
29235: IFFALSE 29239
// exit ;
29237: GO 30375
// nat := GetNation ( tower ) ;
29239: LD_ADDR_VAR 0 12
29243: PUSH
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 248
29253: ST_TO_ADDR
// side := GetSide ( tower ) ;
29254: LD_ADDR_VAR 0 16
29258: PUSH
29259: LD_VAR 0 1
29263: PPUSH
29264: CALL_OW 255
29268: ST_TO_ADDR
// x := GetX ( tower ) ;
29269: LD_ADDR_VAR 0 10
29273: PUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 250
29283: ST_TO_ADDR
// y := GetY ( tower ) ;
29284: LD_ADDR_VAR 0 11
29288: PUSH
29289: LD_VAR 0 1
29293: PPUSH
29294: CALL_OW 251
29298: ST_TO_ADDR
// if not x or not y then
29299: LD_VAR 0 10
29303: NOT
29304: PUSH
29305: LD_VAR 0 11
29309: NOT
29310: OR
29311: IFFALSE 29315
// exit ;
29313: GO 30375
// weapon := 0 ;
29315: LD_ADDR_VAR 0 18
29319: PUSH
29320: LD_INT 0
29322: ST_TO_ADDR
// fac_list := [ ] ;
29323: LD_ADDR_VAR 0 17
29327: PUSH
29328: EMPTY
29329: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29330: LD_ADDR_VAR 0 6
29334: PUSH
29335: LD_VAR 0 1
29339: PPUSH
29340: CALL_OW 274
29344: PPUSH
29345: LD_VAR 0 2
29349: PPUSH
29350: CALL 26953 0 2
29354: PPUSH
29355: LD_INT 30
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 72
29369: ST_TO_ADDR
// if not factories then
29370: LD_VAR 0 6
29374: NOT
29375: IFFALSE 29379
// exit ;
29377: GO 30375
// for i in factories do
29379: LD_ADDR_VAR 0 8
29383: PUSH
29384: LD_VAR 0 6
29388: PUSH
29389: FOR_IN
29390: IFFALSE 29415
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29392: LD_ADDR_VAR 0 17
29396: PUSH
29397: LD_VAR 0 17
29401: PUSH
29402: LD_VAR 0 8
29406: PPUSH
29407: CALL_OW 478
29411: UNION
29412: ST_TO_ADDR
29413: GO 29389
29415: POP
29416: POP
// if not fac_list then
29417: LD_VAR 0 17
29421: NOT
29422: IFFALSE 29426
// exit ;
29424: GO 30375
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29426: LD_ADDR_VAR 0 5
29430: PUSH
29431: LD_INT 4
29433: PUSH
29434: LD_INT 5
29436: PUSH
29437: LD_INT 9
29439: PUSH
29440: LD_INT 10
29442: PUSH
29443: LD_INT 6
29445: PUSH
29446: LD_INT 7
29448: PUSH
29449: LD_INT 11
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 27
29463: PUSH
29464: LD_INT 28
29466: PUSH
29467: LD_INT 26
29469: PUSH
29470: LD_INT 30
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 43
29481: PUSH
29482: LD_INT 44
29484: PUSH
29485: LD_INT 46
29487: PUSH
29488: LD_INT 45
29490: PUSH
29491: LD_INT 47
29493: PUSH
29494: LD_INT 49
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: LIST
29509: PUSH
29510: LD_VAR 0 12
29514: ARRAY
29515: ST_TO_ADDR
// for i in list do
29516: LD_ADDR_VAR 0 8
29520: PUSH
29521: LD_VAR 0 5
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29560
// if not i in fac_list then
29529: LD_VAR 0 8
29533: PUSH
29534: LD_VAR 0 17
29538: IN
29539: NOT
29540: IFFALSE 29558
// list := list diff i ;
29542: LD_ADDR_VAR 0 5
29546: PUSH
29547: LD_VAR 0 5
29551: PUSH
29552: LD_VAR 0 8
29556: DIFF
29557: ST_TO_ADDR
29558: GO 29526
29560: POP
29561: POP
// if not list then
29562: LD_VAR 0 5
29566: NOT
29567: IFFALSE 29571
// exit ;
29569: GO 30375
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29571: LD_VAR 0 12
29575: PUSH
29576: LD_INT 3
29578: EQUAL
29579: PUSH
29580: LD_INT 49
29582: PUSH
29583: LD_VAR 0 5
29587: IN
29588: AND
29589: PUSH
29590: LD_INT 31
29592: PPUSH
29593: LD_VAR 0 16
29597: PPUSH
29598: CALL_OW 321
29602: PUSH
29603: LD_INT 2
29605: EQUAL
29606: AND
29607: IFFALSE 29667
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29609: LD_INT 22
29611: PUSH
29612: LD_VAR 0 16
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 35
29623: PUSH
29624: LD_INT 49
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 91
29633: PUSH
29634: LD_VAR 0 1
29638: PUSH
29639: LD_INT 10
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 69
29656: NOT
29657: IFFALSE 29667
// weapon := ru_time_lapser ;
29659: LD_ADDR_VAR 0 18
29663: PUSH
29664: LD_INT 49
29666: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29667: LD_VAR 0 12
29671: PUSH
29672: LD_INT 1
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: IN
29682: PUSH
29683: LD_INT 11
29685: PUSH
29686: LD_VAR 0 5
29690: IN
29691: PUSH
29692: LD_INT 30
29694: PUSH
29695: LD_VAR 0 5
29699: IN
29700: OR
29701: AND
29702: PUSH
29703: LD_INT 6
29705: PPUSH
29706: LD_VAR 0 16
29710: PPUSH
29711: CALL_OW 321
29715: PUSH
29716: LD_INT 2
29718: EQUAL
29719: AND
29720: IFFALSE 29885
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29722: LD_INT 22
29724: PUSH
29725: LD_VAR 0 16
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 35
29739: PUSH
29740: LD_INT 11
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 35
29749: PUSH
29750: LD_INT 30
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 91
29764: PUSH
29765: LD_VAR 0 1
29769: PUSH
29770: LD_INT 18
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: PPUSH
29783: CALL_OW 69
29787: NOT
29788: PUSH
29789: LD_INT 22
29791: PUSH
29792: LD_VAR 0 16
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 30
29806: PUSH
29807: LD_INT 32
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 30
29816: PUSH
29817: LD_INT 33
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 91
29831: PUSH
29832: LD_VAR 0 1
29836: PUSH
29837: LD_INT 12
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: PPUSH
29853: CALL_OW 69
29857: PUSH
29858: LD_INT 2
29860: GREATER
29861: AND
29862: IFFALSE 29885
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29864: LD_ADDR_VAR 0 18
29868: PUSH
29869: LD_INT 11
29871: PUSH
29872: LD_INT 30
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_VAR 0 12
29883: ARRAY
29884: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29885: LD_VAR 0 18
29889: NOT
29890: PUSH
29891: LD_INT 40
29893: PPUSH
29894: LD_VAR 0 16
29898: PPUSH
29899: CALL_OW 321
29903: PUSH
29904: LD_INT 2
29906: EQUAL
29907: AND
29908: PUSH
29909: LD_INT 7
29911: PUSH
29912: LD_VAR 0 5
29916: IN
29917: PUSH
29918: LD_INT 28
29920: PUSH
29921: LD_VAR 0 5
29925: IN
29926: OR
29927: PUSH
29928: LD_INT 45
29930: PUSH
29931: LD_VAR 0 5
29935: IN
29936: OR
29937: AND
29938: IFFALSE 30192
// begin hex := GetHexInfo ( x , y ) ;
29940: LD_ADDR_VAR 0 4
29944: PUSH
29945: LD_VAR 0 10
29949: PPUSH
29950: LD_VAR 0 11
29954: PPUSH
29955: CALL_OW 546
29959: ST_TO_ADDR
// if hex [ 1 ] then
29960: LD_VAR 0 4
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: IFFALSE 29972
// exit ;
29970: GO 30375
// height := hex [ 2 ] ;
29972: LD_ADDR_VAR 0 15
29976: PUSH
29977: LD_VAR 0 4
29981: PUSH
29982: LD_INT 2
29984: ARRAY
29985: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29986: LD_ADDR_VAR 0 14
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: LD_INT 3
29999: PUSH
30000: LD_INT 5
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// for i in tmp do
30009: LD_ADDR_VAR 0 8
30013: PUSH
30014: LD_VAR 0 14
30018: PUSH
30019: FOR_IN
30020: IFFALSE 30190
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30022: LD_ADDR_VAR 0 9
30026: PUSH
30027: LD_VAR 0 10
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_INT 5
30039: PPUSH
30040: CALL_OW 272
30044: PUSH
30045: LD_VAR 0 11
30049: PPUSH
30050: LD_VAR 0 8
30054: PPUSH
30055: LD_INT 5
30057: PPUSH
30058: CALL_OW 273
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30067: LD_VAR 0 9
30071: PUSH
30072: LD_INT 1
30074: ARRAY
30075: PPUSH
30076: LD_VAR 0 9
30080: PUSH
30081: LD_INT 2
30083: ARRAY
30084: PPUSH
30085: CALL_OW 488
30089: IFFALSE 30188
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30091: LD_ADDR_VAR 0 4
30095: PUSH
30096: LD_VAR 0 9
30100: PUSH
30101: LD_INT 1
30103: ARRAY
30104: PPUSH
30105: LD_VAR 0 9
30109: PUSH
30110: LD_INT 2
30112: ARRAY
30113: PPUSH
30114: CALL_OW 546
30118: ST_TO_ADDR
// if hex [ 1 ] then
30119: LD_VAR 0 4
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: IFFALSE 30131
// continue ;
30129: GO 30019
// h := hex [ 2 ] ;
30131: LD_ADDR_VAR 0 13
30135: PUSH
30136: LD_VAR 0 4
30140: PUSH
30141: LD_INT 2
30143: ARRAY
30144: ST_TO_ADDR
// if h + 7 < height then
30145: LD_VAR 0 13
30149: PUSH
30150: LD_INT 7
30152: PLUS
30153: PUSH
30154: LD_VAR 0 15
30158: LESS
30159: IFFALSE 30188
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30161: LD_ADDR_VAR 0 18
30165: PUSH
30166: LD_INT 7
30168: PUSH
30169: LD_INT 28
30171: PUSH
30172: LD_INT 45
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: PUSH
30180: LD_VAR 0 12
30184: ARRAY
30185: ST_TO_ADDR
// break ;
30186: GO 30190
// end ; end ; end ;
30188: GO 30019
30190: POP
30191: POP
// end ; if not weapon then
30192: LD_VAR 0 18
30196: NOT
30197: IFFALSE 30257
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 5
30208: PUSH
30209: LD_INT 11
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 49
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: DIFF
30223: ST_TO_ADDR
// if not list then
30224: LD_VAR 0 5
30228: NOT
30229: IFFALSE 30233
// exit ;
30231: GO 30375
// weapon := list [ rand ( 1 , list ) ] ;
30233: LD_ADDR_VAR 0 18
30237: PUSH
30238: LD_VAR 0 5
30242: PUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_VAR 0 5
30250: PPUSH
30251: CALL_OW 12
30255: ARRAY
30256: ST_TO_ADDR
// end ; if weapon then
30257: LD_VAR 0 18
30261: IFFALSE 30375
// begin tmp := CostOfWeapon ( weapon ) ;
30263: LD_ADDR_VAR 0 14
30267: PUSH
30268: LD_VAR 0 18
30272: PPUSH
30273: CALL_OW 451
30277: ST_TO_ADDR
// j := GetBase ( tower ) ;
30278: LD_ADDR_VAR 0 9
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 274
30292: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30293: LD_VAR 0 9
30297: PPUSH
30298: LD_INT 1
30300: PPUSH
30301: CALL_OW 275
30305: PUSH
30306: LD_VAR 0 14
30310: PUSH
30311: LD_INT 1
30313: ARRAY
30314: GREATEREQUAL
30315: PUSH
30316: LD_VAR 0 9
30320: PPUSH
30321: LD_INT 2
30323: PPUSH
30324: CALL_OW 275
30328: PUSH
30329: LD_VAR 0 14
30333: PUSH
30334: LD_INT 2
30336: ARRAY
30337: GREATEREQUAL
30338: AND
30339: PUSH
30340: LD_VAR 0 9
30344: PPUSH
30345: LD_INT 3
30347: PPUSH
30348: CALL_OW 275
30352: PUSH
30353: LD_VAR 0 14
30357: PUSH
30358: LD_INT 3
30360: ARRAY
30361: GREATEREQUAL
30362: AND
30363: IFFALSE 30375
// result := weapon ;
30365: LD_ADDR_VAR 0 3
30369: PUSH
30370: LD_VAR 0 18
30374: ST_TO_ADDR
// end ; end ;
30375: LD_VAR 0 3
30379: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30380: LD_INT 0
30382: PPUSH
30383: PPUSH
// result := true ;
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_INT 1
30391: ST_TO_ADDR
// if array1 = array2 then
30392: LD_VAR 0 1
30396: PUSH
30397: LD_VAR 0 2
30401: EQUAL
30402: IFFALSE 30462
// begin for i = 1 to array1 do
30404: LD_ADDR_VAR 0 4
30408: PUSH
30409: DOUBLE
30410: LD_INT 1
30412: DEC
30413: ST_TO_ADDR
30414: LD_VAR 0 1
30418: PUSH
30419: FOR_TO
30420: IFFALSE 30458
// if array1 [ i ] <> array2 [ i ] then
30422: LD_VAR 0 1
30426: PUSH
30427: LD_VAR 0 4
30431: ARRAY
30432: PUSH
30433: LD_VAR 0 2
30437: PUSH
30438: LD_VAR 0 4
30442: ARRAY
30443: NONEQUAL
30444: IFFALSE 30456
// begin result := false ;
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 0
30453: ST_TO_ADDR
// break ;
30454: GO 30458
// end ;
30456: GO 30419
30458: POP
30459: POP
// end else
30460: GO 30470
// result := false ;
30462: LD_ADDR_VAR 0 3
30466: PUSH
30467: LD_INT 0
30469: ST_TO_ADDR
// end ;
30470: LD_VAR 0 3
30474: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
30479: PPUSH
// pom := GetBase ( fac ) ;
30480: LD_ADDR_VAR 0 5
30484: PUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 274
30494: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30495: LD_ADDR_VAR 0 4
30499: PUSH
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: LD_VAR 0 2
30513: PUSH
30514: LD_INT 2
30516: ARRAY
30517: PPUSH
30518: LD_VAR 0 2
30522: PUSH
30523: LD_INT 3
30525: ARRAY
30526: PPUSH
30527: LD_VAR 0 2
30531: PUSH
30532: LD_INT 4
30534: ARRAY
30535: PPUSH
30536: CALL_OW 449
30540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30541: LD_ADDR_VAR 0 3
30545: PUSH
30546: LD_VAR 0 5
30550: PPUSH
30551: LD_INT 1
30553: PPUSH
30554: CALL_OW 275
30558: PUSH
30559: LD_VAR 0 4
30563: PUSH
30564: LD_INT 1
30566: ARRAY
30567: GREATEREQUAL
30568: PUSH
30569: LD_VAR 0 5
30573: PPUSH
30574: LD_INT 2
30576: PPUSH
30577: CALL_OW 275
30581: PUSH
30582: LD_VAR 0 4
30586: PUSH
30587: LD_INT 2
30589: ARRAY
30590: GREATEREQUAL
30591: AND
30592: PUSH
30593: LD_VAR 0 5
30597: PPUSH
30598: LD_INT 3
30600: PPUSH
30601: CALL_OW 275
30605: PUSH
30606: LD_VAR 0 4
30610: PUSH
30611: LD_INT 3
30613: ARRAY
30614: GREATEREQUAL
30615: AND
30616: ST_TO_ADDR
// end ;
30617: LD_VAR 0 3
30621: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
30626: PPUSH
30627: PPUSH
// pom := GetBase ( building ) ;
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 274
30642: ST_TO_ADDR
// if not pom then
30643: LD_VAR 0 3
30647: NOT
30648: IFFALSE 30652
// exit ;
30650: GO 30822
// btype := GetBType ( building ) ;
30652: LD_ADDR_VAR 0 5
30656: PUSH
30657: LD_VAR 0 1
30661: PPUSH
30662: CALL_OW 266
30666: ST_TO_ADDR
// if btype = b_armoury then
30667: LD_VAR 0 5
30671: PUSH
30672: LD_INT 4
30674: EQUAL
30675: IFFALSE 30685
// btype := b_barracks ;
30677: LD_ADDR_VAR 0 5
30681: PUSH
30682: LD_INT 5
30684: ST_TO_ADDR
// if btype = b_depot then
30685: LD_VAR 0 5
30689: PUSH
30690: LD_INT 0
30692: EQUAL
30693: IFFALSE 30703
// btype := b_warehouse ;
30695: LD_ADDR_VAR 0 5
30699: PUSH
30700: LD_INT 1
30702: ST_TO_ADDR
// if btype = b_workshop then
30703: LD_VAR 0 5
30707: PUSH
30708: LD_INT 2
30710: EQUAL
30711: IFFALSE 30721
// btype := b_factory ;
30713: LD_ADDR_VAR 0 5
30717: PUSH
30718: LD_INT 3
30720: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30721: LD_ADDR_VAR 0 4
30725: PUSH
30726: LD_VAR 0 5
30730: PPUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 248
30740: PPUSH
30741: CALL_OW 450
30745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30746: LD_ADDR_VAR 0 2
30750: PUSH
30751: LD_VAR 0 3
30755: PPUSH
30756: LD_INT 1
30758: PPUSH
30759: CALL_OW 275
30763: PUSH
30764: LD_VAR 0 4
30768: PUSH
30769: LD_INT 1
30771: ARRAY
30772: GREATEREQUAL
30773: PUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: LD_INT 2
30781: PPUSH
30782: CALL_OW 275
30786: PUSH
30787: LD_VAR 0 4
30791: PUSH
30792: LD_INT 2
30794: ARRAY
30795: GREATEREQUAL
30796: AND
30797: PUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: LD_INT 3
30805: PPUSH
30806: CALL_OW 275
30810: PUSH
30811: LD_VAR 0 4
30815: PUSH
30816: LD_INT 3
30818: ARRAY
30819: GREATEREQUAL
30820: AND
30821: ST_TO_ADDR
// end ;
30822: LD_VAR 0 2
30826: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30827: LD_INT 0
30829: PPUSH
30830: PPUSH
30831: PPUSH
// pom := GetBase ( building ) ;
30832: LD_ADDR_VAR 0 4
30836: PUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 274
30846: ST_TO_ADDR
// if not pom then
30847: LD_VAR 0 4
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 30957
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30856: LD_ADDR_VAR 0 5
30860: PUSH
30861: LD_VAR 0 2
30865: PPUSH
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL_OW 248
30875: PPUSH
30876: CALL_OW 450
30880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30881: LD_ADDR_VAR 0 3
30885: PUSH
30886: LD_VAR 0 4
30890: PPUSH
30891: LD_INT 1
30893: PPUSH
30894: CALL_OW 275
30898: PUSH
30899: LD_VAR 0 5
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: GREATEREQUAL
30908: PUSH
30909: LD_VAR 0 4
30913: PPUSH
30914: LD_INT 2
30916: PPUSH
30917: CALL_OW 275
30921: PUSH
30922: LD_VAR 0 5
30926: PUSH
30927: LD_INT 2
30929: ARRAY
30930: GREATEREQUAL
30931: AND
30932: PUSH
30933: LD_VAR 0 4
30937: PPUSH
30938: LD_INT 3
30940: PPUSH
30941: CALL_OW 275
30945: PUSH
30946: LD_VAR 0 5
30950: PUSH
30951: LD_INT 3
30953: ARRAY
30954: GREATEREQUAL
30955: AND
30956: ST_TO_ADDR
// end ;
30957: LD_VAR 0 3
30961: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30962: LD_INT 0
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
// result := false ;
30974: LD_ADDR_VAR 0 6
30978: PUSH
30979: LD_INT 0
30981: ST_TO_ADDR
// if not base or not btype or not x or not y then
30982: LD_VAR 0 1
30986: NOT
30987: PUSH
30988: LD_VAR 0 2
30992: NOT
30993: OR
30994: PUSH
30995: LD_VAR 0 3
30999: NOT
31000: OR
31001: PUSH
31002: LD_VAR 0 4
31006: NOT
31007: OR
31008: IFFALSE 31012
// exit ;
31010: GO 31621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31012: LD_ADDR_VAR 0 12
31016: PUSH
31017: LD_VAR 0 2
31021: PPUSH
31022: LD_VAR 0 3
31026: PPUSH
31027: LD_VAR 0 4
31031: PPUSH
31032: LD_VAR 0 5
31036: PPUSH
31037: LD_VAR 0 1
31041: PUSH
31042: LD_INT 1
31044: ARRAY
31045: PPUSH
31046: CALL_OW 248
31050: PPUSH
31051: LD_INT 0
31053: PPUSH
31054: CALL 32458 0 6
31058: ST_TO_ADDR
// if not hexes then
31059: LD_VAR 0 12
31063: NOT
31064: IFFALSE 31068
// exit ;
31066: GO 31621
// for i = 1 to hexes do
31068: LD_ADDR_VAR 0 7
31072: PUSH
31073: DOUBLE
31074: LD_INT 1
31076: DEC
31077: ST_TO_ADDR
31078: LD_VAR 0 12
31082: PUSH
31083: FOR_TO
31084: IFFALSE 31619
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31086: LD_ADDR_VAR 0 11
31090: PUSH
31091: LD_VAR 0 12
31095: PUSH
31096: LD_VAR 0 7
31100: ARRAY
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: LD_VAR 0 12
31110: PUSH
31111: LD_VAR 0 7
31115: ARRAY
31116: PUSH
31117: LD_INT 2
31119: ARRAY
31120: PPUSH
31121: CALL_OW 428
31125: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31126: LD_VAR 0 12
31130: PUSH
31131: LD_VAR 0 7
31135: ARRAY
31136: PUSH
31137: LD_INT 1
31139: ARRAY
31140: PPUSH
31141: LD_VAR 0 12
31145: PUSH
31146: LD_VAR 0 7
31150: ARRAY
31151: PUSH
31152: LD_INT 2
31154: ARRAY
31155: PPUSH
31156: CALL_OW 351
31160: PUSH
31161: LD_VAR 0 12
31165: PUSH
31166: LD_VAR 0 7
31170: ARRAY
31171: PUSH
31172: LD_INT 1
31174: ARRAY
31175: PPUSH
31176: LD_VAR 0 12
31180: PUSH
31181: LD_VAR 0 7
31185: ARRAY
31186: PUSH
31187: LD_INT 2
31189: ARRAY
31190: PPUSH
31191: CALL_OW 488
31195: NOT
31196: OR
31197: PUSH
31198: LD_VAR 0 11
31202: PPUSH
31203: CALL_OW 247
31207: PUSH
31208: LD_INT 3
31210: EQUAL
31211: OR
31212: IFFALSE 31218
// exit ;
31214: POP
31215: POP
31216: GO 31621
// if not tmp or not tmp in base then
31218: LD_VAR 0 11
31222: NOT
31223: PUSH
31224: LD_VAR 0 11
31228: PUSH
31229: LD_VAR 0 1
31233: IN
31234: NOT
31235: OR
31236: IFFALSE 31240
// continue ;
31238: GO 31083
// result := true ;
31240: LD_ADDR_VAR 0 6
31244: PUSH
31245: LD_INT 1
31247: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31248: LD_ADDR_VAR 0 15
31252: PUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: LD_INT 22
31260: PUSH
31261: LD_VAR 0 11
31265: PPUSH
31266: CALL_OW 255
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: LD_INT 30
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 30
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PPUSH
31307: CALL_OW 72
31311: ST_TO_ADDR
// if dep then
31312: LD_VAR 0 15
31316: IFFALSE 31452
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31318: LD_ADDR_VAR 0 14
31322: PUSH
31323: LD_VAR 0 15
31327: PUSH
31328: LD_INT 1
31330: ARRAY
31331: PPUSH
31332: CALL_OW 250
31336: PPUSH
31337: LD_VAR 0 15
31341: PUSH
31342: LD_INT 1
31344: ARRAY
31345: PPUSH
31346: CALL_OW 254
31350: PPUSH
31351: LD_INT 5
31353: PPUSH
31354: CALL_OW 272
31358: PUSH
31359: LD_VAR 0 15
31363: PUSH
31364: LD_INT 1
31366: ARRAY
31367: PPUSH
31368: CALL_OW 251
31372: PPUSH
31373: LD_VAR 0 15
31377: PUSH
31378: LD_INT 1
31380: ARRAY
31381: PPUSH
31382: CALL_OW 254
31386: PPUSH
31387: LD_INT 5
31389: PPUSH
31390: CALL_OW 273
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31399: LD_VAR 0 14
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PPUSH
31408: LD_VAR 0 14
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PPUSH
31417: CALL_OW 488
31421: IFFALSE 31452
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31423: LD_VAR 0 11
31427: PPUSH
31428: LD_VAR 0 14
31432: PUSH
31433: LD_INT 1
31435: ARRAY
31436: PPUSH
31437: LD_VAR 0 14
31441: PUSH
31442: LD_INT 2
31444: ARRAY
31445: PPUSH
31446: CALL_OW 111
// continue ;
31450: GO 31083
// end ; end ; r := GetDir ( tmp ) ;
31452: LD_ADDR_VAR 0 13
31456: PUSH
31457: LD_VAR 0 11
31461: PPUSH
31462: CALL_OW 254
31466: ST_TO_ADDR
// if r = 5 then
31467: LD_VAR 0 13
31471: PUSH
31472: LD_INT 5
31474: EQUAL
31475: IFFALSE 31485
// r := 0 ;
31477: LD_ADDR_VAR 0 13
31481: PUSH
31482: LD_INT 0
31484: ST_TO_ADDR
// for j = r to 5 do
31485: LD_ADDR_VAR 0 8
31489: PUSH
31490: DOUBLE
31491: LD_VAR 0 13
31495: DEC
31496: ST_TO_ADDR
31497: LD_INT 5
31499: PUSH
31500: FOR_TO
31501: IFFALSE 31615
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31503: LD_ADDR_VAR 0 9
31507: PUSH
31508: LD_VAR 0 11
31512: PPUSH
31513: CALL_OW 250
31517: PPUSH
31518: LD_VAR 0 8
31522: PPUSH
31523: LD_INT 2
31525: PPUSH
31526: CALL_OW 272
31530: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31531: LD_ADDR_VAR 0 10
31535: PUSH
31536: LD_VAR 0 11
31540: PPUSH
31541: CALL_OW 251
31545: PPUSH
31546: LD_VAR 0 8
31550: PPUSH
31551: LD_INT 2
31553: PPUSH
31554: CALL_OW 273
31558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31559: LD_VAR 0 9
31563: PPUSH
31564: LD_VAR 0 10
31568: PPUSH
31569: CALL_OW 488
31573: PUSH
31574: LD_VAR 0 9
31578: PPUSH
31579: LD_VAR 0 10
31583: PPUSH
31584: CALL_OW 428
31588: NOT
31589: AND
31590: IFFALSE 31613
// begin ComMoveXY ( tmp , _x , _y ) ;
31592: LD_VAR 0 11
31596: PPUSH
31597: LD_VAR 0 9
31601: PPUSH
31602: LD_VAR 0 10
31606: PPUSH
31607: CALL_OW 111
// break ;
31611: GO 31615
// end ; end ;
31613: GO 31500
31615: POP
31616: POP
// end ;
31617: GO 31083
31619: POP
31620: POP
// end ;
31621: LD_VAR 0 6
31625: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31626: LD_INT 0
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
// result := false ;
31638: LD_ADDR_VAR 0 6
31642: PUSH
31643: LD_INT 0
31645: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31646: LD_VAR 0 1
31650: NOT
31651: PUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 266
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: IN
31672: NOT
31673: OR
31674: PUSH
31675: LD_VAR 0 2
31679: NOT
31680: OR
31681: PUSH
31682: LD_VAR 0 5
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: LD_INT 5
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: IN
31713: NOT
31714: OR
31715: PUSH
31716: LD_VAR 0 3
31720: PPUSH
31721: LD_VAR 0 4
31725: PPUSH
31726: CALL_OW 488
31730: NOT
31731: OR
31732: IFFALSE 31736
// exit ;
31734: GO 32453
// pom := GetBase ( depot ) ;
31736: LD_ADDR_VAR 0 10
31740: PUSH
31741: LD_VAR 0 1
31745: PPUSH
31746: CALL_OW 274
31750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31751: LD_ADDR_VAR 0 11
31755: PUSH
31756: LD_VAR 0 2
31760: PPUSH
31761: LD_VAR 0 1
31765: PPUSH
31766: CALL_OW 248
31770: PPUSH
31771: CALL_OW 450
31775: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31776: LD_VAR 0 10
31780: PPUSH
31781: LD_INT 1
31783: PPUSH
31784: CALL_OW 275
31788: PUSH
31789: LD_VAR 0 11
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: GREATEREQUAL
31798: PUSH
31799: LD_VAR 0 10
31803: PPUSH
31804: LD_INT 2
31806: PPUSH
31807: CALL_OW 275
31811: PUSH
31812: LD_VAR 0 11
31816: PUSH
31817: LD_INT 2
31819: ARRAY
31820: GREATEREQUAL
31821: AND
31822: PUSH
31823: LD_VAR 0 10
31827: PPUSH
31828: LD_INT 3
31830: PPUSH
31831: CALL_OW 275
31835: PUSH
31836: LD_VAR 0 11
31840: PUSH
31841: LD_INT 3
31843: ARRAY
31844: GREATEREQUAL
31845: AND
31846: NOT
31847: IFFALSE 31851
// exit ;
31849: GO 32453
// if GetBType ( depot ) = b_depot then
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 266
31860: PUSH
31861: LD_INT 0
31863: EQUAL
31864: IFFALSE 31876
// dist := 28 else
31866: LD_ADDR_VAR 0 14
31870: PUSH
31871: LD_INT 28
31873: ST_TO_ADDR
31874: GO 31884
// dist := 36 ;
31876: LD_ADDR_VAR 0 14
31880: PUSH
31881: LD_INT 36
31883: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31884: LD_VAR 0 1
31888: PPUSH
31889: LD_VAR 0 3
31893: PPUSH
31894: LD_VAR 0 4
31898: PPUSH
31899: CALL_OW 297
31903: PUSH
31904: LD_VAR 0 14
31908: GREATER
31909: IFFALSE 31913
// exit ;
31911: GO 32453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31913: LD_ADDR_VAR 0 12
31917: PUSH
31918: LD_VAR 0 2
31922: PPUSH
31923: LD_VAR 0 3
31927: PPUSH
31928: LD_VAR 0 4
31932: PPUSH
31933: LD_VAR 0 5
31937: PPUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 248
31947: PPUSH
31948: LD_INT 0
31950: PPUSH
31951: CALL 32458 0 6
31955: ST_TO_ADDR
// if not hexes then
31956: LD_VAR 0 12
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 32453
// hex := GetHexInfo ( x , y ) ;
31965: LD_ADDR_VAR 0 15
31969: PUSH
31970: LD_VAR 0 3
31974: PPUSH
31975: LD_VAR 0 4
31979: PPUSH
31980: CALL_OW 546
31984: ST_TO_ADDR
// if hex [ 1 ] then
31985: LD_VAR 0 15
31989: PUSH
31990: LD_INT 1
31992: ARRAY
31993: IFFALSE 31997
// exit ;
31995: GO 32453
// height := hex [ 2 ] ;
31997: LD_ADDR_VAR 0 13
32001: PUSH
32002: LD_VAR 0 15
32006: PUSH
32007: LD_INT 2
32009: ARRAY
32010: ST_TO_ADDR
// for i = 1 to hexes do
32011: LD_ADDR_VAR 0 7
32015: PUSH
32016: DOUBLE
32017: LD_INT 1
32019: DEC
32020: ST_TO_ADDR
32021: LD_VAR 0 12
32025: PUSH
32026: FOR_TO
32027: IFFALSE 32357
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32029: LD_VAR 0 12
32033: PUSH
32034: LD_VAR 0 7
32038: ARRAY
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 12
32048: PUSH
32049: LD_VAR 0 7
32053: ARRAY
32054: PUSH
32055: LD_INT 2
32057: ARRAY
32058: PPUSH
32059: CALL_OW 488
32063: NOT
32064: PUSH
32065: LD_VAR 0 12
32069: PUSH
32070: LD_VAR 0 7
32074: ARRAY
32075: PUSH
32076: LD_INT 1
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 12
32084: PUSH
32085: LD_VAR 0 7
32089: ARRAY
32090: PUSH
32091: LD_INT 2
32093: ARRAY
32094: PPUSH
32095: CALL_OW 428
32099: PUSH
32100: LD_INT 0
32102: GREATER
32103: OR
32104: PUSH
32105: LD_VAR 0 12
32109: PUSH
32110: LD_VAR 0 7
32114: ARRAY
32115: PUSH
32116: LD_INT 1
32118: ARRAY
32119: PPUSH
32120: LD_VAR 0 12
32124: PUSH
32125: LD_VAR 0 7
32129: ARRAY
32130: PUSH
32131: LD_INT 2
32133: ARRAY
32134: PPUSH
32135: CALL_OW 351
32139: OR
32140: IFFALSE 32146
// exit ;
32142: POP
32143: POP
32144: GO 32453
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32146: LD_ADDR_VAR 0 8
32150: PUSH
32151: LD_VAR 0 12
32155: PUSH
32156: LD_VAR 0 7
32160: ARRAY
32161: PUSH
32162: LD_INT 1
32164: ARRAY
32165: PPUSH
32166: LD_VAR 0 12
32170: PUSH
32171: LD_VAR 0 7
32175: ARRAY
32176: PUSH
32177: LD_INT 2
32179: ARRAY
32180: PPUSH
32181: CALL_OW 546
32185: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32186: LD_VAR 0 8
32190: PUSH
32191: LD_INT 1
32193: ARRAY
32194: PUSH
32195: LD_VAR 0 8
32199: PUSH
32200: LD_INT 2
32202: ARRAY
32203: PUSH
32204: LD_VAR 0 13
32208: PUSH
32209: LD_INT 2
32211: PLUS
32212: GREATER
32213: OR
32214: PUSH
32215: LD_VAR 0 8
32219: PUSH
32220: LD_INT 2
32222: ARRAY
32223: PUSH
32224: LD_VAR 0 13
32228: PUSH
32229: LD_INT 2
32231: MINUS
32232: LESS
32233: OR
32234: PUSH
32235: LD_VAR 0 8
32239: PUSH
32240: LD_INT 3
32242: ARRAY
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 8
32249: PUSH
32250: LD_INT 9
32252: PUSH
32253: LD_INT 10
32255: PUSH
32256: LD_INT 11
32258: PUSH
32259: LD_INT 12
32261: PUSH
32262: LD_INT 13
32264: PUSH
32265: LD_INT 16
32267: PUSH
32268: LD_INT 17
32270: PUSH
32271: LD_INT 18
32273: PUSH
32274: LD_INT 19
32276: PUSH
32277: LD_INT 20
32279: PUSH
32280: LD_INT 21
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: IN
32298: NOT
32299: OR
32300: PUSH
32301: LD_VAR 0 8
32305: PUSH
32306: LD_INT 5
32308: ARRAY
32309: NOT
32310: OR
32311: PUSH
32312: LD_VAR 0 8
32316: PUSH
32317: LD_INT 6
32319: ARRAY
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: LD_INT 7
32329: PUSH
32330: LD_INT 9
32332: PUSH
32333: LD_INT 10
32335: PUSH
32336: LD_INT 11
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: IN
32347: NOT
32348: OR
32349: IFFALSE 32355
// exit ;
32351: POP
32352: POP
32353: GO 32453
// end ;
32355: GO 32026
32357: POP
32358: POP
// side := GetSide ( depot ) ;
32359: LD_ADDR_VAR 0 9
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 255
32373: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32374: LD_VAR 0 9
32378: PPUSH
32379: LD_VAR 0 3
32383: PPUSH
32384: LD_VAR 0 4
32388: PPUSH
32389: LD_INT 20
32391: PPUSH
32392: CALL 25107 0 4
32396: PUSH
32397: LD_INT 4
32399: ARRAY
32400: IFFALSE 32404
// exit ;
32402: GO 32453
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32404: LD_VAR 0 2
32408: PUSH
32409: LD_INT 29
32411: PUSH
32412: LD_INT 30
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: IN
32419: PUSH
32420: LD_VAR 0 3
32424: PPUSH
32425: LD_VAR 0 4
32429: PPUSH
32430: LD_VAR 0 9
32434: PPUSH
32435: CALL_OW 440
32439: NOT
32440: AND
32441: IFFALSE 32445
// exit ;
32443: GO 32453
// result := true ;
32445: LD_ADDR_VAR 0 6
32449: PUSH
32450: LD_INT 1
32452: ST_TO_ADDR
// end ;
32453: LD_VAR 0 6
32457: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32458: LD_INT 0
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
32515: PPUSH
32516: PPUSH
32517: PPUSH
// result = [ ] ;
32518: LD_ADDR_VAR 0 7
32522: PUSH
32523: EMPTY
32524: ST_TO_ADDR
// temp_list = [ ] ;
32525: LD_ADDR_VAR 0 9
32529: PUSH
32530: EMPTY
32531: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32532: LD_VAR 0 4
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: LD_INT 4
32551: PUSH
32552: LD_INT 5
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: IN
32563: NOT
32564: PUSH
32565: LD_VAR 0 1
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: IN
32580: PUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: IN
32600: NOT
32601: AND
32602: OR
32603: IFFALSE 32607
// exit ;
32605: GO 50998
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32607: LD_VAR 0 1
32611: PUSH
32612: LD_INT 6
32614: PUSH
32615: LD_INT 7
32617: PUSH
32618: LD_INT 8
32620: PUSH
32621: LD_INT 13
32623: PUSH
32624: LD_INT 12
32626: PUSH
32627: LD_INT 15
32629: PUSH
32630: LD_INT 11
32632: PUSH
32633: LD_INT 14
32635: PUSH
32636: LD_INT 10
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: IN
32650: IFFALSE 32660
// btype = b_lab ;
32652: LD_ADDR_VAR 0 1
32656: PUSH
32657: LD_INT 6
32659: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32660: LD_VAR 0 6
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: IN
32679: NOT
32680: PUSH
32681: LD_VAR 0 1
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 6
32700: PUSH
32701: LD_INT 36
32703: PUSH
32704: LD_INT 4
32706: PUSH
32707: LD_INT 5
32709: PUSH
32710: LD_INT 31
32712: PUSH
32713: LD_INT 32
32715: PUSH
32716: LD_INT 33
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: IN
32732: NOT
32733: PUSH
32734: LD_VAR 0 6
32738: PUSH
32739: LD_INT 1
32741: EQUAL
32742: AND
32743: OR
32744: PUSH
32745: LD_VAR 0 1
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: IN
32760: NOT
32761: PUSH
32762: LD_VAR 0 6
32766: PUSH
32767: LD_INT 2
32769: EQUAL
32770: AND
32771: OR
32772: IFFALSE 32782
// mode = 0 ;
32774: LD_ADDR_VAR 0 6
32778: PUSH
32779: LD_INT 0
32781: ST_TO_ADDR
// case mode of 0 :
32782: LD_VAR 0 6
32786: PUSH
32787: LD_INT 0
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32795
32793: GO 44248
32795: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32796: LD_ADDR_VAR 0 11
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 3
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 3
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32989: LD_ADDR_VAR 0 12
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: NEG
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: NEG
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 3
33157: NEG
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33185: LD_ADDR_VAR 0 13
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: LD_INT 2
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 2
33332: NEG
33333: PUSH
33334: LD_INT 3
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33384: LD_ADDR_VAR 0 14
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 2
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33580: LD_ADDR_VAR 0 15
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 2
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33773: LD_ADDR_VAR 0 16
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 3
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33966: LD_ADDR_VAR 0 17
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 2
34142: NEG
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34196: LD_ADDR_VAR 0 18
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 1
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: LD_INT 2
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: NEG
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34426: LD_ADDR_VAR 0 19
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: LD_INT 2
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34656: LD_ADDR_VAR 0 20
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 2
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 2
34843: NEG
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34886: LD_ADDR_VAR 0 21
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 2
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: LD_INT 2
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35116: LD_ADDR_VAR 0 22
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 2
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35346: LD_ADDR_VAR 0 23
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 2
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 3
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 3
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35626: LD_ADDR_VAR 0 24
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 2
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35902: LD_ADDR_VAR 0 25
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36176: LD_ADDR_VAR 0 26
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 2
36363: NEG
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36452: LD_ADDR_VAR 0 27
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 3
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36732: LD_ADDR_VAR 0 28
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 3
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 3
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 3
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 3
36979: NEG
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37014: LD_ADDR_VAR 0 29
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 2
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: LD_INT 3
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 3
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37293: LD_ADDR_VAR 0 30
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: LD_INT 3
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37571: LD_ADDR_VAR 0 31
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: LD_INT 2
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37849: LD_ADDR_VAR 0 32
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 3
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 3
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38127: LD_ADDR_VAR 0 33
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 3
38371: NEG
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38406: LD_ADDR_VAR 0 34
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38686: LD_ADDR_VAR 0 35
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38798: LD_ADDR_VAR 0 36
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38910: LD_ADDR_VAR 0 37
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39022: LD_ADDR_VAR 0 38
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39134: LD_ADDR_VAR 0 39
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39246: LD_ADDR_VAR 0 40
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39358: LD_ADDR_VAR 0 41
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39708: LD_ADDR_VAR 0 42
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 3
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 3
40005: NEG
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: LD_INT 3
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40058: LD_ADDR_VAR 0 43
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 3
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 3
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 3
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: NEG
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40406: LD_ADDR_VAR 0 44
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 3
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 3
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 3
40680: NEG
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 3
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40756: LD_ADDR_VAR 0 45
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: LD_INT 3
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 3
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 3
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 3
41065: NEG
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41106: LD_ADDR_VAR 0 46
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 3
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 3
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 3
41402: NEG
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41454: LD_ADDR_VAR 0 47
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41605: LD_ADDR_VAR 0 48
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41752: LD_ADDR_VAR 0 49
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41896: LD_ADDR_VAR 0 50
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42040: LD_ADDR_VAR 0 51
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42187: LD_ADDR_VAR 0 52
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42338: LD_ADDR_VAR 0 53
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42568: LD_ADDR_VAR 0 54
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 2
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42798: LD_ADDR_VAR 0 55
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43028: LD_ADDR_VAR 0 56
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43258: LD_ADDR_VAR 0 57
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43488: LD_ADDR_VAR 0 58
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43718: LD_ADDR_VAR 0 59
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43806: LD_ADDR_VAR 0 60
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43894: LD_ADDR_VAR 0 61
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43982: LD_ADDR_VAR 0 62
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44070: LD_ADDR_VAR 0 63
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44158: LD_ADDR_VAR 0 64
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: ST_TO_ADDR
// end ; 1 :
44246: GO 50143
44248: LD_INT 1
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44256
44254: GO 46879
44256: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44257: LD_ADDR_VAR 0 11
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 3
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44301: LD_ADDR_VAR 0 12
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44342: LD_ADDR_VAR 0 13
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 3
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44382: LD_ADDR_VAR 0 14
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44423: LD_ADDR_VAR 0 15
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44467: LD_ADDR_VAR 0 16
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 3
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44513: LD_ADDR_VAR 0 17
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44557: LD_ADDR_VAR 0 18
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44598: LD_ADDR_VAR 0 19
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: LD_INT 3
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44638: LD_ADDR_VAR 0 20
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44679: LD_ADDR_VAR 0 21
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44723: LD_ADDR_VAR 0 22
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44769: LD_ADDR_VAR 0 23
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 4
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44813: LD_ADDR_VAR 0 24
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 4
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44854: LD_ADDR_VAR 0 25
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 4
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44894: LD_ADDR_VAR 0 26
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44935: LD_ADDR_VAR 0 27
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 4
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44979: LD_ADDR_VAR 0 28
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 3
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: LD_INT 4
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 4
45010: NEG
45011: PUSH
45012: LD_INT 3
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45025: LD_ADDR_VAR 0 29
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 4
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 4
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 5
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 5
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 6
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 6
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 5
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45180: LD_ADDR_VAR 0 30
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 4
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 4
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 5
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 5
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 5
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 6
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 6
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45323: LD_ADDR_VAR 0 31
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 4
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 4
45370: PUSH
45371: LD_INT 4
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: LD_INT 4
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 5
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 5
45400: PUSH
45401: LD_INT 5
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 4
45410: PUSH
45411: LD_INT 5
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 6
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 6
45430: PUSH
45431: LD_INT 6
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 5
45440: PUSH
45441: LD_INT 6
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45462: LD_ADDR_VAR 0 32
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 4
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 5
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 5
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 4
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 6
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 6
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 5
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45605: LD_ADDR_VAR 0 33
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 4
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 4
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 4
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 5
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 5
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 5
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 6
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 6
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45760: LD_ADDR_VAR 0 34
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 3
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: LD_INT 4
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 4
45815: NEG
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 4
45827: NEG
45828: PUSH
45829: LD_INT 4
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 4
45839: NEG
45840: PUSH
45841: LD_INT 5
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 5
45851: NEG
45852: PUSH
45853: LD_INT 4
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 5
45863: NEG
45864: PUSH
45865: LD_INT 5
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 5
45875: NEG
45876: PUSH
45877: LD_INT 6
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 6
45887: NEG
45888: PUSH
45889: LD_INT 5
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 6
45899: NEG
45900: PUSH
45901: LD_INT 6
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45923: LD_ADDR_VAR 0 41
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45967: LD_ADDR_VAR 0 42
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46008: LD_ADDR_VAR 0 43
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46048: LD_ADDR_VAR 0 44
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46089: LD_ADDR_VAR 0 45
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46133: LD_ADDR_VAR 0 46
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46179: LD_ADDR_VAR 0 47
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46212: LD_ADDR_VAR 0 48
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46243: LD_ADDR_VAR 0 49
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46272: LD_ADDR_VAR 0 50
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46301: LD_ADDR_VAR 0 51
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46332: LD_ADDR_VAR 0 52
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46365: LD_ADDR_VAR 0 53
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46409: LD_ADDR_VAR 0 54
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46450: LD_ADDR_VAR 0 55
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46490: LD_ADDR_VAR 0 56
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46531: LD_ADDR_VAR 0 57
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46575: LD_ADDR_VAR 0 58
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 59
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46665: LD_ADDR_VAR 0 60
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46706: LD_ADDR_VAR 0 61
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46746: LD_ADDR_VAR 0 62
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46787: LD_ADDR_VAR 0 63
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46831: LD_ADDR_VAR 0 64
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// end ; 2 :
46877: GO 50143
46879: LD_INT 2
46881: DOUBLE
46882: EQUAL
46883: IFTRUE 46887
46885: GO 50142
46887: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46888: LD_ADDR_VAR 0 29
46892: PUSH
46893: LD_INT 4
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 4
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 5
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 5
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 4
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 5
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 4
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 4
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: LD_INT 4
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 4
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 4
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 4
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 5
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 5
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 5
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 4
47227: NEG
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 4
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 4
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: LD_INT 4
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: LD_INT 5
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: LD_INT 4
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 5
47333: NEG
47334: PUSH
47335: LD_INT 4
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 5
47345: NEG
47346: PUSH
47347: LD_INT 5
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: LD_INT 5
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 5
47369: NEG
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47426: LD_ADDR_VAR 0 30
47430: PUSH
47431: LD_INT 4
47433: PUSH
47434: LD_INT 4
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 4
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 5
47453: PUSH
47454: LD_INT 4
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 5
47463: PUSH
47464: LD_INT 5
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 4
47473: PUSH
47474: LD_INT 5
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 5
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 3
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 4
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 4
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: NEG
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 4
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: NEG
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 4
47661: NEG
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 5
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 5
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 5
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 3
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: LD_INT 4
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 3
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 4
47778: NEG
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 4
47790: NEG
47791: PUSH
47792: LD_INT 4
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 4
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 4
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 4
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 5
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 4
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 5
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 5
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47973: LD_ADDR_VAR 0 31
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 4
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 5
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 5
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 4
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 5
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 3
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 4
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 4
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: NEG
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: LD_INT 4
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: LD_INT 5
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: NEG
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 4
48223: NEG
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 5
48235: NEG
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 5
48247: NEG
48248: PUSH
48249: LD_INT 5
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: NEG
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 5
48271: NEG
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 4
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 4
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 4
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 4
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 4
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 5
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 5
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 5
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48523: LD_ADDR_VAR 0 32
48527: PUSH
48528: LD_INT 4
48530: NEG
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 4
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 4
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 5
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 5
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 5
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: LD_INT 4
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 4
48692: NEG
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 4
48704: NEG
48705: PUSH
48706: LD_INT 4
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 4
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 4
48728: NEG
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 4
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 5
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 4
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 4
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 5
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 5
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 4
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 4
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 4
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 4
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 5
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 5
48965: PUSH
48966: LD_INT 5
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: LD_INT 5
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: PUSH
48986: LD_INT 4
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 3
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 5
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 3
49015: PUSH
49016: LD_INT 5
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49070: LD_ADDR_VAR 0 33
49074: PUSH
49075: LD_INT 4
49077: NEG
49078: PUSH
49079: LD_INT 4
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: LD_INT 5
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: LD_INT 4
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 4
49125: NEG
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 5
49137: NEG
49138: PUSH
49139: LD_INT 4
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 5
49149: NEG
49150: PUSH
49151: LD_INT 5
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: LD_INT 5
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 5
49173: NEG
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 4
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 4
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 4
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 4
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 5
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 5
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 4
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 5
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 4
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 4
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: LD_INT 4
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 4
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 4
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 5
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 5
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 4
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 5
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49608: LD_ADDR_VAR 0 34
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 5
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 4
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 3
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 5
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 5
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 4
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 4
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 4
49810: PUSH
49811: LD_INT 4
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 4
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 5
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 5
49840: PUSH
49841: LD_INT 5
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: LD_INT 5
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 4
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 5
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: LD_INT 5
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 4
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 4
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 4
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 4
49993: NEG
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 4
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 4
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 5
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 5
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 5
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// end ; end ;
50140: GO 50143
50142: POP
// case btype of b_depot , b_warehouse :
50143: LD_VAR 0 1
50147: PUSH
50148: LD_INT 0
50150: DOUBLE
50151: EQUAL
50152: IFTRUE 50162
50154: LD_INT 1
50156: DOUBLE
50157: EQUAL
50158: IFTRUE 50162
50160: GO 50363
50162: POP
// case nation of nation_american :
50163: LD_VAR 0 5
50167: PUSH
50168: LD_INT 1
50170: DOUBLE
50171: EQUAL
50172: IFTRUE 50176
50174: GO 50232
50176: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50177: LD_ADDR_VAR 0 9
50181: PUSH
50182: LD_VAR 0 11
50186: PUSH
50187: LD_VAR 0 12
50191: PUSH
50192: LD_VAR 0 13
50196: PUSH
50197: LD_VAR 0 14
50201: PUSH
50202: LD_VAR 0 15
50206: PUSH
50207: LD_VAR 0 16
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: PUSH
50220: LD_VAR 0 4
50224: PUSH
50225: LD_INT 1
50227: PLUS
50228: ARRAY
50229: ST_TO_ADDR
50230: GO 50361
50232: LD_INT 2
50234: DOUBLE
50235: EQUAL
50236: IFTRUE 50240
50238: GO 50296
50240: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50241: LD_ADDR_VAR 0 9
50245: PUSH
50246: LD_VAR 0 17
50250: PUSH
50251: LD_VAR 0 18
50255: PUSH
50256: LD_VAR 0 19
50260: PUSH
50261: LD_VAR 0 20
50265: PUSH
50266: LD_VAR 0 21
50270: PUSH
50271: LD_VAR 0 22
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: PUSH
50284: LD_VAR 0 4
50288: PUSH
50289: LD_INT 1
50291: PLUS
50292: ARRAY
50293: ST_TO_ADDR
50294: GO 50361
50296: LD_INT 3
50298: DOUBLE
50299: EQUAL
50300: IFTRUE 50304
50302: GO 50360
50304: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50305: LD_ADDR_VAR 0 9
50309: PUSH
50310: LD_VAR 0 23
50314: PUSH
50315: LD_VAR 0 24
50319: PUSH
50320: LD_VAR 0 25
50324: PUSH
50325: LD_VAR 0 26
50329: PUSH
50330: LD_VAR 0 27
50334: PUSH
50335: LD_VAR 0 28
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: PUSH
50348: LD_VAR 0 4
50352: PUSH
50353: LD_INT 1
50355: PLUS
50356: ARRAY
50357: ST_TO_ADDR
50358: GO 50361
50360: POP
50361: GO 50916
50363: LD_INT 2
50365: DOUBLE
50366: EQUAL
50367: IFTRUE 50377
50369: LD_INT 3
50371: DOUBLE
50372: EQUAL
50373: IFTRUE 50377
50375: GO 50433
50377: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50378: LD_ADDR_VAR 0 9
50382: PUSH
50383: LD_VAR 0 29
50387: PUSH
50388: LD_VAR 0 30
50392: PUSH
50393: LD_VAR 0 31
50397: PUSH
50398: LD_VAR 0 32
50402: PUSH
50403: LD_VAR 0 33
50407: PUSH
50408: LD_VAR 0 34
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: PUSH
50421: LD_VAR 0 4
50425: PUSH
50426: LD_INT 1
50428: PLUS
50429: ARRAY
50430: ST_TO_ADDR
50431: GO 50916
50433: LD_INT 16
50435: DOUBLE
50436: EQUAL
50437: IFTRUE 50495
50439: LD_INT 17
50441: DOUBLE
50442: EQUAL
50443: IFTRUE 50495
50445: LD_INT 18
50447: DOUBLE
50448: EQUAL
50449: IFTRUE 50495
50451: LD_INT 19
50453: DOUBLE
50454: EQUAL
50455: IFTRUE 50495
50457: LD_INT 22
50459: DOUBLE
50460: EQUAL
50461: IFTRUE 50495
50463: LD_INT 20
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50495
50469: LD_INT 21
50471: DOUBLE
50472: EQUAL
50473: IFTRUE 50495
50475: LD_INT 23
50477: DOUBLE
50478: EQUAL
50479: IFTRUE 50495
50481: LD_INT 24
50483: DOUBLE
50484: EQUAL
50485: IFTRUE 50495
50487: LD_INT 25
50489: DOUBLE
50490: EQUAL
50491: IFTRUE 50495
50493: GO 50551
50495: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50496: LD_ADDR_VAR 0 9
50500: PUSH
50501: LD_VAR 0 35
50505: PUSH
50506: LD_VAR 0 36
50510: PUSH
50511: LD_VAR 0 37
50515: PUSH
50516: LD_VAR 0 38
50520: PUSH
50521: LD_VAR 0 39
50525: PUSH
50526: LD_VAR 0 40
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: PUSH
50539: LD_VAR 0 4
50543: PUSH
50544: LD_INT 1
50546: PLUS
50547: ARRAY
50548: ST_TO_ADDR
50549: GO 50916
50551: LD_INT 6
50553: DOUBLE
50554: EQUAL
50555: IFTRUE 50607
50557: LD_INT 7
50559: DOUBLE
50560: EQUAL
50561: IFTRUE 50607
50563: LD_INT 8
50565: DOUBLE
50566: EQUAL
50567: IFTRUE 50607
50569: LD_INT 13
50571: DOUBLE
50572: EQUAL
50573: IFTRUE 50607
50575: LD_INT 12
50577: DOUBLE
50578: EQUAL
50579: IFTRUE 50607
50581: LD_INT 15
50583: DOUBLE
50584: EQUAL
50585: IFTRUE 50607
50587: LD_INT 11
50589: DOUBLE
50590: EQUAL
50591: IFTRUE 50607
50593: LD_INT 14
50595: DOUBLE
50596: EQUAL
50597: IFTRUE 50607
50599: LD_INT 10
50601: DOUBLE
50602: EQUAL
50603: IFTRUE 50607
50605: GO 50663
50607: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50608: LD_ADDR_VAR 0 9
50612: PUSH
50613: LD_VAR 0 41
50617: PUSH
50618: LD_VAR 0 42
50622: PUSH
50623: LD_VAR 0 43
50627: PUSH
50628: LD_VAR 0 44
50632: PUSH
50633: LD_VAR 0 45
50637: PUSH
50638: LD_VAR 0 46
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: PUSH
50651: LD_VAR 0 4
50655: PUSH
50656: LD_INT 1
50658: PLUS
50659: ARRAY
50660: ST_TO_ADDR
50661: GO 50916
50663: LD_INT 36
50665: DOUBLE
50666: EQUAL
50667: IFTRUE 50671
50669: GO 50727
50671: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: LD_VAR 0 47
50681: PUSH
50682: LD_VAR 0 48
50686: PUSH
50687: LD_VAR 0 49
50691: PUSH
50692: LD_VAR 0 50
50696: PUSH
50697: LD_VAR 0 51
50701: PUSH
50702: LD_VAR 0 52
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: PUSH
50715: LD_VAR 0 4
50719: PUSH
50720: LD_INT 1
50722: PLUS
50723: ARRAY
50724: ST_TO_ADDR
50725: GO 50916
50727: LD_INT 4
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50753
50733: LD_INT 5
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50753
50739: LD_INT 34
50741: DOUBLE
50742: EQUAL
50743: IFTRUE 50753
50745: LD_INT 37
50747: DOUBLE
50748: EQUAL
50749: IFTRUE 50753
50751: GO 50809
50753: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50754: LD_ADDR_VAR 0 9
50758: PUSH
50759: LD_VAR 0 53
50763: PUSH
50764: LD_VAR 0 54
50768: PUSH
50769: LD_VAR 0 55
50773: PUSH
50774: LD_VAR 0 56
50778: PUSH
50779: LD_VAR 0 57
50783: PUSH
50784: LD_VAR 0 58
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: PUSH
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: PLUS
50805: ARRAY
50806: ST_TO_ADDR
50807: GO 50916
50809: LD_INT 31
50811: DOUBLE
50812: EQUAL
50813: IFTRUE 50859
50815: LD_INT 32
50817: DOUBLE
50818: EQUAL
50819: IFTRUE 50859
50821: LD_INT 33
50823: DOUBLE
50824: EQUAL
50825: IFTRUE 50859
50827: LD_INT 27
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50859
50833: LD_INT 26
50835: DOUBLE
50836: EQUAL
50837: IFTRUE 50859
50839: LD_INT 28
50841: DOUBLE
50842: EQUAL
50843: IFTRUE 50859
50845: LD_INT 29
50847: DOUBLE
50848: EQUAL
50849: IFTRUE 50859
50851: LD_INT 30
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50859
50857: GO 50915
50859: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50860: LD_ADDR_VAR 0 9
50864: PUSH
50865: LD_VAR 0 59
50869: PUSH
50870: LD_VAR 0 60
50874: PUSH
50875: LD_VAR 0 61
50879: PUSH
50880: LD_VAR 0 62
50884: PUSH
50885: LD_VAR 0 63
50889: PUSH
50890: LD_VAR 0 64
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: PUSH
50903: LD_VAR 0 4
50907: PUSH
50908: LD_INT 1
50910: PLUS
50911: ARRAY
50912: ST_TO_ADDR
50913: GO 50916
50915: POP
// temp_list2 = [ ] ;
50916: LD_ADDR_VAR 0 10
50920: PUSH
50921: EMPTY
50922: ST_TO_ADDR
// for i in temp_list do
50923: LD_ADDR_VAR 0 8
50927: PUSH
50928: LD_VAR 0 9
50932: PUSH
50933: FOR_IN
50934: IFFALSE 50986
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50936: LD_ADDR_VAR 0 10
50940: PUSH
50941: LD_VAR 0 10
50945: PUSH
50946: LD_VAR 0 8
50950: PUSH
50951: LD_INT 1
50953: ARRAY
50954: PUSH
50955: LD_VAR 0 2
50959: PLUS
50960: PUSH
50961: LD_VAR 0 8
50965: PUSH
50966: LD_INT 2
50968: ARRAY
50969: PUSH
50970: LD_VAR 0 3
50974: PLUS
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: ADD
50983: ST_TO_ADDR
50984: GO 50933
50986: POP
50987: POP
// result = temp_list2 ;
50988: LD_ADDR_VAR 0 7
50992: PUSH
50993: LD_VAR 0 10
50997: ST_TO_ADDR
// end ;
50998: LD_VAR 0 7
51002: RET
// export function EnemyInRange ( unit , dist ) ; begin
51003: LD_INT 0
51005: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51006: LD_ADDR_VAR 0 3
51010: PUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 255
51020: PPUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 250
51030: PPUSH
51031: LD_VAR 0 1
51035: PPUSH
51036: CALL_OW 251
51040: PPUSH
51041: LD_VAR 0 2
51045: PPUSH
51046: CALL 25107 0 4
51050: PUSH
51051: LD_INT 4
51053: ARRAY
51054: ST_TO_ADDR
// end ;
51055: LD_VAR 0 3
51059: RET
// export function PlayerSeeMe ( unit ) ; begin
51060: LD_INT 0
51062: PPUSH
// result := See ( your_side , unit ) ;
51063: LD_ADDR_VAR 0 2
51067: PUSH
51068: LD_OWVAR 2
51072: PPUSH
51073: LD_VAR 0 1
51077: PPUSH
51078: CALL_OW 292
51082: ST_TO_ADDR
// end ;
51083: LD_VAR 0 2
51087: RET
// export function ReverseDir ( unit ) ; begin
51088: LD_INT 0
51090: PPUSH
// if not unit then
51091: LD_VAR 0 1
51095: NOT
51096: IFFALSE 51100
// exit ;
51098: GO 51123
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51100: LD_ADDR_VAR 0 2
51104: PUSH
51105: LD_VAR 0 1
51109: PPUSH
51110: CALL_OW 254
51114: PUSH
51115: LD_INT 3
51117: PLUS
51118: PUSH
51119: LD_INT 6
51121: MOD
51122: ST_TO_ADDR
// end ;
51123: LD_VAR 0 2
51127: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51128: LD_INT 0
51130: PPUSH
51131: PPUSH
51132: PPUSH
51133: PPUSH
51134: PPUSH
// if not hexes then
51135: LD_VAR 0 2
51139: NOT
51140: IFFALSE 51144
// exit ;
51142: GO 51292
// dist := 9999 ;
51144: LD_ADDR_VAR 0 5
51148: PUSH
51149: LD_INT 9999
51151: ST_TO_ADDR
// for i = 1 to hexes do
51152: LD_ADDR_VAR 0 4
51156: PUSH
51157: DOUBLE
51158: LD_INT 1
51160: DEC
51161: ST_TO_ADDR
51162: LD_VAR 0 2
51166: PUSH
51167: FOR_TO
51168: IFFALSE 51280
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51170: LD_VAR 0 1
51174: PPUSH
51175: LD_VAR 0 2
51179: PUSH
51180: LD_VAR 0 4
51184: ARRAY
51185: PUSH
51186: LD_INT 1
51188: ARRAY
51189: PPUSH
51190: LD_VAR 0 2
51194: PUSH
51195: LD_VAR 0 4
51199: ARRAY
51200: PUSH
51201: LD_INT 2
51203: ARRAY
51204: PPUSH
51205: CALL_OW 297
51209: PUSH
51210: LD_VAR 0 5
51214: LESS
51215: IFFALSE 51278
// begin hex := hexes [ i ] ;
51217: LD_ADDR_VAR 0 7
51221: PUSH
51222: LD_VAR 0 2
51226: PUSH
51227: LD_VAR 0 4
51231: ARRAY
51232: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51233: LD_ADDR_VAR 0 5
51237: PUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: LD_VAR 0 2
51247: PUSH
51248: LD_VAR 0 4
51252: ARRAY
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: PPUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_VAR 0 4
51267: ARRAY
51268: PUSH
51269: LD_INT 2
51271: ARRAY
51272: PPUSH
51273: CALL_OW 297
51277: ST_TO_ADDR
// end ; end ;
51278: GO 51167
51280: POP
51281: POP
// result := hex ;
51282: LD_ADDR_VAR 0 3
51286: PUSH
51287: LD_VAR 0 7
51291: ST_TO_ADDR
// end ;
51292: LD_VAR 0 3
51296: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51297: LD_INT 0
51299: PPUSH
51300: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51301: LD_VAR 0 1
51305: NOT
51306: PUSH
51307: LD_VAR 0 1
51311: PUSH
51312: LD_INT 21
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 23
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PPUSH
51336: CALL_OW 69
51340: IN
51341: NOT
51342: OR
51343: IFFALSE 51347
// exit ;
51345: GO 51394
// for i = 1 to 3 do
51347: LD_ADDR_VAR 0 3
51351: PUSH
51352: DOUBLE
51353: LD_INT 1
51355: DEC
51356: ST_TO_ADDR
51357: LD_INT 3
51359: PUSH
51360: FOR_TO
51361: IFFALSE 51392
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51363: LD_VAR 0 1
51367: PPUSH
51368: CALL_OW 250
51372: PPUSH
51373: LD_VAR 0 1
51377: PPUSH
51378: CALL_OW 251
51382: PPUSH
51383: LD_INT 1
51385: PPUSH
51386: CALL_OW 453
51390: GO 51360
51392: POP
51393: POP
// end ;
51394: LD_VAR 0 2
51398: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51399: LD_INT 0
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51407: LD_VAR 0 1
51411: NOT
51412: PUSH
51413: LD_VAR 0 2
51417: NOT
51418: OR
51419: PUSH
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 314
51429: OR
51430: IFFALSE 51434
// exit ;
51432: GO 51875
// x := GetX ( enemy_unit ) ;
51434: LD_ADDR_VAR 0 7
51438: PUSH
51439: LD_VAR 0 2
51443: PPUSH
51444: CALL_OW 250
51448: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51449: LD_ADDR_VAR 0 8
51453: PUSH
51454: LD_VAR 0 2
51458: PPUSH
51459: CALL_OW 251
51463: ST_TO_ADDR
// if not x or not y then
51464: LD_VAR 0 7
51468: NOT
51469: PUSH
51470: LD_VAR 0 8
51474: NOT
51475: OR
51476: IFFALSE 51480
// exit ;
51478: GO 51875
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51480: LD_ADDR_VAR 0 6
51484: PUSH
51485: LD_VAR 0 7
51489: PPUSH
51490: LD_INT 0
51492: PPUSH
51493: LD_INT 4
51495: PPUSH
51496: CALL_OW 272
51500: PUSH
51501: LD_VAR 0 8
51505: PPUSH
51506: LD_INT 0
51508: PPUSH
51509: LD_INT 4
51511: PPUSH
51512: CALL_OW 273
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_VAR 0 7
51525: PPUSH
51526: LD_INT 1
51528: PPUSH
51529: LD_INT 4
51531: PPUSH
51532: CALL_OW 272
51536: PUSH
51537: LD_VAR 0 8
51541: PPUSH
51542: LD_INT 1
51544: PPUSH
51545: LD_INT 4
51547: PPUSH
51548: CALL_OW 273
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_VAR 0 7
51561: PPUSH
51562: LD_INT 2
51564: PPUSH
51565: LD_INT 4
51567: PPUSH
51568: CALL_OW 272
51572: PUSH
51573: LD_VAR 0 8
51577: PPUSH
51578: LD_INT 2
51580: PPUSH
51581: LD_INT 4
51583: PPUSH
51584: CALL_OW 273
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_VAR 0 7
51597: PPUSH
51598: LD_INT 3
51600: PPUSH
51601: LD_INT 4
51603: PPUSH
51604: CALL_OW 272
51608: PUSH
51609: LD_VAR 0 8
51613: PPUSH
51614: LD_INT 3
51616: PPUSH
51617: LD_INT 4
51619: PPUSH
51620: CALL_OW 273
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_VAR 0 7
51633: PPUSH
51634: LD_INT 4
51636: PPUSH
51637: LD_INT 4
51639: PPUSH
51640: CALL_OW 272
51644: PUSH
51645: LD_VAR 0 8
51649: PPUSH
51650: LD_INT 4
51652: PPUSH
51653: LD_INT 4
51655: PPUSH
51656: CALL_OW 273
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_VAR 0 7
51669: PPUSH
51670: LD_INT 5
51672: PPUSH
51673: LD_INT 4
51675: PPUSH
51676: CALL_OW 272
51680: PUSH
51681: LD_VAR 0 8
51685: PPUSH
51686: LD_INT 5
51688: PPUSH
51689: LD_INT 4
51691: PPUSH
51692: CALL_OW 273
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// for i = tmp downto 1 do
51709: LD_ADDR_VAR 0 4
51713: PUSH
51714: DOUBLE
51715: LD_VAR 0 6
51719: INC
51720: ST_TO_ADDR
51721: LD_INT 1
51723: PUSH
51724: FOR_DOWNTO
51725: IFFALSE 51826
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51727: LD_VAR 0 6
51731: PUSH
51732: LD_VAR 0 4
51736: ARRAY
51737: PUSH
51738: LD_INT 1
51740: ARRAY
51741: PPUSH
51742: LD_VAR 0 6
51746: PUSH
51747: LD_VAR 0 4
51751: ARRAY
51752: PUSH
51753: LD_INT 2
51755: ARRAY
51756: PPUSH
51757: CALL_OW 488
51761: NOT
51762: PUSH
51763: LD_VAR 0 6
51767: PUSH
51768: LD_VAR 0 4
51772: ARRAY
51773: PUSH
51774: LD_INT 1
51776: ARRAY
51777: PPUSH
51778: LD_VAR 0 6
51782: PUSH
51783: LD_VAR 0 4
51787: ARRAY
51788: PUSH
51789: LD_INT 2
51791: ARRAY
51792: PPUSH
51793: CALL_OW 428
51797: PUSH
51798: LD_INT 0
51800: NONEQUAL
51801: OR
51802: IFFALSE 51824
// tmp := Delete ( tmp , i ) ;
51804: LD_ADDR_VAR 0 6
51808: PUSH
51809: LD_VAR 0 6
51813: PPUSH
51814: LD_VAR 0 4
51818: PPUSH
51819: CALL_OW 3
51823: ST_TO_ADDR
51824: GO 51724
51826: POP
51827: POP
// j := GetClosestHex ( unit , tmp ) ;
51828: LD_ADDR_VAR 0 5
51832: PUSH
51833: LD_VAR 0 1
51837: PPUSH
51838: LD_VAR 0 6
51842: PPUSH
51843: CALL 51128 0 2
51847: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51848: LD_VAR 0 1
51852: PPUSH
51853: LD_VAR 0 5
51857: PUSH
51858: LD_INT 1
51860: ARRAY
51861: PPUSH
51862: LD_VAR 0 5
51866: PUSH
51867: LD_INT 2
51869: ARRAY
51870: PPUSH
51871: CALL_OW 111
// end ;
51875: LD_VAR 0 3
51879: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51880: LD_INT 0
51882: PPUSH
51883: PPUSH
51884: PPUSH
// uc_side = 0 ;
51885: LD_ADDR_OWVAR 20
51889: PUSH
51890: LD_INT 0
51892: ST_TO_ADDR
// uc_nation = 0 ;
51893: LD_ADDR_OWVAR 21
51897: PUSH
51898: LD_INT 0
51900: ST_TO_ADDR
// InitHc_All ( ) ;
51901: CALL_OW 584
// InitVc ;
51905: CALL_OW 20
// if mastodonts then
51909: LD_VAR 0 6
51913: IFFALSE 51980
// for i = 1 to mastodonts do
51915: LD_ADDR_VAR 0 11
51919: PUSH
51920: DOUBLE
51921: LD_INT 1
51923: DEC
51924: ST_TO_ADDR
51925: LD_VAR 0 6
51929: PUSH
51930: FOR_TO
51931: IFFALSE 51978
// begin vc_chassis := 31 ;
51933: LD_ADDR_OWVAR 37
51937: PUSH
51938: LD_INT 31
51940: ST_TO_ADDR
// vc_control := control_rider ;
51941: LD_ADDR_OWVAR 38
51945: PUSH
51946: LD_INT 4
51948: ST_TO_ADDR
// animal := CreateVehicle ;
51949: LD_ADDR_VAR 0 12
51953: PUSH
51954: CALL_OW 45
51958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51959: LD_VAR 0 12
51963: PPUSH
51964: LD_VAR 0 8
51968: PPUSH
51969: LD_INT 0
51971: PPUSH
51972: CALL 54168 0 3
// end ;
51976: GO 51930
51978: POP
51979: POP
// if horses then
51980: LD_VAR 0 5
51984: IFFALSE 52051
// for i = 1 to horses do
51986: LD_ADDR_VAR 0 11
51990: PUSH
51991: DOUBLE
51992: LD_INT 1
51994: DEC
51995: ST_TO_ADDR
51996: LD_VAR 0 5
52000: PUSH
52001: FOR_TO
52002: IFFALSE 52049
// begin hc_class := 21 ;
52004: LD_ADDR_OWVAR 28
52008: PUSH
52009: LD_INT 21
52011: ST_TO_ADDR
// hc_gallery :=  ;
52012: LD_ADDR_OWVAR 33
52016: PUSH
52017: LD_STRING 
52019: ST_TO_ADDR
// animal := CreateHuman ;
52020: LD_ADDR_VAR 0 12
52024: PUSH
52025: CALL_OW 44
52029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52030: LD_VAR 0 12
52034: PPUSH
52035: LD_VAR 0 8
52039: PPUSH
52040: LD_INT 0
52042: PPUSH
52043: CALL 54168 0 3
// end ;
52047: GO 52001
52049: POP
52050: POP
// if birds then
52051: LD_VAR 0 1
52055: IFFALSE 52122
// for i = 1 to birds do
52057: LD_ADDR_VAR 0 11
52061: PUSH
52062: DOUBLE
52063: LD_INT 1
52065: DEC
52066: ST_TO_ADDR
52067: LD_VAR 0 1
52071: PUSH
52072: FOR_TO
52073: IFFALSE 52120
// begin hc_class = 18 ;
52075: LD_ADDR_OWVAR 28
52079: PUSH
52080: LD_INT 18
52082: ST_TO_ADDR
// hc_gallery =  ;
52083: LD_ADDR_OWVAR 33
52087: PUSH
52088: LD_STRING 
52090: ST_TO_ADDR
// animal := CreateHuman ;
52091: LD_ADDR_VAR 0 12
52095: PUSH
52096: CALL_OW 44
52100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52101: LD_VAR 0 12
52105: PPUSH
52106: LD_VAR 0 8
52110: PPUSH
52111: LD_INT 0
52113: PPUSH
52114: CALL 54168 0 3
// end ;
52118: GO 52072
52120: POP
52121: POP
// if tigers then
52122: LD_VAR 0 2
52126: IFFALSE 52210
// for i = 1 to tigers do
52128: LD_ADDR_VAR 0 11
52132: PUSH
52133: DOUBLE
52134: LD_INT 1
52136: DEC
52137: ST_TO_ADDR
52138: LD_VAR 0 2
52142: PUSH
52143: FOR_TO
52144: IFFALSE 52208
// begin hc_class = class_tiger ;
52146: LD_ADDR_OWVAR 28
52150: PUSH
52151: LD_INT 14
52153: ST_TO_ADDR
// hc_gallery =  ;
52154: LD_ADDR_OWVAR 33
52158: PUSH
52159: LD_STRING 
52161: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52162: LD_ADDR_OWVAR 35
52166: PUSH
52167: LD_INT 7
52169: NEG
52170: PPUSH
52171: LD_INT 7
52173: PPUSH
52174: CALL_OW 12
52178: ST_TO_ADDR
// animal := CreateHuman ;
52179: LD_ADDR_VAR 0 12
52183: PUSH
52184: CALL_OW 44
52188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52189: LD_VAR 0 12
52193: PPUSH
52194: LD_VAR 0 8
52198: PPUSH
52199: LD_INT 0
52201: PPUSH
52202: CALL 54168 0 3
// end ;
52206: GO 52143
52208: POP
52209: POP
// if apemans then
52210: LD_VAR 0 3
52214: IFFALSE 52337
// for i = 1 to apemans do
52216: LD_ADDR_VAR 0 11
52220: PUSH
52221: DOUBLE
52222: LD_INT 1
52224: DEC
52225: ST_TO_ADDR
52226: LD_VAR 0 3
52230: PUSH
52231: FOR_TO
52232: IFFALSE 52335
// begin hc_class = class_apeman ;
52234: LD_ADDR_OWVAR 28
52238: PUSH
52239: LD_INT 12
52241: ST_TO_ADDR
// hc_gallery =  ;
52242: LD_ADDR_OWVAR 33
52246: PUSH
52247: LD_STRING 
52249: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52250: LD_ADDR_OWVAR 35
52254: PUSH
52255: LD_INT 5
52257: NEG
52258: PPUSH
52259: LD_INT 5
52261: PPUSH
52262: CALL_OW 12
52266: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52267: LD_ADDR_OWVAR 31
52271: PUSH
52272: LD_INT 1
52274: PPUSH
52275: LD_INT 3
52277: PPUSH
52278: CALL_OW 12
52282: PUSH
52283: LD_INT 1
52285: PPUSH
52286: LD_INT 3
52288: PPUSH
52289: CALL_OW 12
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// animal := CreateHuman ;
52306: LD_ADDR_VAR 0 12
52310: PUSH
52311: CALL_OW 44
52315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52316: LD_VAR 0 12
52320: PPUSH
52321: LD_VAR 0 8
52325: PPUSH
52326: LD_INT 0
52328: PPUSH
52329: CALL 54168 0 3
// end ;
52333: GO 52231
52335: POP
52336: POP
// if enchidnas then
52337: LD_VAR 0 4
52341: IFFALSE 52408
// for i = 1 to enchidnas do
52343: LD_ADDR_VAR 0 11
52347: PUSH
52348: DOUBLE
52349: LD_INT 1
52351: DEC
52352: ST_TO_ADDR
52353: LD_VAR 0 4
52357: PUSH
52358: FOR_TO
52359: IFFALSE 52406
// begin hc_class = 13 ;
52361: LD_ADDR_OWVAR 28
52365: PUSH
52366: LD_INT 13
52368: ST_TO_ADDR
// hc_gallery =  ;
52369: LD_ADDR_OWVAR 33
52373: PUSH
52374: LD_STRING 
52376: ST_TO_ADDR
// animal := CreateHuman ;
52377: LD_ADDR_VAR 0 12
52381: PUSH
52382: CALL_OW 44
52386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52387: LD_VAR 0 12
52391: PPUSH
52392: LD_VAR 0 8
52396: PPUSH
52397: LD_INT 0
52399: PPUSH
52400: CALL 54168 0 3
// end ;
52404: GO 52358
52406: POP
52407: POP
// if fishes then
52408: LD_VAR 0 7
52412: IFFALSE 52479
// for i = 1 to fishes do
52414: LD_ADDR_VAR 0 11
52418: PUSH
52419: DOUBLE
52420: LD_INT 1
52422: DEC
52423: ST_TO_ADDR
52424: LD_VAR 0 7
52428: PUSH
52429: FOR_TO
52430: IFFALSE 52477
// begin hc_class = 20 ;
52432: LD_ADDR_OWVAR 28
52436: PUSH
52437: LD_INT 20
52439: ST_TO_ADDR
// hc_gallery =  ;
52440: LD_ADDR_OWVAR 33
52444: PUSH
52445: LD_STRING 
52447: ST_TO_ADDR
// animal := CreateHuman ;
52448: LD_ADDR_VAR 0 12
52452: PUSH
52453: CALL_OW 44
52457: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52458: LD_VAR 0 12
52462: PPUSH
52463: LD_VAR 0 9
52467: PPUSH
52468: LD_INT 0
52470: PPUSH
52471: CALL 54168 0 3
// end ;
52475: GO 52429
52477: POP
52478: POP
// end ;
52479: LD_VAR 0 10
52483: RET
// export function WantHeal ( sci , unit ) ; begin
52484: LD_INT 0
52486: PPUSH
// if GetTaskList ( sci ) > 0 then
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 437
52496: PUSH
52497: LD_INT 0
52499: GREATER
52500: IFFALSE 52570
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52502: LD_VAR 0 1
52506: PPUSH
52507: CALL_OW 437
52511: PUSH
52512: LD_INT 1
52514: ARRAY
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PUSH
52520: LD_STRING l
52522: EQUAL
52523: PUSH
52524: LD_VAR 0 1
52528: PPUSH
52529: CALL_OW 437
52533: PUSH
52534: LD_INT 1
52536: ARRAY
52537: PUSH
52538: LD_INT 4
52540: ARRAY
52541: PUSH
52542: LD_VAR 0 2
52546: EQUAL
52547: AND
52548: IFFALSE 52560
// result := true else
52550: LD_ADDR_VAR 0 3
52554: PUSH
52555: LD_INT 1
52557: ST_TO_ADDR
52558: GO 52568
// result := false ;
52560: LD_ADDR_VAR 0 3
52564: PUSH
52565: LD_INT 0
52567: ST_TO_ADDR
// end else
52568: GO 52578
// result := false ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_INT 0
52577: ST_TO_ADDR
// end ;
52578: LD_VAR 0 3
52582: RET
// export function HealTarget ( sci ) ; begin
52583: LD_INT 0
52585: PPUSH
// if not sci then
52586: LD_VAR 0 1
52590: NOT
52591: IFFALSE 52595
// exit ;
52593: GO 52660
// result := 0 ;
52595: LD_ADDR_VAR 0 2
52599: PUSH
52600: LD_INT 0
52602: ST_TO_ADDR
// if GetTaskList ( sci ) then
52603: LD_VAR 0 1
52607: PPUSH
52608: CALL_OW 437
52612: IFFALSE 52660
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 437
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 1
52630: ARRAY
52631: PUSH
52632: LD_STRING l
52634: EQUAL
52635: IFFALSE 52660
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52637: LD_ADDR_VAR 0 2
52641: PUSH
52642: LD_VAR 0 1
52646: PPUSH
52647: CALL_OW 437
52651: PUSH
52652: LD_INT 1
52654: ARRAY
52655: PUSH
52656: LD_INT 4
52658: ARRAY
52659: ST_TO_ADDR
// end ;
52660: LD_VAR 0 2
52664: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52665: LD_INT 0
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
// if not base_units then
52671: LD_VAR 0 1
52675: NOT
52676: IFFALSE 52680
// exit ;
52678: GO 52767
// result := false ;
52680: LD_ADDR_VAR 0 2
52684: PUSH
52685: LD_INT 0
52687: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52688: LD_ADDR_VAR 0 5
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: LD_INT 21
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PPUSH
52708: CALL_OW 72
52712: ST_TO_ADDR
// if not tmp then
52713: LD_VAR 0 5
52717: NOT
52718: IFFALSE 52722
// exit ;
52720: GO 52767
// for i in tmp do
52722: LD_ADDR_VAR 0 3
52726: PUSH
52727: LD_VAR 0 5
52731: PUSH
52732: FOR_IN
52733: IFFALSE 52765
// begin result := EnemyInRange ( i , 22 ) ;
52735: LD_ADDR_VAR 0 2
52739: PUSH
52740: LD_VAR 0 3
52744: PPUSH
52745: LD_INT 22
52747: PPUSH
52748: CALL 51003 0 2
52752: ST_TO_ADDR
// if result then
52753: LD_VAR 0 2
52757: IFFALSE 52763
// exit ;
52759: POP
52760: POP
52761: GO 52767
// end ;
52763: GO 52732
52765: POP
52766: POP
// end ;
52767: LD_VAR 0 2
52771: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52772: LD_INT 0
52774: PPUSH
52775: PPUSH
// if not units then
52776: LD_VAR 0 1
52780: NOT
52781: IFFALSE 52785
// exit ;
52783: GO 52855
// result := [ ] ;
52785: LD_ADDR_VAR 0 3
52789: PUSH
52790: EMPTY
52791: ST_TO_ADDR
// for i in units do
52792: LD_ADDR_VAR 0 4
52796: PUSH
52797: LD_VAR 0 1
52801: PUSH
52802: FOR_IN
52803: IFFALSE 52853
// if GetTag ( i ) = tag then
52805: LD_VAR 0 4
52809: PPUSH
52810: CALL_OW 110
52814: PUSH
52815: LD_VAR 0 2
52819: EQUAL
52820: IFFALSE 52851
// result := Insert ( result , result + 1 , i ) ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_VAR 0 3
52831: PPUSH
52832: LD_VAR 0 3
52836: PUSH
52837: LD_INT 1
52839: PLUS
52840: PPUSH
52841: LD_VAR 0 4
52845: PPUSH
52846: CALL_OW 2
52850: ST_TO_ADDR
52851: GO 52802
52853: POP
52854: POP
// end ;
52855: LD_VAR 0 3
52859: RET
// export function IsDriver ( un ) ; begin
52860: LD_INT 0
52862: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_VAR 0 1
52872: PUSH
52873: LD_INT 55
52875: PUSH
52876: EMPTY
52877: LIST
52878: PPUSH
52879: CALL_OW 69
52883: IN
52884: ST_TO_ADDR
// end ;
52885: LD_VAR 0 2
52889: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52890: LD_INT 0
52892: PPUSH
52893: PPUSH
// list := [ ] ;
52894: LD_ADDR_VAR 0 5
52898: PUSH
52899: EMPTY
52900: ST_TO_ADDR
// case d of 0 :
52901: LD_VAR 0 3
52905: PUSH
52906: LD_INT 0
52908: DOUBLE
52909: EQUAL
52910: IFTRUE 52914
52912: GO 53047
52914: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52915: LD_ADDR_VAR 0 5
52919: PUSH
52920: LD_VAR 0 1
52924: PUSH
52925: LD_INT 4
52927: MINUS
52928: PUSH
52929: LD_VAR 0 2
52933: PUSH
52934: LD_INT 4
52936: MINUS
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: PUSH
52946: LD_VAR 0 1
52950: PUSH
52951: LD_INT 3
52953: MINUS
52954: PUSH
52955: LD_VAR 0 2
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: PUSH
52968: LD_VAR 0 1
52972: PUSH
52973: LD_INT 4
52975: PLUS
52976: PUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 4
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 1
52994: PUSH
52995: LD_INT 3
52997: PLUS
52998: PUSH
52999: LD_VAR 0 2
53003: PUSH
53004: LD_INT 3
53006: PLUS
53007: PUSH
53008: LD_INT 5
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: PUSH
53016: LD_VAR 0 1
53020: PUSH
53021: LD_VAR 0 2
53025: PUSH
53026: LD_INT 4
53028: PLUS
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// end ; 1 :
53045: GO 53745
53047: LD_INT 1
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53055
53053: GO 53188
53055: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53056: LD_ADDR_VAR 0 5
53060: PUSH
53061: LD_VAR 0 1
53065: PUSH
53066: LD_VAR 0 2
53070: PUSH
53071: LD_INT 4
53073: MINUS
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: PUSH
53083: LD_VAR 0 1
53087: PUSH
53088: LD_INT 3
53090: MINUS
53091: PUSH
53092: LD_VAR 0 2
53096: PUSH
53097: LD_INT 3
53099: MINUS
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: PUSH
53109: LD_VAR 0 1
53113: PUSH
53114: LD_INT 4
53116: MINUS
53117: PUSH
53118: LD_VAR 0 2
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: LD_VAR 0 1
53135: PUSH
53136: LD_VAR 0 2
53140: PUSH
53141: LD_INT 3
53143: PLUS
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: PUSH
53153: LD_VAR 0 1
53157: PUSH
53158: LD_INT 4
53160: PLUS
53161: PUSH
53162: LD_VAR 0 2
53166: PUSH
53167: LD_INT 4
53169: PLUS
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// end ; 2 :
53186: GO 53745
53188: LD_INT 2
53190: DOUBLE
53191: EQUAL
53192: IFTRUE 53196
53194: GO 53325
53196: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53197: LD_ADDR_VAR 0 5
53201: PUSH
53202: LD_VAR 0 1
53206: PUSH
53207: LD_VAR 0 2
53211: PUSH
53212: LD_INT 3
53214: MINUS
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: PUSH
53224: LD_VAR 0 1
53228: PUSH
53229: LD_INT 4
53231: PLUS
53232: PUSH
53233: LD_VAR 0 2
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: PUSH
53246: LD_VAR 0 1
53250: PUSH
53251: LD_VAR 0 2
53255: PUSH
53256: LD_INT 4
53258: PLUS
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: PUSH
53268: LD_VAR 0 1
53272: PUSH
53273: LD_INT 3
53275: MINUS
53276: PUSH
53277: LD_VAR 0 2
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: PUSH
53290: LD_VAR 0 1
53294: PUSH
53295: LD_INT 4
53297: MINUS
53298: PUSH
53299: LD_VAR 0 2
53303: PUSH
53304: LD_INT 4
53306: MINUS
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: ST_TO_ADDR
// end ; 3 :
53323: GO 53745
53325: LD_INT 3
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53466
53333: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53334: LD_ADDR_VAR 0 5
53338: PUSH
53339: LD_VAR 0 1
53343: PUSH
53344: LD_INT 3
53346: PLUS
53347: PUSH
53348: LD_VAR 0 2
53352: PUSH
53353: LD_INT 4
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: PUSH
53361: LD_VAR 0 1
53365: PUSH
53366: LD_INT 4
53368: PLUS
53369: PUSH
53370: LD_VAR 0 2
53374: PUSH
53375: LD_INT 4
53377: PLUS
53378: PUSH
53379: LD_INT 5
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: PUSH
53387: LD_VAR 0 1
53391: PUSH
53392: LD_INT 4
53394: MINUS
53395: PUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: PUSH
53409: LD_VAR 0 1
53413: PUSH
53414: LD_VAR 0 2
53418: PUSH
53419: LD_INT 4
53421: MINUS
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: PUSH
53431: LD_VAR 0 1
53435: PUSH
53436: LD_INT 3
53438: MINUS
53439: PUSH
53440: LD_VAR 0 2
53444: PUSH
53445: LD_INT 3
53447: MINUS
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// end ; 4 :
53464: GO 53745
53466: LD_INT 4
53468: DOUBLE
53469: EQUAL
53470: IFTRUE 53474
53472: GO 53607
53474: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53475: LD_ADDR_VAR 0 5
53479: PUSH
53480: LD_VAR 0 1
53484: PUSH
53485: LD_VAR 0 2
53489: PUSH
53490: LD_INT 4
53492: PLUS
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: PUSH
53502: LD_VAR 0 1
53506: PUSH
53507: LD_INT 3
53509: PLUS
53510: PUSH
53511: LD_VAR 0 2
53515: PUSH
53516: LD_INT 3
53518: PLUS
53519: PUSH
53520: LD_INT 5
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: PUSH
53528: LD_VAR 0 1
53532: PUSH
53533: LD_INT 4
53535: PLUS
53536: PUSH
53537: LD_VAR 0 2
53541: PUSH
53542: LD_INT 4
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: LIST
53549: PUSH
53550: LD_VAR 0 1
53554: PUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_INT 3
53562: MINUS
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: PUSH
53572: LD_VAR 0 1
53576: PUSH
53577: LD_INT 4
53579: MINUS
53580: PUSH
53581: LD_VAR 0 2
53585: PUSH
53586: LD_INT 4
53588: MINUS
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// end ; 5 :
53605: GO 53745
53607: LD_INT 5
53609: DOUBLE
53610: EQUAL
53611: IFTRUE 53615
53613: GO 53744
53615: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53616: LD_ADDR_VAR 0 5
53620: PUSH
53621: LD_VAR 0 1
53625: PUSH
53626: LD_INT 4
53628: MINUS
53629: PUSH
53630: LD_VAR 0 2
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: PUSH
53643: LD_VAR 0 1
53647: PUSH
53648: LD_VAR 0 2
53652: PUSH
53653: LD_INT 4
53655: MINUS
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: PUSH
53665: LD_VAR 0 1
53669: PUSH
53670: LD_INT 4
53672: PLUS
53673: PUSH
53674: LD_VAR 0 2
53678: PUSH
53679: LD_INT 4
53681: PLUS
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: PUSH
53691: LD_VAR 0 1
53695: PUSH
53696: LD_INT 3
53698: PLUS
53699: PUSH
53700: LD_VAR 0 2
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: PUSH
53713: LD_VAR 0 1
53717: PUSH
53718: LD_VAR 0 2
53722: PUSH
53723: LD_INT 3
53725: PLUS
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// end ; end ;
53742: GO 53745
53744: POP
// result := list ;
53745: LD_ADDR_VAR 0 4
53749: PUSH
53750: LD_VAR 0 5
53754: ST_TO_ADDR
// end ;
53755: LD_VAR 0 4
53759: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53760: LD_INT 0
53762: PPUSH
53763: PPUSH
53764: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53765: LD_VAR 0 1
53769: NOT
53770: PUSH
53771: LD_VAR 0 2
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 4
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: IN
53794: NOT
53795: OR
53796: IFFALSE 53800
// exit ;
53798: GO 53892
// tmp := [ ] ;
53800: LD_ADDR_VAR 0 5
53804: PUSH
53805: EMPTY
53806: ST_TO_ADDR
// for i in units do
53807: LD_ADDR_VAR 0 4
53811: PUSH
53812: LD_VAR 0 1
53816: PUSH
53817: FOR_IN
53818: IFFALSE 53861
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53820: LD_ADDR_VAR 0 5
53824: PUSH
53825: LD_VAR 0 5
53829: PPUSH
53830: LD_VAR 0 5
53834: PUSH
53835: LD_INT 1
53837: PLUS
53838: PPUSH
53839: LD_VAR 0 4
53843: PPUSH
53844: LD_VAR 0 2
53848: PPUSH
53849: CALL_OW 259
53853: PPUSH
53854: CALL_OW 2
53858: ST_TO_ADDR
53859: GO 53817
53861: POP
53862: POP
// if not tmp then
53863: LD_VAR 0 5
53867: NOT
53868: IFFALSE 53872
// exit ;
53870: GO 53892
// result := SortListByListDesc ( units , tmp ) ;
53872: LD_ADDR_VAR 0 3
53876: PUSH
53877: LD_VAR 0 1
53881: PPUSH
53882: LD_VAR 0 5
53886: PPUSH
53887: CALL_OW 77
53891: ST_TO_ADDR
// end ;
53892: LD_VAR 0 3
53896: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53897: LD_INT 0
53899: PPUSH
53900: PPUSH
53901: PPUSH
// result := false ;
53902: LD_ADDR_VAR 0 3
53906: PUSH
53907: LD_INT 0
53909: ST_TO_ADDR
// x := GetX ( building ) ;
53910: LD_ADDR_VAR 0 4
53914: PUSH
53915: LD_VAR 0 2
53919: PPUSH
53920: CALL_OW 250
53924: ST_TO_ADDR
// y := GetY ( building ) ;
53925: LD_ADDR_VAR 0 5
53929: PUSH
53930: LD_VAR 0 2
53934: PPUSH
53935: CALL_OW 251
53939: ST_TO_ADDR
// if not building or not x or not y then
53940: LD_VAR 0 2
53944: NOT
53945: PUSH
53946: LD_VAR 0 4
53950: NOT
53951: OR
53952: PUSH
53953: LD_VAR 0 5
53957: NOT
53958: OR
53959: IFFALSE 53963
// exit ;
53961: GO 54055
// if GetTaskList ( unit ) then
53963: LD_VAR 0 1
53967: PPUSH
53968: CALL_OW 437
53972: IFFALSE 54055
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53974: LD_STRING e
53976: PUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: CALL_OW 437
53986: PUSH
53987: LD_INT 1
53989: ARRAY
53990: PUSH
53991: LD_INT 1
53993: ARRAY
53994: EQUAL
53995: PUSH
53996: LD_VAR 0 4
54000: PUSH
54001: LD_VAR 0 1
54005: PPUSH
54006: CALL_OW 437
54010: PUSH
54011: LD_INT 1
54013: ARRAY
54014: PUSH
54015: LD_INT 2
54017: ARRAY
54018: EQUAL
54019: AND
54020: PUSH
54021: LD_VAR 0 5
54025: PUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: CALL_OW 437
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PUSH
54040: LD_INT 3
54042: ARRAY
54043: EQUAL
54044: AND
54045: IFFALSE 54055
// result := true end ;
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_INT 1
54054: ST_TO_ADDR
// end ;
54055: LD_VAR 0 3
54059: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54060: LD_INT 0
54062: PPUSH
// result := false ;
54063: LD_ADDR_VAR 0 4
54067: PUSH
54068: LD_INT 0
54070: ST_TO_ADDR
// if GetTaskList ( unit ) then
54071: LD_VAR 0 1
54075: PPUSH
54076: CALL_OW 437
54080: IFFALSE 54163
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54082: LD_STRING M
54084: PUSH
54085: LD_VAR 0 1
54089: PPUSH
54090: CALL_OW 437
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_INT 1
54101: ARRAY
54102: EQUAL
54103: PUSH
54104: LD_VAR 0 2
54108: PUSH
54109: LD_VAR 0 1
54113: PPUSH
54114: CALL_OW 437
54118: PUSH
54119: LD_INT 1
54121: ARRAY
54122: PUSH
54123: LD_INT 2
54125: ARRAY
54126: EQUAL
54127: AND
54128: PUSH
54129: LD_VAR 0 3
54133: PUSH
54134: LD_VAR 0 1
54138: PPUSH
54139: CALL_OW 437
54143: PUSH
54144: LD_INT 1
54146: ARRAY
54147: PUSH
54148: LD_INT 3
54150: ARRAY
54151: EQUAL
54152: AND
54153: IFFALSE 54163
// result := true ;
54155: LD_ADDR_VAR 0 4
54159: PUSH
54160: LD_INT 1
54162: ST_TO_ADDR
// end ; end ;
54163: LD_VAR 0 4
54167: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54168: LD_INT 0
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
// if not unit or not area then
54174: LD_VAR 0 1
54178: NOT
54179: PUSH
54180: LD_VAR 0 2
54184: NOT
54185: OR
54186: IFFALSE 54190
// exit ;
54188: GO 54354
// tmp := AreaToList ( area , i ) ;
54190: LD_ADDR_VAR 0 6
54194: PUSH
54195: LD_VAR 0 2
54199: PPUSH
54200: LD_VAR 0 5
54204: PPUSH
54205: CALL_OW 517
54209: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54210: LD_ADDR_VAR 0 5
54214: PUSH
54215: DOUBLE
54216: LD_INT 1
54218: DEC
54219: ST_TO_ADDR
54220: LD_VAR 0 6
54224: PUSH
54225: LD_INT 1
54227: ARRAY
54228: PUSH
54229: FOR_TO
54230: IFFALSE 54352
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54232: LD_ADDR_VAR 0 7
54236: PUSH
54237: LD_VAR 0 6
54241: PUSH
54242: LD_INT 1
54244: ARRAY
54245: PUSH
54246: LD_VAR 0 5
54250: ARRAY
54251: PUSH
54252: LD_VAR 0 6
54256: PUSH
54257: LD_INT 2
54259: ARRAY
54260: PUSH
54261: LD_VAR 0 5
54265: ARRAY
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54271: LD_VAR 0 7
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PPUSH
54280: LD_VAR 0 7
54284: PUSH
54285: LD_INT 2
54287: ARRAY
54288: PPUSH
54289: CALL_OW 428
54293: PUSH
54294: LD_INT 0
54296: EQUAL
54297: IFFALSE 54350
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54299: LD_VAR 0 1
54303: PPUSH
54304: LD_VAR 0 7
54308: PUSH
54309: LD_INT 1
54311: ARRAY
54312: PPUSH
54313: LD_VAR 0 7
54317: PUSH
54318: LD_INT 2
54320: ARRAY
54321: PPUSH
54322: LD_VAR 0 3
54326: PPUSH
54327: CALL_OW 48
// result := IsPlaced ( unit ) ;
54331: LD_ADDR_VAR 0 4
54335: PUSH
54336: LD_VAR 0 1
54340: PPUSH
54341: CALL_OW 305
54345: ST_TO_ADDR
// exit ;
54346: POP
54347: POP
54348: GO 54354
// end ; end ;
54350: GO 54229
54352: POP
54353: POP
// end ;
54354: LD_VAR 0 4
54358: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54359: LD_INT 0
54361: PPUSH
54362: PPUSH
54363: PPUSH
// if not side or side > 8 then
54364: LD_VAR 0 1
54368: NOT
54369: PUSH
54370: LD_VAR 0 1
54374: PUSH
54375: LD_INT 8
54377: GREATER
54378: OR
54379: IFFALSE 54383
// exit ;
54381: GO 54570
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54383: LD_ADDR_VAR 0 4
54387: PUSH
54388: LD_INT 22
54390: PUSH
54391: LD_VAR 0 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 21
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PPUSH
54414: CALL_OW 69
54418: ST_TO_ADDR
// if not tmp then
54419: LD_VAR 0 4
54423: NOT
54424: IFFALSE 54428
// exit ;
54426: GO 54570
// enable_addtolog := true ;
54428: LD_ADDR_OWVAR 81
54432: PUSH
54433: LD_INT 1
54435: ST_TO_ADDR
// AddToLog ( [ ) ;
54436: LD_STRING [
54438: PPUSH
54439: CALL_OW 561
// for i in tmp do
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: LD_VAR 0 4
54452: PUSH
54453: FOR_IN
54454: IFFALSE 54561
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54456: LD_STRING [
54458: PUSH
54459: LD_VAR 0 3
54463: PPUSH
54464: CALL_OW 266
54468: STR
54469: PUSH
54470: LD_STRING , 
54472: STR
54473: PUSH
54474: LD_VAR 0 3
54478: PPUSH
54479: CALL_OW 250
54483: STR
54484: PUSH
54485: LD_STRING , 
54487: STR
54488: PUSH
54489: LD_VAR 0 3
54493: PPUSH
54494: CALL_OW 251
54498: STR
54499: PUSH
54500: LD_STRING , 
54502: STR
54503: PUSH
54504: LD_VAR 0 3
54508: PPUSH
54509: CALL_OW 254
54513: STR
54514: PUSH
54515: LD_STRING , 
54517: STR
54518: PUSH
54519: LD_VAR 0 3
54523: PPUSH
54524: LD_INT 1
54526: PPUSH
54527: CALL_OW 268
54531: STR
54532: PUSH
54533: LD_STRING , 
54535: STR
54536: PUSH
54537: LD_VAR 0 3
54541: PPUSH
54542: LD_INT 2
54544: PPUSH
54545: CALL_OW 268
54549: STR
54550: PUSH
54551: LD_STRING ],
54553: STR
54554: PPUSH
54555: CALL_OW 561
// end ;
54559: GO 54453
54561: POP
54562: POP
// AddToLog ( ]; ) ;
54563: LD_STRING ];
54565: PPUSH
54566: CALL_OW 561
// end ;
54570: LD_VAR 0 2
54574: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54575: LD_INT 0
54577: PPUSH
54578: PPUSH
54579: PPUSH
54580: PPUSH
54581: PPUSH
// if not area or not rate or not max then
54582: LD_VAR 0 1
54586: NOT
54587: PUSH
54588: LD_VAR 0 2
54592: NOT
54593: OR
54594: PUSH
54595: LD_VAR 0 4
54599: NOT
54600: OR
54601: IFFALSE 54605
// exit ;
54603: GO 54797
// while 1 do
54605: LD_INT 1
54607: IFFALSE 54797
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54609: LD_ADDR_VAR 0 9
54613: PUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_INT 1
54621: PPUSH
54622: CALL_OW 287
54626: PUSH
54627: LD_INT 10
54629: MUL
54630: ST_TO_ADDR
// r := rate / 10 ;
54631: LD_ADDR_VAR 0 7
54635: PUSH
54636: LD_VAR 0 2
54640: PUSH
54641: LD_INT 10
54643: DIVREAL
54644: ST_TO_ADDR
// time := 1 1$00 ;
54645: LD_ADDR_VAR 0 8
54649: PUSH
54650: LD_INT 2100
54652: ST_TO_ADDR
// if amount < min then
54653: LD_VAR 0 9
54657: PUSH
54658: LD_VAR 0 3
54662: LESS
54663: IFFALSE 54681
// r := r * 2 else
54665: LD_ADDR_VAR 0 7
54669: PUSH
54670: LD_VAR 0 7
54674: PUSH
54675: LD_INT 2
54677: MUL
54678: ST_TO_ADDR
54679: GO 54707
// if amount > max then
54681: LD_VAR 0 9
54685: PUSH
54686: LD_VAR 0 4
54690: GREATER
54691: IFFALSE 54707
// r := r / 2 ;
54693: LD_ADDR_VAR 0 7
54697: PUSH
54698: LD_VAR 0 7
54702: PUSH
54703: LD_INT 2
54705: DIVREAL
54706: ST_TO_ADDR
// time := time / r ;
54707: LD_ADDR_VAR 0 8
54711: PUSH
54712: LD_VAR 0 8
54716: PUSH
54717: LD_VAR 0 7
54721: DIVREAL
54722: ST_TO_ADDR
// if time < 0 then
54723: LD_VAR 0 8
54727: PUSH
54728: LD_INT 0
54730: LESS
54731: IFFALSE 54748
// time := time * - 1 ;
54733: LD_ADDR_VAR 0 8
54737: PUSH
54738: LD_VAR 0 8
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: MUL
54747: ST_TO_ADDR
// wait ( time ) ;
54748: LD_VAR 0 8
54752: PPUSH
54753: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54757: LD_INT 35
54759: PPUSH
54760: LD_INT 875
54762: PPUSH
54763: CALL_OW 12
54767: PPUSH
54768: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54772: LD_INT 1
54774: PPUSH
54775: LD_INT 5
54777: PPUSH
54778: CALL_OW 12
54782: PPUSH
54783: LD_VAR 0 1
54787: PPUSH
54788: LD_INT 1
54790: PPUSH
54791: CALL_OW 55
// end ;
54795: GO 54605
// end ;
54797: LD_VAR 0 5
54801: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54802: LD_INT 0
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
54809: PPUSH
54810: PPUSH
54811: PPUSH
// if not turrets or not factories then
54812: LD_VAR 0 1
54816: NOT
54817: PUSH
54818: LD_VAR 0 2
54822: NOT
54823: OR
54824: IFFALSE 54828
// exit ;
54826: GO 55135
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54828: LD_ADDR_VAR 0 10
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: LD_INT 6
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 24
54870: PUSH
54871: LD_INT 25
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 23
54880: PUSH
54881: LD_INT 27
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 42
54894: PUSH
54895: LD_INT 43
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 44
54904: PUSH
54905: LD_INT 46
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 45
54914: PUSH
54915: LD_INT 47
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: ST_TO_ADDR
// result := [ ] ;
54932: LD_ADDR_VAR 0 3
54936: PUSH
54937: EMPTY
54938: ST_TO_ADDR
// for i in turrets do
54939: LD_ADDR_VAR 0 4
54943: PUSH
54944: LD_VAR 0 1
54948: PUSH
54949: FOR_IN
54950: IFFALSE 55133
// begin nat := GetNation ( i ) ;
54952: LD_ADDR_VAR 0 7
54956: PUSH
54957: LD_VAR 0 4
54961: PPUSH
54962: CALL_OW 248
54966: ST_TO_ADDR
// weapon := 0 ;
54967: LD_ADDR_VAR 0 8
54971: PUSH
54972: LD_INT 0
54974: ST_TO_ADDR
// if not nat then
54975: LD_VAR 0 7
54979: NOT
54980: IFFALSE 54984
// continue ;
54982: GO 54949
// for j in list [ nat ] do
54984: LD_ADDR_VAR 0 5
54988: PUSH
54989: LD_VAR 0 10
54993: PUSH
54994: LD_VAR 0 7
54998: ARRAY
54999: PUSH
55000: FOR_IN
55001: IFFALSE 55042
// if GetBWeapon ( i ) = j [ 1 ] then
55003: LD_VAR 0 4
55007: PPUSH
55008: CALL_OW 269
55012: PUSH
55013: LD_VAR 0 5
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: EQUAL
55022: IFFALSE 55040
// begin weapon := j [ 2 ] ;
55024: LD_ADDR_VAR 0 8
55028: PUSH
55029: LD_VAR 0 5
55033: PUSH
55034: LD_INT 2
55036: ARRAY
55037: ST_TO_ADDR
// break ;
55038: GO 55042
// end ;
55040: GO 55000
55042: POP
55043: POP
// if not weapon then
55044: LD_VAR 0 8
55048: NOT
55049: IFFALSE 55053
// continue ;
55051: GO 54949
// for k in factories do
55053: LD_ADDR_VAR 0 6
55057: PUSH
55058: LD_VAR 0 2
55062: PUSH
55063: FOR_IN
55064: IFFALSE 55129
// begin weapons := AvailableWeaponList ( k ) ;
55066: LD_ADDR_VAR 0 9
55070: PUSH
55071: LD_VAR 0 6
55075: PPUSH
55076: CALL_OW 478
55080: ST_TO_ADDR
// if not weapons then
55081: LD_VAR 0 9
55085: NOT
55086: IFFALSE 55090
// continue ;
55088: GO 55063
// if weapon in weapons then
55090: LD_VAR 0 8
55094: PUSH
55095: LD_VAR 0 9
55099: IN
55100: IFFALSE 55127
// begin result := [ i , weapon ] ;
55102: LD_ADDR_VAR 0 3
55106: PUSH
55107: LD_VAR 0 4
55111: PUSH
55112: LD_VAR 0 8
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// exit ;
55121: POP
55122: POP
55123: POP
55124: POP
55125: GO 55135
// end ; end ;
55127: GO 55063
55129: POP
55130: POP
// end ;
55131: GO 54949
55133: POP
55134: POP
// end ;
55135: LD_VAR 0 3
55139: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55140: LD_INT 0
55142: PPUSH
// if not side or side > 8 then
55143: LD_VAR 0 3
55147: NOT
55148: PUSH
55149: LD_VAR 0 3
55153: PUSH
55154: LD_INT 8
55156: GREATER
55157: OR
55158: IFFALSE 55162
// exit ;
55160: GO 55221
// if not range then
55162: LD_VAR 0 4
55166: NOT
55167: IFFALSE 55178
// range := - 12 ;
55169: LD_ADDR_VAR 0 4
55173: PUSH
55174: LD_INT 12
55176: NEG
55177: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55178: LD_VAR 0 1
55182: PPUSH
55183: LD_VAR 0 2
55187: PPUSH
55188: LD_VAR 0 3
55192: PPUSH
55193: LD_VAR 0 4
55197: PPUSH
55198: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55202: LD_VAR 0 1
55206: PPUSH
55207: LD_VAR 0 2
55211: PPUSH
55212: LD_VAR 0 3
55216: PPUSH
55217: CALL_OW 331
// end ;
55221: LD_VAR 0 5
55225: RET
// export function Video ( mode ) ; begin
55226: LD_INT 0
55228: PPUSH
// ingame_video = mode ;
55229: LD_ADDR_OWVAR 52
55233: PUSH
55234: LD_VAR 0 1
55238: ST_TO_ADDR
// interface_hidden = mode ;
55239: LD_ADDR_OWVAR 54
55243: PUSH
55244: LD_VAR 0 1
55248: ST_TO_ADDR
// end ;
55249: LD_VAR 0 2
55253: RET
// export function Join ( array , element ) ; begin
55254: LD_INT 0
55256: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55257: LD_ADDR_VAR 0 3
55261: PUSH
55262: LD_VAR 0 1
55266: PPUSH
55267: LD_VAR 0 1
55271: PUSH
55272: LD_INT 1
55274: PLUS
55275: PPUSH
55276: LD_VAR 0 2
55280: PPUSH
55281: CALL_OW 1
55285: ST_TO_ADDR
// end ;
55286: LD_VAR 0 3
55290: RET
// export function JoinUnion ( array , element ) ; begin
55291: LD_INT 0
55293: PPUSH
// result := array union element ;
55294: LD_ADDR_VAR 0 3
55298: PUSH
55299: LD_VAR 0 1
55303: PUSH
55304: LD_VAR 0 2
55308: UNION
55309: ST_TO_ADDR
// end ;
55310: LD_VAR 0 3
55314: RET
// export function GetBehemoths ( side ) ; begin
55315: LD_INT 0
55317: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55318: LD_ADDR_VAR 0 2
55322: PUSH
55323: LD_INT 22
55325: PUSH
55326: LD_VAR 0 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 31
55337: PUSH
55338: LD_INT 25
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PPUSH
55349: CALL_OW 69
55353: ST_TO_ADDR
// end ;
55354: LD_VAR 0 2
55358: RET
// export function Shuffle ( array ) ; var i , index ; begin
55359: LD_INT 0
55361: PPUSH
55362: PPUSH
55363: PPUSH
// result := [ ] ;
55364: LD_ADDR_VAR 0 2
55368: PUSH
55369: EMPTY
55370: ST_TO_ADDR
// if not array then
55371: LD_VAR 0 1
55375: NOT
55376: IFFALSE 55380
// exit ;
55378: GO 55479
// Randomize ;
55380: CALL_OW 10
// for i = array downto 1 do
55384: LD_ADDR_VAR 0 3
55388: PUSH
55389: DOUBLE
55390: LD_VAR 0 1
55394: INC
55395: ST_TO_ADDR
55396: LD_INT 1
55398: PUSH
55399: FOR_DOWNTO
55400: IFFALSE 55477
// begin index := rand ( 1 , array ) ;
55402: LD_ADDR_VAR 0 4
55406: PUSH
55407: LD_INT 1
55409: PPUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: CALL_OW 12
55419: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55420: LD_ADDR_VAR 0 2
55424: PUSH
55425: LD_VAR 0 2
55429: PPUSH
55430: LD_VAR 0 2
55434: PUSH
55435: LD_INT 1
55437: PLUS
55438: PPUSH
55439: LD_VAR 0 1
55443: PUSH
55444: LD_VAR 0 4
55448: ARRAY
55449: PPUSH
55450: CALL_OW 2
55454: ST_TO_ADDR
// array := Delete ( array , index ) ;
55455: LD_ADDR_VAR 0 1
55459: PUSH
55460: LD_VAR 0 1
55464: PPUSH
55465: LD_VAR 0 4
55469: PPUSH
55470: CALL_OW 3
55474: ST_TO_ADDR
// end ;
55475: GO 55399
55477: POP
55478: POP
// end ;
55479: LD_VAR 0 2
55483: RET
// export function GetBaseMaterials ( base ) ; begin
55484: LD_INT 0
55486: PPUSH
// result := [ 0 , 0 , 0 ] ;
55487: LD_ADDR_VAR 0 2
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: ST_TO_ADDR
// if not base then
55506: LD_VAR 0 1
55510: NOT
55511: IFFALSE 55515
// exit ;
55513: GO 55564
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55515: LD_ADDR_VAR 0 2
55519: PUSH
55520: LD_VAR 0 1
55524: PPUSH
55525: LD_INT 1
55527: PPUSH
55528: CALL_OW 275
55532: PUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: LD_INT 2
55540: PPUSH
55541: CALL_OW 275
55545: PUSH
55546: LD_VAR 0 1
55550: PPUSH
55551: LD_INT 3
55553: PPUSH
55554: CALL_OW 275
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// end ;
55564: LD_VAR 0 2
55568: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55569: LD_INT 0
55571: PPUSH
55572: PPUSH
// result := array ;
55573: LD_ADDR_VAR 0 3
55577: PUSH
55578: LD_VAR 0 1
55582: ST_TO_ADDR
// if size > 0 then
55583: LD_VAR 0 2
55587: PUSH
55588: LD_INT 0
55590: GREATER
55591: IFFALSE 55637
// for i := array downto size do
55593: LD_ADDR_VAR 0 4
55597: PUSH
55598: DOUBLE
55599: LD_VAR 0 1
55603: INC
55604: ST_TO_ADDR
55605: LD_VAR 0 2
55609: PUSH
55610: FOR_DOWNTO
55611: IFFALSE 55635
// result := Delete ( result , result ) ;
55613: LD_ADDR_VAR 0 3
55617: PUSH
55618: LD_VAR 0 3
55622: PPUSH
55623: LD_VAR 0 3
55627: PPUSH
55628: CALL_OW 3
55632: ST_TO_ADDR
55633: GO 55610
55635: POP
55636: POP
// end ;
55637: LD_VAR 0 3
55641: RET
// export function ComExit ( unit ) ; var tmp ; begin
55642: LD_INT 0
55644: PPUSH
55645: PPUSH
// if not IsInUnit ( unit ) then
55646: LD_VAR 0 1
55650: PPUSH
55651: CALL_OW 310
55655: NOT
55656: IFFALSE 55660
// exit ;
55658: GO 55720
// tmp := IsInUnit ( unit ) ;
55660: LD_ADDR_VAR 0 3
55664: PUSH
55665: LD_VAR 0 1
55669: PPUSH
55670: CALL_OW 310
55674: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55675: LD_VAR 0 3
55679: PPUSH
55680: CALL_OW 247
55684: PUSH
55685: LD_INT 2
55687: EQUAL
55688: IFFALSE 55701
// ComExitVehicle ( unit ) else
55690: LD_VAR 0 1
55694: PPUSH
55695: CALL_OW 121
55699: GO 55710
// ComExitBuilding ( unit ) ;
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 122
// result := tmp ;
55710: LD_ADDR_VAR 0 2
55714: PUSH
55715: LD_VAR 0 3
55719: ST_TO_ADDR
// end ;
55720: LD_VAR 0 2
55724: RET
// export function ResetHc ; begin
55725: LD_INT 0
55727: PPUSH
// InitHc ;
55728: CALL_OW 19
// hc_importance := 0 ;
55732: LD_ADDR_OWVAR 32
55736: PUSH
55737: LD_INT 0
55739: ST_TO_ADDR
// end ;
55740: LD_VAR 0 1
55744: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55745: LD_INT 0
55747: PPUSH
55748: PPUSH
55749: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55750: LD_ADDR_VAR 0 6
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_VAR 0 3
55764: PLUS
55765: PUSH
55766: LD_INT 2
55768: DIV
55769: ST_TO_ADDR
// if _x < 0 then
55770: LD_VAR 0 6
55774: PUSH
55775: LD_INT 0
55777: LESS
55778: IFFALSE 55795
// _x := _x * - 1 ;
55780: LD_ADDR_VAR 0 6
55784: PUSH
55785: LD_VAR 0 6
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: MUL
55794: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55795: LD_ADDR_VAR 0 7
55799: PUSH
55800: LD_VAR 0 2
55804: PUSH
55805: LD_VAR 0 4
55809: PLUS
55810: PUSH
55811: LD_INT 2
55813: DIV
55814: ST_TO_ADDR
// if _y < 0 then
55815: LD_VAR 0 7
55819: PUSH
55820: LD_INT 0
55822: LESS
55823: IFFALSE 55840
// _y := _y * - 1 ;
55825: LD_ADDR_VAR 0 7
55829: PUSH
55830: LD_VAR 0 7
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: MUL
55839: ST_TO_ADDR
// result := [ _x , _y ] ;
55840: LD_ADDR_VAR 0 5
55844: PUSH
55845: LD_VAR 0 6
55849: PUSH
55850: LD_VAR 0 7
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// end ;
55859: LD_VAR 0 5
55863: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55864: LD_INT 0
55866: PPUSH
55867: PPUSH
55868: PPUSH
55869: PPUSH
// task := GetTaskList ( unit ) ;
55870: LD_ADDR_VAR 0 7
55874: PUSH
55875: LD_VAR 0 1
55879: PPUSH
55880: CALL_OW 437
55884: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55885: LD_VAR 0 7
55889: NOT
55890: PUSH
55891: LD_VAR 0 1
55895: PPUSH
55896: LD_VAR 0 2
55900: PPUSH
55901: CALL_OW 308
55905: NOT
55906: AND
55907: IFFALSE 55911
// exit ;
55909: GO 56029
// if IsInArea ( unit , area ) then
55911: LD_VAR 0 1
55915: PPUSH
55916: LD_VAR 0 2
55920: PPUSH
55921: CALL_OW 308
55925: IFFALSE 55943
// begin ComMoveToArea ( unit , goAway ) ;
55927: LD_VAR 0 1
55931: PPUSH
55932: LD_VAR 0 3
55936: PPUSH
55937: CALL_OW 113
// exit ;
55941: GO 56029
// end ; if task [ 1 ] [ 1 ] <> M then
55943: LD_VAR 0 7
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: PUSH
55952: LD_INT 1
55954: ARRAY
55955: PUSH
55956: LD_STRING M
55958: NONEQUAL
55959: IFFALSE 55963
// exit ;
55961: GO 56029
// x := task [ 1 ] [ 2 ] ;
55963: LD_ADDR_VAR 0 5
55967: PUSH
55968: LD_VAR 0 7
55972: PUSH
55973: LD_INT 1
55975: ARRAY
55976: PUSH
55977: LD_INT 2
55979: ARRAY
55980: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55981: LD_ADDR_VAR 0 6
55985: PUSH
55986: LD_VAR 0 7
55990: PUSH
55991: LD_INT 1
55993: ARRAY
55994: PUSH
55995: LD_INT 3
55997: ARRAY
55998: ST_TO_ADDR
// if InArea ( x , y , area ) then
55999: LD_VAR 0 5
56003: PPUSH
56004: LD_VAR 0 6
56008: PPUSH
56009: LD_VAR 0 2
56013: PPUSH
56014: CALL_OW 309
56018: IFFALSE 56029
// ComStop ( unit ) ;
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 141
// end ;
56029: LD_VAR 0 4
56033: RET
// export function Abs ( value ) ; begin
56034: LD_INT 0
56036: PPUSH
// result := value ;
56037: LD_ADDR_VAR 0 2
56041: PUSH
56042: LD_VAR 0 1
56046: ST_TO_ADDR
// if value < 0 then
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 0
56054: LESS
56055: IFFALSE 56072
// result := value * - 1 ;
56057: LD_ADDR_VAR 0 2
56061: PUSH
56062: LD_VAR 0 1
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: MUL
56071: ST_TO_ADDR
// end ;
56072: LD_VAR 0 2
56076: RET
