// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
   0: LD_INT 0
   2: PPUSH
// ar_miner := 81 ;
   3: LD_ADDR_EXP 8
   7: PUSH
   8: LD_INT 81
  10: ST_TO_ADDR
// ar_crane := 88 ;
  11: LD_ADDR_EXP 7
  15: PUSH
  16: LD_INT 88
  18: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
  19: LD_ADDR_EXP 2
  23: PUSH
  24: LD_INT 89
  26: ST_TO_ADDR
// us_hack := 99 ;
  27: LD_ADDR_EXP 3
  31: PUSH
  32: LD_INT 99
  34: ST_TO_ADDR
// us_artillery := 97 ;
  35: LD_ADDR_EXP 4
  39: PUSH
  40: LD_INT 97
  42: ST_TO_ADDR
// ar_bio_bomb := 91 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 91
  50: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_INT 92
  58: ST_TO_ADDR
// ru_radar := 98 ;
  59: LD_ADDR_EXP 1
  63: PUSH
  64: LD_INT 98
  66: ST_TO_ADDR
// tech_Artillery := 80 ;
  67: LD_ADDR_EXP 9
  71: PUSH
  72: LD_INT 80
  74: ST_TO_ADDR
// tech_RadMat := 81 ;
  75: LD_ADDR_EXP 10
  79: PUSH
  80: LD_INT 81
  82: ST_TO_ADDR
// tech_BasicTools := 82 ;
  83: LD_ADDR_EXP 11
  87: PUSH
  88: LD_INT 82
  90: ST_TO_ADDR
// tech_Cargo := 83 ;
  91: LD_ADDR_EXP 12
  95: PUSH
  96: LD_INT 83
  98: ST_TO_ADDR
// tech_Track := 84 ;
  99: LD_ADDR_EXP 13
 103: PUSH
 104: LD_INT 84
 106: ST_TO_ADDR
// tech_Crane := 85 ;
 107: LD_ADDR_EXP 14
 111: PUSH
 112: LD_INT 85
 114: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 115: LD_ADDR_EXP 15
 119: PUSH
 120: LD_INT 86
 122: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 123: LD_ADDR_EXP 16
 127: PUSH
 128: LD_INT 87
 130: ST_TO_ADDR
// end ;
 131: LD_VAR 0 1
 135: RET
// every 1 do
 136: GO 138
 138: DISABLE
// InitGlobalVariables ; end_of_file
 139: CALL 0 0 0
 143: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
 144: LD_VAR 0 2
 148: PUSH
 149: LD_INT 100
 151: EQUAL
 152: IFFALSE 1101
// begin if not StreamModeActive then
 154: LD_EXP 17
 158: NOT
 159: IFFALSE 169
// StreamModeActive := true ;
 161: LD_ADDR_EXP 17
 165: PUSH
 166: LD_INT 1
 168: ST_TO_ADDR
// if p3 = 0 then
 169: LD_VAR 0 3
 173: PUSH
 174: LD_INT 0
 176: EQUAL
 177: IFFALSE 183
// InitStreamMode ;
 179: CALL 1259 0 0
// if p3 = 1 then
 183: LD_VAR 0 3
 187: PUSH
 188: LD_INT 1
 190: EQUAL
 191: IFFALSE 201
// sRocket := true ;
 193: LD_ADDR_EXP 22
 197: PUSH
 198: LD_INT 1
 200: ST_TO_ADDR
// if p3 = 2 then
 201: LD_VAR 0 3
 205: PUSH
 206: LD_INT 2
 208: EQUAL
 209: IFFALSE 219
// sSpeed := true ;
 211: LD_ADDR_EXP 21
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// if p3 = 3 then
 219: LD_VAR 0 3
 223: PUSH
 224: LD_INT 3
 226: EQUAL
 227: IFFALSE 237
// sEngine := true ;
 229: LD_ADDR_EXP 23
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// if p3 = 4 then
 237: LD_VAR 0 3
 241: PUSH
 242: LD_INT 4
 244: EQUAL
 245: IFFALSE 255
// sSpec := true ;
 247: LD_ADDR_EXP 20
 251: PUSH
 252: LD_INT 1
 254: ST_TO_ADDR
// if p3 = 5 then
 255: LD_VAR 0 3
 259: PUSH
 260: LD_INT 5
 262: EQUAL
 263: IFFALSE 273
// sLevel := true ;
 265: LD_ADDR_EXP 24
 269: PUSH
 270: LD_INT 1
 272: ST_TO_ADDR
// if p3 = 6 then
 273: LD_VAR 0 3
 277: PUSH
 278: LD_INT 6
 280: EQUAL
 281: IFFALSE 291
// sArmoury := true ;
 283: LD_ADDR_EXP 25
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// if p3 = 7 then
 291: LD_VAR 0 3
 295: PUSH
 296: LD_INT 7
 298: EQUAL
 299: IFFALSE 309
// sRadar := true ;
 301: LD_ADDR_EXP 26
 305: PUSH
 306: LD_INT 1
 308: ST_TO_ADDR
// if p3 = 8 then
 309: LD_VAR 0 3
 313: PUSH
 314: LD_INT 8
 316: EQUAL
 317: IFFALSE 327
// sBunker := true ;
 319: LD_ADDR_EXP 27
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// if p3 = 9 then
 327: LD_VAR 0 3
 331: PUSH
 332: LD_INT 9
 334: EQUAL
 335: IFFALSE 345
// sHack := true ;
 337: LD_ADDR_EXP 28
 341: PUSH
 342: LD_INT 1
 344: ST_TO_ADDR
// if p3 = 10 then
 345: LD_VAR 0 3
 349: PUSH
 350: LD_INT 10
 352: EQUAL
 353: IFFALSE 363
// sFire := true ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// if p3 = 11 then
 363: LD_VAR 0 3
 367: PUSH
 368: LD_INT 11
 370: EQUAL
 371: IFFALSE 381
// sRefresh := true ;
 373: LD_ADDR_EXP 30
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// if p3 = 12 then
 381: LD_VAR 0 3
 385: PUSH
 386: LD_INT 12
 388: EQUAL
 389: IFFALSE 399
// sExp := true ;
 391: LD_ADDR_EXP 31
 395: PUSH
 396: LD_INT 1
 398: ST_TO_ADDR
// if p3 = 13 then
 399: LD_VAR 0 3
 403: PUSH
 404: LD_INT 13
 406: EQUAL
 407: IFFALSE 417
// sDepot := true ;
 409: LD_ADDR_EXP 32
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// if p3 = 14 then
 417: LD_VAR 0 3
 421: PUSH
 422: LD_INT 14
 424: EQUAL
 425: IFFALSE 435
// sFlag := true ;
 427: LD_ADDR_EXP 33
 431: PUSH
 432: LD_INT 1
 434: ST_TO_ADDR
// if p3 = 15 then
 435: LD_VAR 0 3
 439: PUSH
 440: LD_INT 15
 442: EQUAL
 443: IFFALSE 453
// sKamikadze := true ;
 445: LD_ADDR_EXP 41
 449: PUSH
 450: LD_INT 1
 452: ST_TO_ADDR
// if p3 = 16 then
 453: LD_VAR 0 3
 457: PUSH
 458: LD_INT 16
 460: EQUAL
 461: IFFALSE 471
// sTroll := true ;
 463: LD_ADDR_EXP 42
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// if p3 = 17 then
 471: LD_VAR 0 3
 475: PUSH
 476: LD_INT 17
 478: EQUAL
 479: IFFALSE 489
// sSlow := true ;
 481: LD_ADDR_EXP 43
 485: PUSH
 486: LD_INT 1
 488: ST_TO_ADDR
// if p3 = 18 then
 489: LD_VAR 0 3
 493: PUSH
 494: LD_INT 18
 496: EQUAL
 497: IFFALSE 507
// sLack := true ;
 499: LD_ADDR_EXP 44
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// if p3 = 19 then
 507: LD_VAR 0 3
 511: PUSH
 512: LD_INT 19
 514: EQUAL
 515: IFFALSE 525
// sTank := true ;
 517: LD_ADDR_EXP 46
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// if p3 = 20 then
 525: LD_VAR 0 3
 529: PUSH
 530: LD_INT 20
 532: EQUAL
 533: IFFALSE 543
// sRemote := true ;
 535: LD_ADDR_EXP 47
 539: PUSH
 540: LD_INT 1
 542: ST_TO_ADDR
// if p3 = 21 then
 543: LD_VAR 0 3
 547: PUSH
 548: LD_INT 21
 550: EQUAL
 551: IFFALSE 561
// sPowell := true ;
 553: LD_ADDR_EXP 48
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// if p3 = 22 then
 561: LD_VAR 0 3
 565: PUSH
 566: LD_INT 22
 568: EQUAL
 569: IFFALSE 579
// sTeleport := true ;
 571: LD_ADDR_EXP 51
 575: PUSH
 576: LD_INT 1
 578: ST_TO_ADDR
// if p3 = 23 then
 579: LD_VAR 0 3
 583: PUSH
 584: LD_INT 23
 586: EQUAL
 587: IFFALSE 597
// sOilTower := true ;
 589: LD_ADDR_EXP 53
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// if p3 = 24 then
 597: LD_VAR 0 3
 601: PUSH
 602: LD_INT 24
 604: EQUAL
 605: IFFALSE 615
// sShovel := true ;
 607: LD_ADDR_EXP 54
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// if p3 = 25 then
 615: LD_VAR 0 3
 619: PUSH
 620: LD_INT 25
 622: EQUAL
 623: IFFALSE 633
// sSheik := true ;
 625: LD_ADDR_EXP 55
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// if p3 = 26 then
 633: LD_VAR 0 3
 637: PUSH
 638: LD_INT 26
 640: EQUAL
 641: IFFALSE 651
// sEarthquake := true ;
 643: LD_ADDR_EXP 57
 647: PUSH
 648: LD_INT 1
 650: ST_TO_ADDR
// if p3 = 27 then
 651: LD_VAR 0 3
 655: PUSH
 656: LD_INT 27
 658: EQUAL
 659: IFFALSE 669
// sAI := true ;
 661: LD_ADDR_EXP 58
 665: PUSH
 666: LD_INT 1
 668: ST_TO_ADDR
// if p3 = 28 then
 669: LD_VAR 0 3
 673: PUSH
 674: LD_INT 28
 676: EQUAL
 677: IFFALSE 687
// sCargo := true ;
 679: LD_ADDR_EXP 61
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// if p3 = 29 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 29
 694: EQUAL
 695: IFFALSE 705
// sDLaser := true ;
 697: LD_ADDR_EXP 62
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// if p3 = 30 then
 705: LD_VAR 0 3
 709: PUSH
 710: LD_INT 30
 712: EQUAL
 713: IFFALSE 723
// sExchange := true ;
 715: LD_ADDR_EXP 63
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if p3 = 31 then
 723: LD_VAR 0 3
 727: PUSH
 728: LD_INT 31
 730: EQUAL
 731: IFFALSE 741
// sFac := true ;
 733: LD_ADDR_EXP 64
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// if p3 = 32 then
 741: LD_VAR 0 3
 745: PUSH
 746: LD_INT 32
 748: EQUAL
 749: IFFALSE 759
// sPower := true ;
 751: LD_ADDR_EXP 65
 755: PUSH
 756: LD_INT 1
 758: ST_TO_ADDR
// if p3 = 33 then
 759: LD_VAR 0 3
 763: PUSH
 764: LD_INT 33
 766: EQUAL
 767: IFFALSE 777
// sRandom := true ;
 769: LD_ADDR_EXP 66
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// if p3 = 34 then
 777: LD_VAR 0 3
 781: PUSH
 782: LD_INT 34
 784: EQUAL
 785: IFFALSE 795
// sShield := true ;
 787: LD_ADDR_EXP 67
 791: PUSH
 792: LD_INT 1
 794: ST_TO_ADDR
// if p3 = 35 then
 795: LD_VAR 0 3
 799: PUSH
 800: LD_INT 35
 802: EQUAL
 803: IFFALSE 813
// sTime := true ;
 805: LD_ADDR_EXP 68
 809: PUSH
 810: LD_INT 1
 812: ST_TO_ADDR
// if p3 = 36 then
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 36
 820: EQUAL
 821: IFFALSE 831
// sTools := true ;
 823: LD_ADDR_EXP 69
 827: PUSH
 828: LD_INT 1
 830: ST_TO_ADDR
// if p3 = 101 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 101
 838: EQUAL
 839: IFFALSE 849
// sSold := true ;
 841: LD_ADDR_EXP 34
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// if p3 = 102 then
 849: LD_VAR 0 3
 853: PUSH
 854: LD_INT 102
 856: EQUAL
 857: IFFALSE 867
// sDiff := true ;
 859: LD_ADDR_EXP 35
 863: PUSH
 864: LD_INT 1
 866: ST_TO_ADDR
// if p3 = 103 then
 867: LD_VAR 0 3
 871: PUSH
 872: LD_INT 103
 874: EQUAL
 875: IFFALSE 885
// sFog := true ;
 877: LD_ADDR_EXP 38
 881: PUSH
 882: LD_INT 1
 884: ST_TO_ADDR
// if p3 = 104 then
 885: LD_VAR 0 3
 889: PUSH
 890: LD_INT 104
 892: EQUAL
 893: IFFALSE 903
// sReset := true ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// if p3 = 105 then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_INT 105
 910: EQUAL
 911: IFFALSE 921
// sSun := true ;
 913: LD_ADDR_EXP 40
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// if p3 = 106 then
 921: LD_VAR 0 3
 925: PUSH
 926: LD_INT 106
 928: EQUAL
 929: IFFALSE 939
// sTiger := true ;
 931: LD_ADDR_EXP 36
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// if p3 = 107 then
 939: LD_VAR 0 3
 943: PUSH
 944: LD_INT 107
 946: EQUAL
 947: IFFALSE 957
// sBomb := true ;
 949: LD_ADDR_EXP 37
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// if p3 = 108 then
 957: LD_VAR 0 3
 961: PUSH
 962: LD_INT 108
 964: EQUAL
 965: IFFALSE 975
// sWound := true ;
 967: LD_ADDR_EXP 45
 971: PUSH
 972: LD_INT 1
 974: ST_TO_ADDR
// if p3 = 109 then
 975: LD_VAR 0 3
 979: PUSH
 980: LD_INT 109
 982: EQUAL
 983: IFFALSE 993
// sBetray := true ;
 985: LD_ADDR_EXP 49
 989: PUSH
 990: LD_INT 1
 992: ST_TO_ADDR
// if p3 = 110 then
 993: LD_VAR 0 3
 997: PUSH
 998: LD_INT 110
1000: EQUAL
1001: IFFALSE 1011
// sContamin := true ;
1003: LD_ADDR_EXP 50
1007: PUSH
1008: LD_INT 1
1010: ST_TO_ADDR
// if p3 = 111 then
1011: LD_VAR 0 3
1015: PUSH
1016: LD_INT 111
1018: EQUAL
1019: IFFALSE 1029
// sOil := true ;
1021: LD_ADDR_EXP 52
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// if p3 = 112 then
1029: LD_VAR 0 3
1033: PUSH
1034: LD_INT 112
1036: EQUAL
1037: IFFALSE 1047
// sStu := true ;
1039: LD_ADDR_EXP 56
1043: PUSH
1044: LD_INT 1
1046: ST_TO_ADDR
// if p3 = 113 then
1047: LD_VAR 0 3
1051: PUSH
1052: LD_INT 113
1054: EQUAL
1055: IFFALSE 1065
// sBazooka := true ;
1057: LD_ADDR_EXP 59
1061: PUSH
1062: LD_INT 1
1064: ST_TO_ADDR
// if p3 = 114 then
1065: LD_VAR 0 3
1069: PUSH
1070: LD_INT 114
1072: EQUAL
1073: IFFALSE 1083
// sMortar := true ;
1075: LD_ADDR_EXP 60
1079: PUSH
1080: LD_INT 1
1082: ST_TO_ADDR
// if p3 = 115 then
1083: LD_VAR 0 3
1087: PUSH
1088: LD_INT 115
1090: EQUAL
1091: IFFALSE 1101
// sRanger := true ;
1093: LD_ADDR_EXP 70
1097: PUSH
1098: LD_INT 1
1100: ST_TO_ADDR
// end ; if p2 = 101 then
1101: LD_VAR 0 2
1105: PUSH
1106: LD_INT 101
1108: EQUAL
1109: IFFALSE 1237
// begin case p3 of 1 :
1111: LD_VAR 0 3
1115: PUSH
1116: LD_INT 1
1118: DOUBLE
1119: EQUAL
1120: IFTRUE 1124
1122: GO 1131
1124: POP
// hHackUnlimitedResources ; 2 :
1125: CALL 12272 0 0
1129: GO 1237
1131: LD_INT 2
1133: DOUBLE
1134: EQUAL
1135: IFTRUE 1139
1137: GO 1146
1139: POP
// hHackSetLevel10 ; 3 :
1140: CALL 12405 0 0
1144: GO 1237
1146: LD_INT 3
1148: DOUBLE
1149: EQUAL
1150: IFTRUE 1154
1152: GO 1161
1154: POP
// hHackSetLevel10YourUnits ; 4 :
1155: CALL 12490 0 0
1159: GO 1237
1161: LD_INT 4
1163: DOUBLE
1164: EQUAL
1165: IFTRUE 1169
1167: GO 1176
1169: POP
// hHackInvincible ; 5 :
1170: CALL 12938 0 0
1174: GO 1237
1176: LD_INT 5
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1191
1184: POP
// hHackInvisible ; 6 :
1185: CALL 13049 0 0
1189: GO 1237
1191: LD_INT 6
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1206
1199: POP
// hHackChangeYourSide ; 7 :
1200: CALL 13106 0 0
1204: GO 1237
1206: LD_INT 7
1208: DOUBLE
1209: EQUAL
1210: IFTRUE 1214
1212: GO 1221
1214: POP
// hHackChangeUnitSide ; 8 :
1215: CALL 13148 0 0
1219: GO 1237
1221: LD_INT 8
1223: DOUBLE
1224: EQUAL
1225: IFTRUE 1229
1227: GO 1236
1229: POP
// hHackFog ; end ;
1230: CALL 13249 0 0
1234: GO 1237
1236: POP
// end ; end ;
1237: PPOPN 6
1239: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
1240: GO 1242
1242: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1243: LD_STRING initStreamRollete();
1245: PPUSH
1246: CALL_OW 559
// InitStreamMode ;
1250: CALL 1259 0 0
// DefineStreamItems ( ) ;
1254: CALL 1699 0 0
// end ;
1258: END
// function InitStreamMode ; begin
1259: LD_INT 0
1261: PPUSH
// streamModeActive := false ;
1262: LD_ADDR_EXP 17
1266: PUSH
1267: LD_INT 0
1269: ST_TO_ADDR
// normalCounter := 36 ;
1270: LD_ADDR_EXP 18
1274: PUSH
1275: LD_INT 36
1277: ST_TO_ADDR
// hardcoreCounter := 16 ;
1278: LD_ADDR_EXP 19
1282: PUSH
1283: LD_INT 16
1285: ST_TO_ADDR
// sRocket := false ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// sSpeed := false ;
1294: LD_ADDR_EXP 21
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// sEngine := false ;
1302: LD_ADDR_EXP 23
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// sSpec := false ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// sLevel := false ;
1318: LD_ADDR_EXP 24
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// sArmoury := false ;
1326: LD_ADDR_EXP 25
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// sRadar := false ;
1334: LD_ADDR_EXP 26
1338: PUSH
1339: LD_INT 0
1341: ST_TO_ADDR
// sBunker := false ;
1342: LD_ADDR_EXP 27
1346: PUSH
1347: LD_INT 0
1349: ST_TO_ADDR
// sHack := false ;
1350: LD_ADDR_EXP 28
1354: PUSH
1355: LD_INT 0
1357: ST_TO_ADDR
// sFire := false ;
1358: LD_ADDR_EXP 29
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// sRefresh := false ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// sExp := false ;
1374: LD_ADDR_EXP 31
1378: PUSH
1379: LD_INT 0
1381: ST_TO_ADDR
// sDepot := false ;
1382: LD_ADDR_EXP 32
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// sFlag := false ;
1390: LD_ADDR_EXP 33
1394: PUSH
1395: LD_INT 0
1397: ST_TO_ADDR
// sKamikadze := false ;
1398: LD_ADDR_EXP 41
1402: PUSH
1403: LD_INT 0
1405: ST_TO_ADDR
// sTroll := false ;
1406: LD_ADDR_EXP 42
1410: PUSH
1411: LD_INT 0
1413: ST_TO_ADDR
// sSlow := false ;
1414: LD_ADDR_EXP 43
1418: PUSH
1419: LD_INT 0
1421: ST_TO_ADDR
// sLack := false ;
1422: LD_ADDR_EXP 44
1426: PUSH
1427: LD_INT 0
1429: ST_TO_ADDR
// sTank := false ;
1430: LD_ADDR_EXP 46
1434: PUSH
1435: LD_INT 0
1437: ST_TO_ADDR
// sRemote := false ;
1438: LD_ADDR_EXP 47
1442: PUSH
1443: LD_INT 0
1445: ST_TO_ADDR
// sPowell := false ;
1446: LD_ADDR_EXP 48
1450: PUSH
1451: LD_INT 0
1453: ST_TO_ADDR
// sTeleport := false ;
1454: LD_ADDR_EXP 51
1458: PUSH
1459: LD_INT 0
1461: ST_TO_ADDR
// sOilTower := false ;
1462: LD_ADDR_EXP 53
1466: PUSH
1467: LD_INT 0
1469: ST_TO_ADDR
// sShovel := false ;
1470: LD_ADDR_EXP 54
1474: PUSH
1475: LD_INT 0
1477: ST_TO_ADDR
// sSheik := false ;
1478: LD_ADDR_EXP 55
1482: PUSH
1483: LD_INT 0
1485: ST_TO_ADDR
// sEarthquake := false ;
1486: LD_ADDR_EXP 57
1490: PUSH
1491: LD_INT 0
1493: ST_TO_ADDR
// sAI := false ;
1494: LD_ADDR_EXP 58
1498: PUSH
1499: LD_INT 0
1501: ST_TO_ADDR
// sCargo := false ;
1502: LD_ADDR_EXP 61
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// sDLaser := false ;
1510: LD_ADDR_EXP 62
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// sExchange := false ;
1518: LD_ADDR_EXP 63
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// sFac := false ;
1526: LD_ADDR_EXP 64
1530: PUSH
1531: LD_INT 0
1533: ST_TO_ADDR
// sPower := false ;
1534: LD_ADDR_EXP 65
1538: PUSH
1539: LD_INT 0
1541: ST_TO_ADDR
// sRandom := false ;
1542: LD_ADDR_EXP 66
1546: PUSH
1547: LD_INT 0
1549: ST_TO_ADDR
// sShield := false ;
1550: LD_ADDR_EXP 67
1554: PUSH
1555: LD_INT 0
1557: ST_TO_ADDR
// sTime := false ;
1558: LD_ADDR_EXP 68
1562: PUSH
1563: LD_INT 0
1565: ST_TO_ADDR
// sTools := false ;
1566: LD_ADDR_EXP 69
1570: PUSH
1571: LD_INT 0
1573: ST_TO_ADDR
// sSold := false ;
1574: LD_ADDR_EXP 34
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// sDiff := false ;
1582: LD_ADDR_EXP 35
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// sFog := false ;
1590: LD_ADDR_EXP 38
1594: PUSH
1595: LD_INT 0
1597: ST_TO_ADDR
// sReset := false ;
1598: LD_ADDR_EXP 39
1602: PUSH
1603: LD_INT 0
1605: ST_TO_ADDR
// sSun := false ;
1606: LD_ADDR_EXP 40
1610: PUSH
1611: LD_INT 0
1613: ST_TO_ADDR
// sTiger := false ;
1614: LD_ADDR_EXP 36
1618: PUSH
1619: LD_INT 0
1621: ST_TO_ADDR
// sBomb := false ;
1622: LD_ADDR_EXP 37
1626: PUSH
1627: LD_INT 0
1629: ST_TO_ADDR
// sWound := false ;
1630: LD_ADDR_EXP 45
1634: PUSH
1635: LD_INT 0
1637: ST_TO_ADDR
// sBetray := false ;
1638: LD_ADDR_EXP 49
1642: PUSH
1643: LD_INT 0
1645: ST_TO_ADDR
// sContamin := false ;
1646: LD_ADDR_EXP 50
1650: PUSH
1651: LD_INT 0
1653: ST_TO_ADDR
// sOil := false ;
1654: LD_ADDR_EXP 52
1658: PUSH
1659: LD_INT 0
1661: ST_TO_ADDR
// sStu := false ;
1662: LD_ADDR_EXP 56
1666: PUSH
1667: LD_INT 0
1669: ST_TO_ADDR
// sBazooka := false ;
1670: LD_ADDR_EXP 59
1674: PUSH
1675: LD_INT 0
1677: ST_TO_ADDR
// sMortar := false ;
1678: LD_ADDR_EXP 60
1682: PUSH
1683: LD_INT 0
1685: ST_TO_ADDR
// sRanger := false ;
1686: LD_ADDR_EXP 70
1690: PUSH
1691: LD_INT 0
1693: ST_TO_ADDR
// end ;
1694: LD_VAR 0 1
1698: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
1699: LD_INT 0
1701: PPUSH
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
// result := [ ] ;
1706: LD_ADDR_VAR 0 1
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// if campaign_id = 1 then
1713: LD_OWVAR 69
1717: PUSH
1718: LD_INT 1
1720: EQUAL
1721: IFFALSE 4659
// begin case mission_number of 1 :
1723: LD_OWVAR 70
1727: PUSH
1728: LD_INT 1
1730: DOUBLE
1731: EQUAL
1732: IFTRUE 1736
1734: GO 1800
1736: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
1737: LD_ADDR_VAR 0 1
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: LD_INT 4
1747: PUSH
1748: LD_INT 11
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: LD_INT 15
1756: PUSH
1757: LD_INT 16
1759: PUSH
1760: LD_INT 22
1762: PUSH
1763: LD_INT 23
1765: PUSH
1766: LD_INT 26
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 101
1782: PUSH
1783: LD_INT 102
1785: PUSH
1786: LD_INT 106
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: ST_TO_ADDR
1798: GO 4657
1800: LD_INT 2
1802: DOUBLE
1803: EQUAL
1804: IFTRUE 1808
1806: GO 1880
1808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
1809: LD_ADDR_VAR 0 1
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 4
1819: PUSH
1820: LD_INT 11
1822: PUSH
1823: LD_INT 12
1825: PUSH
1826: LD_INT 15
1828: PUSH
1829: LD_INT 16
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 23
1837: PUSH
1838: LD_INT 26
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 101
1854: PUSH
1855: LD_INT 102
1857: PUSH
1858: LD_INT 105
1860: PUSH
1861: LD_INT 106
1863: PUSH
1864: LD_INT 108
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: ST_TO_ADDR
1878: GO 4657
1880: LD_INT 3
1882: DOUBLE
1883: EQUAL
1884: IFTRUE 1888
1886: GO 1964
1888: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 4
1899: PUSH
1900: LD_INT 5
1902: PUSH
1903: LD_INT 11
1905: PUSH
1906: LD_INT 12
1908: PUSH
1909: LD_INT 15
1911: PUSH
1912: LD_INT 16
1914: PUSH
1915: LD_INT 22
1917: PUSH
1918: LD_INT 26
1920: PUSH
1921: LD_INT 36
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 101
1938: PUSH
1939: LD_INT 102
1941: PUSH
1942: LD_INT 105
1944: PUSH
1945: LD_INT 106
1947: PUSH
1948: LD_INT 108
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: ST_TO_ADDR
1962: GO 4657
1964: LD_INT 4
1966: DOUBLE
1967: EQUAL
1968: IFTRUE 1972
1970: GO 2056
1972: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
1973: LD_ADDR_VAR 0 1
1977: PUSH
1978: LD_INT 2
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: LD_INT 5
1986: PUSH
1987: LD_INT 8
1989: PUSH
1990: LD_INT 11
1992: PUSH
1993: LD_INT 12
1995: PUSH
1996: LD_INT 15
1998: PUSH
1999: LD_INT 16
2001: PUSH
2002: LD_INT 22
2004: PUSH
2005: LD_INT 23
2007: PUSH
2008: LD_INT 26
2010: PUSH
2011: LD_INT 36
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 101
2030: PUSH
2031: LD_INT 102
2033: PUSH
2034: LD_INT 105
2036: PUSH
2037: LD_INT 106
2039: PUSH
2040: LD_INT 108
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: ST_TO_ADDR
2054: GO 4657
2056: LD_INT 5
2058: DOUBLE
2059: EQUAL
2060: IFTRUE 2064
2062: GO 2164
2064: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
2065: LD_ADDR_VAR 0 1
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 5
2078: PUSH
2079: LD_INT 6
2081: PUSH
2082: LD_INT 8
2084: PUSH
2085: LD_INT 11
2087: PUSH
2088: LD_INT 12
2090: PUSH
2091: LD_INT 15
2093: PUSH
2094: LD_INT 16
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 23
2102: PUSH
2103: LD_INT 25
2105: PUSH
2106: LD_INT 26
2108: PUSH
2109: LD_INT 36
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 101
2130: PUSH
2131: LD_INT 102
2133: PUSH
2134: LD_INT 105
2136: PUSH
2137: LD_INT 106
2139: PUSH
2140: LD_INT 108
2142: PUSH
2143: LD_INT 109
2145: PUSH
2146: LD_INT 112
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: ST_TO_ADDR
2162: GO 4657
2164: LD_INT 6
2166: DOUBLE
2167: EQUAL
2168: IFTRUE 2172
2170: GO 2292
2172: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
2173: LD_ADDR_VAR 0 1
2177: PUSH
2178: LD_INT 2
2180: PUSH
2181: LD_INT 4
2183: PUSH
2184: LD_INT 5
2186: PUSH
2187: LD_INT 6
2189: PUSH
2190: LD_INT 8
2192: PUSH
2193: LD_INT 11
2195: PUSH
2196: LD_INT 12
2198: PUSH
2199: LD_INT 15
2201: PUSH
2202: LD_INT 16
2204: PUSH
2205: LD_INT 20
2207: PUSH
2208: LD_INT 21
2210: PUSH
2211: LD_INT 22
2213: PUSH
2214: LD_INT 23
2216: PUSH
2217: LD_INT 25
2219: PUSH
2220: LD_INT 26
2222: PUSH
2223: LD_INT 30
2225: PUSH
2226: LD_INT 31
2228: PUSH
2229: LD_INT 32
2231: PUSH
2232: LD_INT 36
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 101
2258: PUSH
2259: LD_INT 102
2261: PUSH
2262: LD_INT 105
2264: PUSH
2265: LD_INT 106
2267: PUSH
2268: LD_INT 108
2270: PUSH
2271: LD_INT 109
2273: PUSH
2274: LD_INT 112
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: ST_TO_ADDR
2290: GO 4657
2292: LD_INT 7
2294: DOUBLE
2295: EQUAL
2296: IFTRUE 2300
2298: GO 2400
2300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
2301: LD_ADDR_VAR 0 1
2305: PUSH
2306: LD_INT 2
2308: PUSH
2309: LD_INT 4
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: LD_INT 7
2317: PUSH
2318: LD_INT 11
2320: PUSH
2321: LD_INT 12
2323: PUSH
2324: LD_INT 15
2326: PUSH
2327: LD_INT 16
2329: PUSH
2330: LD_INT 20
2332: PUSH
2333: LD_INT 21
2335: PUSH
2336: LD_INT 22
2338: PUSH
2339: LD_INT 23
2341: PUSH
2342: LD_INT 25
2344: PUSH
2345: LD_INT 26
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 101
2366: PUSH
2367: LD_INT 102
2369: PUSH
2370: LD_INT 103
2372: PUSH
2373: LD_INT 105
2375: PUSH
2376: LD_INT 106
2378: PUSH
2379: LD_INT 108
2381: PUSH
2382: LD_INT 112
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: ST_TO_ADDR
2398: GO 4657
2400: LD_INT 8
2402: DOUBLE
2403: EQUAL
2404: IFTRUE 2408
2406: GO 2536
2408: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
2409: LD_ADDR_VAR 0 1
2413: PUSH
2414: LD_INT 2
2416: PUSH
2417: LD_INT 4
2419: PUSH
2420: LD_INT 5
2422: PUSH
2423: LD_INT 6
2425: PUSH
2426: LD_INT 7
2428: PUSH
2429: LD_INT 8
2431: PUSH
2432: LD_INT 11
2434: PUSH
2435: LD_INT 12
2437: PUSH
2438: LD_INT 15
2440: PUSH
2441: LD_INT 16
2443: PUSH
2444: LD_INT 20
2446: PUSH
2447: LD_INT 21
2449: PUSH
2450: LD_INT 22
2452: PUSH
2453: LD_INT 23
2455: PUSH
2456: LD_INT 25
2458: PUSH
2459: LD_INT 26
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 31
2467: PUSH
2468: LD_INT 32
2470: PUSH
2471: LD_INT 36
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 101
2498: PUSH
2499: LD_INT 102
2501: PUSH
2502: LD_INT 103
2504: PUSH
2505: LD_INT 105
2507: PUSH
2508: LD_INT 106
2510: PUSH
2511: LD_INT 108
2513: PUSH
2514: LD_INT 109
2516: PUSH
2517: LD_INT 112
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: ST_TO_ADDR
2534: GO 4657
2536: LD_INT 9
2538: DOUBLE
2539: EQUAL
2540: IFTRUE 2544
2542: GO 2680
2544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
2545: LD_ADDR_VAR 0 1
2549: PUSH
2550: LD_INT 2
2552: PUSH
2553: LD_INT 4
2555: PUSH
2556: LD_INT 5
2558: PUSH
2559: LD_INT 6
2561: PUSH
2562: LD_INT 7
2564: PUSH
2565: LD_INT 8
2567: PUSH
2568: LD_INT 11
2570: PUSH
2571: LD_INT 12
2573: PUSH
2574: LD_INT 15
2576: PUSH
2577: LD_INT 16
2579: PUSH
2580: LD_INT 20
2582: PUSH
2583: LD_INT 21
2585: PUSH
2586: LD_INT 22
2588: PUSH
2589: LD_INT 23
2591: PUSH
2592: LD_INT 25
2594: PUSH
2595: LD_INT 26
2597: PUSH
2598: LD_INT 28
2600: PUSH
2601: LD_INT 30
2603: PUSH
2604: LD_INT 31
2606: PUSH
2607: LD_INT 32
2609: PUSH
2610: LD_INT 36
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 101
2638: PUSH
2639: LD_INT 102
2641: PUSH
2642: LD_INT 103
2644: PUSH
2645: LD_INT 105
2647: PUSH
2648: LD_INT 106
2650: PUSH
2651: LD_INT 108
2653: PUSH
2654: LD_INT 109
2656: PUSH
2657: LD_INT 112
2659: PUSH
2660: LD_INT 114
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: ST_TO_ADDR
2678: GO 4657
2680: LD_INT 10
2682: DOUBLE
2683: EQUAL
2684: IFTRUE 2688
2686: GO 2872
2688: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
2689: LD_ADDR_VAR 0 1
2693: PUSH
2694: LD_INT 2
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 5
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 7
2708: PUSH
2709: LD_INT 8
2711: PUSH
2712: LD_INT 9
2714: PUSH
2715: LD_INT 10
2717: PUSH
2718: LD_INT 11
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: LD_INT 13
2726: PUSH
2727: LD_INT 14
2729: PUSH
2730: LD_INT 15
2732: PUSH
2733: LD_INT 16
2735: PUSH
2736: LD_INT 17
2738: PUSH
2739: LD_INT 18
2741: PUSH
2742: LD_INT 19
2744: PUSH
2745: LD_INT 20
2747: PUSH
2748: LD_INT 21
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 23
2756: PUSH
2757: LD_INT 24
2759: PUSH
2760: LD_INT 25
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 28
2768: PUSH
2769: LD_INT 30
2771: PUSH
2772: LD_INT 31
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: LD_INT 36
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 101
2814: PUSH
2815: LD_INT 102
2817: PUSH
2818: LD_INT 103
2820: PUSH
2821: LD_INT 104
2823: PUSH
2824: LD_INT 105
2826: PUSH
2827: LD_INT 106
2829: PUSH
2830: LD_INT 107
2832: PUSH
2833: LD_INT 108
2835: PUSH
2836: LD_INT 109
2838: PUSH
2839: LD_INT 110
2841: PUSH
2842: LD_INT 111
2844: PUSH
2845: LD_INT 112
2847: PUSH
2848: LD_INT 114
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: ST_TO_ADDR
2870: GO 4657
2872: LD_INT 11
2874: DOUBLE
2875: EQUAL
2876: IFTRUE 2880
2878: GO 3072
2880: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
2881: LD_ADDR_VAR 0 1
2885: PUSH
2886: LD_INT 2
2888: PUSH
2889: LD_INT 3
2891: PUSH
2892: LD_INT 4
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 6
2900: PUSH
2901: LD_INT 7
2903: PUSH
2904: LD_INT 8
2906: PUSH
2907: LD_INT 9
2909: PUSH
2910: LD_INT 10
2912: PUSH
2913: LD_INT 11
2915: PUSH
2916: LD_INT 12
2918: PUSH
2919: LD_INT 13
2921: PUSH
2922: LD_INT 14
2924: PUSH
2925: LD_INT 15
2927: PUSH
2928: LD_INT 16
2930: PUSH
2931: LD_INT 17
2933: PUSH
2934: LD_INT 18
2936: PUSH
2937: LD_INT 19
2939: PUSH
2940: LD_INT 20
2942: PUSH
2943: LD_INT 21
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 23
2951: PUSH
2952: LD_INT 24
2954: PUSH
2955: LD_INT 25
2957: PUSH
2958: LD_INT 26
2960: PUSH
2961: LD_INT 28
2963: PUSH
2964: LD_INT 30
2966: PUSH
2967: LD_INT 31
2969: PUSH
2970: LD_INT 32
2972: PUSH
2973: LD_INT 34
2975: PUSH
2976: LD_INT 36
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 101
3014: PUSH
3015: LD_INT 102
3017: PUSH
3018: LD_INT 103
3020: PUSH
3021: LD_INT 104
3023: PUSH
3024: LD_INT 105
3026: PUSH
3027: LD_INT 106
3029: PUSH
3030: LD_INT 107
3032: PUSH
3033: LD_INT 108
3035: PUSH
3036: LD_INT 109
3038: PUSH
3039: LD_INT 110
3041: PUSH
3042: LD_INT 111
3044: PUSH
3045: LD_INT 112
3047: PUSH
3048: LD_INT 114
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: ST_TO_ADDR
3070: GO 4657
3072: LD_INT 12
3074: DOUBLE
3075: EQUAL
3076: IFTRUE 3080
3078: GO 3288
3080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
3081: LD_ADDR_VAR 0 1
3085: PUSH
3086: LD_INT 1
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: LD_INT 4
3097: PUSH
3098: LD_INT 5
3100: PUSH
3101: LD_INT 6
3103: PUSH
3104: LD_INT 7
3106: PUSH
3107: LD_INT 8
3109: PUSH
3110: LD_INT 9
3112: PUSH
3113: LD_INT 10
3115: PUSH
3116: LD_INT 11
3118: PUSH
3119: LD_INT 12
3121: PUSH
3122: LD_INT 13
3124: PUSH
3125: LD_INT 14
3127: PUSH
3128: LD_INT 15
3130: PUSH
3131: LD_INT 16
3133: PUSH
3134: LD_INT 17
3136: PUSH
3137: LD_INT 18
3139: PUSH
3140: LD_INT 19
3142: PUSH
3143: LD_INT 20
3145: PUSH
3146: LD_INT 21
3148: PUSH
3149: LD_INT 22
3151: PUSH
3152: LD_INT 23
3154: PUSH
3155: LD_INT 24
3157: PUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 26
3163: PUSH
3164: LD_INT 27
3166: PUSH
3167: LD_INT 28
3169: PUSH
3170: LD_INT 30
3172: PUSH
3173: LD_INT 31
3175: PUSH
3176: LD_INT 32
3178: PUSH
3179: LD_INT 33
3181: PUSH
3182: LD_INT 34
3184: PUSH
3185: LD_INT 36
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 101
3226: PUSH
3227: LD_INT 102
3229: PUSH
3230: LD_INT 103
3232: PUSH
3233: LD_INT 104
3235: PUSH
3236: LD_INT 105
3238: PUSH
3239: LD_INT 106
3241: PUSH
3242: LD_INT 107
3244: PUSH
3245: LD_INT 108
3247: PUSH
3248: LD_INT 109
3250: PUSH
3251: LD_INT 110
3253: PUSH
3254: LD_INT 111
3256: PUSH
3257: LD_INT 112
3259: PUSH
3260: LD_INT 113
3262: PUSH
3263: LD_INT 114
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: ST_TO_ADDR
3286: GO 4657
3288: LD_INT 13
3290: DOUBLE
3291: EQUAL
3292: IFTRUE 3296
3294: GO 3492
3296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
3297: LD_ADDR_VAR 0 1
3301: PUSH
3302: LD_INT 1
3304: PUSH
3305: LD_INT 2
3307: PUSH
3308: LD_INT 3
3310: PUSH
3311: LD_INT 4
3313: PUSH
3314: LD_INT 5
3316: PUSH
3317: LD_INT 8
3319: PUSH
3320: LD_INT 9
3322: PUSH
3323: LD_INT 10
3325: PUSH
3326: LD_INT 11
3328: PUSH
3329: LD_INT 12
3331: PUSH
3332: LD_INT 14
3334: PUSH
3335: LD_INT 15
3337: PUSH
3338: LD_INT 16
3340: PUSH
3341: LD_INT 17
3343: PUSH
3344: LD_INT 18
3346: PUSH
3347: LD_INT 19
3349: PUSH
3350: LD_INT 20
3352: PUSH
3353: LD_INT 21
3355: PUSH
3356: LD_INT 22
3358: PUSH
3359: LD_INT 23
3361: PUSH
3362: LD_INT 24
3364: PUSH
3365: LD_INT 25
3367: PUSH
3368: LD_INT 26
3370: PUSH
3371: LD_INT 27
3373: PUSH
3374: LD_INT 28
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 31
3382: PUSH
3383: LD_INT 32
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 34
3391: PUSH
3392: LD_INT 36
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 101
3430: PUSH
3431: LD_INT 102
3433: PUSH
3434: LD_INT 103
3436: PUSH
3437: LD_INT 104
3439: PUSH
3440: LD_INT 105
3442: PUSH
3443: LD_INT 106
3445: PUSH
3446: LD_INT 107
3448: PUSH
3449: LD_INT 108
3451: PUSH
3452: LD_INT 109
3454: PUSH
3455: LD_INT 110
3457: PUSH
3458: LD_INT 111
3460: PUSH
3461: LD_INT 112
3463: PUSH
3464: LD_INT 113
3466: PUSH
3467: LD_INT 114
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: ST_TO_ADDR
3490: GO 4657
3492: LD_INT 14
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3712
3500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: LD_INT 2
3511: PUSH
3512: LD_INT 3
3514: PUSH
3515: LD_INT 4
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: LD_INT 6
3523: PUSH
3524: LD_INT 7
3526: PUSH
3527: LD_INT 8
3529: PUSH
3530: LD_INT 9
3532: PUSH
3533: LD_INT 10
3535: PUSH
3536: LD_INT 11
3538: PUSH
3539: LD_INT 12
3541: PUSH
3542: LD_INT 13
3544: PUSH
3545: LD_INT 14
3547: PUSH
3548: LD_INT 15
3550: PUSH
3551: LD_INT 16
3553: PUSH
3554: LD_INT 17
3556: PUSH
3557: LD_INT 18
3559: PUSH
3560: LD_INT 19
3562: PUSH
3563: LD_INT 20
3565: PUSH
3566: LD_INT 21
3568: PUSH
3569: LD_INT 22
3571: PUSH
3572: LD_INT 23
3574: PUSH
3575: LD_INT 24
3577: PUSH
3578: LD_INT 25
3580: PUSH
3581: LD_INT 26
3583: PUSH
3584: LD_INT 27
3586: PUSH
3587: LD_INT 28
3589: PUSH
3590: LD_INT 29
3592: PUSH
3593: LD_INT 30
3595: PUSH
3596: LD_INT 31
3598: PUSH
3599: LD_INT 32
3601: PUSH
3602: LD_INT 33
3604: PUSH
3605: LD_INT 34
3607: PUSH
3608: LD_INT 36
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 101
3650: PUSH
3651: LD_INT 102
3653: PUSH
3654: LD_INT 103
3656: PUSH
3657: LD_INT 104
3659: PUSH
3660: LD_INT 105
3662: PUSH
3663: LD_INT 106
3665: PUSH
3666: LD_INT 107
3668: PUSH
3669: LD_INT 108
3671: PUSH
3672: LD_INT 109
3674: PUSH
3675: LD_INT 110
3677: PUSH
3678: LD_INT 111
3680: PUSH
3681: LD_INT 112
3683: PUSH
3684: LD_INT 113
3686: PUSH
3687: LD_INT 114
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: ST_TO_ADDR
3710: GO 4657
3712: LD_INT 15
3714: DOUBLE
3715: EQUAL
3716: IFTRUE 3720
3718: GO 3932
3720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
3721: LD_ADDR_VAR 0 1
3725: PUSH
3726: LD_INT 1
3728: PUSH
3729: LD_INT 2
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: LD_INT 9
3752: PUSH
3753: LD_INT 10
3755: PUSH
3756: LD_INT 11
3758: PUSH
3759: LD_INT 12
3761: PUSH
3762: LD_INT 13
3764: PUSH
3765: LD_INT 14
3767: PUSH
3768: LD_INT 15
3770: PUSH
3771: LD_INT 16
3773: PUSH
3774: LD_INT 17
3776: PUSH
3777: LD_INT 18
3779: PUSH
3780: LD_INT 19
3782: PUSH
3783: LD_INT 20
3785: PUSH
3786: LD_INT 21
3788: PUSH
3789: LD_INT 22
3791: PUSH
3792: LD_INT 23
3794: PUSH
3795: LD_INT 24
3797: PUSH
3798: LD_INT 25
3800: PUSH
3801: LD_INT 26
3803: PUSH
3804: LD_INT 27
3806: PUSH
3807: LD_INT 28
3809: PUSH
3810: LD_INT 29
3812: PUSH
3813: LD_INT 30
3815: PUSH
3816: LD_INT 31
3818: PUSH
3819: LD_INT 32
3821: PUSH
3822: LD_INT 33
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 36
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 101
3870: PUSH
3871: LD_INT 102
3873: PUSH
3874: LD_INT 103
3876: PUSH
3877: LD_INT 104
3879: PUSH
3880: LD_INT 105
3882: PUSH
3883: LD_INT 106
3885: PUSH
3886: LD_INT 107
3888: PUSH
3889: LD_INT 108
3891: PUSH
3892: LD_INT 109
3894: PUSH
3895: LD_INT 110
3897: PUSH
3898: LD_INT 111
3900: PUSH
3901: LD_INT 112
3903: PUSH
3904: LD_INT 113
3906: PUSH
3907: LD_INT 114
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: ST_TO_ADDR
3930: GO 4657
3932: LD_INT 16
3934: DOUBLE
3935: EQUAL
3936: IFTRUE 3940
3938: GO 4064
3940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
3941: LD_ADDR_VAR 0 1
3945: PUSH
3946: LD_INT 2
3948: PUSH
3949: LD_INT 4
3951: PUSH
3952: LD_INT 5
3954: PUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 11
3960: PUSH
3961: LD_INT 12
3963: PUSH
3964: LD_INT 15
3966: PUSH
3967: LD_INT 16
3969: PUSH
3970: LD_INT 20
3972: PUSH
3973: LD_INT 21
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: LD_INT 23
3981: PUSH
3982: LD_INT 25
3984: PUSH
3985: LD_INT 26
3987: PUSH
3988: LD_INT 30
3990: PUSH
3991: LD_INT 31
3993: PUSH
3994: LD_INT 32
3996: PUSH
3997: LD_INT 33
3999: PUSH
4000: LD_INT 34
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 101
4026: PUSH
4027: LD_INT 102
4029: PUSH
4030: LD_INT 103
4032: PUSH
4033: LD_INT 106
4035: PUSH
4036: LD_INT 108
4038: PUSH
4039: LD_INT 112
4041: PUSH
4042: LD_INT 113
4044: PUSH
4045: LD_INT 114
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4657
4064: LD_INT 17
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4284
4072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
4073: LD_ADDR_VAR 0 1
4077: PUSH
4078: LD_INT 1
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 4
4089: PUSH
4090: LD_INT 5
4092: PUSH
4093: LD_INT 6
4095: PUSH
4096: LD_INT 7
4098: PUSH
4099: LD_INT 8
4101: PUSH
4102: LD_INT 9
4104: PUSH
4105: LD_INT 10
4107: PUSH
4108: LD_INT 11
4110: PUSH
4111: LD_INT 12
4113: PUSH
4114: LD_INT 13
4116: PUSH
4117: LD_INT 14
4119: PUSH
4120: LD_INT 15
4122: PUSH
4123: LD_INT 16
4125: PUSH
4126: LD_INT 17
4128: PUSH
4129: LD_INT 18
4131: PUSH
4132: LD_INT 19
4134: PUSH
4135: LD_INT 20
4137: PUSH
4138: LD_INT 21
4140: PUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 23
4146: PUSH
4147: LD_INT 24
4149: PUSH
4150: LD_INT 25
4152: PUSH
4153: LD_INT 26
4155: PUSH
4156: LD_INT 27
4158: PUSH
4159: LD_INT 28
4161: PUSH
4162: LD_INT 29
4164: PUSH
4165: LD_INT 30
4167: PUSH
4168: LD_INT 31
4170: PUSH
4171: LD_INT 32
4173: PUSH
4174: LD_INT 33
4176: PUSH
4177: LD_INT 34
4179: PUSH
4180: LD_INT 36
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 101
4222: PUSH
4223: LD_INT 102
4225: PUSH
4226: LD_INT 103
4228: PUSH
4229: LD_INT 104
4231: PUSH
4232: LD_INT 105
4234: PUSH
4235: LD_INT 106
4237: PUSH
4238: LD_INT 107
4240: PUSH
4241: LD_INT 108
4243: PUSH
4244: LD_INT 109
4246: PUSH
4247: LD_INT 110
4249: PUSH
4250: LD_INT 111
4252: PUSH
4253: LD_INT 112
4255: PUSH
4256: LD_INT 113
4258: PUSH
4259: LD_INT 114
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: ST_TO_ADDR
4282: GO 4657
4284: LD_INT 18
4286: DOUBLE
4287: EQUAL
4288: IFTRUE 4292
4290: GO 4428
4292: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 4
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 7
4309: PUSH
4310: LD_INT 11
4312: PUSH
4313: LD_INT 12
4315: PUSH
4316: LD_INT 15
4318: PUSH
4319: LD_INT 16
4321: PUSH
4322: LD_INT 20
4324: PUSH
4325: LD_INT 21
4327: PUSH
4328: LD_INT 22
4330: PUSH
4331: LD_INT 23
4333: PUSH
4334: LD_INT 25
4336: PUSH
4337: LD_INT 26
4339: PUSH
4340: LD_INT 30
4342: PUSH
4343: LD_INT 31
4345: PUSH
4346: LD_INT 32
4348: PUSH
4349: LD_INT 33
4351: PUSH
4352: LD_INT 34
4354: PUSH
4355: LD_INT 35
4357: PUSH
4358: LD_INT 36
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 101
4386: PUSH
4387: LD_INT 102
4389: PUSH
4390: LD_INT 103
4392: PUSH
4393: LD_INT 106
4395: PUSH
4396: LD_INT 108
4398: PUSH
4399: LD_INT 112
4401: PUSH
4402: LD_INT 113
4404: PUSH
4405: LD_INT 114
4407: PUSH
4408: LD_INT 115
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: ST_TO_ADDR
4426: GO 4657
4428: LD_INT 19
4430: DOUBLE
4431: EQUAL
4432: IFTRUE 4436
4434: GO 4656
4436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
4437: LD_ADDR_VAR 0 1
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: LD_INT 4
4453: PUSH
4454: LD_INT 5
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: LD_INT 7
4462: PUSH
4463: LD_INT 8
4465: PUSH
4466: LD_INT 9
4468: PUSH
4469: LD_INT 10
4471: PUSH
4472: LD_INT 11
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 13
4480: PUSH
4481: LD_INT 14
4483: PUSH
4484: LD_INT 15
4486: PUSH
4487: LD_INT 16
4489: PUSH
4490: LD_INT 17
4492: PUSH
4493: LD_INT 18
4495: PUSH
4496: LD_INT 19
4498: PUSH
4499: LD_INT 20
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 23
4510: PUSH
4511: LD_INT 24
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 26
4519: PUSH
4520: LD_INT 27
4522: PUSH
4523: LD_INT 28
4525: PUSH
4526: LD_INT 29
4528: PUSH
4529: LD_INT 30
4531: PUSH
4532: LD_INT 31
4534: PUSH
4535: LD_INT 32
4537: PUSH
4538: LD_INT 33
4540: PUSH
4541: LD_INT 34
4543: PUSH
4544: LD_INT 35
4546: PUSH
4547: LD_INT 36
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 101
4590: PUSH
4591: LD_INT 102
4593: PUSH
4594: LD_INT 103
4596: PUSH
4597: LD_INT 104
4599: PUSH
4600: LD_INT 105
4602: PUSH
4603: LD_INT 106
4605: PUSH
4606: LD_INT 107
4608: PUSH
4609: LD_INT 108
4611: PUSH
4612: LD_INT 109
4614: PUSH
4615: LD_INT 110
4617: PUSH
4618: LD_INT 111
4620: PUSH
4621: LD_INT 112
4623: PUSH
4624: LD_INT 113
4626: PUSH
4627: LD_INT 114
4629: PUSH
4630: LD_INT 115
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: ST_TO_ADDR
4654: GO 4657
4656: POP
// end else
4657: GO 4876
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: LD_INT 2
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: LD_INT 4
4675: PUSH
4676: LD_INT 5
4678: PUSH
4679: LD_INT 6
4681: PUSH
4682: LD_INT 7
4684: PUSH
4685: LD_INT 8
4687: PUSH
4688: LD_INT 9
4690: PUSH
4691: LD_INT 10
4693: PUSH
4694: LD_INT 11
4696: PUSH
4697: LD_INT 12
4699: PUSH
4700: LD_INT 13
4702: PUSH
4703: LD_INT 14
4705: PUSH
4706: LD_INT 15
4708: PUSH
4709: LD_INT 16
4711: PUSH
4712: LD_INT 17
4714: PUSH
4715: LD_INT 18
4717: PUSH
4718: LD_INT 19
4720: PUSH
4721: LD_INT 20
4723: PUSH
4724: LD_INT 21
4726: PUSH
4727: LD_INT 22
4729: PUSH
4730: LD_INT 23
4732: PUSH
4733: LD_INT 24
4735: PUSH
4736: LD_INT 25
4738: PUSH
4739: LD_INT 26
4741: PUSH
4742: LD_INT 27
4744: PUSH
4745: LD_INT 28
4747: PUSH
4748: LD_INT 29
4750: PUSH
4751: LD_INT 30
4753: PUSH
4754: LD_INT 31
4756: PUSH
4757: LD_INT 32
4759: PUSH
4760: LD_INT 33
4762: PUSH
4763: LD_INT 34
4765: PUSH
4766: LD_INT 35
4768: PUSH
4769: LD_INT 36
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 101
4812: PUSH
4813: LD_INT 102
4815: PUSH
4816: LD_INT 103
4818: PUSH
4819: LD_INT 104
4821: PUSH
4822: LD_INT 105
4824: PUSH
4825: LD_INT 106
4827: PUSH
4828: LD_INT 107
4830: PUSH
4831: LD_INT 108
4833: PUSH
4834: LD_INT 109
4836: PUSH
4837: LD_INT 110
4839: PUSH
4840: LD_INT 111
4842: PUSH
4843: LD_INT 112
4845: PUSH
4846: LD_INT 113
4848: PUSH
4849: LD_INT 114
4851: PUSH
4852: LD_INT 115
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// if result then
4876: LD_VAR 0 1
4880: IFFALSE 5169
// begin normal :=  ;
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_STRING 
4889: ST_TO_ADDR
// hardcore :=  ;
4890: LD_ADDR_VAR 0 4
4894: PUSH
4895: LD_STRING 
4897: ST_TO_ADDR
// for i = 1 to normalCounter do
4898: LD_ADDR_VAR 0 5
4902: PUSH
4903: DOUBLE
4904: LD_INT 1
4906: DEC
4907: ST_TO_ADDR
4908: LD_EXP 18
4912: PUSH
4913: FOR_TO
4914: IFFALSE 5015
// begin tmp := 0 ;
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: LD_STRING 0
4923: ST_TO_ADDR
// if result [ 1 ] then
4924: LD_VAR 0 1
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: IFFALSE 4997
// if result [ 1 ] [ 1 ] = i then
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PUSH
4947: LD_VAR 0 5
4951: EQUAL
4952: IFFALSE 4997
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
4954: LD_ADDR_VAR 0 1
4958: PUSH
4959: LD_VAR 0 1
4963: PPUSH
4964: LD_INT 1
4966: PPUSH
4967: LD_VAR 0 1
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 3
4983: PPUSH
4984: CALL_OW 1
4988: ST_TO_ADDR
// tmp := 1 ;
4989: LD_ADDR_VAR 0 2
4993: PUSH
4994: LD_STRING 1
4996: ST_TO_ADDR
// end ; normal := normal & tmp ;
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: LD_VAR 0 2
5011: STR
5012: ST_TO_ADDR
// end ;
5013: GO 4913
5015: POP
5016: POP
// for i = 1 to hardcoreCounter do
5017: LD_ADDR_VAR 0 5
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_EXP 19
5031: PUSH
5032: FOR_TO
5033: IFFALSE 5138
// begin tmp := 0 ;
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: LD_STRING 0
5042: ST_TO_ADDR
// if result [ 2 ] then
5043: LD_VAR 0 1
5047: PUSH
5048: LD_INT 2
5050: ARRAY
5051: IFFALSE 5120
// if result [ 2 ] [ 1 ] = 100 + i then
5053: LD_VAR 0 1
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PUSH
5066: LD_INT 100
5068: PUSH
5069: LD_VAR 0 5
5073: PLUS
5074: EQUAL
5075: IFFALSE 5120
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5077: LD_ADDR_VAR 0 1
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: LD_INT 2
5089: PPUSH
5090: LD_VAR 0 1
5094: PUSH
5095: LD_INT 2
5097: ARRAY
5098: PPUSH
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 3
5106: PPUSH
5107: CALL_OW 1
5111: ST_TO_ADDR
// tmp := 1 ;
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_STRING 1
5119: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_VAR 0 4
5129: PUSH
5130: LD_VAR 0 2
5134: STR
5135: ST_TO_ADDR
// end ;
5136: GO 5032
5138: POP
5139: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
5140: LD_STRING getStreamItemsFromMission("
5142: PUSH
5143: LD_VAR 0 3
5147: STR
5148: PUSH
5149: LD_STRING ","
5151: STR
5152: PUSH
5153: LD_VAR 0 4
5157: STR
5158: PUSH
5159: LD_STRING ")
5161: STR
5162: PPUSH
5163: CALL_OW 559
// end else
5167: GO 5176
// ToLua ( getStreamItemsFromMission("","") ) ;
5169: LD_STRING getStreamItemsFromMission("","")
5171: PPUSH
5172: CALL_OW 559
// end ;
5176: LD_VAR 0 1
5180: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5181: LD_EXP 17
5185: PUSH
5186: LD_EXP 22
5190: AND
5191: IFFALSE 5315
5193: GO 5195
5195: DISABLE
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
// begin enable ;
5200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5201: LD_ADDR_VAR 0 2
5205: PUSH
5206: LD_INT 22
5208: PUSH
5209: LD_OWVAR 2
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: LD_INT 34
5223: PUSH
5224: LD_INT 7
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 34
5233: PUSH
5234: LD_INT 45
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: LD_INT 34
5243: PUSH
5244: LD_INT 28
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 34
5253: PUSH
5254: LD_INT 47
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: ST_TO_ADDR
// if not tmp then
5277: LD_VAR 0 2
5281: NOT
5282: IFFALSE 5286
// exit ;
5284: GO 5315
// for i in tmp do
5286: LD_ADDR_VAR 0 1
5290: PUSH
5291: LD_VAR 0 2
5295: PUSH
5296: FOR_IN
5297: IFFALSE 5313
// begin SetLives ( i , 0 ) ;
5299: LD_VAR 0 1
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 234
// end ;
5311: GO 5296
5313: POP
5314: POP
// end ;
5315: PPOPN 2
5317: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
5318: LD_EXP 17
5322: PUSH
5323: LD_EXP 23
5327: AND
5328: IFFALSE 5412
5330: GO 5332
5332: DISABLE
5333: LD_INT 0
5335: PPUSH
5336: PPUSH
// begin enable ;
5337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 22
5345: PUSH
5346: LD_OWVAR 2
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PUSH
5355: LD_INT 32
5357: PUSH
5358: LD_INT 3
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: ST_TO_ADDR
// if not tmp then
5374: LD_VAR 0 2
5378: NOT
5379: IFFALSE 5383
// exit ;
5381: GO 5412
// for i in tmp do
5383: LD_ADDR_VAR 0 1
5387: PUSH
5388: LD_VAR 0 2
5392: PUSH
5393: FOR_IN
5394: IFFALSE 5410
// begin SetLives ( i , 0 ) ;
5396: LD_VAR 0 1
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: CALL_OW 234
// end ;
5408: GO 5393
5410: POP
5411: POP
// end ;
5412: PPOPN 2
5414: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
5415: LD_EXP 17
5419: PUSH
5420: LD_EXP 20
5424: AND
5425: IFFALSE 5518
5427: GO 5429
5429: DISABLE
5430: LD_INT 0
5432: PPUSH
// begin enable ;
5433: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
5434: LD_ADDR_VAR 0 1
5438: PUSH
5439: LD_INT 22
5441: PUSH
5442: LD_OWVAR 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 2
5453: PUSH
5454: LD_INT 25
5456: PUSH
5457: LD_INT 5
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 9
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 8
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PUSH
5499: FOR_IN
5500: IFFALSE 5516
// begin SetClass ( i , 1 ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 336
// end ;
5514: GO 5499
5516: POP
5517: POP
// end ;
5518: PPOPN 1
5520: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
5521: LD_EXP 17
5525: PUSH
5526: LD_EXP 21
5530: AND
5531: PUSH
5532: LD_OWVAR 65
5536: PUSH
5537: LD_INT 7
5539: LESS
5540: AND
5541: IFFALSE 5555
5543: GO 5545
5545: DISABLE
// begin enable ;
5546: ENABLE
// game_speed := 7 ;
5547: LD_ADDR_OWVAR 65
5551: PUSH
5552: LD_INT 7
5554: ST_TO_ADDR
// end ;
5555: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
5556: LD_EXP 17
5560: PUSH
5561: LD_EXP 24
5565: AND
5566: IFFALSE 5768
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
5576: LD_ADDR_VAR 0 3
5580: PUSH
5581: LD_INT 81
5583: PUSH
5584: LD_OWVAR 2
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: LD_INT 21
5595: PUSH
5596: LD_INT 1
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: ST_TO_ADDR
// if not tmp then
5612: LD_VAR 0 3
5616: NOT
5617: IFFALSE 5621
// exit ;
5619: GO 5768
// if tmp > 5 then
5621: LD_VAR 0 3
5625: PUSH
5626: LD_INT 5
5628: GREATER
5629: IFFALSE 5641
// k := 5 else
5631: LD_ADDR_VAR 0 2
5635: PUSH
5636: LD_INT 5
5638: ST_TO_ADDR
5639: GO 5651
// k := tmp ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: LD_VAR 0 3
5650: ST_TO_ADDR
// for i := 1 to k do
5651: LD_ADDR_VAR 0 1
5655: PUSH
5656: DOUBLE
5657: LD_INT 1
5659: DEC
5660: ST_TO_ADDR
5661: LD_VAR 0 2
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5766
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
5669: LD_VAR 0 3
5673: PUSH
5674: LD_VAR 0 1
5678: ARRAY
5679: PPUSH
5680: LD_VAR 0 1
5684: PUSH
5685: LD_INT 4
5687: MOD
5688: PUSH
5689: LD_INT 1
5691: PLUS
5692: PPUSH
5693: CALL_OW 259
5697: PUSH
5698: LD_INT 10
5700: LESS
5701: IFFALSE 5764
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
5703: LD_VAR 0 3
5707: PUSH
5708: LD_VAR 0 1
5712: ARRAY
5713: PPUSH
5714: LD_VAR 0 1
5718: PUSH
5719: LD_INT 4
5721: MOD
5722: PUSH
5723: LD_INT 1
5725: PLUS
5726: PPUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_VAR 0 1
5736: ARRAY
5737: PPUSH
5738: LD_VAR 0 1
5742: PUSH
5743: LD_INT 4
5745: MOD
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: PPUSH
5751: CALL_OW 259
5755: PUSH
5756: LD_INT 1
5758: PLUS
5759: PPUSH
5760: CALL_OW 237
5764: GO 5666
5766: POP
5767: POP
// end ;
5768: PPOPN 3
5770: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
5771: LD_EXP 17
5775: PUSH
5776: LD_EXP 25
5780: AND
5781: IFFALSE 5801
5783: GO 5785
5785: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
5786: LD_INT 4
5788: PPUSH
5789: LD_OWVAR 2
5793: PPUSH
5794: LD_INT 0
5796: PPUSH
5797: CALL_OW 324
5801: END
// every 0 0$1 trigger StreamModeActive and sShovel do
5802: LD_EXP 17
5806: PUSH
5807: LD_EXP 54
5811: AND
5812: IFFALSE 5832
5814: GO 5816
5816: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
5817: LD_INT 19
5819: PPUSH
5820: LD_OWVAR 2
5824: PPUSH
5825: LD_INT 0
5827: PPUSH
5828: CALL_OW 324
5832: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
5833: LD_EXP 17
5837: PUSH
5838: LD_EXP 26
5842: AND
5843: IFFALSE 5945
5845: GO 5847
5847: DISABLE
5848: LD_INT 0
5850: PPUSH
5851: PPUSH
// begin enable ;
5852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_INT 22
5860: PUSH
5861: LD_OWVAR 2
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 2
5872: PUSH
5873: LD_INT 34
5875: PUSH
5876: LD_INT 11
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 34
5885: PUSH
5886: LD_INT 30
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PPUSH
5902: CALL_OW 69
5906: ST_TO_ADDR
// if not tmp then
5907: LD_VAR 0 2
5911: NOT
5912: IFFALSE 5916
// exit ;
5914: GO 5945
// for i in tmp do
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: LD_VAR 0 2
5925: PUSH
5926: FOR_IN
5927: IFFALSE 5943
// begin SetLives ( i , 0 ) ;
5929: LD_VAR 0 1
5933: PPUSH
5934: LD_INT 0
5936: PPUSH
5937: CALL_OW 234
// end ;
5941: GO 5926
5943: POP
5944: POP
// end ;
5945: PPOPN 2
5947: END
// every 0 0$1 trigger StreamModeActive and sBunker do
5948: LD_EXP 17
5952: PUSH
5953: LD_EXP 27
5957: AND
5958: IFFALSE 5978
5960: GO 5962
5962: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
5963: LD_INT 32
5965: PPUSH
5966: LD_OWVAR 2
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 324
5978: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
5979: LD_EXP 17
5983: PUSH
5984: LD_EXP 28
5988: AND
5989: IFFALSE 6170
5991: GO 5993
5993: DISABLE
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
5998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_INT 22
6006: PUSH
6007: LD_OWVAR 2
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 33
6018: PUSH
6019: LD_INT 3
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PPUSH
6030: CALL_OW 69
6034: ST_TO_ADDR
// if not tmp then
6035: LD_VAR 0 2
6039: NOT
6040: IFFALSE 6044
// exit ;
6042: GO 6170
// side := 0 ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// for i := 1 to 8 do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_INT 8
6064: PUSH
6065: FOR_TO
6066: IFFALSE 6114
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6068: LD_OWVAR 2
6072: PUSH
6073: LD_VAR 0 1
6077: NONEQUAL
6078: PUSH
6079: LD_OWVAR 2
6083: PPUSH
6084: LD_VAR 0 1
6088: PPUSH
6089: CALL_OW 81
6093: PUSH
6094: LD_INT 2
6096: EQUAL
6097: AND
6098: IFFALSE 6112
// begin side := i ;
6100: LD_ADDR_VAR 0 3
6104: PUSH
6105: LD_VAR 0 1
6109: ST_TO_ADDR
// break ;
6110: GO 6114
// end ;
6112: GO 6065
6114: POP
6115: POP
// if not side then
6116: LD_VAR 0 3
6120: NOT
6121: IFFALSE 6125
// exit ;
6123: GO 6170
// for i := 1 to tmp do
6125: LD_ADDR_VAR 0 1
6129: PUSH
6130: DOUBLE
6131: LD_INT 1
6133: DEC
6134: ST_TO_ADDR
6135: LD_VAR 0 2
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6168
// if Prob ( 60 ) then
6143: LD_INT 60
6145: PPUSH
6146: CALL_OW 13
6150: IFFALSE 6166
// SetSide ( i , side ) ;
6152: LD_VAR 0 1
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 235
6166: GO 6140
6168: POP
6169: POP
// end ;
6170: PPOPN 3
6172: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6173: LD_EXP 17
6177: PUSH
6178: LD_EXP 30
6182: AND
6183: IFFALSE 6302
6185: GO 6187
6187: DISABLE
6188: LD_INT 0
6190: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6191: LD_ADDR_VAR 0 1
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_OWVAR 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 21
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 3
6220: PUSH
6221: LD_INT 23
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6300
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6248: LD_VAR 0 1
6252: PPUSH
6253: CALL_OW 257
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: IN
6276: IFFALSE 6298
// SetClass ( un , rand ( 1 , 4 ) ) ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_INT 1
6285: PPUSH
6286: LD_INT 4
6288: PPUSH
6289: CALL_OW 12
6293: PPUSH
6294: CALL_OW 336
6298: GO 6245
6300: POP
6301: POP
// end ;
6302: PPOPN 1
6304: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
6305: LD_EXP 17
6309: PUSH
6310: LD_EXP 29
6314: AND
6315: IFFALSE 6394
6317: GO 6319
6319: DISABLE
6320: LD_INT 0
6322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_OWVAR 2
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 21
6342: PUSH
6343: LD_INT 3
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: ST_TO_ADDR
// if not tmp then
6359: LD_VAR 0 1
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
6368: LD_VAR 0 1
6372: PUSH
6373: LD_INT 1
6375: PPUSH
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 12
6385: ARRAY
6386: PPUSH
6387: LD_INT 100
6389: PPUSH
6390: CALL_OW 234
// end ;
6394: PPOPN 1
6396: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
6397: LD_EXP 17
6401: PUSH
6402: LD_EXP 31
6406: AND
6407: IFFALSE 6505
6409: GO 6411
6411: DISABLE
6412: LD_INT 0
6414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
6415: LD_ADDR_VAR 0 1
6419: PUSH
6420: LD_INT 22
6422: PUSH
6423: LD_OWVAR 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 21
6434: PUSH
6435: LD_INT 1
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 69
6450: ST_TO_ADDR
// if not tmp then
6451: LD_VAR 0 1
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 6505
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
6460: LD_VAR 0 1
6464: PUSH
6465: LD_INT 1
6467: PPUSH
6468: LD_VAR 0 1
6472: PPUSH
6473: CALL_OW 12
6477: ARRAY
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 4
6484: PPUSH
6485: CALL_OW 12
6489: PPUSH
6490: LD_INT 3000
6492: PPUSH
6493: LD_INT 9000
6495: PPUSH
6496: CALL_OW 12
6500: PPUSH
6501: CALL_OW 492
// end ;
6505: PPOPN 1
6507: END
// every 0 0$1 trigger StreamModeActive and sDepot do
6508: LD_EXP 17
6512: PUSH
6513: LD_EXP 32
6517: AND
6518: IFFALSE 6538
6520: GO 6522
6522: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
6523: LD_INT 1
6525: PPUSH
6526: LD_OWVAR 2
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 324
6538: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
6539: LD_EXP 17
6543: PUSH
6544: LD_EXP 33
6548: AND
6549: IFFALSE 6632
6551: GO 6553
6553: DISABLE
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6558: LD_ADDR_VAR 0 2
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_OWVAR 2
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 21
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 69
6593: ST_TO_ADDR
// if not tmp then
6594: LD_VAR 0 2
6598: NOT
6599: IFFALSE 6603
// exit ;
6601: GO 6632
// for i in tmp do
6603: LD_ADDR_VAR 0 1
6607: PUSH
6608: LD_VAR 0 2
6612: PUSH
6613: FOR_IN
6614: IFFALSE 6630
// SetBLevel ( i , 10 ) ;
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_INT 10
6623: PPUSH
6624: CALL_OW 241
6628: GO 6613
6630: POP
6631: POP
// end ;
6632: PPOPN 2
6634: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
6635: LD_EXP 17
6639: PUSH
6640: LD_EXP 34
6644: AND
6645: IFFALSE 6756
6647: GO 6649
6649: DISABLE
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
6654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: LD_INT 22
6662: PUSH
6663: LD_OWVAR 2
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 25
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 69
6690: ST_TO_ADDR
// if not tmp then
6691: LD_VAR 0 3
6695: NOT
6696: IFFALSE 6700
// exit ;
6698: GO 6756
// un := tmp [ rand ( 1 , tmp ) ] ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_VAR 0 3
6709: PUSH
6710: LD_INT 1
6712: PPUSH
6713: LD_VAR 0 3
6717: PPUSH
6718: CALL_OW 12
6722: ARRAY
6723: ST_TO_ADDR
// if Crawls ( un ) then
6724: LD_VAR 0 2
6728: PPUSH
6729: CALL_OW 318
6733: IFFALSE 6744
// ComWalk ( un ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 138
// SetClass ( un , class_sniper ) ;
6744: LD_VAR 0 2
6748: PPUSH
6749: LD_INT 5
6751: PPUSH
6752: CALL_OW 336
// end ;
6756: PPOPN 3
6758: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
6759: LD_EXP 17
6763: PUSH
6764: LD_EXP 35
6768: AND
6769: PUSH
6770: LD_OWVAR 67
6774: PUSH
6775: LD_INT 3
6777: LESS
6778: AND
6779: IFFALSE 6798
6781: GO 6783
6783: DISABLE
// Difficulty := Difficulty + 1 ;
6784: LD_ADDR_OWVAR 67
6788: PUSH
6789: LD_OWVAR 67
6793: PUSH
6794: LD_INT 1
6796: PLUS
6797: ST_TO_ADDR
6798: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
6799: LD_EXP 17
6803: PUSH
6804: LD_EXP 36
6808: AND
6809: IFFALSE 6912
6811: GO 6813
6813: DISABLE
6814: LD_INT 0
6816: PPUSH
// begin for i := 1 to 5 do
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: DOUBLE
6823: LD_INT 1
6825: DEC
6826: ST_TO_ADDR
6827: LD_INT 5
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6910
// begin uc_nation := nation_nature ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 0
6840: ST_TO_ADDR
// uc_side := 0 ;
6841: LD_ADDR_OWVAR 20
6845: PUSH
6846: LD_INT 0
6848: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6849: LD_ADDR_OWVAR 29
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 12
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
// hc_agressivity := 20 ;
6864: LD_ADDR_OWVAR 35
6868: PUSH
6869: LD_INT 20
6871: ST_TO_ADDR
// hc_class := class_tiger ;
6872: LD_ADDR_OWVAR 28
6876: PUSH
6877: LD_INT 14
6879: ST_TO_ADDR
// hc_gallery :=  ;
6880: LD_ADDR_OWVAR 33
6884: PUSH
6885: LD_STRING 
6887: ST_TO_ADDR
// hc_name :=  ;
6888: LD_ADDR_OWVAR 26
6892: PUSH
6893: LD_STRING 
6895: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
6896: CALL_OW 44
6900: PPUSH
6901: LD_INT 0
6903: PPUSH
6904: CALL_OW 51
// end ;
6908: GO 6830
6910: POP
6911: POP
// end ;
6912: PPOPN 1
6914: END
// every 0 0$1 trigger StreamModeActive and sBomb do
6915: LD_EXP 17
6919: PUSH
6920: LD_EXP 37
6924: AND
6925: IFFALSE 6934
6927: GO 6929
6929: DISABLE
// StreamSibBomb ;
6930: CALL 6935 0 0
6934: END
// export function StreamSibBomb ; var i , x , y ; begin
6935: LD_INT 0
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
// result := false ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// for i := 1 to 16 do
6949: LD_ADDR_VAR 0 2
6953: PUSH
6954: DOUBLE
6955: LD_INT 1
6957: DEC
6958: ST_TO_ADDR
6959: LD_INT 16
6961: PUSH
6962: FOR_TO
6963: IFFALSE 7162
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
6965: LD_ADDR_VAR 0 3
6969: PUSH
6970: LD_INT 10
6972: PUSH
6973: LD_INT 20
6975: PUSH
6976: LD_INT 30
6978: PUSH
6979: LD_INT 40
6981: PUSH
6982: LD_INT 50
6984: PUSH
6985: LD_INT 60
6987: PUSH
6988: LD_INT 70
6990: PUSH
6991: LD_INT 80
6993: PUSH
6994: LD_INT 90
6996: PUSH
6997: LD_INT 100
6999: PUSH
7000: LD_INT 110
7002: PUSH
7003: LD_INT 120
7005: PUSH
7006: LD_INT 130
7008: PUSH
7009: LD_INT 140
7011: PUSH
7012: LD_INT 150
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_INT 15
7037: PPUSH
7038: CALL_OW 12
7042: ARRAY
7043: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7044: LD_ADDR_VAR 0 4
7048: PUSH
7049: LD_INT 10
7051: PUSH
7052: LD_INT 20
7054: PUSH
7055: LD_INT 30
7057: PUSH
7058: LD_INT 40
7060: PUSH
7061: LD_INT 50
7063: PUSH
7064: LD_INT 60
7066: PUSH
7067: LD_INT 70
7069: PUSH
7070: LD_INT 80
7072: PUSH
7073: LD_INT 90
7075: PUSH
7076: LD_INT 100
7078: PUSH
7079: LD_INT 110
7081: PUSH
7082: LD_INT 120
7084: PUSH
7085: LD_INT 130
7087: PUSH
7088: LD_INT 140
7090: PUSH
7091: LD_INT 150
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 15
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// if ValidHex ( x , y ) then
7123: LD_VAR 0 3
7127: PPUSH
7128: LD_VAR 0 4
7132: PPUSH
7133: CALL_OW 488
7137: IFFALSE 7160
// begin result := [ x , y ] ;
7139: LD_ADDR_VAR 0 1
7143: PUSH
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: ST_TO_ADDR
// break ;
7158: GO 7162
// end ; end ;
7160: GO 6962
7162: POP
7163: POP
// if result then
7164: LD_VAR 0 1
7168: IFFALSE 7228
// begin ToLua ( playSibBomb() ) ;
7170: LD_STRING playSibBomb()
7172: PPUSH
7173: CALL_OW 559
// wait ( 0 0$14 ) ;
7177: LD_INT 490
7179: PPUSH
7180: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7184: LD_VAR 0 1
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: PPUSH
7193: LD_VAR 0 1
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PPUSH
7202: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7206: LD_VAR 0 1
7210: PUSH
7211: LD_INT 1
7213: ARRAY
7214: PPUSH
7215: LD_VAR 0 1
7219: PUSH
7220: LD_INT 2
7222: ARRAY
7223: PPUSH
7224: CALL_OW 429
// end ; end ;
7228: LD_VAR 0 1
7232: RET
// every 0 0$1 trigger StreamModeActive and sReset do
7233: LD_EXP 17
7237: PUSH
7238: LD_EXP 39
7242: AND
7243: IFFALSE 7255
7245: GO 7247
7247: DISABLE
// YouLost (  ) ;
7248: LD_STRING 
7250: PPUSH
7251: CALL_OW 104
7255: END
// every 0 0$1 trigger StreamModeActive and sFog do
7256: LD_EXP 17
7260: PUSH
7261: LD_EXP 38
7265: AND
7266: IFFALSE 7280
7268: GO 7270
7270: DISABLE
// FogOff ( your_side ) ;
7271: LD_OWVAR 2
7275: PPUSH
7276: CALL_OW 344
7280: END
// every 0 0$1 trigger StreamModeActive and sSun do
7281: LD_EXP 17
7285: PUSH
7286: LD_EXP 40
7290: AND
7291: IFFALSE 7319
7293: GO 7295
7295: DISABLE
// begin solar_recharge_percent := 0 ;
7296: LD_ADDR_OWVAR 79
7300: PUSH
7301: LD_INT 0
7303: ST_TO_ADDR
// wait ( 5 5$00 ) ;
7304: LD_INT 10500
7306: PPUSH
7307: CALL_OW 67
// solar_recharge_percent := 100 ;
7311: LD_ADDR_OWVAR 79
7315: PUSH
7316: LD_INT 100
7318: ST_TO_ADDR
// end ;
7319: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
7320: LD_EXP 17
7324: PUSH
7325: LD_EXP 41
7329: AND
7330: IFFALSE 7569
7332: GO 7334
7334: DISABLE
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
// begin tmp := [ ] ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: EMPTY
7346: ST_TO_ADDR
// for i := 1 to 6 do
7347: LD_ADDR_VAR 0 1
7351: PUSH
7352: DOUBLE
7353: LD_INT 1
7355: DEC
7356: ST_TO_ADDR
7357: LD_INT 6
7359: PUSH
7360: FOR_TO
7361: IFFALSE 7466
// begin uc_nation := nation_nature ;
7363: LD_ADDR_OWVAR 21
7367: PUSH
7368: LD_INT 0
7370: ST_TO_ADDR
// uc_side := 0 ;
7371: LD_ADDR_OWVAR 20
7375: PUSH
7376: LD_INT 0
7378: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7379: LD_ADDR_OWVAR 29
7383: PUSH
7384: LD_INT 12
7386: PUSH
7387: LD_INT 12
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
// hc_agressivity := 20 ;
7394: LD_ADDR_OWVAR 35
7398: PUSH
7399: LD_INT 20
7401: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
7402: LD_ADDR_OWVAR 28
7406: PUSH
7407: LD_INT 17
7409: ST_TO_ADDR
// hc_gallery :=  ;
7410: LD_ADDR_OWVAR 33
7414: PUSH
7415: LD_STRING 
7417: ST_TO_ADDR
// hc_name :=  ;
7418: LD_ADDR_OWVAR 26
7422: PUSH
7423: LD_STRING 
7425: ST_TO_ADDR
// un := CreateHuman ;
7426: LD_ADDR_VAR 0 2
7430: PUSH
7431: CALL_OW 44
7435: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
7436: LD_VAR 0 2
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: CALL_OW 51
// tmp := tmp ^ un ;
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: LD_VAR 0 3
7457: PUSH
7458: LD_VAR 0 2
7462: ADD
7463: ST_TO_ADDR
// end ;
7464: GO 7360
7466: POP
7467: POP
// repeat wait ( 0 0$1 ) ;
7468: LD_INT 35
7470: PPUSH
7471: CALL_OW 67
// for un in tmp do
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 3
7484: PUSH
7485: FOR_IN
7486: IFFALSE 7560
// begin if IsDead ( un ) then
7488: LD_VAR 0 2
7492: PPUSH
7493: CALL_OW 301
7497: IFFALSE 7517
// begin tmp := tmp diff un ;
7499: LD_ADDR_VAR 0 3
7503: PUSH
7504: LD_VAR 0 3
7508: PUSH
7509: LD_VAR 0 2
7513: DIFF
7514: ST_TO_ADDR
// continue ;
7515: GO 7485
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
7517: LD_VAR 0 2
7521: PPUSH
7522: LD_INT 3
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 69
7543: PPUSH
7544: LD_VAR 0 2
7548: PPUSH
7549: CALL_OW 74
7553: PPUSH
7554: CALL_OW 115
// end ;
7558: GO 7485
7560: POP
7561: POP
// until not tmp ;
7562: LD_VAR 0 3
7566: NOT
7567: IFFALSE 7468
// end ;
7569: PPOPN 3
7571: END
// every 0 0$1 trigger StreamModeActive and sTroll do
7572: LD_EXP 17
7576: PUSH
7577: LD_EXP 42
7581: AND
7582: IFFALSE 7636
7584: GO 7586
7586: DISABLE
// begin ToLua ( displayTroll(); ) ;
7587: LD_STRING displayTroll();
7589: PPUSH
7590: CALL_OW 559
// wait ( 3 3$00 ) ;
7594: LD_INT 6300
7596: PPUSH
7597: CALL_OW 67
// ToLua ( hideTroll(); ) ;
7601: LD_STRING hideTroll();
7603: PPUSH
7604: CALL_OW 559
// wait ( 1 1$00 ) ;
7608: LD_INT 2100
7610: PPUSH
7611: CALL_OW 67
// ToLua ( displayTroll(); ) ;
7615: LD_STRING displayTroll();
7617: PPUSH
7618: CALL_OW 559
// wait ( 1 1$00 ) ;
7622: LD_INT 2100
7624: PPUSH
7625: CALL_OW 67
// ToLua ( hideTroll(); ) ;
7629: LD_STRING hideTroll();
7631: PPUSH
7632: CALL_OW 559
// end ;
7636: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
7637: LD_EXP 17
7641: PUSH
7642: LD_EXP 43
7646: AND
7647: IFFALSE 7710
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
// begin p := 0 ;
7655: LD_ADDR_VAR 0 1
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// repeat game_speed := 1 ;
7663: LD_ADDR_OWVAR 65
7667: PUSH
7668: LD_INT 1
7670: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7671: LD_INT 35
7673: PPUSH
7674: CALL_OW 67
// p := p + 1 ;
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_VAR 0 1
7687: PUSH
7688: LD_INT 1
7690: PLUS
7691: ST_TO_ADDR
// until p >= 60 ;
7692: LD_VAR 0 1
7696: PUSH
7697: LD_INT 60
7699: GREATEREQUAL
7700: IFFALSE 7663
// game_speed := 4 ;
7702: LD_ADDR_OWVAR 65
7706: PUSH
7707: LD_INT 4
7709: ST_TO_ADDR
// end ;
7710: PPOPN 1
7712: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
7713: LD_EXP 17
7717: PUSH
7718: LD_EXP 44
7722: AND
7723: IFFALSE 7869
7725: GO 7727
7727: DISABLE
7728: LD_INT 0
7730: PPUSH
7731: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_INT 22
7739: PUSH
7740: LD_OWVAR 2
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 30
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 30
7764: PUSH
7765: LD_INT 1
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PPUSH
7781: CALL_OW 69
7785: ST_TO_ADDR
// if not depot then
7786: LD_VAR 0 1
7790: NOT
7791: IFFALSE 7795
// exit ;
7793: GO 7869
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
7795: LD_ADDR_VAR 0 2
7799: PUSH
7800: LD_VAR 0 1
7804: PUSH
7805: LD_INT 1
7807: PPUSH
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 12
7817: ARRAY
7818: PPUSH
7819: CALL_OW 274
7823: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
7824: LD_VAR 0 2
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 0
7834: PPUSH
7835: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
7839: LD_VAR 0 2
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: LD_INT 0
7849: PPUSH
7850: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
7854: LD_VAR 0 2
7858: PPUSH
7859: LD_INT 3
7861: PPUSH
7862: LD_INT 0
7864: PPUSH
7865: CALL_OW 277
// end ;
7869: PPOPN 2
7871: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
7872: LD_EXP 17
7876: PUSH
7877: LD_EXP 45
7881: AND
7882: IFFALSE 7979
7884: GO 7886
7886: DISABLE
7887: LD_INT 0
7889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
7890: LD_ADDR_VAR 0 1
7894: PUSH
7895: LD_INT 22
7897: PUSH
7898: LD_OWVAR 2
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 21
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: LD_INT 23
7922: PUSH
7923: LD_INT 0
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 69
7943: ST_TO_ADDR
// if not tmp then
7944: LD_VAR 0 1
7948: NOT
7949: IFFALSE 7953
// exit ;
7951: GO 7979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
7953: LD_VAR 0 1
7957: PUSH
7958: LD_INT 1
7960: PPUSH
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 12
7970: ARRAY
7971: PPUSH
7972: LD_INT 200
7974: PPUSH
7975: CALL_OW 234
// end ;
7979: PPOPN 1
7981: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
7982: LD_EXP 17
7986: PUSH
7987: LD_EXP 46
7991: AND
7992: IFFALSE 8071
7994: GO 7996
7996: DISABLE
7997: LD_INT 0
7999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8000: LD_ADDR_VAR 0 1
8004: PUSH
8005: LD_INT 22
8007: PUSH
8008: LD_OWVAR 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 21
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PPUSH
8031: CALL_OW 69
8035: ST_TO_ADDR
// if not tmp then
8036: LD_VAR 0 1
8040: NOT
8041: IFFALSE 8045
// exit ;
8043: GO 8071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8045: LD_VAR 0 1
8049: PUSH
8050: LD_INT 1
8052: PPUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: CALL_OW 12
8062: ARRAY
8063: PPUSH
8064: LD_INT 60
8066: PPUSH
8067: CALL_OW 234
// end ;
8071: PPOPN 1
8073: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8074: LD_EXP 17
8078: PUSH
8079: LD_EXP 47
8083: AND
8084: IFFALSE 8183
8086: GO 8088
8088: DISABLE
8089: LD_INT 0
8091: PPUSH
8092: PPUSH
// begin enable ;
8093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8094: LD_ADDR_VAR 0 1
8098: PUSH
8099: LD_INT 22
8101: PUSH
8102: LD_OWVAR 2
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 61
8113: PUSH
8114: EMPTY
8115: LIST
8116: PUSH
8117: LD_INT 33
8119: PUSH
8120: LD_INT 2
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: PPUSH
8132: CALL_OW 69
8136: ST_TO_ADDR
// if not tmp then
8137: LD_VAR 0 1
8141: NOT
8142: IFFALSE 8146
// exit ;
8144: GO 8183
// for i in tmp do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_VAR 0 1
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8181
// if IsControledBy ( i ) then
8159: LD_VAR 0 2
8163: PPUSH
8164: CALL_OW 312
8168: IFFALSE 8179
// ComUnlink ( i ) ;
8170: LD_VAR 0 2
8174: PPUSH
8175: CALL_OW 136
8179: GO 8156
8181: POP
8182: POP
// end ;
8183: PPOPN 2
8185: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8186: LD_EXP 17
8190: PUSH
8191: LD_EXP 48
8195: AND
8196: IFFALSE 8336
8198: GO 8200
8200: DISABLE
8201: LD_INT 0
8203: PPUSH
8204: PPUSH
// begin ToLua ( displayPowell(); ) ;
8205: LD_STRING displayPowell();
8207: PPUSH
8208: CALL_OW 559
// uc_side := 0 ;
8212: LD_ADDR_OWVAR 20
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// uc_nation := 2 ;
8220: LD_ADDR_OWVAR 21
8224: PUSH
8225: LD_INT 2
8227: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8228: LD_ADDR_OWVAR 37
8232: PUSH
8233: LD_INT 14
8235: ST_TO_ADDR
// vc_engine := engine_siberite ;
8236: LD_ADDR_OWVAR 39
8240: PUSH
8241: LD_INT 3
8243: ST_TO_ADDR
// vc_control := control_apeman ;
8244: LD_ADDR_OWVAR 38
8248: PUSH
8249: LD_INT 5
8251: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
8252: LD_ADDR_OWVAR 40
8256: PUSH
8257: LD_INT 29
8259: ST_TO_ADDR
// un := CreateVehicle ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: CALL_OW 45
8269: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
8282: LD_INT 35
8284: PPUSH
8285: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
8289: LD_VAR 0 2
8293: PPUSH
8294: LD_INT 22
8296: PUSH
8297: LD_OWVAR 2
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 69
8310: PPUSH
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 74
8320: PPUSH
8321: CALL_OW 115
// until IsDead ( un ) ;
8325: LD_VAR 0 2
8329: PPUSH
8330: CALL_OW 301
8334: IFFALSE 8282
// end ;
8336: PPOPN 2
8338: END
// every 0 0$1 trigger StreamModeActive and sStu do
8339: LD_EXP 17
8343: PUSH
8344: LD_EXP 56
8348: AND
8349: IFFALSE 8365
8351: GO 8353
8353: DISABLE
// begin ToLua ( displayStucuk(); ) ;
8354: LD_STRING displayStucuk();
8356: PPUSH
8357: CALL_OW 559
// ResetFog ;
8361: CALL_OW 335
// end ;
8365: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
8366: LD_EXP 17
8370: PUSH
8371: LD_EXP 49
8375: AND
8376: IFFALSE 8517
8378: GO 8380
8380: DISABLE
8381: LD_INT 0
8383: PPUSH
8384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_INT 22
8392: PUSH
8393: LD_OWVAR 2
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 21
8404: PUSH
8405: LD_INT 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: ST_TO_ADDR
// if not tmp then
8421: LD_VAR 0 2
8425: NOT
8426: IFFALSE 8430
// exit ;
8428: GO 8517
// un := tmp [ rand ( 1 , tmp ) ] ;
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_VAR 0 2
8439: PUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_VAR 0 2
8447: PPUSH
8448: CALL_OW 12
8452: ARRAY
8453: ST_TO_ADDR
// SetSide ( un , 0 ) ;
8454: LD_VAR 0 1
8458: PPUSH
8459: LD_INT 0
8461: PPUSH
8462: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
8466: LD_VAR 0 1
8470: PPUSH
8471: LD_OWVAR 3
8475: PUSH
8476: LD_VAR 0 1
8480: DIFF
8481: PPUSH
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 74
8491: PPUSH
8492: CALL_OW 115
// wait ( 0 0$20 ) ;
8496: LD_INT 700
8498: PPUSH
8499: CALL_OW 67
// SetSide ( un , your_side ) ;
8503: LD_VAR 0 1
8507: PPUSH
8508: LD_OWVAR 2
8512: PPUSH
8513: CALL_OW 235
// end ;
8517: PPOPN 2
8519: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
8520: LD_EXP 17
8524: PUSH
8525: LD_EXP 50
8529: AND
8530: IFFALSE 8636
8532: GO 8534
8534: DISABLE
8535: LD_INT 0
8537: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8538: LD_ADDR_VAR 0 1
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_OWVAR 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 2
8557: PUSH
8558: LD_INT 30
8560: PUSH
8561: LD_INT 0
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 30
8570: PUSH
8571: LD_INT 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 69
8591: ST_TO_ADDR
// if not depot then
8592: LD_VAR 0 1
8596: NOT
8597: IFFALSE 8601
// exit ;
8599: GO 8636
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
8601: LD_VAR 0 1
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: CALL_OW 250
8614: PPUSH
8615: LD_VAR 0 1
8619: PUSH
8620: LD_INT 1
8622: ARRAY
8623: PPUSH
8624: CALL_OW 251
8628: PPUSH
8629: LD_INT 70
8631: PPUSH
8632: CALL_OW 495
// end ;
8636: PPOPN 1
8638: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
8639: LD_EXP 17
8643: PUSH
8644: LD_EXP 51
8648: AND
8649: IFFALSE 8860
8651: GO 8653
8653: DISABLE
8654: LD_INT 0
8656: PPUSH
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8661: LD_ADDR_VAR 0 5
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_OWVAR 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 21
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 69
8696: ST_TO_ADDR
// if not tmp then
8697: LD_VAR 0 5
8701: NOT
8702: IFFALSE 8706
// exit ;
8704: GO 8860
// for i in tmp do
8706: LD_ADDR_VAR 0 1
8710: PUSH
8711: LD_VAR 0 5
8715: PUSH
8716: FOR_IN
8717: IFFALSE 8858
// begin d := rand ( 0 , 5 ) ;
8719: LD_ADDR_VAR 0 4
8723: PUSH
8724: LD_INT 0
8726: PPUSH
8727: LD_INT 5
8729: PPUSH
8730: CALL_OW 12
8734: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: LD_VAR 0 1
8744: PPUSH
8745: CALL_OW 250
8749: PPUSH
8750: LD_VAR 0 4
8754: PPUSH
8755: LD_INT 3
8757: PPUSH
8758: LD_INT 12
8760: PPUSH
8761: CALL_OW 12
8765: PPUSH
8766: CALL_OW 272
8770: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
8771: LD_ADDR_VAR 0 3
8775: PUSH
8776: LD_VAR 0 1
8780: PPUSH
8781: CALL_OW 251
8785: PPUSH
8786: LD_VAR 0 4
8790: PPUSH
8791: LD_INT 3
8793: PPUSH
8794: LD_INT 12
8796: PPUSH
8797: CALL_OW 12
8801: PPUSH
8802: CALL_OW 273
8806: ST_TO_ADDR
// if ValidHex ( x , y ) then
8807: LD_VAR 0 2
8811: PPUSH
8812: LD_VAR 0 3
8816: PPUSH
8817: CALL_OW 488
8821: IFFALSE 8856
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
8823: LD_VAR 0 1
8827: PPUSH
8828: LD_VAR 0 2
8832: PPUSH
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_INT 3
8840: PPUSH
8841: LD_INT 6
8843: PPUSH
8844: CALL_OW 12
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: CALL_OW 483
// end ;
8856: GO 8716
8858: POP
8859: POP
// end ;
8860: PPOPN 5
8862: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
8863: LD_EXP 17
8867: PUSH
8868: LD_EXP 52
8872: AND
8873: IFFALSE 8967
8875: GO 8877
8877: DISABLE
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: LD_INT 22
8889: PUSH
8890: LD_OWVAR 2
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 32
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 21
8911: PUSH
8912: LD_INT 2
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: ST_TO_ADDR
// if not tmp then
8929: LD_VAR 0 2
8933: NOT
8934: IFFALSE 8938
// exit ;
8936: GO 8967
// for i in tmp do
8938: LD_ADDR_VAR 0 1
8942: PUSH
8943: LD_VAR 0 2
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8965
// SetFuel ( i , 0 ) ;
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_INT 0
8958: PPUSH
8959: CALL_OW 240
8963: GO 8948
8965: POP
8966: POP
// end ;
8967: PPOPN 2
8969: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
8970: LD_EXP 17
8974: PUSH
8975: LD_EXP 53
8979: AND
8980: IFFALSE 9046
8982: GO 8984
8984: DISABLE
8985: LD_INT 0
8987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
8988: LD_ADDR_VAR 0 1
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_OWVAR 2
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 30
9007: PUSH
9008: LD_INT 29
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// if not tmp then
9024: LD_VAR 0 1
9028: NOT
9029: IFFALSE 9033
// exit ;
9031: GO 9046
// DestroyUnit ( tmp [ 1 ] ) ;
9033: LD_VAR 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: CALL_OW 65
// end ;
9046: PPOPN 1
9048: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9049: LD_EXP 17
9053: PUSH
9054: LD_EXP 55
9058: AND
9059: IFFALSE 9188
9061: GO 9063
9063: DISABLE
9064: LD_INT 0
9066: PPUSH
// begin uc_side := 0 ;
9067: LD_ADDR_OWVAR 20
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// uc_nation := nation_arabian ;
9075: LD_ADDR_OWVAR 21
9079: PUSH
9080: LD_INT 2
9082: ST_TO_ADDR
// hc_gallery :=  ;
9083: LD_ADDR_OWVAR 33
9087: PUSH
9088: LD_STRING 
9090: ST_TO_ADDR
// hc_name :=  ;
9091: LD_ADDR_OWVAR 26
9095: PUSH
9096: LD_STRING 
9098: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9099: LD_INT 1
9101: PPUSH
9102: LD_INT 11
9104: PPUSH
9105: LD_INT 10
9107: PPUSH
9108: CALL_OW 380
// un := CreateHuman ;
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: CALL_OW 44
9121: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9122: LD_VAR 0 1
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9134: LD_INT 35
9136: PPUSH
9137: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_INT 22
9148: PUSH
9149: LD_OWVAR 2
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 69
9162: PPUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 74
9172: PPUSH
9173: CALL_OW 115
// until IsDead ( un ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 301
9186: IFFALSE 9134
// end ;
9188: PPOPN 1
9190: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9191: LD_EXP 17
9195: PUSH
9196: LD_EXP 57
9200: AND
9201: IFFALSE 9213
9203: GO 9205
9205: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9206: LD_STRING earthquake(getX(game), 0, 32)
9208: PPUSH
9209: CALL_OW 559
9213: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9214: LD_EXP 17
9218: PUSH
9219: LD_EXP 58
9223: AND
9224: IFFALSE 9315
9226: GO 9228
9228: DISABLE
9229: LD_INT 0
9231: PPUSH
// begin enable ;
9232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
9233: LD_ADDR_VAR 0 1
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_OWVAR 2
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 21
9252: PUSH
9253: LD_INT 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 33
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: PPUSH
9275: CALL_OW 69
9279: ST_TO_ADDR
// if not tmp then
9280: LD_VAR 0 1
9284: NOT
9285: IFFALSE 9289
// exit ;
9287: GO 9315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
9289: LD_VAR 0 1
9293: PUSH
9294: LD_INT 1
9296: PPUSH
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL_OW 12
9306: ARRAY
9307: PPUSH
9308: LD_INT 1
9310: PPUSH
9311: CALL_OW 234
// end ;
9315: PPOPN 1
9317: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
9318: LD_EXP 17
9322: PUSH
9323: LD_EXP 59
9327: AND
9328: IFFALSE 9469
9330: GO 9332
9332: DISABLE
9333: LD_INT 0
9335: PPUSH
9336: PPUSH
9337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9338: LD_ADDR_VAR 0 3
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_OWVAR 2
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 25
9357: PUSH
9358: LD_INT 1
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 69
9373: ST_TO_ADDR
// if not tmp then
9374: LD_VAR 0 3
9378: NOT
9379: IFFALSE 9383
// exit ;
9381: GO 9469
// un := tmp [ rand ( 1 , tmp ) ] ;
9383: LD_ADDR_VAR 0 2
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_INT 1
9395: PPUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: CALL_OW 12
9405: ARRAY
9406: ST_TO_ADDR
// if Crawls ( un ) then
9407: LD_VAR 0 2
9411: PPUSH
9412: CALL_OW 318
9416: IFFALSE 9427
// ComWalk ( un ) ;
9418: LD_VAR 0 2
9422: PPUSH
9423: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
9427: LD_VAR 0 2
9431: PPUSH
9432: LD_INT 9
9434: PPUSH
9435: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
9439: LD_INT 28
9441: PPUSH
9442: LD_OWVAR 2
9446: PPUSH
9447: LD_INT 2
9449: PPUSH
9450: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
9454: LD_INT 29
9456: PPUSH
9457: LD_OWVAR 2
9461: PPUSH
9462: LD_INT 2
9464: PPUSH
9465: CALL_OW 322
// end ;
9469: PPOPN 3
9471: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
9472: LD_EXP 17
9476: PUSH
9477: LD_EXP 60
9481: AND
9482: IFFALSE 9593
9484: GO 9486
9486: DISABLE
9487: LD_INT 0
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9492: LD_ADDR_VAR 0 3
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_OWVAR 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 69
9527: ST_TO_ADDR
// if not tmp then
9528: LD_VAR 0 3
9532: NOT
9533: IFFALSE 9537
// exit ;
9535: GO 9593
// un := tmp [ rand ( 1 , tmp ) ] ;
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 1
9549: PPUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: CALL_OW 12
9559: ARRAY
9560: ST_TO_ADDR
// if Crawls ( un ) then
9561: LD_VAR 0 2
9565: PPUSH
9566: CALL_OW 318
9570: IFFALSE 9581
// ComWalk ( un ) ;
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 138
// SetClass ( un , class_mortar ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 8
9588: PPUSH
9589: CALL_OW 336
// end ;
9593: PPOPN 3
9595: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
9596: LD_EXP 17
9600: PUSH
9601: LD_EXP 61
9605: AND
9606: IFFALSE 9750
9608: GO 9610
9610: DISABLE
9611: LD_INT 0
9613: PPUSH
9614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
9615: LD_ADDR_VAR 0 2
9619: PUSH
9620: LD_INT 22
9622: PUSH
9623: LD_OWVAR 2
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: LD_INT 34
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 51
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 34
9667: PUSH
9668: LD_INT 32
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 69
9690: ST_TO_ADDR
// if not tmp then
9691: LD_VAR 0 2
9695: NOT
9696: IFFALSE 9700
// exit ;
9698: GO 9750
// for i in tmp do
9700: LD_ADDR_VAR 0 1
9704: PUSH
9705: LD_VAR 0 2
9709: PUSH
9710: FOR_IN
9711: IFFALSE 9748
// if GetCargo ( i , mat_artifact ) = 0 then
9713: LD_VAR 0 1
9717: PPUSH
9718: LD_INT 4
9720: PPUSH
9721: CALL_OW 289
9725: PUSH
9726: LD_INT 0
9728: EQUAL
9729: IFFALSE 9746
// SetCargo ( i , mat_siberit , 100 ) ;
9731: LD_VAR 0 1
9735: PPUSH
9736: LD_INT 3
9738: PPUSH
9739: LD_INT 100
9741: PPUSH
9742: CALL_OW 290
9746: GO 9710
9748: POP
9749: POP
// end ;
9750: PPOPN 2
9752: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
9753: LD_EXP 17
9757: PUSH
9758: LD_EXP 62
9762: AND
9763: IFFALSE 9946
9765: GO 9767
9767: DISABLE
9768: LD_INT 0
9770: PPUSH
9771: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
9772: LD_ADDR_VAR 0 2
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_OWVAR 2
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: ST_TO_ADDR
// if not tmp then
9794: LD_VAR 0 2
9798: NOT
9799: IFFALSE 9803
// exit ;
9801: GO 9946
// for i := 1 to 2 do
9803: LD_ADDR_VAR 0 1
9807: PUSH
9808: DOUBLE
9809: LD_INT 1
9811: DEC
9812: ST_TO_ADDR
9813: LD_INT 2
9815: PUSH
9816: FOR_TO
9817: IFFALSE 9944
// begin uc_side := your_side ;
9819: LD_ADDR_OWVAR 20
9823: PUSH
9824: LD_OWVAR 2
9828: ST_TO_ADDR
// uc_nation := nation_american ;
9829: LD_ADDR_OWVAR 21
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// vc_chassis := us_morphling ;
9837: LD_ADDR_OWVAR 37
9841: PUSH
9842: LD_INT 5
9844: ST_TO_ADDR
// vc_engine := engine_siberite ;
9845: LD_ADDR_OWVAR 39
9849: PUSH
9850: LD_INT 3
9852: ST_TO_ADDR
// vc_control := control_computer ;
9853: LD_ADDR_OWVAR 38
9857: PUSH
9858: LD_INT 3
9860: ST_TO_ADDR
// vc_weapon := us_double_laser ;
9861: LD_ADDR_OWVAR 40
9865: PUSH
9866: LD_INT 10
9868: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
9869: LD_VAR 0 2
9873: PUSH
9874: LD_INT 1
9876: ARRAY
9877: PPUSH
9878: CALL_OW 310
9882: NOT
9883: IFFALSE 9930
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
9885: CALL_OW 45
9889: PPUSH
9890: LD_VAR 0 2
9894: PUSH
9895: LD_INT 1
9897: ARRAY
9898: PPUSH
9899: CALL_OW 250
9903: PPUSH
9904: LD_VAR 0 2
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: CALL_OW 251
9917: PPUSH
9918: LD_INT 12
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: CALL_OW 50
9928: GO 9942
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
9930: CALL_OW 45
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: CALL_OW 51
// end ;
9942: GO 9816
9944: POP
9945: POP
// end ;
9946: PPOPN 2
9948: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
9949: LD_EXP 17
9953: PUSH
9954: LD_EXP 63
9958: AND
9959: IFFALSE 10181
9961: GO 9963
9963: DISABLE
9964: LD_INT 0
9966: PPUSH
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9972: LD_ADDR_VAR 0 6
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_OWVAR 2
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: LD_INT 23
10004: PUSH
10005: LD_INT 0
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 69
10025: ST_TO_ADDR
// if not tmp then
10026: LD_VAR 0 6
10030: NOT
10031: IFFALSE 10035
// exit ;
10033: GO 10181
// s1 := rand ( 1 , 4 ) ;
10035: LD_ADDR_VAR 0 2
10039: PUSH
10040: LD_INT 1
10042: PPUSH
10043: LD_INT 4
10045: PPUSH
10046: CALL_OW 12
10050: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10051: LD_ADDR_VAR 0 4
10055: PUSH
10056: LD_VAR 0 6
10060: PUSH
10061: LD_INT 1
10063: ARRAY
10064: PPUSH
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 259
10074: ST_TO_ADDR
// if s1 = 1 then
10075: LD_VAR 0 2
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: IFFALSE 10103
// s2 := rand ( 2 , 4 ) else
10085: LD_ADDR_VAR 0 3
10089: PUSH
10090: LD_INT 2
10092: PPUSH
10093: LD_INT 4
10095: PPUSH
10096: CALL_OW 12
10100: ST_TO_ADDR
10101: GO 10111
// s2 := 1 ;
10103: LD_ADDR_VAR 0 3
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10111: LD_ADDR_VAR 0 5
10115: PUSH
10116: LD_VAR 0 6
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: CALL_OW 259
10134: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10135: LD_VAR 0 6
10139: PUSH
10140: LD_INT 1
10142: ARRAY
10143: PPUSH
10144: LD_VAR 0 2
10148: PPUSH
10149: LD_VAR 0 5
10153: PPUSH
10154: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10158: LD_VAR 0 6
10162: PUSH
10163: LD_INT 1
10165: ARRAY
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_VAR 0 4
10176: PPUSH
10177: CALL_OW 237
// end ;
10181: PPOPN 6
10183: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10184: LD_EXP 17
10188: PUSH
10189: LD_EXP 64
10193: AND
10194: IFFALSE 10273
10196: GO 10198
10198: DISABLE
10199: LD_INT 0
10201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_OWVAR 2
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 30
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 69
10237: ST_TO_ADDR
// if not tmp then
10238: LD_VAR 0 1
10242: NOT
10243: IFFALSE 10247
// exit ;
10245: GO 10273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10247: LD_VAR 0 1
10251: PUSH
10252: LD_INT 1
10254: PPUSH
10255: LD_VAR 0 1
10259: PPUSH
10260: CALL_OW 12
10264: ARRAY
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 234
// end ;
10273: PPOPN 1
10275: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
10276: LD_EXP 17
10280: PUSH
10281: LD_EXP 65
10285: AND
10286: IFFALSE 10398
10288: GO 10290
10290: DISABLE
10291: LD_INT 0
10293: PPUSH
10294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
10295: LD_ADDR_VAR 0 2
10299: PUSH
10300: LD_INT 22
10302: PUSH
10303: LD_OWVAR 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 2
10314: PUSH
10315: LD_INT 30
10317: PUSH
10318: LD_INT 27
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 30
10327: PUSH
10328: LD_INT 26
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 30
10337: PUSH
10338: LD_INT 28
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PPUSH
10355: CALL_OW 69
10359: ST_TO_ADDR
// if not tmp then
10360: LD_VAR 0 2
10364: NOT
10365: IFFALSE 10369
// exit ;
10367: GO 10398
// for i in tmp do
10369: LD_ADDR_VAR 0 1
10373: PUSH
10374: LD_VAR 0 2
10378: PUSH
10379: FOR_IN
10380: IFFALSE 10396
// SetLives ( i , 1 ) ;
10382: LD_VAR 0 1
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 234
10394: GO 10379
10396: POP
10397: POP
// end ;
10398: PPOPN 2
10400: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
10401: LD_EXP 17
10405: PUSH
10406: LD_EXP 66
10410: AND
10411: IFFALSE 10685
10413: GO 10415
10415: DISABLE
10416: LD_INT 0
10418: PPUSH
10419: PPUSH
10420: PPUSH
// begin i := rand ( 1 , 7 ) ;
10421: LD_ADDR_VAR 0 1
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 7
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
// case i of 1 :
10437: LD_VAR 0 1
10441: PUSH
10442: LD_INT 1
10444: DOUBLE
10445: EQUAL
10446: IFTRUE 10450
10448: GO 10460
10450: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
10451: LD_STRING earthquake(getX(game), 0, 32)
10453: PPUSH
10454: CALL_OW 559
10458: GO 10685
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10482
10468: POP
// begin ToLua ( displayStucuk(); ) ;
10469: LD_STRING displayStucuk();
10471: PPUSH
10472: CALL_OW 559
// ResetFog ;
10476: CALL_OW 335
// end ; 3 :
10480: GO 10685
10482: LD_INT 3
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10594
10490: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_OWVAR 2
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 25
10510: PUSH
10511: LD_INT 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 69
10526: ST_TO_ADDR
// if not tmp then
10527: LD_VAR 0 2
10531: NOT
10532: IFFALSE 10536
// exit ;
10534: GO 10685
// un := tmp [ rand ( 1 , tmp ) ] ;
10536: LD_ADDR_VAR 0 3
10540: PUSH
10541: LD_VAR 0 2
10545: PUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_VAR 0 2
10553: PPUSH
10554: CALL_OW 12
10558: ARRAY
10559: ST_TO_ADDR
// if Crawls ( un ) then
10560: LD_VAR 0 3
10564: PPUSH
10565: CALL_OW 318
10569: IFFALSE 10580
// ComWalk ( un ) ;
10571: LD_VAR 0 3
10575: PPUSH
10576: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 8
10587: PPUSH
10588: CALL_OW 336
// end ; 4 :
10592: GO 10685
10594: LD_INT 4
10596: DOUBLE
10597: EQUAL
10598: IFTRUE 10602
10600: GO 10663
10602: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_INT 22
10610: PUSH
10611: LD_OWVAR 2
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 29
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 69
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 2
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10685
// DestroyUnit ( tmp [ 1 ] ) ;
10648: LD_VAR 0 2
10652: PUSH
10653: LD_INT 1
10655: ARRAY
10656: PPUSH
10657: CALL_OW 65
// end ; 5 .. 7 :
10661: GO 10685
10663: LD_INT 5
10665: DOUBLE
10666: GREATEREQUAL
10667: IFFALSE 10675
10669: LD_INT 7
10671: DOUBLE
10672: LESSEQUAL
10673: IFTRUE 10677
10675: GO 10684
10677: POP
// StreamSibBomb ; end ;
10678: CALL 6935 0 0
10682: GO 10685
10684: POP
// end ;
10685: PPOPN 3
10687: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
10688: LD_EXP 17
10692: PUSH
10693: LD_EXP 67
10697: AND
10698: IFFALSE 10854
10700: GO 10702
10702: DISABLE
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
10707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_INT 81
10715: PUSH
10716: LD_OWVAR 2
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: LD_INT 21
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 21
10740: PUSH
10741: LD_INT 2
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: ST_TO_ADDR
// if not tmp then
10762: LD_VAR 0 2
10766: NOT
10767: IFFALSE 10771
// exit ;
10769: GO 10854
// p := 0 ;
10771: LD_ADDR_VAR 0 3
10775: PUSH
10776: LD_INT 0
10778: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10779: LD_INT 35
10781: PPUSH
10782: CALL_OW 67
// p := p + 1 ;
10786: LD_ADDR_VAR 0 3
10790: PUSH
10791: LD_VAR 0 3
10795: PUSH
10796: LD_INT 1
10798: PLUS
10799: ST_TO_ADDR
// for i in tmp do
10800: LD_ADDR_VAR 0 1
10804: PUSH
10805: LD_VAR 0 2
10809: PUSH
10810: FOR_IN
10811: IFFALSE 10842
// if GetLives ( i ) < 1000 then
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 256
10822: PUSH
10823: LD_INT 1000
10825: LESS
10826: IFFALSE 10840
// SetLives ( i , 1000 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 1000
10835: PPUSH
10836: CALL_OW 234
10840: GO 10810
10842: POP
10843: POP
// until p > 20 ;
10844: LD_VAR 0 3
10848: PUSH
10849: LD_INT 20
10851: GREATER
10852: IFFALSE 10779
// end ;
10854: PPOPN 3
10856: END
// every 0 0$1 trigger StreamModeActive and sTime do
10857: LD_EXP 17
10861: PUSH
10862: LD_EXP 68
10866: AND
10867: IFFALSE 10902
10869: GO 10871
10871: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
10872: LD_INT 28
10874: PPUSH
10875: LD_OWVAR 2
10879: PPUSH
10880: LD_INT 2
10882: PPUSH
10883: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
10887: LD_INT 30
10889: PPUSH
10890: LD_OWVAR 2
10894: PPUSH
10895: LD_INT 2
10897: PPUSH
10898: CALL_OW 322
// end ;
10902: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
10903: LD_EXP 17
10907: PUSH
10908: LD_EXP 69
10912: AND
10913: IFFALSE 11034
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_OWVAR 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 3
10951: PUSH
10952: LD_INT 23
10954: PUSH
10955: LD_INT 0
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: PPUSH
10971: CALL_OW 69
10975: ST_TO_ADDR
// if not tmp then
10976: LD_VAR 0 2
10980: NOT
10981: IFFALSE 10985
// exit ;
10983: GO 11034
// for i in tmp do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: LD_VAR 0 2
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11032
// begin if Crawls ( i ) then
10998: LD_VAR 0 1
11002: PPUSH
11003: CALL_OW 318
11007: IFFALSE 11018
// ComWalk ( i ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 138
// SetClass ( i , 2 ) ;
11018: LD_VAR 0 1
11022: PPUSH
11023: LD_INT 2
11025: PPUSH
11026: CALL_OW 336
// end ;
11030: GO 10995
11032: POP
11033: POP
// end ;
11034: PPOPN 2
11036: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11037: LD_EXP 17
11041: PUSH
11042: LD_EXP 70
11046: AND
11047: IFFALSE 11328
11049: GO 11051
11051: DISABLE
11052: LD_INT 0
11054: PPUSH
11055: PPUSH
11056: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11057: LD_OWVAR 2
11061: PPUSH
11062: LD_INT 9
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11075: LD_INT 9
11077: PPUSH
11078: LD_OWVAR 2
11082: PPUSH
11083: CALL_OW 343
// uc_side := 9 ;
11087: LD_ADDR_OWVAR 20
11091: PUSH
11092: LD_INT 9
11094: ST_TO_ADDR
// uc_nation := 2 ;
11095: LD_ADDR_OWVAR 21
11099: PUSH
11100: LD_INT 2
11102: ST_TO_ADDR
// hc_name := Dark Warrior ;
11103: LD_ADDR_OWVAR 26
11107: PUSH
11108: LD_STRING Dark Warrior
11110: ST_TO_ADDR
// hc_gallery :=  ;
11111: LD_ADDR_OWVAR 33
11115: PUSH
11116: LD_STRING 
11118: ST_TO_ADDR
// hc_noskilllimit := true ;
11119: LD_ADDR_OWVAR 76
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11127: LD_ADDR_OWVAR 31
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: LD_INT 30
11137: PUSH
11138: LD_INT 30
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// hc_noskilllimit := false ;
11160: LD_ADDR_OWVAR 76
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 51
// p := 0 ;
11180: LD_ADDR_VAR 0 2
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11188: LD_INT 35
11190: PPUSH
11191: CALL_OW 67
// p := p + 1 ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11209: LD_VAR 0 3
11213: PPUSH
11214: CALL_OW 256
11218: PUSH
11219: LD_INT 1000
11221: LESS
11222: IFFALSE 11236
// SetLives ( un , 1000 ) ;
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 1000
11231: PPUSH
11232: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 81
11243: PUSH
11244: LD_OWVAR 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 91
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_INT 30
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: CALL_OW 74
11287: PPUSH
11288: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
11292: LD_VAR 0 2
11296: PUSH
11297: LD_INT 60
11299: GREATER
11300: PUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: CALL_OW 301
11310: OR
11311: IFFALSE 11188
// if un then
11313: LD_VAR 0 3
11317: IFFALSE 11328
// RemoveUnit ( un ) ;
11319: LD_VAR 0 3
11323: PPUSH
11324: CALL_OW 64
// end ;
11328: PPOPN 3
11330: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11331: LD_INT 0
11333: PPUSH
// case cmd of 301 :
11334: LD_VAR 0 1
11338: PUSH
11339: LD_INT 301
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11379
11347: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
11348: LD_VAR 0 6
11352: PPUSH
11353: LD_VAR 0 7
11357: PPUSH
11358: LD_VAR 0 8
11362: PPUSH
11363: LD_VAR 0 4
11367: PPUSH
11368: LD_VAR 0 5
11372: PPUSH
11373: CALL 12580 0 5
11377: GO 11500
11379: LD_INT 302
11381: DOUBLE
11382: EQUAL
11383: IFTRUE 11387
11385: GO 11424
11387: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
11388: LD_VAR 0 6
11392: PPUSH
11393: LD_VAR 0 7
11397: PPUSH
11398: LD_VAR 0 8
11402: PPUSH
11403: LD_VAR 0 9
11407: PPUSH
11408: LD_VAR 0 4
11412: PPUSH
11413: LD_VAR 0 5
11417: PPUSH
11418: CALL 12671 0 6
11422: GO 11500
11424: LD_INT 303
11426: DOUBLE
11427: EQUAL
11428: IFTRUE 11432
11430: GO 11469
11432: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
11433: LD_VAR 0 6
11437: PPUSH
11438: LD_VAR 0 7
11442: PPUSH
11443: LD_VAR 0 8
11447: PPUSH
11448: LD_VAR 0 9
11452: PPUSH
11453: LD_VAR 0 4
11457: PPUSH
11458: LD_VAR 0 5
11462: PPUSH
11463: CALL 11505 0 6
11467: GO 11500
11469: LD_INT 304
11471: DOUBLE
11472: EQUAL
11473: IFTRUE 11477
11475: GO 11499
11477: POP
// hHackTeleport ( unit , x , y ) ; end ;
11478: LD_VAR 0 2
11482: PPUSH
11483: LD_VAR 0 4
11487: PPUSH
11488: LD_VAR 0 5
11492: PPUSH
11493: CALL 13264 0 3
11497: GO 11500
11499: POP
// end ;
11500: LD_VAR 0 12
11504: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
11505: LD_INT 0
11507: PPUSH
11508: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
11509: LD_VAR 0 1
11513: PUSH
11514: LD_INT 1
11516: LESS
11517: PUSH
11518: LD_VAR 0 1
11522: PUSH
11523: LD_INT 3
11525: GREATER
11526: OR
11527: PUSH
11528: LD_VAR 0 5
11532: PPUSH
11533: LD_VAR 0 6
11537: PPUSH
11538: CALL_OW 428
11542: OR
11543: IFFALSE 11547
// exit ;
11545: GO 12267
// uc_side := your_side ;
11547: LD_ADDR_OWVAR 20
11551: PUSH
11552: LD_OWVAR 2
11556: ST_TO_ADDR
// uc_nation := nation ;
11557: LD_ADDR_OWVAR 21
11561: PUSH
11562: LD_VAR 0 1
11566: ST_TO_ADDR
// bc_level = 1 ;
11567: LD_ADDR_OWVAR 43
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
// case btype of 1 :
11575: LD_VAR 0 2
11579: PUSH
11580: LD_INT 1
11582: DOUBLE
11583: EQUAL
11584: IFTRUE 11588
11586: GO 11599
11588: POP
// bc_type := b_depot ; 2 :
11589: LD_ADDR_OWVAR 42
11593: PUSH
11594: LD_INT 0
11596: ST_TO_ADDR
11597: GO 12211
11599: LD_INT 2
11601: DOUBLE
11602: EQUAL
11603: IFTRUE 11607
11605: GO 11618
11607: POP
// bc_type := b_warehouse ; 3 :
11608: LD_ADDR_OWVAR 42
11612: PUSH
11613: LD_INT 1
11615: ST_TO_ADDR
11616: GO 12211
11618: LD_INT 3
11620: DOUBLE
11621: EQUAL
11622: IFTRUE 11626
11624: GO 11637
11626: POP
// bc_type := b_lab ; 4 .. 9 :
11627: LD_ADDR_OWVAR 42
11631: PUSH
11632: LD_INT 6
11634: ST_TO_ADDR
11635: GO 12211
11637: LD_INT 4
11639: DOUBLE
11640: GREATEREQUAL
11641: IFFALSE 11649
11643: LD_INT 9
11645: DOUBLE
11646: LESSEQUAL
11647: IFTRUE 11651
11649: GO 11703
11651: POP
// begin bc_type := b_lab_half ;
11652: LD_ADDR_OWVAR 42
11656: PUSH
11657: LD_INT 7
11659: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
11660: LD_ADDR_OWVAR 44
11664: PUSH
11665: LD_INT 10
11667: PUSH
11668: LD_INT 11
11670: PUSH
11671: LD_INT 12
11673: PUSH
11674: LD_INT 15
11676: PUSH
11677: LD_INT 14
11679: PUSH
11680: LD_INT 13
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_INT 3
11698: MINUS
11699: ARRAY
11700: ST_TO_ADDR
// end ; 10 .. 13 :
11701: GO 12211
11703: LD_INT 10
11705: DOUBLE
11706: GREATEREQUAL
11707: IFFALSE 11715
11709: LD_INT 13
11711: DOUBLE
11712: LESSEQUAL
11713: IFTRUE 11717
11715: GO 11794
11717: POP
// begin bc_type := b_lab_full ;
11718: LD_ADDR_OWVAR 42
11722: PUSH
11723: LD_INT 8
11725: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
11726: LD_ADDR_OWVAR 44
11730: PUSH
11731: LD_INT 10
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: LD_INT 14
11739: PUSH
11740: LD_INT 13
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_INT 9
11756: MINUS
11757: ARRAY
11758: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
11759: LD_ADDR_OWVAR 45
11763: PUSH
11764: LD_INT 11
11766: PUSH
11767: LD_INT 15
11769: PUSH
11770: LD_INT 12
11772: PUSH
11773: LD_INT 15
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_VAR 0 2
11786: PUSH
11787: LD_INT 9
11789: MINUS
11790: ARRAY
11791: ST_TO_ADDR
// end ; 14 :
11792: GO 12211
11794: LD_INT 14
11796: DOUBLE
11797: EQUAL
11798: IFTRUE 11802
11800: GO 11813
11802: POP
// bc_type := b_workshop ; 15 :
11803: LD_ADDR_OWVAR 42
11807: PUSH
11808: LD_INT 2
11810: ST_TO_ADDR
11811: GO 12211
11813: LD_INT 15
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 11832
11821: POP
// bc_type := b_factory ; 16 :
11822: LD_ADDR_OWVAR 42
11826: PUSH
11827: LD_INT 3
11829: ST_TO_ADDR
11830: GO 12211
11832: LD_INT 16
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 11851
11840: POP
// bc_type := b_ext_gun ; 17 :
11841: LD_ADDR_OWVAR 42
11845: PUSH
11846: LD_INT 17
11848: ST_TO_ADDR
11849: GO 12211
11851: LD_INT 17
11853: DOUBLE
11854: EQUAL
11855: IFTRUE 11859
11857: GO 11887
11859: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
11860: LD_ADDR_OWVAR 42
11864: PUSH
11865: LD_INT 19
11867: PUSH
11868: LD_INT 23
11870: PUSH
11871: LD_INT 19
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: PUSH
11879: LD_VAR 0 1
11883: ARRAY
11884: ST_TO_ADDR
11885: GO 12211
11887: LD_INT 18
11889: DOUBLE
11890: EQUAL
11891: IFTRUE 11895
11893: GO 11906
11895: POP
// bc_type := b_ext_radar ; 19 :
11896: LD_ADDR_OWVAR 42
11900: PUSH
11901: LD_INT 20
11903: ST_TO_ADDR
11904: GO 12211
11906: LD_INT 19
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11925
11914: POP
// bc_type := b_ext_radio ; 20 :
11915: LD_ADDR_OWVAR 42
11919: PUSH
11920: LD_INT 22
11922: ST_TO_ADDR
11923: GO 12211
11925: LD_INT 20
11927: DOUBLE
11928: EQUAL
11929: IFTRUE 11933
11931: GO 11944
11933: POP
// bc_type := b_ext_siberium ; 21 :
11934: LD_ADDR_OWVAR 42
11938: PUSH
11939: LD_INT 21
11941: ST_TO_ADDR
11942: GO 12211
11944: LD_INT 21
11946: DOUBLE
11947: EQUAL
11948: IFTRUE 11952
11950: GO 11963
11952: POP
// bc_type := b_ext_computer ; 22 :
11953: LD_ADDR_OWVAR 42
11957: PUSH
11958: LD_INT 24
11960: ST_TO_ADDR
11961: GO 12211
11963: LD_INT 22
11965: DOUBLE
11966: EQUAL
11967: IFTRUE 11971
11969: GO 11982
11971: POP
// bc_type := b_ext_track ; 23 :
11972: LD_ADDR_OWVAR 42
11976: PUSH
11977: LD_INT 16
11979: ST_TO_ADDR
11980: GO 12211
11982: LD_INT 23
11984: DOUBLE
11985: EQUAL
11986: IFTRUE 11990
11988: GO 12001
11990: POP
// bc_type := b_ext_laser ; 24 :
11991: LD_ADDR_OWVAR 42
11995: PUSH
11996: LD_INT 25
11998: ST_TO_ADDR
11999: GO 12211
12001: LD_INT 24
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12020
12009: POP
// bc_type := b_control_tower ; 25 :
12010: LD_ADDR_OWVAR 42
12014: PUSH
12015: LD_INT 36
12017: ST_TO_ADDR
12018: GO 12211
12020: LD_INT 25
12022: DOUBLE
12023: EQUAL
12024: IFTRUE 12028
12026: GO 12039
12028: POP
// bc_type := b_breastwork ; 26 :
12029: LD_ADDR_OWVAR 42
12033: PUSH
12034: LD_INT 31
12036: ST_TO_ADDR
12037: GO 12211
12039: LD_INT 26
12041: DOUBLE
12042: EQUAL
12043: IFTRUE 12047
12045: GO 12058
12047: POP
// bc_type := b_bunker ; 27 :
12048: LD_ADDR_OWVAR 42
12052: PUSH
12053: LD_INT 32
12055: ST_TO_ADDR
12056: GO 12211
12058: LD_INT 27
12060: DOUBLE
12061: EQUAL
12062: IFTRUE 12066
12064: GO 12077
12066: POP
// bc_type := b_turret ; 28 :
12067: LD_ADDR_OWVAR 42
12071: PUSH
12072: LD_INT 33
12074: ST_TO_ADDR
12075: GO 12211
12077: LD_INT 28
12079: DOUBLE
12080: EQUAL
12081: IFTRUE 12085
12083: GO 12096
12085: POP
// bc_type := b_armoury ; 29 :
12086: LD_ADDR_OWVAR 42
12090: PUSH
12091: LD_INT 4
12093: ST_TO_ADDR
12094: GO 12211
12096: LD_INT 29
12098: DOUBLE
12099: EQUAL
12100: IFTRUE 12104
12102: GO 12115
12104: POP
// bc_type := b_barracks ; 30 :
12105: LD_ADDR_OWVAR 42
12109: PUSH
12110: LD_INT 5
12112: ST_TO_ADDR
12113: GO 12211
12115: LD_INT 30
12117: DOUBLE
12118: EQUAL
12119: IFTRUE 12123
12121: GO 12134
12123: POP
// bc_type := b_solar_power ; 31 :
12124: LD_ADDR_OWVAR 42
12128: PUSH
12129: LD_INT 27
12131: ST_TO_ADDR
12132: GO 12211
12134: LD_INT 31
12136: DOUBLE
12137: EQUAL
12138: IFTRUE 12142
12140: GO 12153
12142: POP
// bc_type := b_oil_power ; 32 :
12143: LD_ADDR_OWVAR 42
12147: PUSH
12148: LD_INT 26
12150: ST_TO_ADDR
12151: GO 12211
12153: LD_INT 32
12155: DOUBLE
12156: EQUAL
12157: IFTRUE 12161
12159: GO 12172
12161: POP
// bc_type := b_siberite_power ; 33 :
12162: LD_ADDR_OWVAR 42
12166: PUSH
12167: LD_INT 28
12169: ST_TO_ADDR
12170: GO 12211
12172: LD_INT 33
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12191
12180: POP
// bc_type := b_oil_mine ; 34 :
12181: LD_ADDR_OWVAR 42
12185: PUSH
12186: LD_INT 29
12188: ST_TO_ADDR
12189: GO 12211
12191: LD_INT 34
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12210
12199: POP
// bc_type := b_siberite_mine ; end ;
12200: LD_ADDR_OWVAR 42
12204: PUSH
12205: LD_INT 30
12207: ST_TO_ADDR
12208: GO 12211
12210: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
12211: LD_ADDR_VAR 0 8
12215: PUSH
12216: LD_VAR 0 5
12220: PPUSH
12221: LD_VAR 0 6
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: CALL_OW 47
12235: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
12236: LD_OWVAR 42
12240: PUSH
12241: LD_INT 32
12243: PUSH
12244: LD_INT 33
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: IN
12251: IFFALSE 12267
// PlaceWeaponTurret ( b , weapon ) ;
12253: LD_VAR 0 8
12257: PPUSH
12258: LD_VAR 0 4
12262: PPUSH
12263: CALL_OW 431
// end ;
12267: LD_VAR 0 7
12271: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12278: LD_ADDR_VAR 0 4
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_OWVAR 2
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: LD_INT 0
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 30
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: ST_TO_ADDR
// if not tmp then
12332: LD_VAR 0 4
12336: NOT
12337: IFFALSE 12341
// exit ;
12339: GO 12400
// for i in tmp do
12341: LD_ADDR_VAR 0 2
12345: PUSH
12346: LD_VAR 0 4
12350: PUSH
12351: FOR_IN
12352: IFFALSE 12398
// for j = 1 to 3 do
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: DOUBLE
12360: LD_INT 1
12362: DEC
12363: ST_TO_ADDR
12364: LD_INT 3
12366: PUSH
12367: FOR_TO
12368: IFFALSE 12394
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
12370: LD_VAR 0 2
12374: PPUSH
12375: CALL_OW 274
12379: PPUSH
12380: LD_VAR 0 3
12384: PPUSH
12385: LD_INT 99999
12387: PPUSH
12388: CALL_OW 277
12392: GO 12367
12394: POP
12395: POP
12396: GO 12351
12398: POP
12399: POP
// end ;
12400: LD_VAR 0 1
12404: RET
// export function hHackSetLevel10 ; var i , j ; begin
12405: LD_INT 0
12407: PPUSH
12408: PPUSH
12409: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
12410: LD_ADDR_VAR 0 2
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: FOR_IN
12431: IFFALSE 12483
// if IsSelected ( i ) then
12433: LD_VAR 0 2
12437: PPUSH
12438: CALL_OW 306
12442: IFFALSE 12481
// begin for j := 1 to 4 do
12444: LD_ADDR_VAR 0 3
12448: PUSH
12449: DOUBLE
12450: LD_INT 1
12452: DEC
12453: ST_TO_ADDR
12454: LD_INT 4
12456: PUSH
12457: FOR_TO
12458: IFFALSE 12479
// SetSkill ( i , j , 10 ) ;
12460: LD_VAR 0 2
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 10
12472: PPUSH
12473: CALL_OW 237
12477: GO 12457
12479: POP
12480: POP
// end ;
12481: GO 12430
12483: POP
12484: POP
// end ;
12485: LD_VAR 0 1
12489: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
12495: LD_ADDR_VAR 0 2
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_OWVAR 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 21
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12573
// begin for j := 1 to 4 do
12534: LD_ADDR_VAR 0 3
12538: PUSH
12539: DOUBLE
12540: LD_INT 1
12542: DEC
12543: ST_TO_ADDR
12544: LD_INT 4
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12569
// SetSkill ( i , j , 10 ) ;
12550: LD_VAR 0 2
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 10
12562: PPUSH
12563: CALL_OW 237
12567: GO 12547
12569: POP
12570: POP
// end ;
12571: GO 12531
12573: POP
12574: POP
// end ;
12575: LD_VAR 0 1
12579: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
12580: LD_INT 0
12582: PPUSH
// uc_side := your_side ;
12583: LD_ADDR_OWVAR 20
12587: PUSH
12588: LD_OWVAR 2
12592: ST_TO_ADDR
// uc_nation := nation ;
12593: LD_ADDR_OWVAR 21
12597: PUSH
12598: LD_VAR 0 1
12602: ST_TO_ADDR
// InitHc ;
12603: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
12607: LD_INT 0
12609: PPUSH
12610: LD_VAR 0 2
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
12624: LD_VAR 0 4
12628: PPUSH
12629: LD_VAR 0 5
12633: PPUSH
12634: CALL_OW 428
12638: PUSH
12639: LD_INT 0
12641: EQUAL
12642: IFFALSE 12666
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
12644: CALL_OW 44
12648: PPUSH
12649: LD_VAR 0 4
12653: PPUSH
12654: LD_VAR 0 5
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 48
// end ;
12666: LD_VAR 0 6
12670: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
12671: LD_INT 0
12673: PPUSH
12674: PPUSH
// uc_side := your_side ;
12675: LD_ADDR_OWVAR 20
12679: PUSH
12680: LD_OWVAR 2
12684: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: LD_INT 5
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: IN
12712: IFFALSE 12724
// uc_nation := nation_american else
12714: LD_ADDR_OWVAR 21
12718: PUSH
12719: LD_INT 1
12721: ST_TO_ADDR
12722: GO 12767
// if chassis in [ 11 , 12 , 13 , 14 ] then
12724: LD_VAR 0 1
12728: PUSH
12729: LD_INT 11
12731: PUSH
12732: LD_INT 12
12734: PUSH
12735: LD_INT 13
12737: PUSH
12738: LD_INT 14
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: IN
12747: IFFALSE 12759
// uc_nation := nation_arabian else
12749: LD_ADDR_OWVAR 21
12753: PUSH
12754: LD_INT 2
12756: ST_TO_ADDR
12757: GO 12767
// uc_nation := nation_russian ;
12759: LD_ADDR_OWVAR 21
12763: PUSH
12764: LD_INT 3
12766: ST_TO_ADDR
// vc_chassis := chassis ;
12767: LD_ADDR_OWVAR 37
12771: PUSH
12772: LD_VAR 0 1
12776: ST_TO_ADDR
// vc_engine := engine ;
12777: LD_ADDR_OWVAR 39
12781: PUSH
12782: LD_VAR 0 2
12786: ST_TO_ADDR
// vc_control := control ;
12787: LD_ADDR_OWVAR 38
12791: PUSH
12792: LD_VAR 0 3
12796: ST_TO_ADDR
// vc_weapon := weapon ;
12797: LD_ADDR_OWVAR 40
12801: PUSH
12802: LD_VAR 0 4
12806: ST_TO_ADDR
// un := CreateVehicle ;
12807: LD_ADDR_VAR 0 8
12811: PUSH
12812: CALL_OW 45
12816: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
12817: LD_VAR 0 8
12821: PPUSH
12822: LD_INT 0
12824: PPUSH
12825: LD_INT 5
12827: PPUSH
12828: CALL_OW 12
12832: PPUSH
12833: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
12837: LD_VAR 0 8
12841: PPUSH
12842: LD_VAR 0 5
12846: PPUSH
12847: LD_VAR 0 6
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 48
// end ;
12859: LD_VAR 0 7
12863: RET
// export hInvincible ; every 1 do
12864: GO 12866
12866: DISABLE
// hInvincible := [ ] ;
12867: LD_ADDR_EXP 71
12871: PUSH
12872: EMPTY
12873: ST_TO_ADDR
12874: END
// every 10 do var i ;
12875: GO 12877
12877: DISABLE
12878: LD_INT 0
12880: PPUSH
// begin enable ;
12881: ENABLE
// if not hInvincible then
12882: LD_EXP 71
12886: NOT
12887: IFFALSE 12891
// exit ;
12889: GO 12935
// for i in hInvincible do
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_EXP 71
12900: PUSH
12901: FOR_IN
12902: IFFALSE 12933
// if GetLives ( i ) < 1000 then
12904: LD_VAR 0 1
12908: PPUSH
12909: CALL_OW 256
12913: PUSH
12914: LD_INT 1000
12916: LESS
12917: IFFALSE 12931
// SetLives ( i , 1000 ) ;
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_INT 1000
12926: PPUSH
12927: CALL_OW 234
12931: GO 12901
12933: POP
12934: POP
// end ;
12935: PPOPN 1
12937: END
// export function hHackInvincible ; var i ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
12942: LD_ADDR_VAR 0 2
12946: PUSH
12947: LD_INT 2
12949: PUSH
12950: LD_INT 21
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 21
12962: PUSH
12963: LD_INT 2
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: PUSH
12980: FOR_IN
12981: IFFALSE 13042
// if IsSelected ( i ) then
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 306
12992: IFFALSE 13040
// begin if i in hInvincible then
12994: LD_VAR 0 2
12998: PUSH
12999: LD_EXP 71
13003: IN
13004: IFFALSE 13024
// hInvincible := hInvincible diff i else
13006: LD_ADDR_EXP 71
13010: PUSH
13011: LD_EXP 71
13015: PUSH
13016: LD_VAR 0 2
13020: DIFF
13021: ST_TO_ADDR
13022: GO 13040
// hInvincible := hInvincible union i ;
13024: LD_ADDR_EXP 71
13028: PUSH
13029: LD_EXP 71
13033: PUSH
13034: LD_VAR 0 2
13038: UNION
13039: ST_TO_ADDR
// end ;
13040: GO 12980
13042: POP
13043: POP
// end ;
13044: LD_VAR 0 1
13048: RET
// export function hHackInvisible ; var i , j ; begin
13049: LD_INT 0
13051: PPUSH
13052: PPUSH
13053: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 69
13073: PUSH
13074: FOR_IN
13075: IFFALSE 13099
// if IsSelected ( i ) then
13077: LD_VAR 0 2
13081: PPUSH
13082: CALL_OW 306
13086: IFFALSE 13097
// ComForceInvisible ( i ) ;
13088: LD_VAR 0 2
13092: PPUSH
13093: CALL_OW 496
13097: GO 13074
13099: POP
13100: POP
// end ;
13101: LD_VAR 0 1
13105: RET
// export function hHackChangeYourSide ; begin
13106: LD_INT 0
13108: PPUSH
// if your_side = 8 then
13109: LD_OWVAR 2
13113: PUSH
13114: LD_INT 8
13116: EQUAL
13117: IFFALSE 13129
// your_side := 0 else
13119: LD_ADDR_OWVAR 2
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
13127: GO 13143
// your_side := your_side + 1 ;
13129: LD_ADDR_OWVAR 2
13133: PUSH
13134: LD_OWVAR 2
13138: PUSH
13139: LD_INT 1
13141: PLUS
13142: ST_TO_ADDR
// end ;
13143: LD_VAR 0 1
13147: RET
// export function hHackChangeUnitSide ; var i , j ; begin
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
13152: PPUSH
// for i in all_units do
13153: LD_ADDR_VAR 0 2
13157: PUSH
13158: LD_OWVAR 3
13162: PUSH
13163: FOR_IN
13164: IFFALSE 13242
// if IsSelected ( i ) then
13166: LD_VAR 0 2
13170: PPUSH
13171: CALL_OW 306
13175: IFFALSE 13240
// begin j := GetSide ( i ) ;
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_VAR 0 2
13186: PPUSH
13187: CALL_OW 255
13191: ST_TO_ADDR
// if j = 8 then
13192: LD_VAR 0 3
13196: PUSH
13197: LD_INT 8
13199: EQUAL
13200: IFFALSE 13212
// j := 0 else
13202: LD_ADDR_VAR 0 3
13206: PUSH
13207: LD_INT 0
13209: ST_TO_ADDR
13210: GO 13226
// j := j + 1 ;
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 1
13224: PLUS
13225: ST_TO_ADDR
// SetSide ( i , j ) ;
13226: LD_VAR 0 2
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: CALL_OW 235
// end ;
13240: GO 13163
13242: POP
13243: POP
// end ;
13244: LD_VAR 0 1
13248: RET
// export function hHackFog ; begin
13249: LD_INT 0
13251: PPUSH
// FogOff ( true ) ;
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 344
// end ;
13259: LD_VAR 0 1
13263: RET
// export function hHackTeleport ( unit , x , y ) ; begin
13264: LD_INT 0
13266: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
13267: LD_VAR 0 1
13271: PPUSH
13272: LD_VAR 0 2
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 483
// CenterOnXY ( x , y ) ;
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: CALL_OW 84
// end ; end_of_file
13306: LD_VAR 0 4
13310: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
13311: LD_VAR 0 1
13315: PUSH
13316: LD_INT 200
13318: DOUBLE
13319: GREATEREQUAL
13320: IFFALSE 13328
13322: LD_INT 299
13324: DOUBLE
13325: LESSEQUAL
13326: IFTRUE 13330
13328: GO 13362
13330: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
13331: LD_VAR 0 1
13335: PPUSH
13336: LD_VAR 0 2
13340: PPUSH
13341: LD_VAR 0 3
13345: PPUSH
13346: LD_VAR 0 4
13350: PPUSH
13351: LD_VAR 0 5
13355: PPUSH
13356: CALL 13556 0 5
13360: GO 13439
13362: LD_INT 300
13364: DOUBLE
13365: GREATEREQUAL
13366: IFFALSE 13374
13368: LD_INT 399
13370: DOUBLE
13371: LESSEQUAL
13372: IFTRUE 13376
13374: GO 13438
13376: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
13377: LD_VAR 0 1
13381: PPUSH
13382: LD_VAR 0 2
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: LD_VAR 0 4
13396: PPUSH
13397: LD_VAR 0 5
13401: PPUSH
13402: LD_VAR 0 6
13406: PPUSH
13407: LD_VAR 0 7
13411: PPUSH
13412: LD_VAR 0 8
13416: PPUSH
13417: LD_VAR 0 9
13421: PPUSH
13422: LD_VAR 0 10
13426: PPUSH
13427: LD_VAR 0 11
13431: PPUSH
13432: CALL 11331 0 11
13436: GO 13439
13438: POP
// end ; end_of_file
13439: PPOPN 11
13441: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13442: LD_INT 0
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 264
13457: PUSH
13458: LD_EXP 5
13462: EQUAL
13463: IFFALSE 13535
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13465: LD_INT 68
13467: PPUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: CALL_OW 255
13477: PPUSH
13478: CALL_OW 321
13482: PUSH
13483: LD_INT 2
13485: EQUAL
13486: IFFALSE 13498
// eff := 70 else
13488: LD_ADDR_VAR 0 4
13492: PUSH
13493: LD_INT 70
13495: ST_TO_ADDR
13496: GO 13506
// eff := 30 ;
13498: LD_ADDR_VAR 0 4
13502: PUSH
13503: LD_INT 30
13505: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 250
13515: PPUSH
13516: LD_VAR 0 1
13520: PPUSH
13521: CALL_OW 251
13525: PPUSH
13526: LD_VAR 0 4
13530: PPUSH
13531: CALL_OW 495
// end ; end ;
13535: LD_VAR 0 2
13539: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13540: LD_INT 0
13542: PPUSH
// end ;
13543: LD_VAR 0 4
13547: RET
// export function SOS_Command ( cmd ) ; begin
13548: LD_INT 0
13550: PPUSH
// end ;
13551: LD_VAR 0 2
13555: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13556: LD_INT 0
13558: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13559: LD_VAR 0 1
13563: PUSH
13564: LD_INT 250
13566: EQUAL
13567: PUSH
13568: LD_VAR 0 2
13572: PPUSH
13573: CALL_OW 264
13577: PUSH
13578: LD_EXP 8
13582: EQUAL
13583: AND
13584: IFFALSE 13605
// MinerPlaceMine ( unit , x , y ) ;
13586: LD_VAR 0 2
13590: PPUSH
13591: LD_VAR 0 4
13595: PPUSH
13596: LD_VAR 0 5
13600: PPUSH
13601: CALL 15902 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 251
13612: EQUAL
13613: PUSH
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 264
13623: PUSH
13624: LD_EXP 8
13628: EQUAL
13629: AND
13630: IFFALSE 13651
// MinerDetoneMine ( unit , x , y ) ;
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_VAR 0 4
13641: PPUSH
13642: LD_VAR 0 5
13646: PPUSH
13647: CALL 16179 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
13651: LD_VAR 0 1
13655: PUSH
13656: LD_INT 252
13658: EQUAL
13659: PUSH
13660: LD_VAR 0 2
13664: PPUSH
13665: CALL_OW 264
13669: PUSH
13670: LD_EXP 8
13674: EQUAL
13675: AND
13676: IFFALSE 13697
// MinerCreateMinefield ( unit , x , y ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_VAR 0 4
13687: PPUSH
13688: LD_VAR 0 5
13692: PPUSH
13693: CALL 16405 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13697: LD_VAR 0 1
13701: PUSH
13702: LD_INT 254
13704: EQUAL
13705: PUSH
13706: LD_VAR 0 2
13710: PPUSH
13711: CALL_OW 264
13715: PUSH
13716: LD_EXP 3
13720: EQUAL
13721: AND
13722: PUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: CALL_OW 263
13732: PUSH
13733: LD_INT 3
13735: EQUAL
13736: AND
13737: IFFALSE 13753
// HackDestroyVehicle ( unit , selectedUnit ) ;
13739: LD_VAR 0 2
13743: PPUSH
13744: LD_VAR 0 3
13748: PPUSH
13749: CALL 15262 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 255
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PPUSH
13767: CALL_OW 264
13771: PUSH
13772: LD_INT 14
13774: PUSH
13775: LD_INT 53
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: IN
13782: AND
13783: PUSH
13784: LD_VAR 0 4
13788: PPUSH
13789: LD_VAR 0 5
13793: PPUSH
13794: CALL_OW 488
13798: AND
13799: IFFALSE 13823
// CutTreeXYR ( unit , x , y , 12 ) ;
13801: LD_VAR 0 2
13805: PPUSH
13806: LD_VAR 0 4
13810: PPUSH
13811: LD_VAR 0 5
13815: PPUSH
13816: LD_INT 12
13818: PPUSH
13819: CALL 13828 0 4
// end ;
13823: LD_VAR 0 6
13827: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13828: LD_INT 0
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13839: LD_VAR 0 1
13843: NOT
13844: PUSH
13845: LD_VAR 0 2
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: CALL_OW 488
13859: NOT
13860: OR
13861: PUSH
13862: LD_VAR 0 4
13866: NOT
13867: OR
13868: IFFALSE 13872
// exit ;
13870: GO 14212
// list := [ ] ;
13872: LD_ADDR_VAR 0 13
13876: PUSH
13877: EMPTY
13878: ST_TO_ADDR
// if x - r < 0 then
13879: LD_VAR 0 2
13883: PUSH
13884: LD_VAR 0 4
13888: MINUS
13889: PUSH
13890: LD_INT 0
13892: LESS
13893: IFFALSE 13905
// min_x := 0 else
13895: LD_ADDR_VAR 0 7
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
13903: GO 13921
// min_x := x - r ;
13905: LD_ADDR_VAR 0 7
13909: PUSH
13910: LD_VAR 0 2
13914: PUSH
13915: LD_VAR 0 4
13919: MINUS
13920: ST_TO_ADDR
// if y - r < 0 then
13921: LD_VAR 0 3
13925: PUSH
13926: LD_VAR 0 4
13930: MINUS
13931: PUSH
13932: LD_INT 0
13934: LESS
13935: IFFALSE 13947
// min_y := 0 else
13937: LD_ADDR_VAR 0 8
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
13945: GO 13963
// min_y := y - r ;
13947: LD_ADDR_VAR 0 8
13951: PUSH
13952: LD_VAR 0 3
13956: PUSH
13957: LD_VAR 0 4
13961: MINUS
13962: ST_TO_ADDR
// max_x := x + r ;
13963: LD_ADDR_VAR 0 9
13967: PUSH
13968: LD_VAR 0 2
13972: PUSH
13973: LD_VAR 0 4
13977: PLUS
13978: ST_TO_ADDR
// max_y := y + r ;
13979: LD_ADDR_VAR 0 10
13983: PUSH
13984: LD_VAR 0 3
13988: PUSH
13989: LD_VAR 0 4
13993: PLUS
13994: ST_TO_ADDR
// for _x = min_x to max_x do
13995: LD_ADDR_VAR 0 11
13999: PUSH
14000: DOUBLE
14001: LD_VAR 0 7
14005: DEC
14006: ST_TO_ADDR
14007: LD_VAR 0 9
14011: PUSH
14012: FOR_TO
14013: IFFALSE 14130
// for _y = min_y to max_y do
14015: LD_ADDR_VAR 0 12
14019: PUSH
14020: DOUBLE
14021: LD_VAR 0 8
14025: DEC
14026: ST_TO_ADDR
14027: LD_VAR 0 10
14031: PUSH
14032: FOR_TO
14033: IFFALSE 14126
// begin if not ValidHex ( _x , _y ) then
14035: LD_VAR 0 11
14039: PPUSH
14040: LD_VAR 0 12
14044: PPUSH
14045: CALL_OW 488
14049: NOT
14050: IFFALSE 14054
// continue ;
14052: GO 14032
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14054: LD_VAR 0 11
14058: PPUSH
14059: LD_VAR 0 12
14063: PPUSH
14064: CALL_OW 351
14068: PUSH
14069: LD_VAR 0 11
14073: PPUSH
14074: LD_VAR 0 12
14078: PPUSH
14079: CALL_OW 554
14083: AND
14084: IFFALSE 14124
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14086: LD_ADDR_VAR 0 13
14090: PUSH
14091: LD_VAR 0 13
14095: PPUSH
14096: LD_VAR 0 13
14100: PUSH
14101: LD_INT 1
14103: PLUS
14104: PPUSH
14105: LD_VAR 0 11
14109: PUSH
14110: LD_VAR 0 12
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 2
14123: ST_TO_ADDR
// end ;
14124: GO 14032
14126: POP
14127: POP
14128: GO 14012
14130: POP
14131: POP
// if not list then
14132: LD_VAR 0 13
14136: NOT
14137: IFFALSE 14141
// exit ;
14139: GO 14212
// for i in list do
14141: LD_ADDR_VAR 0 6
14145: PUSH
14146: LD_VAR 0 13
14150: PUSH
14151: FOR_IN
14152: IFFALSE 14210
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: LD_STRING M
14161: PUSH
14162: LD_VAR 0 6
14166: PUSH
14167: LD_INT 1
14169: ARRAY
14170: PUSH
14171: LD_VAR 0 6
14175: PUSH
14176: LD_INT 2
14178: ARRAY
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: LD_INT 0
14185: PUSH
14186: LD_INT 0
14188: PUSH
14189: LD_INT 0
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: PUSH
14201: EMPTY
14202: LIST
14203: PPUSH
14204: CALL_OW 447
14208: GO 14151
14210: POP
14211: POP
// end ;
14212: LD_VAR 0 5
14216: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14217: LD_EXP 72
14221: NOT
14222: IFFALSE 14272
14224: GO 14226
14226: DISABLE
// begin initHack := true ;
14227: LD_ADDR_EXP 72
14231: PUSH
14232: LD_INT 1
14234: ST_TO_ADDR
// hackTanks := [ ] ;
14235: LD_ADDR_EXP 73
14239: PUSH
14240: EMPTY
14241: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14242: LD_ADDR_EXP 74
14246: PUSH
14247: EMPTY
14248: ST_TO_ADDR
// hackLimit := 3 ;
14249: LD_ADDR_EXP 75
14253: PUSH
14254: LD_INT 3
14256: ST_TO_ADDR
// hackDist := 12 ;
14257: LD_ADDR_EXP 76
14261: PUSH
14262: LD_INT 12
14264: ST_TO_ADDR
// hackCounter := [ ] ;
14265: LD_ADDR_EXP 77
14269: PUSH
14270: EMPTY
14271: ST_TO_ADDR
// end ;
14272: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14273: LD_EXP 72
14277: PUSH
14278: LD_INT 34
14280: PUSH
14281: LD_EXP 3
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 69
14294: AND
14295: IFFALSE 14550
14297: GO 14299
14299: DISABLE
14300: LD_INT 0
14302: PPUSH
14303: PPUSH
// begin enable ;
14304: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14305: LD_ADDR_VAR 0 1
14309: PUSH
14310: LD_INT 34
14312: PUSH
14313: LD_EXP 3
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PPUSH
14322: CALL_OW 69
14326: PUSH
14327: FOR_IN
14328: IFFALSE 14548
// begin if not i in hackTanks then
14330: LD_VAR 0 1
14334: PUSH
14335: LD_EXP 73
14339: IN
14340: NOT
14341: IFFALSE 14424
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14343: LD_ADDR_EXP 73
14347: PUSH
14348: LD_EXP 73
14352: PPUSH
14353: LD_EXP 73
14357: PUSH
14358: LD_INT 1
14360: PLUS
14361: PPUSH
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 1
14371: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14372: LD_ADDR_EXP 74
14376: PUSH
14377: LD_EXP 74
14381: PPUSH
14382: LD_EXP 74
14386: PUSH
14387: LD_INT 1
14389: PLUS
14390: PPUSH
14391: EMPTY
14392: PPUSH
14393: CALL_OW 1
14397: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14398: LD_ADDR_EXP 77
14402: PUSH
14403: LD_EXP 77
14407: PPUSH
14408: LD_EXP 77
14412: PUSH
14413: LD_INT 1
14415: PLUS
14416: PPUSH
14417: EMPTY
14418: PPUSH
14419: CALL_OW 1
14423: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 302
14433: NOT
14434: IFFALSE 14447
// begin HackUnlinkAll ( i ) ;
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL 14553 0 1
// continue ;
14445: GO 14327
// end ; HackCheckCapturedStatus ( i ) ;
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL 14996 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14456: LD_ADDR_VAR 0 2
14460: PUSH
14461: LD_INT 81
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 255
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 33
14480: PUSH
14481: LD_INT 3
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 91
14490: PUSH
14491: LD_VAR 0 1
14495: PUSH
14496: LD_EXP 76
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 50
14508: PUSH
14509: EMPTY
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: ST_TO_ADDR
// if not tmp then
14523: LD_VAR 0 2
14527: NOT
14528: IFFALSE 14532
// continue ;
14530: GO 14327
// HackLink ( i , tmp ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_VAR 0 2
14541: PPUSH
14542: CALL 14689 0 2
// end ;
14546: GO 14327
14548: POP
14549: POP
// end ;
14550: PPOPN 2
14552: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14553: LD_INT 0
14555: PPUSH
14556: PPUSH
14557: PPUSH
// if not hack in hackTanks then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_EXP 73
14567: IN
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14684
// index := GetElementIndex ( hackTanks , hack ) ;
14573: LD_ADDR_VAR 0 4
14577: PUSH
14578: LD_EXP 73
14582: PPUSH
14583: LD_VAR 0 1
14587: PPUSH
14588: CALL 21507 0 2
14592: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14593: LD_EXP 74
14597: PUSH
14598: LD_VAR 0 4
14602: ARRAY
14603: IFFALSE 14684
// begin for i in hackTanksCaptured [ index ] do
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_EXP 74
14614: PUSH
14615: LD_VAR 0 4
14619: ARRAY
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14648
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14624: LD_VAR 0 3
14628: PUSH
14629: LD_INT 1
14631: ARRAY
14632: PPUSH
14633: LD_VAR 0 3
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PPUSH
14642: CALL_OW 235
14646: GO 14621
14648: POP
14649: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14650: LD_ADDR_EXP 74
14654: PUSH
14655: LD_EXP 74
14659: PPUSH
14660: LD_VAR 0 4
14664: PPUSH
14665: EMPTY
14666: PPUSH
14667: CALL_OW 1
14671: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14672: LD_VAR 0 1
14676: PPUSH
14677: LD_INT 0
14679: PPUSH
14680: CALL_OW 505
// end ; end ;
14684: LD_VAR 0 2
14688: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14689: LD_INT 0
14691: PPUSH
14692: PPUSH
14693: PPUSH
// if not hack in hackTanks or not vehicles then
14694: LD_VAR 0 1
14698: PUSH
14699: LD_EXP 73
14703: IN
14704: NOT
14705: PUSH
14706: LD_VAR 0 2
14710: NOT
14711: OR
14712: IFFALSE 14716
// exit ;
14714: GO 14991
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: LD_VAR 0 2
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_INT 1
14736: PPUSH
14737: CALL 22157 0 4
14741: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14742: LD_ADDR_VAR 0 5
14746: PUSH
14747: LD_EXP 73
14751: PPUSH
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL 21507 0 2
14761: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14762: LD_EXP 74
14766: PUSH
14767: LD_VAR 0 5
14771: ARRAY
14772: PUSH
14773: LD_EXP 75
14777: LESS
14778: IFFALSE 14967
// begin for i := 1 to vehicles do
14780: LD_ADDR_VAR 0 4
14784: PUSH
14785: DOUBLE
14786: LD_INT 1
14788: DEC
14789: ST_TO_ADDR
14790: LD_VAR 0 2
14794: PUSH
14795: FOR_TO
14796: IFFALSE 14965
// begin if hackTanksCaptured [ index ] = hackLimit then
14798: LD_EXP 74
14802: PUSH
14803: LD_VAR 0 5
14807: ARRAY
14808: PUSH
14809: LD_EXP 75
14813: EQUAL
14814: IFFALSE 14818
// break ;
14816: GO 14965
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14818: LD_ADDR_EXP 77
14822: PUSH
14823: LD_EXP 77
14827: PPUSH
14828: LD_VAR 0 5
14832: PPUSH
14833: LD_EXP 77
14837: PUSH
14838: LD_VAR 0 5
14842: ARRAY
14843: PUSH
14844: LD_INT 1
14846: PLUS
14847: PPUSH
14848: CALL_OW 1
14852: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14853: LD_ADDR_EXP 74
14857: PUSH
14858: LD_EXP 74
14862: PPUSH
14863: LD_VAR 0 5
14867: PUSH
14868: LD_EXP 74
14872: PUSH
14873: LD_VAR 0 5
14877: ARRAY
14878: PUSH
14879: LD_INT 1
14881: PLUS
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: LD_VAR 0 2
14891: PUSH
14892: LD_VAR 0 4
14896: ARRAY
14897: PUSH
14898: LD_VAR 0 2
14902: PUSH
14903: LD_VAR 0 4
14907: ARRAY
14908: PPUSH
14909: CALL_OW 255
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PPUSH
14918: CALL 21722 0 3
14922: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14923: LD_VAR 0 2
14927: PUSH
14928: LD_VAR 0 4
14932: ARRAY
14933: PPUSH
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 255
14943: PPUSH
14944: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
14948: LD_VAR 0 2
14952: PUSH
14953: LD_VAR 0 4
14957: ARRAY
14958: PPUSH
14959: CALL_OW 141
// end ;
14963: GO 14795
14965: POP
14966: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_EXP 74
14976: PUSH
14977: LD_VAR 0 5
14981: ARRAY
14982: PUSH
14983: LD_INT 0
14985: PLUS
14986: PPUSH
14987: CALL_OW 505
// end ;
14991: LD_VAR 0 3
14995: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
14996: LD_INT 0
14998: PPUSH
14999: PPUSH
15000: PPUSH
15001: PPUSH
// if not hack in hackTanks then
15002: LD_VAR 0 1
15006: PUSH
15007: LD_EXP 73
15011: IN
15012: NOT
15013: IFFALSE 15017
// exit ;
15015: GO 15257
// index := GetElementIndex ( hackTanks , hack ) ;
15017: LD_ADDR_VAR 0 4
15021: PUSH
15022: LD_EXP 73
15026: PPUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: CALL 21507 0 2
15036: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: DOUBLE
15043: LD_EXP 74
15047: PUSH
15048: LD_VAR 0 4
15052: ARRAY
15053: INC
15054: ST_TO_ADDR
15055: LD_INT 1
15057: PUSH
15058: FOR_DOWNTO
15059: IFFALSE 15231
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15061: LD_ADDR_VAR 0 5
15065: PUSH
15066: LD_EXP 74
15070: PUSH
15071: LD_VAR 0 4
15075: ARRAY
15076: PUSH
15077: LD_VAR 0 3
15081: ARRAY
15082: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15083: LD_VAR 0 5
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: CALL_OW 302
15096: NOT
15097: PUSH
15098: LD_VAR 0 5
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PPUSH
15107: CALL_OW 255
15111: PUSH
15112: LD_VAR 0 1
15116: PPUSH
15117: CALL_OW 255
15121: NONEQUAL
15122: OR
15123: IFFALSE 15229
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15125: LD_VAR 0 5
15129: PUSH
15130: LD_INT 1
15132: ARRAY
15133: PPUSH
15134: CALL_OW 305
15138: PUSH
15139: LD_VAR 0 5
15143: PUSH
15144: LD_INT 1
15146: ARRAY
15147: PPUSH
15148: CALL_OW 255
15152: PUSH
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL_OW 255
15162: EQUAL
15163: AND
15164: IFFALSE 15188
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15166: LD_VAR 0 5
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: PPUSH
15175: LD_VAR 0 5
15179: PUSH
15180: LD_INT 2
15182: ARRAY
15183: PPUSH
15184: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15188: LD_ADDR_EXP 74
15192: PUSH
15193: LD_EXP 74
15197: PPUSH
15198: LD_VAR 0 4
15202: PPUSH
15203: LD_EXP 74
15207: PUSH
15208: LD_VAR 0 4
15212: ARRAY
15213: PPUSH
15214: LD_VAR 0 3
15218: PPUSH
15219: CALL_OW 3
15223: PPUSH
15224: CALL_OW 1
15228: ST_TO_ADDR
// end ; end ;
15229: GO 15058
15231: POP
15232: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15233: LD_VAR 0 1
15237: PPUSH
15238: LD_EXP 74
15242: PUSH
15243: LD_VAR 0 4
15247: ARRAY
15248: PUSH
15249: LD_INT 0
15251: PLUS
15252: PPUSH
15253: CALL_OW 505
// end ;
15257: LD_VAR 0 2
15261: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
// if not hack in hackTanks then
15268: LD_VAR 0 1
15272: PUSH
15273: LD_EXP 73
15277: IN
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15368
// index := GetElementIndex ( hackTanks , hack ) ;
15283: LD_ADDR_VAR 0 5
15287: PUSH
15288: LD_EXP 73
15292: PPUSH
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL 21507 0 2
15302: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15303: LD_ADDR_VAR 0 4
15307: PUSH
15308: DOUBLE
15309: LD_INT 1
15311: DEC
15312: ST_TO_ADDR
15313: LD_EXP 74
15317: PUSH
15318: LD_VAR 0 5
15322: ARRAY
15323: PUSH
15324: FOR_TO
15325: IFFALSE 15366
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15327: LD_EXP 74
15331: PUSH
15332: LD_VAR 0 5
15336: ARRAY
15337: PUSH
15338: LD_VAR 0 4
15342: ARRAY
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PUSH
15348: LD_VAR 0 2
15352: EQUAL
15353: IFFALSE 15364
// KillUnit ( vehicle ) ;
15355: LD_VAR 0 2
15359: PPUSH
15360: CALL_OW 66
15364: GO 15324
15366: POP
15367: POP
// end ;
15368: LD_VAR 0 3
15372: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15373: LD_EXP 78
15377: NOT
15378: IFFALSE 15413
15380: GO 15382
15382: DISABLE
// begin initMiner := true ;
15383: LD_ADDR_EXP 78
15387: PUSH
15388: LD_INT 1
15390: ST_TO_ADDR
// minersList := [ ] ;
15391: LD_ADDR_EXP 79
15395: PUSH
15396: EMPTY
15397: ST_TO_ADDR
// minerMinesList := [ ] ;
15398: LD_ADDR_EXP 80
15402: PUSH
15403: EMPTY
15404: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15405: LD_ADDR_EXP 81
15409: PUSH
15410: LD_INT 5
15412: ST_TO_ADDR
// end ;
15413: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15414: LD_EXP 78
15418: PUSH
15419: LD_INT 34
15421: PUSH
15422: LD_EXP 8
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PPUSH
15431: CALL_OW 69
15435: AND
15436: IFFALSE 15899
15438: GO 15440
15440: DISABLE
15441: LD_INT 0
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
// begin enable ;
15447: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15448: LD_ADDR_VAR 0 1
15452: PUSH
15453: LD_INT 34
15455: PUSH
15456: LD_EXP 8
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PPUSH
15465: CALL_OW 69
15469: PUSH
15470: FOR_IN
15471: IFFALSE 15543
// begin if not i in minersList then
15473: LD_VAR 0 1
15477: PUSH
15478: LD_EXP 79
15482: IN
15483: NOT
15484: IFFALSE 15541
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15486: LD_ADDR_EXP 79
15490: PUSH
15491: LD_EXP 79
15495: PPUSH
15496: LD_EXP 79
15500: PUSH
15501: LD_INT 1
15503: PLUS
15504: PPUSH
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 1
15514: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15515: LD_ADDR_EXP 80
15519: PUSH
15520: LD_EXP 80
15524: PPUSH
15525: LD_EXP 80
15529: PUSH
15530: LD_INT 1
15532: PLUS
15533: PPUSH
15534: EMPTY
15535: PPUSH
15536: CALL_OW 1
15540: ST_TO_ADDR
// end end ;
15541: GO 15470
15543: POP
15544: POP
// for i := 1 to minerMinesList do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: DOUBLE
15551: LD_INT 1
15553: DEC
15554: ST_TO_ADDR
15555: LD_EXP 80
15559: PUSH
15560: FOR_TO
15561: IFFALSE 15897
// begin if IsLive ( minersList [ i ] ) then
15563: LD_EXP 79
15567: PUSH
15568: LD_VAR 0 1
15572: ARRAY
15573: PPUSH
15574: CALL_OW 300
15578: IFFALSE 15606
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
15580: LD_EXP 79
15584: PUSH
15585: LD_VAR 0 1
15589: ARRAY
15590: PPUSH
15591: LD_EXP 80
15595: PUSH
15596: LD_VAR 0 1
15600: ARRAY
15601: PPUSH
15602: CALL_OW 505
// if not minerMinesList [ i ] then
15606: LD_EXP 80
15610: PUSH
15611: LD_VAR 0 1
15615: ARRAY
15616: NOT
15617: IFFALSE 15621
// continue ;
15619: GO 15560
// for j := 1 to minerMinesList [ i ] do
15621: LD_ADDR_VAR 0 2
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_EXP 80
15635: PUSH
15636: LD_VAR 0 1
15640: ARRAY
15641: PUSH
15642: FOR_TO
15643: IFFALSE 15893
// begin side := GetSide ( minersList [ i ] ) ;
15645: LD_ADDR_VAR 0 3
15649: PUSH
15650: LD_EXP 79
15654: PUSH
15655: LD_VAR 0 1
15659: ARRAY
15660: PPUSH
15661: CALL_OW 255
15665: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
15666: LD_ADDR_VAR 0 4
15670: PUSH
15671: LD_EXP 80
15675: PUSH
15676: LD_VAR 0 1
15680: ARRAY
15681: PUSH
15682: LD_VAR 0 2
15686: ARRAY
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: LD_EXP 80
15696: PUSH
15697: LD_VAR 0 1
15701: ARRAY
15702: PUSH
15703: LD_VAR 0 2
15707: ARRAY
15708: PUSH
15709: LD_INT 2
15711: ARRAY
15712: PPUSH
15713: CALL_OW 428
15717: ST_TO_ADDR
// if not tmp then
15718: LD_VAR 0 4
15722: NOT
15723: IFFALSE 15727
// continue ;
15725: GO 15642
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
15727: LD_VAR 0 4
15731: PUSH
15732: LD_INT 81
15734: PUSH
15735: LD_VAR 0 3
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PPUSH
15744: CALL_OW 69
15748: IN
15749: PUSH
15750: LD_EXP 80
15754: PUSH
15755: LD_VAR 0 1
15759: ARRAY
15760: PUSH
15761: LD_VAR 0 2
15765: ARRAY
15766: PUSH
15767: LD_INT 1
15769: ARRAY
15770: PPUSH
15771: LD_EXP 80
15775: PUSH
15776: LD_VAR 0 1
15780: ARRAY
15781: PUSH
15782: LD_VAR 0 2
15786: ARRAY
15787: PUSH
15788: LD_INT 2
15790: ARRAY
15791: PPUSH
15792: CALL_OW 458
15796: AND
15797: IFFALSE 15891
// begin LaunchMineAtPos ( minersList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
15799: LD_EXP 79
15803: PUSH
15804: LD_VAR 0 1
15808: ARRAY
15809: PUSH
15810: LD_VAR 0 2
15814: ARRAY
15815: PUSH
15816: LD_INT 1
15818: ARRAY
15819: PPUSH
15820: LD_EXP 80
15824: PUSH
15825: LD_VAR 0 1
15829: ARRAY
15830: PUSH
15831: LD_VAR 0 2
15835: ARRAY
15836: PUSH
15837: LD_INT 2
15839: ARRAY
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
15850: LD_ADDR_EXP 80
15854: PUSH
15855: LD_EXP 80
15859: PPUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: LD_EXP 80
15869: PUSH
15870: LD_VAR 0 1
15874: ARRAY
15875: PPUSH
15876: LD_VAR 0 2
15880: PPUSH
15881: CALL_OW 3
15885: PPUSH
15886: CALL_OW 1
15890: ST_TO_ADDR
// end ; end ;
15891: GO 15642
15893: POP
15894: POP
// end ;
15895: GO 15560
15897: POP
15898: POP
// end ;
15899: PPOPN 4
15901: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15902: LD_INT 0
15904: PPUSH
15905: PPUSH
// result := false ;
15906: LD_ADDR_VAR 0 4
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 264
15923: PUSH
15924: LD_EXP 8
15928: EQUAL
15929: NOT
15930: IFFALSE 15934
// exit ;
15932: GO 16174
// index := GetElementIndex ( minersList , unit ) ;
15934: LD_ADDR_VAR 0 5
15938: PUSH
15939: LD_EXP 79
15943: PPUSH
15944: LD_VAR 0 1
15948: PPUSH
15949: CALL 21507 0 2
15953: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
15954: LD_EXP 80
15958: PUSH
15959: LD_VAR 0 5
15963: ARRAY
15964: PUSH
15965: LD_EXP 81
15969: GREATEREQUAL
15970: IFFALSE 15974
// exit ;
15972: GO 16174
// ComMoveXY ( unit , x , y ) ;
15974: LD_VAR 0 1
15978: PPUSH
15979: LD_VAR 0 2
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15993: LD_INT 35
15995: PPUSH
15996: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16000: LD_VAR 0 1
16004: PPUSH
16005: LD_VAR 0 2
16009: PPUSH
16010: LD_VAR 0 3
16014: PPUSH
16015: CALL 51571 0 3
16019: NOT
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 314
16030: AND
16031: IFFALSE 16035
// exit ;
16033: GO 16174
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16035: LD_VAR 0 2
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: CALL_OW 428
16049: PUSH
16050: LD_VAR 0 1
16054: EQUAL
16055: PUSH
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 314
16065: NOT
16066: AND
16067: IFFALSE 15993
// PlaySoundXY ( x , y , PlantMine ) ;
16069: LD_VAR 0 2
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_STRING PlantMine
16081: PPUSH
16082: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16086: LD_VAR 0 2
16090: PPUSH
16091: LD_VAR 0 3
16095: PPUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 255
16105: PPUSH
16106: LD_INT 0
16108: PPUSH
16109: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16113: LD_ADDR_EXP 80
16117: PUSH
16118: LD_EXP 80
16122: PPUSH
16123: LD_VAR 0 5
16127: PUSH
16128: LD_EXP 80
16132: PUSH
16133: LD_VAR 0 5
16137: ARRAY
16138: PUSH
16139: LD_INT 1
16141: PLUS
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PPUSH
16147: LD_VAR 0 2
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PPUSH
16161: CALL 21722 0 3
16165: ST_TO_ADDR
// result := true ;
16166: LD_ADDR_VAR 0 4
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// end ;
16174: LD_VAR 0 4
16178: RET
// export function MinerDetoneMine ( unit , x , y ) ; var i , index ; begin
16179: LD_INT 0
16181: PPUSH
16182: PPUSH
16183: PPUSH
// if not unit in minersList then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_EXP 79
16193: IN
16194: NOT
16195: IFFALSE 16199
// exit ;
16197: GO 16400
// index := GetElementIndex ( minersList , unit ) ;
16199: LD_ADDR_VAR 0 6
16203: PUSH
16204: LD_EXP 79
16208: PPUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL 21507 0 2
16218: ST_TO_ADDR
// for i := 1 to minerMinesList [ index ] do
16219: LD_ADDR_VAR 0 5
16223: PUSH
16224: DOUBLE
16225: LD_INT 1
16227: DEC
16228: ST_TO_ADDR
16229: LD_EXP 80
16233: PUSH
16234: LD_VAR 0 6
16238: ARRAY
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16398
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16243: LD_EXP 80
16247: PUSH
16248: LD_VAR 0 6
16252: ARRAY
16253: PUSH
16254: LD_VAR 0 5
16258: ARRAY
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PUSH
16264: LD_VAR 0 2
16268: EQUAL
16269: PUSH
16270: LD_EXP 80
16274: PUSH
16275: LD_VAR 0 6
16279: ARRAY
16280: PUSH
16281: LD_VAR 0 5
16285: ARRAY
16286: PUSH
16287: LD_INT 2
16289: ARRAY
16290: PUSH
16291: LD_VAR 0 3
16295: EQUAL
16296: AND
16297: IFFALSE 16396
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16299: LD_EXP 80
16303: PUSH
16304: LD_VAR 0 6
16308: ARRAY
16309: PUSH
16310: LD_VAR 0 5
16314: ARRAY
16315: PUSH
16316: LD_INT 1
16318: ARRAY
16319: PPUSH
16320: LD_EXP 80
16324: PUSH
16325: LD_VAR 0 6
16329: ARRAY
16330: PUSH
16331: LD_VAR 0 5
16335: ARRAY
16336: PUSH
16337: LD_INT 2
16339: ARRAY
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 255
16350: PPUSH
16351: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16355: LD_ADDR_EXP 80
16359: PUSH
16360: LD_EXP 80
16364: PPUSH
16365: LD_VAR 0 6
16369: PPUSH
16370: LD_EXP 80
16374: PUSH
16375: LD_VAR 0 6
16379: ARRAY
16380: PPUSH
16381: LD_VAR 0 5
16385: PPUSH
16386: CALL_OW 3
16390: PPUSH
16391: CALL_OW 1
16395: ST_TO_ADDR
// end ; end ;
16396: GO 16240
16398: POP
16399: POP
// end ;
16400: LD_VAR 0 4
16404: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
16405: LD_INT 0
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 264
16425: PUSH
16426: LD_EXP 8
16430: EQUAL
16431: NOT
16432: PUSH
16433: LD_VAR 0 1
16437: PUSH
16438: LD_EXP 79
16442: IN
16443: NOT
16444: OR
16445: IFFALSE 16449
// exit ;
16447: GO 16771
// index := GetElementIndex ( minersList , unit ) ;
16449: LD_ADDR_VAR 0 6
16453: PUSH
16454: LD_EXP 79
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL 21507 0 2
16468: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
16469: LD_ADDR_VAR 0 8
16473: PUSH
16474: LD_EXP 81
16478: PUSH
16479: LD_EXP 80
16483: PUSH
16484: LD_VAR 0 6
16488: ARRAY
16489: MINUS
16490: ST_TO_ADDR
// if not minesFreeAmount then
16491: LD_VAR 0 8
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16771
// tmp := [ ] ;
16500: LD_ADDR_VAR 0 7
16504: PUSH
16505: EMPTY
16506: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
16507: LD_ADDR_VAR 0 5
16511: PUSH
16512: DOUBLE
16513: LD_INT 1
16515: DEC
16516: ST_TO_ADDR
16517: LD_VAR 0 8
16521: PUSH
16522: FOR_TO
16523: IFFALSE 16718
// begin _d := rand ( 0 , 5 ) ;
16525: LD_ADDR_VAR 0 11
16529: PUSH
16530: LD_INT 0
16532: PPUSH
16533: LD_INT 5
16535: PPUSH
16536: CALL_OW 12
16540: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
16541: LD_ADDR_VAR 0 12
16545: PUSH
16546: LD_INT 2
16548: PPUSH
16549: LD_INT 6
16551: PPUSH
16552: CALL_OW 12
16556: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
16557: LD_ADDR_VAR 0 9
16561: PUSH
16562: LD_VAR 0 2
16566: PPUSH
16567: LD_VAR 0 11
16571: PPUSH
16572: LD_VAR 0 12
16576: PPUSH
16577: CALL_OW 272
16581: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
16582: LD_ADDR_VAR 0 10
16586: PUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_VAR 0 11
16596: PPUSH
16597: LD_VAR 0 12
16601: PPUSH
16602: CALL_OW 273
16606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
16607: LD_VAR 0 9
16611: PPUSH
16612: LD_VAR 0 10
16616: PPUSH
16617: CALL_OW 488
16621: PUSH
16622: LD_VAR 0 9
16626: PUSH
16627: LD_VAR 0 10
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_VAR 0 7
16640: IN
16641: NOT
16642: AND
16643: PUSH
16644: LD_VAR 0 9
16648: PPUSH
16649: LD_VAR 0 10
16653: PPUSH
16654: CALL_OW 458
16658: NOT
16659: AND
16660: IFFALSE 16702
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
16662: LD_ADDR_VAR 0 7
16666: PUSH
16667: LD_VAR 0 7
16671: PPUSH
16672: LD_VAR 0 7
16676: PUSH
16677: LD_INT 1
16679: PLUS
16680: PPUSH
16681: LD_VAR 0 9
16685: PUSH
16686: LD_VAR 0 10
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PPUSH
16695: CALL_OW 1
16699: ST_TO_ADDR
16700: GO 16716
// i := i - 1 ;
16702: LD_ADDR_VAR 0 5
16706: PUSH
16707: LD_VAR 0 5
16711: PUSH
16712: LD_INT 1
16714: MINUS
16715: ST_TO_ADDR
// end ;
16716: GO 16522
16718: POP
16719: POP
// for i in tmp do
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_VAR 0 7
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16769
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
16733: LD_VAR 0 1
16737: PPUSH
16738: LD_VAR 0 5
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: LD_VAR 0 5
16751: PUSH
16752: LD_INT 2
16754: ARRAY
16755: PPUSH
16756: CALL 15902 0 3
16760: NOT
16761: IFFALSE 16767
// exit ;
16763: POP
16764: POP
16765: GO 16771
16767: GO 16730
16769: POP
16770: POP
// end ; end_of_file end_of_file
16771: LD_VAR 0 4
16775: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// if exist_mode then
16780: LD_VAR 0 2
16784: IFFALSE 16809
// unit := CreateCharacter ( prefix & ident ) else
16786: LD_ADDR_VAR 0 5
16790: PUSH
16791: LD_VAR 0 3
16795: PUSH
16796: LD_VAR 0 1
16800: STR
16801: PPUSH
16802: CALL_OW 34
16806: ST_TO_ADDR
16807: GO 16824
// unit := NewCharacter ( ident ) ;
16809: LD_ADDR_VAR 0 5
16813: PUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 25
16823: ST_TO_ADDR
// result := unit ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_VAR 0 5
16833: ST_TO_ADDR
// end ;
16834: LD_VAR 0 4
16838: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16839: LD_INT 0
16841: PPUSH
16842: PPUSH
// if not side or not nation then
16843: LD_VAR 0 1
16847: NOT
16848: PUSH
16849: LD_VAR 0 2
16853: NOT
16854: OR
16855: IFFALSE 16859
// exit ;
16857: GO 17623
// case nation of nation_american :
16859: LD_VAR 0 2
16863: PUSH
16864: LD_INT 1
16866: DOUBLE
16867: EQUAL
16868: IFTRUE 16872
16870: GO 17086
16872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_INT 35
16880: PUSH
16881: LD_INT 45
16883: PUSH
16884: LD_INT 46
16886: PUSH
16887: LD_INT 47
16889: PUSH
16890: LD_INT 82
16892: PUSH
16893: LD_INT 83
16895: PUSH
16896: LD_INT 84
16898: PUSH
16899: LD_INT 85
16901: PUSH
16902: LD_INT 86
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: LD_INT 2
16910: PUSH
16911: LD_INT 6
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 7
16922: PUSH
16923: LD_INT 12
16925: PUSH
16926: LD_INT 13
16928: PUSH
16929: LD_INT 10
16931: PUSH
16932: LD_INT 14
16934: PUSH
16935: LD_INT 20
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_INT 25
16946: PUSH
16947: LD_INT 32
16949: PUSH
16950: LD_INT 27
16952: PUSH
16953: LD_INT 36
16955: PUSH
16956: LD_INT 69
16958: PUSH
16959: LD_INT 39
16961: PUSH
16962: LD_INT 34
16964: PUSH
16965: LD_INT 40
16967: PUSH
16968: LD_INT 48
16970: PUSH
16971: LD_INT 49
16973: PUSH
16974: LD_INT 50
16976: PUSH
16977: LD_INT 51
16979: PUSH
16980: LD_INT 52
16982: PUSH
16983: LD_INT 53
16985: PUSH
16986: LD_INT 54
16988: PUSH
16989: LD_INT 55
16991: PUSH
16992: LD_INT 56
16994: PUSH
16995: LD_INT 57
16997: PUSH
16998: LD_INT 58
17000: PUSH
17001: LD_INT 59
17003: PUSH
17004: LD_INT 60
17006: PUSH
17007: LD_INT 61
17009: PUSH
17010: LD_INT 62
17012: PUSH
17013: LD_INT 80
17015: PUSH
17016: LD_INT 82
17018: PUSH
17019: LD_INT 83
17021: PUSH
17022: LD_INT 84
17024: PUSH
17025: LD_INT 85
17027: PUSH
17028: LD_INT 86
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: ST_TO_ADDR
17084: GO 17547
17086: LD_INT 2
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17316
17094: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
17095: LD_ADDR_VAR 0 4
17099: PUSH
17100: LD_INT 35
17102: PUSH
17103: LD_INT 45
17105: PUSH
17106: LD_INT 46
17108: PUSH
17109: LD_INT 47
17111: PUSH
17112: LD_INT 82
17114: PUSH
17115: LD_INT 83
17117: PUSH
17118: LD_INT 84
17120: PUSH
17121: LD_INT 85
17123: PUSH
17124: LD_INT 87
17126: PUSH
17127: LD_INT 70
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 11
17135: PUSH
17136: LD_INT 3
17138: PUSH
17139: LD_INT 4
17141: PUSH
17142: LD_INT 5
17144: PUSH
17145: LD_INT 6
17147: PUSH
17148: LD_INT 15
17150: PUSH
17151: LD_INT 18
17153: PUSH
17154: LD_INT 7
17156: PUSH
17157: LD_INT 17
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: LD_INT 20
17165: PUSH
17166: LD_INT 21
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_INT 72
17174: PUSH
17175: LD_INT 26
17177: PUSH
17178: LD_INT 69
17180: PUSH
17181: LD_INT 39
17183: PUSH
17184: LD_INT 40
17186: PUSH
17187: LD_INT 41
17189: PUSH
17190: LD_INT 42
17192: PUSH
17193: LD_INT 43
17195: PUSH
17196: LD_INT 48
17198: PUSH
17199: LD_INT 49
17201: PUSH
17202: LD_INT 50
17204: PUSH
17205: LD_INT 51
17207: PUSH
17208: LD_INT 52
17210: PUSH
17211: LD_INT 53
17213: PUSH
17214: LD_INT 54
17216: PUSH
17217: LD_INT 55
17219: PUSH
17220: LD_INT 56
17222: PUSH
17223: LD_INT 60
17225: PUSH
17226: LD_INT 61
17228: PUSH
17229: LD_INT 62
17231: PUSH
17232: LD_INT 66
17234: PUSH
17235: LD_INT 67
17237: PUSH
17238: LD_INT 68
17240: PUSH
17241: LD_INT 81
17243: PUSH
17244: LD_INT 82
17246: PUSH
17247: LD_INT 83
17249: PUSH
17250: LD_INT 84
17252: PUSH
17253: LD_INT 85
17255: PUSH
17256: LD_INT 87
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: ST_TO_ADDR
17314: GO 17547
17316: LD_INT 3
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17546
17324: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_INT 46
17332: PUSH
17333: LD_INT 47
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 82
17344: PUSH
17345: LD_INT 83
17347: PUSH
17348: LD_INT 84
17350: PUSH
17351: LD_INT 85
17353: PUSH
17354: LD_INT 86
17356: PUSH
17357: LD_INT 11
17359: PUSH
17360: LD_INT 9
17362: PUSH
17363: LD_INT 20
17365: PUSH
17366: LD_INT 19
17368: PUSH
17369: LD_INT 21
17371: PUSH
17372: LD_INT 24
17374: PUSH
17375: LD_INT 22
17377: PUSH
17378: LD_INT 25
17380: PUSH
17381: LD_INT 28
17383: PUSH
17384: LD_INT 29
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 31
17392: PUSH
17393: LD_INT 37
17395: PUSH
17396: LD_INT 38
17398: PUSH
17399: LD_INT 32
17401: PUSH
17402: LD_INT 27
17404: PUSH
17405: LD_INT 33
17407: PUSH
17408: LD_INT 69
17410: PUSH
17411: LD_INT 39
17413: PUSH
17414: LD_INT 34
17416: PUSH
17417: LD_INT 40
17419: PUSH
17420: LD_INT 71
17422: PUSH
17423: LD_INT 23
17425: PUSH
17426: LD_INT 44
17428: PUSH
17429: LD_INT 48
17431: PUSH
17432: LD_INT 49
17434: PUSH
17435: LD_INT 50
17437: PUSH
17438: LD_INT 51
17440: PUSH
17441: LD_INT 52
17443: PUSH
17444: LD_INT 53
17446: PUSH
17447: LD_INT 54
17449: PUSH
17450: LD_INT 55
17452: PUSH
17453: LD_INT 56
17455: PUSH
17456: LD_INT 57
17458: PUSH
17459: LD_INT 58
17461: PUSH
17462: LD_INT 59
17464: PUSH
17465: LD_INT 63
17467: PUSH
17468: LD_INT 64
17470: PUSH
17471: LD_INT 65
17473: PUSH
17474: LD_INT 82
17476: PUSH
17477: LD_INT 83
17479: PUSH
17480: LD_INT 84
17482: PUSH
17483: LD_INT 85
17485: PUSH
17486: LD_INT 86
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: ST_TO_ADDR
17544: GO 17547
17546: POP
// if state > - 1 and state < 3 then
17547: LD_VAR 0 3
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: GREATER
17556: PUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_INT 3
17564: LESS
17565: AND
17566: IFFALSE 17623
// for i in result do
17568: LD_ADDR_VAR 0 5
17572: PUSH
17573: LD_VAR 0 4
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17621
// if GetTech ( i , side ) <> state then
17581: LD_VAR 0 5
17585: PPUSH
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 321
17595: PUSH
17596: LD_VAR 0 3
17600: NONEQUAL
17601: IFFALSE 17619
// result := result diff i ;
17603: LD_ADDR_VAR 0 4
17607: PUSH
17608: LD_VAR 0 4
17612: PUSH
17613: LD_VAR 0 5
17617: DIFF
17618: ST_TO_ADDR
17619: GO 17578
17621: POP
17622: POP
// end ;
17623: LD_VAR 0 4
17627: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
// result := true ;
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: LD_INT 1
17640: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17641: LD_ADDR_VAR 0 5
17645: PUSH
17646: LD_VAR 0 2
17650: PPUSH
17651: CALL_OW 480
17655: ST_TO_ADDR
// if not tmp then
17656: LD_VAR 0 5
17660: NOT
17661: IFFALSE 17665
// exit ;
17663: GO 17714
// for i in tmp do
17665: LD_ADDR_VAR 0 4
17669: PUSH
17670: LD_VAR 0 5
17674: PUSH
17675: FOR_IN
17676: IFFALSE 17712
// if GetTech ( i , side ) <> state_researched then
17678: LD_VAR 0 4
17682: PPUSH
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 321
17692: PUSH
17693: LD_INT 2
17695: NONEQUAL
17696: IFFALSE 17710
// begin result := false ;
17698: LD_ADDR_VAR 0 3
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
// exit ;
17706: POP
17707: POP
17708: GO 17714
// end ;
17710: GO 17675
17712: POP
17713: POP
// end ;
17714: LD_VAR 0 3
17718: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17719: LD_INT 0
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17734: LD_VAR 0 1
17738: NOT
17739: PUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 257
17749: PUSH
17750: LD_INT 9
17752: NONEQUAL
17753: OR
17754: IFFALSE 17758
// exit ;
17756: GO 18331
// side := GetSide ( unit ) ;
17758: LD_ADDR_VAR 0 9
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 255
17772: ST_TO_ADDR
// tech_space := tech_spacanom ;
17773: LD_ADDR_VAR 0 12
17777: PUSH
17778: LD_INT 29
17780: ST_TO_ADDR
// tech_time := tech_taurad ;
17781: LD_ADDR_VAR 0 13
17785: PUSH
17786: LD_INT 28
17788: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17789: LD_ADDR_VAR 0 11
17793: PUSH
17794: LD_VAR 0 1
17798: PPUSH
17799: CALL_OW 310
17803: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17804: LD_VAR 0 11
17808: PPUSH
17809: CALL_OW 247
17813: PUSH
17814: LD_INT 2
17816: EQUAL
17817: IFFALSE 17821
// exit ;
17819: GO 18331
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17821: LD_ADDR_VAR 0 8
17825: PUSH
17826: LD_INT 81
17828: PUSH
17829: LD_VAR 0 9
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 69
17863: ST_TO_ADDR
// if not tmp then
17864: LD_VAR 0 8
17868: NOT
17869: IFFALSE 17873
// exit ;
17871: GO 18331
// if in_unit then
17873: LD_VAR 0 11
17877: IFFALSE 17901
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17879: LD_ADDR_VAR 0 10
17883: PUSH
17884: LD_VAR 0 8
17888: PPUSH
17889: LD_VAR 0 11
17893: PPUSH
17894: CALL_OW 74
17898: ST_TO_ADDR
17899: GO 17921
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17901: LD_ADDR_VAR 0 10
17905: PUSH
17906: LD_VAR 0 8
17910: PPUSH
17911: LD_VAR 0 1
17915: PPUSH
17916: CALL_OW 74
17920: ST_TO_ADDR
// if not enemy then
17921: LD_VAR 0 10
17925: NOT
17926: IFFALSE 17930
// exit ;
17928: GO 18331
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17930: LD_VAR 0 11
17934: PUSH
17935: LD_VAR 0 11
17939: PPUSH
17940: LD_VAR 0 10
17944: PPUSH
17945: CALL_OW 296
17949: PUSH
17950: LD_INT 13
17952: GREATER
17953: AND
17954: PUSH
17955: LD_VAR 0 1
17959: PPUSH
17960: LD_VAR 0 10
17964: PPUSH
17965: CALL_OW 296
17969: PUSH
17970: LD_INT 12
17972: GREATER
17973: OR
17974: IFFALSE 17978
// exit ;
17976: GO 18331
// missile := [ 1 ] ;
17978: LD_ADDR_VAR 0 14
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17989: LD_VAR 0 9
17993: PPUSH
17994: LD_VAR 0 12
17998: PPUSH
17999: CALL_OW 325
18003: IFFALSE 18032
// missile := Insert ( missile , missile + 1 , 2 ) ;
18005: LD_ADDR_VAR 0 14
18009: PUSH
18010: LD_VAR 0 14
18014: PPUSH
18015: LD_VAR 0 14
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: PPUSH
18024: LD_INT 2
18026: PPUSH
18027: CALL_OW 2
18031: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18032: LD_VAR 0 9
18036: PPUSH
18037: LD_VAR 0 13
18041: PPUSH
18042: CALL_OW 325
18046: PUSH
18047: LD_VAR 0 10
18051: PPUSH
18052: CALL_OW 255
18056: PPUSH
18057: LD_VAR 0 13
18061: PPUSH
18062: CALL_OW 325
18066: NOT
18067: AND
18068: IFFALSE 18097
// missile := Insert ( missile , missile + 1 , 3 ) ;
18070: LD_ADDR_VAR 0 14
18074: PUSH
18075: LD_VAR 0 14
18079: PPUSH
18080: LD_VAR 0 14
18084: PUSH
18085: LD_INT 1
18087: PLUS
18088: PPUSH
18089: LD_INT 3
18091: PPUSH
18092: CALL_OW 2
18096: ST_TO_ADDR
// if missile < 2 then
18097: LD_VAR 0 14
18101: PUSH
18102: LD_INT 2
18104: LESS
18105: IFFALSE 18109
// exit ;
18107: GO 18331
// x := GetX ( enemy ) ;
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: LD_VAR 0 10
18118: PPUSH
18119: CALL_OW 250
18123: ST_TO_ADDR
// y := GetY ( enemy ) ;
18124: LD_ADDR_VAR 0 5
18128: PUSH
18129: LD_VAR 0 10
18133: PPUSH
18134: CALL_OW 251
18138: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18139: LD_ADDR_VAR 0 6
18143: PUSH
18144: LD_VAR 0 4
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: CALL_OW 12
18160: PLUS
18161: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18162: LD_ADDR_VAR 0 7
18166: PUSH
18167: LD_VAR 0 5
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: CALL_OW 12
18183: PLUS
18184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18185: LD_VAR 0 6
18189: PPUSH
18190: LD_VAR 0 7
18194: PPUSH
18195: CALL_OW 488
18199: NOT
18200: IFFALSE 18222
// begin _x := x ;
18202: LD_ADDR_VAR 0 6
18206: PUSH
18207: LD_VAR 0 4
18211: ST_TO_ADDR
// _y := y ;
18212: LD_ADDR_VAR 0 7
18216: PUSH
18217: LD_VAR 0 5
18221: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18222: LD_ADDR_VAR 0 3
18226: PUSH
18227: LD_INT 1
18229: PPUSH
18230: LD_VAR 0 14
18234: PPUSH
18235: CALL_OW 12
18239: ST_TO_ADDR
// case i of 1 :
18240: LD_VAR 0 3
18244: PUSH
18245: LD_INT 1
18247: DOUBLE
18248: EQUAL
18249: IFTRUE 18253
18251: GO 18270
18253: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18254: LD_VAR 0 1
18258: PPUSH
18259: LD_VAR 0 10
18263: PPUSH
18264: CALL_OW 115
18268: GO 18331
18270: LD_INT 2
18272: DOUBLE
18273: EQUAL
18274: IFTRUE 18278
18276: GO 18300
18278: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_VAR 0 6
18288: PPUSH
18289: LD_VAR 0 7
18293: PPUSH
18294: CALL_OW 153
18298: GO 18331
18300: LD_INT 3
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18330
18308: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_VAR 0 6
18318: PPUSH
18319: LD_VAR 0 7
18323: PPUSH
18324: CALL_OW 154
18328: GO 18331
18330: POP
// end ;
18331: LD_VAR 0 2
18335: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18336: LD_INT 0
18338: PPUSH
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
// if not unit or not building then
18344: LD_VAR 0 1
18348: NOT
18349: PUSH
18350: LD_VAR 0 2
18354: NOT
18355: OR
18356: IFFALSE 18360
// exit ;
18358: GO 18518
// x := GetX ( building ) ;
18360: LD_ADDR_VAR 0 5
18364: PUSH
18365: LD_VAR 0 2
18369: PPUSH
18370: CALL_OW 250
18374: ST_TO_ADDR
// y := GetY ( building ) ;
18375: LD_ADDR_VAR 0 6
18379: PUSH
18380: LD_VAR 0 2
18384: PPUSH
18385: CALL_OW 251
18389: ST_TO_ADDR
// for i = 0 to 5 do
18390: LD_ADDR_VAR 0 4
18394: PUSH
18395: DOUBLE
18396: LD_INT 0
18398: DEC
18399: ST_TO_ADDR
18400: LD_INT 5
18402: PUSH
18403: FOR_TO
18404: IFFALSE 18516
// begin _x := ShiftX ( x , i , 3 ) ;
18406: LD_ADDR_VAR 0 7
18410: PUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: LD_VAR 0 4
18420: PPUSH
18421: LD_INT 3
18423: PPUSH
18424: CALL_OW 272
18428: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18429: LD_ADDR_VAR 0 8
18433: PUSH
18434: LD_VAR 0 6
18438: PPUSH
18439: LD_VAR 0 4
18443: PPUSH
18444: LD_INT 3
18446: PPUSH
18447: CALL_OW 273
18451: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18452: LD_VAR 0 7
18456: PPUSH
18457: LD_VAR 0 8
18461: PPUSH
18462: CALL_OW 488
18466: NOT
18467: IFFALSE 18471
// continue ;
18469: GO 18403
// if HexInfo ( _x , _y ) = 0 then
18471: LD_VAR 0 7
18475: PPUSH
18476: LD_VAR 0 8
18480: PPUSH
18481: CALL_OW 428
18485: PUSH
18486: LD_INT 0
18488: EQUAL
18489: IFFALSE 18514
// begin ComMoveXY ( unit , _x , _y ) ;
18491: LD_VAR 0 1
18495: PPUSH
18496: LD_VAR 0 7
18500: PPUSH
18501: LD_VAR 0 8
18505: PPUSH
18506: CALL_OW 111
// exit ;
18510: POP
18511: POP
18512: GO 18518
// end ; end ;
18514: GO 18403
18516: POP
18517: POP
// end ;
18518: LD_VAR 0 3
18522: RET
// export function ScanBase ( side , base_area ) ; begin
18523: LD_INT 0
18525: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_VAR 0 2
18535: PPUSH
18536: LD_INT 81
18538: PUSH
18539: LD_VAR 0 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 70
18552: ST_TO_ADDR
// end ;
18553: LD_VAR 0 3
18557: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
// result := false ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// side := GetSide ( unit ) ;
18572: LD_ADDR_VAR 0 3
18576: PUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 255
18586: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18587: LD_ADDR_VAR 0 4
18591: PUSH
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 248
18601: ST_TO_ADDR
// case nat of 1 :
18602: LD_VAR 0 4
18606: PUSH
18607: LD_INT 1
18609: DOUBLE
18610: EQUAL
18611: IFTRUE 18615
18613: GO 18626
18615: POP
// tech := tech_lassight ; 2 :
18616: LD_ADDR_VAR 0 5
18620: PUSH
18621: LD_INT 12
18623: ST_TO_ADDR
18624: GO 18665
18626: LD_INT 2
18628: DOUBLE
18629: EQUAL
18630: IFTRUE 18634
18632: GO 18645
18634: POP
// tech := tech_mortar ; 3 :
18635: LD_ADDR_VAR 0 5
18639: PUSH
18640: LD_INT 41
18642: ST_TO_ADDR
18643: GO 18665
18645: LD_INT 3
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18664
18653: POP
// tech := tech_bazooka ; end ;
18654: LD_ADDR_VAR 0 5
18658: PUSH
18659: LD_INT 44
18661: ST_TO_ADDR
18662: GO 18665
18664: POP
// if Researched ( side , tech ) then
18665: LD_VAR 0 3
18669: PPUSH
18670: LD_VAR 0 5
18674: PPUSH
18675: CALL_OW 325
18679: IFFALSE 18706
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18681: LD_ADDR_VAR 0 2
18685: PUSH
18686: LD_INT 5
18688: PUSH
18689: LD_INT 8
18691: PUSH
18692: LD_INT 9
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: LD_VAR 0 4
18704: ARRAY
18705: ST_TO_ADDR
// end ;
18706: LD_VAR 0 2
18710: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18711: LD_INT 0
18713: PPUSH
18714: PPUSH
18715: PPUSH
// if not mines then
18716: LD_VAR 0 2
18720: NOT
18721: IFFALSE 18725
// exit ;
18723: GO 18869
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18725: LD_ADDR_VAR 0 5
18729: PUSH
18730: LD_INT 81
18732: PUSH
18733: LD_VAR 0 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 3
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: ST_TO_ADDR
// for i in mines do
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: LD_VAR 0 2
18777: PUSH
18778: FOR_IN
18779: IFFALSE 18867
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18781: LD_VAR 0 4
18785: PUSH
18786: LD_INT 1
18788: ARRAY
18789: PPUSH
18790: LD_VAR 0 4
18794: PUSH
18795: LD_INT 2
18797: ARRAY
18798: PPUSH
18799: CALL_OW 458
18803: NOT
18804: IFFALSE 18808
// continue ;
18806: GO 18778
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18808: LD_VAR 0 4
18812: PUSH
18813: LD_INT 1
18815: ARRAY
18816: PPUSH
18817: LD_VAR 0 4
18821: PUSH
18822: LD_INT 2
18824: ARRAY
18825: PPUSH
18826: CALL_OW 428
18830: PUSH
18831: LD_VAR 0 5
18835: IN
18836: IFFALSE 18865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18838: LD_VAR 0 4
18842: PUSH
18843: LD_INT 1
18845: ARRAY
18846: PPUSH
18847: LD_VAR 0 4
18851: PUSH
18852: LD_INT 2
18854: ARRAY
18855: PPUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 456
// end ;
18865: GO 18778
18867: POP
18868: POP
// end ;
18869: LD_VAR 0 3
18873: RET
// export function Count ( array ) ; var i ; begin
18874: LD_INT 0
18876: PPUSH
18877: PPUSH
// result := 0 ;
18878: LD_ADDR_VAR 0 2
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// for i in array do
18886: LD_ADDR_VAR 0 3
18890: PUSH
18891: LD_VAR 0 1
18895: PUSH
18896: FOR_IN
18897: IFFALSE 18921
// if i then
18899: LD_VAR 0 3
18903: IFFALSE 18919
// result := result + 1 ;
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_VAR 0 2
18914: PUSH
18915: LD_INT 1
18917: PLUS
18918: ST_TO_ADDR
18919: GO 18896
18921: POP
18922: POP
// end ;
18923: LD_VAR 0 2
18927: RET
// export function IsEmpty ( building ) ; begin
18928: LD_INT 0
18930: PPUSH
// if not building then
18931: LD_VAR 0 1
18935: NOT
18936: IFFALSE 18940
// exit ;
18938: GO 18983
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18940: LD_ADDR_VAR 0 2
18944: PUSH
18945: LD_VAR 0 1
18949: PUSH
18950: LD_INT 22
18952: PUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 255
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 58
18969: PUSH
18970: EMPTY
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PPUSH
18977: CALL_OW 69
18981: IN
18982: ST_TO_ADDR
// end ;
18983: LD_VAR 0 2
18987: RET
// export function IsNotFull ( building ) ; begin
18988: LD_INT 0
18990: PPUSH
// if not building then
18991: LD_VAR 0 1
18995: NOT
18996: IFFALSE 19000
// exit ;
18998: GO 19019
// result := UnitsInside ( building ) < 6 ;
19000: LD_ADDR_VAR 0 2
19004: PUSH
19005: LD_VAR 0 1
19009: PPUSH
19010: CALL_OW 313
19014: PUSH
19015: LD_INT 6
19017: LESS
19018: ST_TO_ADDR
// end ;
19019: LD_VAR 0 2
19023: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19024: LD_INT 0
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
// tmp := [ ] ;
19030: LD_ADDR_VAR 0 3
19034: PUSH
19035: EMPTY
19036: ST_TO_ADDR
// list := [ ] ;
19037: LD_ADDR_VAR 0 5
19041: PUSH
19042: EMPTY
19043: ST_TO_ADDR
// for i = 16 to 25 do
19044: LD_ADDR_VAR 0 4
19048: PUSH
19049: DOUBLE
19050: LD_INT 16
19052: DEC
19053: ST_TO_ADDR
19054: LD_INT 25
19056: PUSH
19057: FOR_TO
19058: IFFALSE 19131
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19060: LD_ADDR_VAR 0 3
19064: PUSH
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 22
19072: PUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 255
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 91
19089: PUSH
19090: LD_VAR 0 1
19094: PUSH
19095: LD_INT 6
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 30
19105: PUSH
19106: LD_VAR 0 4
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: ADD
19128: ST_TO_ADDR
19129: GO 19057
19131: POP
19132: POP
// for i = 1 to tmp do
19133: LD_ADDR_VAR 0 4
19137: PUSH
19138: DOUBLE
19139: LD_INT 1
19141: DEC
19142: ST_TO_ADDR
19143: LD_VAR 0 3
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19237
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19151: LD_ADDR_VAR 0 5
19155: PUSH
19156: LD_VAR 0 5
19160: PUSH
19161: LD_VAR 0 3
19165: PUSH
19166: LD_VAR 0 4
19170: ARRAY
19171: PPUSH
19172: CALL_OW 266
19176: PUSH
19177: LD_VAR 0 3
19181: PUSH
19182: LD_VAR 0 4
19186: ARRAY
19187: PPUSH
19188: CALL_OW 250
19192: PUSH
19193: LD_VAR 0 3
19197: PUSH
19198: LD_VAR 0 4
19202: ARRAY
19203: PPUSH
19204: CALL_OW 251
19208: PUSH
19209: LD_VAR 0 3
19213: PUSH
19214: LD_VAR 0 4
19218: ARRAY
19219: PPUSH
19220: CALL_OW 254
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: ADD
19234: ST_TO_ADDR
19235: GO 19148
19237: POP
19238: POP
// result := list ;
19239: LD_ADDR_VAR 0 2
19243: PUSH
19244: LD_VAR 0 5
19248: ST_TO_ADDR
// end ;
19249: LD_VAR 0 2
19253: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19254: LD_INT 0
19256: PPUSH
19257: PPUSH
19258: PPUSH
19259: PPUSH
19260: PPUSH
19261: PPUSH
19262: PPUSH
// if not factory then
19263: LD_VAR 0 1
19267: NOT
19268: IFFALSE 19272
// exit ;
19270: GO 19865
// if control = control_apeman then
19272: LD_VAR 0 4
19276: PUSH
19277: LD_INT 5
19279: EQUAL
19280: IFFALSE 19389
// begin tmp := UnitsInside ( factory ) ;
19282: LD_ADDR_VAR 0 8
19286: PUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 313
19296: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19297: LD_VAR 0 8
19301: PPUSH
19302: LD_INT 25
19304: PUSH
19305: LD_INT 12
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PPUSH
19312: CALL_OW 72
19316: NOT
19317: IFFALSE 19327
// control := control_manual ;
19319: LD_ADDR_VAR 0 4
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19327: LD_ADDR_VAR 0 8
19331: PUSH
19332: LD_VAR 0 1
19336: PPUSH
19337: CALL 19024 0 1
19341: ST_TO_ADDR
// if tmp then
19342: LD_VAR 0 8
19346: IFFALSE 19389
// begin for i in tmp do
19348: LD_ADDR_VAR 0 7
19352: PUSH
19353: LD_VAR 0 8
19357: PUSH
19358: FOR_IN
19359: IFFALSE 19387
// if i [ 1 ] = b_ext_radio then
19361: LD_VAR 0 7
19365: PUSH
19366: LD_INT 1
19368: ARRAY
19369: PUSH
19370: LD_INT 22
19372: EQUAL
19373: IFFALSE 19385
// begin control := control_remote ;
19375: LD_ADDR_VAR 0 4
19379: PUSH
19380: LD_INT 2
19382: ST_TO_ADDR
// break ;
19383: GO 19387
// end ;
19385: GO 19358
19387: POP
19388: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19389: LD_VAR 0 1
19393: PPUSH
19394: LD_VAR 0 2
19398: PPUSH
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_VAR 0 4
19408: PPUSH
19409: LD_VAR 0 5
19413: PPUSH
19414: CALL_OW 448
19418: IFFALSE 19453
// begin result := [ chassis , engine , control , weapon ] ;
19420: LD_ADDR_VAR 0 6
19424: PUSH
19425: LD_VAR 0 2
19429: PUSH
19430: LD_VAR 0 3
19434: PUSH
19435: LD_VAR 0 4
19439: PUSH
19440: LD_VAR 0 5
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: ST_TO_ADDR
// exit ;
19451: GO 19865
// end ; _chassis := AvailableChassisList ( factory ) ;
19453: LD_ADDR_VAR 0 9
19457: PUSH
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 475
19467: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19468: LD_ADDR_VAR 0 11
19472: PUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 476
19482: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19483: LD_ADDR_VAR 0 12
19487: PUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 477
19497: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19498: LD_ADDR_VAR 0 10
19502: PUSH
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 478
19512: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19513: LD_VAR 0 9
19517: NOT
19518: PUSH
19519: LD_VAR 0 11
19523: NOT
19524: OR
19525: PUSH
19526: LD_VAR 0 12
19530: NOT
19531: OR
19532: PUSH
19533: LD_VAR 0 10
19537: NOT
19538: OR
19539: IFFALSE 19574
// begin result := [ chassis , engine , control , weapon ] ;
19541: LD_ADDR_VAR 0 6
19545: PUSH
19546: LD_VAR 0 2
19550: PUSH
19551: LD_VAR 0 3
19555: PUSH
19556: LD_VAR 0 4
19560: PUSH
19561: LD_VAR 0 5
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: ST_TO_ADDR
// exit ;
19572: GO 19865
// end ; if not chassis in _chassis then
19574: LD_VAR 0 2
19578: PUSH
19579: LD_VAR 0 9
19583: IN
19584: NOT
19585: IFFALSE 19611
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19587: LD_ADDR_VAR 0 2
19591: PUSH
19592: LD_VAR 0 9
19596: PUSH
19597: LD_INT 1
19599: PPUSH
19600: LD_VAR 0 9
19604: PPUSH
19605: CALL_OW 12
19609: ARRAY
19610: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19611: LD_VAR 0 2
19615: PPUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: CALL 19870 0 2
19625: NOT
19626: IFFALSE 19685
// repeat engine := _engine [ 1 ] ;
19628: LD_ADDR_VAR 0 3
19632: PUSH
19633: LD_VAR 0 11
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19642: LD_ADDR_VAR 0 11
19646: PUSH
19647: LD_VAR 0 11
19651: PPUSH
19652: LD_INT 1
19654: PPUSH
19655: CALL_OW 3
19659: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: CALL 19870 0 2
19674: PUSH
19675: LD_VAR 0 11
19679: PUSH
19680: EMPTY
19681: EQUAL
19682: OR
19683: IFFALSE 19628
// if not control in _control then
19685: LD_VAR 0 4
19689: PUSH
19690: LD_VAR 0 12
19694: IN
19695: NOT
19696: IFFALSE 19722
// control := _control [ rand ( 1 , _control ) ] ;
19698: LD_ADDR_VAR 0 4
19702: PUSH
19703: LD_VAR 0 12
19707: PUSH
19708: LD_INT 1
19710: PPUSH
19711: LD_VAR 0 12
19715: PPUSH
19716: CALL_OW 12
19720: ARRAY
19721: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_VAR 0 5
19731: PPUSH
19732: CALL 20090 0 2
19736: NOT
19737: IFFALSE 19796
// repeat weapon := _weapon [ 1 ] ;
19739: LD_ADDR_VAR 0 5
19743: PUSH
19744: LD_VAR 0 10
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19753: LD_ADDR_VAR 0 10
19757: PUSH
19758: LD_VAR 0 10
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 3
19770: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19771: LD_VAR 0 2
19775: PPUSH
19776: LD_VAR 0 5
19780: PPUSH
19781: CALL 20090 0 2
19785: PUSH
19786: LD_VAR 0 10
19790: PUSH
19791: EMPTY
19792: EQUAL
19793: OR
19794: IFFALSE 19739
// result := [ ] ;
19796: LD_ADDR_VAR 0 6
19800: PUSH
19801: EMPTY
19802: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19803: LD_VAR 0 1
19807: PPUSH
19808: LD_VAR 0 2
19812: PPUSH
19813: LD_VAR 0 3
19817: PPUSH
19818: LD_VAR 0 4
19822: PPUSH
19823: LD_VAR 0 5
19827: PPUSH
19828: CALL_OW 448
19832: IFFALSE 19865
// result := [ chassis , engine , control , weapon ] ;
19834: LD_ADDR_VAR 0 6
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: LD_VAR 0 3
19848: PUSH
19849: LD_VAR 0 4
19853: PUSH
19854: LD_VAR 0 5
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: ST_TO_ADDR
// end ;
19865: LD_VAR 0 6
19869: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19870: LD_INT 0
19872: PPUSH
// if not chassis or not engine then
19873: LD_VAR 0 1
19877: NOT
19878: PUSH
19879: LD_VAR 0 2
19883: NOT
19884: OR
19885: IFFALSE 19889
// exit ;
19887: GO 20085
// case engine of engine_solar :
19889: LD_VAR 0 2
19893: PUSH
19894: LD_INT 2
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19940
19902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19903: LD_ADDR_VAR 0 3
19907: PUSH
19908: LD_INT 11
19910: PUSH
19911: LD_INT 12
19913: PUSH
19914: LD_INT 13
19916: PUSH
19917: LD_INT 14
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 3
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20069
19940: LD_INT 1
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20010
19948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 11
19956: PUSH
19957: LD_INT 12
19959: PUSH
19960: LD_INT 13
19962: PUSH
19963: LD_INT 14
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: LD_INT 4
19977: PUSH
19978: LD_INT 5
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 23
19986: PUSH
19987: LD_INT 22
19989: PUSH
19990: LD_INT 24
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: ST_TO_ADDR
20008: GO 20069
20010: LD_INT 3
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20068
20018: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: LD_INT 13
20026: PUSH
20027: LD_INT 14
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: LD_INT 3
20035: PUSH
20036: LD_INT 4
20038: PUSH
20039: LD_INT 5
20041: PUSH
20042: LD_INT 21
20044: PUSH
20045: LD_INT 22
20047: PUSH
20048: LD_INT 23
20050: PUSH
20051: LD_INT 24
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: ST_TO_ADDR
20066: GO 20069
20068: POP
// result := ( chassis in result ) ;
20069: LD_ADDR_VAR 0 3
20073: PUSH
20074: LD_VAR 0 1
20078: PUSH
20079: LD_VAR 0 3
20083: IN
20084: ST_TO_ADDR
// end ;
20085: LD_VAR 0 3
20089: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20090: LD_INT 0
20092: PPUSH
// if not chassis or not weapon then
20093: LD_VAR 0 1
20097: NOT
20098: PUSH
20099: LD_VAR 0 2
20103: NOT
20104: OR
20105: IFFALSE 20109
// exit ;
20107: GO 21135
// case weapon of us_machine_gun :
20109: LD_VAR 0 2
20113: PUSH
20114: LD_INT 2
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20152
20122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20123: LD_ADDR_VAR 0 3
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: LD_INT 4
20139: PUSH
20140: LD_INT 5
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: ST_TO_ADDR
20150: GO 21119
20152: LD_INT 3
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20190
20160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20161: LD_ADDR_VAR 0 3
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 3
20174: PUSH
20175: LD_INT 4
20177: PUSH
20178: LD_INT 5
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: ST_TO_ADDR
20188: GO 21119
20190: LD_INT 11
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20228
20198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20199: LD_ADDR_VAR 0 3
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 3
20212: PUSH
20213: LD_INT 4
20215: PUSH
20216: LD_INT 5
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: ST_TO_ADDR
20226: GO 21119
20228: LD_INT 4
20230: DOUBLE
20231: EQUAL
20232: IFTRUE 20236
20234: GO 20262
20236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20237: LD_ADDR_VAR 0 3
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: LD_INT 3
20247: PUSH
20248: LD_INT 4
20250: PUSH
20251: LD_INT 5
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
20260: GO 21119
20262: LD_INT 5
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20296
20270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20271: LD_ADDR_VAR 0 3
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 3
20281: PUSH
20282: LD_INT 4
20284: PUSH
20285: LD_INT 5
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: ST_TO_ADDR
20294: GO 21119
20296: LD_INT 9
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20330
20304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20305: LD_ADDR_VAR 0 3
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: LD_INT 4
20318: PUSH
20319: LD_INT 5
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: ST_TO_ADDR
20328: GO 21119
20330: LD_INT 7
20332: DOUBLE
20333: EQUAL
20334: IFTRUE 20338
20336: GO 20364
20338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20339: LD_ADDR_VAR 0 3
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 3
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: LD_INT 5
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
20362: GO 21119
20364: LD_INT 12
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20398
20372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20373: LD_ADDR_VAR 0 3
20377: PUSH
20378: LD_INT 2
20380: PUSH
20381: LD_INT 3
20383: PUSH
20384: LD_INT 4
20386: PUSH
20387: LD_INT 5
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: ST_TO_ADDR
20396: GO 21119
20398: LD_INT 13
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20432
20406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20407: LD_ADDR_VAR 0 3
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: LD_INT 4
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
20430: GO 21119
20432: LD_INT 14
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20458
20440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20441: LD_ADDR_VAR 0 3
20445: PUSH
20446: LD_INT 4
20448: PUSH
20449: LD_INT 5
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: ST_TO_ADDR
20456: GO 21119
20458: LD_INT 6
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20484
20466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20467: LD_ADDR_VAR 0 3
20471: PUSH
20472: LD_INT 4
20474: PUSH
20475: LD_INT 5
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: ST_TO_ADDR
20482: GO 21119
20484: LD_INT 10
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20510
20492: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20493: LD_ADDR_VAR 0 3
20497: PUSH
20498: LD_INT 4
20500: PUSH
20501: LD_INT 5
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: ST_TO_ADDR
20508: GO 21119
20510: LD_INT 22
20512: DOUBLE
20513: EQUAL
20514: IFTRUE 20518
20516: GO 20544
20518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20519: LD_ADDR_VAR 0 3
20523: PUSH
20524: LD_INT 11
20526: PUSH
20527: LD_INT 12
20529: PUSH
20530: LD_INT 13
20532: PUSH
20533: LD_INT 14
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: ST_TO_ADDR
20542: GO 21119
20544: LD_INT 23
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20578
20552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20553: LD_ADDR_VAR 0 3
20557: PUSH
20558: LD_INT 11
20560: PUSH
20561: LD_INT 12
20563: PUSH
20564: LD_INT 13
20566: PUSH
20567: LD_INT 14
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: ST_TO_ADDR
20576: GO 21119
20578: LD_INT 24
20580: DOUBLE
20581: EQUAL
20582: IFTRUE 20586
20584: GO 20612
20586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20587: LD_ADDR_VAR 0 3
20591: PUSH
20592: LD_INT 11
20594: PUSH
20595: LD_INT 12
20597: PUSH
20598: LD_INT 13
20600: PUSH
20601: LD_INT 14
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: ST_TO_ADDR
20610: GO 21119
20612: LD_INT 30
20614: DOUBLE
20615: EQUAL
20616: IFTRUE 20620
20618: GO 20646
20620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20621: LD_ADDR_VAR 0 3
20625: PUSH
20626: LD_INT 11
20628: PUSH
20629: LD_INT 12
20631: PUSH
20632: LD_INT 13
20634: PUSH
20635: LD_INT 14
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
20644: GO 21119
20646: LD_INT 25
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 20672
20654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: LD_INT 13
20662: PUSH
20663: LD_INT 14
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 21119
20672: LD_INT 27
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20698
20680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 13
20688: PUSH
20689: LD_INT 14
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: ST_TO_ADDR
20696: GO 21119
20698: LD_INT 28
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20724
20706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: LD_INT 13
20714: PUSH
20715: LD_INT 14
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: ST_TO_ADDR
20722: GO 21119
20724: LD_INT 29
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20750
20732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 13
20740: PUSH
20741: LD_INT 14
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: ST_TO_ADDR
20748: GO 21119
20750: LD_INT 31
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20776
20758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 13
20766: PUSH
20767: LD_INT 14
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: ST_TO_ADDR
20774: GO 21119
20776: LD_INT 26
20778: DOUBLE
20779: EQUAL
20780: IFTRUE 20784
20782: GO 20802
20784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20785: LD_ADDR_VAR 0 3
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: ST_TO_ADDR
20800: GO 21119
20802: LD_INT 42
20804: DOUBLE
20805: EQUAL
20806: IFTRUE 20810
20808: GO 20836
20810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20811: LD_ADDR_VAR 0 3
20815: PUSH
20816: LD_INT 21
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_INT 23
20824: PUSH
20825: LD_INT 24
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 21119
20836: LD_INT 43
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20870
20844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_INT 23
20858: PUSH
20859: LD_INT 24
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 21119
20870: LD_INT 44
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20904
20878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20879: LD_ADDR_VAR 0 3
20883: PUSH
20884: LD_INT 21
20886: PUSH
20887: LD_INT 22
20889: PUSH
20890: LD_INT 23
20892: PUSH
20893: LD_INT 24
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: ST_TO_ADDR
20902: GO 21119
20904: LD_INT 45
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20938
20912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20913: LD_ADDR_VAR 0 3
20917: PUSH
20918: LD_INT 21
20920: PUSH
20921: LD_INT 22
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 24
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: ST_TO_ADDR
20936: GO 21119
20938: LD_INT 49
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 20972
20946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20947: LD_ADDR_VAR 0 3
20951: PUSH
20952: LD_INT 21
20954: PUSH
20955: LD_INT 22
20957: PUSH
20958: LD_INT 23
20960: PUSH
20961: LD_INT 24
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: ST_TO_ADDR
20970: GO 21119
20972: LD_INT 51
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 21006
20980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20981: LD_ADDR_VAR 0 3
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 22
20991: PUSH
20992: LD_INT 23
20994: PUSH
20995: LD_INT 24
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 21119
21006: LD_INT 52
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21040
21014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21015: LD_ADDR_VAR 0 3
21019: PUSH
21020: LD_INT 21
21022: PUSH
21023: LD_INT 22
21025: PUSH
21026: LD_INT 23
21028: PUSH
21029: LD_INT 24
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: ST_TO_ADDR
21038: GO 21119
21040: LD_INT 53
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21066
21048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: LD_INT 23
21056: PUSH
21057: LD_INT 24
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: ST_TO_ADDR
21064: GO 21119
21066: LD_INT 46
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21092
21074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21075: LD_ADDR_VAR 0 3
21079: PUSH
21080: LD_INT 23
21082: PUSH
21083: LD_INT 24
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: ST_TO_ADDR
21090: GO 21119
21092: LD_INT 47
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21118
21100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: LD_INT 23
21108: PUSH
21109: LD_INT 24
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 21119
21118: POP
// result := ( chassis in result ) ;
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_VAR 0 1
21128: PUSH
21129: LD_VAR 0 3
21133: IN
21134: ST_TO_ADDR
// end ;
21135: LD_VAR 0 3
21139: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21140: LD_INT 0
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
21148: PPUSH
// result := array ;
21149: LD_ADDR_VAR 0 5
21153: PUSH
21154: LD_VAR 0 1
21158: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21159: LD_VAR 0 1
21163: NOT
21164: PUSH
21165: LD_VAR 0 2
21169: NOT
21170: OR
21171: PUSH
21172: LD_VAR 0 3
21176: NOT
21177: OR
21178: PUSH
21179: LD_VAR 0 2
21183: PUSH
21184: LD_VAR 0 1
21188: GREATER
21189: OR
21190: PUSH
21191: LD_VAR 0 3
21195: PUSH
21196: LD_VAR 0 1
21200: GREATER
21201: OR
21202: IFFALSE 21206
// exit ;
21204: GO 21502
// if direction then
21206: LD_VAR 0 4
21210: IFFALSE 21274
// begin d := 1 ;
21212: LD_ADDR_VAR 0 9
21216: PUSH
21217: LD_INT 1
21219: ST_TO_ADDR
// if i_from > i_to then
21220: LD_VAR 0 2
21224: PUSH
21225: LD_VAR 0 3
21229: GREATER
21230: IFFALSE 21256
// length := ( array - i_from ) + i_to else
21232: LD_ADDR_VAR 0 11
21236: PUSH
21237: LD_VAR 0 1
21241: PUSH
21242: LD_VAR 0 2
21246: MINUS
21247: PUSH
21248: LD_VAR 0 3
21252: PLUS
21253: ST_TO_ADDR
21254: GO 21272
// length := i_to - i_from ;
21256: LD_ADDR_VAR 0 11
21260: PUSH
21261: LD_VAR 0 3
21265: PUSH
21266: LD_VAR 0 2
21270: MINUS
21271: ST_TO_ADDR
// end else
21272: GO 21335
// begin d := - 1 ;
21274: LD_ADDR_VAR 0 9
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: ST_TO_ADDR
// if i_from > i_to then
21283: LD_VAR 0 2
21287: PUSH
21288: LD_VAR 0 3
21292: GREATER
21293: IFFALSE 21313
// length := i_from - i_to else
21295: LD_ADDR_VAR 0 11
21299: PUSH
21300: LD_VAR 0 2
21304: PUSH
21305: LD_VAR 0 3
21309: MINUS
21310: ST_TO_ADDR
21311: GO 21335
// length := ( array - i_to ) + i_from ;
21313: LD_ADDR_VAR 0 11
21317: PUSH
21318: LD_VAR 0 1
21322: PUSH
21323: LD_VAR 0 3
21327: MINUS
21328: PUSH
21329: LD_VAR 0 2
21333: PLUS
21334: ST_TO_ADDR
// end ; if not length then
21335: LD_VAR 0 11
21339: NOT
21340: IFFALSE 21344
// exit ;
21342: GO 21502
// tmp := array ;
21344: LD_ADDR_VAR 0 10
21348: PUSH
21349: LD_VAR 0 1
21353: ST_TO_ADDR
// for i = 1 to length do
21354: LD_ADDR_VAR 0 6
21358: PUSH
21359: DOUBLE
21360: LD_INT 1
21362: DEC
21363: ST_TO_ADDR
21364: LD_VAR 0 11
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21490
// begin for j = 1 to array do
21372: LD_ADDR_VAR 0 7
21376: PUSH
21377: DOUBLE
21378: LD_INT 1
21380: DEC
21381: ST_TO_ADDR
21382: LD_VAR 0 1
21386: PUSH
21387: FOR_TO
21388: IFFALSE 21476
// begin k := j + d ;
21390: LD_ADDR_VAR 0 8
21394: PUSH
21395: LD_VAR 0 7
21399: PUSH
21400: LD_VAR 0 9
21404: PLUS
21405: ST_TO_ADDR
// if k > array then
21406: LD_VAR 0 8
21410: PUSH
21411: LD_VAR 0 1
21415: GREATER
21416: IFFALSE 21426
// k := 1 ;
21418: LD_ADDR_VAR 0 8
21422: PUSH
21423: LD_INT 1
21425: ST_TO_ADDR
// if not k then
21426: LD_VAR 0 8
21430: NOT
21431: IFFALSE 21443
// k := array ;
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 1
21442: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21443: LD_ADDR_VAR 0 10
21447: PUSH
21448: LD_VAR 0 10
21452: PPUSH
21453: LD_VAR 0 8
21457: PPUSH
21458: LD_VAR 0 1
21462: PUSH
21463: LD_VAR 0 7
21467: ARRAY
21468: PPUSH
21469: CALL_OW 1
21473: ST_TO_ADDR
// end ;
21474: GO 21387
21476: POP
21477: POP
// array := tmp ;
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_VAR 0 10
21487: ST_TO_ADDR
// end ;
21488: GO 21369
21490: POP
21491: POP
// result := array ;
21492: LD_ADDR_VAR 0 5
21496: PUSH
21497: LD_VAR 0 1
21501: ST_TO_ADDR
// end ;
21502: LD_VAR 0 5
21506: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21507: LD_INT 0
21509: PPUSH
21510: PPUSH
// result := 0 ;
21511: LD_ADDR_VAR 0 3
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// if not array or not value in array then
21519: LD_VAR 0 1
21523: NOT
21524: PUSH
21525: LD_VAR 0 2
21529: PUSH
21530: LD_VAR 0 1
21534: IN
21535: NOT
21536: OR
21537: IFFALSE 21541
// exit ;
21539: GO 21595
// for i = 1 to array do
21541: LD_ADDR_VAR 0 4
21545: PUSH
21546: DOUBLE
21547: LD_INT 1
21549: DEC
21550: ST_TO_ADDR
21551: LD_VAR 0 1
21555: PUSH
21556: FOR_TO
21557: IFFALSE 21593
// if value = array [ i ] then
21559: LD_VAR 0 2
21563: PUSH
21564: LD_VAR 0 1
21568: PUSH
21569: LD_VAR 0 4
21573: ARRAY
21574: EQUAL
21575: IFFALSE 21591
// begin result := i ;
21577: LD_ADDR_VAR 0 3
21581: PUSH
21582: LD_VAR 0 4
21586: ST_TO_ADDR
// exit ;
21587: POP
21588: POP
21589: GO 21595
// end ;
21591: GO 21556
21593: POP
21594: POP
// end ;
21595: LD_VAR 0 3
21599: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21600: LD_INT 0
21602: PPUSH
// vc_chassis := chassis ;
21603: LD_ADDR_OWVAR 37
21607: PUSH
21608: LD_VAR 0 1
21612: ST_TO_ADDR
// vc_engine := engine ;
21613: LD_ADDR_OWVAR 39
21617: PUSH
21618: LD_VAR 0 2
21622: ST_TO_ADDR
// vc_control := control ;
21623: LD_ADDR_OWVAR 38
21627: PUSH
21628: LD_VAR 0 3
21632: ST_TO_ADDR
// vc_weapon := weapon ;
21633: LD_ADDR_OWVAR 40
21637: PUSH
21638: LD_VAR 0 4
21642: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21643: LD_ADDR_OWVAR 41
21647: PUSH
21648: LD_VAR 0 5
21652: ST_TO_ADDR
// end ;
21653: LD_VAR 0 6
21657: RET
// export function WantPlant ( unit ) ; var task ; begin
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
// result := false ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 437
21684: ST_TO_ADDR
// if task then
21685: LD_VAR 0 3
21689: IFFALSE 21717
// if task [ 1 ] [ 1 ] = p then
21691: LD_VAR 0 3
21695: PUSH
21696: LD_INT 1
21698: ARRAY
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: PUSH
21704: LD_STRING p
21706: EQUAL
21707: IFFALSE 21717
// result := true ;
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: LD_INT 1
21716: ST_TO_ADDR
// end ;
21717: LD_VAR 0 2
21721: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21722: LD_INT 0
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
// if pos < 1 then
21728: LD_VAR 0 2
21732: PUSH
21733: LD_INT 1
21735: LESS
21736: IFFALSE 21740
// exit ;
21738: GO 22043
// if pos = 1 then
21740: LD_VAR 0 2
21744: PUSH
21745: LD_INT 1
21747: EQUAL
21748: IFFALSE 21781
// result := Replace ( arr , pos [ 1 ] , value ) else
21750: LD_ADDR_VAR 0 4
21754: PUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_VAR 0 2
21764: PUSH
21765: LD_INT 1
21767: ARRAY
21768: PPUSH
21769: LD_VAR 0 3
21773: PPUSH
21774: CALL_OW 1
21778: ST_TO_ADDR
21779: GO 22043
// begin tmp := arr ;
21781: LD_ADDR_VAR 0 6
21785: PUSH
21786: LD_VAR 0 1
21790: ST_TO_ADDR
// s_arr := [ tmp ] ;
21791: LD_ADDR_VAR 0 7
21795: PUSH
21796: LD_VAR 0 6
21800: PUSH
21801: EMPTY
21802: LIST
21803: ST_TO_ADDR
// for i = 1 to pos - 1 do
21804: LD_ADDR_VAR 0 5
21808: PUSH
21809: DOUBLE
21810: LD_INT 1
21812: DEC
21813: ST_TO_ADDR
21814: LD_VAR 0 2
21818: PUSH
21819: LD_INT 1
21821: MINUS
21822: PUSH
21823: FOR_TO
21824: IFFALSE 21869
// begin tmp := tmp [ pos [ i ] ] ;
21826: LD_ADDR_VAR 0 6
21830: PUSH
21831: LD_VAR 0 6
21835: PUSH
21836: LD_VAR 0 2
21840: PUSH
21841: LD_VAR 0 5
21845: ARRAY
21846: ARRAY
21847: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21848: LD_ADDR_VAR 0 7
21852: PUSH
21853: LD_VAR 0 7
21857: PUSH
21858: LD_VAR 0 6
21862: PUSH
21863: EMPTY
21864: LIST
21865: ADD
21866: ST_TO_ADDR
// end ;
21867: GO 21823
21869: POP
21870: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21871: LD_ADDR_VAR 0 6
21875: PUSH
21876: LD_VAR 0 6
21880: PPUSH
21881: LD_VAR 0 2
21885: PUSH
21886: LD_VAR 0 2
21890: ARRAY
21891: PPUSH
21892: LD_VAR 0 3
21896: PPUSH
21897: CALL_OW 1
21901: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21902: LD_ADDR_VAR 0 7
21906: PUSH
21907: LD_VAR 0 7
21911: PPUSH
21912: LD_VAR 0 7
21916: PPUSH
21917: LD_VAR 0 6
21921: PPUSH
21922: CALL_OW 1
21926: ST_TO_ADDR
// for i = s_arr downto 2 do
21927: LD_ADDR_VAR 0 5
21931: PUSH
21932: DOUBLE
21933: LD_VAR 0 7
21937: INC
21938: ST_TO_ADDR
21939: LD_INT 2
21941: PUSH
21942: FOR_DOWNTO
21943: IFFALSE 22027
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21945: LD_ADDR_VAR 0 6
21949: PUSH
21950: LD_VAR 0 7
21954: PUSH
21955: LD_VAR 0 5
21959: PUSH
21960: LD_INT 1
21962: MINUS
21963: ARRAY
21964: PPUSH
21965: LD_VAR 0 2
21969: PUSH
21970: LD_VAR 0 5
21974: PUSH
21975: LD_INT 1
21977: MINUS
21978: ARRAY
21979: PPUSH
21980: LD_VAR 0 7
21984: PUSH
21985: LD_VAR 0 5
21989: ARRAY
21990: PPUSH
21991: CALL_OW 1
21995: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21996: LD_ADDR_VAR 0 7
22000: PUSH
22001: LD_VAR 0 7
22005: PPUSH
22006: LD_VAR 0 5
22010: PUSH
22011: LD_INT 1
22013: MINUS
22014: PPUSH
22015: LD_VAR 0 6
22019: PPUSH
22020: CALL_OW 1
22024: ST_TO_ADDR
// end ;
22025: GO 21942
22027: POP
22028: POP
// result := s_arr [ 1 ] ;
22029: LD_ADDR_VAR 0 4
22033: PUSH
22034: LD_VAR 0 7
22038: PUSH
22039: LD_INT 1
22041: ARRAY
22042: ST_TO_ADDR
// end ; end ;
22043: LD_VAR 0 4
22047: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
// if not list then
22052: LD_VAR 0 1
22056: NOT
22057: IFFALSE 22061
// exit ;
22059: GO 22152
// i := list [ pos1 ] ;
22061: LD_ADDR_VAR 0 5
22065: PUSH
22066: LD_VAR 0 1
22070: PUSH
22071: LD_VAR 0 2
22075: ARRAY
22076: ST_TO_ADDR
// if not i then
22077: LD_VAR 0 5
22081: NOT
22082: IFFALSE 22086
// exit ;
22084: GO 22152
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22086: LD_ADDR_VAR 0 1
22090: PUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: LD_VAR 0 2
22100: PPUSH
22101: LD_VAR 0 1
22105: PUSH
22106: LD_VAR 0 3
22110: ARRAY
22111: PPUSH
22112: CALL_OW 1
22116: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22117: LD_ADDR_VAR 0 1
22121: PUSH
22122: LD_VAR 0 1
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_VAR 0 5
22136: PPUSH
22137: CALL_OW 1
22141: ST_TO_ADDR
// result := list ;
22142: LD_ADDR_VAR 0 4
22146: PUSH
22147: LD_VAR 0 1
22151: ST_TO_ADDR
// end ;
22152: LD_VAR 0 4
22156: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22157: LD_INT 0
22159: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22160: LD_ADDR_VAR 0 5
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 250
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 251
22184: PPUSH
22185: LD_VAR 0 2
22189: PPUSH
22190: LD_VAR 0 3
22194: PPUSH
22195: LD_VAR 0 4
22199: PPUSH
22200: CALL 22210 0 5
22204: ST_TO_ADDR
// end ;
22205: LD_VAR 0 5
22209: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
22214: PPUSH
22215: PPUSH
// if not list then
22216: LD_VAR 0 3
22220: NOT
22221: IFFALSE 22225
// exit ;
22223: GO 22613
// result := [ ] ;
22225: LD_ADDR_VAR 0 6
22229: PUSH
22230: EMPTY
22231: ST_TO_ADDR
// for i in list do
22232: LD_ADDR_VAR 0 7
22236: PUSH
22237: LD_VAR 0 3
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22445
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22245: LD_ADDR_VAR 0 9
22249: PUSH
22250: LD_VAR 0 7
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_VAR 0 2
22264: PPUSH
22265: CALL_OW 297
22269: ST_TO_ADDR
// if not result then
22270: LD_VAR 0 6
22274: NOT
22275: IFFALSE 22301
// result := [ [ i , tmp ] ] else
22277: LD_ADDR_VAR 0 6
22281: PUSH
22282: LD_VAR 0 7
22286: PUSH
22287: LD_VAR 0 9
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: ST_TO_ADDR
22299: GO 22443
// begin if result [ result ] [ 2 ] < tmp then
22301: LD_VAR 0 6
22305: PUSH
22306: LD_VAR 0 6
22310: ARRAY
22311: PUSH
22312: LD_INT 2
22314: ARRAY
22315: PUSH
22316: LD_VAR 0 9
22320: LESS
22321: IFFALSE 22363
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22323: LD_ADDR_VAR 0 6
22327: PUSH
22328: LD_VAR 0 6
22332: PPUSH
22333: LD_VAR 0 6
22337: PUSH
22338: LD_INT 1
22340: PLUS
22341: PPUSH
22342: LD_VAR 0 7
22346: PUSH
22347: LD_VAR 0 9
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PPUSH
22356: CALL_OW 2
22360: ST_TO_ADDR
22361: GO 22443
// for j = 1 to result do
22363: LD_ADDR_VAR 0 8
22367: PUSH
22368: DOUBLE
22369: LD_INT 1
22371: DEC
22372: ST_TO_ADDR
22373: LD_VAR 0 6
22377: PUSH
22378: FOR_TO
22379: IFFALSE 22441
// begin if tmp < result [ j ] [ 2 ] then
22381: LD_VAR 0 9
22385: PUSH
22386: LD_VAR 0 6
22390: PUSH
22391: LD_VAR 0 8
22395: ARRAY
22396: PUSH
22397: LD_INT 2
22399: ARRAY
22400: LESS
22401: IFFALSE 22439
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22403: LD_ADDR_VAR 0 6
22407: PUSH
22408: LD_VAR 0 6
22412: PPUSH
22413: LD_VAR 0 8
22417: PPUSH
22418: LD_VAR 0 7
22422: PUSH
22423: LD_VAR 0 9
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 2
22436: ST_TO_ADDR
// break ;
22437: GO 22441
// end ; end ;
22439: GO 22378
22441: POP
22442: POP
// end ; end ;
22443: GO 22242
22445: POP
22446: POP
// if result and not asc then
22447: LD_VAR 0 6
22451: PUSH
22452: LD_VAR 0 4
22456: NOT
22457: AND
22458: IFFALSE 22533
// begin tmp := result ;
22460: LD_ADDR_VAR 0 9
22464: PUSH
22465: LD_VAR 0 6
22469: ST_TO_ADDR
// for i = tmp downto 1 do
22470: LD_ADDR_VAR 0 7
22474: PUSH
22475: DOUBLE
22476: LD_VAR 0 9
22480: INC
22481: ST_TO_ADDR
22482: LD_INT 1
22484: PUSH
22485: FOR_DOWNTO
22486: IFFALSE 22531
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22488: LD_ADDR_VAR 0 6
22492: PUSH
22493: LD_VAR 0 6
22497: PPUSH
22498: LD_VAR 0 9
22502: PUSH
22503: LD_VAR 0 7
22507: MINUS
22508: PUSH
22509: LD_INT 1
22511: PLUS
22512: PPUSH
22513: LD_VAR 0 9
22517: PUSH
22518: LD_VAR 0 7
22522: ARRAY
22523: PPUSH
22524: CALL_OW 1
22528: ST_TO_ADDR
22529: GO 22485
22531: POP
22532: POP
// end ; tmp := [ ] ;
22533: LD_ADDR_VAR 0 9
22537: PUSH
22538: EMPTY
22539: ST_TO_ADDR
// if mode then
22540: LD_VAR 0 5
22544: IFFALSE 22613
// begin for i = 1 to result do
22546: LD_ADDR_VAR 0 7
22550: PUSH
22551: DOUBLE
22552: LD_INT 1
22554: DEC
22555: ST_TO_ADDR
22556: LD_VAR 0 6
22560: PUSH
22561: FOR_TO
22562: IFFALSE 22601
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22564: LD_ADDR_VAR 0 9
22568: PUSH
22569: LD_VAR 0 9
22573: PPUSH
22574: LD_VAR 0 7
22578: PPUSH
22579: LD_VAR 0 6
22583: PUSH
22584: LD_VAR 0 7
22588: ARRAY
22589: PUSH
22590: LD_INT 1
22592: ARRAY
22593: PPUSH
22594: CALL_OW 1
22598: ST_TO_ADDR
22599: GO 22561
22601: POP
22602: POP
// result := tmp ;
22603: LD_ADDR_VAR 0 6
22607: PUSH
22608: LD_VAR 0 9
22612: ST_TO_ADDR
// end ; end ;
22613: LD_VAR 0 6
22617: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22626: LD_ADDR_VAR 0 5
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 0
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
// if not x or not y then
22648: LD_VAR 0 2
22652: NOT
22653: PUSH
22654: LD_VAR 0 3
22658: NOT
22659: OR
22660: IFFALSE 22664
// exit ;
22662: GO 24310
// if not range then
22664: LD_VAR 0 4
22668: NOT
22669: IFFALSE 22679
// range := 10 ;
22671: LD_ADDR_VAR 0 4
22675: PUSH
22676: LD_INT 10
22678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22679: LD_ADDR_VAR 0 8
22683: PUSH
22684: LD_INT 81
22686: PUSH
22687: LD_VAR 0 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 92
22698: PUSH
22699: LD_VAR 0 2
22703: PUSH
22704: LD_VAR 0 3
22708: PUSH
22709: LD_VAR 0 4
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 21
22725: PUSH
22726: LD_INT 3
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: PPUSH
22742: CALL_OW 69
22746: ST_TO_ADDR
// if not tmp then
22747: LD_VAR 0 8
22751: NOT
22752: IFFALSE 22756
// exit ;
22754: GO 24310
// for i in tmp do
22756: LD_ADDR_VAR 0 6
22760: PUSH
22761: LD_VAR 0 8
22765: PUSH
22766: FOR_IN
22767: IFFALSE 24285
// begin points := [ 0 , 0 , 0 ] ;
22769: LD_ADDR_VAR 0 9
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: ST_TO_ADDR
// bpoints := 1 ;
22788: LD_ADDR_VAR 0 10
22792: PUSH
22793: LD_INT 1
22795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22796: LD_VAR 0 6
22800: PPUSH
22801: CALL_OW 247
22805: PUSH
22806: LD_INT 1
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 23392
22814: POP
// begin if GetClass ( i ) = 1 then
22815: LD_VAR 0 6
22819: PPUSH
22820: CALL_OW 257
22824: PUSH
22825: LD_INT 1
22827: EQUAL
22828: IFFALSE 22849
// points := [ 10 , 5 , 3 ] ;
22830: LD_ADDR_VAR 0 9
22834: PUSH
22835: LD_INT 10
22837: PUSH
22838: LD_INT 5
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22849: LD_VAR 0 6
22853: PPUSH
22854: CALL_OW 257
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 4
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: IN
22873: IFFALSE 22894
// points := [ 3 , 2 , 1 ] ;
22875: LD_ADDR_VAR 0 9
22879: PUSH
22880: LD_INT 3
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22894: LD_VAR 0 6
22898: PPUSH
22899: CALL_OW 257
22903: PUSH
22904: LD_INT 5
22906: EQUAL
22907: IFFALSE 22928
// points := [ 130 , 5 , 2 ] ;
22909: LD_ADDR_VAR 0 9
22913: PUSH
22914: LD_INT 130
22916: PUSH
22917: LD_INT 5
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22928: LD_VAR 0 6
22932: PPUSH
22933: CALL_OW 257
22937: PUSH
22938: LD_INT 8
22940: EQUAL
22941: IFFALSE 22962
// points := [ 35 , 35 , 30 ] ;
22943: LD_ADDR_VAR 0 9
22947: PUSH
22948: LD_INT 35
22950: PUSH
22951: LD_INT 35
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22962: LD_VAR 0 6
22966: PPUSH
22967: CALL_OW 257
22971: PUSH
22972: LD_INT 9
22974: EQUAL
22975: IFFALSE 22996
// points := [ 20 , 55 , 40 ] ;
22977: LD_ADDR_VAR 0 9
22981: PUSH
22982: LD_INT 20
22984: PUSH
22985: LD_INT 55
22987: PUSH
22988: LD_INT 40
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22996: LD_VAR 0 6
23000: PPUSH
23001: CALL_OW 257
23005: PUSH
23006: LD_INT 12
23008: PUSH
23009: LD_INT 16
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: IN
23016: IFFALSE 23037
// points := [ 5 , 3 , 2 ] ;
23018: LD_ADDR_VAR 0 9
23022: PUSH
23023: LD_INT 5
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23037: LD_VAR 0 6
23041: PPUSH
23042: CALL_OW 257
23046: PUSH
23047: LD_INT 17
23049: EQUAL
23050: IFFALSE 23071
// points := [ 100 , 50 , 75 ] ;
23052: LD_ADDR_VAR 0 9
23056: PUSH
23057: LD_INT 100
23059: PUSH
23060: LD_INT 50
23062: PUSH
23063: LD_INT 75
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23071: LD_VAR 0 6
23075: PPUSH
23076: CALL_OW 257
23080: PUSH
23081: LD_INT 15
23083: EQUAL
23084: IFFALSE 23105
// points := [ 10 , 5 , 3 ] ;
23086: LD_ADDR_VAR 0 9
23090: PUSH
23091: LD_INT 10
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23105: LD_VAR 0 6
23109: PPUSH
23110: CALL_OW 257
23114: PUSH
23115: LD_INT 14
23117: EQUAL
23118: IFFALSE 23139
// points := [ 10 , 0 , 0 ] ;
23120: LD_ADDR_VAR 0 9
23124: PUSH
23125: LD_INT 10
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23139: LD_VAR 0 6
23143: PPUSH
23144: CALL_OW 257
23148: PUSH
23149: LD_INT 11
23151: EQUAL
23152: IFFALSE 23173
// points := [ 30 , 10 , 5 ] ;
23154: LD_ADDR_VAR 0 9
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 10
23164: PUSH
23165: LD_INT 5
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23173: LD_VAR 0 1
23177: PPUSH
23178: LD_INT 5
23180: PPUSH
23181: CALL_OW 321
23185: PUSH
23186: LD_INT 2
23188: EQUAL
23189: IFFALSE 23206
// bpoints := bpoints * 1.8 ;
23191: LD_ADDR_VAR 0 10
23195: PUSH
23196: LD_VAR 0 10
23200: PUSH
23201: LD_REAL  1.80000000000000E+0000
23204: MUL
23205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23206: LD_VAR 0 6
23210: PPUSH
23211: CALL_OW 257
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 2
23221: PUSH
23222: LD_INT 3
23224: PUSH
23225: LD_INT 4
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: IN
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: LD_INT 51
23242: PPUSH
23243: CALL_OW 321
23247: PUSH
23248: LD_INT 2
23250: EQUAL
23251: AND
23252: IFFALSE 23269
// bpoints := bpoints * 1.2 ;
23254: LD_ADDR_VAR 0 10
23258: PUSH
23259: LD_VAR 0 10
23263: PUSH
23264: LD_REAL  1.20000000000000E+0000
23267: MUL
23268: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23269: LD_VAR 0 6
23273: PPUSH
23274: CALL_OW 257
23278: PUSH
23279: LD_INT 5
23281: PUSH
23282: LD_INT 7
23284: PUSH
23285: LD_INT 9
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: IN
23293: PUSH
23294: LD_VAR 0 1
23298: PPUSH
23299: LD_INT 52
23301: PPUSH
23302: CALL_OW 321
23306: PUSH
23307: LD_INT 2
23309: EQUAL
23310: AND
23311: IFFALSE 23328
// bpoints := bpoints * 1.5 ;
23313: LD_ADDR_VAR 0 10
23317: PUSH
23318: LD_VAR 0 10
23322: PUSH
23323: LD_REAL  1.50000000000000E+0000
23326: MUL
23327: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_INT 66
23335: PPUSH
23336: CALL_OW 321
23340: PUSH
23341: LD_INT 2
23343: EQUAL
23344: IFFALSE 23361
// bpoints := bpoints * 1.1 ;
23346: LD_ADDR_VAR 0 10
23350: PUSH
23351: LD_VAR 0 10
23355: PUSH
23356: LD_REAL  1.10000000000000E+0000
23359: MUL
23360: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23361: LD_ADDR_VAR 0 10
23365: PUSH
23366: LD_VAR 0 10
23370: PUSH
23371: LD_VAR 0 6
23375: PPUSH
23376: LD_INT 1
23378: PPUSH
23379: CALL_OW 259
23383: PUSH
23384: LD_REAL  1.15000000000000E+0000
23387: MUL
23388: MUL
23389: ST_TO_ADDR
// end ; unit_vehicle :
23390: GO 24214
23392: LD_INT 2
23394: DOUBLE
23395: EQUAL
23396: IFTRUE 23400
23398: GO 24202
23400: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23401: LD_VAR 0 6
23405: PPUSH
23406: CALL_OW 264
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: LD_INT 42
23416: PUSH
23417: LD_INT 24
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: IN
23425: IFFALSE 23446
// points := [ 25 , 5 , 3 ] ;
23427: LD_ADDR_VAR 0 9
23431: PUSH
23432: LD_INT 25
23434: PUSH
23435: LD_INT 5
23437: PUSH
23438: LD_INT 3
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23446: LD_VAR 0 6
23450: PPUSH
23451: CALL_OW 264
23455: PUSH
23456: LD_INT 4
23458: PUSH
23459: LD_INT 43
23461: PUSH
23462: LD_INT 25
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: IN
23470: IFFALSE 23491
// points := [ 40 , 15 , 5 ] ;
23472: LD_ADDR_VAR 0 9
23476: PUSH
23477: LD_INT 40
23479: PUSH
23480: LD_INT 15
23482: PUSH
23483: LD_INT 5
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23491: LD_VAR 0 6
23495: PPUSH
23496: CALL_OW 264
23500: PUSH
23501: LD_INT 3
23503: PUSH
23504: LD_INT 23
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: IN
23511: IFFALSE 23532
// points := [ 7 , 25 , 8 ] ;
23513: LD_ADDR_VAR 0 9
23517: PUSH
23518: LD_INT 7
23520: PUSH
23521: LD_INT 25
23523: PUSH
23524: LD_INT 8
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 264
23541: PUSH
23542: LD_INT 5
23544: PUSH
23545: LD_INT 27
23547: PUSH
23548: LD_INT 44
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: IN
23556: IFFALSE 23577
// points := [ 14 , 50 , 16 ] ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_INT 14
23565: PUSH
23566: LD_INT 50
23568: PUSH
23569: LD_INT 16
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23577: LD_VAR 0 6
23581: PPUSH
23582: CALL_OW 264
23586: PUSH
23587: LD_INT 6
23589: PUSH
23590: LD_INT 46
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: IN
23597: IFFALSE 23618
// points := [ 32 , 120 , 70 ] ;
23599: LD_ADDR_VAR 0 9
23603: PUSH
23604: LD_INT 32
23606: PUSH
23607: LD_INT 120
23609: PUSH
23610: LD_INT 70
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
23618: LD_VAR 0 6
23622: PPUSH
23623: CALL_OW 264
23627: PUSH
23628: LD_INT 7
23630: PUSH
23631: LD_INT 28
23633: PUSH
23634: LD_INT 45
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: IN
23642: IFFALSE 23663
// points := [ 35 , 20 , 45 ] ;
23644: LD_ADDR_VAR 0 9
23648: PUSH
23649: LD_INT 35
23651: PUSH
23652: LD_INT 20
23654: PUSH
23655: LD_INT 45
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 47
23675: PUSH
23676: EMPTY
23677: LIST
23678: IN
23679: IFFALSE 23700
// points := [ 67 , 45 , 75 ] ;
23681: LD_ADDR_VAR 0 9
23685: PUSH
23686: LD_INT 67
23688: PUSH
23689: LD_INT 45
23691: PUSH
23692: LD_INT 75
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23700: LD_VAR 0 6
23704: PPUSH
23705: CALL_OW 264
23709: PUSH
23710: LD_INT 26
23712: PUSH
23713: EMPTY
23714: LIST
23715: IN
23716: IFFALSE 23737
// points := [ 120 , 30 , 80 ] ;
23718: LD_ADDR_VAR 0 9
23722: PUSH
23723: LD_INT 120
23725: PUSH
23726: LD_INT 30
23728: PUSH
23729: LD_INT 80
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23737: LD_VAR 0 6
23741: PPUSH
23742: CALL_OW 264
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: EMPTY
23751: LIST
23752: IN
23753: IFFALSE 23774
// points := [ 40 , 1 , 1 ] ;
23755: LD_ADDR_VAR 0 9
23759: PUSH
23760: LD_INT 40
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23774: LD_VAR 0 6
23778: PPUSH
23779: CALL_OW 264
23783: PUSH
23784: LD_INT 29
23786: PUSH
23787: EMPTY
23788: LIST
23789: IN
23790: IFFALSE 23811
// points := [ 70 , 200 , 400 ] ;
23792: LD_ADDR_VAR 0 9
23796: PUSH
23797: LD_INT 70
23799: PUSH
23800: LD_INT 200
23802: PUSH
23803: LD_INT 400
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23811: LD_VAR 0 6
23815: PPUSH
23816: CALL_OW 264
23820: PUSH
23821: LD_INT 14
23823: PUSH
23824: LD_INT 53
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: IN
23831: IFFALSE 23852
// points := [ 40 , 10 , 20 ] ;
23833: LD_ADDR_VAR 0 9
23837: PUSH
23838: LD_INT 40
23840: PUSH
23841: LD_INT 10
23843: PUSH
23844: LD_INT 20
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23852: LD_VAR 0 6
23856: PPUSH
23857: CALL_OW 264
23861: PUSH
23862: LD_INT 9
23864: PUSH
23865: EMPTY
23866: LIST
23867: IN
23868: IFFALSE 23889
// points := [ 5 , 70 , 20 ] ;
23870: LD_ADDR_VAR 0 9
23874: PUSH
23875: LD_INT 5
23877: PUSH
23878: LD_INT 70
23880: PUSH
23881: LD_INT 20
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23889: LD_VAR 0 6
23893: PPUSH
23894: CALL_OW 264
23898: PUSH
23899: LD_INT 10
23901: PUSH
23902: EMPTY
23903: LIST
23904: IN
23905: IFFALSE 23926
// points := [ 35 , 110 , 70 ] ;
23907: LD_ADDR_VAR 0 9
23911: PUSH
23912: LD_INT 35
23914: PUSH
23915: LD_INT 110
23917: PUSH
23918: LD_INT 70
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23926: LD_VAR 0 6
23930: PPUSH
23931: CALL_OW 265
23935: PUSH
23936: LD_INT 25
23938: EQUAL
23939: IFFALSE 23960
// points := [ 80 , 65 , 100 ] ;
23941: LD_ADDR_VAR 0 9
23945: PUSH
23946: LD_INT 80
23948: PUSH
23949: LD_INT 65
23951: PUSH
23952: LD_INT 100
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23960: LD_VAR 0 6
23964: PPUSH
23965: CALL_OW 263
23969: PUSH
23970: LD_INT 1
23972: EQUAL
23973: IFFALSE 24008
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23975: LD_ADDR_VAR 0 10
23979: PUSH
23980: LD_VAR 0 10
23984: PUSH
23985: LD_VAR 0 6
23989: PPUSH
23990: CALL_OW 311
23994: PPUSH
23995: LD_INT 3
23997: PPUSH
23998: CALL_OW 259
24002: PUSH
24003: LD_INT 4
24005: MUL
24006: MUL
24007: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24008: LD_VAR 0 6
24012: PPUSH
24013: CALL_OW 263
24017: PUSH
24018: LD_INT 2
24020: EQUAL
24021: IFFALSE 24072
// begin j := IsControledBy ( i ) ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_VAR 0 6
24032: PPUSH
24033: CALL_OW 312
24037: ST_TO_ADDR
// if j then
24038: LD_VAR 0 7
24042: IFFALSE 24072
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24044: LD_ADDR_VAR 0 10
24048: PUSH
24049: LD_VAR 0 10
24053: PUSH
24054: LD_VAR 0 7
24058: PPUSH
24059: LD_INT 3
24061: PPUSH
24062: CALL_OW 259
24066: PUSH
24067: LD_INT 3
24069: MUL
24070: MUL
24071: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24072: LD_VAR 0 6
24076: PPUSH
24077: CALL_OW 264
24081: PUSH
24082: LD_INT 5
24084: PUSH
24085: LD_INT 6
24087: PUSH
24088: LD_INT 46
24090: PUSH
24091: LD_INT 44
24093: PUSH
24094: LD_INT 47
24096: PUSH
24097: LD_INT 45
24099: PUSH
24100: LD_INT 28
24102: PUSH
24103: LD_INT 7
24105: PUSH
24106: LD_INT 27
24108: PUSH
24109: LD_INT 29
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: IN
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_INT 52
24132: PPUSH
24133: CALL_OW 321
24137: PUSH
24138: LD_INT 2
24140: EQUAL
24141: AND
24142: IFFALSE 24159
// bpoints := bpoints * 1.2 ;
24144: LD_ADDR_VAR 0 10
24148: PUSH
24149: LD_VAR 0 10
24153: PUSH
24154: LD_REAL  1.20000000000000E+0000
24157: MUL
24158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24159: LD_VAR 0 6
24163: PPUSH
24164: CALL_OW 264
24168: PUSH
24169: LD_INT 6
24171: PUSH
24172: LD_INT 46
24174: PUSH
24175: LD_INT 47
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: IN
24183: IFFALSE 24200
// bpoints := bpoints * 1.2 ;
24185: LD_ADDR_VAR 0 10
24189: PUSH
24190: LD_VAR 0 10
24194: PUSH
24195: LD_REAL  1.20000000000000E+0000
24198: MUL
24199: ST_TO_ADDR
// end ; unit_building :
24200: GO 24214
24202: LD_INT 3
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24213
24210: POP
// ; end ;
24211: GO 24214
24213: POP
// for j = 1 to 3 do
24214: LD_ADDR_VAR 0 7
24218: PUSH
24219: DOUBLE
24220: LD_INT 1
24222: DEC
24223: ST_TO_ADDR
24224: LD_INT 3
24226: PUSH
24227: FOR_TO
24228: IFFALSE 24281
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24230: LD_ADDR_VAR 0 5
24234: PUSH
24235: LD_VAR 0 5
24239: PPUSH
24240: LD_VAR 0 7
24244: PPUSH
24245: LD_VAR 0 5
24249: PUSH
24250: LD_VAR 0 7
24254: ARRAY
24255: PUSH
24256: LD_VAR 0 9
24260: PUSH
24261: LD_VAR 0 7
24265: ARRAY
24266: PUSH
24267: LD_VAR 0 10
24271: MUL
24272: PLUS
24273: PPUSH
24274: CALL_OW 1
24278: ST_TO_ADDR
24279: GO 24227
24281: POP
24282: POP
// end ;
24283: GO 22766
24285: POP
24286: POP
// result := Replace ( result , 4 , tmp ) ;
24287: LD_ADDR_VAR 0 5
24291: PUSH
24292: LD_VAR 0 5
24296: PPUSH
24297: LD_INT 4
24299: PPUSH
24300: LD_VAR 0 8
24304: PPUSH
24305: CALL_OW 1
24309: ST_TO_ADDR
// end ;
24310: LD_VAR 0 5
24314: RET
// export function DangerAtRange ( unit , range ) ; begin
24315: LD_INT 0
24317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 255
24332: PPUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 250
24342: PPUSH
24343: LD_VAR 0 1
24347: PPUSH
24348: CALL_OW 251
24352: PPUSH
24353: LD_VAR 0 2
24357: PPUSH
24358: CALL 22618 0 4
24362: ST_TO_ADDR
// end ;
24363: LD_VAR 0 3
24367: RET
// export function DangerInArea ( side , area ) ; begin
24368: LD_INT 0
24370: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24371: LD_ADDR_VAR 0 3
24375: PUSH
24376: LD_VAR 0 2
24380: PPUSH
24381: LD_INT 81
24383: PUSH
24384: LD_VAR 0 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 70
24397: ST_TO_ADDR
// end ;
24398: LD_VAR 0 3
24402: RET
// export function IsExtension ( b ) ; begin
24403: LD_INT 0
24405: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24406: LD_ADDR_VAR 0 2
24410: PUSH
24411: LD_VAR 0 1
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 20
24421: PUSH
24422: LD_INT 22
24424: PUSH
24425: LD_INT 17
24427: PUSH
24428: LD_INT 24
24430: PUSH
24431: LD_INT 21
24433: PUSH
24434: LD_INT 19
24436: PUSH
24437: LD_INT 16
24439: PUSH
24440: LD_INT 25
24442: PUSH
24443: LD_INT 18
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: IN
24458: ST_TO_ADDR
// end ;
24459: LD_VAR 0 2
24463: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
24468: PPUSH
// result := [ ] ;
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: EMPTY
24475: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24476: LD_ADDR_VAR 0 4
24480: PUSH
24481: LD_VAR 0 2
24485: PPUSH
24486: LD_INT 21
24488: PUSH
24489: LD_INT 3
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: CALL_OW 70
24500: ST_TO_ADDR
// if not tmp then
24501: LD_VAR 0 4
24505: NOT
24506: IFFALSE 24510
// exit ;
24508: GO 24568
// for i in tmp do
24510: LD_ADDR_VAR 0 5
24514: PUSH
24515: LD_VAR 0 4
24519: PUSH
24520: FOR_IN
24521: IFFALSE 24556
// if GetBase ( i ) <> base then
24523: LD_VAR 0 5
24527: PPUSH
24528: CALL_OW 274
24532: PUSH
24533: LD_VAR 0 1
24537: NONEQUAL
24538: IFFALSE 24554
// ComLinkToBase ( base , i ) ;
24540: LD_VAR 0 1
24544: PPUSH
24545: LD_VAR 0 5
24549: PPUSH
24550: CALL_OW 169
24554: GO 24520
24556: POP
24557: POP
// result := tmp ;
24558: LD_ADDR_VAR 0 3
24562: PUSH
24563: LD_VAR 0 4
24567: ST_TO_ADDR
// end ;
24568: LD_VAR 0 3
24572: RET
// export function ComComplete ( unit , b ) ; var i ; begin
24573: LD_INT 0
24575: PPUSH
24576: PPUSH
// if BuildingStatus ( b ) = bs_build then
24577: LD_VAR 0 2
24581: PPUSH
24582: CALL_OW 461
24586: PUSH
24587: LD_INT 1
24589: EQUAL
24590: IFFALSE 24650
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24592: LD_VAR 0 1
24596: PPUSH
24597: LD_STRING h
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: CALL_OW 250
24609: PUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: CALL_OW 251
24619: PUSH
24620: LD_VAR 0 2
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: PPUSH
24646: CALL_OW 446
// end ;
24650: LD_VAR 0 3
24654: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24655: LD_INT 0
24657: PPUSH
24658: PPUSH
24659: PPUSH
24660: PPUSH
24661: PPUSH
24662: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
24663: LD_VAR 0 1
24667: NOT
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 263
24678: PUSH
24679: LD_INT 2
24681: EQUAL
24682: NOT
24683: OR
24684: IFFALSE 24688
// exit ;
24686: GO 25004
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24688: LD_ADDR_VAR 0 6
24692: PUSH
24693: LD_INT 22
24695: PUSH
24696: LD_VAR 0 1
24700: PPUSH
24701: CALL_OW 255
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 30
24715: PUSH
24716: LD_INT 36
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 34
24725: PUSH
24726: LD_INT 31
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL_OW 69
24746: ST_TO_ADDR
// if not tmp then
24747: LD_VAR 0 6
24751: NOT
24752: IFFALSE 24756
// exit ;
24754: GO 25004
// result := [ ] ;
24756: LD_ADDR_VAR 0 2
24760: PUSH
24761: EMPTY
24762: ST_TO_ADDR
// for i in tmp do
24763: LD_ADDR_VAR 0 3
24767: PUSH
24768: LD_VAR 0 6
24772: PUSH
24773: FOR_IN
24774: IFFALSE 24845
// begin t := UnitsInside ( i ) ;
24776: LD_ADDR_VAR 0 4
24780: PUSH
24781: LD_VAR 0 3
24785: PPUSH
24786: CALL_OW 313
24790: ST_TO_ADDR
// if t then
24791: LD_VAR 0 4
24795: IFFALSE 24843
// for j in t do
24797: LD_ADDR_VAR 0 7
24801: PUSH
24802: LD_VAR 0 4
24806: PUSH
24807: FOR_IN
24808: IFFALSE 24841
// result := Insert ( result , result + 1 , j ) ;
24810: LD_ADDR_VAR 0 2
24814: PUSH
24815: LD_VAR 0 2
24819: PPUSH
24820: LD_VAR 0 2
24824: PUSH
24825: LD_INT 1
24827: PLUS
24828: PPUSH
24829: LD_VAR 0 7
24833: PPUSH
24834: CALL_OW 2
24838: ST_TO_ADDR
24839: GO 24807
24841: POP
24842: POP
// end ;
24843: GO 24773
24845: POP
24846: POP
// if not result then
24847: LD_VAR 0 2
24851: NOT
24852: IFFALSE 24856
// exit ;
24854: GO 25004
// mech := result [ 1 ] ;
24856: LD_ADDR_VAR 0 5
24860: PUSH
24861: LD_VAR 0 2
24865: PUSH
24866: LD_INT 1
24868: ARRAY
24869: ST_TO_ADDR
// if result > 1 then
24870: LD_VAR 0 2
24874: PUSH
24875: LD_INT 1
24877: GREATER
24878: IFFALSE 24990
// for i = 2 to result do
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: DOUBLE
24886: LD_INT 2
24888: DEC
24889: ST_TO_ADDR
24890: LD_VAR 0 2
24894: PUSH
24895: FOR_TO
24896: IFFALSE 24988
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24898: LD_ADDR_VAR 0 4
24902: PUSH
24903: LD_VAR 0 2
24907: PUSH
24908: LD_VAR 0 3
24912: ARRAY
24913: PPUSH
24914: LD_INT 3
24916: PPUSH
24917: CALL_OW 259
24921: PUSH
24922: LD_VAR 0 2
24926: PUSH
24927: LD_VAR 0 3
24931: ARRAY
24932: PPUSH
24933: CALL_OW 432
24937: MINUS
24938: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24939: LD_VAR 0 4
24943: PUSH
24944: LD_VAR 0 5
24948: PPUSH
24949: LD_INT 3
24951: PPUSH
24952: CALL_OW 259
24956: PUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: CALL_OW 432
24966: MINUS
24967: GREATEREQUAL
24968: IFFALSE 24986
// mech := result [ i ] ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_VAR 0 2
24979: PUSH
24980: LD_VAR 0 3
24984: ARRAY
24985: ST_TO_ADDR
// end ;
24986: GO 24895
24988: POP
24989: POP
// ComLinkTo ( vehicle , mech ) ;
24990: LD_VAR 0 1
24994: PPUSH
24995: LD_VAR 0 5
24999: PPUSH
25000: CALL_OW 135
// end ;
25004: LD_VAR 0 2
25008: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25009: LD_INT 0
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
25018: PPUSH
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
// result := [ ] ;
25024: LD_ADDR_VAR 0 7
25028: PUSH
25029: EMPTY
25030: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25031: LD_VAR 0 1
25035: PPUSH
25036: CALL_OW 266
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: IN
25051: NOT
25052: IFFALSE 25056
// exit ;
25054: GO 26687
// if name then
25056: LD_VAR 0 3
25060: IFFALSE 25076
// SetBName ( base_dep , name ) ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_VAR 0 3
25071: PPUSH
25072: CALL_OW 500
// base := GetBase ( base_dep ) ;
25076: LD_ADDR_VAR 0 15
25080: PUSH
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 274
25090: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25091: LD_ADDR_VAR 0 16
25095: PUSH
25096: LD_VAR 0 1
25100: PPUSH
25101: CALL_OW 255
25105: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25106: LD_ADDR_VAR 0 17
25110: PUSH
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 248
25120: ST_TO_ADDR
// if sources then
25121: LD_VAR 0 5
25125: IFFALSE 25172
// for i = 1 to 3 do
25127: LD_ADDR_VAR 0 8
25131: PUSH
25132: DOUBLE
25133: LD_INT 1
25135: DEC
25136: ST_TO_ADDR
25137: LD_INT 3
25139: PUSH
25140: FOR_TO
25141: IFFALSE 25170
// AddResourceType ( base , i , sources [ i ] ) ;
25143: LD_VAR 0 15
25147: PPUSH
25148: LD_VAR 0 8
25152: PPUSH
25153: LD_VAR 0 5
25157: PUSH
25158: LD_VAR 0 8
25162: ARRAY
25163: PPUSH
25164: CALL_OW 276
25168: GO 25140
25170: POP
25171: POP
// buildings := GetBaseBuildings ( base , area ) ;
25172: LD_ADDR_VAR 0 18
25176: PUSH
25177: LD_VAR 0 15
25181: PPUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: CALL 24464 0 2
25191: ST_TO_ADDR
// InitHc ;
25192: CALL_OW 19
// InitUc ;
25196: CALL_OW 18
// uc_side := side ;
25200: LD_ADDR_OWVAR 20
25204: PUSH
25205: LD_VAR 0 16
25209: ST_TO_ADDR
// uc_nation := nation ;
25210: LD_ADDR_OWVAR 21
25214: PUSH
25215: LD_VAR 0 17
25219: ST_TO_ADDR
// if buildings then
25220: LD_VAR 0 18
25224: IFFALSE 26546
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25226: LD_ADDR_VAR 0 19
25230: PUSH
25231: LD_VAR 0 18
25235: PPUSH
25236: LD_INT 2
25238: PUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 29
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 30
25251: PUSH
25252: LD_INT 30
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL_OW 72
25268: ST_TO_ADDR
// if tmp then
25269: LD_VAR 0 19
25273: IFFALSE 25321
// for i in tmp do
25275: LD_ADDR_VAR 0 8
25279: PUSH
25280: LD_VAR 0 19
25284: PUSH
25285: FOR_IN
25286: IFFALSE 25319
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25288: LD_VAR 0 8
25292: PPUSH
25293: CALL_OW 250
25297: PPUSH
25298: LD_VAR 0 8
25302: PPUSH
25303: CALL_OW 251
25307: PPUSH
25308: LD_VAR 0 16
25312: PPUSH
25313: CALL_OW 441
25317: GO 25285
25319: POP
25320: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25321: LD_VAR 0 18
25325: PPUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 30
25331: PUSH
25332: LD_INT 32
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 30
25341: PUSH
25342: LD_INT 33
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 72
25358: IFFALSE 25446
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25360: LD_ADDR_VAR 0 8
25364: PUSH
25365: LD_VAR 0 18
25369: PPUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 30
25375: PUSH
25376: LD_INT 32
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 30
25385: PUSH
25386: LD_INT 33
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: PPUSH
25398: CALL_OW 72
25402: PUSH
25403: FOR_IN
25404: IFFALSE 25444
// begin if not GetBWeapon ( i ) then
25406: LD_VAR 0 8
25410: PPUSH
25411: CALL_OW 269
25415: NOT
25416: IFFALSE 25442
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25418: LD_VAR 0 8
25422: PPUSH
25423: LD_VAR 0 8
25427: PPUSH
25428: LD_VAR 0 2
25432: PPUSH
25433: CALL 26692 0 2
25437: PPUSH
25438: CALL_OW 431
// end ;
25442: GO 25403
25444: POP
25445: POP
// end ; for i = 1 to personel do
25446: LD_ADDR_VAR 0 8
25450: PUSH
25451: DOUBLE
25452: LD_INT 1
25454: DEC
25455: ST_TO_ADDR
25456: LD_VAR 0 6
25460: PUSH
25461: FOR_TO
25462: IFFALSE 26526
// begin if i > 4 then
25464: LD_VAR 0 8
25468: PUSH
25469: LD_INT 4
25471: GREATER
25472: IFFALSE 25476
// break ;
25474: GO 26526
// case i of 1 :
25476: LD_VAR 0 8
25480: PUSH
25481: LD_INT 1
25483: DOUBLE
25484: EQUAL
25485: IFTRUE 25489
25487: GO 25569
25489: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25490: LD_ADDR_VAR 0 12
25494: PUSH
25495: LD_VAR 0 18
25499: PPUSH
25500: LD_INT 22
25502: PUSH
25503: LD_VAR 0 16
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 58
25514: PUSH
25515: EMPTY
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 32
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 30
25533: PUSH
25534: LD_INT 4
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 30
25543: PUSH
25544: LD_INT 5
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: PPUSH
25562: CALL_OW 72
25566: ST_TO_ADDR
25567: GO 25791
25569: LD_INT 2
25571: DOUBLE
25572: EQUAL
25573: IFTRUE 25577
25575: GO 25639
25577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25578: LD_ADDR_VAR 0 12
25582: PUSH
25583: LD_VAR 0 18
25587: PPUSH
25588: LD_INT 22
25590: PUSH
25591: LD_VAR 0 16
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 30
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 30
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 72
25636: ST_TO_ADDR
25637: GO 25791
25639: LD_INT 3
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25709
25647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25648: LD_ADDR_VAR 0 12
25652: PUSH
25653: LD_VAR 0 18
25657: PPUSH
25658: LD_INT 22
25660: PUSH
25661: LD_VAR 0 16
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 30
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 30
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 72
25706: ST_TO_ADDR
25707: GO 25791
25709: LD_INT 4
25711: DOUBLE
25712: EQUAL
25713: IFTRUE 25717
25715: GO 25790
25717: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25718: LD_ADDR_VAR 0 12
25722: PUSH
25723: LD_VAR 0 18
25727: PPUSH
25728: LD_INT 22
25730: PUSH
25731: LD_VAR 0 16
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: LD_INT 30
25745: PUSH
25746: LD_INT 6
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 7
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 30
25765: PUSH
25766: LD_INT 8
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 72
25787: ST_TO_ADDR
25788: GO 25791
25790: POP
// if i = 1 then
25791: LD_VAR 0 8
25795: PUSH
25796: LD_INT 1
25798: EQUAL
25799: IFFALSE 25910
// begin tmp := [ ] ;
25801: LD_ADDR_VAR 0 19
25805: PUSH
25806: EMPTY
25807: ST_TO_ADDR
// for j in f do
25808: LD_ADDR_VAR 0 9
25812: PUSH
25813: LD_VAR 0 12
25817: PUSH
25818: FOR_IN
25819: IFFALSE 25892
// if GetBType ( j ) = b_bunker then
25821: LD_VAR 0 9
25825: PPUSH
25826: CALL_OW 266
25830: PUSH
25831: LD_INT 32
25833: EQUAL
25834: IFFALSE 25861
// tmp := Insert ( tmp , 1 , j ) else
25836: LD_ADDR_VAR 0 19
25840: PUSH
25841: LD_VAR 0 19
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: LD_VAR 0 9
25853: PPUSH
25854: CALL_OW 2
25858: ST_TO_ADDR
25859: GO 25890
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25861: LD_ADDR_VAR 0 19
25865: PUSH
25866: LD_VAR 0 19
25870: PPUSH
25871: LD_VAR 0 19
25875: PUSH
25876: LD_INT 1
25878: PLUS
25879: PPUSH
25880: LD_VAR 0 9
25884: PPUSH
25885: CALL_OW 2
25889: ST_TO_ADDR
25890: GO 25818
25892: POP
25893: POP
// if tmp then
25894: LD_VAR 0 19
25898: IFFALSE 25910
// f := tmp ;
25900: LD_ADDR_VAR 0 12
25904: PUSH
25905: LD_VAR 0 19
25909: ST_TO_ADDR
// end ; x := personel [ i ] ;
25910: LD_ADDR_VAR 0 13
25914: PUSH
25915: LD_VAR 0 6
25919: PUSH
25920: LD_VAR 0 8
25924: ARRAY
25925: ST_TO_ADDR
// if x = - 1 then
25926: LD_VAR 0 13
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: EQUAL
25935: IFFALSE 26144
// begin for j in f do
25937: LD_ADDR_VAR 0 9
25941: PUSH
25942: LD_VAR 0 12
25946: PUSH
25947: FOR_IN
25948: IFFALSE 26140
// repeat InitHc ;
25950: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25954: LD_VAR 0 9
25958: PPUSH
25959: CALL_OW 266
25963: PUSH
25964: LD_INT 5
25966: EQUAL
25967: IFFALSE 26037
// begin if UnitsInside ( j ) < 3 then
25969: LD_VAR 0 9
25973: PPUSH
25974: CALL_OW 313
25978: PUSH
25979: LD_INT 3
25981: LESS
25982: IFFALSE 26018
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25984: LD_INT 0
25986: PPUSH
25987: LD_INT 5
25989: PUSH
25990: LD_INT 8
25992: PUSH
25993: LD_INT 9
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: LIST
26000: PUSH
26001: LD_VAR 0 17
26005: ARRAY
26006: PPUSH
26007: LD_VAR 0 4
26011: PPUSH
26012: CALL_OW 380
26016: GO 26035
// PrepareHuman ( false , i , skill ) ;
26018: LD_INT 0
26020: PPUSH
26021: LD_VAR 0 8
26025: PPUSH
26026: LD_VAR 0 4
26030: PPUSH
26031: CALL_OW 380
// end else
26035: GO 26054
// PrepareHuman ( false , i , skill ) ;
26037: LD_INT 0
26039: PPUSH
26040: LD_VAR 0 8
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: CALL_OW 380
// un := CreateHuman ;
26054: LD_ADDR_VAR 0 14
26058: PUSH
26059: CALL_OW 44
26063: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26064: LD_ADDR_VAR 0 7
26068: PUSH
26069: LD_VAR 0 7
26073: PPUSH
26074: LD_INT 1
26076: PPUSH
26077: LD_VAR 0 14
26081: PPUSH
26082: CALL_OW 2
26086: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26087: LD_VAR 0 14
26091: PPUSH
26092: LD_VAR 0 9
26096: PPUSH
26097: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26101: LD_VAR 0 9
26105: PPUSH
26106: CALL_OW 313
26110: PUSH
26111: LD_INT 6
26113: EQUAL
26114: PUSH
26115: LD_VAR 0 9
26119: PPUSH
26120: CALL_OW 266
26124: PUSH
26125: LD_INT 32
26127: PUSH
26128: LD_INT 31
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: IN
26135: OR
26136: IFFALSE 25950
26138: GO 25947
26140: POP
26141: POP
// end else
26142: GO 26524
// for j = 1 to x do
26144: LD_ADDR_VAR 0 9
26148: PUSH
26149: DOUBLE
26150: LD_INT 1
26152: DEC
26153: ST_TO_ADDR
26154: LD_VAR 0 13
26158: PUSH
26159: FOR_TO
26160: IFFALSE 26522
// begin InitHc ;
26162: CALL_OW 19
// if not f then
26166: LD_VAR 0 12
26170: NOT
26171: IFFALSE 26260
// begin PrepareHuman ( false , i , skill ) ;
26173: LD_INT 0
26175: PPUSH
26176: LD_VAR 0 8
26180: PPUSH
26181: LD_VAR 0 4
26185: PPUSH
26186: CALL_OW 380
// un := CreateHuman ;
26190: LD_ADDR_VAR 0 14
26194: PUSH
26195: CALL_OW 44
26199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26200: LD_ADDR_VAR 0 7
26204: PUSH
26205: LD_VAR 0 7
26209: PPUSH
26210: LD_INT 1
26212: PPUSH
26213: LD_VAR 0 14
26217: PPUSH
26218: CALL_OW 2
26222: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26223: LD_VAR 0 14
26227: PPUSH
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL_OW 250
26237: PPUSH
26238: LD_VAR 0 1
26242: PPUSH
26243: CALL_OW 251
26247: PPUSH
26248: LD_INT 10
26250: PPUSH
26251: LD_INT 0
26253: PPUSH
26254: CALL_OW 50
// continue ;
26258: GO 26159
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26260: LD_VAR 0 12
26264: PUSH
26265: LD_INT 1
26267: ARRAY
26268: PPUSH
26269: CALL_OW 313
26273: PUSH
26274: LD_VAR 0 12
26278: PUSH
26279: LD_INT 1
26281: ARRAY
26282: PPUSH
26283: CALL_OW 266
26287: PUSH
26288: LD_INT 32
26290: PUSH
26291: LD_INT 31
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: IN
26298: AND
26299: PUSH
26300: LD_VAR 0 12
26304: PUSH
26305: LD_INT 1
26307: ARRAY
26308: PPUSH
26309: CALL_OW 313
26313: PUSH
26314: LD_INT 6
26316: EQUAL
26317: OR
26318: IFFALSE 26338
// f := Delete ( f , 1 ) ;
26320: LD_ADDR_VAR 0 12
26324: PUSH
26325: LD_VAR 0 12
26329: PPUSH
26330: LD_INT 1
26332: PPUSH
26333: CALL_OW 3
26337: ST_TO_ADDR
// if not f then
26338: LD_VAR 0 12
26342: NOT
26343: IFFALSE 26361
// begin x := x + 2 ;
26345: LD_ADDR_VAR 0 13
26349: PUSH
26350: LD_VAR 0 13
26354: PUSH
26355: LD_INT 2
26357: PLUS
26358: ST_TO_ADDR
// continue ;
26359: GO 26159
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26361: LD_VAR 0 12
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: CALL_OW 266
26374: PUSH
26375: LD_INT 5
26377: EQUAL
26378: IFFALSE 26452
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26380: LD_VAR 0 12
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: PPUSH
26389: CALL_OW 313
26393: PUSH
26394: LD_INT 3
26396: LESS
26397: IFFALSE 26433
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26399: LD_INT 0
26401: PPUSH
26402: LD_INT 5
26404: PUSH
26405: LD_INT 8
26407: PUSH
26408: LD_INT 9
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: PUSH
26416: LD_VAR 0 17
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 4
26426: PPUSH
26427: CALL_OW 380
26431: GO 26450
// PrepareHuman ( false , i , skill ) ;
26433: LD_INT 0
26435: PPUSH
26436: LD_VAR 0 8
26440: PPUSH
26441: LD_VAR 0 4
26445: PPUSH
26446: CALL_OW 380
// end else
26450: GO 26469
// PrepareHuman ( false , i , skill ) ;
26452: LD_INT 0
26454: PPUSH
26455: LD_VAR 0 8
26459: PPUSH
26460: LD_VAR 0 4
26464: PPUSH
26465: CALL_OW 380
// un := CreateHuman ;
26469: LD_ADDR_VAR 0 14
26473: PUSH
26474: CALL_OW 44
26478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26479: LD_ADDR_VAR 0 7
26483: PUSH
26484: LD_VAR 0 7
26488: PPUSH
26489: LD_INT 1
26491: PPUSH
26492: LD_VAR 0 14
26496: PPUSH
26497: CALL_OW 2
26501: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26502: LD_VAR 0 14
26506: PPUSH
26507: LD_VAR 0 12
26511: PUSH
26512: LD_INT 1
26514: ARRAY
26515: PPUSH
26516: CALL_OW 52
// end ;
26520: GO 26159
26522: POP
26523: POP
// end ;
26524: GO 25461
26526: POP
26527: POP
// result := result ^ buildings ;
26528: LD_ADDR_VAR 0 7
26532: PUSH
26533: LD_VAR 0 7
26537: PUSH
26538: LD_VAR 0 18
26542: ADD
26543: ST_TO_ADDR
// end else
26544: GO 26687
// begin for i = 1 to personel do
26546: LD_ADDR_VAR 0 8
26550: PUSH
26551: DOUBLE
26552: LD_INT 1
26554: DEC
26555: ST_TO_ADDR
26556: LD_VAR 0 6
26560: PUSH
26561: FOR_TO
26562: IFFALSE 26685
// begin if i > 4 then
26564: LD_VAR 0 8
26568: PUSH
26569: LD_INT 4
26571: GREATER
26572: IFFALSE 26576
// break ;
26574: GO 26685
// x := personel [ i ] ;
26576: LD_ADDR_VAR 0 13
26580: PUSH
26581: LD_VAR 0 6
26585: PUSH
26586: LD_VAR 0 8
26590: ARRAY
26591: ST_TO_ADDR
// if x = - 1 then
26592: LD_VAR 0 13
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: EQUAL
26601: IFFALSE 26605
// continue ;
26603: GO 26561
// PrepareHuman ( false , i , skill ) ;
26605: LD_INT 0
26607: PPUSH
26608: LD_VAR 0 8
26612: PPUSH
26613: LD_VAR 0 4
26617: PPUSH
26618: CALL_OW 380
// un := CreateHuman ;
26622: LD_ADDR_VAR 0 14
26626: PUSH
26627: CALL_OW 44
26631: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26632: LD_VAR 0 14
26636: PPUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 250
26646: PPUSH
26647: LD_VAR 0 1
26651: PPUSH
26652: CALL_OW 251
26656: PPUSH
26657: LD_INT 10
26659: PPUSH
26660: LD_INT 0
26662: PPUSH
26663: CALL_OW 50
// result := result ^ un ;
26667: LD_ADDR_VAR 0 7
26671: PUSH
26672: LD_VAR 0 7
26676: PUSH
26677: LD_VAR 0 14
26681: ADD
26682: ST_TO_ADDR
// end ;
26683: GO 26561
26685: POP
26686: POP
// end ; end ;
26687: LD_VAR 0 7
26691: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26692: LD_INT 0
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
// result := false ;
26710: LD_ADDR_VAR 0 3
26714: PUSH
26715: LD_INT 0
26717: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26718: LD_VAR 0 1
26722: NOT
26723: PUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 266
26733: PUSH
26734: LD_INT 32
26736: PUSH
26737: LD_INT 33
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: IN
26744: NOT
26745: OR
26746: IFFALSE 26750
// exit ;
26748: GO 27886
// nat := GetNation ( tower ) ;
26750: LD_ADDR_VAR 0 12
26754: PUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL_OW 248
26764: ST_TO_ADDR
// side := GetSide ( tower ) ;
26765: LD_ADDR_VAR 0 16
26769: PUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 255
26779: ST_TO_ADDR
// x := GetX ( tower ) ;
26780: LD_ADDR_VAR 0 10
26784: PUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 250
26794: ST_TO_ADDR
// y := GetY ( tower ) ;
26795: LD_ADDR_VAR 0 11
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 251
26809: ST_TO_ADDR
// if not x or not y then
26810: LD_VAR 0 10
26814: NOT
26815: PUSH
26816: LD_VAR 0 11
26820: NOT
26821: OR
26822: IFFALSE 26826
// exit ;
26824: GO 27886
// weapon := 0 ;
26826: LD_ADDR_VAR 0 18
26830: PUSH
26831: LD_INT 0
26833: ST_TO_ADDR
// fac_list := [ ] ;
26834: LD_ADDR_VAR 0 17
26838: PUSH
26839: EMPTY
26840: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
26841: LD_ADDR_VAR 0 6
26845: PUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 274
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL 24464 0 2
26865: PPUSH
26866: LD_INT 30
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PPUSH
26876: CALL_OW 72
26880: ST_TO_ADDR
// if not factories then
26881: LD_VAR 0 6
26885: NOT
26886: IFFALSE 26890
// exit ;
26888: GO 27886
// for i in factories do
26890: LD_ADDR_VAR 0 8
26894: PUSH
26895: LD_VAR 0 6
26899: PUSH
26900: FOR_IN
26901: IFFALSE 26926
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26903: LD_ADDR_VAR 0 17
26907: PUSH
26908: LD_VAR 0 17
26912: PUSH
26913: LD_VAR 0 8
26917: PPUSH
26918: CALL_OW 478
26922: UNION
26923: ST_TO_ADDR
26924: GO 26900
26926: POP
26927: POP
// if not fac_list then
26928: LD_VAR 0 17
26932: NOT
26933: IFFALSE 26937
// exit ;
26935: GO 27886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_INT 4
26944: PUSH
26945: LD_INT 5
26947: PUSH
26948: LD_INT 9
26950: PUSH
26951: LD_INT 10
26953: PUSH
26954: LD_INT 6
26956: PUSH
26957: LD_INT 7
26959: PUSH
26960: LD_INT 11
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 27
26974: PUSH
26975: LD_INT 28
26977: PUSH
26978: LD_INT 26
26980: PUSH
26981: LD_INT 30
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 43
26992: PUSH
26993: LD_INT 44
26995: PUSH
26996: LD_INT 46
26998: PUSH
26999: LD_INT 45
27001: PUSH
27002: LD_INT 47
27004: PUSH
27005: LD_INT 49
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: LD_VAR 0 12
27025: ARRAY
27026: ST_TO_ADDR
// for i in list do
27027: LD_ADDR_VAR 0 8
27031: PUSH
27032: LD_VAR 0 5
27036: PUSH
27037: FOR_IN
27038: IFFALSE 27071
// if not i in fac_list then
27040: LD_VAR 0 8
27044: PUSH
27045: LD_VAR 0 17
27049: IN
27050: NOT
27051: IFFALSE 27069
// list := list diff i ;
27053: LD_ADDR_VAR 0 5
27057: PUSH
27058: LD_VAR 0 5
27062: PUSH
27063: LD_VAR 0 8
27067: DIFF
27068: ST_TO_ADDR
27069: GO 27037
27071: POP
27072: POP
// if not list then
27073: LD_VAR 0 5
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27082: LD_VAR 0 12
27086: PUSH
27087: LD_INT 3
27089: EQUAL
27090: PUSH
27091: LD_INT 49
27093: PUSH
27094: LD_VAR 0 5
27098: IN
27099: AND
27100: PUSH
27101: LD_INT 31
27103: PPUSH
27104: LD_VAR 0 16
27108: PPUSH
27109: CALL_OW 321
27113: PUSH
27114: LD_INT 2
27116: EQUAL
27117: AND
27118: IFFALSE 27178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27120: LD_INT 22
27122: PUSH
27123: LD_VAR 0 16
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 35
27134: PUSH
27135: LD_INT 49
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 91
27144: PUSH
27145: LD_VAR 0 1
27149: PUSH
27150: LD_INT 10
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 69
27167: NOT
27168: IFFALSE 27178
// weapon := ru_time_lapser ;
27170: LD_ADDR_VAR 0 18
27174: PUSH
27175: LD_INT 49
27177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27178: LD_VAR 0 12
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: IN
27193: PUSH
27194: LD_INT 11
27196: PUSH
27197: LD_VAR 0 5
27201: IN
27202: PUSH
27203: LD_INT 30
27205: PUSH
27206: LD_VAR 0 5
27210: IN
27211: OR
27212: AND
27213: PUSH
27214: LD_INT 6
27216: PPUSH
27217: LD_VAR 0 16
27221: PPUSH
27222: CALL_OW 321
27226: PUSH
27227: LD_INT 2
27229: EQUAL
27230: AND
27231: IFFALSE 27396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27233: LD_INT 22
27235: PUSH
27236: LD_VAR 0 16
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 35
27250: PUSH
27251: LD_INT 11
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 35
27260: PUSH
27261: LD_INT 30
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 91
27275: PUSH
27276: LD_VAR 0 1
27280: PUSH
27281: LD_INT 18
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: PPUSH
27294: CALL_OW 69
27298: NOT
27299: PUSH
27300: LD_INT 22
27302: PUSH
27303: LD_VAR 0 16
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 30
27317: PUSH
27318: LD_INT 32
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 30
27327: PUSH
27328: LD_INT 33
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 91
27342: PUSH
27343: LD_VAR 0 1
27347: PUSH
27348: LD_INT 12
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: PPUSH
27364: CALL_OW 69
27368: PUSH
27369: LD_INT 2
27371: GREATER
27372: AND
27373: IFFALSE 27396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27375: LD_ADDR_VAR 0 18
27379: PUSH
27380: LD_INT 11
27382: PUSH
27383: LD_INT 30
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_VAR 0 12
27394: ARRAY
27395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27396: LD_VAR 0 18
27400: NOT
27401: PUSH
27402: LD_INT 40
27404: PPUSH
27405: LD_VAR 0 16
27409: PPUSH
27410: CALL_OW 321
27414: PUSH
27415: LD_INT 2
27417: EQUAL
27418: AND
27419: PUSH
27420: LD_INT 7
27422: PUSH
27423: LD_VAR 0 5
27427: IN
27428: PUSH
27429: LD_INT 28
27431: PUSH
27432: LD_VAR 0 5
27436: IN
27437: OR
27438: PUSH
27439: LD_INT 45
27441: PUSH
27442: LD_VAR 0 5
27446: IN
27447: OR
27448: AND
27449: IFFALSE 27703
// begin hex := GetHexInfo ( x , y ) ;
27451: LD_ADDR_VAR 0 4
27455: PUSH
27456: LD_VAR 0 10
27460: PPUSH
27461: LD_VAR 0 11
27465: PPUSH
27466: CALL_OW 546
27470: ST_TO_ADDR
// if hex [ 1 ] then
27471: LD_VAR 0 4
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: IFFALSE 27483
// exit ;
27481: GO 27886
// height := hex [ 2 ] ;
27483: LD_ADDR_VAR 0 15
27487: PUSH
27488: LD_VAR 0 4
27492: PUSH
27493: LD_INT 2
27495: ARRAY
27496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27497: LD_ADDR_VAR 0 14
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: LD_INT 5
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: ST_TO_ADDR
// for i in tmp do
27520: LD_ADDR_VAR 0 8
27524: PUSH
27525: LD_VAR 0 14
27529: PUSH
27530: FOR_IN
27531: IFFALSE 27701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27533: LD_ADDR_VAR 0 9
27537: PUSH
27538: LD_VAR 0 10
27542: PPUSH
27543: LD_VAR 0 8
27547: PPUSH
27548: LD_INT 5
27550: PPUSH
27551: CALL_OW 272
27555: PUSH
27556: LD_VAR 0 11
27560: PPUSH
27561: LD_VAR 0 8
27565: PPUSH
27566: LD_INT 5
27568: PPUSH
27569: CALL_OW 273
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27578: LD_VAR 0 9
27582: PUSH
27583: LD_INT 1
27585: ARRAY
27586: PPUSH
27587: LD_VAR 0 9
27591: PUSH
27592: LD_INT 2
27594: ARRAY
27595: PPUSH
27596: CALL_OW 488
27600: IFFALSE 27699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27602: LD_ADDR_VAR 0 4
27606: PUSH
27607: LD_VAR 0 9
27611: PUSH
27612: LD_INT 1
27614: ARRAY
27615: PPUSH
27616: LD_VAR 0 9
27620: PUSH
27621: LD_INT 2
27623: ARRAY
27624: PPUSH
27625: CALL_OW 546
27629: ST_TO_ADDR
// if hex [ 1 ] then
27630: LD_VAR 0 4
27634: PUSH
27635: LD_INT 1
27637: ARRAY
27638: IFFALSE 27642
// continue ;
27640: GO 27530
// h := hex [ 2 ] ;
27642: LD_ADDR_VAR 0 13
27646: PUSH
27647: LD_VAR 0 4
27651: PUSH
27652: LD_INT 2
27654: ARRAY
27655: ST_TO_ADDR
// if h + 7 < height then
27656: LD_VAR 0 13
27660: PUSH
27661: LD_INT 7
27663: PLUS
27664: PUSH
27665: LD_VAR 0 15
27669: LESS
27670: IFFALSE 27699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27672: LD_ADDR_VAR 0 18
27676: PUSH
27677: LD_INT 7
27679: PUSH
27680: LD_INT 28
27682: PUSH
27683: LD_INT 45
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_VAR 0 12
27695: ARRAY
27696: ST_TO_ADDR
// break ;
27697: GO 27701
// end ; end ; end ;
27699: GO 27530
27701: POP
27702: POP
// end ; if not weapon then
27703: LD_VAR 0 18
27707: NOT
27708: IFFALSE 27768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27710: LD_ADDR_VAR 0 5
27714: PUSH
27715: LD_VAR 0 5
27719: PUSH
27720: LD_INT 11
27722: PUSH
27723: LD_INT 30
27725: PUSH
27726: LD_INT 49
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: DIFF
27734: ST_TO_ADDR
// if not list then
27735: LD_VAR 0 5
27739: NOT
27740: IFFALSE 27744
// exit ;
27742: GO 27886
// weapon := list [ rand ( 1 , list ) ] ;
27744: LD_ADDR_VAR 0 18
27748: PUSH
27749: LD_VAR 0 5
27753: PUSH
27754: LD_INT 1
27756: PPUSH
27757: LD_VAR 0 5
27761: PPUSH
27762: CALL_OW 12
27766: ARRAY
27767: ST_TO_ADDR
// end ; if weapon then
27768: LD_VAR 0 18
27772: IFFALSE 27886
// begin tmp := CostOfWeapon ( weapon ) ;
27774: LD_ADDR_VAR 0 14
27778: PUSH
27779: LD_VAR 0 18
27783: PPUSH
27784: CALL_OW 451
27788: ST_TO_ADDR
// j := GetBase ( tower ) ;
27789: LD_ADDR_VAR 0 9
27793: PUSH
27794: LD_VAR 0 1
27798: PPUSH
27799: CALL_OW 274
27803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27804: LD_VAR 0 9
27808: PPUSH
27809: LD_INT 1
27811: PPUSH
27812: CALL_OW 275
27816: PUSH
27817: LD_VAR 0 14
27821: PUSH
27822: LD_INT 1
27824: ARRAY
27825: GREATEREQUAL
27826: PUSH
27827: LD_VAR 0 9
27831: PPUSH
27832: LD_INT 2
27834: PPUSH
27835: CALL_OW 275
27839: PUSH
27840: LD_VAR 0 14
27844: PUSH
27845: LD_INT 2
27847: ARRAY
27848: GREATEREQUAL
27849: AND
27850: PUSH
27851: LD_VAR 0 9
27855: PPUSH
27856: LD_INT 3
27858: PPUSH
27859: CALL_OW 275
27863: PUSH
27864: LD_VAR 0 14
27868: PUSH
27869: LD_INT 3
27871: ARRAY
27872: GREATEREQUAL
27873: AND
27874: IFFALSE 27886
// result := weapon ;
27876: LD_ADDR_VAR 0 3
27880: PUSH
27881: LD_VAR 0 18
27885: ST_TO_ADDR
// end ; end ;
27886: LD_VAR 0 3
27890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
// result := true ;
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: LD_INT 1
27902: ST_TO_ADDR
// if array1 = array2 then
27903: LD_VAR 0 1
27907: PUSH
27908: LD_VAR 0 2
27912: EQUAL
27913: IFFALSE 27973
// begin for i = 1 to array1 do
27915: LD_ADDR_VAR 0 4
27919: PUSH
27920: DOUBLE
27921: LD_INT 1
27923: DEC
27924: ST_TO_ADDR
27925: LD_VAR 0 1
27929: PUSH
27930: FOR_TO
27931: IFFALSE 27969
// if array1 [ i ] <> array2 [ i ] then
27933: LD_VAR 0 1
27937: PUSH
27938: LD_VAR 0 4
27942: ARRAY
27943: PUSH
27944: LD_VAR 0 2
27948: PUSH
27949: LD_VAR 0 4
27953: ARRAY
27954: NONEQUAL
27955: IFFALSE 27967
// begin result := false ;
27957: LD_ADDR_VAR 0 3
27961: PUSH
27962: LD_INT 0
27964: ST_TO_ADDR
// break ;
27965: GO 27969
// end ;
27967: GO 27930
27969: POP
27970: POP
// end else
27971: GO 27981
// result := false ;
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_INT 0
27980: ST_TO_ADDR
// end ;
27981: LD_VAR 0 3
27985: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27986: LD_INT 0
27988: PPUSH
27989: PPUSH
27990: PPUSH
// pom := GetBase ( fac ) ;
27991: LD_ADDR_VAR 0 5
27995: PUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 274
28005: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28006: LD_ADDR_VAR 0 4
28010: PUSH
28011: LD_VAR 0 2
28015: PUSH
28016: LD_INT 1
28018: ARRAY
28019: PPUSH
28020: LD_VAR 0 2
28024: PUSH
28025: LD_INT 2
28027: ARRAY
28028: PPUSH
28029: LD_VAR 0 2
28033: PUSH
28034: LD_INT 3
28036: ARRAY
28037: PPUSH
28038: LD_VAR 0 2
28042: PUSH
28043: LD_INT 4
28045: ARRAY
28046: PPUSH
28047: CALL_OW 449
28051: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28052: LD_ADDR_VAR 0 3
28056: PUSH
28057: LD_VAR 0 5
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 275
28069: PUSH
28070: LD_VAR 0 4
28074: PUSH
28075: LD_INT 1
28077: ARRAY
28078: GREATEREQUAL
28079: PUSH
28080: LD_VAR 0 5
28084: PPUSH
28085: LD_INT 2
28087: PPUSH
28088: CALL_OW 275
28092: PUSH
28093: LD_VAR 0 4
28097: PUSH
28098: LD_INT 2
28100: ARRAY
28101: GREATEREQUAL
28102: AND
28103: PUSH
28104: LD_VAR 0 5
28108: PPUSH
28109: LD_INT 3
28111: PPUSH
28112: CALL_OW 275
28116: PUSH
28117: LD_VAR 0 4
28121: PUSH
28122: LD_INT 3
28124: ARRAY
28125: GREATEREQUAL
28126: AND
28127: ST_TO_ADDR
// end ;
28128: LD_VAR 0 3
28132: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28133: LD_INT 0
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
// pom := GetBase ( building ) ;
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 274
28153: ST_TO_ADDR
// if not pom then
28154: LD_VAR 0 3
28158: NOT
28159: IFFALSE 28163
// exit ;
28161: GO 28333
// btype := GetBType ( building ) ;
28163: LD_ADDR_VAR 0 5
28167: PUSH
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL_OW 266
28177: ST_TO_ADDR
// if btype = b_armoury then
28178: LD_VAR 0 5
28182: PUSH
28183: LD_INT 4
28185: EQUAL
28186: IFFALSE 28196
// btype := b_barracks ;
28188: LD_ADDR_VAR 0 5
28192: PUSH
28193: LD_INT 5
28195: ST_TO_ADDR
// if btype = b_depot then
28196: LD_VAR 0 5
28200: PUSH
28201: LD_INT 0
28203: EQUAL
28204: IFFALSE 28214
// btype := b_warehouse ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 1
28213: ST_TO_ADDR
// if btype = b_workshop then
28214: LD_VAR 0 5
28218: PUSH
28219: LD_INT 2
28221: EQUAL
28222: IFFALSE 28232
// btype := b_factory ;
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: LD_INT 3
28231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28232: LD_ADDR_VAR 0 4
28236: PUSH
28237: LD_VAR 0 5
28241: PPUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 248
28251: PPUSH
28252: CALL_OW 450
28256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28257: LD_ADDR_VAR 0 2
28261: PUSH
28262: LD_VAR 0 3
28266: PPUSH
28267: LD_INT 1
28269: PPUSH
28270: CALL_OW 275
28274: PUSH
28275: LD_VAR 0 4
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: GREATEREQUAL
28284: PUSH
28285: LD_VAR 0 3
28289: PPUSH
28290: LD_INT 2
28292: PPUSH
28293: CALL_OW 275
28297: PUSH
28298: LD_VAR 0 4
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: GREATEREQUAL
28307: AND
28308: PUSH
28309: LD_VAR 0 3
28313: PPUSH
28314: LD_INT 3
28316: PPUSH
28317: CALL_OW 275
28321: PUSH
28322: LD_VAR 0 4
28326: PUSH
28327: LD_INT 3
28329: ARRAY
28330: GREATEREQUAL
28331: AND
28332: ST_TO_ADDR
// end ;
28333: LD_VAR 0 2
28337: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28338: LD_INT 0
28340: PPUSH
28341: PPUSH
28342: PPUSH
// pom := GetBase ( building ) ;
28343: LD_ADDR_VAR 0 4
28347: PUSH
28348: LD_VAR 0 1
28352: PPUSH
28353: CALL_OW 274
28357: ST_TO_ADDR
// if not pom then
28358: LD_VAR 0 4
28362: NOT
28363: IFFALSE 28367
// exit ;
28365: GO 28468
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28367: LD_ADDR_VAR 0 5
28371: PUSH
28372: LD_VAR 0 2
28376: PPUSH
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 248
28386: PPUSH
28387: CALL_OW 450
28391: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28392: LD_ADDR_VAR 0 3
28396: PUSH
28397: LD_VAR 0 4
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 275
28409: PUSH
28410: LD_VAR 0 5
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: GREATEREQUAL
28419: PUSH
28420: LD_VAR 0 4
28424: PPUSH
28425: LD_INT 2
28427: PPUSH
28428: CALL_OW 275
28432: PUSH
28433: LD_VAR 0 5
28437: PUSH
28438: LD_INT 2
28440: ARRAY
28441: GREATEREQUAL
28442: AND
28443: PUSH
28444: LD_VAR 0 4
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: CALL_OW 275
28456: PUSH
28457: LD_VAR 0 5
28461: PUSH
28462: LD_INT 3
28464: ARRAY
28465: GREATEREQUAL
28466: AND
28467: ST_TO_ADDR
// end ;
28468: LD_VAR 0 3
28472: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
28473: LD_INT 0
28475: PPUSH
28476: PPUSH
28477: PPUSH
28478: PPUSH
28479: PPUSH
28480: PPUSH
28481: PPUSH
28482: PPUSH
28483: PPUSH
28484: PPUSH
// result := false ;
28485: LD_ADDR_VAR 0 6
28489: PUSH
28490: LD_INT 0
28492: ST_TO_ADDR
// if not base or not btype or not x or not y then
28493: LD_VAR 0 1
28497: NOT
28498: PUSH
28499: LD_VAR 0 2
28503: NOT
28504: OR
28505: PUSH
28506: LD_VAR 0 3
28510: NOT
28511: OR
28512: PUSH
28513: LD_VAR 0 4
28517: NOT
28518: OR
28519: IFFALSE 28523
// exit ;
28521: GO 29132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
28523: LD_ADDR_VAR 0 12
28527: PUSH
28528: LD_VAR 0 2
28532: PPUSH
28533: LD_VAR 0 3
28537: PPUSH
28538: LD_VAR 0 4
28542: PPUSH
28543: LD_VAR 0 5
28547: PPUSH
28548: LD_VAR 0 1
28552: PUSH
28553: LD_INT 1
28555: ARRAY
28556: PPUSH
28557: CALL_OW 248
28561: PPUSH
28562: LD_INT 0
28564: PPUSH
28565: CALL 29969 0 6
28569: ST_TO_ADDR
// if not hexes then
28570: LD_VAR 0 12
28574: NOT
28575: IFFALSE 28579
// exit ;
28577: GO 29132
// for i = 1 to hexes do
28579: LD_ADDR_VAR 0 7
28583: PUSH
28584: DOUBLE
28585: LD_INT 1
28587: DEC
28588: ST_TO_ADDR
28589: LD_VAR 0 12
28593: PUSH
28594: FOR_TO
28595: IFFALSE 29130
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28597: LD_ADDR_VAR 0 11
28601: PUSH
28602: LD_VAR 0 12
28606: PUSH
28607: LD_VAR 0 7
28611: ARRAY
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: PPUSH
28617: LD_VAR 0 12
28621: PUSH
28622: LD_VAR 0 7
28626: ARRAY
28627: PUSH
28628: LD_INT 2
28630: ARRAY
28631: PPUSH
28632: CALL_OW 428
28636: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28637: LD_VAR 0 12
28641: PUSH
28642: LD_VAR 0 7
28646: ARRAY
28647: PUSH
28648: LD_INT 1
28650: ARRAY
28651: PPUSH
28652: LD_VAR 0 12
28656: PUSH
28657: LD_VAR 0 7
28661: ARRAY
28662: PUSH
28663: LD_INT 2
28665: ARRAY
28666: PPUSH
28667: CALL_OW 351
28671: PUSH
28672: LD_VAR 0 12
28676: PUSH
28677: LD_VAR 0 7
28681: ARRAY
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 12
28691: PUSH
28692: LD_VAR 0 7
28696: ARRAY
28697: PUSH
28698: LD_INT 2
28700: ARRAY
28701: PPUSH
28702: CALL_OW 488
28706: NOT
28707: OR
28708: PUSH
28709: LD_VAR 0 11
28713: PPUSH
28714: CALL_OW 247
28718: PUSH
28719: LD_INT 3
28721: EQUAL
28722: OR
28723: IFFALSE 28729
// exit ;
28725: POP
28726: POP
28727: GO 29132
// if not tmp or not tmp in base then
28729: LD_VAR 0 11
28733: NOT
28734: PUSH
28735: LD_VAR 0 11
28739: PUSH
28740: LD_VAR 0 1
28744: IN
28745: NOT
28746: OR
28747: IFFALSE 28751
// continue ;
28749: GO 28594
// result := true ;
28751: LD_ADDR_VAR 0 6
28755: PUSH
28756: LD_INT 1
28758: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28759: LD_ADDR_VAR 0 15
28763: PUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: LD_INT 22
28771: PUSH
28772: LD_VAR 0 11
28776: PPUSH
28777: CALL_OW 255
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: LD_INT 30
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 30
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PPUSH
28818: CALL_OW 72
28822: ST_TO_ADDR
// if dep then
28823: LD_VAR 0 15
28827: IFFALSE 28963
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28829: LD_ADDR_VAR 0 14
28833: PUSH
28834: LD_VAR 0 15
28838: PUSH
28839: LD_INT 1
28841: ARRAY
28842: PPUSH
28843: CALL_OW 250
28847: PPUSH
28848: LD_VAR 0 15
28852: PUSH
28853: LD_INT 1
28855: ARRAY
28856: PPUSH
28857: CALL_OW 254
28861: PPUSH
28862: LD_INT 5
28864: PPUSH
28865: CALL_OW 272
28869: PUSH
28870: LD_VAR 0 15
28874: PUSH
28875: LD_INT 1
28877: ARRAY
28878: PPUSH
28879: CALL_OW 251
28883: PPUSH
28884: LD_VAR 0 15
28888: PUSH
28889: LD_INT 1
28891: ARRAY
28892: PPUSH
28893: CALL_OW 254
28897: PPUSH
28898: LD_INT 5
28900: PPUSH
28901: CALL_OW 273
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28910: LD_VAR 0 14
28914: PUSH
28915: LD_INT 1
28917: ARRAY
28918: PPUSH
28919: LD_VAR 0 14
28923: PUSH
28924: LD_INT 2
28926: ARRAY
28927: PPUSH
28928: CALL_OW 488
28932: IFFALSE 28963
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28934: LD_VAR 0 11
28938: PPUSH
28939: LD_VAR 0 14
28943: PUSH
28944: LD_INT 1
28946: ARRAY
28947: PPUSH
28948: LD_VAR 0 14
28952: PUSH
28953: LD_INT 2
28955: ARRAY
28956: PPUSH
28957: CALL_OW 111
// continue ;
28961: GO 28594
// end ; end ; r := GetDir ( tmp ) ;
28963: LD_ADDR_VAR 0 13
28967: PUSH
28968: LD_VAR 0 11
28972: PPUSH
28973: CALL_OW 254
28977: ST_TO_ADDR
// if r = 5 then
28978: LD_VAR 0 13
28982: PUSH
28983: LD_INT 5
28985: EQUAL
28986: IFFALSE 28996
// r := 0 ;
28988: LD_ADDR_VAR 0 13
28992: PUSH
28993: LD_INT 0
28995: ST_TO_ADDR
// for j = r to 5 do
28996: LD_ADDR_VAR 0 8
29000: PUSH
29001: DOUBLE
29002: LD_VAR 0 13
29006: DEC
29007: ST_TO_ADDR
29008: LD_INT 5
29010: PUSH
29011: FOR_TO
29012: IFFALSE 29126
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29014: LD_ADDR_VAR 0 9
29018: PUSH
29019: LD_VAR 0 11
29023: PPUSH
29024: CALL_OW 250
29028: PPUSH
29029: LD_VAR 0 8
29033: PPUSH
29034: LD_INT 2
29036: PPUSH
29037: CALL_OW 272
29041: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29042: LD_ADDR_VAR 0 10
29046: PUSH
29047: LD_VAR 0 11
29051: PPUSH
29052: CALL_OW 251
29056: PPUSH
29057: LD_VAR 0 8
29061: PPUSH
29062: LD_INT 2
29064: PPUSH
29065: CALL_OW 273
29069: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29070: LD_VAR 0 9
29074: PPUSH
29075: LD_VAR 0 10
29079: PPUSH
29080: CALL_OW 488
29084: PUSH
29085: LD_VAR 0 9
29089: PPUSH
29090: LD_VAR 0 10
29094: PPUSH
29095: CALL_OW 428
29099: NOT
29100: AND
29101: IFFALSE 29124
// begin ComMoveXY ( tmp , _x , _y ) ;
29103: LD_VAR 0 11
29107: PPUSH
29108: LD_VAR 0 9
29112: PPUSH
29113: LD_VAR 0 10
29117: PPUSH
29118: CALL_OW 111
// break ;
29122: GO 29126
// end ; end ;
29124: GO 29011
29126: POP
29127: POP
// end ;
29128: GO 28594
29130: POP
29131: POP
// end ;
29132: LD_VAR 0 6
29136: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
29137: LD_INT 0
29139: PPUSH
29140: PPUSH
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
29148: PPUSH
// result := false ;
29149: LD_ADDR_VAR 0 6
29153: PUSH
29154: LD_INT 0
29156: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29157: LD_VAR 0 1
29161: NOT
29162: PUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 266
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: IN
29183: NOT
29184: OR
29185: PUSH
29186: LD_VAR 0 2
29190: NOT
29191: OR
29192: PUSH
29193: LD_VAR 0 5
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: LD_INT 4
29212: PUSH
29213: LD_INT 5
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: IN
29224: NOT
29225: OR
29226: PUSH
29227: LD_VAR 0 3
29231: PPUSH
29232: LD_VAR 0 4
29236: PPUSH
29237: CALL_OW 488
29241: NOT
29242: OR
29243: IFFALSE 29247
// exit ;
29245: GO 29964
// pom := GetBase ( depot ) ;
29247: LD_ADDR_VAR 0 10
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 274
29261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29262: LD_ADDR_VAR 0 11
29266: PUSH
29267: LD_VAR 0 2
29271: PPUSH
29272: LD_VAR 0 1
29276: PPUSH
29277: CALL_OW 248
29281: PPUSH
29282: CALL_OW 450
29286: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29287: LD_VAR 0 10
29291: PPUSH
29292: LD_INT 1
29294: PPUSH
29295: CALL_OW 275
29299: PUSH
29300: LD_VAR 0 11
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: GREATEREQUAL
29309: PUSH
29310: LD_VAR 0 10
29314: PPUSH
29315: LD_INT 2
29317: PPUSH
29318: CALL_OW 275
29322: PUSH
29323: LD_VAR 0 11
29327: PUSH
29328: LD_INT 2
29330: ARRAY
29331: GREATEREQUAL
29332: AND
29333: PUSH
29334: LD_VAR 0 10
29338: PPUSH
29339: LD_INT 3
29341: PPUSH
29342: CALL_OW 275
29346: PUSH
29347: LD_VAR 0 11
29351: PUSH
29352: LD_INT 3
29354: ARRAY
29355: GREATEREQUAL
29356: AND
29357: NOT
29358: IFFALSE 29362
// exit ;
29360: GO 29964
// if GetBType ( depot ) = b_depot then
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 266
29371: PUSH
29372: LD_INT 0
29374: EQUAL
29375: IFFALSE 29387
// dist := 28 else
29377: LD_ADDR_VAR 0 14
29381: PUSH
29382: LD_INT 28
29384: ST_TO_ADDR
29385: GO 29395
// dist := 36 ;
29387: LD_ADDR_VAR 0 14
29391: PUSH
29392: LD_INT 36
29394: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29395: LD_VAR 0 1
29399: PPUSH
29400: LD_VAR 0 3
29404: PPUSH
29405: LD_VAR 0 4
29409: PPUSH
29410: CALL_OW 297
29414: PUSH
29415: LD_VAR 0 14
29419: GREATER
29420: IFFALSE 29424
// exit ;
29422: GO 29964
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29424: LD_ADDR_VAR 0 12
29428: PUSH
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_VAR 0 3
29438: PPUSH
29439: LD_VAR 0 4
29443: PPUSH
29444: LD_VAR 0 5
29448: PPUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: CALL_OW 248
29458: PPUSH
29459: LD_INT 0
29461: PPUSH
29462: CALL 29969 0 6
29466: ST_TO_ADDR
// if not hexes then
29467: LD_VAR 0 12
29471: NOT
29472: IFFALSE 29476
// exit ;
29474: GO 29964
// hex := GetHexInfo ( x , y ) ;
29476: LD_ADDR_VAR 0 15
29480: PUSH
29481: LD_VAR 0 3
29485: PPUSH
29486: LD_VAR 0 4
29490: PPUSH
29491: CALL_OW 546
29495: ST_TO_ADDR
// if hex [ 1 ] then
29496: LD_VAR 0 15
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: IFFALSE 29508
// exit ;
29506: GO 29964
// height := hex [ 2 ] ;
29508: LD_ADDR_VAR 0 13
29512: PUSH
29513: LD_VAR 0 15
29517: PUSH
29518: LD_INT 2
29520: ARRAY
29521: ST_TO_ADDR
// for i = 1 to hexes do
29522: LD_ADDR_VAR 0 7
29526: PUSH
29527: DOUBLE
29528: LD_INT 1
29530: DEC
29531: ST_TO_ADDR
29532: LD_VAR 0 12
29536: PUSH
29537: FOR_TO
29538: IFFALSE 29868
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29540: LD_VAR 0 12
29544: PUSH
29545: LD_VAR 0 7
29549: ARRAY
29550: PUSH
29551: LD_INT 1
29553: ARRAY
29554: PPUSH
29555: LD_VAR 0 12
29559: PUSH
29560: LD_VAR 0 7
29564: ARRAY
29565: PUSH
29566: LD_INT 2
29568: ARRAY
29569: PPUSH
29570: CALL_OW 488
29574: NOT
29575: PUSH
29576: LD_VAR 0 12
29580: PUSH
29581: LD_VAR 0 7
29585: ARRAY
29586: PUSH
29587: LD_INT 1
29589: ARRAY
29590: PPUSH
29591: LD_VAR 0 12
29595: PUSH
29596: LD_VAR 0 7
29600: ARRAY
29601: PUSH
29602: LD_INT 2
29604: ARRAY
29605: PPUSH
29606: CALL_OW 428
29610: PUSH
29611: LD_INT 0
29613: GREATER
29614: OR
29615: PUSH
29616: LD_VAR 0 12
29620: PUSH
29621: LD_VAR 0 7
29625: ARRAY
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: LD_VAR 0 12
29635: PUSH
29636: LD_VAR 0 7
29640: ARRAY
29641: PUSH
29642: LD_INT 2
29644: ARRAY
29645: PPUSH
29646: CALL_OW 351
29650: OR
29651: IFFALSE 29657
// exit ;
29653: POP
29654: POP
29655: GO 29964
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29657: LD_ADDR_VAR 0 8
29661: PUSH
29662: LD_VAR 0 12
29666: PUSH
29667: LD_VAR 0 7
29671: ARRAY
29672: PUSH
29673: LD_INT 1
29675: ARRAY
29676: PPUSH
29677: LD_VAR 0 12
29681: PUSH
29682: LD_VAR 0 7
29686: ARRAY
29687: PUSH
29688: LD_INT 2
29690: ARRAY
29691: PPUSH
29692: CALL_OW 546
29696: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29697: LD_VAR 0 8
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: PUSH
29706: LD_VAR 0 8
29710: PUSH
29711: LD_INT 2
29713: ARRAY
29714: PUSH
29715: LD_VAR 0 13
29719: PUSH
29720: LD_INT 2
29722: PLUS
29723: GREATER
29724: OR
29725: PUSH
29726: LD_VAR 0 8
29730: PUSH
29731: LD_INT 2
29733: ARRAY
29734: PUSH
29735: LD_VAR 0 13
29739: PUSH
29740: LD_INT 2
29742: MINUS
29743: LESS
29744: OR
29745: PUSH
29746: LD_VAR 0 8
29750: PUSH
29751: LD_INT 3
29753: ARRAY
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: LD_INT 8
29760: PUSH
29761: LD_INT 9
29763: PUSH
29764: LD_INT 10
29766: PUSH
29767: LD_INT 11
29769: PUSH
29770: LD_INT 12
29772: PUSH
29773: LD_INT 13
29775: PUSH
29776: LD_INT 16
29778: PUSH
29779: LD_INT 17
29781: PUSH
29782: LD_INT 18
29784: PUSH
29785: LD_INT 19
29787: PUSH
29788: LD_INT 20
29790: PUSH
29791: LD_INT 21
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: IN
29809: NOT
29810: OR
29811: PUSH
29812: LD_VAR 0 8
29816: PUSH
29817: LD_INT 5
29819: ARRAY
29820: NOT
29821: OR
29822: PUSH
29823: LD_VAR 0 8
29827: PUSH
29828: LD_INT 6
29830: ARRAY
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 7
29840: PUSH
29841: LD_INT 9
29843: PUSH
29844: LD_INT 10
29846: PUSH
29847: LD_INT 11
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: IN
29858: NOT
29859: OR
29860: IFFALSE 29866
// exit ;
29862: POP
29863: POP
29864: GO 29964
// end ;
29866: GO 29537
29868: POP
29869: POP
// side := GetSide ( depot ) ;
29870: LD_ADDR_VAR 0 9
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 255
29884: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29885: LD_VAR 0 9
29889: PPUSH
29890: LD_VAR 0 3
29894: PPUSH
29895: LD_VAR 0 4
29899: PPUSH
29900: LD_INT 20
29902: PPUSH
29903: CALL 22618 0 4
29907: PUSH
29908: LD_INT 4
29910: ARRAY
29911: IFFALSE 29915
// exit ;
29913: GO 29964
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29915: LD_VAR 0 2
29919: PUSH
29920: LD_INT 29
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: IN
29930: PUSH
29931: LD_VAR 0 3
29935: PPUSH
29936: LD_VAR 0 4
29940: PPUSH
29941: LD_VAR 0 9
29945: PPUSH
29946: CALL_OW 440
29950: NOT
29951: AND
29952: IFFALSE 29956
// exit ;
29954: GO 29964
// result := true ;
29956: LD_ADDR_VAR 0 6
29960: PUSH
29961: LD_INT 1
29963: ST_TO_ADDR
// end ;
29964: LD_VAR 0 6
29968: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29969: LD_INT 0
29971: PPUSH
29972: PPUSH
29973: PPUSH
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
// result = [ ] ;
30029: LD_ADDR_VAR 0 7
30033: PUSH
30034: EMPTY
30035: ST_TO_ADDR
// temp_list = [ ] ;
30036: LD_ADDR_VAR 0 9
30040: PUSH
30041: EMPTY
30042: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30043: LD_VAR 0 4
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: IN
30074: NOT
30075: PUSH
30076: LD_VAR 0 1
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: IN
30091: PUSH
30092: LD_VAR 0 5
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: IN
30111: NOT
30112: AND
30113: OR
30114: IFFALSE 30118
// exit ;
30116: GO 48509
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30118: LD_VAR 0 1
30122: PUSH
30123: LD_INT 6
30125: PUSH
30126: LD_INT 7
30128: PUSH
30129: LD_INT 8
30131: PUSH
30132: LD_INT 13
30134: PUSH
30135: LD_INT 12
30137: PUSH
30138: LD_INT 15
30140: PUSH
30141: LD_INT 11
30143: PUSH
30144: LD_INT 14
30146: PUSH
30147: LD_INT 10
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: IN
30161: IFFALSE 30171
// btype = b_lab ;
30163: LD_ADDR_VAR 0 1
30167: PUSH
30168: LD_INT 6
30170: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30171: LD_VAR 0 6
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: IN
30190: NOT
30191: PUSH
30192: LD_VAR 0 1
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 6
30211: PUSH
30212: LD_INT 36
30214: PUSH
30215: LD_INT 4
30217: PUSH
30218: LD_INT 5
30220: PUSH
30221: LD_INT 31
30223: PUSH
30224: LD_INT 32
30226: PUSH
30227: LD_INT 33
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: IN
30243: NOT
30244: PUSH
30245: LD_VAR 0 6
30249: PUSH
30250: LD_INT 1
30252: EQUAL
30253: AND
30254: OR
30255: PUSH
30256: LD_VAR 0 1
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: IN
30271: NOT
30272: PUSH
30273: LD_VAR 0 6
30277: PUSH
30278: LD_INT 2
30280: EQUAL
30281: AND
30282: OR
30283: IFFALSE 30293
// mode = 0 ;
30285: LD_ADDR_VAR 0 6
30289: PUSH
30290: LD_INT 0
30292: ST_TO_ADDR
// case mode of 0 :
30293: LD_VAR 0 6
30297: PUSH
30298: LD_INT 0
30300: DOUBLE
30301: EQUAL
30302: IFTRUE 30306
30304: GO 41759
30306: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30307: LD_ADDR_VAR 0 11
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: LD_INT 1
30380: NEG
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30500: LD_ADDR_VAR 0 12
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: NEG
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: NEG
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 3
30657: NEG
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 3
30668: NEG
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30696: LD_ADDR_VAR 0 13
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 3
30867: NEG
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30895: LD_ADDR_VAR 0 14
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31091: LD_ADDR_VAR 0 15
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: NEG
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31284: LD_ADDR_VAR 0 16
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: LD_INT 3
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31477: LD_ADDR_VAR 0 17
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: LD_INT 2
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31707: LD_ADDR_VAR 0 18
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31937: LD_ADDR_VAR 0 19
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32167: LD_ADDR_VAR 0 20
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32397: LD_ADDR_VAR 0 21
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: NEG
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32627: LD_ADDR_VAR 0 22
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 2
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 2
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32857: LD_ADDR_VAR 0 23
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: NEG
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33137: LD_ADDR_VAR 0 24
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33413: LD_ADDR_VAR 0 25
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: LD_INT 2
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33687: LD_ADDR_VAR 0 26
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: LD_INT 2
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33963: LD_ADDR_VAR 0 27
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 1
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: NEG
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: NEG
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: NEG
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34243: LD_ADDR_VAR 0 28
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 2
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 3
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34525: LD_ADDR_VAR 0 29
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 2
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 3
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34804: LD_ADDR_VAR 0 30
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 3
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35082: LD_ADDR_VAR 0 31
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: NEG
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: NEG
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35360: LD_ADDR_VAR 0 32
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 2
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: LD_INT 3
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35638: LD_ADDR_VAR 0 33
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 2
35828: NEG
35829: PUSH
35830: LD_INT 3
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: NEG
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35917: LD_ADDR_VAR 0 34
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 3
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 3
36162: NEG
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36197: LD_ADDR_VAR 0 35
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36309: LD_ADDR_VAR 0 36
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36421: LD_ADDR_VAR 0 37
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36533: LD_ADDR_VAR 0 38
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36645: LD_ADDR_VAR 0 39
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: NEG
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: LD_INT 2
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36757: LD_ADDR_VAR 0 40
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36869: LD_ADDR_VAR 0 41
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: NEG
37060: PUSH
37061: LD_INT 3
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 3
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 3
37166: NEG
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: LD_INT 3
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37219: LD_ADDR_VAR 0 42
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 3
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 3
37516: NEG
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 3
37528: NEG
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37569: LD_ADDR_VAR 0 43
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 3
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 3
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37917: LD_ADDR_VAR 0 44
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: LD_INT 3
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 3
38191: NEG
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 3
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 3
38214: NEG
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: LD_INT 3
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38267: LD_ADDR_VAR 0 45
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 2
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 3
38564: NEG
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: LD_INT 3
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38617: LD_ADDR_VAR 0 46
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 3
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 3
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 2
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38965: LD_ADDR_VAR 0 47
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 2
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39116: LD_ADDR_VAR 0 48
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39263: LD_ADDR_VAR 0 49
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39407: LD_ADDR_VAR 0 50
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39551: LD_ADDR_VAR 0 51
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39698: LD_ADDR_VAR 0 52
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39849: LD_ADDR_VAR 0 53
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40079: LD_ADDR_VAR 0 54
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40309: LD_ADDR_VAR 0 55
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40539: LD_ADDR_VAR 0 56
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40769: LD_ADDR_VAR 0 57
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40999: LD_ADDR_VAR 0 58
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41229: LD_ADDR_VAR 0 59
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41317: LD_ADDR_VAR 0 60
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41405: LD_ADDR_VAR 0 61
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41493: LD_ADDR_VAR 0 62
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41581: LD_ADDR_VAR 0 63
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41669: LD_ADDR_VAR 0 64
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: ST_TO_ADDR
// end ; 1 :
41757: GO 47654
41759: LD_INT 1
41761: DOUBLE
41762: EQUAL
41763: IFTRUE 41767
41765: GO 44390
41767: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41768: LD_ADDR_VAR 0 11
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 3
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: LIST
41811: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41812: LD_ADDR_VAR 0 12
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41853: LD_ADDR_VAR 0 13
41857: PUSH
41858: LD_INT 3
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: PUSH
41871: LD_INT 3
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41893: LD_ADDR_VAR 0 14
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41934: LD_ADDR_VAR 0 15
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41978: LD_ADDR_VAR 0 16
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 3
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 3
42009: NEG
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42024: LD_ADDR_VAR 0 17
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42068: LD_ADDR_VAR 0 18
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42109: LD_ADDR_VAR 0 19
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42149: LD_ADDR_VAR 0 20
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42190: LD_ADDR_VAR 0 21
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42234: LD_ADDR_VAR 0 22
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 3
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 3
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42280: LD_ADDR_VAR 0 23
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 4
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42324: LD_ADDR_VAR 0 24
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 4
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42365: LD_ADDR_VAR 0 25
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42405: LD_ADDR_VAR 0 26
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42446: LD_ADDR_VAR 0 27
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: NEG
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 4
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42490: LD_ADDR_VAR 0 28
42494: PUSH
42495: LD_INT 3
42497: NEG
42498: PUSH
42499: LD_INT 3
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: LD_INT 4
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 4
42521: NEG
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42536: LD_ADDR_VAR 0 29
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 4
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 4
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 5
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 5
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 4
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 6
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 6
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 5
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42691: LD_ADDR_VAR 0 30
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 4
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 4
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 4
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 5
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 5
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 5
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 6
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 6
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42834: LD_ADDR_VAR 0 31
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 4
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 4
42881: PUSH
42882: LD_INT 4
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 5
42901: PUSH
42902: LD_INT 4
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 5
42911: PUSH
42912: LD_INT 5
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 4
42921: PUSH
42922: LD_INT 5
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 6
42931: PUSH
42932: LD_INT 5
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 6
42941: PUSH
42942: LD_INT 6
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 5
42951: PUSH
42952: LD_INT 6
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42973: LD_ADDR_VAR 0 32
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 3
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 4
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 4
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 5
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 5
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 6
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 6
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43116: LD_ADDR_VAR 0 33
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: NEG
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 4
43168: NEG
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 4
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 4
43191: NEG
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 5
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 5
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 5
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 6
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 6
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43271: LD_ADDR_VAR 0 34
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: NEG
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 4
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 4
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 4
43338: NEG
43339: PUSH
43340: LD_INT 4
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 4
43350: NEG
43351: PUSH
43352: LD_INT 5
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 5
43362: NEG
43363: PUSH
43364: LD_INT 4
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: LD_INT 5
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 5
43386: NEG
43387: PUSH
43388: LD_INT 6
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 6
43398: NEG
43399: PUSH
43400: LD_INT 5
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 6
43410: NEG
43411: PUSH
43412: LD_INT 6
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43434: LD_ADDR_VAR 0 41
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 2
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43478: LD_ADDR_VAR 0 42
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43519: LD_ADDR_VAR 0 43
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43559: LD_ADDR_VAR 0 44
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 3
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43600: LD_ADDR_VAR 0 45
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43644: LD_ADDR_VAR 0 46
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43690: LD_ADDR_VAR 0 47
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 3
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43723: LD_ADDR_VAR 0 48
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43754: LD_ADDR_VAR 0 49
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43783: LD_ADDR_VAR 0 50
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43812: LD_ADDR_VAR 0 51
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43843: LD_ADDR_VAR 0 52
43847: PUSH
43848: LD_INT 3
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 3
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43876: LD_ADDR_VAR 0 53
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43920: LD_ADDR_VAR 0 54
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43961: LD_ADDR_VAR 0 55
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44001: LD_ADDR_VAR 0 56
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44042: LD_ADDR_VAR 0 57
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 3
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 3
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44086: LD_ADDR_VAR 0 58
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: LD_INT 3
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: LD_INT 3
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44132: LD_ADDR_VAR 0 59
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44176: LD_ADDR_VAR 0 60
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44217: LD_ADDR_VAR 0 61
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44257: LD_ADDR_VAR 0 62
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44298: LD_ADDR_VAR 0 63
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44342: LD_ADDR_VAR 0 64
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// end ; 2 :
44388: GO 47654
44390: LD_INT 2
44392: DOUBLE
44393: EQUAL
44394: IFTRUE 44398
44396: GO 47653
44398: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44399: LD_ADDR_VAR 0 29
44403: PUSH
44404: LD_INT 4
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 4
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 5
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 4
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 5
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 4
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 4
44529: PUSH
44530: LD_INT 4
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: LD_INT 4
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 4
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 4
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 4
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 5
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 5
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 4
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 5
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 3
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 4
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 4
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 4
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 4
44784: NEG
44785: PUSH
44786: LD_INT 4
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 4
44796: NEG
44797: PUSH
44798: LD_INT 5
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: NEG
44809: PUSH
44810: LD_INT 4
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 4
44832: NEG
44833: PUSH
44834: LD_INT 3
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 5
44844: NEG
44845: PUSH
44846: LD_INT 4
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 5
44856: NEG
44857: PUSH
44858: LD_INT 5
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: LD_INT 5
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 5
44880: NEG
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44937: LD_ADDR_VAR 0 30
44941: PUSH
44942: LD_INT 4
44944: PUSH
44945: LD_INT 4
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 5
44974: PUSH
44975: LD_INT 5
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 4
44984: PUSH
44985: LD_INT 5
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 4
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 5
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 5
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 4
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 4
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: LD_INT 4
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 4
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 4
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 4
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 5
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 5
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 5
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 3
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: LD_INT 4
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 3
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 4
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 4
45301: NEG
45302: PUSH
45303: LD_INT 4
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 4
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 4
45325: NEG
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 4
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 5
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 4
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 3
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 4
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 5
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 5
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45484: LD_ADDR_VAR 0 31
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 4
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 5
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 5
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 4
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 5
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 4
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: NEG
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: LD_INT 4
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 4
45698: NEG
45699: PUSH
45700: LD_INT 5
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: LD_INT 4
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 3
45722: NEG
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 4
45734: NEG
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 5
45746: NEG
45747: PUSH
45748: LD_INT 4
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 5
45758: NEG
45759: PUSH
45760: LD_INT 5
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: NEG
45771: PUSH
45772: LD_INT 5
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 5
45782: NEG
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 4
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 4
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 4
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 4
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 5
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 4
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 5
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46034: LD_ADDR_VAR 0 32
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 4
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 5
46097: NEG
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 5
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 5
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 4
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 4
46203: NEG
46204: PUSH
46205: LD_INT 3
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 4
46215: NEG
46216: PUSH
46217: LD_INT 4
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 4
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 4
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 4
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 5
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 4
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 4
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 5
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 5
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 4
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 4
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 4
46446: PUSH
46447: LD_INT 4
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 4
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 5
46466: PUSH
46467: LD_INT 4
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 5
46476: PUSH
46477: LD_INT 5
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 4
46486: PUSH
46487: LD_INT 5
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 5
46516: PUSH
46517: LD_INT 3
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 3
46526: PUSH
46527: LD_INT 5
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46581: LD_ADDR_VAR 0 33
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: LD_INT 4
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 4
46600: NEG
46601: PUSH
46602: LD_INT 5
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 3
46624: NEG
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 4
46636: NEG
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 5
46648: NEG
46649: PUSH
46650: LD_INT 4
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 5
46660: NEG
46661: PUSH
46662: LD_INT 5
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: NEG
46673: PUSH
46674: LD_INT 5
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 5
46684: NEG
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 4
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 4
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 4
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 4
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 5
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 5
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 4
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 5
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 4
46921: PUSH
46922: LD_INT 4
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: LD_INT 4
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 3
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 4
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 4
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 5
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 5
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 4
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 5
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47119: LD_ADDR_VAR 0 34
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 4
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 5
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 4
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 4
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 5
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 5
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 4
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: PUSH
47322: LD_INT 4
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 5
47341: PUSH
47342: LD_INT 4
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 5
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 4
47361: PUSH
47362: LD_INT 5
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: LD_INT 4
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 4
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 4
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 4
47504: NEG
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 4
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 5
47560: NEG
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 5
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 5
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// end ; end ;
47651: GO 47654
47653: POP
// case btype of b_depot , b_warehouse :
47654: LD_VAR 0 1
47658: PUSH
47659: LD_INT 0
47661: DOUBLE
47662: EQUAL
47663: IFTRUE 47673
47665: LD_INT 1
47667: DOUBLE
47668: EQUAL
47669: IFTRUE 47673
47671: GO 47874
47673: POP
// case nation of nation_american :
47674: LD_VAR 0 5
47678: PUSH
47679: LD_INT 1
47681: DOUBLE
47682: EQUAL
47683: IFTRUE 47687
47685: GO 47743
47687: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_VAR 0 11
47697: PUSH
47698: LD_VAR 0 12
47702: PUSH
47703: LD_VAR 0 13
47707: PUSH
47708: LD_VAR 0 14
47712: PUSH
47713: LD_VAR 0 15
47717: PUSH
47718: LD_VAR 0 16
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: PUSH
47731: LD_VAR 0 4
47735: PUSH
47736: LD_INT 1
47738: PLUS
47739: ARRAY
47740: ST_TO_ADDR
47741: GO 47872
47743: LD_INT 2
47745: DOUBLE
47746: EQUAL
47747: IFTRUE 47751
47749: GO 47807
47751: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47752: LD_ADDR_VAR 0 9
47756: PUSH
47757: LD_VAR 0 17
47761: PUSH
47762: LD_VAR 0 18
47766: PUSH
47767: LD_VAR 0 19
47771: PUSH
47772: LD_VAR 0 20
47776: PUSH
47777: LD_VAR 0 21
47781: PUSH
47782: LD_VAR 0 22
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: LD_VAR 0 4
47799: PUSH
47800: LD_INT 1
47802: PLUS
47803: ARRAY
47804: ST_TO_ADDR
47805: GO 47872
47807: LD_INT 3
47809: DOUBLE
47810: EQUAL
47811: IFTRUE 47815
47813: GO 47871
47815: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47816: LD_ADDR_VAR 0 9
47820: PUSH
47821: LD_VAR 0 23
47825: PUSH
47826: LD_VAR 0 24
47830: PUSH
47831: LD_VAR 0 25
47835: PUSH
47836: LD_VAR 0 26
47840: PUSH
47841: LD_VAR 0 27
47845: PUSH
47846: LD_VAR 0 28
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: PUSH
47859: LD_VAR 0 4
47863: PUSH
47864: LD_INT 1
47866: PLUS
47867: ARRAY
47868: ST_TO_ADDR
47869: GO 47872
47871: POP
47872: GO 48427
47874: LD_INT 2
47876: DOUBLE
47877: EQUAL
47878: IFTRUE 47888
47880: LD_INT 3
47882: DOUBLE
47883: EQUAL
47884: IFTRUE 47888
47886: GO 47944
47888: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47889: LD_ADDR_VAR 0 9
47893: PUSH
47894: LD_VAR 0 29
47898: PUSH
47899: LD_VAR 0 30
47903: PUSH
47904: LD_VAR 0 31
47908: PUSH
47909: LD_VAR 0 32
47913: PUSH
47914: LD_VAR 0 33
47918: PUSH
47919: LD_VAR 0 34
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: PUSH
47932: LD_VAR 0 4
47936: PUSH
47937: LD_INT 1
47939: PLUS
47940: ARRAY
47941: ST_TO_ADDR
47942: GO 48427
47944: LD_INT 16
47946: DOUBLE
47947: EQUAL
47948: IFTRUE 48006
47950: LD_INT 17
47952: DOUBLE
47953: EQUAL
47954: IFTRUE 48006
47956: LD_INT 18
47958: DOUBLE
47959: EQUAL
47960: IFTRUE 48006
47962: LD_INT 19
47964: DOUBLE
47965: EQUAL
47966: IFTRUE 48006
47968: LD_INT 22
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 48006
47974: LD_INT 20
47976: DOUBLE
47977: EQUAL
47978: IFTRUE 48006
47980: LD_INT 21
47982: DOUBLE
47983: EQUAL
47984: IFTRUE 48006
47986: LD_INT 23
47988: DOUBLE
47989: EQUAL
47990: IFTRUE 48006
47992: LD_INT 24
47994: DOUBLE
47995: EQUAL
47996: IFTRUE 48006
47998: LD_INT 25
48000: DOUBLE
48001: EQUAL
48002: IFTRUE 48006
48004: GO 48062
48006: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48007: LD_ADDR_VAR 0 9
48011: PUSH
48012: LD_VAR 0 35
48016: PUSH
48017: LD_VAR 0 36
48021: PUSH
48022: LD_VAR 0 37
48026: PUSH
48027: LD_VAR 0 38
48031: PUSH
48032: LD_VAR 0 39
48036: PUSH
48037: LD_VAR 0 40
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: PUSH
48050: LD_VAR 0 4
48054: PUSH
48055: LD_INT 1
48057: PLUS
48058: ARRAY
48059: ST_TO_ADDR
48060: GO 48427
48062: LD_INT 6
48064: DOUBLE
48065: EQUAL
48066: IFTRUE 48118
48068: LD_INT 7
48070: DOUBLE
48071: EQUAL
48072: IFTRUE 48118
48074: LD_INT 8
48076: DOUBLE
48077: EQUAL
48078: IFTRUE 48118
48080: LD_INT 13
48082: DOUBLE
48083: EQUAL
48084: IFTRUE 48118
48086: LD_INT 12
48088: DOUBLE
48089: EQUAL
48090: IFTRUE 48118
48092: LD_INT 15
48094: DOUBLE
48095: EQUAL
48096: IFTRUE 48118
48098: LD_INT 11
48100: DOUBLE
48101: EQUAL
48102: IFTRUE 48118
48104: LD_INT 14
48106: DOUBLE
48107: EQUAL
48108: IFTRUE 48118
48110: LD_INT 10
48112: DOUBLE
48113: EQUAL
48114: IFTRUE 48118
48116: GO 48174
48118: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48119: LD_ADDR_VAR 0 9
48123: PUSH
48124: LD_VAR 0 41
48128: PUSH
48129: LD_VAR 0 42
48133: PUSH
48134: LD_VAR 0 43
48138: PUSH
48139: LD_VAR 0 44
48143: PUSH
48144: LD_VAR 0 45
48148: PUSH
48149: LD_VAR 0 46
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: PUSH
48162: LD_VAR 0 4
48166: PUSH
48167: LD_INT 1
48169: PLUS
48170: ARRAY
48171: ST_TO_ADDR
48172: GO 48427
48174: LD_INT 36
48176: DOUBLE
48177: EQUAL
48178: IFTRUE 48182
48180: GO 48238
48182: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48183: LD_ADDR_VAR 0 9
48187: PUSH
48188: LD_VAR 0 47
48192: PUSH
48193: LD_VAR 0 48
48197: PUSH
48198: LD_VAR 0 49
48202: PUSH
48203: LD_VAR 0 50
48207: PUSH
48208: LD_VAR 0 51
48212: PUSH
48213: LD_VAR 0 52
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: PUSH
48226: LD_VAR 0 4
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: ARRAY
48235: ST_TO_ADDR
48236: GO 48427
48238: LD_INT 4
48240: DOUBLE
48241: EQUAL
48242: IFTRUE 48264
48244: LD_INT 5
48246: DOUBLE
48247: EQUAL
48248: IFTRUE 48264
48250: LD_INT 34
48252: DOUBLE
48253: EQUAL
48254: IFTRUE 48264
48256: LD_INT 37
48258: DOUBLE
48259: EQUAL
48260: IFTRUE 48264
48262: GO 48320
48264: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48265: LD_ADDR_VAR 0 9
48269: PUSH
48270: LD_VAR 0 53
48274: PUSH
48275: LD_VAR 0 54
48279: PUSH
48280: LD_VAR 0 55
48284: PUSH
48285: LD_VAR 0 56
48289: PUSH
48290: LD_VAR 0 57
48294: PUSH
48295: LD_VAR 0 58
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: PUSH
48308: LD_VAR 0 4
48312: PUSH
48313: LD_INT 1
48315: PLUS
48316: ARRAY
48317: ST_TO_ADDR
48318: GO 48427
48320: LD_INT 31
48322: DOUBLE
48323: EQUAL
48324: IFTRUE 48370
48326: LD_INT 32
48328: DOUBLE
48329: EQUAL
48330: IFTRUE 48370
48332: LD_INT 33
48334: DOUBLE
48335: EQUAL
48336: IFTRUE 48370
48338: LD_INT 27
48340: DOUBLE
48341: EQUAL
48342: IFTRUE 48370
48344: LD_INT 26
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48370
48350: LD_INT 28
48352: DOUBLE
48353: EQUAL
48354: IFTRUE 48370
48356: LD_INT 29
48358: DOUBLE
48359: EQUAL
48360: IFTRUE 48370
48362: LD_INT 30
48364: DOUBLE
48365: EQUAL
48366: IFTRUE 48370
48368: GO 48426
48370: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48371: LD_ADDR_VAR 0 9
48375: PUSH
48376: LD_VAR 0 59
48380: PUSH
48381: LD_VAR 0 60
48385: PUSH
48386: LD_VAR 0 61
48390: PUSH
48391: LD_VAR 0 62
48395: PUSH
48396: LD_VAR 0 63
48400: PUSH
48401: LD_VAR 0 64
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: PUSH
48414: LD_VAR 0 4
48418: PUSH
48419: LD_INT 1
48421: PLUS
48422: ARRAY
48423: ST_TO_ADDR
48424: GO 48427
48426: POP
// temp_list2 = [ ] ;
48427: LD_ADDR_VAR 0 10
48431: PUSH
48432: EMPTY
48433: ST_TO_ADDR
// for i in temp_list do
48434: LD_ADDR_VAR 0 8
48438: PUSH
48439: LD_VAR 0 9
48443: PUSH
48444: FOR_IN
48445: IFFALSE 48497
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48447: LD_ADDR_VAR 0 10
48451: PUSH
48452: LD_VAR 0 10
48456: PUSH
48457: LD_VAR 0 8
48461: PUSH
48462: LD_INT 1
48464: ARRAY
48465: PUSH
48466: LD_VAR 0 2
48470: PLUS
48471: PUSH
48472: LD_VAR 0 8
48476: PUSH
48477: LD_INT 2
48479: ARRAY
48480: PUSH
48481: LD_VAR 0 3
48485: PLUS
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: ADD
48494: ST_TO_ADDR
48495: GO 48444
48497: POP
48498: POP
// result = temp_list2 ;
48499: LD_ADDR_VAR 0 7
48503: PUSH
48504: LD_VAR 0 10
48508: ST_TO_ADDR
// end ;
48509: LD_VAR 0 7
48513: RET
// export function EnemyInRange ( unit , dist ) ; begin
48514: LD_INT 0
48516: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48517: LD_ADDR_VAR 0 3
48521: PUSH
48522: LD_VAR 0 1
48526: PPUSH
48527: CALL_OW 255
48531: PPUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: CALL_OW 250
48541: PPUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: CALL_OW 251
48551: PPUSH
48552: LD_VAR 0 2
48556: PPUSH
48557: CALL 22618 0 4
48561: PUSH
48562: LD_INT 4
48564: ARRAY
48565: ST_TO_ADDR
// end ;
48566: LD_VAR 0 3
48570: RET
// export function PlayerSeeMe ( unit ) ; begin
48571: LD_INT 0
48573: PPUSH
// result := See ( your_side , unit ) ;
48574: LD_ADDR_VAR 0 2
48578: PUSH
48579: LD_OWVAR 2
48583: PPUSH
48584: LD_VAR 0 1
48588: PPUSH
48589: CALL_OW 292
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 2
48598: RET
// export function ReverseDir ( unit ) ; begin
48599: LD_INT 0
48601: PPUSH
// if not unit then
48602: LD_VAR 0 1
48606: NOT
48607: IFFALSE 48611
// exit ;
48609: GO 48634
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48611: LD_ADDR_VAR 0 2
48615: PUSH
48616: LD_VAR 0 1
48620: PPUSH
48621: CALL_OW 254
48625: PUSH
48626: LD_INT 3
48628: PLUS
48629: PUSH
48630: LD_INT 6
48632: MOD
48633: ST_TO_ADDR
// end ;
48634: LD_VAR 0 2
48638: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
48639: LD_INT 0
48641: PPUSH
48642: PPUSH
48643: PPUSH
48644: PPUSH
48645: PPUSH
// if not hexes then
48646: LD_VAR 0 2
48650: NOT
48651: IFFALSE 48655
// exit ;
48653: GO 48803
// dist := 9999 ;
48655: LD_ADDR_VAR 0 5
48659: PUSH
48660: LD_INT 9999
48662: ST_TO_ADDR
// for i = 1 to hexes do
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: DOUBLE
48669: LD_INT 1
48671: DEC
48672: ST_TO_ADDR
48673: LD_VAR 0 2
48677: PUSH
48678: FOR_TO
48679: IFFALSE 48791
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
48681: LD_VAR 0 1
48685: PPUSH
48686: LD_VAR 0 2
48690: PUSH
48691: LD_VAR 0 4
48695: ARRAY
48696: PUSH
48697: LD_INT 1
48699: ARRAY
48700: PPUSH
48701: LD_VAR 0 2
48705: PUSH
48706: LD_VAR 0 4
48710: ARRAY
48711: PUSH
48712: LD_INT 2
48714: ARRAY
48715: PPUSH
48716: CALL_OW 297
48720: PUSH
48721: LD_VAR 0 5
48725: LESS
48726: IFFALSE 48789
// begin hex := hexes [ i ] ;
48728: LD_ADDR_VAR 0 7
48732: PUSH
48733: LD_VAR 0 2
48737: PUSH
48738: LD_VAR 0 4
48742: ARRAY
48743: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48744: LD_ADDR_VAR 0 5
48748: PUSH
48749: LD_VAR 0 1
48753: PPUSH
48754: LD_VAR 0 2
48758: PUSH
48759: LD_VAR 0 4
48763: ARRAY
48764: PUSH
48765: LD_INT 1
48767: ARRAY
48768: PPUSH
48769: LD_VAR 0 2
48773: PUSH
48774: LD_VAR 0 4
48778: ARRAY
48779: PUSH
48780: LD_INT 2
48782: ARRAY
48783: PPUSH
48784: CALL_OW 297
48788: ST_TO_ADDR
// end ; end ;
48789: GO 48678
48791: POP
48792: POP
// result := hex ;
48793: LD_ADDR_VAR 0 3
48797: PUSH
48798: LD_VAR 0 7
48802: ST_TO_ADDR
// end ;
48803: LD_VAR 0 3
48807: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48808: LD_INT 0
48810: PPUSH
48811: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48812: LD_VAR 0 1
48816: NOT
48817: PUSH
48818: LD_VAR 0 1
48822: PUSH
48823: LD_INT 21
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 23
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PPUSH
48847: CALL_OW 69
48851: IN
48852: NOT
48853: OR
48854: IFFALSE 48858
// exit ;
48856: GO 48905
// for i = 1 to 3 do
48858: LD_ADDR_VAR 0 3
48862: PUSH
48863: DOUBLE
48864: LD_INT 1
48866: DEC
48867: ST_TO_ADDR
48868: LD_INT 3
48870: PUSH
48871: FOR_TO
48872: IFFALSE 48903
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48874: LD_VAR 0 1
48878: PPUSH
48879: CALL_OW 250
48883: PPUSH
48884: LD_VAR 0 1
48888: PPUSH
48889: CALL_OW 251
48893: PPUSH
48894: LD_INT 1
48896: PPUSH
48897: CALL_OW 453
48901: GO 48871
48903: POP
48904: POP
// end ;
48905: LD_VAR 0 2
48909: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48910: LD_INT 0
48912: PPUSH
48913: PPUSH
48914: PPUSH
48915: PPUSH
48916: PPUSH
48917: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48918: LD_VAR 0 1
48922: NOT
48923: PUSH
48924: LD_VAR 0 2
48928: NOT
48929: OR
48930: PUSH
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 314
48940: OR
48941: IFFALSE 48945
// exit ;
48943: GO 49386
// x := GetX ( enemy_unit ) ;
48945: LD_ADDR_VAR 0 7
48949: PUSH
48950: LD_VAR 0 2
48954: PPUSH
48955: CALL_OW 250
48959: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48960: LD_ADDR_VAR 0 8
48964: PUSH
48965: LD_VAR 0 2
48969: PPUSH
48970: CALL_OW 251
48974: ST_TO_ADDR
// if not x or not y then
48975: LD_VAR 0 7
48979: NOT
48980: PUSH
48981: LD_VAR 0 8
48985: NOT
48986: OR
48987: IFFALSE 48991
// exit ;
48989: GO 49386
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48991: LD_ADDR_VAR 0 6
48995: PUSH
48996: LD_VAR 0 7
49000: PPUSH
49001: LD_INT 0
49003: PPUSH
49004: LD_INT 4
49006: PPUSH
49007: CALL_OW 272
49011: PUSH
49012: LD_VAR 0 8
49016: PPUSH
49017: LD_INT 0
49019: PPUSH
49020: LD_INT 4
49022: PPUSH
49023: CALL_OW 273
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_VAR 0 7
49036: PPUSH
49037: LD_INT 1
49039: PPUSH
49040: LD_INT 4
49042: PPUSH
49043: CALL_OW 272
49047: PUSH
49048: LD_VAR 0 8
49052: PPUSH
49053: LD_INT 1
49055: PPUSH
49056: LD_INT 4
49058: PPUSH
49059: CALL_OW 273
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_VAR 0 7
49072: PPUSH
49073: LD_INT 2
49075: PPUSH
49076: LD_INT 4
49078: PPUSH
49079: CALL_OW 272
49083: PUSH
49084: LD_VAR 0 8
49088: PPUSH
49089: LD_INT 2
49091: PPUSH
49092: LD_INT 4
49094: PPUSH
49095: CALL_OW 273
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_VAR 0 7
49108: PPUSH
49109: LD_INT 3
49111: PPUSH
49112: LD_INT 4
49114: PPUSH
49115: CALL_OW 272
49119: PUSH
49120: LD_VAR 0 8
49124: PPUSH
49125: LD_INT 3
49127: PPUSH
49128: LD_INT 4
49130: PPUSH
49131: CALL_OW 273
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_VAR 0 7
49144: PPUSH
49145: LD_INT 4
49147: PPUSH
49148: LD_INT 4
49150: PPUSH
49151: CALL_OW 272
49155: PUSH
49156: LD_VAR 0 8
49160: PPUSH
49161: LD_INT 4
49163: PPUSH
49164: LD_INT 4
49166: PPUSH
49167: CALL_OW 273
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_VAR 0 7
49180: PPUSH
49181: LD_INT 5
49183: PPUSH
49184: LD_INT 4
49186: PPUSH
49187: CALL_OW 272
49191: PUSH
49192: LD_VAR 0 8
49196: PPUSH
49197: LD_INT 5
49199: PPUSH
49200: LD_INT 4
49202: PPUSH
49203: CALL_OW 273
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// for i = tmp downto 1 do
49220: LD_ADDR_VAR 0 4
49224: PUSH
49225: DOUBLE
49226: LD_VAR 0 6
49230: INC
49231: ST_TO_ADDR
49232: LD_INT 1
49234: PUSH
49235: FOR_DOWNTO
49236: IFFALSE 49337
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49238: LD_VAR 0 6
49242: PUSH
49243: LD_VAR 0 4
49247: ARRAY
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PPUSH
49253: LD_VAR 0 6
49257: PUSH
49258: LD_VAR 0 4
49262: ARRAY
49263: PUSH
49264: LD_INT 2
49266: ARRAY
49267: PPUSH
49268: CALL_OW 488
49272: NOT
49273: PUSH
49274: LD_VAR 0 6
49278: PUSH
49279: LD_VAR 0 4
49283: ARRAY
49284: PUSH
49285: LD_INT 1
49287: ARRAY
49288: PPUSH
49289: LD_VAR 0 6
49293: PUSH
49294: LD_VAR 0 4
49298: ARRAY
49299: PUSH
49300: LD_INT 2
49302: ARRAY
49303: PPUSH
49304: CALL_OW 428
49308: PUSH
49309: LD_INT 0
49311: NONEQUAL
49312: OR
49313: IFFALSE 49335
// tmp := Delete ( tmp , i ) ;
49315: LD_ADDR_VAR 0 6
49319: PUSH
49320: LD_VAR 0 6
49324: PPUSH
49325: LD_VAR 0 4
49329: PPUSH
49330: CALL_OW 3
49334: ST_TO_ADDR
49335: GO 49235
49337: POP
49338: POP
// j := GetClosestHex ( unit , tmp ) ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: LD_VAR 0 6
49353: PPUSH
49354: CALL 48639 0 2
49358: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49359: LD_VAR 0 1
49363: PPUSH
49364: LD_VAR 0 5
49368: PUSH
49369: LD_INT 1
49371: ARRAY
49372: PPUSH
49373: LD_VAR 0 5
49377: PUSH
49378: LD_INT 2
49380: ARRAY
49381: PPUSH
49382: CALL_OW 111
// end ;
49386: LD_VAR 0 3
49390: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49391: LD_INT 0
49393: PPUSH
49394: PPUSH
49395: PPUSH
// uc_side = 0 ;
49396: LD_ADDR_OWVAR 20
49400: PUSH
49401: LD_INT 0
49403: ST_TO_ADDR
// uc_nation = 0 ;
49404: LD_ADDR_OWVAR 21
49408: PUSH
49409: LD_INT 0
49411: ST_TO_ADDR
// InitHc ;
49412: CALL_OW 19
// InitVc ;
49416: CALL_OW 20
// if mastodonts then
49420: LD_VAR 0 6
49424: IFFALSE 49491
// for i = 1 to mastodonts do
49426: LD_ADDR_VAR 0 11
49430: PUSH
49431: DOUBLE
49432: LD_INT 1
49434: DEC
49435: ST_TO_ADDR
49436: LD_VAR 0 6
49440: PUSH
49441: FOR_TO
49442: IFFALSE 49489
// begin vc_chassis := 31 ;
49444: LD_ADDR_OWVAR 37
49448: PUSH
49449: LD_INT 31
49451: ST_TO_ADDR
// vc_control := control_rider ;
49452: LD_ADDR_OWVAR 38
49456: PUSH
49457: LD_INT 4
49459: ST_TO_ADDR
// animal := CreateVehicle ;
49460: LD_ADDR_VAR 0 12
49464: PUSH
49465: CALL_OW 45
49469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49470: LD_VAR 0 12
49474: PPUSH
49475: LD_VAR 0 8
49479: PPUSH
49480: LD_INT 0
49482: PPUSH
49483: CALL 51679 0 3
// end ;
49487: GO 49441
49489: POP
49490: POP
// if horses then
49491: LD_VAR 0 5
49495: IFFALSE 49562
// for i = 1 to horses do
49497: LD_ADDR_VAR 0 11
49501: PUSH
49502: DOUBLE
49503: LD_INT 1
49505: DEC
49506: ST_TO_ADDR
49507: LD_VAR 0 5
49511: PUSH
49512: FOR_TO
49513: IFFALSE 49560
// begin hc_class := 21 ;
49515: LD_ADDR_OWVAR 28
49519: PUSH
49520: LD_INT 21
49522: ST_TO_ADDR
// hc_gallery :=  ;
49523: LD_ADDR_OWVAR 33
49527: PUSH
49528: LD_STRING 
49530: ST_TO_ADDR
// animal := CreateHuman ;
49531: LD_ADDR_VAR 0 12
49535: PUSH
49536: CALL_OW 44
49540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49541: LD_VAR 0 12
49545: PPUSH
49546: LD_VAR 0 8
49550: PPUSH
49551: LD_INT 0
49553: PPUSH
49554: CALL 51679 0 3
// end ;
49558: GO 49512
49560: POP
49561: POP
// if birds then
49562: LD_VAR 0 1
49566: IFFALSE 49633
// for i = 1 to birds do
49568: LD_ADDR_VAR 0 11
49572: PUSH
49573: DOUBLE
49574: LD_INT 1
49576: DEC
49577: ST_TO_ADDR
49578: LD_VAR 0 1
49582: PUSH
49583: FOR_TO
49584: IFFALSE 49631
// begin hc_class = 18 ;
49586: LD_ADDR_OWVAR 28
49590: PUSH
49591: LD_INT 18
49593: ST_TO_ADDR
// hc_gallery =  ;
49594: LD_ADDR_OWVAR 33
49598: PUSH
49599: LD_STRING 
49601: ST_TO_ADDR
// animal := CreateHuman ;
49602: LD_ADDR_VAR 0 12
49606: PUSH
49607: CALL_OW 44
49611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49612: LD_VAR 0 12
49616: PPUSH
49617: LD_VAR 0 8
49621: PPUSH
49622: LD_INT 0
49624: PPUSH
49625: CALL 51679 0 3
// end ;
49629: GO 49583
49631: POP
49632: POP
// if tigers then
49633: LD_VAR 0 2
49637: IFFALSE 49721
// for i = 1 to tigers do
49639: LD_ADDR_VAR 0 11
49643: PUSH
49644: DOUBLE
49645: LD_INT 1
49647: DEC
49648: ST_TO_ADDR
49649: LD_VAR 0 2
49653: PUSH
49654: FOR_TO
49655: IFFALSE 49719
// begin hc_class = class_tiger ;
49657: LD_ADDR_OWVAR 28
49661: PUSH
49662: LD_INT 14
49664: ST_TO_ADDR
// hc_gallery =  ;
49665: LD_ADDR_OWVAR 33
49669: PUSH
49670: LD_STRING 
49672: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49673: LD_ADDR_OWVAR 35
49677: PUSH
49678: LD_INT 7
49680: NEG
49681: PPUSH
49682: LD_INT 7
49684: PPUSH
49685: CALL_OW 12
49689: ST_TO_ADDR
// animal := CreateHuman ;
49690: LD_ADDR_VAR 0 12
49694: PUSH
49695: CALL_OW 44
49699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49700: LD_VAR 0 12
49704: PPUSH
49705: LD_VAR 0 8
49709: PPUSH
49710: LD_INT 0
49712: PPUSH
49713: CALL 51679 0 3
// end ;
49717: GO 49654
49719: POP
49720: POP
// if apemans then
49721: LD_VAR 0 3
49725: IFFALSE 49848
// for i = 1 to apemans do
49727: LD_ADDR_VAR 0 11
49731: PUSH
49732: DOUBLE
49733: LD_INT 1
49735: DEC
49736: ST_TO_ADDR
49737: LD_VAR 0 3
49741: PUSH
49742: FOR_TO
49743: IFFALSE 49846
// begin hc_class = class_apeman ;
49745: LD_ADDR_OWVAR 28
49749: PUSH
49750: LD_INT 12
49752: ST_TO_ADDR
// hc_gallery =  ;
49753: LD_ADDR_OWVAR 33
49757: PUSH
49758: LD_STRING 
49760: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
49761: LD_ADDR_OWVAR 35
49765: PUSH
49766: LD_INT 5
49768: NEG
49769: PPUSH
49770: LD_INT 5
49772: PPUSH
49773: CALL_OW 12
49777: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49778: LD_ADDR_OWVAR 31
49782: PUSH
49783: LD_INT 1
49785: PPUSH
49786: LD_INT 3
49788: PPUSH
49789: CALL_OW 12
49793: PUSH
49794: LD_INT 1
49796: PPUSH
49797: LD_INT 3
49799: PPUSH
49800: CALL_OW 12
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// animal := CreateHuman ;
49817: LD_ADDR_VAR 0 12
49821: PUSH
49822: CALL_OW 44
49826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49827: LD_VAR 0 12
49831: PPUSH
49832: LD_VAR 0 8
49836: PPUSH
49837: LD_INT 0
49839: PPUSH
49840: CALL 51679 0 3
// end ;
49844: GO 49742
49846: POP
49847: POP
// if enchidnas then
49848: LD_VAR 0 4
49852: IFFALSE 49919
// for i = 1 to enchidnas do
49854: LD_ADDR_VAR 0 11
49858: PUSH
49859: DOUBLE
49860: LD_INT 1
49862: DEC
49863: ST_TO_ADDR
49864: LD_VAR 0 4
49868: PUSH
49869: FOR_TO
49870: IFFALSE 49917
// begin hc_class = 13 ;
49872: LD_ADDR_OWVAR 28
49876: PUSH
49877: LD_INT 13
49879: ST_TO_ADDR
// hc_gallery =  ;
49880: LD_ADDR_OWVAR 33
49884: PUSH
49885: LD_STRING 
49887: ST_TO_ADDR
// animal := CreateHuman ;
49888: LD_ADDR_VAR 0 12
49892: PUSH
49893: CALL_OW 44
49897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49898: LD_VAR 0 12
49902: PPUSH
49903: LD_VAR 0 8
49907: PPUSH
49908: LD_INT 0
49910: PPUSH
49911: CALL 51679 0 3
// end ;
49915: GO 49869
49917: POP
49918: POP
// if fishes then
49919: LD_VAR 0 7
49923: IFFALSE 49990
// for i = 1 to fishes do
49925: LD_ADDR_VAR 0 11
49929: PUSH
49930: DOUBLE
49931: LD_INT 1
49933: DEC
49934: ST_TO_ADDR
49935: LD_VAR 0 7
49939: PUSH
49940: FOR_TO
49941: IFFALSE 49988
// begin hc_class = 20 ;
49943: LD_ADDR_OWVAR 28
49947: PUSH
49948: LD_INT 20
49950: ST_TO_ADDR
// hc_gallery =  ;
49951: LD_ADDR_OWVAR 33
49955: PUSH
49956: LD_STRING 
49958: ST_TO_ADDR
// animal := CreateHuman ;
49959: LD_ADDR_VAR 0 12
49963: PUSH
49964: CALL_OW 44
49968: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49969: LD_VAR 0 12
49973: PPUSH
49974: LD_VAR 0 9
49978: PPUSH
49979: LD_INT 0
49981: PPUSH
49982: CALL 51679 0 3
// end ;
49986: GO 49940
49988: POP
49989: POP
// end ;
49990: LD_VAR 0 10
49994: RET
// export function WantHeal ( sci , unit ) ; begin
49995: LD_INT 0
49997: PPUSH
// if GetTaskList ( sci ) > 0 then
49998: LD_VAR 0 1
50002: PPUSH
50003: CALL_OW 437
50007: PUSH
50008: LD_INT 0
50010: GREATER
50011: IFFALSE 50081
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50013: LD_VAR 0 1
50017: PPUSH
50018: CALL_OW 437
50022: PUSH
50023: LD_INT 1
50025: ARRAY
50026: PUSH
50027: LD_INT 1
50029: ARRAY
50030: PUSH
50031: LD_STRING l
50033: EQUAL
50034: PUSH
50035: LD_VAR 0 1
50039: PPUSH
50040: CALL_OW 437
50044: PUSH
50045: LD_INT 1
50047: ARRAY
50048: PUSH
50049: LD_INT 4
50051: ARRAY
50052: PUSH
50053: LD_VAR 0 2
50057: EQUAL
50058: AND
50059: IFFALSE 50071
// result := true else
50061: LD_ADDR_VAR 0 3
50065: PUSH
50066: LD_INT 1
50068: ST_TO_ADDR
50069: GO 50079
// result := false ;
50071: LD_ADDR_VAR 0 3
50075: PUSH
50076: LD_INT 0
50078: ST_TO_ADDR
// end else
50079: GO 50089
// result := false ;
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: LD_INT 0
50088: ST_TO_ADDR
// end ;
50089: LD_VAR 0 3
50093: RET
// export function HealTarget ( sci ) ; begin
50094: LD_INT 0
50096: PPUSH
// if not sci then
50097: LD_VAR 0 1
50101: NOT
50102: IFFALSE 50106
// exit ;
50104: GO 50171
// result := 0 ;
50106: LD_ADDR_VAR 0 2
50110: PUSH
50111: LD_INT 0
50113: ST_TO_ADDR
// if GetTaskList ( sci ) then
50114: LD_VAR 0 1
50118: PPUSH
50119: CALL_OW 437
50123: IFFALSE 50171
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50125: LD_VAR 0 1
50129: PPUSH
50130: CALL_OW 437
50134: PUSH
50135: LD_INT 1
50137: ARRAY
50138: PUSH
50139: LD_INT 1
50141: ARRAY
50142: PUSH
50143: LD_STRING l
50145: EQUAL
50146: IFFALSE 50171
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50148: LD_ADDR_VAR 0 2
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 437
50162: PUSH
50163: LD_INT 1
50165: ARRAY
50166: PUSH
50167: LD_INT 4
50169: ARRAY
50170: ST_TO_ADDR
// end ;
50171: LD_VAR 0 2
50175: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
50180: PPUSH
50181: PPUSH
// if not base_units then
50182: LD_VAR 0 1
50186: NOT
50187: IFFALSE 50191
// exit ;
50189: GO 50278
// result := false ;
50191: LD_ADDR_VAR 0 2
50195: PUSH
50196: LD_INT 0
50198: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50199: LD_ADDR_VAR 0 5
50203: PUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: LD_INT 21
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PPUSH
50219: CALL_OW 72
50223: ST_TO_ADDR
// if not tmp then
50224: LD_VAR 0 5
50228: NOT
50229: IFFALSE 50233
// exit ;
50231: GO 50278
// for i in tmp do
50233: LD_ADDR_VAR 0 3
50237: PUSH
50238: LD_VAR 0 5
50242: PUSH
50243: FOR_IN
50244: IFFALSE 50276
// begin result := EnemyInRange ( i , 22 ) ;
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: LD_VAR 0 3
50255: PPUSH
50256: LD_INT 22
50258: PPUSH
50259: CALL 48514 0 2
50263: ST_TO_ADDR
// if result then
50264: LD_VAR 0 2
50268: IFFALSE 50274
// exit ;
50270: POP
50271: POP
50272: GO 50278
// end ;
50274: GO 50243
50276: POP
50277: POP
// end ;
50278: LD_VAR 0 2
50282: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50283: LD_INT 0
50285: PPUSH
50286: PPUSH
// if not units then
50287: LD_VAR 0 1
50291: NOT
50292: IFFALSE 50296
// exit ;
50294: GO 50366
// result := [ ] ;
50296: LD_ADDR_VAR 0 3
50300: PUSH
50301: EMPTY
50302: ST_TO_ADDR
// for i in units do
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_VAR 0 1
50312: PUSH
50313: FOR_IN
50314: IFFALSE 50364
// if GetTag ( i ) = tag then
50316: LD_VAR 0 4
50320: PPUSH
50321: CALL_OW 110
50325: PUSH
50326: LD_VAR 0 2
50330: EQUAL
50331: IFFALSE 50362
// result := Insert ( result , result + 1 , i ) ;
50333: LD_ADDR_VAR 0 3
50337: PUSH
50338: LD_VAR 0 3
50342: PPUSH
50343: LD_VAR 0 3
50347: PUSH
50348: LD_INT 1
50350: PLUS
50351: PPUSH
50352: LD_VAR 0 4
50356: PPUSH
50357: CALL_OW 2
50361: ST_TO_ADDR
50362: GO 50313
50364: POP
50365: POP
// end ;
50366: LD_VAR 0 3
50370: RET
// export function IsDriver ( un ) ; begin
50371: LD_INT 0
50373: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50374: LD_ADDR_VAR 0 2
50378: PUSH
50379: LD_VAR 0 1
50383: PUSH
50384: LD_INT 55
50386: PUSH
50387: EMPTY
50388: LIST
50389: PPUSH
50390: CALL_OW 69
50394: IN
50395: ST_TO_ADDR
// end ;
50396: LD_VAR 0 2
50400: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50401: LD_INT 0
50403: PPUSH
50404: PPUSH
// list := [ ] ;
50405: LD_ADDR_VAR 0 5
50409: PUSH
50410: EMPTY
50411: ST_TO_ADDR
// case d of 0 :
50412: LD_VAR 0 3
50416: PUSH
50417: LD_INT 0
50419: DOUBLE
50420: EQUAL
50421: IFTRUE 50425
50423: GO 50558
50425: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50426: LD_ADDR_VAR 0 5
50430: PUSH
50431: LD_VAR 0 1
50435: PUSH
50436: LD_INT 4
50438: MINUS
50439: PUSH
50440: LD_VAR 0 2
50444: PUSH
50445: LD_INT 4
50447: MINUS
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: PUSH
50457: LD_VAR 0 1
50461: PUSH
50462: LD_INT 3
50464: MINUS
50465: PUSH
50466: LD_VAR 0 2
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: PUSH
50479: LD_VAR 0 1
50483: PUSH
50484: LD_INT 4
50486: PLUS
50487: PUSH
50488: LD_VAR 0 2
50492: PUSH
50493: LD_INT 4
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_INT 3
50508: PLUS
50509: PUSH
50510: LD_VAR 0 2
50514: PUSH
50515: LD_INT 3
50517: PLUS
50518: PUSH
50519: LD_INT 5
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: PUSH
50527: LD_VAR 0 1
50531: PUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_INT 4
50539: PLUS
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// end ; 1 :
50556: GO 51256
50558: LD_INT 1
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50566
50564: GO 50699
50566: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50567: LD_ADDR_VAR 0 5
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: LD_VAR 0 2
50581: PUSH
50582: LD_INT 4
50584: MINUS
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: PUSH
50594: LD_VAR 0 1
50598: PUSH
50599: LD_INT 3
50601: MINUS
50602: PUSH
50603: LD_VAR 0 2
50607: PUSH
50608: LD_INT 3
50610: MINUS
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: PUSH
50620: LD_VAR 0 1
50624: PUSH
50625: LD_INT 4
50627: MINUS
50628: PUSH
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: PUSH
50642: LD_VAR 0 1
50646: PUSH
50647: LD_VAR 0 2
50651: PUSH
50652: LD_INT 3
50654: PLUS
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: LD_VAR 0 1
50668: PUSH
50669: LD_INT 4
50671: PLUS
50672: PUSH
50673: LD_VAR 0 2
50677: PUSH
50678: LD_INT 4
50680: PLUS
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// end ; 2 :
50697: GO 51256
50699: LD_INT 2
50701: DOUBLE
50702: EQUAL
50703: IFTRUE 50707
50705: GO 50836
50707: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50708: LD_ADDR_VAR 0 5
50712: PUSH
50713: LD_VAR 0 1
50717: PUSH
50718: LD_VAR 0 2
50722: PUSH
50723: LD_INT 3
50725: MINUS
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: PUSH
50735: LD_VAR 0 1
50739: PUSH
50740: LD_INT 4
50742: PLUS
50743: PUSH
50744: LD_VAR 0 2
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: LIST
50756: PUSH
50757: LD_VAR 0 1
50761: PUSH
50762: LD_VAR 0 2
50766: PUSH
50767: LD_INT 4
50769: PLUS
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: PUSH
50779: LD_VAR 0 1
50783: PUSH
50784: LD_INT 3
50786: MINUS
50787: PUSH
50788: LD_VAR 0 2
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 4
50808: MINUS
50809: PUSH
50810: LD_VAR 0 2
50814: PUSH
50815: LD_INT 4
50817: MINUS
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// end ; 3 :
50834: GO 51256
50836: LD_INT 3
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50977
50844: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50845: LD_ADDR_VAR 0 5
50849: PUSH
50850: LD_VAR 0 1
50854: PUSH
50855: LD_INT 3
50857: PLUS
50858: PUSH
50859: LD_VAR 0 2
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: PUSH
50872: LD_VAR 0 1
50876: PUSH
50877: LD_INT 4
50879: PLUS
50880: PUSH
50881: LD_VAR 0 2
50885: PUSH
50886: LD_INT 4
50888: PLUS
50889: PUSH
50890: LD_INT 5
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: PUSH
50898: LD_VAR 0 1
50902: PUSH
50903: LD_INT 4
50905: MINUS
50906: PUSH
50907: LD_VAR 0 2
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: PUSH
50920: LD_VAR 0 1
50924: PUSH
50925: LD_VAR 0 2
50929: PUSH
50930: LD_INT 4
50932: MINUS
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: PUSH
50942: LD_VAR 0 1
50946: PUSH
50947: LD_INT 3
50949: MINUS
50950: PUSH
50951: LD_VAR 0 2
50955: PUSH
50956: LD_INT 3
50958: MINUS
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// end ; 4 :
50975: GO 51256
50977: LD_INT 4
50979: DOUBLE
50980: EQUAL
50981: IFTRUE 50985
50983: GO 51118
50985: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50986: LD_ADDR_VAR 0 5
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: LD_VAR 0 2
51000: PUSH
51001: LD_INT 4
51003: PLUS
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: LD_VAR 0 1
51017: PUSH
51018: LD_INT 3
51020: PLUS
51021: PUSH
51022: LD_VAR 0 2
51026: PUSH
51027: LD_INT 3
51029: PLUS
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 1
51043: PUSH
51044: LD_INT 4
51046: PLUS
51047: PUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_INT 4
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: PUSH
51061: LD_VAR 0 1
51065: PUSH
51066: LD_VAR 0 2
51070: PUSH
51071: LD_INT 3
51073: MINUS
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: PUSH
51083: LD_VAR 0 1
51087: PUSH
51088: LD_INT 4
51090: MINUS
51091: PUSH
51092: LD_VAR 0 2
51096: PUSH
51097: LD_INT 4
51099: MINUS
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// end ; 5 :
51116: GO 51256
51118: LD_INT 5
51120: DOUBLE
51121: EQUAL
51122: IFTRUE 51126
51124: GO 51255
51126: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51127: LD_ADDR_VAR 0 5
51131: PUSH
51132: LD_VAR 0 1
51136: PUSH
51137: LD_INT 4
51139: MINUS
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: PUSH
51154: LD_VAR 0 1
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_INT 4
51166: MINUS
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: PUSH
51176: LD_VAR 0 1
51180: PUSH
51181: LD_INT 4
51183: PLUS
51184: PUSH
51185: LD_VAR 0 2
51189: PUSH
51190: LD_INT 4
51192: PLUS
51193: PUSH
51194: LD_INT 5
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: PUSH
51202: LD_VAR 0 1
51206: PUSH
51207: LD_INT 3
51209: PLUS
51210: PUSH
51211: LD_VAR 0 2
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: PUSH
51224: LD_VAR 0 1
51228: PUSH
51229: LD_VAR 0 2
51233: PUSH
51234: LD_INT 3
51236: PLUS
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// end ; end ;
51253: GO 51256
51255: POP
// result := list ;
51256: LD_ADDR_VAR 0 4
51260: PUSH
51261: LD_VAR 0 5
51265: ST_TO_ADDR
// end ;
51266: LD_VAR 0 4
51270: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51271: LD_INT 0
51273: PPUSH
51274: PPUSH
51275: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51276: LD_VAR 0 1
51280: NOT
51281: PUSH
51282: LD_VAR 0 2
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: IN
51305: NOT
51306: OR
51307: IFFALSE 51311
// exit ;
51309: GO 51403
// tmp := [ ] ;
51311: LD_ADDR_VAR 0 5
51315: PUSH
51316: EMPTY
51317: ST_TO_ADDR
// for i in units do
51318: LD_ADDR_VAR 0 4
51322: PUSH
51323: LD_VAR 0 1
51327: PUSH
51328: FOR_IN
51329: IFFALSE 51372
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51331: LD_ADDR_VAR 0 5
51335: PUSH
51336: LD_VAR 0 5
51340: PPUSH
51341: LD_VAR 0 5
51345: PUSH
51346: LD_INT 1
51348: PLUS
51349: PPUSH
51350: LD_VAR 0 4
51354: PPUSH
51355: LD_VAR 0 2
51359: PPUSH
51360: CALL_OW 259
51364: PPUSH
51365: CALL_OW 2
51369: ST_TO_ADDR
51370: GO 51328
51372: POP
51373: POP
// if not tmp then
51374: LD_VAR 0 5
51378: NOT
51379: IFFALSE 51383
// exit ;
51381: GO 51403
// result := SortListByListDesc ( units , tmp ) ;
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_VAR 0 1
51392: PPUSH
51393: LD_VAR 0 5
51397: PPUSH
51398: CALL_OW 77
51402: ST_TO_ADDR
// end ;
51403: LD_VAR 0 3
51407: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
51412: PPUSH
// result := false ;
51413: LD_ADDR_VAR 0 3
51417: PUSH
51418: LD_INT 0
51420: ST_TO_ADDR
// x := GetX ( building ) ;
51421: LD_ADDR_VAR 0 4
51425: PUSH
51426: LD_VAR 0 2
51430: PPUSH
51431: CALL_OW 250
51435: ST_TO_ADDR
// y := GetY ( building ) ;
51436: LD_ADDR_VAR 0 5
51440: PUSH
51441: LD_VAR 0 2
51445: PPUSH
51446: CALL_OW 251
51450: ST_TO_ADDR
// if not building or not x or not y then
51451: LD_VAR 0 2
51455: NOT
51456: PUSH
51457: LD_VAR 0 4
51461: NOT
51462: OR
51463: PUSH
51464: LD_VAR 0 5
51468: NOT
51469: OR
51470: IFFALSE 51474
// exit ;
51472: GO 51566
// if GetTaskList ( unit ) then
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 437
51483: IFFALSE 51566
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51485: LD_STRING e
51487: PUSH
51488: LD_VAR 0 1
51492: PPUSH
51493: CALL_OW 437
51497: PUSH
51498: LD_INT 1
51500: ARRAY
51501: PUSH
51502: LD_INT 1
51504: ARRAY
51505: EQUAL
51506: PUSH
51507: LD_VAR 0 4
51511: PUSH
51512: LD_VAR 0 1
51516: PPUSH
51517: CALL_OW 437
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PUSH
51526: LD_INT 2
51528: ARRAY
51529: EQUAL
51530: AND
51531: PUSH
51532: LD_VAR 0 5
51536: PUSH
51537: LD_VAR 0 1
51541: PPUSH
51542: CALL_OW 437
51546: PUSH
51547: LD_INT 1
51549: ARRAY
51550: PUSH
51551: LD_INT 3
51553: ARRAY
51554: EQUAL
51555: AND
51556: IFFALSE 51566
// result := true end ;
51558: LD_ADDR_VAR 0 3
51562: PUSH
51563: LD_INT 1
51565: ST_TO_ADDR
// end ;
51566: LD_VAR 0 3
51570: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51571: LD_INT 0
51573: PPUSH
// result := false ;
51574: LD_ADDR_VAR 0 4
51578: PUSH
51579: LD_INT 0
51581: ST_TO_ADDR
// if GetTaskList ( unit ) then
51582: LD_VAR 0 1
51586: PPUSH
51587: CALL_OW 437
51591: IFFALSE 51674
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51593: LD_STRING M
51595: PUSH
51596: LD_VAR 0 1
51600: PPUSH
51601: CALL_OW 437
51605: PUSH
51606: LD_INT 1
51608: ARRAY
51609: PUSH
51610: LD_INT 1
51612: ARRAY
51613: EQUAL
51614: PUSH
51615: LD_VAR 0 2
51619: PUSH
51620: LD_VAR 0 1
51624: PPUSH
51625: CALL_OW 437
51629: PUSH
51630: LD_INT 1
51632: ARRAY
51633: PUSH
51634: LD_INT 2
51636: ARRAY
51637: EQUAL
51638: AND
51639: PUSH
51640: LD_VAR 0 3
51644: PUSH
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL_OW 437
51654: PUSH
51655: LD_INT 1
51657: ARRAY
51658: PUSH
51659: LD_INT 3
51661: ARRAY
51662: EQUAL
51663: AND
51664: IFFALSE 51674
// result := true ;
51666: LD_ADDR_VAR 0 4
51670: PUSH
51671: LD_INT 1
51673: ST_TO_ADDR
// end ; end ;
51674: LD_VAR 0 4
51678: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51679: LD_INT 0
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
// if not unit or not area then
51685: LD_VAR 0 1
51689: NOT
51690: PUSH
51691: LD_VAR 0 2
51695: NOT
51696: OR
51697: IFFALSE 51701
// exit ;
51699: GO 51865
// tmp := AreaToList ( area , i ) ;
51701: LD_ADDR_VAR 0 6
51705: PUSH
51706: LD_VAR 0 2
51710: PPUSH
51711: LD_VAR 0 5
51715: PPUSH
51716: CALL_OW 517
51720: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51721: LD_ADDR_VAR 0 5
51725: PUSH
51726: DOUBLE
51727: LD_INT 1
51729: DEC
51730: ST_TO_ADDR
51731: LD_VAR 0 6
51735: PUSH
51736: LD_INT 1
51738: ARRAY
51739: PUSH
51740: FOR_TO
51741: IFFALSE 51863
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51743: LD_ADDR_VAR 0 7
51747: PUSH
51748: LD_VAR 0 6
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: PUSH
51757: LD_VAR 0 5
51761: ARRAY
51762: PUSH
51763: LD_VAR 0 6
51767: PUSH
51768: LD_INT 2
51770: ARRAY
51771: PUSH
51772: LD_VAR 0 5
51776: ARRAY
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51782: LD_VAR 0 7
51786: PUSH
51787: LD_INT 1
51789: ARRAY
51790: PPUSH
51791: LD_VAR 0 7
51795: PUSH
51796: LD_INT 2
51798: ARRAY
51799: PPUSH
51800: CALL_OW 428
51804: PUSH
51805: LD_INT 0
51807: EQUAL
51808: IFFALSE 51861
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51810: LD_VAR 0 1
51814: PPUSH
51815: LD_VAR 0 7
51819: PUSH
51820: LD_INT 1
51822: ARRAY
51823: PPUSH
51824: LD_VAR 0 7
51828: PUSH
51829: LD_INT 2
51831: ARRAY
51832: PPUSH
51833: LD_VAR 0 3
51837: PPUSH
51838: CALL_OW 48
// result := IsPlaced ( unit ) ;
51842: LD_ADDR_VAR 0 4
51846: PUSH
51847: LD_VAR 0 1
51851: PPUSH
51852: CALL_OW 305
51856: ST_TO_ADDR
// exit ;
51857: POP
51858: POP
51859: GO 51865
// end ; end ;
51861: GO 51740
51863: POP
51864: POP
// end ;
51865: LD_VAR 0 4
51869: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
51874: PPUSH
// if not side or side > 8 then
51875: LD_VAR 0 1
51879: NOT
51880: PUSH
51881: LD_VAR 0 1
51885: PUSH
51886: LD_INT 8
51888: GREATER
51889: OR
51890: IFFALSE 51894
// exit ;
51892: GO 52081
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51894: LD_ADDR_VAR 0 4
51898: PUSH
51899: LD_INT 22
51901: PUSH
51902: LD_VAR 0 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 21
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PPUSH
51925: CALL_OW 69
51929: ST_TO_ADDR
// if not tmp then
51930: LD_VAR 0 4
51934: NOT
51935: IFFALSE 51939
// exit ;
51937: GO 52081
// enable_addtolog := true ;
51939: LD_ADDR_OWVAR 81
51943: PUSH
51944: LD_INT 1
51946: ST_TO_ADDR
// AddToLog ( [ ) ;
51947: LD_STRING [
51949: PPUSH
51950: CALL_OW 561
// for i in tmp do
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: LD_VAR 0 4
51963: PUSH
51964: FOR_IN
51965: IFFALSE 52072
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51967: LD_STRING [
51969: PUSH
51970: LD_VAR 0 3
51974: PPUSH
51975: CALL_OW 266
51979: STR
51980: PUSH
51981: LD_STRING , 
51983: STR
51984: PUSH
51985: LD_VAR 0 3
51989: PPUSH
51990: CALL_OW 250
51994: STR
51995: PUSH
51996: LD_STRING , 
51998: STR
51999: PUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: CALL_OW 251
52009: STR
52010: PUSH
52011: LD_STRING , 
52013: STR
52014: PUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: CALL_OW 254
52024: STR
52025: PUSH
52026: LD_STRING , 
52028: STR
52029: PUSH
52030: LD_VAR 0 3
52034: PPUSH
52035: LD_INT 1
52037: PPUSH
52038: CALL_OW 268
52042: STR
52043: PUSH
52044: LD_STRING , 
52046: STR
52047: PUSH
52048: LD_VAR 0 3
52052: PPUSH
52053: LD_INT 2
52055: PPUSH
52056: CALL_OW 268
52060: STR
52061: PUSH
52062: LD_STRING ],
52064: STR
52065: PPUSH
52066: CALL_OW 561
// end ;
52070: GO 51964
52072: POP
52073: POP
// AddToLog ( ]; ) ;
52074: LD_STRING ];
52076: PPUSH
52077: CALL_OW 561
// end ;
52081: LD_VAR 0 2
52085: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52086: LD_INT 0
52088: PPUSH
52089: PPUSH
52090: PPUSH
52091: PPUSH
52092: PPUSH
// if not area or not rate or not max then
52093: LD_VAR 0 1
52097: NOT
52098: PUSH
52099: LD_VAR 0 2
52103: NOT
52104: OR
52105: PUSH
52106: LD_VAR 0 4
52110: NOT
52111: OR
52112: IFFALSE 52116
// exit ;
52114: GO 52308
// while 1 do
52116: LD_INT 1
52118: IFFALSE 52308
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52120: LD_ADDR_VAR 0 9
52124: PUSH
52125: LD_VAR 0 1
52129: PPUSH
52130: LD_INT 1
52132: PPUSH
52133: CALL_OW 287
52137: PUSH
52138: LD_INT 10
52140: MUL
52141: ST_TO_ADDR
// r := rate / 10 ;
52142: LD_ADDR_VAR 0 7
52146: PUSH
52147: LD_VAR 0 2
52151: PUSH
52152: LD_INT 10
52154: DIVREAL
52155: ST_TO_ADDR
// time := 1 1$00 ;
52156: LD_ADDR_VAR 0 8
52160: PUSH
52161: LD_INT 2100
52163: ST_TO_ADDR
// if amount < min then
52164: LD_VAR 0 9
52168: PUSH
52169: LD_VAR 0 3
52173: LESS
52174: IFFALSE 52192
// r := r * 2 else
52176: LD_ADDR_VAR 0 7
52180: PUSH
52181: LD_VAR 0 7
52185: PUSH
52186: LD_INT 2
52188: MUL
52189: ST_TO_ADDR
52190: GO 52218
// if amount > max then
52192: LD_VAR 0 9
52196: PUSH
52197: LD_VAR 0 4
52201: GREATER
52202: IFFALSE 52218
// r := r / 2 ;
52204: LD_ADDR_VAR 0 7
52208: PUSH
52209: LD_VAR 0 7
52213: PUSH
52214: LD_INT 2
52216: DIVREAL
52217: ST_TO_ADDR
// time := time / r ;
52218: LD_ADDR_VAR 0 8
52222: PUSH
52223: LD_VAR 0 8
52227: PUSH
52228: LD_VAR 0 7
52232: DIVREAL
52233: ST_TO_ADDR
// if time < 0 then
52234: LD_VAR 0 8
52238: PUSH
52239: LD_INT 0
52241: LESS
52242: IFFALSE 52259
// time := time * - 1 ;
52244: LD_ADDR_VAR 0 8
52248: PUSH
52249: LD_VAR 0 8
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: MUL
52258: ST_TO_ADDR
// wait ( time ) ;
52259: LD_VAR 0 8
52263: PPUSH
52264: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52268: LD_INT 35
52270: PPUSH
52271: LD_INT 875
52273: PPUSH
52274: CALL_OW 12
52278: PPUSH
52279: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52283: LD_INT 1
52285: PPUSH
52286: LD_INT 5
52288: PPUSH
52289: CALL_OW 12
52293: PPUSH
52294: LD_VAR 0 1
52298: PPUSH
52299: LD_INT 1
52301: PPUSH
52302: CALL_OW 55
// end ;
52306: GO 52116
// end ;
52308: LD_VAR 0 5
52312: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52313: LD_INT 0
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
// if not turrets or not factories then
52323: LD_VAR 0 1
52327: NOT
52328: PUSH
52329: LD_VAR 0 2
52333: NOT
52334: OR
52335: IFFALSE 52339
// exit ;
52337: GO 52646
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52339: LD_ADDR_VAR 0 10
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: LD_INT 6
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 5
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 24
52381: PUSH
52382: LD_INT 25
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 23
52391: PUSH
52392: LD_INT 27
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 42
52405: PUSH
52406: LD_INT 43
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 44
52415: PUSH
52416: LD_INT 46
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 45
52425: PUSH
52426: LD_INT 47
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// result := [ ] ;
52443: LD_ADDR_VAR 0 3
52447: PUSH
52448: EMPTY
52449: ST_TO_ADDR
// for i in turrets do
52450: LD_ADDR_VAR 0 4
52454: PUSH
52455: LD_VAR 0 1
52459: PUSH
52460: FOR_IN
52461: IFFALSE 52644
// begin nat := GetNation ( i ) ;
52463: LD_ADDR_VAR 0 7
52467: PUSH
52468: LD_VAR 0 4
52472: PPUSH
52473: CALL_OW 248
52477: ST_TO_ADDR
// weapon := 0 ;
52478: LD_ADDR_VAR 0 8
52482: PUSH
52483: LD_INT 0
52485: ST_TO_ADDR
// if not nat then
52486: LD_VAR 0 7
52490: NOT
52491: IFFALSE 52495
// continue ;
52493: GO 52460
// for j in list [ nat ] do
52495: LD_ADDR_VAR 0 5
52499: PUSH
52500: LD_VAR 0 10
52504: PUSH
52505: LD_VAR 0 7
52509: ARRAY
52510: PUSH
52511: FOR_IN
52512: IFFALSE 52553
// if GetBWeapon ( i ) = j [ 1 ] then
52514: LD_VAR 0 4
52518: PPUSH
52519: CALL_OW 269
52523: PUSH
52524: LD_VAR 0 5
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: EQUAL
52533: IFFALSE 52551
// begin weapon := j [ 2 ] ;
52535: LD_ADDR_VAR 0 8
52539: PUSH
52540: LD_VAR 0 5
52544: PUSH
52545: LD_INT 2
52547: ARRAY
52548: ST_TO_ADDR
// break ;
52549: GO 52553
// end ;
52551: GO 52511
52553: POP
52554: POP
// if not weapon then
52555: LD_VAR 0 8
52559: NOT
52560: IFFALSE 52564
// continue ;
52562: GO 52460
// for k in factories do
52564: LD_ADDR_VAR 0 6
52568: PUSH
52569: LD_VAR 0 2
52573: PUSH
52574: FOR_IN
52575: IFFALSE 52640
// begin weapons := AvailableWeaponList ( k ) ;
52577: LD_ADDR_VAR 0 9
52581: PUSH
52582: LD_VAR 0 6
52586: PPUSH
52587: CALL_OW 478
52591: ST_TO_ADDR
// if not weapons then
52592: LD_VAR 0 9
52596: NOT
52597: IFFALSE 52601
// continue ;
52599: GO 52574
// if weapon in weapons then
52601: LD_VAR 0 8
52605: PUSH
52606: LD_VAR 0 9
52610: IN
52611: IFFALSE 52638
// begin result := [ i , weapon ] ;
52613: LD_ADDR_VAR 0 3
52617: PUSH
52618: LD_VAR 0 4
52622: PUSH
52623: LD_VAR 0 8
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// exit ;
52632: POP
52633: POP
52634: POP
52635: POP
52636: GO 52646
// end ; end ;
52638: GO 52574
52640: POP
52641: POP
// end ;
52642: GO 52460
52644: POP
52645: POP
// end ;
52646: LD_VAR 0 3
52650: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52651: LD_INT 0
52653: PPUSH
// if not side or side > 8 then
52654: LD_VAR 0 3
52658: NOT
52659: PUSH
52660: LD_VAR 0 3
52664: PUSH
52665: LD_INT 8
52667: GREATER
52668: OR
52669: IFFALSE 52673
// exit ;
52671: GO 52732
// if not range then
52673: LD_VAR 0 4
52677: NOT
52678: IFFALSE 52689
// range := - 12 ;
52680: LD_ADDR_VAR 0 4
52684: PUSH
52685: LD_INT 12
52687: NEG
52688: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52689: LD_VAR 0 1
52693: PPUSH
52694: LD_VAR 0 2
52698: PPUSH
52699: LD_VAR 0 3
52703: PPUSH
52704: LD_VAR 0 4
52708: PPUSH
52709: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52713: LD_VAR 0 1
52717: PPUSH
52718: LD_VAR 0 2
52722: PPUSH
52723: LD_VAR 0 3
52727: PPUSH
52728: CALL_OW 331
// end ;
52732: LD_VAR 0 5
52736: RET
// export function Video ( mode ) ; begin
52737: LD_INT 0
52739: PPUSH
// ingame_video = mode ;
52740: LD_ADDR_OWVAR 52
52744: PUSH
52745: LD_VAR 0 1
52749: ST_TO_ADDR
// interface_hidden = mode ;
52750: LD_ADDR_OWVAR 54
52754: PUSH
52755: LD_VAR 0 1
52759: ST_TO_ADDR
// end ;
52760: LD_VAR 0 2
52764: RET
// export function Join ( array , element ) ; begin
52765: LD_INT 0
52767: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: LD_VAR 0 1
52777: PPUSH
52778: LD_VAR 0 1
52782: PUSH
52783: LD_INT 1
52785: PLUS
52786: PPUSH
52787: LD_VAR 0 2
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// end ;
52797: LD_VAR 0 3
52801: RET
// export function JoinUnion ( array , element ) ; begin
52802: LD_INT 0
52804: PPUSH
// result := array union element ;
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 1
52814: PUSH
52815: LD_VAR 0 2
52819: UNION
52820: ST_TO_ADDR
// end ;
52821: LD_VAR 0 3
52825: RET
// export function GetBehemoths ( side ) ; begin
52826: LD_INT 0
52828: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52829: LD_ADDR_VAR 0 2
52833: PUSH
52834: LD_INT 22
52836: PUSH
52837: LD_VAR 0 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 31
52848: PUSH
52849: LD_INT 25
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PPUSH
52860: CALL_OW 69
52864: ST_TO_ADDR
// end ;
52865: LD_VAR 0 2
52869: RET
// export function Shuffle ( array ) ; var i , index ; begin
52870: LD_INT 0
52872: PPUSH
52873: PPUSH
52874: PPUSH
// result := [ ] ;
52875: LD_ADDR_VAR 0 2
52879: PUSH
52880: EMPTY
52881: ST_TO_ADDR
// if not array then
52882: LD_VAR 0 1
52886: NOT
52887: IFFALSE 52891
// exit ;
52889: GO 52990
// Randomize ;
52891: CALL_OW 10
// for i = array downto 1 do
52895: LD_ADDR_VAR 0 3
52899: PUSH
52900: DOUBLE
52901: LD_VAR 0 1
52905: INC
52906: ST_TO_ADDR
52907: LD_INT 1
52909: PUSH
52910: FOR_DOWNTO
52911: IFFALSE 52988
// begin index := rand ( 1 , array ) ;
52913: LD_ADDR_VAR 0 4
52917: PUSH
52918: LD_INT 1
52920: PPUSH
52921: LD_VAR 0 1
52925: PPUSH
52926: CALL_OW 12
52930: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52931: LD_ADDR_VAR 0 2
52935: PUSH
52936: LD_VAR 0 2
52940: PPUSH
52941: LD_VAR 0 2
52945: PUSH
52946: LD_INT 1
52948: PLUS
52949: PPUSH
52950: LD_VAR 0 1
52954: PUSH
52955: LD_VAR 0 4
52959: ARRAY
52960: PPUSH
52961: CALL_OW 2
52965: ST_TO_ADDR
// array := Delete ( array , index ) ;
52966: LD_ADDR_VAR 0 1
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: LD_VAR 0 4
52980: PPUSH
52981: CALL_OW 3
52985: ST_TO_ADDR
// end ;
52986: GO 52910
52988: POP
52989: POP
// end ;
52990: LD_VAR 0 2
52994: RET
// export function GetBaseMaterials ( base ) ; begin
52995: LD_INT 0
52997: PPUSH
// result := [ 0 , 0 , 0 ] ;
52998: LD_ADDR_VAR 0 2
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// if not base then
53017: LD_VAR 0 1
53021: NOT
53022: IFFALSE 53026
// exit ;
53024: GO 53075
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53026: LD_ADDR_VAR 0 2
53030: PUSH
53031: LD_VAR 0 1
53035: PPUSH
53036: LD_INT 1
53038: PPUSH
53039: CALL_OW 275
53043: PUSH
53044: LD_VAR 0 1
53048: PPUSH
53049: LD_INT 2
53051: PPUSH
53052: CALL_OW 275
53056: PUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: LD_INT 3
53064: PPUSH
53065: CALL_OW 275
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// end ;
53075: LD_VAR 0 2
53079: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53080: LD_INT 0
53082: PPUSH
53083: PPUSH
// result := array ;
53084: LD_ADDR_VAR 0 3
53088: PUSH
53089: LD_VAR 0 1
53093: ST_TO_ADDR
// if size > 0 then
53094: LD_VAR 0 2
53098: PUSH
53099: LD_INT 0
53101: GREATER
53102: IFFALSE 53148
// for i := array downto size do
53104: LD_ADDR_VAR 0 4
53108: PUSH
53109: DOUBLE
53110: LD_VAR 0 1
53114: INC
53115: ST_TO_ADDR
53116: LD_VAR 0 2
53120: PUSH
53121: FOR_DOWNTO
53122: IFFALSE 53146
// result := Delete ( result , result ) ;
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: LD_VAR 0 3
53133: PPUSH
53134: LD_VAR 0 3
53138: PPUSH
53139: CALL_OW 3
53143: ST_TO_ADDR
53144: GO 53121
53146: POP
53147: POP
// end ;
53148: LD_VAR 0 3
53152: RET
// export function ComExit ( unit ) ; var tmp ; begin
53153: LD_INT 0
53155: PPUSH
53156: PPUSH
// if not IsInUnit ( unit ) then
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 310
53166: NOT
53167: IFFALSE 53171
// exit ;
53169: GO 53231
// tmp := IsInUnit ( unit ) ;
53171: LD_ADDR_VAR 0 3
53175: PUSH
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL_OW 310
53185: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53186: LD_VAR 0 3
53190: PPUSH
53191: CALL_OW 247
53195: PUSH
53196: LD_INT 2
53198: EQUAL
53199: IFFALSE 53212
// ComExitVehicle ( unit ) else
53201: LD_VAR 0 1
53205: PPUSH
53206: CALL_OW 121
53210: GO 53221
// ComExitBuilding ( unit ) ;
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 122
// result := tmp ;
53221: LD_ADDR_VAR 0 2
53225: PUSH
53226: LD_VAR 0 3
53230: ST_TO_ADDR
// end ;
53231: LD_VAR 0 2
53235: RET
// export function ResetHc ; begin
53236: LD_INT 0
53238: PPUSH
// InitHc ;
53239: CALL_OW 19
// hc_importance := 0 ;
53243: LD_ADDR_OWVAR 32
53247: PUSH
53248: LD_INT 0
53250: ST_TO_ADDR
// end ;
53251: LD_VAR 0 1
53255: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53256: LD_INT 0
53258: PPUSH
53259: PPUSH
53260: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53261: LD_ADDR_VAR 0 6
53265: PUSH
53266: LD_VAR 0 1
53270: PUSH
53271: LD_VAR 0 3
53275: PLUS
53276: PUSH
53277: LD_INT 2
53279: DIV
53280: ST_TO_ADDR
// if _x < 0 then
53281: LD_VAR 0 6
53285: PUSH
53286: LD_INT 0
53288: LESS
53289: IFFALSE 53306
// _x := _x * - 1 ;
53291: LD_ADDR_VAR 0 6
53295: PUSH
53296: LD_VAR 0 6
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: MUL
53305: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53306: LD_ADDR_VAR 0 7
53310: PUSH
53311: LD_VAR 0 2
53315: PUSH
53316: LD_VAR 0 4
53320: PLUS
53321: PUSH
53322: LD_INT 2
53324: DIV
53325: ST_TO_ADDR
// if _y < 0 then
53326: LD_VAR 0 7
53330: PUSH
53331: LD_INT 0
53333: LESS
53334: IFFALSE 53351
// _y := _y * - 1 ;
53336: LD_ADDR_VAR 0 7
53340: PUSH
53341: LD_VAR 0 7
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: MUL
53350: ST_TO_ADDR
// result := [ _x , _y ] ;
53351: LD_ADDR_VAR 0 5
53355: PUSH
53356: LD_VAR 0 6
53360: PUSH
53361: LD_VAR 0 7
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// end ;
53370: LD_VAR 0 5
53374: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53375: LD_INT 0
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
// task := GetTaskList ( unit ) ;
53381: LD_ADDR_VAR 0 7
53385: PUSH
53386: LD_VAR 0 1
53390: PPUSH
53391: CALL_OW 437
53395: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53396: LD_VAR 0 7
53400: NOT
53401: PUSH
53402: LD_VAR 0 1
53406: PPUSH
53407: LD_VAR 0 2
53411: PPUSH
53412: CALL_OW 308
53416: NOT
53417: AND
53418: IFFALSE 53422
// exit ;
53420: GO 53540
// if IsInArea ( unit , area ) then
53422: LD_VAR 0 1
53426: PPUSH
53427: LD_VAR 0 2
53431: PPUSH
53432: CALL_OW 308
53436: IFFALSE 53454
// begin ComMoveToArea ( unit , goAway ) ;
53438: LD_VAR 0 1
53442: PPUSH
53443: LD_VAR 0 3
53447: PPUSH
53448: CALL_OW 113
// exit ;
53452: GO 53540
// end ; if task [ 1 ] [ 1 ] <> M then
53454: LD_VAR 0 7
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: PUSH
53467: LD_STRING M
53469: NONEQUAL
53470: IFFALSE 53474
// exit ;
53472: GO 53540
// x := task [ 1 ] [ 2 ] ;
53474: LD_ADDR_VAR 0 5
53478: PUSH
53479: LD_VAR 0 7
53483: PUSH
53484: LD_INT 1
53486: ARRAY
53487: PUSH
53488: LD_INT 2
53490: ARRAY
53491: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53492: LD_ADDR_VAR 0 6
53496: PUSH
53497: LD_VAR 0 7
53501: PUSH
53502: LD_INT 1
53504: ARRAY
53505: PUSH
53506: LD_INT 3
53508: ARRAY
53509: ST_TO_ADDR
// if InArea ( x , y , area ) then
53510: LD_VAR 0 5
53514: PPUSH
53515: LD_VAR 0 6
53519: PPUSH
53520: LD_VAR 0 2
53524: PPUSH
53525: CALL_OW 309
53529: IFFALSE 53540
// ComStop ( unit ) ;
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 141
// end ;
53540: LD_VAR 0 4
53544: RET
