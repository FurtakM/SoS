// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// _x := ( x1 + x2 ) div 2 ;
   5: LD_ADDR_VAR 0 6
   9: PUSH
  10: LD_VAR 0 1
  14: PUSH
  15: LD_VAR 0 3
  19: PLUS
  20: PUSH
  21: LD_INT 2
  23: DIV
  24: ST_TO_ADDR
// if _x < 0 then
  25: LD_VAR 0 6
  29: PUSH
  30: LD_INT 0
  32: LESS
  33: IFFALSE 50
// _x := _x * - 1 ;
  35: LD_ADDR_VAR 0 6
  39: PUSH
  40: LD_VAR 0 6
  44: PUSH
  45: LD_INT 1
  47: NEG
  48: MUL
  49: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
  50: LD_ADDR_VAR 0 7
  54: PUSH
  55: LD_VAR 0 2
  59: PUSH
  60: LD_VAR 0 4
  64: PLUS
  65: PUSH
  66: LD_INT 2
  68: DIV
  69: ST_TO_ADDR
// if _y < 0 then
  70: LD_VAR 0 7
  74: PUSH
  75: LD_INT 0
  77: LESS
  78: IFFALSE 95
// _y := _y * - 1 ;
  80: LD_ADDR_VAR 0 7
  84: PUSH
  85: LD_VAR 0 7
  89: PUSH
  90: LD_INT 1
  92: NEG
  93: MUL
  94: ST_TO_ADDR
// result := [ _x , _y ] ;
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: LD_VAR 0 6
 104: PUSH
 105: LD_VAR 0 7
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: ST_TO_ADDR
// end ;
 114: LD_VAR 0 5
 118: RET
// every 1 do
 119: GO 121
 121: DISABLE
// begin display_strings := PointBetweenXY ( 24 , 24 , 32 , 24 ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: LD_INT 24
 129: PPUSH
 130: LD_INT 24
 132: PPUSH
 133: LD_INT 32
 135: PPUSH
 136: LD_INT 24
 138: PPUSH
 139: CALL 0 0 4
 143: ST_TO_ADDR
// ComAgressiveMove ( a1 , 32 , 24 ) ;
 144: LD_INT 9
 146: PPUSH
 147: LD_INT 32
 149: PPUSH
 150: LD_INT 24
 152: PPUSH
 153: CALL_OW 114
// end ;
 157: END
